{"pr_number": 1306, "pr_title": "Validation for Model Configs", "pr_createdAt": "2020-05-06T23:33:53Z", "pr_url": "https://github.com/yahoo/elide/pull/1306", "timeline": [{"oid": "d0f9d3867b4352cd307f581ea797f3ee89ef6340", "url": "https://github.com/yahoo/elide/commit/d0f9d3867b4352cd307f581ea797f3ee89ef6340", "message": "Codacy checks", "committedDate": "2020-05-07T15:57:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQxNjA2MQ==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r423416061", "bodyText": "is any thing other than Java be used here?", "author": "moizarafat", "createdAt": "2020-05-12T01:47:52Z", "path": "elide-contrib/elide-dynamic-config-helpers/README.md", "diffHunk": "@@ -0,0 +1,19 @@\n+## Validation for Dynamic Config\n+\n+Validate the config files in local before deployment.\n+\n+Sample command:\n+```java\n+Usage: java -cp <Jar File Name> com.yahoo.elide.contrib.dynamicconfighelpers.validator.DynamicConfigValidator <Path for Model Configs Directory>\n+```\n+Expected Model Configs Directory Structure:\n+```java", "originalCommit": "68a171b8bc2c345cf28be2dd26ff3802ea65cffe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY3MzIyNg==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428673226", "bodyText": "changed to text", "author": "rishi-aga", "createdAt": "2020-05-21T14:06:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQxNjA2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQxNjM2Mw==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r423416363", "bodyText": "lets include the mvn command to generate the jar too.", "author": "moizarafat", "createdAt": "2020-05-12T01:49:04Z", "path": "elide-contrib/elide-dynamic-config-helpers/README.md", "diffHunk": "@@ -0,0 +1,19 @@\n+## Validation for Dynamic Config\n+\n+Validate the config files in local before deployment.\n+\n+Sample command:\n+```java", "originalCommit": "68a171b8bc2c345cf28be2dd26ff3802ea65cffe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzNDU4NA==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r423434584", "bodyText": "or mention downloading the jar from maven.", "author": "moizarafat", "createdAt": "2020-05-12T03:03:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQxNjM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY3MzM2OQ==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428673369", "bodyText": "added mvn install steps", "author": "rishi-aga", "createdAt": "2020-05-21T14:06:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQxNjM2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1OTU3NA==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r423759574", "bodyText": "Please include java doc here.", "author": "moizarafat", "createdAt": "2020-05-12T14:03:39Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.validator;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.DynamicConfigHelpers;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+\n+import org.apache.commons.io.FileUtils;\n+\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+@Slf4j", "originalCommit": "68a171b8bc2c345cf28be2dd26ff3802ea65cffe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3ODY4NA==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428378684", "bodyText": "Added.", "author": "rishi-aga", "createdAt": "2020-05-21T00:18:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1OTU3NA=="}], "type": "inlineReview"}, {"oid": "30cc2928c104db17207e6b9d18d87c45a6171ec0", "url": "https://github.com/yahoo/elide/commit/30cc2928c104db17207e6b9d18d87c45a6171ec0", "message": "Codacy", "committedDate": "2020-05-17T01:32:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzOTgxOQ==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r426939819", "bodyText": "as per the latest schema, this value will not work.", "author": "moizarafat", "createdAt": "2020-05-18T23:07:31Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/test/resources/validator/valid/security.hjson", "diffHunk": "@@ -0,0 +1,18 @@\n+{\n+    roles : [\n+        admin\n+        guest\n+        <% role %>\n+        ]\n+    rules: [\n+        {\n+            type: filter\n+            filter: company_id=in=${principal.companies}", "originalCommit": "30cc2928c104db17207e6b9d18d87c45a6171ec0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM2NTc4Mw==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428365783", "bodyText": "changed to filter enum", "author": "rishi-aga", "createdAt": "2020-05-20T23:34:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzOTgxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzOTkxNg==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r426939916", "bodyText": "as per the latest schema, this value will not work.", "author": "moizarafat", "createdAt": "2020-05-18T23:07:45Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/test/resources/validator/valid/security.hjson", "diffHunk": "@@ -0,0 +1,18 @@\n+{\n+    roles : [\n+        admin\n+        guest\n+        <% role %>\n+        ]\n+    rules: [\n+        {\n+            type: filter\n+            filter: company_id=in=${principal.companies}\n+            name: User belongs to company <% bar%>\n+        },\n+        {\n+            filter: id==${principal.id}", "originalCommit": "30cc2928c104db17207e6b9d18d87c45a6171ec0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM2NTgwOQ==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428365809", "bodyText": "changed to filter enum", "author": "rishi-aga", "createdAt": "2020-05-20T23:34:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzOTkxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzOTk4Nw==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r426939987", "bodyText": "as per the latest schema, this value will not work.", "author": "moizarafat", "createdAt": "2020-05-18T23:07:58Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/test/resources/validator/undefined_handlebar/security.hjson", "diffHunk": "@@ -0,0 +1,18 @@\n+{\n+    roles : [\n+        admin\n+        guest\n+        <% foobar %>\n+        ]\n+    rules: [\n+        {\n+            type: filter\n+            filter: company_id=in=${principal.companies}", "originalCommit": "30cc2928c104db17207e6b9d18d87c45a6171ec0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM2NTg0OA==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428365848", "bodyText": "changed to filter enum", "author": "rishi-aga", "createdAt": "2020-05-20T23:34:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzOTk4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzOTk5OA==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r426939998", "bodyText": "as per the latest schema, this value will not work.", "author": "moizarafat", "createdAt": "2020-05-18T23:08:03Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/test/resources/validator/undefined_handlebar/security.hjson", "diffHunk": "@@ -0,0 +1,18 @@\n+{\n+    roles : [\n+        admin\n+        guest\n+        <% foobar %>\n+        ]\n+    rules: [\n+        {\n+            type: filter\n+            filter: company_id=in=${principal.companies}\n+            name: User belongs to company\n+        },\n+        {\n+            filter: id==${principal.id}", "originalCommit": "30cc2928c104db17207e6b9d18d87c45a6171ec0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM2NTg5Mg==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428365892", "bodyText": "changed to filter enum", "author": "rishi-aga", "createdAt": "2020-05-20T23:34:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzOTk5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ4NjYwNg==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r427486606", "bodyText": "Use File.separator.", "author": "aklish", "createdAt": "2020-05-19T17:46:33Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/DynamicConfigHelpers.java", "diffHunk": "@@ -32,10 +32,10 @@\n  */\n public class DynamicConfigHelpers {\n \n-    private static final String TABLE_CONFIG_PATH = \"tables\" + File.separator;\n-    private static final String SECURITY_CONFIG_PATH = \"security.hjson\";\n-    private static final String VARIABLE_CONFIG_PATH = \"variables.hjson\";\n-    private static final String NEW_LINE = \"\\n\";\n+    public static final String TABLE_CONFIG_PATH = \"tables/\";", "originalCommit": "30cc2928c104db17207e6b9d18d87c45a6171ec0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM2NTk0Ng==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428365946", "bodyText": "updated.", "author": "rishi-aga", "createdAt": "2020-05-20T23:34:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ4NjYwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5MDcxNw==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r427490717", "bodyText": "There are more DDL and DCL commands than this:\nALTER, COMMENT, CREATE, DESCRIBE, SHOW, USE, GRANT, REVOKE, CONNECT, LOCK, EXPLAIN, CALL, MERGE, RENAME", "author": "aklish", "createdAt": "2020-05-19T17:52:51Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.validator;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.DynamicConfigHelpers;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+\n+import org.apache.commons.io.FileUtils;\n+\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+@Data\n+public class DynamicConfigValidator {\n+\n+    private static ElideTableConfig elideTableConfig;\n+    private static ElideSecurityConfig elideSecurityConfig;\n+    private static Map<String, Object> variables;\n+    private static final String[] SQL_DISALLOWED_WORDS = new String[] { \"DROP \", \"TRUNCATE \", \"DELETE \", \"INSERT \",", "originalCommit": "30cc2928c104db17207e6b9d18d87c45a6171ec0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5MzY4OQ==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r427493689", "bodyText": "We should also add a semicolon to the list.", "author": "aklish", "createdAt": "2020-05-19T17:57:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5MDcxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM2NjYwNQ==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428366605", "bodyText": "Added additional keywords.\nAdded explicit check that sql should not contain semicolon.\nChanged to split SQL on whitespaces and match exact keywords now", "author": "rishi-aga", "createdAt": "2020-05-20T23:37:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5MDcxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5MTUyNw==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r427491527", "bodyText": "Use an argument parser like org.apache.commons.cli.Options", "author": "aklish", "createdAt": "2020-05-19T17:54:13Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.validator;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.DynamicConfigHelpers;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+\n+import org.apache.commons.io.FileUtils;\n+\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+@Data\n+public class DynamicConfigValidator {\n+\n+    private static ElideTableConfig elideTableConfig;\n+    private static ElideSecurityConfig elideSecurityConfig;\n+    private static Map<String, Object> variables;\n+    private static final String[] SQL_DISALLOWED_WORDS = new String[] { \"DROP \", \"TRUNCATE \", \"DELETE \", \"INSERT \",\n+            \"UPDATE \" };\n+    private static final String[] ROLE_NAME_DISALLOWED_WORDS = new String[] { \",\" };\n+\n+    public static void main(String[] args) {\n+\n+        if (args == null || args.length == 0) {\n+            usage();\n+            throw new IllegalStateException(\"No Arguments provided!\");\n+        }\n+\n+        if (args.length > 1 || DynamicConfigHelpers.isNullOrEmpty(args[0])) {", "originalCommit": "30cc2928c104db17207e6b9d18d87c45a6171ec0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM2NjY3NA==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428366674", "bodyText": "updated.", "author": "rishi-aga", "createdAt": "2020-05-20T23:37:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5MTUyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5NDYyOA==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r427494628", "bodyText": "We also need to validate the metric and column definitions.  They should not contain any semi colons - that would allow them to insert SQL statements.", "author": "aklish", "createdAt": "2020-05-19T17:58:52Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.validator;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.DynamicConfigHelpers;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+\n+import org.apache.commons.io.FileUtils;\n+\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+@Data\n+public class DynamicConfigValidator {\n+\n+    private static ElideTableConfig elideTableConfig;\n+    private static ElideSecurityConfig elideSecurityConfig;\n+    private static Map<String, Object> variables;\n+    private static final String[] SQL_DISALLOWED_WORDS = new String[] { \"DROP \", \"TRUNCATE \", \"DELETE \", \"INSERT \",\n+            \"UPDATE \" };\n+    private static final String[] ROLE_NAME_DISALLOWED_WORDS = new String[] { \",\" };\n+\n+    public static void main(String[] args) {\n+\n+        if (args == null || args.length == 0) {\n+            usage();\n+            throw new IllegalStateException(\"No Arguments provided!\");\n+        }\n+\n+        if (args.length > 1 || DynamicConfigHelpers.isNullOrEmpty(args[0])) {\n+            usage();\n+            throw new IllegalStateException(\"Expecting One non-empty argument only!\");\n+        }\n+\n+        File file = new File(args[0]);\n+        String absoluteBasePath = DynamicConfigHelpers.formatFilePath(file.getAbsolutePath());\n+        log.info(\"Absolute Path for Model Configs Directory: \" + absoluteBasePath);\n+\n+        if (!file.isDirectory()) {\n+            usage();\n+            throw new IllegalStateException(\"Model Configs Directory doesn't exists\");\n+        }\n+\n+        readVariableConfig(absoluteBasePath);\n+        if (readSecurityConfig(absoluteBasePath)) {\n+            validateRoleInSecurityConfig(elideSecurityConfig);\n+        }\n+        if (readTableConfig(absoluteBasePath)) {\n+            validateSqlInTableConfig(elideTableConfig);\n+        }\n+\n+        log.info(\"Configs Validation Passed!\");\n+    }\n+\n+    private static boolean readVariableConfig(String absoluteBasePath) {\n+        boolean isVariableConfig = exists(absoluteBasePath + DynamicConfigHelpers.VARIABLE_CONFIG_PATH);\n+        try {\n+            variables = isVariableConfig ? DynamicConfigHelpers.getVaribalesPojo(absoluteBasePath)\n+                    : Collections.<String, Object>emptyMap();\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Error while parsing variable config at location: \" + absoluteBasePath, e);\n+        }\n+        return isVariableConfig;\n+    }\n+\n+    private static boolean readSecurityConfig(String absoluteBasePath) {\n+        boolean isSecurityConfig = exists(absoluteBasePath + DynamicConfigHelpers.SECURITY_CONFIG_PATH);\n+        if (isSecurityConfig) {\n+            String securityConfigContent = DynamicConfigHelpers\n+                    .readConfigFile(new File(absoluteBasePath + DynamicConfigHelpers.SECURITY_CONFIG_PATH));\n+            validateConfigForMissingVariables(securityConfigContent, variables);\n+            try {\n+                elideSecurityConfig = DynamicConfigHelpers.getElideSecurityPojo(absoluteBasePath, variables);\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Error while parsing security config at location: \" + absoluteBasePath,\n+                        e);\n+            }\n+        }\n+        return isSecurityConfig;\n+    }\n+\n+    private static boolean readTableConfig(String absoluteBasePath) {\n+        boolean isTableConfig = exists(absoluteBasePath + DynamicConfigHelpers.TABLE_CONFIG_PATH);\n+        if (isTableConfig) {\n+            Collection<File> tableConfigs = FileUtils.listFiles(\n+                    new File(absoluteBasePath + DynamicConfigHelpers.TABLE_CONFIG_PATH), new String[] { \"hjson\" },\n+                    false);\n+            if (tableConfigs.isEmpty()) {\n+                usage();\n+                throw new IllegalStateException(\"No Table Configs found at location: \" + absoluteBasePath\n+                        + DynamicConfigHelpers.TABLE_CONFIG_PATH);\n+            }\n+            for (File tableConfig : tableConfigs) {\n+                String tableConfigContent = DynamicConfigHelpers.readConfigFile(tableConfig);\n+                validateConfigForMissingVariables(tableConfigContent, variables);\n+            }\n+            try {\n+                elideTableConfig = DynamicConfigHelpers.getElideTablePojo(absoluteBasePath, variables);\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Error while parsing table config at location: \" + absoluteBasePath, e);\n+            }\n+        } else {\n+            usage();\n+            throw new IllegalStateException(\"Table Configs Directory doesn't exists at location: \" + absoluteBasePath\n+                    + DynamicConfigHelpers.TABLE_CONFIG_PATH);\n+        }\n+        return isTableConfig;\n+    }\n+\n+    private static boolean exists(String filePath) {\n+        return new File(filePath).exists();\n+    }\n+\n+    private static void validateConfigForMissingVariables(String config, Map<String, Object> variables) {\n+        Pattern regex = Pattern.compile(\"<%(.*?)%>\");\n+        Matcher regexMatcher = regex.matcher(config);\n+        while (regexMatcher.find()) {\n+            String str = regexMatcher.group(1).trim();\n+            if (!variables.containsKey(str)) {\n+                throw new IllegalStateException(str + \" is used as a variable in either table or security config files \"\n+                        + \"but is not defined in variables config file.\");\n+            }\n+        }\n+    }\n+\n+    private static boolean validateSqlInTableConfig(ElideTableConfig elideTableConfig) {", "originalCommit": "30cc2928c104db17207e6b9d18d87c45a6171ec0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM2Njc0NA==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428366744", "bodyText": "updated", "author": "rishi-aga", "createdAt": "2020-05-20T23:37:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5NDYyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0MzgyMw==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r427543823", "bodyText": "Build the full path once in this function.", "author": "aklish", "createdAt": "2020-05-19T19:21:57Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.validator;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.DynamicConfigHelpers;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+\n+import org.apache.commons.io.FileUtils;\n+\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+@Data\n+public class DynamicConfigValidator {\n+\n+    private static ElideTableConfig elideTableConfig;\n+    private static ElideSecurityConfig elideSecurityConfig;\n+    private static Map<String, Object> variables;\n+    private static final String[] SQL_DISALLOWED_WORDS = new String[] { \"DROP \", \"TRUNCATE \", \"DELETE \", \"INSERT \",\n+            \"UPDATE \" };\n+    private static final String[] ROLE_NAME_DISALLOWED_WORDS = new String[] { \",\" };\n+\n+    public static void main(String[] args) {\n+\n+        if (args == null || args.length == 0) {\n+            usage();\n+            throw new IllegalStateException(\"No Arguments provided!\");\n+        }\n+\n+        if (args.length > 1 || DynamicConfigHelpers.isNullOrEmpty(args[0])) {\n+            usage();\n+            throw new IllegalStateException(\"Expecting One non-empty argument only!\");\n+        }\n+\n+        File file = new File(args[0]);\n+        String absoluteBasePath = DynamicConfigHelpers.formatFilePath(file.getAbsolutePath());\n+        log.info(\"Absolute Path for Model Configs Directory: \" + absoluteBasePath);\n+\n+        if (!file.isDirectory()) {\n+            usage();\n+            throw new IllegalStateException(\"Model Configs Directory doesn't exists\");\n+        }\n+\n+        readVariableConfig(absoluteBasePath);\n+        if (readSecurityConfig(absoluteBasePath)) {\n+            validateRoleInSecurityConfig(elideSecurityConfig);\n+        }\n+        if (readTableConfig(absoluteBasePath)) {\n+            validateSqlInTableConfig(elideTableConfig);\n+        }\n+\n+        log.info(\"Configs Validation Passed!\");\n+    }\n+\n+    private static boolean readVariableConfig(String absoluteBasePath) {\n+        boolean isVariableConfig = exists(absoluteBasePath + DynamicConfigHelpers.VARIABLE_CONFIG_PATH);\n+        try {\n+            variables = isVariableConfig ? DynamicConfigHelpers.getVaribalesPojo(absoluteBasePath)\n+                    : Collections.<String, Object>emptyMap();\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Error while parsing variable config at location: \" + absoluteBasePath, e);\n+        }\n+        return isVariableConfig;\n+    }\n+\n+    private static boolean readSecurityConfig(String absoluteBasePath) {\n+        boolean isSecurityConfig = exists(absoluteBasePath + DynamicConfigHelpers.SECURITY_CONFIG_PATH);", "originalCommit": "30cc2928c104db17207e6b9d18d87c45a6171ec0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM2Njc4Ng==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428366786", "bodyText": "updated", "author": "rishi-aga", "createdAt": "2020-05-20T23:37:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0MzgyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0NDIyNw==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r427544227", "bodyText": "As a general rule, most code should not throw or catch Exception.  Please be explicit.", "author": "aklish", "createdAt": "2020-05-19T19:22:36Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.validator;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.DynamicConfigHelpers;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+\n+import org.apache.commons.io.FileUtils;\n+\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+@Data\n+public class DynamicConfigValidator {\n+\n+    private static ElideTableConfig elideTableConfig;\n+    private static ElideSecurityConfig elideSecurityConfig;\n+    private static Map<String, Object> variables;\n+    private static final String[] SQL_DISALLOWED_WORDS = new String[] { \"DROP \", \"TRUNCATE \", \"DELETE \", \"INSERT \",\n+            \"UPDATE \" };\n+    private static final String[] ROLE_NAME_DISALLOWED_WORDS = new String[] { \",\" };\n+\n+    public static void main(String[] args) {\n+\n+        if (args == null || args.length == 0) {\n+            usage();\n+            throw new IllegalStateException(\"No Arguments provided!\");\n+        }\n+\n+        if (args.length > 1 || DynamicConfigHelpers.isNullOrEmpty(args[0])) {\n+            usage();\n+            throw new IllegalStateException(\"Expecting One non-empty argument only!\");\n+        }\n+\n+        File file = new File(args[0]);\n+        String absoluteBasePath = DynamicConfigHelpers.formatFilePath(file.getAbsolutePath());\n+        log.info(\"Absolute Path for Model Configs Directory: \" + absoluteBasePath);\n+\n+        if (!file.isDirectory()) {\n+            usage();\n+            throw new IllegalStateException(\"Model Configs Directory doesn't exists\");\n+        }\n+\n+        readVariableConfig(absoluteBasePath);\n+        if (readSecurityConfig(absoluteBasePath)) {\n+            validateRoleInSecurityConfig(elideSecurityConfig);\n+        }\n+        if (readTableConfig(absoluteBasePath)) {\n+            validateSqlInTableConfig(elideTableConfig);\n+        }\n+\n+        log.info(\"Configs Validation Passed!\");\n+    }\n+\n+    private static boolean readVariableConfig(String absoluteBasePath) {\n+        boolean isVariableConfig = exists(absoluteBasePath + DynamicConfigHelpers.VARIABLE_CONFIG_PATH);\n+        try {\n+            variables = isVariableConfig ? DynamicConfigHelpers.getVaribalesPojo(absoluteBasePath)\n+                    : Collections.<String, Object>emptyMap();\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Error while parsing variable config at location: \" + absoluteBasePath, e);\n+        }\n+        return isVariableConfig;\n+    }\n+\n+    private static boolean readSecurityConfig(String absoluteBasePath) {\n+        boolean isSecurityConfig = exists(absoluteBasePath + DynamicConfigHelpers.SECURITY_CONFIG_PATH);\n+        if (isSecurityConfig) {\n+            String securityConfigContent = DynamicConfigHelpers\n+                    .readConfigFile(new File(absoluteBasePath + DynamicConfigHelpers.SECURITY_CONFIG_PATH));\n+            validateConfigForMissingVariables(securityConfigContent, variables);\n+            try {\n+                elideSecurityConfig = DynamicConfigHelpers.getElideSecurityPojo(absoluteBasePath, variables);\n+            } catch (Exception e) {", "originalCommit": "30cc2928c104db17207e6b9d18d87c45a6171ec0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0NDcxMw==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r427544713", "bodyText": "Only checked exceptions need to be mapped to IllegalStateException.  Runtime exceptions don't need to be swallowed here.", "author": "aklish", "createdAt": "2020-05-19T19:23:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0NDIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM2NjgxOA==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428366818", "bodyText": "updated", "author": "rishi-aga", "createdAt": "2020-05-20T23:37:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0NDIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0NTAyMw==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r427545023", "bodyText": "Build the file path once.", "author": "aklish", "createdAt": "2020-05-19T19:24:05Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.validator;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.DynamicConfigHelpers;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+\n+import org.apache.commons.io.FileUtils;\n+\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+@Data\n+public class DynamicConfigValidator {\n+\n+    private static ElideTableConfig elideTableConfig;\n+    private static ElideSecurityConfig elideSecurityConfig;\n+    private static Map<String, Object> variables;\n+    private static final String[] SQL_DISALLOWED_WORDS = new String[] { \"DROP \", \"TRUNCATE \", \"DELETE \", \"INSERT \",\n+            \"UPDATE \" };\n+    private static final String[] ROLE_NAME_DISALLOWED_WORDS = new String[] { \",\" };\n+\n+    public static void main(String[] args) {\n+\n+        if (args == null || args.length == 0) {\n+            usage();\n+            throw new IllegalStateException(\"No Arguments provided!\");\n+        }\n+\n+        if (args.length > 1 || DynamicConfigHelpers.isNullOrEmpty(args[0])) {\n+            usage();\n+            throw new IllegalStateException(\"Expecting One non-empty argument only!\");\n+        }\n+\n+        File file = new File(args[0]);\n+        String absoluteBasePath = DynamicConfigHelpers.formatFilePath(file.getAbsolutePath());\n+        log.info(\"Absolute Path for Model Configs Directory: \" + absoluteBasePath);\n+\n+        if (!file.isDirectory()) {\n+            usage();\n+            throw new IllegalStateException(\"Model Configs Directory doesn't exists\");\n+        }\n+\n+        readVariableConfig(absoluteBasePath);\n+        if (readSecurityConfig(absoluteBasePath)) {\n+            validateRoleInSecurityConfig(elideSecurityConfig);\n+        }\n+        if (readTableConfig(absoluteBasePath)) {\n+            validateSqlInTableConfig(elideTableConfig);\n+        }\n+\n+        log.info(\"Configs Validation Passed!\");\n+    }\n+\n+    private static boolean readVariableConfig(String absoluteBasePath) {\n+        boolean isVariableConfig = exists(absoluteBasePath + DynamicConfigHelpers.VARIABLE_CONFIG_PATH);\n+        try {\n+            variables = isVariableConfig ? DynamicConfigHelpers.getVaribalesPojo(absoluteBasePath)\n+                    : Collections.<String, Object>emptyMap();\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Error while parsing variable config at location: \" + absoluteBasePath, e);\n+        }\n+        return isVariableConfig;\n+    }\n+\n+    private static boolean readSecurityConfig(String absoluteBasePath) {\n+        boolean isSecurityConfig = exists(absoluteBasePath + DynamicConfigHelpers.SECURITY_CONFIG_PATH);\n+        if (isSecurityConfig) {\n+            String securityConfigContent = DynamicConfigHelpers\n+                    .readConfigFile(new File(absoluteBasePath + DynamicConfigHelpers.SECURITY_CONFIG_PATH));\n+            validateConfigForMissingVariables(securityConfigContent, variables);\n+            try {\n+                elideSecurityConfig = DynamicConfigHelpers.getElideSecurityPojo(absoluteBasePath, variables);\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Error while parsing security config at location: \" + absoluteBasePath,\n+                        e);\n+            }\n+        }\n+        return isSecurityConfig;\n+    }\n+\n+    private static boolean readTableConfig(String absoluteBasePath) {\n+        boolean isTableConfig = exists(absoluteBasePath + DynamicConfigHelpers.TABLE_CONFIG_PATH);", "originalCommit": "30cc2928c104db17207e6b9d18d87c45a6171ec0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM2Njg1OQ==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428366859", "bodyText": "updated", "author": "rishi-aga", "createdAt": "2020-05-20T23:37:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0NTAyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0NTU4NA==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r427545584", "bodyText": "Don't catch or throw Exception.", "author": "aklish", "createdAt": "2020-05-19T19:25:07Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.validator;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.DynamicConfigHelpers;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+\n+import org.apache.commons.io.FileUtils;\n+\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+@Data\n+public class DynamicConfigValidator {\n+\n+    private static ElideTableConfig elideTableConfig;\n+    private static ElideSecurityConfig elideSecurityConfig;\n+    private static Map<String, Object> variables;\n+    private static final String[] SQL_DISALLOWED_WORDS = new String[] { \"DROP \", \"TRUNCATE \", \"DELETE \", \"INSERT \",\n+            \"UPDATE \" };\n+    private static final String[] ROLE_NAME_DISALLOWED_WORDS = new String[] { \",\" };\n+\n+    public static void main(String[] args) {\n+\n+        if (args == null || args.length == 0) {\n+            usage();\n+            throw new IllegalStateException(\"No Arguments provided!\");\n+        }\n+\n+        if (args.length > 1 || DynamicConfigHelpers.isNullOrEmpty(args[0])) {\n+            usage();\n+            throw new IllegalStateException(\"Expecting One non-empty argument only!\");\n+        }\n+\n+        File file = new File(args[0]);\n+        String absoluteBasePath = DynamicConfigHelpers.formatFilePath(file.getAbsolutePath());\n+        log.info(\"Absolute Path for Model Configs Directory: \" + absoluteBasePath);\n+\n+        if (!file.isDirectory()) {\n+            usage();\n+            throw new IllegalStateException(\"Model Configs Directory doesn't exists\");\n+        }\n+\n+        readVariableConfig(absoluteBasePath);\n+        if (readSecurityConfig(absoluteBasePath)) {\n+            validateRoleInSecurityConfig(elideSecurityConfig);\n+        }\n+        if (readTableConfig(absoluteBasePath)) {\n+            validateSqlInTableConfig(elideTableConfig);\n+        }\n+\n+        log.info(\"Configs Validation Passed!\");\n+    }\n+\n+    private static boolean readVariableConfig(String absoluteBasePath) {\n+        boolean isVariableConfig = exists(absoluteBasePath + DynamicConfigHelpers.VARIABLE_CONFIG_PATH);\n+        try {\n+            variables = isVariableConfig ? DynamicConfigHelpers.getVaribalesPojo(absoluteBasePath)\n+                    : Collections.<String, Object>emptyMap();\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Error while parsing variable config at location: \" + absoluteBasePath, e);\n+        }\n+        return isVariableConfig;\n+    }\n+\n+    private static boolean readSecurityConfig(String absoluteBasePath) {\n+        boolean isSecurityConfig = exists(absoluteBasePath + DynamicConfigHelpers.SECURITY_CONFIG_PATH);\n+        if (isSecurityConfig) {\n+            String securityConfigContent = DynamicConfigHelpers\n+                    .readConfigFile(new File(absoluteBasePath + DynamicConfigHelpers.SECURITY_CONFIG_PATH));\n+            validateConfigForMissingVariables(securityConfigContent, variables);\n+            try {\n+                elideSecurityConfig = DynamicConfigHelpers.getElideSecurityPojo(absoluteBasePath, variables);\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Error while parsing security config at location: \" + absoluteBasePath,\n+                        e);\n+            }\n+        }\n+        return isSecurityConfig;\n+    }\n+\n+    private static boolean readTableConfig(String absoluteBasePath) {\n+        boolean isTableConfig = exists(absoluteBasePath + DynamicConfigHelpers.TABLE_CONFIG_PATH);\n+        if (isTableConfig) {\n+            Collection<File> tableConfigs = FileUtils.listFiles(\n+                    new File(absoluteBasePath + DynamicConfigHelpers.TABLE_CONFIG_PATH), new String[] { \"hjson\" },\n+                    false);\n+            if (tableConfigs.isEmpty()) {\n+                usage();\n+                throw new IllegalStateException(\"No Table Configs found at location: \" + absoluteBasePath\n+                        + DynamicConfigHelpers.TABLE_CONFIG_PATH);\n+            }\n+            for (File tableConfig : tableConfigs) {\n+                String tableConfigContent = DynamicConfigHelpers.readConfigFile(tableConfig);\n+                validateConfigForMissingVariables(tableConfigContent, variables);\n+            }\n+            try {\n+                elideTableConfig = DynamicConfigHelpers.getElideTablePojo(absoluteBasePath, variables);\n+            } catch (Exception e) {", "originalCommit": "30cc2928c104db17207e6b9d18d87c45a6171ec0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM2Njg5MQ==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428366891", "bodyText": "updated", "author": "rishi-aga", "createdAt": "2020-05-20T23:37:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0NTU4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0OTQxMA==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r427549410", "bodyText": "Probably faster not to use parallel here.  We are talking about a dozen or so keywords and a small set of tables.", "author": "aklish", "createdAt": "2020-05-19T19:31:58Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.validator;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.DynamicConfigHelpers;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+\n+import org.apache.commons.io.FileUtils;\n+\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+@Data\n+public class DynamicConfigValidator {\n+\n+    private static ElideTableConfig elideTableConfig;\n+    private static ElideSecurityConfig elideSecurityConfig;\n+    private static Map<String, Object> variables;\n+    private static final String[] SQL_DISALLOWED_WORDS = new String[] { \"DROP \", \"TRUNCATE \", \"DELETE \", \"INSERT \",\n+            \"UPDATE \" };\n+    private static final String[] ROLE_NAME_DISALLOWED_WORDS = new String[] { \",\" };\n+\n+    public static void main(String[] args) {\n+\n+        if (args == null || args.length == 0) {\n+            usage();\n+            throw new IllegalStateException(\"No Arguments provided!\");\n+        }\n+\n+        if (args.length > 1 || DynamicConfigHelpers.isNullOrEmpty(args[0])) {\n+            usage();\n+            throw new IllegalStateException(\"Expecting One non-empty argument only!\");\n+        }\n+\n+        File file = new File(args[0]);\n+        String absoluteBasePath = DynamicConfigHelpers.formatFilePath(file.getAbsolutePath());\n+        log.info(\"Absolute Path for Model Configs Directory: \" + absoluteBasePath);\n+\n+        if (!file.isDirectory()) {\n+            usage();\n+            throw new IllegalStateException(\"Model Configs Directory doesn't exists\");\n+        }\n+\n+        readVariableConfig(absoluteBasePath);\n+        if (readSecurityConfig(absoluteBasePath)) {\n+            validateRoleInSecurityConfig(elideSecurityConfig);\n+        }\n+        if (readTableConfig(absoluteBasePath)) {\n+            validateSqlInTableConfig(elideTableConfig);\n+        }\n+\n+        log.info(\"Configs Validation Passed!\");\n+    }\n+\n+    private static boolean readVariableConfig(String absoluteBasePath) {\n+        boolean isVariableConfig = exists(absoluteBasePath + DynamicConfigHelpers.VARIABLE_CONFIG_PATH);\n+        try {\n+            variables = isVariableConfig ? DynamicConfigHelpers.getVaribalesPojo(absoluteBasePath)\n+                    : Collections.<String, Object>emptyMap();\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Error while parsing variable config at location: \" + absoluteBasePath, e);\n+        }\n+        return isVariableConfig;\n+    }\n+\n+    private static boolean readSecurityConfig(String absoluteBasePath) {\n+        boolean isSecurityConfig = exists(absoluteBasePath + DynamicConfigHelpers.SECURITY_CONFIG_PATH);\n+        if (isSecurityConfig) {\n+            String securityConfigContent = DynamicConfigHelpers\n+                    .readConfigFile(new File(absoluteBasePath + DynamicConfigHelpers.SECURITY_CONFIG_PATH));\n+            validateConfigForMissingVariables(securityConfigContent, variables);\n+            try {\n+                elideSecurityConfig = DynamicConfigHelpers.getElideSecurityPojo(absoluteBasePath, variables);\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Error while parsing security config at location: \" + absoluteBasePath,\n+                        e);\n+            }\n+        }\n+        return isSecurityConfig;\n+    }\n+\n+    private static boolean readTableConfig(String absoluteBasePath) {\n+        boolean isTableConfig = exists(absoluteBasePath + DynamicConfigHelpers.TABLE_CONFIG_PATH);\n+        if (isTableConfig) {\n+            Collection<File> tableConfigs = FileUtils.listFiles(\n+                    new File(absoluteBasePath + DynamicConfigHelpers.TABLE_CONFIG_PATH), new String[] { \"hjson\" },\n+                    false);\n+            if (tableConfigs.isEmpty()) {\n+                usage();\n+                throw new IllegalStateException(\"No Table Configs found at location: \" + absoluteBasePath\n+                        + DynamicConfigHelpers.TABLE_CONFIG_PATH);\n+            }\n+            for (File tableConfig : tableConfigs) {\n+                String tableConfigContent = DynamicConfigHelpers.readConfigFile(tableConfig);\n+                validateConfigForMissingVariables(tableConfigContent, variables);\n+            }\n+            try {\n+                elideTableConfig = DynamicConfigHelpers.getElideTablePojo(absoluteBasePath, variables);\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Error while parsing table config at location: \" + absoluteBasePath, e);\n+            }\n+        } else {\n+            usage();\n+            throw new IllegalStateException(\"Table Configs Directory doesn't exists at location: \" + absoluteBasePath\n+                    + DynamicConfigHelpers.TABLE_CONFIG_PATH);\n+        }\n+        return isTableConfig;\n+    }\n+\n+    private static boolean exists(String filePath) {\n+        return new File(filePath).exists();\n+    }\n+\n+    private static void validateConfigForMissingVariables(String config, Map<String, Object> variables) {\n+        Pattern regex = Pattern.compile(\"<%(.*?)%>\");\n+        Matcher regexMatcher = regex.matcher(config);\n+        while (regexMatcher.find()) {\n+            String str = regexMatcher.group(1).trim();\n+            if (!variables.containsKey(str)) {\n+                throw new IllegalStateException(str + \" is used as a variable in either table or security config files \"\n+                        + \"but is not defined in variables config file.\");\n+            }\n+        }\n+    }\n+\n+    private static boolean validateSqlInTableConfig(ElideTableConfig elideTableConfig) {\n+        for (Table table : elideTableConfig.getTables()) {\n+            if (containsDisallowedWords(table.getSql(), SQL_DISALLOWED_WORDS)) {\n+                throw new IllegalStateException(\"SQL provided in table config contain one of these words: \"\n+                        + Arrays.toString(SQL_DISALLOWED_WORDS));\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private static boolean validateRoleInSecurityConfig(ElideSecurityConfig elideSecurityConfig) {\n+        for (String role : elideSecurityConfig.getRoles()) {\n+            if (containsDisallowedWords(role, ROLE_NAME_DISALLOWED_WORDS)) {\n+                throw new IllegalStateException(\"ROLE provided in security config contain one of these words: \"\n+                        + Arrays.toString(ROLE_NAME_DISALLOWED_WORDS));\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private static boolean containsDisallowedWords(String str, String[] keywords) {\n+        return Arrays.stream(keywords).parallel().anyMatch(str.toUpperCase(Locale.ENGLISH)::contains);", "originalCommit": "30cc2928c104db17207e6b9d18d87c45a6171ec0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM2Njk3OQ==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428366979", "bodyText": "removed parallel", "author": "rishi-aga", "createdAt": "2020-05-20T23:38:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0OTQxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0OTU1NA==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r427549554", "bodyText": "use cli.options.", "author": "aklish", "createdAt": "2020-05-19T19:32:14Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.validator;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.DynamicConfigHelpers;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+\n+import org.apache.commons.io.FileUtils;\n+\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+@Data\n+public class DynamicConfigValidator {\n+\n+    private static ElideTableConfig elideTableConfig;\n+    private static ElideSecurityConfig elideSecurityConfig;\n+    private static Map<String, Object> variables;\n+    private static final String[] SQL_DISALLOWED_WORDS = new String[] { \"DROP \", \"TRUNCATE \", \"DELETE \", \"INSERT \",\n+            \"UPDATE \" };\n+    private static final String[] ROLE_NAME_DISALLOWED_WORDS = new String[] { \",\" };\n+\n+    public static void main(String[] args) {\n+\n+        if (args == null || args.length == 0) {\n+            usage();\n+            throw new IllegalStateException(\"No Arguments provided!\");\n+        }\n+\n+        if (args.length > 1 || DynamicConfigHelpers.isNullOrEmpty(args[0])) {\n+            usage();\n+            throw new IllegalStateException(\"Expecting One non-empty argument only!\");\n+        }\n+\n+        File file = new File(args[0]);\n+        String absoluteBasePath = DynamicConfigHelpers.formatFilePath(file.getAbsolutePath());\n+        log.info(\"Absolute Path for Model Configs Directory: \" + absoluteBasePath);\n+\n+        if (!file.isDirectory()) {\n+            usage();\n+            throw new IllegalStateException(\"Model Configs Directory doesn't exists\");\n+        }\n+\n+        readVariableConfig(absoluteBasePath);\n+        if (readSecurityConfig(absoluteBasePath)) {\n+            validateRoleInSecurityConfig(elideSecurityConfig);\n+        }\n+        if (readTableConfig(absoluteBasePath)) {\n+            validateSqlInTableConfig(elideTableConfig);\n+        }\n+\n+        log.info(\"Configs Validation Passed!\");\n+    }\n+\n+    private static boolean readVariableConfig(String absoluteBasePath) {\n+        boolean isVariableConfig = exists(absoluteBasePath + DynamicConfigHelpers.VARIABLE_CONFIG_PATH);\n+        try {\n+            variables = isVariableConfig ? DynamicConfigHelpers.getVaribalesPojo(absoluteBasePath)\n+                    : Collections.<String, Object>emptyMap();\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Error while parsing variable config at location: \" + absoluteBasePath, e);\n+        }\n+        return isVariableConfig;\n+    }\n+\n+    private static boolean readSecurityConfig(String absoluteBasePath) {\n+        boolean isSecurityConfig = exists(absoluteBasePath + DynamicConfigHelpers.SECURITY_CONFIG_PATH);\n+        if (isSecurityConfig) {\n+            String securityConfigContent = DynamicConfigHelpers\n+                    .readConfigFile(new File(absoluteBasePath + DynamicConfigHelpers.SECURITY_CONFIG_PATH));\n+            validateConfigForMissingVariables(securityConfigContent, variables);\n+            try {\n+                elideSecurityConfig = DynamicConfigHelpers.getElideSecurityPojo(absoluteBasePath, variables);\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Error while parsing security config at location: \" + absoluteBasePath,\n+                        e);\n+            }\n+        }\n+        return isSecurityConfig;\n+    }\n+\n+    private static boolean readTableConfig(String absoluteBasePath) {\n+        boolean isTableConfig = exists(absoluteBasePath + DynamicConfigHelpers.TABLE_CONFIG_PATH);\n+        if (isTableConfig) {\n+            Collection<File> tableConfigs = FileUtils.listFiles(\n+                    new File(absoluteBasePath + DynamicConfigHelpers.TABLE_CONFIG_PATH), new String[] { \"hjson\" },\n+                    false);\n+            if (tableConfigs.isEmpty()) {\n+                usage();\n+                throw new IllegalStateException(\"No Table Configs found at location: \" + absoluteBasePath\n+                        + DynamicConfigHelpers.TABLE_CONFIG_PATH);\n+            }\n+            for (File tableConfig : tableConfigs) {\n+                String tableConfigContent = DynamicConfigHelpers.readConfigFile(tableConfig);\n+                validateConfigForMissingVariables(tableConfigContent, variables);\n+            }\n+            try {\n+                elideTableConfig = DynamicConfigHelpers.getElideTablePojo(absoluteBasePath, variables);\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Error while parsing table config at location: \" + absoluteBasePath, e);\n+            }\n+        } else {\n+            usage();\n+            throw new IllegalStateException(\"Table Configs Directory doesn't exists at location: \" + absoluteBasePath\n+                    + DynamicConfigHelpers.TABLE_CONFIG_PATH);\n+        }\n+        return isTableConfig;\n+    }\n+\n+    private static boolean exists(String filePath) {\n+        return new File(filePath).exists();\n+    }\n+\n+    private static void validateConfigForMissingVariables(String config, Map<String, Object> variables) {\n+        Pattern regex = Pattern.compile(\"<%(.*?)%>\");\n+        Matcher regexMatcher = regex.matcher(config);\n+        while (regexMatcher.find()) {\n+            String str = regexMatcher.group(1).trim();\n+            if (!variables.containsKey(str)) {\n+                throw new IllegalStateException(str + \" is used as a variable in either table or security config files \"\n+                        + \"but is not defined in variables config file.\");\n+            }\n+        }\n+    }\n+\n+    private static boolean validateSqlInTableConfig(ElideTableConfig elideTableConfig) {\n+        for (Table table : elideTableConfig.getTables()) {\n+            if (containsDisallowedWords(table.getSql(), SQL_DISALLOWED_WORDS)) {\n+                throw new IllegalStateException(\"SQL provided in table config contain one of these words: \"\n+                        + Arrays.toString(SQL_DISALLOWED_WORDS));\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private static boolean validateRoleInSecurityConfig(ElideSecurityConfig elideSecurityConfig) {\n+        for (String role : elideSecurityConfig.getRoles()) {\n+            if (containsDisallowedWords(role, ROLE_NAME_DISALLOWED_WORDS)) {\n+                throw new IllegalStateException(\"ROLE provided in security config contain one of these words: \"\n+                        + Arrays.toString(ROLE_NAME_DISALLOWED_WORDS));\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private static boolean containsDisallowedWords(String str, String[] keywords) {\n+        return Arrays.stream(keywords).parallel().anyMatch(str.toUpperCase(Locale.ENGLISH)::contains);\n+    }\n+\n+    private static void usage() {\n+        log.info(\"Usage: java -cp <Jar File Name>\"", "originalCommit": "30cc2928c104db17207e6b9d18d87c45a6171ec0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM2NzAwOA==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428367008", "bodyText": "updated", "author": "rishi-aga", "createdAt": "2020-05-20T23:38:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0OTU1NA=="}], "type": "inlineReview"}, {"oid": "8620e3fa87ae9736fccb4298ccf7ce6b1cfc50ef", "url": "https://github.com/yahoo/elide/commit/8620e3fa87ae9736fccb4298ccf7ce6b1cfc50ef", "message": "Review Comments", "committedDate": "2020-05-21T01:01:44Z", "type": "forcePushed"}, {"oid": "c189459b3a0ac2743eee16ea9cb0286ac8b8eacf", "url": "https://github.com/yahoo/elide/commit/c189459b3a0ac2743eee16ea9cb0286ac8b8eacf", "message": "Review Comments", "committedDate": "2020-05-21T01:18:23Z", "type": "forcePushed"}, {"oid": "4502a20a645c6e3076826004304f1d3a1ca458c8", "url": "https://github.com/yahoo/elide/commit/4502a20a645c6e3076826004304f1d3a1ca458c8", "message": "Review Comments", "committedDate": "2020-05-21T01:33:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxNTYzNw==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428415637", "bodyText": "I think Options options can be a static final variable cos it does not change.\nprivate static final Options options = prepareOptions()\nprivate static Options prepareOptions() {  Options options = new Options(); defineArgs(options); }", "author": "moizarafat", "createdAt": "2020-05-21T02:46:33Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.validator;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.DynamicConfigHelpers;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Dimension;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Join;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Measure;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+@Data\n+/**\n+ * Util class to validate the model config files in local before deployment.\n+ */\n+public class DynamicConfigValidator {\n+\n+    private static final Set<String> SQL_DISALLOWED_WORDS = new HashSet<>(\n+            Arrays.asList(\"DROP\", \"TRUNCATE\", \"DELETE\", \"INSERT\", \"UPDATE\", \"ALTER\", \"COMMENT\", \"CREATE\", \"DESCRIBE\",\n+                    \"SHOW\", \"USE\", \"GRANT\", \"REVOKE\", \"CONNECT\", \"LOCK\", \"EXPLAIN\", \"CALL\", \"MERGE\", \"RENAME\"));\n+    private static final String[] ROLE_NAME_DISALLOWED_WORDS = new String[] { \",\" };\n+    private static final String SQL_SPLIT_REGEX = \"\\\\s+\";\n+    private static final String SEMI_COLON = \";\";\n+    private static final Pattern HANDLEBAR_REGEX = Pattern.compile(\"<%(.*?)%>\");\n+\n+    private ElideTableConfig elideTableConfig;\n+    private ElideSecurityConfig elideSecurityConfig;\n+    private Map<String, Object> variables;\n+    private String configDir;\n+\n+    public static void main(String[] args) throws IOException, ParseException {\n+\n+        Options options = new Options();", "originalCommit": "4502a20a645c6e3076826004304f1d3a1ca458c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc0NzUyMA==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428747520", "bodyText": "updated.", "author": "rishi-aga", "createdAt": "2020-05-21T15:54:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxNTYzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxNTg5Nw==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428415897", "bodyText": "We should include another -h/--help for printing the usage", "author": "moizarafat", "createdAt": "2020-05-21T02:47:38Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.validator;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.DynamicConfigHelpers;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Dimension;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Join;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Measure;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+@Data\n+/**\n+ * Util class to validate the model config files in local before deployment.\n+ */\n+public class DynamicConfigValidator {\n+\n+    private static final Set<String> SQL_DISALLOWED_WORDS = new HashSet<>(\n+            Arrays.asList(\"DROP\", \"TRUNCATE\", \"DELETE\", \"INSERT\", \"UPDATE\", \"ALTER\", \"COMMENT\", \"CREATE\", \"DESCRIBE\",\n+                    \"SHOW\", \"USE\", \"GRANT\", \"REVOKE\", \"CONNECT\", \"LOCK\", \"EXPLAIN\", \"CALL\", \"MERGE\", \"RENAME\"));\n+    private static final String[] ROLE_NAME_DISALLOWED_WORDS = new String[] { \",\" };\n+    private static final String SQL_SPLIT_REGEX = \"\\\\s+\";\n+    private static final String SEMI_COLON = \";\";\n+    private static final Pattern HANDLEBAR_REGEX = Pattern.compile(\"<%(.*?)%>\");\n+\n+    private ElideTableConfig elideTableConfig;\n+    private ElideSecurityConfig elideSecurityConfig;\n+    private Map<String, Object> variables;\n+    private String configDir;\n+\n+    public static void main(String[] args) throws IOException, ParseException {\n+\n+        Options options = new Options();\n+        defineArgs(options);\n+        usage(options);\n+        CommandLine cli = new DefaultParser().parse(options, args);\n+\n+        String configDir = cli.getOptionValue(\"configDir\");\n+        File file = new File(configDir);\n+        String absoluteBasePath = DynamicConfigHelpers.formatFilePath(file.getAbsolutePath());\n+        log.info(\"Absolute Path for Model Configs Directory: \" + absoluteBasePath);\n+\n+        if (!file.isDirectory()) {\n+            throw new IllegalStateException(\"Model Configs Directory doesn't exists\");\n+        }\n+\n+        DynamicConfigValidator dynamicConfigValidator = new DynamicConfigValidator();\n+        dynamicConfigValidator.setConfigDir(absoluteBasePath);\n+\n+        dynamicConfigValidator.readVariableConfig();\n+        if (dynamicConfigValidator.readSecurityConfig()) {\n+            validateRoleInSecurityConfig(dynamicConfigValidator.getElideSecurityConfig());\n+        }\n+        if (dynamicConfigValidator.readTableConfig()) {\n+            validateSqlInTableConfig(dynamicConfigValidator.getElideTableConfig());\n+        }\n+\n+        log.info(\"Configs Validation Passed!\");\n+    }\n+\n+    /**\n+     * Read variable file config.\n+     * @return boolean true if variable config file exists else false\n+     * @throws JsonProcessingException\n+     */\n+    private boolean readVariableConfig() throws JsonProcessingException {\n+        boolean isVariableConfig = exists(this.configDir + DynamicConfigHelpers.VARIABLE_CONFIG_PATH);\n+        this.variables = isVariableConfig ? DynamicConfigHelpers.getVariablesPojo(this.configDir)\n+                : Collections.<String, Object>emptyMap();\n+        return isVariableConfig;\n+    }\n+\n+    /**\n+     * Read security config file and checks for any missing Handlebar variables.\n+     * @return boolean true if security config file exists else false\n+     * @throws IOException\n+     */\n+    private boolean readSecurityConfig() throws IOException {\n+        String securityConfigPath = this.configDir + DynamicConfigHelpers.SECURITY_CONFIG_PATH;\n+        boolean isSecurityConfig = exists(securityConfigPath);\n+        if (isSecurityConfig) {\n+            String securityConfigContent = DynamicConfigHelpers.readConfigFile(new File(securityConfigPath));\n+            validateConfigForMissingVariables(securityConfigContent, this.variables);\n+            this.elideSecurityConfig = DynamicConfigHelpers.getElideSecurityPojo(this.configDir, this.variables);\n+        }\n+        return isSecurityConfig;\n+    }\n+\n+    /**\n+     * Read table config files and checks for any missing Handlebar variables.\n+     * @return boolean true if table config directory exists else false\n+     * @throws IOException\n+     */\n+    private boolean readTableConfig() throws IOException {\n+        String tableConfigsPath = this.configDir + DynamicConfigHelpers.TABLE_CONFIG_PATH;\n+        boolean isTableConfig = exists(tableConfigsPath);\n+        if (isTableConfig) {\n+            Collection<File> tableConfigs = FileUtils.listFiles(new File(tableConfigsPath), new String[] { \"hjson\" },\n+                    false);\n+            if (tableConfigs.isEmpty()) {\n+                throw new IllegalStateException(\"No Table Configs found at location: \" + tableConfigsPath);\n+            }\n+            for (File tableConfig : tableConfigs) {\n+                String tableConfigContent = DynamicConfigHelpers.readConfigFile(tableConfig);\n+                validateConfigForMissingVariables(tableConfigContent, this.variables);\n+            }\n+            this.elideTableConfig = DynamicConfigHelpers.getElideTablePojo(this.configDir, this.variables);\n+        } else {\n+            throw new IllegalStateException(\"Table Configs Directory doesn't exists at location: \" + tableConfigsPath);\n+        }\n+        return isTableConfig;\n+    }\n+\n+    /**\n+     * Check if file or directory exists.\n+     * @param filePath path of the file or directory\n+     * @return boolean true if file or directory exists else false\n+     */\n+    private static boolean exists(String filePath) {\n+        return new File(filePath).exists();\n+    }\n+\n+    /**\n+     * Extracts any handlebar variables in config file and checks if they are\n+     * defined in variable config. Throw exception for undefined variables.\n+     * @param config config file\n+     * @param variables A map of defined variables\n+     */\n+    private static void validateConfigForMissingVariables(String config, Map<String, Object> variables) {\n+        Matcher regexMatcher = HANDLEBAR_REGEX.matcher(config);\n+        while (regexMatcher.find()) {\n+            String str = regexMatcher.group(1).trim();\n+            if (!variables.containsKey(str)) {\n+                throw new IllegalStateException(str + \" is used as a variable in either table or security config files \"\n+                        + \"but is not defined in variables config file.\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Validate table sql and column definition provided in table configs.\n+     * @param elideTableConfig ElideTableConfig\n+     * @return boolean true if all sql/definition passes validation\n+     */\n+    private static boolean validateSqlInTableConfig(ElideTableConfig elideTableConfig) {\n+        for (Table table : elideTableConfig.getTables()) {\n+            validateSql(table.getSql());\n+            for (Dimension dim : table.getDimensions()) {\n+                validateSql(dim.getDefinition());\n+            }\n+            for (Join join : table.getJoins()) {\n+                validateSql(join.getDefinition());\n+            }\n+            for (Measure measure : table.getMeasures()) {\n+                validateSql(measure.getDefinition());\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Check if input sql definition contains either semicolon or any of disallowed\n+     * keywords. Throw exception if check fails.\n+     */\n+    private static void validateSql(String sqlDefinition) {\n+        if (!DynamicConfigHelpers.isNullOrEmpty(sqlDefinition) && (sqlDefinition.contains(SEMI_COLON)\n+                || containsDisallowedWords(sqlDefinition, SQL_SPLIT_REGEX, SQL_DISALLOWED_WORDS))) {\n+            throw new IllegalStateException(\n+                    \"sql/definition provided in table config contain either ';' or one of these words: \"\n+                            + Arrays.toString(SQL_DISALLOWED_WORDS.toArray()));\n+        }\n+    }\n+\n+    /**\n+     * Validate role name provided in security config.\n+     * @param elideSecurityConfig ElideSecurityConfig\n+     * @return boolean true if all role name passes validation else throw exception\n+     */\n+    private static boolean validateRoleInSecurityConfig(ElideSecurityConfig elideSecurityConfig) {\n+        for (String role : elideSecurityConfig.getRoles()) {\n+            if (containsDisallowedWords(role, ROLE_NAME_DISALLOWED_WORDS)) {\n+                throw new IllegalStateException(\"ROLE provided in security config contain one of these words: \"\n+                        + Arrays.toString(ROLE_NAME_DISALLOWED_WORDS));\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Checks if input string has any of the disallowed words.\n+     * @param String input string to validate\n+     * @param keywords Array of disallowed words\n+     * @return boolean true if input string does not contain any of the keywords\n+     *         else false\n+     */\n+    private static boolean containsDisallowedWords(String str, String[] keywords) {\n+        return Arrays.stream(keywords).anyMatch(str.toUpperCase(Locale.ENGLISH)::contains);\n+    }\n+\n+    /**\n+     * Checks if any word in the input string matches any of the disallowed words.\n+     * @param String input string to validate\n+     * @param splitter regex for splitting input string\n+     * @param keywords Set of disallowed words\n+     * @return boolean true if any word in the input string matches any of the\n+     *         disallowed words else false\n+     */\n+    private static boolean containsDisallowedWords(String str, String splitter, Set<String> keywords) {\n+        return DynamicConfigHelpers.isNullOrEmpty(str) ? false\n+                : Arrays.stream(str.trim().toUpperCase(Locale.ENGLISH).split(splitter)).anyMatch(keywords::contains);\n+    }\n+\n+    /**\n+     * Define Arguments.\n+     */\n+    private static void defineArgs(Options options) {\n+        Option configDirOption = new Option(\"c\", \"configDir\", true,\n+                \"Path for Model Configs Directory.\\n\"\n+                + \"Expected Directory Structure:\\n\"\n+                + \"./security.hjson(optional)\\n\"\n+                + \"./variables.hjson(optional)\\n\"\n+                + \"./tables/\\n\"\n+                + \"./tables/table1.hjson\\n\"\n+                + \"./tables/table2.hjson\\n\"\n+                + \"./tables/tableN.hjson\\n\");\n+        configDirOption.setRequired(true);\n+        options.addOption(configDirOption);", "originalCommit": "4502a20a645c6e3076826004304f1d3a1ca458c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc0ODI0OQ==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428748249", "bodyText": "added option for help. Had to make c/configDir optional now and added explicit check for that if args h/help is not passed", "author": "rishi-aga", "createdAt": "2020-05-21T15:55:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxNTg5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxNjE5Nw==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428416197", "bodyText": "instead of printing usage always, lets do -h/--help option for printing the usage on demand.", "author": "moizarafat", "createdAt": "2020-05-21T02:48:51Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.validator;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.DynamicConfigHelpers;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Dimension;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Join;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Measure;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+@Data\n+/**\n+ * Util class to validate the model config files in local before deployment.\n+ */\n+public class DynamicConfigValidator {\n+\n+    private static final Set<String> SQL_DISALLOWED_WORDS = new HashSet<>(\n+            Arrays.asList(\"DROP\", \"TRUNCATE\", \"DELETE\", \"INSERT\", \"UPDATE\", \"ALTER\", \"COMMENT\", \"CREATE\", \"DESCRIBE\",\n+                    \"SHOW\", \"USE\", \"GRANT\", \"REVOKE\", \"CONNECT\", \"LOCK\", \"EXPLAIN\", \"CALL\", \"MERGE\", \"RENAME\"));\n+    private static final String[] ROLE_NAME_DISALLOWED_WORDS = new String[] { \",\" };\n+    private static final String SQL_SPLIT_REGEX = \"\\\\s+\";\n+    private static final String SEMI_COLON = \";\";\n+    private static final Pattern HANDLEBAR_REGEX = Pattern.compile(\"<%(.*?)%>\");\n+\n+    private ElideTableConfig elideTableConfig;\n+    private ElideSecurityConfig elideSecurityConfig;\n+    private Map<String, Object> variables;\n+    private String configDir;\n+\n+    public static void main(String[] args) throws IOException, ParseException {\n+\n+        Options options = new Options();\n+        defineArgs(options);\n+        usage(options);", "originalCommit": "4502a20a645c6e3076826004304f1d3a1ca458c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc0ODMzMQ==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428748331", "bodyText": "sure", "author": "rishi-aga", "createdAt": "2020-05-21T15:55:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxNjE5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxNjUyMg==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428416522", "bodyText": "The message is Model Configs Directory doesn't exists", "author": "moizarafat", "createdAt": "2020-05-21T02:50:03Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/test/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidatorTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.validator;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import com.fasterxml.jackson.databind.exc.ValueInstantiationException;\n+\n+import org.apache.commons.cli.MissingArgumentException;\n+import org.apache.commons.cli.MissingOptionException;\n+import org.hjson.ParseException;\n+import org.junit.jupiter.api.Test;\n+\n+public class DynamicConfigValidatorTest {\n+\n+    @Test\n+    public void testNoArgumnents() {\n+        Exception e = assertThrows(MissingOptionException.class, () -> DynamicConfigValidator.main(null));\n+        assertTrue(e.getMessage().startsWith(\"Missing required option\"));\n+    }\n+\n+    @Test\n+    public void testOneEmptyArgumnents() {\n+        Exception e = assertThrows(MissingOptionException.class,\n+                () -> DynamicConfigValidator.main(new String[] { \"\" }));\n+        assertTrue(e.getMessage().startsWith(\"Missing required option\"));\n+    }\n+\n+    @Test\n+    public void testMissingArgumnentValue() {\n+        Exception e = assertThrows(MissingArgumentException.class,\n+                () -> DynamicConfigValidator.main(new String[] { \"--configDir\" }));\n+        assertTrue(e.getMessage().startsWith(\"Missing argument for option\"));\n+    }\n+\n+    @Test\n+    public void testMissingConfigDir() {\n+        Exception e = assertThrows(IllegalStateException.class, () -> DynamicConfigValidator\n+                .main(new String[] { \"--configDir\", \"src/test/resources/validator/missing\" }));\n+        assertEquals(\"Model Configs Directory doesn't exists\", e.getMessage());\n+    }\n+\n+    @Test\n+    public void testValidConfigDir() {\n+        assertDoesNotThrow(() -> DynamicConfigValidator\n+                .main(new String[] { \"--configDir\", \"src/test/resources/validator/valid\" }));\n+    }\n+\n+    @Test\n+    public void testMissingVariableConfig() {\n+        assertDoesNotThrow(() -> DynamicConfigValidator\n+                .main(new String[] { \"--configDir\", \"src/test/resources/validator/missing_variable\" }));\n+    }\n+\n+    @Test\n+    public void testMissingSecurityConfig() {\n+        assertDoesNotThrow(() -> DynamicConfigValidator\n+                .main(new String[] { \"--configDir\", \"src/test/resources/validator/missing_security\" }));\n+    }\n+\n+    @Test\n+    public void testMissingTableDir() {\n+        Exception e = assertThrows(IllegalStateException.class, () -> DynamicConfigValidator\n+                .main(new String[] { \"--configDir\", \"src/test/resources/validator/missing_table_dir\" }));\n+        assertTrue(e.getMessage().startsWith(\"Table Configs Directory doesn't exists at location\"));", "originalCommit": "4502a20a645c6e3076826004304f1d3a1ca458c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc0ODY5OQ==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428748699", "bodyText": "one empty directory didnt get check in, checked in now to ensure it runs fine.", "author": "rishi-aga", "createdAt": "2020-05-21T15:56:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxNjUyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxNzgzOA==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428417838", "bodyText": "';' can be replaced by SEMI_COLON", "author": "moizarafat", "createdAt": "2020-05-21T02:55:32Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.validator;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.DynamicConfigHelpers;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Dimension;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Join;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Measure;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+@Data\n+/**\n+ * Util class to validate the model config files in local before deployment.\n+ */\n+public class DynamicConfigValidator {\n+\n+    private static final Set<String> SQL_DISALLOWED_WORDS = new HashSet<>(\n+            Arrays.asList(\"DROP\", \"TRUNCATE\", \"DELETE\", \"INSERT\", \"UPDATE\", \"ALTER\", \"COMMENT\", \"CREATE\", \"DESCRIBE\",\n+                    \"SHOW\", \"USE\", \"GRANT\", \"REVOKE\", \"CONNECT\", \"LOCK\", \"EXPLAIN\", \"CALL\", \"MERGE\", \"RENAME\"));\n+    private static final String[] ROLE_NAME_DISALLOWED_WORDS = new String[] { \",\" };\n+    private static final String SQL_SPLIT_REGEX = \"\\\\s+\";\n+    private static final String SEMI_COLON = \";\";\n+    private static final Pattern HANDLEBAR_REGEX = Pattern.compile(\"<%(.*?)%>\");\n+\n+    private ElideTableConfig elideTableConfig;\n+    private ElideSecurityConfig elideSecurityConfig;\n+    private Map<String, Object> variables;\n+    private String configDir;\n+\n+    public static void main(String[] args) throws IOException, ParseException {\n+\n+        Options options = new Options();\n+        defineArgs(options);\n+        usage(options);\n+        CommandLine cli = new DefaultParser().parse(options, args);\n+\n+        String configDir = cli.getOptionValue(\"configDir\");\n+        File file = new File(configDir);\n+        String absoluteBasePath = DynamicConfigHelpers.formatFilePath(file.getAbsolutePath());\n+        log.info(\"Absolute Path for Model Configs Directory: \" + absoluteBasePath);\n+\n+        if (!file.isDirectory()) {\n+            throw new IllegalStateException(\"Model Configs Directory doesn't exists\");\n+        }\n+\n+        DynamicConfigValidator dynamicConfigValidator = new DynamicConfigValidator();\n+        dynamicConfigValidator.setConfigDir(absoluteBasePath);\n+\n+        dynamicConfigValidator.readVariableConfig();\n+        if (dynamicConfigValidator.readSecurityConfig()) {\n+            validateRoleInSecurityConfig(dynamicConfigValidator.getElideSecurityConfig());\n+        }\n+        if (dynamicConfigValidator.readTableConfig()) {\n+            validateSqlInTableConfig(dynamicConfigValidator.getElideTableConfig());\n+        }\n+\n+        log.info(\"Configs Validation Passed!\");\n+    }\n+\n+    /**\n+     * Read variable file config.\n+     * @return boolean true if variable config file exists else false\n+     * @throws JsonProcessingException\n+     */\n+    private boolean readVariableConfig() throws JsonProcessingException {\n+        boolean isVariableConfig = exists(this.configDir + DynamicConfigHelpers.VARIABLE_CONFIG_PATH);\n+        this.variables = isVariableConfig ? DynamicConfigHelpers.getVariablesPojo(this.configDir)\n+                : Collections.<String, Object>emptyMap();\n+        return isVariableConfig;\n+    }\n+\n+    /**\n+     * Read security config file and checks for any missing Handlebar variables.\n+     * @return boolean true if security config file exists else false\n+     * @throws IOException\n+     */\n+    private boolean readSecurityConfig() throws IOException {\n+        String securityConfigPath = this.configDir + DynamicConfigHelpers.SECURITY_CONFIG_PATH;\n+        boolean isSecurityConfig = exists(securityConfigPath);\n+        if (isSecurityConfig) {\n+            String securityConfigContent = DynamicConfigHelpers.readConfigFile(new File(securityConfigPath));\n+            validateConfigForMissingVariables(securityConfigContent, this.variables);\n+            this.elideSecurityConfig = DynamicConfigHelpers.getElideSecurityPojo(this.configDir, this.variables);\n+        }\n+        return isSecurityConfig;\n+    }\n+\n+    /**\n+     * Read table config files and checks for any missing Handlebar variables.\n+     * @return boolean true if table config directory exists else false\n+     * @throws IOException\n+     */\n+    private boolean readTableConfig() throws IOException {\n+        String tableConfigsPath = this.configDir + DynamicConfigHelpers.TABLE_CONFIG_PATH;\n+        boolean isTableConfig = exists(tableConfigsPath);\n+        if (isTableConfig) {\n+            Collection<File> tableConfigs = FileUtils.listFiles(new File(tableConfigsPath), new String[] { \"hjson\" },\n+                    false);\n+            if (tableConfigs.isEmpty()) {\n+                throw new IllegalStateException(\"No Table Configs found at location: \" + tableConfigsPath);\n+            }\n+            for (File tableConfig : tableConfigs) {\n+                String tableConfigContent = DynamicConfigHelpers.readConfigFile(tableConfig);\n+                validateConfigForMissingVariables(tableConfigContent, this.variables);\n+            }\n+            this.elideTableConfig = DynamicConfigHelpers.getElideTablePojo(this.configDir, this.variables);\n+        } else {\n+            throw new IllegalStateException(\"Table Configs Directory doesn't exists at location: \" + tableConfigsPath);\n+        }\n+        return isTableConfig;\n+    }\n+\n+    /**\n+     * Check if file or directory exists.\n+     * @param filePath path of the file or directory\n+     * @return boolean true if file or directory exists else false\n+     */\n+    private static boolean exists(String filePath) {\n+        return new File(filePath).exists();\n+    }\n+\n+    /**\n+     * Extracts any handlebar variables in config file and checks if they are\n+     * defined in variable config. Throw exception for undefined variables.\n+     * @param config config file\n+     * @param variables A map of defined variables\n+     */\n+    private static void validateConfigForMissingVariables(String config, Map<String, Object> variables) {\n+        Matcher regexMatcher = HANDLEBAR_REGEX.matcher(config);\n+        while (regexMatcher.find()) {\n+            String str = regexMatcher.group(1).trim();\n+            if (!variables.containsKey(str)) {\n+                throw new IllegalStateException(str + \" is used as a variable in either table or security config files \"\n+                        + \"but is not defined in variables config file.\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Validate table sql and column definition provided in table configs.\n+     * @param elideTableConfig ElideTableConfig\n+     * @return boolean true if all sql/definition passes validation\n+     */\n+    private static boolean validateSqlInTableConfig(ElideTableConfig elideTableConfig) {\n+        for (Table table : elideTableConfig.getTables()) {\n+            validateSql(table.getSql());\n+            for (Dimension dim : table.getDimensions()) {\n+                validateSql(dim.getDefinition());\n+            }\n+            for (Join join : table.getJoins()) {\n+                validateSql(join.getDefinition());\n+            }\n+            for (Measure measure : table.getMeasures()) {\n+                validateSql(measure.getDefinition());\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Check if input sql definition contains either semicolon or any of disallowed\n+     * keywords. Throw exception if check fails.\n+     */\n+    private static void validateSql(String sqlDefinition) {\n+        if (!DynamicConfigHelpers.isNullOrEmpty(sqlDefinition) && (sqlDefinition.contains(SEMI_COLON)\n+                || containsDisallowedWords(sqlDefinition, SQL_SPLIT_REGEX, SQL_DISALLOWED_WORDS))) {\n+            throw new IllegalStateException(\n+                    \"sql/definition provided in table config contain either ';' or one of these words: \"", "originalCommit": "4502a20a645c6e3076826004304f1d3a1ca458c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY3ODkzNQ==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428678935", "bodyText": "sure.", "author": "rishi-aga", "createdAt": "2020-05-21T14:15:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxNzgzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxODM0MA==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428418340", "bodyText": "I think if options is made static final, this method will not need arguments.", "author": "moizarafat", "createdAt": "2020-05-21T02:57:36Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.validator;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.DynamicConfigHelpers;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Dimension;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Join;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Measure;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+@Data\n+/**\n+ * Util class to validate the model config files in local before deployment.\n+ */\n+public class DynamicConfigValidator {\n+\n+    private static final Set<String> SQL_DISALLOWED_WORDS = new HashSet<>(\n+            Arrays.asList(\"DROP\", \"TRUNCATE\", \"DELETE\", \"INSERT\", \"UPDATE\", \"ALTER\", \"COMMENT\", \"CREATE\", \"DESCRIBE\",\n+                    \"SHOW\", \"USE\", \"GRANT\", \"REVOKE\", \"CONNECT\", \"LOCK\", \"EXPLAIN\", \"CALL\", \"MERGE\", \"RENAME\"));\n+    private static final String[] ROLE_NAME_DISALLOWED_WORDS = new String[] { \",\" };\n+    private static final String SQL_SPLIT_REGEX = \"\\\\s+\";\n+    private static final String SEMI_COLON = \";\";\n+    private static final Pattern HANDLEBAR_REGEX = Pattern.compile(\"<%(.*?)%>\");\n+\n+    private ElideTableConfig elideTableConfig;\n+    private ElideSecurityConfig elideSecurityConfig;\n+    private Map<String, Object> variables;\n+    private String configDir;\n+\n+    public static void main(String[] args) throws IOException, ParseException {\n+\n+        Options options = new Options();\n+        defineArgs(options);\n+        usage(options);\n+        CommandLine cli = new DefaultParser().parse(options, args);\n+\n+        String configDir = cli.getOptionValue(\"configDir\");\n+        File file = new File(configDir);\n+        String absoluteBasePath = DynamicConfigHelpers.formatFilePath(file.getAbsolutePath());\n+        log.info(\"Absolute Path for Model Configs Directory: \" + absoluteBasePath);\n+\n+        if (!file.isDirectory()) {\n+            throw new IllegalStateException(\"Model Configs Directory doesn't exists\");\n+        }\n+\n+        DynamicConfigValidator dynamicConfigValidator = new DynamicConfigValidator();\n+        dynamicConfigValidator.setConfigDir(absoluteBasePath);\n+\n+        dynamicConfigValidator.readVariableConfig();\n+        if (dynamicConfigValidator.readSecurityConfig()) {\n+            validateRoleInSecurityConfig(dynamicConfigValidator.getElideSecurityConfig());\n+        }\n+        if (dynamicConfigValidator.readTableConfig()) {\n+            validateSqlInTableConfig(dynamicConfigValidator.getElideTableConfig());\n+        }\n+\n+        log.info(\"Configs Validation Passed!\");\n+    }\n+\n+    /**\n+     * Read variable file config.\n+     * @return boolean true if variable config file exists else false\n+     * @throws JsonProcessingException\n+     */\n+    private boolean readVariableConfig() throws JsonProcessingException {\n+        boolean isVariableConfig = exists(this.configDir + DynamicConfigHelpers.VARIABLE_CONFIG_PATH);\n+        this.variables = isVariableConfig ? DynamicConfigHelpers.getVariablesPojo(this.configDir)\n+                : Collections.<String, Object>emptyMap();\n+        return isVariableConfig;\n+    }\n+\n+    /**\n+     * Read security config file and checks for any missing Handlebar variables.\n+     * @return boolean true if security config file exists else false\n+     * @throws IOException\n+     */\n+    private boolean readSecurityConfig() throws IOException {\n+        String securityConfigPath = this.configDir + DynamicConfigHelpers.SECURITY_CONFIG_PATH;\n+        boolean isSecurityConfig = exists(securityConfigPath);\n+        if (isSecurityConfig) {\n+            String securityConfigContent = DynamicConfigHelpers.readConfigFile(new File(securityConfigPath));\n+            validateConfigForMissingVariables(securityConfigContent, this.variables);\n+            this.elideSecurityConfig = DynamicConfigHelpers.getElideSecurityPojo(this.configDir, this.variables);\n+        }\n+        return isSecurityConfig;\n+    }\n+\n+    /**\n+     * Read table config files and checks for any missing Handlebar variables.\n+     * @return boolean true if table config directory exists else false\n+     * @throws IOException\n+     */\n+    private boolean readTableConfig() throws IOException {\n+        String tableConfigsPath = this.configDir + DynamicConfigHelpers.TABLE_CONFIG_PATH;\n+        boolean isTableConfig = exists(tableConfigsPath);\n+        if (isTableConfig) {\n+            Collection<File> tableConfigs = FileUtils.listFiles(new File(tableConfigsPath), new String[] { \"hjson\" },\n+                    false);\n+            if (tableConfigs.isEmpty()) {\n+                throw new IllegalStateException(\"No Table Configs found at location: \" + tableConfigsPath);\n+            }\n+            for (File tableConfig : tableConfigs) {\n+                String tableConfigContent = DynamicConfigHelpers.readConfigFile(tableConfig);\n+                validateConfigForMissingVariables(tableConfigContent, this.variables);\n+            }\n+            this.elideTableConfig = DynamicConfigHelpers.getElideTablePojo(this.configDir, this.variables);\n+        } else {\n+            throw new IllegalStateException(\"Table Configs Directory doesn't exists at location: \" + tableConfigsPath);\n+        }\n+        return isTableConfig;\n+    }\n+\n+    /**\n+     * Check if file or directory exists.\n+     * @param filePath path of the file or directory\n+     * @return boolean true if file or directory exists else false\n+     */\n+    private static boolean exists(String filePath) {\n+        return new File(filePath).exists();\n+    }\n+\n+    /**\n+     * Extracts any handlebar variables in config file and checks if they are\n+     * defined in variable config. Throw exception for undefined variables.\n+     * @param config config file\n+     * @param variables A map of defined variables\n+     */\n+    private static void validateConfigForMissingVariables(String config, Map<String, Object> variables) {\n+        Matcher regexMatcher = HANDLEBAR_REGEX.matcher(config);\n+        while (regexMatcher.find()) {\n+            String str = regexMatcher.group(1).trim();\n+            if (!variables.containsKey(str)) {\n+                throw new IllegalStateException(str + \" is used as a variable in either table or security config files \"\n+                        + \"but is not defined in variables config file.\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Validate table sql and column definition provided in table configs.\n+     * @param elideTableConfig ElideTableConfig\n+     * @return boolean true if all sql/definition passes validation\n+     */\n+    private static boolean validateSqlInTableConfig(ElideTableConfig elideTableConfig) {\n+        for (Table table : elideTableConfig.getTables()) {\n+            validateSql(table.getSql());\n+            for (Dimension dim : table.getDimensions()) {\n+                validateSql(dim.getDefinition());\n+            }\n+            for (Join join : table.getJoins()) {\n+                validateSql(join.getDefinition());\n+            }\n+            for (Measure measure : table.getMeasures()) {\n+                validateSql(measure.getDefinition());\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Check if input sql definition contains either semicolon or any of disallowed\n+     * keywords. Throw exception if check fails.\n+     */\n+    private static void validateSql(String sqlDefinition) {\n+        if (!DynamicConfigHelpers.isNullOrEmpty(sqlDefinition) && (sqlDefinition.contains(SEMI_COLON)\n+                || containsDisallowedWords(sqlDefinition, SQL_SPLIT_REGEX, SQL_DISALLOWED_WORDS))) {\n+            throw new IllegalStateException(\n+                    \"sql/definition provided in table config contain either ';' or one of these words: \"\n+                            + Arrays.toString(SQL_DISALLOWED_WORDS.toArray()));\n+        }\n+    }\n+\n+    /**\n+     * Validate role name provided in security config.\n+     * @param elideSecurityConfig ElideSecurityConfig\n+     * @return boolean true if all role name passes validation else throw exception\n+     */\n+    private static boolean validateRoleInSecurityConfig(ElideSecurityConfig elideSecurityConfig) {\n+        for (String role : elideSecurityConfig.getRoles()) {\n+            if (containsDisallowedWords(role, ROLE_NAME_DISALLOWED_WORDS)) {\n+                throw new IllegalStateException(\"ROLE provided in security config contain one of these words: \"\n+                        + Arrays.toString(ROLE_NAME_DISALLOWED_WORDS));\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Checks if input string has any of the disallowed words.\n+     * @param String input string to validate\n+     * @param keywords Array of disallowed words\n+     * @return boolean true if input string does not contain any of the keywords\n+     *         else false\n+     */\n+    private static boolean containsDisallowedWords(String str, String[] keywords) {\n+        return Arrays.stream(keywords).anyMatch(str.toUpperCase(Locale.ENGLISH)::contains);\n+    }\n+\n+    /**\n+     * Checks if any word in the input string matches any of the disallowed words.\n+     * @param String input string to validate\n+     * @param splitter regex for splitting input string\n+     * @param keywords Set of disallowed words\n+     * @return boolean true if any word in the input string matches any of the\n+     *         disallowed words else false\n+     */\n+    private static boolean containsDisallowedWords(String str, String splitter, Set<String> keywords) {\n+        return DynamicConfigHelpers.isNullOrEmpty(str) ? false\n+                : Arrays.stream(str.trim().toUpperCase(Locale.ENGLISH).split(splitter)).anyMatch(keywords::contains);\n+    }\n+\n+    /**\n+     * Define Arguments.\n+     */\n+    private static void defineArgs(Options options) {\n+        Option configDirOption = new Option(\"c\", \"configDir\", true,\n+                \"Path for Model Configs Directory.\\n\"\n+                + \"Expected Directory Structure:\\n\"\n+                + \"./security.hjson(optional)\\n\"\n+                + \"./variables.hjson(optional)\\n\"\n+                + \"./tables/\\n\"\n+                + \"./tables/table1.hjson\\n\"\n+                + \"./tables/table2.hjson\\n\"\n+                + \"./tables/tableN.hjson\\n\");\n+        configDirOption.setRequired(true);\n+        options.addOption(configDirOption);\n+    }\n+\n+    /**\n+     * Print Usage.\n+     */\n+    private static void usage(Options options) {", "originalCommit": "4502a20a645c6e3076826004304f1d3a1ca458c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc0ODc4Nw==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r428748787", "bodyText": "updated", "author": "rishi-aga", "createdAt": "2020-05-21T15:56:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxODM0MA=="}], "type": "inlineReview"}, {"oid": "ff69378fb0b2183fe5dc117a2b3a3b733ffb2728", "url": "https://github.com/yahoo/elide/commit/ff69378fb0b2183fe5dc117a2b3a3b733ffb2728", "message": "Dynamic Config Validator\n\nCo-authored-by: rishi-aga <rishi.aga123@gmail.com>", "committedDate": "2020-05-28T20:10:22Z", "type": "commit"}, {"oid": "ff69378fb0b2183fe5dc117a2b3a3b733ffb2728", "url": "https://github.com/yahoo/elide/commit/ff69378fb0b2183fe5dc117a2b3a3b733ffb2728", "message": "Dynamic Config Validator\n\nCo-authored-by: rishi-aga <rishi.aga123@gmail.com>", "committedDate": "2020-05-28T20:10:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwMzkyOQ==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r432503929", "bodyText": "You can skip step 2 and provide the relative path (listed above) in step 3a and 3b.", "author": "aklish", "createdAt": "2020-05-29T14:03:57Z", "path": "elide-contrib/elide-dynamic-config-helpers/README.md", "diffHunk": "@@ -0,0 +1,23 @@\n+## Validation for Dynamic Config\n+\n+Validate the config files in local before deployment.\n+\n+To build and run:\n+```text\n+1. mvn clean install\n+2. Look for Jar File under elide-contrib/elide-dynamic-config-helpers/target directory with name matching \"elide-dynamic-config-*-jar-with-dependencies.jar\"", "originalCommit": "ff69378fb0b2183fe5dc117a2b3a3b733ffb2728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0NDY4Mg==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r432544682", "bodyText": "Updated.", "author": "rishi-aga", "createdAt": "2020-05-29T14:58:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwMzkyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxMTk4Ng==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r432511986", "bodyText": "Does the dynamic logic read the files twice?  Once to build the config for compilation and once to validate?  We really ought to read the config once to make sure we are validating the same configuration we are running with.", "author": "aklish", "createdAt": "2020-05-29T14:16:03Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.validator;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.DynamicConfigHelpers;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Dimension;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Join;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Measure;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.MissingOptionException;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+@Data\n+/**\n+ * Util class to validate the model config files in local before deployment.\n+ */\n+public class DynamicConfigValidator {\n+\n+    private static final Set<String> SQL_DISALLOWED_WORDS = new HashSet<>(\n+            Arrays.asList(\"DROP\", \"TRUNCATE\", \"DELETE\", \"INSERT\", \"UPDATE\", \"ALTER\", \"COMMENT\", \"CREATE\", \"DESCRIBE\",\n+                    \"SHOW\", \"USE\", \"GRANT\", \"REVOKE\", \"CONNECT\", \"LOCK\", \"EXPLAIN\", \"CALL\", \"MERGE\", \"RENAME\"));\n+    private static final String[] ROLE_NAME_DISALLOWED_WORDS = new String[] { \",\" };\n+    private static final String SQL_SPLIT_REGEX = \"\\\\s+\";\n+    private static final String SEMI_COLON = \";\";\n+    private static final Pattern HANDLEBAR_REGEX = Pattern.compile(\"<%(.*?)%>\");\n+    private static final Options OPTIONS = prepareOptions();\n+\n+    private ElideTableConfig elideTableConfig;\n+    private ElideSecurityConfig elideSecurityConfig;\n+    private Map<String, Object> variables;\n+    private String configDir;\n+\n+    public static void main(String[] args) throws IOException, ParseException {\n+\n+        CommandLine cli = new DefaultParser().parse(OPTIONS, args);\n+\n+        if (cli.hasOption(\"help\")) {\n+            printHelp();\n+            return;\n+        }\n+        if (!cli.hasOption(\"configDir\")) {\n+            printHelp();\n+            throw new MissingOptionException(\"Missing required option\");\n+        }\n+        String configDir = cli.getOptionValue(\"configDir\");\n+        File file = new File(configDir);\n+        String absoluteBasePath = DynamicConfigHelpers.formatFilePath(file.getAbsolutePath());\n+        log.info(\"Absolute Path for Model Configs Directory: \" + absoluteBasePath);\n+\n+        if (!file.isDirectory()) {\n+            throw new IllegalStateException(\"Model Configs Directory doesn't exists\");\n+        }\n+\n+        DynamicConfigValidator dynamicConfigValidator = new DynamicConfigValidator();\n+        dynamicConfigValidator.setConfigDir(absoluteBasePath);\n+\n+        dynamicConfigValidator.readVariableConfig();\n+        if (dynamicConfigValidator.readSecurityConfig()) {\n+            validateRoleInSecurityConfig(dynamicConfigValidator.getElideSecurityConfig());\n+        }\n+        if (dynamicConfigValidator.readTableConfig()) {\n+            validateSqlInTableConfig(dynamicConfigValidator.getElideTableConfig());\n+        }\n+\n+        log.info(\"Configs Validation Passed!\");\n+    }\n+\n+    /**\n+     * Read variable file config.\n+     * @return boolean true if variable config file exists else false\n+     * @throws JsonProcessingException\n+     */\n+    private boolean readVariableConfig() throws JsonProcessingException {", "originalCommit": "ff69378fb0b2183fe5dc117a2b3a3b733ffb2728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxNDMyMg==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r432514322", "bodyText": "The main function however can separate read and validate - but the validator needs to be hooked into two places - the utility main function and the normal path when the service launches and compiles the configs.", "author": "aklish", "createdAt": "2020-05-29T14:18:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxMTk4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4ODkwOA==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r432688908", "bodyText": "@aklish  @moizarafat\n\nDoes the dynamic logic read the files twice? Once to build the config for compilation and once to validate? We really ought to read the config once to make sure we are validating the same configuration we are running with.\n\nSplitted getElideTablePojo & getElideSecurityPojo methods of DynamicConfigHelpers class such that we read the configs only once.\n\nThe main function however can separate read and validate - but the validator needs to be hooked into two places - the utility main function and the normal path when the service launches and compiles the configs.\n\nCreated a separate class method to read and validate config files which can be called outside of Main function also. Please check if this is what we wanted.", "author": "rishi-aga", "createdAt": "2020-05-29T19:24:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxMTk4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxNzEwOQ==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r432517109", "bodyText": "Let's make this a private member of the main function rather than a static variable.", "author": "aklish", "createdAt": "2020-05-29T14:21:32Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.validator;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.DynamicConfigHelpers;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Dimension;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Join;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Measure;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.MissingOptionException;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+@Data\n+/**\n+ * Util class to validate the model config files in local before deployment.\n+ */\n+public class DynamicConfigValidator {\n+\n+    private static final Set<String> SQL_DISALLOWED_WORDS = new HashSet<>(\n+            Arrays.asList(\"DROP\", \"TRUNCATE\", \"DELETE\", \"INSERT\", \"UPDATE\", \"ALTER\", \"COMMENT\", \"CREATE\", \"DESCRIBE\",\n+                    \"SHOW\", \"USE\", \"GRANT\", \"REVOKE\", \"CONNECT\", \"LOCK\", \"EXPLAIN\", \"CALL\", \"MERGE\", \"RENAME\"));\n+    private static final String[] ROLE_NAME_DISALLOWED_WORDS = new String[] { \",\" };\n+    private static final String SQL_SPLIT_REGEX = \"\\\\s+\";\n+    private static final String SEMI_COLON = \";\";\n+    private static final Pattern HANDLEBAR_REGEX = Pattern.compile(\"<%(.*?)%>\");\n+    private static final Options OPTIONS = prepareOptions();", "originalCommit": "ff69378fb0b2183fe5dc117a2b3a3b733ffb2728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0NDU4MQ==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r432544581", "bodyText": "Updated.", "author": "rishi-aga", "createdAt": "2020-05-29T14:58:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxNzEwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxODQyOQ==", "url": "https://github.com/yahoo/elide/pull/1306#discussion_r432518429", "bodyText": "Nice functional breakdown for the validation logic.", "author": "aklish", "createdAt": "2020-05-29T14:22:51Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.validator;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.DynamicConfigHelpers;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Dimension;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Join;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Measure;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.Table;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.MissingOptionException;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.io.FileUtils;\n+\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+@Data\n+/**\n+ * Util class to validate the model config files in local before deployment.\n+ */\n+public class DynamicConfigValidator {\n+\n+    private static final Set<String> SQL_DISALLOWED_WORDS = new HashSet<>(\n+            Arrays.asList(\"DROP\", \"TRUNCATE\", \"DELETE\", \"INSERT\", \"UPDATE\", \"ALTER\", \"COMMENT\", \"CREATE\", \"DESCRIBE\",\n+                    \"SHOW\", \"USE\", \"GRANT\", \"REVOKE\", \"CONNECT\", \"LOCK\", \"EXPLAIN\", \"CALL\", \"MERGE\", \"RENAME\"));\n+    private static final String[] ROLE_NAME_DISALLOWED_WORDS = new String[] { \",\" };\n+    private static final String SQL_SPLIT_REGEX = \"\\\\s+\";\n+    private static final String SEMI_COLON = \";\";\n+    private static final Pattern HANDLEBAR_REGEX = Pattern.compile(\"<%(.*?)%>\");\n+    private static final Options OPTIONS = prepareOptions();\n+\n+    private ElideTableConfig elideTableConfig;\n+    private ElideSecurityConfig elideSecurityConfig;\n+    private Map<String, Object> variables;\n+    private String configDir;\n+\n+    public static void main(String[] args) throws IOException, ParseException {\n+\n+        CommandLine cli = new DefaultParser().parse(OPTIONS, args);\n+\n+        if (cli.hasOption(\"help\")) {\n+            printHelp();\n+            return;\n+        }\n+        if (!cli.hasOption(\"configDir\")) {\n+            printHelp();\n+            throw new MissingOptionException(\"Missing required option\");\n+        }\n+        String configDir = cli.getOptionValue(\"configDir\");\n+        File file = new File(configDir);\n+        String absoluteBasePath = DynamicConfigHelpers.formatFilePath(file.getAbsolutePath());\n+        log.info(\"Absolute Path for Model Configs Directory: \" + absoluteBasePath);\n+\n+        if (!file.isDirectory()) {\n+            throw new IllegalStateException(\"Model Configs Directory doesn't exists\");\n+        }\n+\n+        DynamicConfigValidator dynamicConfigValidator = new DynamicConfigValidator();\n+        dynamicConfigValidator.setConfigDir(absoluteBasePath);\n+\n+        dynamicConfigValidator.readVariableConfig();\n+        if (dynamicConfigValidator.readSecurityConfig()) {\n+            validateRoleInSecurityConfig(dynamicConfigValidator.getElideSecurityConfig());\n+        }\n+        if (dynamicConfigValidator.readTableConfig()) {\n+            validateSqlInTableConfig(dynamicConfigValidator.getElideTableConfig());\n+        }\n+\n+        log.info(\"Configs Validation Passed!\");\n+    }\n+\n+    /**\n+     * Read variable file config.\n+     * @return boolean true if variable config file exists else false\n+     * @throws JsonProcessingException\n+     */\n+    private boolean readVariableConfig() throws JsonProcessingException {\n+        boolean isVariableConfig = exists(this.configDir + DynamicConfigHelpers.VARIABLE_CONFIG_PATH);\n+        this.variables = isVariableConfig ? DynamicConfigHelpers.getVariablesPojo(this.configDir)\n+                : Collections.<String, Object>emptyMap();\n+        return isVariableConfig;\n+    }\n+\n+    /**\n+     * Read security config file and checks for any missing Handlebar variables.\n+     * @return boolean true if security config file exists else false\n+     * @throws IOException\n+     */\n+    private boolean readSecurityConfig() throws IOException {\n+        String securityConfigPath = this.configDir + DynamicConfigHelpers.SECURITY_CONFIG_PATH;\n+        boolean isSecurityConfig = exists(securityConfigPath);\n+        if (isSecurityConfig) {\n+            String securityConfigContent = DynamicConfigHelpers.readConfigFile(new File(securityConfigPath));\n+            validateConfigForMissingVariables(securityConfigContent, this.variables);\n+            this.elideSecurityConfig = DynamicConfigHelpers.getElideSecurityPojo(this.configDir, this.variables);\n+        }\n+        return isSecurityConfig;\n+    }\n+\n+    /**\n+     * Read table config files and checks for any missing Handlebar variables.\n+     * @return boolean true if table config directory exists else false\n+     * @throws IOException\n+     */\n+    private boolean readTableConfig() throws IOException {\n+        String tableConfigsPath = this.configDir + DynamicConfigHelpers.TABLE_CONFIG_PATH;\n+        boolean isTableConfig = exists(tableConfigsPath);\n+        if (isTableConfig) {\n+            Collection<File> tableConfigs = FileUtils.listFiles(new File(tableConfigsPath), new String[] { \"hjson\" },\n+                    false);\n+            if (tableConfigs.isEmpty()) {\n+                throw new IllegalStateException(\"No Table Configs found at location: \" + tableConfigsPath);\n+            }\n+            for (File tableConfig : tableConfigs) {\n+                String tableConfigContent = DynamicConfigHelpers.readConfigFile(tableConfig);\n+                validateConfigForMissingVariables(tableConfigContent, this.variables);\n+            }\n+            this.elideTableConfig = DynamicConfigHelpers.getElideTablePojo(this.configDir, this.variables);\n+        } else {\n+            throw new IllegalStateException(\"Table Configs Directory doesn't exists at location: \" + tableConfigsPath);\n+        }\n+        return isTableConfig;\n+    }\n+\n+    /**\n+     * Check if file or directory exists.\n+     * @param filePath path of the file or directory\n+     * @return boolean true if file or directory exists else false\n+     */\n+    private static boolean exists(String filePath) {\n+        return new File(filePath).exists();\n+    }\n+\n+    /**\n+     * Extracts any handlebar variables in config file and checks if they are\n+     * defined in variable config. Throw exception for undefined variables.\n+     * @param config config file\n+     * @param variables A map of defined variables\n+     */\n+    private static void validateConfigForMissingVariables(String config, Map<String, Object> variables) {\n+        Matcher regexMatcher = HANDLEBAR_REGEX.matcher(config);\n+        while (regexMatcher.find()) {\n+            String str = regexMatcher.group(1).trim();\n+            if (!variables.containsKey(str)) {\n+                throw new IllegalStateException(str + \" is used as a variable in either table or security config files \"\n+                        + \"but is not defined in variables config file.\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Validate table sql and column definition provided in table configs.\n+     * @param elideTableConfig ElideTableConfig\n+     * @return boolean true if all sql/definition passes validation\n+     */\n+    private static boolean validateSqlInTableConfig(ElideTableConfig elideTableConfig) {", "originalCommit": "ff69378fb0b2183fe5dc117a2b3a3b733ffb2728", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ece07420045910324dd91206ee999cd82c8ca478", "url": "https://github.com/yahoo/elide/commit/ece07420045910324dd91206ee999cd82c8ca478", "message": "Review Comments", "committedDate": "2020-05-29T14:53:50Z", "type": "commit"}, {"oid": "d37c3778e0f15e3226a310965747b31e3e2ff7cd", "url": "https://github.com/yahoo/elide/commit/d37c3778e0f15e3226a310965747b31e3e2ff7cd", "message": "Review Comments", "committedDate": "2020-05-29T19:18:54Z", "type": "commit"}, {"oid": "82abef2432eef8188724b0d83adff5eefb6aaf1e", "url": "https://github.com/yahoo/elide/commit/82abef2432eef8188724b0d83adff5eefb6aaf1e", "message": "Use DynamicConfigValidator instead of ElideConfigParser", "committedDate": "2020-06-01T14:32:44Z", "type": "commit"}, {"oid": "82abef2432eef8188724b0d83adff5eefb6aaf1e", "url": "https://github.com/yahoo/elide/commit/82abef2432eef8188724b0d83adff5eefb6aaf1e", "message": "Use DynamicConfigValidator instead of ElideConfigParser", "committedDate": "2020-06-01T14:32:44Z", "type": "forcePushed"}]}