{"pr_number": 1526, "pr_title": "Result Storage Engine Implementation", "pr_createdAt": "2020-09-09T05:54:30Z", "pr_url": "https://github.com/yahoo/elide/pull/1526", "timeline": [{"oid": "12c57ec20bb66393fe023c7307dd286849944c48", "url": "https://github.com/yahoo/elide/commit/12c57ec20bb66393fe023c7307dd286849944c48", "message": "Result Storage Engine Implementation\n\nCo-authored-by: chandrakaran <chandrakaranreddy.patlolla1@gmail.com>", "committedDate": "2020-09-09T05:44:12Z", "type": "commit"}, {"oid": "f912fa39e30476755ff10b09fc75c436df2daa89", "url": "https://github.com/yahoo/elide/commit/f912fa39e30476755ff10b09fc75c436df2daa89", "message": "Result Storage Engine Implementation\n\nCo-authored-by: chandrakaran <chandrakaranreddy.patlolla1@gmail.com>", "committedDate": "2020-09-09T05:53:00Z", "type": "commit"}, {"oid": "c332d3199e2113269952d375699a9d3f52b44f91", "url": "https://github.com/yahoo/elide/commit/c332d3199e2113269952d375699a9d3f52b44f91", "message": "Result Storage Engine Implementation\n\nCo-authored-by: chandrakaran <chandrakaranreddy.patlolla1@gmail.com>", "committedDate": "2020-09-09T05:54:17Z", "type": "commit"}, {"oid": "d74103252e22c1c069d04db651418c3b688d5565", "url": "https://github.com/yahoo/elide/commit/d74103252e22c1c069d04db651418c3b688d5565", "message": "fix\n\nCo-authored-by: chandrakaran <chandrakaranreddy.patlolla1@gmail.com>", "committedDate": "2020-09-09T06:08:17Z", "type": "commit"}, {"oid": "c561cc7d495e19a78069c814100520454684cfda", "url": "https://github.com/yahoo/elide/commit/c561cc7d495e19a78069c814100520454684cfda", "message": "fix\n\nCo-authored-by: chandrakaran <chandrakaranreddy.patlolla1@gmail.com>", "committedDate": "2020-09-09T06:09:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxMzgzMA==", "url": "https://github.com/yahoo/elide/pull/1526#discussion_r485913830", "bodyText": "Maybe we can move this under a subdirectory with a descriptive name so it is clear what this file is about.", "author": "aklish", "createdAt": "2020-09-09T20:50:08Z", "path": "elide-async/src/test/resources/bb31ca4e-ed8f-4be0-a0f3-12099fb9263f", "diffHunk": "@@ -0,0 +1 @@\n+test", "originalCommit": "c561cc7d495e19a78069c814100520454684cfda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxNTAyOQ==", "url": "https://github.com/yahoo/elide/pull/1526#discussion_r485915029", "bodyText": "can we add longer names for s and t so it is clear what they are?", "author": "aklish", "createdAt": "2020-09-09T20:52:28Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/FileResultStorageEngine.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+package com.yahoo.elide.async.service;\n+\n+import com.yahoo.elide.async.models.AsyncQuery;\n+\n+import io.reactivex.Observable;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+\n+import javax.inject.Singleton;\n+\n+/**\n+ * Default implementation of ResultStorageEngine that stores results on local filesystem.\n+ * It supports Async Module to store results with async query.\n+ */\n+@Singleton\n+@Slf4j\n+@Getter\n+public class FileResultStorageEngine implements ResultStorageEngine {\n+    @Setter private String basePath;\n+\n+    public FileResultStorageEngine() {\n+    }\n+\n+    /**\n+     * Constructor.\n+     * @param basePath basePath for storing the files. Can be absolute or relative.\n+     */\n+    public FileResultStorageEngine(String basePath) {\n+        this.basePath = basePath;\n+    }\n+\n+    @Override\n+    public AsyncQuery storeResults(AsyncQuery asyncQuery, Observable<String> result) {\n+        log.debug(\"store AsyncResults for Download\");\n+\n+        try (BufferedWriter writer = getWriter(asyncQuery.getId())) {\n+            result\n+                .map(s -> s.concat(System.getProperty(\"line.separator\")))\n+                .subscribe(\n+                        s -> {\n+                            writer.write(s);\n+                            writer.flush();\n+                        },\n+                        t -> {", "originalCommit": "c561cc7d495e19a78069c814100520454684cfda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxNzIzMQ==", "url": "https://github.com/yahoo/elide/pull/1526#discussion_r485917231", "bodyText": "This block is repeated over and over.  Let's make a function and reuse it.", "author": "aklish", "createdAt": "2020-09-09T20:56:40Z", "path": "elide-async/src/test/java/com/yahoo/elide/async/service/FileResultStorageEngineTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import com.yahoo.elide.async.models.AsyncQuery;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import io.reactivex.Observable;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+\n+/**\n+ * Test cases for FileResultStorageEngine.\n+ */\n+public class FileResultStorageEngineTest {\n+\n+    @Test\n+    public void testRead() {\n+        FileResultStorageEngine engine = new FileResultStorageEngine(\"src/test/resources\");\n+        String queryId = \"bb31ca4e-ed8f-4be0-a0f3-12099fb9263f\";\n+        String finalResult = engine.getResultsByID(queryId).collect(() -> new StringBuilder(),\n+                (resultBuilder, tempResult) -> {\n+                    if (resultBuilder.length() > 0) {\n+                        resultBuilder.append(System.getProperty(\"line.separator\"));\n+                    }\n+                    resultBuilder.append(tempResult);\n+                }\n+                ).map(StringBuilder::toString).blockingGet();\n+\n+        assertEquals(finalResult, \"test\");\n+    }\n+\n+    @Test\n+    public void testReadEmptyFile() {\n+        FileResultStorageEngine engine = new FileResultStorageEngine(\"src/test/resources\");\n+        String finalResult = engine.getResultsByID(\"bb31ca4e-ed8f-4be0-a0f3-12099fb9263e\").collect(() -> new StringBuilder(),", "originalCommit": "c561cc7d495e19a78069c814100520454684cfda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxNzg0Mw==", "url": "https://github.com/yahoo/elide/pull/1526#discussion_r485917843", "bodyText": "We should read it back and verify we can return what we wrote out.", "author": "aklish", "createdAt": "2020-09-09T20:57:59Z", "path": "elide-async/src/test/java/com/yahoo/elide/async/service/FileResultStorageEngineTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import com.yahoo.elide.async.models.AsyncQuery;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import io.reactivex.Observable;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+\n+/**\n+ * Test cases for FileResultStorageEngine.\n+ */\n+public class FileResultStorageEngineTest {\n+\n+    @Test\n+    public void testRead() {\n+        FileResultStorageEngine engine = new FileResultStorageEngine(\"src/test/resources\");\n+        String queryId = \"bb31ca4e-ed8f-4be0-a0f3-12099fb9263f\";\n+        String finalResult = engine.getResultsByID(queryId).collect(() -> new StringBuilder(),\n+                (resultBuilder, tempResult) -> {\n+                    if (resultBuilder.length() > 0) {\n+                        resultBuilder.append(System.getProperty(\"line.separator\"));\n+                    }\n+                    resultBuilder.append(tempResult);\n+                }\n+                ).map(StringBuilder::toString).blockingGet();\n+\n+        assertEquals(finalResult, \"test\");\n+    }\n+\n+    @Test\n+    public void testReadEmptyFile() {\n+        FileResultStorageEngine engine = new FileResultStorageEngine(\"src/test/resources\");\n+        String finalResult = engine.getResultsByID(\"bb31ca4e-ed8f-4be0-a0f3-12099fb9263e\").collect(() -> new StringBuilder(),\n+                (resultBuilder, tempResult) -> {\n+                    if (resultBuilder.length() > 0) {\n+                        resultBuilder.append(System.getProperty(\"line.separator\"));\n+                    }\n+                    resultBuilder.append(tempResult);\n+                }\n+                ).map(StringBuilder::toString).blockingGet();\n+\n+        assertEquals(finalResult, \"\");\n+    }\n+\n+    @Test\n+    public void testReadNonExistentFile() {\n+        FileResultStorageEngine engine = new FileResultStorageEngine(\"src/test/resources\");\n+        assertThrows(IllegalStateException.class, () ->\n+            engine.getResultsByID(\"bb31ca4e-ed8f-4be0-a0f3-12099fb9263d\").collect(() -> new StringBuilder(),\n+                (resultBuilder, tempResult) -> {\n+                    if (resultBuilder.length() > 0) {\n+                        resultBuilder.append(System.getProperty(\"line.separator\"));\n+                    }\n+                    resultBuilder.append(tempResult);\n+                }\n+            ).map(StringBuilder::toString).blockingGet()\n+        );\n+    }\n+\n+    @Test\n+    public void testStoreResults(@TempDir Path tempDir) {\n+        String queryId = \"bb31ca4e-ed8f-4be0-a0f3-12099fb9263c\";\n+        FileResultStorageEngine engine = new FileResultStorageEngine(tempDir.toString());\n+        AsyncQuery query = new AsyncQuery();\n+        query.setId(queryId);\n+        engine.storeResults(query, Observable.fromArray(new String[]{\"hi\", \"hello\"}));\n+        File file = new File(tempDir.toString() + File.separator + queryId);\n+        assertTrue(file.exists());", "originalCommit": "c561cc7d495e19a78069c814100520454684cfda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "89a6a6b4344ecbba1ad45125c9ccb378395eeeb3", "url": "https://github.com/yahoo/elide/commit/89a6a6b4344ecbba1ad45125c9ccb378395eeeb3", "message": "Review comments\n\nCo-authored-by: chandrakaran <chandrakaranreddy.patlolla1@gmail.com>", "committedDate": "2020-09-09T21:32:59Z", "type": "commit"}, {"oid": "9c8f7ba32a219d53cd93094e6a9769a43d05167b", "url": "https://github.com/yahoo/elide/commit/9c8f7ba32a219d53cd93094e6a9769a43d05167b", "message": "Review comments\n\nCo-authored-by: chandrakaran <chandrakaranreddy.patlolla1@gmail.com>", "committedDate": "2020-09-09T21:42:15Z", "type": "commit"}, {"oid": "4bee133591fa9b09d2e1deb4f46071f88eb72e1d", "url": "https://github.com/yahoo/elide/commit/4bee133591fa9b09d2e1deb4f46071f88eb72e1d", "message": "Review comments.\n\nCo-authored-by: chandrakaran <chandrakaranreddy.patlolla1@gmail.com>", "committedDate": "2020-09-10T15:25:51Z", "type": "commit"}]}