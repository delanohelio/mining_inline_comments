{"pr_number": 1305, "pr_title": "GraphQL Many-to-many filter Bug Fix", "pr_createdAt": "2020-05-06T22:33:05Z", "pr_url": "https://github.com/yahoo/elide/pull/1305", "timeline": [{"oid": "7af5bd950d4096b5a5b011846ccb53e5f9075b81", "url": "https://github.com/yahoo/elide/commit/7af5bd950d4096b5a5b011846ccb53e5f9075b81", "message": "Adding many-to-many filter support for graphql with single test", "committedDate": "2020-05-06T21:12:08Z", "type": "commit"}, {"oid": "b2ee0f4b8a06b1e8c9575bf3891aa3f3592a6096", "url": "https://github.com/yahoo/elide/commit/b2ee0f4b8a06b1e8c9575bf3891aa3f3592a6096", "message": "Adding more many-to-many graphql tests", "committedDate": "2020-05-06T21:43:12Z", "type": "commit"}, {"oid": "004bba25b5fdf967731e1ceed1592785d31afd50", "url": "https://github.com/yahoo/elide/commit/004bba25b5fdf967731e1ceed1592785d31afd50", "message": "Error logging + spacing cleanup", "committedDate": "2020-05-06T22:05:45Z", "type": "commit"}, {"oid": "cfd79b8a9efd998a1d8f0c458f4b4bfa3dcccc41", "url": "https://github.com/yahoo/elide/commit/cfd79b8a9efd998a1d8f0c458f4b4bfa3dcccc41", "message": "Reorder imports", "committedDate": "2020-05-06T22:42:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzOTQ4OA==", "url": "https://github.com/yahoo/elide/pull/1305#discussion_r421239488", "bodyText": "Unnecessary initialization.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String errorMessage = \"\";\n          \n          \n            \n                        String errorMessage;", "author": "wcekan", "createdAt": "2020-05-07T04:58:25Z", "path": "elide-graphql/src/main/java/com/yahoo/elide/graphql/PersistentResourceFetcher.java", "diffHunk": "@@ -563,22 +562,38 @@ private ConnectionContainer replaceObjects(Environment context) {\n         return sort.map(Sorting::parseSortRule);\n     }\n \n+    private MultivaluedHashMap<String, String> getQueryParams(Optional<String> typeName, String filterStr) {\n+        return new MultivaluedHashMap<String, String>() {\n+            {\n+                String filterKey = \"filter\";\n+                if (typeName.isPresent()) {\n+                    filterKey += \"[\" + typeName + \"]\";\n+                }\n+                put(filterKey, Arrays.asList(filterStr));\n+            }\n+        };\n+    }\n+\n     private Optional<FilterExpression> buildFilter(String typeName,\n                                                    Optional<String> filter,\n                                                    RequestScope requestScope) {\n         // TODO: Refactor FilterDialect interfaces to accept string or List<String> instead of (or in addition to?)\n         // query params.\n         return filter.map(filterStr -> {\n-            MultivaluedMap<String, String> queryParams = new MultivaluedHashMap<String, String>() {\n-                {\n-                    put(\"filter[\" + typeName + \"]\", Arrays.asList(filterStr));\n-                }\n-            };\n+            String errorMessage = \"\";", "originalCommit": "cfd79b8a9efd998a1d8f0c458f4b4bfa3dcccc41", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzOTc2Nw==", "url": "https://github.com/yahoo/elide/pull/1305#discussion_r421239767", "bodyText": "@aklish will this conflict with #1304?", "author": "wcekan", "createdAt": "2020-05-07T04:59:19Z", "path": "elide-graphql/src/main/java/com/yahoo/elide/graphql/PersistentResourceFetcher.java", "diffHunk": "@@ -563,22 +562,38 @@ private ConnectionContainer replaceObjects(Environment context) {\n         return sort.map(Sorting::parseSortRule);\n     }\n \n+    private MultivaluedHashMap<String, String> getQueryParams(Optional<String> typeName, String filterStr) {\n+        return new MultivaluedHashMap<String, String>() {\n+            {\n+                String filterKey = \"filter\";\n+                if (typeName.isPresent()) {\n+                    filterKey += \"[\" + typeName + \"]\";\n+                }\n+                put(filterKey, Arrays.asList(filterStr));\n+            }\n+        };\n+    }\n+\n     private Optional<FilterExpression> buildFilter(String typeName,\n                                                    Optional<String> filter,\n                                                    RequestScope requestScope) {\n         // TODO: Refactor FilterDialect interfaces to accept string or List<String> instead of (or in addition to?)\n         // query params.\n         return filter.map(filterStr -> {\n-            MultivaluedMap<String, String> queryParams = new MultivaluedHashMap<String, String>() {\n-                {\n-                    put(\"filter[\" + typeName + \"]\", Arrays.asList(filterStr));\n-                }\n-            };\n+            String errorMessage = \"\";\n+            try {\n+                return requestScope.getFilterDialect()\n+                        .parseGlobalExpression(typeName, getQueryParams(Optional.empty(), filterStr));\n+            } catch (ParseException e) {\n+                errorMessage = e.getMessage();\n+            }\n+\n             try {\n-                return requestScope.getFilterDialect().parseTypedExpression(typeName, queryParams).get(typeName);\n+                return requestScope.getFilterDialect()\n+                        .parseTypedExpression(typeName, getQueryParams(Optional.of(typeName), filterStr))\n+                        .get(typeName);\n             } catch (ParseException e) {\n-                log.debug(\"Filter parse exception caught\", e);\n-                throw new InvalidPredicateException(\"Could not parse filter for type: \" + typeName);\n+                throw new InvalidPredicateException(errorMessage + \"\\n\" + e.getMessage());", "originalCommit": "cfd79b8a9efd998a1d8f0c458f4b4bfa3dcccc41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwMjQxMw==", "url": "https://github.com/yahoo/elide/pull/1305#discussion_r421602413", "bodyText": "It will - but should be simple to merge.", "author": "aklish", "createdAt": "2020-05-07T15:39:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzOTc2Nw=="}], "type": "inlineReview"}]}