{"pr_number": 1569, "pr_title": "Integration test for Security HJSON", "pr_createdAt": "2020-10-02T22:05:09Z", "pr_url": "https://github.com/yahoo/elide/pull/1569", "timeline": [{"oid": "d144f0fb4bf908f9ff6f41d9677992bf25a7b2c2", "url": "https://github.com/yahoo/elide/commit/d144f0fb4bf908f9ff6f41d9677992bf25a7b2c2", "message": "Integration test for Security HJSON", "committedDate": "2020-10-02T22:28:34Z", "type": "forcePushed"}, {"oid": "dc1d90e13b2bbca8fcdbca27071c0e7bbd9bc601", "url": "https://github.com/yahoo/elide/commit/dc1d90e13b2bbca8fcdbca27071c0e7bbd9bc601", "message": "Integration test for Security HJSON", "committedDate": "2020-10-02T22:32:25Z", "type": "commit"}, {"oid": "dc1d90e13b2bbca8fcdbca27071c0e7bbd9bc601", "url": "https://github.com/yahoo/elide/commit/dc1d90e13b2bbca8fcdbca27071c0e7bbd9bc601", "message": "Integration test for Security HJSON", "committedDate": "2020-10-02T22:32:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwOTEzMA==", "url": "https://github.com/yahoo/elide/pull/1569#discussion_r499309130", "bodyText": "Does Handlebar allow to chain functions? would something like this work\n<%#replaceSpace<%#toUpperCase this%><%/toUpperCase%>%><%/replaceSpace%>", "author": "moizarafat", "createdAt": "2020-10-05T01:04:27Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/resources/templates/security.hbs", "diffHunk": "@@ -8,10 +8,10 @@ package dynamicconfig.models;\n import com.yahoo.elide.annotation.SecurityCheck;\n import com.yahoo.elide.security.checks.prefab.Role.RoleMemberCheck;\n \n-@SecurityCheck(DynamicConfigOperationChecksPrincipalIs<%#titleCaseRemoveSpaces this%><%/titleCaseRemoveSpaces%>.PRINCIPAL_IS_<%#toUpperCase this%><%/toUpperCase%>)\n+@SecurityCheck(DynamicConfigOperationChecksPrincipalIs<%#titleCaseRemoveSpaces this%><%/titleCaseRemoveSpaces%>.PRINCIPAL_IS_<%#toUpperCaseReplaceSpace this%><%/toUpperCaseReplaceSpace%>)", "originalCommit": "dc1d90e13b2bbca8fcdbca27071c0e7bbd9bc601", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwNzgwOQ==", "url": "https://github.com/yahoo/elide/pull/1569#discussion_r499607809", "bodyText": "I gave it a try but doesn't seem to working.", "author": "rishi-aga", "createdAt": "2020-10-05T13:42:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwOTEzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMDI4OA==", "url": "https://github.com/yahoo/elide/pull/1569#discussion_r499720288", "bodyText": "okie.", "author": "moizarafat", "createdAt": "2020-10-05T16:21:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwOTEzMA=="}], "type": "inlineReview"}, {"oid": "d2c3a5fedf9586d51c2d28405d94b4ddc83e96ad", "url": "https://github.com/yahoo/elide/commit/d2c3a5fedf9586d51c2d28405d94b4ddc83e96ad", "message": "Use temporary variable to store value in security.hbs to avoid repetition", "committedDate": "2020-10-05T16:05:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNTUwMA==", "url": "https://github.com/yahoo/elide/pull/1569#discussion_r499715500", "bodyText": "Typo - Hjson instead of hjosn", "author": "aklish", "createdAt": "2020-10-05T16:13:35Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/integration/AggregationDataStoreDynamicSecurityIT.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.integration;\n+\n+import static com.yahoo.elide.core.EntityDictionary.NO_VERSION;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideResponse;\n+import com.yahoo.elide.ElideSettingsBuilder;\n+import com.yahoo.elide.annotation.SecurityCheck;\n+import com.yahoo.elide.audit.TestAuditLogger;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ElideDynamicEntityCompiler;\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.HttpStatus;\n+import com.yahoo.elide.core.datastore.test.DataStoreTestHarness;\n+import com.yahoo.elide.datastores.aggregation.framework.AggregationDataStoreTestHarness;\n+import com.yahoo.elide.initialization.IntegrationTest;\n+import com.yahoo.elide.resources.SecurityContextUser;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+import java.security.Principal;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+import javax.sql.DataSource;\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.SecurityContext;\n+\n+/**\n+ * Integration tests for Dynamic Configs with Security hjson.\n+ */\n+public class AggregationDataStoreDynamicSecurityIT extends IntegrationTest {\n+\n+    private final ElideDynamicEntityCompiler compiler =\n+                    AggregationDataStoreIntegrationTest.getCompiler(\"src/test/resources/configs_with_security_hjson\");\n+\n+    @Override\n+    protected DataStoreTestHarness createHarness() {\n+\n+        HikariConfig config = new HikariConfig(File.separator + \"jpah2db.properties\");\n+        DataSource defaultDataSource = new HikariDataSource(config);\n+        String defaultDialect = \"h2\";\n+        ConnectionDetails defaultConnectionDetails = new ConnectionDetails(defaultDataSource, defaultDialect);\n+\n+        Properties prop = new Properties();\n+        prop.put(\"javax.persistence.jdbc.driver\", config.getDriverClassName());\n+        prop.put(\"javax.persistence.jdbc.url\", config.getJdbcUrl());\n+        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"aggregationStore\", prop);\n+\n+        Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n+        // Add connection details fetched from hjson\n+        connectionDetailsMap.putAll(compiler.getConnectionDetailsMap());\n+\n+        return new AggregationDataStoreTestHarness(emf, defaultConnectionDetails, connectionDetailsMap, compiler);\n+    }\n+\n+    @Test\n+    public void testSecurityHjosnWithAggregationModel() throws Exception {", "originalCommit": "d2c3a5fedf9586d51c2d28405d94b4ddc83e96ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNDg5Mg==", "url": "https://github.com/yahoo/elide/pull/1569#discussion_r499724892", "bodyText": "\ud83d\udc4d", "author": "rishi-aga", "createdAt": "2020-10-05T16:28:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNTUwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMjA3Nw==", "url": "https://github.com/yahoo/elide/pull/1569#discussion_r499722077", "bodyText": "Rather than testing at a lower level, you could look at TestAuthFilter and how it is used.  It might make sense to extend that in some way with a mock that can be controlled in the tests themselves.  Then you could also use Rest Assured here for more readable tests.", "author": "aklish", "createdAt": "2020-10-05T16:23:59Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/integration/AggregationDataStoreDynamicSecurityIT.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.integration;\n+\n+import static com.yahoo.elide.core.EntityDictionary.NO_VERSION;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideResponse;\n+import com.yahoo.elide.ElideSettingsBuilder;\n+import com.yahoo.elide.annotation.SecurityCheck;\n+import com.yahoo.elide.audit.TestAuditLogger;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ElideDynamicEntityCompiler;\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.HttpStatus;\n+import com.yahoo.elide.core.datastore.test.DataStoreTestHarness;\n+import com.yahoo.elide.datastores.aggregation.framework.AggregationDataStoreTestHarness;\n+import com.yahoo.elide.initialization.IntegrationTest;\n+import com.yahoo.elide.resources.SecurityContextUser;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+import java.security.Principal;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+import javax.sql.DataSource;\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.SecurityContext;\n+\n+/**\n+ * Integration tests for Dynamic Configs with Security hjson.\n+ */\n+public class AggregationDataStoreDynamicSecurityIT extends IntegrationTest {\n+\n+    private final ElideDynamicEntityCompiler compiler =\n+                    AggregationDataStoreIntegrationTest.getCompiler(\"src/test/resources/configs_with_security_hjson\");\n+\n+    @Override\n+    protected DataStoreTestHarness createHarness() {\n+\n+        HikariConfig config = new HikariConfig(File.separator + \"jpah2db.properties\");\n+        DataSource defaultDataSource = new HikariDataSource(config);\n+        String defaultDialect = \"h2\";\n+        ConnectionDetails defaultConnectionDetails = new ConnectionDetails(defaultDataSource, defaultDialect);\n+\n+        Properties prop = new Properties();\n+        prop.put(\"javax.persistence.jdbc.driver\", config.getDriverClassName());\n+        prop.put(\"javax.persistence.jdbc.url\", config.getJdbcUrl());\n+        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"aggregationStore\", prop);\n+\n+        Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n+        // Add connection details fetched from hjson\n+        connectionDetailsMap.putAll(compiler.getConnectionDetailsMap());\n+\n+        return new AggregationDataStoreTestHarness(emf, defaultConnectionDetails, connectionDetailsMap, compiler);\n+    }\n+\n+    @Test\n+    public void testSecurityHjosnWithAggregationModel() throws Exception {\n+\n+        SecurityContextUser operator = new SecurityContextUser(new SecurityContext() {\n+            @Override\n+            public boolean isUserInRole(String role) {\n+                switch (role) {\n+                    case \"admin\":\n+                        return false;\n+                    case \"operator\":\n+                        return true;\n+                    case \"guest user\":\n+                        return true;\n+                    default:\n+                        return false;\n+                }\n+            }\n+\n+            @Override\n+            public boolean isSecure() {\n+                return false;\n+            }\n+\n+            @Override\n+            public Principal getUserPrincipal() {\n+                return () -> \"1\";\n+            }\n+\n+            @Override\n+            public String getAuthenticationScheme() {\n+                return null;\n+            }\n+        });\n+\n+        SecurityContextUser admin = new SecurityContextUser(new SecurityContext() {\n+            @Override\n+            public boolean isUserInRole(String role) {\n+                switch (role) {\n+                    case \"admin\":\n+                        return true;\n+                    case \"operator\":\n+                        return true;\n+                    case \"guest user\":\n+                        return true;\n+                    default:\n+                        return false;\n+                }\n+            }\n+\n+            @Override\n+            public boolean isSecure() {\n+                return false;\n+            }\n+\n+            @Override\n+            public Principal getUserPrincipal() {\n+                return () -> \"1\";\n+            }\n+\n+            @Override\n+            public String getAuthenticationScheme() {\n+                return null;\n+            }\n+        });\n+\n+        EntityDictionary dictionary = new EntityDictionary(new HashMap<>());\n+        dictionary.addSecurityChecks(compiler.findAnnotatedClasses(SecurityCheck.class));\n+\n+        Elide elide = new Elide(new ElideSettingsBuilder(dataStore)", "originalCommit": "d2c3a5fedf9586d51c2d28405d94b4ddc83e96ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c973eb01aadea01da31ff5e1c23a2bc5d2cd20b9", "url": "https://github.com/yahoo/elide/commit/c973eb01aadea01da31ff5e1c23a2bc5d2cd20b9", "message": "Review Comments", "committedDate": "2020-10-05T16:27:45Z", "type": "commit"}, {"oid": "e1d1473da71b9bfd34e674a255d8fc82e12a0e4e", "url": "https://github.com/yahoo/elide/commit/e1d1473da71b9bfd34e674a255d8fc82e12a0e4e", "message": "Mock working", "committedDate": "2020-10-06T15:55:44Z", "type": "commit"}, {"oid": "57891d1395bd1588d5527c89de55a795720e2205", "url": "https://github.com/yahoo/elide/commit/57891d1395bd1588d5527c89de55a795720e2205", "message": "Combine into 1", "committedDate": "2020-10-06T17:18:20Z", "type": "commit"}, {"oid": "abc35ae22971a4fadf45d7d7bb8070d679e44b31", "url": "https://github.com/yahoo/elide/commit/abc35ae22971a4fadf45d7d7bb8070d679e44b31", "message": "CleanUp", "committedDate": "2020-10-06T17:54:35Z", "type": "commit"}]}