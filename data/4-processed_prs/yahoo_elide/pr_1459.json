{"pr_number": 1459, "pr_title": "Rebased fetch for included relations", "pr_createdAt": "2020-07-22T23:46:45Z", "pr_url": "https://github.com/yahoo/elide/pull/1459", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MjMxMA==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459662310", "bodyText": "I don't think you need the entityClass if you also have the projection (The projection should have the class as well).", "author": "aklish", "createdAt": "2020-07-23T18:57:37Z", "path": "elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/RootCollectionFetchQueryBuilder.java", "diffHunk": "@@ -24,10 +25,10 @@\n \n     private Class<?> entityClass;\n \n-    public RootCollectionFetchQueryBuilder(Class<?> entityClass,\n+    public RootCollectionFetchQueryBuilder(EntityProjection entityProjection, Class<?> entityClass,", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MzA1NQ==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459663055", "bodyText": "Remove entityClass.", "author": "aklish", "createdAt": "2020-07-23T18:59:05Z", "path": "elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/RootCollectionPageTotalsQueryBuilder.java", "diffHunk": "@@ -27,23 +25,14 @@\n \n     private Class<?> entityClass;\n \n-    public RootCollectionPageTotalsQueryBuilder(Class<?> entityClass,\n+    public RootCollectionPageTotalsQueryBuilder(EntityProjection entityProjection,\n+                                                Class<?> entityClass,", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MTc3OQ==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459671779", "bodyText": "There is a bit of duplication between fields inside the relationship and fields inside the entityProjection.\nNot a huge deal, but I think we ought to refactor the Relationship interface in AbstractHQLQueryBuilder by:\n\nremove getChildren (its never used).\nadd a method to return the projection.\ngetChildType should have a default implementation that sources this data from the new method in 2.", "author": "aklish", "createdAt": "2020-07-23T19:15:39Z", "path": "elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/SubCollectionFetchQueryBuilder.java", "diffHunk": "@@ -24,10 +25,11 @@\n \n     private final Relationship relationship;\n \n-    public SubCollectionFetchQueryBuilder(Relationship relationship,\n+    public SubCollectionFetchQueryBuilder(EntityProjection entityProjection,", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MzI3NA==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459673274", "bodyText": "We can remove entityClass (as it is already contained in the new entity projection parameter)", "author": "aklish", "createdAt": "2020-07-23T19:18:36Z", "path": "elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java", "diffHunk": "@@ -270,13 +267,13 @@ public Object getRelation(\n      * @param <T>              The type of entity\n      * @return The total row count.\n      */\n-    private <T> Long getTotalRecords(Class<T> entityClass,\n+    private <T> Long getTotalRecords(EntityProjection entityProjection, Class<T> entityClass,", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MzYzMQ==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459673631", "bodyText": "We can remove entityClass parameter.", "author": "aklish", "createdAt": "2020-07-23T19:19:17Z", "path": "elide-datastore/elide-datastore-hibernate5/src/main/java/com/yahoo/elide/datastores/hibernate5/HibernateTransaction.java", "diffHunk": "@@ -252,13 +250,13 @@ public Object getRelation(\n      * @param <T> The type of entity\n      * @return The total row count.\n      */\n-    private <T> Long getTotalRecords(Class<T> entityClass,\n+    private <T> Long getTotalRecords(EntityProjection entityProjection, Class<T> entityClass,\n                                      Optional<FilterExpression> filterExpression,\n                                      EntityDictionary dictionary) {\n \n \n         QueryWrapper query = (QueryWrapper)\n-                new RootCollectionPageTotalsQueryBuilder(entityClass, dictionary, sessionWrapper)\n+                new RootCollectionPageTotalsQueryBuilder(entityProjection, entityClass, dictionary, sessionWrapper)", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3Mzc1NQ==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459673755", "bodyText": "We can remove entityClass parameter.", "author": "aklish", "createdAt": "2020-07-23T19:19:30Z", "path": "elide-datastore/elide-datastore-hibernate5/src/main/java/com/yahoo/elide/datastores/hibernate5/HibernateTransaction.java", "diffHunk": "@@ -252,13 +250,13 @@ public Object getRelation(\n      * @param <T> The type of entity\n      * @return The total row count.\n      */\n-    private <T> Long getTotalRecords(Class<T> entityClass,\n+    private <T> Long getTotalRecords(EntityProjection entityProjection, Class<T> entityClass,", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NDg1Mw==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459674853", "bodyText": "We can remove the entityClass param.", "author": "aklish", "createdAt": "2020-07-23T19:21:22Z", "path": "elide-datastore/elide-datastore-hibernate3/src/main/java/com/yahoo/elide/datastores/hibernate3/HibernateTransaction.java", "diffHunk": "@@ -245,31 +246,35 @@ public Object getRelation(\n      * @param <T> The type of entity\n      * @return The total row count.\n      */\n-    private <T> Long getTotalRecords(Class<T> entityClass,\n+    private <T> Long getTotalRecords(EntityProjection entityProjection,\n+                                     Class<T> entityClass,", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NTA1OA==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459675058", "bodyText": "We can remove the entityClass param.", "author": "aklish", "createdAt": "2020-07-23T19:21:44Z", "path": "elide-datastore/elide-datastore-hibernate3/src/main/java/com/yahoo/elide/datastores/hibernate3/HibernateTransaction.java", "diffHunk": "@@ -163,18 +164,16 @@ public Object loadObject(EntityProjection projection,\n         Class<?> entityClass = projection.getType();\n         Pagination pagination = projection.getPagination();\n         FilterExpression filterExpression = projection.getFilterExpression();\n-        Sorting sorting = projection.getSorting();\n \n         if (pagination != null && pagination.returnPageTotals()) {\n-            pagination.setPageTotals(getTotalRecords(entityClass,\n+            pagination.setPageTotals(getTotalRecords(projection, entityClass,\n                     Optional.ofNullable(filterExpression), scope.getDictionary()));\n         }\n \n         final QueryWrapper query =\n-                (QueryWrapper) new RootCollectionFetchQueryBuilder(entityClass, scope.getDictionary(), sessionWrapper)\n+                (QueryWrapper) new RootCollectionFetchQueryBuilder(projection, entityClass,\n+                        scope.getDictionary(), sessionWrapper)", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NzI0MQ==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459677241", "bodyText": "Technically, the entity projection should have the filter clause too.", "author": "aklish", "createdAt": "2020-07-23T19:25:49Z", "path": "elide-datastore/elide-datastore-hibernate/src/test/java/com/yahoo/elide/datastores/hibernate/hql/SubCollectionPageTotalsQueryBuilderTest.java", "diffHunk": "@@ -132,8 +189,10 @@ public void testSubCollectionPageTotalsWithJoinFilter() {\n                 new Path(publisherNamePath),\n                 \"Pub1\");\n \n+        EntityProjection entityProjection = EntityProjection.builder().type(Book.class).build();", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcxMTkxNw==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459711917", "bodyText": "Setting and resetting the mock this way (including the old code) seems fairly hacky.\nI suggest we initialize this class with a mock entity projection.  Let's add a @BeforeEach or AfterEach annotation which resets the mocks.\nEach method will have to setup the projection the way that. makes the most sense.", "author": "aklish", "createdAt": "2020-07-23T20:33:59Z", "path": "elide-datastore/elide-datastore-hibernate/src/test/java/com/yahoo/elide/datastores/hibernate/hql/AbstractHQLQueryBuilderTest.java", "diffHunk": "@@ -179,20 +190,20 @@ public void testSettingQueryParams() {\n     public void testSettingQueryPagination() {\n         Query query = mock(Query.class);\n \n-        Optional<Pagination> previousPagination = pagination;\n-\n         PaginationImpl paginationMock = mock(PaginationImpl.class);\n         when(paginationMock.getLimit()).thenReturn(10);\n         when(paginationMock.getOffset()).thenReturn(50);\n \n-        pagination = Optional.of(paginationMock);\n+        EntityProjection previousEntityProjection = entityProjection;\n+        entityProjection = mock(EntityProjection.class);", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcxMjExMw==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459712113", "bodyText": "Do we need a method for this?", "author": "aklish", "createdAt": "2020-07-23T20:34:22Z", "path": "elide-datastore/elide-datastore-hibernate/src/test/java/com/yahoo/elide/datastores/hibernate/hql/AbstractHQLQueryBuilderTest.java", "diffHunk": "@@ -54,15 +55,21 @@\n     private static final String DEF = \"DEF\";\n     private static final String NAME = \"name\";\n \n+\n     public AbstractHQLQueryBuilderTest() {\n-        super(new EntityDictionary(new HashMap<>()), new TestSessionWrapper());\n+        super(getMockEntityProjection(), new EntityDictionary(new HashMap<>()), new TestSessionWrapper());\n         dictionary.bindEntity(Author.class);\n         dictionary.bindEntity(Book.class);\n         dictionary.bindEntity(Chapter.class);\n         dictionary.bindEntity(Publisher.class);\n         dictionary.bindEntity(Left.class);\n     }\n \n+    private static  EntityProjection getMockEntityProjection() {", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQwMDI0Mw==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r469400243", "bodyText": "I had to create this method, due to the fact that calling super should be the first statement of the constructor, where this method is used.", "author": "suriyasundar92", "createdAt": "2020-08-12T16:49:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcxMjExMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcxMzY3MQ==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459713671", "bodyText": "The entity projection includes the Filter as well (not just the sorting and the pagination)", "author": "aklish", "createdAt": "2020-07-23T20:37:29Z", "path": "elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/AbstractHQLQueryBuilder.java", "diffHunk": "@@ -88,16 +86,6 @@ public AbstractHQLQueryBuilder withPossibleFilterExpression(Optional<FilterExpre\n         return this;\n     }\n \n-    public AbstractHQLQueryBuilder withPossibleSorting(final Optional<Sorting> possibleSorting) {", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0db34723da81bd09818b7b57eda150197c318cba", "url": "https://github.com/yahoo/elide/commit/0db34723da81bd09818b7b57eda150197c318cba", "message": "Adding fetch joins only when required", "committedDate": "2020-08-12T16:12:06Z", "type": "forcePushed"}, {"oid": "37710dc6829b8043ad92fb1d9f8a4e4b2acc32c2", "url": "https://github.com/yahoo/elide/commit/37710dc6829b8043ad92fb1d9f8a4e4b2acc32c2", "message": "Adding fetch joins only when required", "committedDate": "2020-08-13T04:45:59Z", "type": "commit"}, {"oid": "37710dc6829b8043ad92fb1d9f8a4e4b2acc32c2", "url": "https://github.com/yahoo/elide/commit/37710dc6829b8043ad92fb1d9f8a4e4b2acc32c2", "message": "Adding fetch joins only when required", "committedDate": "2020-08-13T04:45:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxNjk4NQ==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r470716985", "bodyText": "This method should get the entityProjection from the relationship - so there is no parameter duplication", "author": "aklish", "createdAt": "2020-08-14T16:05:55Z", "path": "elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/SubCollectionFetchQueryBuilder.java", "diffHunk": "@@ -24,10 +26,11 @@\n \n     private final Relationship relationship;\n \n-    public SubCollectionFetchQueryBuilder(Relationship relationship,\n+    public SubCollectionFetchQueryBuilder(EntityProjection entityProjection,\n+                                          Relationship relationship,", "originalCommit": "37710dc6829b8043ad92fb1d9f8a4e4b2acc32c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxNzcxNQ==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r470717715", "bodyText": "Same comment here.  getTotalRecords should only really need the relationship.", "author": "aklish", "createdAt": "2020-08-14T16:07:25Z", "path": "elide-datastore/elide-datastore-hibernate5/src/main/java/com/yahoo/elide/datastores/hibernate5/HibernateTransaction.java", "diffHunk": "@@ -223,26 +218,23 @@ public Object getRelation(\n                     return val;\n                 }\n \n-                Class<?> relationClass = dictionary.getParameterizedType(entity, relation.getName());\n-\n                 RelationshipImpl relationship = new RelationshipImpl(\n                         dictionary.lookupEntityClass(entity.getClass()),\n-                        relationClass,\n-                        relation.getName(),\n                         entity,\n-                        filteredVal);\n+                        relation\n+                );\n \n                 if (pagination != null && pagination.returnPageTotals()) {\n-                    pagination.setPageTotals(getTotalRecords(relationship,\n-                            Optional.ofNullable(filterExpression), scope.getDictionary()));\n+                    pagination.setPageTotals(getTotalRecords(", "originalCommit": "37710dc6829b8043ad92fb1d9f8a4e4b2acc32c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ca6b1b71b43a460049e8a1e1b5ce17b3e9adf3cb", "url": "https://github.com/yahoo/elide/commit/ca6b1b71b43a460049e8a1e1b5ce17b3e9adf3cb", "message": "Addressing comments", "committedDate": "2020-08-16T14:39:17Z", "type": "commit"}, {"oid": "687c88dd0a638cac1bfadcf95c3733ca43db81e2", "url": "https://github.com/yahoo/elide/commit/687c88dd0a638cac1bfadcf95c3733ca43db81e2", "message": "Remove unused argument", "committedDate": "2020-08-17T15:21:38Z", "type": "commit"}]}