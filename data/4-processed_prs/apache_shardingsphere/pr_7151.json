{"pr_number": 7151, "pr_title": "Add more test of  DatabaseProtocolFrontendEngineFactory", "pr_createdAt": "2020-08-30T09:45:50Z", "pr_url": "https://github.com/apache/shardingsphere/pull/7151", "timeline": [{"oid": "1151a109ee2c6019ea4c680911c19b1f4e61d808", "url": "https://github.com/apache/shardingsphere/commit/1151a109ee2c6019ea4c680911c19b1f4e61d808", "message": "add more test with NewInstance", "committedDate": "2020-08-30T09:41:29Z", "type": "commit"}, {"oid": "88990acc3c85d9c871429de03d4571a22c7a7f53", "url": "https://github.com/apache/shardingsphere/commit/88990acc3c85d9c871429de03d4571a22c7a7f53", "message": "fix test execute bug", "committedDate": "2020-08-30T11:42:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MTk4Mg==", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479781982", "bodyText": "Why use @RunWith(MockitoJUnitRunner.class) if not filed use @mock?", "author": "terrymanu", "createdAt": "2020-08-30T15:15:55Z", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/DatabaseProtocolFrontendEngineFactoryTest.java", "diffHunk": "@@ -18,12 +18,35 @@\n package org.apache.shardingsphere.proxy.frontend;\n \n import org.apache.shardingsphere.infra.database.type.DatabaseTypes;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.spi.ShardingSphereServiceLoader;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+import java.lang.reflect.Method;\n+\n+@RunWith(MockitoJUnitRunner.class)", "originalCommit": "88990acc3c85d9c871429de03d4571a22c7a7f53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MzUzMg==", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479783532", "bodyText": "sorry , forgot to remove", "author": "xbkaishui", "createdAt": "2020-08-30T15:31:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MTk4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjA3NA==", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479782074", "bodyText": "It is better to rename Mysql to MySQL", "author": "terrymanu", "createdAt": "2020-08-30T15:16:50Z", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/DatabaseProtocolFrontendEngineFactoryTest.java", "diffHunk": "@@ -18,12 +18,35 @@\n package org.apache.shardingsphere.proxy.frontend;\n \n import org.apache.shardingsphere.infra.database.type.DatabaseTypes;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.spi.ShardingSphereServiceLoader;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+import java.lang.reflect.Method;\n+\n+@RunWith(MockitoJUnitRunner.class)\n public final class DatabaseProtocolFrontendEngineFactoryTest {\n     \n+    @Before\n+    public void init() throws Exception {\n+        Method method = ShardingSphereServiceLoader.class.getDeclaredMethod(\"registerServiceClass\", Class.class, Object.class);\n+        method.setAccessible(true);\n+        method.invoke(null, DatabaseProtocolFrontendEngine.class, new MockDatabaseProtocolFrontendEngine());\n+    }\n+    \n     @Test(expected = UnsupportedOperationException.class)\n     public void assertNewInstanceWhenUnsupported() {\n         DatabaseProtocolFrontendEngineFactory.newInstance(DatabaseTypes.getActualDatabaseType(\"Oracle\"));\n     }\n+    \n+    @Test\n+    public void assertNewInstanceMysql() {", "originalCommit": "88990acc3c85d9c871429de03d4571a22c7a7f53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MzUwOQ==", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479783509", "bodyText": "done", "author": "xbkaishui", "createdAt": "2020-08-30T15:31:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjA3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjEyMQ==", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479782121", "bodyText": "Please use static import for Assert.assertNotNull", "author": "terrymanu", "createdAt": "2020-08-30T15:17:25Z", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/DatabaseProtocolFrontendEngineFactoryTest.java", "diffHunk": "@@ -18,12 +18,35 @@\n package org.apache.shardingsphere.proxy.frontend;\n \n import org.apache.shardingsphere.infra.database.type.DatabaseTypes;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.spi.ShardingSphereServiceLoader;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+import java.lang.reflect.Method;\n+\n+@RunWith(MockitoJUnitRunner.class)\n public final class DatabaseProtocolFrontendEngineFactoryTest {\n     \n+    @Before\n+    public void init() throws Exception {\n+        Method method = ShardingSphereServiceLoader.class.getDeclaredMethod(\"registerServiceClass\", Class.class, Object.class);\n+        method.setAccessible(true);\n+        method.invoke(null, DatabaseProtocolFrontendEngine.class, new MockDatabaseProtocolFrontendEngine());\n+    }\n+    \n     @Test(expected = UnsupportedOperationException.class)\n     public void assertNewInstanceWhenUnsupported() {\n         DatabaseProtocolFrontendEngineFactory.newInstance(DatabaseTypes.getActualDatabaseType(\"Oracle\"));\n     }\n+    \n+    @Test\n+    public void assertNewInstanceMysql() {\n+        DatabaseProtocolFrontendEngine databaseProtocolFrontendEngine = DatabaseProtocolFrontendEngineFactory.newInstance(new MySQLDatabaseType());\n+        Assert.assertNotNull(databaseProtocolFrontendEngine);", "originalCommit": "88990acc3c85d9c871429de03d4571a22c7a7f53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MzYxMw==", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479783613", "bodyText": "done", "author": "xbkaishui", "createdAt": "2020-08-30T15:32:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjEyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjIwOQ==", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479782209", "bodyText": "Do we really need this class? Can we use mock to instead this one?", "author": "terrymanu", "createdAt": "2020-08-30T15:18:14Z", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/MockDatabaseProtocolFrontendEngine.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend;\n+\n+import org.apache.shardingsphere.db.protocol.codec.DatabasePacketCodecEngine;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.connection.BackendConnection;\n+import org.apache.shardingsphere.proxy.frontend.context.FrontendContext;\n+import org.apache.shardingsphere.proxy.frontend.engine.AuthenticationEngine;\n+import org.apache.shardingsphere.proxy.frontend.engine.CommandExecuteEngine;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+\n+public class MockDatabaseProtocolFrontendEngine implements DatabaseProtocolFrontendEngine {", "originalCommit": "88990acc3c85d9c871429de03d4571a22c7a7f53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MzUwNQ==", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479783505", "bodyText": "Nop, Currently implement of DatabaseProtocolFrontendEngineFactory is using class newInstance method to renew a instance of class, it is hard to mock.", "author": "xbkaishui", "createdAt": "2020-08-30T15:31:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjIwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg2NTM0Nw==", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479865347", "bodyText": "I went deep into the mockito fr\namework,  it is not easy to mock static method,\nIf we want to use this, we need update version to 3.x,  is it necessary?", "author": "xbkaishui", "createdAt": "2020-08-31T03:06:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjIwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1ODQ4Nw==", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479958487", "bodyText": "It is unnecessary update mockito now.\nWe can leave MockDatabaseProtocolFrontendEngine there.\nBut I find the problem is the class MockDatabaseProtocolFrontendEngine is not load via SPI, is it?", "author": "terrymanu", "createdAt": "2020-08-31T07:52:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjIwOQ=="}], "type": "inlineReview"}, {"oid": "0a74560cc991743df7952459142821580ea76872", "url": "https://github.com/apache/shardingsphere/commit/0a74560cc991743df7952459142821580ea76872", "message": " review changes", "committedDate": "2020-08-30T15:32:12Z", "type": "commit"}, {"oid": "9d2ee6ad5c6dcc1f6a17712432c254dc0af9d1ed", "url": "https://github.com/apache/shardingsphere/commit/9d2ee6ad5c6dcc1f6a17712432c254dc0af9d1ed", "message": "add mock frontend engine as spi for test", "committedDate": "2020-08-31T10:46:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE2NTYyMw==", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r480165623", "bodyText": "It is better to define a new type here, FIXTURE maybe a good name than MySQL", "author": "terrymanu", "createdAt": "2020-08-31T14:23:59Z", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/MockDatabaseProtocolFrontendEngine.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend;\n+\n+import org.apache.shardingsphere.db.protocol.codec.DatabasePacketCodecEngine;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.connection.BackendConnection;\n+import org.apache.shardingsphere.proxy.frontend.context.FrontendContext;\n+import org.apache.shardingsphere.proxy.frontend.engine.AuthenticationEngine;\n+import org.apache.shardingsphere.proxy.frontend.engine.CommandExecuteEngine;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+\n+public class MockDatabaseProtocolFrontendEngine implements DatabaseProtocolFrontendEngine {\n+    \n+    public MockDatabaseProtocolFrontendEngine() {\n+    }\n+    \n+    @Override\n+    public String getDatabaseType() {\n+        return new MySQLDatabaseType().getName();", "originalCommit": "9d2ee6ad5c6dcc1f6a17712432c254dc0af9d1ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE2NjE2MA==", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r480166160", "bodyText": "The class MockDatabaseProtocolFrontendEngine is not really mocked. DatabaseProtocolFrontendEngineFixture may better.", "author": "terrymanu", "createdAt": "2020-08-31T14:24:50Z", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/MockDatabaseProtocolFrontendEngine.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend;\n+\n+import org.apache.shardingsphere.db.protocol.codec.DatabasePacketCodecEngine;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.connection.BackendConnection;\n+import org.apache.shardingsphere.proxy.frontend.context.FrontendContext;\n+import org.apache.shardingsphere.proxy.frontend.engine.AuthenticationEngine;\n+import org.apache.shardingsphere.proxy.frontend.engine.CommandExecuteEngine;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+\n+public class MockDatabaseProtocolFrontendEngine implements DatabaseProtocolFrontendEngine {", "originalCommit": "9d2ee6ad5c6dcc1f6a17712432c254dc0af9d1ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE2Njc4Ng==", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r480166786", "bodyText": "The name of assertNewInstanceMySQL is inaccurate, please consider change it.", "author": "terrymanu", "createdAt": "2020-08-31T14:25:46Z", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/DatabaseProtocolFrontendEngineFactoryTest.java", "diffHunk": "@@ -18,12 +18,22 @@\n package org.apache.shardingsphere.proxy.frontend;\n \n import org.apache.shardingsphere.infra.database.type.DatabaseTypes;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n import org.junit.Test;\n \n+import static org.junit.Assert.assertNotNull;\n+\n public final class DatabaseProtocolFrontendEngineFactoryTest {\n     \n     @Test(expected = UnsupportedOperationException.class)\n     public void assertNewInstanceWhenUnsupported() {\n         DatabaseProtocolFrontendEngineFactory.newInstance(DatabaseTypes.getActualDatabaseType(\"Oracle\"));\n     }\n+    \n+    @Test\n+    public void assertNewInstanceMySQL() {", "originalCommit": "9d2ee6ad5c6dcc1f6a17712432c254dc0af9d1ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f5ef05ec6902dd33b708b513b182cd7d52ccf1b3", "url": "https://github.com/apache/shardingsphere/commit/f5ef05ec6902dd33b708b513b182cd7d52ccf1b3", "message": "add FixtureDatabase Type", "committedDate": "2020-08-31T14:49:03Z", "type": "commit"}, {"oid": "d141edefd017650b8ac36a046c0fa822a6ea0aa4", "url": "https://github.com/apache/shardingsphere/commit/d141edefd017650b8ac36a046c0fa822a6ea0aa4", "message": "Add final class, add instanceOf assert", "committedDate": "2020-08-31T15:08:30Z", "type": "commit"}]}