{"pr_number": 8160, "pr_title": "Fix problem about delete multi table , select into and select lock statement.", "pr_createdAt": "2020-11-14T13:57:26Z", "pr_url": "https://github.com/apache/shardingsphere/pull/8160", "timeline": [{"oid": "c5281999f539d8de7f77a34e55426d48099929b2", "url": "https://github.com/apache/shardingsphere/commit/c5281999f539d8de7f77a34e55426d48099929b2", "message": "Support table assert for DeleteStatementTestCase (#7978)", "committedDate": "2020-11-14T14:57:50Z", "type": "forcePushed"}, {"oid": "db2e8170e5dd69825fa78b7e8e7e136a277d8917", "url": "https://github.com/apache/shardingsphere/commit/db2e8170e5dd69825fa78b7e8e7e136a277d8917", "message": "Fix parse problem in delete multi table statement and select into statement (#7978)\n  * Added missing logic for selectWithInto when visit select.\n  * Added test cases for select-into statements; case 'select_into_out_file_with_fields_and_escaped'\n    and 'select_into_with_lock_before_into' are supported in MySQL 8.0 but not in MySQL 5.7.\n  * Table names should split with COMMA_ (',') in multipleTablesClause.\n  * Added test cases for delete multi table statements.", "committedDate": "2020-11-16T12:57:08Z", "type": "commit"}, {"oid": "30d161899e774e0d4a200289ff7c113c93b080d7", "url": "https://github.com/apache/shardingsphere/commit/30d161899e774e0d4a200289ff7c113c93b080d7", "message": "Replace multipleTableNames with tableAliasRefList (#7978)\n  * Use name tableAliasRefList like MySQL source code do, and delete unused multipleTableNames", "committedDate": "2020-11-16T13:05:38Z", "type": "commit"}, {"oid": "79aaa1779a02c29d84fd62ac3c365b11255040cf", "url": "https://github.com/apache/shardingsphere/commit/79aaa1779a02c29d84fd62ac3c365b11255040cf", "message": "Support of table for select lock statement in MySQL (#7978)\n  * Fix definition of lockClause\n  * Add test cases for select lock statement\n  * Add assertLockClause for SelectStatementTestCase\n  * For table rewriting, change definition of LockSegment and add extractTablesFromLock in TableExtractor", "committedDate": "2020-11-16T13:18:44Z", "type": "commit"}, {"oid": "d20e58619a6085c80f4dccdd1e4359d879414da8", "url": "https://github.com/apache/shardingsphere/commit/d20e58619a6085c80f4dccdd1e4359d879414da8", "message": "Support table assert for DeleteStatementTestCase (#7978)", "committedDate": "2020-11-16T13:18:52Z", "type": "commit"}, {"oid": "d20e58619a6085c80f4dccdd1e4359d879414da8", "url": "https://github.com/apache/shardingsphere/commit/d20e58619a6085c80f4dccdd1e4359d879414da8", "message": "Support table assert for DeleteStatementTestCase (#7978)", "committedDate": "2020-11-16T13:18:52Z", "type": "forcePushed"}, {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8", "url": "https://github.com/apache/shardingsphere/commit/f0fa6c23ddb789fa34097773b3b6744a6b0102a8", "message": "Add missing test case for Oracle and PostgreSQL. And fix problem when parsing select for update statement in Oracle. (#7978)", "committedDate": "2020-11-16T16:32:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxNjkxNw==", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524916917", "bodyText": "Delete extra blank lines.", "author": "jingshanglu", "createdAt": "2020-11-17T06:45:33Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/test/java/org/apache/shardingsphere/sql/parser/sql/common/extractor/TableExtractorTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.common.extractor;\n+\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.predicate.LockSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.generic.table.SimpleTableSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.generic.table.TableNameSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.value.identifier.IdentifierValue;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dml.MySQLSelectStatement;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class TableExtractorTest {\n+\n+    private TableExtractor tableExtractor;\n+\n+    @Before\n+    public void init() {\n+        tableExtractor = new TableExtractor();\n+    }\n+\n+    @Test\n+    public void assertExtractTablesFromSelectLockWithEmptyValue() {\n+        MySQLSelectStatement selectStatement = new MySQLSelectStatement();\n+        tableExtractor.extractTablesFromSelect(selectStatement);\n+        assertTrue(tableExtractor.getRewriteTables().isEmpty());\n+    }\n+\n+    @Test\n+    public void assertExtractTablesFromSelectLockWithValue() {\n+        MySQLSelectStatement selectStatement = new MySQLSelectStatement();\n+        LockSegment lockSegment = new LockSegment(108, 154);\n+        selectStatement.setLock(lockSegment);\n+        List<SimpleTableSegment> tables = new LinkedList<>();\n+        lockSegment.setForTables(tables);\n+        tables.add(new SimpleTableSegment(122, 128, new IdentifierValue(\"t_order\")));\n+        tables.add(new SimpleTableSegment(143, 154, new IdentifierValue(\"t_order_item\")));\n+\n+        tableExtractor.extractTablesFromSelect(selectStatement);\n+\n+        assertNotNull(tableExtractor.getRewriteTables());", "originalCommit": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk0OTkxOA==", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524949918", "bodyText": "Here I follow AAA(Arrange, Act, Assert) pattern, so there are two blank lines.", "author": "lwtdev", "createdAt": "2020-11-17T08:03:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxNjkxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk1OTIxMQ==", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524959211", "bodyText": "But I found that it doesn\u2019t seem to be the case in the project, so I will keep with the project and delete these blank lines", "author": "lwtdev", "createdAt": "2020-11-17T08:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxNjkxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkyMjYzMg==", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524922632", "bodyText": "Delete extra blank lines.", "author": "jingshanglu", "createdAt": "2020-11-17T07:01:24Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/jaxb/cases/domain/segment/impl/lock/ExpectedLockClause.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.test.sql.parser.parameterized.jaxb.cases.domain.segment.impl.lock;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.test.sql.parser.parameterized.jaxb.cases.domain.segment.AbstractExpectedSQLSegment;\n+import org.apache.shardingsphere.test.sql.parser.parameterized.jaxb.cases.domain.segment.impl.table.ExpectedSimpleTable;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+/**\n+ * Expected lock clause.\n+ */\n+@Getter\n+@Setter\n+public final class ExpectedLockClause extends AbstractExpectedSQLSegment {\n+\n+    @XmlElement(name = \"table\")\n+    private final List<ExpectedSimpleTable> tables = new LinkedList<>();\n+\n+}", "originalCommit": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk0ODEwMA==", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524948100", "bodyText": "OK, I will remove this blank line.", "author": "lwtdev", "createdAt": "2020-11-17T08:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkyMjYzMg=="}], "type": "inlineReview"}, {"oid": "5e1f9903c55fe8654cc997d358dc854d3c322d2b", "url": "https://github.com/apache/shardingsphere/commit/5e1f9903c55fe8654cc997d358dc854d3c322d2b", "message": "Format code, remove extra black lines. (#7978)", "committedDate": "2020-11-17T08:25:55Z", "type": "commit"}, {"oid": "59c1174b08b9efd3765b0bd6f6cb71e9887e4989", "url": "https://github.com/apache/shardingsphere/commit/59c1174b08b9efd3765b0bd6f6cb71e9887e4989", "message": "Format code, add new line at end of file.", "committedDate": "2020-11-17T08:42:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4MjMxOA==", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524882318", "bodyText": "Why delete multipleTableNames  rule? Useless?", "author": "strongduanmu", "createdAt": "2020-11-17T04:48:59Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/antlr4/imports/mysql/DMLStatement.g4", "diffHunk": "@@ -108,10 +108,6 @@ multipleTablesClause\n     : tableAliasRefList FROM tableReferences | FROM tableAliasRefList USING tableReferences\n     ;\n \n-multipleTableNames", "originalCommit": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4Nzc4Ng==", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r525087786", "bodyText": "Yes, it's useless. More detailed discussion here #7918", "author": "lwtdev", "createdAt": "2020-11-17T11:37:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4MjMxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4NzU1NQ==", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524887555", "bodyText": "Please use the result for the return variable name.", "author": "strongduanmu", "createdAt": "2020-11-17T05:09:13Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/statement/impl/MySQLStatementSQLVisitor.java", "diffHunk": "@@ -544,7 +545,17 @@ public ASTNode visitQueryExpressionParens(final QueryExpressionParensContext ctx\n \n     @Override\n     public ASTNode visitLockClauseList(final LockClauseListContext ctx) {\n-        return new LockSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n+        LockSegment lockSegment = new LockSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());", "originalCommit": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5MjY4OQ==", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r525092689", "bodyText": "OK, I will modify this.", "author": "lwtdev", "createdAt": "2020-11-17T11:45:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4NzU1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4OTc2OQ==", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524889769", "bodyText": "Maybe it is better to initialize the collection in advance? Like this:\nprivate final List< SimpleTableSegment > tables = new LinkedList<>();\nWhat do you think? \ud83d\ude00", "author": "strongduanmu", "createdAt": "2020-11-17T05:17:30Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/common/segment/dml/predicate/LockSegment.java", "diffHunk": "@@ -32,4 +36,7 @@\n     private final int startIndex;\n \n     private final int stopIndex;\n+\n+    @Setter\n+    private List<SimpleTableSegment> forTables;", "originalCommit": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5NTc3MA==", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r525095770", "bodyText": "In fact, I thought pre-initialized it at the beginning. But the forTables is empty  most time. And I also found some code example in Shardingshpere project that keep list as null default.  So I am also a little confused at it.\nBut I also think pre-initialization is easier to read and use.\nI want to keep the same style with the project, so what is the style of the project? \ud83d\ude00", "author": "lwtdev", "createdAt": "2020-11-17T11:51:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4OTc2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5NzkxNw==", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r525097917", "bodyText": "I also tried this style before \ud83d\ude00\nprivate final Optional<List< SimpleTableSegment >> tables = Optional.empty();", "author": "lwtdev", "createdAt": "2020-11-17T11:55:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4OTc2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTExMDE4OA==", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r525110188", "bodyText": "In fact, I thought pre-initialized it at the beginning. But the forTables is empty most time. And I also found some code example in Shardingshpere project that keep list as null default. So I am also a little confused at it.\nBut I also think pre-initialization is easier to read and use.\nI want to keep the same style with the project, so what is the style of the project? \ud83d\ude00\n\n@lwtdev I found two common coding styles, one is to use construction method to initialize the collection, such as the values \u200b\u200bvariable in InsertValuesSegment, and the other is to pre-initialize directly in the class, such as the variableAssigns variable in SetStatement. \ud83d\ude00", "author": "strongduanmu", "createdAt": "2020-11-17T12:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4OTc2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzMDQ3Nw==", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r525130477", "bodyText": "@strongduanmu I will pre-initialize the tables \ud83d\ude00~", "author": "lwtdev", "createdAt": "2020-11-17T12:52:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4OTc2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg5MDM0Ng==", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524890346", "bodyText": "The intermediate variable forTables is a bit redundant, how about this?\nlockSegment.getForTables.addAll(generateTablesFromTableAliasRefList(each.tableLockingList().tableAliasRefList()));", "author": "strongduanmu", "createdAt": "2020-11-17T05:19:46Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/statement/impl/MySQLStatementSQLVisitor.java", "diffHunk": "@@ -544,7 +545,17 @@ public ASTNode visitQueryExpressionParens(final QueryExpressionParensContext ctx\n \n     @Override\n     public ASTNode visitLockClauseList(final LockClauseListContext ctx) {\n-        return new LockSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n+        LockSegment lockSegment = new LockSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n+        List<SimpleTableSegment> forTables = new LinkedList<>();\n+        for (MySQLStatementParser.LockClauseContext each : ctx.lockClause()) {\n+            if (null != each.tableLockingList()) {\n+                forTables.addAll(generateTablesFromTableAliasRefList(each.tableLockingList().tableAliasRefList()));", "originalCommit": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c948c97b6403596fcd8301ba9b3ceec5c83048f4", "url": "https://github.com/apache/shardingsphere/commit/c948c97b6403596fcd8301ba9b3ceec5c83048f4", "message": "Rename ofTables to tables in LockSegment, and initialize it directly in the class.", "committedDate": "2020-11-17T13:33:02Z", "type": "commit"}]}