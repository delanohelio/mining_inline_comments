{"pr_number": 3887, "pr_title": "Feature 3185 add nacos center", "pr_createdAt": "2020-01-07T04:33:43Z", "pr_url": "https://github.com/apache/shardingsphere/pull/3887", "timeline": [{"oid": "519ac9ca97dfb8d11089ee8b9b7767e374e3c1bf", "url": "https://github.com/apache/shardingsphere/commit/519ac9ca97dfb8d11089ee8b9b7767e374e3c1bf", "message": "add sharding-orchestration-center-nacos module for new orchestration.", "committedDate": "2020-01-07T03:32:47Z", "type": "commit"}, {"oid": "74614f4ee9b77faf49d894ce2a26d95100d61d42", "url": "https://github.com/apache/shardingsphere/commit/74614f4ee9b77faf49d894ce2a26d95100d61d42", "message": "add sharding-orchestration-center-nacos module in sharding-orchestration-center pom.", "committedDate": "2020-01-07T03:48:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzcwNjc2MA==", "url": "https://github.com/apache/shardingsphere/pull/3887#discussion_r363706760", "bodyText": "If return \"null\", whether there will be problems.", "author": "wgy8283335", "createdAt": "2020-01-07T11:30:43Z", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-nacos/src/main/java/org/apache/shardingsphere/orchestration/center/instance/NacosInstance.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.orchestration.center.instance;\n+\n+import com.alibaba.nacos.api.NacosFactory;\n+import com.alibaba.nacos.api.config.ConfigService;\n+import com.alibaba.nacos.api.config.listener.Listener;\n+import com.alibaba.nacos.api.exception.NacosException;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.concurrent.Executor;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.shardingsphere.orchestration.center.api.ConfigCenter;\n+import org.apache.shardingsphere.orchestration.center.configuration.InstanceConfiguration;\n+import org.apache.shardingsphere.orchestration.center.listener.DataChangedEvent;\n+import org.apache.shardingsphere.orchestration.center.listener.DataChangedEventListener;\n+\n+/**\n+ * The nacos instance for ConfigCenter.\n+ *\n+ * @author huangjian\n+ * @author sunbufu\n+ */\n+@Slf4j\n+public class NacosInstance implements ConfigCenter {\n+    \n+    private final String defaultGroup = \"SHARDING_SPHERE_DEFAULT_GROUP\";\n+    \n+    private ConfigService configService;\n+    \n+    @Getter\n+    @Setter\n+    private Properties properties = new Properties();\n+    \n+    /**\n+     * Initialize nacos instance.\n+     *\n+     * @param config config center configuration\n+     */\n+    @Override\n+    public void init(final InstanceConfiguration config) {\n+        try {\n+            Properties properties = new Properties();\n+            properties.put(\"serverAddr\", config.getServerLists());\n+            properties.put(\"namespace\", null == config.getNamespace() ? \"\" : config.getNamespace());\n+            configService = NacosFactory.createConfigService(properties);\n+        } catch (final NacosException ex) {\n+            log.debug(\"exception for: {}\", ex.toString());\n+        }\n+    }\n+    \n+    /**\n+     * Get data from nacos instance.\n+     *\n+     * @param key key of data\n+     * @return value of data\n+     */\n+    @Override\n+    public String get(final String key) {\n+        return getDirectly(key);\n+    }\n+    \n+    private String getDirectly(final String key) {\n+        try {\n+            String dataId = key.replace(\"/\", \".\");\n+            String group = properties.getProperty(\"group\", defaultGroup);\n+            long timeoutMs = Long.parseLong(properties.getProperty(\"timeout\", \"3000\"));\n+            return configService.getConfig(dataId, group, timeoutMs);\n+        } catch (final NacosException ex) {\n+            log.debug(\"exception for: {}\", ex.toString());\n+            return null;\n+        }\n+    }\n+    \n+    /**\n+     * Get node's sub-nodes list.\n+     *\n+     * @param key key of data\n+     * @return sub-nodes name list\n+     */\n+    @Override\n+    public List<String> getChildrenKeys(final String key) {", "originalCommit": "74614f4ee9b77faf49d894ce2a26d95100d61d42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA0MDg4NA==", "url": "https://github.com/apache/shardingsphere/pull/3887#discussion_r364040884", "bodyText": "Yes, I think here need @dongzl 's new solution.  \ud83d\ude0a But now, I just move the old nacos module in here.", "author": "sunbufu", "createdAt": "2020-01-08T02:29:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzcwNjc2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzcwNzE3MA==", "url": "https://github.com/apache/shardingsphere/pull/3887#discussion_r363707170", "bodyText": "Where is follow items:\norg.apache.shardingsphere.orchestration.center.instance.CuratorZookeeperInstance\norg.apache.shardingsphere.orchestration.center.instance.ApolloInstance", "author": "wgy8283335", "createdAt": "2020-01-07T11:31:53Z", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-nacos/src/main/resources/META-INF/services/org.apache.shardingsphere.orchestration.center.api.ConfigCenter", "diffHunk": "@@ -0,0 +1,18 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+org.apache.shardingsphere.orchestration.center.instance.NacosInstance", "originalCommit": "74614f4ee9b77faf49d894ce2a26d95100d61d42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA0MTczNg==", "url": "https://github.com/apache/shardingsphere/pull/3887#discussion_r364041736", "bodyText": "This module is a sub module of sharding-orchestration-center, and different instance module only have itself instance in here.", "author": "sunbufu", "createdAt": "2020-01-08T02:33:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzcwNzE3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzcxMTY0MQ==", "url": "https://github.com/apache/shardingsphere/pull/3887#discussion_r363711641", "bodyText": "\u201cx.x.x.\u201d or \"192.168.1.2\"?", "author": "wgy8283335", "createdAt": "2020-01-07T11:45:20Z", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-nacos/src/test/java/org/apache/shardingsphere/orchestration/center/instance/NacosInstanceTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.orchestration.center.instance;\n+\n+import com.alibaba.nacos.api.config.ConfigService;\n+import com.alibaba.nacos.api.config.listener.Listener;\n+import java.lang.reflect.Field;\n+import java.util.Properties;\n+import lombok.SneakyThrows;\n+import org.apache.shardingsphere.orchestration.center.api.ConfigCenter;\n+import org.apache.shardingsphere.orchestration.center.configuration.InstanceConfiguration;\n+import org.apache.shardingsphere.orchestration.center.listener.DataChangedEvent;\n+import org.apache.shardingsphere.orchestration.center.listener.DataChangedEventListener;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class NacosInstanceTest {\n+    \n+    private static ConfigCenter nacosConfigCenter = new NacosInstance();\n+    \n+    private ConfigService configService = mock(ConfigService.class);\n+    \n+    private String group = \"SHARDING_SPHERE_DEFAULT_GROUP\";\n+    \n+    @Before\n+    public void init() {\n+        Properties properties = new Properties();\n+        properties.setProperty(\"group\", group);\n+        properties.setProperty(\"timeout\", \"3000\");\n+        InstanceConfiguration configuration = new InstanceConfiguration(nacosConfigCenter.getType(), properties);\n+        configuration.setServerLists(\"x.x.x.:8848\");", "originalCommit": "74614f4ee9b77faf49d894ce2a26d95100d61d42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzcxMTkyNw==", "url": "https://github.com/apache/shardingsphere/pull/3887#discussion_r363711927", "bodyText": "Why null?", "author": "wgy8283335", "createdAt": "2020-01-07T11:46:09Z", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-nacos/src/test/java/org/apache/shardingsphere/orchestration/center/instance/NacosInstanceTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.orchestration.center.instance;\n+\n+import com.alibaba.nacos.api.config.ConfigService;\n+import com.alibaba.nacos.api.config.listener.Listener;\n+import java.lang.reflect.Field;\n+import java.util.Properties;\n+import lombok.SneakyThrows;\n+import org.apache.shardingsphere.orchestration.center.api.ConfigCenter;\n+import org.apache.shardingsphere.orchestration.center.configuration.InstanceConfiguration;\n+import org.apache.shardingsphere.orchestration.center.listener.DataChangedEvent;\n+import org.apache.shardingsphere.orchestration.center.listener.DataChangedEventListener;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class NacosInstanceTest {\n+    \n+    private static ConfigCenter nacosConfigCenter = new NacosInstance();\n+    \n+    private ConfigService configService = mock(ConfigService.class);\n+    \n+    private String group = \"SHARDING_SPHERE_DEFAULT_GROUP\";\n+    \n+    @Before\n+    public void init() {\n+        Properties properties = new Properties();\n+        properties.setProperty(\"group\", group);\n+        properties.setProperty(\"timeout\", \"3000\");\n+        InstanceConfiguration configuration = new InstanceConfiguration(nacosConfigCenter.getType(), properties);\n+        configuration.setServerLists(\"x.x.x.:8848\");\n+        nacosConfigCenter.init(configuration);\n+        setConfigService(configService);\n+    }\n+    \n+    @SneakyThrows\n+    private void setConfigService(final ConfigService configService) {\n+        Field configServiceField = NacosInstance.class.getDeclaredField(\"configService\");\n+        configServiceField.setAccessible(true);\n+        configServiceField.set(nacosConfigCenter, configService);\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertPersist() {\n+        String value = \"value\";\n+        nacosConfigCenter.persist(\"sharding/test\", value);\n+        verify(configService).publishConfig(\"sharding.test\", group, value);\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertGet() {\n+        String value = \"value\";\n+        when(configService.getConfig(eq(\"sharding.test\"), eq(group), anyLong())).thenReturn(value);\n+        Assert.assertEquals(value, nacosConfigCenter.get(\"sharding/test\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatch() {\n+        final String expectValue = \"expectValue\";\n+        final String[] actualValue = {null};\n+        doAnswer(getListenerAnswer(expectValue)).when(configService).addListener(anyString(), anyString(), any(Listener.class));\n+        DataChangedEventListener listener = new DataChangedEventListener() {\n+            @Override\n+            public void onChange(final DataChangedEvent dataChangedEvent) {\n+                actualValue[0] = dataChangedEvent.getValue();\n+            }\n+        };\n+        nacosConfigCenter.watch(\"sharding/test\", listener);\n+        Assert.assertEquals(expectValue, actualValue[0]);\n+    }\n+    \n+    private Answer getListenerAnswer(final String expectValue) {\n+        return new Answer() {\n+            @Override\n+            public Object answer(final InvocationOnMock invocation) {\n+                Listener listener = invocation.getArgument(2);\n+                listener.receiveConfigInfo(expectValue);\n+                return null;", "originalCommit": "74614f4ee9b77faf49d894ce2a26d95100d61d42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2b33bc4cef2d6bcf667791588cff934acf4d6dae", "url": "https://github.com/apache/shardingsphere/commit/2b33bc4cef2d6bcf667791588cff934acf4d6dae", "message": "modify NacosInstanceTest.", "committedDate": "2020-01-08T05:13:31Z", "type": "commit"}]}