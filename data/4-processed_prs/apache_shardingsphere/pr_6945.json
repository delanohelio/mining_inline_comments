{"pr_number": 6945, "pr_title": "Add: add test case for shardingRuleConfiguration (#6927)", "pr_createdAt": "2020-08-20T01:10:02Z", "pr_url": "https://github.com/apache/shardingsphere/pull/6945", "timeline": [{"oid": "9e77b4f94c7a15b3a9b455901df19c4cb11b525b", "url": "https://github.com/apache/shardingsphere/commit/9e77b4f94c7a15b3a9b455901df19c4cb11b525b", "message": "Add: add test case for shardingRuleConfiguration (#6927)", "committedDate": "2020-08-20T00:48:25Z", "type": "commit"}, {"oid": "48e505fac588c6a36e496a3b53740e213ff1ae52", "url": "https://github.com/apache/shardingsphere/commit/48e505fac588c6a36e496a3b53740e213ff1ae52", "message": "Refactor: typecast should follow with whitespace", "committedDate": "2020-08-20T02:21:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1NzI2Ng==", "url": "https://github.com/apache/shardingsphere/pull/6945#discussion_r473857266", "bodyText": "Please remove useless blank line", "author": "terrymanu", "createdAt": "2020-08-20T10:24:00Z", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-boot-starter/src/test/java/org/apache/shardingsphere/sharding/spring/boot/ShardingSpringBootStarterTest.java", "diffHunk": "@@ -68,6 +74,47 @@ public void assertKeyGenerateAlgorithm() {\n     @Test\n     public void assertShardingConfiguration() {\n         assertThat(shardingRuleConfiguration.getTables().size(), is(2));\n-        // TODO assert sharding configuration\n+        List<ShardingTableRuleConfiguration> shardingTableRuleConfigurationList = Lists.newArrayList(shardingRuleConfiguration.getTables());\n+        assertThat(shardingTableRuleConfigurationList.get(0).getLogicTable(), is(\"t_order\"));\n+        assertThat(shardingTableRuleConfigurationList.get(0).getActualDataNodes(), is(\"ds_$->{0..1}.t_order_$->{0..1}\"));\n+        assertThat(shardingTableRuleConfigurationList.get(0).getTableShardingStrategy(), instanceOf(StandardShardingStrategyConfiguration.class));\n+        assertThat(((StandardShardingStrategyConfiguration) shardingTableRuleConfigurationList.get(0).getTableShardingStrategy()).getShardingColumn(), is(\"order_id\"));\n+        assertThat(shardingTableRuleConfigurationList.get(0).getTableShardingStrategy().getShardingAlgorithmName(), is(\"orderTableShardingAlgorithm\"));\n+        assertThat(shardingTableRuleConfigurationList.get(0).getKeyGenerateStrategy().getColumn(), is(\"order_id\"));\n+        assertThat(shardingTableRuleConfigurationList.get(0).getKeyGenerateStrategy().getKeyGeneratorName(), is(\"keyGenerator\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getLogicTable(), is(\"t_order_item\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getActualDataNodes(), is(\"ds_$->{0..1}.t_order_item_$->{0..1}\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getTableShardingStrategy(), instanceOf(StandardShardingStrategyConfiguration.class));\n+        assertThat(((StandardShardingStrategyConfiguration) shardingTableRuleConfigurationList.get(1).getTableShardingStrategy()).getShardingColumn(), is(\"order_id\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getTableShardingStrategy().getShardingAlgorithmName(), is(\"orderItemTableShardingAlgorithm\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getKeyGenerateStrategy().getColumn(), is(\"order_item_id\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getKeyGenerateStrategy().getKeyGeneratorName(), is(\"keyGenerator\"));\n+\n+        assertThat(shardingRuleConfiguration.getBindingTableGroups().size(), is(2));\n+        List<String> bindingTableGroupsList = new ArrayList<>(shardingRuleConfiguration.getBindingTableGroups());\n+        assertThat(bindingTableGroupsList.get(0), is(\"t_order\"));\n+        assertThat(bindingTableGroupsList.get(1), is(\"t_order_item\"));\n+\n+        assertThat(shardingRuleConfiguration.getBroadcastTables().size(), is(1));\n+        assertThat(shardingRuleConfiguration.getBroadcastTables().iterator().next(), is(\"t_config\"));\n+\n+        assertThat(shardingRuleConfiguration.getDefaultDatabaseShardingStrategy(), instanceOf(StandardShardingStrategyConfiguration.class));\n+        assertThat(((StandardShardingStrategyConfiguration) shardingRuleConfiguration.getDefaultDatabaseShardingStrategy()).getShardingColumn(), is(\"user_id\"));\n+        assertThat(shardingRuleConfiguration.getDefaultDatabaseShardingStrategy().getShardingAlgorithmName(), is(\"databaseShardingAlgorithm\"));\n+    \n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().size(), is(3));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderItemTableShardingAlgorithm\"), instanceOf(InlineShardingAlgorithm.class));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderItemTableShardingAlgorithm\").getType(), is(\"INLINE\"));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderItemTableShardingAlgorithm\").getProps().getProperty(\"algorithm.expression\"), is(\"t_order_item_$->{order_id % 2}\"));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"databaseShardingAlgorithm\"), instanceOf(InlineShardingAlgorithm.class));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"databaseShardingAlgorithm\").getType(), is(\"INLINE\"));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"databaseShardingAlgorithm\").getProps().getProperty(\"algorithm.expression\"), is(\"ds_$->{user_id % 2}\"));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderTableShardingAlgorithm\"), instanceOf(InlineShardingAlgorithm.class));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderTableShardingAlgorithm\").getType(), is(\"INLINE\"));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderTableShardingAlgorithm\").getProps().getProperty(\"algorithm.expression\"), is(\"t_order_$->{order_id % 2}\"));\n+", "originalCommit": "48e505fac588c6a36e496a3b53740e213ff1ae52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyMTY1Mg==", "url": "https://github.com/apache/shardingsphere/pull/6945#discussion_r473921652", "bodyText": "that's for separete the different case . is that not the ss coding rule ?", "author": "taojintianxia", "createdAt": "2020-08-20T12:09:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1NzI2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3ODQ1MQ==", "url": "https://github.com/apache/shardingsphere/pull/6945#discussion_r474378451", "bodyText": "For example:\nassertShardingConfiguration can be composited by assertTableShardingStrategy, assertDatabaseShardingStrategy, assertKeyGenerator etc...", "author": "terrymanu", "createdAt": "2020-08-21T02:49:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1NzI2Ng=="}], "type": "inlineReview"}, {"oid": "51a4a4ce0a24f433f723abb2752283cf26d70ab4", "url": "https://github.com/apache/shardingsphere/commit/51a4a4ce0a24f433f723abb2752283cf26d70ab4", "message": "Remove: remove blank line", "committedDate": "2020-08-20T12:11:06Z", "type": "commit"}, {"oid": "e7f2ef5634fe891d805c9d40284268e51092c6b5", "url": "https://github.com/apache/shardingsphere/commit/e7f2ef5634fe891d805c9d40284268e51092c6b5", "message": "Refactor: refactor the test case (#6927)", "committedDate": "2020-08-21T04:10:46Z", "type": "commit"}]}