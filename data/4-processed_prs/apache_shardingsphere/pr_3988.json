{"pr_number": 3988, "pr_title": "Using multithreading make loadDefaultTables faster", "pr_createdAt": "2020-01-15T10:10:34Z", "pr_url": "https://github.com/apache/shardingsphere/pull/3988", "timeline": [{"oid": "06135c64a74209838e0e8ed842b362a3ded32b0a", "url": "https://github.com/apache/shardingsphere/commit/06135c64a74209838e0e8ed842b362a3ded32b0a", "message": "Using multithreading make loadDefaultTables faster and remove repeat\nload tableMetaData", "committedDate": "2020-01-15T10:08:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg0NDYyMA==", "url": "https://github.com/apache/shardingsphere/pull/3988#discussion_r366844620", "bodyText": "If there are two tables with the same name t1 and different structures in ds0 and default ds seperately, do you think removeRepeatTable() could return correct result list?", "author": "tristaZero", "createdAt": "2020-01-15T12:15:59Z", "path": "sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/sharding/execute/metadata/loader/ShardingTableMetaDataLoader.java", "diffHunk": "@@ -206,19 +207,46 @@ public TableMetas loadAll(final ShardingRule shardingRule) throws SQLException {\n         return result;\n     }\n     \n-    private Map<String, TableMetaData> loadDefaultTables(final ShardingRule shardingRule) throws SQLException {\n+    private Map<String, TableMetaData> loadDefaultTables(final ShardingRule shardingRule, final Map<String, TableMetaData> result) throws SQLException {\n         Optional<String> actualDefaultDataSourceName = shardingRule.findActualDefaultDataSourceName();\n         if (!actualDefaultDataSourceName.isPresent()) {\n             return Collections.emptyMap();\n         }\n         Collection<String> tableNames = loadAllTableNames(actualDefaultDataSourceName.get());\n-        Map<String, TableMetaData> result = new HashMap<>(tableNames.size(), 1);\n-        for (String each : tableNames) {\n-            result.put(each, load(each, shardingRule));\n+        removeRepeatTable(tableNames, result);", "originalCommit": "06135c64a74209838e0e8ed842b362a3ded32b0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyMDY4MA==", "url": "https://github.com/apache/shardingsphere/pull/3988#discussion_r367220680", "bodyText": "Why did you remove repeat table? For performance or anything else?", "author": "SteNicholas", "createdAt": "2020-01-16T03:58:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg0NDYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NTAwOA==", "url": "https://github.com/apache/shardingsphere/pull/3988#discussion_r367245008", "bodyText": "If there are two tables with the same name t1 and different structures in ds0 and default ds seperately, do you think removeRepeatTable() could return correct result list?\n\nyes, load() methed  will be get out the same as tableMetaData by table name...loadShardingTables or loadDefaultTables execute load() method and only first parameter table name is different.", "author": "beijing-penguin", "createdAt": "2020-01-16T06:07:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg0NDYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NTI2Nw==", "url": "https://github.com/apache/shardingsphere/pull/3988#discussion_r367245267", "bodyText": "Why did you remove repeat table? For performance or anything else?\nFor performance.", "author": "beijing-penguin", "createdAt": "2020-01-16T06:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg0NDYyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyMDkyMA==", "url": "https://github.com/apache/shardingsphere/pull/3988#discussion_r367220920", "bodyText": "Why not for (int i = 0; i < tableNames.size(); i++) ?", "author": "SteNicholas", "createdAt": "2020-01-16T03:59:48Z", "path": "sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/sharding/execute/metadata/loader/ShardingTableMetaDataLoader.java", "diffHunk": "@@ -206,19 +207,46 @@ public TableMetas loadAll(final ShardingRule shardingRule) throws SQLException {\n         return result;\n     }\n     \n-    private Map<String, TableMetaData> loadDefaultTables(final ShardingRule shardingRule) throws SQLException {\n+    private Map<String, TableMetaData> loadDefaultTables(final ShardingRule shardingRule, final Map<String, TableMetaData> result) throws SQLException {\n         Optional<String> actualDefaultDataSourceName = shardingRule.findActualDefaultDataSourceName();\n         if (!actualDefaultDataSourceName.isPresent()) {\n             return Collections.emptyMap();\n         }\n         Collection<String> tableNames = loadAllTableNames(actualDefaultDataSourceName.get());\n-        Map<String, TableMetaData> result = new HashMap<>(tableNames.size(), 1);\n-        for (String each : tableNames) {\n-            result.put(each, load(each, shardingRule));\n+        removeRepeatTable(tableNames, result);\n+        List<TableMetaData> metaList = executorEngine.execute(getTableNamesInput(tableNames), new GroupedCallback<String, TableMetaData>() {\n+            @Override\n+            public Collection<TableMetaData> execute(final Collection<String> inputs, final boolean isTrunkThread, final Map<String, Object> dataMap) throws SQLException {\n+                String logicTableName = inputs.iterator().next();\n+                Collection<TableMetaData> result = new LinkedList<>();\n+                result.add(load(logicTableName, shardingRule));\n+                return result;\n+            }\n+        });\n+        Object[] tableNameArr = tableNames.toArray();\n+        for (int i = 0, size = tableNames.size(); i < size; i++) {", "originalCommit": "06135c64a74209838e0e8ed842b362a3ded32b0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NTYzMQ==", "url": "https://github.com/apache/shardingsphere/pull/3988#discussion_r367245631", "bodyText": "Why not for (int i = 0; i < tableNames.size(); i++) ?\n\nAvoid size() method multiple computations,,,for performance", "author": "beijing-penguin", "createdAt": "2020-01-16T06:09:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyMDkyMA=="}], "type": "inlineReview"}, {"oid": "676367f6645671ce46990b47d5430590948f09ba", "url": "https://github.com/apache/shardingsphere/commit/676367f6645671ce46990b47d5430590948f09ba", "message": "Using multithreading make loadDefaultTables faster.\nmaybe should remove repeat load tableMetaData?", "committedDate": "2020-01-17T02:39:41Z", "type": "commit"}, {"oid": "0e5c9a942e12dbe9a7552818190df9e90f659cf1", "url": "https://github.com/apache/shardingsphere/commit/0e5c9a942e12dbe9a7552818190df9e90f659cf1", "message": "Merge remote-tracking branch 'upstream/dev' into dev", "committedDate": "2020-01-17T07:02:44Z", "type": "commit"}, {"oid": "ecd060cb933e6f3106c45ffa0d5f7e5a72971050", "url": "https://github.com/apache/shardingsphere/commit/ecd060cb933e6f3106c45ffa0d5f7e5a72971050", "message": "Using multithreading make loadDefaultTables faster.", "committedDate": "2020-01-17T07:45:55Z", "type": "commit"}, {"oid": "faa7544933cba3aae0b5a4f00deb2dcaadf374d3", "url": "https://github.com/apache/shardingsphere/commit/faa7544933cba3aae0b5a4f00deb2dcaadf374d3", "message": "code style clean", "committedDate": "2020-01-17T08:04:19Z", "type": "commit"}]}