{"pr_number": 8602, "pr_title": "Issue#8592", "pr_createdAt": "2020-12-13T09:30:30Z", "pr_url": "https://github.com/apache/shardingsphere/pull/8602", "timeline": [{"oid": "f9287c11baa14150e2472ab34892831e1492b228", "url": "https://github.com/apache/shardingsphere/commit/f9287c11baa14150e2472ab34892831e1492b228", "message": "Merge pull request #1 from apache/master\n\n\u540c\u6b65\u539f\u4f5c\u8005\u5de5\u7a0b", "committedDate": "2020-11-18T01:35:51Z", "type": "commit"}, {"oid": "ff04bb2ba8ca74103a8931d056cf695a1587223b", "url": "https://github.com/apache/shardingsphere/commit/ff04bb2ba8ca74103a8931d056cf695a1587223b", "message": "Merge pull request #2 from apache/master\n\n\u5408\u5e76\u539f\u59cb\u5de5\u7a0b\u53d8\u66f4", "committedDate": "2020-12-01T07:23:54Z", "type": "commit"}, {"oid": "2f8e254524546d32ab1c497f0cf3a466b88ba5e9", "url": "https://github.com/apache/shardingsphere/commit/2f8e254524546d32ab1c497f0cf3a466b88ba5e9", "message": "Add test case for PostgreSQLCommand #8439", "committedDate": "2020-12-01T09:11:13Z", "type": "commit"}, {"oid": "39dd04f1f4853b5b46ba0342060baa81518e3433", "url": "https://github.com/apache/shardingsphere/commit/39dd04f1f4853b5b46ba0342060baa81518e3433", "message": "Add test case for UpdateResponseHeader #8440", "committedDate": "2020-12-01T09:15:50Z", "type": "commit"}, {"oid": "d9e4be7c16bc849ceb5e369de3ef82818b0b4b83", "url": "https://github.com/apache/shardingsphere/commit/d9e4be7c16bc849ceb5e369de3ef82818b0b4b83", "message": "Add test case for PostgreSQLCommand #8439", "committedDate": "2020-12-01T09:42:54Z", "type": "commit"}, {"oid": "9b72edba159224851a616be58e18158528f8937a", "url": "https://github.com/apache/shardingsphere/commit/9b72edba159224851a616be58e18158528f8937a", "message": "Add test case for UpdateResponseHeader #8440", "committedDate": "2020-12-01T09:44:44Z", "type": "commit"}, {"oid": "72ed8a21f275c62040dc816231bd9b0445457ba7", "url": "https://github.com/apache/shardingsphere/commit/72ed8a21f275c62040dc816231bd9b0445457ba7", "message": "revert commit", "committedDate": "2020-12-01T14:09:58Z", "type": "commit"}, {"oid": "109fdf6a3450631aa826cd0d6d3b3a12d80e12da", "url": "https://github.com/apache/shardingsphere/commit/109fdf6a3450631aa826cd0d6d3b3a12d80e12da", "message": "Merge pull request #4 from apache/master\n\npull from apache shardingsphere", "committedDate": "2020-12-01T14:11:31Z", "type": "commit"}, {"oid": "1aefad7334766a3443dc2693381fefdaddf5194b", "url": "https://github.com/apache/shardingsphere/commit/1aefad7334766a3443dc2693381fefdaddf5194b", "message": "Merge pull request #5 from apache/master\n\nRefactor binary execution of proxy (#8460)", "committedDate": "2020-12-02T02:00:42Z", "type": "commit"}, {"oid": "0902df4e9654698c8b8970a7498937eacf6199be", "url": "https://github.com/apache/shardingsphere/commit/0902df4e9654698c8b8970a7498937eacf6199be", "message": "Merge pull request #6 from apache/master\n\npull from apache/shardingshphere", "committedDate": "2020-12-03T00:20:34Z", "type": "commit"}, {"oid": "e442797ed6c80402fb2cb685ef148514bdd2e8af", "url": "https://github.com/apache/shardingsphere/commit/e442797ed6c80402fb2cb685ef148514bdd2e8af", "message": "Merge pull request #7 from apache/master\n\npull from apache/shardingsphere", "committedDate": "2020-12-03T06:42:45Z", "type": "commit"}, {"oid": "24ebaae8c8604206f04558af997153ab3e3457cf", "url": "https://github.com/apache/shardingsphere/commit/24ebaae8c8604206f04558af997153ab3e3457cf", "message": "Merge pull request #8 from apache/master\n\npull from apache/shardingsphere", "committedDate": "2020-12-03T07:05:48Z", "type": "commit"}, {"oid": "e2ffc92954590843df1e6f09300aa5f0e576ff81", "url": "https://github.com/apache/shardingsphere/commit/e2ffc92954590843df1e6f09300aa5f0e576ff81", "message": "Merge pull request #9 from apache/master\n\npull from apache/shardingsphere", "committedDate": "2020-12-03T11:01:54Z", "type": "commit"}, {"oid": "fea0d6ce9b545790caee4639ff6de04d959d9790", "url": "https://github.com/apache/shardingsphere/commit/fea0d6ce9b545790caee4639ff6de04d959d9790", "message": "Merge pull request #10 from apache/master\n\npull from apache/shardingsphere", "committedDate": "2020-12-07T01:51:54Z", "type": "commit"}, {"oid": "c3ead438c4cd53b901505302c5cc2163831822a0", "url": "https://github.com/apache/shardingsphere/commit/c3ead438c4cd53b901505302c5cc2163831822a0", "message": "Merge pull request #11 from apache/master\n\npull from apache/shardngsphere", "committedDate": "2020-12-07T06:24:35Z", "type": "commit"}, {"oid": "8cd2275cd73cdae3ca9ac32acc396a439f9786e4", "url": "https://github.com/apache/shardingsphere/commit/8cd2275cd73cdae3ca9ac32acc396a439f9786e4", "message": "Merge pull request #12 from apache/master\n\npull from apache/shardingsphere", "committedDate": "2020-12-08T14:26:03Z", "type": "commit"}, {"oid": "02eae72535e88a5320893fadcef3f60237bd45c9", "url": "https://github.com/apache/shardingsphere/commit/02eae72535e88a5320893fadcef3f60237bd45c9", "message": "Merge pull request #13 from apache/master\n\npull from apache/shardingsphere", "committedDate": "2020-12-09T12:04:22Z", "type": "commit"}, {"oid": "c58100236bebfe47e56d6e153dc4f66508662ac7", "url": "https://github.com/apache/shardingsphere/commit/c58100236bebfe47e56d6e153dc4f66508662ac7", "message": "Merge pull request #14 from apache/master\n\npull from apache/shardingsphere", "committedDate": "2020-12-11T01:34:51Z", "type": "commit"}, {"oid": "c9985e7a1ed50492581083d1832673e6f345c6a0", "url": "https://github.com/apache/shardingsphere/commit/c9985e7a1ed50492581083d1832673e6f345c6a0", "message": "Merge pull request #15 from apache/master\n\npull from apache/shardingsphere", "committedDate": "2020-12-11T13:52:56Z", "type": "commit"}, {"oid": "74a42600318f51a36ab83c3365ce5b73b5085620", "url": "https://github.com/apache/shardingsphere/commit/74a42600318f51a36ab83c3365ce5b73b5085620", "message": "Merge pull request #16 from apache/master\n\npull from apache/shardingsphere", "committedDate": "2020-12-12T13:29:24Z", "type": "commit"}, {"oid": "5a1f68bbfc917e77386a324f12e084fdc976ef24", "url": "https://github.com/apache/shardingsphere/commit/5a1f68bbfc917e77386a324f12e084fdc976ef24", "message": "Merge pull request #17 from apache/master\n\npull from apache/shardingphere", "committedDate": "2020-12-13T07:40:39Z", "type": "commit"}, {"oid": "ab137f6adc9b4f84611abd1d1d1f2dc04638e8eb", "url": "https://github.com/apache/shardingsphere/commit/ab137f6adc9b4f84611abd1d1d1f2dc04638e8eb", "message": "Add test case for FrontDatabaseProtocolTypeFactory.", "committedDate": "2020-12-13T09:16:09Z", "type": "commit"}, {"oid": "b6377f52e851cb843a686cedf1b854b3de2d4fbc", "url": "https://github.com/apache/shardingsphere/commit/b6377f52e851cb843a686cedf1b854b3de2d4fbc", "message": "remove unnecessary Mockito stubbing in FrontDatabaseProtocolTypeFactoryTest.", "committedDate": "2020-12-13T12:23:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExNzYyMA==", "url": "https://github.com/apache/shardingsphere/pull/8602#discussion_r542117620", "bodyText": "If there is no @mock annotation, the @RunWith(MockitoJUnitRunner.class) is unnecessary", "author": "terrymanu", "createdAt": "2020-12-14T05:17:20Z", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/protocol/FrontDatabaseProtocolTypeFactoryTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend.protocol;\n+\n+import lombok.SneakyThrows;\n+import org.apache.shardingsphere.infra.auth.Authentication;\n+import org.apache.shardingsphere.infra.config.exception.ShardingSphereConfigurationException;\n+import org.apache.shardingsphere.infra.config.properties.ConfigurationProperties;\n+import org.apache.shardingsphere.infra.config.properties.ConfigurationPropertyKey;\n+import org.apache.shardingsphere.infra.context.metadata.impl.StandardMetaDataContexts;\n+import org.apache.shardingsphere.infra.database.type.DatabaseType;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.executor.kernel.ExecutorEngine;\n+import org.apache.shardingsphere.infra.metadata.ShardingSphereMetaData;\n+import org.apache.shardingsphere.infra.metadata.resource.ShardingSphereResource;\n+import org.apache.shardingsphere.proxy.backend.context.ProxyContext;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.lang.reflect.Field;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)", "originalCommit": "b6377f52e851cb843a686cedf1b854b3de2d4fbc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExNzc5OQ==", "url": "https://github.com/apache/shardingsphere/pull/8602#discussion_r542117799", "bodyText": "Return value should name as result", "author": "terrymanu", "createdAt": "2020-12-14T05:17:51Z", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/protocol/FrontDatabaseProtocolTypeFactoryTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend.protocol;\n+\n+import lombok.SneakyThrows;\n+import org.apache.shardingsphere.infra.auth.Authentication;\n+import org.apache.shardingsphere.infra.config.exception.ShardingSphereConfigurationException;\n+import org.apache.shardingsphere.infra.config.properties.ConfigurationProperties;\n+import org.apache.shardingsphere.infra.config.properties.ConfigurationPropertyKey;\n+import org.apache.shardingsphere.infra.context.metadata.impl.StandardMetaDataContexts;\n+import org.apache.shardingsphere.infra.database.type.DatabaseType;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.executor.kernel.ExecutorEngine;\n+import org.apache.shardingsphere.infra.metadata.ShardingSphereMetaData;\n+import org.apache.shardingsphere.infra.metadata.resource.ShardingSphereResource;\n+import org.apache.shardingsphere.proxy.backend.context.ProxyContext;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.lang.reflect.Field;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public final class FrontDatabaseProtocolTypeFactoryTest {\n+\n+    @Test(expected = ShardingSphereConfigurationException.class)\n+    public void assertGetDatabaseTypeFromMetaDataContextsThrowShardingSphereConfigurationException() {\n+        StandardMetaDataContexts standardMetaDataContexts = new StandardMetaDataContexts(Collections.emptyMap(), mock(ExecutorEngine.class), mock(Authentication.class),\n+                new ConfigurationProperties(new Properties()));\n+        setMetaDataContexts(standardMetaDataContexts);\n+        assertTrue(standardMetaDataContexts.getMetaDataMap().isEmpty());\n+        FrontDatabaseProtocolTypeFactory.getDatabaseType();\n+    }\n+\n+    @Test\n+    public void assertGetDatabaseTypeInstanceOfMySQLDatabaseTypeFromMetaDataContextsSchemaName() {\n+        StandardMetaDataContexts standardMetaDataContexts = new StandardMetaDataContexts(getShardingSphereMetaData(), mock(ExecutorEngine.class), mock(Authentication.class),\n+                new ConfigurationProperties(new Properties()));\n+        setMetaDataContexts(standardMetaDataContexts);\n+        assertTrue(!standardMetaDataContexts.getMetaDataMap().isEmpty());\n+        String configuredDatabaseType = standardMetaDataContexts.getProps().getValue(ConfigurationPropertyKey.PROXY_FRONTEND_DATABASE_PROTOCOL_TYPE);\n+        assertTrue(configuredDatabaseType.isEmpty());\n+        assertTrue(standardMetaDataContexts.getAllSchemaNames().contains(\"mysql\"));\n+        DatabaseType databaseType = FrontDatabaseProtocolTypeFactory.getDatabaseType();\n+        assertThat(databaseType, instanceOf(DatabaseType.class));\n+        assertThat(databaseType.getName(), is(\"MySQL\"));\n+    }\n+\n+    @Test\n+    public void assertGetDatabaseTypeOfPostgreSQLDatabaseTypeFromMetaDataContextsProps() {\n+        Properties properties = new Properties();\n+        properties.setProperty(ConfigurationPropertyKey.PROXY_FRONTEND_DATABASE_PROTOCOL_TYPE.getKey(), \"PostgreSQL\");\n+        StandardMetaDataContexts standardMetaDataContexts = new StandardMetaDataContexts(getShardingSphereMetaData(), mock(ExecutorEngine.class), mock(Authentication.class),\n+                new ConfigurationProperties(properties));\n+        setMetaDataContexts(standardMetaDataContexts);\n+        assertTrue(!standardMetaDataContexts.getMetaDataMap().isEmpty());\n+        String configuredDatabaseType = standardMetaDataContexts.getProps().getValue(ConfigurationPropertyKey.PROXY_FRONTEND_DATABASE_PROTOCOL_TYPE);\n+        assertThat(configuredDatabaseType, is(\"PostgreSQL\"));\n+        assertTrue(standardMetaDataContexts.getAllSchemaNames().contains(\"mysql\"));\n+        DatabaseType databaseType = FrontDatabaseProtocolTypeFactory.getDatabaseType();\n+        assertThat(databaseType, instanceOf(DatabaseType.class));\n+        assertThat(databaseType.getName(), is(\"PostgreSQL\"));\n+        assertThat(standardMetaDataContexts.getMetaData(\"mysql\").getResource().getDatabaseType(), instanceOf(MySQLDatabaseType.class));\n+    }\n+\n+    @SneakyThrows\n+    private void setMetaDataContexts(final StandardMetaDataContexts standardMetaDataContexts) {\n+        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n+        field.setAccessible(true);\n+        field.set(ProxyContext.getInstance(), standardMetaDataContexts);\n+    }\n+\n+    private Map<String, ShardingSphereMetaData> getShardingSphereMetaData() {\n+        ShardingSphereResource shardingSphereResource = mock(ShardingSphereResource.class);\n+        when(shardingSphereResource.getDatabaseType()).thenReturn(new MySQLDatabaseType());\n+        ShardingSphereMetaData shardingSphereMetaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n+        when(shardingSphereMetaData.getResource()).thenReturn(shardingSphereResource);\n+        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"mysql\", shardingSphereMetaData);\n+        return metaDataMap;", "originalCommit": "b6377f52e851cb843a686cedf1b854b3de2d4fbc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExNzk0MA==", "url": "https://github.com/apache/shardingsphere/pull/8602#discussion_r542117940", "bodyText": "Please add exception that for @SneakyThrows, please just make it narrow.", "author": "terrymanu", "createdAt": "2020-12-14T05:18:27Z", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/protocol/FrontDatabaseProtocolTypeFactoryTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend.protocol;\n+\n+import lombok.SneakyThrows;\n+import org.apache.shardingsphere.infra.auth.Authentication;\n+import org.apache.shardingsphere.infra.config.exception.ShardingSphereConfigurationException;\n+import org.apache.shardingsphere.infra.config.properties.ConfigurationProperties;\n+import org.apache.shardingsphere.infra.config.properties.ConfigurationPropertyKey;\n+import org.apache.shardingsphere.infra.context.metadata.impl.StandardMetaDataContexts;\n+import org.apache.shardingsphere.infra.database.type.DatabaseType;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.executor.kernel.ExecutorEngine;\n+import org.apache.shardingsphere.infra.metadata.ShardingSphereMetaData;\n+import org.apache.shardingsphere.infra.metadata.resource.ShardingSphereResource;\n+import org.apache.shardingsphere.proxy.backend.context.ProxyContext;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.lang.reflect.Field;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public final class FrontDatabaseProtocolTypeFactoryTest {\n+\n+    @Test(expected = ShardingSphereConfigurationException.class)\n+    public void assertGetDatabaseTypeFromMetaDataContextsThrowShardingSphereConfigurationException() {\n+        StandardMetaDataContexts standardMetaDataContexts = new StandardMetaDataContexts(Collections.emptyMap(), mock(ExecutorEngine.class), mock(Authentication.class),\n+                new ConfigurationProperties(new Properties()));\n+        setMetaDataContexts(standardMetaDataContexts);\n+        assertTrue(standardMetaDataContexts.getMetaDataMap().isEmpty());\n+        FrontDatabaseProtocolTypeFactory.getDatabaseType();\n+    }\n+\n+    @Test\n+    public void assertGetDatabaseTypeInstanceOfMySQLDatabaseTypeFromMetaDataContextsSchemaName() {\n+        StandardMetaDataContexts standardMetaDataContexts = new StandardMetaDataContexts(getShardingSphereMetaData(), mock(ExecutorEngine.class), mock(Authentication.class),\n+                new ConfigurationProperties(new Properties()));\n+        setMetaDataContexts(standardMetaDataContexts);\n+        assertTrue(!standardMetaDataContexts.getMetaDataMap().isEmpty());\n+        String configuredDatabaseType = standardMetaDataContexts.getProps().getValue(ConfigurationPropertyKey.PROXY_FRONTEND_DATABASE_PROTOCOL_TYPE);\n+        assertTrue(configuredDatabaseType.isEmpty());\n+        assertTrue(standardMetaDataContexts.getAllSchemaNames().contains(\"mysql\"));\n+        DatabaseType databaseType = FrontDatabaseProtocolTypeFactory.getDatabaseType();\n+        assertThat(databaseType, instanceOf(DatabaseType.class));\n+        assertThat(databaseType.getName(), is(\"MySQL\"));\n+    }\n+\n+    @Test\n+    public void assertGetDatabaseTypeOfPostgreSQLDatabaseTypeFromMetaDataContextsProps() {\n+        Properties properties = new Properties();\n+        properties.setProperty(ConfigurationPropertyKey.PROXY_FRONTEND_DATABASE_PROTOCOL_TYPE.getKey(), \"PostgreSQL\");\n+        StandardMetaDataContexts standardMetaDataContexts = new StandardMetaDataContexts(getShardingSphereMetaData(), mock(ExecutorEngine.class), mock(Authentication.class),\n+                new ConfigurationProperties(properties));\n+        setMetaDataContexts(standardMetaDataContexts);\n+        assertTrue(!standardMetaDataContexts.getMetaDataMap().isEmpty());\n+        String configuredDatabaseType = standardMetaDataContexts.getProps().getValue(ConfigurationPropertyKey.PROXY_FRONTEND_DATABASE_PROTOCOL_TYPE);\n+        assertThat(configuredDatabaseType, is(\"PostgreSQL\"));\n+        assertTrue(standardMetaDataContexts.getAllSchemaNames().contains(\"mysql\"));\n+        DatabaseType databaseType = FrontDatabaseProtocolTypeFactory.getDatabaseType();\n+        assertThat(databaseType, instanceOf(DatabaseType.class));\n+        assertThat(databaseType.getName(), is(\"PostgreSQL\"));\n+        assertThat(standardMetaDataContexts.getMetaData(\"mysql\").getResource().getDatabaseType(), instanceOf(MySQLDatabaseType.class));\n+    }\n+\n+    @SneakyThrows", "originalCommit": "b6377f52e851cb843a686cedf1b854b3de2d4fbc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "af50def5717289d54a2a06de3e43d9ea88410f67", "url": "https://github.com/apache/shardingsphere/commit/af50def5717289d54a2a06de3e43d9ea88410f67", "message": "delete unnecessary annotation; rename method getShardingSphereMetaData to getMetaDataMap.", "committedDate": "2020-12-14T06:02:58Z", "type": "commit"}]}