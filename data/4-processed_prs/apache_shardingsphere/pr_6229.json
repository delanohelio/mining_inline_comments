{"pr_number": 6229, "pr_title": "translate the solution from solution.cn.md to solution.en.md", "pr_createdAt": "2020-07-01T06:59:10Z", "pr_url": "https://github.com/apache/shardingsphere/pull/6229", "timeline": [{"oid": "1c93e25b25f6e6dfdf4b5e33239284c9097fe396", "url": "https://github.com/apache/shardingsphere/commit/1c93e25b25f6e6dfdf4b5e33239284c9097fe396", "message": "translate the solution from solution.cn.md to solution.en.md", "committedDate": "2020-07-01T06:44:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4MDM0MQ==", "url": "https://github.com/apache/shardingsphere/pull/6229#discussion_r448780341", "bodyText": "Liang Zhang\uff0cLeader of Data R&D of JD.com, initiator & PPMC of Apache ShardingSphere", "author": "kimmking", "createdAt": "2020-07-02T06:40:58Z", "path": "docs/blog/content/material/solution.en.md", "diffHunk": "@@ -4,4 +4,252 @@ weight = 9\n chapter = true\n +++\n \n-## TODO\n+## The mixed open-source distributed transaction solution\n+\n+### Author\n+\n+Liang Zhang\uff0cHead of Data R&D of JD.com, initiator of Apache ShardingSphere & PPMC", "originalCommit": "1c93e25b25f6e6dfdf4b5e33239284c9097fe396", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc5NjgzNQ==", "url": "https://github.com/apache/shardingsphere/pull/6229#discussion_r448796835", "bodyText": "leading open source projects -> leading open source project\nmain -> popular\nplatform -> platforms\ncode -> codes", "author": "kimmking", "createdAt": "2020-07-02T07:17:52Z", "path": "docs/blog/content/material/solution.en.md", "diffHunk": "@@ -4,4 +4,252 @@ weight = 9\n chapter = true\n +++\n \n-## TODO\n+## The mixed open-source distributed transaction solution\n+\n+### Author\n+\n+Liang Zhang\uff0cHead of Data R&D of JD.com, initiator of Apache ShardingSphere & PPMC\n+\n+Love open source, currently leading open source projects ShardingSphere (formerly known as Sharding-JDBC) and Elastic-Job. Good at using Java as the main distributed architecture and Kubernetes and Mesos as the main cloud platform, admiring elegant code, and having more research on how to write expressive code.", "originalCommit": "1c93e25b25f6e6dfdf4b5e33239284c9097fe396", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc5ODI5NQ==", "url": "https://github.com/apache/shardingsphere/pull/6229#discussion_r448798295", "bodyText": "the main energy is invested in  -> focus on", "author": "kimmking", "createdAt": "2020-07-02T07:20:57Z", "path": "docs/blog/content/material/solution.en.md", "diffHunk": "@@ -4,4 +4,252 @@ weight = 9\n chapter = true\n +++\n \n-## TODO\n+## The mixed open-source distributed transaction solution\n+\n+### Author\n+\n+Liang Zhang\uff0cHead of Data R&D of JD.com, initiator of Apache ShardingSphere & PPMC\n+\n+Love open source, currently leading open source projects ShardingSphere (formerly known as Sharding-JDBC) and Elastic-Job. Good at using Java as the main distributed architecture and Kubernetes and Mesos as the main cloud platform, admiring elegant code, and having more research on how to write expressive code.\n+\n+At present, the main energy is invested in building ShardingSphere into the industry's first-class financial data solution. ShardingSphere has entered the Apache incubator, is the first open source project of the Jingdong Group to enter the Apache Foundation, and is also the first distributed database middleware of the Apache Foundation.", "originalCommit": "1c93e25b25f6e6dfdf4b5e33239284c9097fe396", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc5OTU4MA==", "url": "https://github.com/apache/shardingsphere/pull/6229#discussion_r448799580", "bodyText": "Ning Jiang\uff0cTechnical expert of Huawei Open Source Competency Center, project leader of Apache ServiceComb. Former chief software engineer of Red Hat Software.", "author": "kimmking", "createdAt": "2020-07-02T07:23:40Z", "path": "docs/blog/content/material/solution.en.md", "diffHunk": "@@ -4,4 +4,252 @@ weight = 9\n chapter = true\n +++\n \n-## TODO\n+## The mixed open-source distributed transaction solution\n+\n+### Author\n+\n+Liang Zhang\uff0cHead of Data R&D of JD.com, initiator of Apache ShardingSphere & PPMC\n+\n+Love open source, currently leading open source projects ShardingSphere (formerly known as Sharding-JDBC) and Elastic-Job. Good at using Java as the main distributed architecture and Kubernetes and Mesos as the main cloud platform, admiring elegant code, and having more research on how to write expressive code.\n+\n+At present, the main energy is invested in building ShardingSphere into the industry's first-class financial data solution. ShardingSphere has entered the Apache incubator, is the first open source project of the Jingdong Group to enter the Apache Foundation, and is also the first distributed database middleware of the Apache Foundation.\n+\n+---\n+Ning Jiang\uff0cTechnical expert of Huawei Open Source Competency Center, project leader of Apache ServiceComb. Former chief software engineer of Red Hat Software, he has more than ten years of experience in enterprise-level open source middleware development, rich experience in Java development and use, and he also is the enthusiast of functional programming. Since 2006, he has been engaged in the development of the Apache open source middleware project, and has participated in the development of Apache CXF, Apache Camel, and Apache ServiceMix. He has in-depth research in the microservice architecture, such as WebServices, Enterprise Integration Pattern, SOA and OSGi.", "originalCommit": "1c93e25b25f6e6dfdf4b5e33239284c9097fe396", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgwNDA0MA==", "url": "https://github.com/apache/shardingsphere/pull/6229#discussion_r448804040", "bodyText": "Compared with the gradual maturity of data sharding, distributed transaction that combine performance, transparency, automation, strong consistency, and can be applied to various application scenarios, the solutions are applicable to all of them are very rare. Based on the performance bottlenecks of distributed transactions submitted in two (three) phases and the business transformation of flexible transactions, distributed transactions are still a headache for architects.", "author": "kimmking", "createdAt": "2020-07-02T07:32:25Z", "path": "docs/blog/content/material/solution.en.md", "diffHunk": "@@ -4,4 +4,252 @@ weight = 9\n chapter = true\n +++\n \n-## TODO\n+## The mixed open-source distributed transaction solution\n+\n+### Author\n+\n+Liang Zhang\uff0cHead of Data R&D of JD.com, initiator of Apache ShardingSphere & PPMC\n+\n+Love open source, currently leading open source projects ShardingSphere (formerly known as Sharding-JDBC) and Elastic-Job. Good at using Java as the main distributed architecture and Kubernetes and Mesos as the main cloud platform, admiring elegant code, and having more research on how to write expressive code.\n+\n+At present, the main energy is invested in building ShardingSphere into the industry's first-class financial data solution. ShardingSphere has entered the Apache incubator, is the first open source project of the Jingdong Group to enter the Apache Foundation, and is also the first distributed database middleware of the Apache Foundation.\n+\n+---\n+Ning Jiang\uff0cTechnical expert of Huawei Open Source Competency Center, project leader of Apache ServiceComb. Former chief software engineer of Red Hat Software, he has more than ten years of experience in enterprise-level open source middleware development, rich experience in Java development and use, and he also is the enthusiast of functional programming. Since 2006, he has been engaged in the development of the Apache open source middleware project, and has participated in the development of Apache CXF, Apache Camel, and Apache ServiceMix. He has in-depth research in the microservice architecture, such as WebServices, Enterprise Integration Pattern, SOA and OSGi.\n+\n+Blog address\uff1ahttps://willemjiang.github.io/\n+\n+---\n+\n+Zheng Feng is a software engineer at Red Hat. Joined Red Hat Software in 2009, mainly engaged in the work of the transaction manager. As a core developer, he participated in the Narayan and Blacktie projects. He had contributed to the integration of transaction processing of multiple application servers (Wildfly, Karaf, Tomcat) and frameworks (Common DBCP, Spring Boot ). Since 2017, he has participated in the Apache ServiceComb project and is currently a member of PMC. He has in-depth research on distributed transaction processing and transaction processing in a microservice environment.\n+\n+### Guide\n+\n+Compared with the gradual maturity of data sharding solutions, distributed transaction solutions that combine performance, transparency, automation, strong consistency, and can be applied to various application scenarios in one are very rare. Based on the performance bottlenecks of distributed transactions submitted in two (three) stages and the business transformation of flexible transactions, distributed transactions are still a headache for architects.", "originalCommit": "1c93e25b25f6e6dfdf4b5e33239284c9097fe396", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzMTIxMQ==", "url": "https://github.com/apache/shardingsphere/pull/6229#discussion_r448831211", "bodyText": "BASE is an abbreviation of the three elements of Basic Availability, Soft state and Eventually consistent.", "author": "kimmking", "createdAt": "2020-07-02T08:21:20Z", "path": "docs/blog/content/material/solution.en.md", "diffHunk": "@@ -4,4 +4,252 @@ weight = 9\n chapter = true\n +++\n \n-## TODO\n+## The mixed open-source distributed transaction solution\n+\n+### Author\n+\n+Liang Zhang\uff0cHead of Data R&D of JD.com, initiator of Apache ShardingSphere & PPMC\n+\n+Love open source, currently leading open source projects ShardingSphere (formerly known as Sharding-JDBC) and Elastic-Job. Good at using Java as the main distributed architecture and Kubernetes and Mesos as the main cloud platform, admiring elegant code, and having more research on how to write expressive code.\n+\n+At present, the main energy is invested in building ShardingSphere into the industry's first-class financial data solution. ShardingSphere has entered the Apache incubator, is the first open source project of the Jingdong Group to enter the Apache Foundation, and is also the first distributed database middleware of the Apache Foundation.\n+\n+---\n+Ning Jiang\uff0cTechnical expert of Huawei Open Source Competency Center, project leader of Apache ServiceComb. Former chief software engineer of Red Hat Software, he has more than ten years of experience in enterprise-level open source middleware development, rich experience in Java development and use, and he also is the enthusiast of functional programming. Since 2006, he has been engaged in the development of the Apache open source middleware project, and has participated in the development of Apache CXF, Apache Camel, and Apache ServiceMix. He has in-depth research in the microservice architecture, such as WebServices, Enterprise Integration Pattern, SOA and OSGi.\n+\n+Blog address\uff1ahttps://willemjiang.github.io/\n+\n+---\n+\n+Zheng Feng is a software engineer at Red Hat. Joined Red Hat Software in 2009, mainly engaged in the work of the transaction manager. As a core developer, he participated in the Narayan and Blacktie projects. He had contributed to the integration of transaction processing of multiple application servers (Wildfly, Karaf, Tomcat) and frameworks (Common DBCP, Spring Boot ). Since 2017, he has participated in the Apache ServiceComb project and is currently a member of PMC. He has in-depth research on distributed transaction processing and transaction processing in a microservice environment.\n+\n+### Guide\n+\n+Compared with the gradual maturity of data sharding solutions, distributed transaction solutions that combine performance, transparency, automation, strong consistency, and can be applied to various application scenarios in one are very rare. Based on the performance bottlenecks of distributed transactions submitted in two (three) stages and the business transformation of flexible transactions, distributed transactions are still a headache for architects.\n+\n+At the beginning of 2019, Apache ShardingSphere (Incubating) provided a rigid and flexible integrated distributed transaction solution. If your application system is being troubled by this aspect, why not pour a cup of coffee and spend ten minutes reading this article, maybe you will gain something?\n+\n+### Background\n+\n+Database transactions need to meet the four characteristics of ACID (Atomicity, Consistency, Isolation, Durability).\n+\n+- Atomicity\tRefers to the execution of the transaction as a whole, either all or no execution.\n+\n+- Consistency\tRefers to the transaction should ensure that the data changes from one consistent state to another consistent state.\n+\n+- Isolation\tWhen multiple transactions are executed concurrently, the execution of one transaction should not affect the execution of other transactions.\n+\n+- Durability\tRefers to the committed transaction modification data will be persisted.\n+\n+In a single data node, the transaction is limited to the access control of a single database resource, called local transaction. Almost all mature relational databases provide native support for local transactions. However, in a distributed application environment based on microservices, more and more application scenarios require that access to multiple services and corresponding multiple database resources can be incorporated into the same transaction, then the distributed transactions emerge as the times require.\n+\n+Although the relational database provides perfect ACID native support for local transactions. But in a distributed scenario, it has become a shackle in system performance. How to make the database meet the characteristics of ACID or find corresponding alternatives in a distributed scenario is the focus of distributed transactions.\n+\n+#### Local transaction\n+\n+Without opening any distributed transaction manager, let each data node manage its own transaction. There is no coordination and communication between them, and they do not know each other's success of other data node transactions. There is no loss in performance for local transactions, but it is inadequate in terms of strong consistency and eventual consistency.\n+\n+#### Two-phase commit\n+\n+The earliest distributed transaction model of the XA protocol is the X/Open Distributed Transaction Processing (DTP) model proposed by the X/Open International Alliance, referred to as the XA protocol.\n+\n+The distributed transaction based on the XA protocol has little intrusion on the business. Its biggest advantage is that it is transparent to the user. Users can use distributed transactions based on the XA protocol like local transactions. The XA protocol can strictly guarantee the ACID characteristics of transactions.\n+\n+Strictly guaranteeing ACID characteristics of transactions is a double-edged sword. In the process of transaction execution, all required resources need to be locked, so the XA protocol is more suitable for short transactions whose execution time is determined. For long transactions, the exclusive use of data during the entire transaction will cause the concurrency performance of business systems that rely on hot data to decline significantly. Therefore, in high-concurrency performance-oriented scenarios, distributed transactions based on the XA protocol two-phase commit type are not the best choice.\n+\n+#### Flexible transaction\n+\n+If the transaction that implements the ACID transaction element is called a rigid transaction, the transaction based on the BASE transaction element is called a flexible transaction. BASE is an abbreviation of the three elements of basic availability, flexible state and final consistency.", "originalCommit": "1c93e25b25f6e6dfdf4b5e33239284c9097fe396", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzMjQ1NA==", "url": "https://github.com/apache/shardingsphere/pull/6229#discussion_r448832454", "bodyText": "Eventually consistent\tUsually, the eventually consistency of the system is ensured by means of message passing.", "author": "kimmking", "createdAt": "2020-07-02T08:23:30Z", "path": "docs/blog/content/material/solution.en.md", "diffHunk": "@@ -4,4 +4,252 @@ weight = 9\n chapter = true\n +++\n \n-## TODO\n+## The mixed open-source distributed transaction solution\n+\n+### Author\n+\n+Liang Zhang\uff0cHead of Data R&D of JD.com, initiator of Apache ShardingSphere & PPMC\n+\n+Love open source, currently leading open source projects ShardingSphere (formerly known as Sharding-JDBC) and Elastic-Job. Good at using Java as the main distributed architecture and Kubernetes and Mesos as the main cloud platform, admiring elegant code, and having more research on how to write expressive code.\n+\n+At present, the main energy is invested in building ShardingSphere into the industry's first-class financial data solution. ShardingSphere has entered the Apache incubator, is the first open source project of the Jingdong Group to enter the Apache Foundation, and is also the first distributed database middleware of the Apache Foundation.\n+\n+---\n+Ning Jiang\uff0cTechnical expert of Huawei Open Source Competency Center, project leader of Apache ServiceComb. Former chief software engineer of Red Hat Software, he has more than ten years of experience in enterprise-level open source middleware development, rich experience in Java development and use, and he also is the enthusiast of functional programming. Since 2006, he has been engaged in the development of the Apache open source middleware project, and has participated in the development of Apache CXF, Apache Camel, and Apache ServiceMix. He has in-depth research in the microservice architecture, such as WebServices, Enterprise Integration Pattern, SOA and OSGi.\n+\n+Blog address\uff1ahttps://willemjiang.github.io/\n+\n+---\n+\n+Zheng Feng is a software engineer at Red Hat. Joined Red Hat Software in 2009, mainly engaged in the work of the transaction manager. As a core developer, he participated in the Narayan and Blacktie projects. He had contributed to the integration of transaction processing of multiple application servers (Wildfly, Karaf, Tomcat) and frameworks (Common DBCP, Spring Boot ). Since 2017, he has participated in the Apache ServiceComb project and is currently a member of PMC. He has in-depth research on distributed transaction processing and transaction processing in a microservice environment.\n+\n+### Guide\n+\n+Compared with the gradual maturity of data sharding solutions, distributed transaction solutions that combine performance, transparency, automation, strong consistency, and can be applied to various application scenarios in one are very rare. Based on the performance bottlenecks of distributed transactions submitted in two (three) stages and the business transformation of flexible transactions, distributed transactions are still a headache for architects.\n+\n+At the beginning of 2019, Apache ShardingSphere (Incubating) provided a rigid and flexible integrated distributed transaction solution. If your application system is being troubled by this aspect, why not pour a cup of coffee and spend ten minutes reading this article, maybe you will gain something?\n+\n+### Background\n+\n+Database transactions need to meet the four characteristics of ACID (Atomicity, Consistency, Isolation, Durability).\n+\n+- Atomicity\tRefers to the execution of the transaction as a whole, either all or no execution.\n+\n+- Consistency\tRefers to the transaction should ensure that the data changes from one consistent state to another consistent state.\n+\n+- Isolation\tWhen multiple transactions are executed concurrently, the execution of one transaction should not affect the execution of other transactions.\n+\n+- Durability\tRefers to the committed transaction modification data will be persisted.\n+\n+In a single data node, the transaction is limited to the access control of a single database resource, called local transaction. Almost all mature relational databases provide native support for local transactions. However, in a distributed application environment based on microservices, more and more application scenarios require that access to multiple services and corresponding multiple database resources can be incorporated into the same transaction, then the distributed transactions emerge as the times require.\n+\n+Although the relational database provides perfect ACID native support for local transactions. But in a distributed scenario, it has become a shackle in system performance. How to make the database meet the characteristics of ACID or find corresponding alternatives in a distributed scenario is the focus of distributed transactions.\n+\n+#### Local transaction\n+\n+Without opening any distributed transaction manager, let each data node manage its own transaction. There is no coordination and communication between them, and they do not know each other's success of other data node transactions. There is no loss in performance for local transactions, but it is inadequate in terms of strong consistency and eventual consistency.\n+\n+#### Two-phase commit\n+\n+The earliest distributed transaction model of the XA protocol is the X/Open Distributed Transaction Processing (DTP) model proposed by the X/Open International Alliance, referred to as the XA protocol.\n+\n+The distributed transaction based on the XA protocol has little intrusion on the business. Its biggest advantage is that it is transparent to the user. Users can use distributed transactions based on the XA protocol like local transactions. The XA protocol can strictly guarantee the ACID characteristics of transactions.\n+\n+Strictly guaranteeing ACID characteristics of transactions is a double-edged sword. In the process of transaction execution, all required resources need to be locked, so the XA protocol is more suitable for short transactions whose execution time is determined. For long transactions, the exclusive use of data during the entire transaction will cause the concurrency performance of business systems that rely on hot data to decline significantly. Therefore, in high-concurrency performance-oriented scenarios, distributed transactions based on the XA protocol two-phase commit type are not the best choice.\n+\n+#### Flexible transaction\n+\n+If the transaction that implements the ACID transaction element is called a rigid transaction, the transaction based on the BASE transaction element is called a flexible transaction. BASE is an abbreviation of the three elements of basic availability, flexible state and final consistency.\n+\n+- Basically Available\tEnsure that participants in distributed transactions are not necessarily online at the same time.\n+\n+- Soft state\tIt allows a certain delay in the system status update, and this delay may not be noticeable to customers.\n+\n+- Eventually consistent\tUsually, the final consistency of the system is ensured by means of message passing.", "originalCommit": "1c93e25b25f6e6dfdf4b5e33239284c9097fe396", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzNTMzOA==", "url": "https://github.com/apache/shardingsphere/pull/6229#discussion_r448835338", "bodyText": "a Saga transaction is a long-term", "author": "kimmking", "createdAt": "2020-07-02T08:28:25Z", "path": "docs/blog/content/material/solution.en.md", "diffHunk": "@@ -4,4 +4,252 @@ weight = 9\n chapter = true\n +++\n \n-## TODO\n+## The mixed open-source distributed transaction solution\n+\n+### Author\n+\n+Liang Zhang\uff0cHead of Data R&D of JD.com, initiator of Apache ShardingSphere & PPMC\n+\n+Love open source, currently leading open source projects ShardingSphere (formerly known as Sharding-JDBC) and Elastic-Job. Good at using Java as the main distributed architecture and Kubernetes and Mesos as the main cloud platform, admiring elegant code, and having more research on how to write expressive code.\n+\n+At present, the main energy is invested in building ShardingSphere into the industry's first-class financial data solution. ShardingSphere has entered the Apache incubator, is the first open source project of the Jingdong Group to enter the Apache Foundation, and is also the first distributed database middleware of the Apache Foundation.\n+\n+---\n+Ning Jiang\uff0cTechnical expert of Huawei Open Source Competency Center, project leader of Apache ServiceComb. Former chief software engineer of Red Hat Software, he has more than ten years of experience in enterprise-level open source middleware development, rich experience in Java development and use, and he also is the enthusiast of functional programming. Since 2006, he has been engaged in the development of the Apache open source middleware project, and has participated in the development of Apache CXF, Apache Camel, and Apache ServiceMix. He has in-depth research in the microservice architecture, such as WebServices, Enterprise Integration Pattern, SOA and OSGi.\n+\n+Blog address\uff1ahttps://willemjiang.github.io/\n+\n+---\n+\n+Zheng Feng is a software engineer at Red Hat. Joined Red Hat Software in 2009, mainly engaged in the work of the transaction manager. As a core developer, he participated in the Narayan and Blacktie projects. He had contributed to the integration of transaction processing of multiple application servers (Wildfly, Karaf, Tomcat) and frameworks (Common DBCP, Spring Boot ). Since 2017, he has participated in the Apache ServiceComb project and is currently a member of PMC. He has in-depth research on distributed transaction processing and transaction processing in a microservice environment.\n+\n+### Guide\n+\n+Compared with the gradual maturity of data sharding solutions, distributed transaction solutions that combine performance, transparency, automation, strong consistency, and can be applied to various application scenarios in one are very rare. Based on the performance bottlenecks of distributed transactions submitted in two (three) stages and the business transformation of flexible transactions, distributed transactions are still a headache for architects.\n+\n+At the beginning of 2019, Apache ShardingSphere (Incubating) provided a rigid and flexible integrated distributed transaction solution. If your application system is being troubled by this aspect, why not pour a cup of coffee and spend ten minutes reading this article, maybe you will gain something?\n+\n+### Background\n+\n+Database transactions need to meet the four characteristics of ACID (Atomicity, Consistency, Isolation, Durability).\n+\n+- Atomicity\tRefers to the execution of the transaction as a whole, either all or no execution.\n+\n+- Consistency\tRefers to the transaction should ensure that the data changes from one consistent state to another consistent state.\n+\n+- Isolation\tWhen multiple transactions are executed concurrently, the execution of one transaction should not affect the execution of other transactions.\n+\n+- Durability\tRefers to the committed transaction modification data will be persisted.\n+\n+In a single data node, the transaction is limited to the access control of a single database resource, called local transaction. Almost all mature relational databases provide native support for local transactions. However, in a distributed application environment based on microservices, more and more application scenarios require that access to multiple services and corresponding multiple database resources can be incorporated into the same transaction, then the distributed transactions emerge as the times require.\n+\n+Although the relational database provides perfect ACID native support for local transactions. But in a distributed scenario, it has become a shackle in system performance. How to make the database meet the characteristics of ACID or find corresponding alternatives in a distributed scenario is the focus of distributed transactions.\n+\n+#### Local transaction\n+\n+Without opening any distributed transaction manager, let each data node manage its own transaction. There is no coordination and communication between them, and they do not know each other's success of other data node transactions. There is no loss in performance for local transactions, but it is inadequate in terms of strong consistency and eventual consistency.\n+\n+#### Two-phase commit\n+\n+The earliest distributed transaction model of the XA protocol is the X/Open Distributed Transaction Processing (DTP) model proposed by the X/Open International Alliance, referred to as the XA protocol.\n+\n+The distributed transaction based on the XA protocol has little intrusion on the business. Its biggest advantage is that it is transparent to the user. Users can use distributed transactions based on the XA protocol like local transactions. The XA protocol can strictly guarantee the ACID characteristics of transactions.\n+\n+Strictly guaranteeing ACID characteristics of transactions is a double-edged sword. In the process of transaction execution, all required resources need to be locked, so the XA protocol is more suitable for short transactions whose execution time is determined. For long transactions, the exclusive use of data during the entire transaction will cause the concurrency performance of business systems that rely on hot data to decline significantly. Therefore, in high-concurrency performance-oriented scenarios, distributed transactions based on the XA protocol two-phase commit type are not the best choice.\n+\n+#### Flexible transaction\n+\n+If the transaction that implements the ACID transaction element is called a rigid transaction, the transaction based on the BASE transaction element is called a flexible transaction. BASE is an abbreviation of the three elements of basic availability, flexible state and final consistency.\n+\n+- Basically Available\tEnsure that participants in distributed transactions are not necessarily online at the same time.\n+\n+- Soft state\tIt allows a certain delay in the system status update, and this delay may not be noticeable to customers.\n+\n+- Eventually consistent\tUsually, the final consistency of the system is ensured by means of message passing.\n+\n+In ACID transactions, the requirements for consistency and isolation are very high. During the execution of the transaction, all resources must be occupied. The idea of flexible transactions is to move the mutex operation from the resource level to the business level through business logic. By relaxing the requirements for strong consistency and isolation, only when the entire transaction ends, the data is consistent. During the execution of the transaction, any data obtained by the read operation may be changed. This weak consistency design can be used in exchange for system throughput improvement.\n+\n+Saga is a typical flexible transaction manager. The concept of Sagas comes from a database paper more than thirty years ago [http://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf], a Saga transaction is A long-term transaction which is composed of multiple short-term transactions. In the distributed transaction scenario, we regard a Saga distributed transaction as a transaction composed of multiple local transactions, and each local transaction has a corresponding compensation transaction. During the execution of the Saga transaction, if an abnormality occurs in a certain step, the Saga transaction will be terminated, and the corresponding compensation transaction will be called to complete the related recovery operation, so as to ensure that the local transactions related to Saga are all executed successfully, or through compensation restore to the state before the transaction was executed.", "originalCommit": "1c93e25b25f6e6dfdf4b5e33239284c9097fe396", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzOTUyOA==", "url": "https://github.com/apache/shardingsphere/pull/6229#discussion_r448839528", "bodyText": "Two-Phase Commit", "author": "kimmking", "createdAt": "2020-07-02T08:35:14Z", "path": "docs/blog/content/material/solution.en.md", "diffHunk": "@@ -4,4 +4,252 @@ weight = 9\n chapter = true\n +++\n \n-## TODO\n+## The mixed open-source distributed transaction solution\n+\n+### Author\n+\n+Liang Zhang\uff0cHead of Data R&D of JD.com, initiator of Apache ShardingSphere & PPMC\n+\n+Love open source, currently leading open source projects ShardingSphere (formerly known as Sharding-JDBC) and Elastic-Job. Good at using Java as the main distributed architecture and Kubernetes and Mesos as the main cloud platform, admiring elegant code, and having more research on how to write expressive code.\n+\n+At present, the main energy is invested in building ShardingSphere into the industry's first-class financial data solution. ShardingSphere has entered the Apache incubator, is the first open source project of the Jingdong Group to enter the Apache Foundation, and is also the first distributed database middleware of the Apache Foundation.\n+\n+---\n+Ning Jiang\uff0cTechnical expert of Huawei Open Source Competency Center, project leader of Apache ServiceComb. Former chief software engineer of Red Hat Software, he has more than ten years of experience in enterprise-level open source middleware development, rich experience in Java development and use, and he also is the enthusiast of functional programming. Since 2006, he has been engaged in the development of the Apache open source middleware project, and has participated in the development of Apache CXF, Apache Camel, and Apache ServiceMix. He has in-depth research in the microservice architecture, such as WebServices, Enterprise Integration Pattern, SOA and OSGi.\n+\n+Blog address\uff1ahttps://willemjiang.github.io/\n+\n+---\n+\n+Zheng Feng is a software engineer at Red Hat. Joined Red Hat Software in 2009, mainly engaged in the work of the transaction manager. As a core developer, he participated in the Narayan and Blacktie projects. He had contributed to the integration of transaction processing of multiple application servers (Wildfly, Karaf, Tomcat) and frameworks (Common DBCP, Spring Boot ). Since 2017, he has participated in the Apache ServiceComb project and is currently a member of PMC. He has in-depth research on distributed transaction processing and transaction processing in a microservice environment.\n+\n+### Guide\n+\n+Compared with the gradual maturity of data sharding solutions, distributed transaction solutions that combine performance, transparency, automation, strong consistency, and can be applied to various application scenarios in one are very rare. Based on the performance bottlenecks of distributed transactions submitted in two (three) stages and the business transformation of flexible transactions, distributed transactions are still a headache for architects.\n+\n+At the beginning of 2019, Apache ShardingSphere (Incubating) provided a rigid and flexible integrated distributed transaction solution. If your application system is being troubled by this aspect, why not pour a cup of coffee and spend ten minutes reading this article, maybe you will gain something?\n+\n+### Background\n+\n+Database transactions need to meet the four characteristics of ACID (Atomicity, Consistency, Isolation, Durability).\n+\n+- Atomicity\tRefers to the execution of the transaction as a whole, either all or no execution.\n+\n+- Consistency\tRefers to the transaction should ensure that the data changes from one consistent state to another consistent state.\n+\n+- Isolation\tWhen multiple transactions are executed concurrently, the execution of one transaction should not affect the execution of other transactions.\n+\n+- Durability\tRefers to the committed transaction modification data will be persisted.\n+\n+In a single data node, the transaction is limited to the access control of a single database resource, called local transaction. Almost all mature relational databases provide native support for local transactions. However, in a distributed application environment based on microservices, more and more application scenarios require that access to multiple services and corresponding multiple database resources can be incorporated into the same transaction, then the distributed transactions emerge as the times require.\n+\n+Although the relational database provides perfect ACID native support for local transactions. But in a distributed scenario, it has become a shackle in system performance. How to make the database meet the characteristics of ACID or find corresponding alternatives in a distributed scenario is the focus of distributed transactions.\n+\n+#### Local transaction\n+\n+Without opening any distributed transaction manager, let each data node manage its own transaction. There is no coordination and communication between them, and they do not know each other's success of other data node transactions. There is no loss in performance for local transactions, but it is inadequate in terms of strong consistency and eventual consistency.\n+\n+#### Two-phase commit\n+\n+The earliest distributed transaction model of the XA protocol is the X/Open Distributed Transaction Processing (DTP) model proposed by the X/Open International Alliance, referred to as the XA protocol.\n+\n+The distributed transaction based on the XA protocol has little intrusion on the business. Its biggest advantage is that it is transparent to the user. Users can use distributed transactions based on the XA protocol like local transactions. The XA protocol can strictly guarantee the ACID characteristics of transactions.\n+\n+Strictly guaranteeing ACID characteristics of transactions is a double-edged sword. In the process of transaction execution, all required resources need to be locked, so the XA protocol is more suitable for short transactions whose execution time is determined. For long transactions, the exclusive use of data during the entire transaction will cause the concurrency performance of business systems that rely on hot data to decline significantly. Therefore, in high-concurrency performance-oriented scenarios, distributed transactions based on the XA protocol two-phase commit type are not the best choice.\n+\n+#### Flexible transaction\n+\n+If the transaction that implements the ACID transaction element is called a rigid transaction, the transaction based on the BASE transaction element is called a flexible transaction. BASE is an abbreviation of the three elements of basic availability, flexible state and final consistency.\n+\n+- Basically Available\tEnsure that participants in distributed transactions are not necessarily online at the same time.\n+\n+- Soft state\tIt allows a certain delay in the system status update, and this delay may not be noticeable to customers.\n+\n+- Eventually consistent\tUsually, the final consistency of the system is ensured by means of message passing.\n+\n+In ACID transactions, the requirements for consistency and isolation are very high. During the execution of the transaction, all resources must be occupied. The idea of flexible transactions is to move the mutex operation from the resource level to the business level through business logic. By relaxing the requirements for strong consistency and isolation, only when the entire transaction ends, the data is consistent. During the execution of the transaction, any data obtained by the read operation may be changed. This weak consistency design can be used in exchange for system throughput improvement.\n+\n+Saga is a typical flexible transaction manager. The concept of Sagas comes from a database paper more than thirty years ago [http://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf], a Saga transaction is A long-term transaction which is composed of multiple short-term transactions. In the distributed transaction scenario, we regard a Saga distributed transaction as a transaction composed of multiple local transactions, and each local transaction has a corresponding compensation transaction. During the execution of the Saga transaction, if an abnormality occurs in a certain step, the Saga transaction will be terminated, and the corresponding compensation transaction will be called to complete the related recovery operation, so as to ensure that the local transactions related to Saga are all executed successfully, or through compensation restore to the state before the transaction was executed.\n+\n+TCC (Try-Cancel/Confirm implementation) is another kind of flexible transaction coordination implementation. TCC provides a more perfect recovery method with the help of a two-phase submission agreement. In TCC mode, cancel compensation obviously needs to execute business logic in the second stage to cancel the consequences of the first stage. Try is to perform related business operations in the first stage to complete the occupation of related business resources, such as pre-allocating ticket resources, or checking and refreshing the user account credit limit. During the cancellation phase, relevant business resources are released, such as releasing pre-allocated ticketing resources or restoring previously occupied user credits. Why do we need to add confirmation operations? This needs to start with the use life cycle of business resources. In the try process, we are only occupying business resources, and the related execution operations are only in a pending state. Only after the confirmation operation is completed, the business resources can be truly confirmed.\n+\n+The strong consistency transaction based on ACID and the final consistency transaction based on BASE are not silver bullets, and their greatest strengths can only be used in the most suitable scenarios. The following table can be used to compare the differences between them in detail to help developers choose technologies.\n+\n+<center>\n+\n+\n+|        Contrast         |             Local Transaction             |        Two-phase Submission         |        Flexible Transaction         |", "originalCommit": "1c93e25b25f6e6dfdf4b5e33239284c9097fe396", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}