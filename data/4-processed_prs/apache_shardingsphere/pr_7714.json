{"pr_number": 7714, "pr_title": "Add test case for ShardingConditionEngineFactory", "pr_createdAt": "2020-10-08T12:38:55Z", "pr_url": "https://github.com/apache/shardingsphere/pull/7714", "timeline": [{"oid": "e894136c311a680f10b8056862b5fbefeb41ff39", "url": "https://github.com/apache/shardingsphere/commit/e894136c311a680f10b8056862b5fbefeb41ff39", "message": "Add test case for ShardingConditionEngineFactory", "committedDate": "2020-10-08T12:41:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE2MjA2NA==", "url": "https://github.com/apache/shardingsphere/pull/7714#discussion_r502162064", "bodyText": "Please remove this redundant blank line.", "author": "tristaZero", "createdAt": "2020-10-09T03:16:40Z", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/test/java/org/apache/shardingsphere/sharding/route/engine/condition/engine/ShardingConditionEngineFactoryTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sharding.route.engine.condition.engine;\n+\n+import org.apache.shardingsphere.infra.metadata.ShardingSphereMetaData;\n+import org.apache.shardingsphere.infra.metadata.schema.RuleSchemaMetaData;\n+import org.apache.shardingsphere.infra.schema.ShardingSphereSchema;\n+import org.apache.shardingsphere.infra.sql.LogicSQL;\n+import org.apache.shardingsphere.sharding.route.engine.condition.engine.impl.InsertClauseShardingConditionEngine;\n+import org.apache.shardingsphere.sharding.route.engine.condition.engine.impl.WhereClauseShardingConditionEngine;\n+import org.apache.shardingsphere.sharding.rule.ShardingRule;\n+import org.apache.shardingsphere.sql.parser.binder.metadata.schema.SchemaMetaData;\n+import org.apache.shardingsphere.sql.parser.binder.statement.SQLStatementContext;\n+import org.apache.shardingsphere.sql.parser.binder.statement.dml.InsertStatementContext;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public final class ShardingConditionEngineFactoryTest {\n+    \n+    @Mock\n+    private LogicSQL logicSQL;\n+    \n+    @Mock\n+    private ShardingRule shardingRule;\n+    \n+    @Before\n+    public void setUp() {\n+        ShardingSphereSchema shardingSphereSchema = mock(ShardingSphereSchema.class);\n+        when(logicSQL.getSchema()).thenReturn(shardingSphereSchema);\n+        ShardingSphereMetaData shardingSphereMetaData = mock(ShardingSphereMetaData.class);\n+        when(shardingSphereSchema.getMetaData()).thenReturn(shardingSphereMetaData);\n+        RuleSchemaMetaData ruleSchemaMetaData = mock(RuleSchemaMetaData.class);\n+        when(shardingSphereMetaData.getRuleSchemaMetaData()).thenReturn(ruleSchemaMetaData);\n+        SchemaMetaData schemaMetaData = mock(SchemaMetaData.class);\n+        when(ruleSchemaMetaData.getConfiguredSchemaMetaData()).thenReturn(schemaMetaData);\n+        ", "originalCommit": "ae6d819882a7141a43ff203f0921945a28ba0620", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b1ccbac12b3096988cc8b9e8b9097c11cb7d553f", "url": "https://github.com/apache/shardingsphere/commit/b1ccbac12b3096988cc8b9e8b9097c11cb7d553f", "message": "Add test case for ShardingConditionEngineFactory", "committedDate": "2020-10-09T03:42:27Z", "type": "commit"}, {"oid": "23b7b897630e7797958e77bcbab1121d248eb6a3", "url": "https://github.com/apache/shardingsphere/commit/23b7b897630e7797958e77bcbab1121d248eb6a3", "message": "Add test case for ShardingConditionEngineFactory", "committedDate": "2020-10-09T03:42:27Z", "type": "commit"}, {"oid": "cc0fa477e2eddc2cd786df6eb499ab55ebbe11ed", "url": "https://github.com/apache/shardingsphere/commit/cc0fa477e2eddc2cd786df6eb499ab55ebbe11ed", "message": "adjust method name", "committedDate": "2020-10-09T03:42:27Z", "type": "commit"}, {"oid": "c4e771b47884d1313ab65d310fce12e804b2c447", "url": "https://github.com/apache/shardingsphere/commit/c4e771b47884d1313ab65d310fce12e804b2c447", "message": "adjust code style", "committedDate": "2020-10-09T03:47:20Z", "type": "commit"}, {"oid": "c4e771b47884d1313ab65d310fce12e804b2c447", "url": "https://github.com/apache/shardingsphere/commit/c4e771b47884d1313ab65d310fce12e804b2c447", "message": "adjust code style", "committedDate": "2020-10-09T03:47:20Z", "type": "forcePushed"}]}