{"pr_number": 5110, "pr_title": "add support for test of JoinSpecfication", "pr_createdAt": "2020-04-08T12:04:56Z", "pr_url": "https://github.com/apache/shardingsphere/pull/5110", "timeline": [{"oid": "09e340c7a8df7edf8233b50308d037649c07ead7", "url": "https://github.com/apache/shardingsphere/commit/09e340c7a8df7edf8233b50308d037649c07ead7", "message": "add support for test of JoinSpecfication", "committedDate": "2020-04-08T11:02:58Z", "type": "commit"}, {"oid": "4b823ea2cbacebcae560ae27198efe76993a31d3", "url": "https://github.com/apache/shardingsphere/commit/4b823ea2cbacebcae560ae27198efe76993a31d3", "message": "fix", "committedDate": "2020-04-08T12:01:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwMzgzMw==", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406103833", "bodyText": "Why is the expr visited twice?", "author": "tristaZero", "createdAt": "2020-04-09T10:17:17Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -551,16 +551,21 @@ public ASTNode visitJoinSpecification(final JoinSpecificationContext ctx) {\n         if (null != ctx.expr()) {\n             ASTNode expr = visit(ctx.expr());\n             if (expr instanceof PredicateSegment) {\n-                PredicateSegment predicate = (PredicateSegment) expr;\n-                result.setPredicateSegment(predicate);\n+                result.setPredicateSegment((PredicateSegment) expr);\n+                AndPredicate andPredicate = new AndPredicate();\n+                andPredicate.getPredicates().add((PredicateSegment) expr);", "originalCommit": "4b823ea2cbacebcae560ae27198efe76993a31d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzMjEzNw==", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406132137", "bodyText": "In order to ensure that the previous integration test can pass, in the past, only tables with only one condition was taken, but it may be multiple conditions", "author": "jingshanglu", "createdAt": "2020-04-09T11:14:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwMzgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzMjk0NA==", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406132944", "bodyText": "Not only test code,it's related to the business code, I can't change it", "author": "jingshanglu", "createdAt": "2020-04-09T11:16:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwMzgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3NTkwNg==", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406575906", "bodyText": "If so, could we reomve private PredicateSegment predicateSegment;?", "author": "tristaZero", "createdAt": "2020-04-10T02:37:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwMzgzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwODU0Mw==", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406108543", "bodyText": "Those functions are the same as these in WhereClauseAssert. My suggestion is to extract PredicatesAssert, which will be used by WhereClauseAssert and this one.", "author": "tristaZero", "createdAt": "2020-04-09T10:26:24Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/JoinSpecificationAssert.java", "diffHunk": "@@ -37,5 +64,142 @@\n      * @param expected expected JoinSpecification\n      */\n     public static void assertIs(final SQLCaseAssertContext assertContext, final JoinSpecificationSegment actual, final ExpectedJoinSpecification expected) {\n+        assertThat(assertContext.getText(\"startindex assert error\"), actual.getStartIndex(), is(expected.getStartIndex()));\n+        assertThat(assertContext.getText(\"stopindex assert error\"), actual.getStopIndex(), is(expected.getStopIndex()));\n+        assertAndPredicates(assertContext, actual.getAndPredicates(), expected.getAndPredicates());\n+    \n+    }\n+    \n+    private static void assertAndPredicates(final SQLCaseAssertContext assertContext, final Collection<AndPredicate> actual, final List<ExpectedAndPredicate> expected) {", "originalCommit": "4b823ea2cbacebcae560ae27198efe76993a31d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzNDExNA==", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406134114", "bodyText": "Ok.", "author": "jingshanglu", "createdAt": "2020-04-09T11:19:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwODU0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwOTU3OQ==", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406109579", "bodyText": "This sentence has the same meaning as line 58, please delete it.", "author": "tristaZero", "createdAt": "2020-04-09T10:28:20Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/table/JoinTableAssert.java", "diffHunk": "@@ -44,14 +46,21 @@\n      */\n     public static void assertIs(final SQLCaseAssertContext assertContext, final JoinedTableSegment actual, final ExpectedJoinTable expected) {\n         TableFactorAssert.assertIs(assertContext, actual.getTableFactor(), expected.getTableFactor());\n-        JoinSpecificationAssert.assertIs(assertContext, actual.getJoinSpecification(), expected.getJoinSpecification());\n+        if (null != actual.getJoinSpecification()) {\n+            JoinSpecificationAssert.assertIs(assertContext, actual.getJoinSpecification(), expected.getJoinSpecification());\n+        }\n     }\n     \n     public static void assertIs(final SQLCaseAssertContext assertContext, final List<JoinedTableSegment> actual, final List<ExpectedJoinTable> expected) {\n         assertThat(assertContext.getText(\"JoinTable size assert error\"), actual.size(), is(null == expected ? 0 : expected.size()));\n         for (int i = 0; i < actual.size(); i++) {\n             TableFactorAssert.assertIs(assertContext, actual.get(i).getTableFactor(), expected.get(i).getTableFactor());\n-            JoinSpecificationAssert.assertIs(assertContext, actual.get(i).getJoinSpecification(), expected.get(i).getJoinSpecification());\n+            if (null != expected.get(i).getJoinSpecification()) {\n+                assertNotNull(assertContext.getText(\"Actual JoinSpecification segment should exist.\"), actual.get(i).getJoinSpecification());\n+                JoinSpecificationAssert.assertIs(assertContext, actual.get(i).getJoinSpecification(), expected.get(i).getJoinSpecification());\n+            } else {\n+                assertNull(assertContext.getText(\"Actual JoinSpecification segment should not exist.\"), actual.get(i).getJoinSpecification());", "originalCommit": "4b823ea2cbacebcae560ae27198efe76993a31d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEyODI2NA==", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406128264", "bodyText": "Not the same, there is a similar use in file shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/statement/dml/impl/SelectStatementAssert.java", "author": "jingshanglu", "createdAt": "2020-04-09T11:06:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwOTU3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjExMDg2Nw==", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406110867", "bodyText": "Where are these SQL Cases?", "author": "tristaZero", "createdAt": "2020-04-09T10:30:41Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/resources/sql/dml/select-or.xml", "diffHunk": "@@ -291,6 +291,26 @@\n                 <table-factor>\n                     <table name=\"t_order_item\" alias=\"i\" start-index=\"31\" stop-index=\"42\" />\n                 </table-factor>\n+                <joinSpecification>", "originalCommit": "4b823ea2cbacebcae560ae27198efe76993a31d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEyNDQxNQ==", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406124415", "bodyText": "In sharding-sql-test/src/main/resources/sql/supported/dml/select-or.xml", "author": "jingshanglu", "createdAt": "2020-04-09T10:58:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjExMDg2Nw=="}], "type": "inlineReview"}, {"oid": "3316905f3e5392254801ab081a4548f5def22a2d", "url": "https://github.com/apache/shardingsphere/commit/3316905f3e5392254801ab081a4548f5def22a2d", "message": "extract PredicatesAssert", "committedDate": "2020-04-09T12:34:44Z", "type": "commit"}]}