{"pr_number": 4123, "pr_title": "Add MySQL DDLStatement antlr visitor", "pr_createdAt": "2020-01-31T07:07:08Z", "pr_url": "https://github.com/apache/shardingsphere/pull/4123", "timeline": [{"oid": "b4d5b4e373edaf7013724e31a8a2dd208dd918e1", "url": "https://github.com/apache/shardingsphere/commit/b4d5b4e373edaf7013724e31a8a2dd208dd918e1", "message": "mysql ddlstatement visitor", "committedDate": "2020-01-31T06:37:54Z", "type": "commit"}, {"oid": "e2e99f14ffa0b9f2834a8fa30bdee9ad6347c845", "url": "https://github.com/apache/shardingsphere/commit/e2e99f14ffa0b9f2834a8fa30bdee9ad6347c845", "message": "mysql ddlstatement visitor", "committedDate": "2020-01-31T06:42:08Z", "type": "commit"}, {"oid": "2c803ee5d66e3253097ee522dd930e1c880ffc1b", "url": "https://github.com/apache/shardingsphere/commit/2c803ee5d66e3253097ee522dd930e1c880ffc1b", "message": "mysql ddlstatement visitor", "committedDate": "2020-01-31T06:42:23Z", "type": "commit"}, {"oid": "fd5e4be60bc48234e11e353820a08473445ddccc", "url": "https://github.com/apache/shardingsphere/commit/fd5e4be60bc48234e11e353820a08473445ddccc", "message": "mysql ddlstatement visitor", "committedDate": "2020-01-31T06:43:56Z", "type": "commit"}, {"oid": "c4581f92c15f0c09bf2bb85e3d5f7c766695761c", "url": "https://github.com/apache/shardingsphere/commit/c4581f92c15f0c09bf2bb85e3d5f7c766695761c", "message": "mysql ddlstatement visitor", "committedDate": "2020-01-31T06:45:30Z", "type": "commit"}, {"oid": "25c8c7c8d2475bb6bc226a5ec5d13dafdd1e4b55", "url": "https://github.com/apache/shardingsphere/commit/25c8c7c8d2475bb6bc226a5ec5d13dafdd1e4b55", "message": "mysql ddlstatement visitor", "committedDate": "2020-01-31T06:46:05Z", "type": "commit"}, {"oid": "e94f521c9cdb598a76fe1dd2700ea32ec7460aec", "url": "https://github.com/apache/shardingsphere/commit/e94f521c9cdb598a76fe1dd2700ea32ec7460aec", "message": "mysql ddlstatement visitor", "committedDate": "2020-01-31T06:47:26Z", "type": "commit"}, {"oid": "edad872f80008b123fb32beb11ea131f2978391a", "url": "https://github.com/apache/shardingsphere/commit/edad872f80008b123fb32beb11ea131f2978391a", "message": "mysql ddlstatement visitor", "committedDate": "2020-01-31T06:48:30Z", "type": "commit"}, {"oid": "680a6b4a27d1350a8f5a49da7530fd1c129c5955", "url": "https://github.com/apache/shardingsphere/commit/680a6b4a27d1350a8f5a49da7530fd1c129c5955", "message": "mysql ddlstatement visitor", "committedDate": "2020-01-31T06:52:40Z", "type": "commit"}, {"oid": "e275773531fa560eb1a9a520b5dc66bb4944fa93", "url": "https://github.com/apache/shardingsphere/commit/e275773531fa560eb1a9a520b5dc66bb4944fa93", "message": "mysql ddlstatement visitor", "committedDate": "2020-01-31T07:00:55Z", "type": "commit"}, {"oid": "a34179b37ddeb6a1b41d9578398724669f4565a9", "url": "https://github.com/apache/shardingsphere/commit/a34179b37ddeb6a1b41d9578398724669f4565a9", "message": "Merge branch 'master' of github.com:SteNicholas/incubator-shardingsphere into mysql-statement-visitor\n\n\u0001 Conflicts:\n\u0001\tshardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "committedDate": "2020-01-31T07:24:39Z", "type": "commit"}, {"oid": "5731197d0ccd63fa8d0d08c4f69f2144a5e6ccb2", "url": "https://github.com/apache/shardingsphere/commit/5731197d0ccd63fa8d0d08c4f69f2144a5e6ccb2", "message": "mysql ddlstatement visitor", "committedDate": "2020-01-31T07:30:15Z", "type": "commit"}, {"oid": "e501f33022d016305a9d3e581cb7ff891ab1d0a8", "url": "https://github.com/apache/shardingsphere/commit/e501f33022d016305a9d3e581cb7ff891ab1d0a8", "message": "mysql ddlstatement visitor", "committedDate": "2020-01-31T07:32:20Z", "type": "commit"}, {"oid": "09926d5902f984f45b71cf77ee89a7c681f6c969", "url": "https://github.com/apache/shardingsphere/commit/09926d5902f984f45b71cf77ee89a7c681f6c969", "message": "Merge branch 'master' of github.com:SteNicholas/incubator-shardingsphere into mysql-statement-visitor", "committedDate": "2020-01-31T13:14:40Z", "type": "commit"}, {"oid": "a8c2cfad37366e6ba05debfa6e21f5728bb29f7e", "url": "https://github.com/apache/shardingsphere/commit/a8c2cfad37366e6ba05debfa6e21f5728bb29f7e", "message": "mysql spatial function", "committedDate": "2020-01-31T13:55:57Z", "type": "commit"}, {"oid": "96b2f39695e13177964edf5534f87463e90efb0e", "url": "https://github.com/apache/shardingsphere/commit/96b2f39695e13177964edf5534f87463e90efb0e", "message": "mysql statement visitor", "committedDate": "2020-01-31T14:44:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NjY4OA==", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373756688", "bodyText": "META-INF/parsing-rule-definition/mysql/sql-statement-rule-definition.xml tells us there is no need to add IndexSegment to CreateIndexStatement when DB is MySQL.", "author": "tristaZero", "createdAt": "2020-02-01T04:19:33Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -190,6 +227,135 @@ public ASTNode visitCreateUser(final CreateUserContext ctx) {\n     }\n \n     // DDLStatement.g4\n+    @Override\n+    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n+        CreateTableStatement result = new CreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        CreateDefinitionClause_Context createDefinitionClause = ctx.createDefinitionClause_();\n+        if (null != createDefinitionClause) {\n+            for (CreateDefinition_Context createDefinition : createDefinitionClause.createDefinitions_().createDefinition_()) {\n+                ColumnDefinitionContext columnDefinition = createDefinition.columnDefinition();\n+                if (null != columnDefinition) {\n+                    ColumnDefinitionSegment columnDefinitionSegment = createColumnDefinitionSegment(columnDefinition, result);\n+                    result.getColumnDefinitions().add(columnDefinitionSegment);\n+                    result.getAllSQLSegments().add(columnDefinitionSegment);\n+                }\n+                ConstraintDefinition_Context constraintDefinition = createDefinition.constraintDefinition_();\n+                ForeignKeyOption_Context foreignKeyOption = null == constraintDefinition ? null : constraintDefinition.foreignKeyOption_();\n+                if (null != foreignKeyOption) {\n+                    result.getAllSQLSegments().add((TableSegment) visit(foreignKeyOption.referenceDefinition_().tableName()));\n+                }\n+            }\n+        }\n+        CreateLikeClause_Context createLikeClause = ctx.createLikeClause_();\n+        if (null != createLikeClause) {\n+            result.getAllSQLSegments().add((TableSegment) visit(createLikeClause));\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitAlterTable(final AlterTableContext ctx) {\n+        AlterTableStatement result = new AlterTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        if (null != ctx.alterDefinitionClause_()) {\n+            for (AlterSpecification_Context alterSpecification : ctx.alterDefinitionClause_().alterSpecification_()) {\n+                AddColumnSpecificationContext addColumnSpecification = alterSpecification.addColumnSpecification();\n+                if (null != addColumnSpecification) {\n+                    List<ColumnDefinitionContext> columnDefinitions = addColumnSpecification.columnDefinition();\n+                    ColumnDefinitionSegment columnDefinitionSegment = null;\n+                    for (ColumnDefinitionContext columnDefinition : columnDefinitions) {\n+                        columnDefinitionSegment = createColumnDefinitionSegment(columnDefinition, result);\n+                        result.getAddedColumnDefinitions().add(columnDefinitionSegment);\n+                        result.getAllSQLSegments().add(columnDefinitionSegment);\n+                    }\n+                    createColumnPositionSegment(addColumnSpecification.firstOrAfterColumn(), columnDefinitionSegment, result);\n+                }\n+                AddConstraintSpecificationContext addConstraintSpecification = alterSpecification.addConstraintSpecification();\n+                ForeignKeyOption_Context foreignKeyOption = null == addConstraintSpecification\n+                        ? null : addConstraintSpecification.constraintDefinition_().foreignKeyOption_();\n+                if (null != foreignKeyOption) {\n+                    result.getAllSQLSegments().add((TableSegment) visit(foreignKeyOption.referenceDefinition_().tableName()));\n+                }\n+                ChangeColumnSpecificationContext changeColumnSpecification = alterSpecification.changeColumnSpecification();\n+                if (null != changeColumnSpecification) {\n+                    createColumnPositionSegment(changeColumnSpecification.firstOrAfterColumn(),\n+                            createColumnDefinitionSegment(changeColumnSpecification.columnDefinition(), result), result);\n+                }\n+                DropColumnSpecificationContext dropColumnSpecification = alterSpecification.dropColumnSpecification();\n+                if (null != dropColumnSpecification) {\n+                    result.getDroppedColumnNames().add(((ColumnSegment) visit(dropColumnSpecification)).getName());\n+                }\n+                ModifyColumnSpecificationContext modifyColumnSpecification = alterSpecification.modifyColumnSpecification();\n+                if (null != modifyColumnSpecification) {\n+                    createColumnPositionSegment(modifyColumnSpecification.firstOrAfterColumn(),\n+                            createColumnDefinitionSegment(modifyColumnSpecification.columnDefinition(), result), result);\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitDropTable(final DropTableContext ctx) {\n+        DropTableStatement result = new DropTableStatement();\n+        ListValue<TableSegment> tables = (ListValue<TableSegment>) visit(ctx.tableNames());\n+        result.getTables().addAll(tables.getValues());\n+        result.getAllSQLSegments().addAll(tables.getValues());\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitTruncateTable(final TruncateTableContext ctx) {\n+        DDLStatement result = new DDLStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.getAllSQLSegments().add(table);\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitCreateIndex(final CreateIndexContext ctx) {\n+        CreateIndexStatement result = new CreateIndexStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        IndexSegment index = (IndexSegment) visit(ctx.indexName());", "originalCommit": "96b2f39695e13177964edf5534f87463e90efb0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3MTc3Nw==", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373771777", "bodyText": "@tristaZero Okay, I would like to remove IndexSegment.", "author": "SteNicholas", "createdAt": "2020-02-01T10:13:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NjY4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NjY5NA==", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373756694", "bodyText": "META-INF/parsing-rule-definition/mysql/sql-statement-rule-definition.xml tells us there is no need to add IndexSegment to CreateIndexStatement when DB is MySQL.", "author": "tristaZero", "createdAt": "2020-02-01T04:19:47Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -190,6 +227,135 @@ public ASTNode visitCreateUser(final CreateUserContext ctx) {\n     }\n \n     // DDLStatement.g4\n+    @Override\n+    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n+        CreateTableStatement result = new CreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        CreateDefinitionClause_Context createDefinitionClause = ctx.createDefinitionClause_();\n+        if (null != createDefinitionClause) {\n+            for (CreateDefinition_Context createDefinition : createDefinitionClause.createDefinitions_().createDefinition_()) {\n+                ColumnDefinitionContext columnDefinition = createDefinition.columnDefinition();\n+                if (null != columnDefinition) {\n+                    ColumnDefinitionSegment columnDefinitionSegment = createColumnDefinitionSegment(columnDefinition, result);\n+                    result.getColumnDefinitions().add(columnDefinitionSegment);\n+                    result.getAllSQLSegments().add(columnDefinitionSegment);\n+                }\n+                ConstraintDefinition_Context constraintDefinition = createDefinition.constraintDefinition_();\n+                ForeignKeyOption_Context foreignKeyOption = null == constraintDefinition ? null : constraintDefinition.foreignKeyOption_();\n+                if (null != foreignKeyOption) {\n+                    result.getAllSQLSegments().add((TableSegment) visit(foreignKeyOption.referenceDefinition_().tableName()));\n+                }\n+            }\n+        }\n+        CreateLikeClause_Context createLikeClause = ctx.createLikeClause_();\n+        if (null != createLikeClause) {\n+            result.getAllSQLSegments().add((TableSegment) visit(createLikeClause));\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitAlterTable(final AlterTableContext ctx) {\n+        AlterTableStatement result = new AlterTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        if (null != ctx.alterDefinitionClause_()) {\n+            for (AlterSpecification_Context alterSpecification : ctx.alterDefinitionClause_().alterSpecification_()) {\n+                AddColumnSpecificationContext addColumnSpecification = alterSpecification.addColumnSpecification();\n+                if (null != addColumnSpecification) {\n+                    List<ColumnDefinitionContext> columnDefinitions = addColumnSpecification.columnDefinition();\n+                    ColumnDefinitionSegment columnDefinitionSegment = null;\n+                    for (ColumnDefinitionContext columnDefinition : columnDefinitions) {\n+                        columnDefinitionSegment = createColumnDefinitionSegment(columnDefinition, result);\n+                        result.getAddedColumnDefinitions().add(columnDefinitionSegment);\n+                        result.getAllSQLSegments().add(columnDefinitionSegment);\n+                    }\n+                    createColumnPositionSegment(addColumnSpecification.firstOrAfterColumn(), columnDefinitionSegment, result);\n+                }\n+                AddConstraintSpecificationContext addConstraintSpecification = alterSpecification.addConstraintSpecification();\n+                ForeignKeyOption_Context foreignKeyOption = null == addConstraintSpecification\n+                        ? null : addConstraintSpecification.constraintDefinition_().foreignKeyOption_();\n+                if (null != foreignKeyOption) {\n+                    result.getAllSQLSegments().add((TableSegment) visit(foreignKeyOption.referenceDefinition_().tableName()));\n+                }\n+                ChangeColumnSpecificationContext changeColumnSpecification = alterSpecification.changeColumnSpecification();\n+                if (null != changeColumnSpecification) {\n+                    createColumnPositionSegment(changeColumnSpecification.firstOrAfterColumn(),\n+                            createColumnDefinitionSegment(changeColumnSpecification.columnDefinition(), result), result);\n+                }\n+                DropColumnSpecificationContext dropColumnSpecification = alterSpecification.dropColumnSpecification();\n+                if (null != dropColumnSpecification) {\n+                    result.getDroppedColumnNames().add(((ColumnSegment) visit(dropColumnSpecification)).getName());\n+                }\n+                ModifyColumnSpecificationContext modifyColumnSpecification = alterSpecification.modifyColumnSpecification();\n+                if (null != modifyColumnSpecification) {\n+                    createColumnPositionSegment(modifyColumnSpecification.firstOrAfterColumn(),\n+                            createColumnDefinitionSegment(modifyColumnSpecification.columnDefinition(), result), result);\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitDropTable(final DropTableContext ctx) {\n+        DropTableStatement result = new DropTableStatement();\n+        ListValue<TableSegment> tables = (ListValue<TableSegment>) visit(ctx.tableNames());\n+        result.getTables().addAll(tables.getValues());\n+        result.getAllSQLSegments().addAll(tables.getValues());\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitTruncateTable(final TruncateTableContext ctx) {\n+        DDLStatement result = new DDLStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.getAllSQLSegments().add(table);\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitCreateIndex(final CreateIndexContext ctx) {\n+        CreateIndexStatement result = new CreateIndexStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        IndexSegment index = (IndexSegment) visit(ctx.indexName());\n+        result.setIndex(index);\n+        result.getAllSQLSegments().add(index);\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitDropIndex(final DropIndexContext ctx) {\n+        DropIndexStatement result = new DropIndexStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        IndexSegment index = (IndexSegment) visit(ctx.indexName());", "originalCommit": "96b2f39695e13177964edf5534f87463e90efb0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3MTc5MQ==", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373771791", "bodyText": "@tristaZero Okay, I would like to remove IndexSegment.", "author": "SteNicholas", "createdAt": "2020-02-01T10:13:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NjY5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NzUxMQ==", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373757511", "bodyText": "IMO, it is better to put it to visitCreateDefinitionClause(). Parent visior has no reposibility to visit its child visitor, and just gets the result returned by its child.", "author": "tristaZero", "createdAt": "2020-02-01T04:37:22Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -190,6 +227,135 @@ public ASTNode visitCreateUser(final CreateUserContext ctx) {\n     }\n \n     // DDLStatement.g4\n+    @Override\n+    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n+        CreateTableStatement result = new CreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        CreateDefinitionClause_Context createDefinitionClause = ctx.createDefinitionClause_();\n+        if (null != createDefinitionClause) {", "originalCommit": "96b2f39695e13177964edf5534f87463e90efb0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3NDMyNg==", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373774326", "bodyText": "@tristaZero No, there is no any statement match for visitCreateDefinitionClause() result.", "author": "SteNicholas", "createdAt": "2020-02-01T11:13:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NzUxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3ODY3NA==", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373778674", "bodyText": "@SteNicholas Could get ListValue<ColumnDefinitionSegment> from visitCreateDefinitionClause() and add it to columnDefinitions in CreateTableStatement", "author": "tristaZero", "createdAt": "2020-02-01T12:55:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NzUxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1Nzc4NQ==", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373757785", "bodyText": "The above suggestion applied to the following visitors. Could you review those rather long visitors for optimizing?", "author": "tristaZero", "createdAt": "2020-02-01T04:44:59Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -190,6 +227,135 @@ public ASTNode visitCreateUser(final CreateUserContext ctx) {\n     }\n \n     // DDLStatement.g4\n+    @Override\n+    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n+        CreateTableStatement result = new CreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        CreateDefinitionClause_Context createDefinitionClause = ctx.createDefinitionClause_();\n+        if (null != createDefinitionClause) {\n+            for (CreateDefinition_Context createDefinition : createDefinitionClause.createDefinitions_().createDefinition_()) {\n+                ColumnDefinitionContext columnDefinition = createDefinition.columnDefinition();\n+                if (null != columnDefinition) {\n+                    ColumnDefinitionSegment columnDefinitionSegment = createColumnDefinitionSegment(columnDefinition, result);\n+                    result.getColumnDefinitions().add(columnDefinitionSegment);\n+                    result.getAllSQLSegments().add(columnDefinitionSegment);\n+                }\n+                ConstraintDefinition_Context constraintDefinition = createDefinition.constraintDefinition_();\n+                ForeignKeyOption_Context foreignKeyOption = null == constraintDefinition ? null : constraintDefinition.foreignKeyOption_();\n+                if (null != foreignKeyOption) {\n+                    result.getAllSQLSegments().add((TableSegment) visit(foreignKeyOption.referenceDefinition_().tableName()));\n+                }\n+            }\n+        }\n+        CreateLikeClause_Context createLikeClause = ctx.createLikeClause_();\n+        if (null != createLikeClause) {\n+            result.getAllSQLSegments().add((TableSegment) visit(createLikeClause));\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitAlterTable(final AlterTableContext ctx) {\n+        AlterTableStatement result = new AlterTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        if (null != ctx.alterDefinitionClause_()) {", "originalCommit": "96b2f39695e13177964edf5534f87463e90efb0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3NDQwNw==", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373774407", "bodyText": "@tristaZero I knew your meaning. I have already previously optimized for the visitor, but no any statement contains TableSegment, cause that no match for visit**().", "author": "SteNicholas", "createdAt": "2020-02-01T11:14:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1Nzc4NQ=="}], "type": "inlineReview"}, {"oid": "fdb13e229120a044c03ea6921cee9dceb05ae834", "url": "https://github.com/apache/shardingsphere/commit/fdb13e229120a044c03ea6921cee9dceb05ae834", "message": "Merge branches 'master' and 'mysql-statement-visitor' of github.com:SteNicholas/incubator-shardingsphere into mysql-statement-visitor\n\n\u0001 Conflicts:\n\u0001\tshardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "committedDate": "2020-02-01T09:10:09Z", "type": "commit"}, {"oid": "32356e4a0a27dec836875c4ed5dc53abdcf1b83c", "url": "https://github.com/apache/shardingsphere/commit/32356e4a0a27dec836875c4ed5dc53abdcf1b83c", "message": "mysql statement visitor", "committedDate": "2020-02-01T11:09:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3ODk0Mg==", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373778942", "bodyText": "To create visitReferenceDefinition_() is better. Short and simple function always make peple easy to read. Other than, one function is supposed to focus on itself, not include its child.", "author": "tristaZero", "createdAt": "2020-02-01T13:02:12Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -871,6 +1051,53 @@ private ASTNode createExpressionSegment(final ASTNode astNode, final ParserRuleC\n         return astNode;\n     }\n     \n+    private ColumnDefinitionSegment createColumnDefinitionSegment(final ColumnDefinitionContext columnDefinition, final DDLStatement statement) {\n+        ColumnSegment column = (ColumnSegment) visit(columnDefinition.columnName());\n+        LiteralValue dataType = (LiteralValue) visit(columnDefinition.dataType().dataTypeName_());\n+        boolean isPrimaryKey = false;\n+        for (InlineDataType_Context inlineDataType : columnDefinition.inlineDataType_()) {\n+            CommonDataTypeOption_Context commonDataTypeOption = inlineDataType.commonDataTypeOption_();\n+            if (null != commonDataTypeOption) {\n+                if (null != commonDataTypeOption.primaryKey()) {\n+                    isPrimaryKey = true;\n+                }\n+                if (null != commonDataTypeOption.referenceDefinition_()) {\n+                    statement.getAllSQLSegments().add((TableSegment) visit(commonDataTypeOption.referenceDefinition_().tableName()));\n+                }\n+            }\n+        }\n+        for (GeneratedDataType_Context generatedDataType: columnDefinition.generatedDataType_()) {\n+            CommonDataTypeOption_Context commonDataTypeOption = generatedDataType.commonDataTypeOption_();\n+            if (null != commonDataTypeOption) {\n+                if (null != commonDataTypeOption.primaryKey()) {\n+                    isPrimaryKey = true;\n+                }\n+                if (null != commonDataTypeOption.referenceDefinition_()) {\n+                    statement.getAllSQLSegments().add((TableSegment) visit(commonDataTypeOption.referenceDefinition_().tableName()));", "originalCommit": "32356e4a0a27dec836875c4ed5dc53abdcf1b83c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3ODk3MA==", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373778970", "bodyText": "Could give more review on other long funcions?", "author": "tristaZero", "createdAt": "2020-02-01T13:02:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3ODk0Mg=="}], "type": "inlineReview"}]}