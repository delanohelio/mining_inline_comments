{"pr_number": 1464, "pr_title": "improve bootstrap and configuration documentation", "pr_createdAt": "2020-07-08T11:21:45Z", "pr_url": "https://github.com/apache/camel-quarkus/pull/1464", "timeline": [{"oid": "0bbc649969b19f357e85a1989de714eece6adea2", "url": "https://github.com/apache/camel-quarkus/commit/0bbc649969b19f357e85a1989de714eece6adea2", "message": "improve bootstrap and configuration documentation", "committedDate": "2020-07-08T11:21:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3MzQ1Nw==", "url": "https://github.com/apache/camel-quarkus/pull/1464#discussion_r451473457", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The https://quarkus.io/guides/cdi-reference[CDI] APIs can be used to configure the Camel behavior as example, to configure the `LogComponent` you can write a code like:\n          \n          \n            \n            The https://quarkus.io/guides/cdi-reference[CDI] APIs can be used to configure various aspects of Camel behavior. For example, to configure the `LogComponent` you can write a code like:", "author": "jamesnetherton", "createdAt": "2020-07-08T11:32:26Z", "path": "docs/modules/ROOT/pages/user-guide/bootstrap.adoc", "diffHunk": "@@ -1,12 +1,15 @@\n-= Bootstrap Camel Quarkus\n+= Bootstrap and configuration\n \n Camel Quarkus automatically configures and deploys a Camel Context bean which by default is started/stopped according to\n the Quarkus Application lifecycle. The configuration step happens at build time during Quarkus' augmentation phase and\n it is driven by the Camel Quarkus extensions which can be tuned using Camel Quarkus specific `camel.quarkus.*`\n properties. After the configuration is done, a minimal Camel Runtime is assembled and started at\n-`https://quarkus.io/guides/writing-extensions#bootstrap-three-phases[RUNTIME_INIT]` time.\n-At that point, any additional configuration should be done using CDI. Below is an example showing how to configure a\n-Camel Component:\n+https://quarkus.io/guides/writing-extensions#bootstrap-three-phases[RUNTIME_INIT] time.\n+\n+\n+== CDI\n+\n+The https://quarkus.io/guides/cdi-reference[CDI] APIs can be used to configure the Camel behavior as example, to configure the `LogComponent` you can write a code like:", "originalCommit": "0bbc649969b19f357e85a1989de714eece6adea2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3NDk2MQ==", "url": "https://github.com/apache/camel-quarkus/pull/1464#discussion_r451474961", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <1> Camel uses the uri scheme to look-up component from its registry wich requires to add the `@Named` annotation to the method otherwise the CDI container would create an anonymous bean and Camel would not be able to look it up.  \n          \n          \n            \n            <1> Camel uses the component URI scheme to look-up components from its registry, this requires you to add the `@Named` annotation to the method, otherwise the CDI container would create an anonymous bean and Camel would not be able to look it up.", "author": "jamesnetherton", "createdAt": "2020-07-08T11:35:29Z", "path": "docs/modules/ROOT/pages/user-guide/bootstrap.adoc", "diffHunk": "@@ -34,16 +37,68 @@ public class Configurations {\n     }\n }\n ----\n+<1> Camel uses the uri scheme to look-up component from its registry wich requires to add the `@Named` annotation to the method otherwise the CDI container would create an anonymous bean and Camel would not be able to look it up.  ", "originalCommit": "0bbc649969b19f357e85a1989de714eece6adea2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3NTMxNA==", "url": "https://github.com/apache/camel-quarkus/pull/1464#discussion_r451475314", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Because in Camel Quarkus the Camel components are discovered during the Quarkus' augmentation phase, producing a new component as shown in the example above would invalidate any optimization that may have been made.\n          \n          \n            \n            In Camel Quarkus the Camel components are discovered during the augmentation phase, producing a new component as shown in the example above would invalidate any optimization that may have been made.", "author": "jamesnetherton", "createdAt": "2020-07-08T11:36:10Z", "path": "docs/modules/ROOT/pages/user-guide/bootstrap.adoc", "diffHunk": "@@ -34,16 +37,68 @@ public class Configurations {\n     }\n }\n ----\n+<1> Camel uses the uri scheme to look-up component from its registry wich requires to add the `@Named` annotation to the method otherwise the CDI container would create an anonymous bean and Camel would not be able to look it up.  \n+\n+Because in Camel Quarkus the Camel components are discovered during the Quarkus' augmentation phase, producing a new component as shown in the example above would invalidate any optimization that may have been made.", "originalCommit": "0bbc649969b19f357e85a1989de714eece6adea2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3NTU2OQ==", "url": "https://github.com/apache/camel-quarkus/pull/1464#discussion_r451475569", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            As a better alternative you can use `@Inject` to obtain an instance of a component automatically created by Camel or you can observe one of the https://github.com/apache/camel-quarkus/tree/master/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/events[events] fired by Camel Quarkus as shown in the the following examplein in which we use `@Observes` to be notified about components added to the Camel Context:\n          \n          \n            \n            As a better alternative you can use `@Inject` to obtain an instance of a component automatically created by Camel or you can observe one of the https://github.com/apache/camel-quarkus/tree/master/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/events[events] fired by Camel Quarkus as shown in the the following example, in which we use `@Observes` to be notified about components added to the Camel Context:", "author": "jamesnetherton", "createdAt": "2020-07-08T11:36:41Z", "path": "docs/modules/ROOT/pages/user-guide/bootstrap.adoc", "diffHunk": "@@ -34,16 +37,68 @@ public class Configurations {\n     }\n }\n ----\n+<1> Camel uses the uri scheme to look-up component from its registry wich requires to add the `@Named` annotation to the method otherwise the CDI container would create an anonymous bean and Camel would not be able to look it up.  \n+\n+Because in Camel Quarkus the Camel components are discovered during the Quarkus' augmentation phase, producing a new component as shown in the example above would invalidate any optimization that may have been made.\n+\n+As a better alternative you can use `@Inject` to obtain an instance of a component automatically created by Camel or you can observe one of the https://github.com/apache/camel-quarkus/tree/master/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/events[events] fired by Camel Quarkus as shown in the the following examplein in which we use `@Observes` to be notified about components added to the Camel Context:", "originalCommit": "0bbc649969b19f357e85a1989de714eece6adea2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3NTk3Mw==", "url": "https://github.com/apache/camel-quarkus/pull/1464#discussion_r451475973", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In addition to support for configuring Camel through properties, `camel-quarkus-main` allows to use conventions to configure the Camel behavior as example, if there a single `ExchangeFormatter` instance in the CDI container, then it will automatically wire that bean to the `LogComponent`.\n          \n          \n            \n            In addition to support configuring Camel through properties, `camel-quarkus-main` allows you to use conventions to configure the Camel behavior. For example, if there is a single `ExchangeFormatter` instance in the CDI container, then it will automatically wire that bean to the `LogComponent`.", "author": "jamesnetherton", "createdAt": "2020-07-08T11:37:28Z", "path": "docs/modules/ROOT/pages/user-guide/bootstrap.adoc", "diffHunk": "@@ -34,16 +37,68 @@ public class Configurations {\n     }\n }\n ----\n+<1> Camel uses the uri scheme to look-up component from its registry wich requires to add the `@Named` annotation to the method otherwise the CDI container would create an anonymous bean and Camel would not be able to look it up.  \n+\n+Because in Camel Quarkus the Camel components are discovered during the Quarkus' augmentation phase, producing a new component as shown in the example above would invalidate any optimization that may have been made.\n+\n+As a better alternative you can use `@Inject` to obtain an instance of a component automatically created by Camel or you can observe one of the https://github.com/apache/camel-quarkus/tree/master/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/events[events] fired by Camel Quarkus as shown in the the following examplein in which we use `@Observes` to be notified about components added to the Camel Context:\n+\n+[source,java]\n+----\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import org.apache.camel.quarkus.core.events.ComponentAddEvent;\n+import org.apache.camel.component.log.LogComponent;\n+\n+@ApplicationScoped\n+public static class EventHandler {\n+    public void onComponentAdd(@Observes ComponentAddEvent event) {\n+        if (event.getComponent() instanceof LogComponent) {\n+            // do something with the log component\n+        }\n+    }\n+}\n+----\n+\n+== Camel Main\n \n To configure components and other aspects of Apache Camel through properties, you can add the `camel-quarkus-main`\n extension which brings functionalities from https://camel.apache.org/components/latest/others/main.html[Apache Camel\n Main] to Camel Quarkus.\n \n-In the example below, we perform the same configuration of the Log component via properties like we did above using Java:\n+In the example below, we apply the same configuration as the one from the Java example above by using properties:\n \n [source,properties]\n ----\n camel.component.log.exchange-formtatter = #class:org.apache.camel.support.processor.DefaultExchangeFormatter\n camel.component.log.exchange-formtatter.show-exchange-pattern = false\n camel.component.log.exchange-formtatter.show-body-type = false\n ----\n+\n+In addition to support for configuring Camel through properties, `camel-quarkus-main` allows to use conventions to configure the Camel behavior as example, if there a single `ExchangeFormatter` instance in the CDI container, then it will automatically wire that bean to the `LogComponent`.", "originalCommit": "0bbc649969b19f357e85a1989de714eece6adea2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3NjExNg==", "url": "https://github.com/apache/camel-quarkus/pull/1464#discussion_r451476116", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It is recommended to perform very little loginc in the Java Main.\n          \n          \n            \n            It is recommended to perform very little logic in the Java Main.", "author": "jamesnetherton", "createdAt": "2020-07-08T11:37:47Z", "path": "docs/modules/ROOT/pages/user-guide/bootstrap.adoc", "diffHunk": "@@ -34,16 +37,68 @@ public class Configurations {\n     }\n }\n ----\n+<1> Camel uses the uri scheme to look-up component from its registry wich requires to add the `@Named` annotation to the method otherwise the CDI container would create an anonymous bean and Camel would not be able to look it up.  \n+\n+Because in Camel Quarkus the Camel components are discovered during the Quarkus' augmentation phase, producing a new component as shown in the example above would invalidate any optimization that may have been made.\n+\n+As a better alternative you can use `@Inject` to obtain an instance of a component automatically created by Camel or you can observe one of the https://github.com/apache/camel-quarkus/tree/master/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/events[events] fired by Camel Quarkus as shown in the the following examplein in which we use `@Observes` to be notified about components added to the Camel Context:\n+\n+[source,java]\n+----\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import org.apache.camel.quarkus.core.events.ComponentAddEvent;\n+import org.apache.camel.component.log.LogComponent;\n+\n+@ApplicationScoped\n+public static class EventHandler {\n+    public void onComponentAdd(@Observes ComponentAddEvent event) {\n+        if (event.getComponent() instanceof LogComponent) {\n+            // do something with the log component\n+        }\n+    }\n+}\n+----\n+\n+== Camel Main\n \n To configure components and other aspects of Apache Camel through properties, you can add the `camel-quarkus-main`\n extension which brings functionalities from https://camel.apache.org/components/latest/others/main.html[Apache Camel\n Main] to Camel Quarkus.\n \n-In the example below, we perform the same configuration of the Log component via properties like we did above using Java:\n+In the example below, we apply the same configuration as the one from the Java example above by using properties:\n \n [source,properties]\n ----\n camel.component.log.exchange-formtatter = #class:org.apache.camel.support.processor.DefaultExchangeFormatter\n camel.component.log.exchange-formtatter.show-exchange-pattern = false\n camel.component.log.exchange-formtatter.show-body-type = false\n ----\n+\n+In addition to support for configuring Camel through properties, `camel-quarkus-main` allows to use conventions to configure the Camel behavior as example, if there a single `ExchangeFormatter` instance in the CDI container, then it will automatically wire that bean to the `LogComponent`.\n+\n+Camel Main also brings the option to write https://quarkus.io/guides/command-mode-reference[Quarkus Command Mode Applications] with control about when the Camel runtime should start:\n+\n+[source,java]\n+----\n+import io.quarkus.runtime.Quarkus;\n+import io.quarkus.runtime.annotations.QuarkusMain;\n+import org.apache.camel.quarkus.main.CamelMainApplication;\n+\n+@QuarkusMain\n+public class Main {\n+    public static void main(String... args) {\n+        //\n+        // your logic here\n+        //\n+\n+        Quarkus.run(CamelMainApplication.class, args); // <1>\n+    }\n+}\n+----\n+<1> Start Quarkus and the Camel Quarkus runtime \n+\n+[NOTE]\n+====\n+It is recommended to perform very little loginc in the Java Main.", "originalCommit": "0bbc649969b19f357e85a1989de714eece6adea2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bad8da8dee7915caa1372b15a9544a0335c375c7", "url": "https://github.com/apache/camel-quarkus/commit/bad8da8dee7915caa1372b15a9544a0335c375c7", "message": "Update docs/modules/ROOT/pages/user-guide/bootstrap.adoc\n\nCo-authored-by: James Netherton <jamesnetherton@users.noreply.github.com>", "committedDate": "2020-07-08T11:44:21Z", "type": "commit"}, {"oid": "858b79318b3fe3b29e375be94ebc49a74dde7d8a", "url": "https://github.com/apache/camel-quarkus/commit/858b79318b3fe3b29e375be94ebc49a74dde7d8a", "message": "Update docs/modules/ROOT/pages/user-guide/bootstrap.adoc\n\nCo-authored-by: James Netherton <jamesnetherton@users.noreply.github.com>", "committedDate": "2020-07-08T11:44:29Z", "type": "commit"}, {"oid": "390239f3176af3863659df0b36ae321aabbeb888", "url": "https://github.com/apache/camel-quarkus/commit/390239f3176af3863659df0b36ae321aabbeb888", "message": "Update docs/modules/ROOT/pages/user-guide/bootstrap.adoc\n\nCo-authored-by: James Netherton <jamesnetherton@users.noreply.github.com>", "committedDate": "2020-07-08T11:44:36Z", "type": "commit"}, {"oid": "499ba72f9dabab987a6c59e33572bbcf589b9d14", "url": "https://github.com/apache/camel-quarkus/commit/499ba72f9dabab987a6c59e33572bbcf589b9d14", "message": "Update docs/modules/ROOT/pages/user-guide/bootstrap.adoc\n\nCo-authored-by: James Netherton <jamesnetherton@users.noreply.github.com>", "committedDate": "2020-07-08T11:44:43Z", "type": "commit"}, {"oid": "436a0f1530a51daf8094d295ea1b8599158fb23f", "url": "https://github.com/apache/camel-quarkus/commit/436a0f1530a51daf8094d295ea1b8599158fb23f", "message": "Update docs/modules/ROOT/pages/user-guide/bootstrap.adoc\n\nCo-authored-by: James Netherton <jamesnetherton@users.noreply.github.com>", "committedDate": "2020-07-08T11:44:49Z", "type": "commit"}, {"oid": "a42afc3cff5128d94fb8ced14eccb8922c78c2c4", "url": "https://github.com/apache/camel-quarkus/commit/a42afc3cff5128d94fb8ced14eccb8922c78c2c4", "message": "Update docs/modules/ROOT/pages/user-guide/bootstrap.adoc\n\nCo-authored-by: James Netherton <jamesnetherton@users.noreply.github.com>", "committedDate": "2020-07-08T11:45:03Z", "type": "commit"}]}