{"pr_number": 13368, "pr_title": "[FLINK-19000] Forward initialization timestamp from Dispatcher to ExecGraph", "pr_createdAt": "2020-09-10T06:44:11Z", "pr_url": "https://github.com/apache/flink/pull/13368", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5MDY2Nw==", "url": "https://github.com/apache/flink/pull/13368#discussion_r488590667", "bodyText": "maybe also check that initializing <= created, to prevent the order from being messed up?", "author": "zentol", "createdAt": "2020-09-15T11:27:18Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/dispatcher/DispatcherTest.java", "diffHunk": "@@ -749,6 +750,26 @@ public void testOnRemovedJobGraphDoesNotCleanUpHAFiles() throws Exception {\n \t\t} catch (TimeoutException expected) {}\n \t}\n \n+\t@Test\n+\tpublic void testInitializationTimestampForwardedToExecutionGraph() throws Exception {\n+\t\tdispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch));\n+\t\tjobMasterLeaderElectionService.isLeader(UUID.randomUUID());\n+\t\tDispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class);\n+\n+\t\tdispatcherGateway.submitJob(jobGraph, TIMEOUT).get();\n+\n+\t\t// ensure job is running\n+\t\tCommonTestUtils.waitUntilCondition(() -> dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT).get() == JobStatus.RUNNING,\n+\t\t\tDeadline.fromNow(Duration.of(10, ChronoUnit.SECONDS)), 5L);\n+\n+\t\tArchivedExecutionGraph result = dispatcher.requestJob(jobGraph.getJobID(), TIMEOUT).get();\n+\n+\t\t// ensure all statuses are set in the ExecutionGraph\n+\t\tassertThat(result.getStatusTimestamp(JobStatus.INITIALIZING), greaterThan(0L));", "originalCommit": "59deb5d9ae2ddf42b40ff4391d567daa8abef8db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5MjUxNw==", "url": "https://github.com/apache/flink/pull/13368#discussion_r488592517", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tDeadline.fromNow(Duration.of(10, ChronoUnit.SECONDS)), 5L);\n          \n          \n            \n            \t\t\tDeadline.fromNow(Duration.ofSeconds(10), 5L);", "author": "zentol", "createdAt": "2020-09-15T11:30:37Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/dispatcher/DispatcherTest.java", "diffHunk": "@@ -749,6 +750,26 @@ public void testOnRemovedJobGraphDoesNotCleanUpHAFiles() throws Exception {\n \t\t} catch (TimeoutException expected) {}\n \t}\n \n+\t@Test\n+\tpublic void testInitializationTimestampForwardedToExecutionGraph() throws Exception {\n+\t\tdispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch));\n+\t\tjobMasterLeaderElectionService.isLeader(UUID.randomUUID());\n+\t\tDispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class);\n+\n+\t\tdispatcherGateway.submitJob(jobGraph, TIMEOUT).get();\n+\n+\t\t// ensure job is running\n+\t\tCommonTestUtils.waitUntilCondition(() -> dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT).get() == JobStatus.RUNNING,\n+\t\t\tDeadline.fromNow(Duration.of(10, ChronoUnit.SECONDS)), 5L);", "originalCommit": "59deb5d9ae2ddf42b40ff4391d567daa8abef8db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5Mjg3OA==", "url": "https://github.com/apache/flink/pull/13368#discussion_r488592878", "bodyText": "I'd move all arguments on a separate line.", "author": "zentol", "createdAt": "2020-09-15T11:31:14Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/dispatcher/DispatcherTest.java", "diffHunk": "@@ -749,6 +750,26 @@ public void testOnRemovedJobGraphDoesNotCleanUpHAFiles() throws Exception {\n \t\t} catch (TimeoutException expected) {}\n \t}\n \n+\t@Test\n+\tpublic void testInitializationTimestampForwardedToExecutionGraph() throws Exception {\n+\t\tdispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch));\n+\t\tjobMasterLeaderElectionService.isLeader(UUID.randomUUID());\n+\t\tDispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class);\n+\n+\t\tdispatcherGateway.submitJob(jobGraph, TIMEOUT).get();\n+\n+\t\t// ensure job is running\n+\t\tCommonTestUtils.waitUntilCondition(() -> dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT).get() == JobStatus.RUNNING,", "originalCommit": "59deb5d9ae2ddf42b40ff4391d567daa8abef8db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2283347d77ac8220df889b20a5906f02f2b1315f", "url": "https://github.com/apache/flink/commit/2283347d77ac8220df889b20a5906f02f2b1315f", "message": "Address PR comments", "committedDate": "2020-09-15T12:30:35Z", "type": "forcePushed"}, {"oid": "12967c8721b5515d55eff87cfdc4b53633b6f1a8", "url": "https://github.com/apache/flink/commit/12967c8721b5515d55eff87cfdc4b53633b6f1a8", "message": "[FLINK-19000] Forward initialization timestamp from Dispatcher to ExecutionGraph\n\nThis closes #13368", "committedDate": "2020-09-16T09:17:55Z", "type": "commit"}, {"oid": "e20229c0d5ad1cc59d51270407f4d3a2a811a144", "url": "https://github.com/apache/flink/commit/e20229c0d5ad1cc59d51270407f4d3a2a811a144", "message": "[hotfix] Consider INITIALIZING JobState also as scheduled in CliFrontend", "committedDate": "2020-09-16T09:18:06Z", "type": "commit"}, {"oid": "e20229c0d5ad1cc59d51270407f4d3a2a811a144", "url": "https://github.com/apache/flink/commit/e20229c0d5ad1cc59d51270407f4d3a2a811a144", "message": "[hotfix] Consider INITIALIZING JobState also as scheduled in CliFrontend", "committedDate": "2020-09-16T09:18:06Z", "type": "forcePushed"}]}