{"pr_number": 14451, "pr_title": "[FLINK-20704][table-planner] Some rel data type does not implement th\u2026", "pr_createdAt": "2020-12-22T03:19:20Z", "pr_url": "https://github.com/apache/flink/pull/14451", "timeline": [{"oid": "d4e0d0bf7183c4a4392efe08ad1adcebd36103cc", "url": "https://github.com/apache/flink/commit/d4e0d0bf7183c4a4392efe08ad1adcebd36103cc", "message": "[FLINK-20704][table-planner] Some rel data type does not implement the digest correctly\n\nSome of the rel data types for legacy planner:\n\n- GenericRelDataType\n- ArrayRelDataType\n- MapRelDataType\n- MultisetRelDataType\n\nDoes not implement the digest correctly, especially for\nGenericRelDataType , the RelDataTypeFactory caches the type instances\nbased on its digest, a wrong digest impl would mess up the type instance\ncreation, e.g. without this patch, all the GenericRelDataType instances\nhave same digest `ANY`.", "committedDate": "2020-12-22T07:22:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI2NjUxNA==", "url": "https://github.com/apache/flink/pull/14451#discussion_r547266514", "bodyText": "I find the test does not cover the changes. I revert the changes and run the method, all tests are success.", "author": "godfreyhe", "createdAt": "2020-12-22T13:04:51Z", "path": "flink-table/flink-table-planner/src/test/scala/org/apache/flink/table/calcite/FlinkTypeFactoryTest.scala", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.apache.flink.table.calcite\n+\n+import org.apache.flink.api.scala.typeutils.Types\n+\n+import org.apache.calcite.sql.`type`.SqlTypeName\n+import org.junit.Assert.{assertFalse, assertTrue}\n+import org.junit.Test\n+\n+/** Test cases for [[FlinkTypeFactory]]. */\n+class FlinkTypeFactoryTest {\n+\n+  @Test\n+  def testCanonizeType(): Unit = {", "originalCommit": "d4e0d0bf7183c4a4392efe08ad1adcebd36103cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzczMTAyMw==", "url": "https://github.com/apache/flink/pull/14451#discussion_r547731023", "bodyText": "Thanks for the check, i have updated the test cases.", "author": "danny0405", "createdAt": "2020-12-23T07:01:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI2NjUxNA=="}], "type": "inlineReview"}, {"oid": "21d75d6c3ae56a159b454726232fa4fb85e43364", "url": "https://github.com/apache/flink/commit/21d75d6c3ae56a159b454726232fa4fb85e43364", "message": "[FLINK-20704][table-planner] Some rel data type does not implement the digest correctly\n\nSome of the rel data types for legacy planner:\n\n- GenericRelDataType\n- ArrayRelDataType\n- MapRelDataType\n- MultisetRelDataType\n\nDoes not implement the digest correctly, especially for\nGenericRelDataType , the RelDataTypeFactory caches the type instances\nbased on its digest, a wrong digest impl would mess up the type instance\ncreation, e.g. without this patch, all the GenericRelDataType instances\nhave same digest `ANY`.", "committedDate": "2020-12-23T04:08:26Z", "type": "forcePushed"}, {"oid": "c747527ef92f6a6b9cbedc907d4acaf04d774192", "url": "https://github.com/apache/flink/commit/c747527ef92f6a6b9cbedc907d4acaf04d774192", "message": "[FLINK-20704][table-planner] Some rel data type does not implement the digest correctly\n\nSome of the rel data types for legacy planner:\n\n- GenericRelDataType\n- ArrayRelDataType\n- MapRelDataType\n- MultisetRelDataType\n\nDoes not implement the digest correctly, especially for\nGenericRelDataType , the RelDataTypeFactory caches the type instances\nbased on its digest, a wrong digest impl would mess up the type instance\ncreation, e.g. without this patch, all the GenericRelDataType instances\nhave same digest `ANY`.", "committedDate": "2020-12-24T01:56:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2MTU0Mg==", "url": "https://github.com/apache/flink/pull/14451#discussion_r548361542", "bodyText": "should use eq instead of == for object equivalence in Scala", "author": "godfreyhe", "createdAt": "2020-12-24T03:05:30Z", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/calcite/FlinkTypeFactoryTest.scala", "diffHunk": "@@ -91,4 +94,16 @@ class FlinkTypeFactoryTest {\n     Assert.assertEquals(new DecimalType(38, 5), FlinkTypeSystem.inferAggSumType(5))\n     Assert.assertEquals(new DecimalType(false, 38, 6), FlinkTypeSystem.inferAggAvgType(5))\n   }\n+\n+  @Test\n+  def testCanonizeType(): Unit = {\n+    val typeFactory = FlinkTypeFactory.INSTANCE\n+    val genericTypeInfo = Types.GENERIC(classOf[TestClass])\n+    val genericRelType = typeFactory.createFieldTypeFromLogicalType(new TypeInformationRawType(genericTypeInfo))\n+    val genericRelType2 = typeFactory.createFieldTypeFromLogicalType(new TypeInformationRawType(genericTypeInfo))\n+\n+    assertTrue(\"The type expect to be canonized\", genericRelType == genericRelType2)", "originalCommit": "c747527ef92f6a6b9cbedc907d4acaf04d774192", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2MTcxMg==", "url": "https://github.com/apache/flink/pull/14451#discussion_r548361712", "bodyText": "nit: use toString() ?", "author": "godfreyhe", "createdAt": "2020-12-24T03:06:02Z", "path": "flink-table/flink-table-planner/src/main/scala/org/apache/flink/table/plan/schema/GenericRelDataType.scala", "diffHunk": "@@ -55,4 +53,10 @@ class GenericRelDataType(\n   override def hashCode(): Int = {\n     typeInfo.hashCode()\n   }\n+\n+  override def isNullable: Boolean = nullable\n+\n+  override def generateTypeString(sb: java.lang.StringBuilder, withDetail: Boolean): Unit = {\n+    sb.append(s\"ANY($typeInfo)\")", "originalCommit": "c747527ef92f6a6b9cbedc907d4acaf04d774192", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2MTc3MQ==", "url": "https://github.com/apache/flink/pull/14451#discussion_r548361771", "bodyText": "ditto", "author": "godfreyhe", "createdAt": "2020-12-24T03:06:17Z", "path": "flink-table/flink-table-planner/src/main/scala/org/apache/flink/table/plan/schema/MapRelDataType.scala", "diffHunk": "@@ -46,4 +46,7 @@ class MapRelDataType(\n     Objects.hashCode(keyType, valueType)\n   }\n \n+  override def generateTypeString(sb: java.lang.StringBuilder, withDetail: Boolean): Unit = {\n+    sb.append(s\"MAP($typeInfo)\")", "originalCommit": "c747527ef92f6a6b9cbedc907d4acaf04d774192", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c87bab456da0d1daeb6efad61d2b9178b4fa88f0", "url": "https://github.com/apache/flink/commit/c87bab456da0d1daeb6efad61d2b9178b4fa88f0", "message": "[FLINK-20704][table-planner] Some rel data type does not implement the digest correctly\n\nSome of the rel data types for legacy planner:\n\n- GenericRelDataType\n- ArrayRelDataType\n- MapRelDataType\n- MultisetRelDataType\n\nDoes not implement the digest correctly, especially for\nGenericRelDataType , the RelDataTypeFactory caches the type instances\nbased on its digest, a wrong digest impl would mess up the type instance\ncreation, e.g. without this patch, all the GenericRelDataType instances\nhave same digest `ANY`.", "committedDate": "2020-12-24T09:11:48Z", "type": "forcePushed"}, {"oid": "573a9ab1bd4b6b68d428b6de6b7700debabfb162", "url": "https://github.com/apache/flink/commit/573a9ab1bd4b6b68d428b6de6b7700debabfb162", "message": "[FLINK-20704][table-planner] Some rel data type does not implement the digest correctly\n\nSome of the rel data types for legacy planner:\n\n- GenericRelDataType\n- ArrayRelDataType\n- MapRelDataType\n- MultisetRelDataType\n\nDoes not implement the digest correctly, especially for\nGenericRelDataType , the RelDataTypeFactory caches the type instances\nbased on its digest, a wrong digest impl would mess up the type instance\ncreation, e.g. without this patch, all the GenericRelDataType instances\nhave same digest `ANY`.", "committedDate": "2020-12-24T13:22:18Z", "type": "forcePushed"}, {"oid": "22b39c8ed7af195647f9eb507e4147346380ccb8", "url": "https://github.com/apache/flink/commit/22b39c8ed7af195647f9eb507e4147346380ccb8", "message": "[FLINK-20704][table-planner] Some rel data type does not implement the digest correctly\n\nSome of the rel data types for legacy planner:\n\n- GenericRelDataType\n- ArrayRelDataType\n- MapRelDataType\n- MultisetRelDataType\n\nDo not implement the digest correctly, especially for\nGenericRelDataType , the RelDataTypeFactory caches the type instances\nbased on its digest, a wrong digest impl would mess up the type instance\ncreation, e.g. without this patch, all the GenericRelDataType instances\nhave same digest `ANY`.", "committedDate": "2020-12-25T01:59:35Z", "type": "forcePushed"}, {"oid": "b3976f5cf20bd5a78289cf388c830a1739992bd0", "url": "https://github.com/apache/flink/commit/b3976f5cf20bd5a78289cf388c830a1739992bd0", "message": "[FLINK-20704][table-planner] Some rel data type does not implement the digest correctly\n\nSome of the rel data types for legacy planner:\n\n- GenericRelDataType\n- ArrayRelDataType\n- MapRelDataType\n- MultisetRelDataType\n\nDo not implement the digest correctly, especially for\nGenericRelDataType , the RelDataTypeFactory caches the type instances\nbased on its digest, a wrong digest impl would mess up the type instance\ncreation, e.g. without this patch, all the GenericRelDataType instances\nhave same digest `ANY`.", "committedDate": "2020-12-28T02:57:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3MzI3MQ==", "url": "https://github.com/apache/flink/pull/14451#discussion_r549273271", "bodyText": "the change is reverted ?", "author": "godfreyhe", "createdAt": "2020-12-28T09:13:43Z", "path": "flink-table/flink-table-planner/src/main/scala/org/apache/flink/table/plan/schema/MapRelDataType.scala", "diffHunk": "@@ -45,5 +45,4 @@ class MapRelDataType(\n   override def hashCode(): Int = {\n     Objects.hashCode(keyType, valueType)\n   }\n-", "originalCommit": "b3976f5cf20bd5a78289cf388c830a1739992bd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3NTY1MA==", "url": "https://github.com/apache/flink/pull/14451#discussion_r549275650", "bodyText": "Yes, the map type has nullability issue for its nested key and values, because currently we create the map type and ignore its key/value nullability (both of them are from the type information with nullability true as default).", "author": "danny0405", "createdAt": "2020-12-28T09:20:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3MzI3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUzNzU1Mg==", "url": "https://github.com/apache/flink/pull/14451#discussion_r549537552", "bodyText": "related issue: https://issues.apache.org/jira/browse/FLINK-20785", "author": "godfreyhe", "createdAt": "2020-12-29T01:35:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3MzI3MQ=="}], "type": "inlineReview"}, {"oid": "d9c3ee87fa55ee7a1f7d4848c8a7dc542f2011a6", "url": "https://github.com/apache/flink/commit/d9c3ee87fa55ee7a1f7d4848c8a7dc542f2011a6", "message": "[FLINK-20704][table-planner] Some rel data type does not implement the digest correctly\n\nSome of the rel data types for legacy planner:\n\n- GenericRelDataType\n- ArrayRelDataType\n- MapRelDataType\n- MultisetRelDataType\n\nDo not implement the digest correctly, especially for\nGenericRelDataType , the RelDataTypeFactory caches the type instances\nbased on its digest, a wrong digest impl would mess up the type instance\ncreation, e.g. without this patch, all the GenericRelDataType instances\nhave same digest `ANY`.\n\nThe MapRelDataType is not fixed because we ignore the key/value\nnullability when creat the type, which conflicts with the digest\nsemantics, see FLINK-20785.", "committedDate": "2020-12-28T09:33:50Z", "type": "commit"}, {"oid": "d9c3ee87fa55ee7a1f7d4848c8a7dc542f2011a6", "url": "https://github.com/apache/flink/commit/d9c3ee87fa55ee7a1f7d4848c8a7dc542f2011a6", "message": "[FLINK-20704][table-planner] Some rel data type does not implement the digest correctly\n\nSome of the rel data types for legacy planner:\n\n- GenericRelDataType\n- ArrayRelDataType\n- MapRelDataType\n- MultisetRelDataType\n\nDo not implement the digest correctly, especially for\nGenericRelDataType , the RelDataTypeFactory caches the type instances\nbased on its digest, a wrong digest impl would mess up the type instance\ncreation, e.g. without this patch, all the GenericRelDataType instances\nhave same digest `ANY`.\n\nThe MapRelDataType is not fixed because we ignore the key/value\nnullability when creat the type, which conflicts with the digest\nsemantics, see FLINK-20785.", "committedDate": "2020-12-28T09:33:50Z", "type": "forcePushed"}]}