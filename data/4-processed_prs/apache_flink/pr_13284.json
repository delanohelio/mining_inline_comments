{"pr_number": 13284, "pr_title": "[FLINK-17016][runtime] Integrate pipelined region scheduling", "pr_createdAt": "2020-08-31T09:33:04Z", "pr_url": "https://github.com/apache/flink/pull/13284", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE2NjA2NA==", "url": "https://github.com/apache/flink/pull/13284#discussion_r480166064", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tfinal Set<CoLocationGroup> coLocationGroups = new HashSet<>();\n          \n          \n            \n            \t\tfor (JobVertex vertex : getVertices()) {\n          \n          \n            \n            \t\t\tCoLocationGroup coLocationGroup = vertex.getCoLocationGroup();\n          \n          \n            \n            \t\t\tif (coLocationGroup != null) {\n          \n          \n            \n            \t\t\t\tcoLocationGroups.add(coLocationGroup);\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tfinal Set<CoLocationGroupDesc> coLocationGroupDescs = coLocationGroups\n          \n          \n            \n            \t\t\t.stream()\n          \n          \n            \n            \t\t\t.map(CoLocationGroupDesc::from)\n          \n          \n            \n            \t\t\t.collect(Collectors.toSet());\n          \n          \n            \n            \t\tfinal Set<CoLocationGroupDesc> coLocationGroupDescs = new HashSet<>();\n          \n          \n            \n            \t\tfor (JobVertex vertex : getVertices()) {\n          \n          \n            \n            \t\t\tCoLocationGroup coLocationGroup = vertex.getCoLocationGroup();\n          \n          \n            \n            \t\t\tif (coLocationGroup != null) {\n          \n          \n            \n            \t\t\t\tCoLocationGroupDesc coLocationGroupDesc = CoLocationGroupDesc.from(coLocationGroup)\n          \n          \n            \n            \t\t\t\tcoLocationGroupDescs.add(coLocationGroupDesc);\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t}", "author": "azagrebin", "createdAt": "2020-08-31T14:24:40Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/JobGraph.java", "diffHunk": "@@ -300,6 +305,32 @@ public int getNumberOfVertices() {\n \t\treturn this.taskVertices.size();\n \t}\n \n+\tpublic Set<SlotSharingGroup> getSlotSharingGroups() {\n+\t\tfinal Set<SlotSharingGroup> slotSharingGroups = new HashSet<>();\n+\t\tfor (JobVertex vertex : getVertices()) {\n+\t\t\tfinal SlotSharingGroup slotSharingGroup = vertex.getSlotSharingGroup();\n+\t\t\tcheckNotNull(slotSharingGroup);\n+\n+\t\t\tslotSharingGroups.add(slotSharingGroup);\n+\t\t}\n+\t\treturn Collections.unmodifiableSet(slotSharingGroups);\n+\t}\n+\n+\tpublic Set<CoLocationGroupDesc> getCoLocationGroupDescriptors() {\n+\t\tfinal Set<CoLocationGroup> coLocationGroups = new HashSet<>();\n+\t\tfor (JobVertex vertex : getVertices()) {\n+\t\t\tCoLocationGroup coLocationGroup = vertex.getCoLocationGroup();\n+\t\t\tif (coLocationGroup != null) {\n+\t\t\t\tcoLocationGroups.add(coLocationGroup);\n+\t\t\t}\n+\t\t}\n+\t\tfinal Set<CoLocationGroupDesc> coLocationGroupDescs = coLocationGroups\n+\t\t\t.stream()\n+\t\t\t.map(CoLocationGroupDesc::from)\n+\t\t\t.collect(Collectors.toSet());", "originalCommit": "93baa67155390c49eacb26683a8f439fb8811533", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAxMzAwMg==", "url": "https://github.com/apache/flink/pull/13284#discussion_r481013002", "bodyText": "We cannot do this because CoLocationGroupDesc does not override equals(...). And I'd like to avoid the equality comparison which may require to compare 2 lists.", "author": "zhuzhurk", "createdAt": "2020-09-01T09:50:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE2NjA2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0NTYwNw==", "url": "https://github.com/apache/flink/pull/13284#discussion_r483645607", "bodyText": "Then maybe we substitute Set<CoLocationGroupDesc> with Map<AbstractID, CoLocationGroupDesc>?\nfinal Set<CoLocationGroupDesc> coLocationGroupDescs = getVertices()\n    .stream()\n    .map(vertex -> CoLocationGroupDesc.from(vertex.getCoLocationGroup()))\n    .collect(Collectors.toMap(CoLocationGroupDesc::getId, d -> d))\n    .values()\n    .stream()\n    .collect(Collectors.toSet());\n\nIt can be also in a for-loop, but it is nit anyways so I think it is ok as it is.\nMaybe, at least a comment why we do it like this: because equals ....", "author": "azagrebin", "createdAt": "2020-09-04T14:20:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE2NjA2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk2MjUwMw==", "url": "https://github.com/apache/flink/pull/13284#discussion_r483962503", "bodyText": "A comment is added to explain that.\nThe loops are also reworked to be in stream format, but in a bit different way.", "author": "zhuzhurk", "createdAt": "2020-09-05T15:47:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE2NjA2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5NTk5OA==", "url": "https://github.com/apache/flink/pull/13284#discussion_r480295998", "bodyText": "do logicalSlotSharingGroupSupplier and coLocationGroupSupplier have to be Suppliers?", "author": "azagrebin", "createdAt": "2020-08-31T18:02:10Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/ExecutionSlotAllocatorFactory.java", "diffHunk": "@@ -19,11 +19,39 @@\n \n package org.apache.flink.runtime.scheduler;\n \n+import org.apache.flink.runtime.clusterframework.types.AllocationID;\n+import org.apache.flink.runtime.clusterframework.types.ResourceProfile;\n+import org.apache.flink.runtime.jobmanager.scheduler.CoLocationGroupDesc;\n+import org.apache.flink.runtime.jobmanager.scheduler.SlotSharingGroup;\n+import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n+import org.apache.flink.runtime.scheduler.strategy.SchedulingTopology;\n+\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n /**\n  * Interface for {@link ExecutionSlotAllocator} factories.\n  */\n+@FunctionalInterface\n public interface ExecutionSlotAllocatorFactory {\n \n-\tExecutionSlotAllocator createInstance(PreferredLocationsRetriever preferredLocationsRetriever);\n-\n+\t/**\n+\t * Instantiates the {@link ExecutionSlotAllocator}.\n+\t *\n+\t * @param preferredLocationsRetriever to retrieve preferred locations for each execution\n+\t * @param resourceProfileRetriever to retrieve required {@link ResourceProfile} for each execution\n+\t * @param priorAllocationIdRetriever to retrieve prior {@link AllocationID} for each execution\n+\t * @param topology scheduling topology of the job\n+\t * @param logicalSlotSharingGroupSupplier to supply all slot sharing groups in the job\n+\t * @param coLocationGroupSupplier to supply all co-location groups in the job\n+\t * @return The instantiated slot allocator\n+\t */\n+\tExecutionSlotAllocator createInstance(\n+\t\tPreferredLocationsRetriever preferredLocationsRetriever,\n+\t\tFunction<ExecutionVertexID, ResourceProfile> resourceProfileRetriever,\n+\t\tFunction<ExecutionVertexID, AllocationID> priorAllocationIdRetriever,\n+\t\tSchedulingTopology topology,\n+\t\tSupplier<Set<SlotSharingGroup>> logicalSlotSharingGroupSupplier,\n+\t\tSupplier<Set<CoLocationGroupDesc>> coLocationGroupSupplier);", "originalCommit": "93baa67155390c49eacb26683a8f439fb8811533", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAxNDMwOQ==", "url": "https://github.com/apache/flink/pull/13284#discussion_r481014309", "bodyText": "Suppliers make it possible to invoke getSlotSharingGroups() and getCoLocationGroupDescriptors() lazily.\nIt's better to not invoke them if it is not SlotSharingExecutionSlotAllocator .", "author": "zhuzhurk", "createdAt": "2020-09-01T09:52:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5NTk5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0NjYyNQ==", "url": "https://github.com/apache/flink/pull/13284#discussion_r483646625", "bodyText": "but they are invoked immediately in SlotSharingExecutionSlotAllocator and only once, right?\nthis is probably not problem with ExecutionSlotAllocationContext", "author": "azagrebin", "createdAt": "2020-09-04T14:21:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5NTk5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NzU0OQ==", "url": "https://github.com/apache/flink/pull/13284#discussion_r483957549", "bodyText": "One example is that if a user uses eager scheduling, getSlotSharingGroups() and getCoLocationGroupDescriptors() will not be invoked if we use supplier here because they will not be used.", "author": "zhuzhurk", "createdAt": "2020-09-05T14:48:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5NTk5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ0Njk0NQ==", "url": "https://github.com/apache/flink/pull/13284#discussion_r485446945", "bodyText": "The ExecutionSlotAllocationContext is reworked so we do not need Supplier anymore.", "author": "zhuzhurk", "createdAt": "2020-09-09T08:50:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5NTk5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5ODg3Mw==", "url": "https://github.com/apache/flink/pull/13284#discussion_r480298873", "bodyText": "I would consider uniting these parameters into e.g.\ninterface ExecutionSlotAllocationContext implements PreferredLocationsRetriever {\n   ResourceProfile getResourceProfile(ExecutionVertexID);\n   AllocationID getPriorAllocationId(ExecutionVertexID);\n   ...\n}", "author": "azagrebin", "createdAt": "2020-08-31T18:07:54Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/ExecutionSlotAllocatorFactory.java", "diffHunk": "@@ -19,11 +19,39 @@\n \n package org.apache.flink.runtime.scheduler;\n \n+import org.apache.flink.runtime.clusterframework.types.AllocationID;\n+import org.apache.flink.runtime.clusterframework.types.ResourceProfile;\n+import org.apache.flink.runtime.jobmanager.scheduler.CoLocationGroupDesc;\n+import org.apache.flink.runtime.jobmanager.scheduler.SlotSharingGroup;\n+import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n+import org.apache.flink.runtime.scheduler.strategy.SchedulingTopology;\n+\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n /**\n  * Interface for {@link ExecutionSlotAllocator} factories.\n  */\n+@FunctionalInterface\n public interface ExecutionSlotAllocatorFactory {\n \n-\tExecutionSlotAllocator createInstance(PreferredLocationsRetriever preferredLocationsRetriever);\n-\n+\t/**\n+\t * Instantiates the {@link ExecutionSlotAllocator}.\n+\t *\n+\t * @param preferredLocationsRetriever to retrieve preferred locations for each execution\n+\t * @param resourceProfileRetriever to retrieve required {@link ResourceProfile} for each execution\n+\t * @param priorAllocationIdRetriever to retrieve prior {@link AllocationID} for each execution\n+\t * @param topology scheduling topology of the job\n+\t * @param logicalSlotSharingGroupSupplier to supply all slot sharing groups in the job\n+\t * @param coLocationGroupSupplier to supply all co-location groups in the job\n+\t * @return The instantiated slot allocator\n+\t */\n+\tExecutionSlotAllocator createInstance(\n+\t\tPreferredLocationsRetriever preferredLocationsRetriever,\n+\t\tFunction<ExecutionVertexID, ResourceProfile> resourceProfileRetriever,\n+\t\tFunction<ExecutionVertexID, AllocationID> priorAllocationIdRetriever,\n+\t\tSchedulingTopology topology,\n+\t\tSupplier<Set<SlotSharingGroup>> logicalSlotSharingGroupSupplier,\n+\t\tSupplier<Set<CoLocationGroupDesc>> coLocationGroupSupplier);", "originalCommit": "93baa67155390c49eacb26683a8f439fb8811533", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAxNTM4Ng==", "url": "https://github.com/apache/flink/pull/13284#discussion_r481015386", "bodyText": "Good suggestion.", "author": "zhuzhurk", "createdAt": "2020-09-01T09:54:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5ODg3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMxMzAxMA==", "url": "https://github.com/apache/flink/pull/13284#discussion_r480313010", "bodyText": "does the test need to wait for 5s? could it be 1s or even less?", "author": "azagrebin", "createdAt": "2020-08-31T18:34:07Z", "path": "flink-tests/src/test/java/org/apache/flink/test/scheduling/PipelinedRegionSchedulingITCase.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.test.scheduling;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.client.program.MiniClusterClient;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.JobManagerOptions;\n+import org.apache.flink.configuration.RestOptions;\n+import org.apache.flink.runtime.io.network.partition.ResultPartitionType;\n+import org.apache.flink.runtime.jobgraph.DistributionPattern;\n+import org.apache.flink.runtime.jobgraph.JobGraph;\n+import org.apache.flink.runtime.jobgraph.JobVertex;\n+import org.apache.flink.runtime.jobgraph.ScheduleMode;\n+import org.apache.flink.runtime.jobmanager.scheduler.NoResourceAvailableException;\n+import org.apache.flink.runtime.jobmanager.scheduler.SlotSharingGroup;\n+import org.apache.flink.runtime.jobmaster.JobResult;\n+import org.apache.flink.runtime.minicluster.MiniCluster;\n+import org.apache.flink.runtime.minicluster.MiniClusterConfiguration;\n+import org.apache.flink.runtime.testtasks.NoOpInvokable;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * IT case for pipelined region scheduling.\n+ */\n+public class PipelinedRegionSchedulingITCase extends TestLogger {\n+\n+\t@Test\n+\tpublic void testSuccessWithSlotsNoFewerThanTheMaxRegionRequired() throws Exception {\n+\t\tfinal JobResult jobResult = executeSchedulingTest(2);\n+\t\tassertThat(jobResult.getSerializedThrowable().isPresent(), is(false));\n+\t}\n+\n+\t@Test\n+\tpublic void testFailsOnInsufficientSlots() throws Exception {\n+\t\tfinal JobResult jobResult = executeSchedulingTest(1);\n+\t\tassertThat(jobResult.getSerializedThrowable().isPresent(), is(true));\n+\n+\t\tfinal Throwable jobFailure = jobResult\n+\t\t\t.getSerializedThrowable()\n+\t\t\t.get()\n+\t\t\t.deserializeError(ClassLoader.getSystemClassLoader());\n+\n+\t\tfinal Optional<NoResourceAvailableException> cause = ExceptionUtils.findThrowable(\n+\t\t\tjobFailure,\n+\t\t\tNoResourceAvailableException.class);\n+\t\tassertThat(cause.isPresent(), is(true));\n+\t\tassertThat(cause.get().getMessage(), containsString(\"Slot request bulk is not fulfillable!\"));\n+\t}\n+\n+\tprivate JobResult executeSchedulingTest(int numSlots) throws Exception {\n+\t\tfinal Configuration configuration = new Configuration();\n+\t\tconfiguration.setString(RestOptions.BIND_PORT, \"0\");\n+\t\tconfiguration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, 5000L);", "originalCommit": "6e68f6bd327d805261acdc9005a9cfc099f595ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAyMDQ5OQ==", "url": "https://github.com/apache/flink/pull/13284#discussion_r481020499", "bodyText": "The JM needs to wait RM connected and TM registered before it can obtain slot. So a timeout is needed otherwise the case testSuccessWithSlotsNoFewerThanTheMaxRegionRequired can fail (e.g. setting the timeout to 10ms the test almost fails every time).\nThe larger timeout, the less chance it will fail. I think 5s is not pain for such kind of tests.", "author": "zhuzhurk", "createdAt": "2020-09-01T10:04:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMxMzAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg5MDcwNQ==", "url": "https://github.com/apache/flink/pull/13284#discussion_r484890705", "bodyText": "ok, 5s may be not a big deal for one test.\nanother idea could be to sleep/poll connected TMs from MiniCluster#requestClusterOverview\nto wait for all TMs connected before running the job", "author": "azagrebin", "createdAt": "2020-09-08T12:51:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMxMzAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3MDc3OA==", "url": "https://github.com/apache/flink/pull/13284#discussion_r485070778", "bodyText": "The main concern is the time to build the connections between JM and TMs and slot offers. It can happen only after a job is launched.", "author": "zhuzhurk", "createdAt": "2020-09-08T17:05:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMxMzAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ0MzY5Nw==", "url": "https://github.com/apache/flink/pull/13284#discussion_r485443697", "bodyText": "ok", "author": "azagrebin", "createdAt": "2020-09-09T08:45:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMxMzAxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMxMzYwNw==", "url": "https://github.com/apache/flink/pull/13284#discussion_r480313607", "bodyText": "what is the difference between parallelism 2 and 100 for the tests?", "author": "azagrebin", "createdAt": "2020-08-31T18:35:10Z", "path": "flink-tests/src/test/java/org/apache/flink/test/scheduling/PipelinedRegionSchedulingITCase.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.test.scheduling;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.client.program.MiniClusterClient;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.JobManagerOptions;\n+import org.apache.flink.configuration.RestOptions;\n+import org.apache.flink.runtime.io.network.partition.ResultPartitionType;\n+import org.apache.flink.runtime.jobgraph.DistributionPattern;\n+import org.apache.flink.runtime.jobgraph.JobGraph;\n+import org.apache.flink.runtime.jobgraph.JobVertex;\n+import org.apache.flink.runtime.jobgraph.ScheduleMode;\n+import org.apache.flink.runtime.jobmanager.scheduler.NoResourceAvailableException;\n+import org.apache.flink.runtime.jobmanager.scheduler.SlotSharingGroup;\n+import org.apache.flink.runtime.jobmaster.JobResult;\n+import org.apache.flink.runtime.minicluster.MiniCluster;\n+import org.apache.flink.runtime.minicluster.MiniClusterConfiguration;\n+import org.apache.flink.runtime.testtasks.NoOpInvokable;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * IT case for pipelined region scheduling.\n+ */\n+public class PipelinedRegionSchedulingITCase extends TestLogger {\n+\n+\t@Test\n+\tpublic void testSuccessWithSlotsNoFewerThanTheMaxRegionRequired() throws Exception {\n+\t\tfinal JobResult jobResult = executeSchedulingTest(2);\n+\t\tassertThat(jobResult.getSerializedThrowable().isPresent(), is(false));\n+\t}\n+\n+\t@Test\n+\tpublic void testFailsOnInsufficientSlots() throws Exception {\n+\t\tfinal JobResult jobResult = executeSchedulingTest(1);\n+\t\tassertThat(jobResult.getSerializedThrowable().isPresent(), is(true));\n+\n+\t\tfinal Throwable jobFailure = jobResult\n+\t\t\t.getSerializedThrowable()\n+\t\t\t.get()\n+\t\t\t.deserializeError(ClassLoader.getSystemClassLoader());\n+\n+\t\tfinal Optional<NoResourceAvailableException> cause = ExceptionUtils.findThrowable(\n+\t\t\tjobFailure,\n+\t\t\tNoResourceAvailableException.class);\n+\t\tassertThat(cause.isPresent(), is(true));\n+\t\tassertThat(cause.get().getMessage(), containsString(\"Slot request bulk is not fulfillable!\"));\n+\t}\n+\n+\tprivate JobResult executeSchedulingTest(int numSlots) throws Exception {\n+\t\tfinal Configuration configuration = new Configuration();\n+\t\tconfiguration.setString(RestOptions.BIND_PORT, \"0\");\n+\t\tconfiguration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, 5000L);\n+\n+\t\tfinal MiniClusterConfiguration miniClusterConfiguration = new MiniClusterConfiguration.Builder()\n+\t\t\t.setConfiguration(configuration)\n+\t\t\t.setNumTaskManagers(1)\n+\t\t\t.setNumSlotsPerTaskManager(numSlots)\n+\t\t\t.build();\n+\n+\t\ttry (MiniCluster miniCluster = new MiniCluster(miniClusterConfiguration)) {\n+\t\t\tminiCluster.start();\n+\n+\t\t\tfinal MiniClusterClient miniClusterClient = new MiniClusterClient(configuration, miniCluster);\n+\n+\t\t\tfinal JobGraph jobGraph = createJobGraph(100);", "originalCommit": "6e68f6bd327d805261acdc9005a9cfc099f595ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAzNjIyMw==", "url": "https://github.com/apache/flink/pull/13284#discussion_r481036223", "bodyText": "No big difference. Just that 100 better proves that one physical slot can be reused for different shared slot for multiple times.\nThe parallelism does not significantly increase the execution time so I think it's not bad to have it.", "author": "zhuzhurk", "createdAt": "2020-09-01T10:25:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMxMzYwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAwNDExOA==", "url": "https://github.com/apache/flink/pull/13284#discussion_r482004118", "bodyText": "I have improved the testing job to not pass with lazy-form-sources scheduling. The parallelism is decreased to 10.\nA parallelism > 8 is required here. This is because in lazy-form-sources scheduling, the downstream task will wait for all the upstream task to be assigned slots if the parallelism is very small. This will result in source tasks to be scheduled earlier than sink tasks, and the job will not deadlock due to this side effect.", "author": "zhuzhurk", "createdAt": "2020-09-02T11:41:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMxMzYwNw=="}], "type": "inlineReview"}, {"oid": "42b7875dce1d37427b9f85f21172208c1bd8c97b", "url": "https://github.com/apache/flink/commit/42b7875dce1d37427b9f85f21172208c1bd8c97b", "message": "[FLINK-17016][runtime] Change blink planner batch jobs to run with pipelined region scheduling", "committedDate": "2020-09-01T15:53:43Z", "type": "forcePushed"}, {"oid": "e5a5f7d8e5a8cb5ce7e18bbf54ed2671f31e75a4", "url": "https://github.com/apache/flink/commit/e5a5f7d8e5a8cb5ce7e18bbf54ed2671f31e75a4", "message": "Improve tests for pipelined region scheduling", "committedDate": "2020-09-02T11:30:14Z", "type": "forcePushed"}, {"oid": "71281ac4921c174c214f2393e169e7140698af2d", "url": "https://github.com/apache/flink/commit/71281ac4921c174c214f2393e169e7140698af2d", "message": "Enable global data exchange mode \u201cPOINTWISE_EDGES_PIPELINED\u201d for TPC-DS tests", "committedDate": "2020-09-03T15:20:14Z", "type": "forcePushed"}, {"oid": "c89d0141f4a854bc7deb4512a2b2007fccfb13fd", "url": "https://github.com/apache/flink/commit/c89d0141f4a854bc7deb4512a2b2007fccfb13fd", "message": "Enable global data exchange mode \u201cPOINTWISE_EDGES_PIPELINED\u201d for TPC-DS tests", "committedDate": "2020-09-04T07:35:51Z", "type": "forcePushed"}, {"oid": "6af35bfdfa14c049bf4abe1c88ee49a689f38085", "url": "https://github.com/apache/flink/commit/6af35bfdfa14c049bf4abe1c88ee49a689f38085", "message": "Enable global data exchange mode \u201cPOINTWISE_EDGES_PIPELINED\u201d for TPC-DS tests", "committedDate": "2020-09-05T14:44:18Z", "type": "forcePushed"}, {"oid": "793c09043c209e8c2de95bdf14f6415f6cbb87b5", "url": "https://github.com/apache/flink/commit/793c09043c209e8c2de95bdf14f6415f6cbb87b5", "message": "Fixup! [FLINK-17016][runtime] Use SlotSharingExecutionSlotAllocator for pipelined region scheduling", "committedDate": "2020-09-05T15:44:36Z", "type": "forcePushed"}, {"oid": "48283bec48b118b5cba4581c56209986815cda98", "url": "https://github.com/apache/flink/commit/48283bec48b118b5cba4581c56209986815cda98", "message": "Fixup! [FLINK-17016][runtime] Use SlotSharingExecutionSlotAllocator for pipelined region scheduling", "committedDate": "2020-09-06T03:16:22Z", "type": "forcePushed"}, {"oid": "e95e0ab0f0bf363c26d1f8e1d92b0d9a98986cb5", "url": "https://github.com/apache/flink/commit/e95e0ab0f0bf363c26d1f8e1d92b0d9a98986cb5", "message": "[hotfix][tests] Let TPC-DS tests run in POINTWISE_EDGES_PIPELINED data exchange mode", "committedDate": "2020-09-08T09:48:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg4MTg4MQ==", "url": "https://github.com/apache/flink/pull/13284#discussion_r484881881", "bodyText": "I would consider using ConfigOption.enumType, like e.g. state.backend.rocksdb.timer-service.factory", "author": "azagrebin", "createdAt": "2020-09-08T12:37:26Z", "path": "flink-core/src/main/java/org/apache/flink/configuration/JobManagerOptions.java", "diffHunk": "@@ -339,6 +340,23 @@\n \t\t\t\t.list(\n \t\t\t\t\ttext(\"'ng': new generation scheduler\"))\n \t\t\t\t.build());\n+\n+\t/**\n+\t * Config parameter determining the scheduling strategy.\n+\t */\n+\t@Documentation.ExcludeFromDocumentation(\"User normally should not be expected to change this config.\")\n+\tpublic static final ConfigOption<String> SCHEDULING_STRATEGY =", "originalCommit": "db83c8518a3caf488e094b5730e59e57259a4560", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5MDIyMQ==", "url": "https://github.com/apache/flink/pull/13284#discussion_r485390221", "bodyText": "I tried it regarding this comment but then realized JobManagerOptions is in flink-core.\nSo I think it's better to not add such an enum to flink-core, given that it is for a temporary option which will probably be removed in release 1.13.", "author": "zhuzhurk", "createdAt": "2020-09-09T07:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg4MTg4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg4MzgwMg==", "url": "https://github.com/apache/flink/pull/13284#discussion_r484883802", "bodyText": "I would consider moving DefaultSchedulerComponents with its factory methodcreateSchedulerComponents into a separate file to avoid VisibleForTesting, then DefaultSchedulerFactoryTest can be DefaultSchedulerComponentsTest.", "author": "azagrebin", "createdAt": "2020-09-08T12:40:46Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultSchedulerFactory.java", "diffHunk": "@@ -127,7 +133,33 @@ public SchedulerNG createInstance(\n \t\t\texecutionDeploymentTracker);\n \t}\n \n-\tprivate static DefaultSchedulerComponents createDefaultSchedulerComponents(\n+\t@VisibleForTesting", "originalCommit": "db83c8518a3caf488e094b5730e59e57259a4560", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQzMTU4MQ==", "url": "https://github.com/apache/flink/pull/13284#discussion_r485431581", "bodyText": "done.", "author": "zhuzhurk", "createdAt": "2020-09-09T08:28:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg4MzgwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkwNTIxOA==", "url": "https://github.com/apache/flink/pull/13284#discussion_r484905218", "bodyText": "Maybe this way it is easier  for testing.\nI was more thinking about an interface ExecutionSlotAllocationContext implemented internally in DefaultScheduler by wrapping preferredLocationsRetriever/jobGraph/EG/schedulingTopology.", "author": "azagrebin", "createdAt": "2020-09-08T13:14:52Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultScheduler.java", "diffHunk": "@@ -160,7 +160,15 @@\n \t\t\tfailoverStrategy,\n \t\t\trestartBackoffTimeStrategy);\n \t\tthis.schedulingStrategy = schedulingStrategyFactory.createInstance(this, getSchedulingTopology());\n-\t\tthis.executionSlotAllocator = checkNotNull(executionSlotAllocatorFactory).createInstance(getPreferredLocationsRetriever());\n+\n+\t\tfinal ExecutionSlotAllocationContext slotAllocationContext = new ExecutionSlotAllocationContext(", "originalCommit": "8b7736f0a03c649b595507bef2df26b3258b555d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ0NTQ4NA==", "url": "https://github.com/apache/flink/pull/13284#discussion_r485445484", "bodyText": "done.", "author": "zhuzhurk", "createdAt": "2020-09-09T08:48:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkwNTIxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkyNzAwMw==", "url": "https://github.com/apache/flink/pull/13284#discussion_r484927003", "bodyText": "are they not in the same SSG by default?", "author": "azagrebin", "createdAt": "2020-09-08T13:37:56Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/minicluster/MiniClusterITCase.java", "diffHunk": "@@ -400,16 +400,23 @@ public void testJobWithAnOccasionallyFailingSenderVertex() throws Exception {\n \t\ttry (final MiniCluster miniCluster = new MiniCluster(cfg)) {\n \t\t\tminiCluster.start();\n \n+\t\t\t// putting sender and receiver vertex in the same slot sharing group is required\n+\t\t\t// to ensure all senders can be deployed. Otherwise this case can fail if the\n+\t\t\t// expected failing sender is not deployed.", "originalCommit": "8dd4d3e23b0f3a2b3f1c1a7755e1a9c79a5d2f86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2NTMyMg==", "url": "https://github.com/apache/flink/pull/13284#discussion_r485065322", "bodyText": "Yes, by default each JobVertex is in a different slot sharing group, which is aligned to the previous behavior for null slot sharing group before we apply #13321.", "author": "zhuzhurk", "createdAt": "2020-09-08T16:56:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkyNzAwMw=="}], "type": "inlineReview"}, {"oid": "acc8ba0856f79a5e7915e8612ef0789190a3806d", "url": "https://github.com/apache/flink/commit/acc8ba0856f79a5e7915e8612ef0789190a3806d", "message": "Fixup! [FLINK-17016][runtime] Enable to use pipelined region scheduling strategy", "committedDate": "2020-09-09T08:26:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwNDI2Mw==", "url": "https://github.com/apache/flink/pull/13284#discussion_r485704263", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class DefaultSchedulerFactoryTest extends TestLogger {\n          \n          \n            \n            public class DefaultSchedulerComponentsFactoryTest extends TestLogger {", "author": "azagrebin", "createdAt": "2020-09-09T15:30:06Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/DefaultSchedulerFactoryTest.java", "diffHunk": "@@ -35,7 +35,7 @@\n import static org.junit.Assert.assertThat;\n \n /**\n- * Tests for {@link DefaultSchedulerFactory}.\n+ * Tests for {@link DefaultSchedulerComponents}.\n  */\n public class DefaultSchedulerFactoryTest extends TestLogger {", "originalCommit": "acc8ba0856f79a5e7915e8612ef0789190a3806d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE3MDM5Nw==", "url": "https://github.com/apache/flink/pull/13284#discussion_r486170397", "bodyText": "done.", "author": "zhuzhurk", "createdAt": "2020-09-10T08:45:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwNDI2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwNDc2Nw==", "url": "https://github.com/apache/flink/pull/13284#discussion_r485704767", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Tests for {@link DefaultSchedulerComponents}.\n          \n          \n            \n             * Tests for {@link DefaultSchedulerComponents#createSchedulerComponents}.", "author": "azagrebin", "createdAt": "2020-09-09T15:30:46Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/DefaultSchedulerFactoryTest.java", "diffHunk": "@@ -35,7 +35,7 @@\n import static org.junit.Assert.assertThat;\n \n /**\n- * Tests for {@link DefaultSchedulerFactory}.\n+ * Tests for {@link DefaultSchedulerComponents}.", "originalCommit": "acc8ba0856f79a5e7915e8612ef0789190a3806d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE3MDQ1OA==", "url": "https://github.com/apache/flink/pull/13284#discussion_r486170458", "bodyText": "done.", "author": "zhuzhurk", "createdAt": "2020-09-10T08:45:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwNDc2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwNjExNw==", "url": "https://github.com/apache/flink/pull/13284#discussion_r485706117", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Components to create a {@link DefaultScheduler}.\n          \n          \n            \n             * Components to create a {@link DefaultScheduler} which depend on the configured {@link JobManagerOptions#SCHEDULING_STRATEGY}.", "author": "azagrebin", "createdAt": "2020-09-09T15:32:41Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultSchedulerComponents.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.flink.runtime.scheduler;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.configuration.CheckpointingOptions;\n+import org.apache.flink.configuration.ClusterOptions;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.JobManagerOptions;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutor;\n+import org.apache.flink.runtime.executiongraph.SlotProviderStrategy;\n+import org.apache.flink.runtime.jobgraph.ScheduleMode;\n+import org.apache.flink.runtime.jobmaster.slotpool.LocationPreferenceSlotSelectionStrategy;\n+import org.apache.flink.runtime.jobmaster.slotpool.PhysicalSlotProvider;\n+import org.apache.flink.runtime.jobmaster.slotpool.PhysicalSlotProviderImpl;\n+import org.apache.flink.runtime.jobmaster.slotpool.PhysicalSlotRequestBulkChecker;\n+import org.apache.flink.runtime.jobmaster.slotpool.PhysicalSlotRequestBulkCheckerImpl;\n+import org.apache.flink.runtime.jobmaster.slotpool.PreviousAllocationSlotSelectionStrategy;\n+import org.apache.flink.runtime.jobmaster.slotpool.Scheduler;\n+import org.apache.flink.runtime.jobmaster.slotpool.SchedulerImpl;\n+import org.apache.flink.runtime.jobmaster.slotpool.SlotPool;\n+import org.apache.flink.runtime.jobmaster.slotpool.SlotSelectionStrategy;\n+import org.apache.flink.runtime.scheduler.strategy.EagerSchedulingStrategy;\n+import org.apache.flink.runtime.scheduler.strategy.LazyFromSourcesSchedulingStrategy;\n+import org.apache.flink.runtime.scheduler.strategy.PipelinedRegionSchedulingStrategy;\n+import org.apache.flink.runtime.scheduler.strategy.SchedulingStrategyFactory;\n+import org.apache.flink.util.clock.SystemClock;\n+\n+import java.util.function.Consumer;\n+\n+/**\n+ * Components to create a {@link DefaultScheduler}.", "originalCommit": "acc8ba0856f79a5e7915e8612ef0789190a3806d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE3MDQ5NQ==", "url": "https://github.com/apache/flink/pull/13284#discussion_r486170495", "bodyText": "done.", "author": "zhuzhurk", "createdAt": "2020-09-10T08:45:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwNjExNw=="}], "type": "inlineReview"}, {"oid": "b50f9615fa9ee90ce66d44ee70e14e9d4c780e0c", "url": "https://github.com/apache/flink/commit/b50f9615fa9ee90ce66d44ee70e14e9d4c780e0c", "message": "[FLINK-17016][runtime] Enable to use pipelined region scheduling strategy\n\nIt can be enabled via config option \"jobmanager.scheduler.scheduling-strategy=region\u201c", "committedDate": "2020-09-10T08:44:13Z", "type": "forcePushed"}, {"oid": "7d718061ce904de956e8e4f3dcc144052b379ab0", "url": "https://github.com/apache/flink/commit/7d718061ce904de956e8e4f3dcc144052b379ab0", "message": "[hotfix] Fix checkstyle violations in JobGraph and JobGraphTest", "committedDate": "2020-09-10T09:00:02Z", "type": "commit"}, {"oid": "d7c66c8b7da831c1f0c98bedeb5d6736f0fa4c86", "url": "https://github.com/apache/flink/commit/d7c66c8b7da831c1f0c98bedeb5d6736f0fa4c86", "message": "[FLINK-17016][runtime] Use SlotSharingExecutionSlotAllocator for pipelined region scheduling", "committedDate": "2020-09-10T09:00:03Z", "type": "commit"}, {"oid": "e62b16868e32d87e90e0133fd7158132c408e615", "url": "https://github.com/apache/flink/commit/e62b16868e32d87e90e0133fd7158132c408e615", "message": "[FLINK-17016][runtime] Enable to use pipelined region scheduling strategy\n\nIt can be enabled via config option \"jobmanager.scheduler.scheduling-strategy=region\u201c", "committedDate": "2020-09-10T09:00:03Z", "type": "forcePushed"}, {"oid": "a687e9ac807a260103dc3249c962890571c4ecda", "url": "https://github.com/apache/flink/commit/a687e9ac807a260103dc3249c962890571c4ecda", "message": "[FLINK-17016][runtime] Enable to use pipelined region scheduling strategy\n\nIt can be enabled via config option \"jobmanager.scheduler.scheduling-strategy=region\"", "committedDate": "2020-09-10T12:31:42Z", "type": "commit"}, {"oid": "a687e9ac807a260103dc3249c962890571c4ecda", "url": "https://github.com/apache/flink/commit/a687e9ac807a260103dc3249c962890571c4ecda", "message": "[FLINK-17016][runtime] Enable to use pipelined region scheduling strategy\n\nIt can be enabled via config option \"jobmanager.scheduler.scheduling-strategy=region\"", "committedDate": "2020-09-10T12:31:42Z", "type": "forcePushed"}]}