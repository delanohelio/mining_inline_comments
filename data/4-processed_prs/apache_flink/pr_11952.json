{"pr_number": 11952, "pr_title": "[FLINK-16638][runtime][checkpointing] Flink checkStateMappingCompleteness doesn't include UserDefinedOperatorIDs", "pr_createdAt": "2020-04-30T03:13:16Z", "pr_url": "https://github.com/apache/flink/pull/11952", "timeline": [{"oid": "846b989b173e24ab549e8aba342f0609afe2c25a", "url": "https://github.com/apache/flink/commit/846b989b173e24ab549e8aba342f0609afe2c25a", "message": "[FLINK-16638][runtime][checkpointing] Flink checkStateMappingCompleteness doesn't include UserDefinedOperatorIDs\n*Cleaning up dead code", "committedDate": "2020-04-30T07:14:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE5MzQ3OA==", "url": "https://github.com/apache/flink/pull/11952#discussion_r418193478", "bodyText": "vertex.getOperatorIdPairList().getOperatorIds sounds a bit repetitive to me.\nHow about vertex.getOperatorIDs().getGeneratedIDs()?", "author": "rkhachatryan", "createdAt": "2020-04-30T18:04:01Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/PendingCheckpoint.java", "diffHunk": "@@ -371,7 +371,7 @@ public TaskAcknowledgeResult acknowledgeTask(\n \t\t\t\tacknowledgedTasks.add(executionAttemptId);\n \t\t\t}\n \n-\t\t\tList<OperatorID> operatorIDs = vertex.getJobVertex().getOperatorIDs();\n+\t\t\tList<OperatorID> operatorIDs = vertex.getJobVertex().getOperatorIdPairList().getOperatorIds();", "originalCommit": "846b989b173e24ab549e8aba342f0609afe2c25a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxMDY1MQ==", "url": "https://github.com/apache/flink/pull/11952#discussion_r418310651", "bodyText": "done", "author": "edu05", "createdAt": "2020-04-30T21:53:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE5MzQ3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE5NzEzOQ==", "url": "https://github.com/apache/flink/pull/11952#discussion_r418197139", "bodyText": "Isn't name getOperatorIdPairs enough (instead of getOperatorIdPairList)?", "author": "rkhachatryan", "createdAt": "2020-04-30T18:10:34Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionJobVertex.java", "diffHunk": "@@ -289,21 +270,12 @@ public ExecutionJobVertex(\n \t}\n \n \t/**\n-\t * Returns a list containing the IDs of all operators contained in this execution job vertex.\n+\t * Returns a list containing the ID pairs of all operators contained in this execution job vertex.\n \t *\n-\t * @return list containing the IDs of all contained operators\n+\t * @return list containing the ID pairs of all contained operators\n \t */\n-\tpublic List<OperatorID> getOperatorIDs() {\n-\t\treturn operatorIDs;\n-\t}\n-\n-\t/**\n-\t * Returns a list containing the alternative IDs of all operators contained in this execution job vertex.\n-\t *\n-\t * @return list containing alternative the IDs of all contained operators\n-\t */\n-\tpublic List<OperatorID> getUserDefinedOperatorIDs() {\n-\t\treturn userDefinedOperatorIds;\n+\tpublic OperatorIdPairList getOperatorIdPairList() {", "originalCommit": "846b989b173e24ab549e8aba342f0609afe2c25a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxMDYxMQ==", "url": "https://github.com/apache/flink/pull/11952#discussion_r418310611", "bodyText": "done by removing the class altogether", "author": "edu05", "createdAt": "2020-04-30T21:53:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE5NzEzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIwMDY5Nw==", "url": "https://github.com/apache/flink/pull/11952#discussion_r418200697", "bodyText": "Ideally, this should be done by the caller (i.e. StreamingJobGraphGenerator.createJobVertex) so the constructor receives a list of pairs.\nAlso, lists here don't guarantee constant time get(int) and it's good to check that both lists have the same size.", "author": "rkhachatryan", "createdAt": "2020-04-30T18:16:53Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/JobVertex.java", "diffHunk": "@@ -143,27 +145,27 @@ public JobVertex(String name) {\n \tpublic JobVertex(String name, JobVertexID id) {\n \t\tthis.name = name == null ? DEFAULT_NAME : name;\n \t\tthis.id = id == null ? new JobVertexID() : id;\n-\t\t// the id lists must have the same size\n-\t\tthis.operatorIDs.add(OperatorID.fromJobVertexID(this.id));\n-\t\tthis.operatorIdsAlternatives.add(null);\n+\t\tOperatorIdPair operatorIdPair = new OperatorIdPair(OperatorID.fromJobVertexID(this.id), null);\n+\t\tthis.operatorIdPairList = new OperatorIdPairList(Collections.singletonList(operatorIdPair));\n \t}\n \n \t/**\n \t * Constructs a new job vertex and assigns it with the given name.\n \t *\n \t * @param name The name of the new job vertex.\n \t * @param primaryId The id of the job vertex.\n-\t * @param alternativeIds The alternative ids of the job vertex.\n \t * @param operatorIds The ids of all operators contained in this job vertex.\n \t * @param alternativeOperatorIds The alternative ids of all operators contained in this job vertex-\n \t */\n-\tpublic JobVertex(String name, JobVertexID primaryId, List<JobVertexID> alternativeIds, List<OperatorID> operatorIds, List<OperatorID> alternativeOperatorIds) {\n+\tpublic JobVertex(String name, JobVertexID primaryId, List<OperatorID> operatorIds, List<OperatorID> alternativeOperatorIds) {\n \t\tPreconditions.checkArgument(operatorIds.size() == alternativeOperatorIds.size());\n \t\tthis.name = name == null ? DEFAULT_NAME : name;\n \t\tthis.id = primaryId == null ? new JobVertexID() : primaryId;\n-\t\tthis.idAlternatives.addAll(alternativeIds);\n-\t\tthis.operatorIDs.addAll(operatorIds);\n-\t\tthis.operatorIdsAlternatives.addAll(alternativeOperatorIds);\n+\t\tList<OperatorIdPair> operatorIdPairs = new ArrayList<>();\n+\t\tfor (int i = 0; i < operatorIds.size(); i++) {\n+\t\t\toperatorIdPairs.add(new OperatorIdPair(operatorIds.get(i), alternativeOperatorIds.get(i)));\n+\t\t}\n+\t\tthis.operatorIdPairList = new OperatorIdPairList(operatorIdPairs);", "originalCommit": "846b989b173e24ab549e8aba342f0609afe2c25a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxMDUwMw==", "url": "https://github.com/apache/flink/pull/11952#discussion_r418310503", "bodyText": "done", "author": "edu05", "createdAt": "2020-04-30T21:53:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIwMDY5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxMTkzMw==", "url": "https://github.com/apache/flink/pull/11952#discussion_r418211933", "bodyText": "I'm not sure if we need this class:\n\ngetUserDefinedOperatorIds is never used\nconstructor can be inlined\ninstead of getOperatorIds() clients could iterate over pairs with minimal changes, e.g. in StateAssignmentOperation:\n\nList<OperatorIdPair> pairs = executionJobVertex.getOperatorIdPairList().getOperatorIds();\n\nint expectedNumberOfSubTasks = newParallelism * pairs.size();\n\nfor (OperatorIdPair pair : operatorIDs) {\n  OperatorInstanceID instanceID = OperatorInstanceID.of(subTaskIndex, pair.getOperatorId());", "author": "rkhachatryan", "createdAt": "2020-04-30T18:37:36Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/OperatorIdPairList.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobgraph;\n+\n+import org.apache.flink.runtime.OperatorIdPair;\n+\n+import java.io.Serializable;\n+import java.util.AbstractList;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Convenience class to encapsulate the operator ID pairs of a job vertex. It is convenient because it hides\n+ * away the creation of a new list for only operator IDs or user defined operator IDs.\n+ * It also hides the iteration over operator ID pairs.\n+ */\n+public class OperatorIdPairList extends AbstractList<OperatorIdPair> implements Serializable {", "originalCommit": "846b989b173e24ab549e8aba342f0609afe2c25a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxMDQyOQ==", "url": "https://github.com/apache/flink/pull/11952#discussion_r418310429", "bodyText": "done", "author": "edu05", "createdAt": "2020-04-30T21:53:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxMTkzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxMjgxMg==", "url": "https://github.com/apache/flink/pull/11952#discussion_r418212812", "bodyText": "What do you think about a factory method to create OperatorIdPair from only generated ID?", "author": "rkhachatryan", "createdAt": "2020-04-30T18:39:24Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointCoordinatorTestingUtils.java", "diffHunk": "@@ -357,8 +359,11 @@ static ExecutionJobVertex mockExecutionJobVertex(\n \t\twhen(executionJobVertex.getParallelism()).thenReturn(parallelism);\n \t\twhen(executionJobVertex.getMaxParallelism()).thenReturn(maxParallelism);\n \t\twhen(executionJobVertex.isMaxParallelismConfigured()).thenReturn(true);\n-\t\twhen(executionJobVertex.getOperatorIDs()).thenReturn(jobVertexIDs);\n-\t\twhen(executionJobVertex.getUserDefinedOperatorIDs()).thenReturn(Arrays.asList(new OperatorID[jobVertexIDs.size()]));\n+\t\tList<OperatorIdPair> operatorIdPairs = new ArrayList<>();\n+\t\tfor (OperatorID operatorID : jobVertexIDs) {\n+\t\t\toperatorIdPairs.add(new OperatorIdPair(operatorID, null));", "originalCommit": "846b989b173e24ab549e8aba342f0609afe2c25a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxMDM1Ng==", "url": "https://github.com/apache/flink/pull/11952#discussion_r418310356", "bodyText": "done, is it a terrible idea that both factory methods have the same name?", "author": "edu05", "createdAt": "2020-04-30T21:53:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxMjgxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ1NDAzNQ==", "url": "https://github.com/apache/flink/pull/11952#discussion_r418454035", "bodyText": "I'd prefer more descriptive name for one-argument version.", "author": "rkhachatryan", "createdAt": "2020-05-01T08:01:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxMjgxMg=="}], "type": "inlineReview"}, {"oid": "32c31c798a471aa1f5035f39b7aef2a107bbc27b", "url": "https://github.com/apache/flink/commit/32c31c798a471aa1f5035f39b7aef2a107bbc27b", "message": "[FLINK-16638][runtime][checkpointing] Flink checkStateMappingCompleteness doesn't include UserDefinedOperatorIDs\n*PR comment - Removing unnecessary OperatorIDPairList class", "committedDate": "2020-05-01T00:41:56Z", "type": "forcePushed"}, {"oid": "cb00ba58dee155aceb27bd4b8bab837a77265699", "url": "https://github.com/apache/flink/commit/cb00ba58dee155aceb27bd4b8bab837a77265699", "message": "[FLINK-16638][runtime][checkpointing] Prevent operator IDs in a JobVertex from being mutated", "committedDate": "2020-05-01T10:03:00Z", "type": "forcePushed"}, {"oid": "2113227fdc0076eb9e2f72ae7883c2d5d245cbab", "url": "https://github.com/apache/flink/commit/2113227fdc0076eb9e2f72ae7883c2d5d245cbab", "message": "[FLINK-16638][runtime][checkpointing] Prevent operator IDs in a JobVertex from being mutated", "committedDate": "2020-05-01T17:43:09Z", "type": "forcePushed"}, {"oid": "a69c291aecf25c48bc10cb0fdda400ff481c6eb8", "url": "https://github.com/apache/flink/commit/a69c291aecf25c48bc10cb0fdda400ff481c6eb8", "message": "[FLINK-16638][runtime][checkpointing] Flink checkStateMappingCompleteness doesn't include UserDefinedOperatorIDs", "committedDate": "2020-05-04T21:49:55Z", "type": "forcePushed"}, {"oid": "5a2f6e8bd534d439b30e10b41a17821a3ea93590", "url": "https://github.com/apache/flink/commit/5a2f6e8bd534d439b30e10b41a17821a3ea93590", "message": "[FLINK-16638][runtime][checkpointing] Flink checkStateMappingCompleteness doesn't include UserDefinedOperatorIDs", "committedDate": "2020-05-04T21:53:48Z", "type": "commit"}, {"oid": "5a2f6e8bd534d439b30e10b41a17821a3ea93590", "url": "https://github.com/apache/flink/commit/5a2f6e8bd534d439b30e10b41a17821a3ea93590", "message": "[FLINK-16638][runtime][checkpointing] Flink checkStateMappingCompleteness doesn't include UserDefinedOperatorIDs", "committedDate": "2020-05-04T21:53:48Z", "type": "forcePushed"}]}