{"pr_number": 14389, "pr_title": "[FLINK-20528][python] Add Python building blocks to make sure the basic functionality of Stream Group Table Aggregation could work", "pr_createdAt": "2020-12-15T09:59:14Z", "pr_url": "https://github.com/apache/flink/pull/14389", "timeline": [{"oid": "3027c25e19dbb51b9f96738959e043411fabff57", "url": "https://github.com/apache/flink/commit/3027c25e19dbb51b9f96738959e043411fabff57", "message": "[FLINK-20528][python] Add Python building blocks to make sure the basic functionality of Stream Group Table Aggregation could work", "committedDate": "2020-12-16T02:28:19Z", "type": "commit"}, {"oid": "3027c25e19dbb51b9f96738959e043411fabff57", "url": "https://github.com/apache/flink/commit/3027c25e19dbb51b9f96738959e043411fabff57", "message": "[FLINK-20528][python] Add Python building blocks to make sure the basic functionality of Stream Group Table Aggregation could work", "committedDate": "2020-12-16T02:28:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1MzQzNA==", "url": "https://github.com/apache/flink/pull/14389#discussion_r544053434", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            def udtaf(f: Union[Callable, UserDefinedFunction, Type] = None,\n          \n          \n            \n            def udtaf(f: Union[Callable, TableAggregateFunction, Type] = None,", "author": "dianfu", "createdAt": "2020-12-16T07:04:56Z", "path": "flink-python/pyflink/table/udf.py", "diffHunk": "@@ -647,3 +692,72 @@ def udaf(f: Union[Callable, UserDefinedFunction, Type] = None,\n     else:\n         return _create_udaf(f, input_types, result_type, accumulator_type, func_type,\n                             deterministic, name)\n+\n+\n+def udtaf(f: Union[Callable, UserDefinedFunction, Type] = None,", "originalCommit": "3027c25e19dbb51b9f96738959e043411fabff57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1NDIyNw==", "url": "https://github.com/apache/flink/pull/14389#discussion_r544054227", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    raise ValueError(\"The func_type must be one of 'general', got %s.\"\n          \n          \n            \n                    raise ValueError(\"The func_type must be 'general', got %s.\"", "author": "dianfu", "createdAt": "2020-12-16T07:05:51Z", "path": "flink-python/pyflink/table/udf.py", "diffHunk": "@@ -647,3 +692,72 @@ def udaf(f: Union[Callable, UserDefinedFunction, Type] = None,\n     else:\n         return _create_udaf(f, input_types, result_type, accumulator_type, func_type,\n                             deterministic, name)\n+\n+\n+def udtaf(f: Union[Callable, UserDefinedFunction, Type] = None,\n+          input_types: Union[List[DataType], DataType] = None, result_type: DataType = None,\n+          accumulator_type: DataType = None, deterministic: bool = None, name: str = None,\n+          func_type: str = 'general') -> Union[UserDefinedAggregateFunctionWrapper, Callable]:\n+    \"\"\"\n+    Helper method for creating a user-defined table aggregate function.\n+\n+    Example:\n+    ::\n+\n+        >>> # The input_types is optional.\n+        >>> class Top2(TableAggregateFunction):\n+        ...     def emit_value(self, accumulator):\n+        ...         yield Row(accumulator[0])\n+        ...         yield Row(accumulator[1])\n+        ...\n+        ...     def create_accumulator(self):\n+        ...         return [None, None]\n+        ...\n+        ...     def accumulate(self, accumulator, *args):\n+        ...         if args[0] is not None:\n+        ...             if accumulator[0] is None or args[0] > accumulator[0]:\n+        ...                 accumulator[1] = accumulator[0]\n+        ...                 accumulator[0] = args[0]\n+        ...             elif accumulator[1] is None or args[0] > accumulator[1]:\n+        ...                 accumulator[1] = args[0]\n+        ...\n+        ...     def retract(self, accumulator, *args):\n+        ...         accumulator[0] = accumulator[0] - 1\n+        ...\n+        ...     def merge(self, accumulator, accumulators):\n+        ...         for other_acc in accumulators:\n+        ...             self.accumulate(accumulator, other_acc[0])\n+        ...             self.accumulate(accumulator, other_acc[1])\n+        ...\n+        ...     def get_accumulator_type(self):\n+        ...         return DataTypes.ARRAY(DataTypes.BIGINT())\n+        ...\n+        ...     def get_result_type(self):\n+        ...         return DataTypes.ROW(\n+        ...             [DataTypes.FIELD(\"a\", DataTypes.BIGINT())])\n+        >>> top2 = udtaf(Top2())\n+\n+    :param f: user-defined table aggregate function.\n+    :param input_types: optional, the input data types.\n+    :param result_type: the result data type.\n+    :param accumulator_type: optional, the accumulator data type.\n+    :param deterministic: the determinism of the function's results. True if and only if a call to\n+                          this function is guaranteed to always return the same result given the\n+                          same parameters. (default True)\n+    :param name: the function name.\n+    :param func_type: the type of the python function, available value: general\n+                     (default: general)\n+    :return: UserDefinedAggregateFunctionWrapper or function.\n+\n+    .. versionadded:: 1.13.0\n+    \"\"\"\n+    if func_type != 'general':\n+        raise ValueError(\"The func_type must be one of 'general', got %s.\"", "originalCommit": "3027c25e19dbb51b9f96738959e043411fabff57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1NTA4MA==", "url": "https://github.com/apache/flink/pull/14389#discussion_r544055080", "bodyText": "So it still doesn't support pandas? Could you create a ticket?", "author": "dianfu", "createdAt": "2020-12-16T07:06:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1NDIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2NTU2Mw==", "url": "https://github.com/apache/flink/pull/14389#discussion_r544065563", "bodyText": "Yes. Unbounded stream will not support Pandas TableAggregateFunction, but group window stream can support Pandas TableAggregateFunction.", "author": "HuangXingBo", "createdAt": "2020-12-16T07:19:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1NDIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1NzAyNQ==", "url": "https://github.com/apache/flink/pull/14389#discussion_r544057025", "bodyText": "What's the purpose of this change?", "author": "dianfu", "createdAt": "2020-12-16T07:09:04Z", "path": "flink-python/src/main/java/org/apache/flink/table/runtime/operators/python/aggregate/PythonStreamGroupTableAggregateOperator.java", "diffHunk": "@@ -39,30 +37,19 @@\n \t@VisibleForTesting\n \tprotected static final String STREAM_GROUP_TABLE_AGGREGATE_URN = \"flink:transform:stream_group_table_aggregate:v1\";\n \n-\tprivate final PythonAggregateFunctionInfo aggregateFunction;\n-\n-\tprivate final DataViewUtils.DataViewSpec[] dataViewSpecs;\n-\n \tpublic PythonStreamGroupTableAggregateOperator(\n \t\tConfiguration config,\n \t\tRowType inputType,\n \t\tRowType outputType,\n-\t\tPythonAggregateFunctionInfo aggregateFunction,", "originalCommit": "3027c25e19dbb51b9f96738959e043411fabff57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2Nzc5OA==", "url": "https://github.com/apache/flink/pull/14389#discussion_r544067798", "bodyText": "When there are multiple flat_maps, an additional PythonAggregateFunctionInfo of count(*) will be added to handle the situation of retract.", "author": "HuangXingBo", "createdAt": "2020-12-16T07:21:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1NzAyNQ=="}], "type": "inlineReview"}, {"oid": "c9a42ef2b9b8c865242fed422050db94466840dd", "url": "https://github.com/apache/flink/commit/c9a42ef2b9b8c865242fed422050db94466840dd", "message": "fix comments", "committedDate": "2020-12-16T07:38:56Z", "type": "commit"}]}