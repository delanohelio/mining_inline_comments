{"pr_number": 12037, "pr_title": "[FLINK-14807][runtime][client] Introduce communication through REST API between the clients and the operator coordinators", "pr_createdAt": "2020-05-08T11:12:27Z", "pr_url": "https://github.com/apache/flink/pull/12037", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1MTAzMQ==", "url": "https://github.com/apache/flink/pull/12037#discussion_r422751031", "bodyText": "add a test for scenario: \"operator id not found\"", "author": "godfreyhe", "createdAt": "2020-05-11T02:45:24Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/coordination/OperatorCoordinatorSchedulerTest.java", "diffHunk": "@@ -163,6 +163,36 @@ public void taskTaskManagerFailuresAreReportedBack() throws Exception {\n \t\tassertThat(result, futureFailedWith(TestException.class));\n \t}\n \n+\t@Test\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void testDeliveringClientRequestToResponser() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingCoordinationResponser.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationResponser.Request<String> request =\n+\t\t\tnew TestingCoordinationResponser.Request<>(payload);\n+\t\tfinal TestingCoordinationResponser.Response<String> response =\n+\t\t\t(TestingCoordinationResponser.Response<String>)\n+\t\t\t\tscheduler.deliverCoordinationRequestToCoordinator(testOperatorId, request).get();\n+\n+\t\tassertEquals(payload, response.getPayload());\n+\t}\n+\n+\t@Test\n+\tpublic void testDeliveringClientRequestToNonResponser() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingOperatorCoordinator.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationResponser.Request<String> request =\n+\t\t\tnew TestingCoordinationResponser.Request<>(payload);\n+\t\tfinal CompletableFuture<CoordinationResponse> future =\n+\t\t\tscheduler.deliverCoordinationRequestToCoordinator(testOperatorId, request);\n+\n+\t\tassertThat(future, futureFailedWith(IllegalArgumentException.class));\n+\t}\n+", "originalCommit": "c06e5db9e64a2b39d857babff53d401697b87262", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1MTY4OQ==", "url": "https://github.com/apache/flink/pull/12037#discussion_r422751689", "bodyText": "I think we should throw FlinkException, this situation is the same as the operation does not exist", "author": "godfreyhe", "createdAt": "2020-05-11T02:48:44Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SchedulerBase.java", "diffHunk": "@@ -933,6 +941,22 @@ public void deliverOperatorEventToCoordinator(\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic CompletableFuture<CoordinationResponse> deliverCoordinationRequestToCoordinator(\n+\t\t\tOperatorID operator,\n+\t\t\tCoordinationRequest request) throws FlinkException {\n+\t\tOperatorCoordinator coordinator = coordinatorMap.get(operator);\n+\t\tif (coordinator instanceof CoordinationResponser) {\n+\t\t\treturn CompletableFuture.completedFuture(\n+\t\t\t\t((CoordinationResponser) coordinator).handleCoordinationRequest(request));\n+\t\t} else if (coordinator != null) {\n+\t\t\treturn FutureUtils.completedExceptionally(\n+\t\t\t\tnew IllegalArgumentException(\"Coordinator of operator \" + operator + \" cannot handle client event\"));", "originalCommit": "c06e5db9e64a2b39d857babff53d401697b87262", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1MjkyOA==", "url": "https://github.com/apache/flink/pull/12037#discussion_r422752928", "bodyText": "throw CompletionException like getAccumulators method", "author": "godfreyhe", "createdAt": "2020-05-11T02:54:47Z", "path": "flink-clients/src/main/java/org/apache/flink/client/program/rest/RestClusterClient.java", "diffHunk": "@@ -411,6 +418,36 @@ public void close() {\n \t\treturn triggerSavepoint(jobId, savepointDirectory, false);\n \t}\n \n+\t@Override\n+\tpublic CompletableFuture<CoordinationResponse> sendCoordinationRequest(\n+\t\t\tJobID jobId,\n+\t\t\tOperatorID operatorId,\n+\t\t\tCoordinationRequest request) {\n+\t\tClientCoordinationHeaders headers = ClientCoordinationHeaders.getInstance();\n+\t\tClientCoordinationMessageParameters params = new ClientCoordinationMessageParameters();\n+\t\tparams.jobPathParameter.resolve(jobId);\n+\t\tparams.operatorPathParameter.resolve(operatorId);\n+\n+\t\tSerializedValue<CoordinationRequest> serializedRequest;\n+\t\ttry {\n+\t\t\tserializedRequest = new SerializedValue<>(request);\n+\t\t} catch (IOException e) {\n+\t\t\treturn FutureUtils.completedExceptionally(e);\n+\t\t}\n+\n+\t\tClientCoordinationRequestBody requestBody = new ClientCoordinationRequestBody(serializedRequest);\n+\t\treturn sendRequest(headers, params, requestBody).thenApply(\n+\t\t\tresponseBody -> {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn responseBody\n+\t\t\t\t\t\t.getSerializedCoordinationResponse()\n+\t\t\t\t\t\t.deserializeValue(getClass().getClassLoader());\n+\t\t\t\t} catch (IOException | ClassNotFoundException e) {\n+\t\t\t\t\tthrow new RuntimeException(\"Failed to deserialize coordination response\", e);", "originalCommit": "c06e5db9e64a2b39d857babff53d401697b87262", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NDQwMw==", "url": "https://github.com/apache/flink/pull/12037#discussion_r422754403", "bodyText": "rename to CoordinationHandler ? similar to OperatorEventHandler", "author": "godfreyhe", "createdAt": "2020-05-11T03:01:54Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/coordination/CoordinationResponser.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.operators.coordination;\n+\n+/**\n+ * Coordinator interface which can handle {@link CoordinationRequest}s\n+ * and response with {@link CoordinationResponse}s to the client.\n+ */\n+public interface CoordinationResponser {", "originalCommit": "c06e5db9e64a2b39d857babff53d401697b87262", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NzU4MA==", "url": "https://github.com/apache/flink/pull/12037#discussion_r422757580", "bodyText": "CoordinationRequestHandler seems to be better", "author": "tsreaper", "createdAt": "2020-05-11T03:17:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NDQwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NTQxMw==", "url": "https://github.com/apache/flink/pull/12037#discussion_r422755413", "bodyText": "rename to CoordinationRequestGateway? similar to OperatorEventGateway", "author": "godfreyhe", "createdAt": "2020-05-11T03:06:33Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/coordination/CoordinationRequester.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.operators.coordination;\n+\n+import org.apache.flink.runtime.jobgraph.OperatorID;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Client interface which sends out a {@link CoordinationRequest} and\n+ * expects for a {@link CoordinationResponse} from a {@link OperatorCoordinator}.\n+ */\n+public interface CoordinationRequester {", "originalCommit": "c06e5db9e64a2b39d857babff53d401697b87262", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ0ODk5NA==", "url": "https://github.com/apache/flink/pull/12037#discussion_r423448994", "bodyText": "I'm not sure this interface is necessary, it seems we can add the method to JobClient. You can see almost each time when a class implements JobClient, it will also implement this interface", "author": "KurtYoung", "createdAt": "2020-05-12T04:04:29Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/coordination/CoordinationRequestGateway.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.operators.coordination;\n+\n+import org.apache.flink.runtime.jobgraph.OperatorID;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Client interface which sends out a {@link CoordinationRequest} and\n+ * expects for a {@link CoordinationResponse} from a {@link OperatorCoordinator}.\n+ */\n+public interface CoordinationRequestGateway {", "originalCommit": "8317107cba32a7102c19e920b2a9932e40bbc5a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1NTY5OA==", "url": "https://github.com/apache/flink/pull/12037#discussion_r423455698", "bodyText": "Coordinators are used internally so we do not want to expose this to the users. As JobClient is a public interface, we prefer not to modify it.", "author": "tsreaper", "createdAt": "2020-05-12T04:32:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ0ODk5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MjMxNw==", "url": "https://github.com/apache/flink/pull/12037#discussion_r423452317", "bodyText": "throw RestHandlerException instead? Will the RuntimeException crash the rest server?", "author": "KurtYoung", "createdAt": "2020-05-12T04:18:35Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/job/coordination/ClientCoordinationHandler.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.rest.handler.job.coordination;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.jobgraph.OperatorID;\n+import org.apache.flink.runtime.operators.coordination.CoordinationRequest;\n+import org.apache.flink.runtime.operators.coordination.CoordinationResponse;\n+import org.apache.flink.runtime.rest.handler.AbstractRestHandler;\n+import org.apache.flink.runtime.rest.handler.HandlerRequest;\n+import org.apache.flink.runtime.rest.handler.RestHandlerException;\n+import org.apache.flink.runtime.rest.messages.JobIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.MessageHeaders;\n+import org.apache.flink.runtime.rest.messages.OperatorIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationMessageParameters;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationRequestBody;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationResponseBody;\n+import org.apache.flink.runtime.webmonitor.RestfulGateway;\n+import org.apache.flink.runtime.webmonitor.retriever.GatewayRetriever;\n+import org.apache.flink.util.SerializedValue;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Handler that receives the coordination requests from the client and returns the response from the coordinator.\n+ */\n+public class ClientCoordinationHandler extends AbstractRestHandler<RestfulGateway, ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> {\n+\n+\tpublic ClientCoordinationHandler(\n+\t\t\tGatewayRetriever<? extends RestfulGateway> leaderRetriever,\n+\t\t\tTime timeout,\n+\t\t\tMap<String, String> responseHeaders,\n+\t\t\tMessageHeaders<ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> messageHeaders) {\n+\t\tsuper(leaderRetriever, timeout, responseHeaders, messageHeaders);\n+\t}\n+\n+\t@Override\n+\tprotected CompletableFuture<ClientCoordinationResponseBody> handleRequest(\n+\t\t\t@Nonnull HandlerRequest<ClientCoordinationRequestBody, ClientCoordinationMessageParameters> request,\n+\t\t\t@Nonnull RestfulGateway gateway) throws RestHandlerException {\n+\t\tJobID jobId = request.getPathParameter(JobIDPathParameter.class);\n+\t\tOperatorID operatorId = request.getPathParameter(OperatorIDPathParameter.class);\n+\t\tSerializedValue<CoordinationRequest> serializedRequest =\n+\t\t\trequest.getRequestBody().getSerializedCoordinationRequest();\n+\t\tCompletableFuture<CoordinationResponse> responseFuture =\n+\t\t\tgateway.deliverCoordinationRequestToCoordinator(jobId, operatorId, serializedRequest, timeout);\n+\t\treturn responseFuture.thenApply(\n+\t\t\tcoordinationResponse -> {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn new ClientCoordinationResponseBody(new SerializedValue<>(coordinationResponse));\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\tthrow new RuntimeException(\"Failed to construct response body\", e);", "originalCommit": "8317107cba32a7102c19e920b2a9932e40bbc5a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1NTc3NQ==", "url": "https://github.com/apache/flink/pull/12037#discussion_r423455775", "bodyText": "It won't. See JobAccumulatorsHandler for similar behaviors.", "author": "tsreaper", "createdAt": "2020-05-12T04:32:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUxMjU0Mg==", "url": "https://github.com/apache/flink/pull/12037#discussion_r423512542", "bodyText": "Throwing RuntimeExceptions is an implementation error. REST handlers should always throw a RestHandlerException, as only then a proper error is returned to the user, instead of a generic 500 Internal Server Error.", "author": "zentol", "createdAt": "2020-05-12T07:16:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MjMxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0ODIwMw==", "url": "https://github.com/apache/flink/pull/12037#discussion_r424148203", "bodyText": "I think this should add to JobMasterOperatorEventGateway", "author": "KurtYoung", "createdAt": "2020-05-13T03:09:34Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/JobMasterGateway.java", "diffHunk": "@@ -271,4 +275,19 @@ void heartbeatFromTaskManager(\n \t * @return The updated aggregate\n \t */\n \tCompletableFuture<Object> updateGlobalAggregate(String aggregateName, Object aggregand, byte[] serializedAggregationFunction);\n+\n+\t/**\n+\t * Deliver a coordination request to a specified coordinator and return the response.\n+\t *\n+\t * @param operatorId identifying the coordinator to receive the request\n+\t * @param serializedRequest serialized request to deliver\n+\t * @return A future containing the response.\n+\t *         The response will fail with a {@link org.apache.flink.util.FlinkException}\n+\t *         if the task is not running, or no operator/coordinator exists for the given ID,\n+\t *         or the coordinator cannot handle client events.\n+\t */\n+\tCompletableFuture<CoordinationResponse> deliverCoordinationRequestToCoordinator(", "originalCommit": "77942bf5fcfee886d9dfd16633c41be3ca8d0f7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxNTMyNg==", "url": "https://github.com/apache/flink/pull/12037#discussion_r424215326", "bodyText": "No. JobMasterOperatorEventGateway is for OperatorEvents. CoordinationRequest and CoordinationResponse are different from OperatorEvent.", "author": "tsreaper", "createdAt": "2020-05-13T07:04:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0ODIwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzMDY4Nw==", "url": "https://github.com/apache/flink/pull/12037#discussion_r424530687", "bodyText": "Why are we wrapping coordinationResponse into a SerializedValue here? If it is in order to support user code classes, then it should not work because ClientCoordinationHandler should not have access to the user code class loader.", "author": "tillrohrmann", "createdAt": "2020-05-13T15:30:29Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/job/coordination/ClientCoordinationHandler.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.rest.handler.job.coordination;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.jobgraph.OperatorID;\n+import org.apache.flink.runtime.operators.coordination.CoordinationRequest;\n+import org.apache.flink.runtime.operators.coordination.CoordinationResponse;\n+import org.apache.flink.runtime.rest.handler.AbstractRestHandler;\n+import org.apache.flink.runtime.rest.handler.HandlerRequest;\n+import org.apache.flink.runtime.rest.handler.RestHandlerException;\n+import org.apache.flink.runtime.rest.messages.JobIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.MessageHeaders;\n+import org.apache.flink.runtime.rest.messages.OperatorIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationMessageParameters;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationRequestBody;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationResponseBody;\n+import org.apache.flink.runtime.webmonitor.RestfulGateway;\n+import org.apache.flink.runtime.webmonitor.retriever.GatewayRetriever;\n+import org.apache.flink.util.SerializedValue;\n+\n+import org.apache.flink.shaded.netty4.io.netty.handler.codec.http.HttpResponseStatus;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+\n+/**\n+ * Handler that receives the coordination requests from the client and returns the response from the coordinator.\n+ */\n+public class ClientCoordinationHandler extends AbstractRestHandler<RestfulGateway, ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> {\n+\n+\tpublic ClientCoordinationHandler(\n+\t\t\tGatewayRetriever<? extends RestfulGateway> leaderRetriever,\n+\t\t\tTime timeout,\n+\t\t\tMap<String, String> responseHeaders,\n+\t\t\tMessageHeaders<ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> messageHeaders) {\n+\t\tsuper(leaderRetriever, timeout, responseHeaders, messageHeaders);\n+\t}\n+\n+\t@Override\n+\tprotected CompletableFuture<ClientCoordinationResponseBody> handleRequest(\n+\t\t\t@Nonnull HandlerRequest<ClientCoordinationRequestBody, ClientCoordinationMessageParameters> request,\n+\t\t\t@Nonnull RestfulGateway gateway) throws RestHandlerException {\n+\t\tJobID jobId = request.getPathParameter(JobIDPathParameter.class);\n+\t\tOperatorID operatorId = request.getPathParameter(OperatorIDPathParameter.class);\n+\t\tSerializedValue<CoordinationRequest> serializedRequest =\n+\t\t\trequest.getRequestBody().getSerializedCoordinationRequest();\n+\t\tCompletableFuture<CoordinationResponse> responseFuture =\n+\t\t\tgateway.deliverCoordinationRequestToCoordinator(jobId, operatorId, serializedRequest, timeout);\n+\t\treturn responseFuture.thenApply(\n+\t\t\tcoordinationResponse -> {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn new ClientCoordinationResponseBody(new SerializedValue<>(coordinationResponse));", "originalCommit": "4dcc0c0f63898b3b1ab8f230257165c1b9497130", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NDAxMQ==", "url": "https://github.com/apache/flink/pull/12037#discussion_r424664011", "bodyText": "The wrapping would have to happen on a component which has access to the user code classes.", "author": "tillrohrmann", "createdAt": "2020-05-13T18:59:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzMDY4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgzMjcwNQ==", "url": "https://github.com/apache/flink/pull/12037#discussion_r424832705", "bodyText": "Because CoordinationResponse is an object and should be serialized in order to be passed back to the client through the REST API. Is there a more proper way to achieve this?", "author": "tsreaper", "createdAt": "2020-05-14T02:16:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzMDY4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkxNDU2OQ==", "url": "https://github.com/apache/flink/pull/12037#discussion_r424914569", "bodyText": "Makes sense. I guess we will use another layer of SerializedValue if the user requests a user code object from the OperatorCoordinator which is then initialized on the JM.", "author": "tillrohrmann", "createdAt": "2020-05-14T07:06:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzMDY4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzNDY1Nw==", "url": "https://github.com/apache/flink/pull/12037#discussion_r424534657", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testDeliveringClientRequestToResponser() throws Exception {\n          \n          \n            \n            \tpublic void testDeliveringClientRequestToResponder() throws Exception {", "author": "tillrohrmann", "createdAt": "2020-05-13T15:35:55Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/coordination/OperatorCoordinatorSchedulerTest.java", "diffHunk": "@@ -163,6 +165,56 @@ public void taskTaskManagerFailuresAreReportedBack() throws Exception {\n \t\tassertThat(result, futureFailedWith(TestException.class));\n \t}\n \n+\t@Test\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void testDeliveringClientRequestToResponser() throws Exception {", "originalCommit": "4dcc0c0f63898b3b1ab8f230257165c1b9497130", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgzMDkxOQ==", "url": "https://github.com/apache/flink/pull/12037#discussion_r424830919", "bodyText": "This should be testDeliveringClientRequestToRequestHandler now as the name of the interface is changed to CoordinationRequestHandler.", "author": "tsreaper", "createdAt": "2020-05-14T02:09:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzNDY1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzNDkwMA==", "url": "https://github.com/apache/flink/pull/12037#discussion_r424534900", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testDeliveringClientRequestToNonResponser() throws Exception {\n          \n          \n            \n            \tpublic void testDeliveringClientRequestToNonResponder() throws Exception {", "author": "tillrohrmann", "createdAt": "2020-05-13T15:36:18Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/coordination/OperatorCoordinatorSchedulerTest.java", "diffHunk": "@@ -163,6 +165,56 @@ public void taskTaskManagerFailuresAreReportedBack() throws Exception {\n \t\tassertThat(result, futureFailedWith(TestException.class));\n \t}\n \n+\t@Test\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void testDeliveringClientRequestToResponser() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingCoordinationRequestHandler.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationRequestHandler.Request<String> request =\n+\t\t\tnew TestingCoordinationRequestHandler.Request<>(payload);\n+\t\tfinal TestingCoordinationRequestHandler.Response<String> response =\n+\t\t\t(TestingCoordinationRequestHandler.Response<String>)\n+\t\t\t\tscheduler.deliverCoordinationRequestToCoordinator(testOperatorId, request).get();\n+\n+\t\tassertEquals(payload, response.getPayload());\n+\t}\n+\n+\t@Test(expected = FlinkException.class)\n+\tpublic void testDeliveringClientRequestToNonResponser() throws Exception {", "originalCommit": "4dcc0c0f63898b3b1ab8f230257165c1b9497130", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgzMTAwNA==", "url": "https://github.com/apache/flink/pull/12037#discussion_r424831004", "bodyText": "This should be testDeliveringClientRequestToNonRequestHandler now as the name of the interface is changed to CoordinationRequestHandler.", "author": "tsreaper", "createdAt": "2020-05-14T02:09:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzNDkwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2MTYzOA==", "url": "https://github.com/apache/flink/pull/12037#discussion_r424661638", "bodyText": "I think we could use CommonTestUtils.assertThrows here.", "author": "tillrohrmann", "createdAt": "2020-05-13T18:55:33Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/coordination/OperatorCoordinatorSchedulerTest.java", "diffHunk": "@@ -163,6 +165,56 @@ public void taskTaskManagerFailuresAreReportedBack() throws Exception {\n \t\tassertThat(result, futureFailedWith(TestException.class));\n \t}\n \n+\t@Test\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void testDeliveringClientRequestToResponser() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingCoordinationRequestHandler.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationRequestHandler.Request<String> request =\n+\t\t\tnew TestingCoordinationRequestHandler.Request<>(payload);\n+\t\tfinal TestingCoordinationRequestHandler.Response<String> response =\n+\t\t\t(TestingCoordinationRequestHandler.Response<String>)\n+\t\t\t\tscheduler.deliverCoordinationRequestToCoordinator(testOperatorId, request).get();\n+\n+\t\tassertEquals(payload, response.getPayload());\n+\t}\n+\n+\t@Test(expected = FlinkException.class)\n+\tpublic void testDeliveringClientRequestToNonResponser() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingOperatorCoordinator.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationRequestHandler.Request<String> request =\n+\t\t\tnew TestingCoordinationRequestHandler.Request<>(payload);\n+\n+\t\ttry {\n+\t\t\tscheduler.deliverCoordinationRequestToCoordinator(testOperatorId, request);\n+\t\t} catch (FlinkException e) {\n+\t\t\tAssert.assertTrue(e.getMessage().contains(\"cannot handle client event\"));\n+\t\t\tthrow e;\n+\t\t}", "originalCommit": "4dcc0c0f63898b3b1ab8f230257165c1b9497130", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2MTkwNw==", "url": "https://github.com/apache/flink/pull/12037#discussion_r424661907", "bodyText": "same here with CommonTestUtils.assertThrows", "author": "tillrohrmann", "createdAt": "2020-05-13T18:56:00Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/coordination/OperatorCoordinatorSchedulerTest.java", "diffHunk": "@@ -163,6 +165,56 @@ public void taskTaskManagerFailuresAreReportedBack() throws Exception {\n \t\tassertThat(result, futureFailedWith(TestException.class));\n \t}\n \n+\t@Test\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void testDeliveringClientRequestToResponser() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingCoordinationRequestHandler.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationRequestHandler.Request<String> request =\n+\t\t\tnew TestingCoordinationRequestHandler.Request<>(payload);\n+\t\tfinal TestingCoordinationRequestHandler.Response<String> response =\n+\t\t\t(TestingCoordinationRequestHandler.Response<String>)\n+\t\t\t\tscheduler.deliverCoordinationRequestToCoordinator(testOperatorId, request).get();\n+\n+\t\tassertEquals(payload, response.getPayload());\n+\t}\n+\n+\t@Test(expected = FlinkException.class)\n+\tpublic void testDeliveringClientRequestToNonResponser() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingOperatorCoordinator.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationRequestHandler.Request<String> request =\n+\t\t\tnew TestingCoordinationRequestHandler.Request<>(payload);\n+\n+\t\ttry {\n+\t\t\tscheduler.deliverCoordinationRequestToCoordinator(testOperatorId, request);\n+\t\t} catch (FlinkException e) {\n+\t\t\tAssert.assertTrue(e.getMessage().contains(\"cannot handle client event\"));\n+\t\t\tthrow e;\n+\t\t}\n+\t}\n+\n+\t@Test(expected = FlinkException.class)\n+\tpublic void testDeliveringClientRequestToNonExistingCoordinator() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingOperatorCoordinator.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationRequestHandler.Request<String> request =\n+\t\t\tnew TestingCoordinationRequestHandler.Request<>(payload);\n+\n+\t\ttry {\n+\t\t\tscheduler.deliverCoordinationRequestToCoordinator(new OperatorID(), request);\n+\t\t} catch (FlinkException e) {\n+\t\t\tAssert.assertTrue(e.getMessage().contains(\"does not exist\"));\n+\t\t\tthrow e;\n+\t\t}", "originalCommit": "4dcc0c0f63898b3b1ab8f230257165c1b9497130", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "18e3fa4a769f1ee25d0534e9feb498f9807237c4", "url": "https://github.com/apache/flink/commit/18e3fa4a769f1ee25d0534e9feb498f9807237c4", "message": "[FLINK-14807][runtime][client] Introduce communication through REST API between the clients and the operator coordinators", "committedDate": "2020-05-14T14:29:17Z", "type": "commit"}, {"oid": "4e0dcdb8df8f4063a3573caaa5dab4f38e7b5513", "url": "https://github.com/apache/flink/commit/4e0dcdb8df8f4063a3573caaa5dab4f38e7b5513", "message": "[fix] Update REST API test resource", "committedDate": "2020-05-14T14:29:17Z", "type": "commit"}, {"oid": "2f8b362521f157e51fb41b7c9ce237855f929fca", "url": "https://github.com/apache/flink/commit/2f8b362521f157e51fb41b7c9ce237855f929fca", "message": "[fix] Fix godfrey's comments", "committedDate": "2020-05-14T14:29:17Z", "type": "commit"}, {"oid": "d381e1dc367e48c22d9b0d655a4358d35d6c8c67", "url": "https://github.com/apache/flink/commit/d381e1dc367e48c22d9b0d655a4358d35d6c8c67", "message": "[fix] Fix type of exception thrown in REST handler", "committedDate": "2020-05-14T14:29:17Z", "type": "commit"}, {"oid": "2fd031d7d14477b9c125481d01c474454954841c", "url": "https://github.com/apache/flink/commit/2fd031d7d14477b9c125481d01c474454954841c", "message": "[fix] Change return type of CoordinationRequestHandler to CompletableFuture in case of costly handling", "committedDate": "2020-05-14T14:29:17Z", "type": "commit"}, {"oid": "716647013d7b2d3f4a07ed4a56cdce564f477dc8", "url": "https://github.com/apache/flink/commit/716647013d7b2d3f4a07ed4a56cdce564f477dc8", "message": "[fix] Fix unit test naming and assertion", "committedDate": "2020-05-14T14:29:17Z", "type": "commit"}, {"oid": "d515b32100a8912e2c35e8de1310fc60ad2aa2c9", "url": "https://github.com/apache/flink/commit/d515b32100a8912e2c35e8de1310fc60ad2aa2c9", "message": "[fix] Mark ClientCoordinationHeaders with @ExcludeFromDocumentation", "committedDate": "2020-05-14T14:31:25Z", "type": "commit"}]}