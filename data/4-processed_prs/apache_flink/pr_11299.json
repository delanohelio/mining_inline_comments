{"pr_number": 11299, "pr_title": "[FLINK-16008][table-planner][table-planner-blink] Add rules to transpose the join condition of Python Correlate node", "pr_createdAt": "2020-03-03T14:18:29Z", "pr_url": "https://github.com/apache/flink/pull/11299", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ5MjE1NQ==", "url": "https://github.com/apache/flink/pull/11299#discussion_r391492155", "bodyText": "If we only support INNER, we need to also check the condition in StreamExecPythonCorrelate and throws a friendly error message to info users that currently correlate does not support conditions.\nWhat do you think?", "author": "hequn8128", "createdAt": "2020-03-12T09:25:33Z", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/rules/logical/CalcPythonCorrelateTransposeRule.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.rules.logical;\n+\n+import org.apache.flink.table.planner.plan.nodes.logical.FlinkLogicalCalc;\n+import org.apache.flink.table.planner.plan.nodes.logical.FlinkLogicalCorrelate;\n+import org.apache.flink.table.planner.plan.nodes.logical.FlinkLogicalRel;\n+import org.apache.flink.table.planner.plan.nodes.logical.FlinkLogicalTableFunctionScan;\n+import org.apache.flink.table.planner.plan.rules.physical.stream.StreamExecCorrelateRule;\n+import org.apache.flink.table.planner.plan.utils.PythonUtil;\n+\n+import org.apache.calcite.plan.RelOptRule;\n+import org.apache.calcite.plan.RelOptRuleCall;\n+import org.apache.calcite.plan.RelOptUtil;\n+import org.apache.calcite.rel.core.JoinRelType;\n+import org.apache.calcite.rex.RexBuilder;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.rex.RexProgram;\n+import org.apache.calcite.rex.RexProgramBuilder;\n+import org.apache.calcite.rex.RexUtil;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Rule will transpose the conditions after the Python correlate node if the join type is inner join.\n+ */\n+public class CalcPythonCorrelateTransposeRule extends RelOptRule {\n+\n+\tpublic static final CalcPythonCorrelateTransposeRule INSTANCE =\n+\t\tnew CalcPythonCorrelateTransposeRule();\n+\n+\tprivate CalcPythonCorrelateTransposeRule() {\n+\t\tsuper(operand(FlinkLogicalCorrelate.class,\n+\t\t\toperand(FlinkLogicalRel.class, any()),\n+\t\t\toperand(FlinkLogicalCalc.class, any())),\n+\t\t\t\"CalcPythonCorrelateTransposeRule\");\n+\t}\n+\n+\t@Override\n+\tpublic boolean matches(RelOptRuleCall call) {\n+\t\tFlinkLogicalCorrelate correlate = call.rel(0);\n+\t\tFlinkLogicalCalc right = call.rel(2);\n+\t\tJoinRelType joinType = correlate.getJoinType();\n+\t\tFlinkLogicalCalc mergedCalc = StreamExecCorrelateRule.getMergedCalc(right);\n+\t\tFlinkLogicalTableFunctionScan scan = StreamExecCorrelateRule.getTableScan(mergedCalc);\n+\t\treturn joinType == JoinRelType.INNER &&", "originalCommit": "5ccd5a1c4800a864b045cb3bb0d89f867c382558", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ5NzgyMw==", "url": "https://github.com/apache/flink/pull/11299#discussion_r391497823", "bodyText": "Add a blank after the TableTestBase", "author": "hequn8128", "createdAt": "2020-03-12T09:35:50Z", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/plan/rules/logical/CalcPythonCorrelateTransposeRuleTest.scala", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.rules.logical\n+\n+import org.apache.calcite.plan.hep.HepMatchOrder\n+import org.apache.flink.api.scala._\n+import org.apache.flink.table.api.scala._\n+import org.apache.flink.table.planner.plan.nodes.FlinkConventions\n+import org.apache.flink.table.planner.plan.optimize.program._\n+import org.apache.flink.table.planner.plan.rules.FlinkStreamRuleSets\n+import org.apache.flink.table.planner.runtime.utils.JavaUserDefinedScalarFunctions.PythonScalarFunction\n+import org.apache.flink.table.planner.utils.{MockPythonTableFunction, TableTestBase}\n+import org.junit.{Before, Test}\n+\n+class CalcPythonCorrelateTransposeRuleTest extends TableTestBase{", "originalCommit": "5ccd5a1c4800a864b045cb3bb0d89f867c382558", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ5Nzg5NA==", "url": "https://github.com/apache/flink/pull/11299#discussion_r391497894", "bodyText": "Add a blank after the TableTestBase", "author": "hequn8128", "createdAt": "2020-03-12T09:35:56Z", "path": "flink-table/flink-table-planner/src/test/scala/org/apache/flink/table/plan/CalcPythonCorrelateTransposeRuleTest.scala", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.plan\n+\n+import org.apache.flink.api.scala._\n+import org.apache.flink.table.api.scala._\n+import org.apache.flink.table.runtime.utils.JavaUserDefinedScalarFunctions.PythonScalarFunction\n+import org.apache.flink.table.utils.{MockPythonTableFunction, TableTestBase}\n+import org.apache.flink.table.utils.TableTestUtil.{streamTableNode, term, unaryNode}\n+import org.junit.Test\n+\n+class CalcPythonCorrelateTransposeRuleTest extends TableTestBase{", "originalCommit": "5ccd5a1c4800a864b045cb3bb0d89f867c382558", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwMTk1Mw==", "url": "https://github.com/apache/flink/pull/11299#discussion_r391501953", "bodyText": "Check whether scan is defined? scan.isDefined() &&", "author": "hequn8128", "createdAt": "2020-03-12T09:43:08Z", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/rules/logical/CalcPythonCorrelateTransposeRule.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.rules.logical;\n+\n+import org.apache.flink.table.planner.plan.nodes.logical.FlinkLogicalCalc;\n+import org.apache.flink.table.planner.plan.nodes.logical.FlinkLogicalCorrelate;\n+import org.apache.flink.table.planner.plan.nodes.logical.FlinkLogicalRel;\n+import org.apache.flink.table.planner.plan.nodes.logical.FlinkLogicalTableFunctionScan;\n+import org.apache.flink.table.planner.plan.rules.physical.stream.StreamExecCorrelateRule;\n+import org.apache.flink.table.planner.plan.utils.PythonUtil;\n+\n+import org.apache.calcite.plan.RelOptRule;\n+import org.apache.calcite.plan.RelOptRuleCall;\n+import org.apache.calcite.plan.RelOptUtil;\n+import org.apache.calcite.rel.core.JoinRelType;\n+import org.apache.calcite.rex.RexBuilder;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.rex.RexProgram;\n+import org.apache.calcite.rex.RexProgramBuilder;\n+import org.apache.calcite.rex.RexUtil;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Rule will transpose the conditions after the Python correlate node if the join type is inner join.\n+ */\n+public class CalcPythonCorrelateTransposeRule extends RelOptRule {\n+\n+\tpublic static final CalcPythonCorrelateTransposeRule INSTANCE =\n+\t\tnew CalcPythonCorrelateTransposeRule();\n+\n+\tprivate CalcPythonCorrelateTransposeRule() {\n+\t\tsuper(operand(FlinkLogicalCorrelate.class,\n+\t\t\toperand(FlinkLogicalRel.class, any()),\n+\t\t\toperand(FlinkLogicalCalc.class, any())),\n+\t\t\t\"CalcPythonCorrelateTransposeRule\");\n+\t}\n+\n+\t@Override\n+\tpublic boolean matches(RelOptRuleCall call) {\n+\t\tFlinkLogicalCorrelate correlate = call.rel(0);\n+\t\tFlinkLogicalCalc right = call.rel(2);\n+\t\tJoinRelType joinType = correlate.getJoinType();\n+\t\tFlinkLogicalCalc mergedCalc = StreamExecCorrelateRule.getMergedCalc(right);\n+\t\tFlinkLogicalTableFunctionScan scan = StreamExecCorrelateRule.getTableScan(mergedCalc);\n+\t\treturn joinType == JoinRelType.INNER &&\n+\t\t\tPythonUtil.isPythonCall(scan.getCall()) &&", "originalCommit": "5ccd5a1c4800a864b045cb3bb0d89f867c382558", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a29c65eff7a72716f92d288ef08dba7213c5adff", "url": "https://github.com/apache/flink/commit/a29c65eff7a72716f92d288ef08dba7213c5adff", "message": "[FLINK-16008][table-planner][table-planner-blink] Add rules to transpose the join condition of Python Correlate node", "committedDate": "2020-03-12T11:48:38Z", "type": "commit"}, {"oid": "f67e2803fad3344e56cba748487660bbacbaf4f9", "url": "https://github.com/apache/flink/commit/f67e2803fad3344e56cba748487660bbacbaf4f9", "message": "[FLINK-16008][table-planner][table-planner-blink] Add rules to transpose the join condition of Python Correlate node-fix-1", "committedDate": "2020-03-12T13:09:43Z", "type": "commit"}, {"oid": "f67e2803fad3344e56cba748487660bbacbaf4f9", "url": "https://github.com/apache/flink/commit/f67e2803fad3344e56cba748487660bbacbaf4f9", "message": "[FLINK-16008][table-planner][table-planner-blink] Add rules to transpose the join condition of Python Correlate node-fix-1", "committedDate": "2020-03-12T13:09:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY5MzY5Mg==", "url": "https://github.com/apache/flink/pull/11299#discussion_r391693692", "bodyText": "Put a full comma at the end of the sentence.", "author": "hequn8128", "createdAt": "2020-03-12T15:17:18Z", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/physical/stream/StreamExecPythonCorrelate.scala", "diffHunk": "@@ -51,6 +52,10 @@ class StreamExecPythonCorrelate(\n     joinType)\n   with CommonPythonCorrelate {\n \n+  if (condition.isDefined) {\n+    throw new TableException(\"Currently Python correlate does not support conditions in left join\")", "originalCommit": "f67e2803fad3344e56cba748487660bbacbaf4f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "40adace13b01090f2f86f32b4141caaa5ae58cc4", "url": "https://github.com/apache/flink/commit/40adace13b01090f2f86f32b4141caaa5ae58cc4", "message": "[FLINK-16008][table-planner][table-planner-blink] Add rules to transpose the join condition of Python Correlate node-fix-2", "committedDate": "2020-03-12T15:26:07Z", "type": "commit"}]}