{"pr_number": 10896, "pr_title": "[FLINK-15631][table-planner-blink] Fix equals code generation for raw and timestamp type", "pr_createdAt": "2020-01-19T05:41:21Z", "pr_url": "https://github.com/apache/flink/pull/10896", "timeline": [{"oid": "f765a3816b97657b93895347980f6899a45e95b9", "url": "https://github.com/apache/flink/commit/f765a3816b97657b93895347980f6899a45e95b9", "message": "[FLINK-15631][table-planner-blink] Fix raw and timestamp type in EqualiserCodeGenerator", "committedDate": "2020-01-19T05:41:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI3Nzk0OQ==", "url": "https://github.com/apache/flink/pull/10896#discussion_r368277949", "bodyText": "Move this JavaUserDefinedAggFunctions? So that it can be reused across tests.", "author": "wuchong", "createdAt": "2020-01-19T09:14:03Z", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/stream/sql/AggregateITCase.scala", "diffHunk": "@@ -1186,4 +1189,41 @@ class AggregateITCase(\n     assertEquals(expected, sink.getRetractResults)\n   }\n \n+  @Test\n+  def testGenericTypesWithoutStateClean(): Unit = {\n+    tEnv.getConfig.setIdleStateRetentionTime(Time.days(0), Time.days(0))\n+    val t = env.fromElements(1, 2, 3).toTable(tEnv, 'a)\n+    val results = t\n+        .select(new GenericAggregateFunction()('a))\n+        .toRetractStream[Row]\n+\n+    val sink = new TestingRetractSink\n+    results.addSink(sink).setParallelism(1)\n+    env.execute()\n+  }\n+}\n+\n+class RandomClass(var i: Int)\n+\n+class GenericAggregateFunction extends AggregateFunction[java.lang.Integer, RandomClass] {", "originalCommit": "f765a3816b97657b93895347980f6899a45e95b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI3ODY4Nw==", "url": "https://github.com/apache/flink/pull/10896#discussion_r368278687", "bodyText": "Please use failingDataSource to cover more paths.", "author": "wuchong", "createdAt": "2020-01-19T09:25:51Z", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/stream/sql/AggregateITCase.scala", "diffHunk": "@@ -1186,4 +1189,41 @@ class AggregateITCase(\n     assertEquals(expected, sink.getRetractResults)\n   }\n \n+  @Test\n+  def testGenericTypesWithoutStateClean(): Unit = {\n+    tEnv.getConfig.setIdleStateRetentionTime(Time.days(0), Time.days(0))\n+    val t = env.fromElements(1, 2, 3).toTable(tEnv, 'a)", "originalCommit": "f765a3816b97657b93895347980f6899a45e95b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI3ODcwNQ==", "url": "https://github.com/apache/flink/pull/10896#discussion_r368278705", "bodyText": "Could you add a comment above this because we don't provide a way to disable state cleanup.", "author": "wuchong", "createdAt": "2020-01-19T09:26:22Z", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/stream/sql/AggregateITCase.scala", "diffHunk": "@@ -1186,4 +1189,41 @@ class AggregateITCase(\n     assertEquals(expected, sink.getRetractResults)\n   }\n \n+  @Test\n+  def testGenericTypesWithoutStateClean(): Unit = {\n+    tEnv.getConfig.setIdleStateRetentionTime(Time.days(0), Time.days(0))", "originalCommit": "f765a3816b97657b93895347980f6899a45e95b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5MTkxOA==", "url": "https://github.com/apache/flink/pull/10896#discussion_r368291918", "bodyText": "Add another test for equality?", "author": "wuchong", "createdAt": "2020-01-19T12:56:29Z", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/expressions/ScalarFunctionsTest.scala", "diffHunk": "@@ -4159,4 +4159,11 @@ class ScalarFunctionsTest extends ScalarTypesTestBase {\n       \"IS_ALPHA(f33)\",\n       \"false\")\n   }\n+\n+  @Test\n+  def testEquality(): Unit = {\n+    testSqlApi(\n+      \"f55=f56\",\n+      \"false\")", "originalCommit": "f765a3816b97657b93895347980f6899a45e95b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5MTkzMg==", "url": "https://github.com/apache/flink/pull/10896#discussion_r368291932", "bodyText": "testRawTypeEquality?", "author": "wuchong", "createdAt": "2020-01-19T12:56:36Z", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/expressions/ScalarFunctionsTest.scala", "diffHunk": "@@ -4159,4 +4159,11 @@ class ScalarFunctionsTest extends ScalarTypesTestBase {\n       \"IS_ALPHA(f33)\",\n       \"false\")\n   }\n+\n+  @Test\n+  def testEquality(): Unit = {", "originalCommit": "f765a3816b97657b93895347980f6899a45e95b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5MTk2OQ==", "url": "https://github.com/apache/flink/pull/10896#discussion_r368291969", "bodyText": "testRawTypeEquality?", "author": "wuchong", "createdAt": "2020-01-19T12:57:11Z", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/expressions/ScalarFunctionsTest.scala", "diffHunk": "@@ -4159,4 +4159,11 @@ class ScalarFunctionsTest extends ScalarTypesTestBase {\n       \"IS_ALPHA(f33)\",\n       \"false\")\n   }\n+\n+  @Test\n+  def testEquality(): Unit = {", "originalCommit": "f765a3816b97657b93895347980f6899a45e95b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5MjAxNw==", "url": "https://github.com/apache/flink/pull/10896#discussion_r368292017", "bodyText": "Add a test for BinaryRow(BinaryGeneric(timestamp)) vs GenericRow(BinaryGeneric(timestamp)).", "author": "wuchong", "createdAt": "2020-01-19T12:58:03Z", "path": "flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/codegen/EqualiserCodeGeneratorTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.codegen;\n+\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.table.dataformat.BinaryGeneric;\n+import org.apache.flink.table.dataformat.GenericRow;\n+import org.apache.flink.table.dataformat.SqlTimestamp;\n+import org.apache.flink.table.runtime.generated.RecordEqualiser;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.TimestampType;\n+import org.apache.flink.table.types.logical.TypeInformationRawType;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test for {@link EqualiserCodeGenerator}.\n+ */\n+public class EqualiserCodeGeneratorTest {\n+\n+\t@Test\n+\tpublic void testRaw() {\n+\t\tRecordEqualiser equaliser = new EqualiserCodeGenerator(\n+\t\t\t\tnew LogicalType[]{new TypeInformationRawType<>(Types.INT)})\n+\t\t\t\t.generateRecordEqualiser(\"RAW\")\n+\t\t\t\t.newInstance(Thread.currentThread().getContextClassLoader());\n+\t\tAssert.assertTrue(equaliser.equalsWithoutHeader(\n+\t\t\t\tGenericRow.of(new BinaryGeneric<>(1)),\n+\t\t\t\tGenericRow.of(new BinaryGeneric<>(1))));\n+\t\tAssert.assertFalse(equaliser.equalsWithoutHeader(\n+\t\t\t\tGenericRow.of(new BinaryGeneric<>(1)),\n+\t\t\t\tGenericRow.of(new BinaryGeneric<>(2))));\n+\t}\n+\n+\t@Test\n+\tpublic void testTimestamp() {\n+\t\tRecordEqualiser equaliser = new EqualiserCodeGenerator(\n+\t\t\t\tnew LogicalType[]{new TimestampType()})\n+\t\t\t\t.generateRecordEqualiser(\"TIMESTAMP\")\n+\t\t\t\t.newInstance(Thread.currentThread().getContextClassLoader());\n+\t\tAssert.assertTrue(equaliser.equalsWithoutHeader(\n+\t\t\t\tGenericRow.of(SqlTimestamp.fromEpochMillis(1024)),\n+\t\t\t\tGenericRow.of(SqlTimestamp.fromEpochMillis(1024))));", "originalCommit": "f765a3816b97657b93895347980f6899a45e95b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5MjAzMw==", "url": "https://github.com/apache/flink/pull/10896#discussion_r368292033", "bodyText": "Add a test for BinaryRow(BinaryGeneric(1)) vs GenericRow(BinaryGeneric(1)).", "author": "wuchong", "createdAt": "2020-01-19T12:58:11Z", "path": "flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/codegen/EqualiserCodeGeneratorTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.codegen;\n+\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.table.dataformat.BinaryGeneric;\n+import org.apache.flink.table.dataformat.GenericRow;\n+import org.apache.flink.table.dataformat.SqlTimestamp;\n+import org.apache.flink.table.runtime.generated.RecordEqualiser;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.TimestampType;\n+import org.apache.flink.table.types.logical.TypeInformationRawType;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test for {@link EqualiserCodeGenerator}.\n+ */\n+public class EqualiserCodeGeneratorTest {\n+\n+\t@Test\n+\tpublic void testRaw() {\n+\t\tRecordEqualiser equaliser = new EqualiserCodeGenerator(\n+\t\t\t\tnew LogicalType[]{new TypeInformationRawType<>(Types.INT)})\n+\t\t\t\t.generateRecordEqualiser(\"RAW\")\n+\t\t\t\t.newInstance(Thread.currentThread().getContextClassLoader());\n+\t\tAssert.assertTrue(equaliser.equalsWithoutHeader(\n+\t\t\t\tGenericRow.of(new BinaryGeneric<>(1)),\n+\t\t\t\tGenericRow.of(new BinaryGeneric<>(1))));", "originalCommit": "f765a3816b97657b93895347980f6899a45e95b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5MjA0Mg==", "url": "https://github.com/apache/flink/pull/10896#discussion_r368292042", "bodyText": "Add a test for BinaryRow(BinaryGeneric(1)) vs GenericRow(BinaryGeneric(1)).", "author": "wuchong", "createdAt": "2020-01-19T12:58:23Z", "path": "flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/codegen/EqualiserCodeGeneratorTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.codegen;\n+\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.table.dataformat.BinaryGeneric;\n+import org.apache.flink.table.dataformat.GenericRow;\n+import org.apache.flink.table.dataformat.SqlTimestamp;\n+import org.apache.flink.table.runtime.generated.RecordEqualiser;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.TimestampType;\n+import org.apache.flink.table.types.logical.TypeInformationRawType;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test for {@link EqualiserCodeGenerator}.\n+ */\n+public class EqualiserCodeGeneratorTest {\n+\n+\t@Test\n+\tpublic void testRaw() {\n+\t\tRecordEqualiser equaliser = new EqualiserCodeGenerator(\n+\t\t\t\tnew LogicalType[]{new TypeInformationRawType<>(Types.INT)})\n+\t\t\t\t.generateRecordEqualiser(\"RAW\")\n+\t\t\t\t.newInstance(Thread.currentThread().getContextClassLoader());\n+\t\tAssert.assertTrue(equaliser.equalsWithoutHeader(\n+\t\t\t\tGenericRow.of(new BinaryGeneric<>(1)),\n+\t\t\t\tGenericRow.of(new BinaryGeneric<>(1))));", "originalCommit": "f765a3816b97657b93895347980f6899a45e95b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5MjQyOQ==", "url": "https://github.com/apache/flink/pull/10896#discussion_r368292429", "bodyText": "Can we improve the existing constructor to accept only Array[] ? So that we can avoid to maintain two constructors.", "author": "wuchong", "createdAt": "2020-01-19T13:04:39Z", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/EqualiserCodeGenerator.scala", "diffHunk": "@@ -29,6 +30,10 @@ import scala.collection.JavaConversions._\n \n class EqualiserCodeGenerator(fieldTypes: Seq[LogicalType]) {\n \n+  def this(fieldTypes: Array[LogicalType]) {", "originalCommit": "f765a3816b97657b93895347980f6899a45e95b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "653449adeb70ce7b67899af2187a2391b7045514", "url": "https://github.com/apache/flink/commit/653449adeb70ce7b67899af2187a2391b7045514", "message": "[FLINK-15631][table-planner-blink] Fix equals code generation for raw type", "committedDate": "2020-01-20T08:12:19Z", "type": "commit"}, {"oid": "9565df8604df038216c3fef48788be932c93a381", "url": "https://github.com/apache/flink/commit/9565df8604df038216c3fef48788be932c93a381", "message": "[FLINK-15631][table-planner-blink] Fix raw and timestamp type in EqualiserCodeGenerator", "committedDate": "2020-01-20T08:29:17Z", "type": "commit"}, {"oid": "9565df8604df038216c3fef48788be932c93a381", "url": "https://github.com/apache/flink/commit/9565df8604df038216c3fef48788be932c93a381", "message": "[FLINK-15631][table-planner-blink] Fix raw and timestamp type in EqualiserCodeGenerator", "committedDate": "2020-01-20T08:29:17Z", "type": "forcePushed"}]}