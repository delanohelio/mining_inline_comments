{"pr_number": 12401, "pr_title": "[FLINK-16057] Optimize ContinuousFileReaderOperator", "pr_createdAt": "2020-05-29T08:04:24Z", "pr_url": "https://github.com/apache/flink/pull/12401", "timeline": [{"oid": "5ae178ffebe69903ebe8d09bdd8709c299c86dc0", "url": "https://github.com/apache/flink/commit/5ae178ffebe69903ebe8d09bdd8709c299c86dc0", "message": "[FLINK-16057][task] Optimize TaskMailbox state retrieval\n\nDon't lock in TaskMailboxImpl.getState for task thread.\nThis makes ContinuousFileReaderOperator about 29% faster.", "committedDate": "2020-05-29T08:11:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3MDA3MQ==", "url": "https://github.com/apache/flink/pull/12401#discussion_r432370071", "bodyText": "@Nullable - but check other comments first (for a better solution)", "author": "pnowojski", "createdAt": "2020-05-29T09:36:00Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/mailbox/MailboxExecutorImpl.java", "diffHunk": "@@ -43,10 +43,22 @@\n \n \tprivate final StreamTaskActionExecutor actionExecutor;\n \n+\tprivate MailboxProcessor mailboxProcessor;", "originalCommit": "fa16f36730c8a0794cfc9aa55bb99dbaa8ef4239", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3MDQ0MQ==", "url": "https://github.com/apache/flink/pull/12401#discussion_r432370441", "bodyText": "mailboxProcessor != null && mailboxProcessor.isDefaultActionUnavailable()?  - but check other comments first (for a better solution)", "author": "pnowojski", "createdAt": "2020-05-29T09:36:42Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/mailbox/MailboxExecutorImpl.java", "diffHunk": "@@ -43,10 +43,22 @@\n \n \tprivate final StreamTaskActionExecutor actionExecutor;\n \n+\tprivate MailboxProcessor mailboxProcessor;\n+\n \tpublic MailboxExecutorImpl(@Nonnull TaskMailbox mailbox, int priority, StreamTaskActionExecutor actionExecutor) {\n+\t\tthis(mailbox, priority, actionExecutor, null);\n+\t}\n+\n+\tpublic MailboxExecutorImpl(@Nonnull TaskMailbox mailbox, int priority, StreamTaskActionExecutor actionExecutor, MailboxProcessor mailboxProcessor) {\n \t\tthis.mailbox = mailbox;\n \t\tthis.priority = priority;\n \t\tthis.actionExecutor = Preconditions.checkNotNull(actionExecutor);\n+\t\tthis.mailboxProcessor = mailboxProcessor;\n+\t}\n+\n+\tpublic boolean isIdle() {\n+\t\treturn !mailboxProcessor.isMailboxLoopRunning() ||\n+\t\t\t(mailboxProcessor.isDefaultActionUnavailable() && !mailbox.hasMail() && mailbox.getState().isAcceptingMails());", "originalCommit": "fa16f36730c8a0794cfc9aa55bb99dbaa8ef4239", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3Mzg3OQ==", "url": "https://github.com/apache/flink/pull/12401#discussion_r432373879", "bodyText": "Couple of problems:\n\nit changes an object passed from the outside\nrequires cast (could be solved by changing the signature of the constructor)\n\nI'm thinking that maybe a better solution is to get rid of the mainMailboxExecutor and replace getter getMainMailboxExecutor with:\n\tpublic MailboxExecutor getMainMailboxExecutor() {\n\t\treturn new MailboxExecutorImpl(mailbox, MIN_PRIORITY, actionExecutor, this);\n\t}\n\nplus caching access to mailboxProcessor.getMainMailboxExecutor() inside StreamTask via creating a field in  StreamTask: private final MailboxExecutor mainMailboxExecutor?\nThis would solve the problem of circular dependency and nullable non final field inside MailboxExecutorImpl.\nWDYT?", "author": "pnowojski", "createdAt": "2020-05-29T09:43:09Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/mailbox/MailboxProcessor.java", "diffHunk": "@@ -114,6 +114,7 @@ public MailboxProcessor(\n \t\tthis.actionExecutor = Preconditions.checkNotNull(actionExecutor);\n \t\tthis.mailbox = Preconditions.checkNotNull(mailbox);\n \t\tthis.mainMailboxExecutor = Preconditions.checkNotNull(mainMailboxExecutor);\n+\t\t((MailboxExecutorImpl) this.mainMailboxExecutor).setMailboxProcessor(this);", "originalCommit": "fa16f36730c8a0794cfc9aa55bb99dbaa8ef4239", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxODM1OA==", "url": "https://github.com/apache/flink/pull/12401#discussion_r432618358", "bodyText": "Good idea!\nRemoved MailboxProcessor.mainMailboxExecutor field.", "author": "rkhachatryan", "createdAt": "2020-05-29T17:01:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3Mzg3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NTA3OA==", "url": "https://github.com/apache/flink/pull/12401#discussion_r432375078", "bodyText": "nit: I would be slightly in favour of adding this method to the MailboxExecutor interface, but if you think opposite let it be for now.", "author": "pnowojski", "createdAt": "2020-05-29T09:45:21Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/source/ContinuousFileReaderOperator.java", "diffHunk": "@@ -311,17 +312,19 @@ private void enqueueProcessRecord() {\n \t}\n \n \tprivate void processRecord() throws IOException {\n-\t\tif (!state.prepareToProcessRecord(this)) {\n-\t\t\treturn;\n-\t\t}\n+\t\tdo {\n+\t\t\tif (!state.prepareToProcessRecord(this)) {\n+\t\t\t\treturn;\n+\t\t\t}\n \n-\t\treadAndCollectRecord();\n+\t\t\treadAndCollectRecord();\n \n-\t\tif (format.reachedEnd()) {\n-\t\t\tonSplitProcessed();\n-\t\t} else {\n-\t\t\tenqueueProcessRecord();\n-\t\t}\n+\t\t\tif (format.reachedEnd()) {\n+\t\t\t\tonSplitProcessed();\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t} while (executor.isIdle()); // todo: consider moving this loop into MailboxProcessor (return boolean \"re-execute\" from enqueued action)", "originalCommit": "fa16f36730c8a0794cfc9aa55bb99dbaa8ef4239", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NTU3NQ==", "url": "https://github.com/apache/flink/pull/12401#discussion_r432375575", "bodyText": "revert this change?", "author": "pnowojski", "createdAt": "2020-05-29T09:46:19Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/mailbox/MailboxExecutorImpl.java", "diffHunk": "@@ -50,7 +50,7 @@ public MailboxExecutorImpl(@Nonnull TaskMailbox mailbox, int priority, StreamTas\n \t}\n \n \tpublic MailboxExecutorImpl(@Nonnull TaskMailbox mailbox, int priority, StreamTaskActionExecutor actionExecutor, MailboxProcessor mailboxProcessor) {\n-\t\tthis.mailbox = mailbox;\n+\t\tthis.mailbox = (TaskMailboxImpl) mailbox;", "originalCommit": "5ae178ffebe69903ebe8d09bdd8709c299c86dc0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3bde38fba011e5c786da8f072543b673a5b25eb0", "url": "https://github.com/apache/flink/commit/3bde38fba011e5c786da8f072543b673a5b25eb0", "message": "[FLINK-16057][task] Optimize TaskMailbox state retrieval\n\nDon't lock in TaskMailboxImpl.getState for task thread.\nThis makes ContinuousFileReaderOperator about 29% faster.", "committedDate": "2020-05-29T16:23:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgyMzk4MA==", "url": "https://github.com/apache/flink/pull/12401#discussion_r432823980", "bodyText": "I was thinking about doing here:\nthis.mainMailboxExecutor = mailboxProcessor.getMainMailboxExecutor();\n\nor\nthis.mainMailboxExecutor = mailboxProcessor.getMinPriorityMailboxExecutor();\n\nto maintain the contract, that everything goes via MailboxProcessor one way or another.\nAs it is now, some actions are going via mailbox and actionExecutor bypassing the processor, which I'm not sure if it's as clean? But I'm not entirely sure.", "author": "pnowojski", "createdAt": "2020-05-30T08:47:33Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -276,6 +281,7 @@ protected StreamTask(\n \t\tthis.actionExecutor = Preconditions.checkNotNull(actionExecutor);\n \t\tthis.mailboxProcessor = new MailboxProcessor(this::processInput, mailbox, actionExecutor);\n \t\tthis.mailboxProcessor.initMetric(environment.getMetricGroup());\n+\t\tthis.mainMailboxExecutor = new MailboxExecutorImpl(mailbox, MIN_PRIORITY, actionExecutor);", "originalCommit": "810c8f3a23dd3bdf402bd7659f972b741d1fce8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3MDI0MA==", "url": "https://github.com/apache/flink/pull/12401#discussion_r433670240", "bodyText": "Done.", "author": "rkhachatryan", "createdAt": "2020-06-02T07:20:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgyMzk4MA=="}], "type": "inlineReview"}, {"oid": "e5414f176c2421b92c2c7880f516ae4046f41513", "url": "https://github.com/apache/flink/commit/e5414f176c2421b92c2c7880f516ae4046f41513", "message": "[FLINK-16057][hotfix][task] Remove MailboxProcessor.mainMailboxExecutor field\n\nCurrently, the field is unnecessary; further adding MailboxProcessor\nfield to MailboxExecutor creates cyclic dependency", "committedDate": "2020-06-02T07:19:14Z", "type": "commit"}, {"oid": "5378d6643fb985dff068bd6c13b73047bf7f91ce", "url": "https://github.com/apache/flink/commit/5378d6643fb985dff068bd6c13b73047bf7f91ce", "message": "[FLINK-16057][task] Optimize ContinuousFileReaderOperator\n\nCurrent approach of re-enqueuing mails creates an overhead\nvisible in benchmarks. This change eliminates unnecessary\nre-enqueueing of mails by checking mailboxExecutor.isIdle.", "committedDate": "2020-06-02T07:19:22Z", "type": "commit"}, {"oid": "9ee16834faff9045e1f356f4696b7b3e7834527c", "url": "https://github.com/apache/flink/commit/9ee16834faff9045e1f356f4696b7b3e7834527c", "message": "[FLINK-16057][task] Optimize TaskMailbox state retrieval\n\nDon't lock in TaskMailboxImpl.getState for task thread.\nThis makes ContinuousFileReaderOperator about 29% faster.", "committedDate": "2020-06-02T07:19:22Z", "type": "commit"}, {"oid": "9ee16834faff9045e1f356f4696b7b3e7834527c", "url": "https://github.com/apache/flink/commit/9ee16834faff9045e1f356f4696b7b3e7834527c", "message": "[FLINK-16057][task] Optimize TaskMailbox state retrieval\n\nDon't lock in TaskMailboxImpl.getState for task thread.\nThis makes ContinuousFileReaderOperator about 29% faster.", "committedDate": "2020-06-02T07:19:22Z", "type": "forcePushed"}]}