{"pr_number": 14526, "pr_title": "[FLINK-14814][WebUI] Highlight back pressured and busy nodes in the WebUI", "pr_createdAt": "2020-12-30T13:05:21Z", "pr_url": "https://github.com/apache/flink/pull/14526", "timeline": [{"oid": "f2d56f6bb144e0ab3588504fabc8deb18a18129f", "url": "https://github.com/apache/flink/commit/f2d56f6bb144e0ab3588504fabc8deb18a18129f", "message": "[hotfix] Remove unneccessary <br/> and improve formatting", "committedDate": "2020-12-30T13:06:44Z", "type": "forcePushed"}, {"oid": "581fee7ea3a656a997664368665cee270e8d8dc7", "url": "https://github.com/apache/flink/commit/581fee7ea3a656a997664368665cee270e8d8dc7", "message": "[FLINK-14814][webui] Color nodes based on back pressure", "committedDate": "2020-12-30T13:07:48Z", "type": "forcePushed"}, {"oid": "af89d36ef1ec641dd9acb240bd211132a52f3798", "url": "https://github.com/apache/flink/commit/af89d36ef1ec641dd9acb240bd211132a52f3798", "message": "[FLINK-19174] Fix idle and backpressured time accuracy on long sleeps\n\nIn particularly, if task is idling forever, as there are no new records incomming\nprevious version would report idleTime as 0% and busyTime as 100% which is incorrect.\n\nIn this version, idleTime metric is aware that idling period has started and can take\nthat into account when updating it's value.", "committedDate": "2020-12-31T10:04:26Z", "type": "forcePushed"}, {"oid": "eb574e5180fff6ceaf7b76035fc8c45c27a9fa09", "url": "https://github.com/apache/flink/commit/eb574e5180fff6ceaf7b76035fc8c45c27a9fa09", "message": "[FLINK-19174] Fix idle and backpressured time accuracy on long sleeps\n\nIn particularly, if task is idling forever, as there are no new records incomming\nprevious version would report idleTime as 0% and busyTime as 100% which is incorrect.\n\nIn this version, idleTime metric is aware that idling period has started and can take\nthat into account when updating it's value.", "committedDate": "2020-12-31T11:22:24Z", "type": "forcePushed"}, {"oid": "6cff7c3ed0b6694c5494bf4be9a1393cf7bec631", "url": "https://github.com/apache/flink/commit/6cff7c3ed0b6694c5494bf4be9a1393cf7bec631", "message": "[FLINK-19174] Fix idle and backpressured time accuracy on long sleeps\n\nIn particularly, if task is idling forever, as there are no new records incomming\nprevious version would report idleTime as 0% and busyTime as 100% which is incorrect.\n\nIn this version, idleTime metric is aware that idling period has started and can take\nthat into account when updating it's value.", "committedDate": "2020-12-31T12:45:32Z", "type": "forcePushed"}, {"oid": "9c058a5518d886948980c0df71bbfa58a12ff969", "url": "https://github.com/apache/flink/commit/9c058a5518d886948980c0df71bbfa58a12ff969", "message": "[FLINK-19174] Fix idle and backpressured time accuracy on long sleeps\n\nIn particularly, if task is idling forever, as there are no new records incomming\nprevious version would report idleTime as 0% and busyTime as 100% which is incorrect.\n\nIn this version, idleTime metric is aware that idling period has started and can take\nthat into account when updating it's value.", "committedDate": "2021-01-01T19:55:34Z", "type": "forcePushed"}, {"oid": "1bd73de4edd53b7a28cb9841518997e56caf6f9a", "url": "https://github.com/apache/flink/commit/1bd73de4edd53b7a28cb9841518997e56caf6f9a", "message": "[FLINK-19174] Fix idle and backpressured time accuracy on long sleeps\n\nIn particularly, if task is idling forever, as there are no new records incomming\nprevious version would report idleTime as 0% and busyTime as 100% which is incorrect.\n\nIn this version, idleTime metric is aware that idling period has started and can take\nthat into account when updating it's value.", "committedDate": "2021-01-02T19:40:29Z", "type": "forcePushed"}, {"oid": "8d3e6ca74fa6599b5f04313c9e954b9c8b294549", "url": "https://github.com/apache/flink/commit/8d3e6ca74fa6599b5f04313c9e954b9c8b294549", "message": "[FLINK-19174] Fix idle and backpressured time accuracy on long sleeps\n\nIn particularly, if task is idling forever, as there are no new records incomming\nprevious version would report idleTime as 0% and busyTime as 100% which is incorrect.\n\nIn this version, idleTime metric is aware that idling period has started and can take\nthat into account when updating it's value.", "committedDate": "2021-01-03T07:18:32Z", "type": "forcePushed"}, {"oid": "36c6736bfdc8ec1d28bedf3f36c8552415fda611", "url": "https://github.com/apache/flink/commit/36c6736bfdc8ec1d28bedf3f36c8552415fda611", "message": "[FLINK-19174] Fix idle and backpressured time accuracy on long sleeps\n\nIn particularly, if task is idling forever, as there are no new records incomming\nprevious version would report idleTime as 0% and busyTime as 100% which is incorrect.\n\nIn this version, idleTime metric is aware that idling period has started and can take\nthat into account when updating it's value.", "committedDate": "2021-01-03T07:23:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMxODU5MQ==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551318591", "bodyText": "move to the metrics package?", "author": "zentol", "createdAt": "2021-01-04T13:33:13Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;", "originalCommit": "36c6736bfdc8ec1d28bedf3f36c8552415fda611", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMyMTEwNA==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551321104", "bodyText": "You could make testing easier by making the time measurements be based on a Clock.", "author": "zentol", "createdAt": "2021-01-04T13:38:02Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/metrics/groups/TimeGaugeTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;\n+\n+import org.apache.flink.metrics.View;\n+\n+import org.junit.Test;\n+\n+import static org.hamcrest.Matchers.greaterThanOrEqualTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+/** Tests for {@link TimeGauge}. */\n+public class TimeGaugeTest {\n+    private static final long SLEEP = 10;\n+\n+    @Test\n+    public void testBasicUsage() throws Exception {\n+        TimeGauge gauge = new TimeGauge();\n+\n+        gauge.update();\n+        assertThat(gauge.getValue(), is(0L));\n+\n+        gauge.markStart();\n+        Thread.sleep(SLEEP);", "originalCommit": "36c6736bfdc8ec1d28bedf3f36c8552415fda611", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMyMzA3Mg==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551323072", "bodyText": "It is not obvious from this description why this is important.\nOverall I would wager that it would be difficult to accurately state what this thing does based on the javadocs.\nMaybe something alone the lines of \"...measures how much time is spent in a given state, with entry into that state being signaled by #markStart()\" could help with that.\nThen it also makes it obvious why it is important to account for the case that markEnd has not been called yet.", "author": "zentol", "createdAt": "2021-01-04T13:42:04Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.metrics.Gauge;\n+import org.apache.flink.metrics.View;\n+\n+/**\n+ * {@link TimeGauge} encapsulate logic of measuring time rates (like idleTime ms/s). In particularly\n+ * it takes care of the case, when single measurement (as defined by {@link #markStart()} and {@link\n+ * #markEnd()}), crosses the boundary of single {@link #update()} interval. Thanks to the {@link\n+ * #markStart()} {@link TimeGauge} can correctly calculate next value in {@link #update()}, even if\n+ * this measurement hasn't not ended ({@link #markEnd()}).", "originalCommit": "36c6736bfdc8ec1d28bedf3f36c8552415fda611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM1Njc0OQ==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551356749", "bodyText": "I've rephrased the comment. Could you take a look? Also I have renamed TimeGauge to TimerGauge.", "author": "pnowojski", "createdAt": "2021-01-04T14:42:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMyMzA3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUwNTk5MA==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551505990", "bodyText": "Looks good \ud83d\udc4d", "author": "zentol", "createdAt": "2021-01-04T19:00:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMyMzA3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMyNDUxNg==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551324516", "bodyText": "This question may come a bit late, but why are we exposing this as msPerSecond instead of a percentage? I understand they are equivalent (1000 == 100%), but I'd think a percentage would be easier to understand?", "author": "zentol", "createdAt": "2021-01-04T13:44:54Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.metrics.Gauge;\n+import org.apache.flink.metrics.View;\n+\n+/**\n+ * {@link TimeGauge} encapsulate logic of measuring time rates (like idleTime ms/s). In particularly", "originalCommit": "36c6736bfdc8ec1d28bedf3f36c8552415fda611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM1MjcyOA==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551352728", "bodyText": "I think this was unconscious decision. It was kind of natural from the perspective that we are measuring idleTime but the MeterView is exposing it a ms/s rate.\nBut yes, maybe percentage would have been better? Do you think it's worth the hassle of changing the API at this point of time?", "author": "pnowojski", "createdAt": "2021-01-04T14:35:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMyNDUxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUwODUwOA==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551508508", "bodyText": "hmm......well we wouldn't necessarily have to change the API in that sense; should be possible to do this in a backwards-compatible way.\nWe could expose these as (idle|backpressure|busy)Ratio with the value being between [0.000, 1.000], and also under the old name(s) with the value multiplied by 1000?\nThe main benefit I see is that this is quite generic and independent of specific units; we can have other metrics doing rates over minutes yet still work the same value range. So it's a bit of future proofing.", "author": "zentol", "createdAt": "2021-01-04T19:06:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMyNDUxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMyNjA4OA==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551326088", "bodyText": "Wrong class? Surely there is no timer-like class in Preconditions.", "author": "zentol", "createdAt": "2021-01-04T13:47:46Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",", "originalCommit": "36c6736bfdc8ec1d28bedf3f36c8552415fda611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM1MDQ5NA==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551350494", "bodyText": "ops, I copied pasted MeterView and missed this comment. Removed.", "author": "pnowojski", "createdAt": "2021-01-04T14:31:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMyNjA4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMzMDUzNA==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551330534", "bodyText": "Couldn't we simplify this be setting currentCount to 0?", "author": "zentol", "createdAt": "2021-01-04T13:56:24Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.metrics.Gauge;\n+import org.apache.flink.metrics.View;\n+\n+/**\n+ * {@link TimeGauge} encapsulate logic of measuring time rates (like idleTime ms/s). In particularly\n+ * it takes care of the case, when single measurement (as defined by {@link #markStart()} and {@link\n+ * #markEnd()}), crosses the boundary of single {@link #update()} interval. Thanks to the {@link\n+ * #markStart()} {@link TimeGauge} can correctly calculate next value in {@link #update()}, even if\n+ * this measurement hasn't not ended ({@link #markEnd()}).\n+ */\n+public class TimeGauge implements Gauge<Long>, View {\n+    private long previousCount;\n+    private long currentCount;\n+    private long lastDifference;\n+    private long currentMeasurementStart;\n+\n+    public synchronized void markStart() {\n+        if (currentMeasurementStart == 0) {\n+            currentMeasurementStart = System.currentTimeMillis();\n+        }\n+    }\n+\n+    public synchronized void markEnd() {\n+        if (currentMeasurementStart != 0) {\n+            currentCount += System.currentTimeMillis() - currentMeasurementStart;\n+            currentMeasurementStart = 0;\n+        }\n+    }\n+\n+    @Override\n+    public synchronized void update() {\n+        if (currentMeasurementStart != 0) {\n+            long now = System.currentTimeMillis();\n+            currentCount += now - currentMeasurementStart;\n+            currentMeasurementStart = now;\n+        }\n+        lastDifference = (currentCount - previousCount) / UPDATE_INTERVAL_SECONDS;\n+        lastDifference = Math.max(Math.min(lastDifference, 1000), 0);\n+        previousCount = currentCount;", "originalCommit": "36c6736bfdc8ec1d28bedf3f36c8552415fda611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM1NzE2Mw==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551357163", "bodyText": "Yes we could :) Thanks for the suggestion.", "author": "pnowojski", "createdAt": "2021-01-04T14:43:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMzMDUzNA=="}], "type": "inlineReview"}, {"oid": "71569bc3355e08260077a05b0c349bfa74ee4700", "url": "https://github.com/apache/flink/commit/71569bc3355e08260077a05b0c349bfa74ee4700", "message": "[FLINK-19174] Fix idle and backpressured time accuracy on long sleeps\n\nIn particularly, if task is idling forever, as there are no new records incomming\nprevious version would report idleTime as 0% and busyTime as 100% which is incorrect.\n\nIn this version, idleTime metric is aware that idling period has started and can take\nthat into account when updating it's value.", "committedDate": "2021-01-04T14:17:36Z", "type": "forcePushed"}, {"oid": "542b4bd111eaa7bedc6d6b93b43a1e7bd889bff8", "url": "https://github.com/apache/flink/commit/542b4bd111eaa7bedc6d6b93b43a1e7bd889bff8", "message": "fixup! [FLINK-19174] Fix idle and backpressured time accuracy on long sleeps", "committedDate": "2021-01-04T14:56:42Z", "type": "forcePushed"}, {"oid": "ac07adaea38d996036646e20e988fef3e0b35427", "url": "https://github.com/apache/flink/commit/ac07adaea38d996036646e20e988fef3e0b35427", "message": "fixup! [FLINK-19174] Fix idle and backpressured time accuracy on long sleeps", "committedDate": "2021-01-04T14:58:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM1MzcxOQ==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551353719", "bodyText": "Do we have to rely on UPDATE_INTERVAL_SECONDS?\nWhy not to record previous update time (currentTimeMillis) instead?", "author": "rkhachatryan", "createdAt": "2021-01-04T14:37:14Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.metrics.Gauge;\n+import org.apache.flink.metrics.View;\n+\n+/**\n+ * {@link TimeGauge} encapsulate logic of measuring time rates (like idleTime ms/s). In particularly\n+ * it takes care of the case, when single measurement (as defined by {@link #markStart()} and {@link\n+ * #markEnd()}), crosses the boundary of single {@link #update()} interval. Thanks to the {@link\n+ * #markStart()} {@link TimeGauge} can correctly calculate next value in {@link #update()}, even if\n+ * this measurement hasn't not ended ({@link #markEnd()}).\n+ */\n+public class TimeGauge implements Gauge<Long>, View {\n+    private long previousCount;\n+    private long currentCount;\n+    private long lastDifference;\n+    private long currentMeasurementStart;\n+\n+    public synchronized void markStart() {\n+        if (currentMeasurementStart == 0) {\n+            currentMeasurementStart = System.currentTimeMillis();\n+        }\n+    }\n+\n+    public synchronized void markEnd() {\n+        if (currentMeasurementStart != 0) {\n+            currentCount += System.currentTimeMillis() - currentMeasurementStart;\n+            currentMeasurementStart = 0;\n+        }\n+    }\n+\n+    @Override\n+    public synchronized void update() {\n+        if (currentMeasurementStart != 0) {\n+            long now = System.currentTimeMillis();\n+            currentCount += now - currentMeasurementStart;\n+            currentMeasurementStart = now;\n+        }\n+        lastDifference = (currentCount - previousCount) / UPDATE_INTERVAL_SECONDS;", "originalCommit": "71569bc3355e08260077a05b0c349bfa74ee4700", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM5NTc5MQ==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551395791", "bodyText": "I've tried to implement it and it looked like not worth the extra complexity. It would make also testing a bit more complicated.", "author": "pnowojski", "createdAt": "2021-01-04T15:45:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM1MzcxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM1OTE0MA==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551359140", "bodyText": "This method (processInput) became quite long now.\nCan we extract getBackPressuredGauge or onOutputUnavailable?", "author": "rkhachatryan", "createdAt": "2021-01-04T14:46:26Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -400,9 +404,23 @@ protected void processInput(MailboxDefaultAction.Controller controller) throws E\n             controller.allActionsCompleted();\n             return;\n         }\n-        CompletableFuture<?> jointFuture = getInputOutputJointFuture(status);\n-        MailboxDefaultAction.Suspension suspendedDefaultAction = controller.suspendDefaultAction();\n-        assertNoException(jointFuture.thenRun(suspendedDefaultAction::resume));\n+\n+        final Suspension suspension = controller.suspendDefaultAction();", "originalCommit": "71569bc3355e08260077a05b0c349bfa74ee4700", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM4NTQyNQ==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551385425", "bodyText": "I have shortened it while you were doing the review, when I was changing the semantic of idleTimeMsPerSecond metric. Can you change the fixup commit if it's good enough?", "author": "pnowojski", "createdAt": "2021-01-04T15:28:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM1OTE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NDI3Mg==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551444272", "bodyText": "I think it can be shortened further by inlining gauges and removing if:\nassertNoException(inputProcessor.getAvailableFuture()\n    .thenRun(new ResumeWrapper(\n        suspension,\n        recordWriter.isAvailable()\n                ? ioMetrics.getIdleTimeMsPerSecond()\n                : ioMetrics.getBackPressuredTimePerSecond())));\n\n(the gauge is still computed at the time of creation of callback)\nWDYT?", "author": "rkhachatryan", "createdAt": "2021-01-04T17:01:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM1OTE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAwNzM3Nw==", "url": "https://github.com/apache/flink/pull/14526#discussion_r552007377", "bodyText": "I have simplified it, but in your example you missed that sometimes we need to wait on inputProcessor.getAvailableFuture() and other times on recordWriter.getAvailableFuture()\nSurprisingly this issue was covered by unit tests :)", "author": "pnowojski", "createdAt": "2021-01-05T15:33:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM1OTE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAxMzU0MA==", "url": "https://github.com/apache/flink/pull/14526#discussion_r552013540", "bodyText": "Thanks for fixing it. I think the current version still under-estimates idle time if both input and output are consistently unavailable. But probably that's fine.", "author": "rkhachatryan", "createdAt": "2021-01-05T15:43:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM1OTE0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM2MTE5MA==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551361190", "bodyText": "IIUC, the same TimeGauge object is now used by SteamTask and BufferWritingResultPartition.\nIf that's true, one of the markStart calls will be ignored, and \"wrong\" markEnd can record currentCount.", "author": "rkhachatryan", "createdAt": "2021-01-04T14:49:43Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.metrics.Gauge;\n+import org.apache.flink.metrics.View;\n+\n+/**\n+ * {@link TimeGauge} encapsulate logic of measuring time rates (like idleTime ms/s). In particularly\n+ * it takes care of the case, when single measurement (as defined by {@link #markStart()} and {@link\n+ * #markEnd()}), crosses the boundary of single {@link #update()} interval. Thanks to the {@link\n+ * #markStart()} {@link TimeGauge} can correctly calculate next value in {@link #update()}, even if\n+ * this measurement hasn't not ended ({@link #markEnd()}).\n+ */\n+public class TimeGauge implements Gauge<Long>, View {\n+    private long previousCount;\n+    private long currentCount;\n+    private long lastDifference;\n+    private long currentMeasurementStart;\n+\n+    public synchronized void markStart() {\n+        if (currentMeasurementStart == 0) {\n+            currentMeasurementStart = System.currentTimeMillis();", "originalCommit": "71569bc3355e08260077a05b0c349bfa74ee4700", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM4MzYxOQ==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551383619", "bodyText": "What is the scenario for that to happen?\nBufferWritingResultPartition call happens only when processing input, so it's outside of the [markStart, markEnd] calls from the the StreamTask?", "author": "pnowojski", "createdAt": "2021-01-04T15:25:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM2MTE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NDMyNg==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551454326", "bodyText": "I think you are right.\nI was concerned about MailboxProcessor updating idleTime but I see it's removed so it should be fine.\nEdit:\nBut it's still error-prone IMO. If it's not too complicated, I'd replace it with two separate gauges and sum their values during reporting.", "author": "rkhachatryan", "createdAt": "2021-01-04T17:19:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM2MTE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg5OTA3NQ==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551899075", "bodyText": "I agree this is a bit error-prone, but I think adding separate TimerGauge per each place where we are starting a measurement is probably not the way to go. It could quickly multiply the number of declared fields/gauges in TaskIOMetricGroup to facilitate every call place.\nIf this will prove to be a real issue, we could solve this issue for example by bumping a counter in each markStart() call. markEnd would decrease that counter, and we would measure the time between first markStart and last markEnd call. But I think that's over engineering at the moment?", "author": "pnowojski", "createdAt": "2021-01-05T12:22:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM2MTE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk2MDYxMg==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551960612", "bodyText": "There are only two such places ATM and I don't think adding a (final) object per partition creates a visible overhead.\nBut I agree we can defer this discussion.", "author": "rkhachatryan", "createdAt": "2021-01-05T14:20:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM2MTE5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM2MTU4OQ==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551361589", "bodyText": "nit: can be inlined", "author": "rkhachatryan", "createdAt": "2021-01-04T14:50:23Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TaskIOMetricGroup.java", "diffHunk": "@@ -98,10 +105,26 @@ public Counter getNumBuffersOutCounter() {\n         return numBuffersOut;\n     }\n \n-    public Meter getIdleTimeMsPerSecond() {\n+    public TimeGauge getIdleTimeMsPerSecond() {\n         return idleTimePerSecond;\n     }\n \n+    public TimeGauge getBackPressuredTimePerSecond() {\n+        return backPressuredTimePerSecond;\n+    }\n+\n+    public void setEnableBusyTime(boolean enabled) {\n+        busyTimeEnabled = enabled;\n+    }\n+\n+    private double getBusyTimePerSecond() {\n+        double v =", "originalCommit": "71569bc3355e08260077a05b0c349bfa74ee4700", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM2ODMzNw==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551368337", "bodyText": "Typo?", "author": "rkhachatryan", "createdAt": "2021-01-04T15:00:46Z", "path": "flink-runtime-web/web-dashboard/src/app/share/common/dagre/node.component.ts", "diffHunk": "@@ -9,7 +9,7 @@\n  *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * Unless required by applicable law or agreed to in writing, software\n+ * Unless requilightRed by applicable law or agreed to in writing, software", "originalCommit": "ac07adaea38d996036646e20e988fef3e0b35427", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM2OTI1Mw==", "url": "https://github.com/apache/flink/pull/14526#discussion_r551369253", "bodyText": "I think it's better to name these colors semantically, e.g. back-pressuring instead of red, back-pressured instead of black.", "author": "rkhachatryan", "createdAt": "2021-01-04T15:02:16Z", "path": "flink-runtime-web/web-dashboard/src/app/share/common/dagre/node.component.ts", "diffHunk": "@@ -31,8 +31,18 @@ export class NodeComponent {\n   operatorStrategy: string | null;\n   parallelism: number | null;\n   lowWatermark: number | null | undefined;\n+  backPressuredPercentage: number | undefined = NaN;\n+  busyPercentage: number | undefined = NaN;\n+  backgroundColor: string | undefined;\n+  borderColor: string | undefined;\n   height = 0;\n   id: string;\n+  lightRed = '#ee6464';\n+  lightBlue = '#5db1ff';\n+  lightBlack = '#888888';\n+  red = '#ee2222';\n+  blue = '#1890ff';\n+  black = '#000000';", "originalCommit": "ac07adaea38d996036646e20e988fef3e0b35427", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6a91c22600fb5c1b40831e9173f75ee58455d5e4", "url": "https://github.com/apache/flink/commit/6a91c22600fb5c1b40831e9173f75ee58455d5e4", "message": "[FLINK-19174] Fix idle and backpressured time accuracy on long sleeps\n\nIn particularly, if task is idling forever, as there are no new records incomming\nprevious version would report idleTime as 0% and busyTime as 100% which is incorrect.\n\nIn this version, idleTime metric is aware that idling period has started and can take\nthat into account when updating it's value.", "committedDate": "2021-01-04T15:55:36Z", "type": "forcePushed"}, {"oid": "022f89d7468e2c8fe5dc5820b2de3a9b4f9b16a5", "url": "https://github.com/apache/flink/commit/022f89d7468e2c8fe5dc5820b2de3a9b4f9b16a5", "message": "[FLINK-19174][metrics] Fix idle and backpressured time accuracy on long sleeps\n\nIn particularly, if task is idling forever, as there are no new records incomming\nprevious version would report idleTime as 0% and busyTime as 100% which is incorrect.\n\nIn this version, idleTime metric is aware that idling period has started and can take\nthat into account when updating it's value.", "committedDate": "2021-01-04T16:24:26Z", "type": "forcePushed"}, {"oid": "ad105c66a58a01adfffa51eb8fe78b750056bc21", "url": "https://github.com/apache/flink/commit/ad105c66a58a01adfffa51eb8fe78b750056bc21", "message": "[FLINK-19174][metrics] Fix idle and backpressured time accuracy on long sleeps\n\nIn particularly, if task is idling forever, as there are no new records incomming\nprevious version would report idleTime as 0% and busyTime as 100% which is incorrect.\n\nIn this version, idleTime metric is aware that idling period has started and can take\nthat into account when updating it's value.", "committedDate": "2021-01-04T19:31:40Z", "type": "forcePushed"}, {"oid": "69d825d0856f54a9c038469e5e920eaa236320f9", "url": "https://github.com/apache/flink/commit/69d825d0856f54a9c038469e5e920eaa236320f9", "message": "run WebUI in WordCount", "committedDate": "2021-01-05T12:29:21Z", "type": "forcePushed"}, {"oid": "c192498b5438fc51c7199f1d44b89077fb5aadb4", "url": "https://github.com/apache/flink/commit/c192498b5438fc51c7199f1d44b89077fb5aadb4", "message": "[FLINK-19174][metrics] Fix idle and backpressured time accuracy on long sleeps\n\nIn particularly, if task is idling forever, as there are no new records incomming\nprevious version would report idleTime as 0% and busyTime as 100% which is incorrect.\n\nIn this version, idleTime metric is aware that idling period has started and can take\nthat into account when updating it's value.", "committedDate": "2021-01-05T12:29:16Z", "type": "forcePushed"}, {"oid": "72fa7b1b3e5f43116150c2476afbeaccf29dcdb3", "url": "https://github.com/apache/flink/commit/72fa7b1b3e5f43116150c2476afbeaccf29dcdb3", "message": "[hotfix][metrics] Rename constant IS_BACKPRESSURE to IS_BACK_PRESSURE", "committedDate": "2021-01-05T13:54:33Z", "type": "commit"}, {"oid": "5a48869cb46166670124507aea7251c867f22bb8", "url": "https://github.com/apache/flink/commit/5a48869cb46166670124507aea7251c867f22bb8", "message": "[hotfix][task] Optimize and simplify Task#isBackPressured", "committedDate": "2021-01-05T13:54:34Z", "type": "commit"}, {"oid": "916982a7cd81f0b8e3d8b3d4ca06605149d3e90d", "url": "https://github.com/apache/flink/commit/916982a7cd81f0b8e3d8b3d4ca06605149d3e90d", "message": "[FLINK-19174][metrics] Fix idle and backpressured time accuracy on long sleeps\n\nIn particularly, if task is idling forever, as there are no new records incomming\nprevious version would report idleTime as 0% and busyTime as 100% which is incorrect.\n\nIn this version, idleTime metric is aware that idling period has started and can take\nthat into account when updating it's value.", "committedDate": "2021-01-05T13:54:34Z", "type": "forcePushed"}, {"oid": "90ef17210a33bd96e5afa507418e6e2032215659", "url": "https://github.com/apache/flink/commit/90ef17210a33bd96e5afa507418e6e2032215659", "message": "[FLINK-20717][metrics] Provide new backPressuredTimeMsPerSecond metric", "committedDate": "2021-01-05T15:03:50Z", "type": "commit"}, {"oid": "44d7b2289f034c2bae565c558c44afddb4867bc4", "url": "https://github.com/apache/flink/commit/44d7b2289f034c2bae565c558c44afddb4867bc4", "message": "[FLINK-20718][metrics] Add busyTimeMsPerSecond metric\n\nIt's defined as inverted value of idleTimeMsPerSecond", "committedDate": "2021-01-05T15:03:50Z", "type": "commit"}, {"oid": "102277ec1015aebae0cce83496d33d61051ba425", "url": "https://github.com/apache/flink/commit/102277ec1015aebae0cce83496d33d61051ba425", "message": "[FLINK-14814][webui] Display back pressured and busy times", "committedDate": "2021-01-05T15:03:50Z", "type": "commit"}, {"oid": "e6ef68d04e5fcaed123c5ee0931cedb72adc83f3", "url": "https://github.com/apache/flink/commit/e6ef68d04e5fcaed123c5ee0931cedb72adc83f3", "message": "[FLINK-14814][webui] Color nodes based on back pressure", "committedDate": "2021-01-05T15:03:50Z", "type": "commit"}, {"oid": "9dc138055350ad401ac7783619bd3d3968d1806e", "url": "https://github.com/apache/flink/commit/9dc138055350ad401ac7783619bd3d3968d1806e", "message": "[FLINK-19174][metrics] Fix idle and backpressured time accuracy on long sleeps\n\nIn particularly, if task is idling forever, as there are no new records incomming\nprevious version would report idleTime as 0% and busyTime as 100% which is incorrect.\n\nIn this version, idleTime metric is aware that idling period has started and can take\nthat into account when updating it's value.", "committedDate": "2021-01-05T15:03:51Z", "type": "commit"}, {"oid": "9dc138055350ad401ac7783619bd3d3968d1806e", "url": "https://github.com/apache/flink/commit/9dc138055350ad401ac7783619bd3d3968d1806e", "message": "[FLINK-19174][metrics] Fix idle and backpressured time accuracy on long sleeps\n\nIn particularly, if task is idling forever, as there are no new records incomming\nprevious version would report idleTime as 0% and busyTime as 100% which is incorrect.\n\nIn this version, idleTime metric is aware that idling period has started and can take\nthat into account when updating it's value.", "committedDate": "2021-01-05T15:03:51Z", "type": "forcePushed"}]}