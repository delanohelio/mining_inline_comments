{"pr_number": 12321, "pr_title": "[FLINK-17872][doc] Add document for writing Avro files with StreamingFileSink", "pr_createdAt": "2020-05-25T12:41:39Z", "pr_url": "https://github.com/apache/flink/pull/12321", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MDczNQ==", "url": "https://github.com/apache/flink/pull/12321#discussion_r434360735", "bodyText": "maybe \"For creating customized Avro writers, e.g. enabling compression, ...\" ?", "author": "zhuzhurk", "createdAt": "2020-06-03T07:24:47Z", "path": "docs/dev/connectors/streamfile_sink.md", "diffHunk": "@@ -204,6 +205,65 @@ input.addSink(sink)\n </div>\n </div>\n \n+#### Avro format\n+\n+Flink also provides built-in support for writing data into Avro files. A list of convenience methods to create\n+Avro writer factories and their associated documentation can be found in the \n+[AvroWriters]({{ site.javadocs_baseurl }}/api/java/org/apache/flink/formats/avro/AvroWriters.html) class.\n+\n+For creating customized Avro writers like enabling compression, users need to create the `AvroWriterFactory`", "originalCommit": "56bdc3a61f65cb30b48cf7f932520be02ebed734", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM4MDgwNg==", "url": "https://github.com/apache/flink/pull/12321#discussion_r434380806", "bodyText": "Would it make sense to add an example on creating customized Avro writers?", "author": "zhuzhurk", "createdAt": "2020-06-03T08:00:51Z", "path": "docs/dev/connectors/streamfile_sink.md", "diffHunk": "@@ -204,6 +205,65 @@ input.addSink(sink)\n </div>\n </div>\n \n+#### Avro format\n+\n+Flink also provides built-in support for writing data into Avro files. A list of convenience methods to create\n+Avro writer factories and their associated documentation can be found in the \n+[AvroWriters]({{ site.javadocs_baseurl }}/api/java/org/apache/flink/formats/avro/AvroWriters.html) class.\n+\n+For creating customized Avro writers like enabling compression, users need to create the `AvroWriterFactory`\n+with a custom implementation of the [AvroBuilder]({{ site.javadocs_baseurl }}/api/java/org/apache/flink/formats/avro/AvroBuilder.html) interface.", "originalCommit": "56bdc3a61f65cb30b48cf7f932520be02ebed734", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MDUzMg==", "url": "https://github.com/apache/flink/pull/12321#discussion_r436340532", "bodyText": "I have added the example for the customized Avro writers.", "author": "gaoyunhaii", "createdAt": "2020-06-07T08:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM4MDgwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2OTkwNQ==", "url": "https://github.com/apache/flink/pull/12321#discussion_r436469905", "bodyText": "Better to use lambda, because lambda is serializable, but inner class depends on outer class.", "author": "JingsongLi", "createdAt": "2020-06-08T05:53:20Z", "path": "docs/dev/connectors/streamfile_sink.md", "diffHunk": "@@ -204,6 +205,109 @@ input.addSink(sink)\n </div>\n </div>\n \n+#### Avro format\n+\n+Flink also provides built-in support for writing data into Avro files. A list of convenience methods to create\n+Avro writer factories and their associated documentation can be found in the \n+[AvroWriters]({{ site.javadocs_baseurl }}/api/java/org/apache/flink/formats/avro/AvroWriters.html) class.\n+\n+To use the Avro writers in your application you need to add the following dependency:\n+\n+{% highlight xml %}\n+<dependency>\n+  <groupId>org.apache.flink</groupId>\n+  <artifactId>flink-avro</artifactId>\n+  <version>{{ site.version }}</version>\n+</dependency>\n+{% endhighlight %}\n+\n+A StreamingFileSink that writes data to Avro files can be created like this:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"java\" markdown=\"1\">\n+{% highlight java %}\n+import org.apache.flink.streaming.api.functions.sink.filesystem.StreamingFileSink;\n+import org.apache.flink.formats.avro.AvroWriters;\n+import org.apache.avro.Schema;\n+\n+\n+Schema schema = ...;\n+DataStream<GenericRecord> stream = ...;\n+\n+final StreamingFileSink<GenericRecord> sink = StreamingFileSink\n+\t.forBulkFormat(outputBasePath, AvroWriters.forGenericRecord(schema))\n+\t.build();\n+\n+input.addSink(sink);\n+\n+{% endhighlight %}\n+</div>\n+<div data-lang=\"scala\" markdown=\"1\">\n+{% highlight scala %}\n+import org.apache.flink.streaming.api.functions.sink.filesystem.StreamingFileSink\n+import org.apache.flink.formats.avro.AvroWriters\n+import org.apache.avro.Schema\n+\n+val schema: Schema = ...\n+val input: DataStream[GenericRecord] = ...\n+\n+val sink: StreamingFileSink[GenericRecord] = StreamingFileSink\n+    .forBulkFormat(outputBasePath, AvroWriters.forGenericRecord(schema))\n+    .build()\n+\n+input.addSink(sink)\n+\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+For creating customized Avro writers, e.g. enabling compression, users need to create the `AvroWriterFactory`\n+with a custom implementation of the [AvroBuilder]({{ site.javadocs_baseurl }}/api/java/org/apache/flink/formats/avro/AvroBuilder.html) interface:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"java\" markdown=\"1\">\n+{% highlight java %}\n+AvroWriterFactory<?> factory = new AvroWriterFactory<>(new AvroBuilder<Address>() {\n+\t@Override\n+\tpublic DataFileWriter<Address> createWriter(OutputStream out) throws IOException {", "originalCommit": "23a939d18a7e3b989e521963e0399b73c775165d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "af9e843cca7e5fc94b85a9cf61359eb350a82fa5", "url": "https://github.com/apache/flink/commit/af9e843cca7e5fc94b85a9cf61359eb350a82fa5", "message": "[FLINK-17872][docs] Add document for writing Avro files with StreamingFileSink", "committedDate": "2020-06-08T11:35:51Z", "type": "commit"}, {"oid": "17461cb077f242c89fbba19bb950d40f3beefe5d", "url": "https://github.com/apache/flink/commit/17461cb077f242c89fbba19bb950d40f3beefe5d", "message": "Fix comments", "committedDate": "2020-06-08T11:35:51Z", "type": "commit"}, {"oid": "17461cb077f242c89fbba19bb950d40f3beefe5d", "url": "https://github.com/apache/flink/commit/17461cb077f242c89fbba19bb950d40f3beefe5d", "message": "Fix comments", "committedDate": "2020-06-08T11:35:51Z", "type": "forcePushed"}, {"oid": "e56394832b889c4796edf369f3f5d198781d5dbd", "url": "https://github.com/apache/flink/commit/e56394832b889c4796edf369f3f5d198781d5dbd", "message": "Replace with lambda", "committedDate": "2020-06-09T00:20:45Z", "type": "commit"}]}