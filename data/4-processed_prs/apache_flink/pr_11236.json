{"pr_number": 11236, "pr_title": "[FLINK-16269][FLINK-16108][table-planner-blink] Fix schema of query and sink do not match when generic or POJO type is requested", "pr_createdAt": "2020-02-27T10:32:22Z", "pr_url": "https://github.com/apache/flink/pull/11236", "timeline": [{"oid": "6454804b4dd2e9d7295cc49e26940cac9d0cf9a1", "url": "https://github.com/apache/flink/commit/6454804b4dd2e9d7295cc49e26940cac9d0cf9a1", "message": "[FLINK-16269][table-planner-blink] Fix schema of query and sink do not match when generic type is requested", "committedDate": "2020-02-27T10:01:05Z", "type": "commit"}, {"oid": "7404df3a2130267c63a43d42398f08fd6ae09b0b", "url": "https://github.com/apache/flink/commit/7404df3a2130267c63a43d42398f08fd6ae09b0b", "message": "[FLINK-16108][table-planner-blink] Fix schema of query and sink do not match when POJO type is requested\n\nThis also fixes failure of StreamSQLExample when running in blink planner.", "committedDate": "2020-02-27T10:01:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA0MTI3OQ==", "url": "https://github.com/apache/flink/pull/11236#discussion_r385041279", "bodyText": "Please help to check this change. cc @twalthr", "author": "wuchong", "createdAt": "2020-02-27T10:33:19Z", "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/utils/LegacyTypeInfoDataTypeConverter.java", "diffHunk": "@@ -181,6 +182,10 @@ else if (typeInfo instanceof CompositeType) {\n \t\t\treturn createLegacyType(LogicalTypeRoot.STRUCTURED_TYPE, typeInfo);\n \t\t}\n \n+\t\telse if (typeInfo instanceof GenericTypeInfo) {\n+\t\t\treturn DataTypes.RAW(typeInfo).bridgedTo(typeInfo.getTypeClass());", "originalCommit": "7404df3a2130267c63a43d42398f08fd6ae09b0b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fd488f5cf0bf428170cb72cf434e01780cac8ef7", "url": "https://github.com/apache/flink/commit/fd488f5cf0bf428170cb72cf434e01780cac8ef7", "message": "fix checkstyle", "committedDate": "2020-02-27T11:38:40Z", "type": "commit"}, {"oid": "c2e5a4fb73a7b2aca22e914e57b36bc3128bb966", "url": "https://github.com/apache/flink/commit/c2e5a4fb73a7b2aca22e914e57b36bc3128bb966", "message": "fix", "committedDate": "2020-02-27T12:16:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMTE2Ng==", "url": "https://github.com/apache/flink/pull/11236#discussion_r386801166", "bodyText": "Can you add test to LegacyTypeInfoDataTypeConverterTest?", "author": "JingsongLi", "createdAt": "2020-03-03T05:05:40Z", "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/utils/LegacyTypeInfoDataTypeConverter.java", "diffHunk": "@@ -181,6 +182,10 @@ else if (typeInfo instanceof CompositeType) {\n \t\t\treturn createLegacyType(LogicalTypeRoot.STRUCTURED_TYPE, typeInfo);\n \t\t}\n \n+\t\telse if (typeInfo instanceof GenericTypeInfo) {", "originalCommit": "7404df3a2130267c63a43d42398f08fd6ae09b0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkxNzE1NA==", "url": "https://github.com/apache/flink/pull/11236#discussion_r386917154", "bodyText": "LegacyTypeInfoDataTypeConverterTest already covers RAW type, I updated the test result.", "author": "wuchong", "createdAt": "2020-03-03T10:10:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMTE2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMTgxOQ==", "url": "https://github.com/apache/flink/pull/11236#discussion_r386801819", "bodyText": "Ah... Yes, it is return type instead of inputType.", "author": "JingsongLi", "createdAt": "2020-03-03T05:08:40Z", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/SinkCodeGenerator.scala", "diffHunk": "@@ -83,8 +86,10 @@ object SinkCodeGenerator {\n             inputRowType,\n             inputTerm,\n             inputFieldMapping = Option(mapping))\n+        val outputBaseRowType = new BaseRowTypeInfo(\n+          getCompositeTypes(pojo).map(fromTypeInfoToLogicalType): _*)\n         val conversion = resultGenerator.generateConverterResultExpression(\n-          inputRowType,", "originalCommit": "7404df3a2130267c63a43d42398f08fd6ae09b0b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMjEzNQ==", "url": "https://github.com/apache/flink/pull/11236#discussion_r386802135", "bodyText": "It is pojo now, don't need getCompositeTypes.\nJust RowType.of((0 until ct.getArity).map(ct.getTypeAt).toArray).", "author": "JingsongLi", "createdAt": "2020-03-03T05:10:19Z", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/SinkCodeGenerator.scala", "diffHunk": "@@ -83,8 +86,10 @@ object SinkCodeGenerator {\n             inputRowType,\n             inputTerm,\n             inputFieldMapping = Option(mapping))\n+        val outputBaseRowType = new BaseRowTypeInfo(\n+          getCompositeTypes(pojo).map(fromTypeInfoToLogicalType): _*)", "originalCommit": "7404df3a2130267c63a43d42398f08fd6ae09b0b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMjUyMg==", "url": "https://github.com/apache/flink/pull/11236#discussion_r386802522", "bodyText": "This is just for RawType? Can you add comment?", "author": "JingsongLi", "createdAt": "2020-03-03T05:11:48Z", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/sinks/TableSinkUtils.scala", "diffHunk": "@@ -189,13 +190,45 @@ object TableSinkUtils {\n       queryLogicalType,\n       withChangeFlag)\n     if (LogicalTypeChecks.isCompositeType(requestedOutputType.getLogicalType)) {\n-      DataTypeUtils.expandCompositeTypeToSchema(requestedOutputType)\n+      fromDataTypeToTypeInfo(requestedOutputType) match {", "originalCommit": "7404df3a2130267c63a43d42398f08fd6ae09b0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg5NzgyMg==", "url": "https://github.com/apache/flink/pull/11236#discussion_r386897822", "bodyText": "This is for Pojo type. We have to compare query schema with POJO sink schema by field names instead of field indexes.", "author": "wuchong", "createdAt": "2020-03-03T09:36:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMjUyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg5Nzg5Ng==", "url": "https://github.com/apache/flink/pull/11236#discussion_r386897896", "bodyText": "I will add a comment.", "author": "wuchong", "createdAt": "2020-03-03T09:37:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMjUyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMzI0Nw==", "url": "https://github.com/apache/flink/pull/11236#discussion_r386803247", "bodyText": "Can you extract pojo mapping in SinkCodeGenerator to here too? Both are for POJO reorder.", "author": "JingsongLi", "createdAt": "2020-03-03T05:15:12Z", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/sinks/TableSinkUtils.scala", "diffHunk": "@@ -189,13 +190,45 @@ object TableSinkUtils {\n       queryLogicalType,\n       withChangeFlag)\n     if (LogicalTypeChecks.isCompositeType(requestedOutputType.getLogicalType)) {\n-      DataTypeUtils.expandCompositeTypeToSchema(requestedOutputType)\n+      fromDataTypeToTypeInfo(requestedOutputType) match {\n+        case pj: PojoTypeInfo[_] => expandPojoTypeToSchema(pj, queryLogicalType)\n+        case _ => DataTypeUtils.expandCompositeTypeToSchema(requestedOutputType)\n+      }\n     } else {\n       // atomic type\n       TableSchema.builder().field(\"f0\", requestedOutputType).build()\n     }\n   }\n \n+  /**", "originalCommit": "7404df3a2130267c63a43d42398f08fd6ae09b0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkxNTU1NA==", "url": "https://github.com/apache/flink/pull/11236#discussion_r386915554", "bodyText": "There is not too much code can be shared (4 lines) and the logic is different: SinkCodeGenerator extracts a fields mapping, however, TableSinkUtils just extract the index.", "author": "wuchong", "createdAt": "2020-03-03T10:07:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMzI0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk3MDYxMA==", "url": "https://github.com/apache/flink/pull/11236#discussion_r386970610", "bodyText": "Just a minor suggestion.\nI not mean share codes, just put all pojo things together is better to understand.", "author": "JingsongLi", "createdAt": "2020-03-03T11:53:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMzI0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMzk0NQ==", "url": "https://github.com/apache/flink/pull/11236#discussion_r386803945", "bodyText": "BTW, don't reorder the nested data in SinkCodeGenerator?", "author": "JingsongLi", "createdAt": "2020-03-03T05:18:36Z", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/sinks/TableSinkUtils.scala", "diffHunk": "@@ -189,13 +190,45 @@ object TableSinkUtils {\n       queryLogicalType,\n       withChangeFlag)\n     if (LogicalTypeChecks.isCompositeType(requestedOutputType.getLogicalType)) {\n-      DataTypeUtils.expandCompositeTypeToSchema(requestedOutputType)\n+      fromDataTypeToTypeInfo(requestedOutputType) match {\n+        case pj: PojoTypeInfo[_] => expandPojoTypeToSchema(pj, queryLogicalType)\n+        case _ => DataTypeUtils.expandCompositeTypeToSchema(requestedOutputType)\n+      }\n     } else {\n       // atomic type\n       TableSchema.builder().field(\"f0\", requestedOutputType).build()\n     }\n   }\n \n+  /**", "originalCommit": "7404df3a2130267c63a43d42398f08fd6ae09b0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkxNDY3Ng==", "url": "https://github.com/apache/flink/pull/11236#discussion_r386914676", "bodyText": "Unfortunately, we can't reorder the nested data in SinkCodeGenerator for now. Because the ExprCodeGenerator only accetps the top-level mapping. If we want to support reorder nested data, ExprCodeGenerator requires a major refactoring. I will leave that as a future work and it is not a big requirement as of right now (it's hard to construct a nested named row for now).", "author": "wuchong", "createdAt": "2020-03-03T10:06:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMzk0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkxNjQ3Mg==", "url": "https://github.com/apache/flink/pull/11236#discussion_r386916472", "bodyText": "Besides, we have to keep the nested fields reordering in TableSinkUtils to make the simplest case StreamTableEnvironmentITCase#testToAppendStreamWithPojoType passed (no nested reordering required when code generation).", "author": "wuchong", "createdAt": "2020-03-03T10:09:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMzk0NQ=="}], "type": "inlineReview"}, {"oid": "a82548bb1a4625f01ef9af16da11f6073832d957", "url": "https://github.com/apache/flink/commit/a82548bb1a4625f01ef9af16da11f6073832d957", "message": "address comments.", "committedDate": "2020-03-03T10:10:30Z", "type": "commit"}, {"oid": "ce440c8129607cd06f742fb0835da449f0456814", "url": "https://github.com/apache/flink/commit/ce440c8129607cd06f742fb0835da449f0456814", "message": "use TypeTransformation to fix the legacy raw type instead of changing LegacyTypeInfoDataTypeConverter", "committedDate": "2020-03-03T14:15:51Z", "type": "commit"}, {"oid": "ff034a88286bfc73d03ada3e74f4fb6b964cfffb", "url": "https://github.com/apache/flink/commit/ff034a88286bfc73d03ada3e74f4fb6b964cfffb", "message": "fixup", "committedDate": "2020-03-03T16:23:22Z", "type": "commit"}]}