{"pr_number": 13551, "pr_title": "[FLINK-19520][configuration] Add randomization of checkpoint config.", "pr_createdAt": "2020-10-07T10:42:24Z", "pr_url": "https://github.com/apache/flink/pull/13551", "timeline": [{"oid": "fe4a6228d31108e71a6e9faab97598ffa9a09b8b", "url": "https://github.com/apache/flink/commit/fe4a6228d31108e71a6e9faab97598ffa9a09b8b", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config.\n\nTest randomization provides a good coverage for new checkpointing features based on existing tests.\nSeeding ensures test failures are deterministic based on the commit id and ease debugging.", "committedDate": "2020-10-07T14:34:08Z", "type": "forcePushed"}, {"oid": "a875c6b63432a371dd2928d6c3bdb2d4627c5f81", "url": "https://github.com/apache/flink/commit/a875c6b63432a371dd2928d6c3bdb2d4627c5f81", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config.\n\nTest randomization provides a good coverage for new checkpointing features based on existing tests.\nSeeding ensures test failures are deterministic based on the commit id and ease debugging.", "committedDate": "2020-10-08T12:19:54Z", "type": "forcePushed"}, {"oid": "9fc0e6589dc686dbec7cca9d155908ba7f30e474", "url": "https://github.com/apache/flink/commit/9fc0e6589dc686dbec7cca9d155908ba7f30e474", "message": "[FLINK-XXX][network] Double-check if gate still has priority buffer when enqueuing in UnionInputGate.\n\nSince notification is not atomic in respect to gate enqueuing, priority event already polled by task thread when netty enqueues the gate.", "committedDate": "2020-10-08T12:25:17Z", "type": "forcePushed"}, {"oid": "a875c6b63432a371dd2928d6c3bdb2d4627c5f81", "url": "https://github.com/apache/flink/commit/a875c6b63432a371dd2928d6c3bdb2d4627c5f81", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config.\n\nTest randomization provides a good coverage for new checkpointing features based on existing tests.\nSeeding ensures test failures are deterministic based on the commit id and ease debugging.", "committedDate": "2020-10-08T12:19:54Z", "type": "forcePushed"}, {"oid": "d5b25c54ca31fb9dedce7018ced98576df2fd2f2", "url": "https://github.com/apache/flink/commit/d5b25c54ca31fb9dedce7018ced98576df2fd2f2", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config.\n\nTest randomization provides a good coverage for new checkpointing features based on existing tests.\nSeeding ensures randomization is deterministic based on the commit id for a specific test case to ease debugging.", "committedDate": "2020-12-04T15:14:27Z", "type": "forcePushed"}, {"oid": "44c5039ffaa0e88247eba8fb86f664d607ae0536", "url": "https://github.com/apache/flink/commit/44c5039ffaa0e88247eba8fb86f664d607ae0536", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config.\n\nTest randomization provides a good coverage for new checkpointing features based on existing tests.\nSeeding ensures randomization is deterministic based on the commit id for a specific test case to ease debugging.", "committedDate": "2020-12-04T15:21:07Z", "type": "forcePushed"}, {"oid": "07e1b12f433dec764812f49b9c0348d25498d6f6", "url": "https://github.com/apache/flink/commit/07e1b12f433dec764812f49b9c0348d25498d6f6", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config.\n\nTest randomization provides a good coverage for new checkpointing features based on existing tests.\nSeeding ensures randomization is deterministic based on the commit id for a specific test case to ease debugging.", "committedDate": "2020-12-04T15:23:58Z", "type": "forcePushed"}, {"oid": "a88c6caabb50541ecdc8fcafa232adf0e799bbbb", "url": "https://github.com/apache/flink/commit/a88c6caabb50541ecdc8fcafa232adf0e799bbbb", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases.\n\nTest randomization provides a good coverage for new checkpointing features based on existing tests.\nSeeding ensures randomization is deterministic based on the commit id for a specific test case to ease debugging.", "committedDate": "2020-12-05T00:30:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE3NTMwNw==", "url": "https://github.com/apache/flink/pull/13551#discussion_r539175307", "bodyText": "So for the given commit id and given test name, the random selection choices will be always the same, on each run on any environment/machine?\nIf so, maybe put that (^^^) as a java doc for this create method?", "author": "pnowojski", "createdAt": "2020-12-09T10:09:50Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.math.BigInteger;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if unset.\n+ */\n+@Internal\n+class PseudoRandomValueSelector {\n+\tprivate final Function<Integer, Integer> randomValueSupplier;\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n+\n+\tprivate PseudoRandomValueSelector(Function<Integer, Integer> randomValueSupplier) {\n+\t\tthis.randomValueSupplier = randomValueSupplier;\n+\t}\n+\n+\tpublic <T> void select(Configuration configuration, ConfigOption<T> option, T... alternatives) {\n+\t\tif (configuration.contains(option)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tfinal Integer choice = randomValueSupplier.apply(alternatives.length);\n+\t\tT value = alternatives[choice];\n+\t\tLOG.info(\"Randomly selected {} for {}\", value, option.key());\n+\t\tconfiguration.set(option, value);\n+\t}\n+\n+\tpublic static PseudoRandomValueSelector create(Object entryPointSeed) {\n+\t\tfinal long commitSeed = new BigInteger(EnvironmentInformation.getGitCommitId(), 16).hashCode();\n+\t\tfinal long combinedSeed = commitSeed << 32 | entryPointSeed.hashCode();", "originalCommit": "a88c6caabb50541ecdc8fcafa232adf0e799bbbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMxNjE4NQ==", "url": "https://github.com/apache/flink/pull/13551#discussion_r539316185", "bodyText": "Yes that was my intent: have it reproducible without changing anything by just checking out the particular commit that failed on AZP.\nI'm double-checking that EnvironmentInformation.getGitCommitId() works as expected or try a different approach to inject commit id.", "author": "AHeise", "createdAt": "2020-12-09T13:43:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE3NTMwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzNDQ4Ng==", "url": "https://github.com/apache/flink/pull/13551#discussion_r553934486", "bodyText": "So I verified that randomized unaligned checkpoint configuration is actually picked up while creating the controllers.", "author": "AHeise", "createdAt": "2021-01-08T13:10:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE3NTMwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyODg4NQ==", "url": "https://github.com/apache/flink/pull/13551#discussion_r540528885", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic TestRule nameProvider = new TestNameProvider();\n          \n          \n            \n            \tpublic final TestRule nameProvider = new TestNameProvider();", "author": "zentol", "createdAt": "2020-12-10T22:01:44Z", "path": "flink-test-utils-parent/flink-test-utils-junit/src/main/java/org/apache/flink/util/TestLogger.java", "diffHunk": "@@ -67,6 +67,9 @@ public void failed(Throwable e, Description description) {\n \t\t}\n \t};\n \n+\t@Rule\n+\tpublic TestRule nameProvider = new TestNameProvider();", "originalCommit": "a88c6caabb50541ecdc8fcafa232adf0e799bbbb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzMDUwNg==", "url": "https://github.com/apache/flink/pull/13551#discussion_r540530506", "bodyText": "This seems a bit...janky? Why can we not mutate the configuration within the MiniClusterResource?", "author": "zentol", "createdAt": "2020-12-10T22:04:36Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/TestStreamEnvironment.java", "diffHunk": "@@ -44,6 +47,12 @@ public TestStreamEnvironment(\n \t\t\t\tnull);\n \n \t\tsetParallelism(parallelism);\n+\n+\t\tif (Randomization) {\n+\t\t\tfinal String testName = TestNameProvider.getCurrentTestName();", "originalCommit": "a88c6caabb50541ecdc8fcafa232adf0e799bbbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUzMDUxNA==", "url": "https://github.com/apache/flink/pull/13551#discussion_r553530514", "bodyText": "I'm missing a hook where I can mutate the configuration per test method. MiniClusterResource is mostly used on class level. Any guidance is greatly appreciated.", "author": "AHeise", "createdAt": "2021-01-07T19:16:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzMDUwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU0NDg2Ng==", "url": "https://github.com/apache/flink/pull/13551#discussion_r553544866", "bodyText": "I see. I can't come up with a good alternative unfortunately.", "author": "zentol", "createdAt": "2021-01-07T19:39:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzMDUwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzNDc3MA==", "url": "https://github.com/apache/flink/pull/13551#discussion_r553934770", "bodyText": "I moved it a bit outside into the factory, but that's the best that I came up with.", "author": "AHeise", "createdAt": "2021-01-08T13:11:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzMDUwNg=="}], "type": "inlineReview"}, {"oid": "fded2a71d2064276f69335ec94c36b35b8789985", "url": "https://github.com/apache/flink/commit/fded2a71d2064276f69335ec94c36b35b8789985", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases.", "committedDate": "2021-01-08T13:00:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQyODg1OA==", "url": "https://github.com/apache/flink/pull/13551#discussion_r556428858", "bodyText": "Why is it important for this to work in IntelliJ?", "author": "zentol", "createdAt": "2021-01-13T10:48:41Z", "path": "flink-runtime/pom.xml", "diffHunk": "@@ -509,6 +509,16 @@ under the License.\n \t\t\t\t\t\t<!-- It is useless due to the way Flink does branches and tags -->\n \t\t\t\t\t\t<skip>true</skip>\n \t\t\t\t\t</gitDescribe>\n+\t\t\t\t\t<!-- The git.properties is not really used, but works around an IntelliJ bug where", "originalCommit": "fded2a71d2064276f69335ec94c36b35b8789985", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzI3MDkzNQ==", "url": "https://github.com/apache/flink/pull/13551#discussion_r557270935", "bodyText": "I had mixed success when executing tests in IntelliJ.\nEnvironmentInformation.getCommitId depends on successful resource filtering of .flink-runtime.version.properties in flink-runtime, which worked for me fine with mvn.\nHowever, in IntelliJ, quite often the git.* variables have not been replaced successfully. What's worse they have been unset even after having executed the task in mvn resources -pl flink-runtime successfully first.\nI did not have a good explanation so I added some code to generate the git.properties first and then merge it into .flink-runtime.version.properties. I noticed that generating git.properties worked very reliably. However, something unexpected happened: .flink-runtime.version.properties was also now properly filtered. \ud83e\udd37\nSince this is a bit hacky, an alternative could be to use two files to fill in the EnvironmentInformation: git.properties for git stuff and for .flink-runtime.version.properties for everything else.", "author": "AHeise", "createdAt": "2021-01-14T09:53:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQyODg1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQyODk0Mg==", "url": "https://github.com/apache/flink/pull/13551#discussion_r556428942", "bodyText": "hmm...like, we could add a hook to setAsContext to pass the name/modify the config/pass a factory, but it'd still suck since the TestNameProvider must live within the TestLogger; we just can't get around that singleton access can we...", "author": "zentol", "createdAt": "2021-01-13T10:48:51Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/TestStreamEnvironment.java", "diffHunk": "@@ -69,13 +74,28 @@ public static void setAsContext(\n                     TestStreamEnvironment env =\n                             new TestStreamEnvironment(\n                                     miniCluster, parallelism, jarFiles, classpaths);\n+                    randomize(conf);\n                     env.configure(conf, env.getUserClassloader());\n                     return env;\n                 };\n \n         initializeContextEnvironment(factory);\n     }\n \n+    /**\n+     * Randomizes configuration on test case level even if mini cluster is used in a class rule.\n+     *\n+     * @param conf\n+     */\n+    private static void randomize(Configuration conf) {\n+        if (Randomization) {\n+            final String testName = TestNameProvider.getCurrentTestName();", "originalCommit": "fded2a71d2064276f69335ec94c36b35b8789985", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzI2NjE1Ng==", "url": "https://github.com/apache/flink/pull/13551#discussion_r557266156", "bodyText": "To make it independent of TestLogger we could use RunListener and then have a singleton listener to fetch the name.\nHowever, I didn't go fully into this direction as it's quite a bit of fiddling in junit4 and I hope to eventually migrate to junit 5. Then I'd check if it can be done in a better way.", "author": "AHeise", "createdAt": "2021-01-14T09:46:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQyODk0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzI3OTkxNg==", "url": "https://github.com/apache/flink/pull/13551#discussion_r557279916", "bodyText": "yeah I'd revisit it once junit5 is in.", "author": "zentol", "createdAt": "2021-01-14T10:07:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQyODk0Mg=="}], "type": "inlineReview"}, {"oid": "e8385c8a38bc5af203708d57a9c412059a49cb51", "url": "https://github.com/apache/flink/commit/e8385c8a38bc5af203708d57a9c412059a49cb51", "message": "1", "committedDate": "2021-02-01T19:33:56Z", "type": "forcePushed"}, {"oid": "65a576c3b4e91ad887204cab36d0739826d7e07d", "url": "https://github.com/apache/flink/commit/65a576c3b4e91ad887204cab36d0739826d7e07d", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases.", "committedDate": "2021-02-01T19:51:24Z", "type": "forcePushed"}, {"oid": "bccc38316d268ba384c1921639c9c03cc299d49b", "url": "https://github.com/apache/flink/commit/bccc38316d268ba384c1921639c9c03cc299d49b", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases.", "committedDate": "2021-02-01T19:57:15Z", "type": "forcePushed"}, {"oid": "76ffa53caba8f8b2161d8f865cb58b3c6c08a29b", "url": "https://github.com/apache/flink/commit/76ffa53caba8f8b2161d8f865cb58b3c6c08a29b", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases.", "committedDate": "2021-02-01T19:57:36Z", "type": "forcePushed"}, {"oid": "4c3a8b4fa089a223d1d90476068a7ef3111d5bfa", "url": "https://github.com/apache/flink/commit/4c3a8b4fa089a223d1d90476068a7ef3111d5bfa", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases.", "committedDate": "2021-02-01T20:04:42Z", "type": "forcePushed"}, {"oid": "925d15f0f5777111cf5f1df34da76b5dc36935c9", "url": "https://github.com/apache/flink/commit/925d15f0f5777111cf5f1df34da76b5dc36935c9", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases.", "committedDate": "2021-02-01T20:13:13Z", "type": "forcePushed"}, {"oid": "019646dd12750ec211a543f858836637a164d845", "url": "https://github.com/apache/flink/commit/019646dd12750ec211a543f858836637a164d845", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases.", "committedDate": "2021-02-01T20:17:19Z", "type": "forcePushed"}, {"oid": "df7d30894d9bf8f2d5ab361d2c0437d5aec065f9", "url": "https://github.com/apache/flink/commit/df7d30894d9bf8f2d5ab361d2c0437d5aec065f9", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases.", "committedDate": "2021-02-01T20:29:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODEyNTgzNg==", "url": "https://github.com/apache/flink/pull/13551#discussion_r568125836", "bodyText": "What part of this class is not thread safe?", "author": "zentol", "createdAt": "2021-02-01T20:42:25Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if\n+ * unset.\n+ *\n+ * <p>With the same seed, the same values are always selected if the {@link #select(Configuration,\n+ * ConfigOption, Object[])} invocation happens in the same order. A different seed should select\n+ * different values.\n+ *\n+ * <p>The seed is calculated from a global seed (~unique per build) and a seed specific to test\n+ * cases. Thus, two different builds will mostly result in different values for the same test case.\n+ * Similarly, two test cases in the same build will have different randomized values.\n+ *\n+ * <p>The seed can be set with the maven/system property test.randomization.seed and is set by\n+ * default to commit id. If the seed is empty, {@link EnvironmentInformation} and as a last fallback\n+ * git command is used to retrieve the commit id.\n+ */\n+@Internal\n+@NotThreadSafe", "originalCommit": "df7d30894d9bf8f2d5ab361d2c0437d5aec065f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM1ODE5OQ==", "url": "https://github.com/apache/flink/pull/13551#discussion_r568358199", "bodyText": "It doesn't adhere to the contract that it will produce the same randomized configuration for the same seeds if you start using it in parallel (the state is hidden in Random itself).", "author": "AHeise", "createdAt": "2021-02-02T06:46:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODEyNTgzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODEyOTgzOA==", "url": "https://github.com/apache/flink/pull/13551#discussion_r568129838", "bodyText": "braces! (I hope this will fail the CI, if not we might have to re-enable some checkstyle rules...)", "author": "zentol", "createdAt": "2021-02-01T20:49:39Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if\n+ * unset.\n+ *\n+ * <p>With the same seed, the same values are always selected if the {@link #select(Configuration,\n+ * ConfigOption, Object[])} invocation happens in the same order. A different seed should select\n+ * different values.\n+ *\n+ * <p>The seed is calculated from a global seed (~unique per build) and a seed specific to test\n+ * cases. Thus, two different builds will mostly result in different values for the same test case.\n+ * Similarly, two test cases in the same build will have different randomized values.\n+ *\n+ * <p>The seed can be set with the maven/system property test.randomization.seed and is set by\n+ * default to commit id. If the seed is empty, {@link EnvironmentInformation} and as a last fallback\n+ * git command is used to retrieve the commit id.\n+ */\n+@Internal\n+@NotThreadSafe\n+class PseudoRandomValueSelector {\n+    private final Function<Integer, Integer> randomValueSupplier;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n+\n+    private static final long GlobalSeed = (long) getGlobalSeed().hashCode() << 32;\n+\n+    private PseudoRandomValueSelector(Function<Integer, Integer> randomValueSupplier) {\n+        this.randomValueSupplier = randomValueSupplier;\n+    }\n+\n+    public <T> void select(Configuration configuration, ConfigOption<T> option, T... alternatives) {\n+        if (configuration.contains(option)) {\n+            return;\n+        }\n+        final Integer choice = randomValueSupplier.apply(alternatives.length);\n+        T value = alternatives[choice];\n+        LOG.info(\"Randomly selected {} for {}\", value, option.key());\n+        configuration.set(option, value);\n+    }\n+\n+    public static PseudoRandomValueSelector create(Object entryPointSeed) {\n+        final long combinedSeed = GlobalSeed | entryPointSeed.hashCode();\n+        final Random random = new Random(combinedSeed);\n+        return new PseudoRandomValueSelector(random::nextInt);\n+    }\n+\n+    private static String getGlobalSeed() {\n+        // manual seed or set by maven\n+        final String seed = System.getProperty(\"test.randomization.seed\");\n+        if (seed != null) {\n+            return seed;\n+        }\n+\n+        // Read with git command (if installed)\n+        final Optional<String> gitCommitId = getGitCommitId();\n+        if (gitCommitId.isPresent()) {\n+            return gitCommitId.get();\n+        }\n+\n+        // try EnvironmentInformation, which is set in the maven process\n+        final String commitId = EnvironmentInformation.getGitCommitId();\n+        if (!commitId.equals(EnvironmentInformation.UNKNOWN_COMMIT_ID)) {\n+            return commitId;\n+        }\n+\n+        LOG.warn(\n+                \"Cannot initialize maven property test.randomization.seed with commit id, please set manually to receive reproducible builds.\");\n+        // return any constant\n+        return \"\";\n+    }\n+\n+    @VisibleForTesting\n+    static Optional<String> getGitCommitId() {\n+        try {\n+            Process process = new ProcessBuilder(\"git\", \"rev-parse\", \"HEAD\").start();\n+            try (InputStream input = process.getInputStream()) {\n+                final String commit = IOUtils.toString(input, Charset.defaultCharset()).trim();\n+                if (commit.matches(\"[a-f0-9]{40}\")) return Optional.of(commit);", "originalCommit": "df7d30894d9bf8f2d5ab361d2c0437d5aec065f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODEzMzM3MQ==", "url": "https://github.com/apache/flink/pull/13551#discussion_r568133371", "bodyText": "technically speaking these should be  @VisibleForTesting.", "author": "zentol", "createdAt": "2021-02-01T20:56:04Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,6 +41,8 @@\n  * startup options, or the JVM version.\n  */\n public class EnvironmentInformation {\n+    public static final String UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n+    public static final String UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";", "originalCommit": "df7d30894d9bf8f2d5ab361d2c0437d5aec065f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM1ODcyNA==", "url": "https://github.com/apache/flink/pull/13551#discussion_r568358724", "bodyText": "Technically you are correct - the best kind of correct. Fixed it.", "author": "AHeise", "createdAt": "2021-02-02T06:47:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODEzMzM3MQ=="}], "type": "inlineReview"}, {"oid": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "url": "https://github.com/apache/flink/commit/0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases.", "committedDate": "2021-02-02T06:48:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3MDY0OA==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570070648", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Function<Integer, Integer> randomValueSupplier;\n          \n          \n            \n            \n          \n          \n            \n                private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n          \n          \n            \n                private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n          \n          \n            \n            \n          \n          \n            \n                private final Function<Integer, Integer> randomValueSupplier;", "author": "zentol", "createdAt": "2021-02-04T09:29:07Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if\n+ * unset.\n+ *\n+ * <p>With the same seed, the same values are always selected if the {@link #select(Configuration,\n+ * ConfigOption, Object[])} invocation happens in the same order. A different seed should select\n+ * different values.\n+ *\n+ * <p>The seed is calculated from a global seed (~unique per build) and a seed specific to test\n+ * cases. Thus, two different builds will mostly result in different values for the same test case.\n+ * Similarly, two test cases in the same build will have different randomized values.\n+ *\n+ * <p>The seed can be set with the maven/system property test.randomization.seed and is set by\n+ * default to commit id. If the seed is empty, {@link EnvironmentInformation} and as a last fallback\n+ * git command is used to retrieve the commit id.\n+ */\n+@Internal\n+@NotThreadSafe\n+class PseudoRandomValueSelector {\n+    private final Function<Integer, Integer> randomValueSupplier;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3MDc3OQ==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570070779", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final long GlobalSeed = (long) getGlobalSeed().hashCode() << 32;\n          \n          \n            \n                private static final long GLOBAL_SEED = (long) getGlobalSeed().hashCode() << 32;", "author": "zentol", "createdAt": "2021-02-04T09:29:19Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if\n+ * unset.\n+ *\n+ * <p>With the same seed, the same values are always selected if the {@link #select(Configuration,\n+ * ConfigOption, Object[])} invocation happens in the same order. A different seed should select\n+ * different values.\n+ *\n+ * <p>The seed is calculated from a global seed (~unique per build) and a seed specific to test\n+ * cases. Thus, two different builds will mostly result in different values for the same test case.\n+ * Similarly, two test cases in the same build will have different randomized values.\n+ *\n+ * <p>The seed can be set with the maven/system property test.randomization.seed and is set by\n+ * default to commit id. If the seed is empty, {@link EnvironmentInformation} and as a last fallback\n+ * git command is used to retrieve the commit id.\n+ */\n+@Internal\n+@NotThreadSafe\n+class PseudoRandomValueSelector {\n+    private final Function<Integer, Integer> randomValueSupplier;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n+\n+    private static final long GlobalSeed = (long) getGlobalSeed().hashCode() << 32;", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3MDkwNQ==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570070905", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final long combinedSeed = GlobalSeed | entryPointSeed.hashCode();\n          \n          \n            \n                    final long combinedSeed = GLOBAL_SEED | entryPointSeed.hashCode();", "author": "zentol", "createdAt": "2021-02-04T09:29:30Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if\n+ * unset.\n+ *\n+ * <p>With the same seed, the same values are always selected if the {@link #select(Configuration,\n+ * ConfigOption, Object[])} invocation happens in the same order. A different seed should select\n+ * different values.\n+ *\n+ * <p>The seed is calculated from a global seed (~unique per build) and a seed specific to test\n+ * cases. Thus, two different builds will mostly result in different values for the same test case.\n+ * Similarly, two test cases in the same build will have different randomized values.\n+ *\n+ * <p>The seed can be set with the maven/system property test.randomization.seed and is set by\n+ * default to commit id. If the seed is empty, {@link EnvironmentInformation} and as a last fallback\n+ * git command is used to retrieve the commit id.\n+ */\n+@Internal\n+@NotThreadSafe\n+class PseudoRandomValueSelector {\n+    private final Function<Integer, Integer> randomValueSupplier;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n+\n+    private static final long GlobalSeed = (long) getGlobalSeed().hashCode() << 32;\n+\n+    private PseudoRandomValueSelector(Function<Integer, Integer> randomValueSupplier) {\n+        this.randomValueSupplier = randomValueSupplier;\n+    }\n+\n+    public <T> void select(Configuration configuration, ConfigOption<T> option, T... alternatives) {\n+        if (configuration.contains(option)) {\n+            return;\n+        }\n+        final Integer choice = randomValueSupplier.apply(alternatives.length);\n+        T value = alternatives[choice];\n+        LOG.info(\"Randomly selected {} for {}\", value, option.key());\n+        configuration.set(option, value);\n+    }\n+\n+    public static PseudoRandomValueSelector create(Object entryPointSeed) {\n+        final long combinedSeed = GlobalSeed | entryPointSeed.hashCode();", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3MTM0Nw==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570071347", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Integer choice = randomValueSupplier.apply(alternatives.length);\n          \n          \n            \n                    final int choice = randomValueSupplier.apply(alternatives.length);", "author": "zentol", "createdAt": "2021-02-04T09:30:03Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if\n+ * unset.\n+ *\n+ * <p>With the same seed, the same values are always selected if the {@link #select(Configuration,\n+ * ConfigOption, Object[])} invocation happens in the same order. A different seed should select\n+ * different values.\n+ *\n+ * <p>The seed is calculated from a global seed (~unique per build) and a seed specific to test\n+ * cases. Thus, two different builds will mostly result in different values for the same test case.\n+ * Similarly, two test cases in the same build will have different randomized values.\n+ *\n+ * <p>The seed can be set with the maven/system property test.randomization.seed and is set by\n+ * default to commit id. If the seed is empty, {@link EnvironmentInformation} and as a last fallback\n+ * git command is used to retrieve the commit id.\n+ */\n+@Internal\n+@NotThreadSafe\n+class PseudoRandomValueSelector {\n+    private final Function<Integer, Integer> randomValueSupplier;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n+\n+    private static final long GlobalSeed = (long) getGlobalSeed().hashCode() << 32;\n+\n+    private PseudoRandomValueSelector(Function<Integer, Integer> randomValueSupplier) {\n+        this.randomValueSupplier = randomValueSupplier;\n+    }\n+\n+    public <T> void select(Configuration configuration, ConfigOption<T> option, T... alternatives) {\n+        if (configuration.contains(option)) {\n+            return;\n+        }\n+        final Integer choice = randomValueSupplier.apply(alternatives.length);", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3MzMyMQ==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570073321", "bodyText": "Test randomization was enabled but test.randomization.seed was not configured, nor could the commit hash be retrieved from git or the EnvironmentInformation. Please set the test.randomization.seed property manually to make the build reproducible.", "author": "zentol", "createdAt": "2021-02-04T09:32:51Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if\n+ * unset.\n+ *\n+ * <p>With the same seed, the same values are always selected if the {@link #select(Configuration,\n+ * ConfigOption, Object[])} invocation happens in the same order. A different seed should select\n+ * different values.\n+ *\n+ * <p>The seed is calculated from a global seed (~unique per build) and a seed specific to test\n+ * cases. Thus, two different builds will mostly result in different values for the same test case.\n+ * Similarly, two test cases in the same build will have different randomized values.\n+ *\n+ * <p>The seed can be set with the maven/system property test.randomization.seed and is set by\n+ * default to commit id. If the seed is empty, {@link EnvironmentInformation} and as a last fallback\n+ * git command is used to retrieve the commit id.\n+ */\n+@Internal\n+@NotThreadSafe\n+class PseudoRandomValueSelector {\n+    private final Function<Integer, Integer> randomValueSupplier;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n+\n+    private static final long GlobalSeed = (long) getGlobalSeed().hashCode() << 32;\n+\n+    private PseudoRandomValueSelector(Function<Integer, Integer> randomValueSupplier) {\n+        this.randomValueSupplier = randomValueSupplier;\n+    }\n+\n+    public <T> void select(Configuration configuration, ConfigOption<T> option, T... alternatives) {\n+        if (configuration.contains(option)) {\n+            return;\n+        }\n+        final Integer choice = randomValueSupplier.apply(alternatives.length);\n+        T value = alternatives[choice];\n+        LOG.info(\"Randomly selected {} for {}\", value, option.key());\n+        configuration.set(option, value);\n+    }\n+\n+    public static PseudoRandomValueSelector create(Object entryPointSeed) {\n+        final long combinedSeed = GlobalSeed | entryPointSeed.hashCode();\n+        final Random random = new Random(combinedSeed);\n+        return new PseudoRandomValueSelector(random::nextInt);\n+    }\n+\n+    private static String getGlobalSeed() {\n+        // manual seed or set by maven\n+        final String seed = System.getProperty(\"test.randomization.seed\");\n+        if (seed != null) {\n+            return seed;\n+        }\n+\n+        // Read with git command (if installed)\n+        final Optional<String> gitCommitId = getGitCommitId();\n+        if (gitCommitId.isPresent()) {\n+            return gitCommitId.get();\n+        }\n+\n+        // try EnvironmentInformation, which is set in the maven process\n+        final String commitId = EnvironmentInformation.getGitCommitId();\n+        if (!commitId.equals(EnvironmentInformation.UNKNOWN_COMMIT_ID)) {\n+            return commitId;\n+        }\n+\n+        LOG.warn(\n+                \"Cannot initialize maven property test.randomization.seed with commit id, please set manually to receive reproducible builds.\");", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3Mzk3Nw==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570073977", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final boolean Randomization =\n          \n          \n            \n                private static final boolean RANDOMIZE_CHECKPOINTING_CONFIG =", "author": "zentol", "createdAt": "2021-02-04T09:33:46Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/TestStreamEnvironment.java", "diffHunk": "@@ -18,18 +18,23 @@\n \n package org.apache.flink.streaming.util;\n \n+import org.apache.flink.configuration.Configuration;\n import org.apache.flink.core.fs.Path;\n import org.apache.flink.runtime.minicluster.MiniCluster;\n+import org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions;\n import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n import org.apache.flink.streaming.api.environment.StreamExecutionEnvironmentFactory;\n import org.apache.flink.test.util.MiniClusterPipelineExecutorServiceLoader;\n+import org.apache.flink.util.TestNameProvider;\n \n import java.net.URL;\n import java.util.Collection;\n import java.util.Collections;\n \n /** A {@link StreamExecutionEnvironment} that executes its jobs on {@link MiniCluster}. */\n public class TestStreamEnvironment extends StreamExecutionEnvironment {\n+    private static final boolean Randomization =", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3NDc4Mg==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570074782", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (Randomization) {\n          \n          \n            \n                    if (RANDOMIZE_CHECKPOINTING_CONFIG) {", "author": "zentol", "createdAt": "2021-02-04T09:34:58Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/TestStreamEnvironment.java", "diffHunk": "@@ -69,13 +74,30 @@ public static void setAsContext(\n                     TestStreamEnvironment env =\n                             new TestStreamEnvironment(\n                                     miniCluster, parallelism, jarFiles, classpaths);\n+                    randomize(conf);\n                     env.configure(conf, env.getUserClassloader());\n                     return env;\n                 };\n \n         initializeContextEnvironment(factory);\n     }\n \n+    /**\n+     * Randomizes configuration on test case level even if mini cluster is used in a class rule.\n+     *\n+     * <p>Note that only unset properties are randomized.\n+     *\n+     * @param conf the configuration to randomize\n+     */\n+    private static void randomize(Configuration conf) {\n+        if (Randomization) {", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3NTQ1NQ==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570075455", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"test\");\n          \n          \n            \n                    final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"seed\");", "author": "zentol", "createdAt": "2021-02-04T09:35:58Z", "path": "flink-test-utils-parent/flink-test-utils/src/test/java/org/apache/flink/streaming/util/PseudoRandomValueSelectorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.CHECKPOINTING_INTERVAL;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeNoException;\n+import static org.junit.Assume.assumeNotNull;\n+\n+/** Tests {@link PseudoRandomValueSelector}. */\n+public class PseudoRandomValueSelectorTest {\n+\n+    /**\n+     * Tests that the selector will return different values if invoked several times even for the\n+     * same option.\n+     */\n+    @Test\n+    public void testRandomizationOfValues() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"test\");", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3NTk4NA==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570075984", "bodyText": "assertThat(uniqueValues.size(); greaterThan(1))?", "author": "zentol", "createdAt": "2021-02-04T09:36:45Z", "path": "flink-test-utils-parent/flink-test-utils/src/test/java/org/apache/flink/streaming/util/PseudoRandomValueSelectorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.CHECKPOINTING_INTERVAL;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeNoException;\n+import static org.junit.Assume.assumeNotNull;\n+\n+/** Tests {@link PseudoRandomValueSelector}. */\n+public class PseudoRandomValueSelectorTest {\n+\n+    /**\n+     * Tests that the selector will return different values if invoked several times even for the\n+     * same option.\n+     */\n+    @Test\n+    public void testRandomizationOfValues() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"test\");\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final Duration selectedValue =\n+                    selectValue(valueSelector, CHECKPOINTING_INTERVAL, alternatives);\n+            uniqueValues.add(selectedValue);\n+        }\n+        assertNotEquals(1, uniqueValues.size());", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3NjIzNQ==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570076235", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nonnull", "author": "zentol", "createdAt": "2021-02-04T09:37:06Z", "path": "flink-test-utils-parent/flink-test-utils/src/test/java/org/apache/flink/streaming/util/PseudoRandomValueSelectorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.CHECKPOINTING_INTERVAL;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeNoException;\n+import static org.junit.Assume.assumeNotNull;\n+\n+/** Tests {@link PseudoRandomValueSelector}. */\n+public class PseudoRandomValueSelectorTest {\n+\n+    /**\n+     * Tests that the selector will return different values if invoked several times even for the\n+     * same option.\n+     */\n+    @Test\n+    public void testRandomizationOfValues() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"test\");\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final Duration selectedValue =\n+                    selectValue(valueSelector, CHECKPOINTING_INTERVAL, alternatives);\n+            uniqueValues.add(selectedValue);\n+        }\n+        assertNotEquals(1, uniqueValues.size());\n+    }\n+\n+    @Nonnull", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3ODUxMg==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570078512", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /** Tests that it produces the same value for the same seed. */\n          \n          \n            \n                /** Tests that the selector produces the same value for the same seed. */", "author": "zentol", "createdAt": "2021-02-04T09:40:15Z", "path": "flink-test-utils-parent/flink-test-utils/src/test/java/org/apache/flink/streaming/util/PseudoRandomValueSelectorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.CHECKPOINTING_INTERVAL;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeNoException;\n+import static org.junit.Assume.assumeNotNull;\n+\n+/** Tests {@link PseudoRandomValueSelector}. */\n+public class PseudoRandomValueSelectorTest {\n+\n+    /**\n+     * Tests that the selector will return different values if invoked several times even for the\n+     * same option.\n+     */\n+    @Test\n+    public void testRandomizationOfValues() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"test\");\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final Duration selectedValue =\n+                    selectValue(valueSelector, CHECKPOINTING_INTERVAL, alternatives);\n+            uniqueValues.add(selectedValue);\n+        }\n+        assertNotEquals(1, uniqueValues.size());\n+    }\n+\n+    @Nonnull\n+    private <T> T selectValue(\n+            PseudoRandomValueSelector valueSelector, ConfigOption<T> option, T... alternatives) {\n+        final Configuration configuration = new Configuration();\n+        assertNull(configuration.get(option));\n+        valueSelector.select(configuration, option, alternatives);\n+        final T selected = configuration.get(option);\n+        assertNotNull(selected);\n+        return selected;\n+    }\n+\n+    /** Tests that the selector will return different values for different seeds. */\n+    @Test\n+    public void testRandomizationWithSeed() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final PseudoRandomValueSelector selector = PseudoRandomValueSelector.create(\"test\" + i);\n+            uniqueValues.add(selectValue(selector, CHECKPOINTING_INTERVAL, alternatives));\n+        }\n+        assertNotEquals(1, uniqueValues.size());\n+    }\n+\n+    /** Tests that it produces the same value for the same seed. */", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3OTc2MQ==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570079761", "bodyText": "maybe add another set for the second value, to test that a sequence of selections is also deterministic.", "author": "zentol", "createdAt": "2021-02-04T09:42:00Z", "path": "flink-test-utils-parent/flink-test-utils/src/test/java/org/apache/flink/streaming/util/PseudoRandomValueSelectorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.CHECKPOINTING_INTERVAL;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeNoException;\n+import static org.junit.Assume.assumeNotNull;\n+\n+/** Tests {@link PseudoRandomValueSelector}. */\n+public class PseudoRandomValueSelectorTest {\n+\n+    /**\n+     * Tests that the selector will return different values if invoked several times even for the\n+     * same option.\n+     */\n+    @Test\n+    public void testRandomizationOfValues() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"test\");\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final Duration selectedValue =\n+                    selectValue(valueSelector, CHECKPOINTING_INTERVAL, alternatives);\n+            uniqueValues.add(selectedValue);\n+        }\n+        assertNotEquals(1, uniqueValues.size());\n+    }\n+\n+    @Nonnull\n+    private <T> T selectValue(\n+            PseudoRandomValueSelector valueSelector, ConfigOption<T> option, T... alternatives) {\n+        final Configuration configuration = new Configuration();\n+        assertNull(configuration.get(option));\n+        valueSelector.select(configuration, option, alternatives);\n+        final T selected = configuration.get(option);\n+        assertNotNull(selected);\n+        return selected;\n+    }\n+\n+    /** Tests that the selector will return different values for different seeds. */\n+    @Test\n+    public void testRandomizationWithSeed() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final PseudoRandomValueSelector selector = PseudoRandomValueSelector.create(\"test\" + i);\n+            uniqueValues.add(selectValue(selector, CHECKPOINTING_INTERVAL, alternatives));\n+        }\n+        assertNotEquals(1, uniqueValues.size());\n+    }\n+\n+    /** Tests that it produces the same value for the same seed. */\n+    @Test\n+    public void testStableRandomization() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final PseudoRandomValueSelector selector = PseudoRandomValueSelector.create(\"test\");\n+            uniqueValues.add(selectValue(selector, CHECKPOINTING_INTERVAL, alternatives));", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDEyODgxMA==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570128810", "bodyText": "I'm checking a triple of config options now.", "author": "AHeise", "createdAt": "2021-02-04T10:53:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3OTc2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA4MTM3Ng==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570081376", "bodyText": "re-use org.apache.flink.runtime.testutils.ZooKeeperTestUtils#runsOnCIInfrastructure instead", "author": "zentol", "createdAt": "2021-02-04T09:44:10Z", "path": "flink-test-utils-parent/flink-test-utils/src/test/java/org/apache/flink/streaming/util/PseudoRandomValueSelectorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.CHECKPOINTING_INTERVAL;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeNoException;\n+import static org.junit.Assume.assumeNotNull;\n+\n+/** Tests {@link PseudoRandomValueSelector}. */\n+public class PseudoRandomValueSelectorTest {\n+\n+    /**\n+     * Tests that the selector will return different values if invoked several times even for the\n+     * same option.\n+     */\n+    @Test\n+    public void testRandomizationOfValues() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"test\");\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final Duration selectedValue =\n+                    selectValue(valueSelector, CHECKPOINTING_INTERVAL, alternatives);\n+            uniqueValues.add(selectedValue);\n+        }\n+        assertNotEquals(1, uniqueValues.size());\n+    }\n+\n+    @Nonnull\n+    private <T> T selectValue(\n+            PseudoRandomValueSelector valueSelector, ConfigOption<T> option, T... alternatives) {\n+        final Configuration configuration = new Configuration();\n+        assertNull(configuration.get(option));\n+        valueSelector.select(configuration, option, alternatives);\n+        final T selected = configuration.get(option);\n+        assertNotNull(selected);\n+        return selected;\n+    }\n+\n+    /** Tests that the selector will return different values for different seeds. */\n+    @Test\n+    public void testRandomizationWithSeed() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final PseudoRandomValueSelector selector = PseudoRandomValueSelector.create(\"test\" + i);\n+            uniqueValues.add(selectValue(selector, CHECKPOINTING_INTERVAL, alternatives));\n+        }\n+        assertNotEquals(1, uniqueValues.size());\n+    }\n+\n+    /** Tests that it produces the same value for the same seed. */\n+    @Test\n+    public void testStableRandomization() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final PseudoRandomValueSelector selector = PseudoRandomValueSelector.create(\"test\");\n+            uniqueValues.add(selectValue(selector, CHECKPOINTING_INTERVAL, alternatives));\n+        }\n+        assertEquals(1, uniqueValues.size());\n+    }\n+\n+    /**\n+     * Tests that reading through git command yields the same as {@link EnvironmentInformation}.\n+     *\n+     * <p>This test assumes that both sources of information are available (CI).\n+     */\n+    @Test\n+    public void readCommitId() {\n+        assumeNotNull(System.getProperty(\"CI\"));", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6101fad56a7ee9504de66e2cae702bde314507c7", "url": "https://github.com/apache/flink/commit/6101fad56a7ee9504de66e2cae702bde314507c7", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases.", "committedDate": "2021-02-04T10:55:02Z", "type": "forcePushed"}, {"oid": "29e7176390cd2877927bb8a20ac327921e8ae936", "url": "https://github.com/apache/flink/commit/29e7176390cd2877927bb8a20ac327921e8ae936", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases.", "committedDate": "2021-02-04T10:57:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDYxMDE3Nw==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570610177", "bodyText": "extend TestLogger", "author": "zentol", "createdAt": "2021-02-04T23:16:42Z", "path": "flink-test-utils-parent/flink-test-utils/src/test/java/org/apache/flink/streaming/util/PseudoRandomValueSelectorTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.api.java.tuple.Tuple3;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.testutils.ZooKeeperTestUtils;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.flink.configuration.CheckpointingOptions.SAVEPOINT_DIRECTORY;\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.CHECKPOINTING_INTERVAL;\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.TOLERABLE_FAILURE_NUMBER;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeNoException;\n+import static org.junit.Assume.assumeNotNull;\n+\n+/** Tests {@link PseudoRandomValueSelector}. */\n+public class PseudoRandomValueSelectorTest {", "originalCommit": "29e7176390cd2877927bb8a20ac327921e8ae936", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cbea04b43aff774174026806b85c73401d226eb3", "url": "https://github.com/apache/flink/commit/cbea04b43aff774174026806b85c73401d226eb3", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases.", "committedDate": "2021-02-10T07:22:19Z", "type": "forcePushed"}, {"oid": "3d69b21f05abca0de64a2e778c292a7d0694b263", "url": "https://github.com/apache/flink/commit/3d69b21f05abca0de64a2e778c292a7d0694b263", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases.", "committedDate": "2021-02-10T07:23:04Z", "type": "commit"}, {"oid": "3d69b21f05abca0de64a2e778c292a7d0694b263", "url": "https://github.com/apache/flink/commit/3d69b21f05abca0de64a2e778c292a7d0694b263", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases.", "committedDate": "2021-02-10T07:23:04Z", "type": "forcePushed"}]}