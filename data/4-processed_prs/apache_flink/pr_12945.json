{"pr_number": 12945, "pr_title": "[FLINK-18629] Add type to ConnectedStreams#keyBy", "pr_createdAt": "2020-07-21T11:43:06Z", "pr_url": "https://github.com/apache/flink/pull/12945", "timeline": [{"oid": "996f5157c9bbf1c48989fe92187038549df0e0fd", "url": "https://github.com/apache/flink/commit/996f5157c9bbf1c48989fe92187038549df0e0fd", "message": "[FLINK-18629] Add type to ConnectedStreams#keyBy\n\nAdding a generic type to the method makes it possible to pass the type\nfrom a lambda function. Otherwise a wildcard type '?' is derived as\nObject and thus TypeExtractor extract a GenericTypeInfo<Object> for the\nkey.", "committedDate": "2020-07-21T12:34:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ0Mzc4Ng==", "url": "https://github.com/apache/flink/pull/12945#discussion_r459443786", "bodyText": "nit: I like the simplicity of the code but I think stacktraces are harder to parse with anonymous classes thrown in the mix. Just a thought, though.", "author": "aljoscha", "createdAt": "2020-07-23T13:21:41Z", "path": "flink-streaming-scala/src/main/scala/org/apache/flink/streaming/api/scala/ConnectedStreams.scala", "diffHunk": "@@ -300,19 +300,22 @@ class ConnectedStreams[IN1, IN2](javaStream: JavaCStream[IN1, IN2]) {\n    * @param fun2 The second stream's key function\n    * @return The key-grouped connected streams\n    */\n-  def keyBy[K1: TypeInformation, K2: TypeInformation](fun1: IN1 => K1, fun2: IN2 => K2):\n+  def keyBy[KEY: TypeInformation](fun1: IN1 => KEY, fun2: IN2 => KEY):\n       ConnectedStreams[IN1, IN2] = {\n \n-    val keyType1 = implicitly[TypeInformation[K1]]\n-    val keyType2 = implicitly[TypeInformation[K2]]\n-    \n+    val keyType = implicitly[TypeInformation[KEY]]\n+\n     val cleanFun1 = clean(fun1)\n     val cleanFun2 = clean(fun2)\n-    \n-    val keyExtractor1 = new KeySelectorWithType[IN1, K1](cleanFun1, keyType1)\n-    val keyExtractor2 = new KeySelectorWithType[IN2, K2](cleanFun2, keyType2)\n-    \n-    asScalaStream(javaStream.keyBy(keyExtractor1, keyExtractor2))\n+\n+    val keyExtractor1 = new KeySelector[IN1, KEY] {", "originalCommit": "996f5157c9bbf1c48989fe92187038549df0e0fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwNDE2OA==", "url": "https://github.com/apache/flink/pull/12945#discussion_r459604168", "bodyText": "I reverted the internal class.\nMy main goal here was to pass the key type explicitly rather than through the ResultTypeQueryable, which requires running TypeExtractor.", "author": "dawidwys", "createdAt": "2020-07-23T17:15:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ0Mzc4Ng=="}], "type": "inlineReview"}, {"oid": "397cbb0e3bd97f630ae58b989dec87972e5c6d3c", "url": "https://github.com/apache/flink/commit/397cbb0e3bd97f630ae58b989dec87972e5c6d3c", "message": "[FLINK-18629] Add type to ConnectedStreams#keyBy\n\nAdding a generic type to the method makes it possible to pass the type\nfrom a lambda function. Otherwise a wildcard type '?' is derived as\nObject and thus TypeExtractor extract a GenericTypeInfo<Object> for the\nkey.", "committedDate": "2020-07-23T17:13:34Z", "type": "forcePushed"}, {"oid": "ad777d7b78e3ae98dea1a3b0b845418c2fd3524b", "url": "https://github.com/apache/flink/commit/ad777d7b78e3ae98dea1a3b0b845418c2fd3524b", "message": "[FLINK-18629] Add type to ConnectedStreams#keyBy\n\nAdding a generic type to the method makes it possible to pass the type\nfrom a lambda function. Otherwise a wildcard type '?' is derived as\nObject and thus TypeExtractor extract a GenericTypeInfo<Object> for the\nkey.", "committedDate": "2020-07-23T17:19:04Z", "type": "forcePushed"}, {"oid": "b5aef5007f883d62f11c2e4247f2f5682e9b081e", "url": "https://github.com/apache/flink/commit/b5aef5007f883d62f11c2e4247f2f5682e9b081e", "message": "[FLINK-18629] Add type to ConnectedStreams#keyBy\n\nAdding a generic type to the method makes it possible to pass the type\nfrom a lambda function. Otherwise a wildcard type '?' is derived as\nObject and thus TypeExtractor extract a GenericTypeInfo<Object> for the\nkey.", "committedDate": "2020-07-23T17:47:47Z", "type": "commit"}, {"oid": "b5aef5007f883d62f11c2e4247f2f5682e9b081e", "url": "https://github.com/apache/flink/commit/b5aef5007f883d62f11c2e4247f2f5682e9b081e", "message": "[FLINK-18629] Add type to ConnectedStreams#keyBy\n\nAdding a generic type to the method makes it possible to pass the type\nfrom a lambda function. Otherwise a wildcard type '?' is derived as\nObject and thus TypeExtractor extract a GenericTypeInfo<Object> for the\nkey.", "committedDate": "2020-07-23T17:47:47Z", "type": "forcePushed"}]}