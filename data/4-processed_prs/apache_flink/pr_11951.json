{"pr_number": 11951, "pr_title": "[FLINK-17420][table sql / api]Cannot alias Tuple and Row fields when converting DataStream to Table", "pr_createdAt": "2020-04-30T02:32:02Z", "pr_url": "https://github.com/apache/flink/pull/11951", "timeline": [{"oid": "38b17d3e6bb0dff3d2a383ed066f23bc3c2dce4f", "url": "https://github.com/apache/flink/commit/38b17d3e6bb0dff3d2a383ed066f23bc3c2dce4f", "message": "[FLINK-17420][table sql / api]Cannot alias Tuple and Row fields when converting DataStream to Table", "committedDate": "2020-04-30T02:26:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzNzUyMA==", "url": "https://github.com/apache/flink/pull/11951#discussion_r418937520", "bodyText": "Could you add tests to check if it works for PojoTypeInfo as well?", "author": "dawidwys", "createdAt": "2020-05-02T09:42:31Z", "path": "flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/typeutils/FieldInfoUtilsTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.typeutils;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.table.api.DataTypes;\n+import org.apache.flink.table.expressions.Expression;\n+import org.apache.flink.table.types.DataType;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+\n+import static org.apache.flink.table.api.Expressions.$;\n+\n+/**\n+ * Test suite for {@link FieldInfoUtils}.\n+ */\n+public class FieldInfoUtilsTest {", "originalCommit": "38b17d3e6bb0dff3d2a383ed066f23bc3c2dce4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzNzU0MA==", "url": "https://github.com/apache/flink/pull/11951#discussion_r418937540", "bodyText": "Why don't you verify the array? Verifying a toString method is rather fragile.", "author": "dawidwys", "createdAt": "2020-05-02T09:42:47Z", "path": "flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/typeutils/FieldInfoUtilsTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.typeutils;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.table.api.DataTypes;\n+import org.apache.flink.table.expressions.Expression;\n+import org.apache.flink.table.types.DataType;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+\n+import static org.apache.flink.table.api.Expressions.$;\n+\n+/**\n+ * Test suite for {@link FieldInfoUtils}.\n+ */\n+public class FieldInfoUtilsTest {\n+\n+\tprivate static final RowTypeInfo typeInfo = new RowTypeInfo(\n+\t\tnew TypeInformation[]{Types.INT, Types.LONG, Types.STRING},\n+\t\tnew String[]{\"f0\", \"f1\", \"f2\"});\n+\n+\t@Test\n+\tpublic void testByPositionMode() {\n+\t\tFieldInfoUtils.TypeInfoSchema schema = FieldInfoUtils.getFieldsInfo(\n+\t\t\ttypeInfo,\n+\t\t\tnew Expression[]{$(\"aa\"), $(\"bb\"), $(\"cc\")});\n+\n+\t\tAssert.assertEquals(\"[aa, bb, cc]\", Arrays.asList(schema.getFieldNames()).toString());", "originalCommit": "38b17d3e6bb0dff3d2a383ed066f23bc3c2dce4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzNzU4OQ==", "url": "https://github.com/apache/flink/pull/11951#discussion_r418937589", "bodyText": "Can you also add a test for extracting fields in byPosition mode when there is a rowtime/proctime attribute?\nselect($(\"a\"), $(\"b\"), $(\"timestamp\").rowtime().as(\"rowtime\")) -> this should still use the by position mode. I know it might be a bit confusing but it is the behavior since very early.", "author": "dawidwys", "createdAt": "2020-05-02T09:43:22Z", "path": "flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/typeutils/FieldInfoUtilsTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.typeutils;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.table.api.DataTypes;\n+import org.apache.flink.table.expressions.Expression;\n+import org.apache.flink.table.types.DataType;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+\n+import static org.apache.flink.table.api.Expressions.$;\n+\n+/**\n+ * Test suite for {@link FieldInfoUtils}.\n+ */\n+public class FieldInfoUtilsTest {\n+\n+\tprivate static final RowTypeInfo typeInfo = new RowTypeInfo(\n+\t\tnew TypeInformation[]{Types.INT, Types.LONG, Types.STRING},\n+\t\tnew String[]{\"f0\", \"f1\", \"f2\"});\n+\n+\t@Test\n+\tpublic void testByPositionMode() {\n+\t\tFieldInfoUtils.TypeInfoSchema schema = FieldInfoUtils.getFieldsInfo(\n+\t\t\ttypeInfo,\n+\t\t\tnew Expression[]{$(\"aa\"), $(\"bb\"), $(\"cc\")});\n+\n+\t\tAssert.assertEquals(\"[aa, bb, cc]\", Arrays.asList(schema.getFieldNames()).toString());\n+\t\tAssert.assertArrayEquals(new DataType[]{DataTypes.INT(), DataTypes.BIGINT(), DataTypes.STRING()}, schema.getFieldTypes());\n+\t}\n+\n+\t@Test\n+\tpublic void testByNameModeReorder() {\n+\t\tFieldInfoUtils.TypeInfoSchema schema = FieldInfoUtils.getFieldsInfo(\n+\t\t\ttypeInfo,\n+\t\t\tnew Expression[]{$(\"f2\"), $(\"f1\"), $(\"f0\")});\n+\n+\t\tAssert.assertEquals(\"[f2, f1, f0]\", Arrays.asList(schema.getFieldNames()).toString());\n+\t\tAssert.assertArrayEquals(new DataType[]{DataTypes.STRING(), DataTypes.BIGINT(), DataTypes.INT()}, schema.getFieldTypes());\n+\t}\n+\n+\t@Test\n+\tpublic void testByNameModeReorderAndRename() {", "originalCommit": "38b17d3e6bb0dff3d2a383ed066f23bc3c2dce4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e19ce1ada6777c2162c4f718fb6f314df5b7c18a", "url": "https://github.com/apache/flink/commit/e19ce1ada6777c2162c4f718fb6f314df5b7c18a", "message": "address comments", "committedDate": "2020-05-04T08:01:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1NjE4Mw==", "url": "https://github.com/apache/flink/pull/11951#discussion_r420156183", "bodyText": "Now I really like this test ;) I like the usage of Parameterized tests here.", "author": "dawidwys", "createdAt": "2020-05-05T14:32:14Z", "path": "flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/typeutils/FieldInfoUtilsTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.typeutils;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.api.java.typeutils.PojoField;\n+import org.apache.flink.api.java.typeutils.PojoTypeInfo;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.table.expressions.Expression;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.runners.Enclosed;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.sql.Timestamp;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static org.apache.flink.table.api.Expressions.$;\n+\n+/**\n+ * Test suite for {@link FieldInfoUtils}.\n+ */\n+@RunWith(Enclosed.class)\n+public class FieldInfoUtilsTest {", "originalCommit": "e19ce1ada6777c2162c4f718fb6f314df5b7c18a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}