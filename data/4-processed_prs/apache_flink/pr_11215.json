{"pr_number": 11215, "pr_title": "[FLINK-16275][table-planner-blink] AggsHandlerCodeGenerator can fail \u2026", "pr_createdAt": "2020-02-25T13:35:59Z", "pr_url": "https://github.com/apache/flink/pull/11215", "timeline": [{"oid": "ea9722ea905907bdbb959633591186a935c168f4", "url": "https://github.com/apache/flink/commit/ea9722ea905907bdbb959633591186a935c168f4", "message": "[FLINK-16275][table-planner-blink] AggsHandlerCodeGenerator can fail with custom module", "committedDate": "2020-02-25T13:29:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4NjY1MQ==", "url": "https://github.com/apache/flink/pull/11215#discussion_r383886651", "bodyText": "What not introduce a method getRuntimeContext in this agg handle function?", "author": "JingsongLi", "createdAt": "2020-02-25T13:45:47Z", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/agg/AggsHandlerCodeGenerator.scala", "diffHunk": "@@ -333,6 +333,10 @@ class AggsHandlerCodeGenerator(\n \n     val functionName = newName(name)\n \n+    // make sure we can get the RuntimeContext properly\n+    val openCode = ctx.reuseOpenCode().replaceAll(\"\\\\(getRuntimeContext\\\\(\\\\)\\\\)\",", "originalCommit": "ea9722ea905907bdbb959633591186a935c168f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM0MTU2OQ==", "url": "https://github.com/apache/flink/pull/11215#discussion_r384341569", "bodyText": "I thought it's simpler this way, since we only need get the RuntimeContext in the open method. I'll add a getRuntimeContext method if you think that's better.", "author": "lirui-apache", "createdAt": "2020-02-26T08:41:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4NjY1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM1MDM1MA==", "url": "https://github.com/apache/flink/pull/11215#discussion_r384350350", "bodyText": "I think we should avoid some codes like replace string in code generation.\nIt may brings some potential bugs in future.", "author": "JingsongLi", "createdAt": "2020-02-26T08:58:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4NjY1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4NzA5Mw==", "url": "https://github.com/apache/flink/pull/11215#discussion_r383887093", "bodyText": "Move this test to OverWindowITCase.", "author": "JingsongLi", "createdAt": "2020-02-25T13:46:34Z", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/batch/sql/CalcITCase.scala", "diffHunk": "@@ -1244,4 +1247,40 @@ class CalcITCase extends BatchTestBase {\n       Seq(row(1), row(111), row(15), row(34), row(5), row(65), row(null))\n     )\n   }\n+\n+  @Test\n+  def testRankWithCustomModule(): Unit = {\n+    try {\n+      tEnv.unloadModule(\"core\")\n+      tEnv.loadModule(\"test-module\", new TestModule)\n+      tEnv.loadModule(\"core\", CoreModule.INSTANCE)\n+      registerCollection(\"emp\",\n+        Seq(row(\"1\", \"A\", 1), row(\"1\", \"B\", 2), row(\"2\", \"C\", 3)),\n+        new RowTypeInfo(STRING_TYPE_INFO, STRING_TYPE_INFO, INT_TYPE_INFO),\n+        \"dep,name,salary\")\n+      checkResult(", "originalCommit": "ea9722ea905907bdbb959633591186a935c168f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4NzY4MQ==", "url": "https://github.com/apache/flink/pull/11215#discussion_r383887681", "bodyText": "Do we need do this? Every test should be a new context in JUnit?", "author": "JingsongLi", "createdAt": "2020-02-25T13:47:38Z", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/batch/sql/CalcITCase.scala", "diffHunk": "@@ -1244,4 +1247,40 @@ class CalcITCase extends BatchTestBase {\n       Seq(row(1), row(111), row(15), row(34), row(5), row(65), row(null))\n     )\n   }\n+\n+  @Test\n+  def testRankWithCustomModule(): Unit = {\n+    try {\n+      tEnv.unloadModule(\"core\")\n+      tEnv.loadModule(\"test-module\", new TestModule)\n+      tEnv.loadModule(\"core\", CoreModule.INSTANCE)\n+      registerCollection(\"emp\",\n+        Seq(row(\"1\", \"A\", 1), row(\"1\", \"B\", 2), row(\"2\", \"C\", 3)),\n+        new RowTypeInfo(STRING_TYPE_INFO, STRING_TYPE_INFO, INT_TYPE_INFO),\n+        \"dep,name,salary\")\n+      checkResult(\n+        \"select dep,name,rank() over (partition by dep order by salary desc) as rnk from emp\",\n+        Seq(row(\"1\", \"A\", 2), row(\"1\", \"B\", 1), row(\"2\", \"C\", 1)))\n+    } finally {\n+      val modules = tEnv.listModules()", "originalCommit": "ea9722ea905907bdbb959633591186a935c168f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM0NTI3Mg==", "url": "https://github.com/apache/flink/pull/11215#discussion_r384345272", "bodyText": "I think BatchTestBase::tEnv is only initialized once and shared among test cases. I'll double check.", "author": "lirui-apache", "createdAt": "2020-02-26T08:49:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4NzY4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5MjcxMw==", "url": "https://github.com/apache/flink/pull/11215#discussion_r384392713", "bodyText": "We indeed don't have to do this. Thanks for pointing out.", "author": "lirui-apache", "createdAt": "2020-02-26T10:09:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4NzY4MQ=="}], "type": "inlineReview"}, {"oid": "7ff1117bd2b221fc4c4761984e952e380e8946af", "url": "https://github.com/apache/flink/commit/7ff1117bd2b221fc4c4761984e952e380e8946af", "message": "address comments", "committedDate": "2020-02-26T10:01:57Z", "type": "commit"}, {"oid": "a397a816cf507be5810bc6ea2f94a64583fe2ed6", "url": "https://github.com/apache/flink/commit/a397a816cf507be5810bc6ea2f94a64583fe2ed6", "message": "revert unnecessary changes", "committedDate": "2020-02-26T10:07:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyOTMwNw==", "url": "https://github.com/apache/flink/pull/11215#discussion_r384429307", "bodyText": "maybe we could improve this name: MyIsNull ?\nlike IsNullFunction or IsNullUDF or IsNullScalarFunction ?", "author": "libenchao", "createdAt": "2020-02-26T11:17:41Z", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/utils/UserDefinedFunctionTestUtils.scala", "diffHunk": "@@ -377,6 +377,13 @@ object UserDefinedFunctionTestUtils {\n     override def getResultType(signature: Array[Class[_]]): TypeInformation[_] = Types.JAVA_BIG_DEC\n   }\n \n+  @SerialVersionUID(1L)\n+  object MyIsNull extends ScalarFunction {", "originalCommit": "a397a816cf507be5810bc6ea2f94a64583fe2ed6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ5Nzg0Mw==", "url": "https://github.com/apache/flink/pull/11215#discussion_r384497843", "bodyText": "Hmm, IsNullUDF  sounds better to me", "author": "lirui-apache", "createdAt": "2020-02-26T13:41:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyOTMwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyOTgzOQ==", "url": "https://github.com/apache/flink/pull/11215#discussion_r384429839", "bodyText": "isnull -> isNull ?", "author": "libenchao", "createdAt": "2020-02-26T11:18:42Z", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/batch/sql/OverWindowITCase.scala", "diffHunk": "@@ -2576,3 +2594,19 @@ class CountAggFunction extends AggregateFunction[JLong, CountAccumulator] {\n \n   override def getResultType: TypeInformation[JLong] = Types.LONG\n }\n+\n+private class TestModule extends Module {\n+\n+  private val funcName = \"isnull\"", "originalCommit": "a397a816cf507be5810bc6ea2f94a64583fe2ed6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ5OTMxMw==", "url": "https://github.com/apache/flink/pull/11215#discussion_r384499313", "bodyText": "I don't think that matters, because I'm using equalsIgnoreCase down bellow.", "author": "lirui-apache", "createdAt": "2020-02-26T13:44:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyOTgzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQzMDQ1Mw==", "url": "https://github.com/apache/flink/pull/11215#discussion_r384430453", "bodyText": "Collections.singleton(funcName) ?", "author": "libenchao", "createdAt": "2020-02-26T11:19:58Z", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/batch/sql/OverWindowITCase.scala", "diffHunk": "@@ -2576,3 +2594,19 @@ class CountAggFunction extends AggregateFunction[JLong, CountAccumulator] {\n \n   override def getResultType: TypeInformation[JLong] = Types.LONG\n }\n+\n+private class TestModule extends Module {\n+\n+  private val funcName = \"isnull\"\n+\n+  override def listFunctions(): util.Set[String] =\n+    new util.HashSet(Collections.singletonList(funcName))", "originalCommit": "a397a816cf507be5810bc6ea2f94a64583fe2ed6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQzMTE3MQ==", "url": "https://github.com/apache/flink/pull/11215#discussion_r384431171", "bodyText": "java.util already contains java.util.{Collections, Optional} ?", "author": "libenchao", "createdAt": "2020-02-26T11:21:29Z", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/batch/sql/OverWindowITCase.scala", "diffHunk": "@@ -23,16 +23,20 @@ import org.apache.flink.api.java.tuple.{Tuple1 => JTuple1}\n import org.apache.flink.api.java.typeutils.{RowTypeInfo, TupleTypeInfo}\n import org.apache.flink.api.scala._\n import org.apache.flink.table.api.Types\n-import org.apache.flink.table.functions.AggregateFunction\n+import org.apache.flink.table.functions.{AggregateFunction, FunctionDefinition, ScalarFunctionDefinition}\n+import org.apache.flink.table.module.{CoreModule, Module}\n import org.apache.flink.table.planner.runtime.utils.BatchTestBase\n import org.apache.flink.table.planner.runtime.utils.BatchTestBase.row\n import org.apache.flink.table.planner.runtime.utils.TestData._\n+import org.apache.flink.table.planner.runtime.utils.UserDefinedFunctionTestUtils.MyIsNull\n import org.apache.flink.table.planner.utils.DateTimeTestUtil._\n import org.apache.flink.types.Row\n \n import org.junit.{Before, Test}\n \n import java.lang.{Iterable => JIterable, Long => JLong}\n+import java.util\n+import java.util.{Collections, Optional}", "originalCommit": "a397a816cf507be5810bc6ea2f94a64583fe2ed6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4c27210d2ada62de2ab7a1aed1f00469edb96caf", "url": "https://github.com/apache/flink/commit/4c27210d2ada62de2ab7a1aed1f00469edb96caf", "message": "address comments", "committedDate": "2020-02-26T13:58:35Z", "type": "commit"}]}