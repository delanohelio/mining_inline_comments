{"pr_number": 11586, "pr_title": "[FLINK-5552][runtime] make JMXServer static per JVM", "pr_createdAt": "2020-04-01T00:10:27Z", "pr_url": "https://github.com/apache/flink/pull/11586", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0MjE1Mg==", "url": "https://github.com/apache/flink/pull/11586#discussion_r401442152", "bodyText": "This is a bit questionable from a functionality standpoint; is it just for documentation purposes?", "author": "zentol", "createdAt": "2020-04-01T08:29:37Z", "path": "flink-core/src/main/java/org/apache/flink/configuration/JMXServerOptions.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.configuration;\n+\n+import org.apache.flink.annotation.PublicEvolving;\n+import org.apache.flink.annotation.docs.Documentation;\n+\n+import static org.apache.flink.configuration.ConfigOptions.key;\n+\n+/**\n+ * The set of configuration options relating to heartbeat manager settings.\n+ */\n+@PublicEvolving\n+public class JMXServerOptions {\n+\n+\t/** Port configured to enable JMX server for metrics and debugging. */\n+\t@Documentation.Section(Documentation.Sections.COMMON_MISCELLANEOUS)\n+\tpublic static final ConfigOption<String>JMX_SERVER_PORT =\n+\t\tkey(\"jmx.server.port\")\n+\t\t\t.defaultValue(\"-1\")\n+\t\t\t.withDescription(\"The port range for the JMX server to start the registry. The \" +\n+\t\t\t\t\"port config can be a single port: \\\"9123\\\", a range of ports: \\\"50100-50200\\\", \" +\n+\t\t\t\t\"or a list of ranges and ports: \\\"50100-50200,50300-50400,51234\\\".\")\n+\t\t\t.withDeprecatedKeys(\"metrics.reporter.my_jmx_reporter.port\");", "originalCommit": "9944e5e1d6a5029b65e6ffea15eb431ee2896874", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxNDEwOA==", "url": "https://github.com/apache/flink/pull/11586#discussion_r401914108", "bodyText": "associated with the above comment --> the only reason why this is put here is because the port is not longer only configured to be used by JMX reporter. thus if we do not put this here, there's a confusion on which overrides which.\nBut this is a question to answer later - first we need to decide where to put this config.", "author": "walterddr", "createdAt": "2020-04-01T21:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0MjE1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4MTk3OA==", "url": "https://github.com/apache/flink/pull/11586#discussion_r402181978", "bodyText": "I would suggest the following:\n\n\"deprecate\" the JMX reporter option, as in, use the new option by default with a fallback on the old one,\nadd a note into the description of jmx.portthat this option overrides the port option of the JMX reporter", "author": "zentol", "createdAt": "2020-04-02T09:38:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0MjE1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0Mzg3Ng==", "url": "https://github.com/apache/flink/pull/11586#discussion_r401443876", "bodyText": "we should find some way to inform users that we are using the JVM-wide server, since it may (unexpectedly) be running on another port.\nIn a similar vein, we shouldn't close the jmxServer if we're re-using the singleton.", "author": "zentol", "createdAt": "2020-04-01T08:32:35Z", "path": "flink-metrics/flink-metrics-jmx/src/main/java/org/apache/flink/metrics/jmx/JMXReporter.java", "diffHunk": "@@ -96,29 +87,7 @@ public String filterCharacters(String input) {\n \t\tthis.registeredMetrics = new HashMap<>();\n \n \t\tif (portsConfig != null) {\n-\t\t\tIterator<Integer> ports = NetUtils.getPortRangeFromString(portsConfig);\n-\n-\t\t\tJMXServer successfullyStartedServer = null;\n-\t\t\twhile (ports.hasNext() && successfullyStartedServer == null) {\n-\t\t\t\tJMXServer server = new JMXServer();\n-\t\t\t\tint port = ports.next();\n-\t\t\t\ttry {\n-\t\t\t\t\tserver.start(port);\n-\t\t\t\t\tLOG.info(\"Started JMX server on port \" + port + \".\");\n-\t\t\t\t\tsuccessfullyStartedServer = server;\n-\t\t\t\t} catch (IOException ioe) { //assume port conflict\n-\t\t\t\t\tLOG.debug(\"Could not start JMX server on port \" + port + \".\", ioe);\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tserver.stop();\n-\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t\tLOG.debug(\"Could not stop JMX server.\", e);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (successfullyStartedServer == null) {\n-\t\t\t\tthrow new RuntimeException(\"Could not start JMX server on any configured port. Ports: \" + portsConfig);\n-\t\t\t}\n-\t\t\tthis.jmxServer = successfullyStartedServer;\n+\t\t\tthis.jmxServer = JMXServer.getInstance(portsConfig);", "originalCommit": "9944e5e1d6a5029b65e6ffea15eb431ee2896874", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxNjA0Ng==", "url": "https://github.com/apache/flink/pull/11586#discussion_r401916046", "bodyText": "I think so too. good catch.\nAfter the change, the JMXServer static instance will be first created at ClusterEntrypoint & TaskManagerRunner. we should only invoke the close() method there.", "author": "walterddr", "createdAt": "2020-04-01T21:19:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0Mzg3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMjE4OA==", "url": "https://github.com/apache/flink/pull/11586#discussion_r401512188", "bodyText": "I'm not quite convinced that this should be a common option; based on how long we got by without it.", "author": "zentol", "createdAt": "2020-04-01T10:25:11Z", "path": "flink-core/src/main/java/org/apache/flink/configuration/JMXServerOptions.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.configuration;\n+\n+import org.apache.flink.annotation.PublicEvolving;\n+import org.apache.flink.annotation.docs.Documentation;\n+\n+import static org.apache.flink.configuration.ConfigOptions.key;\n+\n+/**\n+ * The set of configuration options relating to heartbeat manager settings.\n+ */\n+@PublicEvolving\n+public class JMXServerOptions {\n+\n+\t/** Port configured to enable JMX server for metrics and debugging. */\n+\t@Documentation.Section(Documentation.Sections.COMMON_MISCELLANEOUS)", "originalCommit": "9944e5e1d6a5029b65e6ffea15eb431ee2896874", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxMzQ1Nw==", "url": "https://github.com/apache/flink/pull/11586#discussion_r401913457", "bodyText": "there are 2 usages I can think of with JMXServer\n\nfor remote RMI attachment (jconsole/jvisualvm/...)\nfor metrics reporting (jmx.reporter).\n\nThere's definitely a chance where user want to only enable JMXRMI capability, not the reporter\n\nJMXRMI during normal operation doesn't attach any MBean to the JMX MBeanServer; ( there's only performance implication when a remote console is attached)\nJMX reporter will always register MBeans for reporting purpose.\n\ndo you think there is any other place more suitable to put this config?", "author": "walterddr", "createdAt": "2020-04-01T21:14:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMjE4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3OTk1MA==", "url": "https://github.com/apache/flink/pull/11586#discussion_r402179950", "bodyText": "I'd put it somewhere under Debugging & Expert Tuning for the time being; none of the existing categories seem to match thoug.", "author": "zentol", "createdAt": "2020-04-02T09:34:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMjE4OA=="}], "type": "inlineReview"}, {"oid": "93e2ff504bdd2caed1fe63fee05fce54b9a96f56", "url": "https://github.com/apache/flink/commit/93e2ff504bdd2caed1fe63fee05fce54b9a96f56", "message": "make all JMXServer public API static and log JMXReporter port configuration deprecate warning.", "committedDate": "2020-04-09T14:50:46Z", "type": "forcePushed"}, {"oid": "613a5fd798911229926144246b94635cde46c6ed", "url": "https://github.com/apache/flink/commit/613a5fd798911229926144246b94635cde46c6ed", "message": "adding in JMXServer test specifically validate startup/tierdown and register MBeans", "committedDate": "2020-05-27T20:23:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM2NzE3NQ==", "url": "https://github.com/apache/flink/pull/11586#discussion_r432367175", "bodyText": "needs an update", "author": "zentol", "createdAt": "2020-05-29T09:30:28Z", "path": "flink-core/src/main/java/org/apache/flink/configuration/JMXServerOptions.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.configuration;\n+\n+import org.apache.flink.annotation.PublicEvolving;\n+import org.apache.flink.annotation.docs.Documentation;\n+\n+import static org.apache.flink.configuration.ConfigOptions.key;\n+\n+/**\n+ * The set of configuration options relating to heartbeat manager settings.", "originalCommit": "613a5fd798911229926144246b94635cde46c6ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM2NzYxMQ==", "url": "https://github.com/apache/flink/pull/11586#discussion_r432367611", "bodyText": "the new section must be integrated into the documentation, by embedding the resulting .html file.", "author": "zentol", "createdAt": "2020-05-29T09:31:18Z", "path": "flink-annotations/src/main/java/org/apache/flink/annotation/docs/Documentation.java", "diffHunk": "@@ -82,6 +82,7 @@\n \t\tpublic static final String STATE_BACKEND_ROCKSDB = \"state_backend_rocksdb\";\n \n \t\tpublic static final String EXPERT_CLASS_LOADING = \"expert_class_loading\";\n+\t\tpublic static final String EXPERT_DEBUGGING_AND_TUNING = \"expert_debugging_and_tuning\";", "originalCommit": "613a5fd798911229926144246b94635cde46c6ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3MDU0OA==", "url": "https://github.com/apache/flink/pull/11586#discussion_r432370548", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * reconstruct again. Instead a warning sign will be posted if the desired\n          \n          \n            \n            \t * reconstructed again. Instead a warning will be logged if the given", "author": "zentol", "createdAt": "2020-05-29T09:36:54Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/management/JMXServer.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.management;\n+\n+import org.apache.flink.configuration.JMXServerOptions;\n+import org.apache.flink.util.NetUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.management.remote.JMXConnectorServer;\n+import javax.management.remote.JMXServiceURL;\n+import javax.management.remote.rmi.RMIConnectorServer;\n+import javax.management.remote.rmi.RMIJRMPServerImpl;\n+\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.net.MalformedURLException;\n+import java.rmi.NoSuchObjectException;\n+import java.rmi.NotBoundException;\n+import java.rmi.Remote;\n+import java.rmi.RemoteException;\n+import java.rmi.registry.Registry;\n+import java.rmi.server.UnicastRemoteObject;\n+import java.util.Iterator;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+\n+/**\n+ * JMX Server implementation that JMX clients can connect to.\n+ *\n+ * <p>Heavily based on j256 simplejmx project\n+ *\n+ * <p>https://github.com/j256/simplejmx/blob/master/src/main/java/com/j256/simplejmx/server/JmxServer.java\n+ */\n+public class JMXServer {\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(JMXServer.class);\n+\n+\tprivate static JMXServer instance = null;\n+\n+\tprivate final AtomicReference<Remote> rmiServerReference = new AtomicReference<>();\n+\n+\tprivate Registry rmiRegistry;\n+\tprivate JMXConnectorServer connector;\n+\tprivate int port;\n+\n+\t/**\n+\t * Construct a new JMV-wide JMX server or acquire existing JMX server.\n+\t *\n+\t * <p>If JMXServer static instance is already constructed, it will not be\n+\t * reconstruct again. Instead a warning sign will be posted if the desired", "originalCommit": "613a5fd798911229926144246b94635cde46c6ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3MTExMg==", "url": "https://github.com/apache/flink/pull/11586#discussion_r432371112", "bodyText": "having no default value at all would make this easier to understand imo", "author": "zentol", "createdAt": "2020-05-29T09:37:55Z", "path": "flink-core/src/main/java/org/apache/flink/configuration/JMXServerOptions.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.configuration;\n+\n+import org.apache.flink.annotation.PublicEvolving;\n+import org.apache.flink.annotation.docs.Documentation;\n+\n+import static org.apache.flink.configuration.ConfigOptions.key;\n+\n+/**\n+ * The set of configuration options relating to heartbeat manager settings.\n+ */\n+@PublicEvolving\n+public class JMXServerOptions {\n+\n+\t/** Port configured to enable JMX server for metrics and debugging. */\n+\t@Documentation.Section(Documentation.Sections.EXPERT_DEBUGGING_AND_TUNING)\n+\tpublic static final ConfigOption<String>JMX_SERVER_PORT =\n+\t\tkey(\"jmx.server.port\")\n+\t\t\t.defaultValue(\"-1\")", "originalCommit": "613a5fd798911229926144246b94635cde46c6ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4MjY0MA==", "url": "https://github.com/apache/flink/pull/11586#discussion_r432582640", "bodyText": "hmm this is the part I am also struggling. --> how to make the original JMXReporter.port configuration work as a \"deprecated option\" but make it still working.\nideally speaking this JMX_SERVER_PORT config should override the ones in JMXReporter, but the config string for that is actually dynamic. e.g. jmxreporter.<my_jmxrepoter_name>.port --> makes it hard to fallback.\nI was trying to use a \"-1\" here to indicate that a global JMXServer singelton should not be initialized during the taskmanager / jobmaster startup, instead differ to the JMXReporter startup. (that's where the \"<my_reporter_name>\" config can be accessed.", "author": "walterddr", "createdAt": "2020-05-29T15:58:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3MTExMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgwMDk5Mg==", "url": "https://github.com/apache/flink/pull/11586#discussion_r433800992", "bodyText": "But the current code handles this fine though, right?\nYou just have to replace\nportsConfig.equals(JMXServerOptions.JMX_SERVER_PORT.defaultValue())\n\nwith\nportsConfig == null\n\nin JMXServer#startInstance(string). That's ultimately all I was suggesting.", "author": "zentol", "createdAt": "2020-06-02T11:18:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3MTExMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3MjEyMw==", "url": "https://github.com/apache/flink/pull/11586#discussion_r432372123", "bodyText": "these methods should be made thread-safe, otherwise you can end up starting 2 servers and never shutting one of them down.", "author": "zentol", "createdAt": "2020-05-29T09:39:50Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/management/JMXServer.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.management;\n+\n+import org.apache.flink.configuration.JMXServerOptions;\n+import org.apache.flink.util.NetUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.management.remote.JMXConnectorServer;\n+import javax.management.remote.JMXServiceURL;\n+import javax.management.remote.rmi.RMIConnectorServer;\n+import javax.management.remote.rmi.RMIJRMPServerImpl;\n+\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.net.MalformedURLException;\n+import java.rmi.NoSuchObjectException;\n+import java.rmi.NotBoundException;\n+import java.rmi.Remote;\n+import java.rmi.RemoteException;\n+import java.rmi.registry.Registry;\n+import java.rmi.server.UnicastRemoteObject;\n+import java.util.Iterator;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+\n+/**\n+ * JMX Server implementation that JMX clients can connect to.\n+ *\n+ * <p>Heavily based on j256 simplejmx project\n+ *\n+ * <p>https://github.com/j256/simplejmx/blob/master/src/main/java/com/j256/simplejmx/server/JmxServer.java\n+ */\n+public class JMXServer {\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(JMXServer.class);\n+\n+\tprivate static JMXServer instance = null;\n+\n+\tprivate final AtomicReference<Remote> rmiServerReference = new AtomicReference<>();\n+\n+\tprivate Registry rmiRegistry;\n+\tprivate JMXConnectorServer connector;\n+\tprivate int port;\n+\n+\t/**\n+\t * Construct a new JMV-wide JMX server or acquire existing JMX server.\n+\t *\n+\t * <p>If JMXServer static instance is already constructed, it will not be\n+\t * reconstruct again. Instead a warning sign will be posted if the desired\n+\t * port configuration doesn't match the existing JMXServer static instance.\n+\t *\n+\t * @param portsConfig port configuration of the JMX server.\n+\t * @return JMXServer static instance.\n+\t */\n+\tpublic static JMXServer startInstance(String portsConfig) {", "originalCommit": "613a5fd798911229926144246b94635cde46c6ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3MzkxNg==", "url": "https://github.com/apache/flink/pull/11586#discussion_r432373916", "bodyText": "I'd move this into #startInstance; if portsConfig is an empty string then the iterator is empty, allowing you to easily check for the port to not be configured.", "author": "zentol", "createdAt": "2020-05-29T09:43:13Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/management/JMXServer.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.management;\n+\n+import org.apache.flink.configuration.JMXServerOptions;\n+import org.apache.flink.util.NetUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.management.remote.JMXConnectorServer;\n+import javax.management.remote.JMXServiceURL;\n+import javax.management.remote.rmi.RMIConnectorServer;\n+import javax.management.remote.rmi.RMIJRMPServerImpl;\n+\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.net.MalformedURLException;\n+import java.rmi.NoSuchObjectException;\n+import java.rmi.NotBoundException;\n+import java.rmi.Remote;\n+import java.rmi.RemoteException;\n+import java.rmi.registry.Registry;\n+import java.rmi.server.UnicastRemoteObject;\n+import java.util.Iterator;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+\n+/**\n+ * JMX Server implementation that JMX clients can connect to.\n+ *\n+ * <p>Heavily based on j256 simplejmx project\n+ *\n+ * <p>https://github.com/j256/simplejmx/blob/master/src/main/java/com/j256/simplejmx/server/JmxServer.java\n+ */\n+public class JMXServer {\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(JMXServer.class);\n+\n+\tprivate static JMXServer instance = null;\n+\n+\tprivate final AtomicReference<Remote> rmiServerReference = new AtomicReference<>();\n+\n+\tprivate Registry rmiRegistry;\n+\tprivate JMXConnectorServer connector;\n+\tprivate int port;\n+\n+\t/**\n+\t * Construct a new JMV-wide JMX server or acquire existing JMX server.\n+\t *\n+\t * <p>If JMXServer static instance is already constructed, it will not be\n+\t * reconstruct again. Instead a warning sign will be posted if the desired\n+\t * port configuration doesn't match the existing JMXServer static instance.\n+\t *\n+\t * @param portsConfig port configuration of the JMX server.\n+\t * @return JMXServer static instance.\n+\t */\n+\tpublic static JMXServer startInstance(String portsConfig) {\n+\t\tif (instance == null) {\n+\t\t\tif (!portsConfig.equals(JMXServerOptions.JMX_SERVER_PORT.defaultValue())) {\n+\t\t\t\tinstance = startJMXServerWithPortRanges(portsConfig);\n+\t\t\t} else {\n+\t\t\t\tLOG.warn(\"JMX Server start failed. No explicit JMX port is configured.\");\n+\t\t\t\tinstance = null;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tLOG.warn(\"JVM-wide JMXServer already started at port: \" + instance.port);\n+\t\t}\n+\t\treturn instance;\n+\t}\n+\n+\t/**\n+\t * Acquire existing JMX server. or null if not started.\n+\t *\n+\t * @return the JMXServer static instance.\n+\t */\n+\tpublic static JMXServer getInstance() {\n+\t\treturn instance;\n+\t}\n+\n+\t/**\n+\t * Stop the JMX server.\n+\t */\n+\tpublic static void stopInstance() throws IOException {\n+\t\tif (instance != null) {\n+\t\t\tinstance.stop();\n+\t\t\tinstance = null;\n+\t\t}\n+\t}\n+\n+\tpublic static int getPort() {\n+\t\tif (instance != null) {\n+\t\t\treturn instance.port;\n+\t\t} else {\n+\t\t\treturn -1;\n+\t\t}\n+\t}\n+\n+\tprivate static JMXServer startJMXServerWithPortRanges(String portsConfig) {\n+\t\tIterator<Integer> ports = NetUtils.getPortRangeFromString(portsConfig);", "originalCommit": "613a5fd798911229926144246b94635cde46c6ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NDQzMQ==", "url": "https://github.com/apache/flink/pull/11586#discussion_r432374431", "bodyText": "return an Optional instead, then you can probably also get rid of JMXServer#getInstance", "author": "zentol", "createdAt": "2020-05-29T09:44:05Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/management/JMXServer.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.management;\n+\n+import org.apache.flink.configuration.JMXServerOptions;\n+import org.apache.flink.util.NetUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.management.remote.JMXConnectorServer;\n+import javax.management.remote.JMXServiceURL;\n+import javax.management.remote.rmi.RMIConnectorServer;\n+import javax.management.remote.rmi.RMIJRMPServerImpl;\n+\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.net.MalformedURLException;\n+import java.rmi.NoSuchObjectException;\n+import java.rmi.NotBoundException;\n+import java.rmi.Remote;\n+import java.rmi.RemoteException;\n+import java.rmi.registry.Registry;\n+import java.rmi.server.UnicastRemoteObject;\n+import java.util.Iterator;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+\n+/**\n+ * JMX Server implementation that JMX clients can connect to.\n+ *\n+ * <p>Heavily based on j256 simplejmx project\n+ *\n+ * <p>https://github.com/j256/simplejmx/blob/master/src/main/java/com/j256/simplejmx/server/JmxServer.java\n+ */\n+public class JMXServer {\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(JMXServer.class);\n+\n+\tprivate static JMXServer instance = null;\n+\n+\tprivate final AtomicReference<Remote> rmiServerReference = new AtomicReference<>();\n+\n+\tprivate Registry rmiRegistry;\n+\tprivate JMXConnectorServer connector;\n+\tprivate int port;\n+\n+\t/**\n+\t * Construct a new JMV-wide JMX server or acquire existing JMX server.\n+\t *\n+\t * <p>If JMXServer static instance is already constructed, it will not be\n+\t * reconstruct again. Instead a warning sign will be posted if the desired\n+\t * port configuration doesn't match the existing JMXServer static instance.\n+\t *\n+\t * @param portsConfig port configuration of the JMX server.\n+\t * @return JMXServer static instance.\n+\t */\n+\tpublic static JMXServer startInstance(String portsConfig) {\n+\t\tif (instance == null) {\n+\t\t\tif (!portsConfig.equals(JMXServerOptions.JMX_SERVER_PORT.defaultValue())) {\n+\t\t\t\tinstance = startJMXServerWithPortRanges(portsConfig);\n+\t\t\t} else {\n+\t\t\t\tLOG.warn(\"JMX Server start failed. No explicit JMX port is configured.\");\n+\t\t\t\tinstance = null;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tLOG.warn(\"JVM-wide JMXServer already started at port: \" + instance.port);\n+\t\t}\n+\t\treturn instance;\n+\t}\n+\n+\t/**\n+\t * Acquire existing JMX server. or null if not started.\n+\t *\n+\t * @return the JMXServer static instance.\n+\t */\n+\tpublic static JMXServer getInstance() {\n+\t\treturn instance;\n+\t}\n+\n+\t/**\n+\t * Stop the JMX server.\n+\t */\n+\tpublic static void stopInstance() throws IOException {\n+\t\tif (instance != null) {\n+\t\t\tinstance.stop();\n+\t\t\tinstance = null;\n+\t\t}\n+\t}\n+\n+\tpublic static int getPort() {", "originalCommit": "613a5fd798911229926144246b94635cde46c6ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NDU3Mw==", "url": "https://github.com/apache/flink/pull/11586#discussion_r432374573", "bodyText": "return an Optional instead", "author": "zentol", "createdAt": "2020-05-29T09:44:24Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/management/JMXServer.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.management;\n+\n+import org.apache.flink.configuration.JMXServerOptions;\n+import org.apache.flink.util.NetUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.management.remote.JMXConnectorServer;\n+import javax.management.remote.JMXServiceURL;\n+import javax.management.remote.rmi.RMIConnectorServer;\n+import javax.management.remote.rmi.RMIJRMPServerImpl;\n+\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.net.MalformedURLException;\n+import java.rmi.NoSuchObjectException;\n+import java.rmi.NotBoundException;\n+import java.rmi.Remote;\n+import java.rmi.RemoteException;\n+import java.rmi.registry.Registry;\n+import java.rmi.server.UnicastRemoteObject;\n+import java.util.Iterator;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+\n+/**\n+ * JMX Server implementation that JMX clients can connect to.\n+ *\n+ * <p>Heavily based on j256 simplejmx project\n+ *\n+ * <p>https://github.com/j256/simplejmx/blob/master/src/main/java/com/j256/simplejmx/server/JmxServer.java\n+ */\n+public class JMXServer {\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(JMXServer.class);\n+\n+\tprivate static JMXServer instance = null;\n+\n+\tprivate final AtomicReference<Remote> rmiServerReference = new AtomicReference<>();\n+\n+\tprivate Registry rmiRegistry;\n+\tprivate JMXConnectorServer connector;\n+\tprivate int port;\n+\n+\t/**\n+\t * Construct a new JMV-wide JMX server or acquire existing JMX server.\n+\t *\n+\t * <p>If JMXServer static instance is already constructed, it will not be\n+\t * reconstruct again. Instead a warning sign will be posted if the desired\n+\t * port configuration doesn't match the existing JMXServer static instance.\n+\t *\n+\t * @param portsConfig port configuration of the JMX server.\n+\t * @return JMXServer static instance.\n+\t */\n+\tpublic static JMXServer startInstance(String portsConfig) {\n+\t\tif (instance == null) {\n+\t\t\tif (!portsConfig.equals(JMXServerOptions.JMX_SERVER_PORT.defaultValue())) {\n+\t\t\t\tinstance = startJMXServerWithPortRanges(portsConfig);\n+\t\t\t} else {\n+\t\t\t\tLOG.warn(\"JMX Server start failed. No explicit JMX port is configured.\");\n+\t\t\t\tinstance = null;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tLOG.warn(\"JVM-wide JMXServer already started at port: \" + instance.port);\n+\t\t}\n+\t\treturn instance;\n+\t}\n+\n+\t/**\n+\t * Acquire existing JMX server. or null if not started.\n+\t *\n+\t * @return the JMXServer static instance.\n+\t */\n+\tpublic static JMXServer getInstance() {", "originalCommit": "613a5fd798911229926144246b94635cde46c6ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NTc2MQ==", "url": "https://github.com/apache/flink/pull/11586#discussion_r432375761", "bodyText": "this line should never be reached", "author": "zentol", "createdAt": "2020-05-29T09:46:39Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/management/JMXServerTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.management;\n+\n+import org.junit.Test;\n+\n+import javax.management.InstanceNotFoundException;\n+import javax.management.MBeanServer;\n+import javax.management.MBeanServerConnection;\n+import javax.management.ObjectName;\n+import javax.management.remote.JMXConnector;\n+import javax.management.remote.JMXConnectorFactory;\n+import javax.management.remote.JMXServiceURL;\n+\n+import java.lang.management.ManagementFactory;\n+import java.net.ServerSocket;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests for the JMXServer.\n+ */\n+public class JMXServerTest {\n+\n+\t/**\n+\t * Verifies initialize with port range.\n+\t */\n+\t@Test\n+\tpublic void testJMXServerInit() throws Exception {\n+\t\ttry {\n+\t\t\tJMXServer.startInstance(\"23456-23466\");\n+\t\t\tassertNotNull(JMXServer.getInstance());\n+\t\t} finally {\n+\t\t\tJMXServer.stopInstance();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Verifies initialize failure with occupied port.\n+\t */\n+\t@Test\n+\tpublic void testJMXServerInitWithInvalidPorts() throws Exception {\n+\t\ttry {\n+\t\t\tServerSocket socket = new ServerSocket(23456);\n+\t\t\tassertEquals(23456, socket.getLocalPort());\n+\t\t\tJMXServer.startInstance(\"23456\");\n+\t\t\tassertNull(JMXServer.getInstance());", "originalCommit": "613a5fd798911229926144246b94635cde46c6ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NjcwNg==", "url": "https://github.com/apache/flink/pull/11586#discussion_r432376706", "bodyText": "This should have a private constructor if all instantiations are supposed to go through startInstance. If not, then an explicit constructor might clarify things a bit.", "author": "zentol", "createdAt": "2020-05-29T09:48:25Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/management/JMXServer.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.management;\n+\n+import org.apache.flink.configuration.JMXServerOptions;\n+import org.apache.flink.util.NetUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.management.remote.JMXConnectorServer;\n+import javax.management.remote.JMXServiceURL;\n+import javax.management.remote.rmi.RMIConnectorServer;\n+import javax.management.remote.rmi.RMIJRMPServerImpl;\n+\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.net.MalformedURLException;\n+import java.rmi.NoSuchObjectException;\n+import java.rmi.NotBoundException;\n+import java.rmi.Remote;\n+import java.rmi.RemoteException;\n+import java.rmi.registry.Registry;\n+import java.rmi.server.UnicastRemoteObject;\n+import java.util.Iterator;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+\n+/**\n+ * JMX Server implementation that JMX clients can connect to.\n+ *\n+ * <p>Heavily based on j256 simplejmx project\n+ *\n+ * <p>https://github.com/j256/simplejmx/blob/master/src/main/java/com/j256/simplejmx/server/JmxServer.java\n+ */\n+public class JMXServer {", "originalCommit": "613a5fd798911229926144246b94635cde46c6ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NzYwMA==", "url": "https://github.com/apache/flink/pull/11586#discussion_r432377600", "bodyText": "I'd say that the JMXServer itself should not have the singleton logic, and instead have something like a SingletonHolder object for that stuff.\nThere is for example no reason why the tests should work with a singleton; this usually just leads to issues.", "author": "zentol", "createdAt": "2020-05-29T09:50:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NjcwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU3OTg1OQ==", "url": "https://github.com/apache/flink/pull/11586#discussion_r432579859", "bodyText": "This actually is a great idea. I would do that. thanks for the advice! :-)", "author": "walterddr", "createdAt": "2020-05-29T15:54:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NjcwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgwMTQ4Ng==", "url": "https://github.com/apache/flink/pull/11586#discussion_r433801486", "bodyText": "This should not be logged as a warning (since it is completely fine to not have a JMXServer); probably only at debug.", "author": "zentol", "createdAt": "2020-06-02T11:19:58Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/management/JMXServer.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.management;\n+\n+import org.apache.flink.configuration.JMXServerOptions;\n+import org.apache.flink.util.NetUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.management.remote.JMXConnectorServer;\n+import javax.management.remote.JMXServiceURL;\n+import javax.management.remote.rmi.RMIConnectorServer;\n+import javax.management.remote.rmi.RMIJRMPServerImpl;\n+\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.net.MalformedURLException;\n+import java.rmi.NoSuchObjectException;\n+import java.rmi.NotBoundException;\n+import java.rmi.Remote;\n+import java.rmi.RemoteException;\n+import java.rmi.registry.Registry;\n+import java.rmi.server.UnicastRemoteObject;\n+import java.util.Iterator;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+\n+/**\n+ * JMX Server implementation that JMX clients can connect to.\n+ *\n+ * <p>Heavily based on j256 simplejmx project\n+ *\n+ * <p>https://github.com/j256/simplejmx/blob/master/src/main/java/com/j256/simplejmx/server/JmxServer.java\n+ */\n+public class JMXServer {\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(JMXServer.class);\n+\n+\tprivate static JMXServer instance = null;\n+\n+\tprivate final AtomicReference<Remote> rmiServerReference = new AtomicReference<>();\n+\n+\tprivate Registry rmiRegistry;\n+\tprivate JMXConnectorServer connector;\n+\tprivate int port;\n+\n+\t/**\n+\t * Construct a new JMV-wide JMX server or acquire existing JMX server.\n+\t *\n+\t * <p>If JMXServer static instance is already constructed, it will not be\n+\t * reconstruct again. Instead a warning sign will be posted if the desired\n+\t * port configuration doesn't match the existing JMXServer static instance.\n+\t *\n+\t * @param portsConfig port configuration of the JMX server.\n+\t * @return JMXServer static instance.\n+\t */\n+\tpublic static JMXServer startInstance(String portsConfig) {\n+\t\tif (instance == null) {\n+\t\t\tif (!portsConfig.equals(JMXServerOptions.JMX_SERVER_PORT.defaultValue())) {\n+\t\t\t\tinstance = startJMXServerWithPortRanges(portsConfig);\n+\t\t\t} else {\n+\t\t\t\tLOG.warn(\"JMX Server start failed. No explicit JMX port is configured.\");", "originalCommit": "613a5fd798911229926144246b94635cde46c6ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0c0af972ac3f8477eba6c65cfe990a6af0105707", "url": "https://github.com/apache/flink/commit/0c0af972ac3f8477eba6c65cfe990a6af0105707", "message": "[hotfix] regenerate doc", "committedDate": "2020-06-05T14:36:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5Nzk3Nw==", "url": "https://github.com/apache/flink/pull/11586#discussion_r460797977", "bodyText": "this could be shortened to Optional.ofNullable(jmxServer).map(JMXServer::getPort);", "author": "zentol", "createdAt": "2020-07-27T10:32:16Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/management/JMXService.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.management;\n+\n+import org.apache.flink.util.NetUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Optional;\n+\n+/**\n+ * Provide a JVM-wide singleton JMX Service.\n+ */\n+public class JMXService {\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(JMXService.class);\n+\tprivate static JMXServer jmxServer = null;\n+\n+\t/**\n+\t * Acquire the global singleton JMXServer instance.\n+\t *\n+\t * @return JMXServer static instance.\n+\t */\n+\tpublic static JMXServer getInstance() {\n+\t\treturn jmxServer;\n+\t}\n+\n+\t/**\n+\t * Start the JMV-wide singleton JMX server.\n+\t *\n+\t * <p>If JMXServer static instance is already started, it will not be\n+\t * started again. Instead a warning will be logged indicating which port\n+\t * the existing JMXServer static instance is exposing.\n+\t *\n+\t * @param portsConfig port configuration of the JMX server.\n+\t */\n+\tpublic static synchronized void startInstance(String portsConfig) {\n+\t\tif (jmxServer == null) {\n+\t\t\tif (portsConfig != null) {\n+\t\t\t\tIterator<Integer> ports = NetUtils.getPortRangeFromString(portsConfig);\n+\t\t\t\tif (ports.hasNext()) {\n+\t\t\t\t\tjmxServer = startJMXServerWithPortRanges(ports);\n+\t\t\t\t}\n+\t\t\t\tif (jmxServer == null) {\n+\t\t\t\t\tLOG.error(\"Could not start JMx server on any configured port(s) in: \" + portsConfig);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tLOG.warn(\"JVM-wide JMXServer already started at port: \" + jmxServer.getPort());\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Stop the JMX server.\n+\t */\n+\tpublic static synchronized void stopInstance() throws IOException {\n+\t\tif (jmxServer != null) {\n+\t\t\tjmxServer.stop();\n+\t\t\tjmxServer = null;\n+\t\t}\n+\t}\n+\n+\tpublic static Optional<Integer> getPort() {\n+\t\tif (jmxServer == null) {", "originalCommit": "0c0af972ac3f8477eba6c65cfe990a6af0105707", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5OTcwMw==", "url": "https://github.com/apache/flink/pull/11586#discussion_r460799703", "bodyText": "where do these come from? O.o", "author": "zentol", "createdAt": "2020-07-27T10:35:45Z", "path": "docs/_includes/generated/stop_configuration.html", "diffHunk": "@@ -0,0 +1,12 @@\n+<table class=\"table table-bordered\">", "originalCommit": "0c0af972ac3f8477eba6c65cfe990a6af0105707", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwMDE4MQ==", "url": "https://github.com/apache/flink/pull/11586#discussion_r460800181", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\"this option overrides metrics.reporter.*.port configurations.\");\n          \n          \n            \n            \t\t\t\t\"This option overrides metrics.reporter.*.port option.\");", "author": "zentol", "createdAt": "2020-07-27T10:36:50Z", "path": "flink-core/src/main/java/org/apache/flink/configuration/JMXServerOptions.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.configuration;\n+\n+import org.apache.flink.annotation.PublicEvolving;\n+import org.apache.flink.annotation.docs.Documentation;\n+\n+import static org.apache.flink.configuration.ConfigOptions.key;\n+\n+/**\n+ * The set of configuration options relating to JMX server.\n+ */\n+@PublicEvolving\n+public class JMXServerOptions {\n+\n+\t/** Port configured to enable JMX server for metrics and debugging. */\n+\t@Documentation.Section(Documentation.Sections.EXPERT_DEBUGGING_AND_TUNING)\n+\tpublic static final ConfigOption<String>JMX_SERVER_PORT =\n+\t\tkey(\"jmx.server.port\")\n+\t\t\t.noDefaultValue()\n+\t\t\t.withDescription(\"The port range for the JMX server to start the registry. The \" +\n+\t\t\t\t\"port config can be a single port: \\\"9123\\\", a range of ports: \\\"50100-50200\\\", \" +\n+\t\t\t\t\"or a list of ranges and ports: \\\"50100-50200,50300-50400,51234\\\". \\n\" +\n+\t\t\t\t\"this option overrides metrics.reporter.*.port configurations.\");", "originalCommit": "0c0af972ac3f8477eba6c65cfe990a6af0105707", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwMTMzMQ==", "url": "https://github.com/apache/flink/pull/11586#discussion_r460801331", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t.withDescription(\"The port range for the JMX server to start the registry. The \" +\n          \n          \n            \n            \t\t\t.withDescription(Description.builder()\n          \n          \n            \n            \t\t\t\t.text(...port config...)\n          \n          \n            \n            \t\t\t\t.lineBreak()\n          \n          \n            \n            \t\t\t\t.text(...overrides...)\n          \n          \n            \n            \t\t\t\t.build());", "author": "zentol", "createdAt": "2020-07-27T10:39:28Z", "path": "flink-core/src/main/java/org/apache/flink/configuration/JMXServerOptions.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.configuration;\n+\n+import org.apache.flink.annotation.PublicEvolving;\n+import org.apache.flink.annotation.docs.Documentation;\n+\n+import static org.apache.flink.configuration.ConfigOptions.key;\n+\n+/**\n+ * The set of configuration options relating to JMX server.\n+ */\n+@PublicEvolving\n+public class JMXServerOptions {\n+\n+\t/** Port configured to enable JMX server for metrics and debugging. */\n+\t@Documentation.Section(Documentation.Sections.EXPERT_DEBUGGING_AND_TUNING)\n+\tpublic static final ConfigOption<String>JMX_SERVER_PORT =\n+\t\tkey(\"jmx.server.port\")\n+\t\t\t.noDefaultValue()\n+\t\t\t.withDescription(\"The port range for the JMX server to start the registry. The \" +", "originalCommit": "0c0af972ac3f8477eba6c65cfe990a6af0105707", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwMjU3MA==", "url": "https://github.com/apache/flink/pull/11586#discussion_r460802570", "bodyText": "unused?", "author": "zentol", "createdAt": "2020-07-27T10:42:15Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/management/JMXServerTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.management;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.management.InstanceNotFoundException;\n+import javax.management.MBeanServer;\n+import javax.management.MBeanServerConnection;\n+import javax.management.ObjectName;\n+import javax.management.remote.JMXConnector;\n+import javax.management.remote.JMXConnectorFactory;\n+import javax.management.remote.JMXServiceURL;\n+\n+import java.lang.management.ManagementFactory;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test for {@link JMXServer} functionality.\n+ */\n+public class JMXServerTest {\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\tJMXService.startInstance(\"23456-23466\");\n+\t}\n+\n+\t@After\n+\tpublic void tierDown() throws Exception {\n+\t\tJMXService.stopInstance();\n+\t}\n+\n+\t/**\n+\t * Verifies initialize, registered mBean and retrieval via attribute.\n+\t */\n+\t@Test\n+\tpublic void testJMXServiceRegisterMBean() throws Exception {\n+\t\tTestObject testObject = new TestObject();\n+\t\tObjectName testObjectName = new ObjectName(\"org.apache.flink.management\", \"key\", \"value\");\n+\t\tMBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();\n+\n+\t\ttry {\n+\t\t\tJMXServer server = JMXService.getInstance();", "originalCommit": "0c0af972ac3f8477eba6c65cfe990a6af0105707", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwMjk1OA==", "url": "https://github.com/apache/flink/pull/11586#discussion_r460802958", "bodyText": "Return an Optional instead.", "author": "zentol", "createdAt": "2020-07-27T10:42:56Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/management/JMXService.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.management;\n+\n+import org.apache.flink.util.NetUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Optional;\n+\n+/**\n+ * Provide a JVM-wide singleton JMX Service.\n+ */\n+public class JMXService {\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(JMXService.class);\n+\tprivate static JMXServer jmxServer = null;\n+\n+\t/**\n+\t * Acquire the global singleton JMXServer instance.\n+\t *\n+\t * @return JMXServer static instance.\n+\t */\n+\tpublic static JMXServer getInstance() {", "originalCommit": "0c0af972ac3f8477eba6c65cfe990a6af0105707", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwMzA0Mg==", "url": "https://github.com/apache/flink/pull/11586#discussion_r460803042", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\tLOG.error(\"Could not start JMx server on any configured port(s) in: \" + portsConfig);\n          \n          \n            \n            \t\t\t\t\tLOG.error(\"Could not start JMX server on any configured port(s) in: \" + portsConfig);", "author": "zentol", "createdAt": "2020-07-27T10:43:08Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/management/JMXService.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.management;\n+\n+import org.apache.flink.util.NetUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Optional;\n+\n+/**\n+ * Provide a JVM-wide singleton JMX Service.\n+ */\n+public class JMXService {\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(JMXService.class);\n+\tprivate static JMXServer jmxServer = null;\n+\n+\t/**\n+\t * Acquire the global singleton JMXServer instance.\n+\t *\n+\t * @return JMXServer static instance.\n+\t */\n+\tpublic static JMXServer getInstance() {\n+\t\treturn jmxServer;\n+\t}\n+\n+\t/**\n+\t * Start the JMV-wide singleton JMX server.\n+\t *\n+\t * <p>If JMXServer static instance is already started, it will not be\n+\t * started again. Instead a warning will be logged indicating which port\n+\t * the existing JMXServer static instance is exposing.\n+\t *\n+\t * @param portsConfig port configuration of the JMX server.\n+\t */\n+\tpublic static synchronized void startInstance(String portsConfig) {\n+\t\tif (jmxServer == null) {\n+\t\t\tif (portsConfig != null) {\n+\t\t\t\tIterator<Integer> ports = NetUtils.getPortRangeFromString(portsConfig);\n+\t\t\t\tif (ports.hasNext()) {\n+\t\t\t\t\tjmxServer = startJMXServerWithPortRanges(ports);\n+\t\t\t\t}\n+\t\t\t\tif (jmxServer == null) {\n+\t\t\t\t\tLOG.error(\"Could not start JMx server on any configured port(s) in: \" + portsConfig);", "originalCommit": "0c0af972ac3f8477eba6c65cfe990a6af0105707", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwNDIyMg==", "url": "https://github.com/apache/flink/pull/11586#discussion_r460804222", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tServerSocket socket = null;\n          \n          \n            \n            \t\ttry {\n          \n          \n            \n            \t\t\tsocket = new ServerSocket(23456);\n          \n          \n            \n            \t\t\tassertEquals(23456, socket.getLocalPort());\n          \n          \n            \n            \t\t\tJMXService.startInstance(\"23456\");\n          \n          \n            \n            \t\t\tassertNull(JMXService.getInstance());\n          \n          \n            \n            \t\t} finally {\n          \n          \n            \n            \t\t\tif (socket != null) {\n          \n          \n            \n            \t\t\t\tsocket.close();\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\ttry (ServerSocket socket = new ServerSocket(23456)) {\n          \n          \n            \n            \t\t\tassertEquals(23456, socket.getLocalPort());\n          \n          \n            \n            \t\t\tJMXService.startInstance(\"23456\");\n          \n          \n            \n            \t\t\tassertNull(JMXService.getInstance());\n          \n          \n            \n            \t\t}", "author": "zentol", "createdAt": "2020-07-27T10:45:37Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/management/JMXServiceTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.management;\n+\n+import org.junit.Test;\n+\n+import java.net.ServerSocket;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests for the singleton usage via {@link JMXService}.\n+ */\n+public class JMXServiceTest {\n+\n+\t/**\n+\t * Verifies initialize with port range.\n+\t */\n+\t@Test\n+\tpublic void testJMXServiceInit() throws Exception {\n+\t\ttry {\n+\t\t\tJMXService.startInstance(\"23456-23466\");\n+\t\t\tassertTrue(JMXService.getPort().isPresent());\n+\t\t} finally {\n+\t\t\tJMXService.stopInstance();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Verifies initialize failure with occupied port.\n+\t */\n+\t@Test\n+\tpublic void testJMXServiceInitWithInvalidPorts() throws Exception {\n+\t\tServerSocket socket = null;\n+\t\ttry {\n+\t\t\tsocket = new ServerSocket(23456);\n+\t\t\tassertEquals(23456, socket.getLocalPort());\n+\t\t\tJMXService.startInstance(\"23456\");\n+\t\t\tassertNull(JMXService.getInstance());\n+\t\t} finally {\n+\t\t\tif (socket != null) {\n+\t\t\t\tsocket.close();\n+\t\t\t}\n+\t\t}", "originalCommit": "0c0af972ac3f8477eba6c65cfe990a6af0105707", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "780ecf8a0edb014a6f5708a2bc6defd69dc4f4fa", "url": "https://github.com/apache/flink/commit/780ecf8a0edb014a6f5708a2bc6defd69dc4f4fa", "message": "[FLINK-5552] make JMXServer static per JVM and start them in each JMV entry point (ClusterEntrypoint & TaskManagerRunner)\n\nimprove doc as well\n\nUpdate document according to PR comments\n\nmake all JMXServer public API static and log JMXReporter port configuration deprecate warning.", "committedDate": "2020-08-01T14:57:30Z", "type": "commit"}, {"oid": "9620e0d85823fd9e292035de4b50cb0037ef406d", "url": "https://github.com/apache/flink/commit/9620e0d85823fd9e292035de4b50cb0037ef406d", "message": "cherry-picked FLINK-16697 changes to JMXServer", "committedDate": "2020-08-01T14:57:30Z", "type": "commit"}, {"oid": "90db1f10ed019ced524b27cdd0f2ab60d676a1d6", "url": "https://github.com/apache/flink/commit/90db1f10ed019ced524b27cdd0f2ab60d676a1d6", "message": "adding in JMXServer test specifically validate startup/tierdown and register MBeans", "committedDate": "2020-08-01T14:57:30Z", "type": "commit"}, {"oid": "eff0abbbdf3c48a05a3e6c8626d19b2f95439770", "url": "https://github.com/apache/flink/commit/eff0abbbdf3c48a05a3e6c8626d19b2f95439770", "message": "[hotfix] address diff comments", "committedDate": "2020-08-01T14:57:30Z", "type": "commit"}, {"oid": "08d94f69627b70972dcdebfdc47dff02a8bbd1a9", "url": "https://github.com/apache/flink/commit/08d94f69627b70972dcdebfdc47dff02a8bbd1a9", "message": "[hotfix] regenerate doc", "committedDate": "2020-08-01T14:57:31Z", "type": "commit"}, {"oid": "7ccd9503c18aa3a191e6216cd4c7ea1eaed0def3", "url": "https://github.com/apache/flink/commit/7ccd9503c18aa3a191e6216cd4c7ea1eaed0def3", "message": "address diff comments", "committedDate": "2020-08-01T16:31:33Z", "type": "forcePushed"}, {"oid": "7dcab37b9b395b0a31fff1d7f1cc440c2e1aab27", "url": "https://github.com/apache/flink/commit/7dcab37b9b395b0a31fff1d7f1cc440c2e1aab27", "message": "address diff comments", "committedDate": "2020-08-02T16:51:34Z", "type": "commit"}, {"oid": "7dcab37b9b395b0a31fff1d7f1cc440c2e1aab27", "url": "https://github.com/apache/flink/commit/7dcab37b9b395b0a31fff1d7f1cc440c2e1aab27", "message": "address diff comments", "committedDate": "2020-08-02T16:51:34Z", "type": "forcePushed"}, {"oid": "77d4ef7f7de8aa619e29b0b2b55a8794e15f0ab4", "url": "https://github.com/apache/flink/commit/77d4ef7f7de8aa619e29b0b2b55a8794e15f0ab4", "message": "Update JMXServerTest.java", "committedDate": "2020-08-03T09:11:19Z", "type": "commit"}, {"oid": "9b83bfca0b3710bbd8d041f75361295a8d9dbcaf", "url": "https://github.com/apache/flink/commit/9b83bfca0b3710bbd8d041f75361295a8d9dbcaf", "message": "Update JMXServiceTest.java", "committedDate": "2020-08-03T09:17:50Z", "type": "commit"}, {"oid": "d1f95202588964bb1e9e3bb3316f99246aa530ad", "url": "https://github.com/apache/flink/commit/d1f95202588964bb1e9e3bb3316f99246aa530ad", "message": "Update JMXServiceTest.java", "committedDate": "2020-08-03T09:19:13Z", "type": "commit"}, {"oid": "20120263f7e4169b776f2619ce147d5fd2829511", "url": "https://github.com/apache/flink/commit/20120263f7e4169b776f2619ce147d5fd2829511", "message": "Update expert_debugging_and_tuning_section.html", "committedDate": "2020-08-03T12:27:11Z", "type": "commit"}]}