{"pr_number": 12290, "pr_title": "[FLINK-17657][jdbc] jdbc not support read BIGINT UNSIGNED field", "pr_createdAt": "2020-05-22T08:06:31Z", "pr_url": "https://github.com/apache/flink/pull/12290", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1OTQzMQ==", "url": "https://github.com/apache/flink/pull/12290#discussion_r429759431", "bodyText": "Can we use a random port here?", "author": "wuchong", "createdAt": "2020-05-25T06:50:37Z", "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/UnsignedTypeConversionITCase.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.connector.jdbc.table;\n+\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.table.api.DataTypes;\n+import org.apache.flink.table.api.Table;\n+import org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n+import org.apache.flink.table.planner.runtime.utils.TableEnvUtil;\n+import org.apache.flink.types.Row;\n+\n+import ch.vorburger.mariadb4j.DBConfigurationBuilder;\n+import ch.vorburger.mariadb4j.junit.MariaDB4jRule;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import static org.apache.flink.table.api.Expressions.row;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test unsigned type conversion between Flink and JDBC driver mysql, the test underlying use\n+ * MariaDB to mock a DB which use mysql driver too.\n+ */\n+public class UnsignedTypeConversionITCase {\n+\n+\tprivate static final String DEFAULT_DB_NAME = \"test\";\n+\tprivate static final String TABLE_NAME = \"unsigned_test\";\n+\tprivate static final String[] DATA = new String[]{\n+\t\t\"127\",\n+\t\t\"255\",\n+\t\t\"32767\",\n+\t\t\"65535\",\n+\t\t\"2147483647\",\n+\t\t\"4294967295\",\n+\t\t\"9223372036854775807\",\n+\t\t\"18446744073709551615\"};\n+\n+\tprivate StreamTableEnvironment tEnv;\n+\tprivate String dbUrl;\n+\tprivate Connection connection;\n+\n+\t@ClassRule\n+\tpublic static MariaDB4jRule db4jRule = new MariaDB4jRule(\n+\t\tDBConfigurationBuilder.newBuilder().setPort(3306).build(),", "originalCommit": "ae9e1b8939fd8a1c5727dbdb2b7711545e1a97c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2MTkxNQ==", "url": "https://github.com/apache/flink/pull/12290#discussion_r429761915", "bodyText": "Can be simplify to ?\nString[] result = Lists.newArrayList(collected).stream()\n\t\t\t.map(Row::toString)\n\t\t\t.toArray(String[]::new);\nassertArrayEquals(DATA, result);", "author": "wuchong", "createdAt": "2020-05-25T06:57:33Z", "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/UnsignedTypeConversionITCase.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.connector.jdbc.table;\n+\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.table.api.DataTypes;\n+import org.apache.flink.table.api.Table;\n+import org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n+import org.apache.flink.table.planner.runtime.utils.TableEnvUtil;\n+import org.apache.flink.types.Row;\n+\n+import ch.vorburger.mariadb4j.DBConfigurationBuilder;\n+import ch.vorburger.mariadb4j.junit.MariaDB4jRule;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import static org.apache.flink.table.api.Expressions.row;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test unsigned type conversion between Flink and JDBC driver mysql, the test underlying use\n+ * MariaDB to mock a DB which use mysql driver too.\n+ */\n+public class UnsignedTypeConversionITCase {\n+\n+\tprivate static final String DEFAULT_DB_NAME = \"test\";\n+\tprivate static final String TABLE_NAME = \"unsigned_test\";\n+\tprivate static final String[] DATA = new String[]{\n+\t\t\"127\",\n+\t\t\"255\",\n+\t\t\"32767\",\n+\t\t\"65535\",\n+\t\t\"2147483647\",\n+\t\t\"4294967295\",\n+\t\t\"9223372036854775807\",\n+\t\t\"18446744073709551615\"};\n+\n+\tprivate StreamTableEnvironment tEnv;\n+\tprivate String dbUrl;\n+\tprivate Connection connection;\n+\n+\t@ClassRule\n+\tpublic static MariaDB4jRule db4jRule = new MariaDB4jRule(\n+\t\tDBConfigurationBuilder.newBuilder().setPort(3306).build(),\n+\t\tDEFAULT_DB_NAME,\n+\t\tnull);\n+\n+\t@Before\n+\tpublic void setUp() throws SQLException, ClassNotFoundException {\n+\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\t\ttEnv = StreamTableEnvironment.create(env);\n+\t\t//dbUrl: jdbc:mysql://localhost:3306/test\n+\t\tdbUrl = db4jRule.getURL();\n+\t\tconnection = DriverManager.getConnection(dbUrl);\n+\t\t// create mysql table\n+\t\tPreparedStatement ddlStatement = connection.prepareStatement(\"create table \" + TABLE_NAME + \" (\" +\n+\t\t\t\" tiny_c TINYINT,\" +\n+\t\t\t\" tiny_un_c TINYINT UNSIGNED,\" +\n+\t\t\t\" small_c SMALLINT,\" +\n+\t\t\t\" small_un_c SMALLINT UNSIGNED,\" +\n+\t\t\t\" int_c INTEGER ,\" +\n+\t\t\t\" int_un_c INTEGER UNSIGNED,\" +\n+\t\t\t\" big_c BIGINT,\" +\n+\t\t\t\" big_un_c BIGINT UNSIGNED);\");\n+\t\tddlStatement.execute();\n+\n+\t\t// create flink table\n+\t\tString sourceDDL = \"create table jdbc_table (\" +\n+\t\t\t\"tiny_c TINYINT,\" +\n+\t\t\t\"tiny_un_c SMALLINT,\" +\n+\t\t\t\"small_c SMALLINT,\" +\n+\t\t\t\"small_un_c INT,\" +\n+\t\t\t\"int_c INT,\" +\n+\t\t\t\"int_un_c BIGINT,\" +\n+\t\t\t\"big_c BIGINT,\" +\n+\t\t\t\"big_un_c DECIMAL(20, 0)) with(\" +\n+\t\t\t\" 'connector' = 'jdbc',\" +\n+\t\t\t\" 'url' = '\" + dbUrl + \"',\" +\n+\t\t\t\" 'table-name' = '\" + TABLE_NAME + \"'\" +\n+\t\t\t\")\";\n+\t\ttEnv.executeSql(sourceDDL);\n+\t}\n+\n+\t@Test\n+\tpublic void testReadUnsignedType() throws SQLException {\n+\t\t// insert data to db\n+\t\tString insertSql = String.format(\"insert into \" + TABLE_NAME +\n+\t\t\t\"(tiny_c, tiny_un_c, small_c, small_un_c, int_c, int_un_c, big_c, big_un_c) values (\" +\n+\t\t\t\"%s, %s, %s, %s, %s, %s, %s, %s)\", DATA);\n+\t\tPreparedStatement insertStatement = connection.prepareStatement(insertSql);\n+\t\tinsertStatement.execute();\n+\t\t// read data from db\n+\t\tIterator<Row> res = tEnv.executeSql(\"select tiny_c, tiny_un_c, small_c, small_un_c,\" +\n+\t\t\t\" int_c, int_un_c, big_c, big_un_c from jdbc_table\")\n+\t\t\t.collect();\n+\t\tList<Row> actual = new ArrayList<>();\n+\t\twhile (res.hasNext()) {\n+\t\t\tactual.add(res.next());\n+\t\t}\n+\t\tassertTrue(actual.size() == 1);\n+\t\tassertTrue(actual.get(0).getArity() == DATA.length);\n+\t\tString[] expected = new String[DATA.length];\n+\t\tfor (int i = 0; i < DATA.length; i++) {\n+\t\t\texpected[i] = actual.get(0).getField(i).toString();\n+\t\t}\n+\t\tassertArrayEquals(DATA, expected);", "originalCommit": "ae9e1b8939fd8a1c5727dbdb2b7711545e1a97c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQzMzMxMA==", "url": "https://github.com/apache/flink/pull/12290#discussion_r430433310", "bodyText": "maybe not, here only one Row and it contains multi column", "author": "leonardBang", "createdAt": "2020-05-26T13:58:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2MTkxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2Mjk3OQ==", "url": "https://github.com/apache/flink/pull/12290#discussion_r429762979", "bodyText": "Could you combine these two tests into one? We can test writing values into the table, and verify the data using jdbc connection. And then test reading values from the table.", "author": "wuchong", "createdAt": "2020-05-25T07:00:32Z", "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/UnsignedTypeConversionITCase.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.connector.jdbc.table;\n+\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.table.api.DataTypes;\n+import org.apache.flink.table.api.Table;\n+import org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n+import org.apache.flink.table.planner.runtime.utils.TableEnvUtil;\n+import org.apache.flink.types.Row;\n+\n+import ch.vorburger.mariadb4j.DBConfigurationBuilder;\n+import ch.vorburger.mariadb4j.junit.MariaDB4jRule;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import static org.apache.flink.table.api.Expressions.row;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test unsigned type conversion between Flink and JDBC driver mysql, the test underlying use\n+ * MariaDB to mock a DB which use mysql driver too.\n+ */\n+public class UnsignedTypeConversionITCase {\n+\n+\tprivate static final String DEFAULT_DB_NAME = \"test\";\n+\tprivate static final String TABLE_NAME = \"unsigned_test\";\n+\tprivate static final String[] DATA = new String[]{\n+\t\t\"127\",\n+\t\t\"255\",\n+\t\t\"32767\",\n+\t\t\"65535\",\n+\t\t\"2147483647\",\n+\t\t\"4294967295\",\n+\t\t\"9223372036854775807\",\n+\t\t\"18446744073709551615\"};\n+\n+\tprivate StreamTableEnvironment tEnv;\n+\tprivate String dbUrl;\n+\tprivate Connection connection;\n+\n+\t@ClassRule\n+\tpublic static MariaDB4jRule db4jRule = new MariaDB4jRule(\n+\t\tDBConfigurationBuilder.newBuilder().setPort(3306).build(),\n+\t\tDEFAULT_DB_NAME,\n+\t\tnull);\n+\n+\t@Before\n+\tpublic void setUp() throws SQLException, ClassNotFoundException {\n+\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\t\ttEnv = StreamTableEnvironment.create(env);\n+\t\t//dbUrl: jdbc:mysql://localhost:3306/test\n+\t\tdbUrl = db4jRule.getURL();\n+\t\tconnection = DriverManager.getConnection(dbUrl);\n+\t\t// create mysql table\n+\t\tPreparedStatement ddlStatement = connection.prepareStatement(\"create table \" + TABLE_NAME + \" (\" +\n+\t\t\t\" tiny_c TINYINT,\" +\n+\t\t\t\" tiny_un_c TINYINT UNSIGNED,\" +\n+\t\t\t\" small_c SMALLINT,\" +\n+\t\t\t\" small_un_c SMALLINT UNSIGNED,\" +\n+\t\t\t\" int_c INTEGER ,\" +\n+\t\t\t\" int_un_c INTEGER UNSIGNED,\" +\n+\t\t\t\" big_c BIGINT,\" +\n+\t\t\t\" big_un_c BIGINT UNSIGNED);\");\n+\t\tddlStatement.execute();\n+\n+\t\t// create flink table\n+\t\tString sourceDDL = \"create table jdbc_table (\" +\n+\t\t\t\"tiny_c TINYINT,\" +\n+\t\t\t\"tiny_un_c SMALLINT,\" +\n+\t\t\t\"small_c SMALLINT,\" +\n+\t\t\t\"small_un_c INT,\" +\n+\t\t\t\"int_c INT,\" +\n+\t\t\t\"int_un_c BIGINT,\" +\n+\t\t\t\"big_c BIGINT,\" +\n+\t\t\t\"big_un_c DECIMAL(20, 0)) with(\" +\n+\t\t\t\" 'connector' = 'jdbc',\" +\n+\t\t\t\" 'url' = '\" + dbUrl + \"',\" +\n+\t\t\t\" 'table-name' = '\" + TABLE_NAME + \"'\" +\n+\t\t\t\")\";\n+\t\ttEnv.executeSql(sourceDDL);\n+\t}\n+\n+\t@Test\n+\tpublic void testReadUnsignedType() throws SQLException {\n+\t\t// insert data to db\n+\t\tString insertSql = String.format(\"insert into \" + TABLE_NAME +\n+\t\t\t\"(tiny_c, tiny_un_c, small_c, small_un_c, int_c, int_un_c, big_c, big_un_c) values (\" +\n+\t\t\t\"%s, %s, %s, %s, %s, %s, %s, %s)\", DATA);\n+\t\tPreparedStatement insertStatement = connection.prepareStatement(insertSql);\n+\t\tinsertStatement.execute();\n+\t\t// read data from db\n+\t\tIterator<Row> res = tEnv.executeSql(\"select tiny_c, tiny_un_c, small_c, small_un_c,\" +\n+\t\t\t\" int_c, int_un_c, big_c, big_un_c from jdbc_table\")\n+\t\t\t.collect();\n+\t\tList<Row> actual = new ArrayList<>();\n+\t\twhile (res.hasNext()) {\n+\t\t\tactual.add(res.next());\n+\t\t}\n+\t\tassertTrue(actual.size() == 1);\n+\t\tassertTrue(actual.get(0).getArity() == DATA.length);\n+\t\tString[] expected = new String[DATA.length];\n+\t\tfor (int i = 0; i < DATA.length; i++) {\n+\t\t\texpected[i] = actual.get(0).getField(i).toString();\n+\t\t}\n+\t\tassertArrayEquals(DATA, expected);\n+\t}\n+\n+\t@Test\n+\tpublic void testWriteUnsignedType() throws Exception {", "originalCommit": "ae9e1b8939fd8a1c5727dbdb2b7711545e1a97c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MjQyMg==", "url": "https://github.com/apache/flink/pull/12290#discussion_r429772422", "bodyText": "I suggest to use the precision and scale from the DecimalType instead of hard code 20, 0, otherwise, if users use a 30, 0 in DDL, the value will be corrupt.", "author": "wuchong", "createdAt": "2020-05-25T07:24:24Z", "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/internal/converter/AbstractJdbcRowConverter.java", "diffHunk": "@@ -114,49 +119,54 @@ protected JdbcDeserializationConverter createNullableInternalConverter(LogicalTy\n \t}\n \n \tprotected JdbcDeserializationConverter wrapIntoNullableInternalConverter(JdbcDeserializationConverter jdbcDeserializationConverter) {\n-\t\treturn v -> {\n-\t\t\tif (v == null) {\n+\t\treturn (val, sqlType, unsigned) -> {\n+\t\t\tif (val == null) {\n \t\t\t\treturn null;\n \t\t\t} else {\n-\t\t\t\treturn jdbcDeserializationConverter.deserialize(v);\n+\t\t\t\treturn jdbcDeserializationConverter.deserialize(val, sqlType, unsigned);\n \t\t\t}\n \t\t};\n \t}\n \n \tprotected JdbcDeserializationConverter createInternalConverter(LogicalType type) {\n \t\tswitch (type.getTypeRoot()) {\n \t\t\tcase NULL:\n-\t\t\t\treturn v -> null;\n+\t\t\t\treturn (val, sqlType, unsigned) -> null;\n \t\t\tcase BOOLEAN:\n-\t\t\tcase TINYINT:\n \t\t\tcase FLOAT:\n \t\t\tcase DOUBLE:\n-\t\t\tcase INTEGER:\n \t\t\tcase INTERVAL_YEAR_MONTH:\n-\t\t\tcase BIGINT:\n \t\t\tcase INTERVAL_DAY_TIME:\n-\t\t\t\treturn v -> v;\n+\t\t\t\treturn (val, sqlType, unsigned) -> val;\n+\t\t\tcase TINYINT:\n+\t\t\t\treturn (val, sqlType, unsigned) -> ((Integer) val).byteValue();\n \t\t\tcase SMALLINT:\n \t\t\t\t// Converter for small type that casts value to int and then return short value, since\n \t\t\t\t// JDBC 1.0 use int type for small values.\n-\t\t\t\treturn v -> (Integer.valueOf(v.toString())).shortValue();\n+\t\t\t\treturn (val, sqlType, unsigned) -> (Integer.valueOf(val.toString())).shortValue();\n+\t\t\tcase INTEGER:\n+\t\t\t\treturn (val, sqlType, unsigned) -> sqlType == Types.SMALLINT && unsigned ? Integer.valueOf(val.toString()) : val;\n+\t\t\tcase BIGINT:\n+\t\t\t\treturn (val, sqlType, unsigned) -> sqlType == Types.INTEGER && unsigned ? Long.valueOf(val.toString()) : val;\n+\t\t\tcase DECIMAL:\n+\t\t\t\tfinal int precision = ((DecimalType) type).getPrecision();\n+\t\t\t\tfinal int scale = ((DecimalType) type).getScale();\n+\t\t\t\t// using decimal(20, 0) to map bigint unsigned\n+\t\t\t\treturn (val, sqlType, unsigned) -> sqlType == Types.BIGINT && unsigned ?\n+\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal((BigInteger) val, 0), 20, 0) : DecimalData.fromBigDecimal((BigDecimal) val, precision, scale);", "originalCommit": "ae9e1b8939fd8a1c5727dbdb2b7711545e1a97c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MjYyMA==", "url": "https://github.com/apache/flink/pull/12290#discussion_r429772620", "bodyText": "Use if (val instanceOf Integer) instead of string parse.", "author": "wuchong", "createdAt": "2020-05-25T07:24:52Z", "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/internal/converter/AbstractJdbcRowConverter.java", "diffHunk": "@@ -114,49 +119,54 @@ protected JdbcDeserializationConverter createNullableInternalConverter(LogicalTy\n \t}\n \n \tprotected JdbcDeserializationConverter wrapIntoNullableInternalConverter(JdbcDeserializationConverter jdbcDeserializationConverter) {\n-\t\treturn v -> {\n-\t\t\tif (v == null) {\n+\t\treturn (val, sqlType, unsigned) -> {\n+\t\t\tif (val == null) {\n \t\t\t\treturn null;\n \t\t\t} else {\n-\t\t\t\treturn jdbcDeserializationConverter.deserialize(v);\n+\t\t\t\treturn jdbcDeserializationConverter.deserialize(val, sqlType, unsigned);\n \t\t\t}\n \t\t};\n \t}\n \n \tprotected JdbcDeserializationConverter createInternalConverter(LogicalType type) {\n \t\tswitch (type.getTypeRoot()) {\n \t\t\tcase NULL:\n-\t\t\t\treturn v -> null;\n+\t\t\t\treturn (val, sqlType, unsigned) -> null;\n \t\t\tcase BOOLEAN:\n-\t\t\tcase TINYINT:\n \t\t\tcase FLOAT:\n \t\t\tcase DOUBLE:\n-\t\t\tcase INTEGER:\n \t\t\tcase INTERVAL_YEAR_MONTH:\n-\t\t\tcase BIGINT:\n \t\t\tcase INTERVAL_DAY_TIME:\n-\t\t\t\treturn v -> v;\n+\t\t\t\treturn (val, sqlType, unsigned) -> val;\n+\t\t\tcase TINYINT:\n+\t\t\t\treturn (val, sqlType, unsigned) -> ((Integer) val).byteValue();\n \t\t\tcase SMALLINT:\n \t\t\t\t// Converter for small type that casts value to int and then return short value, since\n \t\t\t\t// JDBC 1.0 use int type for small values.\n-\t\t\t\treturn v -> (Integer.valueOf(v.toString())).shortValue();\n+\t\t\t\treturn (val, sqlType, unsigned) -> (Integer.valueOf(val.toString())).shortValue();", "originalCommit": "ae9e1b8939fd8a1c5727dbdb2b7711545e1a97c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MjgzMQ==", "url": "https://github.com/apache/flink/pull/12290#discussion_r429772831", "bodyText": "Please extends AbstractTestBase if it is an integration test.", "author": "wuchong", "createdAt": "2020-05-25T07:25:19Z", "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/UnsignedTypeConversionITCase.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.connector.jdbc.table;\n+\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.table.api.DataTypes;\n+import org.apache.flink.table.api.Table;\n+import org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n+import org.apache.flink.table.planner.runtime.utils.TableEnvUtil;\n+import org.apache.flink.types.Row;\n+\n+import ch.vorburger.mariadb4j.DBConfigurationBuilder;\n+import ch.vorburger.mariadb4j.junit.MariaDB4jRule;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import static org.apache.flink.table.api.Expressions.row;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test unsigned type conversion between Flink and JDBC driver mysql, the test underlying use\n+ * MariaDB to mock a DB which use mysql driver too.\n+ */\n+public class UnsignedTypeConversionITCase {", "originalCommit": "ae9e1b8939fd8a1c5727dbdb2b7711545e1a97c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ac5fabe5323f7abcf26191cc9ee39c3d293a9789", "url": "https://github.com/apache/flink/commit/ac5fabe5323f7abcf26191cc9ee39c3d293a9789", "message": "address comments", "committedDate": "2020-05-26T14:52:59Z", "type": "forcePushed"}, {"oid": "83457318b700d7baff1d80ee25f5a244740bb16e", "url": "https://github.com/apache/flink/commit/83457318b700d7baff1d80ee25f5a244740bb16e", "message": "address comments", "committedDate": "2020-05-26T14:58:33Z", "type": "forcePushed"}, {"oid": "36f15fbdc53c83f6755836f49ff75b2d19df6d93", "url": "https://github.com/apache/flink/commit/36f15fbdc53c83f6755836f49ff75b2d19df6d93", "message": "address comments", "committedDate": "2020-05-28T02:51:56Z", "type": "forcePushed"}, {"oid": "564d34f57bef7e6d3e83c44b3410e68176e5730d", "url": "https://github.com/apache/flink/commit/564d34f57bef7e6d3e83c44b3410e68176e5730d", "message": "[FLINK-17657][jdbc] Fix jdbc not support reading BIGINT UNSIGNED field", "committedDate": "2020-05-28T03:53:18Z", "type": "forcePushed"}, {"oid": "0d399fe1a461b2faee31d5789175b42b3f5004e9", "url": "https://github.com/apache/flink/commit/0d399fe1a461b2faee31d5789175b42b3f5004e9", "message": "[FLINK-17657][jdbc] Fix jdbc not support reading BIGINT UNSIGNED field", "committedDate": "2020-05-28T04:14:37Z", "type": "commit"}, {"oid": "0d399fe1a461b2faee31d5789175b42b3f5004e9", "url": "https://github.com/apache/flink/commit/0d399fe1a461b2faee31d5789175b42b3f5004e9", "message": "[FLINK-17657][jdbc] Fix jdbc not support reading BIGINT UNSIGNED field", "committedDate": "2020-05-28T04:14:37Z", "type": "forcePushed"}]}