{"pr_number": 11960, "pr_title": "[FLINK-12717][python] Add windows support for PyFlink", "pr_createdAt": "2020-04-30T11:37:20Z", "pr_url": "https://github.com/apache/flink/pull/11960", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxNjMwMQ==", "url": "https://github.com/apache/flink/pull/11960#discussion_r420516301", "bodyText": "What's the purpose of this change", "author": "dianfu", "createdAt": "2020-05-06T02:41:07Z", "path": "flink-python/src/main/java/org/apache/flink/streaming/api/operators/python/AbstractPythonFunctionOperator.java", "diffHunk": "@@ -159,7 +159,14 @@ public void open() throws Exception {\n \t@Override\n \tpublic void close() throws Exception {\n \t\ttry {\n-\t\t\tinvokeFinishBundle();\n+\t\t\ttry {", "originalCommit": "a283855e4c5042bec925a05e15727ab2db71bd1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxODM0Mw==", "url": "https://github.com/apache/flink/pull/11960#discussion_r420518343", "bodyText": "Why this program cannot depend on other dependencies?\nOperatingSystem.isWindows() cannot also be used?", "author": "dianfu", "createdAt": "2020-05-06T02:50:27Z", "path": "flink-python/src/main/java/org/apache/flink/python/util/ResourceUtil.java", "diffHunk": "@@ -29,10 +29,17 @@\n  */\n public class ResourceUtil {\n \n-\tpublic static final String PYFLINK_UDF_RUNNER = \"pyflink-udf-runner.sh\";\n+\tpublic static final String PYFLINK_UDF_RUNNER_SH = \"pyflink-udf-runner.sh\";\n+\tpublic static final String PYFLINK_UDF_RUNNER_BAT = \"pyflink-udf-runner.bat\";\n \n \tpublic static File extractUdfRunner(String tmpdir) throws IOException, InterruptedException {\n-\t\tFile file = new File(tmpdir, PYFLINK_UDF_RUNNER);\n+\t\tFile file;\n+\t\t// This program can not depend any other dependencies, so we check the operating system without any utils.", "originalCommit": "a283855e4c5042bec925a05e15727ab2db71bd1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxOTgzNg==", "url": "https://github.com/apache/flink/pull/11960#discussion_r420519836", "bodyText": "why we need to print the log from boot log?", "author": "dianfu", "createdAt": "2020-05-06T02:56:57Z", "path": "flink-python/src/main/java/org/apache/flink/python/env/ProcessPythonEnvironmentManager.java", "diffHunk": "@@ -127,20 +130,36 @@ public void open() throws Exception {\n \t}\n \n \t@Override\n-\tpublic void close() {\n-\t\tFileUtils.deleteDirectoryQuietly(new File(baseDirectory));\n-\t\tif (shutdownHook != null) {\n-\t\t\tShutdownHookUtil.removeShutdownHook(\n-\t\t\t\tshutdownHook, ProcessPythonEnvironmentManager.class.getSimpleName(), LOG);\n-\t\t\tshutdownHook = null;\n+\tpublic void close() throws Exception {\n+\t\ttry {\n+\t\t\tint i = 0;\n+\t\t\twhile (i < CHECK_TIMEOUT / CHECK_INTERVAL) {\n+\t\t\t\ttry {\n+\t\t\t\t\ti++;\n+\t\t\t\t\tFileUtils.deleteDirectory(new File(baseDirectory));\n+\t\t\t\t} catch (Throwable t) {\n+\t\t\t\t\tif (i == CHECK_TIMEOUT / CHECK_INTERVAL) {\n+\t\t\t\t\t\tLOG.error(\"Clean the temporary directory of Python UDF worker failed.\", t);\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tThread.sleep(CHECK_INTERVAL);\n+\t\t\t}\n+\t\t} finally {\n+\t\t\tif (shutdownHook != null) {\n+\t\t\t\tShutdownHookUtil.removeShutdownHook(\n+\t\t\t\t\tshutdownHook, ProcessPythonEnvironmentManager.class.getSimpleName(), LOG);\n+\t\t\t\tshutdownHook = null;\n+\t\t\t}\n+\t\t\tLOG.info(\"Python environment manager is closing. Now print the content of boot log:\\n\" + getBootLog());", "originalCommit": "a283855e4c5042bec925a05e15727ab2db71bd1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUyNTU3OA==", "url": "https://github.com/apache/flink/pull/11960#discussion_r420525578", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\twhile (i < CHECK_TIMEOUT / CHECK_INTERVAL) {\n          \n          \n            \n            \t\t\tint retries = 0;\n          \n          \n            \n            \t\t\twhile (true) {\n          \n          \n            \n            \t\t\t    try {\n          \n          \n            \n            \t\t\t       FileUtils.deleteDirectory(new File(baseDirectory));\n          \n          \n            \n            \t\t\t       break;\n          \n          \n            \n            \t\t\t    } catch (Throwable t) {\n          \n          \n            \n            \t\t\t       retries++;\n          \n          \n            \n            \t\t\t       if (retries <= CHECK_TIMEOUT / CHECK_INTERVAL) {\n          \n          \n            \n            \t\t\t         LOG.warning(\"Failed to delete the working directory {} of the Python UDF worker. Retrying...\", baseDirectory, t);\n          \n          \n            \n            \t\t\t       } else {\n          \n          \n            \n            \t\t\t          LOG.warning(\"Failed to delete the working directory {} of the Python UDF worker.\", baseDirectory, t);\n          \n          \n            \n            \t\t\t          break;\n          \n          \n            \n            \t\t\t       }\n          \n          \n            \n            \t\t\t    }\n          \n          \n            \n            \t\t\t}", "author": "dianfu", "createdAt": "2020-05-06T03:25:32Z", "path": "flink-python/src/main/java/org/apache/flink/python/env/ProcessPythonEnvironmentManager.java", "diffHunk": "@@ -127,20 +130,36 @@ public void open() throws Exception {\n \t}\n \n \t@Override\n-\tpublic void close() {\n-\t\tFileUtils.deleteDirectoryQuietly(new File(baseDirectory));\n-\t\tif (shutdownHook != null) {\n-\t\t\tShutdownHookUtil.removeShutdownHook(\n-\t\t\t\tshutdownHook, ProcessPythonEnvironmentManager.class.getSimpleName(), LOG);\n-\t\t\tshutdownHook = null;\n+\tpublic void close() throws Exception {\n+\t\ttry {\n+\t\t\tint i = 0;\n+\t\t\twhile (i < CHECK_TIMEOUT / CHECK_INTERVAL) {", "originalCommit": "a283855e4c5042bec925a05e15727ab2db71bd1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUyNjAzOA==", "url": "https://github.com/apache/flink/pull/11960#discussion_r420526038", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tString pythonWorkerCommand = String.join(File.separator, baseDirectory, runnerScript.getName());\n          \n          \n            \n            \t\tString pythonWorkerCommand = runnerScript.getPath();\n          \n      \n    \n    \n  \n\nBesides, the variable pythonWorkerCommand could be removed.", "author": "dianfu", "createdAt": "2020-05-06T03:27:47Z", "path": "flink-python/src/main/java/org/apache/flink/python/env/ProcessPythonEnvironmentManager.java", "diffHunk": "@@ -127,20 +130,36 @@ public void open() throws Exception {\n \t}\n \n \t@Override\n-\tpublic void close() {\n-\t\tFileUtils.deleteDirectoryQuietly(new File(baseDirectory));\n-\t\tif (shutdownHook != null) {\n-\t\t\tShutdownHookUtil.removeShutdownHook(\n-\t\t\t\tshutdownHook, ProcessPythonEnvironmentManager.class.getSimpleName(), LOG);\n-\t\t\tshutdownHook = null;\n+\tpublic void close() throws Exception {\n+\t\ttry {\n+\t\t\tint i = 0;\n+\t\t\twhile (i < CHECK_TIMEOUT / CHECK_INTERVAL) {\n+\t\t\t\ttry {\n+\t\t\t\t\ti++;\n+\t\t\t\t\tFileUtils.deleteDirectory(new File(baseDirectory));\n+\t\t\t\t} catch (Throwable t) {\n+\t\t\t\t\tif (i == CHECK_TIMEOUT / CHECK_INTERVAL) {\n+\t\t\t\t\t\tLOG.error(\"Clean the temporary directory of Python UDF worker failed.\", t);\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tThread.sleep(CHECK_INTERVAL);\n+\t\t\t}\n+\t\t} finally {\n+\t\t\tif (shutdownHook != null) {\n+\t\t\t\tShutdownHookUtil.removeShutdownHook(\n+\t\t\t\t\tshutdownHook, ProcessPythonEnvironmentManager.class.getSimpleName(), LOG);\n+\t\t\t\tshutdownHook = null;\n+\t\t\t}\n+\t\t\tLOG.info(\"Python environment manager is closing. Now print the content of boot log:\\n\" + getBootLog());\n \t\t}\n \t}\n \n \t@Override\n \tpublic RunnerApi.Environment createEnvironment() throws IOException, InterruptedException {\n \t\tMap<String, String> env = constructEnvironmentVariables();\n-\t\tResourceUtil.extractUdfRunner(baseDirectory);\n-\t\tString pythonWorkerCommand = String.join(File.separator, baseDirectory, \"pyflink-udf-runner.sh\");\n+\t\tFile runnerScript = ResourceUtil.extractUdfRunner(baseDirectory);\n+\t\tString pythonWorkerCommand = String.join(File.separator, baseDirectory, runnerScript.getName());", "originalCommit": "a283855e4c5042bec925a05e15727ab2db71bd1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUyNjMzNg==", "url": "https://github.com/apache/flink/pull/11960#discussion_r420526336", "bodyText": "this method is not used", "author": "dianfu", "createdAt": "2020-05-06T03:29:13Z", "path": "flink-python/src/main/java/org/apache/flink/python/env/ProcessPythonEnvironmentManager.java", "diffHunk": "@@ -288,6 +307,10 @@ private void constructRequirementsDirectory(Map<String, String> env) throws IOEx\n \t\t}\n \t}\n \n+\tprivate String getKillWorkerScriptPath() {", "originalCommit": "a283855e4c5042bec925a05e15727ab2db71bd1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUyNjg5OQ==", "url": "https://github.com/apache/flink/pull/11960#discussion_r420526899", "bodyText": "I'm not sure why this doesn't work in windows?", "author": "dianfu", "createdAt": "2020-05-06T03:31:42Z", "path": "flink-python/src/main/java/org/apache/flink/client/python/PythonGatewayServer.java", "diffHunk": "@@ -71,15 +75,42 @@ public static void main(String[] args) throws IOException, ExecutionException, I\n \t\t}\n \n \t\ttry {\n-\t\t\t// Exit on EOF or broken pipe.  This ensures that the server dies\n-\t\t\t// if its parent program dies.\n-\t\t\twhile (System.in.read() != -1) {", "originalCommit": "a283855e4c5042bec925a05e15727ab2db71bd1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwMzM1MQ==", "url": "https://github.com/apache/flink/pull/11960#discussion_r421203351", "bodyText": "In windows, the System.in.read() always returns -1 and returns immediately.", "author": "WeiZhong94", "createdAt": "2020-05-07T02:32:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUyNjg5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NDA5Mw==", "url": "https://github.com/apache/flink/pull/11960#discussion_r420544093", "bodyText": "remove the print?", "author": "dianfu", "createdAt": "2020-05-06T04:52:08Z", "path": "flink-python/pyflink/pyflink_gateway_server.py", "diffHunk": "@@ -0,0 +1,209 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+import argparse\n+import getpass\n+import glob\n+import os\n+import platform\n+import re\n+import signal\n+import socket\n+import sys\n+from collections import namedtuple\n+from string import Template\n+from subprocess import Popen, PIPE, check_output\n+\n+from pyflink.find_flink_home import _find_flink_home, _find_flink_source_root\n+\n+\n+def on_windows():\n+    return platform.system() == \"Windows\"\n+\n+\n+def find_java_executable():\n+    java_executable = \"java.exe\" if on_windows() else \"java\"\n+    flink_home = _find_flink_home()\n+    flink_conf_path = os.path.join(flink_home, \"conf\", \"flink-conf.yaml\")\n+    java_home = None\n+\n+    if os.path.isfile(flink_conf_path):\n+        with open(flink_conf_path, \"r\") as f:\n+            flink_conf_yaml = f.read()\n+        java_homes = re.findall(r'^[ ]*env\\.java\\.home[ ]*: ([^#]*).*$', flink_conf_yaml)\n+        if len(java_homes) > 1:\n+            java_home = java_homes[len(java_homes) - 1].strip()\n+\n+    if java_home is None and \"JAVA_HOME\" in os.environ:\n+        java_home = os.environ[\"JAVA_HOME\"]\n+\n+    if java_home is not None:\n+        java_executable = os.path.join(java_home, \"bin\", java_executable)\n+\n+    return java_executable\n+\n+\n+def construct_log_settings():\n+    templates = [\n+        \"-Dlog.file=${flink_log_dir}/flink-${flink_ident_string}-python-${hostname}.log\",\n+        \"-Dlog4j.configuration=${flink_conf_dir}/log4j-cli.properties\",\n+        \"-Dlog4j.configurationFile=${flink_conf_dir}/log4j-cli.properties\",\n+        \"-Dlogback.configurationFile=${flink_conf_dir}/logback.xml\"\n+    ]\n+\n+    flink_home = _find_flink_home()\n+    flink_conf_dir = os.path.join(flink_home, \"conf\")\n+    flink_log_dir = os.path.join(flink_home, \"log\")\n+    if \"FLINK_IDENT_STRING\" in os.environ:\n+        flink_ident_string = os.environ[\"FLINK_IDENT_STRING\"]\n+    else:\n+        flink_ident_string = getpass.getuser()\n+    hostname = socket.gethostname()\n+    log_settings = []\n+    for template in templates:\n+        log_settings.append(Template(template).substitute(\n+            flink_conf_dir=flink_conf_dir,\n+            flink_log_dir=flink_log_dir,\n+            flink_ident_string=flink_ident_string,\n+            hostname=hostname))\n+    return log_settings\n+\n+\n+def construct_classpath():\n+    flink_home = _find_flink_home()\n+    if on_windows():\n+        # The command length is limited on Windows. To avoid the problem we should shorten the\n+        # command length as much as possible.\n+        lib_jars = os.path.join(flink_home, \"lib\", \"*\")\n+    else:\n+        lib_jars = os.pathsep.join(glob.glob(os.path.join(flink_home, \"lib\", \"*.jar\")))\n+\n+    flink_python_jars = glob.glob(os.path.join(flink_home, \"opt\", \"flink-python*.jar\"))\n+    if len(flink_python_jars) < 1:\n+        print(\"The flink-python jar is not found in the opt folder of the FLINK_HOME: %s\" %\n+              flink_home)\n+        return lib_jars\n+    flink_python_jar = flink_python_jars[0]\n+\n+    return os.pathsep.join([lib_jars, flink_python_jar])\n+\n+\n+def download_apache_avro():\n+    \"\"\"\n+    Currently we need to download the Apache Avro manually to avoid test failure caused by the avro\n+    format sql jar. See https://issues.apache.org/jira/browse/FLINK-17417. If the issue is fixed,\n+    this method could be removed. Using maven command copy the jars in repository to avoid accessing\n+    external network.\n+    \"\"\"\n+    flink_source_root = _find_flink_source_root()\n+    avro_jar_pattern = os.path.join(\n+        flink_source_root, \"flink-formats\", \"flink-avro\", \"target\", \"avro*.jar\")\n+    if len(glob.glob(avro_jar_pattern)) > 0:\n+        # the avro jar already existed, just return.\n+        return\n+    mvn = \"mvn.cmd\" if on_windows() else \"mvn\"\n+    avro_version_output = check_output(\n+        [mvn, \"help:evaluate\", \"-Dexpression=avro.version\"],\n+        cwd=flink_source_root).decode(\"utf-8\")\n+    lines = avro_version_output.replace(\"\\r\", \"\").split(\"\\n\")\n+    avro_version = None\n+    for line in lines:\n+        if not line.startswith(\"[\") and not line.startswith(\"Download\") and line.strip() != \"\":\n+            avro_version = line\n+            break\n+    if avro_version is None:\n+        raise Exception(\"The Apache Avro version is not found in the maven command output:\\n %s\" %\n+                        avro_version_output)\n+    print(check_output(", "originalCommit": "a283855e4c5042bec925a05e15727ab2db71bd1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NDgyOQ==", "url": "https://github.com/apache/flink/pull/11960#discussion_r420544829", "bodyText": "why only need to ignore ctrl-c / SIGINT in linux?", "author": "dianfu", "createdAt": "2020-05-06T04:55:33Z", "path": "flink-python/pyflink/pyflink_gateway_server.py", "diffHunk": "@@ -0,0 +1,209 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+import argparse\n+import getpass\n+import glob\n+import os\n+import platform\n+import re\n+import signal\n+import socket\n+import sys\n+from collections import namedtuple\n+from string import Template\n+from subprocess import Popen, PIPE, check_output\n+\n+from pyflink.find_flink_home import _find_flink_home, _find_flink_source_root\n+\n+\n+def on_windows():\n+    return platform.system() == \"Windows\"\n+\n+\n+def find_java_executable():\n+    java_executable = \"java.exe\" if on_windows() else \"java\"\n+    flink_home = _find_flink_home()\n+    flink_conf_path = os.path.join(flink_home, \"conf\", \"flink-conf.yaml\")\n+    java_home = None\n+\n+    if os.path.isfile(flink_conf_path):\n+        with open(flink_conf_path, \"r\") as f:\n+            flink_conf_yaml = f.read()\n+        java_homes = re.findall(r'^[ ]*env\\.java\\.home[ ]*: ([^#]*).*$', flink_conf_yaml)\n+        if len(java_homes) > 1:\n+            java_home = java_homes[len(java_homes) - 1].strip()\n+\n+    if java_home is None and \"JAVA_HOME\" in os.environ:\n+        java_home = os.environ[\"JAVA_HOME\"]\n+\n+    if java_home is not None:\n+        java_executable = os.path.join(java_home, \"bin\", java_executable)\n+\n+    return java_executable\n+\n+\n+def construct_log_settings():\n+    templates = [\n+        \"-Dlog.file=${flink_log_dir}/flink-${flink_ident_string}-python-${hostname}.log\",\n+        \"-Dlog4j.configuration=${flink_conf_dir}/log4j-cli.properties\",\n+        \"-Dlog4j.configurationFile=${flink_conf_dir}/log4j-cli.properties\",\n+        \"-Dlogback.configurationFile=${flink_conf_dir}/logback.xml\"\n+    ]\n+\n+    flink_home = _find_flink_home()\n+    flink_conf_dir = os.path.join(flink_home, \"conf\")\n+    flink_log_dir = os.path.join(flink_home, \"log\")\n+    if \"FLINK_IDENT_STRING\" in os.environ:\n+        flink_ident_string = os.environ[\"FLINK_IDENT_STRING\"]\n+    else:\n+        flink_ident_string = getpass.getuser()\n+    hostname = socket.gethostname()\n+    log_settings = []\n+    for template in templates:\n+        log_settings.append(Template(template).substitute(\n+            flink_conf_dir=flink_conf_dir,\n+            flink_log_dir=flink_log_dir,\n+            flink_ident_string=flink_ident_string,\n+            hostname=hostname))\n+    return log_settings\n+\n+\n+def construct_classpath():\n+    flink_home = _find_flink_home()\n+    if on_windows():\n+        # The command length is limited on Windows. To avoid the problem we should shorten the\n+        # command length as much as possible.\n+        lib_jars = os.path.join(flink_home, \"lib\", \"*\")\n+    else:\n+        lib_jars = os.pathsep.join(glob.glob(os.path.join(flink_home, \"lib\", \"*.jar\")))\n+\n+    flink_python_jars = glob.glob(os.path.join(flink_home, \"opt\", \"flink-python*.jar\"))\n+    if len(flink_python_jars) < 1:\n+        print(\"The flink-python jar is not found in the opt folder of the FLINK_HOME: %s\" %\n+              flink_home)\n+        return lib_jars\n+    flink_python_jar = flink_python_jars[0]\n+\n+    return os.pathsep.join([lib_jars, flink_python_jar])\n+\n+\n+def download_apache_avro():\n+    \"\"\"\n+    Currently we need to download the Apache Avro manually to avoid test failure caused by the avro\n+    format sql jar. See https://issues.apache.org/jira/browse/FLINK-17417. If the issue is fixed,\n+    this method could be removed. Using maven command copy the jars in repository to avoid accessing\n+    external network.\n+    \"\"\"\n+    flink_source_root = _find_flink_source_root()\n+    avro_jar_pattern = os.path.join(\n+        flink_source_root, \"flink-formats\", \"flink-avro\", \"target\", \"avro*.jar\")\n+    if len(glob.glob(avro_jar_pattern)) > 0:\n+        # the avro jar already existed, just return.\n+        return\n+    mvn = \"mvn.cmd\" if on_windows() else \"mvn\"\n+    avro_version_output = check_output(\n+        [mvn, \"help:evaluate\", \"-Dexpression=avro.version\"],\n+        cwd=flink_source_root).decode(\"utf-8\")\n+    lines = avro_version_output.replace(\"\\r\", \"\").split(\"\\n\")\n+    avro_version = None\n+    for line in lines:\n+        if not line.startswith(\"[\") and not line.startswith(\"Download\") and line.strip() != \"\":\n+            avro_version = line\n+            break\n+    if avro_version is None:\n+        raise Exception(\"The Apache Avro version is not found in the maven command output:\\n %s\" %\n+                        avro_version_output)\n+    print(check_output(\n+        [mvn,\n+         \"org.apache.maven.plugins:maven-dependency-plugin:2.10:copy\",\n+         \"-Dartifact=org.apache.avro:avro:%s:jar\" % avro_version,\n+         \"-DoutputDirectory=%s/flink-formats/flink-avro/target\" % flink_source_root],\n+        cwd=flink_source_root))\n+\n+\n+def construct_test_classpath():\n+    test_jar_patterns = [\n+        \"flink-table/flink-table-planner/target/flink-table-planner*-tests.jar\",\n+        \"flink-runtime/target/flink-runtime*tests.jar\",\n+        \"flink-streaming-java/target/flink-streaming-java*tests.jar\",\n+        \"flink-formats/flink-csv/target/flink-csv*.jar\",\n+        \"flink-formats/flink-avro/target/flink-avro*.jar\",\n+        \"flink-formats/flink-avro/target/avro*.jar\",\n+        \"flink-formats/flink-json/target/flink-json*.jar\",\n+        \"flink-connectors/flink-connector-elasticsearch-base/target/flink*.jar\",\n+        \"flink-connectors/flink-connector-kafka-base/target/flink*.jar\",\n+        \"flink-ml-parent/flink-ml-api/target/flink-ml-api*.jar\",\n+        \"flink-ml-parent/flink-ml-lib/target/flink-ml-lib*.jar\",\n+    ]\n+    test_jars = []\n+    flink_source_root = _find_flink_source_root()\n+    for pattern in test_jar_patterns:\n+        pattern = pattern.replace(\"/\", os.path.sep)\n+        test_jars += glob.glob(os.path.join(flink_source_root, pattern))\n+    return os.path.pathsep.join(test_jars)\n+\n+\n+def construct_program_args(args):\n+    parser = argparse.ArgumentParser()\n+    parser.add_argument(\"-c\", \"--class\", required=True)\n+    parser.add_argument(\"cluster_type\", choices=[\"local\", \"remote\", \"yarn\"])\n+    parse_result, other_args = parser.parse_known_args(args)\n+    main_class = getattr(parse_result, \"class\")\n+    cluster_type = parse_result.cluster_type\n+    return namedtuple(\n+        \"ProgramArgs\", [\"main_class\", \"cluster_type\", \"other_args\"])(\n+        main_class, cluster_type, other_args)\n+\n+\n+def prepare_environment_variable(env):\n+    flink_home = _find_flink_home()\n+    env = dict(env)\n+    env[\"FLINK_CONF_DIR\"] = os.path.join(flink_home, \"conf\")\n+    env[\"FLINK_BIN_DIR\"] = os.path.join(flink_home, \"bin\")\n+    env[\"FLINK_PLUGINS_DIR\"] = os.path.join(flink_home, \"plugins\")\n+    env[\"FLINK_LIB_DIR\"] = os.path.join(flink_home, \"lib\")\n+    env[\"FLINK_OPT_DIR\"] = os.path.join(flink_home, \"opt\")\n+    return env\n+\n+\n+def launch_gateway_server_process(env, args):\n+    java_executable = find_java_executable()\n+    log_settings = construct_log_settings()\n+    classpath = construct_classpath()\n+    env = prepare_environment_variable(env)\n+    if \"FLINK_TESTING\" in env:\n+        download_apache_avro()\n+        classpath = os.pathsep.join([classpath, construct_test_classpath()])\n+    program_args = construct_program_args(args)\n+    if program_args.cluster_type == \"local\":\n+        command = [java_executable] + log_settings + [\"-cp\", classpath, program_args.main_class] \\\n+            + program_args.other_args\n+    else:\n+        command = [os.path.join(env[\"FLINK_BIN_DIR\"], \"flink\"), \"run\"] + program_args.other_args \\\n+            + [\"-c\", program_args.main_class]\n+    preexec_fn = None\n+    if not on_windows():\n+        def preexec_func():\n+            # ignore ctrl-c / SIGINT", "originalCommit": "a283855e4c5042bec925a05e15727ab2db71bd1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwMzQ2Mg==", "url": "https://github.com/apache/flink/pull/11960#discussion_r421203462", "bodyText": "Because the handler is not supported in windows.", "author": "WeiZhong94", "createdAt": "2020-05-07T02:32:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NDgyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NTEzOA==", "url": "https://github.com/apache/flink/pull/11960#discussion_r420545138", "bodyText": "does it make sense to rename this script to pyflink_callback_server.py?", "author": "dianfu", "createdAt": "2020-05-06T04:56:46Z", "path": "flink-python/pyflink/python_callback_server.py", "diffHunk": "@@ -15,7 +15,6 @@\n #  See the License for the specific language governing permissions and\n # limitations under the License.", "originalCommit": "a283855e4c5042bec925a05e15727ab2db71bd1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NTQ3MA==", "url": "https://github.com/apache/flink/pull/11960#discussion_r420545470", "bodyText": "what's the purpose of this change", "author": "dianfu", "createdAt": "2020-05-06T04:58:15Z", "path": "flink-python/src/main/resources/pyflink-udf-runner.sh", "diffHunk": "@@ -40,4 +40,4 @@ if [[ \"$_PYTHON_WORKING_DIR\" != \"\" ]]; then\n fi\n \n log=\"$BOOT_LOG_DIR/flink-python-udf-boot.log\"\n-${python} -m pyflink.fn_execution.boot $@ 2>&1 | tee -a ${log}", "originalCommit": "a283855e4c5042bec925a05e15727ab2db71bd1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwMzc5MQ==", "url": "https://github.com/apache/flink/pull/11960#discussion_r421203791", "bodyText": "Now the log file does not shared between different tasks, so the \"-a\" option is not necessary anymore.", "author": "WeiZhong94", "createdAt": "2020-05-07T02:34:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NTQ3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NjYyMA==", "url": "https://github.com/apache/flink/pull/11960#discussion_r420546620", "bodyText": "use unittest.skipIf(onWindows).", "author": "dianfu", "createdAt": "2020-05-06T05:03:25Z", "path": "flink-python/pyflink/table/tests/test_dependency.py", "diffHunk": "@@ -185,7 +185,10 @@ def test_set_environment(self):\n         python_exec = sys.executable\n         tmp_dir = self.tempdir\n         python_exec_link_path = os.path.join(tmp_dir, \"py_exec\")\n-        os.symlink(python_exec, python_exec_link_path)\n+        try:", "originalCommit": "a283855e4c5042bec925a05e15727ab2db71bd1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0Njg0OA==", "url": "https://github.com/apache/flink/pull/11960#discussion_r420546848", "bodyText": "Why change this", "author": "dianfu", "createdAt": "2020-05-06T05:04:16Z", "path": "flink-python/pyflink/table/tests/test_pandas_udf.py", "diffHunk": "@@ -142,7 +142,7 @@ def time_func(time_param):\n                 'time_param of wrong type %s !' % type(time_param[0])\n             return time_param\n \n-        timestamp_value = datetime.datetime(1970, 1, 1, 0, 0, 0, 123000)\n+        timestamp_value = datetime.datetime(1970, 1, 2, 0, 0, 0, 123000)", "originalCommit": "a283855e4c5042bec925a05e15727ab2db71bd1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwNDE1OA==", "url": "https://github.com/apache/flink/pull/11960#discussion_r421204158", "bodyText": "In windows the time.mktime() does not support negative UTC timestamp value. So we need to ensure the datetime object won't produce a negative UTC timestamp value.", "author": "WeiZhong94", "createdAt": "2020-05-07T02:35:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0Njg0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NzIyMA==", "url": "https://github.com/apache/flink/pull/11960#discussion_r420547220", "bodyText": "Why change this?", "author": "dianfu", "createdAt": "2020-05-06T05:05:50Z", "path": "flink-python/pyflink/fn_execution/tests/test_process_mode_boot.py", "diffHunk": "@@ -114,7 +117,7 @@ def run_boot_py(self):\n                 \"--control_endpoint\", \"localhost:0000\",\n                 \"--semi_persist_dir\", self.tmp_dir]\n \n-        return subprocess.call(args, stdout=sys.stdout, stderr=sys.stderr, env=self.env)", "originalCommit": "a283855e4c5042bec925a05e15727ab2db71bd1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwNDYyNg==", "url": "https://github.com/apache/flink/pull/11960#discussion_r421204626", "bodyText": "On Windows, the PyCharm IDE will replace the sys.stdout and sys.stderr, which does not have the attribute \"fileno\". If we specify the stdout and stderr here, an exception will thrown when running tests in the PyCharm IDE.", "author": "WeiZhong94", "createdAt": "2020-05-07T02:37:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NzIyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NzQ0OQ==", "url": "https://github.com/apache/flink/pull/11960#discussion_r420547449", "bodyText": "could we improve this test a bit to make it runnable on windows?", "author": "dianfu", "createdAt": "2020-05-06T05:06:49Z", "path": "flink-python/pyflink/datastream/tests/test_state_backend.py", "diffHunk": "@@ -132,7 +133,8 @@ def test_get_checkpoint_backend(self):\n         self.assertEqual(checkpoint_backend.get_checkpoint_path(), \"file://var/checkpoints\")\n \n     def test_get_set_db_storage_paths(self):\n-\n+        if on_windows():", "originalCommit": "a283855e4c5042bec925a05e15727ab2db71bd1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6c9c6d4f1ad70f5911f3e58461b8fb3be975df85", "url": "https://github.com/apache/flink/commit/6c9c6d4f1ad70f5911f3e58461b8fb3be975df85", "message": "[FLINK-12717][python] Support running PyFlink on Windows", "committedDate": "2020-05-07T02:28:55Z", "type": "commit"}, {"oid": "6c9c6d4f1ad70f5911f3e58461b8fb3be975df85", "url": "https://github.com/apache/flink/commit/6c9c6d4f1ad70f5911f3e58461b8fb3be975df85", "message": "[FLINK-12717][python] Support running PyFlink on Windows", "committedDate": "2020-05-07T02:28:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzMjg5Mg==", "url": "https://github.com/apache/flink/pull/11960#discussion_r421232892", "bodyText": "unittest.skipIf could be used as a decorator. You could refer to test_coders.py for more information.", "author": "dianfu", "createdAt": "2020-05-07T04:31:50Z", "path": "flink-python/pyflink/table/tests/test_dependency.py", "diffHunk": "@@ -179,9 +180,7 @@ def add_from_file(i):\n         self.assert_equals(actual, [\"3,1\", \"4,2\", \"5,3\"])\n \n     def test_set_environment(self):\n-        if getattr(os, \"symlink\", None) is None:\n-            self.skipTest(\"Symbolic link is not supported, skip testing 'test_set_python_exec'...\")\n-\n+        unittest.skipIf(on_windows(), \"Symbolic link is not supported on Windows, skipping.\")", "originalCommit": "6c9c6d4f1ad70f5911f3e58461b8fb3be975df85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "50a650b6352ffcbdfb920158a5f21b984a734e18", "url": "https://github.com/apache/flink/commit/50a650b6352ffcbdfb920158a5f21b984a734e18", "message": "address comments and fix test failure", "committedDate": "2020-05-07T06:39:40Z", "type": "commit"}]}