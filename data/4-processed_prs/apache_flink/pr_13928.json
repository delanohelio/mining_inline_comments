{"pr_number": 13928, "pr_title": "[hotfix] Do not emit EndOfChannelRecoveryEvent for Approximate Local \u2026", "pr_createdAt": "2020-11-04T15:25:05Z", "pr_url": "https://github.com/apache/flink/pull/13928", "timeline": [{"oid": "f308cc5d04866c3edeb95dacc3f2a1994144c8ab", "url": "https://github.com/apache/flink/commit/f308cc5d04866c3edeb95dacc3f2a1994144c8ab", "message": "[hotfix] Do not emit EndOfChannelRecoveryEvent for Approximate Local Recovery", "committedDate": "2020-11-04T15:08:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQzMDg4Mg==", "url": "https://github.com/apache/flink/pull/13928#discussion_r517430882", "bodyText": "Another option would be to pass false to the existing method from StreamTask, as it's done for iterative jobs:\nprivate void readRecoveredChannelState() throws IOException, InterruptedException {\n    reader.readOutputData(getEnvironment().getAllWriters(), !configuration.isGraphContainingLoops());\n\nIn the end, I think we'll need a check that we are either not using approximate recovery or not rescaling with UC.\nIt would probably be more consistent and easier to implement with the 2nd approach.\nWDYT?\nThe check itself can be added to JM after we compute virtual mappings (cc: @AHeise).", "author": "rkhachatryan", "createdAt": "2020-11-04T15:33:15Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -92,6 +94,11 @@ private void releaseView() {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void finishReadRecoveredState(boolean notifyAndBlockOnCompletion) throws IOException {\n+\t\t// The Approximate Local Recovery can not work with unaligned checkpoint for now, so no need to recover channel state", "originalCommit": "f308cc5d04866c3edeb95dacc3f2a1994144c8ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc4NTUyMw==", "url": "https://github.com/apache/flink/pull/13928#discussion_r517785523", "bodyText": "Hey @rkhachatryan , thanks so much for reviewing!\nYep, what you mentioned is another place I was thinking to make the change.\nBut I am personally slightly preferring to override the method in PipelinedApproximateSubpartition.java. The reason is that we already have a different ResultPartitionType (Pipelined_Approximate). Put the difference in the class implementation (PipelinedApproximateSubpartition.java) reminds us this is another place where Pipelined_Approximate is different from Pipelined(_bounded). Indeed we probably would have different implementations of channel restore for Pipelined_Approximate (for now, it is just do nothing).\nI was leaning to think of it as a different implementation instead of disabling the feature.\nThere are some other places where unaligned checkpoints are not compatible with approximate failover,  not just rescaling.\nThe check of \"approximate failover\" vs \"unaligned checkpoint\" not be enabled at the same time will is added in the PR Till is reviewing right now. It is added when ResultPartitionType is decided.", "author": "curcur", "createdAt": "2020-11-05T04:27:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQzMDg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4ODk3NA==", "url": "https://github.com/apache/flink/pull/13928#discussion_r517888974", "bodyText": "Hey @curcur , thanks for the explanation.\nI approved the changes.", "author": "rkhachatryan", "createdAt": "2020-11-05T09:00:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQzMDg4Mg=="}], "type": "inlineReview"}]}