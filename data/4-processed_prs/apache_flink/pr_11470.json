{"pr_number": 11470, "pr_title": "[FLINK-16671][python] Support for defining scopes and variables on Python metric group", "pr_createdAt": "2020-03-21T07:49:56Z", "pr_url": "https://github.com/apache/flink/pull/11470", "timeline": [{"oid": "1dc75d4ab724db97f14dfc63e2c286e87f1a3bb0", "url": "https://github.com/apache/flink/commit/1dc75d4ab724db97f14dfc63e2c286e87f1a3bb0", "message": "[FLINK-16671][python] Support for defining scopes and variables on Python metric group", "committedDate": "2020-03-21T13:34:09Z", "type": "commit"}, {"oid": "1dc75d4ab724db97f14dfc63e2c286e87f1a3bb0", "url": "https://github.com/apache/flink/commit/1dc75d4ab724db97f14dfc63e2c286e87f1a3bb0", "message": "[FLINK-16671][python] Support for defining scopes and variables on Python metric group", "committedDate": "2020-03-21T13:34:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3Nzg5OA==", "url": "https://github.com/apache/flink/pull/11470#discussion_r397577898", "bodyText": "typo: a better performance -> better performance", "author": "dianfu", "createdAt": "2020-03-25T02:42:03Z", "path": "docs/_includes/generated/python_configuration.html", "diffHunk": "@@ -38,5 +38,11 @@\n             <td>String</td>\n             <td>The amount of memory to be allocated by the Python framework. The sum of the value of this configuration and \"python.fn-execution.buffer.memory.size\" represents the total memory of a Python worker. The memory will be accounted as managed memory if the actual memory allocated to an operator is no less than the total memory of a Python worker. Otherwise, this configuration takes no effect.</td>\n         </tr>\n+        <tr>\n+            <td><h5>python.udf.metric.enabled</h5></td>\n+            <td style=\"word-wrap: break-word;\">true</td>\n+            <td>Boolean</td>\n+            <td>When it is false, metric for Python UDFs will be disabled. You can disable the metric to achieve a better performance at some circumstance.</td>", "originalCommit": "1dc75d4ab724db97f14dfc63e2c286e87f1a3bb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4NzU5OQ==", "url": "https://github.com/apache/flink/pull/11470#discussion_r397587599", "bodyText": "typo: if -> If", "author": "dianfu", "createdAt": "2020-03-25T03:18:50Z", "path": "flink-python/pyflink/metrics/metricbase.py", "diffHunk": "@@ -0,0 +1,127 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+import abc\n+from enum import Enum\n+\n+\n+class MetricGroup(abc.ABC):\n+\n+    def add_group(self, name: str, extra: str = None) -> 'MetricGroup':\n+        \"\"\"\n+        if extra is not None, creates a new key-value MetricGroup pair. The key group", "originalCommit": "1dc75d4ab724db97f14dfc63e2c286e87f1a3bb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5MDMyNw==", "url": "https://github.com/apache/flink/pull/11470#discussion_r397590327", "bodyText": "[] -> [str]?", "author": "dianfu", "createdAt": "2020-03-25T03:29:28Z", "path": "flink-python/pyflink/metrics/metricbase.py", "diffHunk": "@@ -0,0 +1,127 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+import abc\n+from enum import Enum\n+\n+\n+class MetricGroup(abc.ABC):\n+\n+    def add_group(self, name: str, extra: str = None) -> 'MetricGroup':\n+        \"\"\"\n+        if extra is not None, creates a new key-value MetricGroup pair. The key group\n+        is added to this groups sub-groups, while the value group is added to the key\n+        group's sub-groups. This method returns the value group.\n+\n+        The only difference between calling this method and\n+        `group.add_group(key).add_group(value)` is that get_all_variables()\n+        of the value group return an additional `\"<key>\"=\"value\"` pair.\n+        \"\"\"\n+        pass\n+\n+    def get_scope_components(self) -> []:", "originalCommit": "1dc75d4ab724db97f14dfc63e2c286e87f1a3bb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5Mjc2Nw==", "url": "https://github.com/apache/flink/pull/11470#discussion_r397592767", "bodyText": "map[str, str]", "author": "dianfu", "createdAt": "2020-03-25T03:39:42Z", "path": "flink-python/pyflink/metrics/metricbase.py", "diffHunk": "@@ -0,0 +1,127 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+import abc\n+from enum import Enum\n+\n+\n+class MetricGroup(abc.ABC):\n+\n+    def add_group(self, name: str, extra: str = None) -> 'MetricGroup':\n+        \"\"\"\n+        if extra is not None, creates a new key-value MetricGroup pair. The key group\n+        is added to this groups sub-groups, while the value group is added to the key\n+        group's sub-groups. This method returns the value group.\n+\n+        The only difference between calling this method and\n+        `group.add_group(key).add_group(value)` is that get_all_variables()\n+        of the value group return an additional `\"<key>\"=\"value\"` pair.\n+        \"\"\"\n+        pass\n+\n+    def get_scope_components(self) -> []:\n+        \"\"\"\n+        Gets the scope as an array of the scope components, for example\n+        `[\"host-7\", \"taskmanager-2\", \"window_word_count\", \"my-mapper\"]`\n+        \"\"\"\n+        pass\n+\n+    def get_all_variables(self) -> map:", "originalCommit": "1dc75d4ab724db97f14dfc63e2c286e87f1a3bb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NzE4OQ==", "url": "https://github.com/apache/flink/pull/11470#discussion_r397597189", "bodyText": "typo: child_compoents -> child_components", "author": "dianfu", "createdAt": "2020-03-25T03:59:34Z", "path": "flink-python/pyflink/metrics/metricbase.py", "diffHunk": "@@ -0,0 +1,127 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+import abc\n+from enum import Enum\n+\n+\n+class MetricGroup(abc.ABC):\n+\n+    def add_group(self, name: str, extra: str = None) -> 'MetricGroup':\n+        \"\"\"\n+        if extra is not None, creates a new key-value MetricGroup pair. The key group\n+        is added to this groups sub-groups, while the value group is added to the key\n+        group's sub-groups. This method returns the value group.\n+\n+        The only difference between calling this method and\n+        `group.add_group(key).add_group(value)` is that get_all_variables()\n+        of the value group return an additional `\"<key>\"=\"value\"` pair.\n+        \"\"\"\n+        pass\n+\n+    def get_scope_components(self) -> []:\n+        \"\"\"\n+        Gets the scope as an array of the scope components, for example\n+        `[\"host-7\", \"taskmanager-2\", \"window_word_count\", \"my-mapper\"]`\n+        \"\"\"\n+        pass\n+\n+    def get_all_variables(self) -> map:\n+        \"\"\"\n+        Returns a map of all variables and their associated value, for example\n+        `{\"<host>\"=\"host-7\", \"<tm_id>\"=\"taskmanager-2\"}`\n+        \"\"\"\n+        pass\n+\n+    def get_metric_identifier(self, metric_name: str) -> str:\n+        \"\"\"\n+        Returns the fully qualified metric name, for example\n+        `host-7.taskmanager-2.window_word_count.my-mapper.metricName`\n+        \"\"\"\n+        pass\n+\n+\n+class MetricGroupType(Enum):\n+    \"\"\"\n+    Indicate the type of MetricGroup.\n+    \"\"\"\n+    generic = 0\n+    key = 1\n+    value = 2\n+\n+\n+class GenericMetricGroup(MetricGroup):\n+\n+    def __init__(\n+            self,\n+            parent,\n+            name,\n+            variables,\n+            scope_components,\n+            delimiter,\n+            metric_group_type=MetricGroupType.generic):\n+        self._parent = parent\n+        self._sub_groups = []\n+        self._variables = variables\n+        self._scope_components = scope_components\n+        self._name = name\n+        self._metric_group_type = metric_group_type\n+        self._delimiter = delimiter\n+\n+    def _add_group(self, name: str, metric_group_type) -> 'MetricGroup':\n+        for group in self._sub_groups:\n+            if name == group._name and metric_group_type == group._metric_group_type:\n+                # we don't create same metric group repeatedly\n+                return group\n+\n+        # variables\n+        child_variables = {}\n+        child_variables.update(self._variables)\n+        if metric_group_type == MetricGroupType.value:\n+            child_variables[self._name] = name\n+\n+        # add scope components\n+        child_compoents = self.get_scope_components().copy()", "originalCommit": "1dc75d4ab724db97f14dfc63e2c286e87f1a3bb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzMDQxNA==", "url": "https://github.com/apache/flink/pull/11470#discussion_r397630414", "bodyText": "Annotate it as @nullable?", "author": "dianfu", "createdAt": "2020-03-25T06:21:49Z", "path": "flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java", "diffHunk": "@@ -116,17 +119,24 @@\n \t */\n \tprotected transient DataOutputViewStreamWrapper baosWrapper;\n \n+\t/**\n+\t * The flinkMetricContainer will be set to null if metric is configured to be turned off.\n+\t */\n+\t@Nullable protected FlinkMetricContainer flinkMetricContainer;\n+\n \tpublic AbstractPythonFunctionRunner(\n \t\tString taskName,\n \t\tFnDataReceiver<byte[]> resultReceiver,\n \t\tPythonEnvironmentManager environmentManager,\n \t\tStateRequestHandler stateRequestHandler,\n-\t\tMap<String, String> jobOptions) {\n+\t\tMap<String, String> jobOptions,\n+\t\tFlinkMetricContainer flinkMetricContainer) {", "originalCommit": "1dc75d4ab724db97f14dfc63e2c286e87f1a3bb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNTk4OA==", "url": "https://github.com/apache/flink/pull/11470#discussion_r397635988", "bodyText": "What about name it as \"python.metrics.enabled\" or something else as this configuration is not only used for Python UDF, but will also used for the Python DataStream API which maybe introduced in the future?", "author": "dianfu", "createdAt": "2020-03-25T06:41:08Z", "path": "flink-python/src/main/java/org/apache/flink/python/PythonOptions.java", "diffHunk": "@@ -81,4 +81,13 @@\n \t\t\t\"buffer of a Python worker. The memory will be accounted as managed memory if the \" +\n \t\t\t\"actual memory allocated to an operator is no less than the total memory of a Python \" +\n \t\t\t\"worker. Otherwise, this configuration takes no effect.\");\n+\n+\t/**\n+\t * The configuration to enable or disable metric for Python UDFs.\n+\t */\n+\tpublic static final ConfigOption<Boolean> PYTHON_UDF_METRIC_ENABLED = ConfigOptions\n+\t\t.key(\"python.udf.metric.enabled\")", "originalCommit": "1dc75d4ab724db97f14dfc63e2c286e87f1a3bb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzOTA5MQ==", "url": "https://github.com/apache/flink/pull/11470#discussion_r397639091", "bodyText": "What about move this method to AbstractPythonFunctionRunner as the metrics will not only be used by UDF/UDTF, but will also be used by UDAF and the Python DataStream API which maybe introduced in the future?", "author": "dianfu", "createdAt": "2020-03-25T06:50:56Z", "path": "flink-python/src/main/java/org/apache/flink/table/runtime/runners/python/AbstractPythonStatelessFunctionRunner.java", "diffHunk": "@@ -250,4 +252,15 @@ public RowType getOutputType() {\n \t */\n \t@VisibleForTesting\n \tpublic abstract FlinkFnApi.UserDefinedFunctions getUserDefinedFunctionsProto();\n+\n+\t/**\n+\t * Gets the proto representation of the base MetricGroup used for all user-defined functions.\n+\t */\n+\tprotected FlinkFnApi.MetricGroupInfo getBaseMetricGroupInfo() {", "originalCommit": "1dc75d4ab724db97f14dfc63e2c286e87f1a3bb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MTE2Ng==", "url": "https://github.com/apache/flink/pull/11470#discussion_r397641166", "bodyText": "The method name doesn't reflect the purpose of the test case.", "author": "dianfu", "createdAt": "2020-03-25T06:57:45Z", "path": "flink-python/pyflink/metrics/tests/test_metric_it_case.py", "diffHunk": "@@ -0,0 +1,60 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+\n+\n+from pyflink.table import DataTypes\n+from pyflink.table.udf import ScalarFunction, udf\n+from pyflink.testing import source_sink_utils\n+from pyflink.testing.test_case_utils import PyFlinkStreamTableTestCase\n+import unittest\n+\n+\n+class SubtractOne(ScalarFunction, unittest.TestCase):\n+\n+    def open(self, function_context):\n+        mg = function_context.get_metric_group()\n+        # test metric group info which is passed from Java to Python\n+        self.assertTrue('.aaa' in mg.get_metric_identifier('aaa'))\n+        self.assertTrue(len(mg.get_all_variables()) > 0)\n+        self.assertTrue(len(mg.get_scope_components()) > 0)\n+\n+    def eval(self, i):\n+        return i - 1\n+\n+\n+class UserDefinedFunctionTests(object):\n+\n+    def test_chaining_scalar_function(self):", "originalCommit": "1dc75d4ab724db97f14dfc63e2c286e87f1a3bb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MjE0OQ==", "url": "https://github.com/apache/flink/pull/11470#discussion_r397642149", "bodyText": "Should also add documentation about what will happen if extra is None.", "author": "dianfu", "createdAt": "2020-03-25T07:00:51Z", "path": "flink-python/pyflink/metrics/metricbase.py", "diffHunk": "@@ -0,0 +1,127 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+import abc\n+from enum import Enum\n+\n+\n+class MetricGroup(abc.ABC):\n+\n+    def add_group(self, name: str, extra: str = None) -> 'MetricGroup':\n+        \"\"\"\n+        if extra is not None, creates a new key-value MetricGroup pair. The key group", "originalCommit": "1dc75d4ab724db97f14dfc63e2c286e87f1a3bb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MzM5MQ==", "url": "https://github.com/apache/flink/pull/11470#discussion_r397643391", "bodyText": "Mark it as @Internal", "author": "dianfu", "createdAt": "2020-03-25T07:04:59Z", "path": "flink-python/src/main/java/org/apache/flink/python/metric/FlinkMetricContainer.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.python.metric;\n+\n+import org.apache.flink.configuration.GlobalConfiguration;\n+import org.apache.flink.configuration.MetricOptions;\n+import org.apache.flink.fnexecution.v1.FlinkFnApi;\n+import org.apache.flink.metrics.MetricGroup;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * Helper class for forwarding metric group information from Java to Python and forward Python\n+ * metrics to Java accumulators and metrics.\n+ */\n+public class FlinkMetricContainer {", "originalCommit": "1dc75d4ab724db97f14dfc63e2c286e87f1a3bb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b8d1f67cb854839dc8a1eb92bd000c74ff466cc9", "url": "https://github.com/apache/flink/commit/b8d1f67cb854839dc8a1eb92bd000c74ff466cc9", "message": "address comments", "committedDate": "2020-03-25T08:50:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4NzA3NA==", "url": "https://github.com/apache/flink/pull/11470#discussion_r397887074", "bodyText": "Unnecessary change", "author": "dianfu", "createdAt": "2020-03-25T14:15:20Z", "path": "flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java", "diffHunk": "@@ -55,7 +59,7 @@\n \n \tprivate static final String MAIN_INPUT_ID = \"input\";\n \n-\tprivate final String taskName;\n+\tprotected final String taskName;", "originalCommit": "b8d1f67cb854839dc8a1eb92bd000c74ff466cc9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4NzYzNQ==", "url": "https://github.com/apache/flink/pull/11470#discussion_r397887635", "bodyText": "Change to private?", "author": "dianfu", "createdAt": "2020-03-25T14:16:04Z", "path": "flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java", "diffHunk": "@@ -116,17 +120,24 @@\n \t */\n \tprotected transient DataOutputViewStreamWrapper baosWrapper;\n \n+\t/**\n+\t * The flinkMetricContainer will be set to null if metric is configured to be turned off.\n+\t */\n+\t@Nullable protected FlinkMetricContainer flinkMetricContainer;", "originalCommit": "b8d1f67cb854839dc8a1eb92bd000c74ff466cc9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4ODkwMg==", "url": "https://github.com/apache/flink/pull/11470#discussion_r397888902", "bodyText": "What about remove the used for all user-defined functions as metrics will be used not only for UDF?", "author": "dianfu", "createdAt": "2020-03-25T14:17:51Z", "path": "flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java", "diffHunk": "@@ -224,4 +235,15 @@ public JobBundleFactory createJobBundleFactory(Struct pipelineOptions) throws Ex\n \tpublic abstract ExecutableStage createExecutableStage() throws Exception;\n \n \tpublic abstract OutputReceiverFactory createOutputReceiverFactory();\n+\n+\t/**\n+\t * Gets the proto representation of the base MetricGroup used for all user-defined functions.", "originalCommit": "b8d1f67cb854839dc8a1eb92bd000c74ff466cc9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5MTM3MQ==", "url": "https://github.com/apache/flink/pull/11470#discussion_r397891371", "bodyText": "Rename to some other name like testPythonMetric or testPythonMetricEnable?", "author": "dianfu", "createdAt": "2020-03-25T14:20:55Z", "path": "flink-python/src/test/java/org/apache/flink/python/PythonOptionsTest.java", "diffHunk": "@@ -95,4 +95,17 @@ public void testArrowBatchSize() {\n \t\tfinal int actualArrowBatchSize = configuration.getInteger(PythonOptions.MAX_ARROW_BATCH_SIZE);\n \t\tassertThat(actualArrowBatchSize, is(equalTo(expectedArrowBatchSize)));\n \t}\n+\n+\t@Test\n+\tpublic void testPthonUDFMetricEnabled() {", "originalCommit": "b8d1f67cb854839dc8a1eb92bd000c74ff466cc9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7a7a44b62e4243ed454e174f957f2429cf0f067b", "url": "https://github.com/apache/flink/commit/7a7a44b62e4243ed454e174f957f2429cf0f067b", "message": "remove get_all_variables, get_scope_components and get_metric_identifier", "committedDate": "2020-03-26T08:40:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQxMTIwOA==", "url": "https://github.com/apache/flink/pull/11470#discussion_r398411208", "bodyText": "The comments should be updated as get_all_variables doesn't exist any more", "author": "dianfu", "createdAt": "2020-03-26T09:02:42Z", "path": "flink-python/pyflink/metrics/metricbase.py", "diffHunk": "@@ -0,0 +1,78 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+import abc\n+from enum import Enum\n+\n+\n+class MetricGroup(abc.ABC):\n+\n+    def add_group(self, name: str, extra: str = None) -> 'MetricGroup':\n+        \"\"\"\n+        Creates a new MetricGroup and adds it to this groups sub-groups.\n+\n+        If extra is not None, creates a new key-value MetricGroup pair. The key group\n+        is added to this groups sub-groups, while the value group is added to the key\n+        group's sub-groups. This method returns the value group.\n+\n+        The only difference between calling this method and", "originalCommit": "7a7a44b62e4243ed454e174f957f2429cf0f067b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQxMjI3Ng==", "url": "https://github.com/apache/flink/pull/11470#discussion_r398412276", "bodyText": "Remove for Python UDFs.?", "author": "dianfu", "createdAt": "2020-03-26T09:04:32Z", "path": "flink-python/src/main/java/org/apache/flink/python/PythonConfig.java", "diffHunk": "@@ -103,6 +103,11 @@\n \t@Nullable\n \tprivate final String pythonExec;\n \n+\t/**\n+\t * Whether metric is enabled for Python UDFs.", "originalCommit": "7a7a44b62e4243ed454e174f957f2429cf0f067b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQxMjYzMw==", "url": "https://github.com/apache/flink/pull/11470#discussion_r398412633", "bodyText": "typo: Pthon -> Python", "author": "dianfu", "createdAt": "2020-03-26T09:05:13Z", "path": "flink-python/src/test/java/org/apache/flink/python/PythonOptionsTest.java", "diffHunk": "@@ -95,4 +95,17 @@ public void testArrowBatchSize() {\n \t\tfinal int actualArrowBatchSize = configuration.getInteger(PythonOptions.MAX_ARROW_BATCH_SIZE);\n \t\tassertThat(actualArrowBatchSize, is(equalTo(expectedArrowBatchSize)));\n \t}\n+\n+\t@Test\n+\tpublic void testPthonMetricEnabled() {", "originalCommit": "7a7a44b62e4243ed454e174f957f2429cf0f067b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cd7f5ca1b3d716a5e34ba4256a33c6817f125480", "url": "https://github.com/apache/flink/commit/cd7f5ca1b3d716a5e34ba4256a33c6817f125480", "message": "fix typo", "committedDate": "2020-03-26T09:14:22Z", "type": "commit"}]}