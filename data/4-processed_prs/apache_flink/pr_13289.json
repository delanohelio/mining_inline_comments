{"pr_number": 13289, "pr_title": "[FLINK-18548][table-planner] support flexible syntax for Temporal table join", "pr_createdAt": "2020-08-31T16:24:43Z", "pr_url": "https://github.com/apache/flink/pull/13289", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAwMjUwMA==", "url": "https://github.com/apache/flink/pull/13289#discussion_r482002500", "bodyText": "val relBuilder: RelBuilder to eliminate the IDEA warnings.", "author": "danny0405", "createdAt": "2020-09-02T11:38:19Z", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/calcite/FlinkPlannerImpl.scala", "diffHunk": "@@ -163,7 +163,35 @@ class FlinkPlannerImpl(\n         sqlValidator.getCatalogReader.unwrap(classOf[CalciteCatalogReader]),\n         cluster,\n         convertletTable,\n-        sqlToRelConverterConfig)\n+        sqlToRelConverterConfig) {\n+        // override convertFrom() to support flexible Temporal Table Syntax,\n+        // this can be revert once FLINK-16579(Upgrade Calcite version to 1.23) resolved.\n+        val relBuilder = config.getRelBuilderFactory.create(cluster, null)\n+", "originalCommit": "78e195f2120b88bff90da918c1a5a0ae5327285f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAwNzYxMw==", "url": "https://github.com/apache/flink/pull/13289#discussion_r482007613", "bodyText": "You can use junit Assume.assumeTrue() instead.\nPS, can we just create another table with computed column there and add test cases for this patch ? It is not necessary to add another test param which makes the test looks verbose and complex.", "author": "danny0405", "createdAt": "2020-09-02T11:48:08Z", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/batch/sql/join/LookupJoinITCase.scala", "diffHunk": "@@ -208,15 +247,19 @@ class LookupJoinITCase(legacyTableSource: Boolean, isAsyncMode: Boolean) extends\n \n   @Test\n   def testLeftJoinTemporalTable(): Unit = {\n-    val sql = s\"SELECT T.id, T.len, D.name, D.age FROM T LEFT JOIN userTable \" +\n+    if (legacyTableSource) {\n+      //Computed column do not support in legacyTableSource.", "originalCommit": "78e195f2120b88bff90da918c1a5a0ae5327285f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAwODIzMQ==", "url": "https://github.com/apache/flink/pull/13289#discussion_r482008231", "bodyText": "No need to add another param useComputedColumn i think. Just add new tables and new cases you want to test.", "author": "danny0405", "createdAt": "2020-09-02T11:49:21Z", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/plan/stream/sql/join/LookupJoinTest.scala", "diffHunk": "@@ -489,9 +493,12 @@ class LookupJoinTest(legacyTableSource: Boolean) extends TableTestBase with Seri\n }\n \n object LookupJoinTest {\n-  @Parameterized.Parameters(name = \"LegacyTableSource={0}\")\n+  @Parameterized.Parameters(name = \"LegacyTableSource={0}, useComputedColumn={1}\")\n   def parameters(): JCollection[Array[Object]] = {\n-    Seq[Array[AnyRef]](Array(JBoolean.TRUE), Array(JBoolean.FALSE))\n+    Seq[Array[AnyRef]](", "originalCommit": "78e195f2120b88bff90da918c1a5a0ae5327285f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8788045dfd7023777299e2a4b514711bb4018c98", "url": "https://github.com/apache/flink/commit/8788045dfd7023777299e2a4b514711bb4018c98", "message": "[FLINK-18548][table-planner] support flexible syntax for Temporal table join", "committedDate": "2020-09-09T06:50:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxNzExNw==", "url": "https://github.com/apache/flink/pull/13289#discussion_r492517117", "bodyText": "Create a JIRA issue to remove this overriding once we bump up Calcite version. And add comment above this method with the JIRA id.", "author": "wuchong", "createdAt": "2020-09-22T07:11:22Z", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/calcite/FlinkPlannerImpl.scala", "diffHunk": "@@ -163,7 +163,35 @@ class FlinkPlannerImpl(\n         sqlValidator.getCatalogReader.unwrap(classOf[CalciteCatalogReader]),\n         cluster,\n         convertletTable,\n-        sqlToRelConverterConfig)\n+        sqlToRelConverterConfig) {\n+        // override convertFrom() to support flexible Temporal Table Syntax,\n+        // this can be revert once FLINK-16579(Upgrade Calcite version to 1.23) resolved.\n+        val relBuilder = config.getRelBuilderFactory.create(cluster, null)\n+\n+        override def convertFrom(bb: SqlToRelConverter#Blackboard, from: SqlNode): Unit = {", "originalCommit": "8788045dfd7023777299e2a4b514711bb4018c98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ef462e3d6a961f1d353a84e8ae55982c97c67a8e", "url": "https://github.com/apache/flink/commit/ef462e3d6a961f1d353a84e8ae55982c97c67a8e", "message": "[FLINK-18548][table-planner] support flexible syntax for Temporal table join", "committedDate": "2020-09-22T12:37:30Z", "type": "commit"}, {"oid": "ef462e3d6a961f1d353a84e8ae55982c97c67a8e", "url": "https://github.com/apache/flink/commit/ef462e3d6a961f1d353a84e8ae55982c97c67a8e", "message": "[FLINK-18548][table-planner] support flexible syntax for Temporal table join", "committedDate": "2020-09-22T12:37:30Z", "type": "forcePushed"}]}