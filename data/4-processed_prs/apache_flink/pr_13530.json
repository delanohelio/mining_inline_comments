{"pr_number": 13530, "pr_title": "[FLINK-19123] Use shared MiniCluster for executeAsync() in TestStreamEnvironment", "pr_createdAt": "2020-10-02T07:29:28Z", "pr_url": "https://github.com/apache/flink/pull/13530", "timeline": [{"oid": "2513a954016debd48694a5097a5c2a48943ca532", "url": "https://github.com/apache/flink/commit/2513a954016debd48694a5097a5c2a48943ca532", "message": "[FLINK-19123] Remove unused JobExecutor interfaces\n\nThey were introduced to allow two different MiniCluster implementations\nwhen the \"new\" FLIP-6 code was introduced.\n\nIn the previous commit we changed the TestEnvironments to directly use a\nMiniCluster so these interfaces are not required anymore.", "committedDate": "2020-10-02T07:45:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyMjMwOA==", "url": "https://github.com/apache/flink/pull/13530#discussion_r498922308", "bodyText": "I tend to prefer enums instead of booleans for parameters because it makes it explicit what true and false means.", "author": "tillrohrmann", "createdAt": "2020-10-02T16:22:41Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/minicluster/MiniClusterJobClient.java", "diffHunk": "@@ -43,23 +43,30 @@\n /**\n  * A {@link JobClient} for a {@link MiniCluster}.\n  */\n-public final class PerJobMiniClusterJobClient implements JobClient, CoordinationRequestGateway {\n+public final class MiniClusterJobClient implements JobClient, CoordinationRequestGateway {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(PerJobMiniClusterJobClient.class);\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(MiniClusterJobClient.class);\n \n \tprivate final JobID jobID;\n \tprivate final MiniCluster miniCluster;\n-\tprivate final CompletableFuture<JobResult> jobResultFuture;\n \tprivate final ClassLoader classLoader;\n+\tprivate final CompletableFuture<JobResult> jobResultFuture;\n \n-\tpublic PerJobMiniClusterJobClient(JobID jobID, MiniCluster miniCluster, ClassLoader classLoader) {\n+\t/**\n+\t * Creates a {@link MiniClusterJobClient} for the given {@link JobID} and {@link MiniCluster}.\n+\t * This will shut down the {@code MiniCluster} after job result retrieval if {@code\n+\t * shutdownCluster} is {@code true}.\n+\t */\n+\tpublic MiniClusterJobClient(JobID jobID, MiniCluster miniCluster, ClassLoader classLoader, boolean shutdownCluster) {", "originalCommit": "6d4b30a92c9dd7b13bf4d906b58b9cf591edf036", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyNTA1OQ==", "url": "https://github.com/apache/flink/pull/13530#discussion_r498925059", "bodyText": "I think an extra tab of indentation is probably not correct here.", "author": "tillrohrmann", "createdAt": "2020-10-02T16:28:14Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/test/util/TestEnvironment.java", "diffHunk": "@@ -78,58 +63,33 @@ public TestEnvironment(\n \t}\n \n \tpublic TestEnvironment(\n-\t\t\tJobExecutor executor,\n+\t\t\tMiniCluster executor,\n \t\t\tint parallelism,\n \t\t\tboolean isObjectReuseEnabled) {\n \t\tthis(\n-\t\t\texecutor,\n-\t\t\tparallelism,\n-\t\t\tisObjectReuseEnabled,\n-\t\t\tCollections.emptyList(),\n-\t\t\tCollections.emptyList());\n+\t\t\t\texecutor,\n+\t\t\t\tparallelism,\n+\t\t\t\tisObjectReuseEnabled,\n+\t\t\t\tCollections.emptyList(),\n+\t\t\t\tCollections.emptyList());", "originalCommit": "0349d078595fe3b752d4b606413e6bb30e1e18a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyNTI4OQ==", "url": "https://github.com/apache/flink/pull/13530#discussion_r498925289", "bodyText": "nit: this looks too deeply intended.", "author": "tillrohrmann", "createdAt": "2020-10-02T16:28:43Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/test/util/TestEnvironment.java", "diffHunk": "@@ -19,52 +19,37 @@\n package org.apache.flink.test.util;\n \n import org.apache.flink.api.common.JobExecutionResult;\n-import org.apache.flink.api.common.Plan;\n import org.apache.flink.api.java.ExecutionEnvironment;\n import org.apache.flink.api.java.ExecutionEnvironmentFactory;\n-import org.apache.flink.client.deployment.executors.LocalExecutor;\n-import org.apache.flink.configuration.Configuration;\n-import org.apache.flink.configuration.DeploymentOptions;\n import org.apache.flink.core.fs.Path;\n-import org.apache.flink.optimizer.DataStatistics;\n-import org.apache.flink.optimizer.Optimizer;\n-import org.apache.flink.optimizer.plan.OptimizedPlan;\n-import org.apache.flink.optimizer.plantranslate.JobGraphGenerator;\n-import org.apache.flink.runtime.jobgraph.JobGraph;\n-import org.apache.flink.runtime.minicluster.JobExecutor;\n import org.apache.flink.runtime.minicluster.MiniCluster;\n import org.apache.flink.util.Preconditions;\n \n import java.net.URL;\n-import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n \n /**\n- * A {@link ExecutionEnvironment} implementation which executes its jobs on a\n- * {@link MiniCluster}.\n+ * A {@link ExecutionEnvironment} implementation which executes its jobs on a {@link MiniCluster}.\n  */\n public class TestEnvironment extends ExecutionEnvironment {\n \n-\tprivate final JobExecutor jobExecutor;\n-\n-\tprivate final Collection<Path> jarFiles;\n-\n-\tprivate final Collection<URL> classPaths;\n+\tprivate final MiniCluster miniCluster;\n \n \tprivate TestEnvironment lastEnv;\n \n \tpublic TestEnvironment(\n-\t\t\tJobExecutor jobExecutor,\n+\t\t\tMiniCluster miniCluster,\n \t\t\tint parallelism,\n \t\t\tboolean isObjectReuseEnabled,\n \t\t\tCollection<Path> jarFiles,\n \t\t\tCollection<URL> classPaths) {\n-\t\tthis.jobExecutor = Preconditions.checkNotNull(jobExecutor);\n-\t\tthis.jarFiles = Preconditions.checkNotNull(jarFiles);\n-\t\tthis.classPaths = Preconditions.checkNotNull(classPaths);\n-\t\tgetConfiguration().set(DeploymentOptions.TARGET, LocalExecutor.NAME);\n-\t\tgetConfiguration().set(DeploymentOptions.ATTACHED, true);\n+\t\tsuper(\n+\t\t\t\tnew MiniClusterPipelineExecutorServiceLoader(miniCluster),\n+\t\t\t\tMiniClusterPipelineExecutorServiceLoader.createConfiguration(jarFiles, classPaths),\n+\t\t\t\tnull);", "originalCommit": "0349d078595fe3b752d4b606413e6bb30e1e18a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyNTUwNQ==", "url": "https://github.com/apache/flink/pull/13530#discussion_r498925505", "bodyText": "nit: I am not sure about this indentation here.", "author": "tillrohrmann", "createdAt": "2020-10-02T16:29:07Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/test/util/TestEnvironment.java", "diffHunk": "@@ -174,15 +129,15 @@ public ExecutionEnvironment createExecutionEnvironment() {\n \t * environment executes the given jobs on a Flink mini cluster with the given default\n \t * parallelism and the additional jar files and class paths.\n \t *\n-\t * @param jobExecutor The executor to run the jobs on\n+\t * @param miniCluster The MiniCluster to execute jobs on.\n \t * @param parallelism The default parallelism\n \t */\n-\tpublic static void setAsContext(final JobExecutor jobExecutor, final int parallelism) {\n+\tpublic static void setAsContext(final MiniCluster miniCluster, final int parallelism) {\n \t\tsetAsContext(\n-\t\t\tjobExecutor,\n-\t\t\tparallelism,\n-\t\t\tCollections.emptyList(),\n-\t\t\tCollections.emptyList());\n+\t\t\t\tminiCluster,\n+\t\t\t\tparallelism,\n+\t\t\t\tCollections.emptyList(),\n+\t\t\t\tCollections.emptyList());", "originalCommit": "0349d078595fe3b752d4b606413e6bb30e1e18a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "443a959cc0cf0ff48cdad25d180d1214f1b4ac74", "url": "https://github.com/apache/flink/commit/443a959cc0cf0ff48cdad25d180d1214f1b4ac74", "message": "[FLINK-19123] Move PerJobMiniClusterJobClient to top level", "committedDate": "2020-10-05T15:07:18Z", "type": "commit"}, {"oid": "b336c72a676125d3fe9b6b42d1bc2a8fc99c6868", "url": "https://github.com/apache/flink/commit/b336c72a676125d3fe9b6b42d1bc2a8fc99c6868", "message": "[FLINK-19123] Move PerJobMiniClusterJobClient to runtime.minicluster package", "committedDate": "2020-10-05T15:07:18Z", "type": "commit"}, {"oid": "a842b684123e42b517d59adb2f0b21d173a105d3", "url": "https://github.com/apache/flink/commit/a842b684123e42b517d59adb2f0b21d173a105d3", "message": "[FLINK-19123] Make MiniClusterJobClient shutdown behaviour configurable\n\nWe also rename it from PerJobMiniClusterJobClient to\nMiniClusterJobClient to reflect the change.", "committedDate": "2020-10-05T15:07:19Z", "type": "commit"}, {"oid": "f9fc140ada79130d11739fb213a6a1c6f1148140", "url": "https://github.com/apache/flink/commit/f9fc140ada79130d11739fb213a6a1c6f1148140", "message": "[FLINK-19123] Don't override execute()/executeAsync() in TestStreamEnvironment\n\nInstead, we use a custom PipelineExecutorServiceLoader to inject a\nMiniClusterExecutor. This requires that we directly use MiniCluster\ninstead of the JobExecutor interface in the test environments because we\nneed to use asynchronous job submission. The alternative would be to\nextend the JobExecutor interface to allow async job submission.\n\nWe have to fix OrcFileSystemITCase to actually wait for the job that\nfills the test table to finish because now the async execution method\nreturns too fast.", "committedDate": "2020-10-05T15:07:19Z", "type": "commit"}, {"oid": "47ca19a74e11c72842124852875262959477c459", "url": "https://github.com/apache/flink/commit/47ca19a74e11c72842124852875262959477c459", "message": "[FLINK-19123] Remove unused JobExecutor interfaces\n\nThey were introduced to allow two different MiniCluster implementations\nwhen the \"new\" FLIP-6 code was introduced.\n\nIn the previous commit we changed the TestEnvironments to directly use a\nMiniCluster so these interfaces are not required anymore.", "committedDate": "2020-10-05T15:07:19Z", "type": "commit"}, {"oid": "47ca19a74e11c72842124852875262959477c459", "url": "https://github.com/apache/flink/commit/47ca19a74e11c72842124852875262959477c459", "message": "[FLINK-19123] Remove unused JobExecutor interfaces\n\nThey were introduced to allow two different MiniCluster implementations\nwhen the \"new\" FLIP-6 code was introduced.\n\nIn the previous commit we changed the TestEnvironments to directly use a\nMiniCluster so these interfaces are not required anymore.", "committedDate": "2020-10-05T15:07:19Z", "type": "forcePushed"}]}