{"pr_number": 11275, "pr_title": "[FLINK-16359][table-runtime] Introduce WritableVectors for abstract writing", "pr_createdAt": "2020-03-02T05:38:01Z", "pr_url": "https://github.com/apache/flink/pull/11275", "timeline": [{"oid": "2df6f64a7d1a62836521bd02ec0ce77fe2b14efb", "url": "https://github.com/apache/flink/commit/2df6f64a7d1a62836521bd02ec0ce77fe2b14efb", "message": "[FLINK-16359][table-runtime] Introduce WritableVectors for abstract writing", "committedDate": "2020-03-02T05:34:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3MDkzNQ==", "url": "https://github.com/apache/flink/pull/11275#discussion_r386270935", "bodyText": "Add a meaningful message, or throw an index-out-of-bound exception?", "author": "lirui-apache", "createdAt": "2020-03-02T09:13:48Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/vector/heap/HeapIntVector.java", "diffHunk": "@@ -47,4 +49,45 @@ public int getInt(int i) {\n \t\t\treturn dictionary.decodeToInt(dictionaryIds.vector[i]);\n \t\t}\n \t}\n+\n+\t@Override\n+\tpublic void setInt(int i, int value) {\n+\t\tif (i >= vector.length) {\n+\t\t\tthrow new RuntimeException();\n+\t\t}\n+\t\tvector[i] = value;\n+\t}\n+\n+\t@Override\n+\tpublic void setIntsFromBinary(int rowId, int count, byte[] src, int srcIndex) {\n+\t\tif (LITTLE_ENDIAN) {\n+\t\t\tUNSAFE.copyMemory(src, BYTE_ARRAY_OFFSET + srcIndex, vector,\n+\t\t\t\t\tINT_ARRAY_OFFSET + rowId * 4L, count * 4L);\n+\t\t} else {\n+\t\t\tlong srcOffset = srcIndex + BYTE_ARRAY_OFFSET;\n+\t\t\tfor (int i = 0; i < count; ++i, srcOffset += 4) {\n+\t\t\t\tvector[i + rowId] = Integer.reverseBytes(UNSAFE.getInt(src, srcOffset));\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void setInts(int rowId, int count, int value) {\n+\t\tif (rowId + count - 1 >= vector.length) {\n+\t\t\tthrow new RuntimeException();", "originalCommit": "2df6f64a7d1a62836521bd02ec0ce77fe2b14efb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0MTM3NQ==", "url": "https://github.com/apache/flink/pull/11275#discussion_r386341375", "bodyText": "Nice catch!", "author": "JingsongLi", "createdAt": "2020-03-02T11:34:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3MDkzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0NDY4Mg==", "url": "https://github.com/apache/flink/pull/11275#discussion_r386344682", "bodyText": "I think we can remove this check, leave the exception produced by Java array.", "author": "JingsongLi", "createdAt": "2020-03-02T11:42:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3MDkzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3MjQxNA==", "url": "https://github.com/apache/flink/pull/11275#discussion_r386272414", "bodyText": "Why do we need the precision parameter?", "author": "lirui-apache", "createdAt": "2020-03-02T09:16:43Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/vector/heap/HeapTimestampVector.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.dataformat.vector.heap;\n+\n+import org.apache.flink.table.dataformat.SqlTimestamp;\n+import org.apache.flink.table.dataformat.vector.writable.WritableTimestampVector;\n+\n+import java.util.Arrays;\n+\n+import static org.apache.flink.table.dataformat.SqlTimestamp.fromEpochMillis;\n+\n+/**\n+ * This class represents a nullable byte column vector.\n+ */\n+public class HeapTimestampVector extends AbstractHeapVector implements WritableTimestampVector {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate final long[] milliseconds;\n+\tprivate final int[] nanoOfMilliseconds;\n+\n+\tpublic HeapTimestampVector(int len) {\n+\t\tsuper(len);\n+\t\tthis.milliseconds = new long[len];\n+\t\tthis.nanoOfMilliseconds = new int[len];\n+\t}\n+\n+\t@Override\n+\tpublic SqlTimestamp getTimestamp(int i, int precision) {", "originalCommit": "2df6f64a7d1a62836521bd02ec0ce77fe2b14efb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0Mzg4NQ==", "url": "https://github.com/apache/flink/pull/11275#discussion_r386343885", "bodyText": "We can give the opportunity to optimize nanoOfMilliseconds.", "author": "JingsongLi", "createdAt": "2020-03-02T11:40:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3MjQxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3OTIzMw==", "url": "https://github.com/apache/flink/pull/11275#discussion_r386279233", "bodyText": "Rename to setBytes?", "author": "lirui-apache", "createdAt": "2020-03-02T09:30:33Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/vector/writable/WritableBytesVector.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.dataformat.vector.writable;\n+\n+import org.apache.flink.table.dataformat.vector.BytesColumnVector;\n+\n+/**\n+ * Writable {@link BytesColumnVector}.\n+ */\n+public interface WritableBytesVector extends WritableColumnVector, BytesColumnVector {\n+\n+\t/**\n+\t * Set byte[] at rowId with the provided value.\n+\t */\n+\tvoid appendBytes(int rowId, byte[] value, int offset, int length);", "originalCommit": "2df6f64a7d1a62836521bd02ec0ce77fe2b14efb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0MzQyNg==", "url": "https://github.com/apache/flink/pull/11275#discussion_r386343426", "bodyText": "I'll add comment.\nNote: Must append values according to the order of rowId, can not random append.", "author": "JingsongLi", "createdAt": "2020-03-02T11:39:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3OTIzMw=="}], "type": "inlineReview"}, {"oid": "9c319a7002f2d0e8b5fde97aef0e20bcf7ca2b2c", "url": "https://github.com/apache/flink/commit/9c319a7002f2d0e8b5fde97aef0e20bcf7ca2b2c", "message": "Fix comments", "committedDate": "2020-03-02T11:52:51Z", "type": "commit"}, {"oid": "bb523979ae8f59e3e5985d57cf1661bc8a42260c", "url": "https://github.com/apache/flink/commit/bb523979ae8f59e3e5985d57cf1661bc8a42260c", "message": "Fix python compile", "committedDate": "2020-03-02T12:00:57Z", "type": "commit"}]}