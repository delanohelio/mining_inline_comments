{"pr_number": 13261, "pr_title": "[FLINK-18870][Kinesis] Update Kinesis Consumer website to document EFO Feature", "pr_createdAt": "2020-08-27T08:17:11Z", "pr_url": "https://github.com/apache/flink/pull/13261", "timeline": [{"oid": "69e9e79df723588ae633abd4cce71c2386ca15c9", "url": "https://github.com/apache/flink/commit/69e9e79df723588ae633abd4cce71c2386ca15c9", "message": "[FLINK-18870][Kinesis] Update Kinesis Consumer website to document Kinesis Consumer EFO Feature", "committedDate": "2020-08-27T07:57:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwMzU3Mw==", "url": "https://github.com/apache/flink/pull/13261#discussion_r490903573", "bodyText": "I'm not sure if it makes sense to place EFO at the top of the \"advanced usage sections\". It seems that this topic is not relevant for first-time users, rather for users later in the adoption processes.\nMaybe it would make sense to move it past \"Fault Tolerance for Exactly-Once User-Defined State Update Semantics\", so that first-time users have a better experience.", "author": "rmetzger", "createdAt": "2020-09-18T12:06:02Z", "path": "docs/dev/connectors/kinesis.md", "diffHunk": "@@ -129,6 +129,181 @@ shard IDs are not consecutive (as result of dynamic re-sharding in Kinesis).\n For cases where skew in the assignment leads to significant imbalanced consumption,\n a custom implementation of `KinesisShardAssigner` can be set on the consumer.\n \n+### Using Enhanced Fan Out", "originalCommit": "69e9e79df723588ae633abd4cce71c2386ca15c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1NTk0OA==", "url": "https://github.com/apache/flink/pull/13261#discussion_r490955948", "bodyText": "Moved as per suggestion", "author": "dannycranmer", "createdAt": "2020-09-18T13:39:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwMzU3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxNTYxNA==", "url": "https://github.com/apache/flink/pull/13261#discussion_r490915614", "bodyText": "Ha! this was a question I had when reading the text.", "author": "rmetzger", "createdAt": "2020-09-18T12:30:29Z", "path": "docs/dev/connectors/kinesis.md", "diffHunk": "@@ -129,6 +129,181 @@ shard IDs are not consecutive (as result of dynamic re-sharding in Kinesis).\n For cases where skew in the assignment leads to significant imbalanced consumption,\n a custom implementation of `KinesisShardAssigner` can be set on the consumer.\n \n+### Using Enhanced Fan Out\n+\n+[Enhanced Fan Out (EFO)](https://aws.amazon.com/blogs/aws/kds-enhanced-fanout/) increases the maximum \n+number of concurrent consumers per Kinesis stream.\n+Without EFO, all concurrent consumers share a single read quota per shard. \n+Using EFO, each consumer gets a distinct dedicated read quota per shard, allowing read throughput to scale with the number of consumers. \n+Using EFO will [incur additional cost](https://aws.amazon.com/kinesis/data-streams/pricing/).\n+ \n+In order to enable EFO two additional configuration parameters are required:\n+\n+- `RECORD_PUBLISHER_TYPE`: Determines whether to use `EFO` or `POLLING`. The default `RecordPublisher` is `POLLING`.\n+- `EFO_CONSUMER_NAME`: A name to identify the consumer. \n+For a given Kinesis data stream, each consumer must have a unique name. \n+However, consumer names do not have to be unique across data streams. \n+Reusing a consumer name will result in existing subscriptions being terminated.\n+\n+The code snippet below shows a simple example configurating an EFO consumer.\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"java\" markdown=\"1\">\n+{% highlight java %}\n+Properties consumerConfig = new Properties();\n+consumerConfig.put(AWSConfigConstants.AWS_REGION, \"us-east-1\");\n+consumerConfig.put(ConsumerConfigConstants.STREAM_INITIAL_POSITION, \"LATEST\");\n+\n+consumerConfig.put(ConsumerConfigConstants.RECORD_PUBLISHER_TYPE, \n+    ConsumerConfigConstants.RecordPublisherType.EFO.name());\n+consumerConfig.put(ConsumerConfigConstants.EFO_CONSUMER_NAME, \"my-flink-efo-consumer\");\n+\n+StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\n+DataStream<String> kinesis = env.addSource(new FlinkKinesisConsumer<>(\n+    \"kinesis_stream_name\", new SimpleStringSchema(), consumerConfig));\n+{% endhighlight %}\n+</div>\n+<div data-lang=\"scala\" markdown=\"1\">\n+{% highlight scala %}\n+val consumerConfig = new Properties()\n+consumerConfig.put(AWSConfigConstants.AWS_REGION, \"us-east-1\")\n+consumerConfig.put(ConsumerConfigConstants.STREAM_INITIAL_POSITION, \"LATEST\")\n+\n+consumerConfig.put(ConsumerConfigConstants.RECORD_PUBLISHER_TYPE, \n+    ConsumerConfigConstants.RecordPublisherType.EFO.name());\n+consumerConfig.put(ConsumerConfigConstants.EFO_CONSUMER_NAME, \"my-flink-efo-consumer\");\n+\n+val env = StreamExecutionEnvironment.getExecutionEnvironment()\n+\n+val kinesis = env.addSource(new FlinkKinesisConsumer[String](\n+    \"kinesis_stream_name\", new SimpleStringSchema, consumerConfig))\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+#### EFO Stream Consumer Registration/Deregistration\n+\n+In order to use EFO, a stream consumer must be registered against each stream you wish to consume.\n+By default, the `FlinkKinesisConsumer` will register the stream consumer automatically when the Flink job starts.\n+The stream consumer will be registered using the name provided by the `EFO_CONSUMER_NAME` configuration.\n+`FlinkKinesisConsumer` provides three registration strategies:\n+\n+- Registration\n+  - `LAZY` (default): Stream consumers are registered when the Flink job starts running.\n+    If the stream consumer already exists, it will be reused.\n+    This is the preferred strategy for the majority of applications.\n+    However, jobs with parallelism greater than 1 will result in tasks competing to register and acquire the stream consumer ARN.\n+    For jobs with very large parallelism this can result in an increased start-up time.\n+    The describe operation has a limit of 20 [transactions per second](https://docs.aws.amazon.com/kinesis/latest/APIReference/API_DescribeStreamConsumer.html),\n+    this means application startup time will increase by roughly `parallelism/20 seconds`.\n+  - `EAGER`: Stream consumers are registered in the `FlinkKinesisConstructor`.\n+    If the stream consumer already exists, it will be reused. \n+    This will result in registration occurring when the job is constructed, \n+    either on the Flink Job Manager or client environment submitting the job.\n+    Using this strategy results in a single thread registering and retrieving the stream consumer ARN, \n+    reducing startup time over `LAZY` (with large parallelism).\n+    However, consider that the client environment will require access to the AWS services.", "originalCommit": "69e9e79df723588ae633abd4cce71c2386ca15c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9ab8c7eef14031b6a6b37e469d51811ba5f2d1e6", "url": "https://github.com/apache/flink/commit/9ab8c7eef14031b6a6b37e469d51811ba5f2d1e6", "message": "[FLINK-18870][Kinesis] Reorder sections after review feedback", "committedDate": "2020-09-18T13:38:57Z", "type": "commit"}]}