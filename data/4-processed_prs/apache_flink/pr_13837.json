{"pr_number": 13837, "pr_title": "[FLINK-19874][table-planner-blink] Apply JoinDeriveNullFilterRule after join reorder", "pr_createdAt": "2020-10-29T07:24:56Z", "pr_url": "https://github.com/apache/flink/pull/13837", "timeline": [{"oid": "247a8b4a1ac69558d38fa82b8c346dbc407b79c6", "url": "https://github.com/apache/flink/commit/247a8b4a1ac69558d38fa82b8c346dbc407b79c6", "message": "[FLINK-19874][table-planner-blink] Apply JoinDeriveNullFilterRule after join reorder", "committedDate": "2020-10-29T07:23:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxMjA3NQ==", "url": "https://github.com/apache/flink/pull/13837#discussion_r514912075", "bodyText": "It's better we do not put JoinDeriveNullFilterRule  into JOIN_COND_EQUAL_TRANSFER_RULES collection, instead I suggest we can add a program into  JOIN_REWRITE stage after JOIN_COND_EQUAL_TRANSFER_RULES", "author": "godfreyhe", "createdAt": "2020-10-30T07:25:36Z", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/rules/FlinkBatchRuleSets.scala", "diffHunk": "@@ -222,7 +222,8 @@ object FlinkBatchRuleSets {\n   val JOIN_COND_EQUAL_TRANSFER_RULES: RuleSet = RuleSets.ofList((\n     RuleSets.ofList(JoinConditionEqualityTransferRule.INSTANCE).asScala ++\n       PREDICATE_SIMPLIFY_EXPRESSION_RULES.asScala ++\n-      FILTER_RULES.asScala\n+      FILTER_RULES.asScala ++\n+      RuleSets.ofList(JoinDeriveNullFilterRule.INSTANCE).asScala", "originalCommit": "247a8b4a1ac69558d38fa82b8c346dbc407b79c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxMjU3MQ==", "url": "https://github.com/apache/flink/pull/13837#discussion_r514912571", "bodyText": "if they are only used in one test method, we can move them into the specific method", "author": "godfreyhe", "createdAt": "2020-10-30T07:27:06Z", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/plan/common/JoinReorderTestBase.scala", "diffHunk": "@@ -69,6 +70,27 @@ abstract class JoinReorderTestBase extends TableTestBase {\n         \"b5\" -> new ColumnStats(200L, 0L, 8.0, 8, null, null)\n       ))).build())\n \n+    util.addTableSource(\"T6\", types, Array(\"a6\", \"b6\", \"c6\"), FlinkStatistic.builder()\n+      .tableStats(new TableStats(500000L, Map(\n+        \"a6\" -> new ColumnStats(200000L, 50000L, 4.0, 4, null, null),\n+        \"b6\" -> new ColumnStats(100000L, 0L, 8.0, 8, null, null),\n+        \"c6\" -> new ColumnStats(50000L, 20000L, 8.0, 8, null, null)\n+      ))).build())\n+\n+    util.addTableSource(\"T7\", types, Array(\"a7\", \"b7\", \"c7\"), FlinkStatistic.builder()\n+      .tableStats(new TableStats(500000L, Map(\n+        \"a7\" -> new ColumnStats(200000L, 50000L, 4.0, 4, null, null),\n+        \"b7\" -> new ColumnStats(100000L, 0L, 8.0, 8, null, null),\n+        \"c7\" -> new ColumnStats(50000L, 20000L, 8.0, 8, null, null)\n+      ))).build())\n+\n+    util.addTableSource(\"T8\", types, Array(\"a8\", \"b8\", \"c8\"), FlinkStatistic.builder()\n+      .tableStats(new TableStats(500000L, Map(\n+        \"a8\" -> new ColumnStats(200000L, 50000L, 4.0, 4, null, null),\n+        \"b8\" -> new ColumnStats(100000L, 0L, 8.0, 8, null, null),\n+        \"c8\" -> new ColumnStats(50000L, 20000L, 8.0, 8, null, null)\n+      ))).build())", "originalCommit": "247a8b4a1ac69558d38fa82b8c346dbc407b79c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxMjk3Ng==", "url": "https://github.com/apache/flink/pull/13837#discussion_r514912976", "bodyText": "please do not use deprecated constructor", "author": "godfreyhe", "createdAt": "2020-10-30T07:28:17Z", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/plan/common/JoinReorderTestBase.scala", "diffHunk": "@@ -69,6 +70,27 @@ abstract class JoinReorderTestBase extends TableTestBase {\n         \"b5\" -> new ColumnStats(200L, 0L, 8.0, 8, null, null)\n       ))).build())\n \n+    util.addTableSource(\"T6\", types, Array(\"a6\", \"b6\", \"c6\"), FlinkStatistic.builder()\n+      .tableStats(new TableStats(500000L, Map(\n+        \"a6\" -> new ColumnStats(200000L, 50000L, 4.0, 4, null, null),\n+        \"b6\" -> new ColumnStats(100000L, 0L, 8.0, 8, null, null),\n+        \"c6\" -> new ColumnStats(50000L, 20000L, 8.0, 8, null, null)", "originalCommit": "247a8b4a1ac69558d38fa82b8c346dbc407b79c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "70ef6a8a21a39d9f6811baed3e2ca080fec2cd36", "url": "https://github.com/apache/flink/commit/70ef6a8a21a39d9f6811baed3e2ca080fec2cd36", "message": "[fix] Fix comments", "committedDate": "2020-10-31T19:59:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3NTk2NQ==", "url": "https://github.com/apache/flink/pull/13837#discussion_r515775965", "bodyText": "It's better JOIN_PREDICATE_REWRITE_RULES could reuse this rule set", "author": "godfreyhe", "createdAt": "2020-11-02T07:16:22Z", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/rules/FlinkBatchRuleSets.scala", "diffHunk": "@@ -222,10 +222,13 @@ object FlinkBatchRuleSets {\n   val JOIN_COND_EQUAL_TRANSFER_RULES: RuleSet = RuleSets.ofList((\n     RuleSets.ofList(JoinConditionEqualityTransferRule.INSTANCE).asScala ++\n       PREDICATE_SIMPLIFY_EXPRESSION_RULES.asScala ++\n-      FILTER_RULES.asScala ++\n-      RuleSets.ofList(JoinDeriveNullFilterRule.INSTANCE).asScala\n+      FILTER_RULES.asScala\n     ).asJava)\n \n+  val JOIN_NULL_FILTER_RULES: RuleSet = RuleSets.ofList(", "originalCommit": "70ef6a8a21a39d9f6811baed3e2ca080fec2cd36", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5eb6c0fda626550a66b3beb699c3c6bfbbd5d743", "url": "https://github.com/apache/flink/commit/5eb6c0fda626550a66b3beb699c3c6bfbbd5d743", "message": "[fix] Fix comments", "committedDate": "2020-11-02T09:20:53Z", "type": "commit"}]}