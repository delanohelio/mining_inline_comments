{"pr_number": 12470, "pr_title": "[FLINK-18074][checkpoint] Ensure task could fail when exception thrown out on notified of checkpoint completed/aborted", "pr_createdAt": "2020-06-03T16:15:42Z", "pr_url": "https://github.com/apache/flink/pull/12470", "timeline": [{"oid": "67cbaa568c0df19f83943ed40ad98840e4584f9d", "url": "https://github.com/apache/flink/commit/67cbaa568c0df19f83943ed40ad98840e4584f9d", "message": "[FLINK-18074][checkpoint] Ensure task could fail when exception thrown out on notified of checkpoint completed/aborted", "committedDate": "2020-06-03T15:49:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNDMwMw==", "url": "https://github.com/apache/flink/pull/12470#discussion_r435404303", "bodyText": "Could you re-use this method in org.apache.flink.streaming.runtime.tasks.StreamTask#triggerCheckpointAsync?\nHowever I see there is a difference in the used mailbox executor (different priority), so if this would cause too much extra complexity I'm fine with leaving it as it is.", "author": "pnowojski", "createdAt": "2020-06-04T16:50:46Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -919,9 +920,33 @@ public final ExecutorService getAsyncOperationsThreadPool() {\n \n \t@Override\n \tpublic Future<Void> notifyCheckpointCompleteAsync(long checkpointId) {\n-\t\treturn mailboxProcessor.getMailboxExecutor(TaskMailbox.MAX_PRIORITY).submit(\n-\t\t\t\t() -> notifyCheckpointComplete(checkpointId),\n-\t\t\t\t\"checkpoint %d complete\", checkpointId);\n+\t\treturn notifyCheckpointOperation(\n+\t\t\t() -> notifyCheckpointComplete(checkpointId),\n+\t\t\tString.format(\"checkpoint %d complete\", checkpointId));\n+\t}\n+\n+\t@Override\n+\tpublic Future<Void> notifyCheckpointAbortAsync(long checkpointId) {\n+\t\treturn notifyCheckpointOperation(\n+\t\t\t() -> subtaskCheckpointCoordinator.notifyCheckpointAborted(checkpointId, operatorChain, this::isRunning),\n+\t\t\tString.format(\"checkpoint %d aborted\", checkpointId));\n+\t}\n+\n+\tprivate Future<Void> notifyCheckpointOperation(RunnableWithException runnable, String description) {", "originalCommit": "67cbaa568c0df19f83943ed40ad98840e4584f9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY5MTE2NQ==", "url": "https://github.com/apache/flink/pull/12470#discussion_r435691165", "bodyText": "triggerCheckpointAsync need to return Future<Boolean> while those operators just return Future<Void>. If we decide to change interfaces in AbstractInvokable to return both Future<Boolean>, I think this method could be re-used.", "author": "Myasuka", "createdAt": "2020-06-05T05:02:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNDMwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY5MTg0OQ==", "url": "https://github.com/apache/flink/pull/12470#discussion_r435691849", "bodyText": "Thanks for pointing it out. In that case I think there are a bit too many small differences and maybe it's better to keep it as it is.", "author": "pnowojski", "createdAt": "2020-06-05T05:05:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNDMwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNTEwMA==", "url": "https://github.com/apache/flink/pull/12470#discussion_r435405100", "bodyText": "I presume that this test was failing on master branch (without your fix)?", "author": "pnowojski", "createdAt": "2020-06-04T16:52:01Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java", "diffHunk": "@@ -969,6 +970,34 @@ public void testNotifyCheckpointOnClosedOperator() throws Throwable {\n \t\tassertEquals(true, operator.closed.get());\n \t}\n \n+\t@Test\n+\tpublic void testFailToConfirmCheckpointCompleted() throws Exception {\n+\t\ttestFailToConfirmCheckpointMessage(streamTask -> streamTask.notifyCheckpointCompleteAsync(1L));\n+\t}\n+\n+\t@Test\n+\tpublic void testFailToConfirmCheckpointAborted() throws Exception {\n+\t\ttestFailToConfirmCheckpointMessage(streamTask -> streamTask.notifyCheckpointAbortAsync(1L));\n+\t}\n+\n+\tprivate void testFailToConfirmCheckpointMessage(Consumer<StreamTask<?, ?>> consumer) throws Exception {\n+\t\tFailOnNotifyCheckpointOperator<Integer> operator = new FailOnNotifyCheckpointOperator<>();\n+\t\tMultipleInputStreamTaskTestHarnessBuilder<Integer> builder =\n+\t\t\tnew MultipleInputStreamTaskTestHarnessBuilder<>(OneInputStreamTask::new, BasicTypeInfo.INT_TYPE_INFO)\n+\t\t\t\t.addInput(BasicTypeInfo.INT_TYPE_INFO);\n+\t\tStreamTaskMailboxTestHarness<Integer> harness = builder\n+\t\t\t.setupOutputForSingletonOperatorChain(operator)\n+\t\t\t.build();\n+\n+\t\ttry {\n+\t\t\tconsumer.accept(harness.streamTask);\n+\t\t\tharness.streamTask.runMailboxStep();\n+\t\t\tfail();\n+\t\t} catch (ExpectedTestException expected) {\n+\t\t\t// expected exception", "originalCommit": "67cbaa568c0df19f83943ed40ad98840e4584f9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY5Mjc4OA==", "url": "https://github.com/apache/flink/pull/12470#discussion_r435692788", "bodyText": "Sure, I run the test locally without my fix on StreamTask and the test failed as expected.", "author": "Myasuka", "createdAt": "2020-06-05T05:09:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNTEwMA=="}], "type": "inlineReview"}]}