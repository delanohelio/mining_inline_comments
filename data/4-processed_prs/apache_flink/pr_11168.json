{"pr_number": 11168, "pr_title": "[FLINK-16140] [docs-zh] Translate Event Processing (CEP) page into Chinese", "pr_createdAt": "2020-02-21T09:01:20Z", "pr_url": "https://github.com/apache/flink/pull/11168", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5Mzc1MA==", "url": "https://github.com/apache/flink/pull/11168#discussion_r382893750", "bodyText": "Add /zh to the link.", "author": "libenchao", "createdAt": "2020-02-22T07:24:34Z", "path": "docs/dev/libs/cep.zh.md", "diffHunk": "@@ -23,23 +23,20 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n-FlinkCEP is the Complex Event Processing (CEP) library implemented on top of Flink.\n-It allows you to detect event patterns in an endless stream of events, giving you the opportunity to get hold of what's important in your\n-data.\n+FlinkCEP\u662f\u5728Flink\u4e0a\u5c42\u5b9e\u73b0\u7684\u590d\u6742\u4e8b\u4ef6\u5904\u7406\u5e93\u3002\n+\u5b83\u53ef\u4ee5\u8ba9\u4f60\u5728\u65e0\u9650\u4e8b\u4ef6\u6d41\u4e2d\u68c0\u6d4b\u51fa\u7279\u5b9a\u7684\u4e8b\u4ef6\u6a21\u578b\uff0c\u6709\u673a\u4f1a\u638c\u63e1\u6570\u636e\u4e2d\u91cd\u8981\u7684\u90a3\u90e8\u5206\u3002\n \n-This page describes the API calls available in Flink CEP. We start by presenting the [Pattern API](#the-pattern-api),\n-which allows you to specify the patterns that you want to detect in your stream, before presenting how you can\n-[detect and act upon matching event sequences](#detecting-patterns). We then present the assumptions the CEP\n-library makes when [dealing with lateness](#handling-lateness-in-event-time) in event time and how you can\n-[migrate your job](#migrating-from-an-older-flink-versionpre-13) from an older Flink version to Flink-1.3.\n+\u672c\u9875\u8bb2\u8ff0\u4e86Flink CEP\u4e2d\u53ef\u7528\u7684API\uff0c\u6211\u4eec\u9996\u5148\u8bb2\u8ff0[\u6a21\u5f0fAPI](#\u6a21\u5f0fapi)\uff0c\u5b83\u53ef\u4ee5\u8ba9\u4f60\u6307\u5b9a\u60f3\u5728\u6570\u636e\u6d41\u4e2d\u68c0\u6d4b\u7684\u6a21\u5f0f\uff0c\u7136\u540e\u8bb2\u8ff0\u5982\u4f55[\u68c0\u6d4b\u5339\u914d\u7684\u4e8b\u4ef6\u5e8f\u5217\u5e76\u8fdb\u884c\u5904\u7406](#\u68c0\u6d4b\u6a21\u5f0f)\u3002\n+\u518d\u7136\u540e\u6211\u4eec\u8bb2\u8ff0Flink\u5728\u6309\u7167\u4e8b\u4ef6\u65f6\u95f4[\u5904\u7406\u8fdf\u5230\u4e8b\u4ef6](#\u6309\u7167\u4e8b\u4ef6\u65f6\u95f4\u5904\u7406\u665a\u5230\u4e8b\u4ef6)\u65f6\u7684\u5047\u8bbe\uff0c\n+\u4ee5\u53ca\u5982\u4f55\u4ece\u65e7\u7248\u672c\u7684Flink\u54111.3\u4e4b\u540e\u7684\u7248\u672c[\u8fc1\u79fb\u4f5c\u4e1a](#\u4ece\u65e7\u7248\u672c\u8fc1\u79fb13\u4e4b\u524d)\u3002\n \n * This will be replaced by the TOC\n {:toc}\n \n-## Getting Started\n+## \u5f00\u59cb\n \n-If you want to jump right in, [set up a Flink program]({{ site.baseurl }}/dev/projectsetup/dependencies.html) and\n-add the FlinkCEP dependency to the `pom.xml` of your project.\n+\u5982\u679c\u4f60\u60f3\u73b0\u5728\u5f00\u59cb\u5c1d\u8bd5\uff0c[\u521b\u5efa\u4e00\u4e2aFlink\u7a0b\u5e8f]({{ site.baseurl }}/dev/projectsetup/dependencies.html)\uff0c", "originalCommit": "8e08bdefc8f3a02ffdba8591620b4fea59889cc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MzgzNw==", "url": "https://github.com/apache/flink/pull/11168#discussion_r382893837", "bodyText": "+n to all other links", "author": "libenchao", "createdAt": "2020-02-22T07:26:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5Mzc1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIxNjU1NA==", "url": "https://github.com/apache/flink/pull/11168#discussion_r386216554", "bodyText": "done", "author": "shuai-xu", "createdAt": "2020-03-02T06:33:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5Mzc1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5Mzc4MQ==", "url": "https://github.com/apache/flink/pull/11168#discussion_r382893781", "bodyText": "how about \"\u4e8c\u8fdb\u5236\u53d1\u884c\u7248\u201d \uff1f", "author": "libenchao", "createdAt": "2020-02-22T07:25:32Z", "path": "docs/dev/libs/cep.zh.md", "diffHunk": "@@ -63,13 +60,12 @@ add the FlinkCEP dependency to the `pom.xml` of your project.\n </div>\n </div>\n \n-{% info %} FlinkCEP is not part of the binary distribution. See how to link with it for cluster execution [here]({{site.baseurl}}/dev/projectsetup/dependencies.html).\n+{% info %} FlinkCEP\u4e0d\u662f\u4e8c\u8fdb\u5236\u5206\u53d1\u7684\u4e00\u90e8\u5206\u3002\u5728\u96c6\u7fa4\u4e0a\u6267\u884c\u5982\u4f55\u94fe\u63a5\u5b83\u53ef\u4ee5\u770b[\u8fd9\u91cc]({{site.baseurl}}/dev/projectsetup/dependencies.html)\u3002", "originalCommit": "8e08bdefc8f3a02ffdba8591620b4fea59889cc2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5Mzg4OQ==", "url": "https://github.com/apache/flink/pull/11168#discussion_r382893889", "bodyText": "Attention -> \u6ce8\u610f", "author": "libenchao", "createdAt": "2020-02-22T07:27:20Z", "path": "docs/dev/libs/cep.zh.md", "diffHunk": "@@ -63,13 +60,12 @@ add the FlinkCEP dependency to the `pom.xml` of your project.\n </div>\n </div>\n \n-{% info %} FlinkCEP is not part of the binary distribution. See how to link with it for cluster execution [here]({{site.baseurl}}/dev/projectsetup/dependencies.html).\n+{% info %} FlinkCEP\u4e0d\u662f\u4e8c\u8fdb\u5236\u5206\u53d1\u7684\u4e00\u90e8\u5206\u3002\u5728\u96c6\u7fa4\u4e0a\u6267\u884c\u5982\u4f55\u94fe\u63a5\u5b83\u53ef\u4ee5\u770b[\u8fd9\u91cc]({{site.baseurl}}/dev/projectsetup/dependencies.html)\u3002\n \n-Now you can start writing your first CEP program using the Pattern API.\n+\u73b0\u5728\u53ef\u4ee5\u5f00\u59cb\u4f7f\u7528Pattern API\u5199\u4f60\u7684\u7b2c\u4e00\u4e2aCEP\u7a0b\u5e8f\u4e86\u3002\n \n-{% warn Attention %} The events in the `DataStream` to which\n-you want to apply pattern matching must implement proper `equals()` and `hashCode()` methods\n-because FlinkCEP uses them for comparing and matching events.\n+{% warn Attention %} `DataStream`\u4e2d\u7684\u4e8b\u4ef6\uff0c\u5982\u679c\u4f60\u60f3\u5728\u4e0a\u9762\u8fdb\u884c\u6a21\u5f0f\u5339\u914d\u7684\u8bdd\uff0c\u5fc5\u987b\u5b9e\u73b0\u5408\u9002\u7684 `equals()`\u548c`hashCode()`\u65b9\u6cd5\uff0c", "originalCommit": "8e08bdefc8f3a02ffdba8591620b4fea59889cc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIxNjU5MQ==", "url": "https://github.com/apache/flink/pull/11168#discussion_r386216591", "bodyText": "done", "author": "shuai-xu", "createdAt": "2020-03-02T06:33:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5Mzg4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5NDExMQ==", "url": "https://github.com/apache/flink/pull/11168#discussion_r382894111", "bodyText": "\u662f\u5426\u88ab\u63a5\u53d7\u8fdb\u5165\u6a21\u8fd9\u4e2a\u5f0f -> \u662f\u5426\u88ab\u63a5\u53d7\u8fdb\u5165\u8fd9\u4e2a\u6a21\u5f0f", "author": "libenchao", "createdAt": "2020-02-22T07:31:48Z", "path": "docs/dev/libs/cep.zh.md", "diffHunk": "@@ -136,140 +132,143 @@ val result: DataStream[Alert] = patternStream.process(\n </div>\n </div>\n \n-## The Pattern API\n+## \u6a21\u5f0fAPI\n \n-The pattern API allows you to define complex pattern sequences that you want to extract from your input stream.\n+\u6a21\u5f0fAPI\u53ef\u4ee5\u8ba9\u4f60\u5b9a\u4e49\u60f3\u4ece\u8f93\u5165\u6d41\u4e2d\u62bd\u53d6\u7684\u590d\u6742\u6a21\u5f0f\u5e8f\u5217\u3002\n \n-Each complex pattern sequence consists of multiple simple patterns, i.e. patterns looking for individual events with the same properties. From now on, we will call these simple patterns **patterns**, and the final complex pattern sequence we are searching for in the stream, the **pattern sequence**. You can see a pattern sequence as a graph of such patterns, where transitions from one pattern to the next occur based on user-specified\n-*conditions*, e.g. `event.getName().equals(\"end\")`. A **match** is a sequence of input events which visits all\n-patterns of the complex pattern graph, through a sequence of valid pattern transitions.\n+\u6bcf\u4e2a\u590d\u6742\u7684\u6a21\u5f0f\u5e8f\u5217\u5305\u62ec\u591a\u4e2a\u7b80\u5355\u7684\u6a21\u5f0f\uff0c\u6bd4\u5982\uff0c\u5bfb\u627e\u62e5\u6709\u76f8\u540c\u5c5e\u6027\u4e8b\u4ef6\u5e8f\u5217\u7684\u6a21\u5f0f\u3002\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u6211\u4eec\u628a\u8fd9\u4e9b\u7b80\u5355\u7684\u6a21\u5f0f\u79f0\u4f5c**\u6a21\u5f0f**\uff0c\n+\u628a\u6211\u4eec\u5728\u6570\u636e\u6d41\u4e2d\u6700\u7ec8\u5bfb\u627e\u7684\u590d\u6742\u6a21\u5f0f\u5e8f\u5217\u79f0\u4f5c**\u6a21\u5f0f\u5e8f\u5217**\uff0c\u4f60\u53ef\u4ee5\u628a\u6a21\u5f0f\u5e8f\u5217\u770b\u4f5c\u662f\u8fd9\u6837\u7684\u6a21\u5f0f\u6784\u6210\u7684\u56fe\uff0c\n+\u8fd9\u4e9b\u6a21\u5f0f\u57fa\u4e8e\u7528\u6237\u6307\u5b9a\u7684**\u6761\u4ef6**\u4ece\u4e00\u4e2a\u8f6c\u6362\u5230\u53e6\u5916\u4e00\u4e2a\uff0c\u6bd4\u5982 `event.getName().equals(\"end\")`\u3002\n+\u4e00\u4e2a**\u5339\u914d**\u662f\u8f93\u5165\u4e8b\u4ef6\u7684\u4e00\u4e2a\u5e8f\u5217\uff0c\u8fd9\u4e9b\u4e8b\u4ef6\u901a\u8fc7\u4e00\u7cfb\u5217\u6709\u6548\u7684\u6a21\u5f0f\u8f6c\u6362\uff0c\u80fd\u591f\u8bbf\u95ee\u5230\u590d\u6742\u6a21\u5f0f\u56fe\u4e2d\u7684\u6240\u6709\u6a21\u5f0f\u3002\n \n-{% warn Attention %} Each pattern must have a unique name, which you use later to identify the matched events.\n+{% warn Attention %} \u6bcf\u4e2a\u6a21\u5f0f\u5fc5\u987b\u6709\u4e00\u4e2a\u72ec\u4e00\u65e0\u4e8c\u7684\u540d\u5b57\uff0c\u4f60\u53ef\u4ee5\u5728\u540e\u9762\u4f7f\u7528\u5b83\u6765\u8bc6\u522b\u5339\u914d\u5230\u7684\u4e8b\u4ef6\u3002\n \n-{% warn Attention %} Pattern names **CANNOT** contain the character `\":\"`.\n+{% warn Attention %} \u6a21\u5f0f\u7684\u540d\u5b57\u4e0d\u80fd\u5305\u542b\u5b57\u7b26`\":\"`.\n \n-In the rest of this section we will first describe how to define [Individual Patterns](#individual-patterns), and then how you can combine individual patterns into [Complex Patterns](#combining-patterns).\n+\u8fd9\u4e00\u8282\u7684\u5269\u4f59\u90e8\u5206\u6211\u4eec\u4f1a\u5148\u8bb2\u8ff0\u5982\u4f55\u5b9a\u4e49[\u5355\u4e2a\u6a21\u5f0f](#\u5355\u4e2a\u6a21\u5f0f)\uff0c\u7136\u540e\u8bb2\u5982\u4f55\u5c06\u5355\u4e2a\u6a21\u5f0f\u7ec4\u5408\u6210[\u590d\u6742\u6a21\u5f0f](#\u7ec4\u5408\u6a21\u5f0f)\u3002\n \n-### Individual Patterns\n+### \u5355\u4e2a\u6a21\u5f0f\n \n-A **Pattern** can be either a *singleton* or a *looping* pattern. Singleton patterns accept a single\n-event, while looping patterns can accept more than one. In pattern matching symbols, the pattern `\"a b+ c? d\"` (or `\"a\"`, followed by *one or more* `\"b\"`'s, optionally followed by a `\"c\"`, followed by a `\"d\"`), `a`, `c?`, and `d` are\n-singleton patterns, while `b+` is a looping one. By default, a pattern is a singleton pattern and you can transform\n-it to a looping one by using [Quantifiers](#quantifiers). Each pattern can have one or more\n-[Conditions](#conditions) based on which it accepts events.\n+\u4e00\u4e2a**\u6a21\u5f0f**\u53ef\u4ee5\u662f\u4e00\u4e2a**\u5355\u4f8b**\u6216\u8005**\u5faa\u73af**\u6a21\u5f0f\u3002\u5355\u4f8b\u6a21\u5f0f\u53ea\u63a5\u53d7\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u5faa\u73af\u6a21\u5f0f\u53ef\u4ee5\u63a5\u53d7\u591a\u4e2a\u4e8b\u4ef6\u3002\n+\u5728\u6a21\u5f0f\u5339\u914d\u8868\u8fbe\u5f0f\u4e2d\uff0c\u6a21\u5f0f`\"a b+ c? d\"`\uff08\u6216\u8005`\"a\"`\uff0c\u540e\u9762\u8ddf\u7740\u4e00\u4e2a\u6216\u8005\u591a\u4e2a`\"b\"`\uff0c\u518d\u5f80\u540e\u53ef\u9009\u62e9\u7684\u8ddf\u7740\u4e00\u4e2a`\"c\"`\uff0c\u6700\u540e\u8ddf\u7740\u4e00\u4e2a`\"d\"`\uff09\uff0c\n+`a`\uff0c`c?`\uff0c\u548c `d`\u90fd\u662f\u5355\u4f8b\u6a21\u5f0f\uff0c`b+`\u662f\u4e00\u4e2a\u5faa\u73af\u6a21\u5f0f\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6a21\u5f0f\u90fd\u662f\u5355\u4f8b\u7684\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528[\u91cf\u8bcd](#\u91cf\u8bcd)\u628a\u5b83\u4eec\u8f6c\u6362\u6210\u5faa\u73af\u6a21\u5f0f\u3002\n+\u6bcf\u4e2a\u6a21\u5f0f\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u8005\u591a\u4e2a[\u6761\u4ef6](#\u6761\u4ef6)\u6765\u51b3\u5b9a\u5b83\u63a5\u53d7\u54ea\u4e9b\u4e8b\u4ef6\u3002\n \n-#### Quantifiers\n+#### \u91cf\u8bcd\n \n-In FlinkCEP, you can specify looping patterns using these methods: `pattern.oneOrMore()`, for patterns that expect one or more occurrences of a given event (e.g. the `b+` mentioned before); and `pattern.times(#ofTimes)`, for patterns that\n-expect a specific number of occurrences of a given type of event, e.g. 4 `a`'s; and `pattern.times(#fromTimes, #toTimes)`, for patterns that expect a specific minimum number of occurrences and a maximum number of occurrences of a given type of event, e.g. 2-4 `a`s.\n+\u5728FlinkCEP\u4e2d\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u65b9\u6cd5\u6307\u5b9a\u5faa\u73af\u6a21\u5f0f\uff1a`pattern.oneOrMore()`\uff0c\u6307\u5b9a\u671f\u671b\u4e00\u4e2a\u7ed9\u5b9a\u4e8b\u4ef6\u51fa\u73b0\u4e00\u6b21\u6216\u8005\u591a\u6b21\u7684\u6a21\u5f0f\uff08\u4f8b\u5982\u524d\u9762\u63d0\u5230\u7684`b+`\u6a21\u5f0f\uff09\uff1b\n+`pattern.times(#ofTimes)`\uff0c\u6307\u5b9a\u671f\u671b\u4e00\u4e2a\u7ed9\u5b9a\u4e8b\u4ef6\u51fa\u73b0\u7279\u5b9a\u6b21\u6570\u7684\u6a21\u5f0f\uff0c\u4f8b\u5982\u51fa\u73b04\u6b21`a`\uff1b\n+`pattern.times(#fromTimes, #toTimes)`\uff0c\u6307\u5b9a\u671f\u671b\u4e00\u4e2a\u7ed9\u5b9a\u4e8b\u4ef6\u51fa\u73b0\u6b21\u6570\u5728\u4e00\u4e2a\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u4e2d\u95f4\u7684\u6a21\u5f0f\uff0c\u6bd4\u5982\u51fa\u73b02-4\u6b21`a`\u3002\n \n-You can make looping patterns greedy using the `pattern.greedy()` method, but you cannot yet make group patterns greedy. You can make all patterns, looping or not, optional using the `pattern.optional()` method.\n+\u4f60\u53ef\u4ee5\u4f7f\u7528`pattern.greedy()`\u65b9\u6cd5\u8ba9\u5faa\u73af\u6a21\u5f0f\u53d8\u6210\u8d2a\u5fc3\u7684\uff0c\u4f46\u73b0\u5728\u8fd8\u4e0d\u80fd\u8ba9\u6a21\u5f0f\u7ec4\u8d2a\u5fc3\u3002\n+\u4f60\u53ef\u4ee5\u4f7f\u7528`pattern.optional()`\u65b9\u6cd5\u8ba9\u6240\u6709\u7684\u6a21\u5f0f\u53d8\u6210\u53ef\u9009\u7684\uff0c\u4e0d\u7ba1\u662f\u5426\u662f\u5faa\u73af\u6a21\u5f0f\u3002\n \n-For a pattern named `start`, the following are valid quantifiers:\n+\u5bf9\u4e00\u4e2a\u547d\u540d\u4e3a`start`\u7684\u6a21\u5f0f\uff0c\u4ee5\u4e0b\u91cf\u8bcd\u662f\u6709\u6548\u7684\uff1a\n \n  <div class=\"codetabs\" markdown=\"1\">\n  <div data-lang=\"java\" markdown=\"1\">\n  {% highlight java %}\n- // expecting 4 occurrences\n+ // \u671f\u671b\u51fa\u73b04\u6b21\n  start.times(4);\n \n- // expecting 0 or 4 occurrences\n+ // \u671f\u671b\u51fa\u73b00\u6216\u80054\u6b21\n  start.times(4).optional();\n \n- // expecting 2, 3 or 4 occurrences\n+ // \u671f\u671b\u51fa\u73b02\u30013\u6216\u80054\u6b21\n  start.times(2, 4);\n \n- // expecting 2, 3 or 4 occurrences and repeating as many as possible\n+ // \u671f\u671b\u51fa\u73b02\u30013\u6216\u80054\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n  start.times(2, 4).greedy();\n \n- // expecting 0, 2, 3 or 4 occurrences\n+ // \u671f\u671b\u51fa\u73b00\u30012\u30013\u6216\u80054\u6b21\n  start.times(2, 4).optional();\n \n- // expecting 0, 2, 3 or 4 occurrences and repeating as many as possible\n+ // \u671f\u671b\u51fa\u73b00\u30012\u30013\u6216\u80054\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n  start.times(2, 4).optional().greedy();\n \n- // expecting 1 or more occurrences\n+ // \u671f\u671b\u51fa\u73b01\u5230\u591a\u6b21\n  start.oneOrMore();\n \n- // expecting 1 or more occurrences and repeating as many as possible\n+ // \u671f\u671b\u51fa\u73b01\u5230\u591a\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n  start.oneOrMore().greedy();\n \n- // expecting 0 or more occurrences\n+ // \u671f\u671b\u51fa\u73b00\u5230\u591a\u6b21\n  start.oneOrMore().optional();\n \n- // expecting 0 or more occurrences and repeating as many as possible\n+ // \u671f\u671b\u51fa\u73b00\u5230\u591a\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n  start.oneOrMore().optional().greedy();\n \n- // expecting 2 or more occurrences\n+ // \u671f\u671b\u51fa\u73b02\u5230\u591a\u6b21\n  start.timesOrMore(2);\n \n- // expecting 2 or more occurrences and repeating as many as possible\n+ // \u671f\u671b\u51fa\u73b02\u5230\u591a\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n  start.timesOrMore(2).greedy();\n \n- // expecting 0, 2 or more occurrences and repeating as many as possible\n+ // \u671f\u671b\u51fa\u73b00\u30012\u6216\u591a\u6b21\n+ start.timesOrMore(2).optional();\n+\n+ // \u671f\u671b\u51fa\u73b00\u30012\u6216\u591a\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n  start.timesOrMore(2).optional().greedy();\n  {% endhighlight %}\n  </div>\n \n  <div data-lang=\"scala\" markdown=\"1\">\n  {% highlight scala %}\n- // expecting 4 occurrences\n+ // \u671f\u671b\u51fa\u73b04\u6b21\n  start.times(4)\n \n- // expecting 0 or 4 occurrences\n+ // \u671f\u671b\u51fa\u73b00\u6216\u80054\u6b21\n  start.times(4).optional()\n \n- // expecting 2, 3 or 4 occurrences\n+ // \u671f\u671b\u51fa\u73b02\u30013\u6216\u80054\u6b21\n  start.times(2, 4)\n \n- // expecting 2, 3 or 4 occurrences and repeating as many as possible\n+ // \u671f\u671b\u51fa\u73b02\u30013\u6216\u80054\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n  start.times(2, 4).greedy()\n \n- // expecting 0, 2, 3 or 4 occurrences\n+ // \u671f\u671b\u51fa\u73b00\u30012\u30013\u6216\u80054\u6b21\n  start.times(2, 4).optional()\n \n- // expecting 0, 2, 3 or 4 occurrences and repeating as many as possible\n+ // \u671f\u671b\u51fa\u73b00\u30012\u30013\u6216\u80054\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n  start.times(2, 4).optional().greedy()\n \n- // expecting 1 or more occurrences\n+ // \u671f\u671b\u51fa\u73b01\u5230\u591a\u6b21\n  start.oneOrMore()\n \n- // expecting 1 or more occurrences and repeating as many as possible\n+ // \u671f\u671b\u51fa\u73b01\u5230\u591a\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n  start.oneOrMore().greedy()\n \n- // expecting 0 or more occurrences\n+ // \u671f\u671b\u51fa\u73b00\u5230\u591a\u6b21\n  start.oneOrMore().optional()\n \n- // expecting 0 or more occurrences and repeating as many as possible\n+ // \u671f\u671b\u51fa\u73b00\u5230\u591a\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n  start.oneOrMore().optional().greedy()\n \n- // expecting 2 or more occurrences\n+ // \u671f\u671b\u51fa\u73b02\u5230\u591a\u6b21\n  start.timesOrMore(2)\n \n- // expecting 2 or more occurrences and repeating as many as possible\n+ // \u671f\u671b\u51fa\u73b02\u5230\u591a\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n  start.timesOrMore(2).greedy()\n \n- // expecting 0, 2 or more occurrences\n+ // \u671f\u671b\u51fa\u73b00\u30012\u6216\u591a\u6b21\n  start.timesOrMore(2).optional()\n \n- // expecting 0, 2 or more occurrences and repeating as many as possible\n+ // \u671f\u671b\u51fa\u73b00\u30012\u6216\u591a\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n  start.timesOrMore(2).optional().greedy()\n  {% endhighlight %}\n  </div>\n  </div>\n \n-#### Conditions\n+#### \u6761\u4ef6\n \n-For every pattern you can specify a condition that an incoming event has to meet in order to be \"accepted\" into the pattern e.g. its value should be larger than 5,\n-or larger than the average value of the previously accepted events.\n-You can specify conditions on the event properties via the `pattern.where()`, `pattern.or()` or `pattern.until()` methods.\n-These can be either `IterativeCondition`s or `SimpleCondition`s.\n+\u5bf9\u6bcf\u4e2a\u6a21\u5f0f\u4f60\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u6761\u4ef6\u6765\u51b3\u5b9a\u4e00\u4e2a\u8fdb\u6765\u7684\u4e8b\u4ef6\u662f\u5426\u88ab\u63a5\u53d7\u8fdb\u5165\u6a21\u8fd9\u4e2a\u5f0f\uff0c\u4f8b\u5982\uff0c\u5b83\u7684value\u5b57\u6bb5\u5e94\u8be5\u5927\u4e8e5\uff0c\u6216\u8005\u5927\u4e8e\u524d\u9762\u63a5\u53d7\u7684\u4e8b\u4ef6\u7684\u5e73\u5747\u503c\u3002", "originalCommit": "8e08bdefc8f3a02ffdba8591620b4fea59889cc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIxNjQ4NA==", "url": "https://github.com/apache/flink/pull/11168#discussion_r386216484", "bodyText": "done", "author": "shuai-xu", "createdAt": "2020-03-02T06:33:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5NDExMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5NDMyMA==", "url": "https://github.com/apache/flink/pull/11168#discussion_r382894320", "bodyText": "\u6539\u53d6 -> \u8be5\u53bb", "author": "libenchao", "createdAt": "2020-02-22T07:36:23Z", "path": "docs/dev/libs/cep.zh.md", "diffHunk": "@@ -665,12 +647,11 @@ pattern.oneOrMore().greedy()\n </div>\n </div>\n \n-### Combining Patterns\n+### \u7ec4\u5408\u6a21\u5f0f\n \n-Now that you've seen what an individual pattern can look like, it is time to see how to combine them\n-into a full pattern sequence.\n+\u73b0\u5728\u4f60\u5df2\u7ecf\u770b\u5230\u5355\u4e2a\u7684\u6a21\u5f0f\u662f\u4ec0\u4e48\u6837\u7684\u4e86\uff0c\u6539\u53d6\u770b\u770b\u5982\u4f55\u628a\u5b83\u4eec\u8fde\u63a5\u8d77\u6765\u7ec4\u6210\u4e00\u4e2a\u5b8c\u6574\u7684\u6a21\u5f0f\u5e8f\u5217\u3002", "originalCommit": "8e08bdefc8f3a02ffdba8591620b4fea59889cc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIxNjUwMQ==", "url": "https://github.com/apache/flink/pull/11168#discussion_r386216501", "bodyText": "done", "author": "shuai-xu", "createdAt": "2020-03-02T06:33:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5NDMyMA=="}], "type": "inlineReview"}, {"oid": "7546b4bef354ec3acb52245f867c3338107d0995", "url": "https://github.com/apache/flink/commit/7546b4bef354ec3acb52245f867c3338107d0995", "message": "[FLINK-16140] [docs-zh] Translate Event Processing (CEP) page into chinese", "committedDate": "2020-03-02T04:13:31Z", "type": "commit"}, {"oid": "7546b4bef354ec3acb52245f867c3338107d0995", "url": "https://github.com/apache/flink/commit/7546b4bef354ec3acb52245f867c3338107d0995", "message": "[FLINK-16140] [docs-zh] Translate Event Processing (CEP) page into chinese", "committedDate": "2020-03-02T04:13:31Z", "type": "forcePushed"}, {"oid": "76146c2111a47b68765168064b4d1dd90448789c", "url": "https://github.com/apache/flink/commit/76146c2111a47b68765168064b4d1dd90448789c", "message": "some modifies", "committedDate": "2020-03-02T06:21:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5NTIxNw==", "url": "https://github.com/apache/flink/pull/11168#discussion_r386995217", "bodyText": "\u662f\u662f -> \u662f", "author": "dianfu", "createdAt": "2020-03-03T12:45:22Z", "path": "docs/dev/libs/cep.zh.md", "diffHunk": "@@ -335,88 +332,87 @@ start.where(event => event.getName.startsWith(\"foo\"))\n </div>\n </div>\n \n-Finally, you can also restrict the type of the accepted event to a subtype of the initial event type (here `Event`)\n-via the `pattern.subtype(subClass)` method.\n+\u6700\u540e\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7`pattern.subtype(subClass)`\u65b9\u6cd5\u9650\u5236\u63a5\u53d7\u7684\u4e8b\u4ef6\u7c7b\u578b\u662f\u521d\u59cb\u4e8b\u4ef6\u7684\u5b50\u7c7b\u578b\u3002\n \n <div class=\"codetabs\" markdown=\"1\">\n <div data-lang=\"java\" markdown=\"1\">\n {% highlight java %}\n start.subtype(SubEvent.class).where(new SimpleCondition<SubEvent>() {\n     @Override\n     public boolean filter(SubEvent value) {\n-        return ... // some condition\n+        return ... // \u4e00\u4e9b\u5224\u65ad\u6761\u4ef6\n     }\n });\n {% endhighlight %}\n </div>\n \n <div data-lang=\"scala\" markdown=\"1\">\n {% highlight scala %}\n-start.subtype(classOf[SubEvent]).where(subEvent => ... /* some condition */)\n+start.subtype(classOf[SubEvent]).where(subEvent => ... /* \u4e00\u4e9b\u5224\u65ad\u6761\u4ef6 */)\n {% endhighlight %}\n </div>\n </div>\n \n-**Combining Conditions:** As shown above, you can combine the `subtype` condition with additional conditions. This holds for every condition. You can arbitrarily combine conditions by sequentially calling `where()`. The final result will be the logical **AND** of the results of the individual conditions. To combine conditions using **OR**, you can use the `or()` method, as shown below.\n+**\u7ec4\u5408\u6761\u4ef6\uff1a** \u5982\u4e0a\u6240\u793a\uff0c\u4f60\u53ef\u4ee5\u628a`subtype`\u6761\u4ef6\u548c\u5176\u4ed6\u7684\u6761\u4ef6\u7ed3\u5408\u8d77\u6765\u4f7f\u7528\u3002\u8fd9\u9002\u7528\u4e8e\u4efb\u4f55\u6761\u4ef6\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f9d\u6b21\u8c03\u7528`where()`\u6765\u7ec4\u5408\u6761\u4ef6\u3002\n+\u6700\u7ec8\u7684\u7ed3\u679c\u662f\u662f\u6bcf\u4e2a\u5355\u4e00\u6761\u4ef6\u7684\u7ed3\u679c\u7684\u903b\u8f91**AND**\u3002\u5982\u679c\u60f3\u4f7f\u7528**OR**\u6765\u7ec4\u5408\u6761\u4ef6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u50cf\u4e0b\u9762\u8fd9\u6837\u4f7f\u7528`or()`\u65b9\u6cd5\u3002", "originalCommit": "76146c2111a47b68765168064b4d1dd90448789c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzODY5MA==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387438690", "bodyText": "done", "author": "shuai-xu", "createdAt": "2020-03-04T04:05:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5NTIxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwMjQ4Ng==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387002486", "bodyText": "\u662f -> \u65f6", "author": "dianfu", "createdAt": "2020-03-03T12:59:53Z", "path": "docs/dev/libs/cep.zh.md", "diffHunk": "@@ -1651,44 +1607,42 @@ val lateData: DataStream[String] = result.getSideOutput(lateDataOutputTag)\n </div>\n </div>\n \n-### Time context\n+### \u65f6\u95f4\u4e0a\u4e0b\u6587\n \n-In [PatternProcessFunction](#selecting-from-patterns) as well as in [IterativeCondition](#conditions) user has access to a context\n-that implements `TimeContext` as follows:\n+\u5728[PatternProcessFunction](#\u4ece\u6a21\u5f0f\u4e2d\u9009\u53d6)\u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u548c[IterativeCondition](#\u6761\u4ef6)\u4e2d\n+\u4e00\u6837\u6309\u7167\u4e0b\u9762\u7684\u65b9\u6cd5\u4f7f\u7528\u5b9e\u73b0\u4e86`TimeContext`\u7684\u4e0a\u4e0b\u6587\uff1a\n \n {% highlight java %}\n /**\n- * Enables access to time related characteristics such as current processing time or timestamp of\n- * currently processed element. Used in {@link PatternProcessFunction} and\n- * {@link org.apache.flink.cep.pattern.conditions.IterativeCondition}\n+ * \u652f\u6301\u83b7\u53d6\u4e8b\u4ef6\u5c5e\u6027\u6bd4\u5982\u5f53\u524d\u5904\u7406\u4e8b\u4ef6\u6216\u5f53\u524d\u6b63\u5904\u7406\u7684\u4e8b\u4ef6\u7684\u65f6\u95f4\u3002\n+ * \u7528\u5728{@link PatternProcessFunction}\u548c{@link org.apache.flink.cep.pattern.conditions.IterativeCondition}\u4e2d\n  */\n @PublicEvolving\n public interface TimeContext {\n \n \t/**\n-\t * Timestamp of the element currently being processed.\n+\t * \u5f53\u524d\u6b63\u5904\u7406\u7684\u4e8b\u4ef6\u7684\u65f6\u95f4\u6233\u3002\n \t *\n-\t * <p>In case of {@link org.apache.flink.streaming.api.TimeCharacteristic#ProcessingTime} this\n-\t * will be set to the time when event entered the cep operator.\n+\t * <p>\u5982\u679c\u662f{@link org.apache.flink.streaming.api.TimeCharacteristic#ProcessingTime}\uff0c\u8fd9\u4e2a\u503c\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u4e8b\u4ef6\u8fdb\u5165CEP\u7b97\u5b50\u7684\u65f6\u95f4\u3002\n \t */\n \tlong timestamp();\n \n-\t/** Returns the current processing time. */\n+\t/** \u8fd4\u56de\u5f53\u524d\u7684\u5904\u7406\u65f6\u95f4\u3002 */\n \tlong currentProcessingTime();\n }\n {% endhighlight %}\n \n-This context gives user access to time characteristics of processed events (incoming records in case of `IterativeCondition` and matches in case of `PatternProcessFunction`).\n-Call to `TimeContext#currentProcessingTime` always gives you the value of current processing time and this call should be preferred to e.g. calling `System.currentTimeMillis()`.\n+\u8fd9\u4e2a\u4e0a\u4e0b\u6587\u8ba9\u7528\u6237\u53ef\u4ee5\u83b7\u53d6\u5904\u7406\u7684\u4e8b\u4ef6\uff08\u5728`IterativeCondition`\u65f6\u5019\u662f\u8fdb\u6765\u7684\u8bb0\u5f55\uff0c\u5728`PatternProcessFunction`\u662f\u5339\u914d\u7684\u7ed3\u679c\uff09\u7684\u65f6\u95f4\u5c5e\u6027\u3002\n+\u8c03\u7528`TimeContext#currentProcessingTime`\u603b\u662f\u8fd4\u56de\u5f53\u524d\u7684\u5904\u7406\u65f6\u95f4\uff0c\u800c\u4e14\u5c3d\u91cf\u53bb\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u800c\u4e0d\u662f\u8c03\u7528\u5176\u5b83\u7684\u6bd4\u5982\u8bf4`System.currentTimeMillis()`\u3002\n \n-In case of `TimeContext#timestamp()` the returned value is equal to assigned timestamp in case of `EventTime`. In `ProcessingTime` this will equal to the point of time when said event entered\n-cep operator (or when the match was generated in case of `PatternProcessFunction`). This means that the value will be consistent across multiple calls to that method.\n+\u4f7f\u7528`EventTime`\u65f6\uff0c`TimeContext#timestamp()`\u8fd4\u56de\u7684\u503c\u7b49\u4e8e\u5206\u914d\u7684\u65f6\u95f4\u6233\u3002\n+\u4f7f\u7528`ProcessingTime`\u662f\uff0c\u8fd9\u4e2a\u503c\u7b49\u4e8e\u4e8b\u4ef6\u8fdb\u5165CEP\u7b97\u5b50\u7684\u65f6\u95f4\u70b9\uff08\u5728`PatternProcessFunction`\u4e2d\u662f\u5339\u914d\u4ea7\u751f\u7684\u65f6\u95f4\uff09\u3002", "originalCommit": "76146c2111a47b68765168064b4d1dd90448789c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzODY4MA==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387438680", "bodyText": "done", "author": "shuai-xu", "createdAt": "2020-03-04T04:04:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwMjQ4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwMzg4OA==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387003888", "bodyText": "\u610f\u5473\u8fd9 -> \u610f\u5473\u7740", "author": "dianfu", "createdAt": "2020-03-03T13:02:34Z", "path": "docs/dev/libs/cep.zh.md", "diffHunk": "@@ -1598,17 +1554,17 @@ val timeoutResult: DataStream[TimeoutEvent] = result.getSideOutput(outputTag)\n </div>\n </div>\n \n-## Time in CEP library\n+## CEP\u5e93\u4e2d\u7684\u65f6\u95f4\n \n-### Handling Lateness in Event Time\n+### \u6309\u7167\u4e8b\u4ef6\u65f6\u95f4\u5904\u7406\u665a\u5230\u4e8b\u4ef6\n \n-In `CEP` the order in which elements are processed matters. To guarantee that elements are processed in the correct order when working in event time, an incoming element is initially put in a buffer where elements are *sorted in ascending order based on their timestamp*, and when a watermark arrives, all the elements in this buffer with timestamps smaller than that of the watermark are processed. This implies that elements between watermarks are processed in event-time order.\n+\u5728`CEP`\u4e2d\uff0c\u4e8b\u4ef6\u7684\u5904\u7406\u987a\u5e8f\u5f88\u91cd\u8981\u3002\u5728\u4f7f\u7528\u4e8b\u4ef6\u65f6\u95f4\u65f6\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u4e8b\u4ef6\u6309\u7167\u6b63\u786e\u7684\u987a\u5e8f\u88ab\u5904\u7406\uff0c\u4e00\u4e2a\u4e8b\u4ef6\u5230\u6765\u540e\u4f1a\u5148\u88ab\u653e\u5230\u4e00\u4e2a\u7f13\u51b2\u533a\u4e2d\uff0c\n+\u5728\u7f13\u51b2\u533a\u91cc\u4e8b\u4ef6\u90fd\u6309\u7167\u65f6\u95f4\u6233\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5f53\u6c34\u4f4d\u7ebf\u5230\u8fbe\u540e\uff0c\u7f13\u51b2\u533a\u4e2d\u6240\u6709\u5c0f\u4e8e\u6c34\u4f4d\u7ebf\u7684\u4e8b\u4ef6\u88ab\u5904\u7406\u3002\u8fd9\u610f\u5473\u8fd9\u6c34\u4f4d\u7ebf\u4e4b\u95f4\u7684\u6570\u636e\u90fd\u6309\u7167\u4e8b\u4ef6\u6233\u88ab\u987a\u5e8f\u5904\u7406\u3002", "originalCommit": "76146c2111a47b68765168064b4d1dd90448789c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzODY3MA==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387438670", "bodyText": "done", "author": "shuai-xu", "createdAt": "2020-03-04T04:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwMzg4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwNDM3NQ==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387004375", "bodyText": "\u4ecd\u7136 -> \u7528\u6237\u4ecd\u7136\uff1f", "author": "dianfu", "createdAt": "2020-03-03T13:03:33Z", "path": "docs/dev/libs/cep.zh.md", "diffHunk": "@@ -1537,14 +1493,14 @@ class MyPatternProcessFunction<IN, OUT> extends PatternProcessFunction<IN, OUT>\n }\n {% endhighlight %}\n \n-<span class=\"label label-info\">Note</span> The `processTimedOutMatch` does not give one access to the main output. You can still emit results\n-through [side-outputs]({{ site.baseurl }}/dev/stream/side_output.html) though, through the `Context` object.\n+<span class=\"label label-info\">Note</span> `processTimedOutMatch`\u4e0d\u80fd\u8bbf\u95ee\u4e3b\u8f93\u51fa\u3002\n+\u4f46\u4f60\u53ef\u4ee5\u901a\u8fc7`Context`\u5bf9\u8c61\u628a\u7ed3\u679c\u8f93\u51fa\u5230[\u4fa7\u8f93\u51fa]({{ site.baseurl }}/zh/dev/stream/side_output.html)\u3002\n \n \n-#### Convenience API\n+#### \u4fbf\u6377\u7684API\n \n-The aforementioned `PatternProcessFunction` was introduced in Flink 1.8 and since then it is the recommended way to interact with matches.\n-One can still use the old style API like `select`/`flatSelect`, which internally will be translated into a `PatternProcessFunction`.\n+\u524d\u9762\u63d0\u5230\u7684`PatternProcessFunction`\u662f\u5728Flink 1.8\u4e4b\u540e\u5f15\u5165\u7684\uff0c\u4ece\u90a3\u4e4b\u540e\u63a8\u8350\u4f7f\u7528\u8fd9\u4e2a\u63a5\u53e3\u6765\u5904\u7406\u5339\u914d\u5230\u7684\u7ed3\u679c\u3002\n+\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u50cf`select`/`flatSelect`\u8fd9\u6837\u65e7\u683c\u5f0f\u7684API\uff0c\u5b83\u4eec\u4f1a\u5728\u5185\u90e8\u88ab\u8f6c\u6362\u4e3a`PatternProcessFunction`\u3002", "originalCommit": "76146c2111a47b68765168064b4d1dd90448789c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzODcxNQ==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387438715", "bodyText": "done", "author": "shuai-xu", "createdAt": "2020-03-04T04:05:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwNDM3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxMTIyMw==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387011223", "bodyText": "\u665a\u5230 -> \u8fdf\u5230\uff1f", "author": "dianfu", "createdAt": "2020-03-03T13:17:17Z", "path": "docs/dev/libs/cep.zh.md", "diffHunk": "@@ -23,23 +23,20 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n-FlinkCEP is the Complex Event Processing (CEP) library implemented on top of Flink.\n-It allows you to detect event patterns in an endless stream of events, giving you the opportunity to get hold of what's important in your\n-data.\n+FlinkCEP\u662f\u5728Flink\u4e0a\u5c42\u5b9e\u73b0\u7684\u590d\u6742\u4e8b\u4ef6\u5904\u7406\u5e93\u3002\n+\u5b83\u53ef\u4ee5\u8ba9\u4f60\u5728\u65e0\u9650\u4e8b\u4ef6\u6d41\u4e2d\u68c0\u6d4b\u51fa\u7279\u5b9a\u7684\u4e8b\u4ef6\u6a21\u578b\uff0c\u6709\u673a\u4f1a\u638c\u63e1\u6570\u636e\u4e2d\u91cd\u8981\u7684\u90a3\u90e8\u5206\u3002\n \n-This page describes the API calls available in Flink CEP. We start by presenting the [Pattern API](#the-pattern-api),\n-which allows you to specify the patterns that you want to detect in your stream, before presenting how you can\n-[detect and act upon matching event sequences](#detecting-patterns). We then present the assumptions the CEP\n-library makes when [dealing with lateness](#handling-lateness-in-event-time) in event time and how you can\n-[migrate your job](#migrating-from-an-older-flink-versionpre-13) from an older Flink version to Flink-1.3.\n+\u672c\u9875\u8bb2\u8ff0\u4e86Flink CEP\u4e2d\u53ef\u7528\u7684API\uff0c\u6211\u4eec\u9996\u5148\u8bb2\u8ff0[\u6a21\u5f0fAPI](#\u6a21\u5f0fapi)\uff0c\u5b83\u53ef\u4ee5\u8ba9\u4f60\u6307\u5b9a\u60f3\u5728\u6570\u636e\u6d41\u4e2d\u68c0\u6d4b\u7684\u6a21\u5f0f\uff0c\u7136\u540e\u8bb2\u8ff0\u5982\u4f55[\u68c0\u6d4b\u5339\u914d\u7684\u4e8b\u4ef6\u5e8f\u5217\u5e76\u8fdb\u884c\u5904\u7406](#\u68c0\u6d4b\u6a21\u5f0f)\u3002\n+\u518d\u7136\u540e\u6211\u4eec\u8bb2\u8ff0Flink\u5728\u6309\u7167\u4e8b\u4ef6\u65f6\u95f4[\u5904\u7406\u8fdf\u5230\u4e8b\u4ef6](#\u6309\u7167\u4e8b\u4ef6\u65f6\u95f4\u5904\u7406\u665a\u5230\u4e8b\u4ef6)\u65f6\u7684\u5047\u8bbe\uff0c", "originalCommit": "76146c2111a47b68765168064b4d1dd90448789c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0MDk4OA==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387440988", "bodyText": "done", "author": "shuai-xu", "createdAt": "2020-03-04T04:16:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxMTIyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyNjU4OA==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387026588", "bodyText": "\u5220\u9664\u201c\u7684\u52a0\u4e2a\u201d\uff1f", "author": "dianfu", "createdAt": "2020-03-03T13:44:15Z", "path": "docs/dev/libs/cep.zh.md", "diffHunk": "@@ -136,140 +132,143 @@ val result: DataStream[Alert] = patternStream.process(\n </div>\n </div>\n \n-## The Pattern API\n+## \u6a21\u5f0fAPI\n \n-The pattern API allows you to define complex pattern sequences that you want to extract from your input stream.\n+\u6a21\u5f0fAPI\u53ef\u4ee5\u8ba9\u4f60\u5b9a\u4e49\u60f3\u4ece\u8f93\u5165\u6d41\u4e2d\u62bd\u53d6\u7684\u590d\u6742\u6a21\u5f0f\u5e8f\u5217\u3002\n \n-Each complex pattern sequence consists of multiple simple patterns, i.e. patterns looking for individual events with the same properties. From now on, we will call these simple patterns **patterns**, and the final complex pattern sequence we are searching for in the stream, the **pattern sequence**. You can see a pattern sequence as a graph of such patterns, where transitions from one pattern to the next occur based on user-specified\n-*conditions*, e.g. `event.getName().equals(\"end\")`. A **match** is a sequence of input events which visits all\n-patterns of the complex pattern graph, through a sequence of valid pattern transitions.\n+\u6bcf\u4e2a\u590d\u6742\u7684\u6a21\u5f0f\u5e8f\u5217\u5305\u62ec\u591a\u4e2a\u7b80\u5355\u7684\u6a21\u5f0f\uff0c\u6bd4\u5982\uff0c\u5bfb\u627e\u62e5\u6709\u76f8\u540c\u5c5e\u6027\u4e8b\u4ef6\u5e8f\u5217\u7684\u6a21\u5f0f\u3002\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u6211\u4eec\u628a\u8fd9\u4e9b\u7b80\u5355\u7684\u6a21\u5f0f\u79f0\u4f5c**\u6a21\u5f0f**\uff0c\n+\u628a\u6211\u4eec\u5728\u6570\u636e\u6d41\u4e2d\u6700\u7ec8\u5bfb\u627e\u7684\u590d\u6742\u6a21\u5f0f\u5e8f\u5217\u79f0\u4f5c**\u6a21\u5f0f\u5e8f\u5217**\uff0c\u4f60\u53ef\u4ee5\u628a\u6a21\u5f0f\u5e8f\u5217\u770b\u4f5c\u662f\u8fd9\u6837\u7684\u6a21\u5f0f\u6784\u6210\u7684\u56fe\uff0c\n+\u8fd9\u4e9b\u6a21\u5f0f\u57fa\u4e8e\u7528\u6237\u6307\u5b9a\u7684**\u6761\u4ef6**\u4ece\u4e00\u4e2a\u8f6c\u6362\u5230\u53e6\u5916\u4e00\u4e2a\uff0c\u6bd4\u5982 `event.getName().equals(\"end\")`\u3002\n+\u4e00\u4e2a**\u5339\u914d**\u662f\u8f93\u5165\u4e8b\u4ef6\u7684\u4e00\u4e2a\u5e8f\u5217\uff0c\u8fd9\u4e9b\u4e8b\u4ef6\u901a\u8fc7\u4e00\u7cfb\u5217\u6709\u6548\u7684\u6a21\u5f0f\u8f6c\u6362\uff0c\u80fd\u591f\u8bbf\u95ee\u5230\u590d\u6742\u6a21\u5f0f\u56fe\u4e2d\u7684\u6240\u6709\u6a21\u5f0f\u3002\n \n-{% warn Attention %} Each pattern must have a unique name, which you use later to identify the matched events.\n+{% warn \u6ce8\u610f %} \u6bcf\u4e2a\u6a21\u5f0f\u5fc5\u987b\u6709\u4e00\u4e2a\u72ec\u4e00\u65e0\u4e8c\u7684\u540d\u5b57\uff0c\u4f60\u53ef\u4ee5\u5728\u540e\u9762\u4f7f\u7528\u5b83\u6765\u8bc6\u522b\u5339\u914d\u5230\u7684\u4e8b\u4ef6\u3002\n \n-{% warn Attention %} Pattern names **CANNOT** contain the character `\":\"`.\n+{% warn \u6ce8\u610f %} \u6a21\u5f0f\u7684\u540d\u5b57\u4e0d\u80fd\u5305\u542b\u5b57\u7b26`\":\"`.\n \n-In the rest of this section we will first describe how to define [Individual Patterns](#individual-patterns), and then how you can combine individual patterns into [Complex Patterns](#combining-patterns).\n+\u8fd9\u4e00\u8282\u7684\u5269\u4f59\u90e8\u5206\u6211\u4eec\u4f1a\u5148\u8bb2\u8ff0\u5982\u4f55\u5b9a\u4e49[\u5355\u4e2a\u6a21\u5f0f](#\u5355\u4e2a\u6a21\u5f0f)\uff0c\u7136\u540e\u8bb2\u5982\u4f55\u5c06\u5355\u4e2a\u6a21\u5f0f\u7ec4\u5408\u6210[\u590d\u6742\u6a21\u5f0f](#\u7ec4\u5408\u6a21\u5f0f)\u3002\n \n-### Individual Patterns\n+### \u5355\u4e2a\u6a21\u5f0f\n \n-A **Pattern** can be either a *singleton* or a *looping* pattern. Singleton patterns accept a single\n-event, while looping patterns can accept more than one. In pattern matching symbols, the pattern `\"a b+ c? d\"` (or `\"a\"`, followed by *one or more* `\"b\"`'s, optionally followed by a `\"c\"`, followed by a `\"d\"`), `a`, `c?`, and `d` are\n-singleton patterns, while `b+` is a looping one. By default, a pattern is a singleton pattern and you can transform\n-it to a looping one by using [Quantifiers](#quantifiers). Each pattern can have one or more\n-[Conditions](#conditions) based on which it accepts events.\n+\u4e00\u4e2a**\u6a21\u5f0f**\u53ef\u4ee5\u662f\u4e00\u4e2a**\u5355\u4f8b**\u6216\u8005**\u5faa\u73af**\u6a21\u5f0f\u3002\u5355\u4f8b\u6a21\u5f0f\u53ea\u63a5\u53d7\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u5faa\u73af\u6a21\u5f0f\u53ef\u4ee5\u63a5\u53d7\u591a\u4e2a\u4e8b\u4ef6\u3002\n+\u5728\u6a21\u5f0f\u5339\u914d\u8868\u8fbe\u5f0f\u4e2d\uff0c\u6a21\u5f0f`\"a b+ c? d\"`\uff08\u6216\u8005`\"a\"`\uff0c\u540e\u9762\u8ddf\u7740\u4e00\u4e2a\u6216\u8005\u591a\u4e2a`\"b\"`\uff0c\u518d\u5f80\u540e\u53ef\u9009\u62e9\u7684\u8ddf\u7740\u4e00\u4e2a`\"c\"`\uff0c\u6700\u540e\u8ddf\u7740\u4e00\u4e2a`\"d\"`\uff09\uff0c\n+`a`\uff0c`c?`\uff0c\u548c `d`\u90fd\u662f\u5355\u4f8b\u6a21\u5f0f\uff0c`b+`\u662f\u4e00\u4e2a\u5faa\u73af\u6a21\u5f0f\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6a21\u5f0f\u90fd\u662f\u5355\u4f8b\u7684\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528[\u91cf\u8bcd](#\u91cf\u8bcd)\u628a\u5b83\u4eec\u8f6c\u6362\u6210\u5faa\u73af\u6a21\u5f0f\u3002\n+\u6bcf\u4e2a\u6a21\u5f0f\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u8005\u591a\u4e2a[\u6761\u4ef6](#\u6761\u4ef6)\u6765\u51b3\u5b9a\u5b83\u63a5\u53d7\u54ea\u4e9b\u4e8b\u4ef6\u3002\n \n-#### Quantifiers\n+#### \u91cf\u8bcd\n \n-In FlinkCEP, you can specify looping patterns using these methods: `pattern.oneOrMore()`, for patterns that expect one or more occurrences of a given event (e.g. the `b+` mentioned before); and `pattern.times(#ofTimes)`, for patterns that\n-expect a specific number of occurrences of a given type of event, e.g. 4 `a`'s; and `pattern.times(#fromTimes, #toTimes)`, for patterns that expect a specific minimum number of occurrences and a maximum number of occurrences of a given type of event, e.g. 2-4 `a`s.\n+\u5728FlinkCEP\u4e2d\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u65b9\u6cd5\u6307\u5b9a\u5faa\u73af\u6a21\u5f0f\uff1a`pattern.oneOrMore()`\uff0c\u6307\u5b9a\u671f\u671b\u4e00\u4e2a\u7ed9\u5b9a\u4e8b\u4ef6\u51fa\u73b0\u4e00\u6b21\u6216\u8005\u591a\u6b21\u7684\u6a21\u5f0f\uff08\u4f8b\u5982\u524d\u9762\u63d0\u5230\u7684`b+`\u6a21\u5f0f\uff09\uff1b\n+`pattern.times(#ofTimes)`\uff0c\u6307\u5b9a\u671f\u671b\u4e00\u4e2a\u7ed9\u5b9a\u4e8b\u4ef6\u51fa\u73b0\u7279\u5b9a\u6b21\u6570\u7684\u6a21\u5f0f\uff0c\u4f8b\u5982\u51fa\u73b04\u6b21`a`\uff1b\n+`pattern.times(#fromTimes, #toTimes)`\uff0c\u6307\u5b9a\u671f\u671b\u4e00\u4e2a\u7ed9\u5b9a\u4e8b\u4ef6\u51fa\u73b0\u6b21\u6570\u5728\u4e00\u4e2a\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u4e2d\u95f4\u7684\u6a21\u5f0f\uff0c\u6bd4\u5982\u51fa\u73b02-4\u6b21`a`\u3002\n \n-You can make looping patterns greedy using the `pattern.greedy()` method, but you cannot yet make group patterns greedy. You can make all patterns, looping or not, optional using the `pattern.optional()` method.\n+\u4f60\u53ef\u4ee5\u4f7f\u7528`pattern.greedy()`\u65b9\u6cd5\u8ba9\u5faa\u73af\u6a21\u5f0f\u53d8\u6210\u8d2a\u5fc3\u7684\uff0c\u4f46\u73b0\u5728\u8fd8\u4e0d\u80fd\u8ba9\u6a21\u5f0f\u7ec4\u8d2a\u5fc3\u3002\n+\u4f60\u53ef\u4ee5\u4f7f\u7528`pattern.optional()`\u65b9\u6cd5\u8ba9\u6240\u6709\u7684\u6a21\u5f0f\u53d8\u6210\u53ef\u9009\u7684\uff0c\u4e0d\u7ba1\u662f\u5426\u662f\u5faa\u73af\u6a21\u5f0f\u3002\n \n-For a pattern named `start`, the following are valid quantifiers:\n+\u5bf9\u4e00\u4e2a\u547d\u540d\u4e3a`start`\u7684\u6a21\u5f0f\uff0c\u4ee5\u4e0b\u91cf\u8bcd\u662f\u6709\u6548\u7684\uff1a\n \n <div class=\"codetabs\" markdown=\"1\">\n <div data-lang=\"java\" markdown=\"1\">\n {% highlight java %}\n-// expecting 4 occurrences\n+// \u671f\u671b\u51fa\u73b04\u6b21\n start.times(4);\n \n-// expecting 0 or 4 occurrences\n+// \u671f\u671b\u51fa\u73b00\u6216\u80054\u6b21\n start.times(4).optional();\n \n-// expecting 2, 3 or 4 occurrences\n+// \u671f\u671b\u51fa\u73b02\u30013\u6216\u80054\u6b21\n start.times(2, 4);\n \n-// expecting 2, 3 or 4 occurrences and repeating as many as possible\n+// \u671f\u671b\u51fa\u73b02\u30013\u6216\u80054\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n start.times(2, 4).greedy();\n \n-// expecting 0, 2, 3 or 4 occurrences\n+// \u671f\u671b\u51fa\u73b00\u30012\u30013\u6216\u80054\u6b21\n start.times(2, 4).optional();\n \n-// expecting 0, 2, 3 or 4 occurrences and repeating as many as possible\n+// \u671f\u671b\u51fa\u73b00\u30012\u30013\u6216\u80054\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n start.times(2, 4).optional().greedy();\n \n-// expecting 1 or more occurrences\n+// \u671f\u671b\u51fa\u73b01\u5230\u591a\u6b21\n start.oneOrMore();\n \n-// expecting 1 or more occurrences and repeating as many as possible\n+// \u671f\u671b\u51fa\u73b01\u5230\u591a\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n start.oneOrMore().greedy();\n \n-// expecting 0 or more occurrences\n+// \u671f\u671b\u51fa\u73b00\u5230\u591a\u6b21\n start.oneOrMore().optional();\n \n-// expecting 0 or more occurrences and repeating as many as possible\n+// \u671f\u671b\u51fa\u73b00\u5230\u591a\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n start.oneOrMore().optional().greedy();\n \n-// expecting 2 or more occurrences\n+// \u671f\u671b\u51fa\u73b02\u5230\u591a\u6b21\n start.timesOrMore(2);\n \n-// expecting 2 or more occurrences and repeating as many as possible\n+// \u671f\u671b\u51fa\u73b02\u5230\u591a\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n start.timesOrMore(2).greedy();\n \n-// expecting 0, 2 or more occurrences and repeating as many as possible\n+// \u671f\u671b\u51fa\u73b00\u30012\u6216\u591a\u6b21\n+start.timesOrMore(2).optional();\n+\n+// \u671f\u671b\u51fa\u73b00\u30012\u6216\u591a\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n start.timesOrMore(2).optional().greedy();\n {% endhighlight %}\n </div>\n \n <div data-lang=\"scala\" markdown=\"1\">\n {% highlight scala %}\n-// expecting 4 occurrences\n+// \u671f\u671b\u51fa\u73b04\u6b21\n start.times(4)\n \n-// expecting 0 or 4 occurrences\n+// \u671f\u671b\u51fa\u73b00\u6216\u80054\u6b21\n start.times(4).optional()\n \n-// expecting 2, 3 or 4 occurrences\n+// \u671f\u671b\u51fa\u73b02\u30013\u6216\u80054\u6b21\n start.times(2, 4)\n \n-// expecting 2, 3 or 4 occurrences and repeating as many as possible\n+// \u671f\u671b\u51fa\u73b02\u30013\u6216\u80054\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n start.times(2, 4).greedy()\n \n-// expecting 0, 2, 3 or 4 occurrences\n+// \u671f\u671b\u51fa\u73b00\u30012\u30013\u6216\u80054\u6b21\n start.times(2, 4).optional()\n \n-// expecting 0, 2, 3 or 4 occurrences and repeating as many as possible\n+// \u671f\u671b\u51fa\u73b00\u30012\u30013\u6216\u80054\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n start.times(2, 4).optional().greedy()\n \n-// expecting 1 or more occurrences\n+// \u671f\u671b\u51fa\u73b01\u5230\u591a\u6b21\n start.oneOrMore()\n \n-// expecting 1 or more occurrences and repeating as many as possible\n+// \u671f\u671b\u51fa\u73b01\u5230\u591a\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n start.oneOrMore().greedy()\n \n-// expecting 0 or more occurrences\n+// \u671f\u671b\u51fa\u73b00\u5230\u591a\u6b21\n start.oneOrMore().optional()\n \n-// expecting 0 or more occurrences and repeating as many as possible\n+// \u671f\u671b\u51fa\u73b00\u5230\u591a\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n start.oneOrMore().optional().greedy()\n \n-// expecting 2 or more occurrences\n+// \u671f\u671b\u51fa\u73b02\u5230\u591a\u6b21\n start.timesOrMore(2)\n \n-// expecting 2 or more occurrences and repeating as many as possible\n+// \u671f\u671b\u51fa\u73b02\u5230\u591a\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n start.timesOrMore(2).greedy()\n \n-// expecting 0, 2 or more occurrences\n+// \u671f\u671b\u51fa\u73b00\u30012\u6216\u591a\u6b21\n start.timesOrMore(2).optional()\n \n-// expecting 0, 2 or more occurrences and repeating as many as possible\n+// \u671f\u671b\u51fa\u73b00\u30012\u6216\u591a\u6b21\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u91cd\u590d\u6b21\u6570\u591a\n start.timesOrMore(2).optional().greedy()\n {% endhighlight %}\n </div>\n </div>\n \n-#### Conditions\n+#### \u6761\u4ef6\n \n-For every pattern you can specify a condition that an incoming event has to meet in order to be \"accepted\" into the pattern e.g. its value should be larger than 5,\n-or larger than the average value of the previously accepted events.\n-You can specify conditions on the event properties via the `pattern.where()`, `pattern.or()` or `pattern.until()` methods.\n-These can be either `IterativeCondition`s or `SimpleCondition`s.\n+\u5bf9\u6bcf\u4e2a\u6a21\u5f0f\u4f60\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u6761\u4ef6\u6765\u51b3\u5b9a\u4e00\u4e2a\u8fdb\u6765\u7684\u4e8b\u4ef6\u662f\u5426\u88ab\u63a5\u53d7\u8fdb\u5165\u8fd9\u4e2a\u6a21\u5f0f\uff0c\u4f8b\u5982\uff0c\u5b83\u7684value\u5b57\u6bb5\u5e94\u8be5\u5927\u4e8e5\uff0c\u6216\u8005\u5927\u4e8e\u524d\u9762\u63a5\u53d7\u7684\u4e8b\u4ef6\u7684\u5e73\u5747\u503c\u3002\n+\u6307\u5b9a\u5224\u65ad\u4e8b\u4ef6\u5c5e\u6027\u7684\u6761\u4ef6\u53ef\u4ee5\u901a\u8fc7`pattern.where()`\u3001`pattern.or()`\u6216\u8005`pattern.until()`\u65b9\u6cd5\u3002\n+\u8fd9\u4e9b\u53ef\u4ee5\u662f`IterativeCondition`\u6216\u8005`SimpleCondition`\u3002\n \n-**Iterative Conditions:** This is the most general type of condition. This is how you can specify a condition that\n-accepts subsequent events based on properties of the previously accepted events or a statistic over a subset of them.\n+**\u8fed\u4ee3\u6761\u4ef6:** \u8fd9\u662f\u6700\u666e\u904d\u7684\u6761\u4ef6\u7c7b\u578b\u3002\u4f7f\u7528\u5b83\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u57fa\u4e8e\u524d\u9762\u5df2\u7ecf\u88ab\u63a5\u53d7\u7684\u4e8b\u4ef6\u7684\u5c5e\u6027\u6216\u8005\u5b83\u4eec\u7684\u4e00\u4e2a\u5b50\u96c6\u7684\u7edf\u8ba1\u6570\u636e\u6765\u51b3\u5b9a\u662f\u5426\u63a5\u53d7\u65f6\u95f4\u5e8f\u5217\u7684\u6761\u4ef6\u3002\n \n-Below is the code for an iterative condition that accepts the next event for a pattern named \"middle\" if its name starts\n-with \"foo\", and if the sum of the prices of the previously accepted events for that pattern plus the price of the current event do not exceed the value of 5.0. Iterative conditions can be powerful, especially in combination with looping patterns, e.g. `oneOrMore()`.\n+\u4e0b\u9762\u662f\u4e00\u4e2a\u8fed\u4ee3\u6761\u4ef6\u7684\u4ee3\u7801\uff0c\u5b83\u63a5\u53d7\"middle\"\u6a21\u5f0f\u4e0b\u4e00\u4e2a\u4e8b\u4ef6\u7684\u540d\u79f0\u5f00\u5934\u662f\"foo\"\uff0c \u5e76\u4e14\u524d\u9762\u5df2\u7ecf\u5339\u914d\u5230\u7684\u4e8b\u4ef6\u7684\u52a0\u4e2a\u52a0\u4e0a\u8fd9\u4e2a\u4e8b\u4ef6\u7684\u4ef7\u683c\u5c0f\u4e8e5.0\u3002", "originalCommit": "76146c2111a47b68765168064b4d1dd90448789c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzODYzOQ==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387438639", "bodyText": "done", "author": "shuai-xu", "createdAt": "2020-03-04T04:04:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyNjU4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyNzg5MA==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387027890", "bodyText": "\u662f\u662f -> \u662f\n\u4f7f\u7528\u50cf\u4e0b\u9762\u8fd9\u6837\u4f7f\u7528 -> \u50cf\u4e0b\u9762\u8fd9\u6837\u4f7f\u7528", "author": "dianfu", "createdAt": "2020-03-03T13:46:20Z", "path": "docs/dev/libs/cep.zh.md", "diffHunk": "@@ -335,88 +332,87 @@ start.where(event => event.getName.startsWith(\"foo\"))\n </div>\n </div>\n \n-Finally, you can also restrict the type of the accepted event to a subtype of the initial event type (here `Event`)\n-via the `pattern.subtype(subClass)` method.\n+\u6700\u540e\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7`pattern.subtype(subClass)`\u65b9\u6cd5\u9650\u5236\u63a5\u53d7\u7684\u4e8b\u4ef6\u7c7b\u578b\u662f\u521d\u59cb\u4e8b\u4ef6\u7684\u5b50\u7c7b\u578b\u3002\n \n <div class=\"codetabs\" markdown=\"1\">\n <div data-lang=\"java\" markdown=\"1\">\n {% highlight java %}\n start.subtype(SubEvent.class).where(new SimpleCondition<SubEvent>() {\n     @Override\n     public boolean filter(SubEvent value) {\n-        return ... // some condition\n+        return ... // \u4e00\u4e9b\u5224\u65ad\u6761\u4ef6\n     }\n });\n {% endhighlight %}\n </div>\n \n <div data-lang=\"scala\" markdown=\"1\">\n {% highlight scala %}\n-start.subtype(classOf[SubEvent]).where(subEvent => ... /* some condition */)\n+start.subtype(classOf[SubEvent]).where(subEvent => ... /* \u4e00\u4e9b\u5224\u65ad\u6761\u4ef6 */)\n {% endhighlight %}\n </div>\n </div>\n \n-**Combining Conditions:** As shown above, you can combine the `subtype` condition with additional conditions. This holds for every condition. You can arbitrarily combine conditions by sequentially calling `where()`. The final result will be the logical **AND** of the results of the individual conditions. To combine conditions using **OR**, you can use the `or()` method, as shown below.\n+**\u7ec4\u5408\u6761\u4ef6\uff1a** \u5982\u4e0a\u6240\u793a\uff0c\u4f60\u53ef\u4ee5\u628a`subtype`\u6761\u4ef6\u548c\u5176\u4ed6\u7684\u6761\u4ef6\u7ed3\u5408\u8d77\u6765\u4f7f\u7528\u3002\u8fd9\u9002\u7528\u4e8e\u4efb\u4f55\u6761\u4ef6\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f9d\u6b21\u8c03\u7528`where()`\u6765\u7ec4\u5408\u6761\u4ef6\u3002\n+\u6700\u7ec8\u7684\u7ed3\u679c\u662f\u662f\u6bcf\u4e2a\u5355\u4e00\u6761\u4ef6\u7684\u7ed3\u679c\u7684\u903b\u8f91**AND**\u3002\u5982\u679c\u60f3\u4f7f\u7528**OR**\u6765\u7ec4\u5408\u6761\u4ef6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u50cf\u4e0b\u9762\u8fd9\u6837\u4f7f\u7528`or()`\u65b9\u6cd5\u3002", "originalCommit": "76146c2111a47b68765168064b4d1dd90448789c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzODc5NQ==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387438795", "bodyText": "done", "author": "shuai-xu", "createdAt": "2020-03-04T04:05:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyNzg5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyODY3OA==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387028678", "bodyText": "\u589e\u52a0\u4e00\u4e2a\u65b0\u7684\u5224\u65ad \u540e\u9762\u52a0\u4e2a\u9017\u53f7\uff1f", "author": "dianfu", "createdAt": "2020-03-03T13:47:34Z", "path": "docs/dev/libs/cep.zh.md", "diffHunk": "@@ -425,18 +421,17 @@ pattern.where(new IterativeCondition<Event>() {\n         <tr>\n             <td><strong>or(condition)</strong></td>\n             <td>\n-                <p>Adds a new condition which is ORed with an existing one. An event can match the pattern only if it\n-                passes at least one of the conditions:</p>\n+                <p>\u589e\u52a0\u4e00\u4e2a\u65b0\u7684\u5224\u65ad\u548c\u5f53\u524d\u7684\u5224\u65ad\u53d6\u6216\u3002\u4e00\u4e2a\u4e8b\u4ef6\u53ea\u8981\u6ee1\u8db3\u81f3\u5c11\u4e00\u4e2a\u5224\u65ad\u6761\u4ef6\u5c31\u5339\u914d\u5230\u6a21\u5f0f\uff1a</p>", "originalCommit": "76146c2111a47b68765168064b4d1dd90448789c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzODkxOQ==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387438919", "bodyText": "done", "author": "shuai-xu", "createdAt": "2020-03-04T04:06:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyODY3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyOTE5Mw==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387029193", "bodyText": "NOTE -> \u6ce8\u610f", "author": "dianfu", "createdAt": "2020-03-03T13:48:25Z", "path": "docs/dev/libs/cep.zh.md", "diffHunk": "@@ -445,15 +440,14 @@ pattern.where(new IterativeCondition<Event>() {\n               <tr>\n                  <td><strong>until(condition)</strong></td>\n                  <td>\n-                     <p>Specifies a stop condition for a looping pattern. Meaning if event matching the given condition occurs, no more\n-                     events will be accepted into the pattern.</p>\n-                     <p>Applicable only in conjunction with <code>oneOrMore()</code></p>\n-                     <p><b>NOTE:</b> It allows for cleaning state for corresponding pattern on event-based condition.</p>", "originalCommit": "76146c2111a47b68765168064b4d1dd90448789c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0MTMxNA==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387441314", "bodyText": "\u53eb\u63d0\u793a\u66f4\u597d\u4e00\u70b9\u5427", "author": "shuai-xu", "createdAt": "2020-03-04T04:18:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyOTE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0MjE0MA==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387442140", "bodyText": "\u55ef\uff0c\u662f\u7684", "author": "dianfu", "createdAt": "2020-03-04T04:22:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyOTE5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyOTQ1MQ==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387029451", "bodyText": "NOTE -> \u6ce8\u610f", "author": "dianfu", "createdAt": "2020-03-03T13:48:50Z", "path": "docs/dev/libs/cep.zh.md", "diffHunk": "@@ -472,10 +465,10 @@ pattern.subtype(SubEvent.class);\n        <tr>\n           <td><strong>oneOrMore()</strong></td>\n           <td>\n-              <p>Specifies that this pattern expects at least one occurrence of a matching event.</p>\n-              <p>By default a relaxed internal contiguity (between subsequent events) is used. For more info on\n-              internal contiguity see <a href=\"#consecutive_java\">consecutive</a>.</p>\n-              <p><b>NOTE:</b> It is advised to use either <code>until()</code> or <code>within()</code> to enable state clearing</p>", "originalCommit": "76146c2111a47b68765168064b4d1dd90448789c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzMjYzMQ==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387032631", "bodyText": "\u201c\u6682\u65f6\u7684\u201d\u611f\u89c9\u4e0d\u592a\u51c6\u786e\uff0c\u8981\u4e0d  \u201c\u8fd9\u79cd\u6682\u65f6\u7684\u6a21\u5f0f\u652f\u6301\u201d -> \u201c\u8fd9\u79cd\u6a21\u5f0f\u652f\u6301\u201d\uff1f", "author": "dianfu", "createdAt": "2020-03-03T13:54:02Z", "path": "docs/dev/libs/cep.zh.md", "diffHunk": "@@ -736,41 +715,39 @@ Pattern<Event, ?> relaxedNot = start.notFollowedBy(\"not\").where(...);\n <div data-lang=\"scala\" markdown=\"1\">\n {% highlight scala %}\n \n-// strict contiguity\n+// \u4e25\u683c\u8fde\u7eed\n val strict: Pattern[Event, _] = start.next(\"middle\").where(...)\n \n-// relaxed contiguity\n+// \u677e\u6563\u8fde\u7eed\n val relaxed: Pattern[Event, _] = start.followedBy(\"middle\").where(...)\n \n-// non-deterministic relaxed contiguity\n+// \u4e0d\u786e\u5b9a\u7684\u677e\u6563\u8fde\u7eed\n val nonDetermin: Pattern[Event, _] = start.followedByAny(\"middle\").where(...)\n \n-// NOT pattern with strict contiguity\n+// \u4e25\u683c\u8fde\u7eed\u7684NOT\u6a21\u5f0f\n val strictNot: Pattern[Event, _] = start.notNext(\"not\").where(...)\n \n-// NOT pattern with relaxed contiguity\n+// \u677e\u6563\u8fde\u7eed\u7684NOT\u6a21\u5f0f\n val relaxedNot: Pattern[Event, _] = start.notFollowedBy(\"not\").where(...)\n \n {% endhighlight %}\n </div>\n </div>\n \n-Relaxed contiguity means that only the first succeeding matching event will be matched, while\n-with non-deterministic relaxed contiguity, multiple matches will be emitted for the same beginning. As an example,\n-a pattern `\"a b\"`, given the event sequence `\"a\", \"c\", \"b1\", \"b2\"`, will give the following results:\n+\u677e\u6563\u8fde\u7eed\u610f\u5473\u7740\u8ddf\u7740\u7684\u4e8b\u4ef6\u4e2d\uff0c\u53ea\u6709\u7b2c\u4e00\u4e2a\u53ef\u5339\u914d\u7684\u4e8b\u4ef6\u4f1a\u88ab\u5339\u914d\u4e0a\uff0c\u800c\u4e0d\u786e\u5b9a\u7684\u677e\u6563\u8fde\u63a5\u60c5\u51b5\u4e0b\uff0c\u6709\u7740\u540c\u6837\u8d77\u59cb\u7684\u591a\u4e2a\u5339\u914d\u4f1a\u88ab\u8f93\u51fa\u3002\n+\u4e3e\u4f8b\u6765\u8bf4\uff0c\u6a21\u5f0f`\"a b\"`\uff0c\u7ed9\u5b9a\u4e8b\u4ef6\u5e8f\u5217`\"a\"\uff0c\"c\"\uff0c\"b1\"\uff0c\"b2\"`\uff0c\u4f1a\u4ea7\u751f\u5982\u4e0b\u7684\u7ed3\u679c\uff1a\n \n-1. Strict Contiguity between `\"a\"` and `\"b\"`: `{}` (no match), the `\"c\"` after `\"a\"` causes `\"a\"` to be discarded.\n+1. `\"a\"`\u548c`\"b\"`\u4e4b\u95f4\u4e25\u683c\u8fde\u7eed\uff1a `{}` \uff08\u6ca1\u6709\u5339\u914d\uff09\uff0c`\"a\"`\u4e4b\u540e\u7684`\"c\"`\u5bfc\u81f4`\"a\"`\u88ab\u4e22\u5f03\u3002\n \n-2. Relaxed Contiguity between `\"a\"` and `\"b\"`: `{a b1}`, as relaxed continuity is viewed as \"skip non-matching events\n-till the next matching one\".\n+2. `\"a\"`\u548c`\"b\"`\u4e4b\u95f4\u677e\u6563\u8fde\u7eed\uff1a `{a b1}`\uff0c\u677e\u6563\u8fde\u7eed\u4f1a\"\u8df3\u8fc7\u4e0d\u5339\u914d\u7684\u4e8b\u4ef6\u76f4\u5230\u5339\u914d\u4e0a\u7684\u4e8b\u4ef6\"\u3002\n \n-3. Non-Deterministic Relaxed Contiguity between `\"a\"` and `\"b\"`: `{a b1}`, `{a b2}`, as this is the most general form.\n+3. `\"a\"`\u548c`\"b\"`\u4e4b\u95f4\u4e0d\u786e\u5b9a\u7684\u677e\u6563\u8fde\u7eed\uff1a `{a b1}`, `{a b2}`\uff0c\u8fd9\u662f\u6700\u5e38\u89c1\u7684\u60c5\u51b5\u3002\n \n-It's also possible to define a temporal constraint for the pattern to be valid.\n-For example, you can define that a pattern should occur within 10 seconds via the `pattern.within()` method.\n-Temporal patterns are supported for both [processing and event time]({{site.baseurl}}/dev/event_time.html).\n+\u4e5f\u53ef\u4ee5\u4e3a\u6a21\u5f0f\u5b9a\u4e49\u4e00\u4e2a\u6709\u6548\u65f6\u95f4\u7ea6\u675f\u3002\n+\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7`pattern.within()`\u65b9\u6cd5\u6307\u5b9a\u4e00\u4e2a\u6a21\u5f0f\u5e94\u8be5\u572810\u79d2\u5185\u53d1\u751f\u3002\n+\u8fd9\u79cd\u6682\u65f6\u7684\u6a21\u5f0f\u652f\u6301[\u5904\u7406\u65f6\u95f4\u548c\u4e8b\u4ef6\u65f6\u95f4]({{site.baseurl}}/zh/dev/event_time.html).", "originalCommit": "76146c2111a47b68765168064b4d1dd90448789c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0MjI4Mw==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387442283", "bodyText": "\u53eb\u65f6\u95f4\u6a21\u5f0f\u5427\uff0c\u8fd9\u4e2a\u597d\u50cf\u5408\u9002\u4e00\u70b9", "author": "shuai-xu", "createdAt": "2020-03-04T04:23:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzMjYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzNjM0Mg==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387036342", "bodyText": "\u5982\u679c\u5728\u9650\u5236\u4e86\u591a\u4e2a\u65f6\u95f4\u5728\u4e0d\u540c\u7684 -> \u5982\u679c\u9650\u5236\u4e86\u591a\u4e2a\u4e0d\u540c\u7684\u65f6\u95f4\u5728", "author": "dianfu", "createdAt": "2020-03-03T13:59:49Z", "path": "docs/dev/libs/cep.zh.md", "diffHunk": "@@ -736,41 +715,39 @@ Pattern<Event, ?> relaxedNot = start.notFollowedBy(\"not\").where(...);\n <div data-lang=\"scala\" markdown=\"1\">\n {% highlight scala %}\n \n-// strict contiguity\n+// \u4e25\u683c\u8fde\u7eed\n val strict: Pattern[Event, _] = start.next(\"middle\").where(...)\n \n-// relaxed contiguity\n+// \u677e\u6563\u8fde\u7eed\n val relaxed: Pattern[Event, _] = start.followedBy(\"middle\").where(...)\n \n-// non-deterministic relaxed contiguity\n+// \u4e0d\u786e\u5b9a\u7684\u677e\u6563\u8fde\u7eed\n val nonDetermin: Pattern[Event, _] = start.followedByAny(\"middle\").where(...)\n \n-// NOT pattern with strict contiguity\n+// \u4e25\u683c\u8fde\u7eed\u7684NOT\u6a21\u5f0f\n val strictNot: Pattern[Event, _] = start.notNext(\"not\").where(...)\n \n-// NOT pattern with relaxed contiguity\n+// \u677e\u6563\u8fde\u7eed\u7684NOT\u6a21\u5f0f\n val relaxedNot: Pattern[Event, _] = start.notFollowedBy(\"not\").where(...)\n \n {% endhighlight %}\n </div>\n </div>\n \n-Relaxed contiguity means that only the first succeeding matching event will be matched, while\n-with non-deterministic relaxed contiguity, multiple matches will be emitted for the same beginning. As an example,\n-a pattern `\"a b\"`, given the event sequence `\"a\", \"c\", \"b1\", \"b2\"`, will give the following results:\n+\u677e\u6563\u8fde\u7eed\u610f\u5473\u7740\u8ddf\u7740\u7684\u4e8b\u4ef6\u4e2d\uff0c\u53ea\u6709\u7b2c\u4e00\u4e2a\u53ef\u5339\u914d\u7684\u4e8b\u4ef6\u4f1a\u88ab\u5339\u914d\u4e0a\uff0c\u800c\u4e0d\u786e\u5b9a\u7684\u677e\u6563\u8fde\u63a5\u60c5\u51b5\u4e0b\uff0c\u6709\u7740\u540c\u6837\u8d77\u59cb\u7684\u591a\u4e2a\u5339\u914d\u4f1a\u88ab\u8f93\u51fa\u3002\n+\u4e3e\u4f8b\u6765\u8bf4\uff0c\u6a21\u5f0f`\"a b\"`\uff0c\u7ed9\u5b9a\u4e8b\u4ef6\u5e8f\u5217`\"a\"\uff0c\"c\"\uff0c\"b1\"\uff0c\"b2\"`\uff0c\u4f1a\u4ea7\u751f\u5982\u4e0b\u7684\u7ed3\u679c\uff1a\n \n-1. Strict Contiguity between `\"a\"` and `\"b\"`: `{}` (no match), the `\"c\"` after `\"a\"` causes `\"a\"` to be discarded.\n+1. `\"a\"`\u548c`\"b\"`\u4e4b\u95f4\u4e25\u683c\u8fde\u7eed\uff1a `{}` \uff08\u6ca1\u6709\u5339\u914d\uff09\uff0c`\"a\"`\u4e4b\u540e\u7684`\"c\"`\u5bfc\u81f4`\"a\"`\u88ab\u4e22\u5f03\u3002\n \n-2. Relaxed Contiguity between `\"a\"` and `\"b\"`: `{a b1}`, as relaxed continuity is viewed as \"skip non-matching events\n-till the next matching one\".\n+2. `\"a\"`\u548c`\"b\"`\u4e4b\u95f4\u677e\u6563\u8fde\u7eed\uff1a `{a b1}`\uff0c\u677e\u6563\u8fde\u7eed\u4f1a\"\u8df3\u8fc7\u4e0d\u5339\u914d\u7684\u4e8b\u4ef6\u76f4\u5230\u5339\u914d\u4e0a\u7684\u4e8b\u4ef6\"\u3002\n \n-3. Non-Deterministic Relaxed Contiguity between `\"a\"` and `\"b\"`: `{a b1}`, `{a b2}`, as this is the most general form.\n+3. `\"a\"`\u548c`\"b\"`\u4e4b\u95f4\u4e0d\u786e\u5b9a\u7684\u677e\u6563\u8fde\u7eed\uff1a `{a b1}`, `{a b2}`\uff0c\u8fd9\u662f\u6700\u5e38\u89c1\u7684\u60c5\u51b5\u3002\n \n-It's also possible to define a temporal constraint for the pattern to be valid.\n-For example, you can define that a pattern should occur within 10 seconds via the `pattern.within()` method.\n-Temporal patterns are supported for both [processing and event time]({{site.baseurl}}/dev/event_time.html).\n+\u4e5f\u53ef\u4ee5\u4e3a\u6a21\u5f0f\u5b9a\u4e49\u4e00\u4e2a\u6709\u6548\u65f6\u95f4\u7ea6\u675f\u3002\n+\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7`pattern.within()`\u65b9\u6cd5\u6307\u5b9a\u4e00\u4e2a\u6a21\u5f0f\u5e94\u8be5\u572810\u79d2\u5185\u53d1\u751f\u3002\n+\u8fd9\u79cd\u6682\u65f6\u7684\u6a21\u5f0f\u652f\u6301[\u5904\u7406\u65f6\u95f4\u548c\u4e8b\u4ef6\u65f6\u95f4]({{site.baseurl}}/zh/dev/event_time.html).\n \n-{% warn Attention %} A pattern sequence can only have one temporal constraint. If multiple such constraints are defined on different individual patterns, then the smallest is applied.\n+{% warn \u6ce8\u610f %} \u4e00\u4e2a\u6a21\u5f0f\u5e8f\u5217\u53ea\u80fd\u6709\u4e00\u4e2a\u65f6\u95f4\u9650\u5236\u3002\u5982\u679c\u5728\u9650\u5236\u4e86\u591a\u4e2a\u65f6\u95f4\u5728\u4e0d\u540c\u7684\u5355\u4e2a\u6a21\u5f0f\u4e0a\uff0c\u4f1a\u4f7f\u7528\u6700\u5c0f\u7684\u90a3\u4e2a\u65f6\u95f4\u9650\u5236\u3002", "originalCommit": "76146c2111a47b68765168064b4d1dd90448789c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNzk2Mw==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387437963", "bodyText": "done", "author": "shuai-xu", "createdAt": "2020-03-04T04:00:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzNjM0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzOTczOA==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387039738", "bodyText": "\u4f60\u53ef\u4ee5\u8bbf\u95ee\u65f6\u95f4\u5c5e\u6027 \u540e\u9762\u52a0\u4e2a\u9017\u53f7\uff1f", "author": "dianfu", "createdAt": "2020-03-03T14:05:29Z", "path": "docs/dev/libs/cep.zh.md", "diffHunk": "@@ -1509,18 +1466,17 @@ class MyPatternProcessFunction<IN, OUT> extends PatternProcessFunction<IN, OUT>\n }\n {% endhighlight %}\n \n-The `PatternProcessFunction` gives access to a `Context` object. Thanks to it, one can access time related\n-characteristics such as `currentProcessingTime` or `timestamp` of current match (which is the timestamp of the last element assigned to the match).\n-For more info see [Time context](#time-context).\n-Through this context one can also emit results to a [side-output]({{ site.baseurl }}/dev/stream/side_output.html).\n+`PatternProcessFunction`\u53ef\u4ee5\u8bbf\u95ee`Context`\u5bf9\u8c61\u3002\u6709\u4e86\u5b83\u4e4b\u540e\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee\u65f6\u95f4\u5c5e\u6027\u6bd4\u5982`currentProcessingTime`\u6216\u8005\u5f53\u524d\u5339\u914d\u7684`timestamp`", "originalCommit": "76146c2111a47b68765168064b4d1dd90448789c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNzExMw==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387437113", "bodyText": "done", "author": "shuai-xu", "createdAt": "2020-03-04T03:56:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzOTczOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0MDU0Ng==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387040546", "bodyText": ". -> \u3002", "author": "dianfu", "createdAt": "2020-03-03T14:06:42Z", "path": "docs/dev/libs/cep.zh.md", "diffHunk": "@@ -1509,18 +1466,17 @@ class MyPatternProcessFunction<IN, OUT> extends PatternProcessFunction<IN, OUT>\n }\n {% endhighlight %}\n \n-The `PatternProcessFunction` gives access to a `Context` object. Thanks to it, one can access time related\n-characteristics such as `currentProcessingTime` or `timestamp` of current match (which is the timestamp of the last element assigned to the match).\n-For more info see [Time context](#time-context).\n-Through this context one can also emit results to a [side-output]({{ site.baseurl }}/dev/stream/side_output.html).\n+`PatternProcessFunction`\u53ef\u4ee5\u8bbf\u95ee`Context`\u5bf9\u8c61\u3002\u6709\u4e86\u5b83\u4e4b\u540e\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee\u65f6\u95f4\u5c5e\u6027\u6bd4\u5982`currentProcessingTime`\u6216\u8005\u5f53\u524d\u5339\u914d\u7684`timestamp`\n+\uff08\u6700\u65b0\u5206\u914d\u5230\u5339\u914d\u4e0a\u7684\u4e8b\u4ef6\u7684\u65f6\u95f4\u6233\uff09.", "originalCommit": "76146c2111a47b68765168064b4d1dd90448789c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNTgxMQ==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387435811", "bodyText": "done", "author": "shuai-xu", "createdAt": "2020-03-04T03:50:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0MDU0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0MTg3OQ==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387041879", "bodyText": "\u90fd\u5bf9\u8c03\u7528 -> \u90fd\u4f1a\u8c03\u7528", "author": "dianfu", "createdAt": "2020-03-03T14:08:48Z", "path": "docs/dev/libs/cep.zh.md", "diffHunk": "@@ -1509,18 +1466,17 @@ class MyPatternProcessFunction<IN, OUT> extends PatternProcessFunction<IN, OUT>\n }\n {% endhighlight %}\n \n-The `PatternProcessFunction` gives access to a `Context` object. Thanks to it, one can access time related\n-characteristics such as `currentProcessingTime` or `timestamp` of current match (which is the timestamp of the last element assigned to the match).\n-For more info see [Time context](#time-context).\n-Through this context one can also emit results to a [side-output]({{ site.baseurl }}/dev/stream/side_output.html).\n+`PatternProcessFunction`\u53ef\u4ee5\u8bbf\u95ee`Context`\u5bf9\u8c61\u3002\u6709\u4e86\u5b83\u4e4b\u540e\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee\u65f6\u95f4\u5c5e\u6027\u6bd4\u5982`currentProcessingTime`\u6216\u8005\u5f53\u524d\u5339\u914d\u7684`timestamp`\n+\uff08\u6700\u65b0\u5206\u914d\u5230\u5339\u914d\u4e0a\u7684\u4e8b\u4ef6\u7684\u65f6\u95f4\u6233\uff09.\n+\u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u770b[\u65f6\u95f4\u4e0a\u4e0b\u6587](#\u65f6\u95f4\u4e0a\u4e0b\u6587)\u3002\n+\u901a\u8fc7\u8fd9\u4e2a\u4e0a\u4e0b\u6587\u4e5f\u53ef\u4ee5\u5c06\u7ed3\u679c\u8f93\u51fa\u5230[\u4fa7\u8f93\u51fa]({{ site.baseurl }}/zh/dev/stream/side_output.html).\n \n \n-#### Handling Timed Out Partial Patterns\n+#### \u5904\u7406\u8d85\u65f6\u7684\u90e8\u5206\u5339\u914d\n \n-Whenever a pattern has a window length attached via the `within` keyword, it is possible that partial event sequences\n-are discarded because they exceed the window length. To act upon a timed out partial match one can use `TimedOutPartialMatchHandler` interface.\n-The interface is supposed to be used in a mixin style. This mean you can additionally implement this interface with your `PatternProcessFunction`.\n-The `TimedOutPartialMatchHandler` provides the additional `processTimedOutMatch` method which will be called for every timed out partial match.\n+\u5f53\u4e00\u4e2a\u6a21\u5f0f\u4e0a\u901a\u8fc7`within`\u52a0\u4e0a\u7a97\u53e3\u957f\u5ea6\u540e\uff0c\u90e8\u5206\u5339\u914d\u7684\u4e8b\u4ef6\u5e8f\u5217\u5c31\u53ef\u80fd\u56e0\u4e3a\u8d85\u8fc7\u7a97\u53e3\u957f\u5ea6\u800c\u88ab\u4e22\u5f03\u3002\u53ef\u4ee5\u4f7f\u7528`TimedOutPartialMatchHandler`\u63a5\u53e3\n+\u6765\u5904\u7406\u8d85\u65f6\u7684\u90e8\u5206\u5339\u914d\u3002\u8fd9\u4e2a\u63a5\u53e3\u53ef\u4ee5\u548c\u5176\u5b83\u7684\u6df7\u5408\u4f7f\u7528\u3002\u4e5f\u5c31\u662f\u8bf4\u4f60\u53ef\u4ee5\u5728\u81ea\u5df1\u7684`PatternProcessFunction`\u91cc\u53e6\u5916\u5b9e\u73b0\u8fd9\u4e2a\u63a5\u53e3\u3002\n+`TimedOutPartialMatchHandler`\u63d0\u4f9b\u4e86\u53e6\u5916\u7684`processTimedOutMatch`\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5bf9\u6bcf\u4e2a\u8d85\u65f6\u7684\u90e8\u5206\u5339\u914d\u90fd\u5bf9\u8c03\u7528\u3002", "originalCommit": "76146c2111a47b68765168064b4d1dd90448789c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNTYxNA==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387435614", "bodyText": "done", "author": "shuai-xu", "createdAt": "2020-03-04T03:49:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0MTg3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0MjcxMA==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387042710", "bodyText": "\u4e8b\u4ef6\u6233 -> \u65f6\u95f4\u6233", "author": "dianfu", "createdAt": "2020-03-03T14:10:12Z", "path": "docs/dev/libs/cep.zh.md", "diffHunk": "@@ -1598,17 +1554,17 @@ val timeoutResult: DataStream[TimeoutEvent] = result.getSideOutput(outputTag)\n </div>\n </div>\n \n-## Time in CEP library\n+## CEP\u5e93\u4e2d\u7684\u65f6\u95f4\n \n-### Handling Lateness in Event Time\n+### \u6309\u7167\u4e8b\u4ef6\u65f6\u95f4\u5904\u7406\u665a\u5230\u4e8b\u4ef6\n \n-In `CEP` the order in which elements are processed matters. To guarantee that elements are processed in the correct order when working in event time, an incoming element is initially put in a buffer where elements are *sorted in ascending order based on their timestamp*, and when a watermark arrives, all the elements in this buffer with timestamps smaller than that of the watermark are processed. This implies that elements between watermarks are processed in event-time order.\n+\u5728`CEP`\u4e2d\uff0c\u4e8b\u4ef6\u7684\u5904\u7406\u987a\u5e8f\u5f88\u91cd\u8981\u3002\u5728\u4f7f\u7528\u4e8b\u4ef6\u65f6\u95f4\u65f6\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u4e8b\u4ef6\u6309\u7167\u6b63\u786e\u7684\u987a\u5e8f\u88ab\u5904\u7406\uff0c\u4e00\u4e2a\u4e8b\u4ef6\u5230\u6765\u540e\u4f1a\u5148\u88ab\u653e\u5230\u4e00\u4e2a\u7f13\u51b2\u533a\u4e2d\uff0c\n+\u5728\u7f13\u51b2\u533a\u91cc\u4e8b\u4ef6\u90fd\u6309\u7167\u65f6\u95f4\u6233\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5f53\u6c34\u4f4d\u7ebf\u5230\u8fbe\u540e\uff0c\u7f13\u51b2\u533a\u4e2d\u6240\u6709\u5c0f\u4e8e\u6c34\u4f4d\u7ebf\u7684\u4e8b\u4ef6\u88ab\u5904\u7406\u3002\u8fd9\u610f\u5473\u8fd9\u6c34\u4f4d\u7ebf\u4e4b\u95f4\u7684\u6570\u636e\u90fd\u6309\u7167\u4e8b\u4ef6\u6233\u88ab\u987a\u5e8f\u5904\u7406\u3002", "originalCommit": "76146c2111a47b68765168064b4d1dd90448789c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNTYwNA==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387435604", "bodyText": "done", "author": "shuai-xu", "createdAt": "2020-03-04T03:49:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0MjcxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA1ODY4OA==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387058688", "bodyText": "and -> \u548c", "author": "dianfu", "createdAt": "2020-03-03T14:33:57Z", "path": "docs/dev/libs/cep.zh.md", "diffHunk": "@@ -1750,31 +1704,25 @@ val alerts = patternStream.select(createAlert(_))\n </div>\n </div>\n \n-## Migrating from an older Flink version(pre 1.3)\n+## \u4ece\u65e7\u7248\u672c\u8fc1\u79fb\uff081.3\u4e4b\u524d\uff09\n \n-### Migrating to 1.4+\n+### \u8fc1\u79fb\u52301.4+\n \n-In Flink-1.4 the backward compatibility of CEP library with <= Flink 1.2 was dropped. Unfortunately \n-it is not possible to restore a CEP job that was once run with 1.2.x\n+\u5728Flink-1.4\u653e\u5f03\u4e86\u548c<= Flink 1.2\u7248\u672c\u7684\u517c\u5bb9\u6027\u3002\u5f88\u4e0d\u5e78\uff0c\u4e0d\u80fd\u518d\u6062\u590d\u75281.2.x\u8fd0\u884c\u8fc7\u7684CEP\u4f5c\u4e1a\u3002\n \n-### Migrating to 1.3.x\n+### \u8fc1\u79fb\u52301.3.x\n \n-The CEP library in Flink-1.3 ships with a number of new features which have led to some changes in the API. Here we\n-describe the changes that you need to make to your old CEP jobs, in order to be able to run them with Flink-1.3. After\n-making these changes and recompiling your job, you will be able to resume its execution from a savepoint taken with the\n-old version of your job, *i.e.* without having to re-process your past data.\n+CEP\u5e93\u5728Flink-1.3\u53d1\u5e03\u7684\u4e00\u7cfb\u5217\u7684\u65b0\u7279\u6027\u5f15\u5165\u4e86\u4e00\u4e9bAPI\u4e0a\u7684\u4fee\u6539\u3002\u8fd9\u91cc\u6211\u4eec\u63cf\u8ff0\u4f60\u9700\u8981\u5bf9\u65e7\u7684CEP\u4f5c\u4e1a\u6240\u505a\u7684\u4fee\u6539\uff0c\u4ee5\u80fd\u591f\u7528Flink-1.3\u6765\u8fd0\u884c\u5b83\u4eec\u3002\n+\u5728\u505a\u5b8c\u8fd9\u4e9b\u4fee\u6539\u5e76\u91cd\u65b0\u7f16\u8bd1\u4f60\u7684\u4f5c\u4e1a\u4e4b\u540e\uff0c\u53ef\u4ee5\u4ece\u65e7\u7248\u672c\u4f5c\u4e1a\u7684\u4fdd\u5b58\u70b9\u4e4b\u540e\u7ee7\u7eed\u8fd0\u884c\uff0c*\u4e5f\u5c31\u662f\u8bf4*\u4e0d\u9700\u8981\u518d\u91cd\u65b0\u5904\u7406\u65e7\u7684\u6570\u636e\u3002\n \n-The changes required are:\n+\u9700\u8981\u7684\u4fee\u6539\u662f\uff1a\n \n-1. Change your conditions (the ones in the `where(...)` clause) to extend the `SimpleCondition` class instead of\n-implementing the `FilterFunction` interface.\n+1. \u4fee\u6539\u4f60\u7684\u6761\u4ef6\uff08\u5728`where(...)`\u8bed\u53e5\u4e2d\u7684\uff09\u6765\u7ee7\u627f`SimpleCondition`\u7c7b\u800c\u4e0d\u662f\u5b9e\u73b0`FilterFunction`\u63a5\u53e3\u3002\n \n-2. Change your functions provided as arguments to the `select(...)` and `flatSelect(...)` methods to expect a list of\n-events associated with each pattern (`List` in `Java`, `Iterable` in `Scala`). This is because with the addition of\n-the looping patterns, multiple input events can match a single (looping) pattern.\n+2. \u4fee\u6539\u4f60\u4f5c\u4e3a`select(...)`\u548c`flatSelect(...)`\u65b9\u6cd5\u7684\u53c2\u6570\u7684\u51fd\u6570\u4e3a\u671f\u671b\u6bcf\u4e2a\u6a21\u5f0f\u5173\u8054\u4e00\u4e2a\u4e8b\u4ef6\u5217\u8868\uff08`Java`\u4e2d`List`\uff0c`Scala`\u4e2d`Iterable`\uff09\u3002\n+\u8fd9\u662f\u56e0\u4e3a\u589e\u52a0\u4e86\u5faa\u73af\u6a21\u5f0f\u540e\uff0c\u591a\u4e2a\u4e8b\u4ef6\u53ef\u80fd\u5339\u914d\u4e00\u4e2a\u5355\u4e00\u7684\uff08\u5faa\u73af\uff09\u6a21\u5f0f\u3002\n \n-3. The `followedBy()` in Flink 1.1 and 1.2 implied `non-deterministic relaxed contiguity` (see\n-[here](#conditions-on-contiguity)). In Flink 1.3 this has changed and `followedBy()` implies `relaxed contiguity`,\n-while `followedByAny()` should be used if `non-deterministic relaxed contiguity` is required.\n+3. \u5728Flink 1.1\u548c1.2\u4e2d\uff0c`followedBy()` in Flink 1.1 and 1.2\u9690\u542b\u4e86`\u4e0d\u786e\u5b9a\u7684\u677e\u6563\u8fde\u7eed` (\u53c2\u89c1[\u8fd9\u91cc](#\u7ec4\u5408\u6a21\u5f0f))\u3002", "originalCommit": "76146c2111a47b68765168064b4d1dd90448789c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNTU5NA==", "url": "https://github.com/apache/flink/pull/11168#discussion_r387435594", "bodyText": "done", "author": "shuai-xu", "createdAt": "2020-03-04T03:49:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA1ODY4OA=="}], "type": "inlineReview"}, {"oid": "829770f1ca71973e386bf808fd6b9d813179061b", "url": "https://github.com/apache/flink/commit/829770f1ca71973e386bf808fd6b9d813179061b", "message": "address some typos", "committedDate": "2020-03-04T04:26:27Z", "type": "commit"}]}