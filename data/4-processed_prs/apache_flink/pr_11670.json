{"pr_number": 11670, "pr_title": "[FLINK-16761][python]Return JobExecutionResult for Python ExecutionEnvironment and TableEnvironment", "pr_createdAt": "2020-04-08T12:27:00Z", "pr_url": "https://github.com/apache/flink/pull/11670", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3MDIyMQ==", "url": "https://github.com/apache/flink/pull/11670#discussion_r405970221", "bodyText": "Also add this class in the __init__.py file under common folder.", "author": "hequn8128", "createdAt": "2020-04-09T05:50:47Z", "path": "flink-python/pyflink/common/job_execution_result.py", "diffHunk": "@@ -0,0 +1,93 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+\n+__all__ = ['JobExecutionResult']\n+\n+\n+class JobExecutionResult(object):", "originalCommit": "8fb1f48213ccb2ddcda1651388253dec83cb0234", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3MzQ1Nw==", "url": "https://github.com/apache/flink/pull/11670#discussion_r405973457", "bodyText": "Add to_string method.", "author": "hequn8128", "createdAt": "2020-04-09T06:01:45Z", "path": "flink-python/pyflink/common/job_execution_result.py", "diffHunk": "@@ -0,0 +1,93 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+\n+__all__ = ['JobExecutionResult']\n+\n+\n+class JobExecutionResult(object):", "originalCommit": "8fb1f48213ccb2ddcda1651388253dec83cb0234", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3NTM4OA==", "url": "https://github.com/apache/flink/pull/11670#discussion_r405975388", "bodyText": "It is strange to pass a java desired_unit here. I think it's ok to remove the desired_unit in Python and always return the net execution time in milliseconds. What do you think?", "author": "hequn8128", "createdAt": "2020-04-09T06:08:04Z", "path": "flink-python/pyflink/common/job_execution_result.py", "diffHunk": "@@ -0,0 +1,93 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+\n+__all__ = ['JobExecutionResult']\n+\n+\n+class JobExecutionResult(object):\n+    \"\"\"\n+    The result of a job execution. Gives access to the execution time of the job,\n+    and to all accumulators created by this job.\n+    \"\"\"\n+\n+    def __init__(self, j_job_execution_result):\n+        self._j_job_execution_result = j_job_execution_result\n+\n+    def get_job_id(self):\n+        \"\"\"\n+        Returns the JobID assigned to the job by the Flink runtime.\n+\n+        :return: JobID, or null if the job has been executed on a runtime without JobIDs or if the execution failed.\n+        \"\"\"\n+        return self._j_job_execution_result.getJobID()\n+\n+    def is_job_execution_result(self):\n+        \"\"\"\n+        Checks if this JobSubmissionResult is also a JobExecutionResult.\n+\n+        .. seealso:: :func:`get_job_execution_result` to retrieve the JobExecutionResult.\n+\n+        :return: ``True`` if this is a JobExecutionResult, ``False`` otherwise.\n+        \"\"\"\n+        return self._j_job_execution_result.isJobExecutionResult()\n+\n+    def get_job_execution_result(self):\n+        \"\"\"\n+        Returns the JobExecutionResult if available.\n+\n+        :throws: Exception if this is not a JobExecutionResult.\n+        :return: The JobExecutionResult.\n+        \"\"\"\n+        return self\n+\n+    def get_net_runtime(self, desired_unit=None):", "originalCommit": "8fb1f48213ccb2ddcda1651388253dec83cb0234", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MDQ1Mg==", "url": "https://github.com/apache/flink/pull/11670#discussion_r405980452", "bodyText": "_j_job_execution_result.get_all_accumulator_results() => _j_job_execution_result.getAllAccumulatorResults().\nIt's better to add tests to verify all the methods in this class.", "author": "hequn8128", "createdAt": "2020-04-09T06:23:46Z", "path": "flink-python/pyflink/common/job_execution_result.py", "diffHunk": "@@ -0,0 +1,93 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+\n+__all__ = ['JobExecutionResult']\n+\n+\n+class JobExecutionResult(object):\n+    \"\"\"\n+    The result of a job execution. Gives access to the execution time of the job,\n+    and to all accumulators created by this job.\n+    \"\"\"\n+\n+    def __init__(self, j_job_execution_result):\n+        self._j_job_execution_result = j_job_execution_result\n+\n+    def get_job_id(self):\n+        \"\"\"\n+        Returns the JobID assigned to the job by the Flink runtime.\n+\n+        :return: JobID, or null if the job has been executed on a runtime without JobIDs or if the execution failed.\n+        \"\"\"\n+        return self._j_job_execution_result.getJobID()\n+\n+    def is_job_execution_result(self):\n+        \"\"\"\n+        Checks if this JobSubmissionResult is also a JobExecutionResult.\n+\n+        .. seealso:: :func:`get_job_execution_result` to retrieve the JobExecutionResult.\n+\n+        :return: ``True`` if this is a JobExecutionResult, ``False`` otherwise.\n+        \"\"\"\n+        return self._j_job_execution_result.isJobExecutionResult()\n+\n+    def get_job_execution_result(self):\n+        \"\"\"\n+        Returns the JobExecutionResult if available.\n+\n+        :throws: Exception if this is not a JobExecutionResult.\n+        :return: The JobExecutionResult.\n+        \"\"\"\n+        return self\n+\n+    def get_net_runtime(self, desired_unit=None):\n+        \"\"\"\n+        Gets the net execution time of the job, i.e., the execution time in the parallel system,\n+        without the pre-flight steps like the optimizer in a desired time unit.\n+\n+        :param desired_unit: the unit of the NetRuntime, optional.\n+        :return: The net execution time in the desired unit.\n+        \"\"\"\n+        if desired_unit is None:\n+            return self._j_job_execution_result.getNetRuntime()\n+        else:\n+            return self._j_job_execution_result.getNetRuntime(desired_unit)\n+\n+    def get_accumulator_result(self, accumulator_name):\n+        \"\"\"\n+        Gets the accumulator with the given name. Returns {@code null}, if no accumulator with\n+        that name was produced.\n+\n+        :param accumulator_name: The name of the accumulator.\n+        :return: The value of the accumulator with the given name.\n+        \"\"\"\n+        return self._j_job_execution_result.getAccumulatorResult(accumulator_name)\n+\n+    def get_all_accumulator_results(self):\n+        \"\"\"\n+        Gets all accumulators produced by the job. The map contains the accumulators as\n+        mappings from the accumulator name to the accumulator value.\n+\n+        :return: The dict which the keys are names of the accumulator and the values\n+                 are values of the accumulator produced by the job.\n+        \"\"\"\n+        j_result_map = self._j_job_execution_result.get_all_accumulator_results()", "originalCommit": "8fb1f48213ccb2ddcda1651388253dec83cb0234", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MTY3Mw==", "url": "https://github.com/apache/flink/pull/11670#discussion_r405981673", "bodyText": "There is no null type in Python, return None instead if accumulatorName does not exist in the accumulatorResults", "author": "hequn8128", "createdAt": "2020-04-09T06:27:10Z", "path": "flink-python/pyflink/common/job_execution_result.py", "diffHunk": "@@ -0,0 +1,93 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+\n+__all__ = ['JobExecutionResult']\n+\n+\n+class JobExecutionResult(object):\n+    \"\"\"\n+    The result of a job execution. Gives access to the execution time of the job,\n+    and to all accumulators created by this job.\n+    \"\"\"\n+\n+    def __init__(self, j_job_execution_result):\n+        self._j_job_execution_result = j_job_execution_result\n+\n+    def get_job_id(self):\n+        \"\"\"\n+        Returns the JobID assigned to the job by the Flink runtime.\n+\n+        :return: JobID, or null if the job has been executed on a runtime without JobIDs or if the execution failed.\n+        \"\"\"\n+        return self._j_job_execution_result.getJobID()\n+\n+    def is_job_execution_result(self):\n+        \"\"\"\n+        Checks if this JobSubmissionResult is also a JobExecutionResult.\n+\n+        .. seealso:: :func:`get_job_execution_result` to retrieve the JobExecutionResult.\n+\n+        :return: ``True`` if this is a JobExecutionResult, ``False`` otherwise.\n+        \"\"\"\n+        return self._j_job_execution_result.isJobExecutionResult()\n+\n+    def get_job_execution_result(self):\n+        \"\"\"\n+        Returns the JobExecutionResult if available.\n+\n+        :throws: Exception if this is not a JobExecutionResult.\n+        :return: The JobExecutionResult.\n+        \"\"\"\n+        return self\n+\n+    def get_net_runtime(self, desired_unit=None):\n+        \"\"\"\n+        Gets the net execution time of the job, i.e., the execution time in the parallel system,\n+        without the pre-flight steps like the optimizer in a desired time unit.\n+\n+        :param desired_unit: the unit of the NetRuntime, optional.\n+        :return: The net execution time in the desired unit.\n+        \"\"\"\n+        if desired_unit is None:\n+            return self._j_job_execution_result.getNetRuntime()\n+        else:\n+            return self._j_job_execution_result.getNetRuntime(desired_unit)\n+\n+    def get_accumulator_result(self, accumulator_name):\n+        \"\"\"\n+        Gets the accumulator with the given name. Returns {@code null}, if no accumulator with", "originalCommit": "8fb1f48213ccb2ddcda1651388253dec83cb0234", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "67026e1df0e3c6d4805f66d9e8152e14d5483968", "url": "https://github.com/apache/flink/commit/67026e1df0e3c6d4805f66d9e8152e14d5483968", "message": "[FLINK-16761][python] Return JobExecutionResult for Python ExecutionEnvironment and TableEnvironment", "committedDate": "2020-04-10T06:54:48Z", "type": "forcePushed"}, {"oid": "75f42f5ac29f8742a61d18bc5560764a61d958ed", "url": "https://github.com/apache/flink/commit/75f42f5ac29f8742a61d18bc5560764a61d958ed", "message": "[FLINK-16761][python] Return JobExecutionResult for Python ExecutionEnvironment and TableEnvironment", "committedDate": "2020-04-10T06:59:11Z", "type": "forcePushed"}, {"oid": "6e737ceac139b698fd57719068ec9640d1ec78a7", "url": "https://github.com/apache/flink/commit/6e737ceac139b698fd57719068ec9640d1ec78a7", "message": "[FLINK-16761][python]Return JobExecutionResult for Python ExecutionEnvironment and TableEnvironment", "committedDate": "2020-04-10T07:01:12Z", "type": "forcePushed"}, {"oid": "c12d282f260effdc59c56089664f2e5c12aba16a", "url": "https://github.com/apache/flink/commit/c12d282f260effdc59c56089664f2e5c12aba16a", "message": "[FLINK-16761][python]Return JobExecutionResult for Python ExecutionEnvironment and TableEnvironment#", "committedDate": "2020-04-10T13:35:33Z", "type": "commit"}, {"oid": "c12d282f260effdc59c56089664f2e5c12aba16a", "url": "https://github.com/apache/flink/commit/c12d282f260effdc59c56089664f2e5c12aba16a", "message": "[FLINK-16761][python]Return JobExecutionResult for Python ExecutionEnvironment and TableEnvironment#", "committedDate": "2020-04-10T13:35:33Z", "type": "forcePushed"}]}