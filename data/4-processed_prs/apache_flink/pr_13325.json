{"pr_number": 13325, "pr_title": "[FLINK-15974][python] Support to use the Python UDF directly in the Python Table API", "pr_createdAt": "2020-09-04T05:32:17Z", "pr_url": "https://github.com/apache/flink/pull/13325", "timeline": [{"oid": "26abf1ecf936d0232c6d49c0bdd4fe3beae6252e", "url": "https://github.com/apache/flink/commit/26abf1ecf936d0232c6d49c0bdd4fe3beae6252e", "message": "[FLINK-15974][python] Support to use the Python UDF directly in the Python Table API", "committedDate": "2020-09-04T05:28:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQxMTkxMw==", "url": "https://github.com/apache/flink/pull/13325#discussion_r483411913", "bodyText": "Can be replaced by pyflink.util.utils.load_java_class()?", "author": "WeiZhong94", "createdAt": "2020-09-04T06:23:54Z", "path": "flink-python/pyflink/table/expressions.py", "diffHunk": "@@ -538,9 +538,44 @@ def call(f: Union[str, UserDefinedFunctionWrapper], *args) -> Expression:\n     :param args: parameters of the user-defined function.\n     \"\"\"\n     gateway = get_gateway()\n-    return Expression(gateway.jvm.Expressions.call(\n-        f if isinstance(f, str) else f.java_user_defined_function(),\n-        to_jarray(gateway.jvm.Object, [_get_java_expression(arg) for arg in args])))\n+\n+    if isinstance(f, str):\n+        return Expression(gateway.jvm.Expressions.call(\n+            f, to_jarray(gateway.jvm.Object, [_get_java_expression(arg) for arg in args])))\n+\n+    def get_function_definition(f):\n+        if isinstance(f, UserDefinedTableFunctionWrapper):\n+            \"\"\"\n+            TypeInference was not supported for TableFunction in the old planner. Use\n+            TableFunctionDefinition to work around this issue.\n+            \"\"\"\n+            j_result_types = to_jarray(gateway.jvm.TypeInformation,\n+                                       [_to_java_type(i) for i in f._result_types])\n+            j_result_type = gateway.jvm.org.apache.flink.api.java.typeutils.RowTypeInfo(\n+                j_result_types)\n+            return gateway.jvm.org.apache.flink.table.functions.TableFunctionDefinition(\n+                'f', f.java_user_defined_function(), j_result_type)\n+        else:\n+            return f.java_user_defined_function()\n+\n+    expressions_clz = gateway.jvm.Class \\", "originalCommit": "26abf1ecf936d0232c6d49c0bdd4fe3beae6252e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQxNzkxNg==", "url": "https://github.com/apache/flink/pull/13325#discussion_r483417916", "bodyText": "add a type hint?", "author": "WeiZhong94", "createdAt": "2020-09-04T06:39:55Z", "path": "flink-python/pyflink/table/udf.py", "diffHunk": "@@ -184,6 +184,10 @@ def __init__(self, func, input_types, deterministic=None, name=None):\n         self._deterministic = deterministic if deterministic is not None else (\n             func.is_deterministic() if isinstance(func, UserDefinedFunction) else True)\n \n+    def __call__(self, *args):", "originalCommit": "26abf1ecf936d0232c6d49c0bdd4fe3beae6252e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6f65076badbf59b1ded4e7778a0349d489138e7f", "url": "https://github.com/apache/flink/commit/6f65076badbf59b1ded4e7778a0349d489138e7f", "message": "address review", "committedDate": "2020-09-04T06:47:48Z", "type": "commit"}]}