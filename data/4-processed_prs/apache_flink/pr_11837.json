{"pr_number": 11837, "pr_title": "[FLINK-16160][table-planner-blink] Fix proctime()/rowtime() doesn't w\u2026", "pr_createdAt": "2020-04-21T04:32:18Z", "pr_url": "https://github.com/apache/flink/pull/11837", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2OTU1NQ==", "url": "https://github.com/apache/flink/pull/11837#discussion_r413469555", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tOptional<TableSource> sourceOpt = findAndCreateTableSource(new TableConfig().getConfiguration());\n          \n          \n            \n            \t\tOptional<TableSource<?>> sourceOpt = findAndCreateTableSource(new TableConfig().getConfiguration());\n          \n      \n    \n    \n  \n\nAdd <?> to TableSource to avoid IDEA warning.", "author": "wuchong", "createdAt": "2020-04-23T02:50:02Z", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/catalog/CatalogSchemaTable.java", "diffHunk": "@@ -153,6 +166,27 @@ private static RelDataType getRowType(RelDataTypeFactory typeFactory,\n \t\t\t\t}\n \t\t\t}\n \t\t}\n+\n+\t\t// The following block is a workaround to support tables defined by TableEnvironment.connect() and\n+\t\t// the actual table sources implement DefinedProctimeAttribute/DefinedRowtimeAttributes.\n+\t\t// It should be removed after we remove DefinedProctimeAttribute/DefinedRowtimeAttributes.\n+\t\tOptional<TableSource> sourceOpt = findAndCreateTableSource(new TableConfig().getConfiguration());", "originalCommit": "38df357bc5c54d93159c2d460833cf80c42b5e0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3MTU3Nw==", "url": "https://github.com/apache/flink/pull/11837#discussion_r413471577", "bodyText": "If the ReadableConfig is always an empty configuration. Please remove the parameter and construct in the findAndCreateTableSource method with a comment to explain why we use an empty configuration.", "author": "wuchong", "createdAt": "2020-04-23T02:55:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2OTU1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3MDg2MA==", "url": "https://github.com/apache/flink/pull/11837#discussion_r413470860", "bodyText": "Add a hasProctimeAttribute to TableSourceValidation and the condition can be simplified into\nif (hasRowtimeAttribute(source) && hasProctimeAttribute(source))", "author": "wuchong", "createdAt": "2020-04-23T02:53:45Z", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/catalog/CatalogSchemaTable.java", "diffHunk": "@@ -153,6 +166,27 @@ private static RelDataType getRowType(RelDataTypeFactory typeFactory,\n \t\t\t\t}\n \t\t\t}\n \t\t}\n+\n+\t\t// The following block is a workaround to support tables defined by TableEnvironment.connect() and\n+\t\t// the actual table sources implement DefinedProctimeAttribute/DefinedRowtimeAttributes.\n+\t\t// It should be removed after we remove DefinedProctimeAttribute/DefinedRowtimeAttributes.\n+\t\tOptional<TableSource> sourceOpt = findAndCreateTableSource(new TableConfig().getConfiguration());\n+\t\tif (tableSchema.getTableColumns().stream().noneMatch(TableColumn::isGenerated)\n+\t\t\t&& tableSchema.getWatermarkSpecs().isEmpty()\n+\t\t\t&& sourceOpt.isPresent()) {\n+\t\t\tTableSource source = sourceOpt.get();\n+\t\t\tif ((source instanceof DefinedProctimeAttribute\n+\t\t\t\t\t&& ((DefinedProctimeAttribute) source).getProctimeAttribute() != null)\n+\t\t\t\t\t||\n+\t\t\t\t\t(source instanceof DefinedRowtimeAttributes\n+\t\t\t\t\t\t\t&& ((DefinedRowtimeAttributes) source).getRowtimeAttributeDescriptors() != null\n+\t\t\t\t\t\t\t&& !((DefinedRowtimeAttributes) source).getRowtimeAttributeDescriptors().isEmpty())) {", "originalCommit": "38df357bc5c54d93159c2d460833cf80c42b5e0c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3NjAyMw==", "url": "https://github.com/apache/flink/pull/11837#discussion_r413476023", "bodyText": "Add isStreamingMode into this condition, and findAndCreateTableSource  when the condition is satisfied.", "author": "wuchong", "createdAt": "2020-04-23T03:09:29Z", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/catalog/CatalogSchemaTable.java", "diffHunk": "@@ -153,6 +166,27 @@ private static RelDataType getRowType(RelDataTypeFactory typeFactory,\n \t\t\t\t}\n \t\t\t}\n \t\t}\n+\n+\t\t// The following block is a workaround to support tables defined by TableEnvironment.connect() and\n+\t\t// the actual table sources implement DefinedProctimeAttribute/DefinedRowtimeAttributes.\n+\t\t// It should be removed after we remove DefinedProctimeAttribute/DefinedRowtimeAttributes.\n+\t\tOptional<TableSource> sourceOpt = findAndCreateTableSource(new TableConfig().getConfiguration());\n+\t\tif (tableSchema.getTableColumns().stream().noneMatch(TableColumn::isGenerated)\n+\t\t\t&& tableSchema.getWatermarkSpecs().isEmpty()", "originalCommit": "38df357bc5c54d93159c2d460833cf80c42b5e0c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3NjU3NQ==", "url": "https://github.com/apache/flink/pull/11837#discussion_r413476575", "bodyText": "val legacyTimeAttributeDefined = hasRowtimeAttribute(source) && hasProctimeAttribute(source)", "author": "wuchong", "createdAt": "2020-04-23T03:11:19Z", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/schema/CatalogSourceTable.scala", "diffHunk": "@@ -210,20 +208,37 @@ class CatalogSourceTable[T](\n    */\n   private def eraseTimeIndicator(\n       relDataType: RelDataType,\n-      factory: FlinkTypeFactory): RelDataType = {\n-    val logicalRowType = FlinkTypeFactory.toLogicalRowType(relDataType)\n-    val fieldNames = logicalRowType.getFieldNames\n-    val fieldTypes = logicalRowType.getFields.map { f =>\n-      if (FlinkTypeFactory.isTimeIndicatorType(f.getType)) {\n-        val timeIndicatorType = f.getType.asInstanceOf[TimestampType]\n-        new TimestampType(\n-          timeIndicatorType.isNullable,\n-          TimestampKind.REGULAR,\n-          timeIndicatorType.getPrecision)\n-      } else {\n-        f.getType\n+      factory: FlinkTypeFactory,\n+      tableSource: TableSource[_]): RelDataType = {\n+    val isLegacySource = tableSource match {\n+      case rts: DefinedRowtimeAttributes\n+        if (rts.getRowtimeAttributeDescriptors != null\n+          && rts.getRowtimeAttributeDescriptors.nonEmpty) =>\n+        true\n+      case pts: DefinedProctimeAttribute if pts.getProctimeAttribute != null =>\n+         true\n+      case _ => false\n+    }", "originalCommit": "38df357bc5c54d93159c2d460833cf80c42b5e0c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3NzA3Ng==", "url": "https://github.com/apache/flink/pull/11837#discussion_r413477076", "bodyText": "Can we have a dedicated descriptor for TestTableSourceWithTime? This code looks confusing.", "author": "wuchong", "createdAt": "2020-04-23T03:13:03Z", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/plan/stream/sql/TableSourceTest.scala", "diffHunk": "@@ -130,6 +131,60 @@ class TableSourceTest extends TableTestBase {\n     util.verifyPlan(sqlQuery)\n   }\n \n+\n+  @Test\n+  def testLegacyRowTimeTableGroupWindow(): Unit = {\n+    util.tableEnv.connect(new ConnectorDescriptor(\"TestTableSourceWithTime\", 1, false) {\n+      override protected def toConnectorProperties: JMap[String, String] = {\n+        Collections.emptyMap()\n+      }", "originalCommit": "38df357bc5c54d93159c2d460833cf80c42b5e0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1NDE3Mw==", "url": "https://github.com/apache/flink/pull/11837#discussion_r414254173", "bodyText": "I don't think so. A dedicated descriptor for every custom table source is wasteful and should be avoid. Maybe we can use CustomConnectorDescriptor after we port it in FLINK-16029?", "author": "docete", "createdAt": "2020-04-24T02:52:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3NzA3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1NTUwMQ==", "url": "https://github.com/apache/flink/pull/11837#discussion_r414255501", "bodyText": "Introducing a generic connector descriptor is another topic, and I'm concerned CustomConnectorDescriptor is not easy-to-use enough.\nMaybe we can introduce a general TestConnectorDescriptor in tests.", "author": "wuchong", "createdAt": "2020-04-24T02:56:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3NzA3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3NzM4Nw==", "url": "https://github.com/apache/flink/pull/11837#discussion_r413477387", "bodyText": "remove empty line?", "author": "wuchong", "createdAt": "2020-04-23T03:14:02Z", "path": "flink-table/flink-table-planner-blink/src/test/resources/META-INF/services/org.apache.flink.table.factories.TableFactory", "diffHunk": "@@ -20,3 +20,5 @@ org.apache.flink.table.planner.utils.TestFilterableTableSourceFactory\n org.apache.flink.table.planner.utils.TestProjectableTableSourceFactory\n org.apache.flink.table.planner.utils.TestCsvFileSystemFormatFactory\n org.apache.flink.table.planner.utils.TestOptionsTableFactory\n+", "originalCommit": "38df357bc5c54d93159c2d460833cf80c42b5e0c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3ODU2OQ==", "url": "https://github.com/apache/flink/pull/11837#discussion_r413478569", "bodyText": "Why the returnType is null? Use tableSchema.toRowType ?", "author": "wuchong", "createdAt": "2020-04-23T03:17:48Z", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/utils/testTableSourceSinks.scala", "diffHunk": "@@ -200,6 +199,65 @@ class TestTableSourceWithTime[T](\n   }\n }\n \n+class TestTableSourceWithTimeFactory[T] extends StreamTableSourceFactory[T] {\n+  override def createStreamTableSource(properties: JMap[String, String]): StreamTableSource[T] = {\n+    val dp = new DescriptorProperties()\n+    dp.putProperties(properties)\n+\n+    val isBounded = dp.getOptionalBoolean(\"is-bounded\").orElse(false)\n+    val tableSchema = dp.getTableSchema(Schema.SCHEMA)\n+    val serializedData = dp.getOptionalString(\"data\").orElse(null)\n+    val data = if (serializedData != null) {\n+      EncodingUtils.decodeStringToObject(serializedData, classOf[List[T]])\n+    } else {\n+      Seq.empty[T]\n+    }\n+    val rowtimeAttributes = SchemaValidator.deriveRowtimeAttributes(dp)\n+    val rowtime = if (rowtimeAttributes.isEmpty) {\n+      null\n+    } else {\n+      rowtimeAttributes.head.getAttributeName\n+    }\n+    val proctimeAttribute = SchemaValidator.deriveProctimeAttribute(dp)\n+    val proctime = if (proctimeAttribute.isPresent) {\n+      proctimeAttribute.get()\n+    } else {\n+      null\n+    }\n+\n+    val serializedMapKeys = dp.getOptionalString(\"map-keys\").orElse(null)\n+    val serializedMapVals = dp.getOptionalString(\"map-vals\").orElse(null)\n+    val mapping = if (serializedMapKeys != null && serializedMapVals != null) {\n+      val mapKeys = EncodingUtils.decodeStringToObject(serializedMapKeys, classOf[List[String]])\n+      val mapVals = EncodingUtils.decodeStringToObject(serializedMapVals, classOf[List[String]])\n+      if (mapKeys.length != mapVals.length) {\n+        null\n+      } else {\n+        mapKeys.zip(mapVals).toMap\n+      }\n+    } else {\n+      null\n+    }\n+\n+    val existingTs = dp.getOptionalString(\"existingTs\").orElse(null)\n+\n+    new TestTableSourceWithTime[T](\n+      isBounded, tableSchema, null, data, rowtime, proctime, mapping, existingTs)", "originalCommit": "38df357bc5c54d93159c2d460833cf80c42b5e0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3OTQ4Mg==", "url": "https://github.com/apache/flink/pull/11837#discussion_r413479482", "bodyText": "If we only use this for planning, do you need to support extracting the data and mapping and existingTs ?", "author": "wuchong", "createdAt": "2020-04-23T03:20:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3ODU2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1MTc1OA==", "url": "https://github.com/apache/flink/pull/11837#discussion_r414251758", "bodyText": "the TestTableSourceWithTime also used for ITs. IMO the factory should be for general use for all TestTableSourceWithTime cases and should support data, mapping and existingTs.", "author": "docete", "createdAt": "2020-04-24T02:45:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3ODU2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1NDI3NQ==", "url": "https://github.com/apache/flink/pull/11837#discussion_r414254275", "bodyText": "Then, please add IT cases which uses these properties. Otherwise, it's hard to know whether this code is correct.", "author": "wuchong", "createdAt": "2020-04-24T02:53:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3ODU2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0Mjg0MQ==", "url": "https://github.com/apache/flink/pull/11837#discussion_r414342841", "bodyText": "See TableScanITCase#testProctimeTableSource()\nIt should use this factory after we remove tableEnv.registerTableSource()", "author": "docete", "createdAt": "2020-04-24T07:02:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3ODU2OQ=="}], "type": "inlineReview"}, {"oid": "b62fcd03a583ef204f21a313f6969c8aaa4ee61d", "url": "https://github.com/apache/flink/commit/b62fcd03a583ef204f21a313f6969c8aaa4ee61d", "message": "fixup: use CustomConnectorDescriptor in the added tests", "committedDate": "2020-05-08T03:56:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwNzY4NA==", "url": "https://github.com/apache/flink/pull/11837#discussion_r424207684", "bodyText": "Not used. Remove?", "author": "wuchong", "createdAt": "2020-05-13T06:47:40Z", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/sources/TableSourceUtil.scala", "diffHunk": "@@ -303,6 +303,28 @@ object TableSourceUtil {\n     expr\n   }\n \n+  /** Returns whether a table source defines rowtime attributes in legacy way **/\n+  def hasRowtimeAttributes(tableSource: TableSource[_]): Boolean = {", "originalCommit": "b62fcd03a583ef204f21a313f6969c8aaa4ee61d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwNzc0Mg==", "url": "https://github.com/apache/flink/pull/11837#discussion_r424207742", "bodyText": "Not used. Remove?", "author": "wuchong", "createdAt": "2020-05-13T06:47:48Z", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/sources/TableSourceUtil.scala", "diffHunk": "@@ -303,6 +303,28 @@ object TableSourceUtil {\n     expr\n   }\n \n+  /** Returns whether a table source defines rowtime attributes in legacy way **/\n+  def hasRowtimeAttributes(tableSource: TableSource[_]): Boolean = {\n+    tableSource match {\n+      case ts: DefinedRowtimeAttributes\n+        if ts.getRowtimeAttributeDescriptors != null\n+          && ts.getRowtimeAttributeDescriptors.nonEmpty =>\n+        true\n+      case _ =>\n+        false\n+    }\n+  }\n+\n+  /** Returns whether a table source defines proctime attribute in legacy way **/\n+  def hasProctimeAttribute(tableSource: TableSource[_]): Boolean = {", "originalCommit": "b62fcd03a583ef204f21a313f6969c8aaa4ee61d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "75489d25f5a00957a2bbae1ed3a80c13c22a8e53", "url": "https://github.com/apache/flink/commit/75489d25f5a00957a2bbae1ed3a80c13c22a8e53", "message": "fixup: rebase", "committedDate": "2020-05-15T01:56:35Z", "type": "forcePushed"}, {"oid": "d1d16a0c0d9e8b01c6bbf4d39374d25911373f07", "url": "https://github.com/apache/flink/commit/d1d16a0c0d9e8b01c6bbf4d39374d25911373f07", "message": "[FLINK-16160][table-planner-blink] Fix proctime()/rowtime() doesn't work for TableEnvironment.connect().createTemporaryTable()", "committedDate": "2020-05-18T04:43:31Z", "type": "commit"}, {"oid": "d1d16a0c0d9e8b01c6bbf4d39374d25911373f07", "url": "https://github.com/apache/flink/commit/d1d16a0c0d9e8b01c6bbf4d39374d25911373f07", "message": "[FLINK-16160][table-planner-blink] Fix proctime()/rowtime() doesn't work for TableEnvironment.connect().createTemporaryTable()", "committedDate": "2020-05-18T04:43:31Z", "type": "forcePushed"}]}