{"pr_number": 11717, "pr_title": "[FLINK-17093][python][table-planner][table-planner-blink] Fix Python UDF to make it work with inputs from composite field", "pr_createdAt": "2020-04-13T12:13:03Z", "pr_url": "https://github.com/apache/flink/pull/11717", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyMzY1MQ==", "url": "https://github.com/apache/flink/pull/11717#discussion_r407923651", "bodyText": "Maybe add some document about split RexFieldAccess from PythonCorrelate for the PythonCorrelateSplitRule?", "author": "hequn8128", "createdAt": "2020-04-14T07:30:52Z", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/rules/logical/PythonCorrelateSplitRule.java", "diffHunk": "@@ -188,12 +203,20 @@ private FlinkLogicalCalc createTopCalc(\n \n \tprivate ScalarFunctionSplitter createScalarFunctionSplitter(\n \t\tint primitiveLeftFieldCount,\n-\t\tArrayBuffer<RexCall> extractedRexCalls,\n-\t\tboolean isJavaTableFunction) {\n+\t\tArrayBuffer<RexNode> extractedRexNodes,\n+\t\tRexNode tableFunctionNode) {\n \t\treturn new ScalarFunctionSplitter(\n \t\t\tprimitiveLeftFieldCount,\n-\t\t\textractedRexCalls,\n-\t\t\tisJavaTableFunction ? x -> PythonUtil.isPythonCall(x, null) : PythonUtil::isNonPythonCall\n+\t\t\textractedRexNodes,\n+\t\t\tnode -> {\n+\t\t\t\tif (PythonUtil.isNonPythonCall(tableFunctionNode)) {\n+\t\t\t\t\treturn PythonUtil.isPythonCall(node, null);\n+\t\t\t\t} else if (PythonUtil.containsNonPythonCall(node)) {\n+\t\t\t\t\treturn PythonUtil.isNonPythonCall(node);\n+\t\t\t\t} else {\n+\t\t\t\t\treturn node instanceof RexFieldAccess;", "originalCommit": "3161ea77da21b591ab76eaae3a5950ff73625971", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyNzA3MQ==", "url": "https://github.com/apache/flink/pull/11717#discussion_r407927071", "bodyText": "We don't need this method, use RexUtil.containsFieldAccess() directly.", "author": "hequn8128", "createdAt": "2020-04-14T07:37:17Z", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/rules/logical/PythonCorrelateSplitRule.java", "diffHunk": "@@ -93,22 +94,36 @@ public boolean matches(RelOptRuleCall call) {\n \t\tRexNode rexNode = tableFunctionScan.getCall();\n \t\tif (rexNode instanceof RexCall) {\n \t\t\treturn PythonUtil.isPythonCall(rexNode, null) && PythonUtil.containsNonPythonCall(rexNode)\n-\t\t\t\t|| PythonUtil.isNonPythonCall(rexNode) && PythonUtil.containsPythonCall(rexNode, null);\n+\t\t\t\t|| PythonUtil.isNonPythonCall(rexNode) && PythonUtil.containsPythonCall(rexNode, null)\n+\t\t\t\t|| (PythonUtil.isPythonCall(rexNode, null) && containsFieldAccessInputs(rexNode));\n \t\t}\n \t\treturn false;\n \t}\n \n+\tprivate boolean containsFieldAccessInputs(RexNode node) {", "originalCommit": "3161ea77da21b591ab76eaae3a5950ff73625971", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "45bcf4f957b52eb87127a524e90fed090183b640", "url": "https://github.com/apache/flink/commit/45bcf4f957b52eb87127a524e90fed090183b640", "message": "[FLINK-17093][python][table-planner][table-planner-blink] Fix Python UDF to make it work with inputs from composite field", "committedDate": "2020-04-15T03:37:22Z", "type": "commit"}, {"oid": "149cb5af388f31f874ba078b9416253d028288cf", "url": "https://github.com/apache/flink/commit/149cb5af388f31f874ba078b9416253d028288cf", "message": "address review", "committedDate": "2020-04-15T03:37:22Z", "type": "commit"}, {"oid": "149cb5af388f31f874ba078b9416253d028288cf", "url": "https://github.com/apache/flink/commit/149cb5af388f31f874ba078b9416253d028288cf", "message": "address review", "committedDate": "2020-04-15T03:37:22Z", "type": "forcePushed"}]}