{"pr_number": 12283, "pr_title": "[FLINK-16975][documentation] Add docs for FileSystem connector", "pr_createdAt": "2020-05-21T13:18:02Z", "pr_url": "https://github.com/apache/flink/pull/12283", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5Njc3MA==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429296770", "bodyText": "Is this Hadoop specific or Flink FS. Shouldn't the title just be \"FileSystem Connector\"?", "author": "sjwiesman", "createdAt": "2020-05-22T14:56:22Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5NDUwMw==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429594503", "bodyText": "It is for Flink FS, forgot to modify title.", "author": "JingsongLi", "createdAt": "2020-05-24T02:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5Njc3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5NzU1OQ==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429297559", "bodyText": "nit, i'm trying to make the docs more consistent with having a paragraph above the toc\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * This will be replaced by the TOC\n          \n          \n            \n            {:toc}\n          \n          \n            \n            \n          \n          \n            \n            This connector provides access to partitioned files in filesystems\n          \n          \n            \n            supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n          \n          \n            \n            This connector provides access to partitioned files in filesystems\n          \n          \n            \n            supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n          \n          \n            \n            \n          \n          \n            \n            * This will be replaced by the TOC\n          \n          \n            \n            {:toc}", "author": "sjwiesman", "createdAt": "2020-05-22T14:57:45Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5ODIzOQ==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429298239", "bodyText": "Please link here instead.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/internals/filesystems.html).\n          \n          \n            \n            <span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/ops/filesystems/index.html).", "author": "sjwiesman", "createdAt": "2020-05-22T14:58:57Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/internals/filesystems.html).", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5ODk1Mw==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429298953", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <span class=\"label label-danger\">Attention</span> File system sources for streaming are only experimental. In the future, we will support actual streaming use cases, i.e., partition and directory monitoring.\n          \n          \n            \n            <span class=\"label label-danger\">Attention</span> File system sources for streaming is still under development. In the future, the community will add support for common streaming use cases, i.e., partition and directory monitoring.", "author": "sjwiesman", "createdAt": "2020-05-22T15:00:06Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/internals/filesystems.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming are only experimental. In the future, we will support actual streaming use cases, i.e., partition and directory monitoring.", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5OTIzNg==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429299236", "bodyText": "Lets be consistent in title capitalizaiton\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Partition files\n          \n          \n            \n            ## Partition Files", "author": "sjwiesman", "createdAt": "2020-05-22T15:00:32Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/internals/filesystems.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming are only experimental. In the future, we will support actual streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition files", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwMTc5MQ==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429301791", "bodyText": "I think I would find this confusing if I wasn't familiar with the FLIP, what about:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The partition supported by the file system connector is similar to hive, but different from hive,\n          \n          \n            \n            hive manage partitions through catalog, file system table manages partitions according to the\n          \n          \n            \n            directory of the file system. File system connector discover and infer partitions automatically.\n          \n          \n            \n            For example, a table partitioned by datetime and hour is the structure in file system path:\n          \n          \n            \n            Flink's file system partition support uses the standard hive format. However, it does not require partitions to be pre-registered with a table catalog. Partitions are discovered and inferred based on directory structure. For example, a table partitioned based on the directory below would be inferred to contain `datetime` and `hour` partitions.", "author": "sjwiesman", "createdAt": "2020-05-22T15:05:27Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/internals/filesystems.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming are only experimental. In the future, we will support actual streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition files\n+\n+The partition supported by the file system connector is similar to hive, but different from hive,\n+hive manage partitions through catalog, file system table manages partitions according to the\n+directory of the file system. File system connector discover and infer partitions automatically.\n+For example, a table partitioned by datetime and hour is the structure in file system path:", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwMjU0MA==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429302540", "bodyText": "I don't think this second sentence needs to be a note, its a natrual extension to a paragraph.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The file system table support partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/table/sql/insert.html).\n          \n          \n            \n            \n          \n          \n            \n            **NOTE:** When you insert overwrite to a partitioned table, only the corresponding partition will be overwrite, not the entire table.\n          \n          \n            \n            The file system table supports both partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/table/sql/insert.html). When you insert overwrite to a partitioned table, only the corresponding partition will be overwritten, not the entire table.", "author": "sjwiesman", "createdAt": "2020-05-22T15:06:48Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/internals/filesystems.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming are only experimental. In the future, we will support actual streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition files\n+\n+The partition supported by the file system connector is similar to hive, but different from hive,\n+hive manage partitions through catalog, file system table manages partitions according to the\n+directory of the file system. File system connector discover and infer partitions automatically.\n+For example, a table partitioned by datetime and hour is the structure in file system path:\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table support partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/table/sql/insert.html).\n+\n+**NOTE:** When you insert overwrite to a partitioned table, only the corresponding partition will be overwrite, not the entire table.", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwMzAxMg==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429303012", "bodyText": "?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             - JSON: Note JSON format for file system connector is not a typical JSON file. It is [Newline-delimited JSON](http://jsonlines.org/). Uncompressed.\n          \n          \n            \n             - JSON: Note JSON format for file system connector is not a typical JSON file but uncompressed [newline delimited JSON](http://jsonlines.org/).", "author": "sjwiesman", "createdAt": "2020-05-22T15:07:42Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/internals/filesystems.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming are only experimental. In the future, we will support actual streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition files\n+\n+The partition supported by the file system connector is similar to hive, but different from hive,\n+hive manage partitions through catalog, file system table manages partitions according to the\n+directory of the file system. File system connector discover and infer partitions automatically.\n+For example, a table partitioned by datetime and hour is the structure in file system path:\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table support partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/table/sql/insert.html).\n+\n+**NOTE:** When you insert overwrite to a partitioned table, only the corresponding partition will be overwrite, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file. It is [Newline-delimited JSON](http://jsonlines.org/). Uncompressed.", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwMzEyMQ==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429303121", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Streaming sink\n          \n          \n            \n            ## Streaming Sink", "author": "sjwiesman", "createdAt": "2020-05-22T15:07:54Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/internals/filesystems.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming are only experimental. In the future, we will support actual streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition files\n+\n+The partition supported by the file system connector is similar to hive, but different from hive,\n+hive manage partitions through catalog, file system table manages partitions according to the\n+directory of the file system. File system connector discover and infer partitions automatically.\n+For example, a table partitioned by datetime and hour is the structure in file system path:\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table support partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/table/sql/insert.html).\n+\n+**NOTE:** When you insert overwrite to a partitioned table, only the corresponding partition will be overwrite, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file. It is [Newline-delimited JSON](http://jsonlines.org/). Uncompressed.\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming sink", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwMzMzOA==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429303338", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The file system connector supports streaming sink, it uses [Streaming File Sink]({{ site.baseurl }}/connectors/streamfile_sink.html)\n          \n          \n            \n            The file system connector supports streaming writes, based on Flink's [Streaming File Sink]({{ site.baseurl }}/connectors/streamfile_sink.html)", "author": "sjwiesman", "createdAt": "2020-05-22T15:08:20Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/internals/filesystems.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming are only experimental. In the future, we will support actual streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition files\n+\n+The partition supported by the file system connector is similar to hive, but different from hive,\n+hive manage partitions through catalog, file system table manages partitions according to the\n+directory of the file system. File system connector discover and infer partitions automatically.\n+For example, a table partitioned by datetime and hour is the structure in file system path:\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table support partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/table/sql/insert.html).\n+\n+**NOTE:** When you insert overwrite to a partitioned table, only the corresponding partition will be overwrite, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file. It is [Newline-delimited JSON](http://jsonlines.org/). Uncompressed.\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming sink\n+\n+The file system connector supports streaming sink, it uses [Streaming File Sink]({{ site.baseurl }}/connectors/streamfile_sink.html)", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwMzU0Nw==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429303547", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### Rolling policy\n          \n          \n            \n            ### Rolling Policy", "author": "sjwiesman", "createdAt": "2020-05-22T15:08:46Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/internals/filesystems.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming are only experimental. In the future, we will support actual streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition files\n+\n+The partition supported by the file system connector is similar to hive, but different from hive,\n+hive manage partitions through catalog, file system table manages partitions according to the\n+directory of the file system. File system connector discover and infer partitions automatically.\n+For example, a table partitioned by datetime and hour is the structure in file system path:\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table support partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/table/sql/insert.html).\n+\n+**NOTE:** When you insert overwrite to a partitioned table, only the corresponding partition will be overwrite, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file. It is [Newline-delimited JSON](http://jsonlines.org/). Uncompressed.\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming sink\n+\n+The file system connector supports streaming sink, it uses [Streaming File Sink]({{ site.baseurl }}/connectors/streamfile_sink.html)\n+to write records to file. Row-encoded Formats are csv and json. Bulk-encoded Formats are parquet, orc and avro.\n+\n+### Rolling policy", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwNDAzOQ==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429304039", "bodyText": "Avro is not a bulk format.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            **NOTE:** For bulk formats (parquet,orc,avro), the rolling policy in combination with the checkpoint interval(pending files\n          \n          \n            \n            **NOTE:** For bulk formats (parquet, orc), the rolling policy in combination with the checkpoint interval (pending files", "author": "sjwiesman", "createdAt": "2020-05-22T15:09:39Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/internals/filesystems.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming are only experimental. In the future, we will support actual streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition files\n+\n+The partition supported by the file system connector is similar to hive, but different from hive,\n+hive manage partitions through catalog, file system table manages partitions according to the\n+directory of the file system. File system connector discover and infer partitions automatically.\n+For example, a table partitioned by datetime and hour is the structure in file system path:\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table support partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/table/sql/insert.html).\n+\n+**NOTE:** When you insert overwrite to a partitioned table, only the corresponding partition will be overwrite, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file. It is [Newline-delimited JSON](http://jsonlines.org/). Uncompressed.\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming sink\n+\n+The file system connector supports streaming sink, it uses [Streaming File Sink]({{ site.baseurl }}/connectors/streamfile_sink.html)\n+to write records to file. Row-encoded Formats are csv and json. Bulk-encoded Formats are parquet, orc and avro.\n+\n+### Rolling policy\n+\n+Data within the partition directories are split into part files. Each partition will contain at least one part file for\n+each subtask of the sink that has received data for that partition. The in-progress part file will be closed and additional\n+part file will be created according to the configurable rolling policy. The policy rolls part files based on size,\n+a timeout that specifies the maximum duration for which a file can be open.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.rolling-policy.file-size</h5></td>\n+        <td style=\"word-wrap: break-word;\">1024L * 1024L * 128L</td>\n+        <td>Long</td>\n+        <td>The maximum part file size before rolling.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.rolling-policy.time-interval</h5></td>\n+        <td style=\"word-wrap: break-word;\">30 m</td>\n+        <td>Duration</td>\n+        <td>The maximum time duration a part file can stay open before rolling (by default 30 min to avoid to many small files).</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+**NOTE:** For bulk formats (parquet,orc,avro), the rolling policy in combination with the checkpoint interval(pending files", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5NTQzOA==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429795438", "bodyText": "In https://issues.apache.org/jira/browse/FLINK-11395 , because in avro file writer, metadata kept in the header and the writer supports compression. So we implement it as a bulk writer.", "author": "JingsongLi", "createdAt": "2020-05-25T08:12:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwNDAzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwNDIxNg==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429304216", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            **NOTE:** For row formats (csv,json), you can reduce the time interval appropriately to avoid too long delay.\n          \n          \n            \n            **NOTE:** For row formats (csv, json, avro), you can reduce the time interval appropriately to avoid too long delay.", "author": "sjwiesman", "createdAt": "2020-05-22T15:10:00Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/internals/filesystems.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming are only experimental. In the future, we will support actual streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition files\n+\n+The partition supported by the file system connector is similar to hive, but different from hive,\n+hive manage partitions through catalog, file system table manages partitions according to the\n+directory of the file system. File system connector discover and infer partitions automatically.\n+For example, a table partitioned by datetime and hour is the structure in file system path:\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table support partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/table/sql/insert.html).\n+\n+**NOTE:** When you insert overwrite to a partitioned table, only the corresponding partition will be overwrite, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file. It is [Newline-delimited JSON](http://jsonlines.org/). Uncompressed.\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming sink\n+\n+The file system connector supports streaming sink, it uses [Streaming File Sink]({{ site.baseurl }}/connectors/streamfile_sink.html)\n+to write records to file. Row-encoded Formats are csv and json. Bulk-encoded Formats are parquet, orc and avro.\n+\n+### Rolling policy\n+\n+Data within the partition directories are split into part files. Each partition will contain at least one part file for\n+each subtask of the sink that has received data for that partition. The in-progress part file will be closed and additional\n+part file will be created according to the configurable rolling policy. The policy rolls part files based on size,\n+a timeout that specifies the maximum duration for which a file can be open.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.rolling-policy.file-size</h5></td>\n+        <td style=\"word-wrap: break-word;\">1024L * 1024L * 128L</td>\n+        <td>Long</td>\n+        <td>The maximum part file size before rolling.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.rolling-policy.time-interval</h5></td>\n+        <td style=\"word-wrap: break-word;\">30 m</td>\n+        <td>Duration</td>\n+        <td>The maximum time duration a part file can stay open before rolling (by default 30 min to avoid to many small files).</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+**NOTE:** For bulk formats (parquet,orc,avro), the rolling policy in combination with the checkpoint interval(pending files\n+become finished on the next checkpoint) control the size and number of these parts.\n+\n+**NOTE:** For row formats (csv,json), you can reduce the time interval appropriately to avoid too long delay.", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwNDI5OA==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429304298", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### Partition commit\n          \n          \n            \n            ### Partition Commit", "author": "sjwiesman", "createdAt": "2020-05-22T15:10:09Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/internals/filesystems.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming are only experimental. In the future, we will support actual streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition files\n+\n+The partition supported by the file system connector is similar to hive, but different from hive,\n+hive manage partitions through catalog, file system table manages partitions according to the\n+directory of the file system. File system connector discover and infer partitions automatically.\n+For example, a table partitioned by datetime and hour is the structure in file system path:\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table support partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/table/sql/insert.html).\n+\n+**NOTE:** When you insert overwrite to a partitioned table, only the corresponding partition will be overwrite, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file. It is [Newline-delimited JSON](http://jsonlines.org/). Uncompressed.\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming sink\n+\n+The file system connector supports streaming sink, it uses [Streaming File Sink]({{ site.baseurl }}/connectors/streamfile_sink.html)\n+to write records to file. Row-encoded Formats are csv and json. Bulk-encoded Formats are parquet, orc and avro.\n+\n+### Rolling policy\n+\n+Data within the partition directories are split into part files. Each partition will contain at least one part file for\n+each subtask of the sink that has received data for that partition. The in-progress part file will be closed and additional\n+part file will be created according to the configurable rolling policy. The policy rolls part files based on size,\n+a timeout that specifies the maximum duration for which a file can be open.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.rolling-policy.file-size</h5></td>\n+        <td style=\"word-wrap: break-word;\">1024L * 1024L * 128L</td>\n+        <td>Long</td>\n+        <td>The maximum part file size before rolling.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.rolling-policy.time-interval</h5></td>\n+        <td style=\"word-wrap: break-word;\">30 m</td>\n+        <td>Duration</td>\n+        <td>The maximum time duration a part file can stay open before rolling (by default 30 min to avoid to many small files).</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+**NOTE:** For bulk formats (parquet,orc,avro), the rolling policy in combination with the checkpoint interval(pending files\n+become finished on the next checkpoint) control the size and number of these parts.\n+\n+**NOTE:** For row formats (csv,json), you can reduce the time interval appropriately to avoid too long delay.\n+\n+### Partition commit", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwODE3NQ==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429308175", "bodyText": "I apologize but I rewrote this paragraph a bit more than normal. I hope that's alright.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Committing a partition is to notify the downstream application that the partition has finished writing, the partition is ready to be read.\n          \n          \n            \n            Streaming sink includes not only the writing of data files, but also the visibility commit of partition. When a partition completes\n          \n          \n            \n            writing, you need to notify metastore or add the success file in the directory. Partition commit mechanism allows you to:\n          \n          \n            \n            After writing a partition, it is often necessary to notify downstream applications. For example, add the partition to a Hive metastore or writing a `_SUCCESS` file in the directory. The file system sink contains a partition commit feature that allows configuring custom policies. Commit actions are based on a combination of `triggers` and `policies`.", "author": "sjwiesman", "createdAt": "2020-05-22T15:17:19Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/internals/filesystems.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming are only experimental. In the future, we will support actual streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition files\n+\n+The partition supported by the file system connector is similar to hive, but different from hive,\n+hive manage partitions through catalog, file system table manages partitions according to the\n+directory of the file system. File system connector discover and infer partitions automatically.\n+For example, a table partitioned by datetime and hour is the structure in file system path:\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table support partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/table/sql/insert.html).\n+\n+**NOTE:** When you insert overwrite to a partitioned table, only the corresponding partition will be overwrite, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file. It is [Newline-delimited JSON](http://jsonlines.org/). Uncompressed.\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming sink\n+\n+The file system connector supports streaming sink, it uses [Streaming File Sink]({{ site.baseurl }}/connectors/streamfile_sink.html)\n+to write records to file. Row-encoded Formats are csv and json. Bulk-encoded Formats are parquet, orc and avro.\n+\n+### Rolling policy\n+\n+Data within the partition directories are split into part files. Each partition will contain at least one part file for\n+each subtask of the sink that has received data for that partition. The in-progress part file will be closed and additional\n+part file will be created according to the configurable rolling policy. The policy rolls part files based on size,\n+a timeout that specifies the maximum duration for which a file can be open.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.rolling-policy.file-size</h5></td>\n+        <td style=\"word-wrap: break-word;\">1024L * 1024L * 128L</td>\n+        <td>Long</td>\n+        <td>The maximum part file size before rolling.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.rolling-policy.time-interval</h5></td>\n+        <td style=\"word-wrap: break-word;\">30 m</td>\n+        <td>Duration</td>\n+        <td>The maximum time duration a part file can stay open before rolling (by default 30 min to avoid to many small files).</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+**NOTE:** For bulk formats (parquet,orc,avro), the rolling policy in combination with the checkpoint interval(pending files\n+become finished on the next checkpoint) control the size and number of these parts.\n+\n+**NOTE:** For row formats (csv,json), you can reduce the time interval appropriately to avoid too long delay.\n+\n+### Partition commit\n+\n+Committing a partition is to notify the downstream application that the partition has finished writing, the partition is ready to be read.\n+Streaming sink includes not only the writing of data files, but also the visibility commit of partition. When a partition completes\n+writing, you need to notify metastore or add the success file in the directory. Partition commit mechanism allows you to:", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwODgzNw==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429308837", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This requires that your job has watermark, and the partition is divided according to time, such as\n          \n          \n            \n            This requires that your job is using event time, and the partition is divided according to time, such as", "author": "sjwiesman", "createdAt": "2020-05-22T15:18:37Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/internals/filesystems.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming are only experimental. In the future, we will support actual streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition files\n+\n+The partition supported by the file system connector is similar to hive, but different from hive,\n+hive manage partitions through catalog, file system table manages partitions according to the\n+directory of the file system. File system connector discover and infer partitions automatically.\n+For example, a table partitioned by datetime and hour is the structure in file system path:\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table support partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/table/sql/insert.html).\n+\n+**NOTE:** When you insert overwrite to a partitioned table, only the corresponding partition will be overwrite, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file. It is [Newline-delimited JSON](http://jsonlines.org/). Uncompressed.\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming sink\n+\n+The file system connector supports streaming sink, it uses [Streaming File Sink]({{ site.baseurl }}/connectors/streamfile_sink.html)\n+to write records to file. Row-encoded Formats are csv and json. Bulk-encoded Formats are parquet, orc and avro.\n+\n+### Rolling policy\n+\n+Data within the partition directories are split into part files. Each partition will contain at least one part file for\n+each subtask of the sink that has received data for that partition. The in-progress part file will be closed and additional\n+part file will be created according to the configurable rolling policy. The policy rolls part files based on size,\n+a timeout that specifies the maximum duration for which a file can be open.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.rolling-policy.file-size</h5></td>\n+        <td style=\"word-wrap: break-word;\">1024L * 1024L * 128L</td>\n+        <td>Long</td>\n+        <td>The maximum part file size before rolling.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.rolling-policy.time-interval</h5></td>\n+        <td style=\"word-wrap: break-word;\">30 m</td>\n+        <td>Duration</td>\n+        <td>The maximum time duration a part file can stay open before rolling (by default 30 min to avoid to many small files).</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+**NOTE:** For bulk formats (parquet,orc,avro), the rolling policy in combination with the checkpoint interval(pending files\n+become finished on the next checkpoint) control the size and number of these parts.\n+\n+**NOTE:** For row formats (csv,json), you can reduce the time interval appropriately to avoid too long delay.\n+\n+### Partition commit\n+\n+Committing a partition is to notify the downstream application that the partition has finished writing, the partition is ready to be read.\n+Streaming sink includes not only the writing of data files, but also the visibility commit of partition. When a partition completes\n+writing, you need to notify metastore or add the success file in the directory. Partition commit mechanism allows you to:\n+\n+- Trigger: The timing of the commit of the partition can be determined by the watermark with the time extracted from the partition, or by processing time.\n+- Policy: How to commit a partition, built-in policies support for the commit of success files and metastore, you can also implement your own policies, such as triggering hive's analysis to generate statistics, or merging small files, etc.\n+\n+#### Partition commit trigger\n+\n+To define when to commit a partition, providing partition commit trigger:\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.partition-commit.trigger</h5></td>\n+        <td style=\"word-wrap: break-word;\">partition-time</td>\n+        <td>String</td>\n+        <td>Trigger type for partition commit: 'partition-time': extract time from partition, if 'watermark' > 'partition-time' + 'delay', will commit the partition. 'process-time': use processing time, if 'current processing time' > 'partition directory creation time' + 'delay', will commit the partition.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.delay</h5></td>\n+        <td style=\"word-wrap: break-word;\">0 s</td>\n+        <td>Duration</td>\n+        <td>The partition will not commit until the delay time. If it is a daily partition, should be '1 d', if it is a hourly partition, should be '1 h'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+There are two types of trigger:\n+- The first is to judge the time of partition commit according to the partition time and watermark.\n+This requires that your job has watermark, and the partition is divided according to time, such as", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwOTA3Ng==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429309076", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #### Partition time extractor\n          \n          \n            \n            #### Partition Time Extractor", "author": "sjwiesman", "createdAt": "2020-05-22T15:19:04Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/internals/filesystems.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming are only experimental. In the future, we will support actual streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition files\n+\n+The partition supported by the file system connector is similar to hive, but different from hive,\n+hive manage partitions through catalog, file system table manages partitions according to the\n+directory of the file system. File system connector discover and infer partitions automatically.\n+For example, a table partitioned by datetime and hour is the structure in file system path:\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table support partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/table/sql/insert.html).\n+\n+**NOTE:** When you insert overwrite to a partitioned table, only the corresponding partition will be overwrite, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file. It is [Newline-delimited JSON](http://jsonlines.org/). Uncompressed.\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming sink\n+\n+The file system connector supports streaming sink, it uses [Streaming File Sink]({{ site.baseurl }}/connectors/streamfile_sink.html)\n+to write records to file. Row-encoded Formats are csv and json. Bulk-encoded Formats are parquet, orc and avro.\n+\n+### Rolling policy\n+\n+Data within the partition directories are split into part files. Each partition will contain at least one part file for\n+each subtask of the sink that has received data for that partition. The in-progress part file will be closed and additional\n+part file will be created according to the configurable rolling policy. The policy rolls part files based on size,\n+a timeout that specifies the maximum duration for which a file can be open.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.rolling-policy.file-size</h5></td>\n+        <td style=\"word-wrap: break-word;\">1024L * 1024L * 128L</td>\n+        <td>Long</td>\n+        <td>The maximum part file size before rolling.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.rolling-policy.time-interval</h5></td>\n+        <td style=\"word-wrap: break-word;\">30 m</td>\n+        <td>Duration</td>\n+        <td>The maximum time duration a part file can stay open before rolling (by default 30 min to avoid to many small files).</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+**NOTE:** For bulk formats (parquet,orc,avro), the rolling policy in combination with the checkpoint interval(pending files\n+become finished on the next checkpoint) control the size and number of these parts.\n+\n+**NOTE:** For row formats (csv,json), you can reduce the time interval appropriately to avoid too long delay.\n+\n+### Partition commit\n+\n+Committing a partition is to notify the downstream application that the partition has finished writing, the partition is ready to be read.\n+Streaming sink includes not only the writing of data files, but also the visibility commit of partition. When a partition completes\n+writing, you need to notify metastore or add the success file in the directory. Partition commit mechanism allows you to:\n+\n+- Trigger: The timing of the commit of the partition can be determined by the watermark with the time extracted from the partition, or by processing time.\n+- Policy: How to commit a partition, built-in policies support for the commit of success files and metastore, you can also implement your own policies, such as triggering hive's analysis to generate statistics, or merging small files, etc.\n+\n+#### Partition commit trigger\n+\n+To define when to commit a partition, providing partition commit trigger:\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.partition-commit.trigger</h5></td>\n+        <td style=\"word-wrap: break-word;\">partition-time</td>\n+        <td>String</td>\n+        <td>Trigger type for partition commit: 'partition-time': extract time from partition, if 'watermark' > 'partition-time' + 'delay', will commit the partition. 'process-time': use processing time, if 'current processing time' > 'partition directory creation time' + 'delay', will commit the partition.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.delay</h5></td>\n+        <td style=\"word-wrap: break-word;\">0 s</td>\n+        <td>Duration</td>\n+        <td>The partition will not commit until the delay time. If it is a daily partition, should be '1 d', if it is a hourly partition, should be '1 h'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+There are two types of trigger:\n+- The first is to judge the time of partition commit according to the partition time and watermark.\n+This requires that your job has watermark, and the partition is divided according to time, such as\n+hourly partition or daily partition.\n+- The second is partition processing time. The time of partition commit according to partition\n+creation time and current time. This trigger is more universal, but not so precise. For example,\n+data delay or failover will lead to premature partition commit.\n+\n+#### Partition time extractor", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwOTIyNg==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429309226", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Time extractor defines extracting time from partition values.\n          \n          \n            \n            Time extractors define extracting time from partition values.", "author": "sjwiesman", "createdAt": "2020-05-22T15:19:24Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/internals/filesystems.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming are only experimental. In the future, we will support actual streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition files\n+\n+The partition supported by the file system connector is similar to hive, but different from hive,\n+hive manage partitions through catalog, file system table manages partitions according to the\n+directory of the file system. File system connector discover and infer partitions automatically.\n+For example, a table partitioned by datetime and hour is the structure in file system path:\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table support partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/table/sql/insert.html).\n+\n+**NOTE:** When you insert overwrite to a partitioned table, only the corresponding partition will be overwrite, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file. It is [Newline-delimited JSON](http://jsonlines.org/). Uncompressed.\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming sink\n+\n+The file system connector supports streaming sink, it uses [Streaming File Sink]({{ site.baseurl }}/connectors/streamfile_sink.html)\n+to write records to file. Row-encoded Formats are csv and json. Bulk-encoded Formats are parquet, orc and avro.\n+\n+### Rolling policy\n+\n+Data within the partition directories are split into part files. Each partition will contain at least one part file for\n+each subtask of the sink that has received data for that partition. The in-progress part file will be closed and additional\n+part file will be created according to the configurable rolling policy. The policy rolls part files based on size,\n+a timeout that specifies the maximum duration for which a file can be open.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.rolling-policy.file-size</h5></td>\n+        <td style=\"word-wrap: break-word;\">1024L * 1024L * 128L</td>\n+        <td>Long</td>\n+        <td>The maximum part file size before rolling.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.rolling-policy.time-interval</h5></td>\n+        <td style=\"word-wrap: break-word;\">30 m</td>\n+        <td>Duration</td>\n+        <td>The maximum time duration a part file can stay open before rolling (by default 30 min to avoid to many small files).</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+**NOTE:** For bulk formats (parquet,orc,avro), the rolling policy in combination with the checkpoint interval(pending files\n+become finished on the next checkpoint) control the size and number of these parts.\n+\n+**NOTE:** For row formats (csv,json), you can reduce the time interval appropriately to avoid too long delay.\n+\n+### Partition commit\n+\n+Committing a partition is to notify the downstream application that the partition has finished writing, the partition is ready to be read.\n+Streaming sink includes not only the writing of data files, but also the visibility commit of partition. When a partition completes\n+writing, you need to notify metastore or add the success file in the directory. Partition commit mechanism allows you to:\n+\n+- Trigger: The timing of the commit of the partition can be determined by the watermark with the time extracted from the partition, or by processing time.\n+- Policy: How to commit a partition, built-in policies support for the commit of success files and metastore, you can also implement your own policies, such as triggering hive's analysis to generate statistics, or merging small files, etc.\n+\n+#### Partition commit trigger\n+\n+To define when to commit a partition, providing partition commit trigger:\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.partition-commit.trigger</h5></td>\n+        <td style=\"word-wrap: break-word;\">partition-time</td>\n+        <td>String</td>\n+        <td>Trigger type for partition commit: 'partition-time': extract time from partition, if 'watermark' > 'partition-time' + 'delay', will commit the partition. 'process-time': use processing time, if 'current processing time' > 'partition directory creation time' + 'delay', will commit the partition.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.delay</h5></td>\n+        <td style=\"word-wrap: break-word;\">0 s</td>\n+        <td>Duration</td>\n+        <td>The partition will not commit until the delay time. If it is a daily partition, should be '1 d', if it is a hourly partition, should be '1 h'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+There are two types of trigger:\n+- The first is to judge the time of partition commit according to the partition time and watermark.\n+This requires that your job has watermark, and the partition is divided according to time, such as\n+hourly partition or daily partition.\n+- The second is partition processing time. The time of partition commit according to partition\n+creation time and current time. This trigger is more universal, but not so precise. For example,\n+data delay or failover will lead to premature partition commit.\n+\n+#### Partition time extractor\n+\n+Time extractor defines extracting time from partition values.", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxMDkzNw==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429310937", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The default extractor provide a timestamp pattern way, you can construct timestamp pattern from your partition fields.\n          \n          \n            \n            \n          \n          \n            \n            You can also specify an implementation to complete partition time extraction. The custom extractor implementation like:\n          \n          \n            \n            The default extractor is based on a timestamp pattern composed of your partition fields. You can also specify an implementation for fully custom partition extraction based on the `PartitionTimeExtractor` interface.", "author": "sjwiesman", "createdAt": "2020-05-22T15:22:41Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/internals/filesystems.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming are only experimental. In the future, we will support actual streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition files\n+\n+The partition supported by the file system connector is similar to hive, but different from hive,\n+hive manage partitions through catalog, file system table manages partitions according to the\n+directory of the file system. File system connector discover and infer partitions automatically.\n+For example, a table partitioned by datetime and hour is the structure in file system path:\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table support partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/table/sql/insert.html).\n+\n+**NOTE:** When you insert overwrite to a partitioned table, only the corresponding partition will be overwrite, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file. It is [Newline-delimited JSON](http://jsonlines.org/). Uncompressed.\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming sink\n+\n+The file system connector supports streaming sink, it uses [Streaming File Sink]({{ site.baseurl }}/connectors/streamfile_sink.html)\n+to write records to file. Row-encoded Formats are csv and json. Bulk-encoded Formats are parquet, orc and avro.\n+\n+### Rolling policy\n+\n+Data within the partition directories are split into part files. Each partition will contain at least one part file for\n+each subtask of the sink that has received data for that partition. The in-progress part file will be closed and additional\n+part file will be created according to the configurable rolling policy. The policy rolls part files based on size,\n+a timeout that specifies the maximum duration for which a file can be open.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.rolling-policy.file-size</h5></td>\n+        <td style=\"word-wrap: break-word;\">1024L * 1024L * 128L</td>\n+        <td>Long</td>\n+        <td>The maximum part file size before rolling.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.rolling-policy.time-interval</h5></td>\n+        <td style=\"word-wrap: break-word;\">30 m</td>\n+        <td>Duration</td>\n+        <td>The maximum time duration a part file can stay open before rolling (by default 30 min to avoid to many small files).</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+**NOTE:** For bulk formats (parquet,orc,avro), the rolling policy in combination with the checkpoint interval(pending files\n+become finished on the next checkpoint) control the size and number of these parts.\n+\n+**NOTE:** For row formats (csv,json), you can reduce the time interval appropriately to avoid too long delay.\n+\n+### Partition commit\n+\n+Committing a partition is to notify the downstream application that the partition has finished writing, the partition is ready to be read.\n+Streaming sink includes not only the writing of data files, but also the visibility commit of partition. When a partition completes\n+writing, you need to notify metastore or add the success file in the directory. Partition commit mechanism allows you to:\n+\n+- Trigger: The timing of the commit of the partition can be determined by the watermark with the time extracted from the partition, or by processing time.\n+- Policy: How to commit a partition, built-in policies support for the commit of success files and metastore, you can also implement your own policies, such as triggering hive's analysis to generate statistics, or merging small files, etc.\n+\n+#### Partition commit trigger\n+\n+To define when to commit a partition, providing partition commit trigger:\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.partition-commit.trigger</h5></td>\n+        <td style=\"word-wrap: break-word;\">partition-time</td>\n+        <td>String</td>\n+        <td>Trigger type for partition commit: 'partition-time': extract time from partition, if 'watermark' > 'partition-time' + 'delay', will commit the partition. 'process-time': use processing time, if 'current processing time' > 'partition directory creation time' + 'delay', will commit the partition.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.delay</h5></td>\n+        <td style=\"word-wrap: break-word;\">0 s</td>\n+        <td>Duration</td>\n+        <td>The partition will not commit until the delay time. If it is a daily partition, should be '1 d', if it is a hourly partition, should be '1 h'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+There are two types of trigger:\n+- The first is to judge the time of partition commit according to the partition time and watermark.\n+This requires that your job has watermark, and the partition is divided according to time, such as\n+hourly partition or daily partition.\n+- The second is partition processing time. The time of partition commit according to partition\n+creation time and current time. This trigger is more universal, but not so precise. For example,\n+data delay or failover will lead to premature partition commit.\n+\n+#### Partition time extractor\n+\n+Time extractor defines extracting time from partition values.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>partition.time-extractor.kind</h5></td>\n+        <td style=\"word-wrap: break-word;\">default</td>\n+        <td>String</td>\n+        <td>Time extractor to extract time from partition values. Support default and custom. For default, can configure timestamp pattern. For custom, should configure extractor class.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>partition.time-extractor.class</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The extractor class for implement PartitionTimeExtractor interface.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>partition.time-extractor.timestamp-pattern</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The 'default' construction way allows users to use partition fields to get a legal timestamp pattern. Default support 'yyyy-mm-dd hh:mm:ss' from first field. If timestamp in partition is single field 'dt', can configure: '$dt'. If timestamp in partition is year, month, day, hour, can configure: '$year-$month-$day $hour:00:00'. If timestamp in partition is dt and hour, can configure: '$dt $hour:00:00'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+The default extractor provide a timestamp pattern way, you can construct timestamp pattern from your partition fields.\n+\n+You can also specify an implementation to complete partition time extraction. The custom extractor implementation like:", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxMTMzMg==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429311332", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #### Partition commit policy\n          \n          \n            \n            #### Partition Commit Policy", "author": "sjwiesman", "createdAt": "2020-05-22T15:23:28Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/internals/filesystems.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming are only experimental. In the future, we will support actual streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition files\n+\n+The partition supported by the file system connector is similar to hive, but different from hive,\n+hive manage partitions through catalog, file system table manages partitions according to the\n+directory of the file system. File system connector discover and infer partitions automatically.\n+For example, a table partitioned by datetime and hour is the structure in file system path:\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table support partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/table/sql/insert.html).\n+\n+**NOTE:** When you insert overwrite to a partitioned table, only the corresponding partition will be overwrite, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file. It is [Newline-delimited JSON](http://jsonlines.org/). Uncompressed.\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming sink\n+\n+The file system connector supports streaming sink, it uses [Streaming File Sink]({{ site.baseurl }}/connectors/streamfile_sink.html)\n+to write records to file. Row-encoded Formats are csv and json. Bulk-encoded Formats are parquet, orc and avro.\n+\n+### Rolling policy\n+\n+Data within the partition directories are split into part files. Each partition will contain at least one part file for\n+each subtask of the sink that has received data for that partition. The in-progress part file will be closed and additional\n+part file will be created according to the configurable rolling policy. The policy rolls part files based on size,\n+a timeout that specifies the maximum duration for which a file can be open.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.rolling-policy.file-size</h5></td>\n+        <td style=\"word-wrap: break-word;\">1024L * 1024L * 128L</td>\n+        <td>Long</td>\n+        <td>The maximum part file size before rolling.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.rolling-policy.time-interval</h5></td>\n+        <td style=\"word-wrap: break-word;\">30 m</td>\n+        <td>Duration</td>\n+        <td>The maximum time duration a part file can stay open before rolling (by default 30 min to avoid to many small files).</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+**NOTE:** For bulk formats (parquet,orc,avro), the rolling policy in combination with the checkpoint interval(pending files\n+become finished on the next checkpoint) control the size and number of these parts.\n+\n+**NOTE:** For row formats (csv,json), you can reduce the time interval appropriately to avoid too long delay.\n+\n+### Partition commit\n+\n+Committing a partition is to notify the downstream application that the partition has finished writing, the partition is ready to be read.\n+Streaming sink includes not only the writing of data files, but also the visibility commit of partition. When a partition completes\n+writing, you need to notify metastore or add the success file in the directory. Partition commit mechanism allows you to:\n+\n+- Trigger: The timing of the commit of the partition can be determined by the watermark with the time extracted from the partition, or by processing time.\n+- Policy: How to commit a partition, built-in policies support for the commit of success files and metastore, you can also implement your own policies, such as triggering hive's analysis to generate statistics, or merging small files, etc.\n+\n+#### Partition commit trigger\n+\n+To define when to commit a partition, providing partition commit trigger:\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.partition-commit.trigger</h5></td>\n+        <td style=\"word-wrap: break-word;\">partition-time</td>\n+        <td>String</td>\n+        <td>Trigger type for partition commit: 'partition-time': extract time from partition, if 'watermark' > 'partition-time' + 'delay', will commit the partition. 'process-time': use processing time, if 'current processing time' > 'partition directory creation time' + 'delay', will commit the partition.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.delay</h5></td>\n+        <td style=\"word-wrap: break-word;\">0 s</td>\n+        <td>Duration</td>\n+        <td>The partition will not commit until the delay time. If it is a daily partition, should be '1 d', if it is a hourly partition, should be '1 h'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+There are two types of trigger:\n+- The first is to judge the time of partition commit according to the partition time and watermark.\n+This requires that your job has watermark, and the partition is divided according to time, such as\n+hourly partition or daily partition.\n+- The second is partition processing time. The time of partition commit according to partition\n+creation time and current time. This trigger is more universal, but not so precise. For example,\n+data delay or failover will lead to premature partition commit.\n+\n+#### Partition time extractor\n+\n+Time extractor defines extracting time from partition values.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>partition.time-extractor.kind</h5></td>\n+        <td style=\"word-wrap: break-word;\">default</td>\n+        <td>String</td>\n+        <td>Time extractor to extract time from partition values. Support default and custom. For default, can configure timestamp pattern. For custom, should configure extractor class.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>partition.time-extractor.class</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The extractor class for implement PartitionTimeExtractor interface.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>partition.time-extractor.timestamp-pattern</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The 'default' construction way allows users to use partition fields to get a legal timestamp pattern. Default support 'yyyy-mm-dd hh:mm:ss' from first field. If timestamp in partition is single field 'dt', can configure: '$dt'. If timestamp in partition is year, month, day, hour, can configure: '$year-$month-$day $hour:00:00'. If timestamp in partition is dt and hour, can configure: '$dt $hour:00:00'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+The default extractor provide a timestamp pattern way, you can construct timestamp pattern from your partition fields.\n+\n+You can also specify an implementation to complete partition time extraction. The custom extractor implementation like:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"java\" markdown=\"1\">\n+{% highlight java %}\n+\n+public class HourPartTimeExtractor implements PartitionTimeExtractor {\n+\t@Override\n+    public LocalDateTime extract(List<String> keys, List<String> values) {\n+        String dt = values.get(0);\n+        String hour = values.get(1);\n+\t\treturn Timestamp.valueOf(dt + \" \" + hour + \":00:00\").toLocalDateTime();\n+\t}\n+}\n+\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+#### Partition commit policy", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxMTY0NA==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429311644", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The partiton commit policy defines how to commit a partition. Two policies are supported by default:\n          \n          \n            \n            The partition commit policy defines what action is taken when partitions are committed.", "author": "sjwiesman", "createdAt": "2020-05-22T15:24:03Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/internals/filesystems.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming are only experimental. In the future, we will support actual streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition files\n+\n+The partition supported by the file system connector is similar to hive, but different from hive,\n+hive manage partitions through catalog, file system table manages partitions according to the\n+directory of the file system. File system connector discover and infer partitions automatically.\n+For example, a table partitioned by datetime and hour is the structure in file system path:\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table support partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/table/sql/insert.html).\n+\n+**NOTE:** When you insert overwrite to a partitioned table, only the corresponding partition will be overwrite, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file. It is [Newline-delimited JSON](http://jsonlines.org/). Uncompressed.\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming sink\n+\n+The file system connector supports streaming sink, it uses [Streaming File Sink]({{ site.baseurl }}/connectors/streamfile_sink.html)\n+to write records to file. Row-encoded Formats are csv and json. Bulk-encoded Formats are parquet, orc and avro.\n+\n+### Rolling policy\n+\n+Data within the partition directories are split into part files. Each partition will contain at least one part file for\n+each subtask of the sink that has received data for that partition. The in-progress part file will be closed and additional\n+part file will be created according to the configurable rolling policy. The policy rolls part files based on size,\n+a timeout that specifies the maximum duration for which a file can be open.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.rolling-policy.file-size</h5></td>\n+        <td style=\"word-wrap: break-word;\">1024L * 1024L * 128L</td>\n+        <td>Long</td>\n+        <td>The maximum part file size before rolling.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.rolling-policy.time-interval</h5></td>\n+        <td style=\"word-wrap: break-word;\">30 m</td>\n+        <td>Duration</td>\n+        <td>The maximum time duration a part file can stay open before rolling (by default 30 min to avoid to many small files).</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+**NOTE:** For bulk formats (parquet,orc,avro), the rolling policy in combination with the checkpoint interval(pending files\n+become finished on the next checkpoint) control the size and number of these parts.\n+\n+**NOTE:** For row formats (csv,json), you can reduce the time interval appropriately to avoid too long delay.\n+\n+### Partition commit\n+\n+Committing a partition is to notify the downstream application that the partition has finished writing, the partition is ready to be read.\n+Streaming sink includes not only the writing of data files, but also the visibility commit of partition. When a partition completes\n+writing, you need to notify metastore or add the success file in the directory. Partition commit mechanism allows you to:\n+\n+- Trigger: The timing of the commit of the partition can be determined by the watermark with the time extracted from the partition, or by processing time.\n+- Policy: How to commit a partition, built-in policies support for the commit of success files and metastore, you can also implement your own policies, such as triggering hive's analysis to generate statistics, or merging small files, etc.\n+\n+#### Partition commit trigger\n+\n+To define when to commit a partition, providing partition commit trigger:\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.partition-commit.trigger</h5></td>\n+        <td style=\"word-wrap: break-word;\">partition-time</td>\n+        <td>String</td>\n+        <td>Trigger type for partition commit: 'partition-time': extract time from partition, if 'watermark' > 'partition-time' + 'delay', will commit the partition. 'process-time': use processing time, if 'current processing time' > 'partition directory creation time' + 'delay', will commit the partition.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.delay</h5></td>\n+        <td style=\"word-wrap: break-word;\">0 s</td>\n+        <td>Duration</td>\n+        <td>The partition will not commit until the delay time. If it is a daily partition, should be '1 d', if it is a hourly partition, should be '1 h'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+There are two types of trigger:\n+- The first is to judge the time of partition commit according to the partition time and watermark.\n+This requires that your job has watermark, and the partition is divided according to time, such as\n+hourly partition or daily partition.\n+- The second is partition processing time. The time of partition commit according to partition\n+creation time and current time. This trigger is more universal, but not so precise. For example,\n+data delay or failover will lead to premature partition commit.\n+\n+#### Partition time extractor\n+\n+Time extractor defines extracting time from partition values.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>partition.time-extractor.kind</h5></td>\n+        <td style=\"word-wrap: break-word;\">default</td>\n+        <td>String</td>\n+        <td>Time extractor to extract time from partition values. Support default and custom. For default, can configure timestamp pattern. For custom, should configure extractor class.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>partition.time-extractor.class</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The extractor class for implement PartitionTimeExtractor interface.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>partition.time-extractor.timestamp-pattern</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The 'default' construction way allows users to use partition fields to get a legal timestamp pattern. Default support 'yyyy-mm-dd hh:mm:ss' from first field. If timestamp in partition is single field 'dt', can configure: '$dt'. If timestamp in partition is year, month, day, hour, can configure: '$year-$month-$day $hour:00:00'. If timestamp in partition is dt and hour, can configure: '$dt $hour:00:00'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+The default extractor provide a timestamp pattern way, you can construct timestamp pattern from your partition fields.\n+\n+You can also specify an implementation to complete partition time extraction. The custom extractor implementation like:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"java\" markdown=\"1\">\n+{% highlight java %}\n+\n+public class HourPartTimeExtractor implements PartitionTimeExtractor {\n+\t@Override\n+    public LocalDateTime extract(List<String> keys, List<String> values) {\n+        String dt = values.get(0);\n+        String hour = values.get(1);\n+\t\treturn Timestamp.valueOf(dt + \" \" + hour + \":00:00\").toLocalDateTime();\n+\t}\n+}\n+\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+#### Partition commit policy\n+\n+The partiton commit policy defines how to commit a partition. Two policies are supported by default:", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxMzUwNQ==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429313505", "bodyText": "@JingsongLi @KurtYoung\nThe naming of these options is not good. Metastore having a default no-op implementation does not make any sense. There should be none, success-file, and custom. I want to very strongly encourage making this change for 1.11.", "author": "sjwiesman", "createdAt": "2020-05-22T15:27:29Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/internals/filesystems.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming are only experimental. In the future, we will support actual streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition files\n+\n+The partition supported by the file system connector is similar to hive, but different from hive,\n+hive manage partitions through catalog, file system table manages partitions according to the\n+directory of the file system. File system connector discover and infer partitions automatically.\n+For example, a table partitioned by datetime and hour is the structure in file system path:\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table support partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/table/sql/insert.html).\n+\n+**NOTE:** When you insert overwrite to a partitioned table, only the corresponding partition will be overwrite, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file. It is [Newline-delimited JSON](http://jsonlines.org/). Uncompressed.\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming sink\n+\n+The file system connector supports streaming sink, it uses [Streaming File Sink]({{ site.baseurl }}/connectors/streamfile_sink.html)\n+to write records to file. Row-encoded Formats are csv and json. Bulk-encoded Formats are parquet, orc and avro.\n+\n+### Rolling policy\n+\n+Data within the partition directories are split into part files. Each partition will contain at least one part file for\n+each subtask of the sink that has received data for that partition. The in-progress part file will be closed and additional\n+part file will be created according to the configurable rolling policy. The policy rolls part files based on size,\n+a timeout that specifies the maximum duration for which a file can be open.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.rolling-policy.file-size</h5></td>\n+        <td style=\"word-wrap: break-word;\">1024L * 1024L * 128L</td>\n+        <td>Long</td>\n+        <td>The maximum part file size before rolling.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.rolling-policy.time-interval</h5></td>\n+        <td style=\"word-wrap: break-word;\">30 m</td>\n+        <td>Duration</td>\n+        <td>The maximum time duration a part file can stay open before rolling (by default 30 min to avoid to many small files).</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+**NOTE:** For bulk formats (parquet,orc,avro), the rolling policy in combination with the checkpoint interval(pending files\n+become finished on the next checkpoint) control the size and number of these parts.\n+\n+**NOTE:** For row formats (csv,json), you can reduce the time interval appropriately to avoid too long delay.\n+\n+### Partition commit\n+\n+Committing a partition is to notify the downstream application that the partition has finished writing, the partition is ready to be read.\n+Streaming sink includes not only the writing of data files, but also the visibility commit of partition. When a partition completes\n+writing, you need to notify metastore or add the success file in the directory. Partition commit mechanism allows you to:\n+\n+- Trigger: The timing of the commit of the partition can be determined by the watermark with the time extracted from the partition, or by processing time.\n+- Policy: How to commit a partition, built-in policies support for the commit of success files and metastore, you can also implement your own policies, such as triggering hive's analysis to generate statistics, or merging small files, etc.\n+\n+#### Partition commit trigger\n+\n+To define when to commit a partition, providing partition commit trigger:\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.partition-commit.trigger</h5></td>\n+        <td style=\"word-wrap: break-word;\">partition-time</td>\n+        <td>String</td>\n+        <td>Trigger type for partition commit: 'partition-time': extract time from partition, if 'watermark' > 'partition-time' + 'delay', will commit the partition. 'process-time': use processing time, if 'current processing time' > 'partition directory creation time' + 'delay', will commit the partition.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.delay</h5></td>\n+        <td style=\"word-wrap: break-word;\">0 s</td>\n+        <td>Duration</td>\n+        <td>The partition will not commit until the delay time. If it is a daily partition, should be '1 d', if it is a hourly partition, should be '1 h'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+There are two types of trigger:\n+- The first is to judge the time of partition commit according to the partition time and watermark.\n+This requires that your job has watermark, and the partition is divided according to time, such as\n+hourly partition or daily partition.\n+- The second is partition processing time. The time of partition commit according to partition\n+creation time and current time. This trigger is more universal, but not so precise. For example,\n+data delay or failover will lead to premature partition commit.\n+\n+#### Partition time extractor\n+\n+Time extractor defines extracting time from partition values.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>partition.time-extractor.kind</h5></td>\n+        <td style=\"word-wrap: break-word;\">default</td>\n+        <td>String</td>\n+        <td>Time extractor to extract time from partition values. Support default and custom. For default, can configure timestamp pattern. For custom, should configure extractor class.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>partition.time-extractor.class</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The extractor class for implement PartitionTimeExtractor interface.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>partition.time-extractor.timestamp-pattern</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The 'default' construction way allows users to use partition fields to get a legal timestamp pattern. Default support 'yyyy-mm-dd hh:mm:ss' from first field. If timestamp in partition is single field 'dt', can configure: '$dt'. If timestamp in partition is year, month, day, hour, can configure: '$year-$month-$day $hour:00:00'. If timestamp in partition is dt and hour, can configure: '$dt $hour:00:00'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+The default extractor provide a timestamp pattern way, you can construct timestamp pattern from your partition fields.\n+\n+You can also specify an implementation to complete partition time extraction. The custom extractor implementation like:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"java\" markdown=\"1\">\n+{% highlight java %}\n+\n+public class HourPartTimeExtractor implements PartitionTimeExtractor {\n+\t@Override\n+    public LocalDateTime extract(List<String> keys, List<String> values) {\n+        String dt = values.get(0);\n+        String hour = values.get(1);\n+\t\treturn Timestamp.valueOf(dt + \" \" + hour + \":00:00\").toLocalDateTime();\n+\t}\n+}\n+\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+#### Partition commit policy\n+\n+The partiton commit policy defines how to commit a partition. Two policies are supported by default:\n+\n+- The first is metastore, but since the file system does not have metastore, it is an empty implementation.\n+- The second is the success file, which will write an empty file in the directory corresponding to the partition.", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwMzgxNg==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429503816", "bodyText": "We can hide(throws UnsupportedException?) it for filesystem connector.\nBut for Hive table, metastore is needed.", "author": "JingsongLi", "createdAt": "2020-05-23T01:51:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxMzUwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUyNjI0OQ==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429526249", "bodyText": "Throwing exception in filesystem connector would be better, and we also need to highlight this in document.", "author": "KurtYoung", "createdAt": "2020-05-23T08:16:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxMzUwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwMDMyOA==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429900328", "bodyText": "Created JIRA: https://issues.apache.org/jira/browse/FLINK-17925", "author": "JingsongLi", "createdAt": "2020-05-25T12:07:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxMzUwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxMzkxNg==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429313916", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Example\n          \n          \n            \n            ## Full Example", "author": "sjwiesman", "createdAt": "2020-05-22T15:28:12Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/internals/filesystems.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming are only experimental. In the future, we will support actual streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition files\n+\n+The partition supported by the file system connector is similar to hive, but different from hive,\n+hive manage partitions through catalog, file system table manages partitions according to the\n+directory of the file system. File system connector discover and infer partitions automatically.\n+For example, a table partitioned by datetime and hour is the structure in file system path:\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table support partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/table/sql/insert.html).\n+\n+**NOTE:** When you insert overwrite to a partitioned table, only the corresponding partition will be overwrite, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file. It is [Newline-delimited JSON](http://jsonlines.org/). Uncompressed.\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming sink\n+\n+The file system connector supports streaming sink, it uses [Streaming File Sink]({{ site.baseurl }}/connectors/streamfile_sink.html)\n+to write records to file. Row-encoded Formats are csv and json. Bulk-encoded Formats are parquet, orc and avro.\n+\n+### Rolling policy\n+\n+Data within the partition directories are split into part files. Each partition will contain at least one part file for\n+each subtask of the sink that has received data for that partition. The in-progress part file will be closed and additional\n+part file will be created according to the configurable rolling policy. The policy rolls part files based on size,\n+a timeout that specifies the maximum duration for which a file can be open.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.rolling-policy.file-size</h5></td>\n+        <td style=\"word-wrap: break-word;\">1024L * 1024L * 128L</td>\n+        <td>Long</td>\n+        <td>The maximum part file size before rolling.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.rolling-policy.time-interval</h5></td>\n+        <td style=\"word-wrap: break-word;\">30 m</td>\n+        <td>Duration</td>\n+        <td>The maximum time duration a part file can stay open before rolling (by default 30 min to avoid to many small files).</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+**NOTE:** For bulk formats (parquet,orc,avro), the rolling policy in combination with the checkpoint interval(pending files\n+become finished on the next checkpoint) control the size and number of these parts.\n+\n+**NOTE:** For row formats (csv,json), you can reduce the time interval appropriately to avoid too long delay.\n+\n+### Partition commit\n+\n+Committing a partition is to notify the downstream application that the partition has finished writing, the partition is ready to be read.\n+Streaming sink includes not only the writing of data files, but also the visibility commit of partition. When a partition completes\n+writing, you need to notify metastore or add the success file in the directory. Partition commit mechanism allows you to:\n+\n+- Trigger: The timing of the commit of the partition can be determined by the watermark with the time extracted from the partition, or by processing time.\n+- Policy: How to commit a partition, built-in policies support for the commit of success files and metastore, you can also implement your own policies, such as triggering hive's analysis to generate statistics, or merging small files, etc.\n+\n+#### Partition commit trigger\n+\n+To define when to commit a partition, providing partition commit trigger:\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.partition-commit.trigger</h5></td>\n+        <td style=\"word-wrap: break-word;\">partition-time</td>\n+        <td>String</td>\n+        <td>Trigger type for partition commit: 'partition-time': extract time from partition, if 'watermark' > 'partition-time' + 'delay', will commit the partition. 'process-time': use processing time, if 'current processing time' > 'partition directory creation time' + 'delay', will commit the partition.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.delay</h5></td>\n+        <td style=\"word-wrap: break-word;\">0 s</td>\n+        <td>Duration</td>\n+        <td>The partition will not commit until the delay time. If it is a daily partition, should be '1 d', if it is a hourly partition, should be '1 h'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+There are two types of trigger:\n+- The first is to judge the time of partition commit according to the partition time and watermark.\n+This requires that your job has watermark, and the partition is divided according to time, such as\n+hourly partition or daily partition.\n+- The second is partition processing time. The time of partition commit according to partition\n+creation time and current time. This trigger is more universal, but not so precise. For example,\n+data delay or failover will lead to premature partition commit.\n+\n+#### Partition time extractor\n+\n+Time extractor defines extracting time from partition values.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>partition.time-extractor.kind</h5></td>\n+        <td style=\"word-wrap: break-word;\">default</td>\n+        <td>String</td>\n+        <td>Time extractor to extract time from partition values. Support default and custom. For default, can configure timestamp pattern. For custom, should configure extractor class.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>partition.time-extractor.class</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The extractor class for implement PartitionTimeExtractor interface.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>partition.time-extractor.timestamp-pattern</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The 'default' construction way allows users to use partition fields to get a legal timestamp pattern. Default support 'yyyy-mm-dd hh:mm:ss' from first field. If timestamp in partition is single field 'dt', can configure: '$dt'. If timestamp in partition is year, month, day, hour, can configure: '$year-$month-$day $hour:00:00'. If timestamp in partition is dt and hour, can configure: '$dt $hour:00:00'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+The default extractor provide a timestamp pattern way, you can construct timestamp pattern from your partition fields.\n+\n+You can also specify an implementation to complete partition time extraction. The custom extractor implementation like:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"java\" markdown=\"1\">\n+{% highlight java %}\n+\n+public class HourPartTimeExtractor implements PartitionTimeExtractor {\n+\t@Override\n+    public LocalDateTime extract(List<String> keys, List<String> values) {\n+        String dt = values.get(0);\n+        String hour = values.get(1);\n+\t\treturn Timestamp.valueOf(dt + \" \" + hour + \":00:00\").toLocalDateTime();\n+\t}\n+}\n+\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+#### Partition commit policy\n+\n+The partiton commit policy defines how to commit a partition. Two policies are supported by default:\n+\n+- The first is metastore, but since the file system does not have metastore, it is an empty implementation.\n+- The second is the success file, which will write an empty file in the directory corresponding to the partition.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.partition-commit.policy.kind</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>Policy to commit a partition is to notify the downstream application that the partition has finished writing, the partition is ready to be read. metastore: add partition to metastore. Only work with hive table, it is empty implementation for file system table. success-file: add '_success' file to directory. Both can be configured at the same time: 'metastore,success-file'. custom: use policy class to create a commit policy. Support to configure multiple policies: 'metastore,success-file'.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.policy.class</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The partition commit policy class for implement PartitionCommitPolicy interface. Only work in custom commit policy.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.success-file.name</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The file name for success-file partition commit policy, default is '_SUCCESS'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+You can extend the implementation of commit policy, The custom commit policy implementation like:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"java\" markdown=\"1\">\n+{% highlight java %}\n+\n+public class AnalysisCommitPolicy implements PartitionCommitPolicy {\n+    private HiveShell hiveShell;\n+\t@Override\n+\tpublic void commit(Context context) throws Exception {\n+\t    if (hiveShell == null) {\n+\t        hiveShell = createHiveShell(context.catalogName());\n+\t    }\n+\t    hiveShell.execute(String.format(\"ALTER TABLE %s ADD PARTITION (%s = '%s') location '%s'\",\n+\t        context.tableName(),\n+\t        context.partitionKeys().get(0),\n+\t        context.partitionValues().get(0),\n+\t        context.partitionPath()));\n+\t\thiveShell.execute(String.format(\n+\t\t    \"ANALYZE TABLE %s PARTITION (%s = '%s') COMPUTE STATISTICS FOR COLUMNS\",\n+\t\t    context.tableName(),\n+\t\t    context.partitionKeys().get(0),\n+\t\t    context.partitionValues().get(0)));\n+\t}\n+}\n+\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+## Example", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNDU4MQ==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429314581", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Here is a example to:\n          \n          \n            \n            \n          \n          \n            \n            - streaming sql: kafka table -> filesystem table.\n          \n          \n            \n            - batch sql: query filesystem table.\n          \n          \n            \n            The below shows how the file system connector can be used to write a streaming query to write data from Kafka into a file system and runs a batch query to read that data back out.", "author": "sjwiesman", "createdAt": "2020-05-22T15:29:29Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,352 @@\n+---\n+title: \"Hadoop FileSystem Connector\"\n+nav-title: Hadoop FileSystem\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/internals/filesystems.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming are only experimental. In the future, we will support actual streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition files\n+\n+The partition supported by the file system connector is similar to hive, but different from hive,\n+hive manage partitions through catalog, file system table manages partitions according to the\n+directory of the file system. File system connector discover and infer partitions automatically.\n+For example, a table partitioned by datetime and hour is the structure in file system path:\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table support partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/table/sql/insert.html).\n+\n+**NOTE:** When you insert overwrite to a partitioned table, only the corresponding partition will be overwrite, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file. It is [Newline-delimited JSON](http://jsonlines.org/). Uncompressed.\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming sink\n+\n+The file system connector supports streaming sink, it uses [Streaming File Sink]({{ site.baseurl }}/connectors/streamfile_sink.html)\n+to write records to file. Row-encoded Formats are csv and json. Bulk-encoded Formats are parquet, orc and avro.\n+\n+### Rolling policy\n+\n+Data within the partition directories are split into part files. Each partition will contain at least one part file for\n+each subtask of the sink that has received data for that partition. The in-progress part file will be closed and additional\n+part file will be created according to the configurable rolling policy. The policy rolls part files based on size,\n+a timeout that specifies the maximum duration for which a file can be open.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.rolling-policy.file-size</h5></td>\n+        <td style=\"word-wrap: break-word;\">1024L * 1024L * 128L</td>\n+        <td>Long</td>\n+        <td>The maximum part file size before rolling.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.rolling-policy.time-interval</h5></td>\n+        <td style=\"word-wrap: break-word;\">30 m</td>\n+        <td>Duration</td>\n+        <td>The maximum time duration a part file can stay open before rolling (by default 30 min to avoid to many small files).</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+**NOTE:** For bulk formats (parquet,orc,avro), the rolling policy in combination with the checkpoint interval(pending files\n+become finished on the next checkpoint) control the size and number of these parts.\n+\n+**NOTE:** For row formats (csv,json), you can reduce the time interval appropriately to avoid too long delay.\n+\n+### Partition commit\n+\n+Committing a partition is to notify the downstream application that the partition has finished writing, the partition is ready to be read.\n+Streaming sink includes not only the writing of data files, but also the visibility commit of partition. When a partition completes\n+writing, you need to notify metastore or add the success file in the directory. Partition commit mechanism allows you to:\n+\n+- Trigger: The timing of the commit of the partition can be determined by the watermark with the time extracted from the partition, or by processing time.\n+- Policy: How to commit a partition, built-in policies support for the commit of success files and metastore, you can also implement your own policies, such as triggering hive's analysis to generate statistics, or merging small files, etc.\n+\n+#### Partition commit trigger\n+\n+To define when to commit a partition, providing partition commit trigger:\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.partition-commit.trigger</h5></td>\n+        <td style=\"word-wrap: break-word;\">partition-time</td>\n+        <td>String</td>\n+        <td>Trigger type for partition commit: 'partition-time': extract time from partition, if 'watermark' > 'partition-time' + 'delay', will commit the partition. 'process-time': use processing time, if 'current processing time' > 'partition directory creation time' + 'delay', will commit the partition.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.delay</h5></td>\n+        <td style=\"word-wrap: break-word;\">0 s</td>\n+        <td>Duration</td>\n+        <td>The partition will not commit until the delay time. If it is a daily partition, should be '1 d', if it is a hourly partition, should be '1 h'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+There are two types of trigger:\n+- The first is to judge the time of partition commit according to the partition time and watermark.\n+This requires that your job has watermark, and the partition is divided according to time, such as\n+hourly partition or daily partition.\n+- The second is partition processing time. The time of partition commit according to partition\n+creation time and current time. This trigger is more universal, but not so precise. For example,\n+data delay or failover will lead to premature partition commit.\n+\n+#### Partition time extractor\n+\n+Time extractor defines extracting time from partition values.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>partition.time-extractor.kind</h5></td>\n+        <td style=\"word-wrap: break-word;\">default</td>\n+        <td>String</td>\n+        <td>Time extractor to extract time from partition values. Support default and custom. For default, can configure timestamp pattern. For custom, should configure extractor class.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>partition.time-extractor.class</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The extractor class for implement PartitionTimeExtractor interface.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>partition.time-extractor.timestamp-pattern</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The 'default' construction way allows users to use partition fields to get a legal timestamp pattern. Default support 'yyyy-mm-dd hh:mm:ss' from first field. If timestamp in partition is single field 'dt', can configure: '$dt'. If timestamp in partition is year, month, day, hour, can configure: '$year-$month-$day $hour:00:00'. If timestamp in partition is dt and hour, can configure: '$dt $hour:00:00'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+The default extractor provide a timestamp pattern way, you can construct timestamp pattern from your partition fields.\n+\n+You can also specify an implementation to complete partition time extraction. The custom extractor implementation like:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"java\" markdown=\"1\">\n+{% highlight java %}\n+\n+public class HourPartTimeExtractor implements PartitionTimeExtractor {\n+\t@Override\n+    public LocalDateTime extract(List<String> keys, List<String> values) {\n+        String dt = values.get(0);\n+        String hour = values.get(1);\n+\t\treturn Timestamp.valueOf(dt + \" \" + hour + \":00:00\").toLocalDateTime();\n+\t}\n+}\n+\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+#### Partition commit policy\n+\n+The partiton commit policy defines how to commit a partition. Two policies are supported by default:\n+\n+- The first is metastore, but since the file system does not have metastore, it is an empty implementation.\n+- The second is the success file, which will write an empty file in the directory corresponding to the partition.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.partition-commit.policy.kind</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>Policy to commit a partition is to notify the downstream application that the partition has finished writing, the partition is ready to be read. metastore: add partition to metastore. Only work with hive table, it is empty implementation for file system table. success-file: add '_success' file to directory. Both can be configured at the same time: 'metastore,success-file'. custom: use policy class to create a commit policy. Support to configure multiple policies: 'metastore,success-file'.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.policy.class</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The partition commit policy class for implement PartitionCommitPolicy interface. Only work in custom commit policy.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.success-file.name</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The file name for success-file partition commit policy, default is '_SUCCESS'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+You can extend the implementation of commit policy, The custom commit policy implementation like:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"java\" markdown=\"1\">\n+{% highlight java %}\n+\n+public class AnalysisCommitPolicy implements PartitionCommitPolicy {\n+    private HiveShell hiveShell;\n+\t@Override\n+\tpublic void commit(Context context) throws Exception {\n+\t    if (hiveShell == null) {\n+\t        hiveShell = createHiveShell(context.catalogName());\n+\t    }\n+\t    hiveShell.execute(String.format(\"ALTER TABLE %s ADD PARTITION (%s = '%s') location '%s'\",\n+\t        context.tableName(),\n+\t        context.partitionKeys().get(0),\n+\t        context.partitionValues().get(0),\n+\t        context.partitionPath()));\n+\t\thiveShell.execute(String.format(\n+\t\t    \"ANALYZE TABLE %s PARTITION (%s = '%s') COMPUTE STATISTICS FOR COLUMNS\",\n+\t\t    context.tableName(),\n+\t\t    context.partitionKeys().get(0),\n+\t\t    context.partitionValues().get(0)));\n+\t}\n+}\n+\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+## Example\n+\n+Here is a example to:\n+\n+- streaming sql: kafka table -> filesystem table.\n+- batch sql: query filesystem table.", "originalCommit": "967561896814c71906c96bb77e7d9ac76fe7fd26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5OTU0Nw==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429899547", "bodyText": "please use \"'\", not \"\u2018\"", "author": "leonardBang", "createdAt": "2020-05-25T12:05:38Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,340 @@\n+---\n+title: \"FileSystem Connector\"\n+nav-title: FileSystem Connector\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/ops/filesystems/index.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming is still under development. In the future, the community will add support for common streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition Files\n+\n+Flink's file system partition support uses the standard hive format. However, it does not require partitions to be pre-registered with a table catalog. Partitions are discovered and inferred based on directory structure. For example, a table partitioned based on the directory below would be inferred to contain `datetime` and `hour` partitions.\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table supports both partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/table/sql/insert.html). When you insert overwrite to a partitioned table, only the corresponding partition will be overwritten, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file but uncompressed [newline delimited JSON](http://jsonlines.org/).\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming Sink\n+\n+The file system connector supports streaming writes, based on Flink's [Streaming File Sink]({{ site.baseurl }}/connectors/streamfile_sink.html)\n+to write records to file. Row-encoded Formats are csv and json. Bulk-encoded Formats are parquet, orc and avro.\n+\n+### Rolling Policy\n+\n+Data within the partition directories are split into part files. Each partition will contain at least one part file for\n+each subtask of the sink that has received data for that partition. The in-progress part file will be closed and additional\n+part file will be created according to the configurable rolling policy. The policy rolls part files based on size,\n+a timeout that specifies the maximum duration for which a file can be open.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.rolling-policy.file-size</h5></td>\n+        <td style=\"word-wrap: break-word;\">1024L * 1024L * 128L</td>\n+        <td>Long</td>\n+        <td>The maximum part file size before rolling.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.rolling-policy.time-interval</h5></td>\n+        <td style=\"word-wrap: break-word;\">30 m</td>\n+        <td>Duration</td>\n+        <td>The maximum time duration a part file can stay open before rolling (by default 30 min to avoid to many small files).</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+**NOTE:** For bulk formats (parquet, orc, avro), the rolling policy in combination with the checkpoint interval(pending files\n+become finished on the next checkpoint) control the size and number of these parts.\n+\n+**NOTE:** For row formats (csv, json), you can reduce the time interval appropriately to avoid too long delay.\n+\n+### Partition Commit\n+\n+After writing a partition, it is often necessary to notify downstream applications. For example, add the partition to a Hive metastore or writing a `_SUCCESS` file in the directory. The file system sink contains a partition commit feature that allows configuring custom policies. Commit actions are based on a combination of `triggers` and `policies`. \n+\n+- Trigger: The timing of the commit of the partition can be determined by the watermark with the time extracted from the partition, or by processing time.\n+- Policy: How to commit a partition, built-in policies support for the commit of success files and metastore, you can also implement your own policies, such as triggering hive's analysis to generate statistics, or merging small files, etc.\n+\n+#### Partition commit trigger\n+\n+To define when to commit a partition, providing partition commit trigger:\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.partition-commit.trigger</h5></td>\n+        <td style=\"word-wrap: break-word;\">partition-time</td>\n+        <td>String</td>\n+        <td>Trigger type for partition commit: 'partition-time': extract time from partition, if 'watermark' > 'partition-time' + 'delay', will commit the partition. 'process-time': use processing time, if 'current processing time' > 'partition directory creation time' + 'delay', will commit the partition.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.delay</h5></td>\n+        <td style=\"word-wrap: break-word;\">0 s</td>\n+        <td>Duration</td>\n+        <td>The partition will not commit until the delay time. If it is a daily partition, should be '1 d', if it is a hourly partition, should be '1 h'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+There are two types of trigger:\n+- The first is to judge the time of partition commit according to the partition time and watermark.\n+This requires that your job is using event time, and the partition is divided according to time, such as\n+hourly partition or daily partition.\n+- The second is partition processing time. The time of partition commit according to partition\n+creation time and current time. This trigger is more universal, but not so precise. For example,\n+data delay or failover will lead to premature partition commit.\n+\n+#### Partition Time Extractor\n+\n+Time extractors define extracting time from partition values.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>partition.time-extractor.kind</h5></td>\n+        <td style=\"word-wrap: break-word;\">default</td>\n+        <td>String</td>\n+        <td>Time extractor to extract time from partition values. Support default and custom. For default, can configure timestamp pattern. For custom, should configure extractor class.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>partition.time-extractor.class</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The extractor class for implement PartitionTimeExtractor interface.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>partition.time-extractor.timestamp-pattern</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The 'default' construction way allows users to use partition fields to get a legal timestamp pattern. Default support 'yyyy-mm-dd hh:mm:ss' from first field. If timestamp in partition is single field 'dt', can configure: '$dt'. If timestamp in partition is year, month, day, hour, can configure: '$year-$month-$day $hour:00:00'. If timestamp in partition is dt and hour, can configure: '$dt $hour:00:00'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+The default extractor is based on a timestamp pattern composed of your partition fields. You can also specify an implementation for fully custom partition extraction based on the `PartitionTimeExtractor` interface. \n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"java\" markdown=\"1\">\n+{% highlight java %}\n+\n+public class HourPartTimeExtractor implements PartitionTimeExtractor {\n+\t@Override\n+    public LocalDateTime extract(List<String> keys, List<String> values) {\n+        String dt = values.get(0);\n+        String hour = values.get(1);\n+\t\treturn Timestamp.valueOf(dt + \" \" + hour + \":00:00\").toLocalDateTime();\n+\t}\n+}\n+\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+#### Partition Commit Policy\n+\n+The partition commit policy defines what action is taken when partitions are committed. \n+\n+- The first is metastore, only hive table supports metastore policy, file system manages partitions through directory structure.\n+- The second is the success file, which will write an empty file in the directory corresponding to the partition.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.partition-commit.policy.kind</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>Policy to commit a partition is to notify the downstream application that the partition has finished writing, the partition is ready to be read. metastore: add partition to metastore. Only work with hive table, it is empty implementation for file system table. success-file: add '_success' file to directory. Both can be configured at the same time: 'metastore,success-file'. custom: use policy class to create a commit policy. Support to configure multiple policies: 'metastore,success-file'.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.policy.class</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The partition commit policy class for implement PartitionCommitPolicy interface. Only work in custom commit policy.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.success-file.name</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The file name for success-file partition commit policy, default is '_SUCCESS'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+You can extend the implementation of commit policy, The custom commit policy implementation like:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"java\" markdown=\"1\">\n+{% highlight java %}\n+\n+public class AnalysisCommitPolicy implements PartitionCommitPolicy {\n+    private HiveShell hiveShell;\n+\t@Override\n+\tpublic void commit(Context context) throws Exception {\n+\t    if (hiveShell == null) {\n+\t        hiveShell = createHiveShell(context.catalogName());\n+\t    }\n+\t    hiveShell.execute(String.format(\"ALTER TABLE %s ADD PARTITION (%s = '%s') location '%s'\",\n+\t        context.tableName(),\n+\t        context.partitionKeys().get(0),\n+\t        context.partitionValues().get(0),\n+\t        context.partitionPath()));\n+\t\thiveShell.execute(String.format(\n+\t\t    \"ANALYZE TABLE %s PARTITION (%s = '%s') COMPUTE STATISTICS FOR COLUMNS\",\n+\t\t    context.tableName(),\n+\t\t    context.partitionKeys().get(0),\n+\t\t    context.partitionValues().get(0)));\n+\t}\n+}\n+\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+## Full Example\n+\n+The below shows how the file system connector can be used to write a streaming query to write data from Kafka into a file system and runs a batch query to read that data back out. \n+\n+{% highlight sql %}\n+\n+CREATE TABLE kafka_table (\n+  user_id STRING,\n+  order_amount DOUBLE,\n+  log_ts TIMESTAMP(3),\n+  WATERMARK FOR log_ts AS log_ts - INTERVAL '5' SECOND\n+) WITH (...);\n+\n+CREATE TABLE fs_table (\n+  user_id STRING,\n+  order_amount DOUBLE,\n+  dt STRING,\n+  hour STRING\n+) PARTITIONED BY (dt, hour) WITH (\n+  \u2019connector\u2019=\u2019filesystem\u2019,\n+  \u2019path\u2019=\u2019...\u2019,", "originalCommit": "9ad4d80a2795df3e7920d31660a2dea7fe1d5ee5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwNTYyMw==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429905623", "bodyText": "Good catch", "author": "JingsongLi", "createdAt": "2020-05-25T12:20:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5OTU0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5OTg1MQ==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429899851", "bodyText": "code ident", "author": "leonardBang", "createdAt": "2020-05-25T12:06:22Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,340 @@\n+---\n+title: \"FileSystem Connector\"\n+nav-title: FileSystem Connector\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/ops/filesystems/index.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming is still under development. In the future, the community will add support for common streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition Files\n+\n+Flink's file system partition support uses the standard hive format. However, it does not require partitions to be pre-registered with a table catalog. Partitions are discovered and inferred based on directory structure. For example, a table partitioned based on the directory below would be inferred to contain `datetime` and `hour` partitions.\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table supports both partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/table/sql/insert.html). When you insert overwrite to a partitioned table, only the corresponding partition will be overwritten, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file but uncompressed [newline delimited JSON](http://jsonlines.org/).\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming Sink\n+\n+The file system connector supports streaming writes, based on Flink's [Streaming File Sink]({{ site.baseurl }}/connectors/streamfile_sink.html)\n+to write records to file. Row-encoded Formats are csv and json. Bulk-encoded Formats are parquet, orc and avro.\n+\n+### Rolling Policy\n+\n+Data within the partition directories are split into part files. Each partition will contain at least one part file for\n+each subtask of the sink that has received data for that partition. The in-progress part file will be closed and additional\n+part file will be created according to the configurable rolling policy. The policy rolls part files based on size,\n+a timeout that specifies the maximum duration for which a file can be open.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.rolling-policy.file-size</h5></td>\n+        <td style=\"word-wrap: break-word;\">1024L * 1024L * 128L</td>\n+        <td>Long</td>\n+        <td>The maximum part file size before rolling.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.rolling-policy.time-interval</h5></td>\n+        <td style=\"word-wrap: break-word;\">30 m</td>\n+        <td>Duration</td>\n+        <td>The maximum time duration a part file can stay open before rolling (by default 30 min to avoid to many small files).</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+**NOTE:** For bulk formats (parquet, orc, avro), the rolling policy in combination with the checkpoint interval(pending files\n+become finished on the next checkpoint) control the size and number of these parts.\n+\n+**NOTE:** For row formats (csv, json), you can reduce the time interval appropriately to avoid too long delay.\n+\n+### Partition Commit\n+\n+After writing a partition, it is often necessary to notify downstream applications. For example, add the partition to a Hive metastore or writing a `_SUCCESS` file in the directory. The file system sink contains a partition commit feature that allows configuring custom policies. Commit actions are based on a combination of `triggers` and `policies`. \n+\n+- Trigger: The timing of the commit of the partition can be determined by the watermark with the time extracted from the partition, or by processing time.\n+- Policy: How to commit a partition, built-in policies support for the commit of success files and metastore, you can also implement your own policies, such as triggering hive's analysis to generate statistics, or merging small files, etc.\n+\n+#### Partition commit trigger\n+\n+To define when to commit a partition, providing partition commit trigger:\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.partition-commit.trigger</h5></td>\n+        <td style=\"word-wrap: break-word;\">partition-time</td>\n+        <td>String</td>\n+        <td>Trigger type for partition commit: 'partition-time': extract time from partition, if 'watermark' > 'partition-time' + 'delay', will commit the partition. 'process-time': use processing time, if 'current processing time' > 'partition directory creation time' + 'delay', will commit the partition.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.delay</h5></td>\n+        <td style=\"word-wrap: break-word;\">0 s</td>\n+        <td>Duration</td>\n+        <td>The partition will not commit until the delay time. If it is a daily partition, should be '1 d', if it is a hourly partition, should be '1 h'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+There are two types of trigger:\n+- The first is to judge the time of partition commit according to the partition time and watermark.\n+This requires that your job is using event time, and the partition is divided according to time, such as\n+hourly partition or daily partition.\n+- The second is partition processing time. The time of partition commit according to partition\n+creation time and current time. This trigger is more universal, but not so precise. For example,\n+data delay or failover will lead to premature partition commit.\n+\n+#### Partition Time Extractor\n+\n+Time extractors define extracting time from partition values.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>partition.time-extractor.kind</h5></td>\n+        <td style=\"word-wrap: break-word;\">default</td>\n+        <td>String</td>\n+        <td>Time extractor to extract time from partition values. Support default and custom. For default, can configure timestamp pattern. For custom, should configure extractor class.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>partition.time-extractor.class</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The extractor class for implement PartitionTimeExtractor interface.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>partition.time-extractor.timestamp-pattern</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The 'default' construction way allows users to use partition fields to get a legal timestamp pattern. Default support 'yyyy-mm-dd hh:mm:ss' from first field. If timestamp in partition is single field 'dt', can configure: '$dt'. If timestamp in partition is year, month, day, hour, can configure: '$year-$month-$day $hour:00:00'. If timestamp in partition is dt and hour, can configure: '$dt $hour:00:00'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+The default extractor is based on a timestamp pattern composed of your partition fields. You can also specify an implementation for fully custom partition extraction based on the `PartitionTimeExtractor` interface. \n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"java\" markdown=\"1\">\n+{% highlight java %}\n+\n+public class HourPartTimeExtractor implements PartitionTimeExtractor {\n+\t@Override\n+    public LocalDateTime extract(List<String> keys, List<String> values) {\n+        String dt = values.get(0);\n+        String hour = values.get(1);\n+\t\treturn Timestamp.valueOf(dt + \" \" + hour + \":00:00\").toLocalDateTime();\n+\t}\n+}\n+\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+#### Partition Commit Policy\n+\n+The partition commit policy defines what action is taken when partitions are committed. \n+\n+- The first is metastore, only hive table supports metastore policy, file system manages partitions through directory structure.\n+- The second is the success file, which will write an empty file in the directory corresponding to the partition.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.partition-commit.policy.kind</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>Policy to commit a partition is to notify the downstream application that the partition has finished writing, the partition is ready to be read. metastore: add partition to metastore. Only work with hive table, it is empty implementation for file system table. success-file: add '_success' file to directory. Both can be configured at the same time: 'metastore,success-file'. custom: use policy class to create a commit policy. Support to configure multiple policies: 'metastore,success-file'.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.policy.class</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The partition commit policy class for implement PartitionCommitPolicy interface. Only work in custom commit policy.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.success-file.name</h5></td>\n+        <td style=\"word-wrap: break-word;\"></td>\n+        <td>String</td>\n+        <td>The file name for success-file partition commit policy, default is '_SUCCESS'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+You can extend the implementation of commit policy, The custom commit policy implementation like:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"java\" markdown=\"1\">\n+{% highlight java %}\n+\n+public class AnalysisCommitPolicy implements PartitionCommitPolicy {\n+    private HiveShell hiveShell;\n+\t@Override\n+\tpublic void commit(Context context) throws Exception {\n+\t    if (hiveShell == null) {\n+\t        hiveShell = createHiveShell(context.catalogName());\n+\t    }\n+\t    hiveShell.execute(String.format(\"ALTER TABLE %s ADD PARTITION (%s = '%s') location '%s'\",\n+\t        context.tableName(),\n+\t        context.partitionKeys().get(0),\n+\t        context.partitionValues().get(0),\n+\t        context.partitionPath()));\n+\t\thiveShell.execute(String.format(", "originalCommit": "9ad4d80a2795df3e7920d31660a2dea7fe1d5ee5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwMDk1OA==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429900958", "bodyText": "please put the file in section \u300aTable API Connectors\u300b rather than \u300aDataStream Connectors\u300b", "author": "leonardBang", "createdAt": "2020-05-25T12:09:06Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,340 @@\n+---", "originalCommit": "9ad4d80a2795df3e7920d31660a2dea7fe1d5ee5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwMzY0NQ==", "url": "https://github.com/apache/flink/pull/12283#discussion_r429903645", "bodyText": "please check the URL\uff0cthere are some url can not open properly", "author": "leonardBang", "createdAt": "2020-05-25T12:15:52Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,340 @@\n+---\n+title: \"FileSystem Connector\"\n+nav-title: FileSystem Connector\n+nav-parent_id: connectors\n+nav-pos: 5\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/ops/filesystems/index.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming is still under development. In the future, the community will add support for common streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition Files\n+\n+Flink's file system partition support uses the standard hive format. However, it does not require partitions to be pre-registered with a table catalog. Partitions are discovered and inferred based on directory structure. For example, a table partitioned based on the directory below would be inferred to contain `datetime` and `hour` partitions.\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table supports both partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/table/sql/insert.html). When you insert overwrite to a partitioned table, only the corresponding partition will be overwritten, not the entire table.", "originalCommit": "9ad4d80a2795df3e7920d31660a2dea7fe1d5ee5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6a1b745e3bdfe9069cd62a9d9cc1fb742411a4ac", "url": "https://github.com/apache/flink/commit/6a1b745e3bdfe9069cd62a9d9cc1fb742411a4ac", "message": "[FLINK-16975][documentation] Add docs for FileSystem connector", "committedDate": "2020-05-27T11:24:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1MTg3Nw==", "url": "https://github.com/apache/flink/pull/12283#discussion_r431551877", "bodyText": "\"A filesystem table can be defined as\"?", "author": "lirui-apache", "createdAt": "2020-05-28T02:46:25Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,355 @@\n+---\n+title: \"FileSystem Connector\"\n+nav-title: FileSystem Connector\n+nav-parent_id: connectors-table\n+nav-pos: 1\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:", "originalCommit": "82265c63292351f29ed7885ba5be97317fa83b9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1MTkzMw==", "url": "https://github.com/apache/flink/pull/12283#discussion_r431551933", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              'connector' = 'filesystem',           -- required: specify to connector type\n          \n          \n            \n              'connector' = 'filesystem',           -- required: specify the connector type", "author": "lirui-apache", "createdAt": "2020-05-28T02:46:41Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,355 @@\n+---\n+title: \"FileSystem Connector\"\n+nav-title: FileSystem Connector\n+nav-parent_id: connectors-table\n+nav-pos: 1\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type", "originalCommit": "82265c63292351f29ed7885ba5be97317fa83b9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1MzEyNQ==", "url": "https://github.com/apache/flink/pull/12283#discussion_r431553125", "bodyText": "\"the default value is false\"?", "author": "lirui-apache", "createdAt": "2020-05-28T02:51:52Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,355 @@\n+---\n+title: \"FileSystem Connector\"\n+nav-title: FileSystem Connector\n+nav-parent_id: connectors-table\n+nav-pos: 1\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.", "originalCommit": "82265c63292351f29ed7885ba5be97317fa83b9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1NTQyNw==", "url": "https://github.com/apache/flink/pull/12283#discussion_r431555427", "bodyText": "So user can roll a part file either by size or by time, or both?", "author": "lirui-apache", "createdAt": "2020-05-28T03:01:52Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,355 @@\n+---\n+title: \"FileSystem Connector\"\n+nav-title: FileSystem Connector\n+nav-parent_id: connectors-table\n+nav-pos: 1\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/ops/filesystems/index.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming is still under development. In the future, the community will add support for common streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition Files\n+\n+Flink's file system partition support uses the standard hive format. However, it does not require partitions to be pre-registered with a table catalog. Partitions are discovered and inferred based on directory structure. For example, a table partitioned based on the directory below would be inferred to contain `datetime` and `hour` partitions.\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table supports both partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/dev/table/sql/insert.html). When you insert overwrite to a partitioned table, only the corresponding partition will be overwritten, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file but uncompressed [newline delimited JSON](http://jsonlines.org/).\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming Sink\n+\n+The file system connector supports streaming writes, based on Flink's [Streaming File Sink]({{ site.baseurl }}/dev/connectors/streamfile_sink.html)\n+to write records to file. Row-encoded Formats are csv and json. Bulk-encoded Formats are parquet, orc and avro.\n+\n+### Rolling Policy\n+\n+Data within the partition directories are split into part files. Each partition will contain at least one part file for\n+each subtask of the sink that has received data for that partition. The in-progress part file will be closed and additional\n+part file will be created according to the configurable rolling policy. The policy rolls part files based on size,\n+a timeout that specifies the maximum duration for which a file can be open.", "originalCommit": "82265c63292351f29ed7885ba5be97317fa83b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzNTM0NQ==", "url": "https://github.com/apache/flink/pull/12283#discussion_r431835345", "bodyText": "yes", "author": "JingsongLi", "createdAt": "2020-05-28T13:30:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1NTQyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1NTg4NQ==", "url": "https://github.com/apache/flink/pull/12283#discussion_r431555885", "bodyText": "Why is this called memory size? And what's the difference between memory size and the file size that a user can see in the file system?", "author": "lirui-apache", "createdAt": "2020-05-28T03:03:44Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,355 @@\n+---\n+title: \"FileSystem Connector\"\n+nav-title: FileSystem Connector\n+nav-parent_id: connectors-table\n+nav-pos: 1\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/ops/filesystems/index.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming is still under development. In the future, the community will add support for common streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition Files\n+\n+Flink's file system partition support uses the standard hive format. However, it does not require partitions to be pre-registered with a table catalog. Partitions are discovered and inferred based on directory structure. For example, a table partitioned based on the directory below would be inferred to contain `datetime` and `hour` partitions.\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table supports both partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/dev/table/sql/insert.html). When you insert overwrite to a partitioned table, only the corresponding partition will be overwritten, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file but uncompressed [newline delimited JSON](http://jsonlines.org/).\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming Sink\n+\n+The file system connector supports streaming writes, based on Flink's [Streaming File Sink]({{ site.baseurl }}/dev/connectors/streamfile_sink.html)\n+to write records to file. Row-encoded Formats are csv and json. Bulk-encoded Formats are parquet, orc and avro.\n+\n+### Rolling Policy\n+\n+Data within the partition directories are split into part files. Each partition will contain at least one part file for\n+each subtask of the sink that has received data for that partition. The in-progress part file will be closed and additional\n+part file will be created according to the configurable rolling policy. The policy rolls part files based on size,\n+a timeout that specifies the maximum duration for which a file can be open.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.rolling-policy.file-size</h5></td>\n+        <td style=\"word-wrap: break-word;\">128MB</td>\n+        <td>MemorySize</td>", "originalCommit": "82265c63292351f29ed7885ba5be97317fa83b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzNjA0Mg==", "url": "https://github.com/apache/flink/pull/12283#discussion_r431836042", "bodyText": "I think it is a legacy reason, and it is used in disk too.", "author": "JingsongLi", "createdAt": "2020-05-28T13:31:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1NTg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1NjkxNg==", "url": "https://github.com/apache/flink/pull/12283#discussion_r431556916", "bodyText": "Does this mean only bulk formats can work with checkpoints?", "author": "lirui-apache", "createdAt": "2020-05-28T03:07:57Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,355 @@\n+---\n+title: \"FileSystem Connector\"\n+nav-title: FileSystem Connector\n+nav-parent_id: connectors-table\n+nav-pos: 1\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/ops/filesystems/index.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming is still under development. In the future, the community will add support for common streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition Files\n+\n+Flink's file system partition support uses the standard hive format. However, it does not require partitions to be pre-registered with a table catalog. Partitions are discovered and inferred based on directory structure. For example, a table partitioned based on the directory below would be inferred to contain `datetime` and `hour` partitions.\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table supports both partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/dev/table/sql/insert.html). When you insert overwrite to a partitioned table, only the corresponding partition will be overwritten, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file but uncompressed [newline delimited JSON](http://jsonlines.org/).\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming Sink\n+\n+The file system connector supports streaming writes, based on Flink's [Streaming File Sink]({{ site.baseurl }}/dev/connectors/streamfile_sink.html)\n+to write records to file. Row-encoded Formats are csv and json. Bulk-encoded Formats are parquet, orc and avro.\n+\n+### Rolling Policy\n+\n+Data within the partition directories are split into part files. Each partition will contain at least one part file for\n+each subtask of the sink that has received data for that partition. The in-progress part file will be closed and additional\n+part file will be created according to the configurable rolling policy. The policy rolls part files based on size,\n+a timeout that specifies the maximum duration for which a file can be open.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.rolling-policy.file-size</h5></td>\n+        <td style=\"word-wrap: break-word;\">128MB</td>\n+        <td>MemorySize</td>\n+        <td>The maximum part file size before rolling.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.rolling-policy.time-interval</h5></td>\n+        <td style=\"word-wrap: break-word;\">30 m</td>\n+        <td>Duration</td>\n+        <td>The maximum time duration a part file can stay open before rolling (by default 30 min to avoid to many small files).</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+**NOTE:** For bulk formats (parquet, orc, avro), the rolling policy in combination with the checkpoint interval(pending files", "originalCommit": "82265c63292351f29ed7885ba5be97317fa83b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzNzcyOA==", "url": "https://github.com/apache/flink/pull/12283#discussion_r431837728", "bodyText": "No, it means checkpoint must trigger rolling for bulk formats, but not for row-based.", "author": "JingsongLi", "createdAt": "2020-05-28T13:33:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1NjkxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1ODczNA==", "url": "https://github.com/apache/flink/pull/12283#discussion_r431558734", "bodyText": "What happens if late data arrives after a partition is committed? Is it appended to the partition or discarded?", "author": "lirui-apache", "createdAt": "2020-05-28T03:15:28Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,355 @@\n+---\n+title: \"FileSystem Connector\"\n+nav-title: FileSystem Connector\n+nav-parent_id: connectors-table\n+nav-pos: 1\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/ops/filesystems/index.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming is still under development. In the future, the community will add support for common streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition Files\n+\n+Flink's file system partition support uses the standard hive format. However, it does not require partitions to be pre-registered with a table catalog. Partitions are discovered and inferred based on directory structure. For example, a table partitioned based on the directory below would be inferred to contain `datetime` and `hour` partitions.\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table supports both partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/dev/table/sql/insert.html). When you insert overwrite to a partitioned table, only the corresponding partition will be overwritten, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file but uncompressed [newline delimited JSON](http://jsonlines.org/).\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming Sink\n+\n+The file system connector supports streaming writes, based on Flink's [Streaming File Sink]({{ site.baseurl }}/dev/connectors/streamfile_sink.html)\n+to write records to file. Row-encoded Formats are csv and json. Bulk-encoded Formats are parquet, orc and avro.\n+\n+### Rolling Policy\n+\n+Data within the partition directories are split into part files. Each partition will contain at least one part file for\n+each subtask of the sink that has received data for that partition. The in-progress part file will be closed and additional\n+part file will be created according to the configurable rolling policy. The policy rolls part files based on size,\n+a timeout that specifies the maximum duration for which a file can be open.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.rolling-policy.file-size</h5></td>\n+        <td style=\"word-wrap: break-word;\">128MB</td>\n+        <td>MemorySize</td>\n+        <td>The maximum part file size before rolling.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.rolling-policy.time-interval</h5></td>\n+        <td style=\"word-wrap: break-word;\">30 m</td>\n+        <td>Duration</td>\n+        <td>The maximum time duration a part file can stay open before rolling (by default 30 min to avoid to many small files).</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+**NOTE:** For bulk formats (parquet, orc, avro), the rolling policy in combination with the checkpoint interval(pending files\n+become finished on the next checkpoint) control the size and number of these parts.\n+\n+**NOTE:** For row formats (csv, json), you can reduce the time interval appropriately to avoid too long delay.\n+\n+### Partition Commit\n+\n+After writing a partition, it is often necessary to notify downstream applications. For example, add the partition to a Hive metastore or writing a `_SUCCESS` file in the directory. The file system sink contains a partition commit feature that allows configuring custom policies. Commit actions are based on a combination of `triggers` and `policies`. \n+\n+- Trigger: The timing of the commit of the partition can be determined by the watermark with the time extracted from the partition, or by processing time.\n+- Policy: How to commit a partition, built-in policies support for the commit of success files and metastore, you can also implement your own policies, such as triggering hive's analysis to generate statistics, or merging small files, etc.\n+\n+#### Partition commit trigger\n+\n+To define when to commit a partition, providing partition commit trigger:\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.partition-commit.trigger</h5></td>\n+        <td style=\"word-wrap: break-word;\">process-time</td>\n+        <td>String</td>\n+        <td>Trigger type for partition commit: 'process-time': based on the time of the machine, it neither requires partition time extraction nor watermark generation. Commit partition once the 'current system time' passes 'partition creation system time' plus 'delay'. 'partition-time': based on the time that extracted from partition values, it requires watermark generation. Commit partition once the 'watermark' passes 'time extracted from partition values' plus 'delay'.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.delay</h5></td>\n+        <td style=\"word-wrap: break-word;\">0 s</td>\n+        <td>Duration</td>\n+        <td>The partition will not commit until the delay time. If it is a daily partition, should be '1 d', if it is a hourly partition, should be '1 h'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+There are two types of trigger:\n+- The first is partition processing time. It neither requires partition time extraction nor watermark\n+generation. The trigger of partition commit according to partition creation time and current system time. This trigger\n+is more universal, but not so precise. For example, data delay or failover will lead to premature partition commit.\n+- The second is the trigger of partition commit according to the time that extracted from partition values and watermark.\n+This requires that your job has watermark generation, and the partition is divided according to time, such as\n+hourly partition or daily partition.\n+\n+If you want to let downstream see the partition as soon as possible, no matter whether its data is complete or not:\n+- 'sink.partition-commit.trigger'='process-time' (Default value)\n+- 'sink.partition-commit.delay'='0s' (Default value)\n+Once there is data in the partition, it will immediately commit. Note: the partition may be committed multiple times.\n+\n+If you want to let downstream see the partition only when its data is complete, and your job has watermark generation, and you can extract the time from partition values:\n+- 'sink.partition-commit.trigger'='partition-time'\n+- 'sink.partition-commit.delay'='1h' ('1h' if your partition is hourly partition, depends on your partition type)\n+This is the most accurate way to commit partition, and it will try to ensure that the committed partitions are as data complete as possible.", "originalCommit": "82265c63292351f29ed7885ba5be97317fa83b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU2MzU3OQ==", "url": "https://github.com/apache/flink/pull/12283#discussion_r431563579", "bodyText": "I just saw the earlier discussions about this question. I guess we should also mention it in the doc.", "author": "lirui-apache", "createdAt": "2020-05-28T03:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1ODczNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1OTg4OA==", "url": "https://github.com/apache/flink/pull/12283#discussion_r431559888", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    <td>The 'default' construction way allows users to use partition fields to get a legal timestamp pattern. Default support 'yyyy-mm-dd hh:mm:ss' from first field. If timestamp in partition is single field 'dt', can configure: '$dt'. If timestamp in partition is year, month, day, hour, can configure: '$year-$month-$day $hour:00:00'. If timestamp in partition is dt and hour, can configure: '$dt $hour:00:00'.</td>\n          \n          \n            \n                    <td>The 'default' construction way allows users to use partition fields to get a legal timestamp pattern. Default support 'yyyy-mm-dd hh:mm:ss' from first field. If timestamp should be extracted from a single partition field 'dt', can configure: '$dt'. If timestamp should be extracted from multiple partition fields, say 'year', 'month', 'day' and 'hour', can configure: '$year-$month-$day $hour:00:00'. If timestamp should be extracted from two partition fields 'dt' and 'hour', can configure: '$dt $hour:00:00'.</td>", "author": "lirui-apache", "createdAt": "2020-05-28T03:20:40Z", "path": "docs/dev/table/connectors/filesystem.md", "diffHunk": "@@ -0,0 +1,355 @@\n+---\n+title: \"FileSystem Connector\"\n+nav-title: FileSystem Connector\n+nav-parent_id: connectors-table\n+nav-pos: 1\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify to connector type\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is disabled.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/ops/filesystems/index.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming is still under development. In the future, the community will add support for common streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition Files\n+\n+Flink's file system partition support uses the standard hive format. However, it does not require partitions to be pre-registered with a table catalog. Partitions are discovered and inferred based on directory structure. For example, a table partitioned based on the directory below would be inferred to contain `datetime` and `hour` partitions.\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table supports both partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/dev/table/sql/insert.html). When you insert overwrite to a partitioned table, only the corresponding partition will be overwritten, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file but uncompressed [newline delimited JSON](http://jsonlines.org/).\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming Sink\n+\n+The file system connector supports streaming writes, based on Flink's [Streaming File Sink]({{ site.baseurl }}/dev/connectors/streamfile_sink.html)\n+to write records to file. Row-encoded Formats are csv and json. Bulk-encoded Formats are parquet, orc and avro.\n+\n+### Rolling Policy\n+\n+Data within the partition directories are split into part files. Each partition will contain at least one part file for\n+each subtask of the sink that has received data for that partition. The in-progress part file will be closed and additional\n+part file will be created according to the configurable rolling policy. The policy rolls part files based on size,\n+a timeout that specifies the maximum duration for which a file can be open.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.rolling-policy.file-size</h5></td>\n+        <td style=\"word-wrap: break-word;\">128MB</td>\n+        <td>MemorySize</td>\n+        <td>The maximum part file size before rolling.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.rolling-policy.time-interval</h5></td>\n+        <td style=\"word-wrap: break-word;\">30 m</td>\n+        <td>Duration</td>\n+        <td>The maximum time duration a part file can stay open before rolling (by default 30 min to avoid to many small files).</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+**NOTE:** For bulk formats (parquet, orc, avro), the rolling policy in combination with the checkpoint interval(pending files\n+become finished on the next checkpoint) control the size and number of these parts.\n+\n+**NOTE:** For row formats (csv, json), you can reduce the time interval appropriately to avoid too long delay.\n+\n+### Partition Commit\n+\n+After writing a partition, it is often necessary to notify downstream applications. For example, add the partition to a Hive metastore or writing a `_SUCCESS` file in the directory. The file system sink contains a partition commit feature that allows configuring custom policies. Commit actions are based on a combination of `triggers` and `policies`. \n+\n+- Trigger: The timing of the commit of the partition can be determined by the watermark with the time extracted from the partition, or by processing time.\n+- Policy: How to commit a partition, built-in policies support for the commit of success files and metastore, you can also implement your own policies, such as triggering hive's analysis to generate statistics, or merging small files, etc.\n+\n+#### Partition commit trigger\n+\n+To define when to commit a partition, providing partition commit trigger:\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.partition-commit.trigger</h5></td>\n+        <td style=\"word-wrap: break-word;\">process-time</td>\n+        <td>String</td>\n+        <td>Trigger type for partition commit: 'process-time': based on the time of the machine, it neither requires partition time extraction nor watermark generation. Commit partition once the 'current system time' passes 'partition creation system time' plus 'delay'. 'partition-time': based on the time that extracted from partition values, it requires watermark generation. Commit partition once the 'watermark' passes 'time extracted from partition values' plus 'delay'.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.delay</h5></td>\n+        <td style=\"word-wrap: break-word;\">0 s</td>\n+        <td>Duration</td>\n+        <td>The partition will not commit until the delay time. If it is a daily partition, should be '1 d', if it is a hourly partition, should be '1 h'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+There are two types of trigger:\n+- The first is partition processing time. It neither requires partition time extraction nor watermark\n+generation. The trigger of partition commit according to partition creation time and current system time. This trigger\n+is more universal, but not so precise. For example, data delay or failover will lead to premature partition commit.\n+- The second is the trigger of partition commit according to the time that extracted from partition values and watermark.\n+This requires that your job has watermark generation, and the partition is divided according to time, such as\n+hourly partition or daily partition.\n+\n+If you want to let downstream see the partition as soon as possible, no matter whether its data is complete or not:\n+- 'sink.partition-commit.trigger'='process-time' (Default value)\n+- 'sink.partition-commit.delay'='0s' (Default value)\n+Once there is data in the partition, it will immediately commit. Note: the partition may be committed multiple times.\n+\n+If you want to let downstream see the partition only when its data is complete, and your job has watermark generation, and you can extract the time from partition values:\n+- 'sink.partition-commit.trigger'='partition-time'\n+- 'sink.partition-commit.delay'='1h' ('1h' if your partition is hourly partition, depends on your partition type)\n+This is the most accurate way to commit partition, and it will try to ensure that the committed partitions are as data complete as possible.\n+\n+If you want to let downstream see the partition only when its data is complete, but there is no watermark, or the time cannot be extracted from partition values:\n+- 'sink.partition-commit.trigger'='process-time' (Default value)\n+- 'sink.partition-commit.delay'='1h' ('1h' if your partition is hourly partition, depends on your partition type)\n+Try to commit partition accurately, but data delay or failover will lead to premature partition commit.\n+\n+#### Partition Time Extractor\n+\n+Time extractors define extracting time from partition values.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>partition.time-extractor.kind</h5></td>\n+        <td style=\"word-wrap: break-word;\">default</td>\n+        <td>String</td>\n+        <td>Time extractor to extract time from partition values. Support default and custom. For default, can configure timestamp pattern. For custom, should configure extractor class.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>partition.time-extractor.class</h5></td>\n+        <td style=\"word-wrap: break-word;\">(none)</td>\n+        <td>String</td>\n+        <td>The extractor class for implement PartitionTimeExtractor interface.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>partition.time-extractor.timestamp-pattern</h5></td>\n+        <td style=\"word-wrap: break-word;\">(none)</td>\n+        <td>String</td>\n+        <td>The 'default' construction way allows users to use partition fields to get a legal timestamp pattern. Default support 'yyyy-mm-dd hh:mm:ss' from first field. If timestamp in partition is single field 'dt', can configure: '$dt'. If timestamp in partition is year, month, day, hour, can configure: '$year-$month-$day $hour:00:00'. If timestamp in partition is dt and hour, can configure: '$dt $hour:00:00'.</td>", "originalCommit": "82265c63292351f29ed7885ba5be97317fa83b9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNDE1Mw==", "url": "https://github.com/apache/flink/pull/12283#discussion_r434134153", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              'sink.partition-commit.policy.kind'='success-file')\n          \n          \n            \n              'sink.partition-commit.policy.kind'='success-file'", "author": "sjwiesman", "createdAt": "2020-06-02T19:44:27Z", "path": "docs/dev/table/connectors/filesystem.zh.md", "diffHunk": "@@ -0,0 +1,359 @@\n+---\n+title: \"FileSystem Connector\"\n+nav-title: FileSystem Connector\n+nav-parent_id: connectors-table\n+nav-pos: 1\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+This connector provides access to partitioned files in filesystems\n+supported by the [Flink FileSystem abstraction]({{ site.baseurl}}/ops/filesystems/index.html).\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The file system connector itself is included in Flink and does not require an additional dependency.\n+A corresponding format needs to be specified for reading and writing rows from and to a file system.\n+\n+The file system connector allows for reading and writing from a local or distributed filesystem. A filesystem table can be defined as:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"DDL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE MyUserTable (\n+  column_name1 INT,\n+  column_name2 STRING,\n+  ...\n+  part_name1 INT,\n+  part_name2 STRING\n+) PARTITIONED BY (part_name1, part_name2) WITH (\n+  'connector' = 'filesystem',           -- required: specify the connector\n+  'path' = 'file:///path/to/whatever',  -- required: path to a directory\n+  'format' = '...',                     -- required: file system connector requires to specify a format,\n+                                        -- Please refer to Table Formats\n+                                        -- section for more details.s\n+  'partition.default-name' = '...',     -- optional: default partition name in case the dynamic partition\n+                                        -- column value is null/empty string.\n+  \n+  -- optional: the option to enable shuffle data by dynamic partition fields in sink phase, this can greatly\n+  -- reduce the number of file for filesystem sink but may lead data skew, the default value is false.\n+  'sink.shuffle-by-partition.enable' = '...',\n+  ...\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+<span class=\"label label-danger\">Attention</span> Make sure to include [Flink File System specific dependencies]({{ site.baseurl }}/ops/filesystems/index.html).\n+\n+<span class=\"label label-danger\">Attention</span> File system sources for streaming is still under development. In the future, the community will add support for common streaming use cases, i.e., partition and directory monitoring.\n+\n+## Partition Files\n+\n+Flink's file system partition support uses the standard hive format. However, it does not require partitions to be pre-registered with a table catalog. Partitions are discovered and inferred based on directory structure. For example, a table partitioned based on the directory below would be inferred to contain `datetime` and `hour` partitions.\n+\n+```\n+path\n+\u2514\u2500\u2500 datetime=2019-08-25\n+    \u2514\u2500\u2500 hour=11\n+        \u251c\u2500\u2500 part-0.parquet\n+        \u251c\u2500\u2500 part-1.parquet\n+    \u2514\u2500\u2500 hour=12\n+        \u251c\u2500\u2500 part-0.parquet\n+\u2514\u2500\u2500 datetime=2019-08-26\n+    \u2514\u2500\u2500 hour=6\n+        \u251c\u2500\u2500 part-0.parquet\n+```\n+\n+The file system table supports both partition inserting and overwrite inserting. See [INSERT Statement]({{ site.baseurl }}/dev/table/sql/insert.html). When you insert overwrite to a partitioned table, only the corresponding partition will be overwritten, not the entire table.\n+\n+## File Formats\n+\n+The file system connector supports multiple formats:\n+\n+ - CSV: [RFC-4180](https://tools.ietf.org/html/rfc4180). Uncompressed.\n+ - JSON: Note JSON format for file system connector is not a typical JSON file but uncompressed [newline delimited JSON](http://jsonlines.org/).\n+ - Avro: [Apache Avro](http://avro.apache.org). Support compression by configuring `avro.codec`.\n+ - Parquet: [Apache Parquet](http://parquet.apache.org). Compatible with Hive.\n+ - Orc: [Apache Orc](http://orc.apache.org). Compatible with Hive.\n+\n+## Streaming Sink\n+\n+The file system connector supports streaming writes, based on Flink's [Streaming File Sink]({{ site.baseurl }}/dev/connectors/streamfile_sink.html)\n+to write records to file. Row-encoded Formats are csv and json. Bulk-encoded Formats are parquet, orc and avro.\n+\n+### Rolling Policy\n+\n+Data within the partition directories are split into part files. Each partition will contain at least one part file for\n+each subtask of the sink that has received data for that partition. The in-progress part file will be closed and additional\n+part file will be created according to the configurable rolling policy. The policy rolls part files based on size,\n+a timeout that specifies the maximum duration for which a file can be open.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.rolling-policy.file-size</h5></td>\n+        <td style=\"word-wrap: break-word;\">128MB</td>\n+        <td>MemorySize</td>\n+        <td>The maximum part file size before rolling.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.rolling-policy.time-interval</h5></td>\n+        <td style=\"word-wrap: break-word;\">30 m</td>\n+        <td>Duration</td>\n+        <td>The maximum time duration a part file can stay open before rolling (by default 30 min to avoid to many small files).</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+**NOTE:** For bulk formats (parquet, orc, avro), the rolling policy in combination with the checkpoint interval(pending files\n+become finished on the next checkpoint) control the size and number of these parts.\n+\n+**NOTE:** For row formats (csv, json), you can reduce the time interval appropriately to avoid too long delay.\n+\n+### Partition Commit\n+\n+After writing a partition, it is often necessary to notify downstream applications. For example, add the partition to a Hive metastore or writing a `_SUCCESS` file in the directory. The file system sink contains a partition commit feature that allows configuring custom policies. Commit actions are based on a combination of `triggers` and `policies`. \n+\n+- Trigger: The timing of the commit of the partition can be determined by the watermark with the time extracted from the partition, or by processing time.\n+- Policy: How to commit a partition, built-in policies support for the commit of success files and metastore, you can also implement your own policies, such as triggering hive's analysis to generate statistics, or merging small files, etc.\n+\n+#### Partition commit trigger\n+\n+To define when to commit a partition, providing partition commit trigger:\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.partition-commit.trigger</h5></td>\n+        <td style=\"word-wrap: break-word;\">process-time</td>\n+        <td>String</td>\n+        <td>Trigger type for partition commit: 'process-time': based on the time of the machine, it neither requires partition time extraction nor watermark generation. Commit partition once the 'current system time' passes 'partition creation system time' plus 'delay'. 'partition-time': based on the time that extracted from partition values, it requires watermark generation. Commit partition once the 'watermark' passes 'time extracted from partition values' plus 'delay'.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.delay</h5></td>\n+        <td style=\"word-wrap: break-word;\">0 s</td>\n+        <td>Duration</td>\n+        <td>The partition will not commit until the delay time. If it is a daily partition, should be '1 d', if it is a hourly partition, should be '1 h'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+There are two types of trigger:\n+- The first is partition processing time. It neither requires partition time extraction nor watermark\n+generation. The trigger of partition commit according to partition creation time and current system time. This trigger\n+is more universal, but not so precise. For example, data delay or failover will lead to premature partition commit.\n+- The second is the trigger of partition commit according to the time that extracted from partition values and watermark.\n+This requires that your job has watermark generation, and the partition is divided according to time, such as\n+hourly partition or daily partition.\n+\n+If you want to let downstream see the partition as soon as possible, no matter whether its data is complete or not:\n+- 'sink.partition-commit.trigger'='process-time' (Default value)\n+- 'sink.partition-commit.delay'='0s' (Default value)\n+Once there is data in the partition, it will immediately commit. Note: the partition may be committed multiple times.\n+\n+If you want to let downstream see the partition only when its data is complete, and your job has watermark generation, and you can extract the time from partition values:\n+- 'sink.partition-commit.trigger'='partition-time'\n+- 'sink.partition-commit.delay'='1h' ('1h' if your partition is hourly partition, depends on your partition type)\n+This is the most accurate way to commit partition, and it will try to ensure that the committed partitions are as data complete as possible.\n+\n+If you want to let downstream see the partition only when its data is complete, but there is no watermark, or the time cannot be extracted from partition values:\n+- 'sink.partition-commit.trigger'='process-time' (Default value)\n+- 'sink.partition-commit.delay'='1h' ('1h' if your partition is hourly partition, depends on your partition type)\n+Try to commit partition accurately, but data delay or failover will lead to premature partition commit.\n+\n+Late data processing: The record will be written into its partition when a record is supposed to be\n+written into a partition that has already been committed, and then the committing of this partition\n+will be triggered again.\n+\n+#### Partition Time Extractor\n+\n+Time extractors define extracting time from partition values.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>partition.time-extractor.kind</h5></td>\n+        <td style=\"word-wrap: break-word;\">default</td>\n+        <td>String</td>\n+        <td>Time extractor to extract time from partition values. Support default and custom. For default, can configure timestamp pattern. For custom, should configure extractor class.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>partition.time-extractor.class</h5></td>\n+        <td style=\"word-wrap: break-word;\">(none)</td>\n+        <td>String</td>\n+        <td>The extractor class for implement PartitionTimeExtractor interface.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>partition.time-extractor.timestamp-pattern</h5></td>\n+        <td style=\"word-wrap: break-word;\">(none)</td>\n+        <td>String</td>\n+        <td>The 'default' construction way allows users to use partition fields to get a legal timestamp pattern. Default support 'yyyy-mm-dd hh:mm:ss' from first field. If timestamp should be extracted from a single partition field 'dt', can configure: '$dt'. If timestamp should be extracted from multiple partition fields, say 'year', 'month', 'day' and 'hour', can configure: '$year-$month-$day $hour:00:00'. If timestamp should be extracted from two partition fields 'dt' and 'hour', can configure: '$dt $hour:00:00'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+The default extractor is based on a timestamp pattern composed of your partition fields. You can also specify an implementation for fully custom partition extraction based on the `PartitionTimeExtractor` interface. \n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"java\" markdown=\"1\">\n+{% highlight java %}\n+\n+public class HourPartTimeExtractor implements PartitionTimeExtractor {\n+    @Override\n+    public LocalDateTime extract(List<String> keys, List<String> values) {\n+        String dt = values.get(0);\n+        String hour = values.get(1);\n+\t\treturn Timestamp.valueOf(dt + \" \" + hour + \":00:00\").toLocalDateTime();\n+\t}\n+}\n+\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+#### Partition Commit Policy\n+\n+The partition commit policy defines what action is taken when partitions are committed. \n+\n+- The first is metastore, only hive table supports metastore policy, file system manages partitions through directory structure.\n+- The second is the success file, which will write an empty file in the directory corresponding to the partition.\n+\n+<table class=\"table table-bordered\">\n+  <thead>\n+    <tr>\n+        <th class=\"text-left\" style=\"width: 20%\">Key</th>\n+        <th class=\"text-left\" style=\"width: 15%\">Default</th>\n+        <th class=\"text-left\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-left\" style=\"width: 55%\">Description</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    <tr>\n+        <td><h5>sink.partition-commit.policy.kind</h5></td>\n+        <td style=\"word-wrap: break-word;\">(none)</td>\n+        <td>String</td>\n+        <td>Policy to commit a partition is to notify the downstream application that the partition has finished writing, the partition is ready to be read. metastore: add partition to metastore. Only hive table supports metastore policy, file system manages partitions through directory structure. success-file: add '_success' file to directory. Both can be configured at the same time: 'metastore,success-file'. custom: use policy class to create a commit policy. Support to configure multiple policies: 'metastore,success-file'.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.policy.class</h5></td>\n+        <td style=\"word-wrap: break-word;\">(none)</td>\n+        <td>String</td>\n+        <td>The partition commit policy class for implement PartitionCommitPolicy interface. Only work in custom commit policy.</td>\n+    </tr>\n+    <tr>\n+        <td><h5>sink.partition-commit.success-file.name</h5></td>\n+        <td style=\"word-wrap: break-word;\">(none)</td>\n+        <td>String</td>\n+        <td>The file name for success-file partition commit policy, default is '_SUCCESS'.</td>\n+    </tr>\n+  </tbody>\n+</table>\n+\n+You can extend the implementation of commit policy, The custom commit policy implementation like:\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"java\" markdown=\"1\">\n+{% highlight java %}\n+\n+public class AnalysisCommitPolicy implements PartitionCommitPolicy {\n+    private HiveShell hiveShell;\n+\t@Override\n+\tpublic void commit(Context context) throws Exception {\n+\t    if (hiveShell == null) {\n+\t        hiveShell = createHiveShell(context.catalogName());\n+\t    }\n+\t    hiveShell.execute(String.format(\"ALTER TABLE %s ADD IF NOT EXISTS PARTITION (%s = '%s') location '%s'\",\n+\t        context.tableName(),\n+\t        context.partitionKeys().get(0),\n+\t        context.partitionValues().get(0),\n+\t        context.partitionPath()));\n+\t    hiveShell.execute(String.format(\n+\t        \"ANALYZE TABLE %s PARTITION (%s = '%s') COMPUTE STATISTICS FOR COLUMNS\",\n+\t        context.tableName(),\n+\t        context.partitionKeys().get(0),\n+\t        context.partitionValues().get(0)));\n+\t}\n+}\n+\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+## Full Example\n+\n+The below shows how the file system connector can be used to write a streaming query to write data from Kafka into a file system and runs a batch query to read that data back out. \n+\n+{% highlight sql %}\n+\n+CREATE TABLE kafka_table (\n+  user_id STRING,\n+  order_amount DOUBLE,\n+  log_ts TIMESTAMP(3),\n+  WATERMARK FOR log_ts AS log_ts - INTERVAL '5' SECOND\n+) WITH (...);\n+\n+CREATE TABLE fs_table (\n+  user_id STRING,\n+  order_amount DOUBLE,\n+  dt STRING,\n+  hour STRING\n+) PARTITIONED BY (dt, hour) WITH (\n+  'connector'='filesystem',\n+  'path'='...',\n+  'format'='parquet',\n+  'partition.time-extractor.timestamp-pattern'='$dt $hour:00:00',\n+  'sink.partition-commit.delay'='1 h',\n+  'sink.partition-commit.policy.kind'='success-file')", "originalCommit": "c29ec64e9bc260015c4b57395ace4a578926fa16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a4df1947ce29a9c3f886d4c43efaf86c746dcc3d", "url": "https://github.com/apache/flink/commit/a4df1947ce29a9c3f886d4c43efaf86c746dcc3d", "message": "[FLINK-16975][documentation] Add docs for FileSystem connector", "committedDate": "2020-06-04T05:47:43Z", "type": "commit"}, {"oid": "8569d299f41b57033debc94d33ab11af91452140", "url": "https://github.com/apache/flink/commit/8569d299f41b57033debc94d33ab11af91452140", "message": "Rebase&Update", "committedDate": "2020-06-04T06:07:12Z", "type": "commit"}, {"oid": "8569d299f41b57033debc94d33ab11af91452140", "url": "https://github.com/apache/flink/commit/8569d299f41b57033debc94d33ab11af91452140", "message": "Rebase&Update", "committedDate": "2020-06-04T06:07:12Z", "type": "forcePushed"}]}