{"pr_number": 11767, "pr_title": "[FLINK-17119][python] Add Cython support for composite types", "pr_createdAt": "2020-04-16T07:02:49Z", "pr_url": "https://github.com/apache/flink/pull/11767", "timeline": [{"oid": "0f591d4b6b4b34fb4875e813aafc789b35b0c1d2", "url": "https://github.com/apache/flink/commit/0f591d4b6b4b34fb4875e813aafc789b35b0c1d2", "message": "[FLINK-17119][python] Support Composite DataTypes in Cython", "committedDate": "2020-04-16T10:50:29Z", "type": "commit"}, {"oid": "0f591d4b6b4b34fb4875e813aafc789b35b0c1d2", "url": "https://github.com/apache/flink/commit/0f591d4b6b4b34fb4875e813aafc789b35b0c1d2", "message": "[FLINK-17119][python] Support Composite DataTypes in Cython", "committedDate": "2020-04-16T10:50:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2NjY3MQ==", "url": "https://github.com/apache/flink/pull/11767#discussion_r409466671", "bodyText": "remove the empty line", "author": "dianfu", "createdAt": "2020-04-16T10:56:30Z", "path": "flink-python/pyflink/fn_execution/fast_coder_impl.pyx", "diffHunk": "@@ -340,6 +444,86 @@ cdef class FlattenRowCoderImpl(StreamCoderImpl):\n             milliseconds = hour * 3600000 + minute * 60000 + seconds * 1000 + microsecond // 1000\n             self._encode_int(milliseconds)\n \n+    cdef void _encode_field_complex(self, TypeName field_type, BaseCoder field_coder, item):\n+        cdef libc.stdint.int32_t nanoseconds, microseconds_of_second, length, row_field_count\n+        cdef libc.stdint.int32_t leading_complete_bytes_num, remaining_bits_num\n+        cdef libc.stdint.int64_t timestamp_milliseconds, timestamp_seconds\n+        cdef BaseCoder value_coder, key_coder\n+        cdef TypeName value_type, key_type\n+        cdef CoderType value_coder_type, key_coder_type\n+        cdef BaseCoder row_field_coder\n+        cdef list row_field_coders, row_value\n+\n+        if field_type == DECIMAL:\n+            # decimal\n+            user_context = decimal.getcontext()\n+            decimal.setcontext((<DecimalCoderImpl> field_coder).context)\n+            bytes_value = str(item.quantize((<DecimalCoderImpl> field_coder).scale_format)).encode(\n+                \"utf-8\")\n+            self._encode_bytes(bytes_value)\n+            decimal.setcontext(user_context)\n+        elif field_type == TIMESTAMP or field_type == LOCAL_ZONED_TIMESTAMP:\n+            # Timestamp\n+            timestamp_seconds = <libc.stdint.int64_t> (\n+                item.replace(tzinfo=datetime.timezone.utc).timestamp())\n+            microseconds_of_second = item.microsecond\n+            timestamp_milliseconds = timestamp_seconds * 1000 + microseconds_of_second // 1000\n+            nanoseconds = microseconds_of_second % 1000 * 1000\n+            if field_coder.is_compact:\n+                self._encode_bigint(timestamp_milliseconds)\n+            else:\n+                self._encode_bigint(timestamp_milliseconds)\n+                self._encode_int(nanoseconds)\n+        elif field_type == ARRAY:\n+            # Array\n+            length = len(item)\n+            value_coder = (<ArrayCoderImpl> field_coder).elem_coder\n+            value_type = value_coder.type_name()\n+            value_coder_type = value_coder.coder_type()\n+            self._encode_int(length)\n+            for i in range(length):\n+                value = item[i]\n+                if value is None:\n+                    self._encode_byte(False)\n+                else:\n+                    self._encode_byte(True)\n+                    self._encode_field(value_coder_type, value_type, value_coder, value)\n+", "originalCommit": "0f591d4b6b4b34fb4875e813aafc789b35b0c1d2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3MDE0Nw==", "url": "https://github.com/apache/flink/pull/11767#discussion_r409470147", "bodyText": "inherits TimestampCoderImpl?", "author": "dianfu", "createdAt": "2020-04-16T11:03:13Z", "path": "flink-python/pyflink/fn_execution/fast_coder_impl.pxd", "diffHunk": "@@ -190,3 +195,24 @@ cdef class DateCoderImpl(BaseCoder):\n \n cdef class TimeCoderImpl(BaseCoder):\n     pass\n+\n+cdef class DecimalCoderImpl(BaseCoder):\n+    cdef readonly object context\n+    cdef readonly object scale_format\n+\n+cdef class TimestampCoderImpl(BaseCoder):\n+    cdef readonly bint is_compact\n+\n+cdef class LocalZonedTimestampCoderImpl(BaseCoder):", "originalCommit": "0f591d4b6b4b34fb4875e813aafc789b35b0c1d2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3MTIwOA==", "url": "https://github.com/apache/flink/pull/11767#discussion_r409471208", "bodyText": "use _encode_field?", "author": "dianfu", "createdAt": "2020-04-16T11:05:18Z", "path": "flink-python/pyflink/fn_execution/fast_coder_impl.pyx", "diffHunk": "@@ -143,6 +145,9 @@ cdef class FlattenRowCoderImpl(StreamCoderImpl):\n             if item is not None:\n                 if self._output_coder_type[i] == SIMPLE:", "originalCommit": "0f591d4b6b4b34fb4875e813aafc789b35b0c1d2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3MTUzMQ==", "url": "https://github.com/apache/flink/pull/11767#discussion_r409471531", "bodyText": "use _decode_field", "author": "dianfu", "createdAt": "2020-04-16T11:05:55Z", "path": "flink-python/pyflink/fn_execution/fast_coder_impl.pyx", "diffHunk": "@@ -180,6 +185,15 @@ cdef class FlattenRowCoderImpl(StreamCoderImpl):\n             else:\n                 if self._input_coder_type[i] == SIMPLE:\n                     self.row[i] = self._decode_field_simple(self._input_field_type[i])", "originalCommit": "0f591d4b6b4b34fb4875e813aafc789b35b0c1d2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "64600d36a0518019bb02bf80fd4164ca845aa99f", "url": "https://github.com/apache/flink/commit/64600d36a0518019bb02bf80fd4164ca845aa99f", "message": "fix", "committedDate": "2020-04-16T11:21:22Z", "type": "commit"}]}