{"pr_number": 718, "pr_title": "JENA-1871: Check and limit the interval for ActionSleep.", "pr_createdAt": "2020-03-27T08:21:48Z", "pr_url": "https://github.com/apache/jena/pull/718", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMTQxNQ==", "url": "https://github.com/apache/jena/pull/718#discussion_r399101415", "bodyText": "s/9tasks/(tasks", "author": "kinow", "createdAt": "2020-03-27T08:26:07Z", "path": "jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/async/AsyncPool.java", "diffHunk": "@@ -34,10 +35,16 @@\n     // Number of finished tasks kept.\n     private static int MAX_FINISHED = 20;\n \n-    // See Executors.newCachedThreadPool and Executors.newFixedThreadPool\n+    // A ThreadPoolExecutor with\n+    // * 0 to nMaxThreads\n+    // * no queue of waiting tasks 9tasks execute or are rejected)", "originalCommit": "54fc02492b8efe5e35a2337f3aa04e2a815f245b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE1NDAxOQ==", "url": "https://github.com/apache/jena/pull/718#discussion_r399154019", "bodyText": "Will fix!", "author": "afs", "createdAt": "2020-03-27T10:02:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMTQxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMjE4MA==", "url": "https://github.com/apache/jena/pull/718#discussion_r399102180", "bodyText": "maxSleepMillis?", "author": "kinow", "createdAt": "2020-03-27T08:27:39Z", "path": "jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/ctl/ActionSleep.java", "diffHunk": "@@ -32,6 +32,8 @@\n /** A task that kicks off a asynchronous operation that simply waits and exits.  For testing. */\n public class ActionSleep extends ActionCtl /* Not ActionAsyncTask - that is a container-item based. */\n {\n+    private static int MaxSleepMillis = 20*1000;", "originalCommit": "54fc02492b8efe5e35a2337f3aa04e2a815f245b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE1Mzk4NQ==", "url": "https://github.com/apache/jena/pull/718#discussion_r399153985", "bodyText": "Logically, it's a constant. I'll add final.  ALL_CAPS_IS_A_BIT_SHOUTY :-)", "author": "afs", "createdAt": "2020-03-27T10:02:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMjE4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMzA0Mw==", "url": "https://github.com/apache/jena/pull/718#discussion_r399103043", "bodyText": "Maybe use the same prefix for all errors?\n\"Bad format for 'interval': integer required\"\n\"Bad format for 'interval': negative sleep interval\"\n\"Bad format for 'interval': sleep internal greater than maximum allowed\"\n?", "author": "kinow", "createdAt": "2020-03-27T08:29:22Z", "path": "jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/ctl/ActionSleep.java", "diffHunk": "@@ -50,45 +52,57 @@ public void validate(HttpAction action) {}\n \n     @Override\n     public void execute(HttpAction action) {\n-        Runnable task = createRunnable(action);\n+        SleepTask task = createRunnable(action);\n         AsyncTask aTask = Async.execASyncTask(action, AsyncPool.get(), \"sleep\", task);\n+        action.log.info(format(\"[%d] Sleep %d ms.\", action.id, task.sleepMilli));\n         JsonValue v = Async.asJson(aTask);\n-        Async.setLocationHeader(action, aTask);\n         ServletOps.sendJsonReponse(action, v);\n     }\n \n-    protected Runnable createRunnable(HttpAction action) {\n+    protected SleepTask createRunnable(HttpAction action) {\n         String interval = action.request.getParameter(\"interval\");\n         int sleepMilli = 5000;\n-        if ( interval != null )\n+        if ( interval != null ) {\n             try {\n                 sleepMilli = Integer.parseInt(interval);\n             } catch (NumberFormatException ex) {\n-                action.log.error(format(\"[%d] NumberFormatException: %s\", action.id, interval));\n+                ServletOps.errorBadRequest(\"Bad format for 'interval': integer required\");", "originalCommit": "54fc02492b8efe5e35a2337f3aa04e2a815f245b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEzNTA4NA==", "url": "https://github.com/apache/jena/pull/718#discussion_r399135084", "bodyText": "Good idea.", "author": "afs", "createdAt": "2020-03-27T09:29:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMzA0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNzMxMQ==", "url": "https://github.com/apache/jena/pull/718#discussion_r399107311", "bodyText": "Out of curiosity, why / 10? Is it to yield control so other things get a chance to run after every 1/10th of the sleep time?", "author": "kinow", "createdAt": "2020-03-27T08:38:09Z", "path": "jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/ctl/ActionSleep.java", "diffHunk": "@@ -50,45 +52,57 @@ public void validate(HttpAction action) {}\n \n     @Override\n     public void execute(HttpAction action) {\n-        Runnable task = createRunnable(action);\n+        SleepTask task = createRunnable(action);\n         AsyncTask aTask = Async.execASyncTask(action, AsyncPool.get(), \"sleep\", task);\n+        action.log.info(format(\"[%d] Sleep %d ms.\", action.id, task.sleepMilli));\n         JsonValue v = Async.asJson(aTask);\n-        Async.setLocationHeader(action, aTask);\n         ServletOps.sendJsonReponse(action, v);\n     }\n \n-    protected Runnable createRunnable(HttpAction action) {\n+    protected SleepTask createRunnable(HttpAction action) {\n         String interval = action.request.getParameter(\"interval\");\n         int sleepMilli = 5000;\n-        if ( interval != null )\n+        if ( interval != null ) {\n             try {\n                 sleepMilli = Integer.parseInt(interval);\n             } catch (NumberFormatException ex) {\n-                action.log.error(format(\"[%d] NumberFormatException: %s\", action.id, interval));\n+                ServletOps.errorBadRequest(\"Bad format for 'interval': integer required\");\n+                return null;\n             }\n-        action.log.info(format(\"[%d] Sleep %d ms\", action.id, sleepMilli));\n-        return new SleepTask(action, sleepMilli);\n+        }\n+        if ( sleepMilli < 0 ) {\n+            ServletOps.errorBadRequest(\"Negative sleep interval\");\n+            return null;\n+        }\n+        if ( sleepMilli > MaxSleepMillis ) {\n+            ServletOps.errorBadRequest(\"Sleep internal greater than maximum allowed\");\n+            return null;\n+        }\n+        return new SleepTask(action, sleepMilli, AsyncPool.get());\n     }\n \n     static class SleepTask implements Runnable {\n         private final Logger log;\n         private final long actionId;\n-        private final int sleepMilli;\n+        public  final int sleepMilli;\n+        private final AsyncPool asyncPool;\n \n-        public SleepTask(HttpAction action, int sleepMilli ) {\n+        public SleepTask(HttpAction action, int sleepMilli, AsyncPool asyncPool ) {\n             this.log = action.log;\n             this.actionId = action.id;\n             this.sleepMilli = sleepMilli;\n+            this.asyncPool = asyncPool; \n         }\n \n         @Override\n         public void run() {\n             try {\n-                log.info(format(\"[%d] >> Sleep start\", actionId));\n-                Lib.sleep(sleepMilli);\n-                log.info(format(\"[%d] << Sleep finish\", actionId));\n+                log.info(format(\"[Task %d] >> Sleep start\", actionId));\n+                for ( int i = 0 ; i < 10 ; i++ )\n+                    Lib.sleep(sleepMilli/10);", "originalCommit": "54fc02492b8efe5e35a2337f3aa04e2a815f245b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEzNTA1Mw==", "url": "https://github.com/apache/jena/pull/718#discussion_r399135053", "bodyText": "Yes - that's the reason. It is dev code put in to nudge the JVM along when running all in in JVM (client and Fuseki embedded server). I find that it sometimes shows up concurrency issues better and I was trying multiple \"sleeps\" running.\nIt isn't supposed to be there for the codebase and I'll remove it - good thing we have code review.", "author": "afs", "createdAt": "2020-03-27T09:29:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNzMxMQ=="}], "type": "inlineReview"}, {"oid": "74a76786df12643a3f1886596898f9576a597457", "url": "https://github.com/apache/jena/commit/74a76786df12643a3f1886596898f9576a597457", "message": "JENA-1871: Check and limit sleep time", "committedDate": "2020-03-27T10:10:36Z", "type": "commit"}, {"oid": "91c350233d09c986e809220a55f731696ad68111", "url": "https://github.com/apache/jena/commit/91c350233d09c986e809220a55f731696ad68111", "message": "JENA-1872: Allow concurrent async tasks", "committedDate": "2020-03-27T10:10:36Z", "type": "commit"}, {"oid": "b5d645aad058daba30f04403c8f98edd3382fefa", "url": "https://github.com/apache/jena/commit/b5d645aad058daba30f04403c8f98edd3382fefa", "message": "JENA-1871: Tests of check and limit sleep time", "committedDate": "2020-03-27T10:10:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE1OTEyNQ==", "url": "https://github.com/apache/jena/pull/718#discussion_r399159125", "bodyText": "Could we make this public then the test case can refer to the constant rather than hard-coding it", "author": "rvesse", "createdAt": "2020-03-27T10:11:55Z", "path": "jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/ctl/ActionSleep.java", "diffHunk": "@@ -32,6 +32,8 @@\n /** A task that kicks off a asynchronous operation that simply waits and exits.  For testing. */\n public class ActionSleep extends ActionCtl /* Not ActionAsyncTask - that is a container-item based. */\n {\n+    private static final int MaxSleepMillis = 20*1000;", "originalCommit": "581f9f20bacb864cb53c0bf109557f673e7492fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzNDM1MQ==", "url": "https://github.com/apache/jena/pull/718#discussion_r399534351", "bodyText": "OK", "author": "afs", "createdAt": "2020-03-27T20:58:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE1OTEyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE1OTQ4MQ==", "url": "https://github.com/apache/jena/pull/718#discussion_r399159481", "bodyText": "Would be nicer if this just referred to the constant in ActionSleep so if we ever change that the test doesn't break", "author": "rvesse", "createdAt": "2020-03-27T10:12:35Z", "path": "jena-fuseki2/jena-fuseki-webapp/src/test/java/org/apache/jena/fuseki/TestAdmin.java", "diffHunk": "@@ -278,7 +278,29 @@\n         deleteDataset(dsTest);\n     }\n \n-    // Sync task testing\n+    @Test public void sleep_1() {\n+        String x = execSleepTask(null, 1);\n+    }\n+\n+    @Test public void sleep_2() {\n+        try {\n+            String x = execSleepTask(null, -1);\n+            fail(\"Sleep call unexpectedly succeed\");\n+        } catch (HttpException ex) {\n+            assertEquals(400, ex.getStatusCode());\n+        }\n+    }\n+\n+    @Test public void sleep_3() {\n+        try {\n+            String x = execSleepTask(null, 20*1000+1);", "originalCommit": "581f9f20bacb864cb53c0bf109557f673e7492fb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MDQyOA==", "url": "https://github.com/apache/jena/pull/718#discussion_r399160428", "bodyText": "+1 So provided there is at least one thread free then submitting a task will succeed, if all threads are in-use then it fails", "author": "rvesse", "createdAt": "2020-03-27T10:14:16Z", "path": "jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/async/AsyncPool.java", "diffHunk": "@@ -34,10 +35,16 @@\n     // Number of finished tasks kept.\n     private static int MAX_FINISHED = 20;\n \n-    // See Executors.newCachedThreadPool and Executors.newFixedThreadPool\n+    // A ThreadPoolExecutor with\n+    // * 0 to nMaxThreads\n+    // * no queue of waiting tasks (tasks execute or are rejected)\n+    // * dormant threads released after 120s.\n+    //\n+    // SynchronousQueue is a BlockingQueue that has zero length - it accepts and\n+    // delivers an item or rejects immediately, no delay by queueing.", "originalCommit": "581f9f20bacb864cb53c0bf109557f673e7492fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzOTUwMw==", "url": "https://github.com/apache/jena/pull/718#discussion_r399539503", "bodyText": "Yes - like that.  The actual mechanism is expands up to nMaxThreads, creating threads if needed.", "author": "afs", "createdAt": "2020-03-27T21:10:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MDQyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MDk2Mw==", "url": "https://github.com/apache/jena/pull/718#discussion_r399160963", "bodyText": "Should this be more specific so users understand why it was rejected e.g. add something like  - already <maxTasks> in progress", "author": "rvesse", "createdAt": "2020-03-27T10:15:15Z", "path": "jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/async/AsyncPool.java", "diffHunk": "@@ -63,9 +70,14 @@ public AsyncTask submit(Runnable task, String displayName, DataService dataServi\n                 return null;\n             };\n             AsyncTask asyncTask = new AsyncTask(c, this, taskId, displayName, dataService, requestId);\n-            /* Future<Object> future = */ executor.submit(asyncTask);\n-            runningTasks.put(taskId, asyncTask);\n-            return asyncTask;\n+            try {\n+                /* Future<Object> future = */ executor.submit(asyncTask);\n+                runningTasks.put(taskId, asyncTask);\n+                return asyncTask;\n+            } catch (RejectedExecutionException ex) {\n+                ServletOps.errorBadRequest(\"Async task request rejected\");", "originalCommit": "581f9f20bacb864cb53c0bf109557f673e7492fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzODg5NA==", "url": "https://github.com/apache/jena/pull/718#discussion_r399538894", "bodyText": "OK", "author": "afs", "createdAt": "2020-03-27T21:08:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MDk2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MTg4NA==", "url": "https://github.com/apache/jena/pull/718#discussion_r399161884", "bodyText": "Do we want some additional test cases that validate that we can now have multiple simultaneous async tasks?  I see test cases that cover JENA-1871 but not any that cover JENA-1872", "author": "rvesse", "createdAt": "2020-03-27T10:16:56Z", "path": "jena-fuseki2/jena-fuseki-webapp/src/test/java/org/apache/jena/fuseki/TestAdmin.java", "diffHunk": "@@ -278,7 +278,29 @@\n         deleteDataset(dsTest);\n     }\n \n-    // Sync task testing\n+    @Test public void sleep_1() {\n+        String x = execSleepTask(null, 1);\n+    }\n+\n+    @Test public void sleep_2() {\n+        try {\n+            String x = execSleepTask(null, -1);\n+            fail(\"Sleep call unexpectedly succeed\");\n+        } catch (HttpException ex) {\n+            assertEquals(400, ex.getStatusCode());\n+        }\n+    }\n+\n+    @Test public void sleep_3() {\n+        try {\n+            String x = execSleepTask(null, 20*1000+1);\n+            fail(\"Sleep call unexpectedly succeed\");\n+        } catch (HttpException ex) {\n+            assertEquals(400, ex.getStatusCode());\n+        }\n+    }\n+\n+    // Async task testing", "originalCommit": "581f9f20bacb864cb53c0bf109557f673e7492fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzNjU1Ng==", "url": "https://github.com/apache/jena/pull/718#discussion_r399536556", "bodyText": "Tricky. Any ideas how to?\nI can investigate reading the tasks list for active tasks but we have situations where loaded CI servers do weird things (pauses of 10s of seconds or longer - I guess the VM isn't get real CPU time) so \"overlap \" is hard to ensure in a reliable way, including with the client code in the @Test itself.\nHaving \"works mostly\" is bad -  it it then natural to ignore test failures because they become \"expected\".\nI have tested locally, including hitting the limit.", "author": "afs", "createdAt": "2020-03-27T21:03:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MTg4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1MTk0NQ==", "url": "https://github.com/apache/jena/pull/718#discussion_r399651945", "bodyText": "I've pushed two tests.\nIf they become unreliable in practice, I'd prefer that we comment out the @Test.", "author": "afs", "createdAt": "2020-03-28T11:33:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MTg4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA3MTcyOQ==", "url": "https://github.com/apache/jena/pull/718#discussion_r400071729", "bodyText": "LGTM", "author": "rvesse", "createdAt": "2020-03-30T10:03:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MTg4NA=="}], "type": "inlineReview"}, {"oid": "c5665cb4873a909d3b512d164afc4760e90e4880", "url": "https://github.com/apache/jena/commit/c5665cb4873a909d3b512d164afc4760e90e4880", "message": "JENA-1871: Review feedback", "committedDate": "2020-03-27T10:10:36Z", "type": "forcePushed"}, {"oid": "43a041eb876e3bf2bce96456050527d719d5e404", "url": "https://github.com/apache/jena/commit/43a041eb876e3bf2bce96456050527d719d5e404", "message": "JENA-1871: Review feedback", "committedDate": "2020-03-27T21:11:02Z", "type": "commit"}, {"oid": "43a041eb876e3bf2bce96456050527d719d5e404", "url": "https://github.com/apache/jena/commit/43a041eb876e3bf2bce96456050527d719d5e404", "message": "JENA-1871: Review feedback", "committedDate": "2020-03-27T21:11:02Z", "type": "forcePushed"}, {"oid": "9abdbdbe1756b2ed23d264bc7e030994c11ab5e7", "url": "https://github.com/apache/jena/commit/9abdbdbe1756b2ed23d264bc7e030994c11ab5e7", "message": "Try to stabilize tests", "committedDate": "2020-03-28T12:15:40Z", "type": "forcePushed"}, {"oid": "b39868306fdb325ee614858a18d1435a0e506af7", "url": "https://github.com/apache/jena/commit/b39868306fdb325ee614858a18d1435a0e506af7", "message": "JENA-1782: test for overlapping async tasks", "committedDate": "2020-03-28T13:30:40Z", "type": "commit"}, {"oid": "b39868306fdb325ee614858a18d1435a0e506af7", "url": "https://github.com/apache/jena/commit/b39868306fdb325ee614858a18d1435a0e506af7", "message": "JENA-1782: test for overlapping async tasks", "committedDate": "2020-03-28T13:30:40Z", "type": "forcePushed"}]}