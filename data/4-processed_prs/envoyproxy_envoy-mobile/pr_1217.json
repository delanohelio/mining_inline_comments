{"pr_number": 1217, "pr_title": "python: update headers from impl experience", "pr_createdAt": "2020-12-18T21:56:50Z", "pr_url": "https://github.com/envoyproxy/envoy-mobile/pull/1217", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ3ODE2Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1217#discussion_r551478167", "bodyText": "My inclination is not to introduce std::vector<uint8_t> as a buffer representation unless there's a good pythonic reason for doing so. Can we simply directly use envoy_data?", "author": "goaway", "createdAt": "2021-01-04T18:05:44Z", "path": "library/cc/bridge_utility.h", "diffHunk": "@@ -0,0 +1,21 @@\n+#pragma once\n+\n+#include <string>\n+#include <vector>\n+\n+#include \"headers.h\"\n+#include \"library/common/types/c_types.h\"\n+\n+namespace Envoy {\n+namespace Platform {\n+\n+envoy_data buffer_as_envoy_data(const std::vector<uint8_t>& data);", "originalCommit": "b6a6519bc45a3501c3e66ba170d7da120ed5987b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MDI1Ng==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1217#discussion_r551480256", "bodyText": "yeah--this translates into List[int] in Python, but Eventually\u2122 you can tell pybind11 out-of-the-box to reinterpret a std::vector<uint8_t> as a bytes object. that was my original motivation for it\na better approach (if it's supported by pybind11) is to just tell pybind11 how to interpret envoy_data as bytes, i'll look into it", "author": "crockeo", "createdAt": "2021-01-04T18:10:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ3ODE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4NjkyMA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1217#discussion_r551486920", "bodyText": "Okay, cool - I'd just prefer not to introduce yet another buffer representation if at all possible.", "author": "goaway", "createdAt": "2021-01-04T18:23:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ3ODE2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MzMzNg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1217#discussion_r551483336", "bodyText": "Maybe c_on_headers?", "author": "goaway", "createdAt": "2021-01-04T18:16:22Z", "path": "library/cc/stream_callbacks.h", "diffHunk": "@@ -32,9 +36,21 @@ class EnvoyHttpCallbacksAdapter {\n public:\n   EnvoyHttpCallbacksAdapter(ExecutorSharedPtr executor, StreamCallbacksSharedPtr callbacks);\n \n+  envoy_http_callbacks as_envoy_http_callbacks();\n+\n private:\n+  static void* dispatch_on_headers(envoy_headers headers, bool end_stream, void* context);", "originalCommit": "b6a6519bc45a3501c3e66ba170d7da120ed5987b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYzNDc3Ng==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1217#discussion_r551634776", "bodyText": "Or maybe not - I was thinking these would be the raw function pointers to go on the struct, but that doesn't look to be the case from the implementation.", "author": "goaway", "createdAt": "2021-01-04T23:42:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MzMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEyNzAzMw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1217#discussion_r552127033", "bodyText": "changed these all to c_..., hope that's ok!", "author": "crockeo", "createdAt": "2021-01-05T18:52:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MzMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEyNzExOA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1217#discussion_r552127118", "bodyText": "although i noticed that maybe they're still the same in engine.h, let me go back and fix that.", "author": "crockeo", "createdAt": "2021-01-05T18:52:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MzMzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4NTA1Mw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1217#discussion_r551485053", "bodyText": "Maybe RawHeaderMap?", "author": "goaway", "createdAt": "2021-01-04T18:19:46Z", "path": "library/cc/headers.h", "diffHunk": "@@ -1,12 +1,13 @@\n #pragma once\n \n-// NOLINT(namespace-envoy)\n-\n #include <string>\n #include <vector>\n \n #include \"absl/container/flat_hash_map.h\"\n \n+namespace Envoy {\n+namespace Platform {\n+\n using RawHeaders = absl::flat_hash_map<std::string, std::vector<std::string>>;", "originalCommit": "b6a6519bc45a3501c3e66ba170d7da120ed5987b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ5MzYwOQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1217#discussion_r551493609", "bodyText": "Envoy has a PURE macro we should use for this.", "author": "goaway", "createdAt": "2021-01-04T18:37:04Z", "path": "library/cc/executor.h", "diffHunk": "@@ -1,15 +1,19 @@\n #pragma once\n \n-// NOLINT(namespace-envoy)\n-\n #include <functional>\n #include <memory>\n \n+namespace Envoy {\n+namespace Platform {\n+\n class Executor {\n public:\n-  virtual ~Executor();\n+  virtual ~Executor() {}\n \n   virtual void execute(std::function<void()> closure) = 0;", "originalCommit": "b6a6519bc45a3501c3e66ba170d7da120ed5987b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ5NDAxMw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1217#discussion_r551494013", "bodyText": "Use PURE macro (though it's commented out).", "author": "goaway", "createdAt": "2021-01-04T18:37:53Z", "path": "library/cc/pulse_client.h", "diffHunk": "@@ -1,20 +1,20 @@\n #pragma once\n \n-// NOLINT(namespace-envoy)\n-\n #include <memory>\n \n+namespace Envoy {\n+namespace Platform {\n+\n // TODO(crockeo): although this is stubbed out since it's in the main directory, it depends on\n // objects defined under stats. this will not be fully stubbed until stats is stubbed\n \n-// #include \"stats/counter.h\"\n-// #include \"stats/element.h\"\n-// #include \"stats/gauge.h\"\n-\n class PulseClient {\n public:\n   // virtual Counter counter(Element element) = 0;\n   // virtual Gauge gauge(Element element) = 0;", "originalCommit": "b6a6519bc45a3501c3e66ba170d7da120ed5987b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjExNzI5NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1217#discussion_r552117294", "bodyText": "I'm still not certain that we need this. If callbacks in this context are std::function then they can have all the state embedded they need for dispatch. I'm not sure there's really a need for the new interface, and I'm a little bit hesitant to introduce one that bindings will come to rely on.", "author": "goaway", "createdAt": "2021-01-05T18:33:31Z", "path": "library/cc/executor.h", "diffHunk": "@@ -1,15 +1,19 @@\n #pragma once\n \n-// NOLINT(namespace-envoy)\n-\n #include <functional>\n #include <memory>\n \n+namespace Envoy {\n+namespace Platform {\n+\n class Executor {", "originalCommit": "b6a6519bc45a3501c3e66ba170d7da120ed5987b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "63dbe6c8877d2898fc1030eb4e24796e3a76a93f", "url": "https://github.com/envoyproxy/envoy-mobile/commit/63dbe6c8877d2898fc1030eb4e24796e3a76a93f", "message": "update headers from impl experience\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2021-01-05T18:51:38Z", "type": "commit"}, {"oid": "5c3543c4db5f5ee414e7d506f058de1b7a265e6e", "url": "https://github.com/envoyproxy/envoy-mobile/commit/5c3543c4db5f5ee414e7d506f058de1b7a265e6e", "message": "easy comments\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2021-01-05T18:51:38Z", "type": "commit"}, {"oid": "8222d22a4dc06d6ea860b68469bf6bd2c9224baa", "url": "https://github.com/envoyproxy/envoy-mobile/commit/8222d22a4dc06d6ea860b68469bf6bd2c9224baa", "message": "move away from std::vector<uint8_t>\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2021-01-05T18:51:38Z", "type": "commit"}, {"oid": "5c6b410a728b22610fde15afb43cffac6274651f", "url": "https://github.com/envoyproxy/envoy-mobile/commit/5c6b410a728b22610fde15afb43cffac6274651f", "message": "define shim functions so python sees bytes objects\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2021-01-05T18:51:38Z", "type": "commit"}, {"oid": "5c6b410a728b22610fde15afb43cffac6274651f", "url": "https://github.com/envoyproxy/envoy-mobile/commit/5c6b410a728b22610fde15afb43cffac6274651f", "message": "define shim functions so python sees bytes objects\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2021-01-05T18:51:38Z", "type": "forcePushed"}, {"oid": "c900cc4d295a370ed15301a67b2f2e201bf590ed", "url": "https://github.com/envoyproxy/envoy-mobile/commit/c900cc4d295a370ed15301a67b2f2e201bf590ed", "message": "remove executor class\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2021-01-05T19:13:27Z", "type": "commit"}, {"oid": "686241f194e72d7d541f2c693a84274802dc5692", "url": "https://github.com/envoyproxy/envoy-mobile/commit/686241f194e72d7d541f2c693a84274802dc5692", "message": "last 2 changes\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2021-01-05T20:52:49Z", "type": "commit"}]}