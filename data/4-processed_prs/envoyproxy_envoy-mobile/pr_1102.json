{"pr_number": 1102, "pr_title": "test: add tests around main interface", "pr_createdAt": "2020-09-16T22:28:15Z", "pr_url": "https://github.com/envoyproxy/envoy-mobile/pull/1102", "timeline": [{"oid": "9b1d08e64c53d58d27aff77b3ade1947f1862dd8", "url": "https://github.com/envoyproxy/envoy-mobile/commit/9b1d08e64c53d58d27aff77b3ade1947f1862dd8", "message": "test: add tests around main interface\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-09-16T22:27:02Z", "type": "commit"}, {"oid": "bda570002916b6579fde136c02d065bf9a6edf74", "url": "https://github.com/envoyproxy/envoy-mobile/commit/bda570002916b6579fde136c02d065bf9a6edf74", "message": "Merge branch 'main' into remaining-coverage\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-09-16T22:45:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgwNjg4Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1102#discussion_r489806887", "bodyText": "You'll need to merge main for this; there's an on_engine_running callback now", "author": "rebello95", "createdAt": "2020-09-16T23:23:47Z", "path": "test/common/main_interface_test.cc", "diffHunk": "@@ -0,0 +1,128 @@\n+#include \"test/common/http/common.h\"\n+\n+#include \"absl/synchronization/notification.h\"\n+#include \"gtest/gtest.h\"\n+#include \"library/common/buffer/utility.h\"\n+#include \"library/common/http/header_utility.h\"\n+#include \"library/common/main_interface.h\"\n+\n+namespace Envoy {\n+\n+class MainInterfaceTest : public testing::Test {};\n+\n+TEST_F(MainInterfaceTest, BasicStream) {\n+  const std::string config =\n+      \"{\\\"admin\\\":{},\\\"static_resources\\\":{\\\"listeners\\\":[{\\\"name\\\":\\\"base_api_listener\\\", \"\n+      \"\\\"address\\\":{\\\"socket_address\\\":{\\\"protocol\\\":\\\"TCP\\\",\\\"address\\\":\\\"0.0.0.0\\\",\\\"port_\"\n+      \"value\\\":10000}},\\\"api_listener\\\":{\\\"api_listener\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\\\",\\\"stat_\"\n+      \"prefix\\\":\\\"hcm\\\",\\\"route_config\\\":{\\\"name\\\":\\\"api_router\\\",\\\"virtual_hosts\\\":[{\\\"name\\\":\"\n+      \"\\\"api\\\",\\\"include_attempt_count_in_response\\\":true,\\\"domains\\\":[\\\"*\\\"],\\\"routes\\\":[{\"\n+      \"\\\"match\\\":{\\\"prefix\\\":\\\"/\"\n+      \"\\\"},\\\"direct_response\\\":{\\\"status\\\":\\\"200\\\"}}]}]},\\\"http_filters\\\":[{\\\"name\\\":\\\"buffer\\\",\"\n+      \"\\\"typed_config\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.http.buffer.v3.Buffer\\\", \\\"max_request_bytes\\\": \\\"65000\\\"}}, \"\n+      \"{\\\"name\\\":\\\"envoy.router\\\",\\\"typed_config\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.http.router.v3.Router\\\"}}]}}}]},\\\"layered_runtime\\\":{\\\"layers\\\":[{\"\n+      \"\\\"name\\\":\\\"static_layer_0\\\",\\\"static_layer\\\":{\\\"overload\\\":{\\\"global_downstream_max_\"\n+      \"connections\\\":50000}}}]}}\";\n+  const std::string level = \"debug\";\n+  absl::Notification exit;\n+  envoy_engine_callbacks engine_cbs{[](void* context) -> void {\n+                                      auto* exit = static_cast<absl::Notification*>(context);\n+                                      exit->Notify();\n+                                    },\n+                                    &exit};", "originalCommit": "bda570002916b6579fde136c02d065bf9a6edf74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgwNjk1Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1102#discussion_r489806952", "bodyText": "Can you /*document*/ these?", "author": "rebello95", "createdAt": "2020-09-16T23:24:03Z", "path": "test/common/main_interface_test.cc", "diffHunk": "@@ -0,0 +1,128 @@\n+#include \"test/common/http/common.h\"\n+\n+#include \"absl/synchronization/notification.h\"\n+#include \"gtest/gtest.h\"\n+#include \"library/common/buffer/utility.h\"\n+#include \"library/common/http/header_utility.h\"\n+#include \"library/common/main_interface.h\"\n+\n+namespace Envoy {\n+\n+class MainInterfaceTest : public testing::Test {};\n+\n+TEST_F(MainInterfaceTest, BasicStream) {\n+  const std::string config =\n+      \"{\\\"admin\\\":{},\\\"static_resources\\\":{\\\"listeners\\\":[{\\\"name\\\":\\\"base_api_listener\\\", \"\n+      \"\\\"address\\\":{\\\"socket_address\\\":{\\\"protocol\\\":\\\"TCP\\\",\\\"address\\\":\\\"0.0.0.0\\\",\\\"port_\"\n+      \"value\\\":10000}},\\\"api_listener\\\":{\\\"api_listener\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\\\",\\\"stat_\"\n+      \"prefix\\\":\\\"hcm\\\",\\\"route_config\\\":{\\\"name\\\":\\\"api_router\\\",\\\"virtual_hosts\\\":[{\\\"name\\\":\"\n+      \"\\\"api\\\",\\\"include_attempt_count_in_response\\\":true,\\\"domains\\\":[\\\"*\\\"],\\\"routes\\\":[{\"\n+      \"\\\"match\\\":{\\\"prefix\\\":\\\"/\"\n+      \"\\\"},\\\"direct_response\\\":{\\\"status\\\":\\\"200\\\"}}]}]},\\\"http_filters\\\":[{\\\"name\\\":\\\"buffer\\\",\"\n+      \"\\\"typed_config\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.http.buffer.v3.Buffer\\\", \\\"max_request_bytes\\\": \\\"65000\\\"}}, \"\n+      \"{\\\"name\\\":\\\"envoy.router\\\",\\\"typed_config\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.http.router.v3.Router\\\"}}]}}}]},\\\"layered_runtime\\\":{\\\"layers\\\":[{\"\n+      \"\\\"name\\\":\\\"static_layer_0\\\",\\\"static_layer\\\":{\\\"overload\\\":{\\\"global_downstream_max_\"\n+      \"connections\\\":50000}}}]}}\";\n+  const std::string level = \"debug\";\n+  absl::Notification exit;\n+  envoy_engine_callbacks engine_cbs{[](void* context) -> void {\n+                                      auto* exit = static_cast<absl::Notification*>(context);\n+                                      exit->Notify();\n+                                    },\n+                                    &exit};\n+  run_engine(0, engine_cbs, config.c_str(), level.c_str());\n+\n+  absl::Notification on_complete_notification;\n+  envoy_http_callbacks stream_cbs{[](envoy_headers, bool, void*) -> void* { return nullptr; },\n+                                  nullptr,\n+                                  nullptr,\n+                                  nullptr,\n+                                  nullptr,", "originalCommit": "bda570002916b6579fde136c02d065bf9a6edf74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgwNzQzMQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1102#discussion_r489807431", "bodyText": "Same comments for this test case as above", "author": "rebello95", "createdAt": "2020-09-16T23:25:25Z", "path": "test/common/main_interface_test.cc", "diffHunk": "@@ -0,0 +1,128 @@\n+#include \"test/common/http/common.h\"\n+\n+#include \"absl/synchronization/notification.h\"\n+#include \"gtest/gtest.h\"\n+#include \"library/common/buffer/utility.h\"\n+#include \"library/common/http/header_utility.h\"\n+#include \"library/common/main_interface.h\"\n+\n+namespace Envoy {\n+\n+class MainInterfaceTest : public testing::Test {};\n+\n+TEST_F(MainInterfaceTest, BasicStream) {\n+  const std::string config =\n+      \"{\\\"admin\\\":{},\\\"static_resources\\\":{\\\"listeners\\\":[{\\\"name\\\":\\\"base_api_listener\\\", \"\n+      \"\\\"address\\\":{\\\"socket_address\\\":{\\\"protocol\\\":\\\"TCP\\\",\\\"address\\\":\\\"0.0.0.0\\\",\\\"port_\"\n+      \"value\\\":10000}},\\\"api_listener\\\":{\\\"api_listener\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\\\",\\\"stat_\"\n+      \"prefix\\\":\\\"hcm\\\",\\\"route_config\\\":{\\\"name\\\":\\\"api_router\\\",\\\"virtual_hosts\\\":[{\\\"name\\\":\"\n+      \"\\\"api\\\",\\\"include_attempt_count_in_response\\\":true,\\\"domains\\\":[\\\"*\\\"],\\\"routes\\\":[{\"\n+      \"\\\"match\\\":{\\\"prefix\\\":\\\"/\"\n+      \"\\\"},\\\"direct_response\\\":{\\\"status\\\":\\\"200\\\"}}]}]},\\\"http_filters\\\":[{\\\"name\\\":\\\"buffer\\\",\"\n+      \"\\\"typed_config\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.http.buffer.v3.Buffer\\\", \\\"max_request_bytes\\\": \\\"65000\\\"}}, \"\n+      \"{\\\"name\\\":\\\"envoy.router\\\",\\\"typed_config\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.http.router.v3.Router\\\"}}]}}}]},\\\"layered_runtime\\\":{\\\"layers\\\":[{\"\n+      \"\\\"name\\\":\\\"static_layer_0\\\",\\\"static_layer\\\":{\\\"overload\\\":{\\\"global_downstream_max_\"\n+      \"connections\\\":50000}}}]}}\";\n+  const std::string level = \"debug\";\n+  absl::Notification exit;\n+  envoy_engine_callbacks engine_cbs{[](void* context) -> void {\n+                                      auto* exit = static_cast<absl::Notification*>(context);\n+                                      exit->Notify();\n+                                    },\n+                                    &exit};\n+  run_engine(0, engine_cbs, config.c_str(), level.c_str());\n+\n+  absl::Notification on_complete_notification;\n+  envoy_http_callbacks stream_cbs{[](envoy_headers, bool, void*) -> void* { return nullptr; },\n+                                  nullptr,\n+                                  nullptr,\n+                                  nullptr,\n+                                  nullptr,\n+                                  [](void* context) -> void* {\n+                                    auto* on_complete_notification =\n+                                        static_cast<absl::Notification*>(context);\n+                                    on_complete_notification->Notify();\n+                                    return nullptr;\n+                                  },\n+                                  nullptr,\n+                                  &on_complete_notification};\n+  Http::TestRequestHeaderMapImpl headers;\n+  HttpTestUtility::addDefaultHeaders(headers);\n+  envoy_headers c_headers = Http::Utility::toBridgeHeaders(headers);\n+\n+  Buffer::OwnedImpl request_data = Buffer::OwnedImpl(\"request body\");\n+  envoy_data c_data = Buffer::Utility::toBridgeData(request_data);\n+\n+  Http::TestRequestTrailerMapImpl trailers;\n+  envoy_headers c_trailers = Http::Utility::toBridgeHeaders(trailers);\n+\n+  envoy_stream_t stream = init_stream(0);\n+\n+  start_stream(stream, stream_cbs);\n+\n+  send_headers(stream, c_headers, false);\n+  send_data(stream, c_data, false);\n+  send_trailers(stream, c_trailers);\n+\n+  ASSERT_TRUE(on_complete_notification.WaitForNotificationWithTimeout(absl::Seconds(10)));\n+\n+  terminate_engine(0);\n+\n+  ASSERT_TRUE(exit.WaitForNotificationWithTimeout(absl::Seconds(10)));\n+}\n+\n+TEST_F(MainInterfaceTest, ResetStream) {\n+  const std::string config =\n+      \"{\\\"admin\\\":{},\\\"static_resources\\\":{\\\"listeners\\\":[{\\\"name\\\":\\\"base_api_listener\\\",\"\n+      \"\\\"address\\\":{\\\"socket_address\\\":{\\\"protocol\\\":\\\"TCP\\\",\\\"address\\\":\\\"0.0.0.0\\\",\\\"port_\"\n+      \"value\\\":10000}},\\\"api_listener\\\":{\\\"api_listener\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\\\",\\\"stat_\"\n+      \"prefix\\\":\\\"hcm\\\",\\\"route_config\\\":{\\\"name\\\":\\\"api_router\\\",\\\"virtual_hosts\\\":[{\\\"name\\\":\"\n+      \"\\\"api\\\",\\\"include_attempt_count_in_response\\\":true,\\\"domains\\\":[\\\"*\\\"],\\\"routes\\\":[{\"\n+      \"\\\"match\\\":{\\\"prefix\\\":\\\"/\"\n+      \"\\\"},\\\"route\\\":{\\\"cluster_header\\\":\\\"x-envoy-mobile-cluster\\\",\\\"retry_policy\\\":{\\\"retry_back_\"\n+      \"off\\\":{\\\"base_interval\\\":\\\"0.25s\\\",\\\"max_interval\\\":\\\"60s\\\"}}}}]}]},\\\"http_filters\\\":[{\"\n+      \"\\\"name\\\":\\\"envoy.router\\\",\\\"typed_config\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.http.router.v3.Router\\\"}}]}}}]},\\\"layered_runtime\\\":{\\\"layers\\\":[{\"\n+      \"\\\"name\\\":\\\"static_layer_0\\\",\\\"static_layer\\\":{\\\"overload\\\":{\\\"global_downstream_max_\"\n+      \"connections\\\":50000}}}]}}\";\n+  const std::string level = \"debug\";\n+  absl::Notification exit;\n+  envoy_engine_callbacks engine_cbs{[](void* context) -> void {\n+                                      auto* exit = static_cast<absl::Notification*>(context);\n+                                      exit->Notify();\n+                                    },\n+                                    &exit};\n+  run_engine(0, engine_cbs, config.c_str(), level.c_str());\n+\n+  absl::Notification on_cancel_notification;\n+  envoy_http_callbacks stream_cbs{[](envoy_headers, bool, void*) -> void* { return nullptr; },\n+                                  nullptr,\n+                                  nullptr,\n+                                  nullptr,\n+                                  nullptr,\n+                                  nullptr,\n+                                  [](void* context) -> void* {\n+                                    auto* on_cancel_notification =\n+                                        static_cast<absl::Notification*>(context);\n+                                    on_cancel_notification->Notify();\n+                                    return nullptr;\n+                                  },\n+                                  &on_cancel_notification};\n+\n+  envoy_stream_t stream = init_stream(0);\n+\n+  start_stream(stream, stream_cbs);\n+\n+  reset_stream(stream);\n+\n+  ASSERT_TRUE(on_cancel_notification.WaitForNotificationWithTimeout(absl::Seconds(10)));\n+\n+  terminate_engine(0);\n+\n+  ASSERT_TRUE(exit.WaitForNotificationWithTimeout(absl::Seconds(10)));", "originalCommit": "bda570002916b6579fde136c02d065bf9a6edf74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgwNzkwNw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1102#discussion_r489807907", "bodyText": "I think it's worth a docstring somewhere here explaining that the config above triggers a direct response which is why the stream completes. Also, should we validate the response itself?", "author": "rebello95", "createdAt": "2020-09-16T23:27:06Z", "path": "test/common/main_interface_test.cc", "diffHunk": "@@ -0,0 +1,128 @@\n+#include \"test/common/http/common.h\"\n+\n+#include \"absl/synchronization/notification.h\"\n+#include \"gtest/gtest.h\"\n+#include \"library/common/buffer/utility.h\"\n+#include \"library/common/http/header_utility.h\"\n+#include \"library/common/main_interface.h\"\n+\n+namespace Envoy {\n+\n+class MainInterfaceTest : public testing::Test {};\n+\n+TEST_F(MainInterfaceTest, BasicStream) {\n+  const std::string config =\n+      \"{\\\"admin\\\":{},\\\"static_resources\\\":{\\\"listeners\\\":[{\\\"name\\\":\\\"base_api_listener\\\", \"\n+      \"\\\"address\\\":{\\\"socket_address\\\":{\\\"protocol\\\":\\\"TCP\\\",\\\"address\\\":\\\"0.0.0.0\\\",\\\"port_\"\n+      \"value\\\":10000}},\\\"api_listener\\\":{\\\"api_listener\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\\\",\\\"stat_\"\n+      \"prefix\\\":\\\"hcm\\\",\\\"route_config\\\":{\\\"name\\\":\\\"api_router\\\",\\\"virtual_hosts\\\":[{\\\"name\\\":\"\n+      \"\\\"api\\\",\\\"include_attempt_count_in_response\\\":true,\\\"domains\\\":[\\\"*\\\"],\\\"routes\\\":[{\"\n+      \"\\\"match\\\":{\\\"prefix\\\":\\\"/\"\n+      \"\\\"},\\\"direct_response\\\":{\\\"status\\\":\\\"200\\\"}}]}]},\\\"http_filters\\\":[{\\\"name\\\":\\\"buffer\\\",\"\n+      \"\\\"typed_config\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.http.buffer.v3.Buffer\\\", \\\"max_request_bytes\\\": \\\"65000\\\"}}, \"\n+      \"{\\\"name\\\":\\\"envoy.router\\\",\\\"typed_config\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.http.router.v3.Router\\\"}}]}}}]},\\\"layered_runtime\\\":{\\\"layers\\\":[{\"\n+      \"\\\"name\\\":\\\"static_layer_0\\\",\\\"static_layer\\\":{\\\"overload\\\":{\\\"global_downstream_max_\"\n+      \"connections\\\":50000}}}]}}\";\n+  const std::string level = \"debug\";\n+  absl::Notification exit;\n+  envoy_engine_callbacks engine_cbs{[](void* context) -> void {\n+                                      auto* exit = static_cast<absl::Notification*>(context);\n+                                      exit->Notify();\n+                                    },\n+                                    &exit};\n+  run_engine(0, engine_cbs, config.c_str(), level.c_str());\n+\n+  absl::Notification on_complete_notification;\n+  envoy_http_callbacks stream_cbs{[](envoy_headers, bool, void*) -> void* { return nullptr; },\n+                                  nullptr,\n+                                  nullptr,\n+                                  nullptr,\n+                                  nullptr,\n+                                  [](void* context) -> void* {\n+                                    auto* on_complete_notification =\n+                                        static_cast<absl::Notification*>(context);\n+                                    on_complete_notification->Notify();\n+                                    return nullptr;\n+                                  },\n+                                  nullptr,\n+                                  &on_complete_notification};\n+  Http::TestRequestHeaderMapImpl headers;\n+  HttpTestUtility::addDefaultHeaders(headers);\n+  envoy_headers c_headers = Http::Utility::toBridgeHeaders(headers);\n+\n+  Buffer::OwnedImpl request_data = Buffer::OwnedImpl(\"request body\");\n+  envoy_data c_data = Buffer::Utility::toBridgeData(request_data);\n+\n+  Http::TestRequestTrailerMapImpl trailers;\n+  envoy_headers c_trailers = Http::Utility::toBridgeHeaders(trailers);\n+\n+  envoy_stream_t stream = init_stream(0);\n+\n+  start_stream(stream, stream_cbs);\n+\n+  send_headers(stream, c_headers, false);\n+  send_data(stream, c_data, false);\n+  send_trailers(stream, c_trailers);\n+\n+  ASSERT_TRUE(on_complete_notification.WaitForNotificationWithTimeout(absl::Seconds(10)));", "originalCommit": "bda570002916b6579fde136c02d065bf9a6edf74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8ee2e97b6c8026305601d78a62d4a80ef5454435", "url": "https://github.com/envoyproxy/envoy-mobile/commit/8ee2e97b6c8026305601d78a62d4a80ef5454435", "message": "Merge branch 'main' into remaining-coverage\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-09-17T00:06:22Z", "type": "commit"}, {"oid": "502ef07d44696c91f7702efd67662dcc3ecbb469", "url": "https://github.com/envoyproxy/envoy-mobile/commit/502ef07d44696c91f7702efd67662dcc3ecbb469", "message": "comments and fix\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-09-17T00:28:15Z", "type": "commit"}, {"oid": "62669c930a20c1586d58e3f01a1f556d330fed10", "url": "https://github.com/envoyproxy/envoy-mobile/commit/62669c930a20c1586d58e3f01a1f556d330fed10", "message": "metadata\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-09-17T00:43:41Z", "type": "commit"}, {"oid": "b65f75aa4e67dd8f512f499aadfb292b8ab44c8d", "url": "https://github.com/envoyproxy/envoy-mobile/commit/b65f75aa4e67dd8f512f499aadfb292b8ab44c8d", "message": "cleanup\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-09-17T00:55:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQyMjIwMg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1102#discussion_r490422202", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                absl::string_view details_;\n          \n          \n            \n                absl::string_view response_details_;", "author": "rebello95", "createdAt": "2020-09-17T17:07:04Z", "path": "library/common/http/dispatcher.h", "diffHunk": "@@ -168,19 +172,24 @@ class Dispatcher : public Logger::Loggable<Logger::Id::http> {\n     const Network::Address::InstanceConstSharedPtr& connectionLocalAddress() override {\n       return parent_.address_;\n     }\n+    absl::string_view responseDetails() override { return details_; }\n     // TODO: https://github.com/lyft/envoy-mobile/issues/825\n     void readDisable(bool /*disable*/) override {}\n     uint32_t bufferLimit() override { return 65000; }\n     // Not applicable\n     void setFlushTimeout(std::chrono::milliseconds) override {}\n \n+    void setDetails(absl::string_view details) { details_ = details; }\n+\n     const envoy_stream_t stream_handle_;\n \n     // Used to issue outgoing HTTP stream operations.\n     RequestDecoder* request_decoder_;\n     // Used to receive incoming HTTP stream operations.\n     DirectStreamCallbacksPtr callbacks_;\n     Dispatcher& parent_;\n+    // Response details used by the connection manager.\n+    absl::string_view details_;", "originalCommit": "b65f75aa4e67dd8f512f499aadfb292b8ab44c8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQyMjk2Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1102#discussion_r490422962", "bodyText": "setResponseDetails? I'm also curious as to what the benefit is of having an explicit setter when details_ has the same access level below and can be modified directly", "author": "rebello95", "createdAt": "2020-09-17T17:08:25Z", "path": "library/common/http/dispatcher.h", "diffHunk": "@@ -168,19 +172,24 @@ class Dispatcher : public Logger::Loggable<Logger::Id::http> {\n     const Network::Address::InstanceConstSharedPtr& connectionLocalAddress() override {\n       return parent_.address_;\n     }\n+    absl::string_view responseDetails() override { return details_; }\n     // TODO: https://github.com/lyft/envoy-mobile/issues/825\n     void readDisable(bool /*disable*/) override {}\n     uint32_t bufferLimit() override { return 65000; }\n     // Not applicable\n     void setFlushTimeout(std::chrono::milliseconds) override {}\n \n+    void setDetails(absl::string_view details) { details_ = details; }", "originalCommit": "b65f75aa4e67dd8f512f499aadfb292b8ab44c8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3Mjg3MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1102#discussion_r490572871", "bodyText": "yep, good eye. I actually want to turn all the members to private to prevent a conn manager <-> async stream situation here. So wanted to prepare for that.", "author": "junr03", "createdAt": "2020-09-17T21:29:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQyMjk2Mg=="}], "type": "inlineReview"}, {"oid": "f042a572ac514a2fc47e66ad3e60c24c404dba20", "url": "https://github.com/envoyproxy/envoy-mobile/commit/f042a572ac514a2fc47e66ad3e60c24c404dba20", "message": "asan and fmt\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-09-17T23:52:47Z", "type": "commit"}, {"oid": "4c4fd3b02a726299eae647acc819e388ba9357de", "url": "https://github.com/envoyproxy/envoy-mobile/commit/4c4fd3b02a726299eae647acc819e388ba9357de", "message": "Merge branch 'main' into remaining-coverage\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-09-17T23:53:48Z", "type": "commit"}, {"oid": "5a1c0fb5cc2981b0add2fcc1767365340cfb83c6", "url": "https://github.com/envoyproxy/envoy-mobile/commit/5a1c0fb5cc2981b0add2fcc1767365340cfb83c6", "message": "bump ref\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-09-18T00:00:50Z", "type": "commit"}, {"oid": "f39a03a635aa3d51f1583b95e8e27f20c02e2245", "url": "https://github.com/envoyproxy/envoy-mobile/commit/f39a03a635aa3d51f1583b95e8e27f20c02e2245", "message": "size\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-09-18T01:34:00Z", "type": "commit"}]}