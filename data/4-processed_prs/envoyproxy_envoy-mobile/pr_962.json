{"pr_number": 962, "pr_title": "filters: add bridge support for data invocations", "pr_createdAt": "2020-07-17T01:21:26Z", "pr_url": "https://github.com/envoyproxy/envoy-mobile/pull/962", "timeline": [{"oid": "459086011e005f62cb4f13a99cca5ed9d0732245", "url": "https://github.com/envoyproxy/envoy-mobile/commit/459086011e005f62cb4f13a99cca5ed9d0732245", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-07-17T21:29:42Z", "type": "forcePushed"}, {"oid": "47706e83edc325c4e2f8840752eed27df1807956", "url": "https://github.com/envoyproxy/envoy-mobile/commit/47706e83edc325c4e2f8840752eed27df1807956", "message": "filters: add bridge support for data invocations\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-07-21T17:46:23Z", "type": "commit"}, {"oid": "82f4eb2ae55495cbbe766a6f0246b48821878057", "url": "https://github.com/envoyproxy/envoy-mobile/commit/82f4eb2ae55495cbbe766a6f0246b48821878057", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-07-21T17:46:23Z", "type": "commit"}, {"oid": "b616e28c6f5a0d019af61cecaf4c07345a1f4478", "url": "https://github.com/envoyproxy/envoy-mobile/commit/b616e28c6f5a0d019af61cecaf4c07345a1f4478", "message": "update status to externed consts\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-07-21T17:51:56Z", "type": "forcePushed"}, {"oid": "f42f6131ad8f6d04af43e1fc4e2820c046d30db6", "url": "https://github.com/envoyproxy/envoy-mobile/commit/f42f6131ad8f6d04af43e1fc4e2820c046d30db6", "message": "update status to externed consts\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-07-21T18:26:11Z", "type": "commit"}, {"oid": "f42f6131ad8f6d04af43e1fc4e2820c046d30db6", "url": "https://github.com/envoyproxy/envoy-mobile/commit/f42f6131ad8f6d04af43e1fc4e2820c046d30db6", "message": "update status to externed consts\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-07-21T18:26:11Z", "type": "forcePushed"}, {"oid": "7374320b218361bd6ea301fb22da58bd34a62204", "url": "https://github.com/envoyproxy/envoy-mobile/commit/7374320b218361bd6ea301fb22da58bd34a62204", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-07-21T18:51:03Z", "type": "commit"}, {"oid": "0a60e3c005d518fe812f71a402df189caa217535", "url": "https://github.com/envoyproxy/envoy-mobile/commit/0a60e3c005d518fe812f71a402df189caa217535", "message": "fix types\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-07-21T22:09:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDI4MA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/962#discussion_r458444280", "bodyText": "nit: is the k prefix a common c-style convention?", "author": "junr03", "createdAt": "2020-07-21T23:22:01Z", "path": "library/common/extensions/filters/http/platform_bridge/c_types.cc", "diffHunk": "@@ -13,3 +13,10 @@ const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusContinueAndEndStrea\n const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusStopAllIterationAndBuffer =\n     static_cast<envoy_filter_headers_status_t>(\n         Envoy::Http::FilterHeadersStatus::StopAllIterationAndBuffer);\n+\n+const envoy_filter_data_status_t kEnvoyFilterDataStatusContinue =", "originalCommit": "0a60e3c005d518fe812f71a402df189caa217535", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1MTAzMA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/962#discussion_r458451030", "bodyText": "It is a convention that has been used in C, C++, Objective-C and Swift. It's the nearest I could come to a style shared by and recognizable across all four languages.\nSee, for example:\nhttps://google.github.io/styleguide/cppguide.html#Variable_Comments\nNote, the Google Style Guide for Objective-C, no longer recommends prefixing global constants with k (where it was once quite prevalent), but again I was going for something that would be easily recognizable across all the languages/environments.", "author": "goaway", "createdAt": "2020-07-21T23:43:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDI4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDUyMw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/962#discussion_r458444523", "bodyText": "Can we document this style decision in STYLE.md?", "author": "junr03", "createdAt": "2020-07-21T23:22:57Z", "path": "library/common/extensions/filters/http/platform_bridge/c_types.h", "diffHunk": "@@ -24,11 +24,10 @@ typedef struct {\n /**\n  * Return codes for on-data filter invocations. @see envoy/http/filter.h\n  */\n-typedef enum {\n-  ENVOY_FILTER_DATA_STATUS_CONTINUE = 0,\n-  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_AND_BUFFER,\n-  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_NO_BUFFER,\n-} envoy_filter_data_status_t;\n+typedef int envoy_filter_data_status_t;", "originalCommit": "0a60e3c005d518fe812f71a402df189caa217535", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1MTk3NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/962#discussion_r458451974", "bodyText": "Sure, but just to clarify, which do you mean?", "author": "goaway", "createdAt": "2020-07-21T23:46:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1MjQwNw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/962#discussion_r458452407", "bodyText": "The new approach with the static cast", "author": "junr03", "createdAt": "2020-07-21T23:47:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1MzM1Ng==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/962#discussion_r458453356", "bodyText": "Oh, sure.", "author": "goaway", "createdAt": "2020-07-21T23:50:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NjI1OA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/962#discussion_r458456258", "bodyText": "Maybe as part of this PR?\n#966", "author": "goaway", "createdAt": "2020-07-22T00:00:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2MzYzMg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/962#discussion_r458463632", "bodyText": "will document in https://github.com/lyft/envoy-mobile/pull/966/files", "author": "junr03", "createdAt": "2020-07-22T00:26:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDUyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NzEwMA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/962#discussion_r458447100", "bodyText": "I still think that this wrapping class is such a nifty approach, love it.", "author": "junr03", "createdAt": "2020-07-21T23:30:46Z", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -47,15 +48,37 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n   return status;\n }\n \n+Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    envoy_filter_on_data_f on_data) {\n+  // Allow nullptr to act as (optimized) no-op.\n+  if (on_data == nullptr) {\n+    return Http::FilterDataStatus::Continue;\n+  }\n+\n+  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_->context);\n+  Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  // Current platform implementations expose immutable data, thus any modification necessitates a\n+  // full copy. If the returned buffer is identical, we assume no modification was made and elide\n+  // the copy here. See also https://github.com/lyft/envoy-mobile/issues/949 for potential future\n+  // optimization.\n+  if (in_data.bytes != result.data.bytes) {\n+    data.drain(data.length());\n+    data.addBufferFragment(*Buffer::BridgeFragment::createBridgeFragment(result.data));", "originalCommit": "0a60e3c005d518fe812f71a402df189caa217535", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}