{"pr_number": 1129, "pr_title": "filters: add core and iOS async filter callback support", "pr_createdAt": "2020-10-13T11:23:29Z", "pr_url": "https://github.com/envoyproxy/envoy-mobile/pull/1129", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwOTAzNg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1129#discussion_r504109036", "bodyText": "Should this be added as a dependency somewhere?", "author": "rebello95", "createdAt": "2020-10-13T16:48:07Z", "path": "library/objective-c/BUILD", "diffHunk": "@@ -32,6 +31,15 @@ objc_library(\n     ],\n )\n \n+objc_library(", "originalCommit": "0ca1b9e8d4374e99f49c083eaceb5536015c3cb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2ODM1Mw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1129#discussion_r504868353", "bodyText": "(was wip) :)", "author": "goaway", "createdAt": "2020-10-14T17:58:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwOTAzNg=="}], "type": "inlineReview"}, {"oid": "fcb99b0be9d338c8f674e3d643388caa6fc20ef0", "url": "https://github.com/envoyproxy/envoy-mobile/commit/fcb99b0be9d338c8f674e3d643388caa6fc20ef0", "message": "filters: add core and iOS async filter callback support\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-13T18:22:29Z", "type": "forcePushed"}, {"oid": "b7b5f13115201bdc6616eff2f3193fad3b60acb9", "url": "https://github.com/envoyproxy/envoy-mobile/commit/b7b5f13115201bdc6616eff2f3193fad3b60acb9", "message": "filters: add core and iOS async filter callback support\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-14T10:42:53Z", "type": "forcePushed"}, {"oid": "e4344f9f99459e53a63fddabf4e9b3686716ce7a", "url": "https://github.com/envoyproxy/envoy-mobile/commit/e4344f9f99459e53a63fddabf4e9b3686716ce7a", "message": "filters: add core and iOS async filter callback support\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-14T14:12:50Z", "type": "forcePushed"}, {"oid": "62b3b91fd318b01e596ceb57e23666e4cb16559b", "url": "https://github.com/envoyproxy/envoy-mobile/commit/62b3b91fd318b01e596ceb57e23666e4cb16559b", "message": "filters: add core and iOS async filter callback support\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-14T14:21:03Z", "type": "forcePushed"}, {"oid": "d28dc55f2bf0773f8db55d745eb1b0bea26583d5", "url": "https://github.com/envoyproxy/envoy-mobile/commit/d28dc55f2bf0773f8db55d745eb1b0bea26583d5", "message": "filters: add core and iOS async filter callback support\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-14T14:49:55Z", "type": "forcePushed"}, {"oid": "d2e0eecf3cc4c26cc075a1d7747319dd05d58bc3", "url": "https://github.com/envoyproxy/envoy-mobile/commit/d2e0eecf3cc4c26cc075a1d7747319dd05d58bc3", "message": "filters: add core and iOS async filter callback support\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-14T17:56:44Z", "type": "forcePushed"}, {"oid": "660da5bdf1be282248818fe6d03f7f55e34484fa", "url": "https://github.com/envoyproxy/envoy-mobile/commit/660da5bdf1be282248818fe6d03f7f55e34484fa", "message": "filters: add core and iOS async filter callback support\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-14T17:59:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkyMzQ4OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1129#discussion_r504923489", "bodyText": "I want to call out that there is a potential shutdown race here, but it all depends on timing (I guess, obviously). We don't retain the filter and so when Envoy is being torn down, it's possible the filter is torn down before the dispatcher, in which case everything is fine. If the inverse happens, however, then there's narrow window here where we could successfully acquire the filter and attempt to access the dispatcher, which is already gone.\nAs I shared when we discussed in person, there are a few solutions to this. We could allow the dispatcher itself to be shared and locked (this is seems ideal to me, since we would never have a garbage reference here or anywhere else we needed to call in from platform code on an arbitrary thread). We could lock the top-level engine object, but the downside is that all incoming calls would need access to it (and indeed, there's not an obvious reason a filter should have access to it, let alone a mechanism to make it available short of ugly hacks). And finally, we could take ownership of the dispatcher and have it be something passed into Envoy to ensure it was always valid. (There are other advantages to this last approach, and it might be desirable eventually regardless, but it would initially require non-trivial changes to Envoy.)", "author": "goaway", "createdAt": "2020-10-14T19:34:16Z", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -325,7 +369,20 @@ PlatformBridgeFilter::encodeTrailers(Http::ResponseTrailerMap& trailers) {\n   return status;\n }\n \n+void PlatformBridgeFilter::resumeDecoding() {\n+  auto weak_self = weak_from_this();\n+  dispatcher_.post([weak_self]() -> void {", "originalCommit": "7a595ad45a084da39ff06749dc95b807b2c194d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NzE0NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1129#discussion_r505887144", "bodyText": "can we leave a todo in the code linking to an issue that we can track for any of the solutions you list?", "author": "junr03", "createdAt": "2020-10-15T21:55:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkyMzQ4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkxNDUxNw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1129#discussion_r505914517", "bodyText": "yes", "author": "goaway", "createdAt": "2020-10-15T23:10:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkyMzQ4OQ=="}], "type": "inlineReview"}, {"oid": "c27baef52adab4f73208f82036ad97140d0597dc", "url": "https://github.com/envoyproxy/envoy-mobile/commit/c27baef52adab4f73208f82036ad97140d0597dc", "message": "resolve deps\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-15T11:31:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3NTI1MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1129#discussion_r505875251", "bodyText": "nit: I wonder if we should move the static helpers to their own utility file.", "author": "junr03", "createdAt": "2020-10-15T21:36:40Z", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -17,14 +17,38 @@ namespace Extensions {\n namespace HttpFilters {\n namespace PlatformBridge {\n \n+static void envoy_filter_release_callbacks(const void* context) {", "originalCommit": "c27baef52adab4f73208f82036ad97140d0597dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkyMjQ2Mw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1129#discussion_r505922463", "bodyText": "Well, they're static, so they're not accessible ouside this file. And we don't need them to be, since they're just what we use to set the function pointers on the struct.", "author": "goaway", "createdAt": "2020-10-15T23:35:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3NTI1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ1Mzk0OA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1129#discussion_r507453948", "bodyText": "We could include them in a bare header, but I suppose my preference is to put them here, to limit their visibility strictly to this file.", "author": "goaway", "createdAt": "2020-10-19T04:48:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3NTI1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4MzY2MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1129#discussion_r505883661", "bodyText": "we should have an inline comment about the ownership model", "author": "junr03", "createdAt": "2020-10-15T21:49:08Z", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -44,6 +68,24 @@ PlatformBridgeFilter::PlatformBridgeFilter(PlatformBridgeFilterConfigSharedPtr c\n   ASSERT(platform_filter_.instance_context,\n          fmt::format(\"init_filter unsuccessful for {}\", filter_name_));\n   iteration_state_ = IterationState::Ongoing;\n+\n+  if (platform_filter_.set_request_callbacks) {\n+    platform_request_callbacks_.resume_iteration = envoy_filter_callback_resume_decoding;\n+    platform_request_callbacks_.release_callbacks = envoy_filter_release_callbacks;\n+    platform_request_callbacks_.callback_context =\n+        new PlatformBridgeFilterWeakPtr{weak_from_this()};", "originalCommit": "c27baef52adab4f73208f82036ad97140d0597dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkyMjE1OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1129#discussion_r505922159", "bodyText": "Sure.", "author": "goaway", "createdAt": "2020-10-15T23:34:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4MzY2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NDMwMA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1129#discussion_r505884300", "bodyText": "The absence of this assignment was a bug, right?", "author": "junr03", "createdAt": "2020-10-15T21:50:03Z", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -172,6 +214,7 @@ Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool\n       data.drain(data.length());\n       data.addBufferFragment(*Buffer::BridgeFragment::createBridgeFragment(result.data));\n     }\n+    iteration_state_ = IterationState::Ongoing;", "originalCommit": "c27baef52adab4f73208f82036ad97140d0597dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkyMjExOQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1129#discussion_r505922119", "bodyText": "It was, though not one we would have encountered yet. I am adding coverage for it.", "author": "goaway", "createdAt": "2020-10-15T23:34:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NDMwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NjA2MA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1129#discussion_r505886060", "bodyText": "nit: usually weak_this in the Envoy codebase", "author": "junr03", "createdAt": "2020-10-15T21:52:39Z", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -325,7 +369,20 @@ PlatformBridgeFilter::encodeTrailers(Http::ResponseTrailerMap& trailers) {\n   return status;\n }\n \n+void PlatformBridgeFilter::resumeDecoding() {\n+  auto weak_self = weak_from_this();", "originalCommit": "c27baef52adab4f73208f82036ad97140d0597dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkxNzAxMw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1129#discussion_r505917013", "bodyText": "I referenced the cache filter for this, and it used \"self\". (shrug emoji)\nI have no preference.", "author": "goaway", "createdAt": "2020-10-15T23:17:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NjA2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NzY1MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1129#discussion_r505887651", "bodyText": "In other parts of the filter we have assertions about invalid combination of actions vs filter state. I want to hear your thoughts about why here we have a no-op.", "author": "junr03", "createdAt": "2020-10-15T21:56:33Z", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -325,7 +369,20 @@ PlatformBridgeFilter::encodeTrailers(Http::ResponseTrailerMap& trailers) {\n   return status;\n }\n \n+void PlatformBridgeFilter::resumeDecoding() {\n+  auto weak_self = weak_from_this();\n+  dispatcher_.post([weak_self]() -> void {\n+    if (auto self = weak_self.lock()) {\n+      self->onResumeDecoding();\n+    }\n+  });\n+}\n+\n void PlatformBridgeFilter::onResumeDecoding() {\n+  if (iteration_state_ == IterationState::Ongoing) {\n+    return;", "originalCommit": "c27baef52adab4f73208f82036ad97140d0597dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkxMzgzMQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1129#discussion_r505913831", "bodyText": "In my view, It's expected that this could happen, and it shouldn't be treated as an error. Say you have a filter that halts iteration for the next data chunk only for up to a 30s timeout and then resumes regardless. You'd need to resume asynchronously after the 30 seconds are up, but you might get the next data chunk right around then too. The ordering of the dispatch of those two events is unpredictable. You would know if the async call won during your on-data call, because you'd have received an on-resume call (on the same thread - the stream/filter thread). But if the inverse was true, and you wanted to proceed, you'd have no way to abort the already-dispatched asynchronous call (at least not without making the implementation a whole lot more complicated). This allows you to use async resume in conjunction with sync resume without a whole lot of extra bookkeeping in the filter implementation and said complexity in the implementation.", "author": "goaway", "createdAt": "2020-10-15T23:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NzY1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4ODM4Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1129#discussion_r505888382", "bodyText": "Missing tests, right?", "author": "junr03", "createdAt": "2020-10-15T21:58:32Z", "path": "test/common/extensions/filters/http/platform_bridge/platform_bridge_filter_test.cc", "diffHunk": "@@ -1,3 +1,4 @@\n+#include \"test/mocks/event/mocks.h\"", "originalCommit": "c27baef52adab4f73208f82036ad97140d0597dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkxNDQyOQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1129#discussion_r505914429", "bodyText": "But coverage isn't failing! ;)\nIn all seriousness, there's not a lot extra to cover here, but I am going to add coverage to cause the on-resume tests to be triggered by an \"async callback\", and basic coverage of callback state management. Also that bug you noted that's fixed in this PR.", "author": "goaway", "createdAt": "2020-10-15T23:10:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4ODM4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2NjgxOQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1129#discussion_r506666819", "bodyText": "So multiple objc header files work now? If so, maybe we can (in a separate PR) look into splitting up the EnvoyEngine.h file?", "author": "rebello95", "createdAt": "2020-10-16T18:58:21Z", "path": "library/objective-c/EnvoyHTTPFilterCallbacksImpl.h", "diffHunk": "@@ -0,0 +1,12 @@\n+#import <Foundation/Foundation.h>", "originalCommit": "c27baef52adab4f73208f82036ad97140d0597dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMwMzcwNA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1129#discussion_r507303704", "bodyText": "Not quite. Private headers can be used either by listing them as srcs or by moving them to a separate library target. But anything exposed to Swift still needs to be in the single header (because that becomes the bridge header and we hit a clang error with transitive imports).", "author": "goaway", "createdAt": "2020-10-19T01:02:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2NjgxOQ=="}], "type": "inlineReview"}, {"oid": "bf7fcddc4b1a038b23a60b296ef48da1f81be711", "url": "https://github.com/envoyproxy/envoy-mobile/commit/bf7fcddc4b1a038b23a60b296ef48da1f81be711", "message": "filters: add core and iOS async filter callback support\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-19T07:28:39Z", "type": "commit"}, {"oid": "f23743bf3b0576386830b5eb153ef38e6599e0cb", "url": "https://github.com/envoyproxy/envoy-mobile/commit/f23743bf3b0576386830b5eb153ef38e6599e0cb", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-19T07:28:39Z", "type": "commit"}, {"oid": "a2e2a2cbee7cd5c0ea3c8f8f63e6a0a676e9fc85", "url": "https://github.com/envoyproxy/envoy-mobile/commit/a2e2a2cbee7cd5c0ea3c8f8f63e6a0a676e9fc85", "message": "resolve deps\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-19T07:28:39Z", "type": "commit"}, {"oid": "9541d8c3bb56aeef0c94635fd9ae843f1aeee212", "url": "https://github.com/envoyproxy/envoy-mobile/commit/9541d8c3bb56aeef0c94635fd9ae843f1aeee212", "message": "comments and rebase\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-19T07:28:39Z", "type": "commit"}, {"oid": "9541d8c3bb56aeef0c94635fd9ae843f1aeee212", "url": "https://github.com/envoyproxy/envoy-mobile/commit/9541d8c3bb56aeef0c94635fd9ae843f1aeee212", "message": "comments and rebase\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-19T07:28:39Z", "type": "forcePushed"}, {"oid": "ae6047f64483c93c1c4aaab964da151f3087ba07", "url": "https://github.com/envoyproxy/envoy-mobile/commit/ae6047f64483c93c1c4aaab964da151f3087ba07", "message": "additional coverage\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-19T08:26:12Z", "type": "commit"}, {"oid": "42495bdbde87785f11377b4b9fc908bbf2770863", "url": "https://github.com/envoyproxy/envoy-mobile/commit/42495bdbde87785f11377b4b9fc908bbf2770863", "message": "additional coverage\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-19T09:03:09Z", "type": "commit"}, {"oid": "290d2792df935bba779369db01fffa254d6741be", "url": "https://github.com/envoyproxy/envoy-mobile/commit/290d2792df935bba779369db01fffa254d6741be", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-19T09:05:15Z", "type": "commit"}, {"oid": "76ae59f70b92b03de7e7296adc97bf13e1e3e48b", "url": "https://github.com/envoyproxy/envoy-mobile/commit/76ae59f70b92b03de7e7296adc97bf13e1e3e48b", "message": "typo\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-19T13:03:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5NDMwMw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1129#discussion_r508794303", "bodyText": "should the onResume callbacks below be made private now that we have the async triggers exposed?", "author": "junr03", "createdAt": "2020-10-20T19:46:23Z", "path": "library/common/extensions/filters/http/platform_bridge/filter.h", "diffHunk": "@@ -46,9 +46,18 @@ enum class IterationState { Ongoing, Stopped };\n  * For more information on implementing platform filters, see the docs.\n  */\n class PlatformBridgeFilter final : public Http::PassThroughFilter,\n-                                   Logger::Loggable<Logger::Id::filter> {\n+                                   public Logger::Loggable<Logger::Id::filter>,\n+                                   public std::enable_shared_from_this<PlatformBridgeFilter> {\n public:\n-  PlatformBridgeFilter(PlatformBridgeFilterConfigSharedPtr config);\n+  PlatformBridgeFilter(PlatformBridgeFilterConfigSharedPtr config, Event::Dispatcher& dispatcher);\n+\n+  // Asynchronously trigger resumption of filter iteration, if applicable.\n+  // This is a no-op if filter iteration is already ongoing.\n+  void resumeDecoding();\n+\n+  // Asynchronously trigger resumption of filter iteration, if applicable.\n+  // This is a no-op if filter iteration is already ongoing.\n+  void resumeEncoding();", "originalCommit": "76ae59f70b92b03de7e7296adc97bf13e1e3e48b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgxODg2NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1129#discussion_r508818864", "bodyText": "It could be, though right now its visibility aligns with the other on* functions in the class (which perhaps could arguably all be made private).", "author": "goaway", "createdAt": "2020-10-20T20:29:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5NDMwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgxOTI3NQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1129#discussion_r508819275", "bodyText": "Actually, I'm mistaken, they're already private. Let me move it.", "author": "goaway", "createdAt": "2020-10-20T20:30:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5NDMwMw=="}], "type": "inlineReview"}, {"oid": "8f1a79e8f47d4df7454b9ec0f00570d08f629e93", "url": "https://github.com/envoyproxy/envoy-mobile/commit/8f1a79e8f47d4df7454b9ec0f00570d08f629e93", "message": "update visibility of functions\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-20T20:31:50Z", "type": "commit"}]}