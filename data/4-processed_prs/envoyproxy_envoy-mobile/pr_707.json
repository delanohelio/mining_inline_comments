{"pr_number": 707, "pr_title": "core: expose functionality for flushing stats manually", "pr_createdAt": "2020-02-27T22:02:05Z", "pr_url": "https://github.com/envoyproxy/envoy-mobile/pull/707", "timeline": [{"oid": "b43541e308e25ab5b782d5eafeabe5771869edbd", "url": "https://github.com/envoyproxy/envoy-mobile/commit/b43541e308e25ab5b782d5eafeabe5771869edbd", "message": "core: expose functionality for flushing stats manually\n\nAdds functionality built on top of the upstream Envoy changes in https://github.com/envoyproxy/envoy/pull/10097 which will allow the bridging layers to manually flush stats based on lifecycle changes in the mobile application.\n\nFollow-up PRs will call these functions from Java/Objective-C.\n\nPart of https://github.com/lyft/envoy-mobile/issues/573.\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-02-27T22:01:57Z", "type": "commit"}, {"oid": "0db7a6ece740a5f1f7413d69a779948ea14da207", "url": "https://github.com/envoyproxy/envoy-mobile/commit/0db7a6ece740a5f1f7413d69a779948ea14da207", "message": "must be called on main\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-02-27T22:47:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1Mzk4OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/707#discussion_r385453989", "bodyText": "Might be worth to also document that flushing before the engine has initialized results in no flush.", "author": "junr03", "createdAt": "2020-02-28T00:51:15Z", "path": "library/common/main_interface.h", "diffHunk": "@@ -91,6 +91,13 @@ envoy_engine_t init_engine();\n  */\n envoy_status_t set_preferred_network(envoy_network_t network);\n \n+/**\n+ * Flush the stats sinks outside of a flushing interval.\n+ * Note: stats flushing may not be synchronous.\n+ * Therefore, this function may return prior to flushing taking place.\n+ */", "originalCommit": "0db7a6ece740a5f1f7413d69a779948ea14da207", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1NTYwOQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/707#discussion_r385455609", "bodyText": "True that we need to flush from Envoy's main thread. However, I believe this won't accomplish it, as you are blocking the platform thread until Envoy's main thread finishes execution. What we need to do is:\nif (server_instance_) {\n  server_instance_->dispatcher().post([this]() -> void {\n    server_instance_->flushStats();\n  });\n}\n(sorry if there is a syntax error, you get the idea)\nThis way we are posting the function call into the main thread's event loop.", "author": "junr03", "createdAt": "2020-02-28T00:56:40Z", "path": "library/common/engine.cc", "diffHunk": "@@ -106,6 +107,19 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::flushStats() {\n+  // Stats must be flushed from the main thread. If we aren't on the main thread, join it.", "originalCommit": "0db7a6ece740a5f1f7413d69a779948ea14da207", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1Nzg2OA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/707#discussion_r385457868", "bodyText": "Ah good call. Updating", "author": "rebello95", "createdAt": "2020-02-28T01:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1NTYwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1NTgyNQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/707#discussion_r385455825", "bodyText": "nit: just server_?", "author": "junr03", "createdAt": "2020-02-28T00:57:25Z", "path": "library/common/engine.h", "diffHunk": "@@ -28,16 +28,24 @@ class Engine {\n \n   Http::Dispatcher& httpDispatcher();\n \n+  /**\n+   * Flush the stats sinks outside of a flushing interval.\n+   * Note: stats flushing may not be synchronous.\n+   * Therefore, this function may return prior to flushing taking place.\n+   */\n+  void flushStats();\n+\n private:\n   envoy_status_t run(std::string config, std::string log_level);\n \n   envoy_engine_callbacks callbacks_;\n   Thread::MutexBasicLockable mutex_;\n   Thread::CondVar cv_;\n   std::thread main_thread_;\n-  std::unique_ptr<Envoy::Http::Dispatcher> http_dispatcher_;\n-  std::unique_ptr<Envoy::MainCommon> main_common_ GUARDED_BY(mutex_);\n-  Envoy::Server::ServerLifecycleNotifier::HandlePtr postinit_callback_handler_;\n+  std::unique_ptr<Http::Dispatcher> http_dispatcher_;\n+  std::unique_ptr<MainCommon> main_common_ GUARDED_BY(mutex_);\n+  Server::Instance* server_instance_;", "originalCommit": "0db7a6ece740a5f1f7413d69a779948ea14da207", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f2720babe88717df8d11b86bd461d1e0ae51ae4b", "url": "https://github.com/envoyproxy/envoy-mobile/commit/f2720babe88717df8d11b86bd461d1e0ae51ae4b", "message": "CR\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-02-28T01:05:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY5NzcwOA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/707#discussion_r386697708", "bodyText": "So I do think this will be racy. The raw pointer is set and read from different threads, so there's at least a window where threads calling flush_stats may not see the server even though it's been set. The only time I think it would crash though is potentially on teardown. However, we've spent some time chasing down shutdown crashes, so I don't know if we really want to add to that risk.\nI would suggest leveraging the http_dispatcher and its mutex for accessing Envoy's event_dispatcher instead for now, since I think this is a risky pattern to promulgate without further protections. Additionally, I think we should limit the surface area of cross-thread interactions just to make it easier to reason about logic and improve safety.\nLong-term I'd like to split the business logic of encoding/decoding HTTP requests and handling dispatch into two separate entities, instead of having a single HTTPDispatcher.", "author": "goaway", "createdAt": "2020-03-02T22:46:52Z", "path": "library/common/engine.h", "diffHunk": "@@ -28,16 +28,24 @@ class Engine {\n \n   Http::Dispatcher& httpDispatcher();\n \n+  /**\n+   * Flush the stats sinks outside of a flushing interval.\n+   * Note: stats flushing may not be synchronous.\n+   * Therefore, this function may return prior to flushing taking place.\n+   */\n+  void flushStats();\n+\n private:\n   envoy_status_t run(std::string config, std::string log_level);\n \n   envoy_engine_callbacks callbacks_;\n   Thread::MutexBasicLockable mutex_;\n   Thread::CondVar cv_;\n   std::thread main_thread_;\n-  std::unique_ptr<Envoy::Http::Dispatcher> http_dispatcher_;\n-  std::unique_ptr<Envoy::MainCommon> main_common_ GUARDED_BY(mutex_);\n-  Envoy::Server::ServerLifecycleNotifier::HandlePtr postinit_callback_handler_;\n+  std::unique_ptr<Http::Dispatcher> http_dispatcher_;\n+  std::unique_ptr<MainCommon> main_common_ GUARDED_BY(mutex_);\n+  Server::Instance* server_;", "originalCommit": "f2720babe88717df8d11b86bd461d1e0ae51ae4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxMDc2Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/707#discussion_r386710762", "bodyText": "I agree with the long term vision of splitting concerns in the http::dispatcher.\nAnd with the fact that we might not get a flush due to visibility ordering of the server pointer (although, not sure if we should be concerned about a stronger guarantee there?)\nBut I don't think I agree with tacking more on to the http dispatcher. We still need a reference to the Server::Instance somewhere because it is through that interface that we flush stats. I am not sure it makes sense to make the http::dispatcher do that. Because at that point we are really making the http::dispatcher be a kitchen sync.\nI wholeheartedly agree with  Additionally, I think we should limit the surface area of cross-thread interactions just to make it easier to reason about logic and improve safety. And I would like to think how we can do that but without just accumulating everything in the same class.", "author": "junr03", "createdAt": "2020-03-02T23:20:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY5NzcwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyMzI3OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/707#discussion_r386723279", "bodyText": "I get the kitchen sink argument and I covered a little bit more in a slack thread, but I think that routing things through the dispatcher right now will actually make it easier to port things over to a dedicated cross-thread dispatch mechanism later, since everything that needs to be ported in the same place.\nI think my main two concerns remain:\n\nI think there are probably circumstances this can crash.\nI think there's risk in needing to track down unguarded multi-threaded access later when we do clean things up.\n\nWith respect to 2), right now every multi-threaded access does occur right now through a safe mechanism. Exceptional cases like preferred_network are atomic, and primary cases use the core mutexes inside the Dispatcher. This will be the first case of unguarded access to a raw pointer, which I think is something to be avoided in and of itself.\nI'm a bit less worried about (temporary) cruft in the dispatcher, because everything we can clean up once dispatch is split out will be located in one place.", "author": "goaway", "createdAt": "2020-03-02T23:58:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY5NzcwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyOTc0Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/707#discussion_r386729747", "bodyText": "Okay, I think the risks both perspectives cite are probably not that big. I still think there's a chance we could crash due to unsafe access here, but hey, also we might not. Since you're not here to discuss in person @junr03 you get to win this one by default. ;)\nI'm going to file an issue about splitting out a generalized interface for cross-thread access, and this server_ ref can be flagged with that issue.", "author": "goaway", "createdAt": "2020-03-03T00:18:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY5NzcwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczMTU2NQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/707#discussion_r386731565", "bodyText": "#720", "author": "goaway", "createdAt": "2020-03-03T00:24:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY5NzcwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczMTc1Mw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/707#discussion_r386731753", "bodyText": "This was a good discussion to have \ud83d\ude03 I went ahead and linked the issue inline in the code so we can update after", "author": "rebello95", "createdAt": "2020-03-03T00:24:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY5NzcwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkyMTA5MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/707#discussion_r386921091", "bodyText": "Sorry I disappeared, it was late here!\nre: 1 and 2 above.\n\n\nI don't think there is a risk (famous last words) because of the a) weak_ptr semantics that you introduced @goaway,  and b) the engine holding ownership of main_common, which in turn holds ownership of the server object. This means that as long as we are able to lock the engine, we will have a valid server pointer. Right?\n\n\nYep, I think we have probably reached a point with out accesses that we need to straighten things out in a more digestible way. Thanks for filing #720, looking forward to chatting about that when I am back.", "author": "junr03", "createdAt": "2020-03-03T10:17:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY5NzcwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkyMTQzNw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/707#discussion_r386921437", "bodyText": "Thanks for linking the issue inline @rebello95", "author": "junr03", "createdAt": "2020-03-03T10:18:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY5NzcwOA=="}], "type": "inlineReview"}, {"oid": "f36c6cc2b396ea4dae928f954014133f19236c09", "url": "https://github.com/envoyproxy/envoy-mobile/commit/f36c6cc2b396ea4dae928f954014133f19236c09", "message": "link issue\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-03-03T00:23:06Z", "type": "commit"}]}