{"pr_number": 1056, "pr_title": "http dispatcher: serialize all dispatch and state management", "pr_createdAt": "2020-08-27T23:55:14Z", "pr_url": "https://github.com/envoyproxy/envoy-mobile/pull/1056", "timeline": [{"oid": "eab2e04e7712a48e08a4a2374e18b26f5ccc379a", "url": "https://github.com/envoyproxy/envoy-mobile/commit/eab2e04e7712a48e08a4a2374e18b26f5ccc379a", "message": "http dispatcher: serialize all dispatch and state management\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-27T23:37:23Z", "type": "commit"}, {"oid": "0333f5f312c1eb2308589823a1514a88aa18e438", "url": "https://github.com/envoyproxy/envoy-mobile/commit/0333f5f312c1eb2308589823a1514a88aa18e438", "message": "make closed non-atomic\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-27T23:41:11Z", "type": "commit"}, {"oid": "65b0de233ab311b0794ad8231e58d5a3239b7c15", "url": "https://github.com/envoyproxy/envoy-mobile/commit/65b0de233ab311b0794ad8231e58d5a3239b7c15", "message": "remove unneeded comment\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-27T23:55:58Z", "type": "commit"}, {"oid": "dbf918a0f783ae22586efea20ef2b3fc310e4469", "url": "https://github.com/envoyproxy/envoy-mobile/commit/dbf918a0f783ae22586efea20ef2b3fc310e4469", "message": "cleanup and compile tests\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-28T11:27:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0OTY5NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1056#discussion_r479449694", "bodyText": "I still don't understand why this boolean is necessary. Once a stream is pending destroy, it should be gone from the map and the map lookup on stream ID should fail. Can you try to remove this boolean and simplify the logic further?", "author": "mattklein123", "createdAt": "2020-08-28T17:45:52Z", "path": "library/common/http/dispatcher.cc", "diffHunk": "@@ -425,63 +412,31 @@ envoy_status_t Dispatcher::sendTrailers(envoy_stream_t stream, envoy_headers tra\n   return ENVOY_SUCCESS;\n }\n \n-envoy_status_t Dispatcher::resetStream(envoy_stream_t stream) {\n-  // Testing hook.\n-  synchronizer_.syncPoint(\"getStream_on_cancel\");\n-\n-  Dispatcher::DirectStreamSharedPtr direct_stream = getStream(stream);\n-  if (direct_stream) {\n-\n-    // Testing hook.\n-    synchronizer_.syncPoint(\"dispatch_on_cancel\");\n-\n-    // @see Dispatcher::DirectStream::dispatch_lock_ for why this lock is necessary.\n-    Thread::ReleasableLockGuard lock(direct_stream->dispatch_lock_);\n-    if (direct_stream->dispatchable(true)) {\n-      direct_stream->callbacks_->onCancel();\n-      lock.release();\n-      // n.b: this is guarded by the call above. If the onCancel is not dispatchable then that means\n-      // that another terminal callback has already happened. All terminal callbacks clean up stream\n-      // state, so there is no need to dispatch here.\n-      post([this, stream]() -> void {\n-        // TODO: delete once https://github.com/lyft/envoy-mobile/issues/1016 is fixed.\n-        RELEASE_ASSERT(this, \"callback executed after Http::Dispatcher was deleted\");\n-        Dispatcher::checkGarbage(this);\n-        Dispatcher::DirectStreamSharedPtr direct_stream = getStream(stream);\n-        if (direct_stream) {\n-          Dispatcher::checkGarbage(direct_stream.get());\n-          // This interaction is important. The runResetCallbacks call synchronously causes Envoy to\n-          // defer delete the HCM's ActiveStream. That means that the lifetime of the DirectStream\n-          // only needs to be as long as that deferred delete. Therefore, we synchronously call\n-          // cleanup here which will defer delete the DirectStream, which by definition will be\n-          // scheduled **after** the HCM's defer delete as they are scheduled on the same dispatcher\n-          // context.\n-          //\n-          // StreamResetReason::RemoteReset is used as the platform code that issues the\n-          // cancellation is considered the remote.\n-          //\n-          // This call is guarded by hcm_stream_pending_destroy_ to protect against the\n-          // following race condition:\n-          //   1. resetStream executes first on a platform thread, getting through the dispatch\n-          //   guard and posting this lambda.\n-          //   2. The event dispatcher's thread executes a terminal encoding or a reset in the\n-          //   Http::ConnectionManager, thus calling deferredDelete on the ActiveStream.\n-          //   3. The event dispatcher's thread executes this post body, thus calling\n-          //   runResetCallbacks, which ends up calling deferredDelete (for a second time!) on the\n-          //   ActiveStream.\n-          // This protection makes sure that Envoy Mobile's Http::Dispatcher::DirectStream knows\n-          // synchronously when the ActiveStream is deferredDelete'd for the first time.\n-          if (!direct_stream->hcm_stream_pending_destroy_) {\n-            direct_stream->hcm_stream_pending_destroy_ = true;\n-            direct_stream->runResetCallbacks(StreamResetReason::RemoteReset);\n-          }\n-          cleanup(direct_stream->stream_handle_);\n-        }\n-      });\n+envoy_status_t Dispatcher::cancelStream(envoy_stream_t stream) {\n+  post([this, stream]() -> void {\n+    Dispatcher::DirectStreamSharedPtr direct_stream = getStream(stream);\n+    if (direct_stream) {\n+      Dispatcher::checkGarbage(direct_stream.get());\n+      if (direct_stream->dispatchable(true)) {\n+        direct_stream->callbacks_->onCancel();\n+      }\n+      // This interaction is important. The runResetCallbacks call synchronously causes Envoy to\n+      // defer delete the HCM's ActiveStream. That means that the lifetime of the DirectStream\n+      // only needs to be as long as that deferred delete. Therefore, we synchronously call\n+      // cleanup here which will defer delete the DirectStream, which by definition will be\n+      // scheduled **after** the HCM's defer delete as they are scheduled on the same dispatcher\n+      // context.\n+      //\n+      // StreamResetReason::RemoteReset is used as the platform code that issues the\n+      // cancellation is considered the remote.\n+      if (!direct_stream->hcm_stream_pending_destroy_) {\n+        direct_stream->hcm_stream_pending_destroy_ = true;", "originalCommit": "dbf918a0f783ae22586efea20ef2b3fc310e4469", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwNjA4Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1056#discussion_r479506082", "bodyText": "I actually was thinking through whether it was stlil necessary last night. I wasn't 100% convinced it was removable and I erred on the side of changing less, but I'll walk through the paths that use it.", "author": "goaway", "createdAt": "2020-08-28T19:53:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0OTY5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1MDU3NQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1056#discussion_r479450575", "bodyText": "It is extremely difficult to reason about when the stream is removed from the map in various scenarios and with early returns. Per my other comment, can you remove the pending destroy boolean, and change the logic in all of these functions (with a cleanup RAII object, etc. whatever) to a) ASSERT the stream is still in the map, and b) remove it if end_stream/reset in a way that is easy to audit without going through every early return path?", "author": "mattklein123", "createdAt": "2020-08-28T17:47:46Z", "path": "library/common/http/dispatcher.cc", "diffHunk": "@@ -57,16 +57,12 @@ void Dispatcher::DirectStreamCallbacks::encodeHeaders(const ResponseHeaderMap& h\n     // Testing hook.\n     http_dispatcher_.synchronizer_.syncPoint(\"dispatch_encode_headers\");\n \n-    // @see Dispatcher::DirectStream::dispatch_lock_ for why this lock is necessary.\n-    Thread::BasicLockable* mutex = end_stream ? nullptr : &direct_stream_.dispatch_lock_;\n-    Thread::OptionalReleasableLockGuard lock(mutex);\n     if (direct_stream_.dispatchable(end_stream)) {\n       ENVOY_LOG(debug,\n                 \"[S{}] dispatching to platform response headers for stream (end_stream={}):\\n{}\",\n                 direct_stream_.stream_handle_, end_stream, headers);\n       bridge_callbacks_.on_headers(Utility::toBridgeHeaders(headers), end_stream,\n                                    bridge_callbacks_.context);\n-      lock.release();\n       closeRemote(end_stream);", "originalCommit": "dbf918a0f783ae22586efea20ef2b3fc310e4469", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU4MzIyNA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1056#discussion_r479583224", "bodyText": "Per some discussion, we will do additional reworking of the code here to enhance readability in a follow-up PR.", "author": "goaway", "createdAt": "2020-08-29T00:26:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1MDU3NQ=="}], "type": "inlineReview"}, {"oid": "ba77f01701fb0678b55aa3f89b8f63530d8582dc", "url": "https://github.com/envoyproxy/envoy-mobile/commit/ba77f01701fb0678b55aa3f89b8f63530d8582dc", "message": "fix tests\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-28T19:51:53Z", "type": "commit"}, {"oid": "314195892c1fa387b24d625e295fca2056103547", "url": "https://github.com/envoyproxy/envoy-mobile/commit/314195892c1fa387b24d625e295fca2056103547", "message": "Merge branch 'main' into ms/serialize-dispatch\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-28T23:01:16Z", "type": "commit"}, {"oid": "048bd6b8323daf951066dae1b2e8f492efe771a7", "url": "https://github.com/envoyproxy/envoy-mobile/commit/048bd6b8323daf951066dae1b2e8f492efe771a7", "message": "see if this fixes codespell (though the 'iff' was intentional)\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-28T23:24:13Z", "type": "commit"}, {"oid": "e8ccb9b475b3d422f0d07c0015845c48675e63a6", "url": "https://github.com/envoyproxy/envoy-mobile/commit/e8ccb9b475b3d422f0d07c0015845c48675e63a6", "message": "Merge branch 'main' into ms/serialize-dispatch\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-29T01:05:30Z", "type": "commit"}]}