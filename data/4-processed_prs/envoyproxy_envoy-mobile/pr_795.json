{"pr_number": 795, "pr_title": "swift: add L7 platform filter interfaces", "pr_createdAt": "2020-04-09T01:17:15Z", "pr_url": "https://github.com/envoyproxy/envoy-mobile/pull/795", "timeline": [{"oid": "0f8973621dbbab1f3bc64c3a82a1c514a3a321cb", "url": "https://github.com/envoyproxy/envoy-mobile/commit/0f8973621dbbab1f3bc64c3a82a1c514a3a321cb", "message": "wip: swift l7 filters\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-04-09T01:16:44Z", "type": "commit"}, {"oid": "a230fa3dc31af64b4a8e6ce799e69782ca566bf7", "url": "https://github.com/envoyproxy/envoy-mobile/commit/a230fa3dc31af64b4a8e6ce799e69782ca566bf7", "message": "day 2\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-04-09T23:45:22Z", "type": "commit"}, {"oid": "8a4b77f1a3fd5eaac9cda96442a27d7a25108fdf", "url": "https://github.com/envoyproxy/envoy-mobile/commit/8a4b77f1a3fd5eaac9cda96442a27d7a25108fdf", "message": "notes\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-04-10T00:35:43Z", "type": "commit"}, {"oid": "1d7e423d078d77de7e7500946afc590eb58100ea", "url": "https://github.com/envoyproxy/envoy-mobile/commit/1d7e423d078d77de7e7500946afc590eb58100ea", "message": "wip\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-04-18T00:09:55Z", "type": "commit"}, {"oid": "28159f21e4319d156c75b74888a055a7a4e1e623", "url": "https://github.com/envoyproxy/envoy-mobile/commit/28159f21e4319d156c75b74888a055a7a4e1e623", "message": "move files\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-04-20T17:19:13Z", "type": "commit"}, {"oid": "9990f0ab81f282f21039584947a3572a35d1347a", "url": "https://github.com/envoyproxy/envoy-mobile/commit/9990f0ab81f282f21039584947a3572a35d1347a", "message": "Merge remote-tracking branch 'origin/master' into swift-l7\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-04-22T17:47:52Z", "type": "commit"}, {"oid": "25d8ce5f99f9d26a9353e1da994922c3f7d0183e", "url": "https://github.com/envoyproxy/envoy-mobile/commit/25d8ce5f99f9d26a9353e1da994922c3f7d0183e", "message": "Merge remote-tracking branch 'origin/master' into swift-l7\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-04-22T18:54:04Z", "type": "commit"}, {"oid": "cd6a4b028bb2b9a72569ed9074ba0bafcca36300", "url": "https://github.com/envoyproxy/envoy-mobile/commit/cd6a4b028bb2b9a72569ed9074ba0bafcca36300", "message": "Merge remote-tracking branch 'origin/master' into swift-l7", "committedDate": "2020-05-07T23:25:07Z", "type": "commit"}, {"oid": "9d4b761eab17fa4da8f37c5dd7c6f908639e5fb3", "url": "https://github.com/envoyproxy/envoy-mobile/commit/9d4b761eab17fa4da8f37c5dd7c6f908639e5fb3", "message": "updates\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-05-09T00:38:22Z", "type": "commit"}, {"oid": "41b96c147ca45aec76463d7dd0038a64f6fb8d65", "url": "https://github.com/envoyproxy/envoy-mobile/commit/41b96c147ca45aec76463d7dd0038a64f6fb8d65", "message": "updates\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-05-09T00:38:34Z", "type": "commit"}, {"oid": "49d85d70d933867eb452c88194392caf06e7101f", "url": "https://github.com/envoyproxy/envoy-mobile/commit/49d85d70d933867eb452c88194392caf06e7101f", "message": "linters\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-05-09T00:38:38Z", "type": "commit"}, {"oid": "49d85d70d933867eb452c88194392caf06e7101f", "url": "https://github.com/envoyproxy/envoy-mobile/commit/49d85d70d933867eb452c88194392caf06e7101f", "message": "linters\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-05-09T00:38:38Z", "type": "forcePushed"}, {"oid": "ca74481eab8eed96366363582145ba4c5e0bcb1c", "url": "https://github.com/envoyproxy/envoy-mobile/commit/ca74481eab8eed96366363582145ba4c5e0bcb1c", "message": "cleanup\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-05-09T00:46:39Z", "type": "commit"}, {"oid": "c9f463f75fab4104a1a7217c0e6baeb1d4098641", "url": "https://github.com/envoyproxy/envoy-mobile/commit/c9f463f75fab4104a1a7217c0e6baeb1d4098641", "message": "fixes + tests\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-05-11T18:41:19Z", "type": "commit"}, {"oid": "4d1924d928add2c409332d62bc9856cb2d269a33", "url": "https://github.com/envoyproxy/envoy-mobile/commit/4d1924d928add2c409332d62bc9856cb2d269a33", "message": "swiftlint\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-05-11T18:43:44Z", "type": "commit"}, {"oid": "cdf9fffbc76f5fe152b207dbe3a597a1de879a84", "url": "https://github.com/envoyproxy/envoy-mobile/commit/cdf9fffbc76f5fe152b207dbe3a597a1de879a84", "message": "rename status types\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-05-11T19:02:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMDUwMA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/795#discussion_r423320500", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /// If the request is not complete, this filter will still receive `onData()`/`onTrailers()`\n          \n          \n            \n              /// If the request is not complete, the filter will still receive `onData()`/`onTrailers()`", "author": "buildbreaker", "createdAt": "2020-05-11T21:07:55Z", "path": "library/swift/src/RequestFilterCallbacks.swift", "diffHunk": "@@ -0,0 +1,24 @@\n+import Foundation\n+\n+public protocol RequestFilterCallbacks {\n+  /// Continue iterating through the filter chain with buffered headers and body data.\n+  ///\n+  /// This can only be called if the filter has previously returned `stopIteration{...}` from\n+  /// `onHeaders()`/`onData()`/`onTrailers()`.\n+  ///\n+  /// Headers and any buffered body data will be passed to the next filter in the chain.\n+  ///\n+  /// If the request is not complete, this filter will still receive `onData()`/`onTrailers()`", "originalCommit": "cdf9fffbc76f5fe152b207dbe3a597a1de879a84", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMDY2Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/795#discussion_r423320662", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /// - returns: The currently buffered data as buffered by this filter or previous ones in the\n          \n          \n            \n              /// - returns: The currently buffered data as buffered by the filter or previous ones in the", "author": "buildbreaker", "createdAt": "2020-05-11T21:08:14Z", "path": "library/swift/src/RequestFilterCallbacks.swift", "diffHunk": "@@ -0,0 +1,24 @@\n+import Foundation\n+\n+public protocol RequestFilterCallbacks {\n+  /// Continue iterating through the filter chain with buffered headers and body data.\n+  ///\n+  /// This can only be called if the filter has previously returned `stopIteration{...}` from\n+  /// `onHeaders()`/`onData()`/`onTrailers()`.\n+  ///\n+  /// Headers and any buffered body data will be passed to the next filter in the chain.\n+  ///\n+  /// If the request is not complete, this filter will still receive `onData()`/`onTrailers()`\n+  /// calls.\n+  func continueRequest()\n+\n+  /// - returns: The currently buffered data as buffered by this filter or previous ones in the", "originalCommit": "cdf9fffbc76f5fe152b207dbe3a597a1de879a84", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMDA1OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/795#discussion_r423320059", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              func onResponseData(body: Data, endStream: Bool) -> FilterDataStatus\n          \n          \n            \n              func onResponseData(_ body: Data, endStream: Bool) -> FilterDataStatus", "author": "junr03", "createdAt": "2020-05-11T21:07:03Z", "path": "library/swift/src/ResponseFilter.swift", "diffHunk": "@@ -0,0 +1,54 @@\n+import Foundation\n+\n+/// Filter executed for inbound responses, providing the ability to observe and mutate streams.\n+public protocol ResponseFilter: Filter {\n+  /// Called by the filter manager once to initialize the filter callbacks that the filter should\n+  /// use.\n+  ///\n+  /// - parameter callbacks: The callbacks for this filter to use to interact with the chain.\n+  func setResponseFilterCallbacks(callbacks: ResponseFilterCallbacks)\n+\n+  /// Called once when the response is initiated.\n+  ///\n+  /// Filters may mutate or delay the response headers.\n+  ///\n+  /// - parameter headers:   The current response headers.\n+  /// - parameter endStream: Whether this is a headers-only response.\n+  ///\n+  /// - returns: The header status containing headers with which to continue or buffer.\n+  func onResponseHeaders(_ headers: ResponseHeaders, endStream: Bool)\n+    -> FilterHeaderStatus<ResponseHeaders>\n+\n+  /// Called any number of times whenever body data is received.\n+  ///\n+  /// Filters may mutate or buffer (defer and concatenate) the data.\n+  ///\n+  /// - parameter body:      The outbound body data chunk.\n+  /// - parameter endStream: Whether this is the last data frame.\n+  ///\n+  /// - returns: The data status containing body with which to continue or buffer.\n+  func onResponseData(body: Data, endStream: Bool) -> FilterDataStatus", "originalCommit": "cdf9fffbc76f5fe152b207dbe3a597a1de879a84", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMDEyNQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/795#discussion_r423320125", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              func onResponseTrailers(trailers: ResponseTrailers) -> FilterTrailerStatus<ResponseTrailers>\n          \n          \n            \n              func onResponseTrailers(_ trailers: ResponseTrailers) -> FilterTrailerStatus<ResponseTrailers>", "author": "junr03", "createdAt": "2020-05-11T21:07:11Z", "path": "library/swift/src/ResponseFilter.swift", "diffHunk": "@@ -0,0 +1,54 @@\n+import Foundation\n+\n+/// Filter executed for inbound responses, providing the ability to observe and mutate streams.\n+public protocol ResponseFilter: Filter {\n+  /// Called by the filter manager once to initialize the filter callbacks that the filter should\n+  /// use.\n+  ///\n+  /// - parameter callbacks: The callbacks for this filter to use to interact with the chain.\n+  func setResponseFilterCallbacks(callbacks: ResponseFilterCallbacks)\n+\n+  /// Called once when the response is initiated.\n+  ///\n+  /// Filters may mutate or delay the response headers.\n+  ///\n+  /// - parameter headers:   The current response headers.\n+  /// - parameter endStream: Whether this is a headers-only response.\n+  ///\n+  /// - returns: The header status containing headers with which to continue or buffer.\n+  func onResponseHeaders(_ headers: ResponseHeaders, endStream: Bool)\n+    -> FilterHeaderStatus<ResponseHeaders>\n+\n+  /// Called any number of times whenever body data is received.\n+  ///\n+  /// Filters may mutate or buffer (defer and concatenate) the data.\n+  ///\n+  /// - parameter body:      The outbound body data chunk.\n+  /// - parameter endStream: Whether this is the last data frame.\n+  ///\n+  /// - returns: The data status containing body with which to continue or buffer.\n+  func onResponseData(body: Data, endStream: Bool) -> FilterDataStatus\n+\n+  /// Called at most once when the response is closed from the server with trailers.\n+  ///\n+  /// Filters may mutate or delay the trailers.\n+  ///\n+  /// - parameter trailers: The outbound trailers.\n+  ///\n+  /// - returns: The trailer status containing body with which to continue or buffer.\n+  func onResponseTrailers(trailers: ResponseTrailers) -> FilterTrailerStatus<ResponseTrailers>", "originalCommit": "cdf9fffbc76f5fe152b207dbe3a597a1de879a84", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMDIxNA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/795#discussion_r423320214", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              func onError(error: EnvoyError)\n          \n          \n            \n              func onError(_ error: EnvoyError)", "author": "junr03", "createdAt": "2020-05-11T21:07:22Z", "path": "library/swift/src/ResponseFilter.swift", "diffHunk": "@@ -0,0 +1,54 @@\n+import Foundation\n+\n+/// Filter executed for inbound responses, providing the ability to observe and mutate streams.\n+public protocol ResponseFilter: Filter {\n+  /// Called by the filter manager once to initialize the filter callbacks that the filter should\n+  /// use.\n+  ///\n+  /// - parameter callbacks: The callbacks for this filter to use to interact with the chain.\n+  func setResponseFilterCallbacks(callbacks: ResponseFilterCallbacks)\n+\n+  /// Called once when the response is initiated.\n+  ///\n+  /// Filters may mutate or delay the response headers.\n+  ///\n+  /// - parameter headers:   The current response headers.\n+  /// - parameter endStream: Whether this is a headers-only response.\n+  ///\n+  /// - returns: The header status containing headers with which to continue or buffer.\n+  func onResponseHeaders(_ headers: ResponseHeaders, endStream: Bool)\n+    -> FilterHeaderStatus<ResponseHeaders>\n+\n+  /// Called any number of times whenever body data is received.\n+  ///\n+  /// Filters may mutate or buffer (defer and concatenate) the data.\n+  ///\n+  /// - parameter body:      The outbound body data chunk.\n+  /// - parameter endStream: Whether this is the last data frame.\n+  ///\n+  /// - returns: The data status containing body with which to continue or buffer.\n+  func onResponseData(body: Data, endStream: Bool) -> FilterDataStatus\n+\n+  /// Called at most once when the response is closed from the server with trailers.\n+  ///\n+  /// Filters may mutate or delay the trailers.\n+  ///\n+  /// - parameter trailers: The outbound trailers.\n+  ///\n+  /// - returns: The trailer status containing body with which to continue or buffer.\n+  func onResponseTrailers(trailers: ResponseTrailers) -> FilterTrailerStatus<ResponseTrailers>\n+\n+  /// Called at most once when an error within Envoy occurs.\n+  ///\n+  /// This should be considered a terminal state, and invalidates any previous attempts to\n+  /// `stopIteration{...}`.\n+  ///\n+  /// - error: The error that occurred within Envoy.\n+  func onError(error: EnvoyError)", "originalCommit": "cdf9fffbc76f5fe152b207dbe3a597a1de879a84", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMDQ1MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/795#discussion_r423320451", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              func responseBuffer() -> Data\n          \n          \n            \n              func responseBuffer() -> Data?\n          \n      \n    \n    \n  \n\nBecause it can be nil, right?", "author": "junr03", "createdAt": "2020-05-11T21:07:49Z", "path": "library/swift/src/ResponseFilterCallbacks.swift", "diffHunk": "@@ -0,0 +1,24 @@\n+import Foundation\n+\n+public protocol ResponseFilterCallbacks {\n+  /// Continue iterating through the filter chain with buffered headers and body data.\n+  ///\n+  /// This can only be called if the filter has previously returned `stopIteration{...}` from\n+  /// `onHeaders()`/`onData()`/`onTrailers()`.\n+  ///\n+  /// Headers and any buffered body data will be passed to the next filter in the chain.\n+  ///\n+  /// If the response is not complete, this filter will still receive `onData()`/`onTrailers()`\n+  /// calls.\n+  func continueResponse()\n+\n+  /// - returns: The currently buffered data as buffered by this filter or previous ones in the\n+  ///            filter chain. Nil if nothing has been buffered yet.\n+  func responseBuffer() -> Data", "originalCommit": "cdf9fffbc76f5fe152b207dbe3a597a1de879a84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjg2Ng==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/795#discussion_r423322866", "bodyText": "Yep", "author": "rebello95", "createdAt": "2020-05-11T21:12:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMDQ1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMTA0NQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/795#discussion_r423321045", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /// If the response is not complete, this filter will still receive `onData()`/`onTrailers()`\n          \n          \n            \n              /// If the response is not complete, the filter will still receive `onData()`/`onTrailers()`", "author": "buildbreaker", "createdAt": "2020-05-11T21:08:59Z", "path": "library/swift/src/ResponseFilterCallbacks.swift", "diffHunk": "@@ -0,0 +1,24 @@\n+import Foundation\n+\n+public protocol ResponseFilterCallbacks {\n+  /// Continue iterating through the filter chain with buffered headers and body data.\n+  ///\n+  /// This can only be called if the filter has previously returned `stopIteration{...}` from\n+  /// `onHeaders()`/`onData()`/`onTrailers()`.\n+  ///\n+  /// Headers and any buffered body data will be passed to the next filter in the chain.\n+  ///\n+  /// If the response is not complete, this filter will still receive `onData()`/`onTrailers()`", "originalCommit": "cdf9fffbc76f5fe152b207dbe3a597a1de879a84", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMTEyNw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/795#discussion_r423321127", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /// - returns: The currently buffered data as buffered by this filter or previous ones in the\n          \n          \n            \n              /// - returns: The currently buffered data as buffered by the filter or previous ones in the", "author": "buildbreaker", "createdAt": "2020-05-11T21:09:09Z", "path": "library/swift/src/ResponseFilterCallbacks.swift", "diffHunk": "@@ -0,0 +1,24 @@\n+import Foundation\n+\n+public protocol ResponseFilterCallbacks {\n+  /// Continue iterating through the filter chain with buffered headers and body data.\n+  ///\n+  /// This can only be called if the filter has previously returned `stopIteration{...}` from\n+  /// `onHeaders()`/`onData()`/`onTrailers()`.\n+  ///\n+  /// Headers and any buffered body data will be passed to the next filter in the chain.\n+  ///\n+  /// If the response is not complete, this filter will still receive `onData()`/`onTrailers()`\n+  /// calls.\n+  func continueResponse()\n+\n+  /// - returns: The currently buffered data as buffered by this filter or previous ones in the", "originalCommit": "cdf9fffbc76f5fe152b207dbe3a597a1de879a84", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2413226162a2e7ac510059d1e73e1415dc6b0bed", "url": "https://github.com/envoyproxy/envoy-mobile/commit/2413226162a2e7ac510059d1e73e1415dc6b0bed", "message": "CR\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-05-11T21:14:53Z", "type": "commit"}]}