{"pr_number": 1037, "pr_title": "crashes: get more granularity on potential crash", "pr_createdAt": "2020-08-14T22:48:42Z", "pr_url": "https://github.com/envoyproxy/envoy-mobile/pull/1037", "timeline": [{"oid": "13304532eff8e9979740b52751cb0579322b7047", "url": "https://github.com/envoyproxy/envoy-mobile/commit/13304532eff8e9979740b52751cb0579322b7047", "message": "crashes: get more granularity on potential crash\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-08-14T22:35:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwNTY4Mw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1037#discussion_r470905683", "bodyText": "I'm okay moving forward with this to see what we see, but I still feel a little bit that a more robust approach, at least in the case of the dispatcher, would be to have the state be unowned by the dispatcher and be updated as a side-effect of destruction.", "author": "goaway", "createdAt": "2020-08-14T23:38:29Z", "path": "library/common/http/dispatcher.cc", "diffHunk": "@@ -243,6 +243,8 @@ Dispatcher::DirectStream::DirectStream(envoy_stream_t stream_handle, Dispatcher&\n \n Dispatcher::DirectStream::~DirectStream() {\n   ENVOY_LOG(debug, \"[S{}] destroy stream\", stream_handle_);\n+  // TODO: delete once https://github.com/lyft/envoy-mobile/issues/1016 is fixed.\n+  destroyed_ = true;", "originalCommit": "13304532eff8e9979740b52751cb0579322b7047", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwNjU3OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1037#discussion_r470906579", "bodyText": "Yeah, per our offline conversation that would definitely give us access to the state. But I believe that the static function indirection will provide us the stacktrace if the crash is indeed due to that garbage pointer. The state itself is not necessary. My worry was that the compiler might optimize away an empty function.\nLets see what we see with this and we can adapt after. Obviously this is throwaway code anyways.", "author": "junr03", "createdAt": "2020-08-14T23:43:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwNTY4Mw=="}], "type": "inlineReview"}]}