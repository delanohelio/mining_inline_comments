{"pr_number": 1197, "pr_title": "python: create python bindings stub", "pr_createdAt": "2020-12-04T20:59:25Z", "pr_url": "https://github.com/envoyproxy/envoy-mobile/pull/1197", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5MTM1NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r536391354", "bodyText": "Having envoy_mobile in the path seems a little bit funky. Could this be pybind or cc_platform?\nAlso maybe the cc_library belongs in //library/cc and just the pybind_extension should go here.", "author": "goaway", "createdAt": "2020-12-04T21:31:25Z", "path": "library/python/envoy_mobile/BUILD", "diffHunk": "@@ -0,0 +1,49 @@\n+load(\"@pybind11_bazel//:build_defs.bzl\", \"pybind_extension\")", "originalCommit": "081f9bf2bcf9907eac7f140f0ed81a8e24005548", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5NDgyNA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r536394824", "bodyText": "original naming scheme was just trying to match up folder name w/ how it would be imported in python. right now the .so built from //library/python/envoy_mobile:envoy_mobile.so can just be imported from python as import envoy_mobile, which would be canonical naming scheme\nthere's nothing keeping the .so name and the dir name coupled, though, so i'm happy to change it to whatever", "author": "crockeo", "createdAt": "2020-12-04T21:39:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5MTM1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5MTg0Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r536391847", "bodyText": "I don't know that we should necessarily have this, since it's basically where we'd want to plug in native python dispatch. I mean, it is a flexible and pretty agnostic interface, but does it really align with python based dispatch mechanisms?", "author": "goaway", "createdAt": "2020-12-04T21:32:30Z", "path": "library/python/envoy_mobile/executor.h", "diffHunk": "@@ -0,0 +1,11 @@\n+#pragma once\n+\n+#include <functional>\n+\n+\n+class Executor {", "originalCommit": "081f9bf2bcf9907eac7f140f0ed81a8e24005548", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5MzUzMQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r536393531", "bodyText": "it's necessary to have a type defined in C++ for the C++ side of the lib to interact with it, e.g. to call into it from on_XXX. in practice this is going to work like: executor_base.h being implemented by something akin to asyncio_executor.py or gevent_executor.py inside of Python", "author": "crockeo", "createdAt": "2020-12-04T21:36:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5MTg0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwMjEwNg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r536402106", "bodyText": "Okay, cool - if it's directly supported with gevent/asyncio (and the \"right\" way to integrate) then that's totally fine.", "author": "goaway", "createdAt": "2020-12-04T21:51:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5MTg0Nw=="}], "type": "inlineReview"}, {"oid": "1d953195c130730c7aedb0b4481a903cc4486aae", "url": "https://github.com/envoyproxy/envoy-mobile/commit/1d953195c130730c7aedb0b4481a903cc4486aae", "message": "impl python platform stub, this time with signing\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2020-12-05T01:30:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzczODQ0NQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r537738445", "bodyText": "make this const std::string&", "author": "crockeo", "createdAt": "2020-12-07T18:40:08Z", "path": "library/cc/headers_builder.h", "diffHunk": "@@ -0,0 +1,19 @@\n+#pragma once\n+\n+#include \"headers.h\"\n+\n+class HeadersBuilder {\n+public:\n+  HeadersBuilder& add(const std::string& name, std::string& value);", "originalCommit": "ad439322ff929ab226f5b5ce4054077eae2ae908", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzczODU4OA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r537738588", "bodyText": "LogLeve -> LogLevel", "author": "crockeo", "createdAt": "2020-12-07T18:40:25Z", "path": "library/cc/log_level.h", "diffHunk": "@@ -0,0 +1,32 @@\n+#pragma once\n+\n+#include <string>\n+\n+/**\n+ * See: https://pybind11.readthedocs.io/en/stable/classes.html#enumerations-and-internal-types\n+ * this set up will let Python see:\n+ *\n+ * LogLevel.Trace = the enum value\n+ * LogLevel.to_string(LogLeve.Trace) = the string value", "originalCommit": "ad439322ff929ab226f5b5ce4054077eae2ae908", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzczODYyOQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r537738629", "bodyText": "static", "author": "crockeo", "createdAt": "2020-12-07T18:40:31Z", "path": "library/cc/log_level.h", "diffHunk": "@@ -0,0 +1,32 @@\n+#pragma once\n+\n+#include <string>\n+\n+/**\n+ * See: https://pybind11.readthedocs.io/en/stable/classes.html#enumerations-and-internal-types\n+ * this set up will let Python see:\n+ *\n+ * LogLevel.Trace = the enum value\n+ * LogLevel.to_string(LogLeve.Trace) = the string value\n+ *\n+ * But it's not actually constructible bc of the private constructor (this may not work in practice,\n+ * as pybind11 may require that there is a public constructor for py::init)\n+ */\n+class LogLevel {\n+public:\n+  enum _LogLevel {\n+    Trace,\n+    Debug,\n+    Info,\n+    Warn,\n+    Error,\n+    Critical,\n+    Off,\n+  };\n+\n+  _LogLevel from_string(std::string log_level);", "originalCommit": "ad439322ff929ab226f5b5ce4054077eae2ae908", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzczOTQyMg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r537739422", "bodyText": "this can probably just be const std::string& and avoid copying strings here, same for the rest of them", "author": "crockeo", "createdAt": "2020-12-07T18:41:43Z", "path": "library/cc/request_headers.h", "diffHunk": "@@ -0,0 +1,26 @@\n+#pragma once\n+\n+#include <optional>\n+\n+#include \"headers.h\"\n+#include \"request_headers_builder.h\"\n+#include \"request_method.h\"\n+#include \"retry_policy.h\"\n+#include \"upstream_http_protocol.h\"\n+\n+class RequestHeaders : public Headers {\n+public:\n+  RequestMethod request_method() const;\n+  std::string scheme() const;", "originalCommit": "ad439322ff929ab226f5b5ce4054077eae2ae908", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc0MDEzNQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r537740135", "bodyText": "C++ question:\n\n\ndo I even need this, or will inheritance automatically allow subclasses to have the superclass's implementation?\n\n\ni have a feeling that this will return a HeadersBuilder& instead of a RequestHeadersBuilder&, is that right?", "author": "crockeo", "createdAt": "2020-12-07T18:42:52Z", "path": "library/cc/request_headers_builder.h", "diffHunk": "@@ -0,0 +1,30 @@\n+#pragma once\n+\n+#include <string>\n+\n+#include \"headers_builder.h\"\n+#include \"request_headers.h\"\n+#include \"request_method.h\"\n+#include \"retry_policy.h\"\n+#include \"upstream_http_protocol.h\"\n+\n+class RequestHeaders;\n+\n+class RequestHeadersBuilder : public HeadersBuilder {\n+public:\n+  RequestHeadersBuilder(RequestMethod::_RequestMethod request_method, const std::string& scheme,\n+                        const std::string& authority, const std::string& path);\n+\n+  using HeadersBuilder::add;", "originalCommit": "ad439322ff929ab226f5b5ce4054077eae2ae908", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ3MDUwOA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r540470508", "bodyText": "Subclasses will indeed inherit their superclasses' interface/implementations.", "author": "goaway", "createdAt": "2020-12-10T20:21:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc0MDEzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc0MTM2NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r537741364", "bodyText": "it could be more performant to put this directly into an already-existing RawHeaders instance, or otherwise just add headers to a HeadersBuilder reference, but the API wouldn't be nearly as nice", "author": "crockeo", "createdAt": "2020-12-07T18:44:47Z", "path": "library/cc/retry_policy.h", "diffHunk": "@@ -0,0 +1,36 @@\n+#pragma once\n+\n+#include \"headers.h\"\n+#include \"request_headers.h\"\n+\n+class RequestHeaders;\n+\n+class RetryRule {\n+public:\n+  enum _RetryRule {\n+    Status5xx,\n+    GatewayFailure,\n+    ConnectFailure,\n+    RefusedStream,\n+    Retriable4xx,\n+    RetriableHeaders,\n+    Reset,\n+  };\n+\n+  static _RetryRule from_string(std::string retry_rule);\n+  static std::string to_string(_RetryRule retry_rule);\n+\n+private:\n+  RetryRule() {}\n+};\n+\n+struct RetryPolicy {\n+  int max_retry_count;\n+  int retry_on;\n+  std::vector<int> retry_status_codes;\n+  int per_try_timeout_ms;\n+  int total_upstream_timeout_ms;\n+\n+  RawHeaders output_headers() const;", "originalCommit": "ad439322ff929ab226f5b5ce4054077eae2ae908", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU2NzAwNA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r540567004", "bodyText": "resolving this for now bc it's a perf issue that we can figure out later", "author": "crockeo", "createdAt": "2020-12-10T23:07:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc0MTM2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc0MjU3Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r537742572", "bodyText": "i've been futzing around in rust-land where i get to feel comfortable about reference lifetimes. this isn't really safe per se, but its lifetime will be articulated in a pybind11::keep_alive on the python obj definition", "author": "crockeo", "createdAt": "2020-12-07T18:46:40Z", "path": "library/cc/stream_callbacks.h", "diffHunk": "@@ -0,0 +1,34 @@\n+#pragma once\n+\n+#include <cstddef>\n+#include <optional>\n+#include <vector>\n+\n+#include \"envoy_error.h\"\n+#include \"executor.h\"\n+#include \"response_headers.h\"\n+#include \"response_trailers.h\"\n+\n+using OnHeadersCallback = std::function<void(ResponseHeaders headers, bool end_stream)>;\n+using OnDataCallback = std::function<void(std::vector<std::byte> data, bool end_stream)>;\n+using OnTrailersCallback = std::function<void(ResponseTrailers trailers)>;\n+using OnCancelCallback = std::function<void()>;\n+using OnErrorCallback = std::function<void(EnvoyError error)>;\n+\n+struct StreamCallbacks {\n+  std::optional<OnHeadersCallback> on_headers;\n+  std::optional<OnDataCallback> on_data;\n+  std::optional<OnTrailersCallback> on_trailers;\n+  std::optional<OnCancelCallback> on_cancel;\n+  std::optional<OnErrorCallback> on_error;\n+};\n+\n+class EnvoyHttpCallbacksAdapter {\n+public:\n+  EnvoyHttpCallbacksAdapter(Executor executor, StreamCallbacks callbacks);\n+\n+private:\n+  // TODO(crockeo): figure out lifecycle management here\n+  Executor& executor_;", "originalCommit": "ad439322ff929ab226f5b5ce4054077eae2ae908", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc1MTc4MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r539751781", "bodyText": "You could use std::weak_ptr for a stronger guarantee. Or even just a shared_ptr to ensure its lifetime.", "author": "goaway", "createdAt": "2020-12-10T00:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc0MjU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI4MzA5Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r540283097", "bodyText": "the best case scenario for this is that someone in python land creates and then immediately moves ownership of the Executor into the C++ codebase. i'm not sure that we can enforce move semantics in python, though, so that may be a moot attempt.\ni'd say let's use std::unique_ptr for now to represent the ideal world and then we can backtrack into whatever ends up working (probably a std::weak_ptr or std::shared_ptr", "author": "crockeo", "createdAt": "2020-12-10T15:54:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc0MjU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3MzM5MA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r540373390", "bodyText": "In other words, there is nothing special that needs to be done. While returning unique pointers in this way is allowed, it is illegal to use them as function arguments. For instance, the following function signature cannot be processed by pybind11.\n\nfrom pybind11 docs\nlooks like we're going to have to use shared_ptrs", "author": "crockeo", "createdAt": "2020-12-10T17:48:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc0MjU3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc0MzAxOA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r537743018", "bodyText": "use callback types here to make sure they stay the same", "author": "crockeo", "createdAt": "2020-12-07T18:47:21Z", "path": "library/cc/stream_prototype.h", "diffHunk": "@@ -0,0 +1,34 @@\n+#pragma once\n+\n+#include <cstddef>\n+#include <functional>\n+\n+#include \"engine.h\"\n+#include \"envoy_error.h\"\n+#include \"executor.h\"\n+#include \"response_headers.h\"\n+#include \"response_trailers.h\"\n+#include \"stream.h\"\n+#include \"stream_callbacks.h\"\n+\n+class Engine;\n+\n+class StreamPrototype {\n+public:\n+  StreamPrototype(Engine engine);\n+\n+  Stream start(Executor executor);\n+\n+  StreamPrototype& set_on_response_headers(\n+      std::function<void(const ResponseHeaders& headers, bool end_stream)> closure);\n+  StreamPrototype& set_on_response_data(\n+      std::function<void(const std::vector<std::byte>& bytes, bool end_stream)> closure);\n+  StreamPrototype&\n+  set_on_response_trailers(std::function<void(const ResponseTrailers& trailers)> closure);\n+  StreamPrototype& set_on_error(std::function<void(const EnvoyError& error)> closure);\n+  StreamPrototype& set_on_cancel(std::function<void()> closure);", "originalCommit": "ad439322ff929ab226f5b5ce4054077eae2ae908", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc0Njk5Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r537746992", "bodyText": "rm this build file", "author": "crockeo", "createdAt": "2020-12-07T18:53:34Z", "path": "library/python/envoy_mobile/BUILD", "diffHunk": "@@ -0,0 +1,49 @@\n+load(\"@pybind11_bazel//:build_defs.bzl\", \"pybind_extension\")", "originalCommit": "ad439322ff929ab226f5b5ce4054077eae2ae908", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc1NDU1Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r539754552", "bodyText": "Is there an Envoy enum we can leverage for this?", "author": "goaway", "createdAt": "2020-12-10T00:36:52Z", "path": "library/cc/log_level.h", "diffHunk": "@@ -0,0 +1,11 @@\n+#pragma once\n+\n+enum LogLevel {\n+  Trace,\n+  Debug,\n+  Info,\n+  Warn,\n+  Error,\n+  Critical,\n+  Off,\n+};", "originalCommit": "0598b4d9361f339ec0e4ead58d52bca8f758f8c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc1NDY4NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r539754684", "bodyText": "Here, too, I'd look to just use an Envoy-defined enum, I think.", "author": "goaway", "createdAt": "2020-12-10T00:37:13Z", "path": "library/cc/request_method.h", "diffHunk": "@@ -0,0 +1,12 @@\n+#pragma once\n+\n+enum RequestMethod {", "originalCommit": "0598b4d9361f339ec0e4ead58d52bca8f758f8c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc1Njc4Ng==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r539756786", "bodyText": "Is there a pybind reason to use this buffer representation? If not, I'd propose we use uint8_t (which Envoy currently uses internally) and probably just simple arrays.", "author": "goaway", "createdAt": "2020-12-10T00:42:25Z", "path": "library/cc/stream.h", "diffHunk": "@@ -0,0 +1,22 @@\n+#pragma once\n+\n+#include <cstddef>\n+#include <vector>\n+\n+#include \"library/common/types/c_types.h\"\n+#include \"request_headers.h\"\n+#include \"request_trailers.h\"\n+\n+class Stream {\n+public:\n+  Stream(envoy_stream_t handle);\n+\n+  Stream& send_headers(const RequestHeaders& headers, bool end_stream);\n+  Stream& send_data(const std::vector<std::byte>& data);", "originalCommit": "0598b4d9361f339ec0e4ead58d52bca8f758f8c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI2ODQxMQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r540268411", "bodyText": "there is not, i'll use uint8_t.", "author": "crockeo", "createdAt": "2020-12-10T15:36:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc1Njc4Ng=="}], "type": "inlineReview"}, {"oid": "df9b1fc1fdc76b8f8276677aa17e29c33641b169", "url": "https://github.com/envoyproxy/envoy-mobile/commit/df9b1fc1fdc76b8f8276677aa17e29c33641b169", "message": "impl python platform stub, this time with signing\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2020-12-11T15:19:14Z", "type": "commit"}, {"oid": "1cb7148788dfd416248ab389199103a5966835c8", "url": "https://github.com/envoyproxy/envoy-mobile/commit/1cb7148788dfd416248ab389199103a5966835c8", "message": "renaming in accordance w/ comments\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2020-12-11T15:19:14Z", "type": "commit"}, {"oid": "e6eecfd75e9aefefa90e026a141059b114b0d3a2", "url": "https://github.com/envoyproxy/envoy-mobile/commit/e6eecfd75e9aefefa90e026a141059b114b0d3a2", "message": "clang-format on cc lib\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2020-12-11T15:19:14Z", "type": "commit"}, {"oid": "8ac531e5de5b55f8c79d5e3b1461a8a5edc39268", "url": "https://github.com/envoyproxy/envoy-mobile/commit/8ac531e5de5b55f8c79d5e3b1461a8a5edc39268", "message": "my own comments\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2020-12-11T15:19:14Z", "type": "commit"}, {"oid": "6211e5135b1385795ed35d5ab08d83cff54b5194", "url": "https://github.com/envoyproxy/envoy-mobile/commit/6211e5135b1385795ed35d5ab08d83cff54b5194", "message": "make executor trampoline...and then made a couple more todos\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2020-12-11T15:19:14Z", "type": "commit"}, {"oid": "d99971362c1b0d2d26ef94b8e7353a6958afafd3", "url": "https://github.com/envoyproxy/envoy-mobile/commit/d99971362c1b0d2d26ef94b8e7353a6958afafd3", "message": "impl enums\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2020-12-11T15:19:14Z", "type": "commit"}, {"oid": "7f961be0f0bfba2cfb5acd1bad542753df2e6613", "url": "https://github.com/envoyproxy/envoy-mobile/commit/7f961be0f0bfba2cfb5acd1bad542753df2e6613", "message": "cont stubs\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2020-12-11T15:19:14Z", "type": "commit"}, {"oid": "2932ac2730773cf38e82b889a27b3a0c667c0b2b", "url": "https://github.com/envoyproxy/envoy-mobile/commit/2932ac2730773cf38e82b889a27b3a0c667c0b2b", "message": "move over to shared ptrs\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2020-12-11T15:19:14Z", "type": "commit"}, {"oid": "c82ed336d26480fbfe059ec1726b3a3cc6e66935", "url": "https://github.com/envoyproxy/envoy-mobile/commit/c82ed336d26480fbfe059ec1726b3a3cc6e66935", "message": "unify headers-like interface\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2020-12-11T15:19:14Z", "type": "commit"}, {"oid": "1f6789521598955425ffdb65236c1bf148dc9fc7", "url": "https://github.com/envoyproxy/envoy-mobile/commit/1f6789521598955425ffdb65236c1bf148dc9fc7", "message": "get rid of log level in favor of envoy type\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2020-12-11T15:19:14Z", "type": "commit"}, {"oid": "f79932503366033cf915fd696d225c03f8a1b7c4", "url": "https://github.com/envoyproxy/envoy-mobile/commit/f79932503366033cf915fd696d225c03f8a1b7c4", "message": "exactly 1 missing word\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2020-12-11T15:19:14Z", "type": "commit"}, {"oid": "a9f06b4da2d97daa766cbb0d39a28836eb9e30bc", "url": "https://github.com/envoyproxy/envoy-mobile/commit/a9f06b4da2d97daa766cbb0d39a28836eb9e30bc", "message": "replace bytes with uint8_t...and also catch places where i had still imported log_level\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2020-12-11T15:19:14Z", "type": "commit"}, {"oid": "50d29d2b8169dcad2a724382ebb93d33b10911e1", "url": "https://github.com/envoyproxy/envoy-mobile/commit/50d29d2b8169dcad2a724382ebb93d33b10911e1", "message": "check-format\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2020-12-11T15:19:14Z", "type": "commit"}, {"oid": "50d29d2b8169dcad2a724382ebb93d33b10911e1", "url": "https://github.com/envoyproxy/envoy-mobile/commit/50d29d2b8169dcad2a724382ebb93d33b10911e1", "message": "check-format\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2020-12-11T15:19:14Z", "type": "forcePushed"}, {"oid": "b430f8832101589466aa5bdc4ba08e159743b6b3", "url": "https://github.com/envoyproxy/envoy-mobile/commit/b430f8832101589466aa5bdc4ba08e159743b6b3", "message": "Merge branch 'main' into ch/python-bindings-stub", "committedDate": "2020-12-11T17:26:36Z", "type": "commit"}, {"oid": "c75b746110231cbc33483207fbc0e3c7d58049bb", "url": "https://github.com/envoyproxy/envoy-mobile/commit/c75b746110231cbc33483207fbc0e3c7d58049bb", "message": "one last API change + fix the build from check_format\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2020-12-11T19:46:38Z", "type": "commit"}, {"oid": "6324d96459de11fe384fca8b19838a9e95117cdb", "url": "https://github.com/envoyproxy/envoy-mobile/commit/6324d96459de11fe384fca8b19838a9e95117cdb", "message": "add @envoy prefix to more places\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>", "committedDate": "2020-12-11T19:57:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUyMjIxMQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r546522211", "bodyText": "After thinking about this a bit, I think we should switch to using envoy_data directly in this implementation to represent buffers. Python's buffer protocol doesn't deal in vectors, nor do any buffer representations in Envoy. We've already have a bridge implementation of Envoy's internal buffer type defined in terms of envoy_data. It seems like using vectors will just result in extra indirection, and potentially, copies.", "author": "goaway", "createdAt": "2020-12-21T05:56:07Z", "path": "library/cc/stream.h", "diffHunk": "@@ -0,0 +1,25 @@\n+#pragma once\n+\n+// NOLINT(namespace-envoy)\n+\n+#include <vector>\n+\n+#include \"library/common/types/c_types.h\"\n+#include \"request_headers.h\"\n+#include \"request_trailers.h\"\n+\n+class Stream {\n+public:\n+  Stream(envoy_stream_t handle);\n+\n+  Stream& send_headers(RequestHeadersSharedPtr headers, bool end_stream);\n+  Stream& send_data(const std::vector<uint8_t>& data);", "originalCommit": "6324d96459de11fe384fca8b19838a9e95117cdb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUyMzY0NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r546523644", "bodyText": "Let's namespace everything in these files. Envoy::Mobile, Envoy::Platform, Envoy::Lib/rary all seem like reasonable candidates to me.", "author": "goaway", "createdAt": "2020-12-21T06:01:50Z", "path": "library/cc/engine.h", "diffHunk": "@@ -0,0 +1,29 @@\n+#pragma once\n+\n+// NOLINT(namespace-envoy)", "originalCommit": "6324d96459de11fe384fca8b19838a9e95117cdb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}