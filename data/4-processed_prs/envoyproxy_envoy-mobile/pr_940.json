{"pr_number": 940, "pr_title": "filters: add initial support for bridged filters", "pr_createdAt": "2020-07-07T03:07:15Z", "pr_url": "https://github.com/envoyproxy/envoy-mobile/pull/940", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxODI3Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451018272", "bodyText": "Is this still true?", "author": "rebello95", "createdAt": "2020-07-07T17:11:25Z", "path": "library/common/api/external.h", "diffHunk": "@@ -0,0 +1,22 @@\n+#pragma once\n+\n+#include <string>\n+\n+namespace Envoy {\n+namespace Api {\n+namespace External {\n+\n+/**\n+ * Register an external runtime API for usage (most likely in extensions).\n+ * NOTE: This is a proof of concept implementation and a HACK. Registration is NOT thread-safe.", "originalCommit": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxNzY1OA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451317658", "bodyText": "Yes, but improvement will come in a separate PR (see below).", "author": "goaway", "createdAt": "2020-07-08T06:44:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxODI3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxODUxMw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451018513", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //#include <iostream>", "author": "rebello95", "createdAt": "2020-07-07T17:11:51Z", "path": "library/common/extensions/filters/http/platform_extension/bridging_filter.cc", "diffHunk": "@@ -0,0 +1,115 @@\n+#include \"library/common/extensions/filters/http/platform_extension/bridging_filter.h\"\n+\n+//#include <iostream>", "originalCommit": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxNjg2Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451316867", "bodyText": "Thanks. :)", "author": "goaway", "createdAt": "2020-07-08T06:42:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxODUxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxOTE1MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451019151", "bodyText": "Isn't this coming from the core layer, not the platform layer? Also {} is missing the format value I believe", "author": "rebello95", "createdAt": "2020-07-07T17:12:55Z", "path": "library/common/extensions/filters/http/platform_extension/bridging_filter.cc", "diffHunk": "@@ -0,0 +1,115 @@\n+#include \"library/common/extensions/filters/http/platform_extension/bridging_filter.h\"\n+\n+//#include <iostream>\n+\n+#include \"envoy/server/filter_config.h\"\n+\n+#include \"common/common/assert.h\"\n+#include \"common/common/utility.h\"\n+\n+#include \"library/common/api/external.h\"\n+#include \"library/common/buffer/utility.h\"\n+#include \"library/common/http/header_utility.h\"\n+\n+namespace Envoy {\n+namespace Extensions {\n+namespace HttpFilters {\n+namespace PlatformExtension {\n+\n+Http::FilterHeadersStatus mapStatus(envoy_filter_headers_status_t status) {\n+  switch (status) {\n+  case ENVOY_FILTER_HEADERS_STATUS_CONTINUE:\n+    return Http::FilterHeadersStatus::Continue;\n+  case ENVOY_FILTER_HEADERS_STATUS_STOP_ITERATION:\n+    return Http::FilterHeadersStatus::StopIteration;\n+  case ENVOY_FILTER_HEADERS_STATUS_CONTINUE_AND_END_STREAM:\n+    return Http::FilterHeadersStatus::ContinueAndEndStream;\n+  case ENVOY_FILTER_HEADERS_STATUS_STOP_ALL_ITERATION_AND_BUFFER:\n+    return Http::FilterHeadersStatus::StopAllIterationAndBuffer;\n+  default:\n+    ASSERT(false, \"unrecognized filter status from platform: {}\");", "originalCommit": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMyODc3Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451328777", "bodyText": "It's coming from the platform layer. Thank you for the catch on the interpolation. :)", "author": "goaway", "createdAt": "2020-07-08T07:10:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxOTE1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0MDY3OA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451040678", "bodyText": "Same comment from #883 (comment) applies", "author": "rebello95", "createdAt": "2020-07-07T17:50:00Z", "path": "library/common/config_template.cc", "diffHunk": "@@ -32,6 +32,10 @@ const char* config_template = R\"(\n                         base_interval: 0.25s\n                         max_interval: 60s\n         http_filters:\n+          - name: envoy.filters.http.platform_extension\n+            typed_config:\n+              \"@type\": type.googleapis.com/envoymobile.extensions.filters.http.platform_extension.Bridging\n+              name: PlatformStub", "originalCommit": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxNjc1Ng==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451316756", "bodyText": "(Same as below)\nThis particular part won't ever really be publicly exposed/used. But I do intend to make a documentation PR that fully describes how to create and use platform extensions.", "author": "goaway", "createdAt": "2020-07-08T06:42:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0MDY3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0MTAyNA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451041024", "bodyText": "Same unresolved comment: #883 (comment)", "author": "rebello95", "createdAt": "2020-07-07T17:50:37Z", "path": "library/common/extensions/filters/http/platform_extension/bridging_filter.h", "diffHunk": "@@ -0,0 +1,58 @@\n+#pragma once\n+\n+#include \"envoy/http/filter.h\"\n+\n+#include \"extensions/filters/http/common/pass_through_filter.h\"\n+\n+#include \"library/common/extensions/filters/http/platform_extension/c_types.h\"\n+#include \"library/common/extensions/filters/http/platform_extension/filter.pb.h\"\n+\n+namespace Envoy {\n+namespace Extensions {\n+namespace HttpFilters {\n+namespace PlatformExtension {\n+\n+class BridgingFilterConfig {\n+public:\n+  BridgingFilterConfig(\n+      const envoymobile::extensions::filters::http::platform_extension::Bridging& proto_config);\n+\n+  const std::string& name() const { return name_; }\n+\n+private:\n+  const std::string name_;\n+};\n+\n+typedef std::shared_ptr<BridgingFilterConfig> BridgingFilterConfigSharedPtr;\n+\n+/**\n+ * Harness to bridge Envoy filter invocations up to the platform layer.\n+ */\n+class BridgingFilter final : public Http::PassThroughFilter {\n+public:\n+  BridgingFilter(BridgingFilterConfigSharedPtr config);\n+\n+  // StreamDecoderFilter\n+  Http::FilterHeadersStatus decodeHeaders(Http::RequestHeaderMap& headers,\n+                                          bool end_stream) override;\n+  Http::FilterDataStatus decodeData(Buffer::Instance& data, bool end_stream) override;\n+  Http::FilterTrailersStatus decodeTrailers(Http::RequestTrailerMap& trailers) override;\n+  Http::FilterMetadataStatus decodeMetadata(Http::MetadataMap& metadata) override;\n+\n+  // StreamEncoderFilter\n+  Http::FilterHeadersStatus encode100ContinueHeaders(Http::ResponseHeaderMap& headers) override;\n+  Http::FilterHeadersStatus encodeHeaders(Http::ResponseHeaderMap& headers,\n+                                          bool end_stream) override;\n+  Http::FilterDataStatus encodeData(Buffer::Instance& data, bool end_stream) override;\n+  Http::FilterTrailersStatus encodeTrailers(Http::ResponseTrailerMap& trailers) override;\n+  Http::FilterMetadataStatus encodeMetadata(Http::MetadataMap& metadata) override;\n+\n+private:\n+  // FIXME: this leaks\n+  const envoy_http_filter* platform_filter_;", "originalCommit": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMTIyNA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451301224", "bodyText": "This won't cause an issue right now because it's effectively static (as is the engine itself). It's just a note to myself so I don't forget about it later.\nI will add a more detailed comment and link it to the issue for a fully-instantiated engine.", "author": "goaway", "createdAt": "2020-07-08T05:59:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0MTAyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMDYxNA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451120614", "bodyText": "In the past we've had bugs with C structs that have callback properties with the same types (i.e., envoy_filter_on_headers_f for request and response). Would it be possible to either a) add tests for the bridging (@junr03 maybe has thoughts?) or b) use different type signatures so they're enforced by the compiler?", "author": "rebello95", "createdAt": "2020-07-07T20:21:38Z", "path": "library/common/extensions/filters/http/platform_extension/c_types.h", "diffHunk": "@@ -0,0 +1,97 @@\n+#pragma once\n+\n+#include \"library/common/types/c_types.h\"\n+\n+// NOLINT(namespace-envoy)\n+\n+/**\n+ * Return codes for on-headers filter invocations. See envoy/http/filter.h\n+ */\n+typedef enum {\n+  ENVOY_FILTER_HEADERS_STATUS_CONTINUE = 0,\n+  ENVOY_FILTER_HEADERS_STATUS_STOP_ITERATION,\n+  ENVOY_FILTER_HEADERS_STATUS_CONTINUE_AND_END_STREAM,\n+  ENVOY_FILTER_HEADERS_STATUS_STOP_ALL_ITERATION_AND_BUFFER,\n+} envoy_filter_headers_status_t;\n+\n+/**\n+ * Compound return type for on-headers filter invocations.\n+ */\n+typedef struct {\n+  envoy_filter_headers_status_t status;\n+  envoy_headers headers;\n+} envoy_filter_headers_status;\n+\n+/**\n+ * Return codes for on-data filter invocations. See envoy/http/filter.h\n+ */\n+typedef enum {\n+  ENVOY_FILTER_DATA_STATUS_CONTINUE = 0,\n+  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_AND_BUFFER,\n+  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_NO_BUFFER,\n+} envoy_filter_data_status_t;\n+\n+/**\n+ * Compound return type for on-data filter invocations.\n+ */\n+typedef struct {\n+  envoy_filter_data_status_t status;\n+  envoy_data data;\n+} envoy_filter_data_status;\n+\n+/**\n+ * Return codes for on-trailers filter invocations. See envoy/http/filter.h\n+ */\n+typedef enum {\n+  ENVOY_FILTER_TRAILERS_STATUS_CONTINUE = 0,\n+  ENVOY_FILTER_TRAILERS_STATUS_STOP_ITERATION,\n+} envoy_filter_trailers_status_t;\n+\n+/**\n+ * Compound return type for on-trailers filter invocations.\n+ */\n+typedef struct {\n+  envoy_filter_trailers_status_t status;\n+  envoy_headers trailers;\n+} envoy_filter_trailers_status;\n+\n+#ifdef __cplusplus\n+extern \"C\" { // function pointers\n+#endif\n+\n+/**\n+ * Function signature for on-headers filter invocations.\n+ */\n+typedef envoy_filter_headers_status (*envoy_filter_on_headers_f)(envoy_headers headers,\n+                                                                 bool end_stream, void* context);\n+\n+/**\n+ * Function signature for on-data filter invocations.\n+ */\n+typedef envoy_filter_data_status (*envoy_filter_on_data_f)(envoy_data data, bool end_stream,\n+                                                          void* context);\n+\n+/**\n+ * Function signature for on-trailers filter invocations.\n+ */\n+typedef envoy_filter_trailers_status (*envoy_filter_on_trailers_f)(envoy_headers trailers,\n+                                                                   bool end_stream,\n+                                                                   void* context);\n+\n+#ifdef __cplusplus\n+} // function pointers\n+#endif\n+\n+/**\n+ * Raw datatype containing dispatch functions for a platform-native HTTP filter. Leveraged by the\n+ * BridgingFilter\n+ */\n+typedef struct {\n+  envoy_filter_on_headers_f on_request_headers;\n+  envoy_filter_on_data_f on_request_data;\n+  envoy_filter_on_trailers_f on_request_trailers;\n+  envoy_filter_on_headers_f on_response_headers;", "originalCommit": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI5OTcwNw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451299707", "bodyText": "The compiler won't actually save us here even if we create a separate definition, because at the end of the day they are just typedefs that will compile down to the same thing.\nI agree about testing and once we have a framework in place for bridge testing, this will be an area to cover.", "author": "goaway", "createdAt": "2020-07-08T05:54:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMDYxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMDgzMg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451120832", "bodyText": "Bad copy/paste", "author": "rebello95", "createdAt": "2020-07-07T20:22:06Z", "path": "library/common/extensions/filters/http/platform_extension/config.h", "diffHunk": "@@ -0,0 +1,33 @@\n+#include <string>\n+\n+#include \"extensions/filters/http/common/factory_base.h\"\n+\n+#include \"library/common/extensions/filters/http/platform_extension/filter.pb.h\"\n+#include \"library/common/extensions/filters/http/platform_extension/filter.pb.validate.h\"\n+\n+namespace Envoy {\n+namespace Extensions {\n+namespace HttpFilters {\n+namespace PlatformExtension {\n+\n+/**\n+ * Config registration for the decompressor filter. @see NamedHttpFilterConfigFactory.", "originalCommit": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI5ODc0OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451298749", "bodyText": "Yep, thank you.", "author": "goaway", "createdAt": "2020-07-08T05:51:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMDgzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMTAzMg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451121032", "bodyText": "Can we document how this works/is intended to be used?", "author": "rebello95", "createdAt": "2020-07-07T20:22:33Z", "path": "library/common/extensions/filters/http/platform_extension/filter.proto", "diffHunk": "@@ -0,0 +1,9 @@\n+syntax = \"proto3\";\n+\n+package envoymobile.extensions.filters.http.platform_extension;\n+\n+import \"validate/validate.proto\";\n+\n+message Bridging {\n+  string name = 1 [(validate.rules).string.min_bytes = 1];\n+}", "originalCommit": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI5ODY2NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451298664", "bodyText": "This particular part won't ever really be publicly exposed/used. But I do intend to make a documentation PR that fully describes how to create and use platform extensions.", "author": "goaway", "createdAt": "2020-07-08T05:51:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMTAzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3NjA3Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451176072", "bodyText": "nit: the name extension suffix is a little odd, because the extension is a filter, not a generic \"PlatformExtension\".", "author": "junr03", "createdAt": "2020-07-07T22:19:33Z", "path": "envoy_build_config/BUILD", "diffHunk": "@@ -22,5 +22,6 @@ envoy_cc_library(\n         \"@envoy//source/extensions/filters/network/http_connection_manager:config\",\n         \"@envoy//source/extensions/stat_sinks/metrics_service:config\",\n         \"@envoy//source/extensions/transport_sockets/tls:config\",\n+        \"@envoy_mobile//library/common/extensions/filters/http/platform_extension:config\",", "originalCommit": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3OTc5MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451179791", "bodyText": "Ok, after reading more of the PR I think I see your thought here. The PlatformExtension namespace contains types that bridge to the platform. In this case it is the bridge filter. Usually the directory and the namespace share the filter's name, but I see how here is different.", "author": "junr03", "createdAt": "2020-07-07T22:28:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3NjA3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMTU0Mw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451301543", "bodyText": "I'm not married to the naming, but yeah, that was my thinking at the time.", "author": "goaway", "createdAt": "2020-07-08T06:00:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3NjA3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NTg0MA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r452745840", "bodyText": "See what you think of the updated naming.", "author": "goaway", "createdAt": "2020-07-10T09:55:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3NjA3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3NjI3Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451176277", "bodyText": "should we do alpha ordering here?", "author": "junr03", "createdAt": "2020-07-07T22:20:05Z", "path": "envoy_build_config/extensions_build_config.bzl", "diffHunk": "@@ -5,5 +5,6 @@ EXTENSIONS = {\n     \"envoy.filters.network.http_connection_manager\":    \"//source/extensions/filters/network/http_connection_manager:config\",\n     \"envoy.stat_sinks.metrics_service\":                 \"//source/extensions/stat_sinks/metrics_service:config\",\n     \"envoy.transport_sockets.tls\":                      \"//source/extensions/transport_sockets/tls:config\",\n+    \"envoy.filters.http.platform_extension\":            \"@envoy_mobile//library/common/extensions/filters/http/platform_extension:config\",", "originalCommit": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwOTA3OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451309079", "bodyText": "Sounds good.", "author": "goaway", "createdAt": "2020-07-08T06:22:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3NjI3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MDQ0Ng==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451180446", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            namespace External {\n          \n          \n            \n            namespace PlatformExtension {\n          \n      \n    \n    \n  \n\nI think this meshes well with the rest of the PR, because it tells us that these function signatures allow us to register any platform extension api?", "author": "junr03", "createdAt": "2020-07-07T22:30:41Z", "path": "library/common/api/external.cc", "diffHunk": "@@ -0,0 +1,25 @@\n+#include \"external.h\"\n+\n+#include <unordered_map>\n+\n+#include \"common/common/assert.h\"\n+\n+namespace Envoy {\n+namespace Api {\n+namespace External {", "originalCommit": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwODk5NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451308994", "bodyText": "Sure - it may be obvious that I waffled a bit on naming and \"external\" was just a possibility I considered, too.", "author": "goaway", "createdAt": "2020-07-08T06:22:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MDQ0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjY4OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r452746689", "bodyText": "Now that I've updated everything else to standardize on PlatformBridge, I actually think this should remain External. Any API external to the library could be registered here, but everything labeled PlatformBridge relates specifically to bridging up to a platform runtime environment.", "author": "goaway", "createdAt": "2020-07-10T09:57:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MDQ0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MDg1NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451180854", "bodyText": "How will this work with instance-based engines? Will the registry be per instance, or do you see this always being static?", "author": "junr03", "createdAt": "2020-07-07T22:31:58Z", "path": "library/common/api/external.cc", "diffHunk": "@@ -0,0 +1,25 @@\n+#include \"external.h\"\n+\n+#include <unordered_map>\n+\n+#include \"common/common/assert.h\"\n+\n+namespace Envoy {\n+namespace Api {\n+namespace External {\n+\n+static std::unordered_map<std::string, void*> registry_{};", "originalCommit": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMTczMw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451301733", "bodyText": "Per-instance. I'm going to do a pass and flag and link anything that needs to be updated once the engine is instantiated.", "author": "goaway", "createdAt": "2020-07-08T06:01:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MDg1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MTA0MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451181041", "bodyText": "Should probably also note that name collisions update the stored api?", "author": "junr03", "createdAt": "2020-07-07T22:32:34Z", "path": "library/common/api/external.h", "diffHunk": "@@ -0,0 +1,22 @@\n+#pragma once\n+\n+#include <string>\n+\n+namespace Envoy {\n+namespace Api {\n+namespace External {\n+\n+/**\n+ * Register an external runtime API for usage (most likely in extensions).\n+ * NOTE: This is a proof of concept implementation and a HACK. Registration is NOT thread-safe.\n+ */\n+void registerApi(std::string name, void* api);", "originalCommit": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMjUwOA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451302508", "bodyText": "I considered asserting on collisions. This is really just a quick fix solution that could be improved to be safe.\nSince this will be handled behind the scenes when I update with the dynamic configuration PR, I decided to wait to update it until then.", "author": "goaway", "createdAt": "2020-07-08T06:03:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MTA0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcyNTYxOA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451725618", "bodyText": "alright, I'd leave a todo then", "author": "junr03", "createdAt": "2020-07-08T17:54:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MTA0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MTE5OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451181199", "bodyText": "Interesting, crash if not present?", "author": "junr03", "createdAt": "2020-07-07T22:33:02Z", "path": "library/common/api/external.cc", "diffHunk": "@@ -0,0 +1,25 @@\n+#include \"external.h\"\n+\n+#include <unordered_map>\n+\n+#include \"common/common/assert.h\"\n+\n+namespace Envoy {\n+namespace Api {\n+namespace External {\n+\n+static std::unordered_map<std::string, void*> registry_{};\n+\n+void registerApi(std::string name, void* api) {\n+  registry_[name] = api;\n+}\n+\n+void* retrieveApi(std::string name) {\n+  void* api = registry_[name];\n+  ASSERT(api);", "originalCommit": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMzMDM1MA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451330350", "bodyText": "Yes, because I don't really see a readily-available better option, and at least for this case, this won't be exposed for direct user interaction (see the comment for more of my thinking on this).\nIf the API isn't located, a crash is probably about to happen anyways; this just does the operator of the library the courtesy of telling them why.", "author": "goaway", "createdAt": "2020-07-08T07:13:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MTE5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MTUwMw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451181503", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              string name = 1 [(validate.rules).string.min_bytes = 1];\n          \n          \n            \n              string platform_api_name = 1 [(validate.rules).string.min_bytes = 1];", "author": "junr03", "createdAt": "2020-07-07T22:33:53Z", "path": "library/common/extensions/filters/http/platform_extension/filter.proto", "diffHunk": "@@ -0,0 +1,9 @@\n+syntax = \"proto3\";\n+\n+package envoymobile.extensions.filters.http.platform_extension;\n+\n+import \"validate/validate.proto\";\n+\n+message Bridging {\n+  string name = 1 [(validate.rules).string.min_bytes = 1];", "originalCommit": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMzMTY3Ng==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451331676", "bodyText": "I sort of think name is fine here. There's precedent, and recall that we'll be generating this. If we were to change it though, I would consider platform_filter_name, since not just any platform api will cut it.", "author": "goaway", "createdAt": "2020-07-08T07:16:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MTUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcyNjc2Mw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451726763", "bodyText": "I vote for platform_filter_name. Usually, name referred to the name of the filter itself, but here it refers to the name of the platform filter. So even though this is not public, I think a more specific name is good.", "author": "junr03", "createdAt": "2020-07-08T17:56:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MTUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgxODY5MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r454818691", "bodyText": "#955", "author": "goaway", "createdAt": "2020-07-15T06:23:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MTUwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MzY2Ng==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451183666", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Config registration for the decompressor filter. @see NamedHttpFilterConfigFactory.\n          \n          \n            \n             * Config registration for the bridging filter. @see NamedHttpFilterConfigFactory.", "author": "junr03", "createdAt": "2020-07-07T22:40:15Z", "path": "library/common/extensions/filters/http/platform_extension/config.h", "diffHunk": "@@ -0,0 +1,33 @@\n+#include <string>\n+\n+#include \"extensions/filters/http/common/factory_base.h\"\n+\n+#include \"library/common/extensions/filters/http/platform_extension/filter.pb.h\"\n+#include \"library/common/extensions/filters/http/platform_extension/filter.pb.validate.h\"\n+\n+namespace Envoy {\n+namespace Extensions {\n+namespace HttpFilters {\n+namespace PlatformExtension {\n+\n+/**\n+ * Config registration for the decompressor filter. @see NamedHttpFilterConfigFactory.", "originalCommit": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMzMDU1OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451330559", "bodyText": "Thanks, good catch. :)", "author": "goaway", "createdAt": "2020-07-08T07:14:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MzY2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4Mzg0Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451183847", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              BridgingFilterFactory() : FactoryBase(\"platform_extension\") {}\n          \n          \n            \n              BridgingFilterFactory() : FactoryBase(\"bridging\") {}", "author": "junr03", "createdAt": "2020-07-07T22:40:43Z", "path": "library/common/extensions/filters/http/platform_extension/config.h", "diffHunk": "@@ -0,0 +1,33 @@\n+#include <string>\n+\n+#include \"extensions/filters/http/common/factory_base.h\"\n+\n+#include \"library/common/extensions/filters/http/platform_extension/filter.pb.h\"\n+#include \"library/common/extensions/filters/http/platform_extension/filter.pb.validate.h\"\n+\n+namespace Envoy {\n+namespace Extensions {\n+namespace HttpFilters {\n+namespace PlatformExtension {\n+\n+/**\n+ * Config registration for the decompressor filter. @see NamedHttpFilterConfigFactory.\n+ */\n+class BridgingFilterFactory\n+    : public Common::FactoryBase<\n+          envoymobile::extensions::filters::http::platform_extension::Bridging> {\n+public:\n+  BridgingFilterFactory() : FactoryBase(\"platform_extension\") {}", "originalCommit": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4NTg0Mw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451185843", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Return codes for on-headers filter invocations. See envoy/http/filter.h\n          \n          \n            \n             * Return codes for on-headers filter invocations. @see envoy/http/filter.h\n          \n      \n    \n    \n  \n\nsame elsewhere", "author": "junr03", "createdAt": "2020-07-07T22:46:42Z", "path": "library/common/extensions/filters/http/platform_extension/c_types.h", "diffHunk": "@@ -0,0 +1,97 @@\n+#pragma once\n+\n+#include \"library/common/types/c_types.h\"\n+\n+// NOLINT(namespace-envoy)\n+\n+/**\n+ * Return codes for on-headers filter invocations. See envoy/http/filter.h", "originalCommit": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4NzY0Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451187642", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * BridgingFilter\n          \n          \n            \n             * BridgingFilter.", "author": "junr03", "createdAt": "2020-07-07T22:51:57Z", "path": "library/common/extensions/filters/http/platform_extension/c_types.h", "diffHunk": "@@ -0,0 +1,97 @@\n+#pragma once\n+\n+#include \"library/common/types/c_types.h\"\n+\n+// NOLINT(namespace-envoy)\n+\n+/**\n+ * Return codes for on-headers filter invocations. See envoy/http/filter.h\n+ */\n+typedef enum {\n+  ENVOY_FILTER_HEADERS_STATUS_CONTINUE = 0,\n+  ENVOY_FILTER_HEADERS_STATUS_STOP_ITERATION,\n+  ENVOY_FILTER_HEADERS_STATUS_CONTINUE_AND_END_STREAM,\n+  ENVOY_FILTER_HEADERS_STATUS_STOP_ALL_ITERATION_AND_BUFFER,\n+} envoy_filter_headers_status_t;\n+\n+/**\n+ * Compound return type for on-headers filter invocations.\n+ */\n+typedef struct {\n+  envoy_filter_headers_status_t status;\n+  envoy_headers headers;\n+} envoy_filter_headers_status;\n+\n+/**\n+ * Return codes for on-data filter invocations. See envoy/http/filter.h\n+ */\n+typedef enum {\n+  ENVOY_FILTER_DATA_STATUS_CONTINUE = 0,\n+  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_AND_BUFFER,\n+  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_NO_BUFFER,\n+} envoy_filter_data_status_t;\n+\n+/**\n+ * Compound return type for on-data filter invocations.\n+ */\n+typedef struct {\n+  envoy_filter_data_status_t status;\n+  envoy_data data;\n+} envoy_filter_data_status;\n+\n+/**\n+ * Return codes for on-trailers filter invocations. See envoy/http/filter.h\n+ */\n+typedef enum {\n+  ENVOY_FILTER_TRAILERS_STATUS_CONTINUE = 0,\n+  ENVOY_FILTER_TRAILERS_STATUS_STOP_ITERATION,\n+} envoy_filter_trailers_status_t;\n+\n+/**\n+ * Compound return type for on-trailers filter invocations.\n+ */\n+typedef struct {\n+  envoy_filter_trailers_status_t status;\n+  envoy_headers trailers;\n+} envoy_filter_trailers_status;\n+\n+#ifdef __cplusplus\n+extern \"C\" { // function pointers\n+#endif\n+\n+/**\n+ * Function signature for on-headers filter invocations.\n+ */\n+typedef envoy_filter_headers_status (*envoy_filter_on_headers_f)(envoy_headers headers,\n+                                                                 bool end_stream, void* context);\n+\n+/**\n+ * Function signature for on-data filter invocations.\n+ */\n+typedef envoy_filter_data_status (*envoy_filter_on_data_f)(envoy_data data, bool end_stream,\n+                                                          void* context);\n+\n+/**\n+ * Function signature for on-trailers filter invocations.\n+ */\n+typedef envoy_filter_trailers_status (*envoy_filter_on_trailers_f)(envoy_headers trailers,\n+                                                                   bool end_stream,\n+                                                                   void* context);\n+\n+#ifdef __cplusplus\n+} // function pointers\n+#endif\n+\n+/**\n+ * Raw datatype containing dispatch functions for a platform-native HTTP filter. Leveraged by the\n+ * BridgingFilter", "originalCommit": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4ODk2MA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451188960", "bodyText": "I wonder if this should live in the BridgingFilterConfig class. That way if we crash/throw an exception we can do so at config time and not when the first stream creates the filter.", "author": "junr03", "createdAt": "2020-07-07T22:55:58Z", "path": "library/common/extensions/filters/http/platform_extension/bridging_filter.cc", "diffHunk": "@@ -0,0 +1,115 @@\n+#include \"library/common/extensions/filters/http/platform_extension/bridging_filter.h\"\n+\n+//#include <iostream>\n+\n+#include \"envoy/server/filter_config.h\"\n+\n+#include \"common/common/assert.h\"\n+#include \"common/common/utility.h\"\n+\n+#include \"library/common/api/external.h\"\n+#include \"library/common/buffer/utility.h\"\n+#include \"library/common/http/header_utility.h\"\n+\n+namespace Envoy {\n+namespace Extensions {\n+namespace HttpFilters {\n+namespace PlatformExtension {\n+\n+Http::FilterHeadersStatus mapStatus(envoy_filter_headers_status_t status) {\n+  switch (status) {\n+  case ENVOY_FILTER_HEADERS_STATUS_CONTINUE:\n+    return Http::FilterHeadersStatus::Continue;\n+  case ENVOY_FILTER_HEADERS_STATUS_STOP_ITERATION:\n+    return Http::FilterHeadersStatus::StopIteration;\n+  case ENVOY_FILTER_HEADERS_STATUS_CONTINUE_AND_END_STREAM:\n+    return Http::FilterHeadersStatus::ContinueAndEndStream;\n+  case ENVOY_FILTER_HEADERS_STATUS_STOP_ALL_ITERATION_AND_BUFFER:\n+    return Http::FilterHeadersStatus::StopAllIterationAndBuffer;\n+  default:\n+    ASSERT(false, \"unrecognized filter status from platform: {}\");\n+    return Http::FilterHeadersStatus::Continue;\n+  }\n+}\n+\n+BridgingFilterConfig::BridgingFilterConfig(\n+    const envoymobile::extensions::filters::http::platform_extension::Bridging& proto_config)\n+    : name_(proto_config.name()) {}\n+\n+BridgingFilter::BridgingFilter(BridgingFilterConfigSharedPtr config)\n+    : platform_filter_(", "originalCommit": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxOTM4NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451319384", "bodyText": "Remember that for the current use case, with dynamic filter configuration, this will be handled correctly behind the scenes, at config time.\nFor the general case I don't really know how to make that happen without significant new plumbing, because the platform API is a runtime-defined memory location, that must be passed by the platform down into Envoy. This would require threading that into Envoy's startup sequencing. I'd suggest it could maybe be an item for future work, but a crash at API lookup seemed good enough for now (again, especially since dynamic configuration will handle this correctly without user intervention).", "author": "goaway", "createdAt": "2020-07-08T06:49:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4ODk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcyOTU1Mw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451729553", "bodyText": "Ok, my thinking was that a user would register platform filters after engine instantiation but before initialization. So then it would make sense to have the lookup in the config. But if the thinking is that a user might register filters after engine initialization this makes sense.\nSo then, I guess the larger question is how long do we want to support filter registration.", "author": "junr03", "createdAt": "2020-07-08T18:00:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4ODk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc1NDA1MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r452754051", "bodyText": "I think we're misunderstanding each other. I am indeed planning to register filters prior to Engine initialization.\nBut I think I understand you now. You're suggesting the config could perform the API lookup during initialization. Sure - in fact, I agree, I like that better. (Is that what you mean?)", "author": "goaway", "createdAt": "2020-07-10T10:12:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4ODk2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4OTMzNQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451189335", "bodyText": "TODO for optimization", "author": "junr03", "createdAt": "2020-07-07T22:57:02Z", "path": "library/common/extensions/filters/http/platform_extension/bridging_filter.cc", "diffHunk": "@@ -0,0 +1,115 @@\n+#include \"library/common/extensions/filters/http/platform_extension/bridging_filter.h\"\n+\n+//#include <iostream>\n+\n+#include \"envoy/server/filter_config.h\"\n+\n+#include \"common/common/assert.h\"\n+#include \"common/common/utility.h\"\n+\n+#include \"library/common/api/external.h\"\n+#include \"library/common/buffer/utility.h\"\n+#include \"library/common/http/header_utility.h\"\n+\n+namespace Envoy {\n+namespace Extensions {\n+namespace HttpFilters {\n+namespace PlatformExtension {\n+\n+Http::FilterHeadersStatus mapStatus(envoy_filter_headers_status_t status) {\n+  switch (status) {\n+  case ENVOY_FILTER_HEADERS_STATUS_CONTINUE:\n+    return Http::FilterHeadersStatus::Continue;\n+  case ENVOY_FILTER_HEADERS_STATUS_STOP_ITERATION:\n+    return Http::FilterHeadersStatus::StopIteration;\n+  case ENVOY_FILTER_HEADERS_STATUS_CONTINUE_AND_END_STREAM:\n+    return Http::FilterHeadersStatus::ContinueAndEndStream;\n+  case ENVOY_FILTER_HEADERS_STATUS_STOP_ALL_ITERATION_AND_BUFFER:\n+    return Http::FilterHeadersStatus::StopAllIterationAndBuffer;\n+  default:\n+    ASSERT(false, \"unrecognized filter status from platform: {}\");\n+    return Http::FilterHeadersStatus::Continue;\n+  }\n+}\n+\n+BridgingFilterConfig::BridgingFilterConfig(\n+    const envoymobile::extensions::filters::http::platform_extension::Bridging& proto_config)\n+    : name_(proto_config.name()) {}\n+\n+BridgingFilter::BridgingFilter(BridgingFilterConfigSharedPtr config)\n+    : platform_filter_(\n+          static_cast<envoy_http_filter*>(Api::External::retrieveApi(config->name()))) {}\n+\n+Http::FilterHeadersStatus BridgingFilter::decodeHeaders(Http::RequestHeaderMap& headers,\n+                                                        bool end_stream) {\n+  envoy_headers in_headers = Http::Utility::toBridgeHeaders(headers);\n+  envoy_filter_headers_status result = platform_filter_->on_request_headers(in_headers, end_stream, platform_filter_->context);\n+  Http::FilterHeadersStatus status = mapStatus(result.status);\n+  // Current platform implementations expose immutable headers, thus any modification necessitates a full copy.\n+  // If the returned pointer is identical, we assume no modification was made and elide the copy here.\n+  if (in_headers.headers != result.headers.headers) {\n+    headers.clear();\n+    for (envoy_header_size_t i = 0; i < result.headers.length; i++) {", "originalCommit": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMyNzExNQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451327115", "bodyText": "This already elides the copy in the unmodified case.\n@rebello95 and @buildbreaker felt somewhat strongly about using immutable objects in the filter callbacks, so a full copy is more or less necessary if any modification was made (and in fact, has already happened). (We could filter for a diff in linear time, but then the copy is linear, too). If we created a custom builder in the callback that accumulated a diff and passed back the builder instead of a realized collection, we could operate on the diff directly, but I think that's introducing quite a lot of complexity at that point. After some more reflection, I basically think there are two reasonable approaches:\n\nAccept that using immutable objects implies copies will be made.\nSwitch to mutable objects like Envoy does in its own filters, opening the door for fully-bridged collections.\n\n\nseems good enough to me for now, though I'd somewhat prefer 2) long-term. Either way I think further discussion would need to happen were we to change course.", "author": "goaway", "createdAt": "2020-07-08T07:06:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4OTMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcyMDUxNQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451720515", "bodyText": "Yeah, I feel 1 is an acceptable approach right now. We know of this could be optimized (we also know how we want to optimize it) and we can tackle this problem later on.", "author": "buildbreaker", "createdAt": "2020-07-08T17:45:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4OTMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTczMDQ5MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451730491", "bodyText": "Right, so I think we should leave some trail of that long term thinking because there is still room for optimization regardless of changing the mutability of the headers. Perhaps actually an issue is better.", "author": "junr03", "createdAt": "2020-07-08T18:02:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4OTMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2NTExNQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r452765115", "bodyText": "To clarify, I don't think there is really room for further optimization if we stick with immutable types. (At least anything that won't be terribly convoluted.)\nSo, I was trying to say is that there's maybe only a TODO for further optimization if we expect to switch to mutable types at some point in the future.\nBut I agree with your point about capturing context, and will create an issue and link it here.", "author": "goaway", "createdAt": "2020-07-10T10:36:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4OTMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc3OTQ5MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r452779491", "bodyText": "Done.", "author": "goaway", "createdAt": "2020-07-10T11:11:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4OTMzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4OTgwOA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451189808", "bodyText": "we can probably extract all this logic to a helper function that takes a function pointer, that way decode/encodeHeaders don't need to have all this repeated code?", "author": "junr03", "createdAt": "2020-07-07T22:58:26Z", "path": "library/common/extensions/filters/http/platform_extension/bridging_filter.cc", "diffHunk": "@@ -0,0 +1,115 @@\n+#include \"library/common/extensions/filters/http/platform_extension/bridging_filter.h\"\n+\n+//#include <iostream>\n+\n+#include \"envoy/server/filter_config.h\"\n+\n+#include \"common/common/assert.h\"\n+#include \"common/common/utility.h\"\n+\n+#include \"library/common/api/external.h\"\n+#include \"library/common/buffer/utility.h\"\n+#include \"library/common/http/header_utility.h\"\n+\n+namespace Envoy {\n+namespace Extensions {\n+namespace HttpFilters {\n+namespace PlatformExtension {\n+\n+Http::FilterHeadersStatus mapStatus(envoy_filter_headers_status_t status) {\n+  switch (status) {\n+  case ENVOY_FILTER_HEADERS_STATUS_CONTINUE:\n+    return Http::FilterHeadersStatus::Continue;\n+  case ENVOY_FILTER_HEADERS_STATUS_STOP_ITERATION:\n+    return Http::FilterHeadersStatus::StopIteration;\n+  case ENVOY_FILTER_HEADERS_STATUS_CONTINUE_AND_END_STREAM:\n+    return Http::FilterHeadersStatus::ContinueAndEndStream;\n+  case ENVOY_FILTER_HEADERS_STATUS_STOP_ALL_ITERATION_AND_BUFFER:\n+    return Http::FilterHeadersStatus::StopAllIterationAndBuffer;\n+  default:\n+    ASSERT(false, \"unrecognized filter status from platform: {}\");\n+    return Http::FilterHeadersStatus::Continue;\n+  }\n+}\n+\n+BridgingFilterConfig::BridgingFilterConfig(\n+    const envoymobile::extensions::filters::http::platform_extension::Bridging& proto_config)\n+    : name_(proto_config.name()) {}\n+\n+BridgingFilter::BridgingFilter(BridgingFilterConfigSharedPtr config)\n+    : platform_filter_(\n+          static_cast<envoy_http_filter*>(Api::External::retrieveApi(config->name()))) {}\n+\n+Http::FilterHeadersStatus BridgingFilter::decodeHeaders(Http::RequestHeaderMap& headers,\n+                                                        bool end_stream) {\n+  envoy_headers in_headers = Http::Utility::toBridgeHeaders(headers);\n+  envoy_filter_headers_status result = platform_filter_->on_request_headers(in_headers, end_stream, platform_filter_->context);\n+  Http::FilterHeadersStatus status = mapStatus(result.status);\n+  // Current platform implementations expose immutable headers, thus any modification necessitates a full copy.\n+  // If the returned pointer is identical, we assume no modification was made and elide the copy here.\n+  if (in_headers.headers != result.headers.headers) {\n+    headers.clear();\n+    for (envoy_header_size_t i = 0; i < result.headers.length; i++) {\n+      headers.addCopy(\n+          Http::LowerCaseString(Http::Utility::convertToString(result.headers.headers[i].key)),\n+          Http::Utility::convertToString(result.headers.headers[i].value));\n+    }\n+  }\n+  // The C envoy_headers struct can be released now because the headers have been copied.\n+  release_envoy_headers(result.headers);\n+  return status;\n+}\n+\n+Http::FilterDataStatus BridgingFilter::decodeData(Buffer::Instance& /*data*/, bool /*end_stream*/) {\n+  return Http::FilterDataStatus::Continue;\n+}\n+\n+Http::FilterTrailersStatus BridgingFilter::decodeTrailers(Http::RequestTrailerMap& /*trailers*/) {\n+  return Http::FilterTrailersStatus::Continue;\n+}\n+\n+Http::FilterMetadataStatus BridgingFilter::decodeMetadata(Http::MetadataMap& /*metadata*/) {\n+  return Http::FilterMetadataStatus::Continue;\n+}\n+\n+Http::FilterHeadersStatus\n+BridgingFilter::encode100ContinueHeaders(Http::ResponseHeaderMap& /*headers*/) {\n+  return Http::FilterHeadersStatus::Continue;\n+}\n+\n+Http::FilterHeadersStatus BridgingFilter::encodeHeaders(Http::ResponseHeaderMap& headers,", "originalCommit": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMyODQ1Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451328452", "bodyText": "Yep I actually planned to do exactly that, but was holding off while things were in flux.", "author": "goaway", "createdAt": "2020-07-08T07:09:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4OTgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ1NjY1MA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451456650", "bodyText": "Done in the latest update. :)", "author": "goaway", "createdAt": "2020-07-08T10:57:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4OTgwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2MzA5Ng==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r453663096", "bodyText": "end_stream should be omitted since trailers always indicate an end-of-stream", "author": "rebello95", "createdAt": "2020-07-13T13:49:06Z", "path": "library/common/extensions/filters/http/platform_bridge/c_types.h", "diffHunk": "@@ -0,0 +1,96 @@\n+#pragma once\n+\n+#include \"library/common/types/c_types.h\"\n+\n+// NOLINT(namespace-envoy)\n+\n+/**\n+ * Return codes for on-headers filter invocations. @see envoy/http/filter.h\n+ */\n+typedef enum {\n+  ENVOY_FILTER_HEADERS_STATUS_CONTINUE = 0,\n+  ENVOY_FILTER_HEADERS_STATUS_STOP_ITERATION,\n+  ENVOY_FILTER_HEADERS_STATUS_CONTINUE_AND_END_STREAM,\n+  ENVOY_FILTER_HEADERS_STATUS_STOP_ALL_ITERATION_AND_BUFFER,\n+} envoy_filter_headers_status_t;\n+\n+/**\n+ * Compound return type for on-headers filter invocations.\n+ */\n+typedef struct {\n+  envoy_filter_headers_status_t status;\n+  envoy_headers headers;\n+} envoy_filter_headers_status;\n+\n+/**\n+ * Return codes for on-data filter invocations. @see envoy/http/filter.h\n+ */\n+typedef enum {\n+  ENVOY_FILTER_DATA_STATUS_CONTINUE = 0,\n+  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_AND_BUFFER,\n+  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_NO_BUFFER,\n+} envoy_filter_data_status_t;\n+\n+/**\n+ * Compound return type for on-data filter invocations.\n+ */\n+typedef struct {\n+  envoy_filter_data_status_t status;\n+  envoy_data data;\n+} envoy_filter_data_status;\n+\n+/**\n+ * Return codes for on-trailers filter invocations. @see envoy/http/filter.h\n+ */\n+typedef enum {\n+  ENVOY_FILTER_TRAILERS_STATUS_CONTINUE = 0,\n+  ENVOY_FILTER_TRAILERS_STATUS_STOP_ITERATION,\n+} envoy_filter_trailers_status_t;\n+\n+/**\n+ * Compound return type for on-trailers filter invocations.\n+ */\n+typedef struct {\n+  envoy_filter_trailers_status_t status;\n+  envoy_headers trailers;\n+} envoy_filter_trailers_status;\n+\n+#ifdef __cplusplus\n+extern \"C\" { // function pointers\n+#endif\n+\n+/**\n+ * Function signature for on-headers filter invocations.\n+ */\n+typedef envoy_filter_headers_status (*envoy_filter_on_headers_f)(envoy_headers headers,\n+                                                                 bool end_stream, void* context);\n+\n+/**\n+ * Function signature for on-data filter invocations.\n+ */\n+typedef envoy_filter_data_status (*envoy_filter_on_data_f)(envoy_data data, bool end_stream,\n+                                                           void* context);\n+\n+/**\n+ * Function signature for on-trailers filter invocations.\n+ */\n+typedef envoy_filter_trailers_status (*envoy_filter_on_trailers_f)(envoy_headers trailers,\n+                                                                   bool end_stream, void* context);", "originalCommit": "d3d3beed676670505600dfafb908df74324b6119", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzODA0NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r453838044", "bodyText": "Yep, good catch.", "author": "goaway", "createdAt": "2020-07-13T18:13:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2MzA5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2NTcxNg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r453665716", "bodyText": "This isn't necessarily true since we compile out release asserts, right? Maybe worth clarifying", "author": "rebello95", "createdAt": "2020-07-13T13:52:46Z", "path": "library/common/types/c_types.h", "diffHunk": "@@ -103,6 +103,14 @@ extern \"C\" { // utility functions\n  */\n void* safe_malloc(size_t size);\n \n+/**\n+ * calloc wrapper that asserts that the returned pointer is valid. Otherwise, the program exits.", "originalCommit": "d3d3beed676670505600dfafb908df74324b6119", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1MzEyMg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r453853122", "bodyText": "It's a little confusing, but actually the other way around. RELEASE_ASSERT is never compiled out, regular ASSERT can be.", "author": "goaway", "createdAt": "2020-07-13T18:38:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2NTcxNg=="}], "type": "inlineReview"}, {"oid": "6483bdd77c02b5dc96f187838fe0e652dccbf45f", "url": "https://github.com/envoyproxy/envoy-mobile/commit/6483bdd77c02b5dc96f187838fe0e652dccbf45f", "message": "bump envoy\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-07-14T03:10:24Z", "type": "forcePushed"}, {"oid": "84b561ab0dcae6c4756a197e9ef85636a0226b7c", "url": "https://github.com/envoyproxy/envoy-mobile/commit/84b561ab0dcae6c4756a197e9ef85636a0226b7c", "message": "filters: add initial support for bridged (header) filters\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-07-15T03:08:55Z", "type": "commit"}, {"oid": "edb56dc6c4d498a7669edc0b748eb836e74b2555", "url": "https://github.com/envoyproxy/envoy-mobile/commit/edb56dc6c4d498a7669edc0b748eb836e74b2555", "message": "refactor BridgeFilter and add PlatformStub implementation\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-07-15T03:08:55Z", "type": "commit"}, {"oid": "827ccb8c16849f42d5a19126da22ad01471760cd", "url": "https://github.com/envoyproxy/envoy-mobile/commit/827ccb8c16849f42d5a19126da22ad01471760cd", "message": "updates for comments\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-07-15T03:08:55Z", "type": "commit"}, {"oid": "9e0c3a8dbd6a0f80a8fd7ad42197d513a0910c6c", "url": "https://github.com/envoyproxy/envoy-mobile/commit/9e0c3a8dbd6a0f80a8fd7ad42197d513a0910c6c", "message": "update comment\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-07-15T03:09:03Z", "type": "commit"}, {"oid": "7b9983cf2ded70e9076bcdc7f0a1da38e13ab462", "url": "https://github.com/envoyproxy/envoy-mobile/commit/7b9983cf2ded70e9076bcdc7f0a1da38e13ab462", "message": "standardize naming to PlatformBridgeFilter\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-07-15T03:09:42Z", "type": "commit"}, {"oid": "c46d9b1ec5381c68cd0d54fa09c8002896ce3efd", "url": "https://github.com/envoyproxy/envoy-mobile/commit/c46d9b1ec5381c68cd0d54fa09c8002896ce3efd", "message": "updates for comments\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-07-15T03:09:42Z", "type": "commit"}, {"oid": "bf578af7eec0c51ed0a48f7366564e167d176306", "url": "https://github.com/envoyproxy/envoy-mobile/commit/bf578af7eec0c51ed0a48f7366564e167d176306", "message": "update api retrieval to occur during config loading\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-07-15T03:09:42Z", "type": "commit"}, {"oid": "0e5196d906d24e60bb4a94ef0a54fc62e53a6cd3", "url": "https://github.com/envoyproxy/envoy-mobile/commit/0e5196d906d24e60bb4a94ef0a54fc62e53a6cd3", "message": "formatting\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-07-15T03:09:42Z", "type": "commit"}, {"oid": "fa84b3c368bb9c633c5a3f203ca696355d24b430", "url": "https://github.com/envoyproxy/envoy-mobile/commit/fa84b3c368bb9c633c5a3f203ca696355d24b430", "message": "add link to optimization issue\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-07-15T03:09:42Z", "type": "commit"}, {"oid": "3af5dd42047912ae536646c0d66ef763f55beefb", "url": "https://github.com/envoyproxy/envoy-mobile/commit/3af5dd42047912ae536646c0d66ef763f55beefb", "message": "minor update for comments\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-07-15T03:09:42Z", "type": "commit"}, {"oid": "3af5dd42047912ae536646c0d66ef763f55beefb", "url": "https://github.com/envoyproxy/envoy-mobile/commit/3af5dd42047912ae536646c0d66ef763f55beefb", "message": "minor update for comments\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-07-15T03:09:42Z", "type": "forcePushed"}, {"oid": "f431456c9e663c129744f8718306736b4d73628a", "url": "https://github.com/envoyproxy/envoy-mobile/commit/f431456c9e663c129744f8718306736b4d73628a", "message": "fix envoy ref\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-07-15T03:17:15Z", "type": "commit"}, {"oid": "9d31150d99101dd447e43aecda9b8ddf67739423", "url": "https://github.com/envoyproxy/envoy-mobile/commit/9d31150d99101dd447e43aecda9b8ddf67739423", "message": "fix format checker\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-07-15T03:35:09Z", "type": "commit"}]}