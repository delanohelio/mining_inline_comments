{"pr_number": 1188, "pr_title": "bridge: add register string accessor functionality plus expose on Android", "pr_createdAt": "2020-11-21T00:25:35Z", "pr_url": "https://github.com/envoyproxy/envoy-mobile/pull/1188", "timeline": [{"oid": "fbb1690b8226388aa875b49c2d1ce116f9ccd505", "url": "https://github.com/envoyproxy/envoy-mobile/commit/fbb1690b8226388aa875b49c2d1ce116f9ccd505", "message": "bridge: add register string accessor functionality plus expose on Android\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-11-21T00:25:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzNzc4NQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1188#discussion_r528037785", "bodyText": "Given that this accessor runs on the threading context that calls it I am not sure if we need it versus just passing the EnvoyStringAccessor to the jni and retaining that.", "author": "junr03", "createdAt": "2020-11-21T00:29:54Z", "path": "library/java/src/io/envoyproxy/envoymobile/engine/JvmStringAccessorContext.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import java.nio.ByteBuffer;\n+\n+import io.envoyproxy.envoymobile.engine.types.EnvoyStringAccessor;\n+\n+class JvmStringAccessorContext {", "originalCommit": "fbb1690b8226388aa875b49c2d1ce116f9ccd505", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4OTgzNw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1188#discussion_r529489837", "bodyText": "The concrete class allows methods to be cached.", "author": "goaway", "createdAt": "2020-11-24T11:55:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzNzc4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzODI2OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1188#discussion_r528038269", "bodyText": "decided to return a ByteBuffer here rather than a String to take advantage of the utilities we already have that bridge it into an envoy_data.\nAlthough it wouldn't be too complicated to create a bridging utility from String to envoy_data if we'd rather use that type.", "author": "junr03", "createdAt": "2020-11-21T00:32:18Z", "path": "library/java/src/io/envoyproxy/envoymobile/engine/types/EnvoyStringAccessor.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package io.envoyproxy.envoymobile.engine.types;\n+\n+import java.nio.ByteBuffer;\n+\n+public interface EnvoyStringAccessor {\n+\n+  /**\n+   * Called to retrieve a string from the Application\n+   */\n+  ByteBuffer getString();", "originalCommit": "fbb1690b8226388aa875b49c2d1ce116f9ccd505", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ5MDE3NQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1188#discussion_r529490175", "bodyText": "Seems fine. Don't we already have a utility for String though?", "author": "goaway", "createdAt": "2020-11-24T11:56:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzODI2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkxOTY2OA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1188#discussion_r529919668", "bodyText": "Not afaict? We have a byte buffer and a byte array utility. I guess the byte array one can be used with a jstring? But you have to copy.", "author": "junr03", "createdAt": "2020-11-24T22:07:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzODI2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4NzA5NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1188#discussion_r529487094", "bodyText": "This is a leak - the local ref needs to be deleted at the end of this function.", "author": "goaway", "createdAt": "2020-11-24T11:51:04Z", "path": "library/common/jni/jni_interface.cc", "diffHunk": "@@ -610,6 +611,19 @@ static const void* jvm_http_filter_init(const void* context) {\n   return retained_filter;\n }\n \n+// EnvoyStringAccessor\n+\n+static envoy_data jvm_get_string(void* context) {\n+  JNIEnv* env = get_env();\n+  jobject j_context = static_cast<jobject>(context);\n+  jclass jcls_JvmStringAccessorContext = env->GetObjectClass(j_context);", "originalCommit": "fbb1690b8226388aa875b49c2d1ce116f9ccd505", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4NzM1OA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1188#discussion_r529487358", "bodyText": "(This is not a leak - jmethodID is an int.)", "author": "goaway", "createdAt": "2020-11-24T11:51:31Z", "path": "library/common/jni/jni_interface.cc", "diffHunk": "@@ -610,6 +611,19 @@ static const void* jvm_http_filter_init(const void* context) {\n   return retained_filter;\n }\n \n+// EnvoyStringAccessor\n+\n+static envoy_data jvm_get_string(void* context) {\n+  JNIEnv* env = get_env();\n+  jobject j_context = static_cast<jobject>(context);\n+  jclass jcls_JvmStringAccessorContext = env->GetObjectClass(j_context);\n+  jmethodID jmid_getString =\n+      env->GetMethodID(jcls_JvmStringAccessorContext, \"getString\", \"()Ljava/lang/Object;\");", "originalCommit": "fbb1690b8226388aa875b49c2d1ce116f9ccd505", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4NzYwMQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1188#discussion_r529487601", "bodyText": "Also leaking.", "author": "goaway", "createdAt": "2020-11-24T11:51:58Z", "path": "library/common/jni/jni_interface.cc", "diffHunk": "@@ -610,6 +611,19 @@ static const void* jvm_http_filter_init(const void* context) {\n   return retained_filter;\n }\n \n+// EnvoyStringAccessor\n+\n+static envoy_data jvm_get_string(void* context) {\n+  JNIEnv* env = get_env();\n+  jobject j_context = static_cast<jobject>(context);\n+  jclass jcls_JvmStringAccessorContext = env->GetObjectClass(j_context);\n+  jmethodID jmid_getString =\n+      env->GetMethodID(jcls_JvmStringAccessorContext, \"getString\", \"()Ljava/lang/Object;\");\n+  // Passed as a java.nio.ByteBuffer.\n+  jobject data = env->CallObjectMethod(j_context, jmid_getString);", "originalCommit": "fbb1690b8226388aa875b49c2d1ce116f9ccd505", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MjI5OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1188#discussion_r529882299", "bodyText": "@goaway you mean the local ref, right?", "author": "junr03", "createdAt": "2020-11-24T21:15:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4NzYwMQ=="}], "type": "inlineReview"}, {"oid": "fe74a2a4c24a24660c358a8906c9a11f68f5a3ee", "url": "https://github.com/envoyproxy/envoy-mobile/commit/fe74a2a4c24a24660c358a8906c9a11f68f5a3ee", "message": "comments\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-11-24T22:05:41Z", "type": "commit"}, {"oid": "a6f16b1c7053e60bf56a439cd58f972c5adf1f69", "url": "https://github.com/envoyproxy/envoy-mobile/commit/a6f16b1c7053e60bf56a439cd58f972c5adf1f69", "message": "add accessor all the way\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-12-01T17:52:21Z", "type": "commit"}, {"oid": "be82552d1711b1100724da34c0e6eaa5f89cfd5c", "url": "https://github.com/envoyproxy/envoy-mobile/commit/be82552d1711b1100724da34c0e6eaa5f89cfd5c", "message": "fmt\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-12-01T18:12:23Z", "type": "commit"}, {"oid": "5659a0199d0103a81cf68e1eac62187c00ed1961", "url": "https://github.com/envoyproxy/envoy-mobile/commit/5659a0199d0103a81cf68e1eac62187c00ed1961", "message": "Merge branch 'main' into register-api\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-12-01T18:12:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4NjAyOQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1188#discussion_r533786029", "bodyText": "Please add a docstring here and clarify that this is ready only.", "author": "goaway", "createdAt": "2020-12-01T23:15:04Z", "path": "library/common/api/c_types.h", "diffHunk": "@@ -0,0 +1,20 @@\n+#pragma once\n+\n+#include \"library/common/types/c_types.h\"\n+\n+// NOLINT(namespace-envoy)\n+\n+#ifdef __cplusplus\n+extern \"C\" { // function pointers\n+#endif\n+\n+typedef envoy_data (*envoy_get_string_f)(void* context);\n+\n+#ifdef __cplusplus\n+} // function pointers\n+#endif\n+\n+typedef struct {", "originalCommit": "5659a0199d0103a81cf68e1eac62187c00ed1961", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4a694d726dc06fa7f8e898e4761ab8c88d3ad57f", "url": "https://github.com/envoyproxy/envoy-mobile/commit/4a694d726dc06fa7f8e898e4761ab8c88d3ad57f", "message": "comments\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-12-02T00:20:41Z", "type": "commit"}, {"oid": "84877a26491b19d00ee7fda7a9a0751207440553", "url": "https://github.com/envoyproxy/envoy-mobile/commit/84877a26491b19d00ee7fda7a9a0751207440553", "message": "fix test\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-12-03T00:58:36Z", "type": "commit"}]}