{"pr_number": 979, "pr_title": "filters: rework callbacks for shared signatures", "pr_createdAt": "2020-07-28T10:26:19Z", "pr_url": "https://github.com/envoyproxy/envoy-mobile/pull/979", "timeline": [{"oid": "3d30b2c56088dc80ce6b728c282d772042e2b647", "url": "https://github.com/envoyproxy/envoy-mobile/commit/3d30b2c56088dc80ce6b728c282d772042e2b647", "message": "filters: wire Android bridge\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-03T09:48:05Z", "type": "forcePushed"}, {"oid": "fe57c16bf76dccbfda9a89e11ab1abe169ea39f1", "url": "https://github.com/envoyproxy/envoy-mobile/commit/fe57c16bf76dccbfda9a89e11ab1abe169ea39f1", "message": "filters: wire Android bridge\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-03T09:52:21Z", "type": "forcePushed"}, {"oid": "727efcf6cf71b8b97fd1203c09e06786ca37b612", "url": "https://github.com/envoyproxy/envoy-mobile/commit/727efcf6cf71b8b97fd1203c09e06786ca37b612", "message": "filters: wire Android bridge\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-04T09:48:25Z", "type": "commit"}, {"oid": "91d041a2b0572fd18cc946bb989ad4cf03329075", "url": "https://github.com/envoyproxy/envoy-mobile/commit/91d041a2b0572fd18cc946bb989ad4cf03329075", "message": "improve header passing across the JNI and make reusable\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-04T09:48:25Z", "type": "commit"}, {"oid": "3abe64e8c471ac19f250c31045bd73e11eb3ed05", "url": "https://github.com/envoyproxy/envoy-mobile/commit/3abe64e8c471ac19f250c31045bd73e11eb3ed05", "message": "the magic\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-04T09:48:25Z", "type": "commit"}, {"oid": "2c895fc83360482b278d72ad509a4c9d45e5096c", "url": "https://github.com/envoyproxy/envoy-mobile/commit/2c895fc83360482b278d72ad509a4c9d45e5096c", "message": "update bridge callback return types\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-04T09:48:25Z", "type": "commit"}, {"oid": "a37fae6a5722f58cdf4f4ba10f7b2a5d4f415a9c", "url": "https://github.com/envoyproxy/envoy-mobile/commit/a37fae6a5722f58cdf4f4ba10f7b2a5d4f415a9c", "message": "fix test\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-04T09:48:25Z", "type": "commit"}, {"oid": "22baef19d5fff72da2619a026828000efe4a9ec8", "url": "https://github.com/envoyproxy/envoy-mobile/commit/22baef19d5fff72da2619a026828000efe4a9ec8", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-04T09:48:25Z", "type": "commit"}, {"oid": "904d455b8ee3b33f3c758e64f50040de20f92217", "url": "https://github.com/envoyproxy/envoy-mobile/commit/904d455b8ee3b33f3c758e64f50040de20f92217", "message": "fix tests\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-04T09:48:25Z", "type": "commit"}, {"oid": "904d455b8ee3b33f3c758e64f50040de20f92217", "url": "https://github.com/envoyproxy/envoy-mobile/commit/904d455b8ee3b33f3c758e64f50040de20f92217", "message": "fix tests\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-04T09:48:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4NzYyNA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/979#discussion_r465387624", "bodyText": "Could we add a couple unit tests for the behaviors expected for this class?", "author": "buildbreaker", "createdAt": "2020-08-04T23:35:05Z", "path": "library/java/src/io/envoyproxy/envoymobile/engine/JvmBridgeUtility.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.envoyproxy.envoymobile.engine.types.EnvoyHTTPCallbacks;\n+\n+/**\n+ * Class to assist with passing types from native code over the JNI. Currently supports\n+ * HTTP headers.\n+ */\n+class JvmBridgeUtility {", "originalCommit": "904d455b8ee3b33f3c758e64f50040de20f92217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5Njg4MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/979#discussion_r465396881", "bodyText": "Yes, though if you're okay with it, I'd prefer to do it in a separate PR to keep things rolling forward on main.", "author": "goaway", "createdAt": "2020-08-05T00:06:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4NzYyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4Nzk2Ng==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/979#discussion_r465387966", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Map headers = headerAccumulator;\n          \n          \n            \n                Map<String, List<String>> headers = headerAccumulator;", "author": "buildbreaker", "createdAt": "2020-08-04T23:36:13Z", "path": "library/java/src/io/envoyproxy/envoymobile/engine/JvmBridgeUtility.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.envoyproxy.envoymobile.engine.types.EnvoyHTTPCallbacks;\n+\n+/**\n+ * Class to assist with passing types from native code over the JNI. Currently supports\n+ * HTTP headers.\n+ */\n+class JvmBridgeUtility {\n+  // State-tracking for header accumulation\n+  private Map<String, List<String>> headerAccumulator = null;\n+  private long headerCount = 0;\n+\n+  JvmBridgeUtility() {}\n+\n+  /**\n+   * Receives pairs of strings passed via the JNI.\n+   *\n+   * @param key,        the name of the HTTP header.\n+   * @param value,      the value of the HTTP header.\n+   * @param start,      indicates this is the first header pair of the block.\n+   */\n+  void passHeader(byte[] key, byte[] value, boolean start) {\n+    if (start) {\n+      assert headerAccumulator == null;\n+      assert headerCount == 0;\n+      headerAccumulator = new HashMap();\n+    }\n+\n+    String headerKey;\n+    String headerValue;\n+\n+    try {\n+      headerKey = new String(key, \"UTF-8\");\n+      headerValue = new String(value, \"UTF-8\");\n+    } catch (java.io.UnsupportedEncodingException e) {\n+      throw new RuntimeException(e);\n+    }\n+\n+    List<String> values = headerAccumulator.get(headerKey);\n+    if (values == null) {\n+      values = new ArrayList(1);\n+      headerAccumulator.put(headerKey, values);\n+    }\n+    values.add(headerValue);\n+    headerCount++;\n+  }\n+\n+  /**\n+   * Retrieves accumulated headers and resets state.\n+   *\n+   * @return Map, a map of header names to one or more values.\n+   */\n+  Map<String, List<String>> retrieveHeaders() {\n+    Map headers = headerAccumulator;", "originalCommit": "904d455b8ee3b33f3c758e64f50040de20f92217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5NjcwNA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/979#discussion_r465396704", "bodyText": "Sure, I don't have strong feelings. Is that more common/idiomatic?", "author": "goaway", "createdAt": "2020-08-05T00:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4Nzk2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5Nzg0Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/979#discussion_r465397842", "bodyText": "Yeah, it's looks a bit bare without the type declarations haha", "author": "buildbreaker", "createdAt": "2020-08-05T00:09:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4Nzk2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4ODMwNA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/979#discussion_r465388304", "bodyText": "This would crash if the validation returns false?", "author": "buildbreaker", "createdAt": "2020-08-04T23:37:16Z", "path": "library/java/src/io/envoyproxy/envoymobile/engine/JvmCallbackContext.java", "diffHunk": "@@ -10,118 +10,67 @@\n import io.envoyproxy.envoymobile.engine.types.EnvoyHTTPCallbacks;\n \n class JvmCallbackContext {\n-  private enum FrameType {\n-    NONE,\n-    HEADERS,\n-    METADATA,\n-    TRAILERS,\n-  }\n-\n+  private final JvmBridgeUtility bridgeUtility;\n   private final EnvoyHTTPCallbacks callbacks;\n \n-  // State-tracking for header accumulation\n-  private Map<String, List<String>> headerAccumulator = null;\n-  private FrameType pendingFrameType = FrameType.NONE;\n-  private boolean pendingEndStream = false;\n-  private long expectedHeaderLength = 0;\n-  private long accumulatedHeaderLength = 0;\n-\n-  public JvmCallbackContext(EnvoyHTTPCallbacks callbacks) { this.callbacks = callbacks; }\n+  public JvmCallbackContext(EnvoyHTTPCallbacks callbacks) {\n+    bridgeUtility = new JvmBridgeUtility();\n+    this.callbacks = callbacks;\n+  }\n \n   /**\n    * Initializes state for accumulating header pairs via passHeaders, ultimately\n    * to be dispatched via the callback.\n    *\n    * @param length,    the total number of headers included in this header block.\n    * @param endStream, whether this header block is the final remote frame.\n+   * @return Void,     not used for response callbacks.\n    */\n-  public void onHeaders(long length, boolean endStream) {\n-    startAccumulation(FrameType.HEADERS, length, endStream);\n+  public Void onHeaders(long headerCount, boolean endStream) {\n+    assert bridgeUtility.validateCount(headerCount);", "originalCommit": "904d455b8ee3b33f3c758e64f50040de20f92217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5NTA1OA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/979#discussion_r465395058", "bodyText": "Yes. It shouldn't ever fail, and the implementation is broken if it fails.", "author": "goaway", "createdAt": "2020-08-04T23:59:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4ODMwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4ODU5NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/979#discussion_r465388594", "bodyText": "What's the difference between ASSERT_TRUE and EXPECT_TRUE?", "author": "buildbreaker", "createdAt": "2020-08-04T23:38:21Z", "path": "test/common/http/dispatcher_test.cc", "diffHunk": "@@ -73,16 +73,18 @@ TEST_F(DispatcherTest, SetDestinationCluster) {\n   callbacks_called cc = {0, 0, 0, 0, 0, 0};\n   bridge_callbacks.context = &cc;\n   bridge_callbacks.on_headers = [](envoy_headers c_headers, bool end_stream,\n-                                   void* context) -> void {\n-    ASSERT_TRUE(end_stream);\n+                                   void* context) -> void* {\n+    EXPECT_TRUE(end_stream);", "originalCommit": "904d455b8ee3b33f3c758e64f50040de20f92217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5MTc1Ng==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/979#discussion_r465391756", "bodyText": "ASSERT_TRUE aborts execution if the expectation fails. It also requires the enclosing function to have a void return type, because it actually calls return. EXPECT_TRUE does not abort execution, and has no requirements on the return-type of the enclosing function. Both will cause the test to fail if the passed assertion/expectation isn't met.", "author": "goaway", "createdAt": "2020-08-04T23:49:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4ODU5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4OTk3OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/979#discussion_r465389979", "bodyText": "I might be missing something, but division into this utility class is not predicated on the returned context, right?", "author": "junr03", "createdAt": "2020-08-04T23:43:05Z", "path": "library/java/src/io/envoyproxy/envoymobile/engine/JvmBridgeUtility.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.envoyproxy.envoymobile.engine.types.EnvoyHTTPCallbacks;\n+\n+/**\n+ * Class to assist with passing types from native code over the JNI. Currently supports\n+ * HTTP headers.\n+ */\n+class JvmBridgeUtility {", "originalCommit": "904d455b8ee3b33f3c758e64f50040de20f92217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5MjAzNQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/979#discussion_r465392035", "bodyText": "No, but it does encapsulate the complexity a bit better (imo), and it allows re-use (in the case of filters).", "author": "goaway", "createdAt": "2020-08-04T23:50:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4OTk3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5MDIyOQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/979#discussion_r465390229", "bodyText": "As far as I can tell the returned contexts are not getting used anywhere yet right?", "author": "junr03", "createdAt": "2020-08-04T23:44:01Z", "path": "library/common/jni/jni_interface.cc", "diffHunk": "@@ -143,22 +143,23 @@ static JNIEnv* get_env() {\n   return env;\n }\n \n-static void jvm_on_headers(envoy_headers headers, bool end_stream, void* context) {\n+static void* jvm_on_headers(envoy_headers headers, bool end_stream, void* context) {\n   JNIEnv* env = get_env();\n   jobject j_context = static_cast<jobject>(context);\n+  pass_headers(env, headers, j_context);\n \n   jclass jcls_JvmCallbackContext = env->GetObjectClass(j_context);\n   jmethodID jmid_onHeaders = env->GetMethodID(jcls_JvmCallbackContext, \"onHeaders\", \"(JZ)V\");\n   // Note: be careful of JVM types. Before we casted to jlong we were getting integer problems.\n   // TODO: make this cast safer.\n-  env->CallVoidMethod(j_context, jmid_onHeaders, (jlong)headers.length,\n-                      end_stream ? JNI_TRUE : JNI_FALSE);\n+  jobject result = env->CallObjectMethod(j_context, jmid_onHeaders, (jlong)headers.length,\n+                                         end_stream ? JNI_TRUE : JNI_FALSE);\n \n   env->DeleteLocalRef(jcls_JvmCallbackContext);\n-  pass_headers(env, headers, j_context);\n+  return result;", "originalCommit": "904d455b8ee3b33f3c758e64f50040de20f92217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5MjE3NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/979#discussion_r465392174", "bodyText": "Correct, they're used in the subsequent PR I have for filters.", "author": "goaway", "createdAt": "2020-08-04T23:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5MDIyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5MDQzNA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/979#discussion_r465390434", "bodyText": "what is capital V void?", "author": "junr03", "createdAt": "2020-08-04T23:44:39Z", "path": "library/java/src/io/envoyproxy/envoymobile/engine/JvmCallbackContext.java", "diffHunk": "@@ -10,118 +10,67 @@\n import io.envoyproxy.envoymobile.engine.types.EnvoyHTTPCallbacks;\n \n class JvmCallbackContext {\n-  private enum FrameType {\n-    NONE,\n-    HEADERS,\n-    METADATA,\n-    TRAILERS,\n-  }\n-\n+  private final JvmBridgeUtility bridgeUtility;\n   private final EnvoyHTTPCallbacks callbacks;\n \n-  // State-tracking for header accumulation\n-  private Map<String, List<String>> headerAccumulator = null;\n-  private FrameType pendingFrameType = FrameType.NONE;\n-  private boolean pendingEndStream = false;\n-  private long expectedHeaderLength = 0;\n-  private long accumulatedHeaderLength = 0;\n-\n-  public JvmCallbackContext(EnvoyHTTPCallbacks callbacks) { this.callbacks = callbacks; }\n+  public JvmCallbackContext(EnvoyHTTPCallbacks callbacks) {\n+    bridgeUtility = new JvmBridgeUtility();\n+    this.callbacks = callbacks;\n+  }\n \n   /**\n    * Initializes state for accumulating header pairs via passHeaders, ultimately\n    * to be dispatched via the callback.\n    *\n    * @param length,    the total number of headers included in this header block.\n    * @param endStream, whether this header block is the final remote frame.\n+   * @return Void,     not used for response callbacks.\n    */\n-  public void onHeaders(long length, boolean endStream) {\n-    startAccumulation(FrameType.HEADERS, length, endStream);\n+  public Void onHeaders(long headerCount, boolean endStream) {", "originalCommit": "904d455b8ee3b33f3c758e64f50040de20f92217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5MzQ3Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/979#discussion_r465393477", "bodyText": "https://docs.oracle.com/javase/7/docs/api/java/lang/Void.html\nNote, we could use any other non-instantiable type here, including our own. But Void is built in, and there's some precedent/convention for using Void for this purpose.", "author": "goaway", "createdAt": "2020-08-04T23:54:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5MDQzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0OTIxMQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/979#discussion_r466049211", "bodyText": "I see so it is the java way of returning a void*?", "author": "junr03", "createdAt": "2020-08-05T22:57:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5MDQzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIzNTAxMA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/979#discussion_r466235010", "bodyText": "Effectively, yes. I switched over to Object though as you can see, due to an issue with JNI signature lookup.", "author": "goaway", "createdAt": "2020-08-06T08:28:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5MDQzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5MTAzNQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/979#discussion_r465391035", "bodyText": "Do you foresee the context being passed down all the way to the Http::Dispatcher or stopping in the bridge layer?\nI ask because it would be great if instead of just updating the return type here we could actually cover the change with testing. But obviously the dispatcher is not seeing the context yet (or ever, hence my question).", "author": "junr03", "createdAt": "2020-08-04T23:46:39Z", "path": "test/common/http/dispatcher_test.cc", "diffHunk": "@@ -73,16 +73,18 @@ TEST_F(DispatcherTest, SetDestinationCluster) {\n   callbacks_called cc = {0, 0, 0, 0, 0, 0};\n   bridge_callbacks.context = &cc;\n   bridge_callbacks.on_headers = [](envoy_headers c_headers, bool end_stream,\n-                                   void* context) -> void {\n-    ASSERT_TRUE(end_stream);\n+                                   void* context) -> void* {\n+    EXPECT_TRUE(end_stream);\n     ResponseHeaderMapPtr response_headers = toResponseHeaders(c_headers);\n     EXPECT_EQ(response_headers->Status()->value().getStringView(), \"200\");\n     callbacks_called* cc = static_cast<callbacks_called*>(context);\n     cc->on_headers_calls++;\n+    return nullptr;", "originalCommit": "904d455b8ee3b33f3c758e64f50040de20f92217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5NDM5Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/979#discussion_r465394392", "bodyText": "The dispatcher has no need to see it, since it doesn't utilize any signals returned by callbacks. So my inclination would be not to expose it at all there. My line of thinking was that the existing tests actually do cover the change, since they demonstrate that it causes no change in underlying functionality. Additional coverage will be needed for filters usage, of course.", "author": "goaway", "createdAt": "2020-08-04T23:57:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5MTAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0ODE3NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/979#discussion_r466048174", "bodyText": "Just so I understand: we're returning a nullptr here since we don't expect the consumer (the dispatcher) to use the return value?", "author": "buildbreaker", "createdAt": "2020-08-05T22:55:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5MTAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0OTk5Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/979#discussion_r466049992", "bodyText": "The dispatcher has no need to see it, since it doesn't utilize any signals returned by callbacks. So my inclination would be not to expose it at all there.\n\nok, that was my read of it.", "author": "junr03", "createdAt": "2020-08-05T23:00:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5MTAzNQ=="}], "type": "inlineReview"}, {"oid": "be56f82ca11ac4d599b2dfef17688cb25ccd9cea", "url": "https://github.com/envoyproxy/envoy-mobile/commit/be56f82ca11ac4d599b2dfef17688cb25ccd9cea", "message": "add Map type\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-05T09:55:30Z", "type": "commit"}, {"oid": "7a489ba5dd421615c213840af204727d57e75998", "url": "https://github.com/envoyproxy/envoy-mobile/commit/7a489ba5dd421615c213840af204727d57e75998", "message": "fix invocation path\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-05T10:51:59Z", "type": "commit"}, {"oid": "f605878f39bfb1661876864b036097673622afb3", "url": "https://github.com/envoyproxy/envoy-mobile/commit/f605878f39bfb1661876864b036097673622afb3", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-05T10:53:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0NjgzNA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/979#discussion_r466046834", "bodyText": "This isn't related to this PR but do we want to remove the on metadata callbacks since we are not using them or exposing them?", "author": "buildbreaker", "createdAt": "2020-08-05T22:51:12Z", "path": "library/common/jni/jni_interface.cc", "diffHunk": "@@ -175,41 +181,47 @@ static void jvm_on_data(envoy_data data, bool end_stream, void* context) {\n   // Here '0' (for which there is no named constant) indicates we want to commit the changes back\n   // to the JVM and free the c array, where applicable.\n   env->ReleasePrimitiveArrayCritical(j_data, critical_data, 0);\n-  env->CallVoidMethod(j_context, jmid_onData, j_data, end_stream ? JNI_TRUE : JNI_FALSE);\n+  jobject result =\n+      env->CallObjectMethod(j_context, jmid_onData, j_data, end_stream ? JNI_TRUE : JNI_FALSE);\n \n   data.release(data.context);\n   env->DeleteLocalRef(j_data);\n   env->DeleteLocalRef(jcls_JvmCallbackContext);\n+  return result;\n }\n \n-static void jvm_on_metadata(envoy_headers metadata, void* context) {\n+static void* jvm_on_metadata(envoy_headers metadata, void* context) {", "originalCommit": "f605878f39bfb1661876864b036097673622afb3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}