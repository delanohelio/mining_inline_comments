{"pr_number": 840, "pr_title": "filters: add kotlin filter interfaces", "pr_createdAt": "2020-05-12T01:50:32Z", "pr_url": "https://github.com/envoyproxy/envoy-mobile/pull/840", "timeline": [{"oid": "7ee6850e0e98003af3f7e4c2256170f840e9a4be", "url": "https://github.com/envoyproxy/envoy-mobile/commit/7ee6850e0e98003af3f7e4c2256170f840e9a4be", "message": "filters: add kotlin filter interfaces\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-05-12T01:49:48Z", "type": "commit"}, {"oid": "5eaa0e8bb97098589097178a9018aa221128fe1a", "url": "https://github.com/envoyproxy/envoy-mobile/commit/5eaa0e8bb97098589097178a9018aa221128fe1a", "message": "fmt\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-05-12T01:52:21Z", "type": "commit"}, {"oid": "6fb9693deb0b074b1f408b1526748b33e0ef22d3", "url": "https://github.com/envoyproxy/envoy-mobile/commit/6fb9693deb0b074b1f408b1526748b33e0ef22d3", "message": "update\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-05-12T20:07:43Z", "type": "commit"}, {"oid": "2722caf1910f6b80acfea1147df66421ff7281f8", "url": "https://github.com/envoyproxy/envoy-mobile/commit/2722caf1910f6b80acfea1147df66421ff7281f8", "message": "green\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-05-12T20:22:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAxMDUyNw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424010527", "bodyText": "We are missing builders for ResponseHeaders/Trailers for both kotlin and swift.", "author": "junr03", "createdAt": "2020-05-12T20:22:51Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/BUILD", "diffHunk": "@@ -40,17 +40,34 @@ envoy_mobile_kt_library(\n         \"EnvoyClientBuilder.kt\",\n         \"EnvoyError.kt\",\n         \"EnvoyStreamEmitter.kt\",\n+        \"Filter.kt\",\n+        \"FilterDataStatus.kt\",\n+        \"FilterHeaderStatus.kt\",\n+        \"FilterRegistry.kt\",\n+        \"FilterTrailerStatus.kt\",\n         \"GRPCClient.kt\",\n         \"GRPCRequestBuilder.kt\",\n         \"GRPCResponseHandler.kt\",\n         \"GRPCStreamEmitter.kt\",\n         \"HTTPClient.kt\",\n+        \"Headers.kt\",\n+        \"HeadersBuilder.kt\",\n         \"LogLevel.kt\",\n         \"Request.kt\",\n         \"RequestBuilder.kt\",\n+        \"RequestFilter.kt\",\n+        \"RequestFilterCallbacks.kt\",\n+        \"RequestHeaders.kt\",\n+        \"RequestHeadersBuilder.kt\",\n         \"RequestMapper.kt\",\n         \"RequestMethod.kt\",\n+        \"RequestTrailersBuilder.kt\",\n+        \"RequestTrailers.kt\",\n+        \"ResponseFilter.kt\",\n+        \"ResponseFilterCallbacks.kt\",\n         \"ResponseHandler.kt\",\n+        \"ResponseHeaders.kt\",", "originalCommit": "2722caf1910f6b80acfea1147df66421ff7281f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2ODIzOQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424168239", "bodyText": "Ah yea we should add those. Originally I thought they wouldn't be necessary, but since we'll allow filters to add/mutate response headers/trailers, we'll need to add those. Can do in a separate PR (maybe comment on the issue?)", "author": "rebello95", "createdAt": "2020-05-13T04:39:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAxMDUyNw=="}], "type": "inlineReview"}, {"oid": "9d671b1b94349a2dbe58c98408cef97169ebd936", "url": "https://github.com/envoyproxy/envoy-mobile/commit/9d671b1b94349a2dbe58c98408cef97169ebd936", "message": "fmt\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-05-12T20:37:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyMDM5Mw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424020393", "bodyText": "Can we add a TODO for fixing the linter from being this strict?", "author": "buildbreaker", "createdAt": "2020-05-12T20:41:46Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/Headers.kt", "diffHunk": "@@ -0,0 +1,30 @@\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * Base class that is used to represent header/trailer data structures.\n+ * To instantiate new instances, see `{Request|Response}HeadersBuilder`.\n+ */\n+open class Headers {\n+  @Suppress(\"MemberNameEqualsClassName\")", "originalCommit": "2722caf1910f6b80acfea1147df66421ff7281f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5ODMzOQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424698339", "bodyText": "My personal bias is to make it intentional to suppress the linter rather than making the linter less-strict. But I am draconian like that.\nThis way we don't fall into anti-patterns (according to the linter's convention) without giving it thought.", "author": "junr03", "createdAt": "2020-05-13T20:03:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyMDM5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyMDU1OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424020559", "bodyText": "Let's add a TODO for avoid linting on this", "author": "buildbreaker", "createdAt": "2020-05-12T20:42:04Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/Filter.kt", "diffHunk": "@@ -0,0 +1,7 @@\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * Interface representing a filter. See `RequestFilter` and `ResponseFilter` for more details.\n+ */\n+@Suppress(\"EmptyClassBlock\")", "originalCommit": "2722caf1910f6b80acfea1147df66421ff7281f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5ODgzMQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424698831", "bodyText": "same as other comment", "author": "junr03", "createdAt": "2020-05-13T20:04:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyMDU1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyODUwMA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424028500", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import java.lang.IllegalArgumentException\n          \n          \n            \n            \n          \n          \n            \n            import java.lang.IllegalArgumentException", "author": "buildbreaker", "createdAt": "2020-05-12T20:56:35Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/RequestMethod.kt", "diffHunk": "@@ -1,5 +1,5 @@\n package io.envoyproxy.envoymobile\n-\n+import java.lang.IllegalArgumentException", "originalCommit": "9d671b1b94349a2dbe58c98408cef97169ebd936", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyODc1OA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424028758", "bodyText": "Is this actually needed? We can add a TODO for removing this lint check", "author": "buildbreaker", "createdAt": "2020-05-12T20:57:03Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/RequestTrailers.kt", "diffHunk": "@@ -0,0 +1,14 @@\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * Trailers representing an outbound request.\n+ */\n+@Suppress(\"EmptyClassBlock\")", "originalCommit": "9d671b1b94349a2dbe58c98408cef97169ebd936", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5ODkzMQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424698931", "bodyText": "same as other comment", "author": "junr03", "createdAt": "2020-05-13T20:04:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyODc1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyOTQ5MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424029491", "bodyText": "@rebello95 Could you give insight onto how we can find this out (or help find this out for us?)", "author": "buildbreaker", "createdAt": "2020-05-12T20:58:24Z", "path": "library/swift/src/RetryPolicyMapper.swift", "diffHunk": "@@ -36,8 +36,10 @@ extension RetryPolicy {\n     self.init(\n       maxRetryCount: maxRetryCount,\n       retryOn: headers.value(forName: \"x-envoy-retry-on\")?.compactMap(RetryRule.init) ?? [],\n+      // TODO: does the UInt.init blow up? or does it return nil?", "originalCommit": "9d671b1b94349a2dbe58c98408cef97169ebd936", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2NzkwNw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424167907", "bodyText": "Just checked, and mapping String to UInt* here just returns nil if it's not a valid unsigned int", "author": "rebello95", "createdAt": "2020-05-13T04:38:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyOTQ5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyOTczNg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424029736", "bodyText": "@rebello95 Same here, do we error out when a :status is not a number?", "author": "buildbreaker", "createdAt": "2020-05-12T20:58:56Z", "path": "library/swift/src/ResponseHeaders.swift", "diffHunk": "@@ -4,6 +4,7 @@ import Foundation\n @objcMembers\n public final class ResponseHeaders: Headers {\n   /// HTTP status code received with the response.\n+  /// TODO: in Kotlin this blows up if the value of status cannot be translated to an int.", "originalCommit": "9d671b1b94349a2dbe58c98408cef97169ebd936", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MDM4MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424170381", "bodyText": "Commented above, but swift returns nil in the case of an invalid :status which I think makes sense, especially if at some point we have internal headers generated by Envoy/Envoy Mobile in the future that don't contain this header", "author": "rebello95", "createdAt": "2020-05-13T04:49:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyOTczNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NzczOQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424697739", "bodyText": "update kotlin with an optional. Although the server-side bias in me wishes we blew up.", "author": "junr03", "createdAt": "2020-05-13T20:02:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyOTczNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5ODk2Mw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425398963", "bodyText": "I feel we should blow up but let's keep it consistent for now and we can have a separate discussion about these details after. What do you think?", "author": "buildbreaker", "createdAt": "2020-05-14T20:05:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyOTczNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyOTg5Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424029897", "bodyText": "Nice catch!", "author": "buildbreaker", "createdAt": "2020-05-12T20:59:15Z", "path": "library/swift/src/ResponseFilterCallbacks.swift", "diffHunk": "@@ -20,5 +21,5 @@ public protocol ResponseFilterCallbacks {\n   /// `endStream = true` in order to guarantee that the client will not send its own trailers.\n   ///\n   /// - parameter trailers: The trailers to add and pass to subsequent filters.\n-  func addResponseTrailers() -> ResponseHeaders\n+  func addResponseTrailers(_ trailers: ResponseTrailers)", "originalCommit": "9d671b1b94349a2dbe58c98408cef97169ebd936", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzMDI2Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424030267", "bodyText": "Is this still relevant since you've added the enumValue() method in the class?", "author": "buildbreaker", "createdAt": "2020-05-12T20:59:51Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/RetryPolicyMapper.kt", "diffHunk": "@@ -30,6 +30,7 @@ internal fun RetryPolicy.outboundHeaders(): Map<String, List<String>> {\n  *\n  * @return The string representation of the retry rule\n  */\n+ //TODO: change to enum pattern in UpstreamHttpProtocol", "originalCommit": "9d671b1b94349a2dbe58c98408cef97169ebd936", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5OTkxNw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424699917", "bodyText": "yep I mean I wanted to update the enum classes to be enum class RetryRule(internal val stringValue: String) {...} to avoid having the stringValue() method. I have updated RequestMethod and RetryRule.", "author": "junr03", "createdAt": "2020-05-13T20:06:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzMDI2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzMDYyNg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424030626", "bodyText": "Contingent on https://github.com/lyft/envoy-mobile/pull/840/files#r424029491", "author": "buildbreaker", "createdAt": "2020-05-12T21:00:23Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/RetryPolicy.kt", "diffHunk": "@@ -25,6 +25,22 @@ data class RetryPolicy(\n       throw IllegalArgumentException(\"Per-retry timeout cannot be less than total timeout\")\n     }\n   }\n+\n+  /**\n+   * Initialize the retry policy from a set of headers.\n+   *\n+   * @param headers: The headers with which to initialize the retry policy.\n+   */\n+  constructor(headers: Headers): this(\n+      headers.value(\"x-envoy-max-retries\")?.first()!!.toInt(),\n+      // TODO: should we have ? after the map?", "originalCommit": "9d671b1b94349a2dbe58c98408cef97169ebd936", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcwNTAzOQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424705039", "bodyText": "I guess my question is what optional is the ? after map talking about? The first one is because the key x-envoy-retry-on might not be in the headers map so the list is optional. But the return type of map is List<T>, so I am not sure what ? means there because I understood the first ? meaning that we only call map if the list is there.", "author": "junr03", "createdAt": "2020-05-13T20:15:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzMDYyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0ODQ1Ng==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425348456", "bodyText": "Yea I'm actually curious about this as well", "author": "rebello95", "createdAt": "2020-05-14T18:32:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzMDYyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4NzE2NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425387164", "bodyText": "Are you talking about the elvis symbol ?: here rather than the ? symbol?", "author": "buildbreaker", "createdAt": "2020-05-14T19:43:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzMDYyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2ODc2OA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424168768", "bodyText": "In Swift these are computed and are only computed when they're accessed by the consumer. Is it possible to do that here @buildbreaker?", "author": "rebello95", "createdAt": "2020-05-13T04:42:10Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/RequestHeaders.kt", "diffHunk": "@@ -0,0 +1,55 @@\n+\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * Headers representing an outbound request.\n+ */\n+class RequestHeaders: Headers {\n+  /**\n+   * Internal constructor used by builders.\n+   *\n+   * @param headers: Headers to set.\n+   */\n+  internal constructor(headers: Map<String, List<String>>) : super(headers)\n+\n+  /**\n+   * Method for the request.\n+   */\n+  val method = RequestMethod.enumValue(value(\":method\")?.first()!!)", "originalCommit": "9d671b1b94349a2dbe58c98408cef97169ebd936", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyNjcyMQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424726721", "bodyText": "yeah we have to use the lazy keyword: https://stackoverflow.com/questions/36623177/kotlin-property-initialization-using-by-lazy-vs-lateinit", "author": "buildbreaker", "createdAt": "2020-05-13T20:57:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2ODc2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMjYzMQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424732631", "bodyText": "thanks, done!", "author": "junr03", "createdAt": "2020-05-13T21:09:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2ODc2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2ODkxMw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424168913", "bodyText": "This is optional/nullable, so we probably should not force unwrap here", "author": "rebello95", "createdAt": "2020-05-13T04:42:45Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/RequestHeaders.kt", "diffHunk": "@@ -0,0 +1,55 @@\n+\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * Headers representing an outbound request.\n+ */\n+class RequestHeaders: Headers {\n+  /**\n+   * Internal constructor used by builders.\n+   *\n+   * @param headers: Headers to set.\n+   */\n+  internal constructor(headers: Map<String, List<String>>) : super(headers)\n+\n+  /**\n+   * Method for the request.\n+   */\n+  val method = RequestMethod.enumValue(value(\":method\")?.first()!!)\n+\n+  /**\n+   * The URL scheme for the request (i.e., \"https\").\n+   */\n+  val scheme = value(\":scheme\")?.first()!!\n+\n+  /**\n+   * The URL authority for the request (i.e., \"api.foo.com\").\n+   */\n+  val authority = value(\":authority\")?.first()!!\n+\n+  /**\n+   * The URL path for the request (i.e., \"/foo\").\n+   */\n+  val path = value(\":path\")?.first()!!\n+\n+  /**\n+   * Retry policy to use for this request.\n+   */\n+  // TODO: retry policy mapper\n+  val retryPolicy = RetryPolicy(this)\n+\n+  /**\n+   * The protocol version to use for upstream requests.\n+   */\n+  val upstreamHttpProtocol =\n+    UpstreamHttpProtocol.enumValue(value(\"x-envoy-mobile-upstream-protocol\")?.first()!!)", "originalCommit": "9d671b1b94349a2dbe58c98408cef97169ebd936", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2ODk5Ng==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424168996", "bodyText": "What's necessary to do here?", "author": "rebello95", "createdAt": "2020-05-13T04:43:02Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/RequestHeaders.kt", "diffHunk": "@@ -0,0 +1,55 @@\n+\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * Headers representing an outbound request.\n+ */\n+class RequestHeaders: Headers {\n+  /**\n+   * Internal constructor used by builders.\n+   *\n+   * @param headers: Headers to set.\n+   */\n+  internal constructor(headers: Map<String, List<String>>) : super(headers)\n+\n+  /**\n+   * Method for the request.\n+   */\n+  val method = RequestMethod.enumValue(value(\":method\")?.first()!!)\n+\n+  /**\n+   * The URL scheme for the request (i.e., \"https\").\n+   */\n+  val scheme = value(\":scheme\")?.first()!!\n+\n+  /**\n+   * The URL authority for the request (i.e., \"api.foo.com\").\n+   */\n+  val authority = value(\":authority\")?.first()!!\n+\n+  /**\n+   * The URL path for the request (i.e., \"/foo\").\n+   */\n+  val path = value(\":path\")?.first()!!\n+\n+  /**\n+   * Retry policy to use for this request.\n+   */\n+  // TODO: retry policy mapper", "originalCommit": "9d671b1b94349a2dbe58c98408cef97169ebd936", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcwNjA4MA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424706080", "bodyText": "stale", "author": "junr03", "createdAt": "2020-05-13T20:17:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2ODk5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2OTQ2MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424169461", "bodyText": "I think we should probably avoid throwing an exception here if possible to match Swift", "author": "rebello95", "createdAt": "2020-05-13T04:45:09Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/ResponseHeaders.kt", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * Headers representing an inbound response.\n+ */\n+class ResponseHeaders: Headers {\n+  /**\n+   * Internal constructor used by builders.\n+   *\n+   * @param headers: Headers to set.\n+   */\n+  internal constructor(headers: Map<String, List<String>>) : super(headers)\n+\n+  /**\n+   * HTTP status code received with the response.\n+   */\n+  val httpStatus = value(\":status\")?.first()?.toInt()", "originalCommit": "9d671b1b94349a2dbe58c98408cef97169ebd936", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2OTcwNw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424169707", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              func onRequestTrailers(_ trailers: RequestTrailers) -> FilterTrailerStatus<RequestHeaders>\n          \n          \n            \n              func onRequestTrailers(_ trailers: RequestTrailers) -> FilterTrailerStatus<RequestTrailers>\n          \n      \n    \n    \n  \n\nMissed one \ud83d\ude09", "author": "rebello95", "createdAt": "2020-05-13T04:46:20Z", "path": "library/swift/src/RequestFilter.swift", "diffHunk": "@@ -36,5 +36,5 @@ public protocol RequestFilter: Filter {\n   /// - parameter trailers: The outbound trailers.\n   ///\n   /// - returns: The trailer status containing body with which to continue or buffer.\n-  func onRequestTrailers(_ trailers: RequestHeaders) -> FilterTrailerStatus<RequestHeaders>\n+  func onRequestTrailers(_ trailers: RequestTrailers) -> FilterTrailerStatus<RequestHeaders>", "originalCommit": "9d671b1b94349a2dbe58c98408cef97169ebd936", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2OTk1Mw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424169953", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /// Interface for RequestFilters to access FilterManager state.\n          \n          \n            \n            /// Interface for RequestFilters to access FilterManager state.\n          \n      \n    \n    \n  \n\nMight want to remove this (same in Kotlin) for now since we haven't yet confirmed if FilterManager will be a class or where that logic will live", "author": "rebello95", "createdAt": "2020-05-13T04:47:30Z", "path": "library/swift/src/RequestFilterCallbacks.swift", "diffHunk": "@@ -1,5 +1,6 @@\n import Foundation\n \n+/// Interface for RequestFilters to access FilterManager state.", "originalCommit": "9d671b1b94349a2dbe58c98408cef97169ebd936", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MDAzNg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424170036", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /// Builder used for constructing instances of `RequestTrailers` type.\n          \n          \n            \n            /// Builder used for constructing instances of the `RequestTrailers` type.", "author": "rebello95", "createdAt": "2020-05-13T04:47:42Z", "path": "library/swift/src/RequestTrailersBuilder.swift", "diffHunk": "@@ -1,6 +1,6 @@\n import Foundation\n \n-/// Builder used for constructing instances of `RequestTrailers` types.\n+/// Builder used for constructing instances of `RequestTrailers` type.", "originalCommit": "9d671b1b94349a2dbe58c98408cef97169ebd936", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MDEyOQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424170129", "bodyText": "This was \"types\" before since we have multiple subclasses, but no strong opinion (let's just keep them all consistent)", "author": "rebello95", "createdAt": "2020-05-13T04:48:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MDAzNg=="}], "type": "inlineReview"}, {"oid": "63aac4c217b06355beb3818d1879f470128ec57e", "url": "https://github.com/envoyproxy/envoy-mobile/commit/63aac4c217b06355beb3818d1879f470128ec57e", "message": "Merge branch 'master' into kotlin-filters\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-05-13T20:30:15Z", "type": "commit"}, {"oid": "d3b28689191116d6ba62b84e262286eef6b238f3", "url": "https://github.com/envoyproxy/envoy-mobile/commit/d3b28689191116d6ba62b84e262286eef6b238f3", "message": "comments\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-05-13T20:53:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyNjQ4Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424726487", "bodyText": "https://www.hackingwithswift.com/articles/205/whats-the-difference-between-map-flatmap-and-compactmap", "author": "junr03", "createdAt": "2020-05-13T20:57:21Z", "path": "library/swift/src/RetryPolicyMapper.swift", "diffHunk": "@@ -38,6 +38,7 @@ extension RetryPolicy {\n       retryOn: headers.value(forName: \"x-envoy-retry-on\")?.compactMap(RetryRule.init) ?? [],\n       retryStatusCodes: headers.value(forName: \"x-envoy-retriable-status-codes\")?\n         .compactMap(UInt.init) ?? [],\n+      // TODO: is the flatmap to apply the constructor even if there is only one value?", "originalCommit": "d3b28689191116d6ba62b84e262286eef6b238f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dff47d79cbe7776b490b8fe4c26fc09266ff5daa", "url": "https://github.com/envoyproxy/envoy-mobile/commit/dff47d79cbe7776b490b8fe4c26fc09266ff5daa", "message": "remove todo\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-05-13T20:57:32Z", "type": "commit"}, {"oid": "23feee94ac3038e6f22ea2959783eb7297c3dc37", "url": "https://github.com/envoyproxy/envoy-mobile/commit/23feee94ac3038e6f22ea2959783eb7297c3dc37", "message": "lazy\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-05-13T21:09:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMzAyNQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r424733025", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              val method = RequestMethod.enumValue(value(\":method\")?.first()!!)\n          \n          \n            \n              val method by lazy { RequestMethod.enumValue(value(\":method\")?.first()!!) }", "author": "buildbreaker", "createdAt": "2020-05-13T21:10:35Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/RequestHeaders.kt", "diffHunk": "@@ -0,0 +1,54 @@\n+\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * Headers representing an outbound request.\n+ */\n+class RequestHeaders: Headers {\n+  /**\n+   * Internal constructor used by builders.\n+   *\n+   * @param headers: Headers to set.\n+   */\n+  internal constructor(headers: Map<String, List<String>>) : super(headers)\n+\n+  /**\n+   * Method for the request.\n+   */\n+  val method = RequestMethod.enumValue(value(\":method\")?.first()!!)", "originalCommit": "dff47d79cbe7776b490b8fe4c26fc09266ff5daa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0NTM1OA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425345358", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              fun onRequestTrailers(trailers: RequestTrailers): FilterTrailerStatus<RequestHeaders>\n          \n          \n            \n              fun onRequestTrailers(trailers: RequestTrailers): FilterTrailerStatus<RequestTrailers>", "author": "rebello95", "createdAt": "2020-05-14T18:26:32Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/RequestFilter.kt", "diffHunk": "@@ -0,0 +1,52 @@\n+package io.envoyproxy.envoymobile\n+\n+import java.nio.ByteBuffer\n+\n+/*\n+ * Filter executed for outbound requests, providing the ability to observe and mutate streams.\n+ */\n+interface RequestFilter: Filter {\n+  /**\n+   * Called by the filter manager once to initialize the filter callbacks that the filter should\n+   * use.\n+   *\n+   * @param callbacks: The callbacks for this filter to use to interact with the chain.\n+   */\n+  fun setRequestFilterCallbacks(callbacks: RequestFilterCallbacks)\n+\n+  /**\n+   * Called once when the request is initiated.\n+   *\n+   * Filters may mutate or delay the request headers.\n+   *\n+   * @param headers:   The current request headers.\n+   * @param endStream: Whether this is a headers-only request.\n+   *\n+   * @return: The header status containing headers with which to continue or buffer.\n+   */\n+  fun onRequestHeaders(headers: RequestHeaders, endStream: Boolean):\n+    FilterHeaderStatus<RequestHeaders>\n+\n+  /**\n+   * Called any number of times whenever body data is sent.\n+   *\n+   * Filters may mutate or buffer (defer and concatenate) the data.\n+   *\n+   * @param body:      The outbound body data chunk.\n+   * @param endStream: Whether this is the last data frame.\n+   *\n+   * @return: The data status containing body with which to continue or buffer.\n+   */\n+  fun onRequestData(body: ByteBuffer, endStream: Boolean): FilterDataStatus\n+\n+  /**\n+   * Called at most once when the request is closed from the client with trailers.\n+   *\n+   * Filters may mutate or delay the trailers.\n+   *\n+   * @param trailers: The outbound trailers.\n+   *\n+   * @return: The trailer status containing body with which to continue or buffer.\n+   */\n+  fun onRequestTrailers(trailers: RequestTrailers): FilterTrailerStatus<RequestHeaders>", "originalCommit": "23feee94ac3038e6f22ea2959783eb7297c3dc37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0NTgxNg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425345816", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              val retryPolicy: RetryPolicy by lazy { RetryPolicy(this) }\n          \n          \n            \n              val retryPolicy: RetryPolicy? by lazy { RetryPolicy(this) }\n          \n      \n    \n    \n  \n\nShouldn't this be optional?", "author": "rebello95", "createdAt": "2020-05-14T18:27:20Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/RequestHeaders.kt", "diffHunk": "@@ -0,0 +1,55 @@\n+\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * Headers representing an outbound request.\n+ */\n+class RequestHeaders: Headers {\n+  /**\n+   * Internal constructor used by builders.\n+   *\n+   * @param headers: Headers to set.\n+   */\n+  internal constructor(headers: Map<String, List<String>>) : super(headers)\n+\n+  /**\n+   * Method for the request.\n+   */\n+  val method: RequestMethod by lazy { RequestMethod.enumValue(value(\":method\")?.first()!!) }\n+\n+  /**\n+   * The URL scheme for the request (i.e., \"https\").\n+   */\n+  val scheme: String by lazy { value(\":scheme\")?.first()!! }\n+\n+  /**\n+   * The URL authority for the request (i.e., \"api.foo.com\").\n+   */\n+  val authority: String by lazy { value(\":authority\")?.first()!! }\n+\n+  /**\n+   * The URL path for the request (i.e., \"/foo\").\n+   */\n+  val path: String by lazy { value(\":path\")?.first()!! }\n+\n+  /**\n+   * Retry policy to use for this request.\n+   */\n+  val retryPolicy: RetryPolicy by lazy { RetryPolicy(this) }", "originalCommit": "23feee94ac3038e6f22ea2959783eb7297c3dc37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4Mjg4OA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425382888", "bodyText": "Constructors cannot return null", "author": "buildbreaker", "createdAt": "2020-05-14T19:35:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0NTgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4NTYxMg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425385612", "bodyText": "The constructor is not a \"failable\" constructor, no such concept in Kotlin afaict.", "author": "junr03", "createdAt": "2020-05-14T19:40:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0NTgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwMjY5Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425402697", "bodyText": "@junr03 I think we should keep consistency here for this PR. It's a little weird/strange of a thing to do but we'll need to do something like this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              val retryPolicy: RetryPolicy by lazy { RetryPolicy(this) }\n          \n          \n            \n              val retryPolicy: RetryPolicy? by lazy {\n          \n          \n            \n                try {\n          \n          \n            \n                  RetryPolicy(this)\n          \n          \n            \n                } catch (t: Throwable) {\n          \n          \n            \n                  null\n          \n          \n            \n                }\n          \n          \n            \n              }", "author": "buildbreaker", "createdAt": "2020-05-14T20:12:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0NTgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQyOTYyNA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425429624", "bodyText": "Yea +1 to this. Another option would be to make a static function that returns an optional ReturnPolicy? instead of having a throwing constructor. Not sure which is more \"acceptable\" \ud83e\udd37", "author": "rebello95", "createdAt": "2020-05-14T21:04:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0NTgxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0NjkwNQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425346905", "bodyText": "\ud83e\udd14 how'd this work before? Do they work the same way @buildbreaker?", "author": "rebello95", "createdAt": "2020-05-14T18:29:16Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/RequestMapper.kt", "diffHunk": "@@ -8,7 +8,7 @@ internal fun Request.outboundHeaders(): Map<String, List<String>> {\n     !entry.key.startsWith(\":\") && !entry.key.startsWith(\"x-envoy-mobile\")\n   })\n   result.putAll(retryPolicyHeaders)\n-  result[\":method\"] = listOf(method.stringValue())\n+  result[\":method\"] = listOf(method.stringValue)", "originalCommit": "23feee94ac3038e6f22ea2959783eb7297c3dc37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4MjE2NQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425382165", "bodyText": "Was a method before: https://github.com/lyft/envoy-mobile/pull/840/files#diff-5075eb53390be0c0b1fc060ee9f6f359L23-L33", "author": "buildbreaker", "createdAt": "2020-05-14T19:34:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0NjkwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4NTgyNg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425385826", "bodyText": "I homogenized all of the enums to use the same pattern", "author": "junr03", "createdAt": "2020-05-14T19:41:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0NjkwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQyOTcxOA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425429718", "bodyText": "Nice", "author": "rebello95", "createdAt": "2020-05-14T21:04:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0NjkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0NzA3Mw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425347073", "bodyText": "I think this can be internal", "author": "rebello95", "createdAt": "2020-05-14T18:29:37Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/RequestMethod.kt", "diffHunk": "@@ -1,15 +1,33 @@\n package io.envoyproxy.envoymobile\n \n+import java.lang.IllegalArgumentException\n+\n /**\n  * Represents an HTTP request method.\n  */\n-enum class RequestMethod {\n-  DELETE,\n-  GET,\n-  HEAD,\n-  OPTIONS,\n-  PATCH,\n-  POST,\n-  PUT,\n-  TRACE\n+enum class RequestMethod(internal val stringValue: String) {\n+  DELETE(\"DELETE\"),\n+  GET(\"GET\"),\n+  HEAD(\"HEAD\"),\n+  OPTIONS(\"OPTIONS\"),\n+  PATCH(\"PATCH\"),\n+  POST(\"POST\"),\n+  PUT(\"PUT\"),\n+  TRACE(\"TRACE\");\n+\n+  companion object {\n+    fun enumValue(stringRepresentation: String): RequestMethod {", "originalCommit": "23feee94ac3038e6f22ea2959783eb7297c3dc37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4NjQ0MA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425386440", "bodyText": "I see where you are coming from. Everything outside of the module should deal with only enum types, not strings. I like that.", "author": "junr03", "createdAt": "2020-05-14T19:42:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0NzA3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0NzM5OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425347399", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                FilterHeaderStatus<ResponseTrailers>\n          \n          \n            \n                FilterHeaderStatus<ResponseHeaders>", "author": "rebello95", "createdAt": "2020-05-14T18:30:08Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/ResponseFilter.kt", "diffHunk": "@@ -0,0 +1,70 @@\n+package io.envoyproxy.envoymobile\n+\n+import java.nio.ByteBuffer\n+\n+/*\n+ * Filter executed for inbound responses, providing the ability to observe and mutate streams.\n+ */\n+interface ResponseFilter: Filter {\n+  /**\n+   * Called by the filter manager once to initialize the filter callbacks that the filter should\n+   * use.\n+   *\n+   * @param callbacks: The callbacks for this filter to use to interact with the chain.\n+   */\n+  fun setResponseFilterCallbacks(callbacks: ResponseFilterCallbacks)\n+\n+  /**\n+   * Called once when the response is initiated.\n+   *\n+   * Filters may mutate or delay the response headers.\n+   *\n+   * @param headers:   The current response headers.\n+   * @param endStream: Whether this is a headers-only response.\n+   *\n+   * @return: The header status containing headers with which to continue or buffer.\n+   */\n+  fun onResponseHeaders(headers: ResponseHeaders, endStream: Boolean):\n+    FilterHeaderStatus<ResponseTrailers>", "originalCommit": "23feee94ac3038e6f22ea2959783eb7297c3dc37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0NzQ5NQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425347495", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              fun onResponseTrailers(trailers: RequestTrailers): FilterTrailerStatus<ResponseTrailers>\n          \n          \n            \n              fun onResponseTrailers(trailers: ResponseTrailers): FilterTrailerStatus<ResponseTrailers>", "author": "rebello95", "createdAt": "2020-05-14T18:30:18Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/ResponseFilter.kt", "diffHunk": "@@ -0,0 +1,70 @@\n+package io.envoyproxy.envoymobile\n+\n+import java.nio.ByteBuffer\n+\n+/*\n+ * Filter executed for inbound responses, providing the ability to observe and mutate streams.\n+ */\n+interface ResponseFilter: Filter {\n+  /**\n+   * Called by the filter manager once to initialize the filter callbacks that the filter should\n+   * use.\n+   *\n+   * @param callbacks: The callbacks for this filter to use to interact with the chain.\n+   */\n+  fun setResponseFilterCallbacks(callbacks: ResponseFilterCallbacks)\n+\n+  /**\n+   * Called once when the response is initiated.\n+   *\n+   * Filters may mutate or delay the response headers.\n+   *\n+   * @param headers:   The current response headers.\n+   * @param endStream: Whether this is a headers-only response.\n+   *\n+   * @return: The header status containing headers with which to continue or buffer.\n+   */\n+  fun onResponseHeaders(headers: ResponseHeaders, endStream: Boolean):\n+    FilterHeaderStatus<ResponseTrailers>\n+\n+  /**\n+   * Called any number of times whenever body data is received.\n+   *\n+   * Filters may mutate or buffer (defer and concatenate) the data.\n+   *\n+   * @param body:      The inbound body data chunk.\n+   * @param endStream: Whether this is the last data frame.\n+   *\n+   * @return: The data status containing body with which to continue or buffer.\n+   */\n+  fun onResponseData(body: ByteBuffer, endStream: Boolean): FilterDataStatus\n+\n+  /**\n+   * Called at most once when the response is closed from the server with trailers.\n+   *\n+   * Filters may mutate or delay the trailers.\n+   *\n+   * @param trailers: The inbound trailers.\n+   *\n+   * @return: The trailer status containing body with which to continue or buffer.\n+   */\n+  fun onResponseTrailers(trailers: RequestTrailers): FilterTrailerStatus<ResponseTrailers>", "originalCommit": "23feee94ac3038e6f22ea2959783eb7297c3dc37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0NzY4Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425347687", "bodyText": "This one should be lazy as well", "author": "rebello95", "createdAt": "2020-05-14T18:30:39Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/ResponseHeaders.kt", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * Headers representing an inbound response.\n+ */\n+class ResponseHeaders: Headers {\n+  /**\n+   * Internal constructor used by builders.\n+   *\n+   * @param headers: Headers to set.\n+   */\n+  internal constructor(headers: Map<String, List<String>>) : super(headers)\n+\n+  /**\n+   * HTTP status code received with the response.\n+   */\n+  val httpStatus = value(\":status\")?.first()?.toIntOrNull()", "originalCommit": "23feee94ac3038e6f22ea2959783eb7297c3dc37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0Nzc4OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425347789", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param trailers: Headers to set.\n          \n          \n            \n               * @param trailers: Trailers to set.", "author": "rebello95", "createdAt": "2020-05-14T18:30:52Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/ResponseTrailers.kt", "diffHunk": "@@ -0,0 +1,14 @@\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * Trailers representing an inbound response.\n+ */\n+@Suppress(\"EmptyClassBlock\")\n+class ResponseTrailers: Headers {\n+  /**\n+   * Internal constructor used by builders.\n+   *\n+   * @param trailers: Headers to set.", "originalCommit": "23feee94ac3038e6f22ea2959783eb7297c3dc37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0ODI0Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425348242", "bodyText": "I think we should avoid crashing here like we do in Swift (and early return)", "author": "rebello95", "createdAt": "2020-05-14T18:31:39Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/RetryPolicy.kt", "diffHunk": "@@ -25,18 +25,49 @@ data class RetryPolicy(\n       throw IllegalArgumentException(\"Per-retry timeout cannot be less than total timeout\")\n     }\n   }\n+\n+  /**\n+   * Initialize the retry policy from a set of headers.\n+   *\n+   * @param headers: The headers with which to initialize the retry policy.\n+   */\n+  constructor(headers: Headers): this(\n+      headers.value(\"x-envoy-max-retries\")?.first()!!.toInt(),", "originalCommit": "23feee94ac3038e6f22ea2959783eb7297c3dc37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4ODcwMA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425388700", "bodyText": "Same as above, there is no concept of a failable constructor. So our option is to have a default value, or crash.", "author": "junr03", "createdAt": "2020-05-14T19:46:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0ODI0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzMDE5NQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425430195", "bodyText": "#840 (comment)", "author": "rebello95", "createdAt": "2020-05-14T21:05:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0ODI0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0ODUxNQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425348515", "bodyText": "Can be internal", "author": "rebello95", "createdAt": "2020-05-14T18:32:11Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/RetryPolicy.kt", "diffHunk": "@@ -25,18 +25,49 @@ data class RetryPolicy(\n       throw IllegalArgumentException(\"Per-retry timeout cannot be less than total timeout\")\n     }\n   }\n+\n+  /**\n+   * Initialize the retry policy from a set of headers.\n+   *\n+   * @param headers: The headers with which to initialize the retry policy.\n+   */\n+  constructor(headers: Headers): this(\n+      headers.value(\"x-envoy-max-retries\")?.first()!!.toInt(),\n+      // TODO: should we have ? after the map?\n+      headers.value(\"x-envoy-retry-on\")\n+        ?.map { retryOn -> RetryRule.enumValue(retryOn) }?.filterNotNull() ?: emptyList(),\n+      headers.value(\"x-envoy-retriable-status-codes\")\n+        ?.map { statusCode -> statusCode.toIntOrNull() }?.filterNotNull() ?: emptyList(),\n+      headers.value(\"x-envoy-upstream-rq-per-try-timeout-ms\")?.firstOrNull()?.toLongOrNull(),\n+      headers.value(\"x-envoy-upstream-rq-timeout-ms\")?.firstOrNull()?.toLongOrNull()\n+    )\n }\n \n /**\n  * Rules that may be used with `RetryPolicy`.\n  * See the `x-envoy-retry-on` Envoy header for documentation.\n  */\n-enum class RetryRule {\n-  STATUS_5XX,\n-  GATEWAY_ERROR,\n-  CONNECT_FAILURE,\n-  REFUSED_STREAM,\n-  RETRIABLE_4XX,\n-  RETRIABLE_HEADERS,\n-  RESET,\n+enum class RetryRule(internal val stringValue: String) {\n+  STATUS_5XX(\"5xx\"),\n+  GATEWAY_ERROR(\"gateway-error\"),\n+  CONNECT_FAILURE(\"connect-failure\"),\n+  REFUSED_STREAM(\"refused-stream\"),\n+  RETRIABLE_4XX(\"retriable-4xx\"),\n+  RETRIABLE_HEADERS(\"retriable-headers\"),\n+  RESET(\"reset\");\n+\n+  companion object {\n+    fun enumValue(stringRepresentation: String): RetryRule? {", "originalCommit": "23feee94ac3038e6f22ea2959783eb7297c3dc37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0ODY2Mw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425348663", "bodyText": "Internal", "author": "rebello95", "createdAt": "2020-05-14T18:32:28Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/UpstreamHttpProtocol.kt", "diffHunk": "@@ -5,5 +5,15 @@ package io.envoyproxy.envoymobile\n  */\n enum class UpstreamHttpProtocol(internal val stringValue: String) {\n   HTTP1(\"http1\"),\n-  HTTP2(\"http2\"),\n+  HTTP2(\"http2\");\n+\n+  companion object {\n+    fun enumValue(stringRepresentation: String): UpstreamHttpProtocol {", "originalCommit": "23feee94ac3038e6f22ea2959783eb7297c3dc37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0ODg5Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425348897", "bodyText": "I noticed that some of these throw and others are nullable. Should we keep them consistent?", "author": "rebello95", "createdAt": "2020-05-14T18:32:53Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/UpstreamHttpProtocol.kt", "diffHunk": "@@ -5,5 +5,15 @@ package io.envoyproxy.envoymobile\n  */\n enum class UpstreamHttpProtocol(internal val stringValue: String) {\n   HTTP1(\"http1\"),\n-  HTTP2(\"http2\"),\n+  HTTP2(\"http2\");\n+\n+  companion object {\n+    fun enumValue(stringRepresentation: String): UpstreamHttpProtocol {\n+      return when (stringRepresentation) {\n+        \"http1\" -> UpstreamHttpProtocol.HTTP1\n+        \"http2\" -> UpstreamHttpProtocol.HTTP2\n+        else -> throw IllegalArgumentException(\"Unable to find value for $stringRepresentation\")", "originalCommit": "23feee94ac3038e6f22ea2959783eb7297c3dc37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5NTE4MA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425395180", "bodyText": "We had it that way because of the automatic addition of \"retriable-status-codes\", although I'd rather throw in all of them. I have updated to something I think is better.", "author": "junr03", "createdAt": "2020-05-14T19:58:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0ODg5Nw=="}], "type": "inlineReview"}, {"oid": "68ababa0d6a4da1beea3c216c47b6bcd2f619d6d", "url": "https://github.com/envoyproxy/envoy-mobile/commit/68ababa0d6a4da1beea3c216c47b6bcd2f619d6d", "message": "comments\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-05-14T20:00:58Z", "type": "commit"}, {"oid": "0ab351489b0530812e6e84e467971d9cfe594300", "url": "https://github.com/envoyproxy/envoy-mobile/commit/0ab351489b0530812e6e84e467971d9cfe594300", "message": "factory\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-05-15T00:26:59Z", "type": "commit"}, {"oid": "7d37812946e2456920d90cf6da1c5394b9ad7648", "url": "https://github.com/envoyproxy/envoy-mobile/commit/7d37812946e2456920d90cf6da1c5394b9ad7648", "message": "comments\n\nSigned-off-by: Jose Nino <jnino@lyft.com>", "committedDate": "2020-05-15T00:57:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUxMTQ0Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425511442", "bodyText": "Non-blocking: Do we return nil in swift?", "author": "buildbreaker", "createdAt": "2020-05-15T01:07:00Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/RequestMethod.kt", "diffHunk": "@@ -1,15 +1,33 @@\n package io.envoyproxy.envoymobile\n \n+import java.lang.IllegalArgumentException\n+\n /**\n  * Represents an HTTP request method.\n  */\n-enum class RequestMethod {\n-  DELETE,\n-  GET,\n-  HEAD,\n-  OPTIONS,\n-  PATCH,\n-  POST,\n-  PUT,\n-  TRACE\n+enum class RequestMethod(internal val stringValue: String) {\n+  DELETE(\"DELETE\"),\n+  GET(\"GET\"),\n+  HEAD(\"HEAD\"),\n+  OPTIONS(\"OPTIONS\"),\n+  PATCH(\"PATCH\"),\n+  POST(\"POST\"),\n+  PUT(\"PUT\"),\n+  TRACE(\"TRACE\");\n+\n+  companion object {\n+    internal fun enumValue(stringRepresentation: String): RequestMethod {\n+      return when (stringRepresentation) {\n+        \"DELETE\" -> RequestMethod.DELETE\n+        \"GET\" -> RequestMethod.GET\n+        \"HEAD\" -> RequestMethod.HEAD\n+        \"OPTIONS\" -> RequestMethod.OPTIONS\n+        \"PATCH\" -> RequestMethod.PATCH\n+        \"POST\" -> RequestMethod.POST\n+        \"PUT\" -> RequestMethod.PUT\n+        \"TRACE\" -> RequestMethod.TRACE\n+        else -> throw IllegalArgumentException(\"invalid value $stringRepresentation\")", "originalCommit": "7d37812946e2456920d90cf6da1c5394b9ad7648", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2MjIxMA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425962210", "bodyText": "We do now \ud83d\ude43", "author": "rebello95", "createdAt": "2020-05-15T17:59:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUxMTQ0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUxMTYxNg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/840#discussion_r425511616", "bodyText": "We do now!", "author": "buildbreaker", "createdAt": "2020-05-15T01:07:43Z", "path": "library/swift/src/RequestMethod.swift", "diffHunk": "@@ -56,7 +56,7 @@ public enum RequestMethod: Int, CaseIterable {\n     case \"TRACE\":\n       self = .trace\n     default:\n-      return nil\n+      fatalError(\"invalid value '\\(stringValue)'\")", "originalCommit": "7d37812946e2456920d90cf6da1c5394b9ad7648", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}