{"pr_number": 1029, "pr_title": "advanced filters: introduce interface for more complex filter interactions", "pr_createdAt": "2020-08-12T21:24:53Z", "pr_url": "https://github.com/envoyproxy/envoy-mobile/pull/1029", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1NzE3Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r469557172", "bodyText": "If the caller omits headers here (passes nil), that will result in the underlying filter manager passing its internally buffered headers, correct? If so, I think that's worth documenting above", "author": "rebello95", "createdAt": "2020-08-12T21:27:57Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterDataStatus.kt", "diffHunk": "@@ -45,4 +45,14 @@ sealed class FilterDataStatus {\n    * continuing processing, and will handle their own buffering.\n    */\n   class StopIterationNoBuffer : FilterDataStatus()\n+\n+  /**\n+   * Resume previously-stopped iteration, possibly forwarding headers, if iteration was previously\n+   * stopped during an on*Headers invocation.\n+   *\n+   * It is an error to return ResumeIteration if iteration is not currently stopped, and it is\n+   * an error to include headers if headers have already been forwarded to the next filter\n+   * (i.e. iteration was stopped during an on*Data invocation instead of on*Headers).\n+   */\n+  class ResumeIteration<T : Headers>(val headers: T?, val data: ByteBuffer) : FilterDataStatus()", "originalCommit": "95b8d9f5e4fbc7c5c19ab4009ffd4c9d9b6675e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY0MjA2Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r469642067", "bodyText": "Another option is for that to be an error (and I can update the documentation accordingly). To simplify reasoning, the contract could always be that all forwarded entities are passed back as part of a return from a filter invocation. If it's not explicitly passed back, it hasn't been forwarded.", "author": "goaway", "createdAt": "2020-08-13T01:24:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1NzE3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1NzMyNg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r469557326", "bodyText": "Same comment here regarding behavior in the nil case", "author": "rebello95", "createdAt": "2020-08-12T21:28:22Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterTrailersStatus.kt", "diffHunk": "@@ -17,4 +17,14 @@ sealed class FilterTrailersStatus<T : Headers> {\n    * is desired.\n    */\n   class StopIteration<T : Headers>(val trailers: T) : FilterTrailersStatus<T>()\n+\n+  /**\n+   * Resume previously-stopped iteration, possibly forwarding headers and data, if iteration was\n+   * previously stopped during an on*Headers or on*Data invocation.\n+   *\n+   * It is an error to return ResumeIteration if iteration is not currently stopped, and it is\n+   * an error to include headers if headers have already been forwarded to the next filter\n+   * (i.e. iteration was stopped during an on*Data invocation instead of on*Headers).\n+   */\n+  class ResumeIteration<T : Headers>(val headers: Headers?, val data: ByteBuffer?, val trailers: T) : FilterTrailersStatus<T>()", "originalCommit": "95b8d9f5e4fbc7c5c19ab4009ffd4c9d9b6675e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY0MzcwNw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r469643707", "bodyText": "I intentionally introduced a discrepancy between Kotlin and Swift here to demonstrate two potential approaches (we should ultimately pick one). The Swift approach allows unused entities to be defaulted to nil and left off of the return status. The Kotlin approach positions the entities in the order in which they'll appear.\nI'm open to either and think there's pros to both.", "author": "goaway", "createdAt": "2020-08-13T01:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1NzMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg0NDEzMg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r469844132", "bodyText": "I was playing around with the Swift playground, and it turns out that with named parameters, defaulted arguments on enum cases can be left off in any position. And with Kotlin I think we can achieve this with overloaded constructors. So in short, we should be able to support .resumeIteration(headers: myHeaders, data: myData) seamlessly with simple case of .resumeIteration(data: myData), realizing both the benefits of conceptually consistent ordering and defaulting.", "author": "goaway", "createdAt": "2020-08-13T10:08:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1NzMyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1ODI1Mw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r469558253", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              case resumeIteration(Data, withHeaders: Headers? = nil)\n          \n          \n            \n              case resumeIteration(headers: Headers? = nil, data: Data)", "author": "rebello95", "createdAt": "2020-08-12T21:30:23Z", "path": "library/swift/src/filters/FilterDataStatus.swift", "diffHunk": "@@ -35,4 +35,14 @@ public enum FilterDataStatus: Equatable {\n   /// This may be called by filters which must parse a larger block of the incoming data before\n   /// continuing processing, and will handle their own buffering.\n   case stopIterationNoBuffer\n+\n+  /**\n+   * Resume previously-stopped iteration, possibly forwarding headers, if iteration was previously\n+   * stopped during an on*Headers invocation.\n+   *\n+   * It is an error to return `resumeIteration` if iteration is not currently stopped, and it is\n+   * an error to include headers if headers have already been forwarded to the next filter\n+   * (i.e. iteration was stopped during an on*Data invocation instead of on*Headers).\n+   */\n+  case resumeIteration(Data, withHeaders: Headers? = nil)", "originalCommit": "95b8d9f5e4fbc7c5c19ab4009ffd4c9d9b6675e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1ODU0OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r469558549", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              case resumeIteration(T, withHeaders: Headers? = nil, withData: Data? = nil)\n          \n          \n            \n              case resumeIteration(headers: Headers? = nil, data: Data? = nil, trailers: T)", "author": "rebello95", "createdAt": "2020-08-12T21:31:01Z", "path": "library/swift/src/filters/FilterTrailersStatus.swift", "diffHunk": "@@ -9,4 +9,14 @@ public enum FilterTrailersStatus<T: Headers>: Equatable {\n   /// Calling `continueRequest()`/`continueResponse()` MUST occur when continued filter iteration\n   /// is desired.\n   case stopIteration(T)\n+\n+  /**\n+   * Resume previously-stopped iteration, possibly forwarding headers and data, if iteration was\n+   * previously stopped during an on*Headers or on*Data invocation.\n+   *\n+   * It is an error to return ResumeIteration if iteration is not currently stopped, and it is\n+   * an error to include headers if headers have already been forwarded to the next filter\n+   * (i.e. iteration was stopped during an on*Data invocation instead of on*Headers).\n+   */\n+  case resumeIteration(T, withHeaders: Headers? = nil, withData: Data? = nil)", "originalCommit": "95b8d9f5e4fbc7c5c19ab4009ffd4c9d9b6675e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1ODczNw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r469558737", "bodyText": "This ordering matches Kotlin - I also think it's nice to name the values explicitly but don't feel too strongly", "author": "rebello95", "createdAt": "2020-08-12T21:31:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1ODU0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1ODkxMQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r469558911", "bodyText": "Are we missing the FilterResumeStatus type in this PR?", "author": "rebello95", "createdAt": "2020-08-12T21:31:49Z", "path": "library/swift/src/filters/ResponseFilter.swift", "diffHunk": "@@ -38,6 +38,14 @@ public protocol ResponseFilter: Filter {\n   /// - returns: The trailer status containing body with which to continue or buffer.\n   func onResponseTrailers(_ trailers: ResponseTrailers) -> FilterTrailersStatus<ResponseTrailers>\n \n+  /// Invoked explicitly in response to an asynchronous resume() callback when filter\n+  /// iteration has been stopped.\n+  /// \n+  /// @return: The resumption status including any previously held entities that remain\n+  ///          to be forwarded.\n+  /// \n+  func onResumeIteration() -> FilterResumeStatus<ResponseHeaders, ResponseTrailers>", "originalCommit": "95b8d9f5e4fbc7c5c19ab4009ffd4c9d9b6675e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY0NDc2OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r469644769", "bodyText": "They're coming. :)", "author": "goaway", "createdAt": "2020-08-13T01:29:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1ODkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1OTg5Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r469559897", "bodyText": "These functions are currently called continueRequest() / continueResponse(); I think they need to be updated in this PR on the callback types\nCan we add documentation to the callbacks indicating that this function will be called on the filter's execution thread as an immediate result of calling the callback?\nIt'd be nice to add an example use case to these descriptions. Personally I think we should be as clear/verbose as possible on these interface descriptions", "author": "rebello95", "createdAt": "2020-08-12T21:34:06Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/ResponseFilter.kt", "diffHunk": "@@ -50,6 +50,15 @@ interface ResponseFilter : Filter {\n    */\n   fun onResponseTrailers(trailers: ResponseTrailers): FilterTrailersStatus<ResponseTrailers>\n \n+  /**\n+   * Invoked explicitly in response to an asynchronous resume() callback when filter\n+   * iteration has been stopped.", "originalCommit": "95b8d9f5e4fbc7c5c19ab4009ffd4c9d9b6675e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY0NDk5Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r469644992", "bodyText": "Updated.\nSure.\nGood idea.", "author": "goaway", "createdAt": "2020-08-13T01:30:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1OTg5Nw=="}], "type": "inlineReview"}, {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69", "url": "https://github.com/envoyproxy/envoy-mobile/commit/caedca6dfd92c731635aa743cfd633ac9a3dae69", "message": "kotlin compiles\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-13T19:29:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMTIxOQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470201219", "bodyText": "Interface to be updated", "author": "buildbreaker", "createdAt": "2020-08-13T19:37:16Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/AsycRequestFilter.kt", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * RequestFilter supporting asynchronous resumption.\n+ */\n+interface AsyncRequestFilter : RequestFilter {\n+  /**\n+   * Invoked explicitly in response to an asynchronous resumeRequest() callback when filter\n+   * iteration has been stopped.\n+   *\n+   * @return: The resumption status including any previously held entities that remain\n+   *          to be forwarded.\n+   */\n+  fun onResumeRequest(): FilterResumeStatus<RequestHeaders, RequestTrailers>", "originalCommit": "caedca6dfd92c731635aa743cfd633ac9a3dae69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyMjgwMg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470222802", "bodyText": "What will this be updated to?", "author": "rebello95", "createdAt": "2020-08-13T20:17:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMTIxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMyODg0NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470328844", "bodyText": "Updated to match swift.", "author": "goaway", "createdAt": "2020-08-14T00:28:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMTIxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMyODk2MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470328961", "bodyText": "(It has been.)", "author": "goaway", "createdAt": "2020-08-14T00:28:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMTIxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMTY0OA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470201648", "bodyText": "Can we have this first", "author": "buildbreaker", "createdAt": "2020-08-13T19:38:01Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/AsycRequestFilter.kt", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * RequestFilter supporting asynchronous resumption.\n+ */\n+interface AsyncRequestFilter : RequestFilter {\n+  /**\n+   * Invoked explicitly in response to an asynchronous resumeRequest() callback when filter\n+   * iteration has been stopped.\n+   *\n+   * @return: The resumption status including any previously held entities that remain\n+   *          to be forwarded.\n+   */\n+  fun onResumeRequest(): FilterResumeStatus<RequestHeaders, RequestTrailers>\n+\n+  /**\n+   * Called by the filter manager once to initialize the filter callbacks that the filter should\n+   * use.\n+   *\n+   * @param callbacks: The callbacks for this filter to use to interact with the chain.\n+   */\n+   fun setRequestFilterCallbacks(callbacks: RequestFilterCallbacks)", "originalCommit": "caedca6dfd92c731635aa743cfd633ac9a3dae69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyMjg2Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470222867", "bodyText": "+1 to putting this first in the file", "author": "rebello95", "createdAt": "2020-08-13T20:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMTY0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMTc4NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470201784", "bodyText": "nit: have this first\n(same on swift)", "author": "buildbreaker", "createdAt": "2020-08-13T19:38:15Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/AsycResponseFilter.kt", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * ResponseFilter supporting asynchronous resumption.\n+ */\n+interface AsyncResponseFilter : ResponseFilter {\n+  /**\n+   * Invoked explicitly in response to an asynchronous resumeResponse() callback when filter\n+   * iteration has been stopped.\n+   *\n+   * @return: The resumption status including any previously held entities that remain\n+   *          to be forwarded.\n+   */\n+  fun onResumeResponse(): FilterResumeStatus<ResponseHeaders, ResponseTrailers>\n+\n+  /**\n+   * Called by the filter manager once to initialize the filter callbacks that the filter should\n+   * use.\n+   *\n+   * @param callbacks: The callbacks for this filter to use to interact with the chain.\n+   */\n+   fun setResponseFilterCallbacks(callbacks: ResponseFilterCallbacks)", "originalCommit": "caedca6dfd92c731635aa743cfd633ac9a3dae69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMzY2OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470203669", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Resume previously-stopped iteration, possibly forwarding headers, if iteration was previously\n          \n          \n            \n               * stopped during an on*Headers invocation.\n          \n          \n            \n               * Resume previously-stopped iteration, possibly forwarding headers, if iteration was previously\n          \n          \n            \n               * stopped during an on*Headers invocation. If headers are already sent, headers should not be passed in the return status.", "author": "buildbreaker", "createdAt": "2020-08-13T19:42:04Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterDataStatus.kt", "diffHunk": "@@ -44,5 +44,15 @@ sealed class FilterDataStatus {\n    * This may be called by filters which must parse a larger block of the incoming data before\n    * continuing processing, and will handle their own buffering.\n    */\n-  class StopIterationNoBuffer : FilterDataStatus()\n+  class StopIterationNoBuffer<T : Headers> : FilterDataStatus<T>()\n+\n+  /**\n+   * Resume previously-stopped iteration, possibly forwarding headers, if iteration was previously\n+   * stopped during an on*Headers invocation.", "originalCommit": "caedca6dfd92c731635aa743cfd633ac9a3dae69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyMzQ4Mw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470223483", "bodyText": "* stopped during an on*Headers invocation. If headers have already been sent, headers should not be passed in the return status.", "author": "rebello95", "createdAt": "2020-08-13T20:18:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMzY2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMzkxOA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470203918", "bodyText": "same as https://github.com/lyft/envoy-mobile/pull/1029/files#r470203669", "author": "buildbreaker", "createdAt": "2020-08-13T19:42:32Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterResumeStatus.kt", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.envoyproxy.envoymobile\n+\n+import java.nio.ByteBuffer\n+\n+/*\n+ * Status returned by filters when transmitting or receiving trailers.\n+ */\n+sealed class FilterResumeStatus<T : Headers, U : Headers> {\n+  /**\n+   * Resume previously-stopped iteration, possibly forwarding headers and data, if iteration was\n+   * previously stopped during an on*Headers or on*Data invocation.", "originalCommit": "caedca6dfd92c731635aa743cfd633ac9a3dae69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMzk4OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470203989", "bodyText": "same as https://github.com/lyft/envoy-mobile/pull/1029/files#r470203669", "author": "buildbreaker", "createdAt": "2020-08-13T19:42:39Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterTrailersStatus.kt", "diffHunk": "@@ -1,20 +1,33 @@\n package io.envoyproxy.envoymobile\n \n+import java.nio.ByteBuffer\n+\n /*\n  * Status returned by filters when transmitting or receiving trailers.\n  */\n-// TODO: create abstract Trailers class.\n-sealed class FilterTrailersStatus<T : Headers> {\n+sealed class FilterTrailersStatus<T : Headers, U : Headers> {\n   /**\n    * Continue filter chain iteration, passing the provided trailers through.\n    */\n-  class Continue<T : Headers>(val trailers: T) : FilterTrailersStatus<T>()\n+  class Continue<T : Headers, U : Headers>(val trailers: T) : FilterTrailersStatus<T, U>()\n \n   /**\n    * Do not iterate to any of the remaining filters in the chain with trailers.\n    *\n+   * Because trailers are by definition the last HTTP entity of a request or response, only\n+   * asynchronous filters support resumption after returning StopIteration from on*Trailers.\n    * Calling `continueRequest()`/`continueResponse()` MUST occur when continued filter iteration\n    * is desired.\n    */\n-  class StopIteration<T : Headers>(val trailers: T) : FilterTrailersStatus<T>()\n+  class StopIteration<T : Headers, U : Headers> : FilterTrailersStatus<T, U>()\n+\n+  /**\n+   * Resume previously-stopped iteration, possibly forwarding headers and data, if iteration was\n+   * previously stopped during an on*Headers or on*Data invocation.", "originalCommit": "caedca6dfd92c731635aa743cfd633ac9a3dae69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwNDQyOQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470204429", "bodyText": "same as https://github.com/lyft/envoy-mobile/pull/1029/files#r470203669", "author": "buildbreaker", "createdAt": "2020-08-13T19:43:31Z", "path": "library/swift/src/filters/FilterDataStatus.swift", "diffHunk": "@@ -35,4 +35,14 @@ public enum FilterDataStatus: Equatable {\n   /// This may be called by filters which must parse a larger block of the incoming data before\n   /// continuing processing, and will handle their own buffering.\n   case stopIterationNoBuffer\n+\n+  /**\n+   * Resume previously-stopped iteration, possibly forwarding headers, if iteration was previously\n+   * stopped during an on*Headers invocation.", "originalCommit": "caedca6dfd92c731635aa743cfd633ac9a3dae69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwNDQ4MA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470204480", "bodyText": "same as https://github.com/lyft/envoy-mobile/pull/1029/files#r470203669", "author": "buildbreaker", "createdAt": "2020-08-13T19:43:36Z", "path": "library/swift/src/filters/FilterResumeStatus.swift", "diffHunk": "@@ -0,0 +1,15 @@\n+import Foundation\n+\n+/// Status returned by filters after resuming iteration asynchronously.\n+@frozen\n+public enum FilterResumeStatus<T: Headers, U: Headers>: Equatable {\n+  /**\n+   * Resume previously-stopped iteration, possibly forwarding headers and data, if iteration was\n+   * previously stopped during an on*Headers or on*Data invocation.", "originalCommit": "caedca6dfd92c731635aa743cfd633ac9a3dae69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyNDgyOA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470224828", "bodyText": "Shouldn't this be val trailers: U?", "author": "rebello95", "createdAt": "2020-08-13T20:21:02Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterTrailersStatus.kt", "diffHunk": "@@ -1,20 +1,33 @@\n package io.envoyproxy.envoymobile\n \n+import java.nio.ByteBuffer\n+\n /*\n  * Status returned by filters when transmitting or receiving trailers.\n  */\n-// TODO: create abstract Trailers class.\n-sealed class FilterTrailersStatus<T : Headers> {\n+sealed class FilterTrailersStatus<T : Headers, U : Headers> {\n   /**\n    * Continue filter chain iteration, passing the provided trailers through.\n    */\n-  class Continue<T : Headers>(val trailers: T) : FilterTrailersStatus<T>()\n+  class Continue<T : Headers, U : Headers>(val trailers: T) : FilterTrailersStatus<T, U>()", "originalCommit": "caedca6dfd92c731635aa743cfd633ac9a3dae69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI5ODI2NQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470298265", "bodyText": "yes, good catch, thank you", "author": "goaway", "createdAt": "2020-08-13T23:12:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyNDgyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyNjA0Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470226047", "bodyText": "I think it's worth including details as to why trailers are not specified here, similarly to how you have in the StopIteration case definition", "author": "rebello95", "createdAt": "2020-08-13T20:23:25Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterDataStatus.kt", "diffHunk": "@@ -44,5 +44,15 @@ sealed class FilterDataStatus {\n    * This may be called by filters which must parse a larger block of the incoming data before\n    * continuing processing, and will handle their own buffering.\n    */\n-  class StopIterationNoBuffer : FilterDataStatus()\n+  class StopIterationNoBuffer<T : Headers> : FilterDataStatus<T>()\n+\n+  /**\n+   * Resume previously-stopped iteration, possibly forwarding headers, if iteration was previously\n+   * stopped during an on*Headers invocation.\n+   *\n+   * It is an error to return ResumeIteration if iteration is not currently stopped, and it is\n+   * an error to include headers if headers have already been forwarded to the next filter\n+   * (i.e. iteration was stopped during an on*Data invocation instead of on*Headers).\n+   */", "originalCommit": "caedca6dfd92c731635aa743cfd633ac9a3dae69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0NDA2Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470344062", "bodyText": "I'm a little bit concerned that describing an option that's not present might be more confusing than simply describing those that are.", "author": "goaway", "createdAt": "2020-08-14T00:51:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyNjA0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyNjYzMA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470226630", "bodyText": "Same suggestion as @buildbreaker above regarding listing this first", "author": "rebello95", "createdAt": "2020-08-13T20:24:31Z", "path": "library/swift/src/filters/AsyncRequestFilter.swift", "diffHunk": "@@ -0,0 +1,22 @@\n+import Foundation\n+\n+/// RequestFilter supporting asynchronous resumption.\n+public protocol AsyncRequestFilter: RequestFilter {\n+  /// Invoked explicitly in response to an asynchronous resumeRequest() callback when filter\n+  /// iteration has been stopped. The parameters passed to this invocation will be a snapshot\n+  /// of any stream state that has not yet been forwarded along the filter chain.\n+  ///\n+  /// - return: The resumption status including any HTTP entities that will be forwarded.\n+  func onResumeRequest(\n+    headers: RequestHeaders?,\n+    data: Data?,\n+    trailers: RequestTrailers?,\n+    endStream: Bool\n+  ) -> FilterResumeStatus<RequestHeaders, RequestTrailers>\n+\n+  /// Called by the filter manager once to initialize the filter callbacks that the filter should\n+  /// use.\n+  ///\n+  /// - parameter callbacks: The callbacks for this filter to use to interact with the chain.\n+  func setRequestFilterCallbacks(_ callbacks: RequestFilterCallbacks)", "originalCommit": "caedca6dfd92c731635aa743cfd633ac9a3dae69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyNzAyNg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470227026", "bodyText": "Same comments in this file", "author": "rebello95", "createdAt": "2020-08-13T20:25:15Z", "path": "library/swift/src/filters/AsyncResponseFilter.swift", "diffHunk": "@@ -0,0 +1,21 @@\n+import Foundation\n+\n+/// ResponseFilter supporting asynchronous resumption.", "originalCommit": "caedca6dfd92c731635aa743cfd633ac9a3dae69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyNzUzNQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470227535", "bodyText": "When will endStream be true? Will it be true if either there's a data frame with endStream=true or trailers?", "author": "rebello95", "createdAt": "2020-08-13T20:26:08Z", "path": "library/swift/src/filters/AsyncRequestFilter.swift", "diffHunk": "@@ -0,0 +1,22 @@\n+import Foundation\n+\n+/// RequestFilter supporting asynchronous resumption.\n+public protocol AsyncRequestFilter: RequestFilter {\n+  /// Invoked explicitly in response to an asynchronous resumeRequest() callback when filter\n+  /// iteration has been stopped. The parameters passed to this invocation will be a snapshot\n+  /// of any stream state that has not yet been forwarded along the filter chain.\n+  ///\n+  /// - return: The resumption status including any HTTP entities that will be forwarded.\n+  func onResumeRequest(\n+    headers: RequestHeaders?,\n+    data: Data?,\n+    trailers: RequestTrailers?,\n+    endStream: Bool", "originalCommit": "caedca6dfd92c731635aa743cfd633ac9a3dae69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyNzc0NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470227744", "bodyText": "I think it's worth adding - parameter docs for each of these (same with the response filter) to clarify these points", "author": "rebello95", "createdAt": "2020-08-13T20:26:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyNzUzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MTM5Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470241397", "bodyText": "Thinking about how users will consume this, I think they'll likely end up force-unwrapping the values they called resume with, which might be a little unwieldy. However, I suppose we can't really make these non-optional since resumeRequest() can be called after headers or data, in which case data will sometimes be nil. Probably nothing actionable here, just thinking out loud (though it might be good to list some examples in docs here)", "author": "rebello95", "createdAt": "2020-08-13T20:52:07Z", "path": "library/swift/src/filters/AsyncRequestFilter.swift", "diffHunk": "@@ -0,0 +1,22 @@\n+import Foundation\n+\n+/// RequestFilter supporting asynchronous resumption.\n+public protocol AsyncRequestFilter: RequestFilter {\n+  /// Invoked explicitly in response to an asynchronous resumeRequest() callback when filter\n+  /// iteration has been stopped. The parameters passed to this invocation will be a snapshot\n+  /// of any stream state that has not yet been forwarded along the filter chain.\n+  ///\n+  /// - return: The resumption status including any HTTP entities that will be forwarded.\n+  func onResumeRequest(\n+    headers: RequestHeaders?,\n+    data: Data?,\n+    trailers: RequestTrailers?,\n+    endStream: Bool\n+  ) -> FilterResumeStatus<RequestHeaders, RequestTrailers>", "originalCommit": "caedca6dfd92c731635aa743cfd633ac9a3dae69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMxMDQwMg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470310402", "bodyText": "I've been thinking about this too, but short of having multiple different onResume invocations with overloaded signatures based on what's present, and their own specific return types, I can't see another way of supporting the different states. (Multiple onResumes would probably be annoying to implement also.)", "author": "goaway", "createdAt": "2020-08-13T23:54:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MTM5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MjkxMQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470242911", "bodyText": "Same here", "author": "rebello95", "createdAt": "2020-08-13T20:54:55Z", "path": "library/swift/src/filters/AsyncResponseFilter.swift", "diffHunk": "@@ -0,0 +1,21 @@\n+import Foundation\n+\n+/// ResponseFilter supporting asynchronous resumption.\n+public protocol AsyncResponseFilter: ResponseFilter {\n+  /// Invoked explicitly in response to an asynchronous resumeResponse() callback when filter\n+  /// iteration has been stopped.\n+  ///\n+  /// - return: The resumption status including any HTTP entities that will be forwarded.\n+  func onResumeResponse(\n+    headers: ResponseHeaders?,\n+    data: Data?,\n+    trailers: ResponseTrailers?,\n+    endStream: Bool", "originalCommit": "caedca6dfd92c731635aa743cfd633ac9a3dae69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MzgzOA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470243838", "bodyText": "These docstrings are outdated (can you grep for any references to these functions and update please?)", "author": "rebello95", "createdAt": "2020-08-13T20:56:47Z", "path": "library/swift/src/filters/FilterHeadersStatus.swift", "diffHunk": "@@ -9,5 +9,5 @@ public enum FilterHeadersStatus<T: Headers>: Equatable {\n   /// Returning `continue` from `onRequestData()`/`onResponseData()` or calling\n   /// `continueRequest()`/`continueResponse()` MUST occur when continued filter iteration is", "originalCommit": "caedca6dfd92c731635aa743cfd633ac9a3dae69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc0ODM2NQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470748365", "bodyText": "\ud83d\udc4f", "author": "rebello95", "createdAt": "2020-08-14T17:08:12Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/AsyncRequestFilter.kt", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * RequestFilter supporting asynchronous resumption.\n+ */\n+interface AsyncRequestFilter : RequestFilter {\n+  /**\n+   * Called by the filter manager once to initialize the filter callbacks that the filter should\n+   * use.\n+   *\n+   * @param callbacks: The callbacks for this filter to use to interact with the chain.\n+   */\n+  fun setRequestFilterCallbacks(callbacks: RequestFilterCallbacks)\n+\n+  /**\n+   * Invoked explicitly in response to an asynchronous resumeRequest() callback when filter\n+   * iteration has been stopped. The parameters passed to this invocation will be a snapshot\n+   * of any stream state that has not yet been forwarded along the filter chain.\n+   *\n+   * As with other filter invocations, this will be called on Envoy's main thread, and thus\n+   * no additional synchronization is required between this and other invocations.", "originalCommit": "1b3ff051216c634865382e6744e850f5dc7c1592", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc0OTgyNA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470749824", "bodyText": "Got it, so this will be true for trailers or data, endStream: true \ud83d\udc4d", "author": "rebello95", "createdAt": "2020-08-14T17:11:06Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/AsyncRequestFilter.kt", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * RequestFilter supporting asynchronous resumption.\n+ */\n+interface AsyncRequestFilter : RequestFilter {\n+  /**\n+   * Called by the filter manager once to initialize the filter callbacks that the filter should\n+   * use.\n+   *\n+   * @param callbacks: The callbacks for this filter to use to interact with the chain.\n+   */\n+  fun setRequestFilterCallbacks(callbacks: RequestFilterCallbacks)\n+\n+  /**\n+   * Invoked explicitly in response to an asynchronous resumeRequest() callback when filter\n+   * iteration has been stopped. The parameters passed to this invocation will be a snapshot\n+   * of any stream state that has not yet been forwarded along the filter chain.\n+   *\n+   * As with other filter invocations, this will be called on Envoy's main thread, and thus\n+   * no additional synchronization is required between this and other invocations.\n+   *\n+   * @param headers: Headers, if `StopIteration` was returned from `onRequestHeaders`.\n+   * @param data: Any data that has been buffered where `StopIterationAndBuffer` was returned.\n+   * @param trailers: Trailers, if `StopIteration` was returned from `onRequestTrailers`.\n+   * @param endStream: True, if the stream ended with the previous (and thus, last) invocation.", "originalCommit": "1b3ff051216c634865382e6744e850f5dc7c1592", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg1MDIyMg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470850222", "bodyText": "Correct, in fact any of:\nonHeaders(... endStream: true)\nonData(... endStream: true)\nonTrailers(...)", "author": "goaway", "createdAt": "2020-08-14T20:27:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc0OTgyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc0OTg3NQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470749875", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                trailrs: RequestTrailers?,\n          \n          \n            \n                trailers: RequestTrailers?,", "author": "rebello95", "createdAt": "2020-08-14T17:11:12Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/AsyncRequestFilter.kt", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * RequestFilter supporting asynchronous resumption.\n+ */\n+interface AsyncRequestFilter : RequestFilter {\n+  /**\n+   * Called by the filter manager once to initialize the filter callbacks that the filter should\n+   * use.\n+   *\n+   * @param callbacks: The callbacks for this filter to use to interact with the chain.\n+   */\n+  fun setRequestFilterCallbacks(callbacks: RequestFilterCallbacks)\n+\n+  /**\n+   * Invoked explicitly in response to an asynchronous resumeRequest() callback when filter\n+   * iteration has been stopped. The parameters passed to this invocation will be a snapshot\n+   * of any stream state that has not yet been forwarded along the filter chain.\n+   *\n+   * As with other filter invocations, this will be called on Envoy's main thread, and thus\n+   * no additional synchronization is required between this and other invocations.\n+   *\n+   * @param headers: Headers, if `StopIteration` was returned from `onRequestHeaders`.\n+   * @param data: Any data that has been buffered where `StopIterationAndBuffer` was returned.\n+   * @param trailers: Trailers, if `StopIteration` was returned from `onRequestTrailers`.\n+   * @param endStream: True, if the stream ended with the previous (and thus, last) invocation.\n+   *\n+   * @return: The resumption status including any HTTP entities that will be forwarded.\n+   */\n+  fun onResumeRequest(\n+    headers: RequestHeaders?,\n+    data: ByteBuffer?,\n+    trailrs: RequestTrailers?,", "originalCommit": "1b3ff051216c634865382e6744e850f5dc7c1592", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg1MDQ3OA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470850478", "bodyText": "nice, thanks", "author": "goaway", "createdAt": "2020-08-14T20:28:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc0OTg3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1MDAxOQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470750019", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                trailrs: ResponseTrailers?,\n          \n          \n            \n                trailers: ResponseTrailers?,", "author": "rebello95", "createdAt": "2020-08-14T17:11:32Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/AsyncResponseFilter.kt", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * ResponseFilter supporting asynchronous resumption.\n+ */\n+interface AsyncResponseFilter : ResponseFilter {\n+  /**\n+   * Called by the filter manager once to initialize the filter callbacks that the filter should\n+   * use.\n+   *\n+   * @param callbacks: The callbacks for this filter to use to interact with the chain.\n+   */\n+  fun setResponseFilterCallbacks(callbacks: ResponseFilterCallbacks)\n+\n+  /**\n+   * Invoked explicitly in response to an asynchronous resumeResponse() callback when filter\n+   * iteration has been stopped. The parameters passed to this invocation will be a snapshot\n+   * of any stream state that has not yet been forwarded along the filter chain.\n+   *\n+   * As with other filter invocations, this will be called on Envoy's main thread, and thus\n+   * no additional synchronization is required between this and other invocations.\n+   *\n+   * @param headers: Headers, if `StopIteration` was returned from `onResponseHeaders`.\n+   * @param data: Any data that has been buffered where `StopIterationAndBuffer` was returned.\n+   * @param trailers: Trailers, if `StopIteration` was returned from `onReponseTrailers`.\n+   * @param endStream: True, if the stream ended with the previous (and thus, last) invocation.\n+   *\n+   * @return: The resumption status including any HTTP entities that will be forwarded.\n+   */\n+  fun onResumeResponse(\n+    headers: ResponseHeaders?,\n+    data: ByteBuffer?,\n+    trailrs: ResponseTrailers?,", "originalCommit": "1b3ff051216c634865382e6744e850f5dc7c1592", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1MDUwNA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470750504", "bodyText": "Might be worth resolving this while we're here, can also do separately", "author": "rebello95", "createdAt": "2020-08-14T17:12:30Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterDataStatus.kt", "diffHunk": "@@ -14,7 +14,7 @@ sealed class FilterDataStatus {\n    * before the entirety is sent to the next filter.\n    * TODO: add param docs. name param in swift.", "originalCommit": "1b3ff051216c634865382e6744e850f5dc7c1592", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNDA5Mw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470914093", "bodyText": "\ud83d\udc4d", "author": "goaway", "createdAt": "2020-08-15T00:27:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1MDUwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1MDcwNQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470750705", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Returning `Continue` or `ResumeIteration from another filter invocation or calling\n          \n          \n            \n               * Returning `Continue` or `ResumeIteration` from another filter invocation or calling", "author": "rebello95", "createdAt": "2020-08-14T17:12:51Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterDataStatus.kt", "diffHunk": "@@ -29,20 +29,30 @@ sealed class FilterDataStatus {\n    * This should be called by filters which must parse a larger block of the incoming data before\n    * continuing processing.\n    */\n-  class StopIterationAndBuffer(val data: ByteBuffer) : FilterDataStatus()\n+  class StopIterationAndBuffer<T : Headers> : FilterDataStatus<T>()\n \n   /**\n    * Do not iterate to any of the remaining filters in the chain, and do not internally buffer\n    * data.\n    *\n    * This filter will continue to be called with new chunks of data.\n    *\n-   * Returning `Continue` from `onRequestData()`/`onResponseData()` or calling\n-   * `continueRequest()`/`continueResponse()` MUST be called when continued filter iteration is\n+   * Returning `Continue` or `ResumeIteration from another filter invocation or calling", "originalCommit": "1b3ff051216c634865382e6744e850f5dc7c1592", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1MDg4NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470750884", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * `resumeRequest()`/`resumeResponse()` MUST be called when continued filter iteration is\n          \n          \n            \n               * `resumeRequest()`/`resumeResponse()` MUST occur when continued filter iteration is", "author": "rebello95", "createdAt": "2020-08-14T17:13:10Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterDataStatus.kt", "diffHunk": "@@ -29,20 +29,30 @@ sealed class FilterDataStatus {\n    * This should be called by filters which must parse a larger block of the incoming data before\n    * continuing processing.\n    */\n-  class StopIterationAndBuffer(val data: ByteBuffer) : FilterDataStatus()\n+  class StopIterationAndBuffer<T : Headers> : FilterDataStatus<T>()\n \n   /**\n    * Do not iterate to any of the remaining filters in the chain, and do not internally buffer\n    * data.\n    *\n    * This filter will continue to be called with new chunks of data.\n    *\n-   * Returning `Continue` from `onRequestData()`/`onResponseData()` or calling\n-   * `continueRequest()`/`continueResponse()` MUST be called when continued filter iteration is\n+   * Returning `Continue` or `ResumeIteration from another filter invocation or calling\n+   * `resumeRequest()`/`resumeResponse()` MUST be called when continued filter iteration is", "originalCommit": "1b3ff051216c634865382e6744e850f5dc7c1592", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1MTI2OA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470751268", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Returning `Continue` or `ResumeIteration from another filter invocation or calling\n          \n          \n            \n               * Returning `Continue` or `ResumeIteration` from another filter invocation or calling", "author": "rebello95", "createdAt": "2020-08-14T17:13:53Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterHeadersStatus.kt", "diffHunk": "@@ -12,9 +12,9 @@ sealed class FilterHeadersStatus<T : Headers> {\n   /**\n    * Do not iterate to any of the remaining filters in the chain with headers.\n    *\n-   * Returning `continue` from `onRequestData()`/`onResponseData()` or calling\n-   * `continueRequest()`/`continueResponse()` MUST occur when continued filter iteration is\n+   * Returning `Continue` or `ResumeIteration from another filter invocation or calling", "originalCommit": "1b3ff051216c634865382e6744e850f5dc7c1592", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1MTY3Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470751677", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * an error to include data or trailers if endStream was previously sent or if trailers have\n          \n          \n            \n               * an error to include data or trailers if endStream=true was previously sent or if trailers have", "author": "rebello95", "createdAt": "2020-08-14T17:14:40Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterResumeStatus.kt", "diffHunk": "@@ -0,0 +1,24 @@\n+package io.envoyproxy.envoymobile\n+\n+import java.nio.ByteBuffer\n+\n+/*\n+ * Status to be returned by filters after resuming iteration asynchronously.\n+ */\n+sealed class FilterResumeStatus<T : Headers, U : Headers> {\n+  /**\n+   * Resume previously-stopped iteration, potentially forwarding headers, data, and/or trailers\n+   * that have not yet been passed along the filter chain.\n+   *\n+   * It is an error to return ResumeIteration if iteration is not currently stopped, and it is\n+   * an error to include headers if headers have already been forwarded to the next filter\n+   * (i.e. iteration was stopped during an on*Data invocation instead of on*Headers). It is also\n+   * an error to include data or trailers if endStream was previously sent or if trailers have", "originalCommit": "1b3ff051216c634865382e6744e850f5dc7c1592", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1Mjc5NQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470752795", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /// Returning `continue` or `resumeIteration from another filter invocation or calling\n          \n          \n            \n              /// Returning `continue` or `resumeIteration` from another filter invocation or calling", "author": "rebello95", "createdAt": "2020-08-14T17:16:45Z", "path": "library/swift/src/filters/FilterDataStatus.swift", "diffHunk": "@@ -15,13 +15,13 @@ public enum FilterDataStatus: Equatable {\n   ///\n   /// This filter will continue to be called with new chunks of data.\n   ///\n-  /// Returning `continue` from `onRequestData()`/`onResponseData()` or calling\n-  /// `continueRequest()`/`continueResponse()` MUST be called when continued filter iteration is\n+  /// Returning `continue` or `resumeIteration from another filter invocation or calling", "originalCommit": "1b3ff051216c634865382e6744e850f5dc7c1592", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1Mjg1Ng==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470752856", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /// `resumeRequest()`/`resumeResponse()` MUST be called when continued filter iteration is\n          \n          \n            \n              /// `resumeRequest()`/`resumeResponse()` MUST occur when continued filter iteration is", "author": "rebello95", "createdAt": "2020-08-14T17:16:53Z", "path": "library/swift/src/filters/FilterDataStatus.swift", "diffHunk": "@@ -15,13 +15,13 @@ public enum FilterDataStatus: Equatable {\n   ///\n   /// This filter will continue to be called with new chunks of data.\n   ///\n-  /// Returning `continue` from `onRequestData()`/`onResponseData()` or calling\n-  /// `continueRequest()`/`continueResponse()` MUST be called when continued filter iteration is\n+  /// Returning `continue` or `resumeIteration from another filter invocation or calling\n+  /// `resumeRequest()`/`resumeResponse()` MUST be called when continued filter iteration is", "originalCommit": "1b3ff051216c634865382e6744e850f5dc7c1592", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxMzQ1Ng==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470913456", "bodyText": "I still think \"must be called\" is accurate and maybe clearer?", "author": "goaway", "createdAt": "2020-08-15T00:23:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1Mjg1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1MzA1NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470753054", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /// - param headers: Headers, if `StopIteration` was returned from `onResponseHeaders`.\n          \n          \n            \n              /// - param data: Any data that has been buffered where `StopIterationAndBuffer` was returned.\n          \n          \n            \n              /// - param trailers: Trailers, if `StopIteration` was returned from `onReponseTrailers`.\n          \n          \n            \n              /// - param endStream: True, if the stream ended with the previous (and thus, last) invocation.\n          \n          \n            \n              /// - param headers: Headers, if `stopIteration` was returned from `onResponseHeaders`.\n          \n          \n            \n              /// - param data: Any data that has been buffered where `stopIterationAndBuffer` was returned.\n          \n          \n            \n              /// - param trailers: Trailers, if `stopIteration` was returned from `onReponseTrailers`.\n          \n          \n            \n              /// - param endStream: True, if the stream ended with the previous (and thus, last) invocation.", "author": "rebello95", "createdAt": "2020-08-14T17:17:19Z", "path": "library/swift/src/filters/AsyncResponseFilter.swift", "diffHunk": "@@ -0,0 +1,30 @@\n+import Foundation\n+\n+/// ResponseFilter supporting asynchronous resumption.\n+public protocol AsyncResponseFilter: ResponseFilter {\n+  /// Called by the filter manager once to initialize the filter callbacks that the filter should\n+  /// use.\n+  ///\n+  /// - parameter callbacks: The callbacks for this filter to use to interact with the chain.\n+  func setResponseFilterCallbacks(_ callbacks: ResponseFilterCallbacks)\n+\n+  /// Invoked explicitly in response to an asynchronous resumeResponse() callback when filter\n+  /// iteration has been stopped. The parameters passed to this invocation will be a snapshot\n+  /// of any stream state that has not yet been forwarded along the filter chain.\n+  ///\n+  /// As with other filter invocations, this will be called on Envoy's main thread, and thus\n+  /// no additional synchronization is required between this and other invocations.\n+  ///\n+  /// - param headers: Headers, if `StopIteration` was returned from `onResponseHeaders`.\n+  /// - param data: Any data that has been buffered where `StopIterationAndBuffer` was returned.\n+  /// - param trailers: Trailers, if `StopIteration` was returned from `onReponseTrailers`.\n+  /// - param endStream: True, if the stream ended with the previous (and thus, last) invocation.", "originalCommit": "1b3ff051216c634865382e6744e850f5dc7c1592", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1MzU4MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470753581", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /// an error to include data or trailers if endStream was previously sent or if trailers have\n          \n          \n            \n              /// an error to include data or trailers if endStream=true was previously sent or if trailers have", "author": "rebello95", "createdAt": "2020-08-14T17:18:29Z", "path": "library/swift/src/filters/FilterResumeStatus.swift", "diffHunk": "@@ -0,0 +1,15 @@\n+import Foundation\n+\n+/// Status returned by filters after resuming iteration asynchronously.\n+@frozen\n+public enum FilterResumeStatus<T: Headers, U: Headers>: Equatable {\n+  /// Resume previously-stopped iteration, potentially forwarding headers, data, and/or trailers\n+  /// that have not yet been passed along the filter chain.\n+  ///\n+  /// It is an error to return resumeIteration if iteration is not currently stopped, and it is\n+  /// an error to include headers if headers have already been forwarded to the next filter\n+  /// (i.e. iteration was stopped during an on*Data invocation instead of on*Headers). It is also\n+  /// an error to include data or trailers if endStream was previously sent or if trailers have", "originalCommit": "1b3ff051216c634865382e6744e850f5dc7c1592", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1MzcyMQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470753721", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /// It is an error to return ResumeIteration if iteration is not currently stopped, and it is\n          \n          \n            \n              /// It is an error to return resumeIteration if iteration is not currently stopped, and it is", "author": "rebello95", "createdAt": "2020-08-14T17:18:48Z", "path": "library/swift/src/filters/FilterTrailersStatus.swift", "diffHunk": "@@ -1,12 +1,24 @@\n+import Foundation\n+\n /// Status returned by filters when transmitting or receiving trailers.\n @frozen\n-public enum FilterTrailersStatus<T: Headers>: Equatable {\n+public enum FilterTrailersStatus<T: Headers, U: Headers>: Equatable {\n   /// Continue filter chain iteration, passing the provided trailers through.\n-  case `continue`(T)\n+  case `continue`(U)\n \n   /// Do not iterate to any of the remaining filters in the chain with trailers.\n   ///\n-  /// Calling `continueRequest()`/`continueResponse()` MUST occur when continued filter iteration\n+  /// Because trailers are by definition the last HTTP entity of a request or response, only\n+  /// asynchronous filters support resumption after returning StopIteration from on*Trailers.\n+  /// Calling `resumeRequest()`/`resumeResponse()` MUST occur if continued filter iteration\n   /// is desired.\n-  case stopIteration(T)\n+  case stopIteration\n+\n+  /// Resume previously-stopped iteration, possibly forwarding headers and data if iteration was\n+  /// stopped during an on*Headers or on*Data invocation.\n+  ///\n+  /// It is an error to return ResumeIteration if iteration is not currently stopped, and it is", "originalCommit": "1b3ff051216c634865382e6744e850f5dc7c1592", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgwOTQ1Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470809452", "bodyText": "Something I noticed while testing out these interfaces on a filter migration is that it's not immediately obvious to the consumer that returning .resumeIteration(...) does not call onResumeIteration() - only calling resumeRequest() does. Thoughts on how we could clarify that either through naming or documentation?", "author": "rebello95", "createdAt": "2020-08-14T18:49:54Z", "path": "library/swift/src/filters/FilterDataStatus.swift", "diffHunk": "@@ -35,4 +35,12 @@ public enum FilterDataStatus: Equatable {\n   /// This may be called by filters which must parse a larger block of the incoming data before\n   /// continuing processing, and will handle their own buffering.\n   case stopIterationNoBuffer\n+\n+  /// Resume previously-stopped iteration, possibly forwarding headers if iteration was stopped\n+  /// during an on*Headers invocation.\n+  ///\n+  /// It is an error to return `resumeIteration` if iteration is not currently stopped, and it is\n+  /// an error to include headers if headers have already been forwarded to the next filter\n+  /// (i.e. iteration was stopped during an on*Data invocation instead of on*Headers).\n+  case resumeIteration(headers: T? = nil, data: Data)", "originalCommit": "1b3ff051216c634865382e6744e850f5dc7c1592", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMTc3NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470811774", "bodyText": "Would it make sense to simply rename continue and allow optional headers to be passed there? Since my understanding is the ability to pass headers here is the only difference between the two", "author": "rebello95", "createdAt": "2020-08-14T18:54:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgwOTQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxMzcyMA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470913720", "bodyText": "Based on our discussion elsewhere, I believe we've all settled on having \"continue\" be for continuing ongoing iteration and \"resume\" specifically for starting again when iteration has been stopped.", "author": "goaway", "createdAt": "2020-08-15T00:25:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgwOTQ1Mg=="}], "type": "inlineReview"}, {"oid": "dc73a5e7208c8134b03d2aa4289cbf7620194627", "url": "https://github.com/envoyproxy/envoy-mobile/commit/dc73a5e7208c8134b03d2aa4289cbf7620194627", "message": "complex filters: add ResumeIteration status\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:53Z", "type": "commit"}, {"oid": "b0e2410d837741f3a5f8cc50ae5ffd723c16a7f6", "url": "https://github.com/envoyproxy/envoy-mobile/commit/b0e2410d837741f3a5f8cc50ae5ffd723c16a7f6", "message": "missed removing associated value\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:53Z", "type": "commit"}, {"oid": "b79b74c6edc9f01046444534668b2364d7f462b9", "url": "https://github.com/envoyproxy/envoy-mobile/commit/b79b74c6edc9f01046444534668b2364d7f462b9", "message": "add onResume\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:53Z", "type": "commit"}, {"oid": "eab18226bc4d44ef7f73c669e5a7ff3355f3e1f4", "url": "https://github.com/envoyproxy/envoy-mobile/commit/eab18226bc4d44ef7f73c669e5a7ff3355f3e1f4", "message": "introduce async filter interfaces\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:54Z", "type": "commit"}, {"oid": "f871efe68473cacc49e938322c73c52425260899", "url": "https://github.com/envoyproxy/envoy-mobile/commit/f871efe68473cacc49e938322c73c52425260899", "message": "wip updating for onResume handling\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:54Z", "type": "commit"}, {"oid": "f0b047c82a4fae1415cbe848e6c551750ab530ed", "url": "https://github.com/envoyproxy/envoy-mobile/commit/f0b047c82a4fae1415cbe848e6c551750ab530ed", "message": "finish updating swift types\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:54Z", "type": "commit"}, {"oid": "26ea6bd58ebb6b57e74c6484cd262f187457a256", "url": "https://github.com/envoyproxy/envoy-mobile/commit/26ea6bd58ebb6b57e74c6484cd262f187457a256", "message": "update kotlin statuses\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:54Z", "type": "commit"}, {"oid": "7d01a4bf2d49f0a2004905aad84715777e4bb394", "url": "https://github.com/envoyproxy/envoy-mobile/commit/7d01a4bf2d49f0a2004905aad84715777e4bb394", "message": "import and comment\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:54Z", "type": "commit"}, {"oid": "ac643167b9e344be10a4fdf9472ca7fc241d363e", "url": "https://github.com/envoyproxy/envoy-mobile/commit/ac643167b9e344be10a4fdf9472ca7fc241d363e", "message": "kotlin signatures\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:54Z", "type": "commit"}, {"oid": "637507df1d2cbdcbad63c1e67e4208eeebb67b8b", "url": "https://github.com/envoyproxy/envoy-mobile/commit/637507df1d2cbdcbad63c1e67e4208eeebb67b8b", "message": "swift missing imports\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:54Z", "type": "commit"}, {"oid": "cfaa8e951533db1f8e5697b515e22299e7b9f8b2", "url": "https://github.com/envoyproxy/envoy-mobile/commit/cfaa8e951533db1f8e5697b515e22299e7b9f8b2", "message": "swift compiles\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:54Z", "type": "commit"}, {"oid": "ba301d4e2ff9a606e74704e5078edc438d5f02bc", "url": "https://github.com/envoyproxy/envoy-mobile/commit/ba301d4e2ff9a606e74704e5078edc438d5f02bc", "message": "kotlin compiles\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:54Z", "type": "commit"}, {"oid": "33b178e107eb93c3c8b02f70dcad9f8de9f6dc2c", "url": "https://github.com/envoyproxy/envoy-mobile/commit/33b178e107eb93c3c8b02f70dcad9f8de9f6dc2c", "message": "improve comments and formatting\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:54Z", "type": "commit"}, {"oid": "b3ba880797b53a8e20f0f1697fe74e40fa9d5068", "url": "https://github.com/envoyproxy/envoy-mobile/commit/b3ba880797b53a8e20f0f1697fe74e40fa9d5068", "message": "more docstring updates\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:54Z", "type": "commit"}, {"oid": "86af2eb3a6c3ff6178c5af355e2f24ec3f95aa6d", "url": "https://github.com/envoyproxy/envoy-mobile/commit/86af2eb3a6c3ff6178c5af355e2f24ec3f95aa6d", "message": "further docstring updates\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:54Z", "type": "commit"}, {"oid": "9a0b054f3359799f355ef57e9d50daa059a24fdd", "url": "https://github.com/envoyproxy/envoy-mobile/commit/9a0b054f3359799f355ef57e9d50daa059a24fdd", "message": "more docstring work\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:54Z", "type": "commit"}, {"oid": "fa6b1226732daf2b3167123bb5c70899eed6818a", "url": "https://github.com/envoyproxy/envoy-mobile/commit/fa6b1226732daf2b3167123bb5c70899eed6818a", "message": "fix type\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:54Z", "type": "commit"}, {"oid": "769451319ae6429270f9e5d5ffc8d49544e63517", "url": "https://github.com/envoyproxy/envoy-mobile/commit/769451319ae6429270f9e5d5ffc8d49544e63517", "message": "format and fixes\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:54Z", "type": "commit"}, {"oid": "1f9061088d0a1d07b81c8c88a7d673b871453096", "url": "https://github.com/envoyproxy/envoy-mobile/commit/1f9061088d0a1d07b81c8c88a7d673b871453096", "message": "fix Swift example app; updates to comments\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:54Z", "type": "commit"}, {"oid": "1bef7a2b23aa89b06340b894d9ae5d0d01c810e0", "url": "https://github.com/envoyproxy/envoy-mobile/commit/1bef7a2b23aa89b06340b894d9ae5d0d01c810e0", "message": "add parameter documentation to filter statuses\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:54Z", "type": "commit"}, {"oid": "677da2cd32226bea00f4d1430e0afc174e2634b6", "url": "https://github.com/envoyproxy/envoy-mobile/commit/677da2cd32226bea00f4d1430e0afc174e2634b6", "message": "further updates to docstrings\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:54Z", "type": "commit"}, {"oid": "fd1ee9862a93506e2f305971093c285f765ce392", "url": "https://github.com/envoyproxy/envoy-mobile/commit/fd1ee9862a93506e2f305971093c285f765ce392", "message": "minor correction\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:54Z", "type": "commit"}, {"oid": "2ad9c7e2cb9d01e07becac9861a3e4fd7303dc4d", "url": "https://github.com/envoyproxy/envoy-mobile/commit/2ad9c7e2cb9d01e07becac9861a3e4fd7303dc4d", "message": "trailing whitespace\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:54Z", "type": "commit"}, {"oid": "6964a48c66a9f22137b42d8cb787ab5cbd2ac1d5", "url": "https://github.com/envoyproxy/envoy-mobile/commit/6964a48c66a9f22137b42d8cb787ab5cbd2ac1d5", "message": "add missing import\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:54Z", "type": "commit"}, {"oid": "6964a48c66a9f22137b42d8cb787ab5cbd2ac1d5", "url": "https://github.com/envoyproxy/envoy-mobile/commit/6964a48c66a9f22137b42d8cb787ab5cbd2ac1d5", "message": "add missing import\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:50:54Z", "type": "forcePushed"}, {"oid": "1e580306ac8620088b2e43c7d1307f3067dcbf85", "url": "https://github.com/envoyproxy/envoy-mobile/commit/1e580306ac8620088b2e43c7d1307f3067dcbf85", "message": "fix kotlin demo app\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T01:57:34Z", "type": "commit"}, {"oid": "59247793777f651c8f9a67cd4c57eb6bc78a2877", "url": "https://github.com/envoyproxy/envoy-mobile/commit/59247793777f651c8f9a67cd4c57eb6bc78a2877", "message": "kotlin lint again\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T02:56:39Z", "type": "commit"}, {"oid": "343cfbd2fed5059927911177466f8aa69e9baeb6", "url": "https://github.com/envoyproxy/envoy-mobile/commit/343cfbd2fed5059927911177466f8aa69e9baeb6", "message": "fix swift app\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-08-15T02:58:13Z", "type": "commit"}]}