{"pr_number": 1118, "pr_title": "filters: add core and iOS support for on-resume invocations", "pr_createdAt": "2020-09-23T10:33:48Z", "pr_url": "https://github.com/envoyproxy/envoy-mobile/pull/1118", "timeline": [{"oid": "ab9eaa530d0155c9341e2f7286585bb34681bf56", "url": "https://github.com/envoyproxy/envoy-mobile/commit/ab9eaa530d0155c9341e2f7286585bb34681bf56", "message": "filters: wire onResume in core PlatformBridgeFilter\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-09-28T11:35:05Z", "type": "forcePushed"}, {"oid": "c52880d55ef7f089e0f7da9d600a7765147171ee", "url": "https://github.com/envoyproxy/envoy-mobile/commit/c52880d55ef7f089e0f7da9d600a7765147171ee", "message": "filters: wire onResume in core PlatformBridgeFilter\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-09-29T01:22:56Z", "type": "forcePushed"}, {"oid": "fcdd408b5eb35618e97512242f4331b0bbc26ffc", "url": "https://github.com/envoyproxy/envoy-mobile/commit/fcdd408b5eb35618e97512242f4331b0bbc26ffc", "message": "ios wiring\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-09-30T13:33:25Z", "type": "forcePushed"}, {"oid": "bed6824f6e8f1de9c0a4466f52166434e74522eb", "url": "https://github.com/envoyproxy/envoy-mobile/commit/bed6824f6e8f1de9c0a4466f52166434e74522eb", "message": "fixes\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-01T12:33:43Z", "type": "forcePushed"}, {"oid": "a4c2225494ebb326a30d49d0e17417777f9d7208", "url": "https://github.com/envoyproxy/envoy-mobile/commit/a4c2225494ebb326a30d49d0e17417777f9d7208", "message": "filters: wire onResume in core PlatformBridgeFilter\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-05T09:03:50Z", "type": "commit"}, {"oid": "e909ff3237d54604a8b978d2b8004928dd214766", "url": "https://github.com/envoyproxy/envoy-mobile/commit/e909ff3237d54604a8b978d2b8004928dd214766", "message": "ios wiring\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-05T09:03:50Z", "type": "commit"}, {"oid": "99f86cc3d8172e418c47922f0e4ab66b5092e842", "url": "https://github.com/envoyproxy/envoy-mobile/commit/99f86cc3d8172e418c47922f0e4ab66b5092e842", "message": "fixes\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-05T09:03:50Z", "type": "commit"}, {"oid": "133f2c264cbb15f194a1f80bfdb6b1ba2de924d2", "url": "https://github.com/envoyproxy/envoy-mobile/commit/133f2c264cbb15f194a1f80bfdb6b1ba2de924d2", "message": "more fixes\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-05T09:03:50Z", "type": "commit"}, {"oid": "9006065419ec478abdf7dfb36d0aa16e60cb6574", "url": "https://github.com/envoyproxy/envoy-mobile/commit/9006065419ec478abdf7dfb36d0aa16e60cb6574", "message": "compiles\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-07T11:33:33Z", "type": "commit"}, {"oid": "de59a96ca8ee5a4541df2e9519a458e52e2dd5f0", "url": "https://github.com/envoyproxy/envoy-mobile/commit/de59a96ca8ee5a4541df2e9519a458e52e2dd5f0", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-07T11:33:59Z", "type": "commit"}, {"oid": "2a16d3148348de960e320dd15c1fdd4a6fd79d74", "url": "https://github.com/envoyproxy/envoy-mobile/commit/2a16d3148348de960e320dd15c1fdd4a6fd79d74", "message": "swiftlint\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-07T11:37:49Z", "type": "commit"}, {"oid": "4584f8f456b6c69ef822cd98c1e954b8f6803ef0", "url": "https://github.com/envoyproxy/envoy-mobile/commit/4584f8f456b6c69ef822cd98c1e954b8f6803ef0", "message": "runs\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-07T11:51:24Z", "type": "commit"}, {"oid": "4584f8f456b6c69ef822cd98c1e954b8f6803ef0", "url": "https://github.com/envoyproxy/envoy-mobile/commit/4584f8f456b6c69ef822cd98c1e954b8f6803ef0", "message": "runs\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-07T11:51:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMxODg0OA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r501318848", "bodyText": "If these are truly arbitrary, why not start zero-indexed? I assume the -1 is coming from the same reasoning above, in which case we should probably make that clearer here", "author": "rebello95", "createdAt": "2020-10-07T21:24:54Z", "path": "library/common/extensions/filters/http/platform_bridge/c_type_definitions.h", "diffHunk": "@@ -44,3 +44,7 @@ const envoy_filter_trailers_status_t kEnvoyFilterTrailersStatusStopIteration =\n // See comment above.\n const envoy_filter_trailers_status_t kEnvoyFilterTrailersStatusResumeIteration =\n     kEnvoyFilterTrailersStatusContinue - 1;\n+\n+// These values don't exist in Envoy and are essentially arbitrary.\n+const envoy_filter_resume_status_t kEnvoyFilterResumeStatusStopIteration = 1;\n+const envoy_filter_resume_status_t kEnvoyFilterResumeStatusResumeIteration = -1;", "originalCommit": "4584f8f456b6c69ef822cd98c1e954b8f6803ef0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMyNTM2OA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r502325368", "bodyText": "I simply set them to be consistent with other invocations, but the comment is meant to suggest that one shouldn't rely on them being anything in particular (other than constant). They could also be zero-indexed (and I actually don't have a preference).", "author": "goaway", "createdAt": "2020-10-09T10:07:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMxODg0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNTIyMg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r501325222", "bodyText": "nits on naming:\n\npending_* here might be easily misread between pending_headers/pending_request_header. Might be worth changing to headers_to_send or something like that\nwhy internal_buffer instead of pending_request_data to align with the others?", "author": "rebello95", "createdAt": "2020-10-07T21:38:47Z", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -313,9 +321,111 @@ PlatformBridgeFilter::encodeTrailers(Http::ResponseTrailerMap& trailers) {\n   if (status == Http::FilterTrailersStatus::StopIteration) {\n     pending_response_trailers_ = &trailers;\n   }\n+  response_complete_ = true;\n   return status;\n }\n \n+void PlatformBridgeFilter::onResumeDecoding() {\n+  Buffer::Instance* internal_buffer = nullptr;\n+  if (decoder_callbacks_->decodingBuffer()) {\n+    decoder_callbacks_->modifyDecodingBuffer([&internal_buffer](Buffer::Instance& mutable_buffer) {\n+      internal_buffer = &mutable_buffer;\n+    });\n+  }\n+\n+  envoy_headers* pending_headers = nullptr;\n+  envoy_data* pending_data = nullptr;\n+  envoy_headers* pending_trailers = nullptr;", "originalCommit": "4584f8f456b6c69ef822cd98c1e954b8f6803ef0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNjkwOQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r501326909", "bodyText": "I now see below that internal_buffer is reused between request/response, which I assume is the reason for that name. Are there any concerns around that state not being properly cleared before starting to receive response data?", "author": "rebello95", "createdAt": "2020-10-07T21:42:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNTIyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMyNTI5Mw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r502325293", "bodyText": "internal_buffer is a temporary pointer to the buffer needed for that invocation. The naming here is consistent with the other invocations, which do share more code. (The actual underlying memory is never shared between the request and response path.) I elected not to share code in this case as I felt it introduced more complexity rather than simplified things, due to the number of pending references in this singular case.\nBut honestly no strong feelings. Since the code isn't shared, we could be more particular about the naming.", "author": "goaway", "createdAt": "2020-10-09T10:07:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNTIyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNTU1MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r501325551", "bodyText": "Should we assert in the else case that result.pending_headers is not passed?", "author": "rebello95", "createdAt": "2020-10-07T21:39:35Z", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -313,9 +321,111 @@ PlatformBridgeFilter::encodeTrailers(Http::ResponseTrailerMap& trailers) {\n   if (status == Http::FilterTrailersStatus::StopIteration) {\n     pending_response_trailers_ = &trailers;\n   }\n+  response_complete_ = true;\n   return status;\n }\n \n+void PlatformBridgeFilter::onResumeDecoding() {\n+  Buffer::Instance* internal_buffer = nullptr;\n+  if (decoder_callbacks_->decodingBuffer()) {\n+    decoder_callbacks_->modifyDecodingBuffer([&internal_buffer](Buffer::Instance& mutable_buffer) {\n+      internal_buffer = &mutable_buffer;\n+    });\n+  }\n+\n+  envoy_headers* pending_headers = nullptr;\n+  envoy_data* pending_data = nullptr;\n+  envoy_headers* pending_trailers = nullptr;\n+  if (pending_request_headers_) {\n+    *pending_headers = Http::Utility::toBridgeHeaders(*pending_request_headers_);\n+  }\n+  if (internal_buffer) {\n+    *pending_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  }\n+  if (pending_request_trailers_) {\n+    *pending_trailers = Http::Utility::toBridgeHeaders(*pending_request_trailers_);\n+  }\n+\n+  envoy_filter_resume_status result =\n+      platform_filter_.on_resume_request(pending_headers, pending_data, pending_trailers,\n+                                         request_complete_, platform_filter_.instance_context);\n+  if (result.status == kEnvoyFilterResumeStatusStopIteration) {\n+    return;\n+  }\n+  if (pending_request_headers_) {\n+    PlatformBridgeFilter::replaceHeaders(*pending_request_headers_, *result.pending_headers);\n+    pending_request_headers_ = nullptr;\n+    free(result.pending_headers);\n+  }", "originalCommit": "4584f8f456b6c69ef822cd98c1e954b8f6803ef0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMyNzQ5Ng==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r502327496", "bodyText": "Sure. It will explode either way, but an ASSERT lets us give a nice reason for it. I'll update.", "author": "goaway", "createdAt": "2020-10-09T10:11:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNTU1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNTY0Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r501325642", "bodyText": "Same here regarding assert", "author": "rebello95", "createdAt": "2020-10-07T21:39:44Z", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -313,9 +321,111 @@ PlatformBridgeFilter::encodeTrailers(Http::ResponseTrailerMap& trailers) {\n   if (status == Http::FilterTrailersStatus::StopIteration) {\n     pending_response_trailers_ = &trailers;\n   }\n+  response_complete_ = true;\n   return status;\n }\n \n+void PlatformBridgeFilter::onResumeDecoding() {\n+  Buffer::Instance* internal_buffer = nullptr;\n+  if (decoder_callbacks_->decodingBuffer()) {\n+    decoder_callbacks_->modifyDecodingBuffer([&internal_buffer](Buffer::Instance& mutable_buffer) {\n+      internal_buffer = &mutable_buffer;\n+    });\n+  }\n+\n+  envoy_headers* pending_headers = nullptr;\n+  envoy_data* pending_data = nullptr;\n+  envoy_headers* pending_trailers = nullptr;\n+  if (pending_request_headers_) {\n+    *pending_headers = Http::Utility::toBridgeHeaders(*pending_request_headers_);\n+  }\n+  if (internal_buffer) {\n+    *pending_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  }\n+  if (pending_request_trailers_) {\n+    *pending_trailers = Http::Utility::toBridgeHeaders(*pending_request_trailers_);\n+  }\n+\n+  envoy_filter_resume_status result =\n+      platform_filter_.on_resume_request(pending_headers, pending_data, pending_trailers,\n+                                         request_complete_, platform_filter_.instance_context);\n+  if (result.status == kEnvoyFilterResumeStatusStopIteration) {\n+    return;\n+  }\n+  if (pending_request_headers_) {\n+    PlatformBridgeFilter::replaceHeaders(*pending_request_headers_, *result.pending_headers);\n+    pending_request_headers_ = nullptr;\n+    free(result.pending_headers);\n+  }\n+  if (internal_buffer) {\n+    internal_buffer->drain(internal_buffer->length());\n+    internal_buffer->addBufferFragment(\n+        *Buffer::BridgeFragment::createBridgeFragment(*result.pending_data));\n+    free(result.pending_data);\n+  } else if (result.pending_data) {\n+    Buffer::OwnedImpl inject_data;\n+    inject_data.addBufferFragment(\n+        *Buffer::BridgeFragment::createBridgeFragment(*result.pending_data));\n+    decoder_callbacks_->addDecodedData(inject_data, false);\n+    free(result.pending_data);\n+  }\n+  if (pending_request_trailers_) {\n+    PlatformBridgeFilter::replaceHeaders(*pending_request_trailers_, *result.pending_trailers);\n+    pending_request_trailers_ = nullptr;\n+    free(result.pending_trailers);\n+  }", "originalCommit": "4584f8f456b6c69ef822cd98c1e954b8f6803ef0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMyODY5Mw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r502328693", "bodyText": "Sounds good, I'll update.", "author": "goaway", "createdAt": "2020-10-09T10:13:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNTY0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNjIxNg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r501326216", "bodyText": "is false referring to end_stream here? If so, is it safe to always assume false (how does the consumer close the stream?)?", "author": "rebello95", "createdAt": "2020-10-07T21:41:07Z", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -313,9 +321,111 @@ PlatformBridgeFilter::encodeTrailers(Http::ResponseTrailerMap& trailers) {\n   if (status == Http::FilterTrailersStatus::StopIteration) {\n     pending_response_trailers_ = &trailers;\n   }\n+  response_complete_ = true;\n   return status;\n }\n \n+void PlatformBridgeFilter::onResumeDecoding() {\n+  Buffer::Instance* internal_buffer = nullptr;\n+  if (decoder_callbacks_->decodingBuffer()) {\n+    decoder_callbacks_->modifyDecodingBuffer([&internal_buffer](Buffer::Instance& mutable_buffer) {\n+      internal_buffer = &mutable_buffer;\n+    });\n+  }\n+\n+  envoy_headers* pending_headers = nullptr;\n+  envoy_data* pending_data = nullptr;\n+  envoy_headers* pending_trailers = nullptr;\n+  if (pending_request_headers_) {\n+    *pending_headers = Http::Utility::toBridgeHeaders(*pending_request_headers_);\n+  }\n+  if (internal_buffer) {\n+    *pending_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  }\n+  if (pending_request_trailers_) {\n+    *pending_trailers = Http::Utility::toBridgeHeaders(*pending_request_trailers_);\n+  }\n+\n+  envoy_filter_resume_status result =\n+      platform_filter_.on_resume_request(pending_headers, pending_data, pending_trailers,\n+                                         request_complete_, platform_filter_.instance_context);\n+  if (result.status == kEnvoyFilterResumeStatusStopIteration) {\n+    return;\n+  }\n+  if (pending_request_headers_) {\n+    PlatformBridgeFilter::replaceHeaders(*pending_request_headers_, *result.pending_headers);\n+    pending_request_headers_ = nullptr;\n+    free(result.pending_headers);\n+  }\n+  if (internal_buffer) {\n+    internal_buffer->drain(internal_buffer->length());\n+    internal_buffer->addBufferFragment(\n+        *Buffer::BridgeFragment::createBridgeFragment(*result.pending_data));\n+    free(result.pending_data);\n+  } else if (result.pending_data) {\n+    Buffer::OwnedImpl inject_data;\n+    inject_data.addBufferFragment(\n+        *Buffer::BridgeFragment::createBridgeFragment(*result.pending_data));\n+    decoder_callbacks_->addDecodedData(inject_data, false);", "originalCommit": "4584f8f456b6c69ef822cd98c1e954b8f6803ef0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMyODYxMg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r502328612", "bodyText": "The false actually is part of an unrelated Envoy API that has to do with whether buffer watermarking will occur - which has to do with backpressure, and isn't applicable for a library. (The documentation on the API is actually a little bit ambiguous to me, but false seemed correct based on my reading of it and other usage I've encountered.)", "author": "goaway", "createdAt": "2020-10-09T10:13:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNjIxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU1MTE4Mw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r502551183", "bodyText": "Got it. Let's do an inline /* watermark */ to annotate", "author": "rebello95", "createdAt": "2020-10-09T16:42:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNjIxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNzUzNg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r501327536", "bodyText": "I know decoding/encoding is an Envoy construct, but I think onResumeRequest/onResumeResponse would be clearer here since these are executed as a result of functions with similar names in Envoy Mobile", "author": "rebello95", "createdAt": "2020-10-07T21:44:20Z", "path": "library/common/extensions/filters/http/platform_bridge/filter.h", "diffHunk": "@@ -50,6 +50,18 @@ class PlatformBridgeFilter final : public Http::PassThroughFilter,\n public:\n   PlatformBridgeFilter(PlatformBridgeFilterConfigSharedPtr config);\n \n+  // Scheduled on the dispatcher when resumeRequest is called from platform\n+  // filter callbacks. Provides a snapshot of pending request state to the\n+  // platform filter, and consumes invocation results to modify pending HTTP\n+  // entities before resuming decoding.\n+  void onResumeDecoding();", "originalCommit": "4584f8f456b6c69ef822cd98c1e954b8f6803ef0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMzMTg4Mw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r502331883", "bodyText": "The other functions in this class all use decode and encode (see L69+ below), due to the names being dictated by Envoy's own interfaces. I use request/response everywhere above this, because I do think it's clearer, especially for our use case, but my feeling was that it was worthwhile being consistent at least within a single class.", "author": "goaway", "createdAt": "2020-10-09T10:20:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNzUzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNzg5MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r501327891", "bodyText": "Mind documenting this?", "author": "rebello95", "createdAt": "2020-10-07T21:45:07Z", "path": "library/objective-c/EnvoyEngine.h", "diffHunk": "@@ -74,6 +74,17 @@ extern const int kEnvoyFilterTrailersStatusContinue;\n extern const int kEnvoyFilterTrailersStatusStopIteration;\n extern const int kEnvoyFilterTrailersStatusResumeIteration;\n \n+/// Return codes for on-resume filter invocations. These are unique to platform filters,\n+/// and used exclusively after an asynchronous request to resume iteration via callbacks.\n+extern const int kEnvoyFilterResumeStatusStopIteration;\n+extern const int kEnvoyFilterResumeStatusResumeIteration;\n+\n+@protocol EnvoyHTTPFilterCallbacks\n+\n+- (void)resumeIteration;\n+\n+@end", "originalCommit": "4584f8f456b6c69ef822cd98c1e954b8f6803ef0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyODQ2NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r501328464", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                callbacks.resumeIteration()\n          \n          \n            \n                self.callbacks.resumeIteration()", "author": "rebello95", "createdAt": "2020-10-07T21:46:28Z", "path": "library/swift/src/filters/ResponseFilterCallbacksImpl.swift", "diffHunk": "@@ -0,0 +1,18 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+/// Envoy implementation of ResponseFilterCallbacks\n+final class ResponseFilterCallbacksImpl: NSObject {\n+  private let callbacks: EnvoyHTTPFilterCallbacks\n+\n+  init(callbacks: EnvoyHTTPFilterCallbacks) {\n+    self.callbacks = callbacks\n+    super.init()\n+  }\n+}\n+\n+extension ResponseFilterCallbacksImpl: ResponseFilterCallbacks {\n+  func resumeResponse() {\n+    callbacks.resumeIteration()", "originalCommit": "4584f8f456b6c69ef822cd98c1e954b8f6803ef0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyODUxOQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r501328519", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                callbacks.resumeIteration()\n          \n          \n            \n                self.callbacks.resumeIteration()", "author": "rebello95", "createdAt": "2020-10-07T21:46:34Z", "path": "library/swift/src/filters/RequestFilterCallbacksImpl.swift", "diffHunk": "@@ -0,0 +1,18 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+/// Envoy implementation of RequestFilterCallbacks\n+final class RequestFilterCallbacksImpl: NSObject {\n+  private let callbacks: EnvoyHTTPFilterCallbacks\n+\n+  init(callbacks: EnvoyHTTPFilterCallbacks) {\n+    self.callbacks = callbacks\n+    super.init()\n+  }\n+}\n+\n+extension RequestFilterCallbacksImpl: RequestFilterCallbacks {\n+  func resumeRequest() {\n+    callbacks.resumeIteration()", "originalCommit": "4584f8f456b6c69ef822cd98c1e954b8f6803ef0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMzNTM3OA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r502335378", "bodyText": "Cool; for same reason every language has a different convention around this. :p", "author": "goaway", "createdAt": "2020-10-09T10:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyODUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU1MTY0NQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r502551645", "bodyText": "yea the bias I've kept in this repo (same at Lyft) is to explicitly use self. to make the source clearer (it's required within closures as well)", "author": "rebello95", "createdAt": "2020-10-09T16:43:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyODUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyOTk1NQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r501329955", "bodyText": "I know adding type annotations here isn't possible since they're varied types, but can we at least document the expected contents and lengths of these NSArrays?", "author": "rebello95", "createdAt": "2020-10-07T21:49:52Z", "path": "library/objective-c/EnvoyEngine.h", "diffHunk": "@@ -88,6 +99,20 @@ extern const int kEnvoyFilterTrailersStatusResumeIteration;\n \n @property (nonatomic, copy) NSArray * (^onResponseTrailers)(EnvoyHeaders *trailers);\n \n+@property (nonatomic, copy) void (^setRequestFilterCallbacks)\n+    (id<EnvoyHTTPFilterCallbacks> callbacks);\n+\n+@property (nonatomic, copy) NSArray * (^onResumeRequest)", "originalCommit": "4584f8f456b6c69ef822cd98c1e954b8f6803ef0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMzMjczNQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r502332735", "bodyText": "Sounds good.", "author": "goaway", "createdAt": "2020-10-09T10:21:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyOTk1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzMDI3MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r501330271", "bodyText": "Why do we need this?", "author": "rebello95", "createdAt": "2020-10-07T21:50:34Z", "path": "library/objective-c/EnvoyFilterCallbacksImpl.m", "diffHunk": "@@ -0,0 +1,20 @@\n+#import \"library/objective-c/EnvoyEngine.h\"\n+\n+#pragma mark - EnvoyHTTPFilterCallbacksImpl\n+\n+@implementation EnvoyHTTPFilterCallbacks {\n+}\n+\n+- (instancetype)init {\n+  self = [super init];\n+  if (!self) {\n+    return nil\n+  }\n+  return self;\n+}", "originalCommit": "4584f8f456b6c69ef822cd98c1e954b8f6803ef0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMzMzkwNw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r502333907", "bodyText": "The next PR has stuff that needs to go here, so I went ahead and dropped in the boilerplate when I created the class.", "author": "goaway", "createdAt": "2020-10-09T10:24:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzMDI3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzMDMzMw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r501330333", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @implementation EnvoyHTTPFilterCallbacks {\n          \n          \n            \n            }\n          \n          \n            \n            @implementation EnvoyHTTPFilterCallbacks", "author": "rebello95", "createdAt": "2020-10-07T21:50:41Z", "path": "library/objective-c/EnvoyFilterCallbacksImpl.m", "diffHunk": "@@ -0,0 +1,20 @@\n+#import \"library/objective-c/EnvoyEngine.h\"\n+\n+#pragma mark - EnvoyHTTPFilterCallbacksImpl\n+\n+@implementation EnvoyHTTPFilterCallbacks {\n+}", "originalCommit": "4584f8f456b6c69ef822cd98c1e954b8f6803ef0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzMDM3NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r501330374", "bodyText": "Should there be a TODO here?", "author": "rebello95", "createdAt": "2020-10-07T21:50:47Z", "path": "library/objective-c/EnvoyFilterCallbacksImpl.m", "diffHunk": "@@ -0,0 +1,20 @@\n+#import \"library/objective-c/EnvoyEngine.h\"\n+\n+#pragma mark - EnvoyHTTPFilterCallbacksImpl\n+\n+@implementation EnvoyHTTPFilterCallbacks {\n+}\n+\n+- (instancetype)init {\n+  self = [super init];\n+  if (!self) {\n+    return nil\n+  }\n+  return self;\n+}\n+\n+- (void)resumeIteration {\n+  NSLog(@\"async resume\");", "originalCommit": "4584f8f456b6c69ef822cd98c1e954b8f6803ef0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMzMzc0OA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r502333748", "bodyText": "Yeah, I'll add one.", "author": "goaway", "createdAt": "2020-10-09T10:23:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzMDM3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzMDc5Mw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r501330793", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      headers: envoyHeaders.flatMap(RequestHeaders.init),\n          \n          \n            \n                      headers: envoyHeaders.map(RequestHeaders.init),", "author": "rebello95", "createdAt": "2020-10-07T21:51:40Z", "path": "library/swift/src/filters/Filter.swift", "diffHunk": "@@ -105,5 +105,55 @@ extension EnvoyHTTPFilter {\n         }\n       }\n     }\n+\n+    if let asyncRequestFilter = filter as? AsyncRequestFilter {\n+      self.setRequestFilterCallbacks = { envoyCallbacks in\n+        asyncRequestFilter.setRequestFilterCallbacks(\n+          RequestFilterCallbacksImpl(callbacks: envoyCallbacks)\n+        )\n+      }\n+\n+      self.onResumeRequest = { envoyHeaders, data, envoyTrailers, endStream in\n+        let result = asyncRequestFilter.onResumeRequest(\n+          headers: envoyHeaders.flatMap(RequestHeaders.init),", "originalCommit": "4584f8f456b6c69ef822cd98c1e954b8f6803ef0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMzNDgwMg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r502334802", "bodyText": "Oh is map preferred/idiomatic for optional over flatMap now? (and did that change or did I misremember?)", "author": "goaway", "createdAt": "2020-10-09T10:26:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzMDc5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU1MjAzMg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r502552032", "bodyText": "flatMap will unwrap the optional and the optional returned as the result of the closure. Since the closure returns a non-optional, there's no reason to use flatMap over map", "author": "rebello95", "createdAt": "2020-10-09T16:44:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzMDc5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1NDcyNw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r503254727", "bodyText": "Thanks, that makes sense.", "author": "goaway", "createdAt": "2020-10-12T12:16:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzMDc5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzMDgzNw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r501330837", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      trailers: envoyTrailers.flatMap(RequestTrailers.init),\n          \n          \n            \n                      trailers: envoyTrailers.map(RequestTrailers.init),", "author": "rebello95", "createdAt": "2020-10-07T21:51:45Z", "path": "library/swift/src/filters/Filter.swift", "diffHunk": "@@ -105,5 +105,55 @@ extension EnvoyHTTPFilter {\n         }\n       }\n     }\n+\n+    if let asyncRequestFilter = filter as? AsyncRequestFilter {\n+      self.setRequestFilterCallbacks = { envoyCallbacks in\n+        asyncRequestFilter.setRequestFilterCallbacks(\n+          RequestFilterCallbacksImpl(callbacks: envoyCallbacks)\n+        )\n+      }\n+\n+      self.onResumeRequest = { envoyHeaders, data, envoyTrailers, endStream in\n+        let result = asyncRequestFilter.onResumeRequest(\n+          headers: envoyHeaders.flatMap(RequestHeaders.init),\n+          data: data,\n+          trailers: envoyTrailers.flatMap(RequestTrailers.init),", "originalCommit": "4584f8f456b6c69ef822cd98c1e954b8f6803ef0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzMTI5OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r501331299", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      headers: envoyHeaders.flatMap(ResponseHeaders.init),\n          \n          \n            \n                      headers: envoyHeaders.map(ResponseHeaders.init),", "author": "rebello95", "createdAt": "2020-10-07T21:52:44Z", "path": "library/swift/src/filters/Filter.swift", "diffHunk": "@@ -105,5 +105,55 @@ extension EnvoyHTTPFilter {\n         }\n       }\n     }\n+\n+    if let asyncRequestFilter = filter as? AsyncRequestFilter {\n+      self.setRequestFilterCallbacks = { envoyCallbacks in\n+        asyncRequestFilter.setRequestFilterCallbacks(\n+          RequestFilterCallbacksImpl(callbacks: envoyCallbacks)\n+        )\n+      }\n+\n+      self.onResumeRequest = { envoyHeaders, data, envoyTrailers, endStream in\n+        let result = asyncRequestFilter.onResumeRequest(\n+          headers: envoyHeaders.flatMap(RequestHeaders.init),\n+          data: data,\n+          trailers: envoyTrailers.flatMap(RequestTrailers.init),\n+          endStream: endStream)\n+        switch result {\n+        case .resumeIteration(let headers, let data, let trailers):\n+          return [\n+            kEnvoyFilterResumeStatusResumeIteration,\n+            headers?.headers as Any,\n+            data as Any,\n+            trailers?.headers as Any,\n+          ]\n+        }\n+      }\n+    }\n+\n+    if let asyncResponseFilter = filter as? AsyncResponseFilter {\n+      self.setResponseFilterCallbacks = { envoyCallbacks in\n+        asyncResponseFilter.setResponseFilterCallbacks(\n+          ResponseFilterCallbacksImpl(callbacks: envoyCallbacks)\n+        )\n+      }\n+\n+      self.onResumeResponse = { envoyHeaders, data, envoyTrailers, endStream in\n+        let result = asyncResponseFilter.onResumeResponse(\n+          headers: envoyHeaders.flatMap(ResponseHeaders.init),", "originalCommit": "4584f8f456b6c69ef822cd98c1e954b8f6803ef0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzMTM0NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r501331344", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      trailers: envoyTrailers.flatMap(ResponseTrailers.init),\n          \n          \n            \n                      trailers: envoyTrailers.map(ResponseTrailers.init),", "author": "rebello95", "createdAt": "2020-10-07T21:52:50Z", "path": "library/swift/src/filters/Filter.swift", "diffHunk": "@@ -105,5 +105,55 @@ extension EnvoyHTTPFilter {\n         }\n       }\n     }\n+\n+    if let asyncRequestFilter = filter as? AsyncRequestFilter {\n+      self.setRequestFilterCallbacks = { envoyCallbacks in\n+        asyncRequestFilter.setRequestFilterCallbacks(\n+          RequestFilterCallbacksImpl(callbacks: envoyCallbacks)\n+        )\n+      }\n+\n+      self.onResumeRequest = { envoyHeaders, data, envoyTrailers, endStream in\n+        let result = asyncRequestFilter.onResumeRequest(\n+          headers: envoyHeaders.flatMap(RequestHeaders.init),\n+          data: data,\n+          trailers: envoyTrailers.flatMap(RequestTrailers.init),\n+          endStream: endStream)\n+        switch result {\n+        case .resumeIteration(let headers, let data, let trailers):\n+          return [\n+            kEnvoyFilterResumeStatusResumeIteration,\n+            headers?.headers as Any,\n+            data as Any,\n+            trailers?.headers as Any,\n+          ]\n+        }\n+      }\n+    }\n+\n+    if let asyncResponseFilter = filter as? AsyncResponseFilter {\n+      self.setResponseFilterCallbacks = { envoyCallbacks in\n+        asyncResponseFilter.setResponseFilterCallbacks(\n+          ResponseFilterCallbacksImpl(callbacks: envoyCallbacks)\n+        )\n+      }\n+\n+      self.onResumeResponse = { envoyHeaders, data, envoyTrailers, endStream in\n+        let result = asyncResponseFilter.onResumeResponse(\n+          headers: envoyHeaders.flatMap(ResponseHeaders.init),\n+          data: data,\n+          trailers: envoyTrailers.flatMap(ResponseTrailers.init),", "originalCommit": "4584f8f456b6c69ef822cd98c1e954b8f6803ef0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzMTUyMQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r501331521", "bodyText": "asyncRequestFilter is being retained here - I assume that's intentional, but want to flag", "author": "rebello95", "createdAt": "2020-10-07T21:53:18Z", "path": "library/swift/src/filters/Filter.swift", "diffHunk": "@@ -105,5 +105,55 @@ extension EnvoyHTTPFilter {\n         }\n       }\n     }\n+\n+    if let asyncRequestFilter = filter as? AsyncRequestFilter {\n+      self.setRequestFilterCallbacks = { envoyCallbacks in\n+        asyncRequestFilter.setRequestFilterCallbacks(", "originalCommit": "4584f8f456b6c69ef822cd98c1e954b8f6803ef0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1NjAyNw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r503256027", "bodyText": "Yep, good callout, but should be fine since both the internal filter and downcasted reference are both tied to the lifecycle of the parent Filter.", "author": "goaway", "createdAt": "2020-10-12T12:18:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzMTUyMQ=="}], "type": "inlineReview"}, {"oid": "98c38eff24e0485bb406db1813811b68342c7485", "url": "https://github.com/envoyproxy/envoy-mobile/commit/98c38eff24e0485bb406db1813811b68342c7485", "message": "a test and a fix\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-12T11:46:16Z", "type": "commit"}, {"oid": "4e490ead59ca34e19e83b5a7a7afd7498647f339", "url": "https://github.com/envoyproxy/envoy-mobile/commit/4e490ead59ca34e19e83b5a7a7afd7498647f339", "message": "another test, another fix\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-12T11:52:56Z", "type": "commit"}, {"oid": "976582364b13fd7bc7265abdfd9c1c2983189923", "url": "https://github.com/envoyproxy/envoy-mobile/commit/976582364b13fd7bc7265abdfd9c1c2983189923", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-12T11:53:55Z", "type": "commit"}, {"oid": "b6c9db4c9ed477677dd3a2adf2e0555c203b4c8d", "url": "https://github.com/envoyproxy/envoy-mobile/commit/b6c9db4c9ed477677dd3a2adf2e0555c203b4c8d", "message": "add status/result assertions\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-12T12:11:27Z", "type": "commit"}, {"oid": "5d37d6f126f412294d73747983ed9e5413fa4406", "url": "https://github.com/envoyproxy/envoy-mobile/commit/5d37d6f126f412294d73747983ed9e5413fa4406", "message": "inline comment\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-12T12:14:50Z", "type": "commit"}, {"oid": "fd28b86508168e02746fba991c898407780002d0", "url": "https://github.com/envoyproxy/envoy-mobile/commit/fd28b86508168e02746fba991c898407780002d0", "message": "use map instead of flatMap\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-12T12:17:02Z", "type": "commit"}, {"oid": "e2944394340b69f2097959863b275445afcd51bd", "url": "https://github.com/envoyproxy/envoy-mobile/commit/e2944394340b69f2097959863b275445afcd51bd", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-12T12:20:01Z", "type": "commit"}, {"oid": "9f7879ab3b4054e0467a08167027cb005b75f5ac", "url": "https://github.com/envoyproxy/envoy-mobile/commit/9f7879ab3b4054e0467a08167027cb005b75f5ac", "message": "objc interface docstrings\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-12T12:22:45Z", "type": "commit"}, {"oid": "ef16d7064c52d8e3f2b6b9c887735d28a87e9c52", "url": "https://github.com/envoyproxy/envoy-mobile/commit/ef16d7064c52d8e3f2b6b9c887735d28a87e9c52", "message": "use self in swift\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-12T12:23:41Z", "type": "commit"}, {"oid": "264dff8c97345262347e4a4d9587183f9b9bfa06", "url": "https://github.com/envoyproxy/envoy-mobile/commit/264dff8c97345262347e4a4d9587183f9b9bfa06", "message": "todo\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-12T12:25:46Z", "type": "commit"}, {"oid": "006b00be5d93671be8ea145ed9914ab66c353c48", "url": "https://github.com/envoyproxy/envoy-mobile/commit/006b00be5d93671be8ea145ed9914ab66c353c48", "message": "objc style\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-12T12:26:13Z", "type": "commit"}, {"oid": "27539473e69ec38b20d042a09ddfe941f494d704", "url": "https://github.com/envoyproxy/envoy-mobile/commit/27539473e69ec38b20d042a09ddfe941f494d704", "message": "document return tuples in objc\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-12T12:33:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU2MjA2NQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1118#discussion_r503562065", "bodyText": "Let's document these typedefs", "author": "rebello95", "createdAt": "2020-10-12T22:18:09Z", "path": "library/common/extensions/filters/http/platform_bridge/c_types.h", "diffHunk": "@@ -103,11 +124,30 @@ typedef envoy_filter_data_status (*envoy_filter_on_data_f)(envoy_data data, bool\n typedef envoy_filter_trailers_status (*envoy_filter_on_trailers_f)(envoy_headers trailers,\n                                                                    const void* context);\n \n+/**\n+ * Function signature for filter invocation after asynchronous resumption. Passes a\n+ * snapshot of all HTTP state that has not yet been forwarded along the filter chain.\n+ */\n+typedef envoy_filter_resume_status (*envoy_filter_on_resume_f)(envoy_headers* headers,\n+                                                               envoy_data* data,\n+                                                               envoy_headers* trailers,\n+                                                               bool end_stream,\n+                                                               const void* context);\n+\n /**\n  * Function signature to release a filter instance once the filter chain is finished with it.\n  */\n typedef void (*envoy_filter_release_f)(const void* context);\n \n+typedef void (*envoy_filter_resume_f)(const void* context);", "originalCommit": "27539473e69ec38b20d042a09ddfe941f494d704", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1a558901ba523f4a24eb37070a07930aaa8db46a", "url": "https://github.com/envoyproxy/envoy-mobile/commit/1a558901ba523f4a24eb37070a07930aaa8db46a", "message": "more test coverage\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-13T01:25:32Z", "type": "commit"}, {"oid": "c7623699559a0a216499587c606f8bbbabe74cb2", "url": "https://github.com/envoyproxy/envoy-mobile/commit/c7623699559a0a216499587c606f8bbbabe74cb2", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-13T01:27:42Z", "type": "commit"}, {"oid": "b12a36910fc15660949c23167b7ff8d032f2812c", "url": "https://github.com/envoyproxy/envoy-mobile/commit/b12a36910fc15660949c23167b7ff8d032f2812c", "message": "asan fix\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-13T09:47:06Z", "type": "commit"}, {"oid": "0fea7997ba55290b56b01d6b24bf48f096bcccc6", "url": "https://github.com/envoyproxy/envoy-mobile/commit/0fea7997ba55290b56b01d6b24bf48f096bcccc6", "message": "additional docstrings\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-13T09:58:27Z", "type": "commit"}]}