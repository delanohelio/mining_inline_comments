{"pr_number": 858, "pr_title": "swift: refactor public functionality as precursor to L7 filters", "pr_createdAt": "2020-05-20T01:17:39Z", "pr_url": "https://github.com/envoyproxy/envoy-mobile/pull/858", "timeline": [{"oid": "f097c9457bf355c58b5e4c85677066825c0b3c8f", "url": "https://github.com/envoyproxy/envoy-mobile/commit/f097c9457bf355c58b5e4c85677066825c0b3c8f", "message": "wip: l7 filters M2\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-05-20T01:17:12Z", "type": "commit"}, {"oid": "363541cf2f82b35152474aec0ace3f50242b4233", "url": "https://github.com/envoyproxy/envoy-mobile/commit/363541cf2f82b35152474aec0ace3f50242b4233", "message": "Merge remote-tracking branch 'origin/master' into swift-l7-m2\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-05-20T18:13:27Z", "type": "commit"}, {"oid": "37019ddb4afbd77e310b444cc7ec874bb62993d8", "url": "https://github.com/envoyproxy/envoy-mobile/commit/37019ddb4afbd77e310b444cc7ec874bb62993d8", "message": "push before moving branches\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-05-22T00:46:35Z", "type": "commit"}, {"oid": "18726c3288dcfc1748df7ddbf88eaf96e5764d98", "url": "https://github.com/envoyproxy/envoy-mobile/commit/18726c3288dcfc1748df7ddbf88eaf96e5764d98", "message": "Merge remote-tracking branch 'origin/master' into swift-l7-m2\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-05-27T17:30:34Z", "type": "commit"}, {"oid": "b4f5df12e6bc49388ce472f49a4d08367869312c", "url": "https://github.com/envoyproxy/envoy-mobile/commit/b4f5df12e6bc49388ce472f49a4d08367869312c", "message": "Merge remote-tracking branch 'origin/master' into swift-l7-m2\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-05-29T00:42:01Z", "type": "commit"}, {"oid": "f9d66f2d40813fc0c5cfa5936b5d7b43af662c1e", "url": "https://github.com/envoyproxy/envoy-mobile/commit/f9d66f2d40813fc0c5cfa5936b5d7b43af662c1e", "message": "checkpoint\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-05-29T23:56:10Z", "type": "commit"}, {"oid": "f28419cafef7c8869a73e629a3e3df1dc2f3bf42", "url": "https://github.com/envoyproxy/envoy-mobile/commit/f28419cafef7c8869a73e629a3e3df1dc2f3bf42", "message": "Merge remote-tracking branch 'origin/master' into swift-l7-m2\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-05-29T23:56:20Z", "type": "commit"}, {"oid": "0d0c2eb78107d93e4e988f06d1cfbc11b541bafe", "url": "https://github.com/envoyproxy/envoy-mobile/commit/0d0c2eb78107d93e4e988f06d1cfbc11b541bafe", "message": "make grpc compile\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-05-30T01:07:52Z", "type": "commit"}, {"oid": "943b419ff56a95077a25d865c5464a03042c010f", "url": "https://github.com/envoyproxy/envoy-mobile/commit/943b419ff56a95077a25d865c5464a03042c010f", "message": "linter fixes\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-05-30T01:11:58Z", "type": "commit"}, {"oid": "7bec6847911fb715fe7dc145e753f434e8c79ab8", "url": "https://github.com/envoyproxy/envoy-mobile/commit/7bec6847911fb715fe7dc145e753f434e8c79ab8", "message": "tests are green\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-06-05T17:53:56Z", "type": "commit"}, {"oid": "98518e432c125be204d45e071840fbd701b10034", "url": "https://github.com/envoyproxy/envoy-mobile/commit/98518e432c125be204d45e071840fbd701b10034", "message": "Merge remote-tracking branch 'origin/master' into swift-l7-m2\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-06-05T17:54:05Z", "type": "commit"}, {"oid": "f848888adeed5eefeb16a37053a4415aef292522", "url": "https://github.com/envoyproxy/envoy-mobile/commit/f848888adeed5eefeb16a37053a4415aef292522", "message": "fix demos\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-06-05T22:14:15Z", "type": "commit"}, {"oid": "7b2a3a0588d2f5acfa2b31743e0026714e4a92bf", "url": "https://github.com/envoyproxy/envoy-mobile/commit/7b2a3a0588d2f5acfa2b31743e0026714e4a92bf", "message": "Merge remote-tracking branch 'origin/master' into swift-l7-m2\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-06-05T22:19:53Z", "type": "commit"}, {"oid": "15cbedd64a7b8060a2200c851df43b31af7344ee", "url": "https://github.com/envoyproxy/envoy-mobile/commit/15cbedd64a7b8060a2200c851df43b31af7344ee", "message": "self review\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-06-05T23:10:12Z", "type": "commit"}, {"oid": "a93893dc74322a693e78d3a2cfc240e499765072", "url": "https://github.com/envoyproxy/envoy-mobile/commit/a93893dc74322a693e78d3a2cfc240e499765072", "message": "fixup\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-06-05T23:20:36Z", "type": "commit"}, {"oid": "efc034ab636d06a7a6a39c1a87a38ab24dfb0419", "url": "https://github.com/envoyproxy/envoy-mobile/commit/efc034ab636d06a7a6a39c1a87a38ab24dfb0419", "message": "Merge remote-tracking branch 'origin/master' into swift-l7-m2\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-06-05T23:20:50Z", "type": "commit"}, {"oid": "8a8ac406de021d6d880f366360d25fc448935765", "url": "https://github.com/envoyproxy/envoy-mobile/commit/8a8ac406de021d6d880f366360d25fc448935765", "message": "swiftlint\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-06-05T23:23:39Z", "type": "commit"}, {"oid": "a63422f927aa84db6fa237730ff4544494a052c3", "url": "https://github.com/envoyproxy/envoy-mobile/commit/a63422f927aa84db6fa237730ff4544494a052c3", "message": "swiftlint\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-06-05T23:29:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4Nzc0OA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/858#discussion_r436987748", "bodyText": "Should we change the name of the builder, since what it builds has changed?", "author": "goaway", "createdAt": "2020-06-08T20:40:51Z", "path": "examples/objective-c/hello_world/ViewController.m", "diffHunk": "@@ -37,7 +37,7 @@ - (void)startEnvoy {\n   NSLog(@\"Starting Envoy...\");\n   NSError *error;\n   EnvoyClientBuilder *builder = [[EnvoyClientBuilder alloc] init];", "originalCommit": "a63422f927aa84db6fa237730ff4544494a052c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MzM4MQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/858#discussion_r437063381", "bodyText": "StreamClientBuilder would be fine yeah", "author": "rebello95", "createdAt": "2020-06-08T23:56:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4Nzc0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4MDg0NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/858#discussion_r437080844", "bodyText": "Updated", "author": "rebello95", "createdAt": "2020-06-09T01:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4Nzc0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4ODUzNw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/858#discussion_r436988537", "bodyText": "StreamPrototype?", "author": "goaway", "createdAt": "2020-06-08T20:42:18Z", "path": "examples/objective-c/hello_world/ViewController.m", "diffHunk": "@@ -65,38 +65,38 @@ - (void)performRequest {\n   self.requestCount++;\n   NSLog(@\"Starting request to '%@'\", _REQUEST_PATH);\n \n-  int requestID = self.requestCount;\n   // Note: this request will use an http/1.1 stream for the upstream request.\n   // The Swift example uses h2. This is done on purpose to test both paths in end-to-end tests\n   // in CI.\n-  RequestBuilder *builder = [[RequestBuilder alloc] initWithMethod:RequestMethodGet\n-                                                            scheme:_REQUEST_SCHEME\n-                                                         authority:_REQUEST_AUTHORITY\n-                                                              path:_REQUEST_PATH];\n-  Request *request = [builder build];\n-  ResponseHandler *handler = [[ResponseHandler alloc] initWithQueue:dispatch_get_main_queue()];\n+  int requestID = self.requestCount;\n+  RequestHeadersBuilder *builder = [[RequestHeadersBuilder alloc] initWithMethod:RequestMethodGet\n+                                                                          scheme:_REQUEST_SCHEME\n+                                                                       authority:_REQUEST_AUTHORITY\n+                                                                            path:_REQUEST_PATH];\n+  [builder addUpstreamHttpProtocol:UpstreamHttpProtocolHttp1];\n+  RequestHeaders *headers = [builder build];\n \n   __weak ViewController *weakSelf = self;\n-  [handler onHeaders:^(NSDictionary<NSString *, NSArray<NSString *> *> *headers,\n-                       NSInteger statusCode, BOOL endStream) {\n-    NSLog(@\"Response status (%i): %ld\\n%@\", requestID, statusCode, headers);\n-    NSString *body = [NSString stringWithFormat:@\"Status: %ld\", statusCode];\n+  InactiveStream *inactiveStream = [self.client newStream];", "originalCommit": "a63422f927aa84db6fa237730ff4544494a052c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MzQyMg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/858#discussion_r437063422", "bodyText": "No strong opinion, @junr03 do you have thoughts?", "author": "rebello95", "createdAt": "2020-06-08T23:56:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4ODUzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2NTA1MA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/858#discussion_r437065050", "bodyText": "active/inactive parallels envoy a bit more, but if you prefer Stream and StreamPrototype I don't care too much.", "author": "junr03", "createdAt": "2020-06-09T00:02:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4ODUzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3MjU3OA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/858#discussion_r437072578", "bodyText": "I mean Envoy has an ActiveStream type. It doesn't have an InactiveStream type, nor does it use streams classified as inactive them as a mechanism to produce active streams.", "author": "goaway", "createdAt": "2020-06-09T00:31:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4ODUzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3MzIwOQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/858#discussion_r437073209", "bodyText": "I'm open to other possibilities, too, but InactiveStream really suggests something other than a suite of callbacks along with a factory mechanism to me. StreamBase?", "author": "goaway", "createdAt": "2020-06-09T00:34:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4ODUzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3NDQ3NQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/858#discussion_r437074475", "bodyText": "StreamBase sounds more like a superclass which doesn't really fit here IMO. I'm not opposed to StreamPrototype/Stream if you and Jose are in agreement", "author": "rebello95", "createdAt": "2020-06-09T00:39:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4ODUzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3NTg3Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/858#discussion_r437075877", "bodyText": "lets do StreamPrototype/Stream", "author": "junr03", "createdAt": "2020-06-09T00:45:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4ODUzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4MDg2OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/858#discussion_r437080869", "bodyText": "Done", "author": "rebello95", "createdAt": "2020-06-09T01:04:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4ODUzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4OTk0Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/858#discussion_r436989947", "bodyText": "I feel like onCancellation is most grammatically in line with the other callbacks, but \u00af\\_(\u30c4)_/\u00af", "author": "goaway", "createdAt": "2020-06-08T20:45:04Z", "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/ResponseFilter.kt", "diffHunk": "@@ -66,5 +66,5 @@ interface ResponseFilter: Filter {\n    * This should be considered a terminal state, and invalidates any previous attempts to\n    * `stopIteration{...}`.\n    */\n-  fun onCanceled()\n+  fun onCancel()", "originalCommit": "a63422f927aa84db6fa237730ff4544494a052c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MzUzOQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/858#discussion_r437063539", "bodyText": "I'd like to keep it as-is for this PR since this is how it's named further down as well. We can open PRs after to rename everywhere if necessary", "author": "rebello95", "createdAt": "2020-06-08T23:56:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4OTk0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MDc4Ng==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/858#discussion_r437060786", "bodyText": "I sort of prefer the old naming scheme (onHeaders) since setOnResponseHeaders to a degree suggests the implementation detail that this is a functor captured as a member, whereas I feel onHeaders (or onResponseHeaders) to me simply suggests \"on headers, do x\". But this is subjective.", "author": "goaway", "createdAt": "2020-06-08T23:46:49Z", "path": "examples/swift/hello_world/ViewController.swift", "diffHunk": "@@ -38,33 +38,36 @@ final class ViewController: UITableViewController {\n   }\n \n   private func performRequest() {\n-    guard let envoy = self.envoy else {\n+    guard let client = self.client else {\n       NSLog(\"Failed to start request - Envoy is not running\")\n       return\n     }\n \n     self.requestCount += 1\n     NSLog(\"Starting request to '\\(kRequestPath)'\")\n \n-    let requestID = self.requestCount\n     // Note: this request will use an h2 stream for the upstream request.\n     // The Objective-C example uses http/1.1. This is done on purpose to test both paths in\n     // end-to-end tests in CI.\n-    let request = RequestBuilder(method: .get, scheme: kRequestScheme,\n-                                 authority: kRequestAuthority,\n-                                 path: kRequestPath)\n-        .addUpstreamHttpProtocol(.http2)\n-        .build()\n-    let handler = ResponseHandler()\n-      .onHeaders { [weak self] headers, statusCode, _ in\n+    let requestID = self.requestCount\n+    let headers = RequestHeadersBuilder(method: .get, scheme: kRequestScheme,\n+                                        authority: kRequestAuthority, path: kRequestPath)\n+      .addUpstreamHttpProtocol(.http2)\n+      .build()\n+\n+    client\n+      .newStream()\n+      .setOnResponseHeaders { [weak self] headers, _ in", "originalCommit": "a63422f927aa84db6fa237730ff4544494a052c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2NDA2Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/858#discussion_r437064062", "bodyText": "Discussed this a bit with @junr03 and @buildbreaker when we were first looking at this, and had elected to go this route to avoid confusion between setting the callbacks and calling the callbacks. That said, I think set might be clearer but don't feel that strongly", "author": "rebello95", "createdAt": "2020-06-08T23:58:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MDc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3MTM0OA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/858#discussion_r437071348", "bodyText": "I get the idea behind distinguishing them, but the user of the public API will never actually be the one calling the callbacks. If anything, I'd be slightly more on board with naming the closure-type something more verbose internally, since it's never really exposed. e.g., onHeadersCallback.", "author": "goaway", "createdAt": "2020-06-09T00:26:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MDc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4MTUwNQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/858#discussion_r437081505", "bodyText": "That's true. However, if we're going for consistency, our other builders expose addXYZ and setXYZ for our other builders (i.e., addRetryPolicy, set(name:value:), so this maintains consistency there. If you feel strongly we can change, but I'd lean towards keeping this for the time being for the sake of parity", "author": "rebello95", "createdAt": "2020-06-09T01:06:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MDc4Ng=="}], "type": "inlineReview"}, {"oid": "2d386599ccb265e05af7fe309e9304c4481dfc40", "url": "https://github.com/envoyproxy/envoy-mobile/commit/2d386599ccb265e05af7fe309e9304c4481dfc40", "message": "s/EnvoyClientBuilder/StreamClientBuilder\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-06-09T00:53:19Z", "type": "commit"}, {"oid": "79cf99bab34681934932fefff77e93f352831f93", "url": "https://github.com/envoyproxy/envoy-mobile/commit/79cf99bab34681934932fefff77e93f352831f93", "message": "s/InactiveStream/StreamPrototype\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-06-09T00:55:38Z", "type": "commit"}, {"oid": "6daabe5ade3e15aced884ae2e1737b5d4c840eaa", "url": "https://github.com/envoyproxy/envoy-mobile/commit/6daabe5ade3e15aced884ae2e1737b5d4c840eaa", "message": "s/newStream/newStreamPrototype\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-06-09T00:56:35Z", "type": "commit"}, {"oid": "105c9e033e7b5035e28522189ca66e47db2e0d3f", "url": "https://github.com/envoyproxy/envoy-mobile/commit/105c9e033e7b5035e28522189ca66e47db2e0d3f", "message": "s/ActiveStream/Stream\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-06-09T00:57:59Z", "type": "commit"}, {"oid": "201d1ff03967c0a8f84baf965c9192b569ef953a", "url": "https://github.com/envoyproxy/envoy-mobile/commit/201d1ff03967c0a8f84baf965c9192b569ef953a", "message": "add missing builders\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-06-09T01:01:51Z", "type": "commit"}, {"oid": "8956be0c398327fd1d11be11051e49974b69ebbf", "url": "https://github.com/envoyproxy/envoy-mobile/commit/8956be0c398327fd1d11be11051e49974b69ebbf", "message": "missed file rename\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-06-09T01:02:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4MTgzMA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/858#discussion_r437081830", "bodyText": "No need for final?\n(RequestTrailers is final btw)", "author": "buildbreaker", "createdAt": "2020-06-09T01:07:48Z", "path": "library/swift/src/RequestHeaders.swift", "diffHunk": "@@ -2,7 +2,7 @@ import Foundation\n \n /// Headers representing an outbound request.\n @objcMembers\n-public final class RequestHeaders: Headers {\n+public class RequestHeaders: Headers {", "originalCommit": "8956be0c398327fd1d11be11051e49974b69ebbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4MjI2Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/858#discussion_r437082267", "bodyText": "GRPCRequestHeaders subclasses this, so we can't use final here", "author": "rebello95", "createdAt": "2020-06-09T01:09:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4MTgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4MjYyMg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/858#discussion_r437082622", "bodyText": "For context, I had considered replicating RequestHeaders entirely for gRPC, but that would be problematic for filters if we're passing a <T: RequestHeaders> into filters, since gRPC requests wouldn't conform to that. Granted, we may very well be constructing those headers that at a much lower layer if we go the C++ harness filter approach, in which case this wouldn't be a problem. The approach in the PR seemed like the least overhead for now", "author": "rebello95", "createdAt": "2020-06-09T01:10:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4MTgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4MjkzNA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/858#discussion_r437082934", "bodyText": "Ah", "author": "buildbreaker", "createdAt": "2020-06-09T01:12:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4MTgzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4MzA3Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/858#discussion_r437083072", "bodyText": "I'd be fine with newStream or newStreamPrototype, but if you're going with the latter, looks like you missed this.", "author": "goaway", "createdAt": "2020-06-09T01:12:37Z", "path": "examples/objective-c/hello_world/ViewController.m", "diffHunk": "@@ -65,38 +65,38 @@ - (void)performRequest {\n   self.requestCount++;\n   NSLog(@\"Starting request to '%@'\", _REQUEST_PATH);\n \n-  int requestID = self.requestCount;\n   // Note: this request will use an http/1.1 stream for the upstream request.\n   // The Swift example uses h2. This is done on purpose to test both paths in end-to-end tests\n   // in CI.\n-  RequestBuilder *builder = [[RequestBuilder alloc] initWithMethod:RequestMethodGet\n-                                                            scheme:_REQUEST_SCHEME\n-                                                         authority:_REQUEST_AUTHORITY\n-                                                              path:_REQUEST_PATH];\n-  Request *request = [builder build];\n-  ResponseHandler *handler = [[ResponseHandler alloc] initWithQueue:dispatch_get_main_queue()];\n+  int requestID = self.requestCount;\n+  RequestHeadersBuilder *builder = [[RequestHeadersBuilder alloc] initWithMethod:RequestMethodGet\n+                                                                          scheme:_REQUEST_SCHEME\n+                                                                       authority:_REQUEST_AUTHORITY\n+                                                                            path:_REQUEST_PATH];\n+  [builder addUpstreamHttpProtocol:UpstreamHttpProtocolHttp1];\n+  RequestHeaders *headers = [builder build];\n \n   __weak ViewController *weakSelf = self;\n-  [handler onHeaders:^(NSDictionary<NSString *, NSArray<NSString *> *> *headers,\n-                       NSInteger statusCode, BOOL endStream) {\n-    NSLog(@\"Response status (%i): %ld\\n%@\", requestID, statusCode, headers);\n-    NSString *body = [NSString stringWithFormat:@\"Status: %ld\", statusCode];\n+  StreamPrototype *prototype = [self.client newStream];", "originalCommit": "8956be0c398327fd1d11be11051e49974b69ebbf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "14bcca65b7ed32bfde38ef6b55316bebb176e7b4", "url": "https://github.com/envoyproxy/envoy-mobile/commit/14bcca65b7ed32bfde38ef6b55316bebb176e7b4", "message": "fix objc\n\nSigned-off-by: Michael Rebello <me@michaelrebello.com>", "committedDate": "2020-06-09T01:17:05Z", "type": "commit"}]}