{"pr_number": 681, "pr_title": "CXF-8099: mask sensitive logging elements", "pr_createdAt": "2020-06-27T19:30:03Z", "pr_url": "https://github.com/apache/cxf/pull/681", "timeline": [{"oid": "6870b040452032c557ec6a93af717139737801fd", "url": "https://github.com/apache/cxf/commit/6870b040452032c557ec6a93af717139737801fd", "message": "CXF-8099: mask sensitive logging elements", "committedDate": "2020-06-27T19:25:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1OTczMw==", "url": "https://github.com/apache/cxf/pull/681#discussion_r446559733", "bodyText": "maybe a bit overkill for the actual usage? IMHO it would be great to drop or reuse cxf utils.", "author": "rmannibucau", "createdAt": "2020-06-27T19:33:22Z", "path": "rt/features/logging/pom.xml", "diffHunk": "@@ -38,6 +38,10 @@\n             <groupId>org.slf4j</groupId>\n             <artifactId>slf4j-api</artifactId>\n         </dependency>\n+        <dependency>", "originalCommit": "6870b040452032c557ec6a93af717139737801fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3NDcyOA==", "url": "https://github.com/apache/cxf/pull/681#discussion_r447274728", "bodyText": "Perhaps, I will check", "author": "ashakirin", "createdAt": "2020-06-29T21:50:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1OTczMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU2ODMxMw==", "url": "https://github.com/apache/cxf/pull/681#discussion_r447568313", "bodyText": "Agreed, there is no need to import it just for StringUtils.containsIgnoreCase", "author": "coheigea", "createdAt": "2020-06-30T10:06:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1OTczMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxNjc0Ng==", "url": "https://github.com/apache/cxf/pull/681#discussion_r449716746", "bodyText": "updated", "author": "ashakirin", "createdAt": "2020-07-03T23:02:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1OTczMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MjUxOQ==", "url": "https://github.com/apache/cxf/pull/681#discussion_r447572519", "bodyText": "Could we find a way to do this matching in the constructor so it doesn't have to be done every time the expression is evaluated?", "author": "coheigea", "createdAt": "2020-06-30T10:14:24Z", "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/MaskSensitiveHelper.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.ext.logging;\n+\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.message.Message;\n+\n+import static org.apache.commons.lang3.ObjectUtils.isEmpty;\n+\n+public class MaskSensitiveHelper {\n+    private static final String ELEMENT_NAME_TEMPLATE = \"-ELEMENT_NAME-\";\n+    private static final String MATCH_PATTERN_XML = \"<-ELEMENT_NAME->(.*?)</-ELEMENT_NAME->\";\n+    private static final String MATCH_PATTERN_JSON = \"\\\"-ELEMENT_NAME-\\\"[ \\\\t]*:[ \\\\t]*\\\"(.*?)\\\"\";\n+    private static final String REPLACEMENT_PATTERN_XML = \"<-ELEMENT_NAME->XXX</-ELEMENT_NAME->\";\n+    private static final String REPLACEMENT_PATTERN_JSON = \"\\\"-ELEMENT_NAME-\\\": \\\"XXX\\\"\";\n+\n+    private static final String XML_CONTENT = \"xml\";\n+    private static final String HTML_CONTENT = \"html\";\n+    private static final String JSON_CONTENT = \"json\";\n+\n+    final List<String> sensitiveElementNames;\n+\n+    public MaskSensitiveHelper(final List<String> sensitiveElementNames) {\n+        this.sensitiveElementNames = sensitiveElementNames;\n+    }\n+\n+    public String maskSensitiveElements(\n+            final Message message,\n+            final String originalLogString) {\n+        if (isEmpty(sensitiveElementNames)) {\n+            return originalLogString;\n+        }\n+        String contentType = (String) message.get(Message.CONTENT_TYPE);\n+        if (StringUtils.containsIgnoreCase(contentType, XML_CONTENT)\n+                || StringUtils.containsIgnoreCase(contentType, HTML_CONTENT)) {\n+            return applyExpression(originalLogString, MATCH_PATTERN_XML, REPLACEMENT_PATTERN_XML);\n+        } else if (StringUtils.containsIgnoreCase(contentType, JSON_CONTENT)) {\n+            return applyExpression(originalLogString, MATCH_PATTERN_JSON, REPLACEMENT_PATTERN_JSON);\n+        } else {\n+            return originalLogString;\n+        }\n+    }\n+\n+    private String applyExpression(\n+            final String originalLogString,\n+            final String matchPatternTemplate,\n+            final String replacementTemplate) {\n+        String resultString = originalLogString;\n+        for (final String elementName : sensitiveElementNames) {\n+            final String matchPattern = matchPatternTemplate.replaceAll(ELEMENT_NAME_TEMPLATE, elementName);\n+            final String replacement = replacementTemplate.replaceAll(ELEMENT_NAME_TEMPLATE, elementName);", "originalCommit": "6870b040452032c557ec6a93af717139737801fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxNTc2NQ==", "url": "https://github.com/apache/cxf/pull/681#discussion_r449715765", "bodyText": "I made some measurements year ago - there are no real performance difference in modern java with or without pre-compiled patterns - it is automatically optimized. However I find code with replaceAll more readable as with pattern. Can change it, but win is minimal. WDYT?", "author": "ashakirin", "createdAt": "2020-07-03T22:50:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MjUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MjkwNA==", "url": "https://github.com/apache/cxf/pull/681#discussion_r447572904", "bodyText": "MaskSensitiveHelper is thread-safe, so it would be more performant only to create it once when sensitiveElementNames are set?", "author": "coheigea", "createdAt": "2020-06-30T10:15:03Z", "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java", "diffHunk": "@@ -102,8 +110,12 @@ public void createExchangeId(Message message) {\n         }\n     }\n \n-    protected String transform(final String originalLogString) {\n+    protected String transform(final Message message, final String originalLogString) {\n         return originalLogString;\n     }\n \n+    protected String maskSensitiveElements(final Message message, String originalLogString) {\n+        return (new MaskSensitiveHelper(sensitiveElementNames))", "originalCommit": "6870b040452032c557ec6a93af717139737801fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxNTkyNA==", "url": "https://github.com/apache/cxf/pull/681#discussion_r449715924", "bodyText": "yes, it is make sense", "author": "ashakirin", "createdAt": "2020-07-03T22:52:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MjkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxNjU5NQ==", "url": "https://github.com/apache/cxf/pull/681#discussion_r449716595", "bodyText": "only the thing that can contradict: I would like to add sensitive http headers names as well, if new separate setter for headers names will be introduced, instantiation of helper will be weird, WDYT?", "author": "ashakirin", "createdAt": "2020-07-03T23:00:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MjkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxNzAwMg==", "url": "https://github.com/apache/cxf/pull/681#discussion_r449717002", "bodyText": "But perhaps it doesn't make sense to introduce separate setters for elements and headers, user can just put them in the same list. Any opinions?", "author": "ashakirin", "createdAt": "2020-07-03T23:05:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MjkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyNzYyMA==", "url": "https://github.com/apache/cxf/pull/681#discussion_r452527620", "bodyText": "Ignore my last two comments - headers must be masked in DefaultLogEventMapper and shouldn't be set in MaskSensitiveHelper at all", "author": "ashakirin", "createdAt": "2020-07-09T22:37:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MjkwNA=="}], "type": "inlineReview"}, {"oid": "dfa0f44090a54abe45235554066acbde96f43877", "url": "https://github.com/apache/cxf/commit/dfa0f44090a54abe45235554066acbde96f43877", "message": "CXF-8099: improvements regarding PR comments", "committedDate": "2020-07-03T23:03:43Z", "type": "commit"}, {"oid": "6cf4ea9cc1340af99a3774e43c4064e58cc4e66b", "url": "https://github.com/apache/cxf/commit/6cf4ea9cc1340af99a3774e43c4064e58cc4e66b", "message": "CXF-8099: introduced sensitive headers", "committedDate": "2020-07-06T00:00:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk2NTM2Mg==", "url": "https://github.com/apache/cxf/pull/681#discussion_r450965362", "bodyText": "Maybe rename to HTTPHeaders or ProtocolHeaders to make the meaning clear (as opposed to say SOAP headers)", "author": "coheigea", "createdAt": "2020-07-07T15:46:58Z", "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java", "diffHunk": "@@ -73,6 +78,14 @@ public long getInMemThreshold() {\n         return threshold;\n     }\n \n+    public void addSensitiveElementNames(final List<String> sensitiveElementNames) {\n+        maskSensitiveHelper.addSensitiveElementNames(sensitiveElementNames);\n+    }\n+\n+    public void addSensitiveHeaders(final List<String> sensitiveHeaders) {", "originalCommit": "6cf4ea9cc1340af99a3774e43c4064e58cc4e66b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNDQxOQ==", "url": "https://github.com/apache/cxf/pull/681#discussion_r452534419", "bodyText": "ProtocolHeaders indeed make more sense. Other question if it makes sense to support masking sensitive SOAP headers as well?", "author": "ashakirin", "createdAt": "2020-07-09T22:58:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk2NTM2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk2NTUyMw==", "url": "https://github.com/apache/cxf/pull/681#discussion_r450965523", "bodyText": "Why Optional here when maskSensitiveHelper is declared as final?", "author": "coheigea", "createdAt": "2020-07-07T15:47:13Z", "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java", "diffHunk": "@@ -102,8 +115,13 @@ public void createExchangeId(Message message) {\n         }\n     }\n \n-    protected String transform(final String originalLogString) {\n+    protected String transform(final Message message, final String originalLogString) {\n         return originalLogString;\n     }\n \n+    protected String maskSensitiveElements(final Message message, String originalLogString) {\n+        return Optional.of(maskSensitiveHelper)", "originalCommit": "6cf4ea9cc1340af99a3774e43c4064e58cc4e66b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNDAyNw==", "url": "https://github.com/apache/cxf/pull/681#discussion_r452534027", "bodyText": "Optional makes no sense anymore, stays from time, when maskSensitiveHelper was instantiated only by setter and wasn't final. Removed.", "author": "ashakirin", "createdAt": "2020-07-09T22:57:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk2NTUyMw=="}], "type": "inlineReview"}, {"oid": "b96ba8a47348db9bf1ad3487ef6d1e9b88858cef", "url": "https://github.com/apache/cxf/commit/b96ba8a47348db9bf1ad3487ef6d1e9b88858cef", "message": "CXF-8099: introduced sensitive headers", "committedDate": "2020-07-07T23:07:19Z", "type": "commit"}, {"oid": "1869eebce5088f8a4bebd447f6b932d53e302eff", "url": "https://github.com/apache/cxf/commit/1869eebce5088f8a4bebd447f6b932d53e302eff", "message": "CXF-8099: added header masks to inbound interceptor", "committedDate": "2020-07-08T16:35:26Z", "type": "commit"}, {"oid": "a99ff2c787ae6fa56a51113a13a6d20ae6b8e65c", "url": "https://github.com/apache/cxf/commit/a99ff2c787ae6fa56a51113a13a6d20ae6b8e65c", "message": "CXF-8099: updated method names, removed unused optional", "committedDate": "2020-07-09T22:54:36Z", "type": "commit"}, {"oid": "b8f66bb7c77125560d8d4091ac77258d79401613", "url": "https://github.com/apache/cxf/commit/b8f66bb7c77125560d8d4091ac77258d79401613", "message": "Merge branch 'master' into feature/CXF-8099_mask_sensitive_logging_elements\n\n# Conflicts:\n#\trt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java", "committedDate": "2020-07-09T23:02:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5NDE0NQ==", "url": "https://github.com/apache/cxf/pull/681#discussion_r453494145", "bodyText": "It's probably more performant to use an entrySet here instead:\nheaderMap.entrySet().forEach(entry -> {\nmaskedHeaderMap.put(entry.getKey(), sensitiveHeaderMap.containsKey(entry.getKey())\n? MASKED_HEADER_VALUE : entry.getValue());\n});", "author": "coheigea", "createdAt": "2020-07-13T08:51:17Z", "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java", "diffHunk": "@@ -95,6 +97,17 @@ public LogEvent map(Message message) {\n         return event;\n     }\n \n+    private Map<String, String> maskHeaders(\n+            final Map<String, String> headerMap,\n+            final Map<String, Boolean> sensitiveHeaderMap) {\n+        final Map<String, String> maskedHeaderMap = new HashMap<>();\n+        headerMap.keySet().forEach(key -> {\n+            maskedHeaderMap.put(key, sensitiveHeaderMap.containsKey(key)\n+                    ? MASKED_HEADER_VALUE : headerMap.get(key));\n+        });", "originalCommit": "b8f66bb7c77125560d8d4091ac77258d79401613", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5MzI0Ng==", "url": "https://github.com/apache/cxf/pull/681#discussion_r456093246", "bodyText": "Have replaced List on Set for all arguments, makes more sense and it is performant", "author": "ashakirin", "createdAt": "2020-07-16T21:39:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5NDE0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5ODgzMw==", "url": "https://github.com/apache/cxf/pull/681#discussion_r453498833", "bodyText": "Do we need to use a map here, as the boolean value isn't actually used anywhere that I can see?", "author": "coheigea", "createdAt": "2020-07-13T08:58:41Z", "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java", "diffHunk": "@@ -73,6 +82,15 @@ public long getInMemThreshold() {\n         return threshold;\n     }\n \n+    public void addSensitiveElementNames(final List<String> sensitiveElementNames) {\n+        maskSensitiveHelper.addSensitiveElementNames(sensitiveElementNames);\n+    }\n+\n+    public void addSensitiveProtocolHeaderNames(final List<String> sensitiveProtocolHeaderNames) {\n+        sensitiveProtocolHeaderMap = sensitiveProtocolHeaderNames.stream()\n+                .collect(Collectors.toMap(Function.identity(), name -> Boolean.TRUE));\n+    }", "originalCommit": "b8f66bb7c77125560d8d4091ac77258d79401613", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE0MjYyMA==", "url": "https://github.com/apache/cxf/pull/681#discussion_r454142620", "bodyText": "Yes, set will be enough, you are right", "author": "ashakirin", "createdAt": "2020-07-14T06:55:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5ODgzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUyOTE3OA==", "url": "https://github.com/apache/cxf/pull/681#discussion_r453529178", "bodyText": "Could we move this template replacement into the constructor? Maybe create a map of matchPattern -> replacement and iterate over this instead of sensitiveNames?", "author": "coheigea", "createdAt": "2020-07-13T09:47:38Z", "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/MaskSensitiveHelper.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.ext.logging;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.apache.cxf.message.Message;\n+\n+public class MaskSensitiveHelper {\n+    private static final String ELEMENT_NAME_TEMPLATE = \"-ELEMENT_NAME-\";\n+    private static final String MATCH_PATTERN_XML = \"<-ELEMENT_NAME->(.*?)</-ELEMENT_NAME->\";\n+    private static final String MATCH_PATTERN_JSON = \"\\\"-ELEMENT_NAME-\\\"[ \\\\t]*:[ \\\\t]*\\\"(.*?)\\\"\";\n+    private static final String REPLACEMENT_PATTERN_XML = \"<-ELEMENT_NAME->XXX</-ELEMENT_NAME->\";\n+    private static final String REPLACEMENT_PATTERN_JSON = \"\\\"-ELEMENT_NAME-\\\": \\\"XXX\\\"\";\n+\n+    private static final String XML_CONTENT = \"xml\";\n+    private static final String HTML_CONTENT = \"html\";\n+    private static final String JSON_CONTENT = \"json\";\n+\n+    final List<String> sensitiveElementNames = new ArrayList<>();\n+\n+    public void addSensitiveElementNames(final List<String> inSensitiveElementNames) {\n+        this.sensitiveElementNames.addAll(inSensitiveElementNames);\n+    }\n+\n+    public String maskSensitiveElements(\n+            final Message message,\n+            final String originalLogString) {\n+        if (sensitiveElementNames.isEmpty() || message == null) {\n+            return originalLogString;\n+        }\n+        final String contentType = (String) message.get(Message.CONTENT_TYPE);\n+        if (contentType.toLowerCase().contains(XML_CONTENT)\n+                || contentType.toLowerCase().contains(HTML_CONTENT)) {\n+            return applyMasks(originalLogString, MATCH_PATTERN_XML, REPLACEMENT_PATTERN_XML);\n+        } else if (contentType.toLowerCase().contains(JSON_CONTENT)) {\n+            return applyMasks(originalLogString, MATCH_PATTERN_JSON, REPLACEMENT_PATTERN_JSON);\n+        }\n+        return originalLogString;\n+    }\n+\n+    private String applyMasks(String originalLogString, String matchElementPattern, String replacementElementPattern) {\n+        return Optional.ofNullable(originalLogString)\n+                .map(s -> applyExpression(s, matchElementPattern, replacementElementPattern, sensitiveElementNames))\n+                .orElse(originalLogString);\n+    }\n+\n+    private String applyExpression(\n+            final String originalLogString,\n+            final String matchPatternTemplate,\n+            final String replacementTemplate,\n+            final List<String> sensitiveNames) {\n+        String resultString = originalLogString;\n+        for (final String sensitiveName : sensitiveNames) {\n+            final String matchPattern = matchPatternTemplate.replaceAll(ELEMENT_NAME_TEMPLATE, sensitiveName);\n+            final String replacement = replacementTemplate.replaceAll(ELEMENT_NAME_TEMPLATE, sensitiveName);", "originalCommit": "b8f66bb7c77125560d8d4091ac77258d79401613", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU0NTUwMw==", "url": "https://github.com/apache/cxf/pull/681#discussion_r453545503", "bodyText": "Could we also return here if originalLogString is null + remove the Optional.ofNullable in applyMasks below?", "author": "coheigea", "createdAt": "2020-07-13T10:15:20Z", "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/MaskSensitiveHelper.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.ext.logging;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.apache.cxf.message.Message;\n+\n+public class MaskSensitiveHelper {\n+    private static final String ELEMENT_NAME_TEMPLATE = \"-ELEMENT_NAME-\";\n+    private static final String MATCH_PATTERN_XML = \"<-ELEMENT_NAME->(.*?)</-ELEMENT_NAME->\";\n+    private static final String MATCH_PATTERN_JSON = \"\\\"-ELEMENT_NAME-\\\"[ \\\\t]*:[ \\\\t]*\\\"(.*?)\\\"\";\n+    private static final String REPLACEMENT_PATTERN_XML = \"<-ELEMENT_NAME->XXX</-ELEMENT_NAME->\";\n+    private static final String REPLACEMENT_PATTERN_JSON = \"\\\"-ELEMENT_NAME-\\\": \\\"XXX\\\"\";\n+\n+    private static final String XML_CONTENT = \"xml\";\n+    private static final String HTML_CONTENT = \"html\";\n+    private static final String JSON_CONTENT = \"json\";\n+\n+    final List<String> sensitiveElementNames = new ArrayList<>();\n+\n+    public void addSensitiveElementNames(final List<String> inSensitiveElementNames) {\n+        this.sensitiveElementNames.addAll(inSensitiveElementNames);\n+    }\n+\n+    public String maskSensitiveElements(\n+            final Message message,\n+            final String originalLogString) {\n+        if (sensitiveElementNames.isEmpty() || message == null) {\n+            return originalLogString;\n+        }", "originalCommit": "b8f66bb7c77125560d8d4091ac77258d79401613", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7abbb406d5bc03f6c3ca239a00c8cdb343a8d8ef", "url": "https://github.com/apache/cxf/commit/7abbb406d5bc03f6c3ca239a00c8cdb343a8d8ef", "message": "CXF-8099: changed incoming type: Set instead List", "committedDate": "2020-07-15T09:52:11Z", "type": "commit"}, {"oid": "132a28c581dae7866c6e800d586d8b5d7fabff2c", "url": "https://github.com/apache/cxf/commit/132a28c581dae7866c6e800d586d8b5d7fabff2c", "message": "CXF-8099: improved null check", "committedDate": "2020-07-16T22:40:36Z", "type": "commit"}, {"oid": "218fec091a7626adc6dba9e25454c2b080576ea6", "url": "https://github.com/apache/cxf/commit/218fec091a7626adc6dba9e25454c2b080576ea6", "message": "CXF-8099: names refactoring", "committedDate": "2020-07-18T21:30:39Z", "type": "commit"}, {"oid": "ed504c80c0d40f709566b0b485e4bce7affff504", "url": "https://github.com/apache/cxf/commit/ed504c80c0d40f709566b0b485e4bce7affff504", "message": "CXF-8099: added precompiled patterns", "committedDate": "2020-07-20T22:29:06Z", "type": "commit"}, {"oid": "61e030492e4b384d9eca71711ef70e9f0fc812ba", "url": "https://github.com/apache/cxf/commit/61e030492e4b384d9eca71711ef70e9f0fc812ba", "message": "CXF-8099: parameters renaming", "committedDate": "2020-07-20T22:38:12Z", "type": "commit"}, {"oid": "edce9a39c0d0c87e1691e0fcf5d357623d0ae2b3", "url": "https://github.com/apache/cxf/commit/edce9a39c0d0c87e1691e0fcf5d357623d0ae2b3", "message": "CXF-8099: refactored header replacing", "committedDate": "2020-07-21T23:30:47Z", "type": "commit"}, {"oid": "c4e2f95250b7c456ecd97c75e158311bdf4e2709", "url": "https://github.com/apache/cxf/commit/c4e2f95250b7c456ecd97c75e158311bdf4e2709", "message": "CXF-8099: refactored header replacing", "committedDate": "2020-07-21T23:36:06Z", "type": "commit"}, {"oid": "f337f255ba41ac607f558c0d36b3f8db2f8fba89", "url": "https://github.com/apache/cxf/commit/f337f255ba41ac607f558c0d36b3f8db2f8fba89", "message": "Merge branch 'master' into feature/CXF-8099_mask_sensitive_logging_elements", "committedDate": "2020-07-22T23:04:29Z", "type": "commit"}]}