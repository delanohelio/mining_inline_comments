{"pr_number": 703, "pr_title": "Fix systests to account for fix in CXF-8346", "pr_createdAt": "2020-10-02T18:52:45Z", "pr_url": "https://github.com/apache/cxf/pull/703", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3OTY3NA==", "url": "https://github.com/apache/cxf/pull/703#discussion_r499179674", "bodyText": "Seems like  ... and the client will re-use the cached payload is not correct anymore?", "author": "reta", "createdAt": "2020-10-03T20:31:25Z", "path": "systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSClientServerBookTest.java", "diffHunk": "@@ -926,15 +926,12 @@ public void testCachingExpiresUsingETag() throws Exception {\n         // Now make a second call. The value in the clients cache will have expired, so it should call\n         // out to the service, which will return 304, and the client will re-use the cached payload", "originalCommit": "4e58b31e4cb0a8aca19bf3e086c7dfffc2c59d61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwMzQ1MQ==", "url": "https://github.com/apache/cxf/pull/703#discussion_r499303451", "bodyText": "I took that to mean that the client should keep on using the same Book entity that it read from the first Response, but now that you mention it, it isn't very clear.\nI think we can either update the text of the comment to indicate that the client process should re-use the previously obtained entity, or we could add response.bufferEntity() and then pull the entity from the original response - something like this:\n        Response response2 = target.request().get();\n        assertEquals(304, response2.getStatus());\n        assertFalse(response2.hasEntity());\n        Book book2 = response.readEntity(Book.class);\n        assertEquals(123L, book2.getId());\n        cacheControlFeature.close();\n\nWdyt?", "author": "andymc12", "createdAt": "2020-10-05T00:09:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3OTY3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwNjAyNA==", "url": "https://github.com/apache/cxf/pull/703#discussion_r499306024", "bodyText": "\ud83d\udc4d to adding these assertions, thanks!", "author": "reta", "createdAt": "2020-10-05T00:36:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3OTY3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3OTY4OQ==", "url": "https://github.com/apache/cxf/pull/703#discussion_r499179689", "bodyText": "\ud83d\udc4d", "author": "reta", "createdAt": "2020-10-03T20:31:41Z", "path": "systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSClientServerBookTest.java", "diffHunk": "@@ -840,7 +840,7 @@ public void testCaching() throws Exception {\n         assertTrue(cacheControl.toString().contains(\"max-age=100000\"));\n \n         // Now make a second call. This should be retrieved from the client's cache\n-        target.request().get();\n+        response = target.request().get();", "originalCommit": "4e58b31e4cb0a8aca19bf3e086c7dfffc2c59d61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3OTY5NA==", "url": "https://github.com/apache/cxf/pull/703#discussion_r499179694", "bodyText": "\ud83d\udc4d", "author": "reta", "createdAt": "2020-10-03T20:31:47Z", "path": "systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSClientServerBookTest.java", "diffHunk": "@@ -883,7 +883,7 @@ public void testCachingExpires() throws Exception {\n         // Now make a second call. The value in the cache will have expired, so\n         // it should call the service again\n         Thread.sleep(1500L);\n-        target.request().get();\n+        response = target.request().get();", "originalCommit": "4e58b31e4cb0a8aca19bf3e086c7dfffc2c59d61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MDczMA==", "url": "https://github.com/apache/cxf/pull/703#discussion_r499180730", "bodyText": "I was debugging this failure and it seems like the change with respect to Request URI\n HttpUtils.resetRequestURI(m, requestUri.toString());\n\nviolates some CXF flow (it does not mean the flow is correct, it just probably means we need changes in other places).\nIn the nutshell, my findings are as such:\n\nCXF assumes the m.get(Message.REQUEST_URI) has only URI raw path component\nCXF assumes the m.get(Message.QUERY_STRING) has only URI query string component\n\nThe fact that we now set the full URI (with a query string) breaks the way CXF treats the  m.get(Message.REQUEST_URI) and test fails because as you correctly pointing out,  the query string is messed up /bookstore/books/check2?a=b?a=b.\nI think although your change does fix the test, the flow is broken by and large, please correct me if I am wrong. The user should be able to change the Request URI in pre-matching filter, including the query string component, but she won't be able to do that from now on.", "author": "reta", "createdAt": "2020-10-03T20:47:46Z", "path": "systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/BookServer20.java", "diffHunk": "@@ -227,7 +227,7 @@ public void filter(ContainerRequestContext context) throws IOException {\n             } else if (path.endsWith(\"books/check2\")) {\n                 replaceStream(context);\n             } else if (path.endsWith(\"books/checkNQuery\")) {\n-                URI requestURI = URI.create(path.replace(\"NQuery\", \"2?a=b\"));\n+                URI requestURI = URI.create(path.replace(\"NQuery\", \"2\"));", "originalCommit": "4e58b31e4cb0a8aca19bf3e086c7dfffc2c59d61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwNTkzOA==", "url": "https://github.com/apache/cxf/pull/703#discussion_r499305938", "bodyText": "I think although your change does fix the test, the flow is broken by and large, please correct me if I am wrong. The user should be able to change the Request URI in pre-matching filter, including the query string component, but she won't be able to do that from now on.\n\nHmm... maybe I don't fully understand.  I think the test was broken from the start since it was effectively setting the RequestUri to /bookstore/books/check2?a=b?a=b - the previous behavior (prior to #697) was to simply ignore the query string entirely which was why the test passed even though the URI was invalid.  After #697 the test failed because we were actually checking the query string.\nDo you think we need to explicitly set Message.QUERY_STRING when the user calls containerRequestContext.setRequestUri(newUri)? In that case then we might also need to do some checking and \"URI merging\"  in other places where JAX-RS related code is expecting to see the full URI (including the query string) - which is the point you were making, I think.\nDo you know which places in the code are expecting Message.REQUEST_URI to be the raw URI?  I'd like to take a look to determine whether we should change those parts to expect REQUEST_URI to be the full URI or whether we should change the JAX-RS parts to merge the REQUEST_URI with the QUERY_STRING when checked.\nThanks for the review and the analysis.", "author": "andymc12", "createdAt": "2020-10-05T00:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MDczMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwNzQ2NQ==", "url": "https://github.com/apache/cxf/pull/703#discussion_r499307465", "bodyText": "Hmm... maybe I don't fully understand. I think the test was broken from the start since it was effectively setting the RequestUri to /bookstore/books/check2?a=b?a=b - the previous behavior (prior to #697) was to simply ignore the query string entirely which was why the test passed even though the URI was invalid. After #697 the test failed because we were actually checking the query string.\n\nI think the test case was fine, let me try to illustrate what was happening before the change and after, for simplicity I will just include the URI into method arguments.\nSo before:\ncontainerRequestContext.setRequestUri(\"/bookstore/books/check2?a=b\")\n\nm.get(Message.REQUEST_URI) -> /bookstore/books/check2\nm.get(Message.QUERY_STRING) -> a=b\n\nAfter the change:\ncontainerRequestContext.setRequestUri(\"/bookstore/books/check2?a=b\")\n\nm.get(Message.REQUEST_URI) -> /bookstore/books/check2?a=b\nm.get(Message.QUERY_STRING) -> a=b\n\nAs you can see, Message.REQUEST_URI has raw path before, but now - full URI. And that causing the issues. Unfortunately I don't know all the places but it seems like raw URI is being used to find the matching methods to invoke fe.", "author": "reta", "createdAt": "2020-10-05T00:50:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MDczMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYyMzAwMA==", "url": "https://github.com/apache/cxf/pull/703#discussion_r500623000", "bodyText": "Ah, that makes sense.  For now, I'm reverting that portion of the change in ContainerRequestContextImpl - I added a TODO so that we won't lose sight of it, but that should get the tests passing again.  Now I'll take a look at the OIDC tests that are failing.  It's up to you whether we should merge this now to get the JAX-RS systests back to 100% passing or wait until we get the OIDC tests passing too.  Thanks again!", "author": "andymc12", "createdAt": "2020-10-06T22:06:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MDczMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYzOTc3MQ==", "url": "https://github.com/apache/cxf/pull/703#discussion_r500639771", "bodyText": "Thanks @andymc12 , now we have better understanding of the impact.", "author": "reta", "createdAt": "2020-10-06T22:50:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MDczMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYzOTk5NA==", "url": "https://github.com/apache/cxf/pull/703#discussion_r500639994", "bodyText": "\ud83d\udc4d", "author": "reta", "createdAt": "2020-10-06T22:51:24Z", "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ContainerRequestContextImpl.java", "diffHunk": "@@ -123,8 +123,9 @@ public void setRequestUri(URI requestUri) throws IllegalStateException {\n \n     protected void doSetRequestUri(URI requestUri) throws IllegalStateException {\n         checkNotPreMatch();\n-        // The JAX-RS TCK requires the full uri toString() rather than just the raw path:\n-        HttpUtils.resetRequestURI(m, requestUri.toString());\n+        // TODO: The JAX-RS TCK requires the full uri toString() rather than just the raw path, but\n+        // changing to toString() seems to have adverse effects downstream. Needs more investigation.\n+        HttpUtils.resetRequestURI(m, requestUri.getRawPath());", "originalCommit": "8a2e347cb3041cfa4abf9d5bfe133deaa5248b44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c32f3c75f4019ef93eb322dde32967ee16c37b92", "url": "https://github.com/apache/cxf/commit/c32f3c75f4019ef93eb322dde32967ee16c37b92", "message": "Update test to expect null rather than exception\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>", "committedDate": "2020-10-07T00:48:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4MTgwNg==", "url": "https://github.com/apache/cxf/pull/703#discussion_r500681806", "bodyText": "\ud83d\udc4d", "author": "reta", "createdAt": "2020-10-07T01:16:21Z", "path": "systests/rs-security/src/test/java/org/apache/cxf/systest/jaxrs/security/oidc/OIDCNegativeTest.java", "diffHunk": "@@ -113,12 +114,7 @@ public void testImplicitFlowPromptNone() throws Exception {\n         client.path(\"authorize-implicit/\");\n         Response response = client.get();\n \n-        try {\n-            response.readEntity(OAuthAuthorizationData.class);\n-            fail(\"Failure expected on a bad prompt\");\n-        } catch (Exception ex) {\n-            // expected\n-        }\n+        assertNull(response.readEntity(OAuthAuthorizationData.class));", "originalCommit": "c32f3c75f4019ef93eb322dde32967ee16c37b92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4MjMzOQ==", "url": "https://github.com/apache/cxf/pull/703#discussion_r500682339", "bodyText": "\ud83d\udc4d", "author": "reta", "createdAt": "2020-10-07T01:18:25Z", "path": "systests/rs-security/src/test/java/org/apache/cxf/systest/jaxrs/security/oidc/OIDCNegativeTest.java", "diffHunk": "@@ -196,12 +192,7 @@ public void testImplicitFlowNoNonce() throws Exception {\n         client.path(\"authorize-implicit/\");\n         Response response = client.get();\n \n-        try {\n-            response.readEntity(OAuthAuthorizationData.class);\n-            fail(\"Failure expected on no nonce\");\n-        } catch (Exception ex) {\n-            // expected\n-        }\n+        assertNull(response.readEntity(OAuthAuthorizationData.class));", "originalCommit": "c32f3c75f4019ef93eb322dde32967ee16c37b92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "91cb6d0f8f4d1e76320de4fe89e202367a1b8fd5", "url": "https://github.com/apache/cxf/commit/91cb6d0f8f4d1e76320de4fe89e202367a1b8fd5", "message": "Fix systests to account for fix in CXF-8346\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>", "committedDate": "2020-10-07T15:01:34Z", "type": "commit"}, {"oid": "13a6bf1ca7efdd4b1f0816aabd935dfac7f5689f", "url": "https://github.com/apache/cxf/commit/13a6bf1ca7efdd4b1f0816aabd935dfac7f5689f", "message": "Additional assertions per code review comments\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>", "committedDate": "2020-10-07T15:05:40Z", "type": "commit"}, {"oid": "78a503d8bf1105ff441645d4784ed3306a9418ee", "url": "https://github.com/apache/cxf/commit/78a503d8bf1105ff441645d4784ed3306a9418ee", "message": "Reverting part of #697 to avoid preventing user...\n\nfrom overwriting query parameter in pre match filters.\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>", "committedDate": "2020-10-07T15:05:40Z", "type": "commit"}, {"oid": "a29109410e8427d1fb8edf5fb88c955aaca0b79a", "url": "https://github.com/apache/cxf/commit/a29109410e8427d1fb8edf5fb88c955aaca0b79a", "message": "Update test to expect null rather than exception\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>", "committedDate": "2020-10-07T15:05:40Z", "type": "commit"}, {"oid": "d1ed01aa4708a81be37833ba2a2da29ae63f47c1", "url": "https://github.com/apache/cxf/commit/d1ed01aa4708a81be37833ba2a2da29ae63f47c1", "message": "Test fix: Need to bufferEntity if reading twice\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>", "committedDate": "2020-10-07T15:05:40Z", "type": "commit"}, {"oid": "d1ed01aa4708a81be37833ba2a2da29ae63f47c1", "url": "https://github.com/apache/cxf/commit/d1ed01aa4708a81be37833ba2a2da29ae63f47c1", "message": "Test fix: Need to bufferEntity if reading twice\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>", "committedDate": "2020-10-07T15:05:40Z", "type": "forcePushed"}]}