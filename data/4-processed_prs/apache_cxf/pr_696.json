{"pr_number": 696, "pr_title": "[CXF-8345] Improve performance by avoiding resize of MessageImpl", "pr_createdAt": "2020-09-21T21:45:50Z", "pr_url": "https://github.com/apache/cxf/pull/696", "timeline": [{"oid": "e62f626ae1274157400b49490bffb242757b6577", "url": "https://github.com/apache/cxf/commit/e62f626ae1274157400b49490bffb242757b6577", "message": "Perf: Avoid map resize w/ initialSize and factor\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>", "committedDate": "2020-09-18T21:26:11Z", "type": "commit"}, {"oid": "e62f626ae1274157400b49490bffb242757b6577", "url": "https://github.com/apache/cxf/commit/e62f626ae1274157400b49490bffb242757b6577", "message": "Perf: Avoid map resize w/ initialSize and factor\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>", "committedDate": "2020-09-18T21:26:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwMjQyNA==", "url": "https://github.com/apache/cxf/pull/696#discussion_r493102424", "bodyText": "Sorry @andymc12 , just of of curiosity, the MessageImpl is a HashMap and uses its default constructor, where capacity is set to 16 and load factor to 0.75.\n/**\n     * Constructs an empty <tt>HashMap</tt> with the default initial capacity\n     * (16) and the default load factor (0.75).\n     */\n    public HashMap() {\n        this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted\n    }\n\nYou guys found out that load factor of 1 helps to eliminate unnecessary resizing (probably because the size of the message container is around 16 elements)?", "author": "reta", "createdAt": "2020-09-23T00:14:08Z", "path": "core/src/main/java/org/apache/cxf/interceptor/ServiceInvokerInterceptor.java", "diffHunk": "@@ -62,7 +62,7 @@ public void run() {\n \n                     Message outMessage = runableEx.getOutMessage();\n                     if (outMessage == null) {\n-                        outMessage = new MessageImpl();\n+                        outMessage = new MessageImpl(16, 1); // perf: size 16 / factor 1 to avoid resize operation", "originalCommit": "e62f626ae1274157400b49490bffb242757b6577", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY3NjA4MQ==", "url": "https://github.com/apache/cxf/pull/696#discussion_r493676081", "bodyText": "Yes. It's been a while since we made this change, but I know the performance team tried a few different options and found 16/1 to be the best combination based on the benchmarks they were running.  But I agree with your assessment - this combination is best where there are between 12-16 elements - or rather, it avoids resize between 0-16, but it performs better than the default when where are between 12-16 elements.\nThanks for the review!", "author": "andymc12", "createdAt": "2020-09-23T15:14:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwMjQyNA=="}], "type": "inlineReview"}]}