{"pr_number": 642, "pr_title": "[CXF-8213] Add Micrometer metric support for JAX-WS", "pr_createdAt": "2020-02-18T10:19:57Z", "pr_url": "https://github.com/apache/cxf/pull/642", "timeline": [{"oid": "e2876433507313934050c3de682a1c1c74240cf2", "url": "https://github.com/apache/cxf/commit/e2876433507313934050c3de682a1c1c74240cf2", "message": "[CXF-8213] Add Micrometer metric support for JAX-WS", "committedDate": "2020-02-18T10:22:36Z", "type": "forcePushed"}, {"oid": "7bdd03c03b234f2c2b47d2ba37ae8f9408426219", "url": "https://github.com/apache/cxf/commit/7bdd03c03b234f2c2b47d2ba37ae8f9408426219", "message": "[CXF-8213] Add Micrometer metric support for JAX-WS", "committedDate": "2020-02-18T10:32:05Z", "type": "forcePushed"}, {"oid": "87e1de62b340f4c30cd6e803e087ce86677801ff", "url": "https://github.com/apache/cxf/commit/87e1de62b340f4c30cd6e803e087ce86677801ff", "message": "[CXF-8213] Add Micrometer metric support for JAX-WS", "committedDate": "2020-02-18T10:44:51Z", "type": "forcePushed"}, {"oid": "7d0d060f14037a1a8a9005e7d9417ad7a68d673e", "url": "https://github.com/apache/cxf/commit/7d0d060f14037a1a8a9005e7d9417ad7a68d673e", "message": "[CXF-8213] Added Spring sample", "committedDate": "2020-02-18T11:15:46Z", "type": "forcePushed"}, {"oid": "b2de75f9028ad1528311fe0ab03ee1e181de7f84", "url": "https://github.com/apache/cxf/commit/b2de75f9028ad1528311fe0ab03ee1e181de7f84", "message": "[CXF-8213] Add Micrometer metric support for JAX-WS", "committedDate": "2020-02-20T06:29:04Z", "type": "forcePushed"}, {"oid": "53ccd8b26356d4c1b59d74b8b90bca4b9dc389d9", "url": "https://github.com/apache/cxf/commit/53ccd8b26356d4c1b59d74b8b90bca4b9dc389d9", "message": "[CXF-8213] Add Micrometer metric support for JAX-WS", "committedDate": "2020-02-20T06:38:49Z", "type": "forcePushed"}, {"oid": "423e0954b712d3352120389f6b201452d300a91a", "url": "https://github.com/apache/cxf/commit/423e0954b712d3352120389f6b201452d300a91a", "message": "[CXF-8213] Add Micrometer metric support for JAX-WS", "committedDate": "2020-02-20T06:41:44Z", "type": "forcePushed"}, {"oid": "1f73c7563a82daccea29d15da6ee7fc72865c578", "url": "https://github.com/apache/cxf/commit/1f73c7563a82daccea29d15da6ee7fc72865c578", "message": "[CXF-8213] Add Micrometer metric support for JAX-WS", "committedDate": "2020-02-20T06:47:01Z", "type": "forcePushed"}, {"oid": "351ad2f9dc188dff75ba5401f6ec4dc18691c9fe", "url": "https://github.com/apache/cxf/commit/351ad2f9dc188dff75ba5401f6ec4dc18691c9fe", "message": "[CXF-8213] Add Micrometer metric support for JAX-WS", "committedDate": "2020-02-21T06:33:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NDUyOQ==", "url": "https://github.com/apache/cxf/pull/642#discussion_r383064529", "bodyText": "I think this dependency is not need, or there are reasons to include it?", "author": "reta", "createdAt": "2020-02-24T02:04:54Z", "path": "integration/spring-boot/autoconfigure/pom.xml", "diffHunk": "@@ -74,6 +74,16 @@\n             <artifactId>spring-boot-autoconfigure-processor</artifactId>\n             <optional>true</optional>\n         </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>", "originalCommit": "351ad2f9dc188dff75ba5401f6ec4dc18691c9fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM3ODczNw==", "url": "https://github.com/apache/cxf/pull/642#discussion_r384378737", "bodyText": "I'll check it, but probably yes, good catch!", "author": "shark300", "createdAt": "2020-02-26T09:45:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NDUyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NTE2Mg==", "url": "https://github.com/apache/cxf/pull/642#discussion_r383065162", "bodyText": "We should probably better use cxf.management.metrics (or just cxf.metrics) in order to not conflict / confuse with Spring Boot Actuator bundled properties.", "author": "reta", "createdAt": "2020-02-24T02:10:45Z", "path": "integration/spring-boot/autoconfigure/src/main/java/org/apache/cxf/spring/boot/autoconfigure/MetricsProperties.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.spring.boot.autoconfigure;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(\"management.metrics\")", "originalCommit": "351ad2f9dc188dff75ba5401f6ec4dc18691c9fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM3ODc2NA==", "url": "https://github.com/apache/cxf/pull/642#discussion_r384378764", "bodyText": "I see your pont, but as I see, all of Spring Boot related metrics are under management.metrics too.\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-metrics-meter\nAs a developer, I'll search it here. Otherwise, someone should update the documentation too (I don't have a write access to this one).", "author": "shark300", "createdAt": "2020-02-26T09:45:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NTE2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MDQ4Mg==", "url": "https://github.com/apache/cxf/pull/642#discussion_r385980482", "bodyText": "Fair enough, it is better to follow the Spring's recommendation, https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#per-meter-properties, so fe we could have metrics under management.metrics.cxf and able to control/configure all or part of them, does it make sense?", "author": "reta", "createdAt": "2020-02-29T00:31:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NTE2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyODYwMA==", "url": "https://github.com/apache/cxf/pull/642#discussion_r386028600", "bodyText": "management.metrics.cxf is OK for me.", "author": "shark300", "createdAt": "2020-02-29T13:31:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NTE2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk2OTIwNQ==", "url": "https://github.com/apache/cxf/pull/642#discussion_r386969205", "bodyText": "There are some guidelines about this in Spring Boot's documentation. As per those guidelines, please don't use management.* for third-party properties. +1 for properties that begin cfx..", "author": "wilkinsona", "createdAt": "2020-03-03T11:50:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NTE2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwODIwNw==", "url": "https://github.com/apache/cxf/pull/642#discussion_r387008207", "bodyText": "Hi @wilkinsona I overlooked this important thing, thanks. I'll moving that.", "author": "shark300", "createdAt": "2020-03-03T13:11:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NTE2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NTYwNA==", "url": "https://github.com/apache/cxf/pull/642#discussion_r383065604", "bodyText": "@AutoConfigureAfter(MetricsAutoConfiguration.class) should be sufficient, no?", "author": "reta", "createdAt": "2020-02-24T02:14:25Z", "path": "integration/spring-boot/autoconfigure/src/main/java/org/apache/cxf/spring/boot/autoconfigure/micrometer/MicrometerMetricsAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.spring.boot.autoconfigure.micrometer;\n+\n+import org.apache.cxf.metrics.MetricsFeature;\n+import org.apache.cxf.metrics.MetricsProvider;\n+import org.apache.cxf.metrics.micrometer.MicrometerMetricsProperties;\n+import org.apache.cxf.metrics.micrometer.MicrometerMetricsProvider;\n+import org.apache.cxf.metrics.micrometer.provider.TagsProvider;\n+import org.apache.cxf.metrics.micrometer.provider.TimedAnnotationProvider;\n+import org.apache.cxf.metrics.micrometer.provider.DefaultExceptionClassProvider;\n+import org.apache.cxf.metrics.micrometer.provider.ExceptionClassProvider;\n+import org.apache.cxf.metrics.micrometer.provider.jaxws.DefaultJaxwsFaultCodeProvider;\n+import org.apache.cxf.metrics.micrometer.provider.jaxws.JaxwsFaultCodeProvider;\n+import org.apache.cxf.metrics.micrometer.provider.jaxws.JaxwsTags;\n+import org.apache.cxf.metrics.micrometer.provider.jaxws.JaxwsTagsProvider;\n+import org.apache.cxf.spring.boot.autoconfigure.MetricsProperties;\n+import org.apache.cxf.spring.boot.autoconfigure.micrometer.provider.jaxws.SpringBasedTimedAnnotationProvider;\n+import org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.metrics.OnlyOnceLoggingDenyMeterFilter;\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.web.servlet.DispatcherServlet;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.config.MeterFilter;\n+\n+@Configuration\n+@AutoConfigureAfter({MetricsAutoConfiguration.class, SimpleMetricsExportAutoConfiguration.class})", "originalCommit": "351ad2f9dc188dff75ba5401f6ec4dc18691c9fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM3ODc5Mg==", "url": "https://github.com/apache/cxf/pull/642#discussion_r384378792", "bodyText": "As I see, SimpleMetricsExportAutoConfiguration provides a SimpleMeterRegistry bean, and those extends MeterRegistry and it used by MetricsProvider too. So SimpleMetricsExportAutoConfiguration is necessary.", "author": "shark300", "createdAt": "2020-02-26T09:45:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NTYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3ODk0Nw==", "url": "https://github.com/apache/cxf/pull/642#discussion_r385978947", "bodyText": "May be you could just have @ConditionalOnBean(SimpleMeterRegistry.class) instead?", "author": "reta", "createdAt": "2020-02-29T00:22:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NTYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyODQwNw==", "url": "https://github.com/apache/cxf/pull/642#discussion_r386028407", "bodyText": "There is a little bit magic inside the Spring Boot: spring-projects/spring-boot#11977 (comment) Due to this, MicrometerMetricsAutoConfiguration should configure after SimpleMetricsExportAutoConfiguration.", "author": "shark300", "createdAt": "2020-02-29T13:28:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NTYwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2Njg4OA==", "url": "https://github.com/apache/cxf/pull/642#discussion_r383066888", "bodyText": "So we need basically 2 conditions here:\n\nThe metrics module is added (MetricsProvider.class should be present)\nThe JAX-WS frontend module is added (may me JaxWsServerFactoryBean.class should be present)\n\nWhat do you think?", "author": "reta", "createdAt": "2020-02-24T02:25:16Z", "path": "integration/spring-boot/autoconfigure/src/main/java/org/apache/cxf/spring/boot/autoconfigure/micrometer/MicrometerMetricsAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.spring.boot.autoconfigure.micrometer;\n+\n+import org.apache.cxf.metrics.MetricsFeature;\n+import org.apache.cxf.metrics.MetricsProvider;\n+import org.apache.cxf.metrics.micrometer.MicrometerMetricsProperties;\n+import org.apache.cxf.metrics.micrometer.MicrometerMetricsProvider;\n+import org.apache.cxf.metrics.micrometer.provider.TagsProvider;\n+import org.apache.cxf.metrics.micrometer.provider.TimedAnnotationProvider;\n+import org.apache.cxf.metrics.micrometer.provider.DefaultExceptionClassProvider;\n+import org.apache.cxf.metrics.micrometer.provider.ExceptionClassProvider;\n+import org.apache.cxf.metrics.micrometer.provider.jaxws.DefaultJaxwsFaultCodeProvider;\n+import org.apache.cxf.metrics.micrometer.provider.jaxws.JaxwsFaultCodeProvider;\n+import org.apache.cxf.metrics.micrometer.provider.jaxws.JaxwsTags;\n+import org.apache.cxf.metrics.micrometer.provider.jaxws.JaxwsTagsProvider;\n+import org.apache.cxf.spring.boot.autoconfigure.MetricsProperties;\n+import org.apache.cxf.spring.boot.autoconfigure.micrometer.provider.jaxws.SpringBasedTimedAnnotationProvider;\n+import org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.metrics.OnlyOnceLoggingDenyMeterFilter;\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.web.servlet.DispatcherServlet;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.config.MeterFilter;\n+\n+@Configuration\n+@AutoConfigureAfter({MetricsAutoConfiguration.class, SimpleMetricsExportAutoConfiguration.class})\n+@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n+@ConditionalOnClass({DispatcherServlet.class, MetricsFeature.class})", "originalCommit": "351ad2f9dc188dff75ba5401f6ec4dc18691c9fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM3ODgxNg==", "url": "https://github.com/apache/cxf/pull/642#discussion_r384378816", "bodyText": "It's ok for me. I'll try it.", "author": "shark300", "createdAt": "2020-02-26T09:45:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2Njg4OA=="}], "type": "inlineReview"}, {"oid": "9e973ca13c025bb075761f19aecad8ec582f0bc6", "url": "https://github.com/apache/cxf/commit/9e973ca13c025bb075761f19aecad8ec582f0bc6", "message": "[CXF-8213] Add Micrometer metric support for JAX-WS", "committedDate": "2020-02-29T19:10:37Z", "type": "commit"}, {"oid": "460e4d225e02992beb8e3c306cb0f48a8b379885", "url": "https://github.com/apache/cxf/commit/460e4d225e02992beb8e3c306cb0f48a8b379885", "message": "[CXF-8213] Fixed review comments", "committedDate": "2020-02-29T19:10:38Z", "type": "commit"}, {"oid": "aceb3e52d954e4bf9ff5fd668a6ba64bfd011709", "url": "https://github.com/apache/cxf/commit/aceb3e52d954e4bf9ff5fd668a6ba64bfd011709", "message": "[CXF-8213] Fixed review comments", "committedDate": "2020-02-29T19:10:39Z", "type": "commit"}, {"oid": "aceb3e52d954e4bf9ff5fd668a6ba64bfd011709", "url": "https://github.com/apache/cxf/commit/aceb3e52d954e4bf9ff5fd668a6ba64bfd011709", "message": "[CXF-8213] Fixed review comments", "committedDate": "2020-02-29T19:10:39Z", "type": "forcePushed"}, {"oid": "ceb20fc64c394c08c61e7f93d7d73a6722cf0170", "url": "https://github.com/apache/cxf/commit/ceb20fc64c394c08c61e7f93d7d73a6722cf0170", "message": "[CXF-8213] Fixed review comments", "committedDate": "2020-03-03T21:26:31Z", "type": "commit"}, {"oid": "ceb20fc64c394c08c61e7f93d7d73a6722cf0170", "url": "https://github.com/apache/cxf/commit/ceb20fc64c394c08c61e7f93d7d73a6722cf0170", "message": "[CXF-8213] Fixed review comments", "committedDate": "2020-03-03T21:26:31Z", "type": "forcePushed"}, {"oid": "86c1fc2e6d4a562814af01a1bd8daecd4e00eff4", "url": "https://github.com/apache/cxf/commit/86c1fc2e6d4a562814af01a1bd8daecd4e00eff4", "message": "Merge remote-tracking branch 'remotes/origin/master' into CXF-8213\n\n# Conflicts:\n#\tsystests/spring-boot/pom.xml", "committedDate": "2020-03-27T12:28:51Z", "type": "commit"}, {"oid": "ba1c6154418912a877b83c399bf57cfaaed97a35", "url": "https://github.com/apache/cxf/commit/ba1c6154418912a877b83c399bf57cfaaed97a35", "message": "Merge remote-tracking branch 'remotes/origin/master' into CXF-8213\n\n# Conflicts:\n#\tintegration/spring-boot/starter-jaxws/pom.xml", "committedDate": "2020-04-11T06:40:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyMjQ0NQ==", "url": "https://github.com/apache/cxf/pull/642#discussion_r407222445", "bodyText": "I think we could strip jaxws package, this provider does is really JAX-WS related, only depends on cxf-core, right?", "author": "reta", "createdAt": "2020-04-12T16:38:00Z", "path": "integration/spring-boot/autoconfigure/src/main/java/org/apache/cxf/spring/boot/autoconfigure/micrometer/provider/jaxws/SpringBasedTimedAnnotationProvider.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.spring.boot.autoconfigure.micrometer.provider.jaxws;\n+\n+import java.lang.reflect.AnnotatedElement;\n+import java.lang.reflect.Method;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.message.Exchange;\n+import org.apache.cxf.metrics.micrometer.provider.TimedAnnotationProvider;\n+import org.apache.cxf.service.Service;\n+import org.apache.cxf.service.invoker.MethodDispatcher;\n+import org.apache.cxf.service.model.BindingOperationInfo;\n+import org.springframework.core.annotation.MergedAnnotationCollectors;\n+import org.springframework.core.annotation.MergedAnnotations;\n+\n+import io.micrometer.core.annotation.Timed;\n+\n+public class SpringBasedTimedAnnotationProvider implements TimedAnnotationProvider {", "originalCommit": "ba1c6154418912a877b83c399bf57cfaaed97a35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyMzkzMw==", "url": "https://github.com/apache/cxf/pull/642#discussion_r407223933", "bodyText": "You are right, I'll move it into org.apache.cxf.spring.boot.autoconfigure.micrometer.provider", "author": "shark300", "createdAt": "2020-04-12T16:50:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyMjQ0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyMzM3Nw==", "url": "https://github.com/apache/cxf/pull/642#discussion_r407223377", "bodyText": "What is the purpose of this annotation?", "author": "reta", "createdAt": "2020-04-12T16:45:31Z", "path": "integration/spring-boot/autoconfigure/src/test/java/org/apache/cxf/spring/boot/autoconfigure/micrometer/provider/jaxws/CustomTimed.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.spring.boot.autoconfigure.micrometer.provider.jaxws;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.springframework.core.annotation.AliasFor;\n+\n+import io.micrometer.core.annotation.Timed;\n+\n+@Target({ElementType.ANNOTATION_TYPE, ElementType.TYPE, ElementType.METHOD})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Inherited\n+@Timed\n+public @interface CustomTimed {", "originalCommit": "ba1c6154418912a877b83c399bf57cfaaed97a35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyODA5OQ==", "url": "https://github.com/apache/cxf/pull/642#discussion_r407228099", "bodyText": "This annotation helps to test meta annotations. The Spring's AnnotationCollector finds this kind of annotations too. I didn't want to reduce feature set of original Spring implementation.\nUnfortunately, there is a special annotation in Spring (AliasFor) but I don't want to implement this kind of feature because it's Spring specific.\nDue to this one, there are two CustomTimed annotation (one for Spring, and one for CXF provider tests)", "author": "shark300", "createdAt": "2020-04-12T17:24:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyMzM3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzMTgzOA==", "url": "https://github.com/apache/cxf/pull/642#discussion_r407231838", "bodyText": "This annotation helps to test meta annotations.\n\nSo you have one in tests, it should be sufficient to test meta annotations but no need to introduce it into main codebase, correct?", "author": "reta", "createdAt": "2020-04-12T17:55:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyMzM3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzMjA3Mw==", "url": "https://github.com/apache/cxf/pull/642#discussion_r407232073", "bodyText": "Yes, exactly.", "author": "shark300", "createdAt": "2020-04-12T17:58:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyMzM3Nw=="}], "type": "inlineReview"}, {"oid": "56eccd15b48a09df9ae9751d6cba28fdbaf461d4", "url": "https://github.com/apache/cxf/commit/56eccd15b48a09df9ae9751d6cba28fdbaf461d4", "message": "[CXF-8213] Fixed review comments", "committedDate": "2020-04-12T17:39:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzMTQyMg==", "url": "https://github.com/apache/cxf/pull/642#discussion_r407231422", "bodyText": "I would suggest to remove ExceptionClassProvider  and JaxwsFaultCodeProvider altogether and replace them with something like TagsCustomizer.\ninterface TagsCustomizer() {\n    Iterable<Tag> getAdditionalTags(Exchange ex);\n}\n\nThere could many of them (fe, could be one for JAX-WS and one for JAX-RS) and MicrometerMetricsContext could apply the available customizers before emitting the final set of tags.\nSupplier<Iterable<Tag>> tags = () -> this.tagsProvider.getTags(ex) + <all tags from customizers>\n\nWhat do you think?", "author": "reta", "createdAt": "2020-04-12T17:52:25Z", "path": "integration/spring-boot/autoconfigure/src/main/java/org/apache/cxf/spring/boot/autoconfigure/micrometer/MicrometerMetricsAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.spring.boot.autoconfigure.micrometer;\n+\n+import org.apache.cxf.jaxws.JaxWsServerFactoryBean;\n+import org.apache.cxf.metrics.MetricsProvider;\n+import org.apache.cxf.metrics.micrometer.MicrometerMetricsProperties;\n+import org.apache.cxf.metrics.micrometer.MicrometerMetricsProvider;\n+import org.apache.cxf.metrics.micrometer.provider.TagsProvider;\n+import org.apache.cxf.metrics.micrometer.provider.TimedAnnotationProvider;\n+import org.apache.cxf.metrics.micrometer.provider.DefaultExceptionClassProvider;\n+import org.apache.cxf.metrics.micrometer.provider.ExceptionClassProvider;\n+import org.apache.cxf.metrics.micrometer.provider.jaxws.DefaultJaxwsFaultCodeProvider;\n+import org.apache.cxf.metrics.micrometer.provider.jaxws.JaxwsFaultCodeProvider;\n+import org.apache.cxf.metrics.micrometer.provider.jaxws.JaxwsTags;\n+import org.apache.cxf.metrics.micrometer.provider.jaxws.JaxwsTagsProvider;\n+import org.apache.cxf.spring.boot.autoconfigure.CxfProperties;\n+import org.apache.cxf.spring.boot.autoconfigure.CxfProperties.Metrics.Server;\n+import org.apache.cxf.spring.boot.autoconfigure.micrometer.provider.jaxws.SpringBasedTimedAnnotationProvider;\n+import org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.metrics.OnlyOnceLoggingDenyMeterFilter;\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.annotation.Order;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.config.MeterFilter;\n+\n+@Configuration\n+@AutoConfigureAfter({MetricsAutoConfiguration.class, SimpleMetricsExportAutoConfiguration.class})\n+@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n+@ConditionalOnClass({JaxWsServerFactoryBean.class, MetricsProvider.class})\n+@ConditionalOnBean({MeterRegistry.class})\n+@EnableConfigurationProperties(CxfProperties.class)\n+public class MicrometerMetricsAutoConfiguration {\n+\n+    private final CxfProperties properties;\n+\n+    public MicrometerMetricsAutoConfiguration(CxfProperties properties) {\n+        this.properties = properties;\n+    }\n+\n+    @Bean\n+    public TimedAnnotationProvider timedAnnotationProvider() {\n+        return new SpringBasedTimedAnnotationProvider();\n+    }\n+\n+    @Bean\n+    public JaxwsTags jaxwsTags() {\n+        return new JaxwsTags();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(ExceptionClassProvider.class)\n+    public ExceptionClassProvider exceptionClassProvider() {", "originalCommit": "ba1c6154418912a877b83c399bf57cfaaed97a35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc5MjEwNQ==", "url": "https://github.com/apache/cxf/pull/642#discussion_r505792105", "bodyText": "Fair point, it leaves open some possibilities.", "author": "shark300", "createdAt": "2020-10-15T19:37:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzMTQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzMjQ4NA==", "url": "https://github.com/apache/cxf/pull/642#discussion_r407232484", "bodyText": "This should be optional dependency, correct? (not everyone would need actuator)", "author": "reta", "createdAt": "2020-04-12T18:01:43Z", "path": "integration/spring-boot/starter-jaxws/pom.xml", "diffHunk": "@@ -54,6 +55,10 @@\n                 </exclusion>\n             </exclusions>\n         </dependency>\n+        <dependency>", "originalCommit": "56eccd15b48a09df9ae9751d6cba28fdbaf461d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI0MTA1Mg==", "url": "https://github.com/apache/cxf/pull/642#discussion_r407241052", "bodyText": "Yes it should. I've removed that and moved it into integration test's pom.xml. It uses that.", "author": "shark300", "createdAt": "2020-04-12T19:18:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzMjQ4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzMjUwMw==", "url": "https://github.com/apache/cxf/pull/642#discussion_r407232503", "bodyText": "This should be optional dependency as well", "author": "reta", "createdAt": "2020-04-12T18:02:00Z", "path": "integration/spring-boot/starter-jaxws/pom.xml", "diffHunk": "@@ -69,6 +74,11 @@\n             <artifactId>cxf-rt-frontend-jaxws</artifactId>\n             <version>${project.version}</version>\n         </dependency>\n+        <dependency>", "originalCommit": "56eccd15b48a09df9ae9751d6cba28fdbaf461d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI0MTA5NQ==", "url": "https://github.com/apache/cxf/pull/642#discussion_r407241095", "bodyText": "I've changed it to compile scope because AutoConfiguration uses that.", "author": "shark300", "createdAt": "2020-04-12T19:19:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzMjUwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzMzQ1NA==", "url": "https://github.com/apache/cxf/pull/642#discussion_r407233454", "bodyText": "We could split this class into 2,  StandardTags (under org.apache.cxf.metrics.micrometer.provider package) and JaxwsTags with JAX-WS specifics, like FaultCode, etc. Along with customizers we could rely on StandardTags only in the MicrometerMetricsContext where JAX-WS specific tags are going to be injected by customizers.", "author": "reta", "createdAt": "2020-04-12T18:10:21Z", "path": "rt/features/metrics/src/main/java/org/apache/cxf/metrics/micrometer/provider/jaxws/JaxwsTags.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.metrics.micrometer.provider.jaxws;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.apache.cxf.common.util.StringUtils;\n+import org.apache.cxf.message.Exchange;\n+import org.apache.cxf.message.Message;\n+import org.apache.cxf.service.model.BindingOperationInfo;\n+\n+import io.micrometer.core.instrument.Tag;\n+\n+import static java.util.Optional.ofNullable;\n+\n+public class JaxwsTags {", "originalCommit": "56eccd15b48a09df9ae9751d6cba28fdbaf461d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYxNjk5MQ==", "url": "https://github.com/apache/cxf/pull/642#discussion_r505616991", "bodyText": "I split it two parts.", "author": "shark300", "createdAt": "2020-10-15T15:03:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzMzQ1NA=="}], "type": "inlineReview"}, {"oid": "2249d3c8ae9b953bc1e18b9e37f00c9f8d04a6ac", "url": "https://github.com/apache/cxf/commit/2249d3c8ae9b953bc1e18b9e37f00c9f8d04a6ac", "message": "[CXF-8213] Fixed review comments", "committedDate": "2020-04-12T19:16:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1NDExNw==", "url": "https://github.com/apache/cxf/pull/642#discussion_r407254117", "bodyText": "If we apply the idea with customizers (to replace narrow scoped ExceptionClassProvider and JaxwsFaultCodeProvider), we could rename this class to StandardTagsProvider and keep it independent from JAX-WS.", "author": "reta", "createdAt": "2020-04-12T21:25:50Z", "path": "rt/features/metrics/src/main/java/org/apache/cxf/metrics/micrometer/provider/jaxws/JaxwsTagsProvider.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.metrics.micrometer.provider.jaxws;\n+\n+import org.apache.cxf.message.Exchange;\n+import org.apache.cxf.message.Message;\n+import org.apache.cxf.metrics.micrometer.provider.ExceptionClassProvider;\n+import org.apache.cxf.metrics.micrometer.provider.TagsProvider;\n+\n+import io.micrometer.core.instrument.Tag;\n+import io.micrometer.core.instrument.Tags;\n+\n+import static java.util.Optional.ofNullable;\n+\n+public class JaxwsTagsProvider implements TagsProvider {", "originalCommit": "2249d3c8ae9b953bc1e18b9e37f00c9f8d04a6ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYxODY5NQ==", "url": "https://github.com/apache/cxf/pull/642#discussion_r505618695", "bodyText": "I would like to left open the possibility for JaxrsTagsProvider.", "author": "shark300", "createdAt": "2020-10-15T15:05:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1NDExNw=="}], "type": "inlineReview"}, {"oid": "329aa6a30acc8e150eb593913df58a5bc66fa08d", "url": "https://github.com/apache/cxf/commit/329aa6a30acc8e150eb593913df58a5bc66fa08d", "message": "Merge branch 'master' into CXF-8213\n\n# Conflicts:\n#\tparent/pom.xml\n#\tsystests/spring-boot/pom.xml", "committedDate": "2020-10-12T11:52:03Z", "type": "commit"}, {"oid": "29f87a8a0ec4ab8fe4f788a4b1049717132f6bdd", "url": "https://github.com/apache/cxf/commit/29f87a8a0ec4ab8fe4f788a4b1049717132f6bdd", "message": "[CXF-8213] Fixed compile error", "committedDate": "2020-10-12T16:45:29Z", "type": "forcePushed"}, {"oid": "c1e5c17283caf53cea7457ccd32748a6ca220de3", "url": "https://github.com/apache/cxf/commit/c1e5c17283caf53cea7457ccd32748a6ca220de3", "message": "[CXF-8213] Fixed compile error", "committedDate": "2020-10-13T14:54:30Z", "type": "commit"}, {"oid": "c1e5c17283caf53cea7457ccd32748a6ca220de3", "url": "https://github.com/apache/cxf/commit/c1e5c17283caf53cea7457ccd32748a6ca220de3", "message": "[CXF-8213] Fixed compile error", "committedDate": "2020-10-13T14:54:30Z", "type": "forcePushed"}, {"oid": "c22cd6596686c898f66b1e8d5a80b2c8d62499ec", "url": "https://github.com/apache/cxf/commit/c22cd6596686c898f66b1e8d5a80b2c8d62499ec", "message": "[CXF-8213] Fixed failing test", "committedDate": "2020-10-15T10:28:58Z", "type": "commit"}, {"oid": "29225cc6d2e09b7dea1ca9d3a0116c3276905943", "url": "https://github.com/apache/cxf/commit/29225cc6d2e09b7dea1ca9d3a0116c3276905943", "message": "[CXF-8213] Fixed review comments", "committedDate": "2020-10-15T14:59:35Z", "type": "commit"}, {"oid": "297c6b44af966debf3908ad82c7d5143321efbeb", "url": "https://github.com/apache/cxf/commit/297c6b44af966debf3908ad82c7d5143321efbeb", "message": "[CXF-8213] Fixed review comments", "committedDate": "2020-10-15T19:45:56Z", "type": "forcePushed"}, {"oid": "3525fc1e4747cd90811168d9b88a4ccb11014097", "url": "https://github.com/apache/cxf/commit/3525fc1e4747cd90811168d9b88a4ccb11014097", "message": "[CXF-8213] Fixed review comments", "committedDate": "2020-10-15T23:07:30Z", "type": "forcePushed"}, {"oid": "b2135b774be2f5ad175c0f88de6c9cfc7502634f", "url": "https://github.com/apache/cxf/commit/b2135b774be2f5ad175c0f88de6c9cfc7502634f", "message": "[CXF-8213] Fixed review comments", "committedDate": "2020-10-15T23:29:58Z", "type": "forcePushed"}, {"oid": "3f352a7ec081ddb38d0c034fe5fb1a641cac1a4b", "url": "https://github.com/apache/cxf/commit/3f352a7ec081ddb38d0c034fe5fb1a641cac1a4b", "message": "[CXF-8213] Fixed review comments", "committedDate": "2020-10-15T23:39:30Z", "type": "commit"}, {"oid": "3f352a7ec081ddb38d0c034fe5fb1a641cac1a4b", "url": "https://github.com/apache/cxf/commit/3f352a7ec081ddb38d0c034fe5fb1a641cac1a4b", "message": "[CXF-8213] Fixed review comments", "committedDate": "2020-10-15T23:39:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk1ODgxMA==", "url": "https://github.com/apache/cxf/pull/642#discussion_r506958810", "bodyText": "Bringing whole Guava for using Iterables seems too much, could you please rewrite it using standard library? Fe:\n            return () -> Stream.concat(\n                    StreamSupport.stream(defaultTags.spliterator(), false), \n                    StreamSupport.stream(additionalTags.spliterator(), false))\n                .iterator();", "author": "reta", "createdAt": "2020-10-17T16:19:59Z", "path": "rt/features/metrics/src/main/java/org/apache/cxf/metrics/micrometer/MicrometerMetricsContext.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.metrics.micrometer;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+import com.google.common.collect.Iterables;\n+\n+import org.apache.cxf.message.Exchange;\n+import org.apache.cxf.message.Message;\n+import org.apache.cxf.metrics.MetricsContext;\n+import org.apache.cxf.metrics.micrometer.provider.TagsCustomizer;\n+import org.apache.cxf.metrics.micrometer.provider.TagsProvider;\n+import org.apache.cxf.metrics.micrometer.provider.TimedAnnotationProvider;\n+\n+import io.micrometer.core.annotation.Timed;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n+import io.micrometer.core.instrument.Timer;\n+\n+public class MicrometerMetricsContext implements MetricsContext {\n+\n+    private final MeterRegistry registry;\n+    private final TagsProvider tagsProvider;\n+    private final TimedAnnotationProvider timedAnnotationProvider;\n+    private final List<TagsCustomizer> tagsCustomizers;\n+\n+    private final String metricName;\n+    private final boolean autoTimeRequests;\n+\n+    public MicrometerMetricsContext(MeterRegistry registry, TagsProvider tagsProvider,\n+                                    TimedAnnotationProvider timedAnnotationProvider,\n+                                    List<TagsCustomizer> tagsCustomizers, String metricName, boolean autoTimeRequests) {\n+        this.registry = registry;\n+        this.tagsProvider = tagsProvider;\n+        this.timedAnnotationProvider = timedAnnotationProvider;\n+        this.tagsCustomizers = tagsCustomizers;\n+        this.metricName = metricName;\n+        this.autoTimeRequests = autoTimeRequests;\n+    }\n+\n+    @Override\n+    public void start(Exchange ex) {\n+        Message request = ex.getInMessage();\n+        TimingContext timingContext = TimingContext.get(request);\n+        if (timingContext == null) {\n+            startAndAttachTimingContext(request);\n+        }\n+    }\n+\n+    @Override\n+    public void stop(long timeInNS, long inSize, long outSize, Exchange ex) {\n+        Message request = ex.getInMessage();\n+        TimingContext timingContext = TimingContext.get(request);\n+        if (timingContext == null) {\n+            timingContext = startAndAttachTimingContext(request);\n+        }\n+        record(timingContext, ex);\n+    }\n+\n+    private TimingContext startAndAttachTimingContext(Message request) {\n+        Timer.Sample timerSample = Timer.start(this.registry);\n+        TimingContext timingContext = new TimingContext(timerSample);\n+        timingContext.attachTo(request);\n+        return timingContext;\n+    }\n+\n+    private void record(TimingContext timingContext, Exchange ex) {\n+        Set<Timed> annotations = timedAnnotationProvider.getTimedAnnotations(ex);\n+        Timer.Sample timerSample = timingContext.getTimerSample();\n+        Supplier<Iterable<Tag>> tags = () -> {\n+            Iterable<Tag> defaultTags = this.tagsProvider.getTags(ex);\n+            List<Tag> additionalTags = new ArrayList<>();\n+            tagsCustomizers\n+                    .forEach(tagsCustomizer -> tagsCustomizer.getAdditionalTags(ex).forEach(additionalTags::add));\n+            return Iterables.concat(defaultTags, additionalTags);", "originalCommit": "3f352a7ec081ddb38d0c034fe5fb1a641cac1a4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2NzM3NQ==", "url": "https://github.com/apache/cxf/pull/642#discussion_r506967375", "bodyText": "Fixed, thank you. (Un)fortunately, I have not been working with Iterables for 6 years. :)", "author": "shark300", "createdAt": "2020-10-17T17:53:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk1ODgxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk1ODg2MQ==", "url": "https://github.com/apache/cxf/pull/642#discussion_r506958861", "bodyText": "Please remove this dependency, not need really (see please the suggested alternative)", "author": "reta", "createdAt": "2020-10-17T16:20:33Z", "path": "rt/features/metrics/pom.xml", "diffHunk": "@@ -34,14 +34,33 @@\n             <optional>true</optional>\n         </dependency>\n \n+        <dependency>\n+            <groupId>io.micrometer</groupId>\n+            <artifactId>micrometer-core</artifactId>\n+            <optional>true</optional>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.guava</groupId>", "originalCommit": "3f352a7ec081ddb38d0c034fe5fb1a641cac1a4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2NzM5MQ==", "url": "https://github.com/apache/cxf/pull/642#discussion_r506967391", "bodyText": "Fixed.", "author": "shark300", "createdAt": "2020-10-17T17:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk1ODg2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2MDk1Nw==", "url": "https://github.com/apache/cxf/pull/642#discussion_r506960957", "bodyText": "The flow with nullable timingContext concerns a bit. It should not happen, but assuming it does, we are going to record effectively zeroed samples (since start and stop time would be mostly equal), which basically would screw / mess the metric. I would suggest to skip the record call in this case, or if we could, provide our own sample (since we know the time it took, timeInNS), what do you think?", "author": "reta", "createdAt": "2020-10-17T16:43:07Z", "path": "rt/features/metrics/src/main/java/org/apache/cxf/metrics/micrometer/MicrometerMetricsContext.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.metrics.micrometer;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+import com.google.common.collect.Iterables;\n+\n+import org.apache.cxf.message.Exchange;\n+import org.apache.cxf.message.Message;\n+import org.apache.cxf.metrics.MetricsContext;\n+import org.apache.cxf.metrics.micrometer.provider.TagsCustomizer;\n+import org.apache.cxf.metrics.micrometer.provider.TagsProvider;\n+import org.apache.cxf.metrics.micrometer.provider.TimedAnnotationProvider;\n+\n+import io.micrometer.core.annotation.Timed;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n+import io.micrometer.core.instrument.Timer;\n+\n+public class MicrometerMetricsContext implements MetricsContext {\n+\n+    private final MeterRegistry registry;\n+    private final TagsProvider tagsProvider;\n+    private final TimedAnnotationProvider timedAnnotationProvider;\n+    private final List<TagsCustomizer> tagsCustomizers;\n+\n+    private final String metricName;\n+    private final boolean autoTimeRequests;\n+\n+    public MicrometerMetricsContext(MeterRegistry registry, TagsProvider tagsProvider,\n+                                    TimedAnnotationProvider timedAnnotationProvider,\n+                                    List<TagsCustomizer> tagsCustomizers, String metricName, boolean autoTimeRequests) {\n+        this.registry = registry;\n+        this.tagsProvider = tagsProvider;\n+        this.timedAnnotationProvider = timedAnnotationProvider;\n+        this.tagsCustomizers = tagsCustomizers;\n+        this.metricName = metricName;\n+        this.autoTimeRequests = autoTimeRequests;\n+    }\n+\n+    @Override\n+    public void start(Exchange ex) {\n+        Message request = ex.getInMessage();\n+        TimingContext timingContext = TimingContext.get(request);\n+        if (timingContext == null) {\n+            startAndAttachTimingContext(request);\n+        }\n+    }\n+\n+    @Override\n+    public void stop(long timeInNS, long inSize, long outSize, Exchange ex) {\n+        Message request = ex.getInMessage();\n+        TimingContext timingContext = TimingContext.get(request);\n+        if (timingContext == null) {", "originalCommit": "3f352a7ec081ddb38d0c034fe5fb1a641cac1a4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3MDgxOA==", "url": "https://github.com/apache/cxf/pull/642#discussion_r506970818", "bodyText": "Good catch!\nYes, it should not be happened.\nI've checked Timer#Sample class. On the one hand we can use timeInNS to calculate \"original\" timestamp from current time and this one. On the other hand, we have to create a custom implementation of Clock#monotonicTime for creating a \"start\" Timer#Sample. As I see, it is used internally and it has a mock implementation for testing.\nIn my opinion we should skip the record call in this case, and log this case as a warning.", "author": "shark300", "createdAt": "2020-10-17T18:31:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2MDk1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3NTYxNw==", "url": "https://github.com/apache/cxf/pull/642#discussion_r506975617", "bodyText": "\ud83d\udc4d agree, would you make the change please?", "author": "reta", "createdAt": "2020-10-17T19:25:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2MDk1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3NzAwNw==", "url": "https://github.com/apache/cxf/pull/642#discussion_r506977007", "bodyText": "Yes, sure.", "author": "shark300", "createdAt": "2020-10-17T19:42:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2MDk1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3OTQ3NA==", "url": "https://github.com/apache/cxf/pull/642#discussion_r506979474", "bodyText": "Done.", "author": "shark300", "createdAt": "2020-10-17T20:10:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2MDk1Nw=="}], "type": "inlineReview"}, {"oid": "1403917c32efede2c8b38d0d3deb5d09b1b51c32", "url": "https://github.com/apache/cxf/commit/1403917c32efede2c8b38d0d3deb5d09b1b51c32", "message": "[CXF-8213] Remove Guava from Metrics feature", "committedDate": "2020-10-17T17:52:03Z", "type": "commit"}, {"oid": "6ece6396ad7a12acc9b835c3d9c18f8e574a5901", "url": "https://github.com/apache/cxf/commit/6ece6396ad7a12acc9b835c3d9c18f8e574a5901", "message": "[CXF-8213] Fixed review comments", "committedDate": "2020-10-17T20:33:03Z", "type": "commit"}, {"oid": "6ece6396ad7a12acc9b835c3d9c18f8e574a5901", "url": "https://github.com/apache/cxf/commit/6ece6396ad7a12acc9b835c3d9c18f8e574a5901", "message": "[CXF-8213] Fixed review comments", "committedDate": "2020-10-17T20:33:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIxMDkyNg==", "url": "https://github.com/apache/cxf/pull/642#discussion_r507210926", "bodyText": "The spring-boot-starter-actuator is missed, sample project fails on startup (no registry):\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>", "author": "reta", "createdAt": "2020-10-18T20:42:13Z", "path": "distribution/src/main/release/samples/jaxws_spring_boot/pom.xml", "diffHunk": "@@ -34,6 +35,15 @@\n                 </exclusion>\n             </exclusions>\n         </dependency>\n+        <dependency>", "originalCommit": "6ece6396ad7a12acc9b835c3d9c18f8e574a5901", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MjY0OA==", "url": "https://github.com/apache/cxf/pull/642#discussion_r508062648", "bodyText": "You are right, I forgot to update this sample after I modified poms. Done.", "author": "shark300", "createdAt": "2020-10-19T21:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIxMDkyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIxMjgwMQ==", "url": "https://github.com/apache/cxf/pull/642#discussion_r507212801", "bodyText": "I think we could strip soap from the bean name, may be name it as metricsMaxAllowedServerUriTagsFilter", "author": "reta", "createdAt": "2020-10-18T20:59:31Z", "path": "integration/spring-boot/autoconfigure/src/main/java/org/apache/cxf/spring/boot/autoconfigure/micrometer/MicrometerMetricsAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.spring.boot.autoconfigure.micrometer;\n+\n+import java.util.List;\n+\n+import org.apache.cxf.jaxws.JaxWsServerFactoryBean;\n+import org.apache.cxf.metrics.MetricsProvider;\n+import org.apache.cxf.metrics.micrometer.MicrometerMetricsProperties;\n+import org.apache.cxf.metrics.micrometer.MicrometerMetricsProvider;\n+import org.apache.cxf.metrics.micrometer.provider.DefaultExceptionClassProvider;\n+import org.apache.cxf.metrics.micrometer.provider.ExceptionClassProvider;\n+import org.apache.cxf.metrics.micrometer.provider.StandardTags;\n+import org.apache.cxf.metrics.micrometer.provider.StandardTagsProvider;\n+import org.apache.cxf.metrics.micrometer.provider.TagsCustomizer;\n+import org.apache.cxf.metrics.micrometer.provider.TagsProvider;\n+import org.apache.cxf.metrics.micrometer.provider.TimedAnnotationProvider;\n+import org.apache.cxf.metrics.micrometer.provider.jaxws.JaxwsFaultCodeProvider;\n+import org.apache.cxf.metrics.micrometer.provider.jaxws.JaxwsFaultCodeTagsCustomizer;\n+import org.apache.cxf.metrics.micrometer.provider.jaxws.JaxwsOperationTagsCustomizer;\n+import org.apache.cxf.metrics.micrometer.provider.jaxws.JaxwsTags;\n+import org.apache.cxf.spring.boot.autoconfigure.CxfProperties;\n+import org.apache.cxf.spring.boot.autoconfigure.CxfProperties.Metrics.Server;\n+import org.apache.cxf.spring.boot.autoconfigure.micrometer.provider.SpringBasedTimedAnnotationProvider;\n+import org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.metrics.OnlyOnceLoggingDenyMeterFilter;\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.annotation.Order;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.config.MeterFilter;\n+\n+@Configuration\n+@AutoConfigureAfter({MetricsAutoConfiguration.class, SimpleMetricsExportAutoConfiguration.class})\n+@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n+@ConditionalOnClass({JaxWsServerFactoryBean.class, MetricsProvider.class})\n+@ConditionalOnBean({MeterRegistry.class})\n+@EnableConfigurationProperties(CxfProperties.class)\n+public class MicrometerMetricsAutoConfiguration {\n+\n+    private final CxfProperties properties;\n+\n+    public MicrometerMetricsAutoConfiguration(CxfProperties properties) {\n+        this.properties = properties;\n+    }\n+\n+    @Bean\n+    public TimedAnnotationProvider timedAnnotationProvider() {\n+        return new SpringBasedTimedAnnotationProvider();\n+    }\n+\n+    @Bean\n+    public JaxwsTags jaxwsTags() {\n+        return new JaxwsTags();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(ExceptionClassProvider.class)\n+    public ExceptionClassProvider exceptionClassProvider() {\n+        return new DefaultExceptionClassProvider();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(JaxwsFaultCodeProvider.class)\n+    public JaxwsFaultCodeProvider jaxwsFaultCodeProvider() {\n+        return new JaxwsFaultCodeProvider();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(JaxwsFaultCodeTagsCustomizer.class)\n+    public JaxwsFaultCodeTagsCustomizer jaxwsFaultCodeTagsCustomizer(JaxwsTags jaxwsTags,\n+                                                                     JaxwsFaultCodeProvider jaxwsFaultCodeProvider) {\n+        return new JaxwsFaultCodeTagsCustomizer(jaxwsTags, jaxwsFaultCodeProvider);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(JaxwsOperationTagsCustomizer.class)\n+    public JaxwsOperationTagsCustomizer jaxwsOperationTagsCustomizer(JaxwsTags jaxwsTags) {\n+        return new JaxwsOperationTagsCustomizer(jaxwsTags);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(StandardTags.class)\n+    public StandardTags standardTags() {\n+        return new StandardTags();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(TagsProvider.class)\n+    public TagsProvider tagsProvider(ExceptionClassProvider exceptionClassProvider, StandardTags standardTags) {\n+        return new StandardTagsProvider(exceptionClassProvider, standardTags);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(MetricsProvider.class)\n+    public MetricsProvider metricsProvider(TagsProvider tagsProvider,\n+                                           List<TagsCustomizer> tagsCustomizers,\n+                                           TimedAnnotationProvider timedAnnotationProvider,\n+                                           MeterRegistry registry) {\n+        MicrometerMetricsProperties micrometerMetricsProperties = new MicrometerMetricsProperties();\n+\n+        Server server = this.properties.getMetrics().getServer();\n+        micrometerMetricsProperties.setAutoTimeRequests(server.isAutoTimeRequests());\n+        micrometerMetricsProperties.setRequestsMetricName(server.getRequestsMetricName());\n+\n+        return new MicrometerMetricsProvider(registry, tagsProvider, tagsCustomizers, timedAnnotationProvider,\n+                micrometerMetricsProperties);\n+    }\n+\n+    @Bean\n+    @Order(0)\n+    public MeterFilter metricsSoapServerUriTagFilter() {", "originalCommit": "6ece6396ad7a12acc9b835c3d9c18f8e574a5901", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MzEyMA==", "url": "https://github.com/apache/cxf/pull/642#discussion_r508063120", "bodyText": "I rename it to cxfMetricsMaxAllowedServerUriTagsFilter", "author": "shark300", "createdAt": "2020-10-19T21:08:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIxMjgwMQ=="}], "type": "inlineReview"}, {"oid": "0fd4d9271f7543383ec5314110c0bca8423d5699", "url": "https://github.com/apache/cxf/commit/0fd4d9271f7543383ec5314110c0bca8423d5699", "message": "[CXF-8213] Fixed review comments", "committedDate": "2020-10-19T21:05:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwNjgyMA==", "url": "https://github.com/apache/cxf/pull/642#discussion_r508906820", "bodyText": "Sorry, a few issues I have run into with this method.\n\nThe computeIfAbsent is known to introduce unnecessary locking on JDK8 in case when entry already exists (see please https://bugs.openjdk.java.net/browse/JDK-8161372). Since we are going to call getTimedAnnotations for each invocation, it is better to avoid these kind if issues if possible.\nWe allocate the empty sets every time for each method that does not have @Timed annotation, we could use Collections.emptySet() singleton instead.\n\nThe suggested modifications are below, hope they make sense (the same would apply to DefaultTimedAnnotationProvider)\n    public Set<Timed> getTimedAnnotations(Exchange ex) {\n        HandlerMethod handlerMethod = new HandlerMethod(ex);\n\n        final Set<Timed> exists = timedAnnotationCache.get(handlerMethod);\n        if (exists  != null) {\n            return exists;\n        }\n\n       return timedAnnotationCache.computeIfAbsent(handlerMethod, method -> {\n            Set<Timed> timed = findTimedAnnotations(method.getMethod());\n            if (timed.isEmpty()) {\n                timed = findTimedAnnotations(method.getBeanType());\n            }\n            return timed.isEmpty() ? Collections.emptySet() : timed;;\n        });\n    }\n\n\nPS: I am fine doing these changes myself after merge as well, please let me know your preferences.", "author": "reta", "createdAt": "2020-10-20T23:54:27Z", "path": "integration/spring-boot/autoconfigure/src/main/java/org/apache/cxf/spring/boot/autoconfigure/micrometer/provider/SpringBasedTimedAnnotationProvider.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.spring.boot.autoconfigure.micrometer.provider;\n+\n+import java.lang.reflect.AnnotatedElement;\n+import java.lang.reflect.Method;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.message.Exchange;\n+import org.apache.cxf.metrics.micrometer.provider.TimedAnnotationProvider;\n+import org.apache.cxf.service.Service;\n+import org.apache.cxf.service.invoker.MethodDispatcher;\n+import org.apache.cxf.service.model.BindingOperationInfo;\n+import org.springframework.core.annotation.MergedAnnotationCollectors;\n+import org.springframework.core.annotation.MergedAnnotations;\n+\n+import io.micrometer.core.annotation.Timed;\n+\n+public class SpringBasedTimedAnnotationProvider implements TimedAnnotationProvider {\n+\n+    private ConcurrentHashMap<HandlerMethod, Set<Timed>> timedAnnotationCache = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public Set<Timed> getTimedAnnotations(Exchange ex) {\n+        HandlerMethod handlerMethod = new HandlerMethod(ex);\n+        return timedAnnotationCache.computeIfAbsent(handlerMethod, method -> {", "originalCommit": "0fd4d9271f7543383ec5314110c0bca8423d5699", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzODgxNQ==", "url": "https://github.com/apache/cxf/pull/642#discussion_r509438815", "bodyText": "Fixed.", "author": "shark300", "createdAt": "2020-10-21T16:41:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwNjgyMA=="}], "type": "inlineReview"}, {"oid": "e8ec739c59fb6de37912f50aa067ea0679e96884", "url": "https://github.com/apache/cxf/commit/e8ec739c59fb6de37912f50aa067ea0679e96884", "message": "Merge remote-tracking branch 'remotes/origin/master' into CXF-8213", "committedDate": "2020-10-21T15:58:34Z", "type": "commit"}, {"oid": "5f25efad95a7bf1bc7aa53762f50fb99b4a704b0", "url": "https://github.com/apache/cxf/commit/5f25efad95a7bf1bc7aa53762f50fb99b4a704b0", "message": "[CXF-8213] Fixed Checkstyle", "committedDate": "2020-10-21T16:19:04Z", "type": "commit"}, {"oid": "d69e338f7d444981651069f6008cbf87617d03c7", "url": "https://github.com/apache/cxf/commit/d69e338f7d444981651069f6008cbf87617d03c7", "message": "[CXF-8213] Fixed performance issues", "committedDate": "2020-10-21T16:41:08Z", "type": "commit"}]}