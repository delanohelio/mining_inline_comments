{"pr_number": 256, "pr_title": " Reduce complexity of run method.", "pr_createdAt": "2020-12-01T17:02:42Z", "pr_url": "https://github.com/blackducksoftware/synopsys-detect/pull/256", "timeline": [{"oid": "112c5214c2b73f6560b4700ff1b643f22aaffacf", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/112c5214c2b73f6560b4700ff1b643f22aaffacf", "message": "refactor: Reduce complexity of run method.", "committedDate": "2020-12-01T17:00:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU3Nzk1MQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#discussion_r533577951", "bodyText": "I think this should be bootApplication for consistency.", "author": "taikuukaits", "createdAt": "2020-12-01T17:07:55Z", "path": "src/main/java/com/synopsys/integration/detect/Application.java", "diffHunk": "@@ -83,152 +82,178 @@ public static boolean shouldExit() {\n         return SHOULD_EXIT;\n     }\n \n-    public static void setShouldExit(final boolean shouldExit) {\n+    public static void setShouldExit(boolean shouldExit) {\n         SHOULD_EXIT = shouldExit;\n     }\n \n-    public static void main(final String[] args) {\n-        final SpringApplicationBuilder builder = new SpringApplicationBuilder(Application.class);\n+    public static void main(String[] args) {\n+        SpringApplicationBuilder builder = new SpringApplicationBuilder(Application.class);\n         builder.logStartupInfo(false);\n         builder.run(args);\n     }\n \n     @Override\n-    public void run(final ApplicationArguments applicationArguments) {\n-        final long startTime = System.currentTimeMillis();\n+    public void run(ApplicationArguments applicationArguments) {\n+        long startTime = System.currentTimeMillis();\n \n         //Events, Status and Exit Codes are required even if boot fails.\n-        final EventSystem eventSystem = new EventSystem();\n-        final DetectStatusManager statusManager = new DetectStatusManager(eventSystem);\n+        EventSystem eventSystem = new EventSystem();\n+        DetectStatusManager statusManager = new DetectStatusManager(eventSystem);\n \n-        final ExitCodeUtility exitCodeUtility = new ExitCodeUtility();\n-        final ExitCodeManager exitCodeManager = new ExitCodeManager(eventSystem, exitCodeUtility);\n+        ExitCodeUtility exitCodeUtility = new ExitCodeUtility();\n+        ExitCodeManager exitCodeManager = new ExitCodeManager(eventSystem, exitCodeUtility);\n \n         ReportListener.createDefault(eventSystem);\n-        final FormattedOutputManager formattedOutputManager = new FormattedOutputManager(eventSystem);\n+        FormattedOutputManager formattedOutputManager = new FormattedOutputManager(eventSystem);\n \n         //Before boot even begins, we create a new Spring context for Detect to work within.\n         logger.debug(\"Initializing detect.\");\n-        final DetectRun detectRun = DetectRun.createDefault();\n-        final DetectContext detectContext = new DetectContext(detectRun);\n+        DetectRun detectRun = DetectRun.createDefault();\n+        DetectContext detectContext = new DetectContext(detectRun);\n \n-        final Gson gson = BlackDuckServicesFactory.createDefaultGsonBuilder().setPrettyPrinting().create();\n-        final DetectInfo detectInfo = DetectInfoUtility.createDefaultDetectInfo();\n+        Gson gson = BlackDuckServicesFactory.createDefaultGsonBuilder().setPrettyPrinting().create();\n+        DetectInfo detectInfo = DetectInfoUtility.createDefaultDetectInfo();\n         detectContext.registerBean(gson);\n         detectContext.registerBean(detectInfo);\n \n-        Optional<DetectBootResult> detectBootResultOptional = Optional.empty();\n         boolean printOutput = true;\n         boolean shouldForceSuccess = false;\n \n+        Optional<DetectBootResult> detectBootResultOptional = executeDetectBoot(detectRun, applicationArguments, eventSystem, detectContext, exitCodeManager);\n+\n+        if (detectBootResultOptional.isPresent()) {\n+            DetectBootResult detectBootResult = detectBootResultOptional.get();\n+\n+            printOutput = detectBootResult.getDetectConfiguration()\n+                              .map(configuration -> !configuration.getValueOrDefault(DetectProperties.DETECT_SUPPRESS_RESULTS_OUTPUT.getProperty()))\n+                              .orElse(Boolean.TRUE);\n+\n+            shouldForceSuccess = detectBootResult.getDetectConfiguration()\n+                                     .map(configuration -> configuration.getValueOrDefault(DetectProperties.DETECT_FORCE_SUCCESS.getProperty()))\n+                                     .orElse(Boolean.FALSE);\n+\n+            runApplication(detectContext, detectRun, eventSystem, exitCodeManager, detectBootResult);\n+\n+            //Create status output file.\n+            logger.info(\"\");\n+            detectBootResult.getDirectoryManager()\n+                .ifPresent(directoryManager -> createStatusOutputFile(formattedOutputManager, detectInfo, directoryManager));\n+\n+        } else {\n+            logger.info(\"Will not create status file, detect did not boot.\");\n+        }\n+\n+        Bdo<DetectBootResult> detectBootResult = Bdo.of(detectBootResultOptional);\n+        shutdownApplication(detectBootResult, exitCodeManager);\n+\n+        logger.debug(\"All Detect actions completed.\");\n+\n+        //Generally, when requesting a failure status, an exit code is also requested, but if it is not, we default to an unknown error.\n+        if (statusManager.hasAnyFailure()) {\n+            eventSystem.publishEvent(Event.ExitCode, new ExitCodeRequest(ExitCodeType.FAILURE_UNKNOWN_ERROR, \"A failure status was requested by one or more of Detect's tools.\"));\n+        }\n+\n+        //Find the final (as requested) exit code\n+        ExitCodeType finalExitCode = exitCodeManager.getWinningExitCode();\n+\n+        //Print detect's status\n+        if (printOutput) {\n+            statusManager.logDetectResults(new Slf4jIntLogger(logger), finalExitCode);\n+        }\n+\n+        //Print duration of run\n+        long endTime = System.currentTimeMillis();\n+        String duration = DurationFormatUtils.formatPeriod(startTime, endTime, \"HH'h' mm'm' ss's' SSS'ms'\");\n+        logger.info(\"Detect duration: {}\", duration);\n+\n+        exitApplication(finalExitCode, shouldForceSuccess);\n+    }\n+\n+    private Optional<DetectBootResult> executeDetectBoot(DetectRun detectRun, ApplicationArguments applicationArguments, EventSystem eventSystem, DetectContext detectContext, ExitCodeManager exitCodeManager) {", "originalCommit": "112c5214c2b73f6560b4700ff1b643f22aaffacf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6b97897bd1790b98fd6409130ec535150f6ebefc", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/6b97897bd1790b98fd6409130ec535150f6ebefc", "message": "refactor: Rename method executeDetectBoot to bootApplication.", "committedDate": "2020-12-01T19:34:27Z", "type": "commit"}, {"oid": "a285eed9f9747586971bba4c481af57885f591f7", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/a285eed9f9747586971bba4c481af57885f591f7", "message": "Merge remote-tracking branch 'origin/master' into ps_application_complexity", "committedDate": "2020-12-11T13:29:54Z", "type": "commit"}, {"oid": "804dae488e2b352c7ffd22f78726673214d1bd6a", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/804dae488e2b352c7ffd22f78726673214d1bd6a", "message": "refactor: Some more changes to simplify the Application code.", "committedDate": "2020-12-11T16:10:31Z", "type": "commit"}, {"oid": "eca423d8a645609f6826be2d42c6e6ac228af922", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/eca423d8a645609f6826be2d42c6e6ac228af922", "message": "refactor: Application refactor application exit logic into an ExitManager class.", "committedDate": "2020-12-11T20:19:05Z", "type": "commit"}, {"oid": "86cfa716cbc195c51c575b9102adf16d6c56eb28", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/86cfa716cbc195c51c575b9102adf16d6c56eb28", "message": "Merge remote-tracking branch 'origin/master' into ps_application_complexity", "committedDate": "2020-12-11T20:37:52Z", "type": "commit"}, {"oid": "2eecb85181df6fdf20e58e9fea9fac490bcab703", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/2eecb85181df6fdf20e58e9fea9fac490bcab703", "message": "Merge remote-tracking branch 'origin/master' into ps_application_complexity", "committedDate": "2020-12-14T17:33:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYxNzQ1Mw==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#discussion_r542617453", "bodyText": "Is there a case where we return an empty optional?", "author": "taikuukaits", "createdAt": "2020-12-14T18:31:09Z", "path": "src/main/java/com/synopsys/integration/detect/lifecycle/boot/DetectBoot.java", "diffHunk": "@@ -134,7 +134,8 @@ public DetectBoot(DetectBootFactory detectBootFactory) {\n         this.detectBootFactory = detectBootFactory;\n     }\n \n-    public DetectBootResult boot(DetectRun detectRun, String[] sourceArgs, ConfigurableEnvironment environment, EventSystem eventSystem, DetectContext detectContext) throws DetectUserFriendlyException, IOException, IllegalAccessException {\n+    public Optional<DetectBootResult> boot(DetectRun detectRun, String[] sourceArgs, ConfigurableEnvironment environment, EventSystem eventSystem, DetectContext detectContext)", "originalCommit": "2eecb85181df6fdf20e58e9fea9fac490bcab703", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYzMDMyNA==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#discussion_r542630324", "bodyText": "Yes this code on line 184.\nOptional<DetectBootResult> configurationResult = printConfiguration(printFull, detectConfiguration, eventSystem, detectInfo);\n        if (configurationResult.isPresent()) {\n            return configurationResult;\n        }", "author": "psantos1113", "createdAt": "2020-12-14T18:43:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYxNzQ1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYxODQ4Mw==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#discussion_r542618483", "bodyText": "Now that we have exit manager, could we rename exit code manager? Would something like ExitCodeListener make sense?", "author": "taikuukaits", "createdAt": "2020-12-14T18:32:08Z", "path": "src/main/java/com/synopsys/integration/detect/Application.java", "diffHunk": "@@ -83,152 +80,157 @@ public static boolean shouldExit() {\n         return SHOULD_EXIT;\n     }\n \n-    public static void setShouldExit(final boolean shouldExit) {\n+    public static void setShouldExit(boolean shouldExit) {\n         SHOULD_EXIT = shouldExit;\n     }\n \n-    public static void main(final String[] args) {\n-        final SpringApplicationBuilder builder = new SpringApplicationBuilder(Application.class);\n+    public static void main(String[] args) {\n+        SpringApplicationBuilder builder = new SpringApplicationBuilder(Application.class);\n         builder.logStartupInfo(false);\n         builder.run(args);\n     }\n \n     @Override\n-    public void run(final ApplicationArguments applicationArguments) {\n-        final long startTime = System.currentTimeMillis();\n+    public void run(ApplicationArguments applicationArguments) {\n+        long startTime = System.currentTimeMillis();\n \n         //Events, Status and Exit Codes are required even if boot fails.\n-        final EventSystem eventSystem = new EventSystem();\n-        final DetectStatusManager statusManager = new DetectStatusManager(eventSystem);\n+        EventSystem eventSystem = new EventSystem();\n+        DetectStatusManager statusManager = new DetectStatusManager(eventSystem);\n \n-        final ExitCodeUtility exitCodeUtility = new ExitCodeUtility();\n-        final ExitCodeManager exitCodeManager = new ExitCodeManager(eventSystem, exitCodeUtility);\n+        ExitCodeUtility exitCodeUtility = new ExitCodeUtility();\n+        ExitCodeManager exitCodeManager = new ExitCodeManager(eventSystem, exitCodeUtility);", "originalCommit": "2eecb85181df6fdf20e58e9fea9fac490bcab703", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyMDAzNg==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#discussion_r542620036", "bodyText": "I don't love having these in application.", "author": "taikuukaits", "createdAt": "2020-12-14T18:33:38Z", "path": "src/main/java/com/synopsys/integration/detect/Application.java", "diffHunk": "@@ -83,152 +80,157 @@ public static boolean shouldExit() {\n         return SHOULD_EXIT;\n     }\n \n-    public static void setShouldExit(final boolean shouldExit) {\n+    public static void setShouldExit(boolean shouldExit) {\n         SHOULD_EXIT = shouldExit;\n     }\n \n-    public static void main(final String[] args) {\n-        final SpringApplicationBuilder builder = new SpringApplicationBuilder(Application.class);\n+    public static void main(String[] args) {\n+        SpringApplicationBuilder builder = new SpringApplicationBuilder(Application.class);\n         builder.logStartupInfo(false);\n         builder.run(args);\n     }\n \n     @Override\n-    public void run(final ApplicationArguments applicationArguments) {\n-        final long startTime = System.currentTimeMillis();\n+    public void run(ApplicationArguments applicationArguments) {\n+        long startTime = System.currentTimeMillis();\n \n         //Events, Status and Exit Codes are required even if boot fails.\n-        final EventSystem eventSystem = new EventSystem();\n-        final DetectStatusManager statusManager = new DetectStatusManager(eventSystem);\n+        EventSystem eventSystem = new EventSystem();\n+        DetectStatusManager statusManager = new DetectStatusManager(eventSystem);\n \n-        final ExitCodeUtility exitCodeUtility = new ExitCodeUtility();\n-        final ExitCodeManager exitCodeManager = new ExitCodeManager(eventSystem, exitCodeUtility);\n+        ExitCodeUtility exitCodeUtility = new ExitCodeUtility();\n+        ExitCodeManager exitCodeManager = new ExitCodeManager(eventSystem, exitCodeUtility);\n+        ExitManager exitManager = new ExitManager(eventSystem, exitCodeManager, statusManager);\n \n         ReportListener.createDefault(eventSystem);\n-        final FormattedOutputManager formattedOutputManager = new FormattedOutputManager(eventSystem);\n+        FormattedOutputManager formattedOutputManager = new FormattedOutputManager(eventSystem);\n \n         //Before boot even begins, we create a new Spring context for Detect to work within.\n         logger.debug(\"Initializing detect.\");\n-        final DetectRun detectRun = DetectRun.createDefault();\n-        final DetectContext detectContext = new DetectContext(detectRun);\n+        DetectRun detectRun = DetectRun.createDefault();\n+        DetectContext detectContext = new DetectContext(detectRun);\n \n-        final Gson gson = BlackDuckServicesFactory.createDefaultGsonBuilder().setPrettyPrinting().create();\n-        final DetectInfo detectInfo = DetectInfoUtility.createDefaultDetectInfo();\n+        Gson gson = BlackDuckServicesFactory.createDefaultGsonBuilder().setPrettyPrinting().create();\n+        DetectInfo detectInfo = DetectInfoUtility.createDefaultDetectInfo();\n         detectContext.registerBean(gson);\n         detectContext.registerBean(detectInfo);\n \n-        Optional<DetectBootResult> detectBootResultOptional = Optional.empty();\n         boolean printOutput = true;\n         boolean shouldForceSuccess = false;\n \n+        Optional<DetectBootResult> detectBootResultOptional = bootApplication(detectRun, applicationArguments, eventSystem, detectContext, exitCodeManager);\n+\n+        if (detectBootResultOptional.isPresent()) {\n+            DetectBootResult detectBootResult = detectBootResultOptional.get();\n+            printOutput = shouldPrintOutput(detectBootResult);\n+            shouldForceSuccess = shouldForceSuccess(detectBootResult);\n+\n+            runApplication(detectContext, detectRun, eventSystem, exitCodeManager, detectBootResult);\n+\n+            //Create status output file.\n+            logger.info(\"\");\n+            detectBootResult.getDirectoryManager()\n+                .ifPresent(directoryManager -> createStatusOutputFile(formattedOutputManager, detectInfo, directoryManager));\n+\n+            shutdownApplication(detectBootResult, exitCodeManager);\n+        } else {\n+            logger.info(\"Will not create status file, detect did not boot.\");\n+        }\n+\n+        logger.debug(\"All Detect actions completed.\");\n+\n+        exitApplication(exitManager, startTime, printOutput, shouldForceSuccess);\n+    }\n+\n+    @NotNull\n+    private Boolean shouldForceSuccess(DetectBootResult detectBootResult) {", "originalCommit": "2eecb85181df6fdf20e58e9fea9fac490bcab703", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyMTk0MQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#discussion_r542621941", "bodyText": "Would prefer shouldLogResults.", "author": "taikuukaits", "createdAt": "2020-12-14T18:35:21Z", "path": "src/main/java/com/synopsys/integration/detect/lifecycle/exit/ExitOptions.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * synopsys-detect\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detect.lifecycle.exit;\n+\n+import com.synopsys.integration.util.Stringable;\n+\n+public class ExitOptions extends Stringable {\n+    private final long startTime;\n+    private final boolean logResults;\n+    private final boolean forceSuccessExit;\n+    private final boolean shouldExit;\n+\n+    public ExitOptions(long startTime, boolean logResults, boolean forceSuccessExit, boolean shouldExit) {\n+        this.startTime = startTime;\n+        this.logResults = logResults;\n+        this.forceSuccessExit = forceSuccessExit;\n+        this.shouldExit = shouldExit;\n+    }\n+\n+    public long getStartTime() {\n+        return startTime;\n+    }\n+\n+    public boolean isLogResults() {", "originalCommit": "2eecb85181df6fdf20e58e9fea9fac490bcab703", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyMjI4NQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#discussion_r542622285", "bodyText": "Would prefer shouldForceSuccess.", "author": "taikuukaits", "createdAt": "2020-12-14T18:35:41Z", "path": "src/main/java/com/synopsys/integration/detect/lifecycle/exit/ExitOptions.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * synopsys-detect\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detect.lifecycle.exit;\n+\n+import com.synopsys.integration.util.Stringable;\n+\n+public class ExitOptions extends Stringable {\n+    private final long startTime;\n+    private final boolean logResults;\n+    private final boolean forceSuccessExit;\n+    private final boolean shouldExit;\n+\n+    public ExitOptions(long startTime, boolean logResults, boolean forceSuccessExit, boolean shouldExit) {\n+        this.startTime = startTime;\n+        this.logResults = logResults;\n+        this.forceSuccessExit = forceSuccessExit;\n+        this.shouldExit = shouldExit;\n+    }\n+\n+    public long getStartTime() {\n+        return startTime;\n+    }\n+\n+    public boolean isLogResults() {\n+        return logResults;\n+    }\n+\n+    public boolean isForceSuccessExit() {", "originalCommit": "2eecb85181df6fdf20e58e9fea9fac490bcab703", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyMjQ4Mg==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#discussion_r542622482", "bodyText": "Would prefer just shouldExit.", "author": "taikuukaits", "createdAt": "2020-12-14T18:35:52Z", "path": "src/main/java/com/synopsys/integration/detect/lifecycle/exit/ExitOptions.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * synopsys-detect\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detect.lifecycle.exit;\n+\n+import com.synopsys.integration.util.Stringable;\n+\n+public class ExitOptions extends Stringable {\n+    private final long startTime;\n+    private final boolean logResults;\n+    private final boolean forceSuccessExit;\n+    private final boolean shouldExit;\n+\n+    public ExitOptions(long startTime, boolean logResults, boolean forceSuccessExit, boolean shouldExit) {\n+        this.startTime = startTime;\n+        this.logResults = logResults;\n+        this.forceSuccessExit = forceSuccessExit;\n+        this.shouldExit = shouldExit;\n+    }\n+\n+    public long getStartTime() {\n+        return startTime;\n+    }\n+\n+    public boolean isLogResults() {\n+        return logResults;\n+    }\n+\n+    public boolean isForceSuccessExit() {\n+        return forceSuccessExit;\n+    }\n+\n+    public boolean isShouldExit() {", "originalCommit": "2eecb85181df6fdf20e58e9fea9fac490bcab703", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyMjc4Ng==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#discussion_r542622786", "bodyText": "Did not see this get used anywhere.", "author": "taikuukaits", "createdAt": "2020-12-14T18:36:09Z", "path": "src/main/java/com/synopsys/integration/detect/lifecycle/exit/ExitResult.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * synopsys-detect\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detect.lifecycle.exit;\n+\n+import com.synopsys.integration.detect.configuration.enumeration.ExitCodeType;\n+import com.synopsys.integration.util.Stringable;\n+\n+public class ExitResult extends Stringable {\n+    private final ExitCodeType exitCodeType;\n+    private final String duration;\n+    private final boolean forceSuccess;\n+    private final boolean performExit;\n+\n+    public ExitResult(ExitCodeType exitCodeType, String duration, boolean forceSuccess, boolean performExit) {\n+        this.exitCodeType = exitCodeType;\n+        this.duration = duration;\n+        this.forceSuccess = forceSuccess;\n+        this.performExit = performExit;\n+    }\n+\n+    public ExitCodeType getExitCodeType() {\n+        return exitCodeType;\n+    }\n+\n+    public int getExitCode() {\n+        return exitCodeType.getExitCode();\n+    }\n+\n+    public String getDuration() {", "originalCommit": "2eecb85181df6fdf20e58e9fea9fac490bcab703", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyMzM0Nw==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#discussion_r542623347", "bodyText": "Do we really need this? Can we either remove this or make the other getter private?", "author": "taikuukaits", "createdAt": "2020-12-14T18:36:37Z", "path": "src/main/java/com/synopsys/integration/detect/lifecycle/exit/ExitResult.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * synopsys-detect\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detect.lifecycle.exit;\n+\n+import com.synopsys.integration.detect.configuration.enumeration.ExitCodeType;\n+import com.synopsys.integration.util.Stringable;\n+\n+public class ExitResult extends Stringable {\n+    private final ExitCodeType exitCodeType;\n+    private final String duration;\n+    private final boolean forceSuccess;\n+    private final boolean performExit;\n+\n+    public ExitResult(ExitCodeType exitCodeType, String duration, boolean forceSuccess, boolean performExit) {\n+        this.exitCodeType = exitCodeType;\n+        this.duration = duration;\n+        this.forceSuccess = forceSuccess;\n+        this.performExit = performExit;\n+    }\n+\n+    public ExitCodeType getExitCodeType() {\n+        return exitCodeType;\n+    }\n+\n+    public int getExitCode() {", "originalCommit": "2eecb85181df6fdf20e58e9fea9fac490bcab703", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyNDcyNw==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#discussion_r542624727", "bodyText": "Seems strange to assert this way - is it just a pass through of the value? Why do it at all then?", "author": "taikuukaits", "createdAt": "2020-12-14T18:37:55Z", "path": "src/test/java/com/synopsys/integration/detect/lifecycle/exit/ExitManagerTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.synopsys.integration.detect.lifecycle.exit;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.detect.configuration.enumeration.ExitCodeType;\n+import com.synopsys.integration.detect.lifecycle.shutdown.ExitCodeManager;\n+import com.synopsys.integration.detect.lifecycle.shutdown.ExitCodeRequest;\n+import com.synopsys.integration.detect.lifecycle.shutdown.ExitCodeUtility;\n+import com.synopsys.integration.detect.workflow.event.EventSystem;\n+import com.synopsys.integration.detect.workflow.status.DetectStatusManager;\n+\n+public class ExitManagerTest {\n+    @Test\n+    public void testNormalExit() {\n+        long startTime = System.currentTimeMillis();\n+        EventSystem eventSystem = new EventSystem();\n+        DetectStatusManager statusManager = new DetectStatusManager(eventSystem);\n+        ExitCodeUtility exitCodeUtility = new ExitCodeUtility();\n+        ExitCodeManager exitCodeManager = new ExitCodeManager(eventSystem, exitCodeUtility);\n+        ExitManager exitManager = new ExitManager(eventSystem, exitCodeManager, statusManager);\n+\n+        ExitOptions exitOptions = new ExitOptions(startTime, true, false, true);\n+        ExitResult exitResult = exitManager.exit(exitOptions);\n+\n+        assertEquals(startTime, exitOptions.getStartTime());\n+        assertTrue(exitOptions.isLogResults());\n+        assertEquals(exitOptions.isForceSuccessExit(), exitResult.isForceSuccess());", "originalCommit": "2eecb85181df6fdf20e58e9fea9fac490bcab703", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "44eba0f4500fe335b4faacaf8e9f0ef2da6d5a27", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/44eba0f4500fe335b4faacaf8e9f0ef2da6d5a27", "message": "refactor: Update the branch with PR comments.", "committedDate": "2020-12-14T19:00:02Z", "type": "commit"}, {"oid": "94cde2ed2415eda088f2369f9fb7c04676d53120", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/94cde2ed2415eda088f2369f9fb7c04676d53120", "message": "Merge remote-tracking branch 'origin/master' into ps_application_complexity", "committedDate": "2020-12-14T19:01:20Z", "type": "commit"}]}