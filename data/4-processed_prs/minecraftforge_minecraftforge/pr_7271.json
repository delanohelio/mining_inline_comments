{"pr_number": 7271, "pr_title": "Add validation via resources for tag providers", "pr_createdAt": "2020-08-25T06:05:59Z", "pr_url": "https://github.com/MinecraftForge/MinecraftForge/pull/7271", "timeline": [{"oid": "69e3984a488b54d829b78890fb8e95d2ba1eea3e", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/69e3984a488b54d829b78890fb8e95d2ba1eea3e", "message": "Add validation via resources for tag providers", "committedDate": "2020-08-25T06:05:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUyMDAzMA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7271#discussion_r476520030", "bodyText": "Pretty sure ItemEntry is meant for a single entry, EntityTypeTags and FluidTags are also ItemEntry's.\nThe DataGeneratorTest uses BlockTags but I am guessing it worked on the fact that blocks and items share the same name.", "author": "Cyborgmas", "createdAt": "2020-08-25T15:03:11Z", "path": "patches/minecraft/net/minecraft/tags/ITag.java.patch", "diffHunk": "@@ -41,18 +41,37 @@\n           jsonobject.add(\"values\", jsonarray);\n           return jsonobject;\n        }\n-@@ -178,6 +189,7 @@\n+@@ -152,6 +163,8 @@\n+       <T> boolean func_230238_a_(Function<ResourceLocation, ITag<T>> p_230238_1_, Function<ResourceLocation, T> p_230238_2_, Consumer<T> p_230238_3_);\n+ \n+       void func_230237_a_(JsonArray p_230237_1_);\n++\n++      default boolean exists(String type, net.minecraftforge.common.data.ExistingFileHelper existingFileHelper) { return true; }\n+    }\n+ \n+    public static class ItemEntry implements ITag.ITagEntry {\n+@@ -178,6 +191,12 @@\n        public String toString() {\n           return this.field_232969_a_.toString();\n        }\n +      @Override public boolean equals(Object o) { return o == this || (o instanceof ITag.ItemEntry && java.util.Objects.equals(this.field_232969_a_, ((ITag.ItemEntry) o).field_232969_a_)); }\n++\n++      @Override\n++      public boolean exists(String type, net.minecraftforge.common.data.ExistingFileHelper existingFileHelper) {\n++         return net.minecraftforge.registries.ForgeRegistries.ITEMS.containsKey(field_232969_a_);", "originalCommit": "69e3984a488b54d829b78890fb8e95d2ba1eea3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY4MjQ0Nw==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7271#discussion_r480682447", "bodyText": "That's going to pose a problem then. This method is probably going to move to a static with hardcoded type checks since these 4 entry types are fixed, and I can accept the registry as a parameter there.", "author": "tterrag1098", "createdAt": "2020-09-01T03:15:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUyMDAzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYzNTgwMQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7271#discussion_r482635801", "bodyText": "Thinking about it more, this code is completely unnecessary. An ItemEntry will never reach this point because validating the registry contains the entry is handled by func_232963_b_. I'm going to push a new version that only cares about TagEntry and hardcodes it into TagsProvider.", "author": "tterrag1098", "createdAt": "2020-09-03T01:16:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUyMDAzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzMTU5Mg==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7271#discussion_r477531592", "bodyText": "I would just remove the else and keep the brackets, as this commented out curly bracket is floating around quite freely otherwise (which might cause issues when porting patches)", "author": "ichttt", "createdAt": "2020-08-26T19:15:19Z", "path": "patches/minecraft/net/minecraft/data/TagsProvider.java.patch", "diffHunk": "@@ -1,34 +1,56 @@\n --- a/net/minecraft/data/TagsProvider.java\n +++ b/net/minecraft/data/TagsProvider.java\n-@@ -28,11 +28,17 @@\n+@@ -28,11 +28,19 @@\n     protected final DataGenerator field_200433_a;\n     protected final Registry<T> field_200435_c;\n     protected final Map<ResourceLocation, ITag.Builder> field_200434_b = Maps.newLinkedHashMap();\n +   protected String modId;\n++   net.minecraftforge.common.data.ExistingFileHelper existingFileHelper;\n  \n +   @Deprecated//Forge, Use ModID version.\n     protected TagsProvider(DataGenerator p_i49827_1_, Registry<T> p_i49827_2_) {\n -      this.field_200433_a = p_i49827_1_;\n -      this.field_200435_c = p_i49827_2_;\n-+       this(p_i49827_1_, p_i49827_2_, \"vanilla\");\n++       this(p_i49827_1_, p_i49827_2_, \"vanilla\", null);\n     }\n-+   protected TagsProvider(DataGenerator generatorIn, Registry<T> registryIn, String modId) {\n++   protected TagsProvider(DataGenerator generatorIn, Registry<T> registryIn, String modId, @javax.annotation.Nullable net.minecraftforge.common.data.ExistingFileHelper existingFileHelper) {\n +      this.field_200433_a = generatorIn;\n +      this.field_200435_c = registryIn;\n +      this.modId = modId;\n++      this.existingFileHelper = existingFileHelper;\n +   }\n  \n     protected abstract void func_200432_c();\n  \n-@@ -53,6 +59,7 @@\n-          } else {\n+@@ -49,10 +57,17 @@\n+       this.field_200434_b.forEach((p_240524_4_, p_240524_5_) -> {\n+          List<ITag.Proxy> list = p_240524_5_.func_232963_b_(function, function1).collect(Collectors.toList());\n+          if (!list.isEmpty()) {\n++            // FORGE: Add validation via existing resources\n++            for (ITag.Proxy missingTag : list) {\n++               // Vanilla tag types use plural names, revisit this when/if we add custom tag types\n++               if (existingFileHelper == null || !missingTag.func_232968_a_().exists(((Registry)Registry.field_212617_f).func_177774_c(field_200435_c).func_110623_a() + \"s\", existingFileHelper))\n+             throw new IllegalArgumentException(String.format(\"Couldn't define tag %s as it is missing following references: %s\", p_240524_4_, list.stream().map(Objects::toString).collect(Collectors.joining(\",\"))));\n+-         } else {\n++            }\n++         } //else {\n++            // FORGE: Run this code always, it will be skipped if the above code throws an exception\n              JsonObject jsonobject = p_240524_5_.func_232965_c_();\n              Path path = this.func_200431_a(p_240524_4_);\n +            if (path == null) return; //Forge: Allow running this data provider without writing it. Recipe provider needs valid tags.\n  \n              try {\n                 String s = field_200437_e.toJson((JsonElement)jsonobject);\n-@@ -78,7 +85,7 @@\n+@@ -70,7 +85,7 @@\n+                field_200436_d.error(\"Couldn't save tags to {}\", path, ioexception);\n+             }\n+ \n+-         }\n++//         }", "originalCommit": "69e3984a488b54d829b78890fb8e95d2ba1eea3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzMjE0Ng==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7271#discussion_r477532146", "bodyText": "should be private or protected, but package-private makes no sense here", "author": "ichttt", "createdAt": "2020-08-26T19:16:22Z", "path": "patches/minecraft/net/minecraft/data/TagsProvider.java.patch", "diffHunk": "@@ -1,34 +1,56 @@\n --- a/net/minecraft/data/TagsProvider.java\n +++ b/net/minecraft/data/TagsProvider.java\n-@@ -28,11 +28,17 @@\n+@@ -28,11 +28,19 @@\n     protected final DataGenerator field_200433_a;\n     protected final Registry<T> field_200435_c;\n     protected final Map<ResourceLocation, ITag.Builder> field_200434_b = Maps.newLinkedHashMap();\n +   protected String modId;\n++   net.minecraftforge.common.data.ExistingFileHelper existingFileHelper;", "originalCommit": "69e3984a488b54d829b78890fb8e95d2ba1eea3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzMjYzNg==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7271#discussion_r477532636", "bodyText": "Unnecessary import here and a few times below", "author": "ichttt", "createdAt": "2020-08-26T19:17:17Z", "path": "src/main/java/net/minecraftforge/client/model/generators/BlockModelBuilder.java", "diffHunk": "@@ -20,6 +20,7 @@\n package net.minecraftforge.client.model.generators;\n \n import net.minecraft.util.ResourceLocation;\n+import net.minecraftforge.common.data.ExistingFileHelper;", "originalCommit": "69e3984a488b54d829b78890fb8e95d2ba1eea3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY4MTMzOA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7271#discussion_r480681338", "bodyText": "It's not unnecessary...the class moved.", "author": "tterrag1098", "createdAt": "2020-09-01T03:14:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzMjYzNg=="}], "type": "inlineReview"}, {"oid": "6efe17fb1b58eae6637479ab09467302133daac0", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/6efe17fb1b58eae6637479ab09467302133daac0", "message": "Remove code from ITagEntry subclasses, add protected getTagFolder", "committedDate": "2020-09-03T01:34:06Z", "type": "commit"}, {"oid": "a4ce18212201ca1ffd30686539acf00200de2cf2", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/a4ce18212201ca1ffd30686539acf00200de2cf2", "message": "Simplify TagsProvider patch", "committedDate": "2020-09-03T02:08:34Z", "type": "commit"}, {"oid": "6da1bcadb0732c131de2b4dbb9f00a74427a36c6", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/6da1bcadb0732c131de2b4dbb9f00a74427a36c6", "message": "Add exc", "committedDate": "2020-09-03T03:05:59Z", "type": "commit"}, {"oid": "ab9a660b8135e28da08053d305d9e53e39a30207", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/ab9a660b8135e28da08053d305d9e53e39a30207", "message": "Merge remote-tracking branch 'upstream/1.16.x' into 1.16.x-tag_datagen\n\n# Conflicts:\n#\tsrc/main/java/net/minecraftforge/fml/event/lifecycle/GatherDataEvent.java", "committedDate": "2020-09-03T03:12:03Z", "type": "commit"}]}