{"pr_number": 7503, "pr_title": "[1.16] Fix PointOfInterestType not being added to blockstate map when registered", "pr_createdAt": "2020-11-20T17:07:27Z", "pr_url": "https://github.com/MinecraftForge/MinecraftForge/pull/7503", "timeline": [{"oid": "8381130ecfdd1225a4da52558340d27fecd84f97", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/8381130ecfdd1225a4da52558340d27fecd84f97", "message": "fix PointOfInterestType registry not updating the blockstate map", "committedDate": "2020-12-26T13:57:53Z", "type": "commit"}, {"oid": "8381130ecfdd1225a4da52558340d27fecd84f97", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/8381130ecfdd1225a4da52558340d27fecd84f97", "message": "fix PointOfInterestType registry not updating the blockstate map", "committedDate": "2020-12-26T13:57:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk4NTMxMA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7503#discussion_r548985310", "bodyText": "We are not vanilla, might want to make this message a bit more useful and not use Util.pauseDevMode.", "author": "diesieben07", "createdAt": "2020-12-26T13:57:26Z", "path": "src/main/java/net/minecraftforge/registries/GameData.java", "diffHunk": "@@ -613,6 +618,38 @@ public void onCreate(IForgeRegistryInternal<Feature<?>> owner, RegistryManager s\n         }\n     }\n \n+    private static class PointOfInterestTypeCallbacks implements IForgeRegistry.AddCallback<PointOfInterestType> , IForgeRegistry.ClearCallback<PointOfInterestType>, IForgeRegistry.CreateCallback<PointOfInterestType>\n+    {\n+        static final PointOfInterestTypeCallbacks INSTANCE = new PointOfInterestTypeCallbacks();\n+        \n+        @Override\n+        public void onAdd(IForgeRegistryInternal<PointOfInterestType> owner, RegistryManager stage, int id, PointOfInterestType obj, @Nullable PointOfInterestType oldObj)\n+        {\n+            Map<BlockState, PointOfInterestType> map = owner.getSlaveMap(BLOCKSTATE_TO_POINT_OF_INTEREST_TYPE, Map.class);\n+            if (oldObj != null)\n+            {\n+                oldObj.getBlockStates().forEach(map::remove);\n+            }\n+            obj.getBlockStates().forEach((state) -> \n+            {\n+                if (map.put(state, obj) != null)\n+                {\n+                    throw Util.pauseDevMode(new IllegalStateException(String.format(\"%s is defined in too many tags\", state)));", "originalCommit": "5db4f68cacd86455c9520684cb0faad6c8ca6099", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk5ODE5NA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7503#discussion_r548998194", "bodyText": "Now explains which POI's conflict and why.", "author": "mrp-v2", "createdAt": "2020-12-26T14:20:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk4NTMxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk4Njc1MA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7503#discussion_r548986750", "bodyText": "Formatting: Put the annotation on its own line like everywhere else.", "author": "diesieben07", "createdAt": "2020-12-26T14:01:05Z", "path": "src/main/java/net/minecraftforge/registries/GameData.java", "diffHunk": "@@ -615,6 +620,38 @@ public void onCreate(IForgeRegistryInternal<Feature<?>> owner, RegistryManager s\n         }\n     }\n \n+    private static class PointOfInterestTypeCallbacks implements IForgeRegistry.AddCallback<PointOfInterestType> , IForgeRegistry.ClearCallback<PointOfInterestType>, IForgeRegistry.CreateCallback<PointOfInterestType>\n+    {\n+        static final PointOfInterestTypeCallbacks INSTANCE = new PointOfInterestTypeCallbacks();\n+        \n+        @Override\n+        public void onAdd(IForgeRegistryInternal<PointOfInterestType> owner, RegistryManager stage, int id, PointOfInterestType obj, @Nullable PointOfInterestType oldObj)\n+        {\n+            Map<BlockState, PointOfInterestType> map = owner.getSlaveMap(BLOCKSTATE_TO_POINT_OF_INTEREST_TYPE, Map.class);\n+            if (oldObj != null)\n+            {\n+                oldObj.getBlockStates().forEach(map::remove);\n+            }\n+            obj.getBlockStates().forEach((state) -> \n+            {\n+                if (map.put(state, obj) != null)\n+                {\n+                    throw Util.pauseDevMode(new IllegalStateException(String.format(\"%s is defined in too many tags\", state)));\n+                }\n+            });\n+        }\n+\n+        @Override public void onClear(IForgeRegistryInternal<PointOfInterestType> owner, RegistryManager stage)", "originalCommit": "8381130ecfdd1225a4da52558340d27fecd84f97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk5ODE0OA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7503#discussion_r548998148", "bodyText": "Silly IDE formatting...", "author": "mrp-v2", "createdAt": "2020-12-26T14:19:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk4Njc1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk4Njg0Nw==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7503#discussion_r548986847", "bodyText": "Formatting", "author": "diesieben07", "createdAt": "2020-12-26T14:01:11Z", "path": "src/main/java/net/minecraftforge/registries/GameData.java", "diffHunk": "@@ -615,6 +620,38 @@ public void onCreate(IForgeRegistryInternal<Feature<?>> owner, RegistryManager s\n         }\n     }\n \n+    private static class PointOfInterestTypeCallbacks implements IForgeRegistry.AddCallback<PointOfInterestType> , IForgeRegistry.ClearCallback<PointOfInterestType>, IForgeRegistry.CreateCallback<PointOfInterestType>\n+    {\n+        static final PointOfInterestTypeCallbacks INSTANCE = new PointOfInterestTypeCallbacks();\n+        \n+        @Override\n+        public void onAdd(IForgeRegistryInternal<PointOfInterestType> owner, RegistryManager stage, int id, PointOfInterestType obj, @Nullable PointOfInterestType oldObj)\n+        {\n+            Map<BlockState, PointOfInterestType> map = owner.getSlaveMap(BLOCKSTATE_TO_POINT_OF_INTEREST_TYPE, Map.class);\n+            if (oldObj != null)\n+            {\n+                oldObj.getBlockStates().forEach(map::remove);\n+            }\n+            obj.getBlockStates().forEach((state) -> \n+            {\n+                if (map.put(state, obj) != null)\n+                {\n+                    throw Util.pauseDevMode(new IllegalStateException(String.format(\"%s is defined in too many tags\", state)));\n+                }\n+            });\n+        }\n+\n+        @Override public void onClear(IForgeRegistryInternal<PointOfInterestType> owner, RegistryManager stage)\n+        {\n+            owner.getSlaveMap(BLOCKSTATE_TO_POINT_OF_INTEREST_TYPE, Map.class).clear();\n+        }\n+\n+        @Override public void onCreate(IForgeRegistryInternal<PointOfInterestType> owner, RegistryManager stage)", "originalCommit": "8381130ecfdd1225a4da52558340d27fecd84f97", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk4NzI5Nw==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7503#discussion_r548987297", "bodyText": "Why?", "author": "diesieben07", "createdAt": "2020-12-26T14:01:43Z", "path": "src/main/java/net/minecraftforge/registries/GameData.java", "diffHunk": "@@ -77,6 +74,7 @@\n import net.minecraftforge.common.world.ForgeWorldType;\n import net.minecraftforge.event.RegistryEvent;\n import net.minecraftforge.event.RegistryEvent.MissingMappings;\n+import net.minecraftforge.eventbus.api.SubscribeEvent;", "originalCommit": "8381130ecfdd1225a4da52558340d27fecd84f97", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk4ODM2NA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7503#discussion_r548988364", "bodyText": "I liked the previous solution of if (false), better. Its a smaller patch and you can add a comment explaining why this is disabled.", "author": "diesieben07", "createdAt": "2020-12-26T14:02:57Z", "path": "patches/minecraft/net/minecraft/village/PointOfInterestType.java.patch", "diffHunk": "@@ -9,3 +9,33 @@\n     private static final Supplier<Set<PointOfInterestType>> field_234168_y_ = Suppliers.memoize(() -> {\n        return Registry.field_218370_L.func_201756_e().map(VillagerProfession::func_221149_b).collect(Collectors.toSet());\n     });\n+@@ -36,7 +36,7 @@\n+    }).filter((p_234173_0_) -> {\n+       return p_234173_0_.func_177229_b(BedBlock.field_176472_a) == BedPart.HEAD;\n+    }).collect(ImmutableSet.toImmutableSet());\n+-   private static final Map<BlockState, PointOfInterestType> field_221073_u = Maps.newHashMap();\n++   private static final Map<BlockState, PointOfInterestType> field_221073_u = net.minecraftforge.registries.GameData.getBlockStatePointOfInterestTypeMap();\n+    public static final PointOfInterestType field_221054_b = func_226360_a_(\"unemployed\", ImmutableSet.of(), 1, field_221071_s, 1);\n+    public static final PointOfInterestType field_221055_c = func_226359_a_(\"armorer\", func_221042_a(Blocks.field_222424_lM), 1, 1);\n+    public static final PointOfInterestType field_221056_d = func_226359_a_(\"butcher\", func_221042_a(Blocks.field_222423_lL), 1, 1);\n+@@ -112,16 +112,14 @@\n+    }\n+ \n+    private static PointOfInterestType func_221052_a(PointOfInterestType p_221052_0_) {\n+-      p_221052_0_.field_221075_w.forEach((p_234169_1_) -> {\n+-         PointOfInterestType pointofinteresttype = field_221073_u.put(p_234169_1_, p_221052_0_);\n+-         if (pointofinteresttype != null) {\n+-            throw (IllegalStateException)Util.func_229757_c_(new IllegalStateException(String.format(\"%s is defined in too many tags\", p_234169_1_)));\n+-         }\n+-      });", "originalCommit": "8381130ecfdd1225a4da52558340d27fecd84f97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk5Nzk3Ng==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7503#discussion_r548997976", "bodyText": "I opted to delete the code, so that if the code changes in a future Minecraft version, the patch breaks. I choose this because in #7490 it seemed lex prefers patches that will break if the vanilla code changes (see this comment).", "author": "mrp-v2", "createdAt": "2020-12-26T14:17:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk4ODM2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAwMDUxMg==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7503#discussion_r549000512", "bodyText": "Fair enough", "author": "diesieben07", "createdAt": "2020-12-26T14:49:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk4ODM2NA=="}], "type": "inlineReview"}, {"oid": "dd8b28882586736aa4fade65033d7673e2b27d1b", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/dd8b28882586736aa4fade65033d7673e2b27d1b", "message": "address some comments from @diesieben07", "committedDate": "2020-12-26T14:19:02Z", "type": "commit"}]}