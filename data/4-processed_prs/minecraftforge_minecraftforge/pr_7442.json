{"pr_number": 7442, "pr_title": "Add Player context to AnvilUpdateEvent", "pr_createdAt": "2020-10-27T18:03:37Z", "pr_url": "https://github.com/MinecraftForge/MinecraftForge/pull/7442", "timeline": [{"oid": "63dd308648bbb8a3baaa9a051199434e3936a39a", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/63dd308648bbb8a3baaa9a051199434e3936a39a", "message": "Make AUE player-aware and add new docs.", "committedDate": "2020-10-27T17:56:08Z", "type": "commit"}, {"oid": "cf881613122c1a763ff19d392216b2c390e389aa", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/cf881613122c1a763ff19d392216b2c390e389aa", "message": "Merge remote-tracking branch 'refs/remotes/MinecraftForge/1.16.x' into player-anvil-update", "committedDate": "2020-10-27T17:58:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzMzA2Mg==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7442#discussion_r513633062", "bodyText": "Formatting (braces on new lines)", "author": "diesieben07", "createdAt": "2020-10-28T17:30:23Z", "path": "src/main/java/net/minecraftforge/event/AnvilUpdateEvent.java", "diffHunk": "@@ -19,52 +19,146 @@\n \n package net.minecraftforge.event;\n \n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.inventory.container.RepairContainer;\n+import net.minecraft.item.ItemStack;\n import net.minecraftforge.eventbus.api.Cancelable;\n import net.minecraftforge.eventbus.api.Event;\n-import net.minecraft.item.ItemStack;\n \n-import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n \n /**\n  * \n- * AnvilUpdateEvent is fired when a player places items in both the left and right slots of a anvil.\n- * If the event is canceled, vanilla behavior will not run, and the output will be set to null.\n- * If the event is not canceled, but the output is not null, it will set the output and not run vanilla behavior.\n- * if the output is null, and the event is not canceled, vanilla behavior will execute.\n+ * AnvilUpdateEvent is fired when the inputs (either input stack, or the name) to an anvil are changed. <br> \n+ * It is called from {@link RepairContainer#updateRepairOutput}. <br>\n+ * If the event is canceled, vanilla behavior will not run, and the output will be set to {@link ItemStack#EMPTY}. <br>\n+ * If the event is not canceled, but the output is not empty, it will set the output and not run vanilla behavior. <br>\n+ * if the output is empty, and the event is not canceled, vanilla behavior will execute. <br>\n  */\n @Cancelable\n-public class AnvilUpdateEvent extends Event\n-{\n-    @Nonnull\n-    private final ItemStack left;  // The left side of the input\n-    @Nonnull\n-    private final ItemStack right; // The right side of the input\n-    private final String name;     // The name to set the item, if the user specified one.\n-    @Nonnull\n-    private ItemStack output;      // Set this to set the output stack\n-    private int cost;              // The base cost, set this to change it if output != null\n-    private int materialCost; // The number of items from the right slot to be consumed during the repair. Leave as 0 to consume the entire stack.\n-\n-    public AnvilUpdateEvent(@Nonnull ItemStack left, @Nonnull ItemStack right, String name, int cost)\n+public class AnvilUpdateEvent extends Event {", "originalCommit": "cf881613122c1a763ff19d392216b2c390e389aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzMzUxMg==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7442#discussion_r513633512", "bodyText": "Typo", "author": "diesieben07", "createdAt": "2020-10-28T17:31:03Z", "path": "src/main/java/net/minecraftforge/event/AnvilUpdateEvent.java", "diffHunk": "@@ -19,52 +19,146 @@\n \n package net.minecraftforge.event;\n \n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.inventory.container.RepairContainer;\n+import net.minecraft.item.ItemStack;\n import net.minecraftforge.eventbus.api.Cancelable;\n import net.minecraftforge.eventbus.api.Event;\n-import net.minecraft.item.ItemStack;\n \n-import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n \n /**\n  * \n- * AnvilUpdateEvent is fired when a player places items in both the left and right slots of a anvil.\n- * If the event is canceled, vanilla behavior will not run, and the output will be set to null.\n- * If the event is not canceled, but the output is not null, it will set the output and not run vanilla behavior.\n- * if the output is null, and the event is not canceled, vanilla behavior will execute.\n+ * AnvilUpdateEvent is fired when the inputs (either input stack, or the name) to an anvil are changed. <br> \n+ * It is called from {@link RepairContainer#updateRepairOutput}. <br>\n+ * If the event is canceled, vanilla behavior will not run, and the output will be set to {@link ItemStack#EMPTY}. <br>\n+ * If the event is not canceled, but the output is not empty, it will set the output and not run vanilla behavior. <br>\n+ * if the output is empty, and the event is not canceled, vanilla behavior will execute. <br>\n  */\n @Cancelable\n-public class AnvilUpdateEvent extends Event\n-{\n-    @Nonnull\n-    private final ItemStack left;  // The left side of the input\n-    @Nonnull\n-    private final ItemStack right; // The right side of the input\n-    private final String name;     // The name to set the item, if the user specified one.\n-    @Nonnull\n-    private ItemStack output;      // Set this to set the output stack\n-    private int cost;              // The base cost, set this to change it if output != null\n-    private int materialCost; // The number of items from the right slot to be consumed during the repair. Leave as 0 to consume the entire stack.\n-\n-    public AnvilUpdateEvent(@Nonnull ItemStack left, @Nonnull ItemStack right, String name, int cost)\n+public class AnvilUpdateEvent extends Event {\n+\n+    private final ItemStack left;\n+    private final ItemStack right;\n+    private final String name;\n+    private ItemStack output;\n+    private int cost;\n+    private int materialCost;\n+    @Nullable // TODO: Remove 1.17 - Nullable only in the instance that a mod uses the deprecated ctor.\n+    private final PlayerEntity player;\n+\n+    @Deprecated //TODO: Remove 1.17 - Use Player-contextual constructor below.\n+    public AnvilUpdateEvent(ItemStack left, ItemStack right, String name, int cost)\n+    {\n+        this(left, right, name, cost, null);\n+    }\n+\n+    public AnvilUpdateEvent(ItemStack left, ItemStack right, String name, int cost, PlayerEntity player)\n     {\n         this.left = left;\n         this.right = right;\n         this.output = ItemStack.EMPTY;\n         this.name = name;\n+        this.player = player;\n         this.setCost(cost);\n         this.setMaterialCost(0);\n     }\n \n-    @Nonnull\n-    public ItemStack getLeft() { return left; }\n-    @Nonnull\n-    public ItemStack getRight() { return right; }\n-    public String getName() { return name; }\n-    @Nonnull\n-    public ItemStack getOutput() { return output; }\n-    public void setOutput(@Nonnull ItemStack output) { this.output = output; }\n-    public int getCost() { return cost; }\n-    public void setCost(int cost) { this.cost = cost; }\n-    public int getMaterialCost() { return materialCost; }\n-    public void setMaterialCost(int materialCost) { this.materialCost = materialCost; }\n+    /**\n+     * @return ihe Item in the left input (leftmost) anvil slot.", "originalCommit": "cf881613122c1a763ff19d392216b2c390e389aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDUyOA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7442#discussion_r513634528", "bodyText": "Maybe it's because I am not a native English speaker, but to me this sentence does look correct.", "author": "diesieben07", "createdAt": "2020-10-28T17:32:27Z", "path": "src/main/java/net/minecraftforge/event/AnvilUpdateEvent.java", "diffHunk": "@@ -19,52 +19,146 @@\n \n package net.minecraftforge.event;\n \n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.inventory.container.RepairContainer;\n+import net.minecraft.item.ItemStack;\n import net.minecraftforge.eventbus.api.Cancelable;\n import net.minecraftforge.eventbus.api.Event;\n-import net.minecraft.item.ItemStack;\n \n-import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n \n /**\n  * \n- * AnvilUpdateEvent is fired when a player places items in both the left and right slots of a anvil.\n- * If the event is canceled, vanilla behavior will not run, and the output will be set to null.\n- * If the event is not canceled, but the output is not null, it will set the output and not run vanilla behavior.\n- * if the output is null, and the event is not canceled, vanilla behavior will execute.\n+ * AnvilUpdateEvent is fired when the inputs (either input stack, or the name) to an anvil are changed. <br> \n+ * It is called from {@link RepairContainer#updateRepairOutput}. <br>\n+ * If the event is canceled, vanilla behavior will not run, and the output will be set to {@link ItemStack#EMPTY}. <br>\n+ * If the event is not canceled, but the output is not empty, it will set the output and not run vanilla behavior. <br>\n+ * if the output is empty, and the event is not canceled, vanilla behavior will execute. <br>\n  */\n @Cancelable\n-public class AnvilUpdateEvent extends Event\n-{\n-    @Nonnull\n-    private final ItemStack left;  // The left side of the input\n-    @Nonnull\n-    private final ItemStack right; // The right side of the input\n-    private final String name;     // The name to set the item, if the user specified one.\n-    @Nonnull\n-    private ItemStack output;      // Set this to set the output stack\n-    private int cost;              // The base cost, set this to change it if output != null\n-    private int materialCost; // The number of items from the right slot to be consumed during the repair. Leave as 0 to consume the entire stack.\n-\n-    public AnvilUpdateEvent(@Nonnull ItemStack left, @Nonnull ItemStack right, String name, int cost)\n+public class AnvilUpdateEvent extends Event {\n+\n+    private final ItemStack left;\n+    private final ItemStack right;\n+    private final String name;\n+    private ItemStack output;\n+    private int cost;\n+    private int materialCost;\n+    @Nullable // TODO: Remove 1.17 - Nullable only in the instance that a mod uses the deprecated ctor.\n+    private final PlayerEntity player;\n+\n+    @Deprecated //TODO: Remove 1.17 - Use Player-contextual constructor below.\n+    public AnvilUpdateEvent(ItemStack left, ItemStack right, String name, int cost)\n+    {\n+        this(left, right, name, cost, null);\n+    }\n+\n+    public AnvilUpdateEvent(ItemStack left, ItemStack right, String name, int cost, PlayerEntity player)\n     {\n         this.left = left;\n         this.right = right;\n         this.output = ItemStack.EMPTY;\n         this.name = name;\n+        this.player = player;\n         this.setCost(cost);\n         this.setMaterialCost(0);\n     }\n \n-    @Nonnull\n-    public ItemStack getLeft() { return left; }\n-    @Nonnull\n-    public ItemStack getRight() { return right; }\n-    public String getName() { return name; }\n-    @Nonnull\n-    public ItemStack getOutput() { return output; }\n-    public void setOutput(@Nonnull ItemStack output) { this.output = output; }\n-    public int getCost() { return cost; }\n-    public void setCost(int cost) { this.cost = cost; }\n-    public int getMaterialCost() { return materialCost; }\n-    public void setMaterialCost(int materialCost) { this.materialCost = materialCost; }\n+    /**\n+     * @return ihe Item in the left input (leftmost) anvil slot.\n+     */\n+    public ItemStack getLeft()\n+    {\n+        return left;\n+    }\n+\n+    /**\n+     * @return The item in the right input (center) anvil slot.\n+     */\n+    public ItemStack getRight()\n+    {\n+        return right;\n+    }\n+\n+    /**\n+     * This is the name as sent by the client.  It may be null if none has been sent. <br>\n+     * If empty, it indicates the user wishes to clear the custom name from the item.\n+     * @return The name that the output item will be set to, if applicable.\n+     */\n+    @Nullable\n+    public String getName()\n+    {\n+        return name;\n+    }\n+\n+    /**\n+     * This is the output as a result of this event, not of the two items. <br>", "originalCommit": "cf881613122c1a763ff19d392216b2c390e389aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY0MjI1Mw==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7442#discussion_r513642253", "bodyText": "The intentional meaning of this statement is that \"this is the output as determined by the event, not by the vanilla behavior between these two items\", which may be more sufficient.", "author": "Shadows-of-Fire", "createdAt": "2020-10-28T17:43:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDUyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY0NjM0OA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7442#discussion_r513646348", "bodyText": "Yes, that sounds much clearer!", "author": "diesieben07", "createdAt": "2020-10-28T17:49:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDUyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNTA4Ng==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7442#discussion_r513635086", "bodyText": "Given the above description, the label for the return value is wrong (it's the item that should be put in that slot, not the one currently in it).", "author": "diesieben07", "createdAt": "2020-10-28T17:33:19Z", "path": "src/main/java/net/minecraftforge/event/AnvilUpdateEvent.java", "diffHunk": "@@ -19,52 +19,146 @@\n \n package net.minecraftforge.event;\n \n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.inventory.container.RepairContainer;\n+import net.minecraft.item.ItemStack;\n import net.minecraftforge.eventbus.api.Cancelable;\n import net.minecraftforge.eventbus.api.Event;\n-import net.minecraft.item.ItemStack;\n \n-import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n \n /**\n  * \n- * AnvilUpdateEvent is fired when a player places items in both the left and right slots of a anvil.\n- * If the event is canceled, vanilla behavior will not run, and the output will be set to null.\n- * If the event is not canceled, but the output is not null, it will set the output and not run vanilla behavior.\n- * if the output is null, and the event is not canceled, vanilla behavior will execute.\n+ * AnvilUpdateEvent is fired when the inputs (either input stack, or the name) to an anvil are changed. <br> \n+ * It is called from {@link RepairContainer#updateRepairOutput}. <br>\n+ * If the event is canceled, vanilla behavior will not run, and the output will be set to {@link ItemStack#EMPTY}. <br>\n+ * If the event is not canceled, but the output is not empty, it will set the output and not run vanilla behavior. <br>\n+ * if the output is empty, and the event is not canceled, vanilla behavior will execute. <br>\n  */\n @Cancelable\n-public class AnvilUpdateEvent extends Event\n-{\n-    @Nonnull\n-    private final ItemStack left;  // The left side of the input\n-    @Nonnull\n-    private final ItemStack right; // The right side of the input\n-    private final String name;     // The name to set the item, if the user specified one.\n-    @Nonnull\n-    private ItemStack output;      // Set this to set the output stack\n-    private int cost;              // The base cost, set this to change it if output != null\n-    private int materialCost; // The number of items from the right slot to be consumed during the repair. Leave as 0 to consume the entire stack.\n-\n-    public AnvilUpdateEvent(@Nonnull ItemStack left, @Nonnull ItemStack right, String name, int cost)\n+public class AnvilUpdateEvent extends Event {\n+\n+    private final ItemStack left;\n+    private final ItemStack right;\n+    private final String name;\n+    private ItemStack output;\n+    private int cost;\n+    private int materialCost;\n+    @Nullable // TODO: Remove 1.17 - Nullable only in the instance that a mod uses the deprecated ctor.\n+    private final PlayerEntity player;\n+\n+    @Deprecated //TODO: Remove 1.17 - Use Player-contextual constructor below.\n+    public AnvilUpdateEvent(ItemStack left, ItemStack right, String name, int cost)\n+    {\n+        this(left, right, name, cost, null);\n+    }\n+\n+    public AnvilUpdateEvent(ItemStack left, ItemStack right, String name, int cost, PlayerEntity player)\n     {\n         this.left = left;\n         this.right = right;\n         this.output = ItemStack.EMPTY;\n         this.name = name;\n+        this.player = player;\n         this.setCost(cost);\n         this.setMaterialCost(0);\n     }\n \n-    @Nonnull\n-    public ItemStack getLeft() { return left; }\n-    @Nonnull\n-    public ItemStack getRight() { return right; }\n-    public String getName() { return name; }\n-    @Nonnull\n-    public ItemStack getOutput() { return output; }\n-    public void setOutput(@Nonnull ItemStack output) { this.output = output; }\n-    public int getCost() { return cost; }\n-    public void setCost(int cost) { this.cost = cost; }\n-    public int getMaterialCost() { return materialCost; }\n-    public void setMaterialCost(int materialCost) { this.materialCost = materialCost; }\n+    /**\n+     * @return ihe Item in the left input (leftmost) anvil slot.\n+     */\n+    public ItemStack getLeft()\n+    {\n+        return left;\n+    }\n+\n+    /**\n+     * @return The item in the right input (center) anvil slot.\n+     */\n+    public ItemStack getRight()\n+    {\n+        return right;\n+    }\n+\n+    /**\n+     * This is the name as sent by the client.  It may be null if none has been sent. <br>\n+     * If empty, it indicates the user wishes to clear the custom name from the item.\n+     * @return The name that the output item will be set to, if applicable.\n+     */\n+    @Nullable\n+    public String getName()\n+    {\n+        return name;\n+    }\n+\n+    /**\n+     * This is the output as a result of this event, not of the two items. <br>\n+     * If you are the first receiver of this event, it is guaranteed to be empty. <br>\n+     * It will only be non-empty if changed by an event handler.\n+     * @return The item in the output (rightmost) anvil slot.", "originalCommit": "cf881613122c1a763ff19d392216b2c390e389aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNTg2MA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7442#discussion_r513635860", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The material cost is how many right inputs are consumed.\n          \n          \n            \n                 * The material cost is how many units of the right input stack are consumed.", "author": "diesieben07", "createdAt": "2020-10-28T17:34:31Z", "path": "src/main/java/net/minecraftforge/event/AnvilUpdateEvent.java", "diffHunk": "@@ -19,52 +19,146 @@\n \n package net.minecraftforge.event;\n \n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.inventory.container.RepairContainer;\n+import net.minecraft.item.ItemStack;\n import net.minecraftforge.eventbus.api.Cancelable;\n import net.minecraftforge.eventbus.api.Event;\n-import net.minecraft.item.ItemStack;\n \n-import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n \n /**\n  * \n- * AnvilUpdateEvent is fired when a player places items in both the left and right slots of a anvil.\n- * If the event is canceled, vanilla behavior will not run, and the output will be set to null.\n- * If the event is not canceled, but the output is not null, it will set the output and not run vanilla behavior.\n- * if the output is null, and the event is not canceled, vanilla behavior will execute.\n+ * AnvilUpdateEvent is fired when the inputs (either input stack, or the name) to an anvil are changed. <br> \n+ * It is called from {@link RepairContainer#updateRepairOutput}. <br>\n+ * If the event is canceled, vanilla behavior will not run, and the output will be set to {@link ItemStack#EMPTY}. <br>\n+ * If the event is not canceled, but the output is not empty, it will set the output and not run vanilla behavior. <br>\n+ * if the output is empty, and the event is not canceled, vanilla behavior will execute. <br>\n  */\n @Cancelable\n-public class AnvilUpdateEvent extends Event\n-{\n-    @Nonnull\n-    private final ItemStack left;  // The left side of the input\n-    @Nonnull\n-    private final ItemStack right; // The right side of the input\n-    private final String name;     // The name to set the item, if the user specified one.\n-    @Nonnull\n-    private ItemStack output;      // Set this to set the output stack\n-    private int cost;              // The base cost, set this to change it if output != null\n-    private int materialCost; // The number of items from the right slot to be consumed during the repair. Leave as 0 to consume the entire stack.\n-\n-    public AnvilUpdateEvent(@Nonnull ItemStack left, @Nonnull ItemStack right, String name, int cost)\n+public class AnvilUpdateEvent extends Event {\n+\n+    private final ItemStack left;\n+    private final ItemStack right;\n+    private final String name;\n+    private ItemStack output;\n+    private int cost;\n+    private int materialCost;\n+    @Nullable // TODO: Remove 1.17 - Nullable only in the instance that a mod uses the deprecated ctor.\n+    private final PlayerEntity player;\n+\n+    @Deprecated //TODO: Remove 1.17 - Use Player-contextual constructor below.\n+    public AnvilUpdateEvent(ItemStack left, ItemStack right, String name, int cost)\n+    {\n+        this(left, right, name, cost, null);\n+    }\n+\n+    public AnvilUpdateEvent(ItemStack left, ItemStack right, String name, int cost, PlayerEntity player)\n     {\n         this.left = left;\n         this.right = right;\n         this.output = ItemStack.EMPTY;\n         this.name = name;\n+        this.player = player;\n         this.setCost(cost);\n         this.setMaterialCost(0);\n     }\n \n-    @Nonnull\n-    public ItemStack getLeft() { return left; }\n-    @Nonnull\n-    public ItemStack getRight() { return right; }\n-    public String getName() { return name; }\n-    @Nonnull\n-    public ItemStack getOutput() { return output; }\n-    public void setOutput(@Nonnull ItemStack output) { this.output = output; }\n-    public int getCost() { return cost; }\n-    public void setCost(int cost) { this.cost = cost; }\n-    public int getMaterialCost() { return materialCost; }\n-    public void setMaterialCost(int materialCost) { this.materialCost = materialCost; }\n+    /**\n+     * @return ihe Item in the left input (leftmost) anvil slot.\n+     */\n+    public ItemStack getLeft()\n+    {\n+        return left;\n+    }\n+\n+    /**\n+     * @return The item in the right input (center) anvil slot.\n+     */\n+    public ItemStack getRight()\n+    {\n+        return right;\n+    }\n+\n+    /**\n+     * This is the name as sent by the client.  It may be null if none has been sent. <br>\n+     * If empty, it indicates the user wishes to clear the custom name from the item.\n+     * @return The name that the output item will be set to, if applicable.\n+     */\n+    @Nullable\n+    public String getName()\n+    {\n+        return name;\n+    }\n+\n+    /**\n+     * This is the output as a result of this event, not of the two items. <br>\n+     * If you are the first receiver of this event, it is guaranteed to be empty. <br>\n+     * It will only be non-empty if changed by an event handler.\n+     * @return The item in the output (rightmost) anvil slot.\n+     */\n+    public ItemStack getOutput() \n+    {\n+        return output;\n+    }\n+\n+    /**\n+     * Sets the output slot to a specific itemstack.\n+     * @param output The stack to change the output to.\n+     */\n+    public void setOutput(ItemStack output)\n+    {\n+        this.output = output;\n+    }\n+\n+    /**\n+     * This is the level cost of this anvil operation. <br> \n+     * When unchanged, it is guaranteed to be left.getRepairCost() + right.getRepairCost().\n+     * @return The level cost of this anvil operation.\n+     */\n+    public int getCost()\n+    {\n+        return cost;\n+    }\n+\n+    /**\n+     * Changes the level cost of this operation.\n+     * @param cost The new level cost.\n+     */\n+    public void setCost(int cost)\n+    {\n+        this.cost = cost;\n+    }\n+\n+    /**\n+     * The material cost is how many right inputs are consumed.", "originalCommit": "cf881613122c1a763ff19d392216b2c390e389aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNjI3MA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7442#discussion_r513636270", "bodyText": "What is \"it\" here? What is not being blocked?", "author": "diesieben07", "createdAt": "2020-10-28T17:35:08Z", "path": "src/main/java/net/minecraftforge/event/AnvilUpdateEvent.java", "diffHunk": "@@ -19,52 +19,146 @@\n \n package net.minecraftforge.event;\n \n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.inventory.container.RepairContainer;\n+import net.minecraft.item.ItemStack;\n import net.minecraftforge.eventbus.api.Cancelable;\n import net.minecraftforge.eventbus.api.Event;\n-import net.minecraft.item.ItemStack;\n \n-import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n \n /**\n  * \n- * AnvilUpdateEvent is fired when a player places items in both the left and right slots of a anvil.\n- * If the event is canceled, vanilla behavior will not run, and the output will be set to null.\n- * If the event is not canceled, but the output is not null, it will set the output and not run vanilla behavior.\n- * if the output is null, and the event is not canceled, vanilla behavior will execute.\n+ * AnvilUpdateEvent is fired when the inputs (either input stack, or the name) to an anvil are changed. <br> \n+ * It is called from {@link RepairContainer#updateRepairOutput}. <br>\n+ * If the event is canceled, vanilla behavior will not run, and the output will be set to {@link ItemStack#EMPTY}. <br>\n+ * If the event is not canceled, but the output is not empty, it will set the output and not run vanilla behavior. <br>\n+ * if the output is empty, and the event is not canceled, vanilla behavior will execute. <br>\n  */\n @Cancelable\n-public class AnvilUpdateEvent extends Event\n-{\n-    @Nonnull\n-    private final ItemStack left;  // The left side of the input\n-    @Nonnull\n-    private final ItemStack right; // The right side of the input\n-    private final String name;     // The name to set the item, if the user specified one.\n-    @Nonnull\n-    private ItemStack output;      // Set this to set the output stack\n-    private int cost;              // The base cost, set this to change it if output != null\n-    private int materialCost; // The number of items from the right slot to be consumed during the repair. Leave as 0 to consume the entire stack.\n-\n-    public AnvilUpdateEvent(@Nonnull ItemStack left, @Nonnull ItemStack right, String name, int cost)\n+public class AnvilUpdateEvent extends Event {\n+\n+    private final ItemStack left;\n+    private final ItemStack right;\n+    private final String name;\n+    private ItemStack output;\n+    private int cost;\n+    private int materialCost;\n+    @Nullable // TODO: Remove 1.17 - Nullable only in the instance that a mod uses the deprecated ctor.\n+    private final PlayerEntity player;\n+\n+    @Deprecated //TODO: Remove 1.17 - Use Player-contextual constructor below.\n+    public AnvilUpdateEvent(ItemStack left, ItemStack right, String name, int cost)\n+    {\n+        this(left, right, name, cost, null);\n+    }\n+\n+    public AnvilUpdateEvent(ItemStack left, ItemStack right, String name, int cost, PlayerEntity player)\n     {\n         this.left = left;\n         this.right = right;\n         this.output = ItemStack.EMPTY;\n         this.name = name;\n+        this.player = player;\n         this.setCost(cost);\n         this.setMaterialCost(0);\n     }\n \n-    @Nonnull\n-    public ItemStack getLeft() { return left; }\n-    @Nonnull\n-    public ItemStack getRight() { return right; }\n-    public String getName() { return name; }\n-    @Nonnull\n-    public ItemStack getOutput() { return output; }\n-    public void setOutput(@Nonnull ItemStack output) { this.output = output; }\n-    public int getCost() { return cost; }\n-    public void setCost(int cost) { this.cost = cost; }\n-    public int getMaterialCost() { return materialCost; }\n-    public void setMaterialCost(int materialCost) { this.materialCost = materialCost; }\n+    /**\n+     * @return ihe Item in the left input (leftmost) anvil slot.\n+     */\n+    public ItemStack getLeft()\n+    {\n+        return left;\n+    }\n+\n+    /**\n+     * @return The item in the right input (center) anvil slot.\n+     */\n+    public ItemStack getRight()\n+    {\n+        return right;\n+    }\n+\n+    /**\n+     * This is the name as sent by the client.  It may be null if none has been sent. <br>\n+     * If empty, it indicates the user wishes to clear the custom name from the item.\n+     * @return The name that the output item will be set to, if applicable.\n+     */\n+    @Nullable\n+    public String getName()\n+    {\n+        return name;\n+    }\n+\n+    /**\n+     * This is the output as a result of this event, not of the two items. <br>\n+     * If you are the first receiver of this event, it is guaranteed to be empty. <br>\n+     * It will only be non-empty if changed by an event handler.\n+     * @return The item in the output (rightmost) anvil slot.\n+     */\n+    public ItemStack getOutput() \n+    {\n+        return output;\n+    }\n+\n+    /**\n+     * Sets the output slot to a specific itemstack.\n+     * @param output The stack to change the output to.\n+     */\n+    public void setOutput(ItemStack output)\n+    {\n+        this.output = output;\n+    }\n+\n+    /**\n+     * This is the level cost of this anvil operation. <br> \n+     * When unchanged, it is guaranteed to be left.getRepairCost() + right.getRepairCost().\n+     * @return The level cost of this anvil operation.\n+     */\n+    public int getCost()\n+    {\n+        return cost;\n+    }\n+\n+    /**\n+     * Changes the level cost of this operation.\n+     * @param cost The new level cost.\n+     */\n+    public void setCost(int cost)\n+    {\n+        this.cost = cost;\n+    }\n+\n+    /**\n+     * The material cost is how many right inputs are consumed.\n+     * @return The material cost of this anvil operation.\n+     */\n+    public int getMaterialCost()\n+    {\n+        return materialCost;\n+    }\n+\n+    /**\n+     * Sets how many right inputs are consumed. <br>\n+     * A material cost of zero consumes the entire stack. <br>\n+     * A material cost higher than the count of the right stack\n+     * consumes the entire stack. <br>\n+     * It does not block the operation.", "originalCommit": "cf881613122c1a763ff19d392216b2c390e389aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY0MzU4NQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7442#discussion_r513643585", "bodyText": "Yeah that's vague.  The output being obtainable is not prevented by the right stack count being lower than the material cost.\nEssentially the material cost has no bearing on whether or not the output is available.", "author": "Shadows-of-Fire", "createdAt": "2020-10-28T17:45:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNjI3MA=="}], "type": "inlineReview"}, {"oid": "f74b1ba754e227a13a4a635913148c3611538081", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/f74b1ba754e227a13a4a635913148c3611538081", "message": "Update src/main/java/net/minecraftforge/event/AnvilUpdateEvent.java\n\nCo-authored-by: Take Weiland <diesieben07@gmail.com>", "committedDate": "2020-10-28T18:22:34Z", "type": "commit"}, {"oid": "154505e0d4feeb99952324e0a9232c5e25f4dfa8", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/154505e0d4feeb99952324e0a9232c5e25f4dfa8", "message": "fix formatting, typo, clarity", "committedDate": "2020-10-28T18:23:03Z", "type": "commit"}, {"oid": "6c115bfe04b8d130b236b5e38e4c661ae18a2b29", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/6c115bfe04b8d130b236b5e38e4c661ae18a2b29", "message": "Merge branch 'player-anvil-update' of https://github.com/Shadows-of-Fire/MinecraftForge into player-anvil-update", "committedDate": "2020-10-28T18:23:05Z", "type": "commit"}, {"oid": "8cbafb18b8657783e4ac88aed5b84820eb7eeb5b", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/8cbafb18b8657783e4ac88aed5b84820eb7eeb5b", "message": "Further update commments", "committedDate": "2020-10-28T18:26:05Z", "type": "commit"}, {"oid": "e6fdad43c4cca891c54ecc7b7e84b6db35e15749", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/e6fdad43c4cca891c54ecc7b7e84b6db35e15749", "message": "Remove duplicate code", "committedDate": "2020-11-10T19:41:28Z", "type": "commit"}]}