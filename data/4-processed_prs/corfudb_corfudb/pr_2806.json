{"pr_number": 2806, "pr_title": "CorfuStore: Queue API, Stream Tails, CorfuBrowser null pointer fix", "pr_createdAt": "2020-10-29T20:03:19Z", "pr_url": "https://github.com/CorfuDB/CorfuDB/pull/2806", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNjA1Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r514636057", "bodyText": "Print null instead of empty string?", "author": "WenbinZhu", "createdAt": "2020-10-30T00:07:12Z", "path": "corfudb-tools/src/main/java/org/corfudb/browser/CorfuStoreBrowser.java", "diffHunk": "@@ -143,9 +143,11 @@ public int printTable(String namespace, String tablename) {\n                     builder = new StringBuilder(\"\\nKey:\\n\")\n                             .append(JsonFormat.printer().print(entry.getKey().getKey()))\n                             .append(\"\\nPayload:\\n\")\n-                            .append(JsonFormat.printer().print(entry.getValue().getPayload()))\n+                            .append(entry.getValue() != null && entry.getValue().getPayload() != null ?\n+                                    JsonFormat.printer().print(entry.getValue().getPayload())   : \"\")", "originalCommit": "b6a8cffb8f1e5eeb14860e7c4b482393cd87a886", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMjQzOQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r515422439", "bodyText": "done. thanks", "author": "hisundar", "createdAt": "2020-10-30T23:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNjA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1ODg5Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r517558893", "bodyText": "Actually no, we can't print null. null does not get parsed in the same way as an empty string.\nWe will need this output of the browser to be read back in, and strings need to be printed as empty because that's how protobufs stores null strings", "author": "hisundar", "createdAt": "2020-11-04T18:49:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNjA1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNzg3OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r514637879", "bodyText": "Remove?", "author": "WenbinZhu", "createdAt": "2020-10-30T00:14:36Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java", "diffHunk": "@@ -240,6 +241,32 @@ TxnContext delete(@Nonnull Table<K, V, M> table,\n         return this;\n     }\n \n+    /*************************** Queue API ***************************************\n+     */\n+    /**\n+     * Enqueue a message object into the CorfuQueue.\n+     *\n+     * @param table Table object to perform the delete on.\n+     * @param record    Record to be inserted into the Queue.\n+     * @param <K>       Type of Key.\n+     * @param <V>       Type of Value.\n+     * @param <M>       Type of Metadata.\n+     * @return TxnContext instance.\n+     */\n+    @Nonnull\n+    public <K extends Message, V extends Message, M extends Message>\n+    Queue.CorfuQueueIdMsg enqueue(@Nonnull Table<K, V, M> table,\n+                                  @Nonnull final V record) {\n+        validateTableWrittenIsInNamespace(table);\n+        /*\n+        table.getMetrics().incNumDeletes();\n+        operations.add(() -> table.deleteRecord(key));\n+        return this;\n+\n+         */", "originalCommit": "b6a8cffb8f1e5eeb14860e7c4b482393cd87a886", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMjQ3MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r515422471", "bodyText": "done, thanks", "author": "hisundar", "createdAt": "2020-10-30T23:27:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNzg3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzODA0Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r514638046", "bodyText": "Remove?", "author": "WenbinZhu", "createdAt": "2020-10-30T00:15:08Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java", "diffHunk": "@@ -328,6 +355,25 @@ int count(@Nonnull final Table<K, V, M> table) {\n         return table.scanAndFilterByEntry(entryPredicate);\n     }\n \n+    /**\n+     * Return all the Queue entries ordered by their parent transaction.\n+     *\n+     * Note that the key in these entries would be the CorfuQueueIdMsg.\n+     *\n+     * @param table Table< K, V, M > object aka queue on which the scan must be done.\n+     * @return Collection of filtered entries.\n+     */\n+    public <K extends Message, V extends Message, M extends Message>\n+    List<CorfuStoreEntry<K, V, M>> entryList(@Nonnull final Table<K, V, M> table) {\n+        applyWritesForReadOnTable(table);\n+        /*\n+        table.getMetrics().incNumScans();\n+         */", "originalCommit": "b6a8cffb8f1e5eeb14860e7c4b482393cd87a886", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMjQ5MA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r515422490", "bodyText": "done, thanks", "author": "hisundar", "createdAt": "2020-10-30T23:27:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzODA0Ng=="}], "type": "inlineReview"}, {"oid": "15804de4b84c74881538e9edf5dc6b9294e48290", "url": "https://github.com/CorfuDB/CorfuDB/commit/15804de4b84c74881538e9edf5dc6b9294e48290", "message": "CorfuStore: Refactor to remove code duplication & let api change fast", "committedDate": "2020-10-31T06:03:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEyMDYwNA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r516120604", "bodyText": "This doesn't appear thrown? CorfuQueueIdMsg is just a Protobuf message.", "author": "zfrenette", "createdAt": "2020-11-02T17:04:03Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -117,6 +117,25 @@ public CorfuRecordId(byte[] from) throws InvalidProtocolBufferException {\n             this.entryId = to.getEntryId();\n         }\n \n+        /**\n+         * @param from - the CorfuQueueIdMsg protobuf to convert from\n+         * @throws InvalidProtocolBufferException - invalid set of bytes", "originalCommit": "15804de4b84c74881538e9edf5dc6b9294e48290", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5NjU2OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r516196569", "bodyText": "good catch - thanks removed it.", "author": "hisundar", "createdAt": "2020-11-02T19:11:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEyMDYwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE0NDkzMg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r516144932", "bodyText": "Can you use assertThat and isNotNull like you did in CorfuStoreShimTest:221?", "author": "zfrenette", "createdAt": "2020-11-02T17:37:22Z", "path": "test/src/test/java/org/corfudb/integration/CorfuStorePerfIT.java", "diffHunk": "@@ -108,9 +108,10 @@ private void addProtoToStore(CorfuRuntime rt, final int count) {\n         // Creating a transaction builder.\n         TxnContext tx = corfuStore.txn(nsxManager);\n         assert table != null;", "originalCommit": "15804de4b84c74881538e9edf5dc6b9294e48290", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5NjY0OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r516196648", "bodyText": "done. thanks", "author": "hisundar", "createdAt": "2020-11-02T19:11:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE0NDkzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE2NTgxMw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r516165813", "bodyText": "Should the return type here be K?", "author": "zfrenette", "createdAt": "2020-11-02T18:13:13Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java", "diffHunk": "@@ -240,6 +327,48 @@ TxnContext delete(@Nonnull Table<K, V, M> table,\n         return this;\n     }\n \n+    /**\n+     * Deletes the specified key on a table given its full name.\n+     *\n+     * @param tableName Table object to perform the delete on.\n+     * @param key       Key of the record to be deleted.\n+     * @param <K>       Type of Key.\n+     * @param <V>       Type of Value.\n+     * @param <M>       Type of Metadata.\n+     */\n+    public <K extends Message, V extends Message, M extends Message>\n+    void delete(@Nonnull String tableName,\n+                @Nonnull final K key) {\n+        this.delete(getTable(tableName), key);\n+    }\n+\n+    /*************************** Queue API ***************************************/\n+\n+    /**\n+     * Enqueue a message object into the CorfuQueue.\n+     *\n+     * @param table Table object to perform the delete on.\n+     * @param record    Record to be inserted into the Queue.\n+     * @param <K>       Type of Key.\n+     * @param <V>       Type of Value.\n+     * @param <M>       Type of Metadata.\n+     * @return TxnContext instance.", "originalCommit": "15804de4b84c74881538e9edf5dc6b9294e48290", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5Njk3MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r516196971", "bodyText": "done, thanks!", "author": "hisundar", "createdAt": "2020-11-02T19:11:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE2NTgxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE3MjA3Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r516172077", "bodyText": "Why is this done twice on table1?", "author": "zfrenette", "createdAt": "2020-11-02T18:24:30Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java", "diffHunk": "@@ -328,6 +513,144 @@ int count(@Nonnull final Table<K, V, M> table) {\n         return table.scanAndFilterByEntry(entryPredicate);\n     }\n \n+    /**\n+     * Scan and filter by entry.\n+     *\n+     * @param tableName table object to filter the entries on.\n+     * @param entryPredicate Predicate to filter the entries.\n+     * @return Collection of filtered entries.\n+     */\n+    public <K extends Message, V extends Message, M extends Message>\n+    List<CorfuStoreEntry<K, V, M>> executeQuery(@Nonnull final String tableName,\n+                                                @Nonnull final Predicate<CorfuStoreEntry<K, V, M>> entryPredicate) {\n+        return this.executeQuery(this.getTable(tableName), entryPredicate);\n+    }\n+\n+    /**\n+     * Execute a join of 2 tables.\n+     *\n+     * @param table1         First table in the join query.\n+     * @param table2         Second table to join with the first.\n+     * @param query1         Predicate to filter entries in table 1.\n+     * @param query2         Predicate to filter entries in table 2.\n+     * @param joinPredicate  Predicate to filter entries during the join.\n+     * @param joinFunction   Function to merge entries.\n+     * @param joinProjection Project the merged entries.\n+     * @param <V1>           Type of Value in table 1.\n+     * @param <V2>           Type of Value in table 2.\n+     * @param <T>            Type of resultant value after merging type V and type W.\n+     * @param <U>            Type of value projected from T.\n+     * @return Result of query.\n+     */\n+    @Nonnull\n+    public <K1 extends Message, K2 extends Message,\n+            V1 extends Message, V2 extends Message,\n+            M1 extends Message, M2 extends Message, T, U>\n+    QueryResult<U> executeJoinQuery(\n+            @Nonnull final Table<K1, V1, M1> table1,\n+            @Nonnull final Table<K2, V2, M2> table2,\n+            @Nonnull final Predicate<CorfuStoreEntry<K1, V1, M1>> query1,\n+            @Nonnull final Predicate<CorfuStoreEntry<K2, V2, M2>> query2,\n+            @Nonnull final BiPredicate<V1, V2> joinPredicate,\n+            @Nonnull final BiFunction<V1, V2, T> joinFunction,\n+            final Function<T, U> joinProjection) {\n+        return executeJoinQuery(table1, table2, query1, query2,\n+                DEFAULT_OPTIONS, DEFAULT_OPTIONS, joinPredicate,\n+                joinFunction, joinProjection);\n+    }\n+\n+    /**\n+     * Execute a join of 2 tables.\n+     *\n+     * @param table1         First table object.\n+     * @param table2         Second table to join with the first one.\n+     * @param query1         Predicate to filter entries in table 1.\n+     * @param query2         Predicate to filter entries in table 2.\n+     * @param queryOptions1  Query options to transform table 1 filtered values.\n+     * @param queryOptions2  Query options to transform table 2 filtered values.\n+     * @param joinPredicate  Predicate to filter entries during the join.\n+     * @param joinFunction   Function to merge entries.\n+     * @param joinProjection Project the merged entries.\n+     * @param <V1>           Type of Value in table 1.\n+     * @param <V2>           Type of Value in table 2.\n+     * @param <R>            Type of projected values from table 1 from type V.\n+     * @param <S>            Type of projected values from table 2 from type W.\n+     * @param <T>            Type of resultant value after merging type R and type S.\n+     * @param <U>            Type of value projected from T.\n+     * @return Result of query.\n+     */\n+    @Nonnull\n+    public <K1 extends Message, K2 extends Message,\n+            V1 extends Message, V2 extends Message,\n+            M1 extends Message, M2 extends Message,\n+            R, S, T, U>\n+    QueryResult<U> executeJoinQuery(\n+            @Nonnull final Table<K1, V1, M1> table1,\n+            @Nonnull final Table<K2, V2, M2> table2,\n+            @Nonnull final Predicate<CorfuStoreEntry<K1, V1, M1>> query1,\n+            @Nonnull final Predicate<CorfuStoreEntry<K2, V2, M2>> query2,\n+            @Nonnull final QueryOptions<K1, V1, M1, R> queryOptions1,\n+            @Nonnull final QueryOptions<K2, V2, M2, S> queryOptions2,\n+            @Nonnull final BiPredicate<R, S> joinPredicate,\n+            @Nonnull final BiFunction<R, S, T> joinFunction,\n+            final Function<T, U> joinProjection) {\n+        applyWritesForReadOnTable(table1);\n+        table1.getMetrics().incNumScans();\n+        applyWritesForReadOnTable(table1);\n+        table1.getMetrics().incNumScans();", "originalCommit": "15804de4b84c74881538e9edf5dc6b9294e48290", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5NzUwMA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r516197500", "bodyText": "good catch. fixed, thanks!", "author": "hisundar", "createdAt": "2020-11-02T19:13:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE3MjA3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM0MTc5NA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r516341794", "bodyText": "what does table options contain ?", "author": "medhavidhawan", "createdAt": "2020-11-02T23:51:24Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuStore.java", "diffHunk": "@@ -111,6 +114,32 @@ public Timestamp getTimestamp() {\n         return runtime.getTableRegistry().getTable(namespace, tableName);\n     }\n \n+    /**\n+     * Creates and registers a Queue backed by a Table.\n+     * A table needs to be registered before it is used.\n+     *\n+     * @param namespace    Namespace of the table.\n+     * @param queueName    Queue's table name.\n+     * @param vClass       Class of the Queue's record Model.\n+     * @param tableOptions Table options.", "originalCommit": "15804de4b84c74881538e9edf5dc6b9294e48290", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg0MjgwMA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r516842800", "bodyText": "Right now it only carries the path to disk based corfu location for the RocksDB instance. It isn't used for anything else currently.", "author": "hisundar", "createdAt": "2020-11-03T17:36:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM0MTc5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM0MjE4Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r516342187", "bodyText": "maybe r/CorfuRecordId/CorfuQueueId", "author": "medhavidhawan", "createdAt": "2020-11-02T23:52:05Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -117,6 +117,25 @@ public CorfuRecordId(byte[] from) throws InvalidProtocolBufferException {\n             this.entryId = to.getEntryId();\n         }\n \n+        /**\n+         * @param from - the CorfuQueueIdMsg protobuf to convert from\n+         * @throws InvalidProtocolBufferException - invalid set of bytes\n+         */\n+        public CorfuRecordId(CorfuQueueIdMsg from) {\n+            this.txSequence = from.getTxSequence();\n+            this.entryId = from.getEntryId();\n+        }\n+\n+        /**\n+         * @return - the protobuf representation of CorfuRecordId", "originalCommit": "15804de4b84c74881538e9edf5dc6b9294e48290", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg0NDAwMw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r516844003", "bodyText": "CorfuRecordId from CorfuQueue is consumed by higher layers and changing it would require a lot of changes in higher layer. CorfuQueueId is already the new name for the UFO based Queue api which is the way moving forward anyway right?", "author": "hisundar", "createdAt": "2020-11-03T17:38:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM0MjE4Nw=="}], "type": "inlineReview"}, {"oid": "af8043dd0d53a176f4a7511321f4c0727b575f11", "url": "https://github.com/CorfuDB/CorfuDB/commit/af8043dd0d53a176f4a7511321f4c0727b575f11", "message": "CorfuStoreShim: Provide a commitCallback with final protobufs after commit()", "committedDate": "2020-11-03T07:09:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4Nzk3OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r516487978", "bodyText": "Should this be inside the if (args.length > 0) {} ?", "author": "Lujie1996", "createdAt": "2020-11-03T08:20:08Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuStreamEntry.java", "diffHunk": "@@ -121,4 +121,44 @@ public CorfuStreamEntry(K key, V payload, M metadata, long epoch, long address,\n \n         return new CorfuStreamEntry<K, V, M>(key, payload, metadata, epoch, address, operationType);\n     }\n+\n+    /**\n+     *  Convert an SMREntry into a CorfuStreamEntry when the SMR arguments have clear types\n+     *  (like if called from a commit callback)\n+     * @param entry - the entry to convert from.\n+     * @param epoch - the epoch this entry was written to/will be written to.\n+     */\n+    public static\n+    CorfuStreamEntry fromSMREntry(@Nonnull SMREntry entry, final long epoch) {\n+\n+        long address = entry.getGlobalAddress();\n+\n+        OperationType operationType;\n+        switch(entry.getSMRMethod()) {\n+            case \"put\":\n+            case \"putAll\":\n+                operationType = OperationType.UPDATE;\n+                break;\n+            case \"clear\":\n+                operationType = OperationType.CLEAR;\n+                break;\n+            case \"remove\":\n+                operationType = OperationType.DELETE;\n+                break;\n+            default:\n+                throw new RuntimeException(\"SMRMethod \"+entry.getSMRMethod()\n+                        + \" cannot be translated to CorfuStreamEntry\");\n+        }\n+        Object[] args = entry.getSMRArguments();\n+        if (args.length > 0) {\n+            if (args.length > 1) {\n+                CorfuRecord record = (CorfuRecord) args[1];\n+                return new CorfuStreamEntry((Message)args[0],\n+                        record.getPayload(), record.getMetadata(), 0, address, operationType);\n+            }\n+        }\n+\n+        return new CorfuStreamEntry((Message)args[0],", "originalCommit": "af8043dd0d53a176f4a7511321f4c0727b575f11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg0NDIzNw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r516844237", "bodyText": "yes thanks!", "author": "hisundar", "createdAt": "2020-11-03T17:39:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4Nzk3OA=="}], "type": "inlineReview"}, {"oid": "8c2b30408cc05736bb79d7858a113278acfe60e9", "url": "https://github.com/CorfuDB/CorfuDB/commit/8c2b30408cc05736bb79d7858a113278acfe60e9", "message": "CorfuStore: Populate metadata even if null when metadata schema is given", "committedDate": "2020-11-04T01:46:15Z", "type": "forcePushed"}, {"oid": "b92dea815bba983e3059899f0c477015fe8ae0ec", "url": "https://github.com/CorfuDB/CorfuDB/commit/b92dea815bba983e3059899f0c477015fe8ae0ec", "message": "CorfuStore: Populate metadata even if null when metadata schema is given\n\n+Test case for the commitCallback", "committedDate": "2020-11-04T07:14:39Z", "type": "forcePushed"}, {"oid": "370a0443025495e21d5235b51567266380d60522", "url": "https://github.com/CorfuDB/CorfuDB/commit/370a0443025495e21d5235b51567266380d60522", "message": "CorfuStore: Populate metadata even if null when metadata schema is given\n\n+Test case for the commitCallback", "committedDate": "2020-11-04T20:09:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMzQ0Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r517623446", "bodyText": "nit - space before colon :", "author": "pankti-m", "createdAt": "2020-11-04T20:50:40Z", "path": "corfudb-tools/src/main/java/org/corfudb/browser/CorfuStoreBrowser.java", "diffHunk": "@@ -143,9 +144,11 @@ public int printTable(String namespace, String tablename) {\n                     builder = new StringBuilder(\"\\nKey:\\n\")\n                             .append(JsonFormat.printer().print(entry.getKey().getKey()))\n                             .append(\"\\nPayload:\\n\")\n-                            .append(JsonFormat.printer().print(entry.getValue().getPayload()))\n+                            .append(entry.getValue() != null && entry.getValue().getPayload() != null ?\n+                                    JsonFormat.printer().print(entry.getValue().getPayload())   : \"\")\n                             .append(\"\\nMetadata:\\n\")\n-                            .append(JsonFormat.printer().print(entry.getValue().getMetadata()))\n+                            .append(entry.getValue() != null && entry.getValue().getMetadata() != null ?\n+                                    JsonFormat.printer().print(entry.getValue().getMetadata()): \"\")", "originalCommit": "370a0443025495e21d5235b51567266380d60522", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMzk0Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r517623942", "bodyText": "any reason for changing this?", "author": "pankti-m", "createdAt": "2020-11-04T20:51:39Z", "path": "corfudb-tools/src/main/java/org/corfudb/browser/CorfuStoreBrowser.java", "diffHunk": "@@ -233,11 +236,11 @@ public int loadTable(String namespace, String tablename, int numItems, int batch\n             if (diskPath != null) {\n                 optionsBuilder.persistentDataPath(Paths.get(diskPath));\n             }\n-            final Table<TableName, TableName, TableName> table = store.openTable(\n+            final Table<TableName, TableName, CorfuStoreMetadata.Timestamp> table = store.openTable(\n                     namespace, tablename,\n                     TableName.class,\n                     TableName.class,\n-                    TableName.class,\n+                    CorfuStoreMetadata.Timestamp.class,", "originalCommit": "370a0443025495e21d5235b51567266380d60522", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyNzk2MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r517627961", "bodyText": "all get thrown for the same reason?", "author": "pankti-m", "createdAt": "2020-11-04T20:59:30Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuStore.java", "diffHunk": "@@ -111,6 +114,32 @@ public Timestamp getTimestamp() {\n         return runtime.getTableRegistry().getTable(namespace, tableName);\n     }\n \n+    /**\n+     * Creates and registers a Queue backed by a Table.\n+     * A table needs to be registered before it is used.\n+     *\n+     * @param namespace    Namespace of the table.\n+     * @param queueName    Queue's table name.\n+     * @param vClass       Class of the Queue's record Model.\n+     * @param tableOptions Table options.\n+     * @param <V>          Value type.\n+     * @return Table instance.\n+     * @throws NoSuchMethodException     Thrown if key/value class are not protobuf classes.\n+     * @throws InvocationTargetException Thrown if key/value class are not protobuf classes.\n+     * @throws IllegalAccessException    Thrown if key/value class are not protobuf classes.", "originalCommit": "370a0443025495e21d5235b51567266380d60522", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyODMyOQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r517628329", "bodyText": "nit - updated -> update", "author": "pankti-m", "createdAt": "2020-11-04T21:00:13Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuStore.java", "diffHunk": "@@ -183,6 +208,22 @@ public TxnContext txn(@Nonnull final String namespace, IsolationLevel isolationL\n                 isolationLevel);\n     }\n \n+    /**\n+     * Return the address of the latest updated made in this table.", "originalCommit": "370a0443025495e21d5235b51567266380d60522", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyODU5OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r517628598", "bodyText": "what is the use-case of this for an application?", "author": "pankti-m", "createdAt": "2020-11-04T21:00:48Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuStore.java", "diffHunk": "@@ -183,6 +208,22 @@ public TxnContext txn(@Nonnull final String namespace, IsolationLevel isolationL\n                 isolationLevel);\n     }\n \n+    /**\n+     * Return the address of the latest updated made in this table.\n+     *\n+     * @param namespace - namespace that this table belongs to.\n+     * @param tableName - table name of this table without the namespace prefixed in.\n+     * @return stream tail of this table.\n+     */\n+    public long getHighestSequence(@Nonnull final String namespace,", "originalCommit": "370a0443025495e21d5235b51567266380d60522", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2NTYyNw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r518365627", "bodyText": "its used for streaming clients to see till where they have already read and how much is left for them to read.\nThey cache the address they have read and this tells them if they need to re-index from a fresh snapshot or just get the delta.", "author": "hisundar", "createdAt": "2020-11-05T21:09:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyODU5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3MzU2Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r517673566", "bodyText": "can we have only 1 check - arg.length > 1", "author": "pankti-m", "createdAt": "2020-11-04T22:40:28Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuStreamEntry.java", "diffHunk": "@@ -121,4 +106,51 @@ public CorfuStreamEntry(K key, V payload, M metadata, long epoch, long address,\n \n         return new CorfuStreamEntry<K, V, M>(key, payload, metadata, epoch, address, operationType);\n     }\n+\n+    private static OperationType getOperationType(@Nonnull SMREntry entry) {\n+        OperationType operationType;\n+        switch (entry.getSMRMethod()) {\n+            case \"put\":\n+            case \"putAll\":\n+                operationType = OperationType.UPDATE;\n+                break;\n+            case \"clear\":\n+                operationType = OperationType.CLEAR;\n+                break;\n+            case \"remove\":\n+                operationType = OperationType.DELETE;\n+                break;\n+            default:\n+                throw new RuntimeException(\"SMRMethod \"+entry.getSMRMethod()\n+                        + \" cannot be translated to any known operation type\");\n+        }\n+        return operationType;\n+    }\n+\n+    /**\n+     *  Convert an SMREntry into a CorfuStreamEntry when the SMR arguments have clear types\n+     *  (like if called from a commit callback)\n+     * @param entry - the entry to convert from.\n+     * @param epoch - the epoch this entry was written to/will be written to.\n+     */\n+    public static\n+    CorfuStreamEntry fromSMREntry(@Nonnull SMREntry entry, final long epoch) {\n+\n+        long address = entry.getGlobalAddress();\n+\n+        OperationType operationType = getOperationType(entry);\n+        Object[] args = entry.getSMRArguments();\n+        if (args.length > 0) {", "originalCommit": "370a0443025495e21d5235b51567266380d60522", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2NzY3Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r518367677", "bodyText": "we have multiple types of SMR methods where args can be just 1 (delete) or 0 for (clear) right?", "author": "hisundar", "createdAt": "2020-11-05T21:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3MzU2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY4Mjk1MA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r517682950", "bodyText": "object -> name", "author": "pankti-m", "createdAt": "2020-11-04T23:04:06Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java", "diffHunk": "@@ -328,12 +455,150 @@ int count(@Nonnull final Table<K, V, M> table) {\n         return table.scanAndFilterByEntry(entryPredicate);\n     }\n \n+    /**\n+     * Scan and filter by entry.\n+     *\n+     * @param tableName table object to filter the entries on.", "originalCommit": "370a0443025495e21d5235b51567266380d60522", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2ODE1Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r518368156", "bodyText": "thanks! fixed", "author": "hisundar", "createdAt": "2020-11-05T21:14:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY4Mjk1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY4MzU5OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r517683598", "bodyText": "will this not implement auto-closeable anymore?", "author": "pankti-m", "createdAt": "2020-11-04T23:05:48Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContextShim.java", "diffHunk": "@@ -18,22 +28,19 @@\n  * Created by hisundar on 2020-09-16\n  */\n @Slf4j\n-public class TxnContextShim implements AutoCloseable {\n-    /**\n-     * Internal CorfuStore's txnContext\n-     */\n-    private TxnContext txnContext;\n+public class TxnContextShim extends TxnContext {", "originalCommit": "370a0443025495e21d5235b51567266380d60522", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM3MzA4OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r518373089", "bodyText": "Thanks! added the interface", "author": "hisundar", "createdAt": "2020-11-05T21:18:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY4MzU5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY5NDc4MA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r517694780", "bodyText": "wont the applications need significant corfu-internal understanding to process these entries?", "author": "pankti-m", "createdAt": "2020-11-04T23:38:09Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContextShim.java", "diffHunk": "@@ -175,196 +227,49 @@ TxnContextShim putRecord(@Nonnull Table<K, V, M> table,\n     }\n \n     /**\n-     * touch() a key to generate a conflict on it. The value will not be modified.\n-     *\n-     * @param table    Table object to perform the touch() in.\n-     * @param key      Key of the record.\n-     * @param <K>      Type of Key.\n-     * @param <V>      Type of Value.\n-     * @param <M>      Type of Metadata.\n-     * @return TxnContext instance.\n-     * @throws UnsupportedOperationException if attempted on a non-existing object.\n-     */\n-    @Nonnull\n-    public <K extends Message, V extends Message, M extends Message>\n-    TxnContextShim touch(@Nonnull Table<K, V, M> table,\n-                         @Nonnull final K key) {\n-        this.txnContext = txnContext.touch(table, key);\n-        return this;\n-    }\n-\n-    /**\n-     * touch() variant that accepts a table name instead of table object.\n-     */\n-    @Nonnull\n-    public <K extends Message, V extends Message, M extends Message>\n-    TxnContextShim touch(@Nonnull String tableName,\n-                         @Nonnull final K key) {\n-        return this.touch(txnContext.getTable(tableName), key);\n-    }\n-\n-    /**\n-     *\n-     * @param table - table object to test if record exists\n-     * @param key - key or identifier to test for existence.\n-     * @param <K> - type of the key\n-     * @param <V> - type of payload or value\n-     * @param <M> - type of metadata\n-     * @return true if record exists and false if record does not exist.\n+     * Protobuf objects are immutable. So any metadata modifications made here won't be\n+     * reflected back into the caller's in-memory object directly.\n+     * The caller is only really interested in the modified values of those transactions\n+     * that successfully commit.\n+     * To reflect metadata changes made here, we modify commit() to accept a callback\n+     * that carries all the final values of the changes made by this transaction.\n      */\n-    @Nonnull\n-    public <K extends Message, V extends Message, M extends Message>\n-    boolean isExists(@Nonnull Table<K, V, M> table, @Nonnull final K key) {\n-        CorfuStoreEntry<K, V, M> record = this.txnContext.getRecord(table, key);\n-        return record.getPayload() != null;\n+    public interface CommitCallback {\n+        /**\n+         * This callback returns a list of stream entries as opposed to CorfuStoreEntries\n+         * because if this transaction had operations like clear() then the CorfuStoreEntry\n+         * would just be empty.\n+         *\n+         * @param mutations - A group of all tables touched by this transaction along with\n+         *                    the updates made in each table.\n+         */\n+        void onCommit(Map<String, List<CorfuStreamEntry>> mutations);", "originalCommit": "370a0443025495e21d5235b51567266380d60522", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2OTYzOA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r518369638", "bodyText": "This is the same callback we have for stream entry processing, it really just has key, value and metadata, so no corfu internals are exposed.", "author": "hisundar", "createdAt": "2020-11-05T21:15:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY5NDc4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY5Njk3NA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r517696974", "bodyText": "is null schema allowed?", "author": "pankti-m", "createdAt": "2020-11-04T23:44:05Z", "path": "test/src/test/java/org/corfudb/integration/CorfuStoreBrowserIT.java", "diffHunk": "@@ -256,7 +256,7 @@ public void browserRegistryTableTest() throws\n                 tableName,\n                 SampleSchema.Uuid.class,\n                 SampleSchema.Uuid.class,\n-                SampleSchema.Uuid.class,\n+                null,", "originalCommit": "370a0443025495e21d5235b51567266380d60522", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM3MzU2OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r518373569", "bodyText": "that is an explicit ask, so I guess it has to be \ud83e\udd37", "author": "hisundar", "createdAt": "2020-11-05T21:19:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY5Njk3NA=="}], "type": "inlineReview"}, {"oid": "2bb0ec268cf7bc78b8ef854967b3a9fa1ea582f9", "url": "https://github.com/CorfuDB/CorfuDB/commit/2bb0ec268cf7bc78b8ef854967b3a9fa1ea582f9", "message": "CorfuStore: Make merge an explicit callback with table object passed in", "committedDate": "2020-11-05T21:05:59Z", "type": "forcePushed"}, {"oid": "b03f2f1b7d492de9f66883bbb3bbff97ecc99f2f", "url": "https://github.com/CorfuDB/CorfuDB/commit/b03f2f1b7d492de9f66883bbb3bbff97ecc99f2f", "message": "CorfuStore streaming redesign part 1 - interfaces.\n\nImplements backward compatible interfaces for CorfuStore streaming redesign.", "committedDate": "2020-11-06T01:04:57Z", "type": "forcePushed"}, {"oid": "0470fa00130c038d52062c0dd637d46b7abcb794", "url": "https://github.com/CorfuDB/CorfuDB/commit/0470fa00130c038d52062c0dd637d46b7abcb794", "message": "CorfuBrowser: Don't throw NullPointerException if metadata is null", "committedDate": "2020-11-07T03:52:07Z", "type": "commit"}, {"oid": "0a875119644845bef2c00adf39da24224d3e0362", "url": "https://github.com/CorfuDB/CorfuDB/commit/0a875119644845bef2c00adf39da24224d3e0362", "message": "CorfuStore: Move getHighestSequence() to CorfuStore from Table to avoid opening table", "committedDate": "2020-11-07T03:52:07Z", "type": "commit"}, {"oid": "a3b0979d3a2fdaa5c7ae1d71c0d4d728ba680d75", "url": "https://github.com/CorfuDB/CorfuDB/commit/a3b0979d3a2fdaa5c7ae1d71c0d4d728ba680d75", "message": "CorfuStore: Add support for join queries & predicates", "committedDate": "2020-11-07T03:52:07Z", "type": "commit"}, {"oid": "d249636cb299c6b4462a3b6aea286a6c20519592", "url": "https://github.com/CorfuDB/CorfuDB/commit/d249636cb299c6b4462a3b6aea286a6c20519592", "message": "CorfuStore: Add Queue Api enqueue() and entryList()", "committedDate": "2020-11-07T03:52:07Z", "type": "commit"}, {"oid": "96e4cbb985c24f6b364425ce9c053ffe04362f43", "url": "https://github.com/CorfuDB/CorfuDB/commit/96e4cbb985c24f6b364425ce9c053ffe04362f43", "message": "CorfuStore: Refactor to remove code duplication & let api change fast", "committedDate": "2020-11-07T03:52:07Z", "type": "commit"}, {"oid": "2d47aef5259897c0617b6d71629798e487d806a4", "url": "https://github.com/CorfuDB/CorfuDB/commit/2d47aef5259897c0617b6d71629798e487d806a4", "message": "CorfuStoreShim: Provide a commitCallback with final protobufs after commit()", "committedDate": "2020-11-07T03:52:07Z", "type": "commit"}, {"oid": "3b9bc19defb6e358e5bb49ebdba86cd3a620194f", "url": "https://github.com/CorfuDB/CorfuDB/commit/3b9bc19defb6e358e5bb49ebdba86cd3a620194f", "message": "CorfuStore: Populate metadata even if null when metadata schema is given\n\n+Test case for the commitCallback", "committedDate": "2020-11-07T03:52:07Z", "type": "commit"}, {"oid": "a0b6e28f96146e3ce6e12c4ddfb0a1379ea8ea74", "url": "https://github.com/CorfuDB/CorfuDB/commit/a0b6e28f96146e3ce6e12c4ddfb0a1379ea8ea74", "message": "CorfuStoreBrowser: listenOnTable to test Streaming latencies\n\nData can be loaded in one node and listened on another node.", "committedDate": "2020-11-07T03:52:07Z", "type": "commit"}, {"oid": "216d45b18a18d8a78cf6ce0087a2308939e84f72", "url": "https://github.com/CorfuDB/CorfuDB/commit/216d45b18a18d8a78cf6ce0087a2308939e84f72", "message": "CorfuStore: Make merge an explicit callback with table object passed in", "committedDate": "2020-11-07T03:52:07Z", "type": "commit"}, {"oid": "91ae555ed63cfbd20edd1b62bb17b7cd77867b19", "url": "https://github.com/CorfuDB/CorfuDB/commit/91ae555ed63cfbd20edd1b62bb17b7cd77867b19", "message": "CorfuStore: Make TxnContext constructor public", "committedDate": "2020-11-08T02:41:40Z", "type": "forcePushed"}, {"oid": "5f8eb941e9b1da6c5bc2b46eaf35ab75e4f83a89", "url": "https://github.com/CorfuDB/CorfuDB/commit/5f8eb941e9b1da6c5bc2b46eaf35ab75e4f83a89", "message": "CorfuStore: Make TxnContext constructor public\n\nFix up test so that it only uses proto from runtime\nThis allows us to port the same test into consumer", "committedDate": "2020-11-08T19:50:32Z", "type": "commit"}, {"oid": "5f8eb941e9b1da6c5bc2b46eaf35ab75e4f83a89", "url": "https://github.com/CorfuDB/CorfuDB/commit/5f8eb941e9b1da6c5bc2b46eaf35ab75e4f83a89", "message": "CorfuStore: Make TxnContext constructor public\n\nFix up test so that it only uses proto from runtime\nThis allows us to port the same test into consumer", "committedDate": "2020-11-08T19:50:32Z", "type": "forcePushed"}]}