{"pr_number": 2758, "pr_title": "Non-Transactional Access Trim Exception Handling", "pr_createdAt": "2020-09-04T06:30:25Z", "pr_url": "https://github.com/CorfuDB/CorfuDB/pull/2758", "timeline": [{"oid": "f8a4fd4c322fa412161dbbe0e62af9f170aae835", "url": "https://github.com/CorfuDB/CorfuDB/commit/f8a4fd4c322fa412161dbbe0e62af9f170aae835", "message": "Non-Transactional Access Trim Exception Handling\n\n   Handle sync of non-transactional access under lock even in the event\nof TrimmedExceptions, otherwise, thread interleaving may lead to inconsistent state.", "committedDate": "2020-09-04T06:33:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQxNzc1Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483417753", "bodyText": "You need a break here otherwise it will run 2 times on every access.", "author": "Maithem", "createdAt": "2020-09-04T06:39:35Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -184,31 +185,34 @@ public CorfuCompileProxy(CorfuRuntime rt, UUID streamID, Class<T> type, Object[]\n             }\n         }\n \n-        // Perform underlying access\n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            // Linearize this read against a timestamp\n-            final long timestamp = rt.getSequencerView()\n-                            .query(getStreamID());\n-            log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n+        // Linearize this read against a timestamp\n+        AtomicLong timestamp = new AtomicLong(rt.getSequencerView().query(getStreamID()));\n \n-            try {\n-                return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp\n-                                && !o.isOptimisticallyModifiedUnsafe(),\n-                        o -> o.syncObjectUnsafe(timestamp),\n-                        o -> accessMethod.access(o));\n-            } catch (TrimmedException te) {\n-                log.info(\"accessInner: Encountered trimmed address space \" +\n-                    \"while accessing version {} of stream {} on attempt {}\",\n-                    timestamp, getStreamID(), x);\n-                // We encountered a TRIM during sync, reset the object\n-                underlyingObject.update(o -> {\n-                    o.resetUnsafe();\n-                    return null;\n-                });\n-            }\n-        }\n+        log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n \n-        throw new TrimmedException();\n+        // Perform underlying access\n+        return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp.get()\n+                        && !o.isOptimisticallyModifiedUnsafe(),\n+                o -> {\n+                    for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n+                        try {\n+                            timestamp.set(rt.getSequencerView()\n+                                    .query(getStreamID()));\n+                            o.syncObjectUnsafe(timestamp.get());", "originalCommit": "f8a4fd4c322fa412161dbbe0e62af9f170aae835", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQxOTA5Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483419092", "bodyText": "Move this to the catch block otherwise you'll have two sequencer queries per access.", "author": "Maithem", "createdAt": "2020-09-04T06:42:57Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -184,31 +185,34 @@ public CorfuCompileProxy(CorfuRuntime rt, UUID streamID, Class<T> type, Object[]\n             }\n         }\n \n-        // Perform underlying access\n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            // Linearize this read against a timestamp\n-            final long timestamp = rt.getSequencerView()\n-                            .query(getStreamID());\n-            log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n+        // Linearize this read against a timestamp\n+        AtomicLong timestamp = new AtomicLong(rt.getSequencerView().query(getStreamID()));\n \n-            try {\n-                return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp\n-                                && !o.isOptimisticallyModifiedUnsafe(),\n-                        o -> o.syncObjectUnsafe(timestamp),\n-                        o -> accessMethod.access(o));\n-            } catch (TrimmedException te) {\n-                log.info(\"accessInner: Encountered trimmed address space \" +\n-                    \"while accessing version {} of stream {} on attempt {}\",\n-                    timestamp, getStreamID(), x);\n-                // We encountered a TRIM during sync, reset the object\n-                underlyingObject.update(o -> {\n-                    o.resetUnsafe();\n-                    return null;\n-                });\n-            }\n-        }\n+        log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n \n-        throw new TrimmedException();\n+        // Perform underlying access\n+        return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp.get()\n+                        && !o.isOptimisticallyModifiedUnsafe(),\n+                o -> {\n+                    for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n+                        try {\n+                            timestamp.set(rt.getSequencerView()", "originalCommit": "f8a4fd4c322fa412161dbbe0e62af9f170aae835", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQyNTM5Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483425392", "bodyText": "FYI: This is different than like 201. Essentelly each non-transactional access will produce 3 sequence calls.", "author": "Maithem", "createdAt": "2020-09-04T06:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQxOTA5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQyMzczOQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483423739", "bodyText": "Btw, getUpcallResultInner has the same problem. The reset in the catch block should be part of the update lambda to be executed under the same lock.", "author": "Maithem", "createdAt": "2020-09-04T06:54:26Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -184,31 +185,34 @@ public CorfuCompileProxy(CorfuRuntime rt, UUID streamID, Class<T> type, Object[]\n             }\n         }\n \n-        // Perform underlying access\n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            // Linearize this read against a timestamp\n-            final long timestamp = rt.getSequencerView()\n-                            .query(getStreamID());\n-            log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n+        // Linearize this read against a timestamp\n+        AtomicLong timestamp = new AtomicLong(rt.getSequencerView().query(getStreamID()));\n \n-            try {\n-                return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp\n-                                && !o.isOptimisticallyModifiedUnsafe(),\n-                        o -> o.syncObjectUnsafe(timestamp),\n-                        o -> accessMethod.access(o));\n-            } catch (TrimmedException te) {\n-                log.info(\"accessInner: Encountered trimmed address space \" +\n-                    \"while accessing version {} of stream {} on attempt {}\",\n-                    timestamp, getStreamID(), x);\n-                // We encountered a TRIM during sync, reset the object\n-                underlyingObject.update(o -> {\n-                    o.resetUnsafe();\n-                    return null;\n-                });\n-            }\n-        }\n+        log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n \n-        throw new TrimmedException();\n+        // Perform underlying access", "originalCommit": "f8a4fd4c322fa412161dbbe0e62af9f170aae835", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ0MDcwMA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483440700", "bodyText": "Good catch, changed it, please take a look.", "author": "annym", "createdAt": "2020-09-04T07:33:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQyMzczOQ=="}], "type": "inlineReview"}, {"oid": "e2f1d1bc6ad17be76b97d18407dff1a9275eb47e", "url": "https://github.com/CorfuDB/CorfuDB/commit/e2f1d1bc6ad17be76b97d18407dff1a9275eb47e", "message": "Non-Transactional Access Trim Exception Handling\n\n   Handle sync of non-transactional access under lock even in the event\nof TrimmedExceptions, otherwise, thread interleaving may lead to inconsistent state.", "committedDate": "2020-09-04T07:35:40Z", "type": "forcePushed"}, {"oid": "60fbf4cf56ceed9911d18b3ba2241582beea9aed", "url": "https://github.com/CorfuDB/CorfuDB/commit/60fbf4cf56ceed9911d18b3ba2241582beea9aed", "message": "Non-Transactional Access Trim Exception Handling\n\n   Handle sync of non-transactional access under lock even in the event\nof TrimmedExceptions, otherwise, thread interleaving may lead to inconsistent state.", "committedDate": "2020-09-04T07:45:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ1MjQyOQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483452429", "bodyText": "I think this line should be moved before the if check: for the last retry we also need to reset the object", "author": "WenbinZhu", "createdAt": "2020-09-04T07:56:51Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -184,31 +185,35 @@ public CorfuCompileProxy(CorfuRuntime rt, UUID streamID, Class<T> type, Object[]\n             }\n         }\n \n-        // Perform underlying access\n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            // Linearize this read against a timestamp\n-            final long timestamp = rt.getSequencerView()\n-                            .query(getStreamID());\n-            log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n+        // Linearize this read against a timestamp\n+        AtomicLong timestamp = new AtomicLong(rt.getSequencerView().query(getStreamID()));\n \n-            try {\n-                return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp\n-                                && !o.isOptimisticallyModifiedUnsafe(),\n-                        o -> o.syncObjectUnsafe(timestamp),\n-                        o -> accessMethod.access(o));\n-            } catch (TrimmedException te) {\n-                log.info(\"accessInner: Encountered trimmed address space \" +\n-                    \"while accessing version {} of stream {} on attempt {}\",\n-                    timestamp, getStreamID(), x);\n-                // We encountered a TRIM during sync, reset the object\n-                underlyingObject.update(o -> {\n-                    o.resetUnsafe();\n-                    return null;\n-                });\n-            }\n-        }\n+        log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n \n-        throw new TrimmedException();\n+        // Perform underlying access\n+        return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp.get()\n+                        && !o.isOptimisticallyModifiedUnsafe(),\n+                o -> {\n+                    for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n+                        try {\n+                            o.syncObjectUnsafe(timestamp.get());\n+                            break;\n+                        } catch (TrimmedException te) {\n+                            log.info(\"accessInner: Encountered trimmed address space \" +\n+                                            \"while accessing version {} of stream {} on attempt {}\",\n+                                    timestamp.get(), getStreamID(), x);\n+\n+                            if (x == (rt.getParameters().getTrimRetry() - 1)) {\n+                                throw te;\n+                            }\n+\n+                            o.resetUnsafe();", "originalCommit": "60fbf4cf56ceed9911d18b3ba2241582beea9aed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ1OTg4Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483459887", "bodyText": "Here reset should not be inside update() method, otherwise since StampedLock is not reentrant, this could be deadlock", "author": "WenbinZhu", "createdAt": "2020-09-04T08:11:20Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -280,39 +285,39 @@ private long logUpdateInner(String smrUpdateFunction, final boolean keepUpcallRe\n             return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n         }\n \n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            try {\n-                return underlyingObject.update(o -> {\n-                    o.syncObjectUnsafe(timestamp);\n-                    if (o.getUpcallResults().containsKey(timestamp)) {\n-                        log.trace(\"Upcall[{}] {} Sync'd\", this, timestamp);\n-                        R ret = (R) o.getUpcallResults().get(timestamp);\n-                        o.getUpcallResults().remove(timestamp);\n-                        return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n+        return underlyingObject.update(o -> {\n+                    for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n+                        try {\n+                            o.syncObjectUnsafe(timestamp);\n+                            if (o.getUpcallResults().containsKey(timestamp)) {\n+                                log.trace(\"Upcall[{}] {} Sync'd\", this, timestamp);\n+                                R ret = (R) o.getUpcallResults().get(timestamp);\n+                                o.getUpcallResults().remove(timestamp);\n+                                return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n+                            }\n+\n+                            // The version is already ahead, but we don't have the result.\n+                            // The only way to get the correct result\n+                            // of the upcall would be to rollback. For now, we throw an exception\n+                            // since this is generally not expected. --- and probably a bug if it happens.\n+                            throw new RuntimeException(\"Attempted to get the result \"\n+                                    + \"of an upcall@\" + timestamp + \" but we are @\"\n+                                    + underlyingObject.getVersionUnsafe()\n+                                    + \" and we don't have a copy\");\n+                        } catch (TrimmedException ex) {\n+                            log.info(\"getUpcallResultInner: Encountered trimmed address space \" +\n+                                            \"while accessing version {} of stream {} on attempt {}\",\n+                                    timestamp, getStreamID(), x);\n+                            // We encountered a TRIM during sync, reset the object\n+                            underlyingObject.update(obj -> {\n+                                obj.resetUnsafe();\n+                                return null;\n+                            });", "originalCommit": "60fbf4cf56ceed9911d18b3ba2241582beea9aed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5MDkzNw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483890937", "bodyText": "good catch, done.", "author": "annym", "createdAt": "2020-09-05T00:49:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ1OTg4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ2MjE2Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483462162", "bodyText": "Can you add this log line in transactional access as well? https://github.com/CorfuDB/CorfuDB/blob/master/runtime/src/main/java/org/corfudb/runtime/object/transactions/AbstractTransactionalContext.java#L217\nWe used to have a hard time debugging trimmed exception in transaction case,  as there is no log, I think this could be an opportunity to add the same log line in transactional access as well.", "author": "WenbinZhu", "createdAt": "2020-09-04T08:15:39Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -184,31 +185,35 @@ public CorfuCompileProxy(CorfuRuntime rt, UUID streamID, Class<T> type, Object[]\n             }\n         }\n \n-        // Perform underlying access\n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            // Linearize this read against a timestamp\n-            final long timestamp = rt.getSequencerView()\n-                            .query(getStreamID());\n-            log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n+        // Linearize this read against a timestamp\n+        AtomicLong timestamp = new AtomicLong(rt.getSequencerView().query(getStreamID()));\n \n-            try {\n-                return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp\n-                                && !o.isOptimisticallyModifiedUnsafe(),\n-                        o -> o.syncObjectUnsafe(timestamp),\n-                        o -> accessMethod.access(o));\n-            } catch (TrimmedException te) {\n-                log.info(\"accessInner: Encountered trimmed address space \" +\n-                    \"while accessing version {} of stream {} on attempt {}\",\n-                    timestamp, getStreamID(), x);\n-                // We encountered a TRIM during sync, reset the object\n-                underlyingObject.update(o -> {\n-                    o.resetUnsafe();\n-                    return null;\n-                });\n-            }\n-        }\n+        log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n \n-        throw new TrimmedException();\n+        // Perform underlying access\n+        return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp.get()\n+                        && !o.isOptimisticallyModifiedUnsafe(),\n+                o -> {\n+                    for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n+                        try {\n+                            o.syncObjectUnsafe(timestamp.get());\n+                            break;\n+                        } catch (TrimmedException te) {\n+                            log.info(\"accessInner: Encountered trimmed address space \" +", "originalCommit": "60fbf4cf56ceed9911d18b3ba2241582beea9aed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ3MjkzMw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483472933", "bodyText": "NIT: this can be in one line.", "author": "WenbinZhu", "createdAt": "2020-09-04T08:35:40Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -184,31 +185,35 @@ public CorfuCompileProxy(CorfuRuntime rt, UUID streamID, Class<T> type, Object[]\n             }\n         }\n \n-        // Perform underlying access\n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            // Linearize this read against a timestamp\n-            final long timestamp = rt.getSequencerView()\n-                            .query(getStreamID());\n-            log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n+        // Linearize this read against a timestamp\n+        AtomicLong timestamp = new AtomicLong(rt.getSequencerView().query(getStreamID()));\n \n-            try {\n-                return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp\n-                                && !o.isOptimisticallyModifiedUnsafe(),\n-                        o -> o.syncObjectUnsafe(timestamp),\n-                        o -> accessMethod.access(o));\n-            } catch (TrimmedException te) {\n-                log.info(\"accessInner: Encountered trimmed address space \" +\n-                    \"while accessing version {} of stream {} on attempt {}\",\n-                    timestamp, getStreamID(), x);\n-                // We encountered a TRIM during sync, reset the object\n-                underlyingObject.update(o -> {\n-                    o.resetUnsafe();\n-                    return null;\n-                });\n-            }\n-        }\n+        log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n \n-        throw new TrimmedException();\n+        // Perform underlying access\n+        return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp.get()\n+                        && !o.isOptimisticallyModifiedUnsafe(),\n+                o -> {\n+                    for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n+                        try {\n+                            o.syncObjectUnsafe(timestamp.get());\n+                            break;\n+                        } catch (TrimmedException te) {\n+                            log.info(\"accessInner: Encountered trimmed address space \" +\n+                                            \"while accessing version {} of stream {} on attempt {}\",\n+                                    timestamp.get(), getStreamID(), x);\n+\n+                            if (x == (rt.getParameters().getTrimRetry() - 1)) {\n+                                throw te;\n+                            }\n+\n+                            o.resetUnsafe();\n+                            timestamp.set(rt.getSequencerView()\n+                                    .query(getStreamID()));", "originalCommit": "60fbf4cf56ceed9911d18b3ba2241582beea9aed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ3MzI1Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483473257", "bodyText": "Maybe we should check the number of retries and throw ex in the catch block and remove this line (same as what we did in accessInner)", "author": "WenbinZhu", "createdAt": "2020-09-04T08:36:22Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -280,39 +285,39 @@ private long logUpdateInner(String smrUpdateFunction, final boolean keepUpcallRe\n             return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n         }\n \n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            try {\n-                return underlyingObject.update(o -> {\n-                    o.syncObjectUnsafe(timestamp);\n-                    if (o.getUpcallResults().containsKey(timestamp)) {\n-                        log.trace(\"Upcall[{}] {} Sync'd\", this, timestamp);\n-                        R ret = (R) o.getUpcallResults().get(timestamp);\n-                        o.getUpcallResults().remove(timestamp);\n-                        return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n+        return underlyingObject.update(o -> {\n+                    for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n+                        try {\n+                            o.syncObjectUnsafe(timestamp);\n+                            if (o.getUpcallResults().containsKey(timestamp)) {\n+                                log.trace(\"Upcall[{}] {} Sync'd\", this, timestamp);\n+                                R ret = (R) o.getUpcallResults().get(timestamp);\n+                                o.getUpcallResults().remove(timestamp);\n+                                return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n+                            }\n+\n+                            // The version is already ahead, but we don't have the result.\n+                            // The only way to get the correct result\n+                            // of the upcall would be to rollback. For now, we throw an exception\n+                            // since this is generally not expected. --- and probably a bug if it happens.\n+                            throw new RuntimeException(\"Attempted to get the result \"\n+                                    + \"of an upcall@\" + timestamp + \" but we are @\"\n+                                    + underlyingObject.getVersionUnsafe()\n+                                    + \" and we don't have a copy\");\n+                        } catch (TrimmedException ex) {\n+                            log.info(\"getUpcallResultInner: Encountered trimmed address space \" +\n+                                            \"while accessing version {} of stream {} on attempt {}\",\n+                                    timestamp, getStreamID(), x);\n+                            // We encountered a TRIM during sync, reset the object\n+                            underlyingObject.update(obj -> {\n+                                obj.resetUnsafe();\n+                                return null;\n+                            });\n+                        }\n                     }\n \n-                    // The version is already ahead, but we don't have the result.\n-                    // The only way to get the correct result\n-                    // of the upcall would be to rollback. For now, we throw an exception\n-                    // since this is generally not expected. --- and probably a bug if it happens.\n-                    throw new RuntimeException(\"Attempted to get the result \"\n-                            + \"of an upcall@\" + timestamp + \" but we are @\"\n-                            + underlyingObject.getVersionUnsafe()\n-                            + \" and we don't have a copy\");\n-                });\n-            } catch (TrimmedException ex) {\n-                log.info(\"getUpcallResultInner: Encountered trimmed address space \" +\n-                    \"while accessing version {} of stream {} on attempt {}\",\n-                    timestamp, getStreamID(), x);\n-                // We encountered a TRIM during sync, reset the object\n-                underlyingObject.update(o -> {\n-                    o.resetUnsafe();\n-                    return null;\n-                });\n-            }\n-        }\n-\n-        throw new TrimmedUpcallException(timestamp);\n+            throw new TrimmedUpcallException(timestamp);", "originalCommit": "60fbf4cf56ceed9911d18b3ba2241582beea9aed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5MTg3OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483891878", "bodyText": "For this last comment, this function  needs to return a value, so if I move it in. I still need to throw some exception from the outside or we'll get missing return statement. Other than that addressed all other comments.", "author": "annym", "createdAt": "2020-09-05T00:58:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ3MzI1Nw=="}], "type": "inlineReview"}, {"oid": "ab88fd109efcceeee670c8953fbceb09c6ad65a6", "url": "https://github.com/CorfuDB/CorfuDB/commit/ab88fd109efcceeee670c8953fbceb09c6ad65a6", "message": "Non-Transactional Access Trim Exception Handling\n\n   Handle sync of non-transactional access under lock even in the event\nof TrimmedExceptions, otherwise, thread interleaving may lead to inconsistent state.", "committedDate": "2020-09-05T01:08:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5MzA3MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483893071", "bodyText": "nit - indentation", "author": "pankti-m", "createdAt": "2020-09-05T01:09:52Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -280,39 +285,36 @@ private long logUpdateInner(String smrUpdateFunction, final boolean keepUpcallRe\n             return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n         }\n \n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            try {\n-                return underlyingObject.update(o -> {\n-                    o.syncObjectUnsafe(timestamp);\n-                    if (o.getUpcallResults().containsKey(timestamp)) {\n-                        log.trace(\"Upcall[{}] {} Sync'd\", this, timestamp);\n-                        R ret = (R) o.getUpcallResults().get(timestamp);\n-                        o.getUpcallResults().remove(timestamp);\n-                        return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n+        return underlyingObject.update(o -> {\n+                    for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n+                        try {\n+                            o.syncObjectUnsafe(timestamp);\n+                            if (o.getUpcallResults().containsKey(timestamp)) {\n+                                log.trace(\"Upcall[{}] {} Sync'd\", this, timestamp);\n+                                R ret = (R) o.getUpcallResults().get(timestamp);\n+                                o.getUpcallResults().remove(timestamp);\n+                                return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n+                            }\n+\n+                            // The version is already ahead, but we don't have the result.\n+                            // The only way to get the correct result\n+                            // of the upcall would be to rollback. For now, we throw an exception\n+                            // since this is generally not expected. --- and probably a bug if it happens.\n+                            throw new RuntimeException(\"Attempted to get the result \"\n+                                    + \"of an upcall@\" + timestamp + \" but we are @\"\n+                                    + underlyingObject.getVersionUnsafe()\n+                                    + \" and we don't have a copy\");\n+                        } catch (TrimmedException ex) {\n+                            log.info(\"getUpcallResultInner: Encountered trimmed address space \" +\n+                                            \"while accessing version {} of stream {} on attempt {}\",\n+                                    timestamp, getStreamID(), x);\n+                            // We encountered a TRIM during sync, reset the object\n+                            o.resetUnsafe();\n+                        }\n                     }\n \n-                    // The version is already ahead, but we don't have the result.\n-                    // The only way to get the correct result\n-                    // of the upcall would be to rollback. For now, we throw an exception\n-                    // since this is generally not expected. --- and probably a bug if it happens.\n-                    throw new RuntimeException(\"Attempted to get the result \"\n-                            + \"of an upcall@\" + timestamp + \" but we are @\"\n-                            + underlyingObject.getVersionUnsafe()\n-                            + \" and we don't have a copy\");\n-                });\n-            } catch (TrimmedException ex) {\n-                log.info(\"getUpcallResultInner: Encountered trimmed address space \" +\n-                    \"while accessing version {} of stream {} on attempt {}\",\n-                    timestamp, getStreamID(), x);\n-                // We encountered a TRIM during sync, reset the object\n-                underlyingObject.update(o -> {\n-                    o.resetUnsafe();\n-                    return null;\n-                });\n-            }\n-        }\n-\n-        throw new TrimmedUpcallException(timestamp);\n+            throw new TrimmedUpcallException(timestamp);", "originalCommit": "ab88fd109efcceeee670c8953fbceb09c6ad65a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5MzY4OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483893688", "bodyText": "nit - extra ws", "author": "pankti-m", "createdAt": "2020-09-05T01:15:51Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java", "diffHunk": "@@ -453,7 +453,7 @@ public void setUncommittedChanges(WriteSetSMRStream optimisticStream) {\n      *\n      * @return Returns the pointer position to the object in the stream.\n      */\n-    public long getVersionUnsafe() {\n+    public long  getVersionUnsafe() {", "originalCommit": "ab88fd109efcceeee670c8953fbceb09c6ad65a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5NDI3Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483894273", "bodyText": "why do we need to set the timestamp here?  Is it expected to change after it was obtained in line 189?", "author": "pankti-m", "createdAt": "2020-09-05T01:21:55Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -184,31 +185,35 @@ public CorfuCompileProxy(CorfuRuntime rt, UUID streamID, Class<T> type, Object[]\n             }\n         }\n \n-        // Perform underlying access\n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            // Linearize this read against a timestamp\n-            final long timestamp = rt.getSequencerView()\n-                            .query(getStreamID());\n-            log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n+        // Linearize this read against a timestamp\n+        AtomicLong timestamp = new AtomicLong(rt.getSequencerView().query(getStreamID()));\n \n-            try {\n-                return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp\n-                                && !o.isOptimisticallyModifiedUnsafe(),\n-                        o -> o.syncObjectUnsafe(timestamp),\n-                        o -> accessMethod.access(o));\n-            } catch (TrimmedException te) {\n-                log.info(\"accessInner: Encountered trimmed address space \" +\n-                    \"while accessing version {} of stream {} on attempt {}\",\n-                    timestamp, getStreamID(), x);\n-                // We encountered a TRIM during sync, reset the object\n-                underlyingObject.update(o -> {\n-                    o.resetUnsafe();\n-                    return null;\n-                });\n-            }\n-        }\n+        log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n \n-        throw new TrimmedException();\n+        // Perform underlying access\n+        return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp.get()\n+                        && !o.isOptimisticallyModifiedUnsafe(),\n+                o -> {\n+                    for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n+                        try {\n+                            o.syncObjectUnsafe(timestamp.get());\n+                            break;\n+                        } catch (TrimmedException te) {\n+                            log.info(\"accessInner: Encountered trimmed address space \" +\n+                                            \"while accessing version {} of stream {} on attempt {}\",\n+                                    timestamp.get(), getStreamID(), x);\n+\n+                            o.resetUnsafe();\n+\n+                            if (x == (rt.getParameters().getTrimRetry() - 1)) {\n+                                throw te;\n+                            }\n+\n+                            timestamp.set(rt.getSequencerView().query(getStreamID()));", "originalCommit": "ab88fd109efcceeee670c8953fbceb09c6ad65a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5NTk2OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483895969", "bodyText": "exactly, the state of the log might have changed and you want to provide the latest state.", "author": "annym", "createdAt": "2020-09-05T01:39:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5NDI3Mw=="}], "type": "inlineReview"}, {"oid": "dc0fadc1dbba31c095654ca3ba6cd7ee34801723", "url": "https://github.com/CorfuDB/CorfuDB/commit/dc0fadc1dbba31c095654ca3ba6cd7ee34801723", "message": "Non-Transactional Access Trim Exception Handling\n\n   Handle sync of non-transactional access under lock even in the event\nof TrimmedExceptions, otherwise, thread interleaving may lead to inconsistent state.", "committedDate": "2020-09-05T01:39:52Z", "type": "commit"}, {"oid": "dc0fadc1dbba31c095654ca3ba6cd7ee34801723", "url": "https://github.com/CorfuDB/CorfuDB/commit/dc0fadc1dbba31c095654ca3ba6cd7ee34801723", "message": "Non-Transactional Access Trim Exception Handling\n\n   Handle sync of non-transactional access under lock even in the event\nof TrimmedExceptions, otherwise, thread interleaving may lead to inconsistent state.", "committedDate": "2020-09-05T01:39:52Z", "type": "forcePushed"}]}