{"pr_number": 2825, "pr_title": "Server side corfu metrics", "pr_createdAt": "2020-11-12T04:36:48Z", "pr_url": "https://github.com/CorfuDB/CorfuDB/pull/2825", "timeline": [{"oid": "ee45ca813e2c97d3410f6754905ae183be31cb00", "url": "https://github.com/CorfuDB/CorfuDB/commit/ee45ca813e2c97d3410f6754905ae183be31cb00", "message": "Server side metrics", "committedDate": "2020-11-12T20:11:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQwOTQyMg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r522409422", "bodyText": "private?", "author": "xnull", "createdAt": "2020-11-12T20:34:23Z", "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/MeterRegistryProvider.java", "diffHunk": "@@ -41,6 +62,22 @@ public static synchronized void init(Logger logger, Duration loggingInterval,\n             init(loggingInterval, localEndpoint, influxLineProtocolLoggingSink);\n         }\n \n+        /**\n+         * Configure the meter registry of type LoggingMeterRegistry. All the metrics registered\n+         * with this meter registry will be exported in the InfluxDB line protocol format\n+         * (https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/)\n+         * with  the provided loggingInterval frequency.\n+         * @param logger A configured logger.\n+         * @param loggingInterval A duration between log appends for every metric.\n+         */\n+        public static synchronized void init(Logger logger, Duration loggingInterval) {", "originalCommit": "ee45ca813e2c97d3410f6754905ae183be31cb00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMTA2MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r530721061", "bodyText": "Needs to be public to initialize it.", "author": "PavelZaytsev", "createdAt": "2020-11-26T01:22:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQwOTQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQxMTY3Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r522411673", "bodyText": "looks like we don't need another future here, it's enough just stop the timer", "author": "xnull", "createdAt": "2020-11-12T20:38:34Z", "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/MicroMeterUtils.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.corfudb.common.metrics.micrometer;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Timer;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+public class MicroMeterUtils {\n+\n+    private MicroMeterUtils() {\n+\n+    }\n+\n+    public static <T> CompletableFuture<T> timeWhenCompletes(CompletableFuture<T> future,\n+                                                             Optional<Timer.Sample> maybeSample,\n+                                                             String timerName, String... tags) {\n+        if (timerName.isEmpty() || tags.length % 2 != 0) {\n+            throw new IllegalArgumentException(\"Name of the registered timer should be present and\" +\n+                    \" the number of tags should be even.\");\n+        }\n+        Optional<MeterRegistry> maybeRegistry = MeterRegistryProvider.getInstance();\n+        if (maybeRegistry.isPresent() && maybeSample.isPresent()) {\n+            MeterRegistry meterRegistry = maybeRegistry.get();\n+            Timer.Sample sample = maybeSample.get();\n+            CompletableFuture<T> cf = new CompletableFuture<>();\n+            future.whenComplete((res, ex) -> {\n+                sample.stop(meterRegistry.timer(timerName, tags));\n+                if (ex != null) {", "originalCommit": "ee45ca813e2c97d3410f6754905ae183be31cb00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMTMwMg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r530721302", "bodyText": "Here I need to stop the timer no matter what and return the original result or the exception. I did not find another way of doing it.", "author": "PavelZaytsev", "createdAt": "2020-11-26T01:23:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQxMTY3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ3MDc1Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r522470756", "bodyText": "let's throw LogUnitException", "author": "xnull", "createdAt": "2020-11-12T22:25:09Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/BatchProcessor.java", "diffHunk": "@@ -125,7 +156,20 @@ private void processor() {\n                     lastOp = null;\n                 } else if (currOp == BatchWriterOperation.SHUTDOWN) {\n                     log.warn(\"Shutting down the write processor\");\n-                    streamLog.sync(true);\n+                    Runnable fsyncRunnable = () -> {\n+                        try {\n+                            streamLog.sync(true);\n+                        } catch (IOException e) {\n+                            throw new RuntimeException(e);", "originalCommit": "0e1ca86b2c19f415f1435c52e13fecc6c911fde7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ3MTk0OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r522471949", "bodyText": "Let's get rid of code duplication by method extraction\nprivate void yay(Runnable fsyncRunnable, Optional<Timer> fsyncTimer) {\n        if (fsyncTimer.isPresent()) {\n            fsyncTimer.get().record(fsyncRunnable);\n        } else {\n            fsyncRunnable.run();\n        }\n    }", "author": "xnull", "createdAt": "2020-11-12T22:27:48Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/BatchProcessor.java", "diffHunk": "@@ -154,11 +198,24 @@ private void processor() {\n                                 break;\n                             case WRITE:\n                                 WriteRequest write = (WriteRequest) currOp.getMsg().getPayload();\n-                                streamLog.append(write.getGlobalAddress(), (LogData) write.getData());\n+                                Runnable append =\n+                                        () -> streamLog.append(write.getGlobalAddress(), (LogData) write.getData());\n+                                if (writeRecordTimer.isPresent()) {\n+                                    writeRecordTimer.get().record(append);\n+                                }\n+                                else {\n+                                    append.run();\n+                                }\n                                 break;\n                             case RANGE_WRITE:\n                                 RangeWriteMsg writeRange = (RangeWriteMsg) currOp.getMsg().getPayload();\n-                                streamLog.append(writeRange.getEntries());\n+                                Runnable appendMultiple = () -> streamLog.append(writeRange.getEntries());", "originalCommit": "0e1ca86b2c19f415f1435c52e13fecc6c911fde7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMTgwNw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r530721807", "bodyText": "Sounds good", "author": "PavelZaytsev", "createdAt": "2020-11-26T01:25:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ3MTk0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ3MjE0OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r522472148", "bodyText": "don't need DURATION suffix", "author": "xnull", "createdAt": "2020-11-12T22:28:16Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/CorfuServer.java", "diffHunk": "@@ -191,6 +193,9 @@\n     // Error code required to detect an ungraceful shutdown.\n     private static final int EXIT_ERROR_CODE = 100;\n \n+    private static final String DEFAULT_METRICS_LOGGER_NAME = \"CorfuMetrics\";\n+\n+    private static final Duration DEFAULT_METRICS_LOGGING_INTERVAL_DURATION = Duration.ofSeconds(1);", "originalCommit": "0e1ca86b2c19f415f1435c52e13fecc6c911fde7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMjQyMA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r530722420", "bodyText": "Done", "author": "PavelZaytsev", "createdAt": "2020-11-26T01:28:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ3MjE0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ3NzU3OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r522477579", "bodyText": "please rename \"a\" to something else", "author": "xnull", "createdAt": "2020-11-12T22:39:57Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/SequencerServerCache.java", "diffHunk": "@@ -83,9 +87,12 @@ public SequencerServerCache(int cacheSize, long maxConflictNewSequencer) {\n         this.cacheSize = cacheSize;\n         conflictKeys = new HashMap();\n         cacheEntries = new PriorityQueue(cacheSize, Comparator.comparingLong\n-                (a -> ((ConflictTxStream)a).txVersion));\n+                (a -> ((ConflictTxStream) a).txVersion));", "originalCommit": "0e1ca86b2c19f415f1435c52e13fecc6c911fde7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMjMxNg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r530722316", "bodyText": "done", "author": "PavelZaytsev", "createdAt": "2020-11-26T01:27:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ3NzU3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4MTc0MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r522481741", "bodyText": "It seems to me this method is the same as CompletableFuture.allOf(...)", "author": "xnull", "createdAt": "2020-11-12T22:49:23Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/log/statetransfer/transferprocessor/ParallelTransferProcessor.java", "diffHunk": "@@ -65,7 +70,14 @@ public ParallelTransferProcessor(StateTransferBatchProcessor stateTransferBatchP\n                             }\n                         });\n \n-        allFutures = CFUtils.allOfOrTerminateExceptionally(allFutures, batchTransferResult);\n+        CompletableFuture<Void> future = MicroMeterUtils\n+                .timeWhenCompletes(\n+                        batchTransferResult,\n+                        sample,\n+                        \"state-transfer.timer\", \"type\", \"committed\"\n+                );\n+\n+        allFutures = CFUtils.allOfOrTerminateExceptionally(allFutures, future);", "originalCommit": "0e1ca86b2c19f415f1435c52e13fecc6c911fde7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMTk4Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r530721987", "bodyText": "allOf finishes when all the futures finish, here we need to quit once one of the futures terminate exceptionally.", "author": "PavelZaytsev", "createdAt": "2020-11-26T01:26:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4MTc0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4NDc4OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r522484788", "bodyText": "It seems to me you can get rid of some boilerplate code if you add a \"timer\" method into MetricRegistryProvider\npublic static void timer(String timerName, String tag, String tag2) {\n        getInstance()\n                .ifPresent(registry -> registry.timer(timerName, tag, tag2));\n    }\n\nthen you can use it:\nMeterRegistryProvider.timer(\"failure-detector.ping-latency\", \"node\", node);", "author": "xnull", "createdAt": "2020-11-12T22:53:27Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/management/FailureDetector.java", "diffHunk": "@@ -99,6 +103,10 @@ public PollReport poll(\n         );\n     }\n \n+    private void registerTimerForNodeIfNeeded(String node) {\n+        MeterRegistryProvider.getInstance().ifPresent(registry -> registry.timer(\"failure-detector.ping-latency\", \"node\", node));", "originalCommit": "0e1ca86b2c19f415f1435c52e13fecc6c911fde7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNDEwMQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r530724101", "bodyText": "Done", "author": "PavelZaytsev", "createdAt": "2020-11-26T01:34:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4NDc4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4NTkxNw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r522485917", "bodyText": "final?", "author": "xnull", "createdAt": "2020-11-12T22:54:54Z", "path": "runtime/src/main/java/org/corfudb/runtime/CorfuRuntime.java", "diffHunk": "@@ -242,6 +254,8 @@ public static CorfuRuntimeParametersBuilder builder() {\n          */\n         private MetricRegistry metricRegistry;\n \n+        private MicroMeterRuntimeConfig microMeterRuntimeConfig;", "originalCommit": "0e1ca86b2c19f415f1435c52e13fecc6c911fde7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNDI0OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r530724248", "bodyText": "done", "author": "PavelZaytsev", "createdAt": "2020-11-26T01:35:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4NTkxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4ODE0MA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r522488140", "bodyText": "please rename \"l\"", "author": "xnull", "createdAt": "2020-11-12T22:57:54Z", "path": "runtime/src/main/java/org/corfudb/runtime/view/AddressSpaceView.java", "diffHunk": "@@ -185,57 +205,69 @@ private void validateStateOfWrittenEntry(long address, @Nonnull ILogData ld) {\n      * @throws WrongEpochException If the token epoch is invalid.\n      */\n     public void write(@Nonnull IToken token, @Nonnull Object data, @Nonnull CacheOption cacheOption) {\n-        ILogData ld;\n-        if (data instanceof ILogData) {\n-            ld = (ILogData) data;\n-        } else {\n-            ld = new LogData(DataType.DATA, data, runtime.getParameters().getCodecType());\n-        }\n \n-        layoutHelper(e -> {\n-            Layout l = e.getLayout();\n-            // Check if the token issued is in the same\n-            // epoch as the layout we are about to write\n-            // to.\n-            if (token.getEpoch() != l.getEpoch()) {\n-                throw new StaleTokenException(l.getEpoch());\n+        Runnable writeRunnable = () -> {\n+            ILogData ld;\n+            if (data instanceof ILogData) {\n+                ld = (ILogData) data;\n+            } else {\n+                ld = new LogData(DataType.DATA, data, runtime.getParameters().getCodecType());\n             }\n \n-            // Set the data to use the token\n-            ld.useToken(token);\n-            ld.setId(runtime.getParameters().getClientId());\n+            logSizeDist.ifPresent(dist -> dist.record(ld.getSizeEstimate()));\n+            layoutHelper(e -> {\n+                Layout l = e.getLayout();", "originalCommit": "0e1ca86b2c19f415f1435c52e13fecc6c911fde7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNDY1Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r530724657", "bodyText": "done", "author": "PavelZaytsev", "createdAt": "2020-11-26T01:36:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4ODE0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4OTAwMw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r522489003", "bodyText": "please use logger", "author": "xnull", "createdAt": "2020-11-12T22:59:10Z", "path": "test/src/test/java/org/corfudb/integration/AbstractIT.java", "diffHunk": "@@ -511,19 +525,38 @@ public String getOptionsString() {\n          */\n         public Process runServer() throws IOException {\n             final String serverConsoleLogPath = CORFU_LOG_PATH + File.separator + host + \"_\" + port + \"_consolelog\";\n-\n+            System.out.println(serverConsoleLogPath);", "originalCommit": "0e1ca86b2c19f415f1435c52e13fecc6c911fde7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNDc3MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r530724771", "bodyText": "Was removed", "author": "PavelZaytsev", "createdAt": "2020-11-26T01:37:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4OTAwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0NTMxMg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r523245312", "bodyText": "Can you add tests?\nThe regex is not correct. The timer outputs a decimal for throughout and not an integer.\nThe following test will fail\n@Test\n    public void timerTest() {\n        String dataPoint = \"rpc-latency{endpoint=localhost:9000} throughput=3.4/s mean=0.000204964s max=0.001044081s\";\n        TimerInfluxLineTransformer txn = new TimerInfluxLineTransformer();\n        assertThat(txn.test(dataPoint)).isTrue();\n    }\nYou can fix it with\nprotected static final String TIMER_PATTERN_STRING =\n            METRIC_PATTERN_STRING + \" (throughput=[\\\\d.]+/s mean=[\\\\d.]+s max=[\\\\d.]+s)$\";", "author": "Maithem", "createdAt": "2020-11-13T21:37:02Z", "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/protocoltransformer/influx/TimerInfluxLineTransformer.java", "diffHunk": "@@ -23,6 +23,6 @@\n     public boolean test(String s) {\n         Matcher matcher = timerPattern.matcher(s);\n         this.matched = Optional.of(matcher);\n-        return matcher.find();\n+        return matcher.matches();", "originalCommit": "1d8eceac61d0a9491a645d7551b9e9dc40df0401", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNDgxNg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r530724816", "bodyText": "Was fixed", "author": "PavelZaytsev", "createdAt": "2020-11-26T01:37:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0NTMxMg=="}], "type": "inlineReview"}, {"oid": "8fe00dcbfcfd3d0981fbe90ada57a20fd33d2dda", "url": "https://github.com/CorfuDB/CorfuDB/commit/8fe00dcbfcfd3d0981fbe90ada57a20fd33d2dda", "message": "Server side corfu metrics", "committedDate": "2020-11-13T21:58:25Z", "type": "forcePushed"}, {"oid": "f23076f9888b46ea414077a59f26d7ec5064977f", "url": "https://github.com/CorfuDB/CorfuDB/commit/f23076f9888b46ea414077a59f26d7ec5064977f", "message": "Server side corfu metrics", "committedDate": "2020-11-13T22:03:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQyMTM5Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r526421393", "bodyText": "This is not the fsync latency, but rather the fsync time of all dirty segments. Based on the current batch + segment size at most it the sum of fsyncing two files.", "author": "Maithem", "createdAt": "2020-11-18T21:08:17Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/BatchProcessor.java", "diffHunk": "@@ -105,7 +123,20 @@ private void processor() {\n \n                     if (currOp == null || processed == BATCH_SIZE\n                             || currOp == BatchWriterOperation.SHUTDOWN) {\n-                        streamLog.sync(sync);\n+                        Runnable fsyncRunnable = () -> {\n+                            try {\n+                                streamLog.sync(sync);\n+                            } catch (IOException e) {\n+                                throw new RuntimeException(e);\n+                            }\n+                        };\n+                        if (fsyncTimer.isPresent()) {\n+                            fsyncTimer.get().record(fsyncRunnable);", "originalCommit": "364f6559264c15e506158e68309a831a93be6dfd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNDg0Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r530724847", "bodyText": "Fixed", "author": "PavelZaytsev", "createdAt": "2020-11-26T01:37:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQyMTM5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQyMjM1MA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r526422350", "bodyText": "Having a histogram on the batch size/queue size can help answer questions about queuing delay.", "author": "Maithem", "createdAt": "2020-11-18T21:10:07Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/BatchProcessor.java", "diffHunk": "@@ -70,6 +78,16 @@ public BatchProcessor(StreamLog streamLog, long sealEpoch, boolean sync) {\n         this.streamLog = streamLog;\n         operationsQueue = new LinkedBlockingQueue<>();\n         processorService.submit(this::processor);\n+\n+        writeRecordTimer = MeterRegistryProvider.getInstance().map(registry ->", "originalCommit": "364f6559264c15e506158e68309a831a93be6dfd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNDg5MA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r530724890", "bodyText": "Added", "author": "PavelZaytsev", "createdAt": "2020-11-26T01:37:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQyMjM1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQyMzAyOA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r526423028", "bodyText": "This is a really short period given that most of the metrics collected are aggregates.", "author": "Maithem", "createdAt": "2020-11-18T21:11:25Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/CorfuServer.java", "diffHunk": "@@ -191,6 +193,9 @@\n     // Error code required to detect an ungraceful shutdown.\n     private static final int EXIT_ERROR_CODE = 100;\n \n+    private static final String DEFAULT_METRICS_LOGGER_NAME = \"CorfuMetrics\";\n+\n+    private static final Duration DEFAULT_METRICS_LOGGING_INTERVAL_DURATION = Duration.ofSeconds(1);", "originalCommit": "364f6559264c15e506158e68309a831a93be6dfd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNTAwNw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r530725007", "bodyText": "This was for debugging. Increased to a minute.", "author": "PavelZaytsev", "createdAt": "2020-11-26T01:37:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQyMzAyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQyNDAwNg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r526424006", "bodyText": "Can you also capture stats on the hit ratio, load time and total weight.", "author": "Maithem", "createdAt": "2020-11-18T21:13:12Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServerCache.java", "diffHunk": "@@ -32,13 +38,21 @@\n     //Empirical threshold of number of streams in a logdata beyond which server performance may be slow\n     private final int MAX_STREAM_THRESHOLD = 20;\n \n+    private final Optional<Timer> readTimer;", "originalCommit": "364f6559264c15e506158e68309a831a93be6dfd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNTA3MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r530725071", "bodyText": "Added", "author": "PavelZaytsev", "createdAt": "2020-11-26T01:38:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQyNDAwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQyNDUxOQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r526424519", "bodyText": "Can you also capture histogram of the number of queues per transaction.", "author": "Maithem", "createdAt": "2020-11-18T21:14:06Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/SequencerServer.java", "diffHunk": "@@ -155,7 +160,8 @@ public SequencerServer(ServerContext serverContext) {\n \n         globalLogTail = Address.getMinAddress();\n         this.cache = new SequencerServerCache(config.getCacheSize(), globalLogTail - 1);\n-        setUpTimerNameCache();\n+        this.txResolutionTimer = MeterRegistryProvider.getInstance().map(registry ->", "originalCommit": "364f6559264c15e506158e68309a831a93be6dfd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNTExMA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r530725110", "bodyText": "Added", "author": "PavelZaytsev", "createdAt": "2020-11-26T01:38:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQyNDUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQyNTE4MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r526425181", "bodyText": "We need to capture stats on the window size and number of evictions per trim call.", "author": "Maithem", "createdAt": "2020-11-18T21:15:13Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/SequencerServerCache.java", "diffHunk": "@@ -81,11 +84,17 @@\n      */\n     public SequencerServerCache(int cacheSize, long maxConflictNewSequencer) {\n         this.cacheSize = cacheSize;\n-        conflictKeys = new HashMap();\n+\n         cacheEntries = new PriorityQueue(cacheSize, Comparator.comparingLong\n-                (a -> ((ConflictTxStream)a).txVersion));\n+                (a -> ((ConflictTxStream) a).txVersion));\n         maxConflictWildcard = maxConflictNewSequencer;\n         this.maxConflictNewSequencer = maxConflictNewSequencer;\n+        conflictKeys = MeterRegistryProvider\n+                .getInstance()\n+                .map(registry ->\n+                        registry.gauge(conflictKeysCounterName, Collections.emptyList(),\n+                                new HashMap<ConflictTxStream, Long>(), HashMap::size))\n+                .orElse(new HashMap<>());", "originalCommit": "364f6559264c15e506158e68309a831a93be6dfd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNTEzOA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r530725138", "bodyText": "Added", "author": "PavelZaytsev", "createdAt": "2020-11-26T01:38:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQyNTE4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQyNjI3NA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r526426274", "bodyText": "Can you just enable this by default and add the logging information in infrastructure/src/main/resources/logback.prod.xml", "author": "Maithem", "createdAt": "2020-11-18T21:17:05Z", "path": "scripts/corfu_server.sh", "diffHunk": "@@ -35,9 +35,13 @@ then\n     CLASSPATH=`cygpath -wp \"$CLASSPATH\"`\n fi\n \n+if [ \"$METRICS_CONFIG_FILE\" != \"\" ]; then\n+  LOGBACK_CONFIGURATION=\"-Dlogback.configurationFile=${METRICS_CONFIG_FILE}\"\n+  JAVA=\"$JAVA $LOGBACK_CONFIGURATION\"\n+fi", "originalCommit": "364f6559264c15e506158e68309a831a93be6dfd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNjQ0Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2825#discussion_r530726446", "bodyText": "This was done in order to supply the running processes in the integration tests with an XML file. It's mostly for debugging/viewing metrics in the integration tests. I will enable the metrics in the logback.prod.xml though.", "author": "PavelZaytsev", "createdAt": "2020-11-26T01:43:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQyNjI3NA=="}], "type": "inlineReview"}, {"oid": "e7e99eb7019d5083c73873dd665c21def6eb1cd9", "url": "https://github.com/CorfuDB/CorfuDB/commit/e7e99eb7019d5083c73873dd665c21def6eb1cd9", "message": "SS corfu metrics", "committedDate": "2020-11-25T21:38:04Z", "type": "forcePushed"}, {"oid": "0eb43836c2c656f59b568499f13c5eafa0218f08", "url": "https://github.com/CorfuDB/CorfuDB/commit/0eb43836c2c656f59b568499f13c5eafa0218f08", "message": "SS corfu metrics", "committedDate": "2020-11-25T21:39:52Z", "type": "forcePushed"}, {"oid": "57f4895571c6d5e048310c7769a47e4148909363", "url": "https://github.com/CorfuDB/CorfuDB/commit/57f4895571c6d5e048310c7769a47e4148909363", "message": "Introduce server side metrics", "committedDate": "2020-11-30T19:58:54Z", "type": "commit"}, {"oid": "57f4895571c6d5e048310c7769a47e4148909363", "url": "https://github.com/CorfuDB/CorfuDB/commit/57f4895571c6d5e048310c7769a47e4148909363", "message": "Introduce server side metrics", "committedDate": "2020-11-30T19:58:54Z", "type": "forcePushed"}]}