{"pr_number": 2786, "pr_title": "Resume Snapshot Sync Apply on Restart", "pr_createdAt": "2020-10-10T00:35:17Z", "pr_url": "https://github.com/CorfuDB/CorfuDB/pull/2786", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMjE1OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2786#discussion_r502722158", "bodyText": "Writing a test to validate this scenario.", "author": "annym", "createdAt": "2020-10-10T00:35:44Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "diffHunk": "@@ -512,6 +519,20 @@ public void shutdown() {\n         this.applyExecutor.shutdownNow();\n     }\n \n+    /**\n+     * Resume Snapshot Sync Apply\n+     *\n+     * In the event of restarts, a Snapshot Sync which had finished transfer can resume the apply stage.\n+     */\n+    public void resumeSnapshotApply() {\n+        // Construct Log Replication Entry message used to complete the Snapshot Sync with info in the metadata manager", "originalCommit": "cfd943317c739e40a5779c0d79f66ed2348b75d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0OTIzOA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2786#discussion_r502749238", "bodyText": "Is there a race condition here? These two methods are not atomic. Should we use getAndSet()?", "author": "zhangn49", "createdAt": "2020-10-10T05:29:41Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "diffHunk": "@@ -422,8 +425,11 @@ private void processSnapshotMessage(LogReplicationEntry entry) {\n         }\n     }\n \n-    private void startSnapshotApplyAsync(LogReplicationEntry entry) {\n-        applyExecutor.submit(() -> startSnapshotApply(entry));\n+    private synchronized void startSnapshotApplyAsync(LogReplicationEntry entry) {\n+        if (!ongoingApply.get()) {\n+            ongoingApply.set(true);", "originalCommit": "cfd943317c739e40a5779c0d79f66ed2348b75d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3MzM0NQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2786#discussion_r503473345", "bodyText": "+1", "author": "pankti-m", "createdAt": "2020-10-12T18:47:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0OTIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0NjI0Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2786#discussion_r503646243", "bodyText": "We can't use getAndSet cause we only want to set given the output of the get... But you're right we could have a race condition with the startSnapshotApply so I've synchronized that method as well!", "author": "annym", "createdAt": "2020-10-13T03:29:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0OTIzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0OTQwOA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2786#discussion_r502749408", "bodyText": "Need some log here", "author": "zhangn49", "createdAt": "2020-10-10T05:31:27Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "diffHunk": "@@ -512,6 +519,20 @@ public void shutdown() {\n         this.applyExecutor.shutdownNow();\n     }\n \n+    /**\n+     * Resume Snapshot Sync Apply\n+     *\n+     * In the event of restarts, a Snapshot Sync which had finished transfer can resume the apply stage.\n+     */\n+    public void resumeSnapshotApply() {", "originalCommit": "cfd943317c739e40a5779c0d79f66ed2348b75d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3NDE3Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2786#discussion_r503474172", "bodyText": "+1", "author": "pankti-m", "createdAt": "2020-10-12T18:49:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0OTQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0NjI4Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2786#discussion_r503646282", "bodyText": "Done!", "author": "annym", "createdAt": "2020-10-13T03:29:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0OTQwOA=="}], "type": "inlineReview"}, {"oid": "94d2d7ff241dfffead9655cbe8c3a3af62414a09", "url": "https://github.com/CorfuDB/CorfuDB/commit/94d2d7ff241dfffead9655cbe8c3a3af62414a09", "message": "Resume Snapshot Sync Apply on Restart", "committedDate": "2020-10-13T04:24:35Z", "type": "forcePushed"}, {"oid": "cb1fe91fd824fcc3c315f726b84d76a0d93c403a", "url": "https://github.com/CorfuDB/CorfuDB/commit/cb1fe91fd824fcc3c315f726b84d76a0d93c403a", "message": "Resume Snapshot Sync Apply on Restart", "committedDate": "2020-10-13T04:47:33Z", "type": "forcePushed"}, {"oid": "3334f31b4ad9b2b0dbcfb8f4cd894c8f6f93003d", "url": "https://github.com/CorfuDB/CorfuDB/commit/3334f31b4ad9b2b0dbcfb8f4cd894c8f6f93003d", "message": "Resume Snapshot Sync Apply on Restart", "committedDate": "2020-10-13T09:05:25Z", "type": "forcePushed"}, {"oid": "4925495d7080aa8fb283f2dc0c4e35d8d36e0b07", "url": "https://github.com/CorfuDB/CorfuDB/commit/4925495d7080aa8fb283f2dc0c4e35d8d36e0b07", "message": "Resume Snapshot Sync Apply on Restart", "committedDate": "2020-10-13T09:32:53Z", "type": "forcePushed"}, {"oid": "b761dfdbb623757633044755f2761d4ca70a3ba7", "url": "https://github.com/CorfuDB/CorfuDB/commit/b761dfdbb623757633044755f2761d4ca70a3ba7", "message": "Resume Snapshot Sync Apply on Restart", "committedDate": "2020-10-14T04:40:20Z", "type": "forcePushed"}, {"oid": "c68fe4391a1bc10c931dfdba0e70596cfc5958c0", "url": "https://github.com/CorfuDB/CorfuDB/commit/c68fe4391a1bc10c931dfdba0e70596cfc5958c0", "message": "Resume Snapshot Sync Apply on Restart", "committedDate": "2020-10-14T04:45:20Z", "type": "commit"}, {"oid": "c68fe4391a1bc10c931dfdba0e70596cfc5958c0", "url": "https://github.com/CorfuDB/CorfuDB/commit/c68fe4391a1bc10c931dfdba0e70596cfc5958c0", "message": "Resume Snapshot Sync Apply on Restart", "committedDate": "2020-10-14T04:45:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5ODA1Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2786#discussion_r504898056", "bodyText": "looks like this is being used for UFO, can we rename it accordingly so that it doesnt confuse with the existing cpAndTrim() variant?", "author": "pankti-m", "createdAt": "2020-10-14T18:48:46Z", "path": "test/src/test/java/org/corfudb/integration/LogReplicationAbstractIT.java", "diffHunk": "@@ -339,6 +457,99 @@ public void checkpointAndTrim(boolean active, List<CorfuTable> tables) {\n         checkpointAndTrimCorfuStore(cpRuntime, trimMark);\n     }\n \n+    public void verifyDataOnStandby(int expectedConsecutiveWrites) {\n+        for(Map.Entry<String, Table<Sample.StringKey, Sample.IntValue, Sample.Metadata>> entry : mapNameToMapStandby.entrySet()) {\n+\n+            log.debug(\"Verify Data on Standby's Table {}\", entry.getKey());\n+\n+            // Wait until data is fully replicated\n+            while (entry.getValue().count() != expectedConsecutiveWrites) {\n+                // Block until expected number of entries is reached\n+            }\n+\n+            log.debug(\"Number updates on Standby Map {} :: {} \", entry.getKey(), expectedConsecutiveWrites);\n+\n+            // Verify data is present in Standby Site\n+            assertThat(entry.getValue().count()).isEqualTo(expectedConsecutiveWrites);\n+\n+            for (int i = 0; i < (expectedConsecutiveWrites); i++) {\n+                assertThat(entry.getValue().get(Sample.StringKey.newBuilder().setKey(String.valueOf(i)).build()).getPayload()).isNotNull();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checkpoint and Trim Data Logs\n+     *\n+     * @param active true, checkpoint/trim on active cluster\n+     *               false, checkpoint/trim on standby cluster\n+     */\n+    public void checkpointAndTrim(boolean active) {", "originalCommit": "c68fe4391a1bc10c931dfdba0e70596cfc5958c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5ODE3MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2786#discussion_r504898171", "bodyText": "private?", "author": "pankti-m", "createdAt": "2020-10-14T18:49:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5ODA1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5ODI3OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2786#discussion_r504898278", "bodyText": "private?", "author": "pankti-m", "createdAt": "2020-10-14T18:49:11Z", "path": "test/src/test/java/org/corfudb/integration/LogReplicationAbstractIT.java", "diffHunk": "@@ -339,6 +457,99 @@ public void checkpointAndTrim(boolean active, List<CorfuTable> tables) {\n         checkpointAndTrimCorfuStore(cpRuntime, trimMark);\n     }\n \n+    public void verifyDataOnStandby(int expectedConsecutiveWrites) {\n+        for(Map.Entry<String, Table<Sample.StringKey, Sample.IntValue, Sample.Metadata>> entry : mapNameToMapStandby.entrySet()) {\n+\n+            log.debug(\"Verify Data on Standby's Table {}\", entry.getKey());\n+\n+            // Wait until data is fully replicated\n+            while (entry.getValue().count() != expectedConsecutiveWrites) {\n+                // Block until expected number of entries is reached\n+            }\n+\n+            log.debug(\"Number updates on Standby Map {} :: {} \", entry.getKey(), expectedConsecutiveWrites);\n+\n+            // Verify data is present in Standby Site\n+            assertThat(entry.getValue().count()).isEqualTo(expectedConsecutiveWrites);\n+\n+            for (int i = 0; i < (expectedConsecutiveWrites); i++) {\n+                assertThat(entry.getValue().get(Sample.StringKey.newBuilder().setKey(String.valueOf(i)).build()).getPayload()).isNotNull();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checkpoint and Trim Data Logs\n+     *\n+     * @param active true, checkpoint/trim on active cluster\n+     *               false, checkpoint/trim on standby cluster\n+     */\n+    public void checkpointAndTrim(boolean active) {\n+        CorfuRuntime cpRuntime;\n+\n+        if (active) {\n+            cpRuntime = new CorfuRuntime(activeEndpoint).connect();\n+        } else {\n+            cpRuntime = new CorfuRuntime(standbyEndpoint).connect();\n+        }\n+\n+        checkpointAndTrimCorfuStore(cpRuntime);\n+    }\n+\n+    public void checkpointAndTrimCorfuStore(CorfuRuntime cpRuntime) {", "originalCommit": "c68fe4391a1bc10c931dfdba0e70596cfc5958c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5ODQyOA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2786#discussion_r504898428", "bodyText": "private?", "author": "pankti-m", "createdAt": "2020-10-14T18:49:26Z", "path": "test/src/test/java/org/corfudb/integration/LogReplicationAbstractIT.java", "diffHunk": "@@ -390,4 +601,30 @@ public void checkpointAndTrimCorfuStore(CorfuRuntime cpRuntime, Token trimMark)\n         cpRuntime.getAddressSpaceView().invalidateServerCaches();\n         cpRuntime.getAddressSpaceView().gc();\n     }\n+\n+    /**\n+     * Return the first map on active cluster (typical for cases where the number of map is set to 1)\n+     * @return first map on active cluster\n+     */\n+    public Table<Sample.StringKey, Sample.IntValue, Sample.Metadata> getActiveMap() {", "originalCommit": "c68fe4391a1bc10c931dfdba0e70596cfc5958c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}