{"pr_number": 2804, "pr_title": "CorfuStore streaming redesign part 1 - interfaces.", "pr_createdAt": "2020-10-29T01:09:48Z", "pr_url": "https://github.com/CorfuDB/CorfuDB/pull/2804", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1MjE0NA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2804#discussion_r513852144", "bodyText": "Codacy found an issue: Use explicit scoping instead of the default package private level", "author": "corfudb-bot", "createdAt": "2020-10-29T01:14:14Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuStore.java", "diffHunk": "@@ -201,24 +202,46 @@ public Query query(@Nonnull final String namespace) {\n     /**\n      * Subscribe to a specific a table in a namespace or the entire namespace.\n      * Objects returned will honor transactional boundaries\n-     * @param streamListener - callback context.\n-     * @param namespace - the CorfuStore namespace to subscribe to.\n-     * @param tablesOfInterest - If specified, only updates from these tables will be returned.\n-     * @param timestamp - If specified, all stream updates from this timestamp will be returned\n-     *                  - if null, only future updates will be returned.\n+     *\n+     * @param streamListener   callback context\n+     * @param namespace        the CorfuStore namespace to subscribe to\n+     * @param tablesOfInterest only updates from these tables of interest will be returned\n+     * @param timestamp        if specified, all stream updates from this timestamp will be returned\n+     *                         if null, only future updates will be returned\n      */\n+    @Deprecated\n     public <K extends Message, V extends Message, M extends Message>\n     void subscribe(@Nonnull StreamListener streamListener, @Nonnull String namespace,\n                    @Nonnull List<TableSchema<K, V, M>> tablesOfInterest,\n                    @Nullable Timestamp timestamp) {\n         runtime.getTableRegistry().getStreamManager()\n                 .subscribe(streamListener, namespace, tablesOfInterest,\n-                (timestamp == null) ? getTimestamp().getSequence() : timestamp.getSequence());\n+                        (timestamp == null) ? getTimestamp().getSequence() : timestamp.getSequence());\n+    }\n+\n+    /**\n+     * Subscribe to a specific a table in a namespace or the entire namespace.\n+     * Objects returned will honor transactional boundaries\n+     *\n+     * @param streamListener   callback context\n+     * @param namespace        the CorfuStore namespace to subscribe to\n+     * @param streamTag        only updates of tables with the stream tag will be polled\n+     * @param tablesOfInterest only updates from these tables of interest will be returned\n+     * @param timestamp        if specified, all stream updates from this timestamp will be returned\n+     *                         if null, only future updates will be returned\n+     */\n+    void subscribe(@Nonnull StreamListener streamListener, @Nonnull String namespace,", "originalCommit": "15b00756ba11d45e7d4812289864d623d3837a46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUyMDAxMQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2804#discussion_r514520011", "bodyText": "typo: Subscribe to a specific table in a namespace or all tables in the namespace", "author": "hisundar", "createdAt": "2020-10-29T19:43:32Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuStore.java", "diffHunk": "@@ -201,24 +202,46 @@ public Query query(@Nonnull final String namespace) {\n     /**\n      * Subscribe to a specific a table in a namespace or the entire namespace.\n      * Objects returned will honor transactional boundaries\n-     * @param streamListener - callback context.\n-     * @param namespace - the CorfuStore namespace to subscribe to.\n-     * @param tablesOfInterest - If specified, only updates from these tables will be returned.\n-     * @param timestamp - If specified, all stream updates from this timestamp will be returned\n-     *                  - if null, only future updates will be returned.\n+     *\n+     * @param streamListener   callback context\n+     * @param namespace        the CorfuStore namespace to subscribe to\n+     * @param tablesOfInterest only updates from these tables of interest will be returned\n+     * @param timestamp        if specified, all stream updates from this timestamp will be returned\n+     *                         if null, only future updates will be returned\n      */\n+    @Deprecated\n     public <K extends Message, V extends Message, M extends Message>\n     void subscribe(@Nonnull StreamListener streamListener, @Nonnull String namespace,\n                    @Nonnull List<TableSchema<K, V, M>> tablesOfInterest,\n                    @Nullable Timestamp timestamp) {\n         runtime.getTableRegistry().getStreamManager()\n                 .subscribe(streamListener, namespace, tablesOfInterest,\n-                (timestamp == null) ? getTimestamp().getSequence() : timestamp.getSequence());\n+                        (timestamp == null) ? getTimestamp().getSequence() : timestamp.getSequence());\n+    }\n+\n+    /**\n+     * Subscribe to a specific a table in a namespace or the entire namespace.", "originalCommit": "15b00756ba11d45e7d4812289864d623d3837a46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3NjY3OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2804#discussion_r514576679", "bodyText": "Done.", "author": "WenbinZhu", "createdAt": "2020-10-29T21:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUyMDAxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUyMDI3Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2804#discussion_r514520273", "bodyText": "existing typo: Subscribe to a specific table in a namespace or to all tables in a namespace", "author": "hisundar", "createdAt": "2020-10-29T19:44:04Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuStore.java", "diffHunk": "@@ -201,24 +202,46 @@ public Query query(@Nonnull final String namespace) {\n     /**\n      * Subscribe to a specific a table in a namespace or the entire namespace.", "originalCommit": "15b00756ba11d45e7d4812289864d623d3837a46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3NjczNQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2804#discussion_r514576735", "bodyText": "Done.", "author": "WenbinZhu", "createdAt": "2020-10-29T21:24:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUyMDI3Mw=="}], "type": "inlineReview"}, {"oid": "1f47ce020e219c442c5895109839492865df6e37", "url": "https://github.com/CorfuDB/CorfuDB/commit/1f47ce020e219c442c5895109839492865df6e37", "message": "CorfuStore streaming redesign part 1 - interfaces.\n\nImplements backward compatible interfaces for CorfuStore streaming redeisgn.", "committedDate": "2020-10-29T21:24:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxMjc2OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2804#discussion_r514612769", "bodyText": "If a table has not been opened, this would be null and line 145 would hit a null pointer exception right?\nDo you want to throw an exception instead?", "author": "hisundar", "createdAt": "2020-10-29T22:53:30Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/StreamManager.java", "diffHunk": "@@ -123,6 +123,33 @@ void subscribe(@Nonnull StreamListener streamListener, @Nonnull String namespace\n         subscriptions.put(streamListener, new StreamSubscriber(task, scheduledFuture));\n     }\n \n+    /**\n+     * Subscribe to updates.\n+     *\n+     * @param streamListener   client listener\n+     * @param namespace        namespace of interest\n+     * @param streamTag        only updates of tables with the stream tag will be polled\n+     * @param tablesOfInterest only updates from these tables will be returned\n+     * @param startAddress     address to start the notifications from\n+     */\n+    public synchronized <K extends Message, V extends Message, M extends Message>\n+    void subscribe(@Nonnull StreamListener streamListener, @Nonnull String namespace,\n+                   @Nonnull String streamTag, @Nonnull List<String> tablesOfInterest,\n+                   long startAddress) {\n+        // The table should be opened full schema before subscription.\n+        TableRegistry registry = runtime.getTableRegistry();\n+        List<TableSchema<K, V, M>> tableSchemas = tablesOfInterest\n+                .stream()\n+                .map(tName -> {\n+                    Table<K, V, M> table = registry.getTable(namespace, tName);", "originalCommit": "1f47ce020e219c442c5895109839492865df6e37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMzA0NQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2804#discussion_r514633045", "bodyText": "@hisundar If table is not opened, getTable() will throw NoSuchElementException or IllegalArgumentException", "author": "WenbinZhu", "createdAt": "2020-10-29T23:56:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxMjc2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDc2MjEwMg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2804#discussion_r514762102", "bodyText": "Right, so can we just mention that in the java doc of this method?", "author": "hisundar", "createdAt": "2020-10-30T03:11:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxMjc2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxMjg5OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2804#discussion_r514612898", "bodyText": "Can one of these tests still carry the old subscribe() api since some verticals may still need to use the old form without actually depending on the tables being opened?", "author": "hisundar", "createdAt": "2020-10-29T22:53:50Z", "path": "test/src/test/java/org/corfudb/integration/StreamingIT.java", "diffHunk": "@@ -142,8 +144,7 @@ public void testStreamingSingleTable() throws Exception {\n \n         // Subscribe to streaming updates from the table.\n         StreamListenerImpl s1n1t1 = new StreamListenerImpl(\"s1n1t1\");\n-        store.subscribe(s1n1t1, \"n1\",\n-                Collections.singletonList(new TableSchema(\"t1\", Uuid.class, Uuid.class, Uuid.class)), ts1);\n+        store.subscribe(s1n1t1, \"n1\", defaultStreamTag, Collections.singletonList(\"t1\"), ts1);", "originalCommit": "1f47ce020e219c442c5895109839492865df6e37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNTQ3OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2804#discussion_r514635479", "bodyText": "I expanded the last testcase to use both old and new subscribe api.", "author": "WenbinZhu", "createdAt": "2020-10-30T00:05:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxMjg5OA=="}], "type": "inlineReview"}, {"oid": "da4891d3975df9e6b7b75fbabd66f8fd16f3f793", "url": "https://github.com/CorfuDB/CorfuDB/commit/da4891d3975df9e6b7b75fbabd66f8fd16f3f793", "message": "CorfuStore streaming redesign part 1 - interfaces.\n\nImplements backward compatible interfaces for CorfuStore streaming redeisgn.", "committedDate": "2020-10-30T00:04:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg1ODU5MA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2804#discussion_r514858590", "bodyText": "why not pass TableSchema instead of these 3 parameters?", "author": "xnull", "createdAt": "2020-10-30T04:54:26Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/Table.java", "diffHunk": "@@ -58,18 +58,35 @@\n     @Getter\n     private final TableMetrics metrics;\n \n+    @Getter\n+    private final Class<K> keyClass;\n+\n+    @Getter\n+    private final Class<V> valueClass;\n+\n+    @Getter\n+    private final Class<M> metadataClass;\n+\n     /**\n      * Returns a Table instance backed by a CorfuTable.\n      *\n-     * @param namespace               Namespace of the table.\n-     * @param fullyQualifiedTableName Fully qualified table name.\n-     * @param valueSchema             Value schema to identify secondary keys.\n-     * @param corfuRuntime            Connected instance of the Corfu Runtime.\n-     * @param serializer              Protobuf Serializer.\n+     * @param namespace               namespace of the table\n+     * @param fullyQualifiedTableName Fully qualified table name\n+     * @param kClass                  key class\n+     * @param vClass                  value class\n+     * @param mClass                  metadata class\n+     * @param valueSchema             value schema to identify secondary keys\n+     * @param corfuRuntime            connected instance of the Corfu Runtime\n+     * @param serializer              protobuf serializer\n+     * @param streamingMapSupplier    supplier of underlying map data structure\n+     * @param versionPolicy           versioning policy\n      */\n     @Nonnull\n     public Table(@Nonnull final String namespace,\n                  @Nonnull final String fullyQualifiedTableName,\n+                 @Nonnull final Class<K> kClass,", "originalCommit": "da4891d3975df9e6b7b75fbabd66f8fd16f3f793", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMwOTk4Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2804#discussion_r515309987", "bodyText": "These three parameters are same as what were passed in from the caller.", "author": "WenbinZhu", "createdAt": "2020-10-30T18:48:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg1ODU5MA=="}], "type": "inlineReview"}, {"oid": "aeb26853b6d69372c4bc352a5741c702fe7973f5", "url": "https://github.com/CorfuDB/CorfuDB/commit/aeb26853b6d69372c4bc352a5741c702fe7973f5", "message": "CorfuStore streaming redesign part 1 - interfaces.\n\nImplements backward compatible interfaces for CorfuStore streaming redeisgn.", "committedDate": "2020-10-30T18:45:37Z", "type": "forcePushed"}, {"oid": "5662634902f3603e04cac5c2bdb7bd89add1238d", "url": "https://github.com/CorfuDB/CorfuDB/commit/5662634902f3603e04cac5c2bdb7bd89add1238d", "message": "CorfuStore streaming redesign part 1 - interfaces.\n\nImplements backward compatible interfaces for CorfuStore streaming redeisgn.", "committedDate": "2020-10-30T18:46:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0MzcyOA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2804#discussion_r515343728", "bodyText": "what happens if this address has been checkpointed and trimmed?", "author": "pankti-m", "createdAt": "2020-10-30T19:51:28Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/StreamManager.java", "diffHunk": "@@ -123,6 +124,35 @@ void subscribe(@Nonnull StreamListener streamListener, @Nonnull String namespace\n         subscriptions.put(streamListener, new StreamSubscriber(task, scheduledFuture));\n     }\n \n+    /**\n+     * Subscribe to updates.\n+     *\n+     * @param streamListener   client listener\n+     * @param namespace        namespace of interest\n+     * @param streamTag        only updates of tables with the stream tag will be polled\n+     * @param tablesOfInterest only updates from these tables will be returned\n+     * @param startAddress     address to start the notifications from", "originalCommit": "5662634902f3603e04cac5c2bdb7bd89add1238d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5MDE1Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2804#discussion_r515390152", "bodyText": "Seek moves the pointer to this address, if it's trimmed, then in next polling cycle, the poller will get a TrimmedException, stop the subscription and restart. This part is not changed since initially implemented.", "author": "WenbinZhu", "createdAt": "2020-10-30T21:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0MzcyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NzgzNw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2804#discussion_r515347837", "bodyText": "this method can be made default instead of public", "author": "pankti-m", "createdAt": "2020-10-30T20:00:43Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/StreamManager.java", "diffHunk": "@@ -88,10 +89,10 @@ public void shutdown() {\n     /**\n      * Subscribe to updates.\n      *\n-     * @param streamListener   Client listener.\n-     * @param namespace        Namespace of interest.\n-     * @param tablesOfInterest Only updates from these tables will be returned.\n-     * @param startAddress     Address to start the notifications from.\n+     * @param streamListener   client listener\n+     * @param namespace        namespace of interest\n+     * @param tablesOfInterest only updates from these tables will be returned\n+     * @param startAddress     address to start the notifications from", "originalCommit": "5662634902f3603e04cac5c2bdb7bd89add1238d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5MDE4MA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2804#discussion_r515390180", "bodyText": "Done.", "author": "WenbinZhu", "createdAt": "2020-10-30T21:26:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NzgzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1MTkyNQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2804#discussion_r515351925", "bodyText": "can we derive value and metadata classes from the value and metadata schemas?  Also is the metadataSchema param missing in the comment?", "author": "pankti-m", "createdAt": "2020-10-30T20:09:39Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/Table.java", "diffHunk": "@@ -58,18 +58,35 @@\n     @Getter\n     private final TableMetrics metrics;\n \n+    @Getter\n+    private final Class<K> keyClass;\n+\n+    @Getter\n+    private final Class<V> valueClass;\n+\n+    @Getter\n+    private final Class<M> metadataClass;\n+\n     /**\n      * Returns a Table instance backed by a CorfuTable.\n      *\n-     * @param namespace               Namespace of the table.\n-     * @param fullyQualifiedTableName Fully qualified table name.\n-     * @param valueSchema             Value schema to identify secondary keys.\n-     * @param corfuRuntime            Connected instance of the Corfu Runtime.\n-     * @param serializer              Protobuf Serializer.\n+     * @param namespace               namespace of the table\n+     * @param fullyQualifiedTableName Fully qualified table name\n+     * @param kClass                  key class\n+     * @param vClass                  value class", "originalCommit": "5662634902f3603e04cac5c2bdb7bd89add1238d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5MDY5OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2804#discussion_r515390698", "bodyText": "Yes we can, that's what I initially did, but later I think it's cleaner to pass them all then doing a  bunch of castings, as these params are the same as what were passed in from the caller.", "author": "WenbinZhu", "createdAt": "2020-10-30T21:28:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1MTkyNQ=="}], "type": "inlineReview"}, {"oid": "fa1ad344c3ed59e279ee336f02ebd9d1aa887cfb", "url": "https://github.com/CorfuDB/CorfuDB/commit/fa1ad344c3ed59e279ee336f02ebd9d1aa887cfb", "message": "CorfuStore streaming redesign part 1 - interfaces.\n\nImplements backward compatible interfaces for CorfuStore streaming redeisgn.", "committedDate": "2020-10-30T21:25:14Z", "type": "forcePushed"}, {"oid": "db4453053aa9e5beff5905c563c59823b898333c", "url": "https://github.com/CorfuDB/CorfuDB/commit/db4453053aa9e5beff5905c563c59823b898333c", "message": "CorfuStore streaming redesign part 1 - interfaces.\n\nImplements backward compatible interfaces for CorfuStore streaming redeisgn.", "committedDate": "2020-10-30T21:41:51Z", "type": "forcePushed"}, {"oid": "982fd5e90a74deacad196221249a087fc1198590", "url": "https://github.com/CorfuDB/CorfuDB/commit/982fd5e90a74deacad196221249a087fc1198590", "message": "CorfuStore streaming redesign part 1 - interfaces.\n\nImplements backward compatible interfaces for CorfuStore streaming redeisgn.", "committedDate": "2020-11-03T01:17:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3NjUwMw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2804#discussion_r516476503", "bodyText": "Nit: the updates of tablesOfInterest will not be exactly 'returned', right? Considering that this method returns void, it might help people better understand by not saying 'return'. What about '... will be passed to streamListener'?", "author": "Lujie1996", "createdAt": "2020-11-03T07:55:39Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuStore.java", "diffHunk": "@@ -199,26 +200,48 @@ public Query query(@Nonnull final String namespace) {\n     }\n \n     /**\n-     * Subscribe to a specific a table in a namespace or the entire namespace.\n-     * Objects returned will honor transactional boundaries\n-     * @param streamListener - callback context.\n-     * @param namespace - the CorfuStore namespace to subscribe to.\n-     * @param tablesOfInterest - If specified, only updates from these tables will be returned.\n-     * @param timestamp - If specified, all stream updates from this timestamp will be returned\n-     *                  - if null, only future updates will be returned.\n+     * Subscribe to transaction updates on specific tables in the namespace.\n+     * Objects returned will honor transactional boundaries.\n+     *\n+     * @param streamListener   callback context\n+     * @param namespace        the CorfuStore namespace to subscribe to\n+     * @param tablesOfInterest only updates from these tables of interest will be returned\n+     * @param timestamp        if specified, all stream updates from this timestamp will be returned\n+     *                         if null, only future updates will be returned\n      */\n+    @Deprecated\n     public <K extends Message, V extends Message, M extends Message>\n     void subscribe(@Nonnull StreamListener streamListener, @Nonnull String namespace,\n                    @Nonnull List<TableSchema<K, V, M>> tablesOfInterest,\n                    @Nullable Timestamp timestamp) {\n         runtime.getTableRegistry().getStreamManager()\n                 .subscribe(streamListener, namespace, tablesOfInterest,\n-                (timestamp == null) ? getTimestamp().getSequence() : timestamp.getSequence());\n+                        (timestamp == null) ? getTimestamp().getSequence() : timestamp.getSequence());\n+    }\n+\n+    /**\n+     * Subscribe to transaction updates on specific tables with the streamTag in the namespace.\n+     * Objects returned will honor transactional boundaries.\n+     *\n+     * @param streamListener   callback context\n+     * @param namespace        the CorfuStore namespace to subscribe to\n+     * @param streamTag        only updates of tables with the stream tag will be polled\n+     * @param tablesOfInterest only updates from these tables of interest will be returned", "originalCommit": "982fd5e90a74deacad196221249a087fc1198590", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU4NzA4NA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2804#discussion_r517587084", "bodyText": "@Lujie1996 sure, done.", "author": "WenbinZhu", "createdAt": "2020-11-04T19:40:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3NjUwMw=="}], "type": "inlineReview"}, {"oid": "2af0598cda210dd90d78983e01c9ce91a47584c1", "url": "https://github.com/CorfuDB/CorfuDB/commit/2af0598cda210dd90d78983e01c9ce91a47584c1", "message": "CorfuStore streaming redesign part 1 - interfaces.\n\nImplements backward compatible interfaces for CorfuStore streaming redeisgn.", "committedDate": "2020-11-04T19:40:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU5MjQyOQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2804#discussion_r517592429", "bodyText": "Can we use Optional instead of null checks?", "author": "xnull", "createdAt": "2020-11-04T19:50:20Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuStore.java", "diffHunk": "@@ -199,26 +200,48 @@ public Query query(@Nonnull final String namespace) {\n     }\n \n     /**\n-     * Subscribe to a specific a table in a namespace or the entire namespace.\n-     * Objects returned will honor transactional boundaries\n-     * @param streamListener - callback context.\n-     * @param namespace - the CorfuStore namespace to subscribe to.\n-     * @param tablesOfInterest - If specified, only updates from these tables will be returned.\n-     * @param timestamp - If specified, all stream updates from this timestamp will be returned\n-     *                  - if null, only future updates will be returned.\n+     * Subscribe to transaction updates on specific tables in the namespace.\n+     * Objects returned will honor transactional boundaries.\n+     *\n+     * @param streamListener   callback context\n+     * @param namespace        the CorfuStore namespace to subscribe to\n+     * @param tablesOfInterest only updates from these tables of interest will be sent to listener\n+     * @param timestamp        if specified, all stream updates from this timestamp will be returned\n+     *                         if null, only future updates will be returned\n      */\n+    @Deprecated\n     public <K extends Message, V extends Message, M extends Message>\n     void subscribe(@Nonnull StreamListener streamListener, @Nonnull String namespace,\n                    @Nonnull List<TableSchema<K, V, M>> tablesOfInterest,\n                    @Nullable Timestamp timestamp) {\n         runtime.getTableRegistry().getStreamManager()\n                 .subscribe(streamListener, namespace, tablesOfInterest,\n-                (timestamp == null) ? getTimestamp().getSequence() : timestamp.getSequence());\n+                        (timestamp == null) ? getTimestamp().getSequence() : timestamp.getSequence());\n+    }\n+\n+    /**\n+     * Subscribe to transaction updates on specific tables with the streamTag in the namespace.\n+     * Objects returned will honor transactional boundaries.\n+     *\n+     * @param streamListener   callback context\n+     * @param namespace        the CorfuStore namespace to subscribe to\n+     * @param streamTag        only updates of tables with the stream tag will be polled\n+     * @param tablesOfInterest only updates from these tables of interest will be sent to listener\n+     * @param timestamp        if specified, all stream updates from this timestamp will be returned\n+     *                         if null, only future updates will be returned\n+     */\n+    public void subscribe(@Nonnull StreamListener streamListener, @Nonnull String namespace,\n+                   @Nonnull String streamTag, @Nonnull List<String> tablesOfInterest,\n+                   @Nullable Timestamp timestamp) {\n+        runtime.getTableRegistry().getStreamManager()\n+                .subscribe(streamListener, namespace, streamTag, tablesOfInterest,\n+                        (timestamp == null) ? getTimestamp().getSequence() : timestamp.getSequence());", "originalCommit": "2af0598cda210dd90d78983e01c9ce91a47584c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bf05ad48ff5abd86b3f515811567f6e391ce8279", "url": "https://github.com/CorfuDB/CorfuDB/commit/bf05ad48ff5abd86b3f515811567f6e391ce8279", "message": "CorfuStore streaming redesign part 1 - interfaces.\n\nImplements backward compatible interfaces for CorfuStore streaming redesign.", "committedDate": "2020-11-05T03:25:56Z", "type": "forcePushed"}, {"oid": "3e34e58ff259f8f1721d9659a4525b3100844d2b", "url": "https://github.com/CorfuDB/CorfuDB/commit/3e34e58ff259f8f1721d9659a4525b3100844d2b", "message": "CorfuStore streaming redesign part 1 - interfaces.\n\nImplements backward compatible interfaces for CorfuStore streaming redesign.", "committedDate": "2020-11-05T22:55:07Z", "type": "commit"}, {"oid": "3e34e58ff259f8f1721d9659a4525b3100844d2b", "url": "https://github.com/CorfuDB/CorfuDB/commit/3e34e58ff259f8f1721d9659a4525b3100844d2b", "message": "CorfuStore streaming redesign part 1 - interfaces.\n\nImplements backward compatible interfaces for CorfuStore streaming redesign.", "committedDate": "2020-11-05T22:55:07Z", "type": "forcePushed"}]}