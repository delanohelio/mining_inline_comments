{"pr_number": 2765, "pr_title": "Use A PRNG for ID Generation", "pr_createdAt": "2020-09-09T01:11:16Z", "pr_url": "https://github.com/CorfuDB/CorfuDB/pull/2765", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMxMDMxNw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2765#discussion_r485310317", "bodyText": "Using UUID.randomUUID for transaction IDs can be really slow because it uses secureRandom.\n\nBenchmark                 Mode         Cnt                 Score \njavaUUIDGenerator         thrpt     2_613_099           ops/s\n\nUUID.randomUUID() is actually 100k times faster than 50ms", "author": "xnull", "createdAt": "2020-09-09T03:07:57Z", "path": "runtime/src/main/java/org/corfudb/util/Utils.java", "diffHunk": "@@ -45,6 +46,19 @@ private Utils() {\n \n     private static final char[] hexArray = \"0123456789ABCDEF\".toCharArray();\n \n+\n+    /**\n+     * When true randomness is not required using UUID.randomUUID() can be really slow.\n+     * Blocking for 50+ ms for entropy to build up is not unusual. This method generates\n+     * random UUIDs based on a LCG with a thread local seed.\n+     * @return A psuedorandom\n+     */\n+    public static UUID genPseudorandomUUID() {", "originalCommit": "26e3aaad7a655e5ebea65e211b621f85c4b4bd05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyMzQ0MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2765#discussion_r485323441", "bodyText": "Run the benchmark with -Djava.security.egd=file:/dev/random I think macos uses urandom and not random as a default. urandom is psuedorandom so it won't block.\nSecureRandom consumes bytes from  /proc/sys/kernel/random/entropy_avail. Also, In a real system multiple threads consume bytes from the entropy pool, so having a single thread consume the bytes sequentially is not a good benchmark.", "author": "Maithem", "createdAt": "2020-09-09T04:01:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMxMDMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAxNTYzMQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2765#discussion_r486015631", "bodyText": "It's hard to repro without using the bouncy castle provider", "author": "Maithem", "createdAt": "2020-09-10T01:52:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMxMDMxNw=="}], "type": "inlineReview"}, {"oid": "c44c26aca7911309617d6cce3be62508a6ace95f", "url": "https://github.com/CorfuDB/CorfuDB/commit/c44c26aca7911309617d6cce3be62508a6ace95f", "message": "Use A PRNG for ID Generation\n\nIn CorfuDB UUIDs are mostly used for logging purposes, thus true\nrandomness is not required. Using UUID.randomUUID for transaction\nIDs can be really slow because it uses secureRandom. This patch\nuses a PRNG to generate those ids much faster.", "committedDate": "2020-09-09T07:04:42Z", "type": "forcePushed"}, {"oid": "65f1a7cf909bc0192a6aa2f9c28265e5ac8277f8", "url": "https://github.com/CorfuDB/CorfuDB/commit/65f1a7cf909bc0192a6aa2f9c28265e5ac8277f8", "message": "Use A PRNG for ID Generation\n\nIn CorfuDB UUIDs are mostly used for logging purposes, thus true\nrandomness is not required. Using UUID.randomUUID for transaction\nIDs can be really slow because it uses secureRandom. This patch\nuses a PRNG to generate those ids much faster.", "committedDate": "2020-12-08T20:33:30Z", "type": "commit"}, {"oid": "65f1a7cf909bc0192a6aa2f9c28265e5ac8277f8", "url": "https://github.com/CorfuDB/CorfuDB/commit/65f1a7cf909bc0192a6aa2f9c28265e5ac8277f8", "message": "Use A PRNG for ID Generation\n\nIn CorfuDB UUIDs are mostly used for logging purposes, thus true\nrandomness is not required. Using UUID.randomUUID for transaction\nIDs can be really slow because it uses secureRandom. This patch\nuses a PRNG to generate those ids much faster.", "committedDate": "2020-12-08T20:33:30Z", "type": "forcePushed"}]}