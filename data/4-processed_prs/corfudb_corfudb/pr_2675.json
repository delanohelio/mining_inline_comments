{"pr_number": 2675, "pr_title": "Log Entry Sync allow mixed Transactions", "pr_createdAt": "2020-07-31T01:13:39Z", "pr_url": "https://github.com/CorfuDB/CorfuDB/pull/2675", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NTg4Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2675#discussion_r463875887", "bodyText": "We should log a message here or in cancelLogEntrySync.  Also, I think it will be useful to log the max allowed size and size of logData", "author": "pankti-m", "createdAt": "2020-07-31T22:43:40Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/LogEntrySender.java", "diffHunk": "@@ -119,23 +118,15 @@ public void send(UUID logEntrySyncEventId) {\n                     // Back-off for couple of seconds and retry n times if not require full sync\n                 }\n \n-                if (logEntryReader.hasNoiseData()) {\n-                    cancelLogEntrySync(LogReplicationError.ILLEGAL_TRANSACTION, LogReplicationEventType.REPLICATION_SHUTDOWN, logEntrySyncEventId);\n+                if (logEntryReader.hasMessageExceededSize()) {\n+                    cancelLogEntrySync(LogReplicationError.LOG_ENTRY_MESSAGE_SIZE_EXCEEDED, LogReplicationEventType.REPLICATION_SHUTDOWN, logEntrySyncEventId);", "originalCommit": "2abe71cb9d402f24b5d5d03bfc32057f012bcb33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3OTI1MA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2675#discussion_r463879250", "bodyText": "nit - no need of else.", "author": "pankti-m", "createdAt": "2020-07-31T22:57:46Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -89,55 +95,52 @@ private LogReplicationEntry generateMessageWithOpaqueEntryList(List<OpaqueEntry>\n         return txMessage;\n     }\n \n+    /**\n+     * Verify the transaction entry is valid, i.e., if the entry contains any\n+     * of the streams to be replicated.\n+     *\n+     * Notice that a transaction stream entry can be fully or partially replicated,\n+     * i.e., if only a subset of streams in the transaction entry are part of the streams\n+     * to replicate, the transaction entry will be partially replicated,\n+     * avoiding replication of the other streams present in the transaction.\n+     *\n+     * @param entry transaction stream opaque entry\n+     *\n+     * @return true, if the transaction entry has any valid stream to replicate.\n+     *         false, otherwise.\n+     */\n+    private boolean isValidTransactionEntry(@NonNull OpaqueEntry entry) {\n+        Set<UUID> txEntryStreamIds = new HashSet<>(entry.getEntries().keySet());\n \n-    // Check if it has the correct streams.\n-    private boolean shouldProcess(OpaqueEntry entry) {\n-        Set<UUID> tmpUUIDs = new HashSet<>(entry.getEntries().keySet());\n-\n-        // Check if Tx Stream Opaque Entry is empty\n-        if(tmpUUIDs.isEmpty()) {\n-            log.info(\"Log Entry Reader, TX stream Opaque entry is EMPTY, size={}, version={}\", streamUUIDs.size(),\n+        // Sanity Check: discard if transaction stream opaque entry is empty (no streams are present)\n+        if (txEntryStreamIds.isEmpty()) {\n+            log.info(\"Log Entry Reader, TX stream Opaque entry is EMPTY, streams_to_replicate={}, empty entry ts={}\", streamUUIDs.size(),\n                     entry.getVersion());\n             return false;\n         }\n \n-        // If the entry's stream set is a subset of interested streams, it is the entry we should process\n-        if (streamUUIDs.containsAll(tmpUUIDs)) {\n-            log.info(\"Log Entry Reader, replicating streams={}, replicateBase={}\", tmpUUIDs, streamUUIDs.size());\n-            return true;\n-        }\n-\n-        // If the entry's stream set has no overlap with the interested streams, it should be skipped.\n-        tmpUUIDs.retainAll(streamUUIDs);\n-        if (tmpUUIDs.isEmpty()) {\n-            log.info(\"Log Entry Reader, TX stream contains none of the streams of interest, version={}\", entry.getVersion());\n+        // If none of the streams in the transaction entry are specified to be replicated, this is an invalid entry, skip\n+        if (Collections.disjoint(streamUUIDs, txEntryStreamIds)) {\n+            log.debug(\"Log Entry Reader, TX entry[{}] contains none of the streams of interest, streams={}\", entry.getVersion(), txEntryStreamIds);\n             return false;\n+        } else {", "originalCommit": "2abe71cb9d402f24b5d5d03bfc32057f012bcb33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg4MjIzMQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2675#discussion_r463882231", "bodyText": "nit - extra newline", "author": "pankti-m", "createdAt": "2020-07-31T23:12:03Z", "path": "runtime/src/main/java/org/corfudb/protocols/logprotocol/OpaqueEntry.java", "diffHunk": "@@ -36,6 +36,7 @@\n     // TODO(Maithem): Inconsistent behavior when full-sync vs delta (for full sync the versions will change)\n     final long version;\n \n+", "originalCommit": "2abe71cb9d402f24b5d5d03bfc32057f012bcb33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b67fe140f56a514bd0c01ef3e40ec98d6aee2e31", "url": "https://github.com/CorfuDB/CorfuDB/commit/b67fe140f56a514bd0c01ef3e40ec98d6aee2e31", "message": "Log Entry Sync allow mixed Transactions\n\nAllow replication when a transaction is executed across\nreplicated and non-replicated streams. Filter out the streams\nof interest and disregard all other streams.", "committedDate": "2020-07-31T23:58:49Z", "type": "forcePushed"}, {"oid": "01c0ac9c95ace627cb377947d24c4e4123da8b8f", "url": "https://github.com/CorfuDB/CorfuDB/commit/01c0ac9c95ace627cb377947d24c4e4123da8b8f", "message": "Log Entry Sync allow mixed Transactions\n\nAllow replication when a transaction is executed across\nreplicated and non-replicated streams. Filter out the streams\nof interest and disregard all other streams.", "committedDate": "2020-08-01T01:17:04Z", "type": "forcePushed"}, {"oid": "cdf0bb8a1194e2324e84744946f6b4ab3ab08800", "url": "https://github.com/CorfuDB/CorfuDB/commit/cdf0bb8a1194e2324e84744946f6b4ab3ab08800", "message": "Log Entry Sync allow mixed Transactions\n\nAllow replication when a transaction is executed across\nreplicated and non-replicated streams. Filter out the streams\nof interest and disregard all other streams.", "committedDate": "2020-08-01T01:18:06Z", "type": "forcePushed"}, {"oid": "fb78d194f7129c79513764207502fd7dadd64265", "url": "https://github.com/CorfuDB/CorfuDB/commit/fb78d194f7129c79513764207502fd7dadd64265", "message": "Log Entry Sync allow mixed Transactions\n\nAllow replication when a transaction is executed across\nreplicated and non-replicated streams. Filter out the streams\nof interest and disregard all other streams.", "committedDate": "2020-08-01T01:38:13Z", "type": "commit"}, {"oid": "fb78d194f7129c79513764207502fd7dadd64265", "url": "https://github.com/CorfuDB/CorfuDB/commit/fb78d194f7129c79513764207502fd7dadd64265", "message": "Log Entry Sync allow mixed Transactions\n\nAllow replication when a transaction is executed across\nreplicated and non-replicated streams. Filter out the streams\nof interest and disregard all other streams.", "committedDate": "2020-08-01T01:38:13Z", "type": "forcePushed"}]}