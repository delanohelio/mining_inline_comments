{"pr_number": 4432, "pr_title": "[GEOS-9705] Allow GeoPackage WPS process to inline metadata and add OWS contexts for request and data", "pr_createdAt": "2020-07-22T14:35:08Z", "pr_url": "https://github.com/geoserver/geoserver/pull/4432", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIzOTAxMQ==", "url": "https://github.com/geoserver/geoserver/pull/4432#discussion_r459239011", "bodyText": "This is a very interesting pull requests, is this documenting the source of the geopackage?", "author": "jodygarnett", "createdAt": "2020-07-23T06:31:21Z", "path": "src/community/geopkg/src/main/resources/org/geoserver/geopkg/wps/owsContextRequest.ftl", "diffHunk": "@@ -0,0 +1,65 @@\n+{\n+    \"type\":\"FeatureCollection\",", "originalCommit": "fed79c7b93f912a52bab290ebb2b7c8731aa0de9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNDc5MQ==", "url": "https://github.com/geoserver/geoserver/pull/4432#discussion_r459314791", "bodyText": "It's a OWS context, in JSON format. This one in particular, it's provenance, provides the original request that generated the GeoPackage. The others are single layer provenance (what WFS serves them) and operational picture, that is, how to draw the layers, in which order, using which style.", "author": "aaime", "createdAt": "2020-07-23T09:11:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIzOTAxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIzOTUyMQ==", "url": "https://github.com/geoserver/geoserver/pull/4432#discussion_r459239521", "bodyText": "return not needed", "author": "jodygarnett", "createdAt": "2020-07-23T06:32:52Z", "path": "src/community/geopkg/src/main/java/org/geoserver/geopkg/wps/OWSContextWriter.java", "diffHunk": "@@ -0,0 +1,433 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.geopkg.wps;\n+\n+import static org.geoserver.ows.URLMangler.URLType.SERVICE;\n+import static org.geoserver.ows.util.ResponseUtils.buildURL;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableMap;\n+import freemarker.cache.ClassTemplateLoader;\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.SQLException;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.TimeZone;\n+import java.util.UUID;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import net.opengis.wps10.ExecuteType;\n+import org.geoserver.catalog.FeatureTypeInfo;\n+import org.geoserver.catalog.LayerGroupInfo;\n+import org.geoserver.catalog.LayerInfo;\n+import org.geoserver.catalog.PublishedInfo;\n+import org.geoserver.catalog.StyleInfo;\n+import org.geoserver.config.GeoServer;\n+import org.geoserver.ows.Dispatcher;\n+import org.geoserver.ows.Request;\n+import org.geoserver.ows.util.ResponseUtils;\n+import org.geoserver.template.TemplateUtils;\n+import org.geoserver.wfs.WFSInfo;\n+import org.geoserver.wps.xml.WPSConfiguration;\n+import org.geotools.geopkg.GeoPackage;\n+import org.geotools.geopkg.GeoPkgMetadata;\n+import org.geotools.geopkg.GeoPkgMetadata.Scope;\n+import org.geotools.geopkg.GeoPkgMetadataExtension;\n+import org.geotools.geopkg.GeoPkgMetadataReference;\n+import org.geotools.geopkg.wps.GeoPackageProcessRequest;\n+import org.geotools.util.logging.Logging;\n+import org.geotools.wps.WPS;\n+import org.geotools.xsd.Encoder;\n+import org.xml.sax.ContentHandler;\n+\n+/** Adds the OWS Context elements into the GeoPackage using freemarker templates */\n+public class OWSContextWriter {\n+\n+    public static final String PROVENANCE_SA_URI =\n+            \"https://gitlab.com/imagemattersllc/ogc-vtp2/-/blob/master/extensions/22\"\n+                    + \"-metadata-dataset-provenance.adoc/example.geojson\";\n+    public static final String PROVENANCE_SA_TYPE = \"im_metadata_dp_owc_geojson\";\n+    public static final String STYLESHEET_SA_URI =\n+            \"https://gitlab.ogc.org/ogc/t16-d010-geopackage-er/-/blob/master/ER/annex-samples.adoc\";\n+    public static final String STYLESHEET_SA_TYPE = \"im_metadata_cop_owc_geojson\";\n+\n+    private static final Logger LOGGER = Logging.getLogger(OWSContextWriter.class);\n+\n+    private static final String OWS_CONTEXT_JSON_URI =\n+            \"https://portal.opengeospatial.org/files/?artifact_id=68826\";\n+\n+    private static final String DATE_FORMAT_STRING = \"yyyy-MM-dd'T'HH:mm:ss'Z'\";\n+    private static final TimeZone UTC = TimeZone.getTimeZone(\"UTC\");\n+    private static final String GEO_JSON_MIME = \"application/geo+json\";\n+\n+    private static Configuration templateConfig = TemplateUtils.getSafeConfiguration();\n+    private static Template REQUEST_TEMPLATE;\n+    private static Template FEATURE_WFS_TEMPLATE;\n+    private static Template STYLESHEETS_TEMPLATE;\n+\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    static {\n+        try {\n+            ClassTemplateLoader loader = new ClassTemplateLoader(GeoPackageProcess.class, \"\");\n+            templateConfig.setTemplateLoader(loader);\n+            REQUEST_TEMPLATE = templateConfig.getTemplate(\"owsContextRequest.ftl\");\n+            FEATURE_WFS_TEMPLATE = templateConfig.getTemplate(\"owsContextFeature.ftl\");\n+            STYLESHEETS_TEMPLATE = templateConfig.getTemplate(\"owsContextStylesheet.ftl\");\n+        } catch (IOException e) {\n+            LOGGER.log(Level.WARNING, \"Failed to load freemarker templates for OWS contexts\", e);\n+        }\n+    }\n+\n+    private final GeoPackage gpkg;\n+    private final GeoPkgMetadataExtension metadatas;\n+    private final SemanticAnnotationsExtension annotations;\n+    private final GeoServer gs;\n+    private final StyleWorker styleWorker;\n+    private Map<String, LayerInfo> layerStyles = new HashMap<>();\n+    private GeoPkgMetadata requestMetadata;\n+    private GeoPkgSemanticAnnotation provenanceAnnotation;\n+\n+    public OWSContextWriter(GeoServer gs, GeoPackage gpkg, StyleWorker styleWorker) {\n+        this.gs = gs;\n+        this.gpkg = gpkg;\n+        this.metadatas = gpkg.getExtension(GeoPkgMetadataExtension.class);\n+        this.annotations = gpkg.getExtension(SemanticAnnotationsExtension.class);\n+        this.styleWorker = styleWorker;\n+    }\n+\n+    /**\n+     * Adds the WPS request context. Should be called first, as the per layer metadata references\n+     * depend on it.\n+     *\n+     * @throws IOException\n+     * @return", "originalCommit": "fed79c7b93f912a52bab290ebb2b7c8731aa0de9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQyMDg1OA==", "url": "https://github.com/geoserver/geoserver/pull/4432#discussion_r459420858", "bodyText": "Fixed", "author": "aaime", "createdAt": "2020-07-23T12:45:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIzOTUyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0MDU0Nw==", "url": "https://github.com/geoserver/geoserver/pull/4432#discussion_r459240547", "bodyText": "thought: Are style drive groups going to cause confusion here? Thinking of an style that draws the same features multiple times to establish a z-order.", "author": "jodygarnett", "createdAt": "2020-07-23T06:35:47Z", "path": "src/community/geopkg/src/main/java/org/geoserver/geopkg/wps/OWSContextWriter.java", "diffHunk": "@@ -0,0 +1,433 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.geopkg.wps;\n+\n+import static org.geoserver.ows.URLMangler.URLType.SERVICE;\n+import static org.geoserver.ows.util.ResponseUtils.buildURL;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableMap;\n+import freemarker.cache.ClassTemplateLoader;\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.SQLException;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.TimeZone;\n+import java.util.UUID;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import net.opengis.wps10.ExecuteType;\n+import org.geoserver.catalog.FeatureTypeInfo;\n+import org.geoserver.catalog.LayerGroupInfo;\n+import org.geoserver.catalog.LayerInfo;\n+import org.geoserver.catalog.PublishedInfo;\n+import org.geoserver.catalog.StyleInfo;\n+import org.geoserver.config.GeoServer;\n+import org.geoserver.ows.Dispatcher;\n+import org.geoserver.ows.Request;\n+import org.geoserver.ows.util.ResponseUtils;\n+import org.geoserver.template.TemplateUtils;\n+import org.geoserver.wfs.WFSInfo;\n+import org.geoserver.wps.xml.WPSConfiguration;\n+import org.geotools.geopkg.GeoPackage;\n+import org.geotools.geopkg.GeoPkgMetadata;\n+import org.geotools.geopkg.GeoPkgMetadata.Scope;\n+import org.geotools.geopkg.GeoPkgMetadataExtension;\n+import org.geotools.geopkg.GeoPkgMetadataReference;\n+import org.geotools.geopkg.wps.GeoPackageProcessRequest;\n+import org.geotools.util.logging.Logging;\n+import org.geotools.wps.WPS;\n+import org.geotools.xsd.Encoder;\n+import org.xml.sax.ContentHandler;\n+\n+/** Adds the OWS Context elements into the GeoPackage using freemarker templates */\n+public class OWSContextWriter {\n+\n+    public static final String PROVENANCE_SA_URI =\n+            \"https://gitlab.com/imagemattersllc/ogc-vtp2/-/blob/master/extensions/22\"\n+                    + \"-metadata-dataset-provenance.adoc/example.geojson\";\n+    public static final String PROVENANCE_SA_TYPE = \"im_metadata_dp_owc_geojson\";\n+    public static final String STYLESHEET_SA_URI =\n+            \"https://gitlab.ogc.org/ogc/t16-d010-geopackage-er/-/blob/master/ER/annex-samples.adoc\";\n+    public static final String STYLESHEET_SA_TYPE = \"im_metadata_cop_owc_geojson\";\n+\n+    private static final Logger LOGGER = Logging.getLogger(OWSContextWriter.class);\n+\n+    private static final String OWS_CONTEXT_JSON_URI =\n+            \"https://portal.opengeospatial.org/files/?artifact_id=68826\";\n+\n+    private static final String DATE_FORMAT_STRING = \"yyyy-MM-dd'T'HH:mm:ss'Z'\";\n+    private static final TimeZone UTC = TimeZone.getTimeZone(\"UTC\");\n+    private static final String GEO_JSON_MIME = \"application/geo+json\";\n+\n+    private static Configuration templateConfig = TemplateUtils.getSafeConfiguration();\n+    private static Template REQUEST_TEMPLATE;\n+    private static Template FEATURE_WFS_TEMPLATE;\n+    private static Template STYLESHEETS_TEMPLATE;\n+\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    static {\n+        try {\n+            ClassTemplateLoader loader = new ClassTemplateLoader(GeoPackageProcess.class, \"\");\n+            templateConfig.setTemplateLoader(loader);\n+            REQUEST_TEMPLATE = templateConfig.getTemplate(\"owsContextRequest.ftl\");\n+            FEATURE_WFS_TEMPLATE = templateConfig.getTemplate(\"owsContextFeature.ftl\");\n+            STYLESHEETS_TEMPLATE = templateConfig.getTemplate(\"owsContextStylesheet.ftl\");\n+        } catch (IOException e) {\n+            LOGGER.log(Level.WARNING, \"Failed to load freemarker templates for OWS contexts\", e);\n+        }\n+    }\n+\n+    private final GeoPackage gpkg;\n+    private final GeoPkgMetadataExtension metadatas;\n+    private final SemanticAnnotationsExtension annotations;\n+    private final GeoServer gs;\n+    private final StyleWorker styleWorker;\n+    private Map<String, LayerInfo> layerStyles = new HashMap<>();\n+    private GeoPkgMetadata requestMetadata;\n+    private GeoPkgSemanticAnnotation provenanceAnnotation;\n+\n+    public OWSContextWriter(GeoServer gs, GeoPackage gpkg, StyleWorker styleWorker) {\n+        this.gs = gs;\n+        this.gpkg = gpkg;\n+        this.metadatas = gpkg.getExtension(GeoPkgMetadataExtension.class);\n+        this.annotations = gpkg.getExtension(SemanticAnnotationsExtension.class);\n+        this.styleWorker = styleWorker;\n+    }\n+\n+    /**\n+     * Adds the WPS request context. Should be called first, as the per layer metadata references\n+     * depend on it.\n+     *\n+     * @throws IOException\n+     * @return\n+     */\n+    public void addRequestContext() throws IOException {\n+        // setup the template model\n+        HashMap<String, Object> model = new HashMap<>();\n+        model.put(\"geometry\", \"{}\");\n+        model.put(\"contact\", gs.getGlobal().getSettings().getContact());\n+        model.put(\"now\", getCurrentISOTimestamp());\n+        model.put(\"uuid\", UUID.randomUUID().toString());\n+        Request request = Dispatcher.REQUEST.get();\n+        String baseURL = ResponseUtils.baseURL(request.getHttpRequest());\n+        String capsURL =\n+                buildURL(\n+                        baseURL,\n+                        \"wps\",\n+                        ImmutableMap.of(\n+                                \"service\", \"WPS\", \"version\", \"1.0\", \"request\", \"GetCapabilities\"),\n+                        SERVICE);\n+        model.put(\"getCapabilitiesURL\", capsURL);\n+        String describeURL =\n+                buildURL(\n+                        baseURL,\n+                        \"wps\",\n+                        ImmutableMap.of(\n+                                \"service\",\n+                                \"WPS\",\n+                                \"version\",\n+                                \"1.0\",\n+                                \"request\",\n+                                \"DescribeProcess\",\n+                                \"identifier\",\n+                                \"gs:GeoPackageProcess\"),\n+                        SERVICE);\n+        model.put(\"describeProcessURL\", describeURL);\n+        String executeURL = buildURL(baseURL, \"wps\", Collections.emptyMap(), SERVICE);\n+        model.put(\"executeURL\", executeURL);\n+        String requestXML = getRequestXML(request);\n+        String escapedBody = MAPPER.writer().writeValueAsString(requestXML);\n+        model.put(\"executeBody\", escapedBody);\n+        String requestContext = process(REQUEST_TEMPLATE, model);\n+\n+        try {\n+            GeoPkgMetadata metadata =\n+                    new GeoPkgMetadata(\n+                            Scope.Undefined, OWS_CONTEXT_JSON_URI, GEO_JSON_MIME, requestContext);\n+            metadatas.addMetadata(metadata);\n+\n+            GeoPkgMetadataReference reference =\n+                    new GeoPkgMetadataReference(\n+                            GeoPkgMetadataReference.Scope.GeoPackage,\n+                            null,\n+                            null,\n+                            null,\n+                            new Date(),\n+                            metadata,\n+                            null);\n+            metadatas.addReference(reference);\n+            this.requestMetadata = metadata;\n+\n+            GeoPkgSemanticAnnotation annotation =\n+                    new GeoPkgSemanticAnnotation(\n+                            PROVENANCE_SA_TYPE, \"Dataset provenance\", PROVENANCE_SA_URI);\n+            annotations.addAnnotation(annotation);\n+            this.provenanceAnnotation = annotation;\n+\n+            GeoPkgAnnotationReference ar =\n+                    new GeoPkgAnnotationReference(\n+                            \"gpkg_metadata\", \"id\", metadata.getId(), annotation);\n+            annotations.addReference(ar);\n+        } catch (SQLException e) {\n+            throw new IOException(e);\n+        }\n+    }\n+\n+    /**\n+     * Adds the OWS context for a given feature type, assuming WFS is enabled. Should be called\n+     * after {@link #addRequestContext()}\n+     *\n+     * @throws IOException\n+     */\n+    public void addFeatureTypeContext(FeatureTypeInfo ft, String layerName) throws IOException {\n+        WFSInfo service = gs.getService(WFSInfo.class);\n+        if (service != null && !service.isEnabled()) {\n+            return;\n+        }\n+\n+        // setup the template model\n+        HashMap<String, Object> model = new HashMap<>();\n+        model.put(\"featureType\", ft.prefixedName());\n+        model.put(\"title\", Optional.ofNullable(ft.getTitle()).orElse(ft.prefixedName()));\n+        model.put(\"abstract\", ft.getAbstract());\n+        model.put(\"now\", getCurrentISOTimestamp());\n+        Request request = Dispatcher.REQUEST.get();\n+        String baseURL = ResponseUtils.baseURL(request.getHttpRequest());\n+        String capsURL =\n+                buildURL(\n+                        baseURL,\n+                        \"wfs\",\n+                        ImmutableMap.of(\n+                                \"service\", \"WFS\", \"version\", \"2.0\", \"request\", \"GetCapabilities\"),\n+                        SERVICE);\n+        model.put(\"getCapabilitiesURL\", capsURL);\n+        String getFeatureURL =\n+                buildURL(\n+                        baseURL,\n+                        \"wfs\",\n+                        ImmutableMap.of(\n+                                \"service\",\n+                                \"WFS\",\n+                                \"version\",\n+                                \"2.0\",\n+                                \"request\",\n+                                \"GetFeature\",\n+                                \"typeNames\",\n+                                ft.prefixedName()),\n+                        SERVICE);\n+        model.put(\"getFeatureURL\", getFeatureURL);\n+        String requestContext = process(FEATURE_WFS_TEMPLATE, model);\n+\n+        try {\n+            GeoPkgMetadata metadata =\n+                    new GeoPkgMetadata(\n+                            Scope.Dataset, OWS_CONTEXT_JSON_URI, GEO_JSON_MIME, requestContext);\n+            metadatas.addMetadata(metadata);\n+\n+            GeoPkgMetadataReference reference =\n+                    new GeoPkgMetadataReference(\n+                            GeoPkgMetadataReference.Scope.Table,\n+                            layerName,\n+                            null,\n+                            null,\n+                            new Date(),\n+                            metadata,\n+                            requestMetadata);\n+            metadatas.addReference(reference);\n+\n+            GeoPkgAnnotationReference ar =\n+                    new GeoPkgAnnotationReference(\n+                            \"gpkg_metadata\", \"id\", metadata.getId(), provenanceAnnotation);\n+            annotations.addReference(ar);\n+        } catch (SQLException e) {\n+            throw new IOException(e);\n+        }\n+    }\n+\n+    private String pretty(String json) {\n+        try {\n+            Object parsedJson = MAPPER.readValue(json, Object.class);\n+            return MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(json);\n+        } catch (JsonProcessingException e) {\n+            LOGGER.log(Level.WARNING, \"Could not pretty print JSON, returning as is\", e);\n+            return json;\n+        }\n+    }\n+\n+    /** Encodes the request back to XML */\n+    private String getRequestXML(Request request) throws IOException {\n+        ExecuteType execute = (ExecuteType) request.getOperation().getParameters()[0];\n+        WPSConfiguration config = new WPSConfiguration();\n+        Encoder encoder = new Encoder(config);\n+        encoder.setIndenting(true);\n+        encoder.setIndentSize(4);\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        encoder.encode(execute, WPS.Execute, bos);\n+        return new String(bos.toByteArray(), StandardCharsets.UTF_8);\n+    }\n+\n+    public String getCurrentISOTimestamp() {\n+        SimpleDateFormat format = new SimpleDateFormat(DATE_FORMAT_STRING);\n+        format.setTimeZone(UTC);\n+        return format.format(new Date());\n+    }\n+\n+    public String process(Template template, Object model) throws IOException {\n+        try {\n+            StringWriter writer = new StringWriter();\n+            template.process(model, writer);\n+            return writer.toString();\n+        } catch (TemplateException e) {\n+            throw new IOException(e);\n+        }\n+    }\n+\n+    public void addStyleGroupInformations(GeoPackageProcessRequest contents) throws IOException {\n+        // if we don't have at least two layers, there is nothing interesting to add\n+        if (layerStyles.size() < 2) {\n+            return;\n+        }\n+\n+        // get all the layer groups, find the ones containing the layers and styles\n+        // that we have dumped\n+        List<LayerGroupInfo> layerGroups = getGroupsByLayerStyles();\n+        for (LayerGroupInfo layerGroup : layerGroups) {\n+            writeStyleContext(layerGroup, layerStyles, contents.getName());\n+        }\n+    }\n+\n+    private void writeStyleContext(\n+            LayerGroupInfo layerGroup, Map<String, LayerInfo> layerStyles, String packageName)\n+            throws IOException {\n+        // setup the template model\n+        HashMap<String, Object> model = new HashMap<>();\n+        model.put(\"groupId\", layerGroup.prefixedName());\n+        String groupTitle =\n+                Optional.ofNullable(layerGroup.getTitle()).orElse(layerGroup.prefixedName());\n+        model.put(\"groupTitle\", groupTitle);\n+        model.put(\"now\", getCurrentISOTimestamp());\n+        model.put(\"contact\", gs.getGlobal().getSettings().getContact());\n+        model.put(\"layers\", getLayersModel(layerGroup, layerStyles));\n+        model.put(\"packageName\", packageName);\n+\n+        String stylesheetContext = process(STYLESHEETS_TEMPLATE, model);\n+\n+        try {\n+            GeoPkgMetadata metadata =\n+                    new GeoPkgMetadata(\n+                            Scope.Undefined,\n+                            OWS_CONTEXT_JSON_URI,\n+                            GEO_JSON_MIME,\n+                            stylesheetContext);\n+            metadatas.addMetadata(metadata);\n+\n+            GeoPkgMetadataReference reference =\n+                    new GeoPkgMetadataReference(\n+                            GeoPkgMetadataReference.Scope.GeoPackage,\n+                            null,\n+                            null,\n+                            null,\n+                            new Date(),\n+                            metadata,\n+                            null);\n+            metadatas.addReference(reference);\n+\n+            GeoPkgSemanticAnnotation annotation =\n+                    new GeoPkgSemanticAnnotation(\n+                            STYLESHEET_SA_TYPE,\n+                            \"OGC OWS Context GeoJSON for \" + groupTitle,\n+                            STYLESHEET_SA_URI);\n+            annotations.addAnnotation(annotation);\n+\n+            GeoPkgAnnotationReference ar =\n+                    new GeoPkgAnnotationReference(\n+                            \"gpkg_metadata\", \"id\", metadata.getId(), annotation);\n+            annotations.addReference(ar);\n+        } catch (SQLException e) {\n+            throw new IOException(e);\n+        }\n+    }\n+\n+    private List<Map<String, Object>> getLayersModel(\n+            LayerGroupInfo layerGroup, Map<String, LayerInfo> layerStyles) throws IOException {\n+        List<Map<String, Object>> result = new ArrayList<>();\n+        List<PublishedInfo> layers = layerGroup.getLayers();", "originalCommit": "fed79c7b93f912a52bab290ebb2b7c8731aa0de9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNTg2Mg==", "url": "https://github.com/geoserver/geoserver/pull/4432#discussion_r459315862", "bodyText": "This is exactly what the OWS context in question needs to do, dump the right drawing order and associate it to styles. So a  dump of the layer groups structure is exactly that is needed. However, testing we found a small issue, in GeoServer the group is defined in painter's order, while OWS context unfortunately defined the opposite order, the first listed layer must be painted on top. Will have to make a small change for it.", "author": "aaime", "createdAt": "2020-07-23T09:13:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0MDU0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQyMDk3NA==", "url": "https://github.com/geoserver/geoserver/pull/4432#discussion_r459420974", "bodyText": "Order has been fixed now.", "author": "aaime", "createdAt": "2020-07-23T12:45:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0MDU0Nw=="}], "type": "inlineReview"}, {"oid": "429d92f5e5c46fd01ab2cd836138d4154e4a9090", "url": "https://github.com/geoserver/geoserver/commit/429d92f5e5c46fd01ab2cd836138d4154e4a9090", "message": "[GEOS-9705] Allow GeoPackage WPS process to inline metadata and add OWS contexts for request and data", "committedDate": "2020-07-23T12:37:01Z", "type": "commit"}, {"oid": "429d92f5e5c46fd01ab2cd836138d4154e4a9090", "url": "https://github.com/geoserver/geoserver/commit/429d92f5e5c46fd01ab2cd836138d4154e4a9090", "message": "[GEOS-9705] Allow GeoPackage WPS process to inline metadata and add OWS contexts for request and data", "committedDate": "2020-07-23T12:37:01Z", "type": "forcePushed"}]}