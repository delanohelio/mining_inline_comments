{"pr_number": 4428, "pr_title": "Java 8 recommendation [GEOS-9619]", "pr_createdAt": "2020-07-21T03:51:21Z", "pr_url": "https://github.com/geoserver/geoserver/pull/4428", "timeline": [{"oid": "7171135b2e19f510439fa878dcb8b6efdf0f71b4", "url": "https://github.com/geoserver/geoserver/commit/7171135b2e19f510439fa878dcb8b6efdf0f71b4", "message": "Java 8 recommendation\n\nSigned-off-by: Jody Garnett <jody.garnett@gmail.com>", "committedDate": "2020-07-21T03:49:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMwMDM5MA==", "url": "https://github.com/geoserver/geoserver/pull/4428#discussion_r458300390", "bodyText": "Used this into on the prior page where it talks about java versions.", "author": "jodygarnett", "createdAt": "2020-07-21T18:22:47Z", "path": "doc/en/user/source/production/container.rst", "diffHunk": "@@ -55,12 +55,12 @@ For more information about JVM configuration, see the article `Performance tunin\n       uintx MaxHeapSize       := 4294967296    {product}\n     \n    The above results (from a 16 GB laptop) amount to initial heap size of 256m, and a max heap size of around 4 GB (or around 1/4 of system memory).\n-   \n+\n+.. _production_container.marlin:\n+\n Enable the Marlin rasterizer\n ----------------------------\n \n-Before Java 9, OpenJDK and Oracle used the Pisces and Ductus renderers to rasterize vector data respectively.  In Java 9 onward they use Marlin which has better overall performance in most situations than either Pisces or Ductus.\n-", "originalCommit": "7171135b2e19f510439fa878dcb8b6efdf0f71b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMwMDY5OQ==", "url": "https://github.com/geoserver/geoserver/pull/4428#discussion_r458300699", "bodyText": "While I do not think anyone is working on Java 5 anymore this is much easier to read as a table", "author": "jodygarnett", "createdAt": "2020-07-21T18:23:23Z", "path": "doc/en/user/source/production/java.rst", "diffHunk": "@@ -3,98 +3,125 @@\n Java Considerations\n ===================\n \n-Use supported JRE\n------------------\n+Use a supported Java version \n+----------------------------\n \n-GeoServer's speed depends a lot on the chosen Java Runtime Environment (JRE). The latest versions of GeoServer are tested with both Oracle JRE and OpenJDK. Implementations other than those tested may work correctly, but are generally not recommended.\n+GeoServer's speed depends a lot on the chosen Java Runtime Environment (JRE). The latest versions of GeoServer are tested with both OpenJDK and Oracle. Implementations other than those tested may work correctly, but are generally not recommended.\n \n-Tested:\n+GeoServer is built and tested with Java 8 (Recommended), `supported up to 2026 <https://adoptopenjdk.net/support.html#roadmap>`_, and Java 11, `supported up to 2024 <https://adoptopenjdk.net/support.html#roadmap>`_. We recommend these long-term-support releases for production. Java has adopted development cycle with a release every six months containing experimental features. These releases are not tested with GeoServer and are not recommended for production.\n \n-* Java 11 and Java 8 - GeoServer 2.15.x and above (OpenJDK tested)\n-* Java 8 - GeoServer 2.9.x and above (OpenJDK and Oracle JRE tested)\n-* Java 7 - GeoServer 2.6.x to GeoServer 2.8.x (OpenJDK and Oracle JRE tested)\n-* Java 6 - GeoServer 2.3.x to GeoServer 2.5.x (Oracle JRE tested)\n-* Java 5 - GeoServer 2.2.x and earlier (Sun JRE tested)\n+For best performance we recommend the use *OpenJDK 8* (also known as JRE 1.8).\n \n-For best performance we recommend the use *Oracle JRE 8* (also known as JRE 1.8).\n+.. list-table:: Title\n+   :widths: 20, 10, 10, 10, 50\n+   :header-rows: 1\n \n-.. Further speed improvements can be released using `Marlin renderer <https://github.com/bourgesl/marlin-renderer>`__ alternate renderer.\n+   * - Java Version\n+     - OpenJDK\n+     - Oracle\n+     - Sun\n+     - GeoServer Compatibility\n+   * - **Java 11**\n+     - tested\n+     - tested\n+     -\n+     - GeoServer 2.15.x and above\n+   * - **Java 8**\n+     - tested\n+     - tested\n+     -\n+     - GeoServer 2.9.x and above\n+   * - Java 7 \n+     - tested\n+     - tested\n+     -\n+     - GeoServer 2.6.x to 2.8.x\n+   * - Java 6 \n+     - \n+     - tested\n+     -\n+     - GeoServer 2.3.x to 2.5.x\n+   * - Java 5 \n+     - \n+     - \n+     - tested\n+     - GeoServer 2.2.x and earlier", "originalCommit": "7171135b2e19f510439fa878dcb8b6efdf0f71b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMwMTA5MQ==", "url": "https://github.com/geoserver/geoserver/pull/4428#discussion_r458301091", "bodyText": "Clear recommendation of Java 8, provides a summary of the options, and then a heading to explore each idea.", "author": "jodygarnett", "createdAt": "2020-07-21T18:24:04Z", "path": "doc/en/user/source/production/java.rst", "diffHunk": "@@ -3,98 +3,125 @@\n Java Considerations\n ===================\n \n-Use supported JRE\n------------------\n+Use a supported Java version \n+----------------------------\n \n-GeoServer's speed depends a lot on the chosen Java Runtime Environment (JRE). The latest versions of GeoServer are tested with both Oracle JRE and OpenJDK. Implementations other than those tested may work correctly, but are generally not recommended.\n+GeoServer's speed depends a lot on the chosen Java Runtime Environment (JRE). The latest versions of GeoServer are tested with both OpenJDK and Oracle. Implementations other than those tested may work correctly, but are generally not recommended.\n \n-Tested:\n+GeoServer is built and tested with Java 8 (Recommended), `supported up to 2026 <https://adoptopenjdk.net/support.html#roadmap>`_, and Java 11, `supported up to 2024 <https://adoptopenjdk.net/support.html#roadmap>`_. We recommend these long-term-support releases for production. Java has adopted development cycle with a release every six months containing experimental features. These releases are not tested with GeoServer and are not recommended for production.\n \n-* Java 11 and Java 8 - GeoServer 2.15.x and above (OpenJDK tested)\n-* Java 8 - GeoServer 2.9.x and above (OpenJDK and Oracle JRE tested)\n-* Java 7 - GeoServer 2.6.x to GeoServer 2.8.x (OpenJDK and Oracle JRE tested)\n-* Java 6 - GeoServer 2.3.x to GeoServer 2.5.x (Oracle JRE tested)\n-* Java 5 - GeoServer 2.2.x and earlier (Sun JRE tested)\n+For best performance we recommend the use *OpenJDK 8* (also known as JRE 1.8).\n \n-For best performance we recommend the use *Oracle JRE 8* (also known as JRE 1.8).\n+.. list-table:: Title\n+   :widths: 20, 10, 10, 10, 50\n+   :header-rows: 1\n \n-.. Further speed improvements can be released using `Marlin renderer <https://github.com/bourgesl/marlin-renderer>`__ alternate renderer.\n+   * - Java Version\n+     - OpenJDK\n+     - Oracle\n+     - Sun\n+     - GeoServer Compatibility\n+   * - **Java 11**\n+     - tested\n+     - tested\n+     -\n+     - GeoServer 2.15.x and above\n+   * - **Java 8**\n+     - tested\n+     - tested\n+     -\n+     - GeoServer 2.9.x and above\n+   * - Java 7 \n+     - tested\n+     - tested\n+     -\n+     - GeoServer 2.6.x to 2.8.x\n+   * - Java 6 \n+     - \n+     - tested\n+     -\n+     - GeoServer 2.3.x to 2.5.x\n+   * - Java 5 \n+     - \n+     - \n+     - tested\n+     - GeoServer 2.2.x and earlier\n \n-As of GeoServer 2.0, a Java Runtime Environment (JRE) is sufficient to run GeoServer.  GeoServer no longer requires a Java Development Kit (JDK).\n+As of GeoServer 2.0, a Java Runtime Environment (JRE) is sufficient to run GeoServer.  GeoServer no longer requires installation of a complete Java Development Kit (JDK) with compiler.\n \n-Running on Java 11\n-------------------\n+Running on Java 8 (Recommended)\n+-------------------------------", "originalCommit": "7171135b2e19f510439fa878dcb8b6efdf0f71b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMwMTY4Nw==", "url": "https://github.com/geoserver/geoserver/pull/4428#discussion_r458301687", "bodyText": "New heading for Java 11, provides a summary of options, this way it is very clear Java 11 works out of the box and does not have as many optional installs.", "author": "jodygarnett", "createdAt": "2020-07-21T18:25:02Z", "path": "doc/en/user/source/production/java.rst", "diffHunk": "@@ -196,3 +223,16 @@ Installing native JAI manually\n You can install the native JAI manually if you encounter problems using the above installers, or if you wish to install the native JAI for more than one JDK/JRE.\n \n Please refer to the `GeoTools page on JAI installation <http://docs.geotools.org/latest/userguide/build/install/jdk.html#java-extensions-optional>`_ for details.\n+\n+Running on Java 11\n+------------------", "originalCommit": "7171135b2e19f510439fa878dcb8b6efdf0f71b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMwMjI2Mg==", "url": "https://github.com/geoserver/geoserver/pull/4428#discussion_r458302262", "bodyText": "Clear Java 8 subheading for Native JAI and ImageIO, and clearly not recommended.\nI considered taking this section to the wiki and removing it from our day-to-day user manual.", "author": "jodygarnett", "createdAt": "2020-07-21T18:26:03Z", "path": "doc/en/user/source/production/java.rst", "diffHunk": "@@ -3,98 +3,125 @@\n Java Considerations\n ===================\n \n-Use supported JRE\n------------------\n+Use a supported Java version \n+----------------------------\n \n-GeoServer's speed depends a lot on the chosen Java Runtime Environment (JRE). The latest versions of GeoServer are tested with both Oracle JRE and OpenJDK. Implementations other than those tested may work correctly, but are generally not recommended.\n+GeoServer's speed depends a lot on the chosen Java Runtime Environment (JRE). The latest versions of GeoServer are tested with both OpenJDK and Oracle. Implementations other than those tested may work correctly, but are generally not recommended.\n \n-Tested:\n+GeoServer is built and tested with Java 8 (Recommended), `supported up to 2026 <https://adoptopenjdk.net/support.html#roadmap>`_, and Java 11, `supported up to 2024 <https://adoptopenjdk.net/support.html#roadmap>`_. We recommend these long-term-support releases for production. Java has adopted development cycle with a release every six months containing experimental features. These releases are not tested with GeoServer and are not recommended for production.\n \n-* Java 11 and Java 8 - GeoServer 2.15.x and above (OpenJDK tested)\n-* Java 8 - GeoServer 2.9.x and above (OpenJDK and Oracle JRE tested)\n-* Java 7 - GeoServer 2.6.x to GeoServer 2.8.x (OpenJDK and Oracle JRE tested)\n-* Java 6 - GeoServer 2.3.x to GeoServer 2.5.x (Oracle JRE tested)\n-* Java 5 - GeoServer 2.2.x and earlier (Sun JRE tested)\n+For best performance we recommend the use *OpenJDK 8* (also known as JRE 1.8).\n \n-For best performance we recommend the use *Oracle JRE 8* (also known as JRE 1.8).\n+.. list-table:: Title\n+   :widths: 20, 10, 10, 10, 50\n+   :header-rows: 1\n \n-.. Further speed improvements can be released using `Marlin renderer <https://github.com/bourgesl/marlin-renderer>`__ alternate renderer.\n+   * - Java Version\n+     - OpenJDK\n+     - Oracle\n+     - Sun\n+     - GeoServer Compatibility\n+   * - **Java 11**\n+     - tested\n+     - tested\n+     -\n+     - GeoServer 2.15.x and above\n+   * - **Java 8**\n+     - tested\n+     - tested\n+     -\n+     - GeoServer 2.9.x and above\n+   * - Java 7 \n+     - tested\n+     - tested\n+     -\n+     - GeoServer 2.6.x to 2.8.x\n+   * - Java 6 \n+     - \n+     - tested\n+     -\n+     - GeoServer 2.3.x to 2.5.x\n+   * - Java 5 \n+     - \n+     - \n+     - tested\n+     - GeoServer 2.2.x and earlier\n \n-As of GeoServer 2.0, a Java Runtime Environment (JRE) is sufficient to run GeoServer.  GeoServer no longer requires a Java Development Kit (JDK).\n+As of GeoServer 2.0, a Java Runtime Environment (JRE) is sufficient to run GeoServer.  GeoServer no longer requires installation of a complete Java Development Kit (JDK) with compiler.\n \n-Running on Java 11\n-------------------\n+Running on Java 8 (Recommended)\n+-------------------------------\n+\n+GeoServer is built and tested with Java 8, long-term-support with industry `support up to 2026 <https://adoptopenjdk.net/support.html#roadmap>`_.\n+\n+Recommended:\n \n-GeoServer 2.15 will run under Java 11 with no additional configuration on **Tomcat 9** or newer and **Jetty 9.4.12** or newer.\n+* We recommend installation of the Marlin Renderer described next section\n+* Unlimited Strength Jurisdiction Policy Files are available for separate intallation\n \n-Running GeoServer under Java 11 on other Application Servers may require some additional configuration. Some Application Servers do not support Java 11 yet.\n+Available, but not recommended:\n \n-* **Wildfly 14** supports Java 11, with some additional configuration - in the run configuration, under VM arguments add:\n+* Java 8 is the last release to offer a native extension mechanism. GeoServer uses our own JAI-EXT image processing operations. In rare circumstances you may wish to disable JAI-EXT, and install Native JAI and ImageIO extensions.\n \n-      --add-modules=java.se\n+.. _java_marlin:\n \n-  Future WildFly releases should support Java 11 with no additional configuration.\n+Marlin renderer (Recommended)\n+`````````````````````````````\n \n-* **GlassFish** does not currently Java 11, although the upcoming 5.0.1 release is expected to include support for it.\n+Further speed improvements can be released using `Marlin renderer <https://github.com/bourgesl/marlin-renderer>`__ alternate renderer for Java 8.\n \n-* **WebLogic** do not yet support Java 11.\n+Before Java 9, OpenJDK the Pisces renderer, and Oracle used the Ductus renderer, to rasterize vector data respectively.  In Java 9 onward they use Marlin renderer which has better overall performance in most situations than either Pisces or Ductus.\n+\n+In order to enable Marlin on Java 8, see :ref:`production_container.marlin` on the next page.\n \n .. _java_policyfiles:\n \n Installing Unlimited Strength Jurisdiction Policy Files\n--------------------------------------------------------\n+```````````````````````````````````````````````````````\n These policy files are needed for unlimited cryptography. As an example, Java does not support AES\n-with a key length of 256 bit. Installing the policy files removes these restrictions.\n+with a key length of 256 bit.\n \n-Open JDK\n-````````\n \n-Since Open JDK is Open Source, the policy files are already installed.   \n+#. Installing the policy files removes these restrictions.\n \n-Oracle Java\n-```````````\n+   * OpenJDK\n \n-The policy files are available at   \n+     Since Open JDK is Open Source, the policy files are already installed.   \n \n-* `Java 8 JCE policy jars <http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html>`__ \n+   * Oracle Java\n \n-The download contains two files, **local_policy.jar** and  **US_export_policy.jar**. The default\n-versions of these two files are stored in JRE_HOME/lib/security. Replace these two files with the\n-versions from the download. \n+     The policy files are available at `Java 8 JCE policy jars <http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html>`__.\n \n+     The download contains two files, **local_policy.jar** and  **US_export_policy.jar**. The default ersions of these two files are stored in :file:`JRE_HOME/lib/security`. Replace these two files with the versions from the download. \n \n-Test if unlimited key length is available\n-\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n+   * IBM Java\n \n-Start or restart GeoServer and login as administrator. The annotated warning should have disappeared.\n+     The policy files are available at `IBM JCE policy jars <https://www14.software.ibm.com/webapp/iwm/web/preLogin.do?source=jcesdk>`__. \n \n-.. figure:: ../security/webadmin/images/unlimitedkey.png\n+     An IBM ID is needed to log in. The installation is identical to Oracle.\n \n-Additionally, the GeoServer log file should contain the following line::\n+#. Test if unlimited key length is available\n \n-   \"Strong cryptography is available\"\n+   Start or restart GeoServer and login as administrator. The annotated warning should have disappeared.\n \n-.. note::\n+   .. figure:: ../security/webadmin/images/unlimitedkey.png\n \n-   The replacement has to be done for each update of the Java runtime. \n+#. Additionally, the GeoServer log file should contain the following line::\n \n-IBM Java\n-````````\n+      \"Strong cryptography is available\"\n \n-The policy files are available at\n+.. note::\n \n-* `IBM JCE policy jars <https://www14.software.ibm.com/webapp/iwm/web/preLogin.do?source=jcesdk>`_ \n+   The installing these policy files needs to be done for each update of the Java runtime. \n \n-An IBM ID is needed to log in. The installation is identical to Oracle.\n+Native JAI and ImageIO extensions (not recommended)", "originalCommit": "7171135b2e19f510439fa878dcb8b6efdf0f71b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA3MDE1NA==", "url": "https://github.com/geoserver/geoserver/pull/4428#discussion_r460070154", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Java 11 includes Installing Unlimited Strength Jurisdiction Policy Files\n          \n          \n            \n            * Java 11 includes the Unlimited Strength Jurisdiction Policy Files, no need for a separate installation", "author": "aaime", "createdAt": "2020-07-24T13:59:48Z", "path": "doc/en/user/source/production/java.rst", "diffHunk": "@@ -196,3 +223,16 @@ Installing native JAI manually\n You can install the native JAI manually if you encounter problems using the above installers, or if you wish to install the native JAI for more than one JDK/JRE.\n \n Please refer to the `GeoTools page on JAI installation <http://docs.geotools.org/latest/userguide/build/install/jdk.html#java-extensions-optional>`_ for details.\n+\n+Running on Java 11\n+------------------\n+\n+GeoServer is tested with Java 11 (LTS), with industry `support up to 2024 <https://adoptopenjdk.net/support.html#roadmap>`_. \n+\n+GeoServer 2.15 onward will run under Java 11 with no additional configuration on **Tomcat 9** or newer and **Jetty 9.4.12** or newer. Running GeoServer using Java 11 on other Application Servers may require some additional configuration as not all Application Servers support Java 11 yet.\n+\n+* Java 11 already includes Marlin Renderer, although you may wish to consider installing a newer version\n+* Java 11 includes Installing Unlimited Strength Jurisdiction Policy Files", "originalCommit": "7171135b2e19f510439fa878dcb8b6efdf0f71b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cef260d8aa19d15a09b935940ed4d2121bb35b89", "url": "https://github.com/geoserver/geoserver/commit/cef260d8aa19d15a09b935940ed4d2121bb35b89", "message": "Update doc/en/user/source/production/java.rst\n\nCo-authored-by: Andrea Aime <andrea.aime@gmail.com>", "committedDate": "2020-07-29T19:01:00Z", "type": "commit"}]}