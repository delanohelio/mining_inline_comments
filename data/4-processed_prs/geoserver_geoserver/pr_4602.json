{"pr_number": 4602, "pr_title": "[GEOS-9828]: REST support ImageMosaic Harvesting COG datasets", "pr_createdAt": "2020-12-14T11:51:40Z", "pr_url": "https://github.com/geoserver/geoserver/pull/4602", "timeline": [{"oid": "5850e130dc81d2aa2be0552f84ee4daf4eef4b14", "url": "https://github.com/geoserver/geoserver/commit/5850e130dc81d2aa2be0552f84ee4daf4eef4b14", "message": "[GEOS-9828]: REST support ImageMosaic Harvesting COG datasets", "committedDate": "2020-12-14T14:02:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIxNzI1Nw==", "url": "https://github.com/geoserver/geoserver/pull/4602#discussion_r545217257", "bodyText": "This test talks to a remote resource that might not be available (e.g., machine not connected to internet), or the image in question might be eventually removed, or moved. Is it possible to make it an online test, so that it runs only when a  given profile is used, or at least check if the remote file is there?\nCould be done with an Assume I suppose, and code similar to this to verify the remote file is at least reachable: https://github.com/geoserver/geoserver/blob/master/src/web/core/src/test/java/org/geoserver/web/GeoServerWicketOnlineTestSupport.java#L19\nI was also considering calling this \"CogRemoteHarvestOnlineTest\", but unlike GeoTools, GeoServer does not have online test skipping, AFAIK.", "author": "aaime", "createdAt": "2020-12-17T16:18:15Z", "path": "src/community/cog/src/test/java/org/geoserver/rest/catalog/CogRemoteHarvestTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.rest.catalog;\n+\n+import static org.custommonkey.xmlunit.XMLAssert.assertXpathEvaluatesTo;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.custommonkey.xmlunit.SimpleNamespaceContext;\n+import org.custommonkey.xmlunit.XMLAssert;\n+import org.custommonkey.xmlunit.XMLUnit;\n+import org.geoserver.data.test.SystemTestData;\n+import org.geoserver.rest.RestBaseController;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import org.w3c.dom.Document;\n+\n+public class CogRemoteHarvestTest extends CatalogRESTTestSupport {", "originalCommit": "5850e130dc81d2aa2be0552f84ee4daf4eef4b14", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzMDY5Nw==", "url": "https://github.com/geoserver/geoserver/pull/4602#discussion_r545230697", "bodyText": "A bit dangerous, there is no indication of the charset that might have been used.\nBetter to get the reader from the request instead of the stream:\n   test = IOUtils.toString(request.getReader()); \n\nUsing commons-io IOUtils.", "author": "aaime", "createdAt": "2020-12-17T16:35:57Z", "path": "src/restconfig/src/main/java/org/geoserver/rest/catalog/CoverageStoreFileController.java", "diffHunk": "@@ -453,4 +459,27 @@ protected Resource findPrimaryFile(Resource directory, String format) {\n         return handleFileUpload(\n                 storeName, workspaceName, filename, method, format, directory, request);\n     }\n+\n+    /** Return the remote URL provided in the request. */\n+    protected URL handleRemoteUrl(HttpServletRequest request) {\n+\n+        try {\n+            // get the URL to be harvested\n+            final String stringURL;\n+            try (InputStream inStream = request.getInputStream()) {\n+                stringURL = IOUtils.getStringFromStream(inStream);", "originalCommit": "5850e130dc81d2aa2be0552f84ee4daf4eef4b14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc0OTI2Nw==", "url": "https://github.com/geoserver/geoserver/pull/4602#discussion_r545749267", "bodyText": "Done", "author": "dromagnoli", "createdAt": "2020-12-18T10:43:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzMDY5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzMTQ3NQ==", "url": "https://github.com/geoserver/geoserver/pull/4602#discussion_r545231475", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Throwable t) {\n          \n          \n            \n                        if (t instanceof RestException) {\n          \n          \n            \n                            throw (RestException) t;\n          \n          \n            \n                        } else {\n          \n          \n            \n                            throw new RestException(\n          \n          \n            \n                                    \"Error while retrieving the remote URL:\",\n          \n          \n            \n                                    HttpStatus.INTERNAL_SERVER_ERROR,\n          \n          \n            \n                                    t);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    } catch (RestException t) {\n          \n          \n            \n                       throw t;\n          \n          \n            \n                    } catch (Throwable t) {\n          \n          \n            \n                            throw new RestException(\n          \n          \n            \n                                    \"Error while retrieving the remote URL:\",\n          \n          \n            \n                                    HttpStatus.INTERNAL_SERVER_ERROR,\n          \n          \n            \n                                    t);\n          \n          \n            \n                    }", "author": "aaime", "createdAt": "2020-12-17T16:36:55Z", "path": "src/restconfig/src/main/java/org/geoserver/rest/catalog/CoverageStoreFileController.java", "diffHunk": "@@ -453,4 +459,27 @@ protected Resource findPrimaryFile(Resource directory, String format) {\n         return handleFileUpload(\n                 storeName, workspaceName, filename, method, format, directory, request);\n     }\n+\n+    /** Return the remote URL provided in the request. */\n+    protected URL handleRemoteUrl(HttpServletRequest request) {\n+\n+        try {\n+            // get the URL to be harvested\n+            final String stringURL;\n+            try (InputStream inStream = request.getInputStream()) {\n+                stringURL = IOUtils.getStringFromStream(inStream);\n+                URL remoteUrl = new URL(stringURL);\n+                return remoteUrl;\n+            }\n+        } catch (Throwable t) {\n+            if (t instanceof RestException) {\n+                throw (RestException) t;\n+            } else {\n+                throw new RestException(\n+                        \"Error while retrieving the remote URL:\",\n+                        HttpStatus.INTERNAL_SERVER_ERROR,\n+                        t);\n+            }\n+        }", "originalCommit": "5850e130dc81d2aa2be0552f84ee4daf4eef4b14", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2aa31463a3b3689b8e8d130b03d31db6bffb185f", "url": "https://github.com/geoserver/geoserver/commit/2aa31463a3b3689b8e8d130b03d31db6bffb185f", "message": "[GEOS-9828]: REST support ImageMosaic Harvesting COG datasets", "committedDate": "2020-12-18T10:31:00Z", "type": "commit"}, {"oid": "2aa31463a3b3689b8e8d130b03d31db6bffb185f", "url": "https://github.com/geoserver/geoserver/commit/2aa31463a3b3689b8e8d130b03d31db6bffb185f", "message": "[GEOS-9828]: REST support ImageMosaic Harvesting COG datasets", "committedDate": "2020-12-18T10:31:00Z", "type": "forcePushed"}]}