{"pr_number": 1419, "pr_title": "Handle non-existent topic while setting/removing throttled replicas for a topic", "pr_createdAt": "2020-12-10T02:28:10Z", "pr_url": "https://github.com/linkedin/cruise-control/pull/1419", "timeline": [{"oid": "97587df5007aeb7cec872e53011b73e9f0f8981c", "url": "https://github.com/linkedin/cruise-control/commit/97587df5007aeb7cec872e53011b73e9f0f8981c", "message": "Handle non-existent topic while setting/removing throttled replicas for a topic", "committedDate": "2020-12-10T01:58:35Z", "type": "commit"}, {"oid": "fb4cb692388e835524196e088d738abbc6cbe920", "url": "https://github.com/linkedin/cruise-control/commit/fb4cb692388e835524196e088d738abbc6cbe920", "message": "Add check for changeTopicConfigs(...)", "committedDate": "2020-12-10T01:58:35Z", "type": "commit"}, {"oid": "4bd36db185cba26356847e64cc154ce34be9701d", "url": "https://github.com/linkedin/cruise-control/commit/4bd36db185cba26356847e64cc154ce34be9701d", "message": "Replace warn log with debug log", "committedDate": "2020-12-10T01:58:35Z", "type": "commit"}, {"oid": "a15c7d4548974db892b7a4829f1395e742fea101", "url": "https://github.com/linkedin/cruise-control/commit/a15c7d4548974db892b7a4829f1395e742fea101", "message": "Remove unused import", "committedDate": "2020-12-10T01:58:35Z", "type": "commit"}, {"oid": "900fae820cbf9e2cdccbc490ffa1a1d1966740c3", "url": "https://github.com/linkedin/cruise-control/commit/900fae820cbf9e2cdccbc490ffa1a1d1966740c3", "message": "[WIP] Add unit test", "committedDate": "2020-12-10T01:58:35Z", "type": "commit"}, {"oid": "3b731f4ddc4f5fce9e58c758f0ec05225ce2c88e", "url": "https://github.com/linkedin/cruise-control/commit/3b731f4ddc4f5fce9e58c758f0ec05225ce2c88e", "message": "Add an unit test", "committedDate": "2020-12-10T01:58:35Z", "type": "commit"}, {"oid": "33923bcbc6ccda831f6ccf98bc9a2c9bcb8a519a", "url": "https://github.com/linkedin/cruise-control/commit/33923bcbc6ccda831f6ccf98bc9a2c9bcb8a519a", "message": "Fix failed unit tests", "committedDate": "2020-12-10T02:25:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxODAxMQ==", "url": "https://github.com/linkedin/cruise-control/pull/1419#discussion_r539818011", "bodyText": "Why do we need this change?\n\nWould getEntityConfigs ever expected to return null and if so, would null response imply that the topic does not exist?\nWhat do we gain by checking the topic existence here even if topic config does not exist? What happens if we just read the empty topic configs and continue with the rest of the code as before? Don't we check for topic existence in case of a failure to update the topic configs later in the code below? For cases, where topic exists, wouldn't this redundant call cause an extra network overhead to communicate with ZK?\n... means means topic does not exist -> means x2", "author": "efeg", "createdAt": "2020-12-10T03:29:53Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -176,9 +176,18 @@ private void setFollowerThrottledReplicas(String topic, Set<String> replicas) {\n \n   private void setThrottledReplicas(String topic, Set<String> replicas, boolean throttleLeaderReplica) {\n     String replicaThrottleConfigKey = throttleLeaderReplica ? LEADER_THROTTLED_REPLICAS : FOLLOWER_THROTTLED_REPLICAS;\n-\n-    Properties config = _kafkaZkClient.getEntityConfigs(ConfigType.Topic(), topic);\n-    String currThrottledReplicas = config.getProperty(replicaThrottleConfigKey);\n+    Properties topicConfigs = _kafkaZkClient.getEntityConfigs(ConfigType.Topic(), topic);\n+    if (topicConfigs == null || topicConfigs.isEmpty()) {\n+      // Not assume that no topic config means means topic does not exist. Always check topic existence in this situation\n+      if (!_kafkaZkClient.topicExists(topic)) {\n+        LOG.debug(\"Skip setting throttled replicas {} for topic {} since topic does not exist\", String.join(\",\", replicas), topic);\n+        return;\n+      }\n+      if (topicConfigs == null) {\n+        topicConfigs = new Properties();\n+      }\n+    }", "originalCommit": "33923bcbc6ccda831f6ccf98bc9a2c9bcb8a519a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg3NTA0NA==", "url": "https://github.com/linkedin/cruise-control/pull/1419#discussion_r539875044", "bodyText": "It's safer to assume getEntityConfigs might return null since it does not claim it never returns null as its public contract\nYou are right. No need to check the topic existence here.\nFixed", "author": "Lincong", "createdAt": "2020-12-10T06:10:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxODAxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxOTI0OA==", "url": "https://github.com/linkedin/cruise-control/pull/1419#discussion_r539819248", "bodyText": "In case of a failure due to a non-existing topic, this call is expected to get AdminOperationException. Why don't we catch this specific exception rather than Exception, which is too broad?", "author": "efeg", "createdAt": "2020-12-10T03:33:20Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -189,8 +198,26 @@ private void setThrottledReplicas(String topic, Set<String> replicas, boolean th\n     if (currThrottledReplicas != null) {\n       newThrottledReplicas.addAll(Arrays.asList(currThrottledReplicas.split(\",\")));\n     }\n-    config.setProperty(replicaThrottleConfigKey, String.join(\",\", newThrottledReplicas));\n-    ExecutorUtils.changeTopicConfig(_adminZkClient, topic, config);\n+    topicConfigs.setProperty(replicaThrottleConfigKey, String.join(\",\", newThrottledReplicas));\n+    changeTopicConfigs(topic, topicConfigs);\n+  }\n+\n+  /**\n+   * Update topic configuration properties if a topic exist. No-op for non-existent topic\n+   *\n+   * @param topicName topic name\n+   * @param topicConfigs configuration properties to update\n+   */\n+  private void changeTopicConfigs(String topicName, Properties topicConfigs) {\n+    try {\n+      ExecutorUtils.changeTopicConfig(_adminZkClient, topicName, topicConfigs);\n+    } catch (Exception e) {", "originalCommit": "33923bcbc6ccda831f6ccf98bc9a2c9bcb8a519a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzNDk2Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1419#discussion_r539834963", "bodyText": "The AdminZkClient.changeTopicConfig API does not claim that it might throw AdminOperationException. Even though we know that is the kind of exception it might throw, we should not make this assumption unless it's part of the public contract.", "author": "Lincong", "createdAt": "2020-12-10T04:23:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxOTI0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyMTAzMA==", "url": "https://github.com/linkedin/cruise-control/pull/1419#discussion_r539821030", "bodyText": "Nit: Change no configs for -> Failed to change configs for.", "author": "efeg", "createdAt": "2020-12-10T03:38:33Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -189,8 +198,26 @@ private void setThrottledReplicas(String topic, Set<String> replicas, boolean th\n     if (currThrottledReplicas != null) {\n       newThrottledReplicas.addAll(Arrays.asList(currThrottledReplicas.split(\",\")));\n     }\n-    config.setProperty(replicaThrottleConfigKey, String.join(\",\", newThrottledReplicas));\n-    ExecutorUtils.changeTopicConfig(_adminZkClient, topic, config);\n+    topicConfigs.setProperty(replicaThrottleConfigKey, String.join(\",\", newThrottledReplicas));\n+    changeTopicConfigs(topic, topicConfigs);\n+  }\n+\n+  /**\n+   * Update topic configuration properties if a topic exist. No-op for non-existent topic\n+   *\n+   * @param topicName topic name\n+   * @param topicConfigs configuration properties to update\n+   */\n+  private void changeTopicConfigs(String topicName, Properties topicConfigs) {\n+    try {\n+      ExecutorUtils.changeTopicConfig(_adminZkClient, topicName, topicConfigs);\n+    } catch (Exception e) {\n+      if (!_kafkaZkClient.topicExists(topicName)) {\n+        LOG.debug(\"Change no configs for topic {} since it does not exist\", topicName);", "originalCommit": "33923bcbc6ccda831f6ccf98bc9a2c9bcb8a519a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyMTc3Mg==", "url": "https://github.com/linkedin/cruise-control/pull/1419#discussion_r539821772", "bodyText": "Can this ever be null?", "author": "efeg", "createdAt": "2020-12-10T03:40:58Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -260,12 +287,16 @@ private boolean removeFollowerThrottledReplicasFromTopic(Properties config, Stri\n   }\n \n   private void removeThrottledReplicasFromTopic(String topic, Set<String> replicas) {\n-    Properties config = _kafkaZkClient.getEntityConfigs(ConfigType.Topic(), topic);\n-    boolean removedLeaderThrottle = removeLeaderThrottledReplicasFromTopic(config, topic, replicas);\n-    boolean removedFollowerThrottle = removeFollowerThrottledReplicasFromTopic(config, topic, replicas);\n+    Properties topicConfigs = _kafkaZkClient.getEntityConfigs(ConfigType.Topic(), topic);\n+    if (topicConfigs == null || topicConfigs.isEmpty()) {", "originalCommit": "33923bcbc6ccda831f6ccf98bc9a2c9bcb8a519a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzMzQ0OQ==", "url": "https://github.com/linkedin/cruise-control/pull/1419#discussion_r539833449", "bodyText": "The current implementation of the getEntityConfigs method does not return null. However, it's not safe to assume it will never return null. We can assume it will not return null only if the API clearly claims its behavior.", "author": "Lincong", "createdAt": "2020-12-10T04:19:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyMTc3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU1Njk3Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1419#discussion_r540556973", "bodyText": "-- Discussed offline.\nWe will keep the existing logic because API contract leaves the behavior unspecified and the implementation does not return null. Hence, we cannot assume that if a future version happens to start returning null it would imply that the topic does not exist (i.e. it can return null for some other irrelevant reason). Thus, It is safer to fail if a behavior change causes a null response.", "author": "efeg", "createdAt": "2020-12-10T22:53:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyMTc3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyNzc5MA==", "url": "https://github.com/linkedin/cruise-control/pull/1419#discussion_r539827790", "bodyText": "When would this be expected to happen?\nHere are some scenarios that I can think of:\n(1) a topic is deleted and then shortly after recreated with the same name with no config,\n(2) someone externally overrides the configs,\n(3) a programming error\nIf it happens due to (1) or (2), are users expected to do anything if they see this warning log? Does the way we handle it suffice to provide the right behavior?\nAssuming that we have proper testing so that (3) is unlikely, should we make this a debug level log so that we don't cause extra logs that are not actionable?", "author": "efeg", "createdAt": "2020-12-10T04:00:23Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -260,12 +287,16 @@ private boolean removeFollowerThrottledReplicasFromTopic(Properties config, Stri\n   }\n \n   private void removeThrottledReplicasFromTopic(String topic, Set<String> replicas) {\n-    Properties config = _kafkaZkClient.getEntityConfigs(ConfigType.Topic(), topic);\n-    boolean removedLeaderThrottle = removeLeaderThrottledReplicasFromTopic(config, topic, replicas);\n-    boolean removedFollowerThrottle = removeFollowerThrottledReplicasFromTopic(config, topic, replicas);\n+    Properties topicConfigs = _kafkaZkClient.getEntityConfigs(ConfigType.Topic(), topic);\n+    if (topicConfigs == null || topicConfigs.isEmpty()) {\n+      LOG.warn(\"Skip removing throttled replicas {} from topic {} since no configs can be read\", String.join(\",\", replicas), topic);", "originalCommit": "33923bcbc6ccda831f6ccf98bc9a2c9bcb8a519a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MTMzMQ==", "url": "https://github.com/linkedin/cruise-control/pull/1419#discussion_r539841331", "bodyText": "OK, I agree that we can change it to debug level", "author": "Lincong", "createdAt": "2020-12-10T04:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyNzc5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyODU3OQ==", "url": "https://github.com/linkedin/cruise-control/pull/1419#discussion_r539828579", "bodyText": "Nit: ... -> new Properties(2);?", "author": "efeg", "createdAt": "2020-12-10T04:03:05Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java", "diffHunk": "@@ -101,6 +101,57 @@ public void testIsNoOpWhenThrottleIsNull() {\n     throttleHelper.clearThrottles(Collections.singletonList(task), Collections.emptyList());\n   }\n \n+  @Test\n+  public void testSetThrottleOnNonExistentTopic() {\n+    final long throttleRate = 100L;\n+    final int brokerId0 = 0;\n+    final int brokerId1 = 1;\n+    final int brokerId2 = 2;\n+    final int partitionId = 0;\n+    // A proposal to move a partition with 2 replicas from broker 0 and 1 to broker 0 and 2\n+    ExecutionProposal proposal = new ExecutionProposal(new TopicPartition(TOPIC0, partitionId),\n+                                           100,\n+                                                       new ReplicaPlacementInfo(brokerId0),\n+                                                       Arrays.asList(new ReplicaPlacementInfo(brokerId0), new ReplicaPlacementInfo(brokerId1)),\n+                                                       Arrays.asList(new ReplicaPlacementInfo(brokerId0), new ReplicaPlacementInfo(brokerId2)));\n+\n+    KafkaZkClient mockKafkaZkClient = EasyMock.mock(KafkaZkClient.class);\n+    prepareKafkaZkClientMockWithBrokerConfigs(mockKafkaZkClient);\n+    // Case 1: a situation where Topic0 does not exist. Hence no property is returned upon read.\n+    EasyMock.expect(mockKafkaZkClient.getEntityConfigs(ConfigType.Topic(), TOPIC0)).andReturn(new Properties()).times(2);\n+    EasyMock.expect(mockKafkaZkClient.topicExists(TOPIC0)).andReturn(false).times(2);\n+    EasyMock.replay(mockKafkaZkClient);\n+    ReplicationThrottleHelper throttleHelper = new ReplicationThrottleHelper(mockKafkaZkClient, throttleRate);\n+\n+    throttleHelper.setThrottles(Collections.singletonList(proposal));\n+    EasyMock.verify(mockKafkaZkClient);\n+\n+    // Case 2: a situation where Topic0 gets deleted after its configs were read. Change configs should not fail.\n+    EasyMock.reset(mockKafkaZkClient);\n+    prepareKafkaZkClientMockWithBrokerConfigs(mockKafkaZkClient);\n+    Properties topicConfigProps = new Properties();\n+    String throttledReplicas = brokerId0 + \",\" + brokerId1;\n+    topicConfigProps.put(ReplicationThrottleHelper.LEADER_THROTTLED_REPLICAS, throttledReplicas);\n+    topicConfigProps.put(ReplicationThrottleHelper.FOLLOWER_THROTTLED_REPLICAS, throttledReplicas);\n+    EasyMock.expect(mockKafkaZkClient.getEntityConfigs(ConfigType.Topic(), TOPIC0)).andReturn(topicConfigProps).times(2);\n+    EasyMock.expect(mockKafkaZkClient.topicExists(TOPIC0)).andReturn(false).times(4);\n+    EasyMock.replay(mockKafkaZkClient);\n+\n+    throttleHelper.setThrottles(Collections.singletonList(proposal));\n+    EasyMock.verify(mockKafkaZkClient);\n+  }\n+\n+  private void prepareKafkaZkClientMockWithBrokerConfigs(KafkaZkClient mockKafkaZkClient) {\n+    // All participating brokers have throttled rate set already\n+    Properties brokerThrottledRateProps = new Properties();", "originalCommit": "33923bcbc6ccda831f6ccf98bc9a2c9bcb8a519a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzNDI4Nw==", "url": "https://github.com/linkedin/cruise-control/pull/1419#discussion_r539834287", "bodyText": "I don't think java.util. Properties class has a constructor that takes a size parameter.", "author": "Lincong", "createdAt": "2020-12-10T04:21:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyODU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU1NDkyNg==", "url": "https://github.com/linkedin/cruise-control/pull/1419#discussion_r540554926", "bodyText": "It does in Java 11 -- but it is fine to keep it as is for supporting Java 8+. https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Properties.html#%3Cinit%3E(int)", "author": "efeg", "createdAt": "2020-12-10T22:49:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyODU3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyOTY3Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1419#discussion_r539829673", "bodyText": "Nit: ... -> new Properties(2);?", "author": "efeg", "createdAt": "2020-12-10T04:06:44Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java", "diffHunk": "@@ -101,6 +101,57 @@ public void testIsNoOpWhenThrottleIsNull() {\n     throttleHelper.clearThrottles(Collections.singletonList(task), Collections.emptyList());\n   }\n \n+  @Test\n+  public void testSetThrottleOnNonExistentTopic() {\n+    final long throttleRate = 100L;\n+    final int brokerId0 = 0;\n+    final int brokerId1 = 1;\n+    final int brokerId2 = 2;\n+    final int partitionId = 0;\n+    // A proposal to move a partition with 2 replicas from broker 0 and 1 to broker 0 and 2\n+    ExecutionProposal proposal = new ExecutionProposal(new TopicPartition(TOPIC0, partitionId),\n+                                           100,\n+                                                       new ReplicaPlacementInfo(brokerId0),\n+                                                       Arrays.asList(new ReplicaPlacementInfo(brokerId0), new ReplicaPlacementInfo(brokerId1)),\n+                                                       Arrays.asList(new ReplicaPlacementInfo(brokerId0), new ReplicaPlacementInfo(brokerId2)));\n+\n+    KafkaZkClient mockKafkaZkClient = EasyMock.mock(KafkaZkClient.class);\n+    prepareKafkaZkClientMockWithBrokerConfigs(mockKafkaZkClient);\n+    // Case 1: a situation where Topic0 does not exist. Hence no property is returned upon read.\n+    EasyMock.expect(mockKafkaZkClient.getEntityConfigs(ConfigType.Topic(), TOPIC0)).andReturn(new Properties()).times(2);\n+    EasyMock.expect(mockKafkaZkClient.topicExists(TOPIC0)).andReturn(false).times(2);\n+    EasyMock.replay(mockKafkaZkClient);\n+    ReplicationThrottleHelper throttleHelper = new ReplicationThrottleHelper(mockKafkaZkClient, throttleRate);\n+\n+    throttleHelper.setThrottles(Collections.singletonList(proposal));\n+    EasyMock.verify(mockKafkaZkClient);\n+\n+    // Case 2: a situation where Topic0 gets deleted after its configs were read. Change configs should not fail.\n+    EasyMock.reset(mockKafkaZkClient);\n+    prepareKafkaZkClientMockWithBrokerConfigs(mockKafkaZkClient);\n+    Properties topicConfigProps = new Properties();", "originalCommit": "33923bcbc6ccda831f6ccf98bc9a2c9bcb8a519a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzNDI0Ng==", "url": "https://github.com/linkedin/cruise-control/pull/1419#discussion_r539834246", "bodyText": "I don't think java.util. Properties class has a constructor that takes a size parameter.", "author": "Lincong", "createdAt": "2020-12-10T04:21:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyOTY3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzMDg4Nw==", "url": "https://github.com/linkedin/cruise-control/pull/1419#discussion_r539830887", "bodyText": "Should we test the changes in removeThrottledReplicasFromTopic, too?", "author": "efeg", "createdAt": "2020-12-10T04:10:34Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java", "diffHunk": "@@ -101,6 +101,57 @@ public void testIsNoOpWhenThrottleIsNull() {\n     throttleHelper.clearThrottles(Collections.singletonList(task), Collections.emptyList());\n   }\n \n+  @Test\n+  public void testSetThrottleOnNonExistentTopic() {\n+    final long throttleRate = 100L;\n+    final int brokerId0 = 0;\n+    final int brokerId1 = 1;\n+    final int brokerId2 = 2;\n+    final int partitionId = 0;\n+    // A proposal to move a partition with 2 replicas from broker 0 and 1 to broker 0 and 2\n+    ExecutionProposal proposal = new ExecutionProposal(new TopicPartition(TOPIC0, partitionId),\n+                                           100,\n+                                                       new ReplicaPlacementInfo(brokerId0),\n+                                                       Arrays.asList(new ReplicaPlacementInfo(brokerId0), new ReplicaPlacementInfo(brokerId1)),\n+                                                       Arrays.asList(new ReplicaPlacementInfo(brokerId0), new ReplicaPlacementInfo(brokerId2)));\n+\n+    KafkaZkClient mockKafkaZkClient = EasyMock.mock(KafkaZkClient.class);\n+    prepareKafkaZkClientMockWithBrokerConfigs(mockKafkaZkClient);\n+    // Case 1: a situation where Topic0 does not exist. Hence no property is returned upon read.\n+    EasyMock.expect(mockKafkaZkClient.getEntityConfigs(ConfigType.Topic(), TOPIC0)).andReturn(new Properties()).times(2);\n+    EasyMock.expect(mockKafkaZkClient.topicExists(TOPIC0)).andReturn(false).times(2);\n+    EasyMock.replay(mockKafkaZkClient);\n+    ReplicationThrottleHelper throttleHelper = new ReplicationThrottleHelper(mockKafkaZkClient, throttleRate);\n+\n+    throttleHelper.setThrottles(Collections.singletonList(proposal));\n+    EasyMock.verify(mockKafkaZkClient);\n+\n+    // Case 2: a situation where Topic0 gets deleted after its configs were read. Change configs should not fail.\n+    EasyMock.reset(mockKafkaZkClient);\n+    prepareKafkaZkClientMockWithBrokerConfigs(mockKafkaZkClient);\n+    Properties topicConfigProps = new Properties();\n+    String throttledReplicas = brokerId0 + \",\" + brokerId1;\n+    topicConfigProps.put(ReplicationThrottleHelper.LEADER_THROTTLED_REPLICAS, throttledReplicas);\n+    topicConfigProps.put(ReplicationThrottleHelper.FOLLOWER_THROTTLED_REPLICAS, throttledReplicas);\n+    EasyMock.expect(mockKafkaZkClient.getEntityConfigs(ConfigType.Topic(), TOPIC0)).andReturn(topicConfigProps).times(2);\n+    EasyMock.expect(mockKafkaZkClient.topicExists(TOPIC0)).andReturn(false).times(4);\n+    EasyMock.replay(mockKafkaZkClient);\n+\n+    throttleHelper.setThrottles(Collections.singletonList(proposal));", "originalCommit": "33923bcbc6ccda831f6ccf98bc9a2c9bcb8a519a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg3MTYxOQ==", "url": "https://github.com/linkedin/cruise-control/pull/1419#discussion_r539871619", "bodyText": "Yes, test added", "author": "Lincong", "createdAt": "2020-12-10T06:06:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzMDg4Nw=="}], "type": "inlineReview"}, {"oid": "1ab672c3d246c28d46c3c4aa57ce3487a75c20fa", "url": "https://github.com/linkedin/cruise-control/commit/1ab672c3d246c28d46c3c4aa57ce3487a75c20fa", "message": "Add test for removeThrottledReplicasFromTopic method", "committedDate": "2020-12-10T06:06:54Z", "type": "commit"}, {"oid": "1ec830d8362ab85fa5e76209b17c8de7930d14f4", "url": "https://github.com/linkedin/cruise-control/commit/1ec830d8362ab85fa5e76209b17c8de7930d14f4", "message": "Remove null handling of ZkClient returned topic configs", "committedDate": "2020-12-10T18:30:22Z", "type": "commit"}]}