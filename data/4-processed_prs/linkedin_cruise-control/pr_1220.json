{"pr_number": 1220, "pr_title": "Enabling backoff on metrics topic creation", "pr_createdAt": "2020-05-29T15:16:11Z", "pr_url": "https://github.com/linkedin/cruise-control/pull/1220", "timeline": [{"oid": "1ef3a4791f6f9993ec0a30a13a41144777fa0b2c", "url": "https://github.com/linkedin/cruise-control/commit/1ef3a4791f6f9993ec0a30a13a41144777fa0b2c", "message": "Make metrics topic creation timeout configurable\nEnabling backoff on metrics topic creation", "committedDate": "2020-05-29T15:11:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNzI2Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1220#discussion_r433517263", "bodyText": "Nit: Can we update (1) the config name and (2) the corresponding static variables for config and its doc to represent the unit of the timeout? -- i.e. can we add .ms and _MS prefixes, respectively?", "author": "efeg", "createdAt": "2020-06-01T22:11:01Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporterConfig.java", "diffHunk": "@@ -27,6 +27,11 @@\n   public static final String CRUISE_CONTROL_METRICS_TOPIC_AUTO_CREATE_CONFIG = \"cruise.control.metrics.topic.auto.create\";\n   private static final String CRUISE_CONTROL_METRICS_TOPIC_AUTO_CREATE_DOC = \"Cruise Control metrics reporter will enforce \" +\n       \" the creation of the topic at launch\";\n+  public static final String CRUISE_CONTROL_METRICS_TOPIC_AUTO_CREATE_TIMEOUT_CONFIG = \"cruise.control.metrics.topic.auto.create.timeout\";\n+  private static final String CRUISE_CONTROL_METRICS_TOPIC_AUTO_CREATE_TIMEOUT_DOC = \"Timeout on the Cruise Control metrics topic creation\";", "originalCommit": "1ef3a4791f6f9993ec0a30a13a41144777fa0b2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxOTIzMQ==", "url": "https://github.com/linkedin/cruise-control/pull/1220#discussion_r433519231", "bodyText": "Nit: _metricsTopicAutoCreateTimeout -> _metricsTopicAutoCreateTimeoutMs?", "author": "efeg", "createdAt": "2020-06-01T22:16:48Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -69,6 +69,8 @@\n   private volatile boolean _shutdown = false;\n   private NewTopic _metricsTopic;\n   private AdminClient _adminClient;\n+  private long _metricsTopicAutoCreateTimeout;", "originalCommit": "1ef3a4791f6f9993ec0a30a13a41144777fa0b2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUyMTQwNw==", "url": "https://github.com/linkedin/cruise-control/pull/1220#discussion_r433521407", "bodyText": "Can we add a sanity check to ensure that maxAttempts > 0 to avoid a deadlock due to bad user input?", "author": "efeg", "createdAt": "2020-06-01T22:23:15Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsUtils.java", "diffHunk": "@@ -130,4 +134,39 @@ public static void maybeUpdateConfig(Set<AlterConfigOp> configsToAlter,\n       }\n     }\n   }\n+\n+  /**\n+   * Retries the {@code Supplier<Boolean>} function while it returns {@code true} and for the specified max number of attempts.\n+   * The delay between each attempt is computed as: delay = scaleMs * base ^ attempt\n+   * @param function the code to call and retry if needed\n+   * @param scaleMs the scale for computing the delay\n+   * @param base the base for computing the delay\n+   * @param maxAttempts the max number of attempts on calling the function\n+   */\n+  public static void retry(Supplier<Boolean> function, long scaleMs, int base, int maxAttempts) {\n+    int attempts = 0;", "originalCommit": "1ef3a4791f6f9993ec0a30a13a41144777fa0b2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUyMzk5MQ==", "url": "https://github.com/linkedin/cruise-control/pull/1220#discussion_r433523991", "bodyText": "Can we save some CPU cycles by avoiding the use of pow() and instead update the timeToSleep at each round using a single multiplication?", "author": "efeg", "createdAt": "2020-06-01T22:30:52Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsUtils.java", "diffHunk": "@@ -130,4 +134,39 @@ public static void maybeUpdateConfig(Set<AlterConfigOp> configsToAlter,\n       }\n     }\n   }\n+\n+  /**\n+   * Retries the {@code Supplier<Boolean>} function while it returns {@code true} and for the specified max number of attempts.\n+   * The delay between each attempt is computed as: delay = scaleMs * base ^ attempt\n+   * @param function the code to call and retry if needed\n+   * @param scaleMs the scale for computing the delay\n+   * @param base the base for computing the delay\n+   * @param maxAttempts the max number of attempts on calling the function\n+   */\n+  public static void retry(Supplier<Boolean> function, long scaleMs, int base, int maxAttempts) {\n+    int attempts = 0;\n+    boolean retry;\n+    do {\n+      retry = function.get();\n+      if (retry) {\n+        try {\n+          if (++attempts == maxAttempts)\n+            break;\n+          Thread.sleep(scaleMs * (long) Math.pow(base, attempts));", "originalCommit": "1ef3a4791f6f9993ec0a30a13a41144777fa0b2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUyNTI1OQ==", "url": "https://github.com/linkedin/cruise-control/pull/1220#discussion_r433525259", "bodyText": "Can we avoid hardcoding inputs to NewTopic and instead use static final variables?", "author": "efeg", "createdAt": "2020-06-01T22:35:00Z", "path": "cruise-control-metrics-reporter/src/test/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporterAutoCreateTopicTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.metricsreporter;\n+\n+import com.linkedin.kafka.cruisecontrol.metricsreporter.utils.CCKafkaClientsIntegrationTestHarness;\n+import com.linkedin.kafka.cruisecontrol.metricsreporter.utils.CCKafkaTestUtils;\n+import kafka.server.KafkaConfig;\n+import org.apache.kafka.clients.CommonClientConfigs;\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.CreateTopicsResult;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.admin.TopicDescription;\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.producer.Producer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class CruiseControlMetricsReporterAutoCreateTopicTest extends CCKafkaClientsIntegrationTestHarness {\n+    protected static final String TOPIC = \"CruiseControlMetricsReporterTest\";\n+\n+    @Before\n+    public void setUp() {\n+        super.setUp();\n+\n+        // creating the \"TestTopic\" explicitly because the topic auto-creation is disabled on the broker\n+        Properties adminProps = new Properties();\n+        adminProps.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n+        AdminClient adminClient = AdminClient.create(adminProps);\n+        NewTopic testTopic = new NewTopic(\"TestTopic\", 1, (short) 1);", "originalCommit": "1ef3a4791f6f9993ec0a30a13a41144777fa0b2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUyNTcyMA==", "url": "https://github.com/linkedin/cruise-control/pull/1220#discussion_r433525720", "bodyText": "Can we avoid hardcoding \"TestTopic\"?", "author": "efeg", "createdAt": "2020-06-01T22:36:22Z", "path": "cruise-control-metrics-reporter/src/test/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporterAutoCreateTopicTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.metricsreporter;\n+\n+import com.linkedin.kafka.cruisecontrol.metricsreporter.utils.CCKafkaClientsIntegrationTestHarness;\n+import com.linkedin.kafka.cruisecontrol.metricsreporter.utils.CCKafkaTestUtils;\n+import kafka.server.KafkaConfig;\n+import org.apache.kafka.clients.CommonClientConfigs;\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.CreateTopicsResult;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.admin.TopicDescription;\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.producer.Producer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class CruiseControlMetricsReporterAutoCreateTopicTest extends CCKafkaClientsIntegrationTestHarness {\n+    protected static final String TOPIC = \"CruiseControlMetricsReporterTest\";\n+\n+    @Before\n+    public void setUp() {\n+        super.setUp();\n+\n+        // creating the \"TestTopic\" explicitly because the topic auto-creation is disabled on the broker\n+        Properties adminProps = new Properties();\n+        adminProps.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n+        AdminClient adminClient = AdminClient.create(adminProps);\n+        NewTopic testTopic = new NewTopic(\"TestTopic\", 1, (short) 1);\n+        CreateTopicsResult createTopicsResult = adminClient.createTopics(Collections.singleton(testTopic));\n+\n+        AtomicInteger adminFailed = new AtomicInteger(0);\n+        createTopicsResult.all().whenComplete((v, e) -> {\n+            if (e != null) {\n+                adminFailed.incrementAndGet();\n+            }\n+        });\n+        assertEquals(0, adminFailed.get());\n+\n+        // starting producer to verify that Kafka cluster is working fine\n+        Properties producerProps = new Properties();\n+        producerProps.setProperty(ProducerConfig.ACKS_CONFIG, \"-1\");\n+        AtomicInteger producerFailed = new AtomicInteger(0);\n+        try (Producer<String, String> producer = createProducer(producerProps)) {\n+            for (int i = 0; i < 10; i++) {\n+                producer.send(new ProducerRecord<>(\"TestTopic\", Integer.toString(i)),", "originalCommit": "1ef3a4791f6f9993ec0a30a13a41144777fa0b2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e5fd94a98fa8f7c3c715091cf4fd545fcdc6a54e", "url": "https://github.com/linkedin/cruise-control/commit/e5fd94a98fa8f7c3c715091cf4fd545fcdc6a54e", "message": "Fixed comments", "committedDate": "2020-06-03T09:08:24Z", "type": "commit"}]}