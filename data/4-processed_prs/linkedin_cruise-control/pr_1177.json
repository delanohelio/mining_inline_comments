{"pr_number": 1177, "pr_title": "Further tune slow broker finder sensitivity", "pr_createdAt": "2020-04-17T00:04:57Z", "pr_url": "https://github.com/linkedin/cruise-control/pull/1177", "timeline": [{"oid": "4632222666007de76897850f371e694cd04ec49a", "url": "https://github.com/linkedin/cruise-control/commit/4632222666007de76897850f371e694cd04ec49a", "message": "Further tune slow broker finder sensitivity,.", "committedDate": "2020-04-17T00:00:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQyMTkzOA==", "url": "https://github.com/linkedin/cruise-control/pull/1177#discussion_r410421938", "bodyText": "It is not clear what these hardcoded magic numbers refer to or the purpose of this operation.\nCan we clarify both?", "author": "efeg", "createdAt": "2020-04-17T19:17:33Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/detector/AnomalyDetectorTestUtils.java", "diffHunk": "@@ -42,16 +42,23 @@ private AnomalyDetectorTestUtils() {\n   /**\n    * Create history load for broker.\n    * @param metricValueById A set of metrics with corresponding load value.\n+   * @param metricVarianceById A set of metrics with corresponding load variance.\n    * @param numWindows  Number of windows to populate.\n    * @param broker The subject broker.\n    * @return The load for the broker.\n    */\n-  public static Map<BrokerEntity, ValuesAndExtrapolations> createHistory(Map<Short, Double> metricValueById, int numWindows, BrokerEntity broker) {\n+  public static Map<BrokerEntity, ValuesAndExtrapolations> createHistory(Map<Short, Double> metricValueById,\n+                                                                         Map<Short, Double> metricVarianceById,\n+                                                                         int numWindows,\n+                                                                         BrokerEntity broker) {\n+    Random random = new Random();\n     Map<Short, MetricValues> valuesByMetricId = new HashMap<>();\n     for (Map.Entry<Short, Double> entry : metricValueById.entrySet()) {\n       MetricValues historicalMetricValues = new MetricValues(numWindows);\n       double[] values = new double[numWindows];\n-      Arrays.fill(values, entry.getValue());\n+      for (int i = 0; i < numWindows; i++) {\n+        values[i] = entry.getValue() + (random.nextInt(201) - 100) * metricVarianceById.get(entry.getKey()) / 100;", "originalCommit": "4632222666007de76897850f371e694cd04ec49a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQyNDYwOQ==", "url": "https://github.com/linkedin/cruise-control/pull/1177#discussion_r410424609", "bodyText": "In general, using new Random() without a seed value should be avoided in unit tests.\nThis can lead to test failures that are not reproducible due to randomness.", "author": "efeg", "createdAt": "2020-04-17T19:23:29Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/detector/AnomalyDetectorTestUtils.java", "diffHunk": "@@ -42,16 +42,23 @@ private AnomalyDetectorTestUtils() {\n   /**\n    * Create history load for broker.\n    * @param metricValueById A set of metrics with corresponding load value.\n+   * @param metricVarianceById A set of metrics with corresponding load variance.\n    * @param numWindows  Number of windows to populate.\n    * @param broker The subject broker.\n    * @return The load for the broker.\n    */\n-  public static Map<BrokerEntity, ValuesAndExtrapolations> createHistory(Map<Short, Double> metricValueById, int numWindows, BrokerEntity broker) {\n+  public static Map<BrokerEntity, ValuesAndExtrapolations> createHistory(Map<Short, Double> metricValueById,\n+                                                                         Map<Short, Double> metricVarianceById,\n+                                                                         int numWindows,\n+                                                                         BrokerEntity broker) {\n+    Random random = new Random();", "originalCommit": "4632222666007de76897850f371e694cd04ec49a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQyNjQ5Mg==", "url": "https://github.com/linkedin/cruise-control/pull/1177#discussion_r410426492", "bodyText": "Are we testing with non-zero variance in any of our tests?", "author": "efeg", "createdAt": "2020-04-17T19:27:34Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/detector/KafkaMetricAnomalyFinderTest.java", "diffHunk": "@@ -51,7 +51,7 @@ public void testMetricAnomaliesWithNullArguments() {\n   public void testMetricAnomalies() {\n     MetricAnomalyFinder<BrokerEntity> anomalyFinder = createKafkaMetricAnomalyFinder();\n     Map<BrokerEntity, ValuesAndExtrapolations> history =\n-        createHistory(Collections.singletonMap(METRIC_ID, 20.0), 20, BROKER_ENTITIES.get(0));\n+        createHistory(Collections.singletonMap(METRIC_ID, 20.0), Collections.singletonMap(METRIC_ID, 0.0), 20, BROKER_ENTITIES.get(0));", "originalCommit": "4632222666007de76897850f371e694cd04ec49a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4MDYzMg==", "url": "https://github.com/linkedin/cruise-control/pull/1177#discussion_r411680632", "bodyText": "Add some variance in these test cases.", "author": "kidkun", "createdAt": "2020-04-20T20:46:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQyNjQ5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQyNzgwOQ==", "url": "https://github.com/linkedin/cruise-control/pull/1177#discussion_r410427809", "bodyText": "The term variance refers to the square of the standard deviation.\nDoes this variable refer to variance or something else?", "author": "efeg", "createdAt": "2020-04-17T19:30:28Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/detector/AnomalyDetectorTestUtils.java", "diffHunk": "@@ -42,16 +42,23 @@ private AnomalyDetectorTestUtils() {\n   /**\n    * Create history load for broker.\n    * @param metricValueById A set of metrics with corresponding load value.\n+   * @param metricVarianceById A set of metrics with corresponding load variance.\n    * @param numWindows  Number of windows to populate.\n    * @param broker The subject broker.\n    * @return The load for the broker.\n    */\n-  public static Map<BrokerEntity, ValuesAndExtrapolations> createHistory(Map<Short, Double> metricValueById, int numWindows, BrokerEntity broker) {\n+  public static Map<BrokerEntity, ValuesAndExtrapolations> createHistory(Map<Short, Double> metricValueById,\n+                                                                         Map<Short, Double> metricVarianceById,", "originalCommit": "4632222666007de76897850f371e694cd04ec49a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4MTY5NQ==", "url": "https://github.com/linkedin/cruise-control/pull/1177#discussion_r411681695", "bodyText": "Here it refers to maximal fluctuation. Added clarification in Javadoc.", "author": "kidkun", "createdAt": "2020-04-20T20:48:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQyNzgwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQyODcwMw==", "url": "https://github.com/linkedin/cruise-control/pull/1177#discussion_r410428703", "bodyText": "What is variance percentile? Can we rename it to better represent what it refers to?", "author": "efeg", "createdAt": "2020-04-17T19:32:26Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinderTest.java", "diffHunk": "@@ -25,21 +25,28 @@\n \n \n public class SlowBrokerFinderTest {\n-  private final static double NORMAL_BYTES_IN_RATE = 1024.0 * 1024.0;\n-  private final static double SMALL_BYTES_IN_RATE = 1024.0;\n+  private final static double NORMAL_BYTES_IN_RATE = 4096;\n+  private final static double BYTE_IN_RATE_VARIANCE_PERCENTILE = 0.1;\n   private final static double NORMAL_LOG_FLUSH_TIME_MS = 100.0;\n+  private final static double LOG_FLUSH_TIME_MS_VARIANCE_PERCENTILE = 0.25;", "originalCommit": "4632222666007de76897850f371e694cd04ec49a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQyOTY5Ng==", "url": "https://github.com/linkedin/cruise-control/pull/1177#discussion_r410429696", "bodyText": "This test contains several hardcoded values, whose meanings are hard to infer. Is it possible to move them to static variables with clear names?", "author": "efeg", "createdAt": "2020-04-17T19:34:40Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinderTest.java", "diffHunk": "@@ -49,21 +56,28 @@ public void testDetectingSlowBrokerFromHistory() {\n \n   /**\n    * Test slow broker finder can detect broker which has consistently abnormally high metric in the cluster.\n+   * The metric values used in test case is extracted from one incident we encountered in production.\n    */\n   @Test\n   public void testDetectingSlowBrokerFromPeer() {\n     SlowBrokerFinder slowBrokerFinder = createSlowBrokerFinder();\n     Map<BrokerEntity, ValuesAndExtrapolations> currentMetrics = new HashMap<>(BROKER_ENTITIES.size());\n     Map<BrokerEntity, ValuesAndExtrapolations> history = new HashMap<>(BROKER_ENTITIES.size());\n-    currentMetrics.putAll(createCurrentMetrics(populateMetricValues(NORMAL_BYTES_IN_RATE, NORMAL_BYTES_IN_RATE, NORMAL_LOG_FLUSH_TIME_MS * 11),\n-                          11, BROKER_ENTITIES.get(0)));\n-    history.putAll(createHistory(populateMetricValues(NORMAL_BYTES_IN_RATE, NORMAL_BYTES_IN_RATE, NORMAL_LOG_FLUSH_TIME_MS * 11),\n-                   10, BROKER_ENTITIES.get(0)));\n+    currentMetrics.putAll(createCurrentMetrics(populateMetricValues(NORMAL_BYTES_IN_RATE, NORMAL_BYTES_IN_RATE, NORMAL_LOG_FLUSH_TIME_MS * 4),\n+                                               11, BROKER_ENTITIES.get(0)));\n+    history.putAll(createHistory(populateMetricValues(NORMAL_BYTES_IN_RATE, NORMAL_BYTES_IN_RATE, NORMAL_LOG_FLUSH_TIME_MS * 4),", "originalCommit": "4632222666007de76897850f371e694cd04ec49a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a9230fd615a577ce9989e8438d3c6f53b5d3f501", "url": "https://github.com/linkedin/cruise-control/commit/a9230fd615a577ce9989e8438d3c6f53b5d3f501", "message": "Piggyback a fix for topic RF anomaly.", "committedDate": "2020-04-20T20:28:46Z", "type": "commit"}, {"oid": "df488868a490c54865a8f8802d647ce5ebe3ac84", "url": "https://github.com/linkedin/cruise-control/commit/df488868a490c54865a8f8802d647ce5ebe3ac84", "message": "Address the feedback.", "committedDate": "2020-04-20T21:08:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc4NzgxNQ==", "url": "https://github.com/linkedin/cruise-control/pull/1177#discussion_r411787815", "bodyText": "Nit (Also applies to fixable : above): The space before the colon should be dropped.", "author": "efeg", "createdAt": "2020-04-21T00:45:49Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/TopicReplicationFactorAnomaly.java", "diffHunk": "@@ -93,7 +93,8 @@ public String toString() {\n       .append(\" : {fixable : [\");\n     StringJoiner joiner = new StringJoiner(\",\");\n     _topicsWithBadReplicationFactorByFixability.getOrDefault(true, Collections.emptySet()).forEach(joiner::add);\n-    sb.append(joiner.toString());\n+    sb.append(joiner.toString())\n+      .append(\"], unfixable : [\");", "originalCommit": "df488868a490c54865a8f8802d647ce5ebe3ac84", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc4ODE1OA==", "url": "https://github.com/linkedin/cruise-control/pull/1177#discussion_r411788158", "bodyText": "Nit: metric metric value -- has x2 metric.\n-- Also should we refer to this as metricFluctuationById and describe what it fluctuates (i.e. it fluctuates each member of metricValueById by a uniformly distributed value in [-metricFluctuationById, metricFluctuationById])?", "author": "efeg", "createdAt": "2020-04-21T00:46:46Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/detector/AnomalyDetectorTestUtils.java", "diffHunk": "@@ -42,16 +42,25 @@ private AnomalyDetectorTestUtils() {\n   /**\n    * Create history load for broker.\n    * @param metricValueById A set of metrics with corresponding load value.\n+   * @param metricVarianceById A set of metrics with corresponding load variance. The variance here refers to the maximal\n+   *                           fluctuation of metric metric value.", "originalCommit": "df488868a490c54865a8f8802d647ce5ebe3ac84", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5MDM3MA==", "url": "https://github.com/linkedin/cruise-control/pull/1177#discussion_r411790370", "bodyText": "According to the code, doesn't this value represent the half of the maximum fluctuation?", "author": "efeg", "createdAt": "2020-04-21T00:53:26Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/detector/AnomalyDetectorTestUtils.java", "diffHunk": "@@ -42,16 +42,25 @@ private AnomalyDetectorTestUtils() {\n   /**\n    * Create history load for broker.\n    * @param metricValueById A set of metrics with corresponding load value.\n+   * @param metricVarianceById A set of metrics with corresponding load variance. The variance here refers to the maximal\n+   *                           fluctuation of metric metric value.", "originalCommit": "df488868a490c54865a8f8802d647ce5ebe3ac84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgzMjgxOQ==", "url": "https://github.com/linkedin/cruise-control/pull/1177#discussion_r411832819", "bodyText": "the real fluctuation is in range of [-metricFluctuationById, metricFluctuationById]", "author": "kidkun", "createdAt": "2020-04-21T03:00:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5MDM3MA=="}], "type": "inlineReview"}, {"oid": "14e538ef071b7129df44835648a6446d119edcd0", "url": "https://github.com/linkedin/cruise-control/commit/14e538ef071b7129df44835648a6446d119edcd0", "message": "Address the feedback.", "committedDate": "2020-04-21T03:02:32Z", "type": "commit"}]}