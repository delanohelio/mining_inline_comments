{"pr_number": 1217, "pr_title": "Compile using java 11", "pr_createdAt": "2020-05-28T22:37:16Z", "pr_url": "https://github.com/linkedin/cruise-control/pull/1217", "timeline": [{"oid": "04f273446ff2bc42e910258725d8941329b6a387", "url": "https://github.com/linkedin/cruise-control/commit/04f273446ff2bc42e910258725d8941329b6a387", "message": "Compile using java 11", "committedDate": "2020-05-28T22:45:51Z", "type": "forcePushed"}, {"oid": "a730644dbafeeb2786302adb81f990f5ae28fc42", "url": "https://github.com/linkedin/cruise-control/commit/a730644dbafeeb2786302adb81f990f5ae28fc42", "message": "Compile using java 11", "committedDate": "2020-05-28T22:48:29Z", "type": "forcePushed"}, {"oid": "2a461019327d2621ebb7b628c2a58b468f1b6570", "url": "https://github.com/linkedin/cruise-control/commit/2a461019327d2621ebb7b628c2a58b468f1b6570", "message": "Compile using java 11", "committedDate": "2020-05-29T07:51:35Z", "type": "forcePushed"}, {"oid": "ea2edfc0ed675315477e23748b9a1d44c962061b", "url": "https://github.com/linkedin/cruise-control/commit/ea2edfc0ed675315477e23748b9a1d44c962061b", "message": "build.gradle", "committedDate": "2020-05-29T07:59:30Z", "type": "forcePushed"}, {"oid": "25b22d01a95570f1f7eb5ec5d467ae772c0de313", "url": "https://github.com/linkedin/cruise-control/commit/25b22d01a95570f1f7eb5ec5d467ae772c0de313", "message": "Compile using java 11", "committedDate": "2020-05-29T10:31:04Z", "type": "forcePushed"}, {"oid": "8afeaec95edadae83860ffe1fd8fa7d0bf7a067d", "url": "https://github.com/linkedin/cruise-control/commit/8afeaec95edadae83860ffe1fd8fa7d0bf7a067d", "message": "aaa", "committedDate": "2020-05-29T10:45:44Z", "type": "forcePushed"}, {"oid": "612b139d766ba2873714080e5e60f27537a06616", "url": "https://github.com/linkedin/cruise-control/commit/612b139d766ba2873714080e5e60f27537a06616", "message": "Compile using java 11", "committedDate": "2020-05-29T21:13:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc0NTIzNA==", "url": "https://github.com/linkedin/cruise-control/pull/1217#discussion_r432745234", "bodyText": "I suspect that with jdk 11, we may need something like https://stackoverflow.com/a/56939344 -- i.e. rather than relying on Xms and Xmx", "author": "efeg", "createdAt": "2020-05-29T21:32:47Z", "path": ".circleci/config.yml", "diffHunk": "@@ -5,9 +5,10 @@ jobs:\n   build:\n     environment:\n       _JAVA_OPTIONS: \"-Xms512m -Xmx512m\"\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=1\"", "originalCommit": "612b139d766ba2873714080e5e60f27537a06616", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc0NTY4MA==", "url": "https://github.com/linkedin/cruise-control/pull/1217#discussion_r432745680", "bodyText": "Should we extract the migration from findbugs to spotbugs on a separate PR? This would let us avoid finished with non-zero exit value 137 error from blocking us.", "author": "efeg", "createdAt": "2020-05-29T21:34:10Z", "path": "build.gradle", "diffHunk": "@@ -76,7 +77,7 @@ subprojects {\n \n   apply plugin: 'java'\n   apply plugin: 'checkstyle'\n-  apply plugin: 'findbugs'\n+  apply plugin: \"com.github.spotbugs\"", "originalCommit": "612b139d766ba2873714080e5e60f27537a06616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NjU4MA==", "url": "https://github.com/linkedin/cruise-control/pull/1217#discussion_r432866580", "bodyText": "circleci failures seems to be due to OutOfMemory exceptions when running build. Most probably due to increased spotbugs memory needs.\nAre you suggesting migrating first to spotbugs and keep java8 compiler? I think we'd hit the same issue", "author": "amuraru", "createdAt": "2020-05-30T16:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc0NTY4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3NDc0MQ==", "url": "https://github.com/linkedin/cruise-control/pull/1217#discussion_r432874741", "bodyText": "Splitting spotbugs in separate runs seems to workaround the OOM issue in circleci.\n@efeg I am thinking of creating a \"verify\" gradle task to aggregate these two tasks. Would this be a decent workaround?", "author": "amuraru", "createdAt": "2020-05-30T18:04:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc0NTY4MA=="}], "type": "inlineReview"}, {"oid": "2b4ff39816ce422c08cced9d0003b9f98a131f69", "url": "https://github.com/linkedin/cruise-control/commit/2b4ff39816ce422c08cced9d0003b9f98a131f69", "message": "more mem CI", "committedDate": "2020-05-29T22:33:52Z", "type": "forcePushed"}, {"oid": "ada1ed5614460443416e4f1df53c4db27793f0b3", "url": "https://github.com/linkedin/cruise-control/commit/ada1ed5614460443416e4f1df53c4db27793f0b3", "message": "split spotbugs gradle task in separate run", "committedDate": "2020-05-30T16:31:08Z", "type": "forcePushed"}, {"oid": "34fcf24bde8236dda8810453f6d2e2e82d33558a", "url": "https://github.com/linkedin/cruise-control/commit/34fcf24bde8236dda8810453f6d2e2e82d33558a", "message": "split spotbugs gradle task in separate run", "committedDate": "2020-05-30T16:38:04Z", "type": "forcePushed"}, {"oid": "b0005c61eacc20fba8145d2b2243e4da0169f53b", "url": "https://github.com/linkedin/cruise-control/commit/b0005c61eacc20fba8145d2b2243e4da0169f53b", "message": "Compile using java 11", "committedDate": "2020-05-30T20:33:06Z", "type": "forcePushed"}, {"oid": "233ab507a76ae9c97a4f1b7c0349a618d6e46e53", "url": "https://github.com/linkedin/cruise-control/commit/233ab507a76ae9c97a4f1b7c0349a618d6e46e53", "message": "Compile using java 11", "committedDate": "2020-05-30T20:46:24Z", "type": "forcePushed"}, {"oid": "c2ed8110a5bec467f66d060e8b7856f86e556afa", "url": "https://github.com/linkedin/cruise-control/commit/c2ed8110a5bec467f66d060e8b7856f86e556afa", "message": "Compile using java 11", "committedDate": "2020-05-30T20:58:44Z", "type": "forcePushed"}, {"oid": "7de49bfe79c598c402bca84a779f0736a1835df7", "url": "https://github.com/linkedin/cruise-control/commit/7de49bfe79c598c402bca84a779f0736a1835df7", "message": "Compile using java 11", "committedDate": "2020-05-30T21:03:15Z", "type": "forcePushed"}, {"oid": "fdc8b178b4557d1589109ae5baa1a3d4dd1fd253", "url": "https://github.com/linkedin/cruise-control/commit/fdc8b178b4557d1589109ae5baa1a3d4dd1fd253", "message": "Compile using java 11", "committedDate": "2020-05-30T21:09:29Z", "type": "forcePushed"}, {"oid": "b49d8786fdeb6678d43a54351b3b139200c13425", "url": "https://github.com/linkedin/cruise-control/commit/b49d8786fdeb6678d43a54351b3b139200c13425", "message": "Compile using java 11", "committedDate": "2020-05-30T21:48:48Z", "type": "forcePushed"}, {"oid": "f306a321453faebde5942069d186b62749964004", "url": "https://github.com/linkedin/cruise-control/commit/f306a321453faebde5942069d186b62749964004", "message": "Compile using java 11", "committedDate": "2020-05-30T21:51:14Z", "type": "commit"}, {"oid": "f306a321453faebde5942069d186b62749964004", "url": "https://github.com/linkedin/cruise-control/commit/f306a321453faebde5942069d186b62749964004", "message": "Compile using java 11", "committedDate": "2020-05-30T21:51:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwMjU0Mg==", "url": "https://github.com/linkedin/cruise-control/pull/1217#discussion_r433502542", "bodyText": "Nit: Should we keep @deprecated tag?", "author": "efeg", "createdAt": "2020-06-01T21:33:24Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/MetricSamplerPartitionAssignor.java", "diffHunk": "@@ -17,13 +17,14 @@\n public interface MetricSamplerPartitionAssignor extends CruiseControlConfigurable {\n \n   /**\n-   * @deprecated Please use {@link #assignPartitions(Cluster)}.\n+   * Please use {@link #assignPartitions(Cluster)}.", "originalCommit": "f306a321453faebde5942069d186b62749964004", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzczMTU3Ng==", "url": "https://github.com/linkedin/cruise-control/pull/1217#discussion_r433731576", "bodyText": "this was to solve a compilation warning - iiuc the @Deprecated annotation needs to precede the method declaration and not embedded in the comment - so moved it here: https://github.com/linkedin/cruise-control/pull/1217/files#diff-71850ea35e26c703f1a1253519e0c41cR27", "author": "amuraru", "createdAt": "2020-06-02T09:08:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwMjU0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0MTU2Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1217#discussion_r434041563", "bodyText": "I thought (1) the @Deprecated Annotation and (2) the @deprecated Javadoc Tag are both valid, and they serve different purposes (so using both of them is useful). The former ensures that all compilers will issue warnings when code uses the deprecated program element. The latter explains why it has been deprecated, relevant limitations, and/or suggestions on what to use instead.\n-- Note that we have a usage of both in here: https://github.com/linkedin/cruise-control/pull/1217/files#diff-ae57b19ca9309e7c0b8203ef75f458afR197\nSource: https://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/deprecation/deprecation.html#how", "author": "efeg", "createdAt": "2020-06-02T17:16:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwMjU0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA3NTYzOQ==", "url": "https://github.com/linkedin/cruise-control/pull/1217#discussion_r434075639", "bodyText": "Cool - makes sense. Let me add it back to javadoc comment", "author": "amuraru", "createdAt": "2020-06-02T18:08:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwMjU0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwOTU1NQ==", "url": "https://github.com/linkedin/cruise-control/pull/1217#discussion_r433509555", "bodyText": "I am curious why this change is needed -- doesn't it introduce a behavior change?\n-- Also, in case the change is needed, can we move it to a publicly accessible place and let the relevant unit tests (e.g. JwtAuthenticatorTest, JwtLoginServiceTest, TrustedProxyLoginServiceTest, and SpnegoUserStoreAuthorizationServiceTest) access this -- i.e. instead of defining their own static vars in unit tests?", "author": "efeg", "createdAt": "2020-06-01T21:50:35Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/security/trustedproxy/TrustedProxyAuthorizationService.java", "diffHunk": "@@ -20,12 +21,18 @@\n  */\n public class TrustedProxyAuthorizationService extends AbstractLifeCycle implements AuthorizationService {\n \n+  private static final Credential NO_CREDENTIAL = new Credential() {\n+    @Override\n+    public boolean check(Object credentials) {\n+      return false;\n+    }\n+  };\n   private final UserStore _adminUserStore;\n   private final Pattern _trustedProxyIpPattern;\n \n   TrustedProxyAuthorizationService(List<String> userNames, String trustedProxyIpPattern) {\n     _adminUserStore = new UserStore();\n-    userNames.forEach(u -> _adminUserStore.addUser(u, null, new String[] { DefaultRoleSecurityProvider.ADMIN }));\n+    userNames.forEach(u -> _adminUserStore.addUser(u, NO_CREDENTIAL, new String[] { DefaultRoleSecurityProvider.ADMIN }));", "originalCommit": "f306a321453faebde5942069d186b62749964004", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzczMjE4Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1217#discussion_r433732183", "bodyText": "right. the change is needed as addUser is now requiring non-null credentials. A NPE would throw if null is passed (regardless if it's being used or not). The new NO_CREDENTIALS is specifically built to return false on any credential check so it should achieve the same behaviour as null previously.", "author": "amuraru", "createdAt": "2020-06-02T09:09:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwOTU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzczMjQ4Mg==", "url": "https://github.com/linkedin/cruise-control/pull/1217#discussion_r433732482", "bodyText": "agree on reusing it - what would be a good place to define it ?", "author": "amuraru", "createdAt": "2020-06-02T09:10:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwOTU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0MTUwMw==", "url": "https://github.com/linkedin/cruise-control/pull/1217#discussion_r434041503", "bodyText": "Thanks for the clarification!\n\nagree on reusing it - what would be a good place to define it ?\n\nWould a utility class work?\n/*\n * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n */\n\npackage com.linkedin.kafka.cruisecontrol.servlet.security;\n\nimport org.eclipse.jetty.util.security.Credential;\n\n\npublic final class SecurityUtils {\n\n  private SecurityUtils() {\n  }\n\n  public static final Credential NO_CREDENTIAL = new Credential() {\n    @Override\n    public boolean check(Object credentials) {\n      return false;\n    }\n  };\n}", "author": "efeg", "createdAt": "2020-06-02T17:15:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwOTU1NQ=="}], "type": "inlineReview"}, {"oid": "7e4cc476cc0242ce4c20ee0670718f3abf01374c", "url": "https://github.com/linkedin/cruise-control/commit/7e4cc476cc0242ce4c20ee0670718f3abf01374c", "message": "Implemented review comments", "committedDate": "2020-06-03T07:58:13Z", "type": "commit"}]}