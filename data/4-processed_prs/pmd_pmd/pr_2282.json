{"pr_number": 2282, "pr_title": "[java] Use single node for annotations", "pr_createdAt": "2020-02-12T21:47:16Z", "pr_url": "https://github.com/pmd/pmd/pull/2282", "timeline": [{"oid": "97b18704726ef1fa9c807887524de1169f5d8d7a", "url": "https://github.com/pmd/pmd/commit/97b18704726ef1fa9c807887524de1169f5d8d7a", "message": "Unify repr of annotations", "committedDate": "2020-02-12T21:25:04Z", "type": "commit"}, {"oid": "1d4a540544d827384d44cf9b7912a84130facad5", "url": "https://github.com/pmd/pmd/commit/1d4a540544d827384d44cf9b7912a84130facad5", "message": "Remove old classes", "committedDate": "2020-02-12T21:25:04Z", "type": "commit"}, {"oid": "cc07fa3c32c4c87e71c63b397a0090f48dc3d809", "url": "https://github.com/pmd/pmd/commit/cc07fa3c32c4c87e71c63b397a0090f48dc3d809", "message": "Fix odd refactoring", "committedDate": "2020-02-12T21:25:04Z", "type": "commit"}, {"oid": "66e43ba07d563009e4b35f7961def47109206b2f", "url": "https://github.com/pmd/pmd/commit/66e43ba07d563009e4b35f7961def47109206b2f", "message": "checkstyle", "committedDate": "2020-02-14T00:55:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5MTAwNA==", "url": "https://github.com/pmd/pmd/pull/2282#discussion_r381891004", "bodyText": "Interesting - this time without a setter. I've no strong opinion whether we should use jjtThis.setName(VoidName()) or jjtThis.name=VoidName()- whatever we do, we should do it the same in all other AST classes. Using a setter would provide us a bit more flexibility (although I don't know, whether we need/should use that - a setter should not contain too much logic...).", "author": "adangel", "createdAt": "2020-02-20T09:50:58Z", "path": "pmd-java/etc/grammar/Java.jjt", "diffHunk": "@@ -2282,47 +2282,32 @@ void RSIGNEDSHIFT() #void:\n \n /* Annotation syntax follows. */\n \n-void Annotation() #void:\n+void Annotation():\n {}\n {\n- LOOKAHEAD( \"@\" VoidName() \"(\" ( <IDENTIFIER> \"=\" | \")\" ))\n- NormalAnnotation()\n-|\n- LOOKAHEAD( \"@\" VoidName() \"(\" )\n- SingleMemberAnnotation()\n-|\n- MarkerAnnotation()\n-}\n-\n-void AnnotationBase(Node n) #void:\n-{String name = null;}\n-{\n-   \"@\" name=VoidName() {n.setImage(name);}\n+    \"@\" jjtThis.name=VoidName() [ AnnotationMemberList() ]", "originalCommit": "66e43ba07d563009e4b35f7961def47109206b2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU4NTAwNQ==", "url": "https://github.com/pmd/pmd/pull/2282#discussion_r382585005", "bodyText": "This is something I tried to make the grammar cleaner. But maybe, using a setter would be better, especially if the field is shared (this could be the image field)", "author": "oowekyala", "createdAt": "2020-02-21T13:39:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5MTAwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5ODY1NA==", "url": "https://github.com/pmd/pmd/pull/2282#discussion_r381898654", "bodyText": "Does this work, if it is declared here in ASTCastExpressionTest? I could imagine, this test needs to run before the others... This should probably be moved to the DSL in TestExtensions.kt", "author": "adangel", "createdAt": "2020-02-20T10:04:40Z", "path": "pmd-java/src/test/kotlin/net/sourceforge/pmd/lang/java/ast/ASTCastExpressionTest.kt", "diffHunk": "@@ -140,3 +140,6 @@ class ASTCastExpressionTest : ParserTestSpec({\n \n \n })\n+\n+val Annotatable.declaredAnnotationsList: List<ASTAnnotation>", "originalCommit": "66e43ba07d563009e4b35f7961def47109206b2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU4NjI1Ng==", "url": "https://github.com/pmd/pmd/pull/2282#discussion_r382586256", "bodyText": "Toplevel functions and properties in kotlin are translated to static members of a class:\nhttps://kotlinlang.org/docs/reference/java-to-kotlin-interop.html#package-level-functions\nSo this doesn't need to run. But for clarity, since this is used in several tests, it should indeed be put into TestExtensions.kt", "author": "oowekyala", "createdAt": "2020-02-21T13:41:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5ODY1NA=="}], "type": "inlineReview"}]}