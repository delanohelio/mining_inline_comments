{"pr_number": 2457, "pr_title": "[xml] Adding XML to CPD supported languages", "pr_createdAt": "2020-04-30T19:14:18Z", "pr_url": "https://github.com/pmd/pmd/pull/2457", "timeline": [{"oid": "15da8cb16aacafac435477751e7b8d0e7b43e032", "url": "https://github.com/pmd/pmd/commit/15da8cb16aacafac435477751e7b8d0e7b43e032", "message": "Adding XML to CPD", "committedDate": "2020-04-30T17:06:52Z", "type": "commit"}, {"oid": "3a3b0a09085fcdb0330d684df30d18a0582d9301", "url": "https://github.com/pmd/pmd/commit/3a3b0a09085fcdb0330d684df30d18a0582d9301", "message": "Adding antlr4 to pom, tests", "committedDate": "2020-04-30T19:16:31Z", "type": "commit"}, {"oid": "a2cd3fd8e5dd6e0811e6c9a90b9546feb66f8d03", "url": "https://github.com/pmd/pmd/commit/a2cd3fd8e5dd6e0811e6c9a90b9546feb66f8d03", "message": "Removed tab character in pom.xml", "committedDate": "2020-04-30T20:38:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM3NjEyNA==", "url": "https://github.com/pmd/pmd/pull/2457#discussion_r421376124", "bodyText": "This is not described yet anywhere but since this is a new class, we should try to use better package names. Could you please use net.sourceforge.pmd.xml.cpd for this class and the others?", "author": "adangel", "createdAt": "2020-05-07T09:42:38Z", "path": "pmd-xml/src/main/java/net/sourceforge/pmd/cpd/XmlLanguage.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.cpd;", "originalCommit": "a2cd3fd8e5dd6e0811e6c9a90b9546feb66f8d03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwNjU3MQ==", "url": "https://github.com/pmd/pmd/pull/2457#discussion_r421606571", "bodyText": "I was wondering about that. This is better, but I had to change the visibility in one of the methods in AntlrTokenizer.java", "author": "xnYi9wRezm", "createdAt": "2020-05-07T15:45:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM3NjEyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM3NjczNA==", "url": "https://github.com/pmd/pmd/pull/2457#discussion_r421376734", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return IOUtils.toString(XmlTokenizer.class.getResourceAsStream(FILENAME));\n          \n          \n            \n                    return IOUtils.toString(XmlTokenizer.class.getResourceAsStream(FILENAME), StandardCharsets.UTF_8);", "author": "adangel", "createdAt": "2020-05-07T09:43:38Z", "path": "pmd-xml/src/test/java/net/sourceforge/pmd/cpd/XmlCPDTokenizerTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.cpd;\n+\n+import java.io.IOException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import net.sourceforge.pmd.testframework.AbstractTokenizerTest;\n+\n+public class XmlCPDTokenizerTest extends AbstractTokenizerTest {\n+\n+    private static final String FILENAME = \"hello.xml\";\n+\n+    @Before\n+    @Override\n+    public void buildTokenizer() throws IOException {\n+        this.tokenizer = new XmlTokenizer();\n+        this.sourceCode = new SourceCode(new SourceCode.StringCodeLoader(this.getSampleCode(), FILENAME));\n+    }\n+\n+    @Override\n+    public String getSampleCode() throws IOException {\n+        return IOUtils.toString(XmlTokenizer.class.getResourceAsStream(FILENAME));", "originalCommit": "a2cd3fd8e5dd6e0811e6c9a90b9546feb66f8d03", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM4NjU0MA==", "url": "https://github.com/pmd/pmd/pull/2457#discussion_r421386540", "bodyText": "Note that this seems to be more restrictive than the standard: https://www.w3.org/TR/xml/#NT-NameStartChar", "author": "adangel", "createdAt": "2020-05-07T09:59:46Z", "path": "pmd-xml/src/main/antlr4/net/sourceforge/pmd/lang/xml/antlr4/XMLLexer.g4", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ [The \"BSD licence\"]\n+ Copyright (c) 2013 Terence Parr\n+ All rights reserved.\n+\n+ Redistribution and use in source and binary forms, with or without\n+ modification, are permitted provided that the following conditions\n+ are met:\n+ 1. Redistributions of source code must retain the above copyright\n+    notice, this list of conditions and the following disclaimer.\n+ 2. Redistributions in binary form must reproduce the above copyright\n+    notice, this list of conditions and the following disclaimer in the\n+    documentation and/or other materials provided with the distribution.\n+ 3. The name of the author may not be used to endorse or promote products\n+    derived from this software without specific prior written permission.\n+\n+ THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n+ IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n+ IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n+ INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n+ NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+ THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n+ THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+*/\n+\n+/** XML lexer derived from ANTLR v4 ref guide book example */\n+lexer grammar XMLLexer;\n+\n+// Default \"mode\": Everything OUTSIDE of a tag\n+COMMENT     :   '<!--' .*? '-->' ;\n+CDATA       :   '<![CDATA[' .*? ']]>' ;\n+/** Scarf all DTD stuff, Entity Declarations like <!ENTITY ...>,\n+ *  and Notation Declarations <!NOTATION ...>\n+ */\n+DTD         :   '<!' .*? '>'            -> skip ;\n+EntityRef   :   '&' Name ';' ;\n+CharRef     :   '&#' DIGIT+ ';'\n+            |   '&#x' HEXDIGIT+ ';'\n+            ;\n+SEA_WS      :   (' '|'\\t'|'\\r'? '\\n')+ ;\n+\n+OPEN        :   '<'                     -> pushMode(INSIDE) ;\n+XMLDeclOpen :   '<?xml' S               -> pushMode(INSIDE) ;\n+SPECIAL_OPEN:   '<?' Name               -> more, pushMode(PROC_INSTR) ;\n+\n+TEXT        :   ~[<&]+ ;        // match any 16 bit char other than < and &\n+\n+// ----------------- Everything INSIDE of a tag ---------------------\n+mode INSIDE;\n+\n+CLOSE       :   '>'                     -> popMode ;\n+SPECIAL_CLOSE:  '?>'                    -> popMode ; // close <?xml...?>\n+SLASH_CLOSE :   '/>'                    -> popMode ;\n+SLASH       :   '/' ;\n+EQUALS      :   '=' ;\n+STRING      :   '\"' ~[<\"]* '\"'\n+            |   '\\'' ~[<']* '\\''\n+            ;\n+Name        :   NameStartChar NameChar* ;\n+S           :   [ \\t\\r\\n]               -> skip ;\n+\n+fragment\n+HEXDIGIT    :   [a-fA-F0-9] ;\n+\n+fragment\n+DIGIT       :   [0-9] ;\n+\n+fragment\n+NameChar    :   NameStartChar\n+            |   '-' | '_' | '.' | DIGIT\n+            |   '\\u00B7'\n+            |   '\\u0300'..'\\u036F'\n+            |   '\\u203F'..'\\u2040'\n+            ;\n+\n+fragment\n+NameStartChar", "originalCommit": "a2cd3fd8e5dd6e0811e6c9a90b9546feb66f8d03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1MzEwMw==", "url": "https://github.com/pmd/pmd/pull/2457#discussion_r421553103", "bodyText": "I'm not 100% sure what I am doing here, but I will try something.", "author": "xnYi9wRezm", "createdAt": "2020-05-07T14:33:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM4NjU0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAyMDU4MQ==", "url": "https://github.com/pmd/pmd/pull/2457#discussion_r422020581", "bodyText": "That was actually just meant as a heads-up for the future. Basically, we would also need to fix this upstream, since https://github.com/antlr/grammars-v4/blob/master/xml/XMLLexer.g4 has the same potential problem.", "author": "adangel", "createdAt": "2020-05-08T08:37:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM4NjU0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM4NzUzMA==", "url": "https://github.com/pmd/pmd/pull/2457#discussion_r421387530", "bodyText": "You can remove these javadocs - they don't add any information.", "author": "adangel", "createdAt": "2020-05-07T10:01:22Z", "path": "pmd-xml/src/main/java/net/sourceforge/pmd/cpd/XmlLanguage.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.cpd;\n+\n+/**", "originalCommit": "a2cd3fd8e5dd6e0811e6c9a90b9546feb66f8d03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNjY3OA==", "url": "https://github.com/pmd/pmd/pull/2457#discussion_r421516678", "bodyText": "Agreed! I was just looking at Go! :)", "author": "xnYi9wRezm", "createdAt": "2020-05-07T13:46:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM4NzUzMA=="}], "type": "inlineReview"}, {"oid": "4f9628690261e5ed80e5868e92a7aaed3ff495a0", "url": "https://github.com/pmd/pmd/commit/4f9628690261e5ed80e5868e92a7aaed3ff495a0", "message": "Implementing changes from the discussion", "committedDate": "2020-05-07T15:49:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAyMzk4Ng==", "url": "https://github.com/pmd/pmd/pull/2457#discussion_r422023986", "bodyText": "ok, for now we'll make it public. I'll remove the comment /* default */ when merging, because that's now wrong.\nThe whole class is currently marked as @InternalApi, so the API can be changed (probably this static helper methods is moved somewhere else...)", "author": "adangel", "createdAt": "2020-05-08T08:45:08Z", "path": "pmd-core/src/main/java/net/sourceforge/pmd/cpd/AntlrTokenizer.java", "diffHunk": "@@ -53,7 +53,7 @@ protected AntlrTokenFilter getTokenFilter(final AntlrTokenManager tokenManager)\n         return new AntlrTokenFilter(tokenManager);\n     }\n \n-    /* default */ static CharStream getCharStreamFromSourceCode(final SourceCode sourceCode) {\n+    public /* default */ static CharStream getCharStreamFromSourceCode(final SourceCode sourceCode) {", "originalCommit": "4f9628690261e5ed80e5868e92a7aaed3ff495a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}