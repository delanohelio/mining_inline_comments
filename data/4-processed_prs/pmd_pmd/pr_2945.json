{"pr_number": 2945, "pr_title": "[cs] Add option to ignore sequences of literals", "pr_createdAt": "2020-11-25T12:04:59Z", "pr_url": "https://github.com/pmd/pmd/pull/2945", "timeline": [{"oid": "aaef0fde4e0fdd75212b8b93db18a91f32f2862d", "url": "https://github.com/pmd/pmd/commit/aaef0fde4e0fdd75212b8b93db18a91f32f2862d", "message": "Add option to ignore sequences of literals\n\nIn some cases, code may include sequences of literals that represent lists or tables of constants, such as lookup tables. Large sequences of these (particularly parts with many zeroes) will be identified by CPD as duplicates, but in practice, these are not the types of duplicates that are considered interesting.\n\nThis introduces a new option for CPD (--ignore-literal-sequences) that ignores these sequences of literals, in a very similar way to how using directives for C# can already be skipped as well. For now, this functionality is restricted to C#, but it could be added for other languages as well.", "committedDate": "2020-11-25T11:35:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQzODEyNQ==", "url": "https://github.com/pmd/pmd/pull/2945#discussion_r530438125", "bodyText": "Isn't there a library method to initialize a list with copies of the same value? In Java you can write eg new ArrayList<>(Collections.nCopies(120, 0)).\nEdit:\nFound it: https://stackoverflow.com/a/17169142/6245827\nSo 2 questions:\n\nare there some cases where this AddRange method is inappropriate, and you'd really like to duplicate your literals?\nif so, then in those cases, isn't it more informative to CPD-OFF locally, and explain why you're not using AddRange with a comment, rather than use a global --ignore-literal-sequences?", "author": "oowekyala", "createdAt": "2020-11-25T15:01:19Z", "path": "pmd-cs/src/test/resources/net/sourceforge/pmd/lang/cs/cpd/testdata/listOfNumbers.cs", "diffHunk": "@@ -0,0 +1,8 @@\n+using System;\n+using System.Collections;\n+using System.Collections.Generic;\n+public class LongLists {\n+    List<byte> l = new List<byte> {", "originalCommit": "aaef0fde4e0fdd75212b8b93db18a91f32f2862d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ2MDU1Nw==", "url": "https://github.com/pmd/pmd/pull/2945#discussion_r530460557", "bodyText": "Thank you for your quick response and insight!\n\nYou're right that this example isn't completely realistic. A more realistic case would be a large table with all kinds of numbers, with parts of them being zeroes. For low values of the minimum number of tokens, it's quite easy to reach the limit for a duplication then.\n\nAn example I can think of: transformation matrices for n-dimensional coordinates. A simple matrix may look as follows:\nList<byte> scaleByTwo = new List<byte> {\n2,0,0,0,0,0,0,0,0,0,\n0,2,0,0,0,0,0,0,0,0,\n0,0,2,0,0,0,0,0,0,0,\n0,0,0,2,0,0,0,0,0,0,\n0,0,0,0,2,0,0,0,0,0,\n0,0,0,0,0,2,0,0,0,0,\n0,0,0,0,0,0,2,0,0,0,\n0,0,0,0,0,0,0,2,0,0,\n0,0,0,0,0,0,0,0,2,0,\n0,0,0,0,0,0,0,0,0,2,\n};\n\nThe sequences of zeroes in this matrix already cause 21 duplicate tokens. While you could replace the sequences of zeroes by invocations of AddRange, I'd argue this hurts readability.\n(Of course, you could generate this list as well. The point is that there may be examples where it becomes harder to do so or where generating or reading from a file causes unacceptable performance degredations.)\n\nOn using CPD-OFF instead of recognizing these cases from CPD: this would also be a good solution, but it may cause frustration in domains where these lookup tables are common. We would like to avoid that developers start ignoring CPD output because they believe all duplication instances are simply lookup tables for which a real improvement is not possible, which could mean they leave in pieces of actual functionality (code) that are duplicated and will cause maintainability problems in the future.", "author": "maikelsteneker", "createdAt": "2020-11-25T15:32:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQzODEyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYxOTUzOQ==", "url": "https://github.com/pmd/pmd/pull/2945#discussion_r530619539", "bodyText": "Ah ok I see. I think it's better style to generate such a matrix but I get that it may be frustrating to have irrelevant violations.\nI wonder though, if this is the best way to fix it. Duplicating 0, is indeed not really a problem, but duplicating the entire list initializer is. If we just remove all those tokens, there is no way we can find such a duplicate (and conversely, we may consider List<> { } and List<> { 0,0,0, } to be duplicates). But this is maybe a more general issue in CPD and not specific to this PR, so from my perspective your changes are ok to merge", "author": "oowekyala", "createdAt": "2020-11-25T20:12:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQzODEyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0NDE1NA==", "url": "https://github.com/pmd/pmd/pull/2945#discussion_r531144154", "bodyText": "Interesting observation. I think you're correct that this can lead to false positives between empty and non-empty initializers. In my estimation, the overall impact is still positive, but this may be something to tackle better in the future.", "author": "maikelsteneker", "createdAt": "2020-11-26T16:48:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQzODEyNQ=="}], "type": "inlineReview"}]}