{"pr_number": 2211, "pr_title": "[core] Merge JavaCC build scripts", "pr_createdAt": "2020-01-11T07:15:15Z", "pr_url": "https://github.com/pmd/pmd/pull/2211", "timeline": [{"oid": "efc3becc012ce7cd88b73afba5c784f2e7f4b138", "url": "https://github.com/pmd/pmd/commit/efc3becc012ce7cd88b73afba5c784f2e7f4b138", "message": "Checkout wrapper script, pmd-core, pmd-modelica", "committedDate": "2020-01-10T21:57:47Z", "type": "commit"}, {"oid": "f715e6af729a90488eda3089e80ae557ed3b3837", "url": "https://github.com/pmd/pmd/commit/f715e6af729a90488eda3089e80ae557ed3b3837", "message": "Use maven properties from within the build.xml", "committedDate": "2020-01-10T22:27:07Z", "type": "commit"}, {"oid": "ad7e9eb75d8bc261672012e4d35196bddbae1750", "url": "https://github.com/pmd/pmd/commit/ad7e9eb75d8bc261672012e4d35196bddbae1750", "message": "Make token document store first token", "committedDate": "2020-01-10T23:23:43Z", "type": "commit"}, {"oid": "8a128a3bea1484c0fd9e3a211859fc713ff4fe55", "url": "https://github.com/pmd/pmd/commit/8a128a3bea1484c0fd9e3a211859fc713ff4fe55", "message": "Replace token tracking function", "committedDate": "2020-01-11T00:21:09Z", "type": "commit"}, {"oid": "2d280d0fb09003bead119da04fc8dde3643e837a", "url": "https://github.com/pmd/pmd/commit/2d280d0fb09003bead119da04fc8dde3643e837a", "message": "Make constants file", "committedDate": "2020-01-11T03:47:40Z", "type": "commit"}, {"oid": "0d6f03553a98689813ba17f0bf682f3f60ea081d", "url": "https://github.com/pmd/pmd/commit/0d6f03553a98689813ba17f0bf682f3f60ea081d", "message": "Port java module", "committedDate": "2020-01-11T07:13:31Z", "type": "commit"}, {"oid": "a0b67a75ea90bc771724c255dfe31ff1aa276be7", "url": "https://github.com/pmd/pmd/commit/a0b67a75ea90bc771724c255dfe31ff1aa276be7", "message": "Fix char stream line+col", "committedDate": "2020-01-11T08:08:53Z", "type": "commit"}, {"oid": "47fcfb6f3c5bbc95a069f66a0e9e03bc01410d89", "url": "https://github.com/pmd/pmd/commit/47fcfb6f3c5bbc95a069f66a0e9e03bc01410d89", "message": "Make end column exclusive", "committedDate": "2020-01-13T00:05:54Z", "type": "commit"}, {"oid": "83e86c20c5c90ca1118148dd4e2d1fbdf28eb94f", "url": "https://github.com/pmd/pmd/commit/83e86c20c5c90ca1118148dd4e2d1fbdf28eb94f", "message": "Test modelica text", "committedDate": "2020-01-13T00:15:04Z", "type": "commit"}, {"oid": "4552c04a74759e4ebdcff5d9e410559ba788a652", "url": "https://github.com/pmd/pmd/commit/4552c04a74759e4ebdcff5d9e410559ba788a652", "message": "Simplify", "committedDate": "2020-01-13T00:49:33Z", "type": "commit"}, {"oid": "c2740361c3f501eb68309890255bb73172615550", "url": "https://github.com/pmd/pmd/commit/c2740361c3f501eb68309890255bb73172615550", "message": "Fix end column being exclusive in pmd-java", "committedDate": "2020-01-13T22:04:51Z", "type": "commit"}, {"oid": "0cc9740279b330e2a735b0709640d447cce6f6d2", "url": "https://github.com/pmd/pmd/commit/0cc9740279b330e2a735b0709640d447cce6f6d2", "message": "Fix windows build\n\nLine separators in regex are replaced\nwith platform independent \\R. Good thing\nwe have that automatic windows build", "committedDate": "2020-01-14T23:07:06Z", "type": "commit"}, {"oid": "c7bf177616c56fde6c2eb9524e775a6740fdba87", "url": "https://github.com/pmd/pmd/commit/c7bf177616c56fde6c2eb9524e775a6740fdba87", "message": "Remove special casing of end offset\n\nFixed by 47fcfb6f3c", "committedDate": "2020-01-15T03:53:31Z", "type": "commit"}, {"oid": "b09b58513b36dba080beba473c5b5d875b17e1d1", "url": "https://github.com/pmd/pmd/commit/b09b58513b36dba080beba473c5b5d875b17e1d1", "message": "Merge branch '7.0.x' into master-ant-script", "committedDate": "2020-01-17T15:22:46Z", "type": "commit"}, {"oid": "8adc292d6d03c1329768d534c3fb648b63cb0cc7", "url": "https://github.com/pmd/pmd/commit/8adc292d6d03c1329768d534c3fb648b63cb0cc7", "message": "Merge branch '7.0.x' into master-ant-script", "committedDate": "2020-01-17T15:45:29Z", "type": "commit"}, {"oid": "c2b37ff03405cd4884031c53bedce580c4e1da4a", "url": "https://github.com/pmd/pmd/commit/c2b37ff03405cd4884031c53bedce580c4e1da4a", "message": "Fix checkstyle", "committedDate": "2020-01-17T19:01:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2MTcwNQ==", "url": "https://github.com/pmd/pmd/pull/2211#discussion_r368061705", "bodyText": "Why are getBeginColumn() and getBeginLine() deprecated?", "author": "adangel", "createdAt": "2020-01-17T17:55:31Z", "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/CharStream.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.ast;\n+\n+\n+import java.io.IOException;\n+\n+import net.sourceforge.pmd.lang.ast.impl.javacc.JavaccTokenDocument;\n+\n+/**\n+ * PMD flavour of character streams used by JavaCC parsers.\n+ *\n+ * TODO for when all JavaCC languages are aligned:\n+ *   * rename methods to match decent naming conventions\n+ *   * move to impl.javacc package\n+ */\n+public interface CharStream {\n+\n+    /**\n+     * Returns the next character from the input. After a {@link #backup(int)},\n+     * some of the already read chars must be spit out again.\n+     *\n+     * @return The next character\n+     *\n+     * @throws IOException  If the underlying char stream throws\n+     */\n+    char readChar() throws IOException;\n+\n+\n+    /**\n+     * Calls {@link #readChar()} and returns its value, marking its position\n+     * as the beginning of the next token. All characters must remain in\n+     * the buffer between two successive calls to this method to implement\n+     * backup correctly.\n+     */\n+    char BeginToken() throws IOException; // SUPPRESS CHECKSTYLE we'll rename it later\n+\n+\n+    /**\n+     * Returns a string made up of characters from the token mark up to\n+     * to the current buffer position.\n+     */\n+    String GetImage(); // SUPPRESS CHECKSTYLE we'll rename it later\n+\n+\n+    /**\n+     * Returns an array of characters that make up the suffix of length 'len' for\n+     * the current token. This is used to build up the matched string\n+     * for use in actions in the case of MORE. A simple and inefficient\n+     * implementation of this is as follows :\n+     *\n+     * <pre>{@code\n+     * String t = tokenImage();\n+     * return t.substring(t.length() - len, t.length()).toCharArray();\n+     * }</pre>\n+     *\n+     * @param len Length of the returned array\n+     *\n+     * @return The suffix\n+     *\n+     * @throws IndexOutOfBoundsException If len is greater than the length of the\n+     *                                   current token\n+     */\n+    char[] GetSuffix(int len); // SUPPRESS CHECKSTYLE we'll rename it later\n+\n+\n+    /**\n+     * Pushes a given number of already read chars into the buffer.\n+     * Subsequent calls to {@link #readChar()} will read those characters\n+     * before proceeding to read the underlying char stream.\n+     *\n+     * <p>A lexer calls this method if it has already read some characters,\n+     * but cannot use them to match a (longer) token. So, they will\n+     * be used again as the prefix of the next token.\n+     *\n+     * @throws AssertionError If the requested amount is greater than the\n+     *                        number of read chars\n+     */\n+    void backup(int amount);\n+\n+    @Deprecated", "originalCommit": "8adc292d6d03c1329768d534c3fb648b63cb0cc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE4MjE1Nw==", "url": "https://github.com/pmd/pmd/pull/2211#discussion_r368182157", "bodyText": "Token constructors now only use startOffset/endOffset. This makes getBeginLine and getBeginColumn unused by Javacc. It still uses getEndLine and getEndColumn once per token manager, to generate a TokenMgrError. I'm not sure we should keep those methods once all modules have been ported, if they're unused.", "author": "oowekyala", "createdAt": "2020-01-17T23:55:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2MTcwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NjEyMw==", "url": "https://github.com/pmd/pmd/pull/2211#discussion_r368066123", "bodyText": "the current lexical state is right now not provided for makeMessage. However, it would be a int here, so not too helpful...", "author": "adangel", "createdAt": "2020-01-17T18:06:41Z", "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/TokenMgrError.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.ast;\n+\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+import net.sourceforge.pmd.annotation.InternalApi;\n+import net.sourceforge.pmd.util.StringUtil;\n+\n+/**\n+ * An error thrown during lexical analysis of a file.\n+ */\n+public final class TokenMgrError extends RuntimeException {\n+\n+\n+    /**\n+     * @deprecated Will be removed when all modules are ported\n+     */\n+    @Deprecated\n+    public static final int LEXICAL_ERROR = 0;\n+\n+    /**\n+     * @deprecated Will be removed when all modules are ported,\n+     *     see {@link #TokenMgrError(String, int)}\n+     */\n+    @Deprecated\n+    public static final int INVALID_LEXICAL_STATE = 1;\n+\n+    private final int line;\n+    private final int column;\n+    private final String filename;\n+\n+    public TokenMgrError(int line, int column, @Nullable String filename, String message, @Nullable Throwable cause) {\n+        super(message, cause);\n+        this.line = line;\n+        this.column = column;\n+        this.filename = filename;\n+    }\n+\n+    public TokenMgrError(int line, int column, String message, @Nullable Throwable cause) {\n+        this(line, column, null, message, cause);\n+    }\n+\n+    /**\n+     * @deprecated This is used by javacc but those usages are being replaced with an IllegalArgumentException\n+     */\n+    @Deprecated\n+    @SuppressWarnings(\"PMD.UnusedFormalParameter\")\n+    public TokenMgrError(String message, int errorCode) {\n+        this(-1, -1, null, message, null);\n+    }\n+\n+    /**\n+     * Constructor called by JavaCC.\n+     */\n+    @InternalApi\n+    @SuppressWarnings(\"PMD.UnusedFormalParameter\")\n+    public TokenMgrError(boolean eofSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n+        super(makeMessage(eofSeen, errorLine, errorColumn, errorAfter, curChar));\n+        line = errorLine;\n+        column = errorColumn;\n+        filename = AbstractTokenManager.getFileName();\n+    }\n+\n+    /**\n+     * Constructor called by JavaCC.\n+     *\n+     * @deprecated The error code is useless, ported modules use the other constructor\n+     */\n+    @Deprecated\n+    @SuppressWarnings(\"PMD.UnusedFormalParameter\")\n+    public TokenMgrError(boolean eofSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int errorCode) {\n+        super(makeMessage(eofSeen, errorLine, errorColumn, errorAfter, curChar));\n+        line = errorLine;\n+        column = errorColumn;\n+        filename = AbstractTokenManager.getFileName();\n+    }\n+\n+    public int getLine() {\n+        return line;\n+    }\n+\n+    public int getColumn() {\n+        return column;\n+    }\n+\n+    public @Nullable String getFilename() {\n+        return filename;\n+    }\n+\n+    /**\n+     * Returns a detailed message for the Error when it is thrown by the\n+     * token manager to indicate a lexical error.\n+     * Parameters :\n+     * eofseen     : indicates if EOF caused the lexical error\n+     * curLexState : lexical state in which this error occurred", "originalCommit": "8adc292d6d03c1329768d534c3fb648b63cb0cc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA4MzQ1Mw==", "url": "https://github.com/pmd/pmd/pull/2211#discussion_r368083453", "bodyText": "I found, that the names are generated in the token manager, e.g. JavaParserTokenManager#lexStateNames", "author": "adangel", "createdAt": "2020-01-17T18:49:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NjEyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzMzU2MA==", "url": "https://github.com/pmd/pmd/pull/2211#discussion_r370933560", "bodyText": "Not many languages really use different lexical states. Though maybe, we can use the parameter later anyway. We'd need a callback to get lexStateNames. Maybe, we should define some \"master\" interface, which provides access to all this static info (lexical state names, node names, token names, parser constructor, token document constructor, etc). Or maybe just an AbstractJavaccParser would suffice.", "author": "oowekyala", "createdAt": "2020-01-25T13:28:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NjEyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3ODkxNA==", "url": "https://github.com/pmd/pmd/pull/2211#discussion_r370978914", "bodyText": "This is done now. I modified the calls to the constructor so that it passes the lexical state name instead of the number. This happens only for modules that use the new ant build.", "author": "oowekyala", "createdAt": "2020-01-26T07:26:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NjEyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2OTAzMA==", "url": "https://github.com/pmd/pmd/pull/2211#discussion_r368069030", "bodyText": "Do we need to internalize pmd-core:net.sourceforge.pmd.lang.ast.JavaCharStream on master?\nAnd btw, duplicated license header", "author": "adangel", "createdAt": "2020-01-17T18:13:55Z", "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/impl/javacc/JavaCharStream.java", "diffHunk": "@@ -2,48 +2,41 @@\n  * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n  */\n \n-package net.sourceforge.pmd.lang.ast;\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.ast.impl.javacc;", "originalCommit": "8adc292d6d03c1329768d534c3fb648b63cb0cc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0NDg4Mg==", "url": "https://github.com/pmd/pmd/pull/2211#discussion_r368244882", "bodyText": "I think so yes", "author": "oowekyala", "createdAt": "2020-01-18T19:46:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2OTAzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3NDczNQ==", "url": "https://github.com/pmd/pmd/pull/2211#discussion_r368074735", "bodyText": "Maybe we could provide a constructor, that also takes the array of token kind names:\nJavaccTokenDocument document = new JavaccTokenDocument(source, CppParserConstants.tokenImage);", "author": "adangel", "createdAt": "2020-01-17T18:28:14Z", "path": "pmd-cpp/src/main/java/net/sourceforge/pmd/lang/cpp/CppCharStream.java", "diffHunk": "@@ -59,4 +65,17 @@ public String GetImage() {\n         String image = super.GetImage();\n         return CONTINUATION.matcher(image).replaceAll(\"\");\n     }\n+\n+    public static CppCharStream newCppCharStream(Reader dstream) {\n+        String source = CharStreamFactory.toString(dstream);\n+        JavaccTokenDocument document = new JavaccTokenDocument(source) {", "originalCommit": "8adc292d6d03c1329768d534c3fb648b63cb0cc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5ODk1OA==", "url": "https://github.com/pmd/pmd/pull/2211#discussion_r369598958", "bodyText": "I feel like this would only help in this specific case, where the implementation is awkward because the Cpp module does not yet use the new ant build. That one makes the array private :/", "author": "oowekyala", "createdAt": "2020-01-22T14:41:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3NDczNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3NTY3OQ==", "url": "https://github.com/pmd/pmd/pull/2211#discussion_r368075679", "bodyText": "We probably should internalize our *CharStream impls on master, they should anyway not be used directly", "author": "adangel", "createdAt": "2020-01-17T18:30:31Z", "path": "pmd-cpp/src/main/java/net/sourceforge/pmd/lang/cpp/CppCharStream.java", "diffHunk": "@@ -23,10 +28,11 @@\n     private static final char NEWLINE = '\\n';\n     private static final char CARRIAGE_RETURN = '\\r';\n \n-    public CppCharStream(Reader dstream) {\n-        super(dstream);\n+    public CppCharStream(JavaccTokenDocument document) {", "originalCommit": "8adc292d6d03c1329768d534c3fb648b63cb0cc7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA4MjU0Mg==", "url": "https://github.com/pmd/pmd/pull/2211#discussion_r368082542", "bodyText": "Just for me, to understand this: we don't need a real id here, because the created nodes end up only in the symbol table, but not in the AST. We would need the id, if we query the AST via XPath, to resolve the node names. Is this correct?", "author": "adangel", "createdAt": "2020-01-17T18:47:40Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symboltable/ClassScope.java", "diffHunk": "@@ -295,15 +294,15 @@ private void matchMethodDeclaration(JavaNameOccurrence occurrence,\n      */\n     private MethodNameDeclaration createBuiltInMethodDeclaration(final String methodName,\n             final String... parameterTypes) {\n-        ASTMethodDeclaration methodDeclaration = new ASTMethodDeclaration(JavaParserTreeConstants.JJTMETHODDECLARATION);\n+        ASTMethodDeclaration methodDeclaration = new ASTMethodDeclaration(0);", "originalCommit": "8adc292d6d03c1329768d534c3fb648b63cb0cc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0NTAyNQ==", "url": "https://github.com/pmd/pmd/pull/2211#discussion_r368245025", "bodyText": "Yes. But I didn't replace the ID with a valid one because anyway this piece of code is going away. Nodes should not be created outside of the ast package", "author": "oowekyala", "createdAt": "2020-01-18T19:49:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA4MjU0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA4NDgxOQ==", "url": "https://github.com/pmd/pmd/pull/2211#discussion_r368084819", "bodyText": "Do we need to internalize net.sourceforge.pmd.lang.java.ast.JavaParserConstants on master, so that we can rename it?", "author": "adangel", "createdAt": "2020-01-17T18:53:01Z", "path": "pmd-java/src/test/java/net/sourceforge/pmd/cpd/JavaTokensTokenizerTest.java", "diffHunk": "@@ -12,7 +12,7 @@\n import org.junit.Test;\n \n import net.sourceforge.pmd.PMD;\n-import net.sourceforge.pmd.lang.java.ast.JavaParserConstants;", "originalCommit": "8adc292d6d03c1329768d534c3fb648b63cb0cc7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ebb65621fd19dfdcca31453ed0015542270b1667", "url": "https://github.com/pmd/pmd/commit/ebb65621fd19dfdcca31453ed0015542270b1667", "message": "Merge branch '7.0.x' into master-ant-script", "committedDate": "2020-01-17T23:53:28Z", "type": "commit"}, {"oid": "035217ab25fe9b1a87a057c7cbaac93c447817f1", "url": "https://github.com/pmd/pmd/commit/035217ab25fe9b1a87a057c7cbaac93c447817f1", "message": "Merge branch 'master-ant-script' of github.com:oowekyala/pmd into master-ant-script", "committedDate": "2020-01-18T19:43:06Z", "type": "commit"}, {"oid": "404162afb6d9fcd67a09e8660675fa3bbff7990a", "url": "https://github.com/pmd/pmd/commit/404162afb6d9fcd67a09e8660675fa3bbff7990a", "message": "Remove duplicated license header", "committedDate": "2020-01-18T19:46:13Z", "type": "commit"}, {"oid": "2a7d770121b582af5bf0f694972f9d9c8b2beca2", "url": "https://github.com/pmd/pmd/commit/2a7d770121b582af5bf0f694972f9d9c8b2beca2", "message": "Merge branch '7.0.x' into master-ant-script", "committedDate": "2020-01-18T21:25:07Z", "type": "commit"}, {"oid": "44535a2fc242dd903c6d859f20053e0074e168d7", "url": "https://github.com/pmd/pmd/commit/44535a2fc242dd903c6d859f20053e0074e168d7", "message": "Fix wrong cast\n\nTODO revert when all languages are ported", "committedDate": "2020-01-18T23:09:58Z", "type": "commit"}, {"oid": "f9864977580b0d6bd41556c02495b87eaf3c77ba", "url": "https://github.com/pmd/pmd/commit/f9864977580b0d6bd41556c02495b87eaf3c77ba", "message": "Fix pmd-vm", "committedDate": "2020-01-18T23:19:55Z", "type": "commit"}, {"oid": "96500f90fcbf6a9eb21b8621d046cc143f1ea603", "url": "https://github.com/pmd/pmd/commit/96500f90fcbf6a9eb21b8621d046cc143f1ea603", "message": "Autofix tokens of JJTree definite nodes", "committedDate": "2020-01-19T03:55:35Z", "type": "commit"}, {"oid": "23cb9f41fbe2d4b5904df04aff926cf0374620aa", "url": "https://github.com/pmd/pmd/commit/23cb9f41fbe2d4b5904df04aff926cf0374620aa", "message": "Fix PLSQL", "committedDate": "2020-01-19T04:54:16Z", "type": "commit"}, {"oid": "f3246d6fc3f89a328a70eebbfd25041f8a7f822c", "url": "https://github.com/pmd/pmd/commit/f3246d6fc3f89a328a70eebbfd25041f8a7f822c", "message": "Merge branch '7.0.x' into master-ant-script", "committedDate": "2020-01-19T05:09:56Z", "type": "commit"}, {"oid": "925944289dcfce529f71da4e0a31c1b40d71f1c1", "url": "https://github.com/pmd/pmd/commit/925944289dcfce529f71da4e0a31c1b40d71f1c1", "message": "Merge branch '7.0.x' into master-ant-script", "committedDate": "2020-01-24T19:15:16Z", "type": "commit"}, {"oid": "35da3500072b8951311f1e69731c60a881af5785", "url": "https://github.com/pmd/pmd/commit/35da3500072b8951311f1e69731c60a881af5785", "message": "Merge branch '7.0.x' into master-ant-script", "committedDate": "2020-01-24T22:48:35Z", "type": "commit"}, {"oid": "8c076bd657cfa2a9a0fe035ed8e6a2cf644af232", "url": "https://github.com/pmd/pmd/commit/8c076bd657cfa2a9a0fe035ed8e6a2cf644af232", "message": "Checkstyle", "committedDate": "2020-01-24T23:15:37Z", "type": "commit"}, {"oid": "152801bb391f6a2ab743f7dfc135c7bfa5439f26", "url": "https://github.com/pmd/pmd/commit/152801bb391f6a2ab743f7dfc135c7bfa5439f26", "message": "Merge branch '7.0.x' into master-ant-script", "committedDate": "2020-01-25T13:28:37Z", "type": "commit"}, {"oid": "d726990e09b573e6cfe6bf60f41e6956325a6129", "url": "https://github.com/pmd/pmd/commit/d726990e09b573e6cfe6bf60f41e6956325a6129", "message": "Make base parser adapter for jjtree", "committedDate": "2020-01-25T15:36:42Z", "type": "commit"}, {"oid": "d726990e09b573e6cfe6bf60f41e6956325a6129", "url": "https://github.com/pmd/pmd/commit/d726990e09b573e6cfe6bf60f41e6956325a6129", "message": "Make base parser adapter for jjtree", "committedDate": "2020-01-25T15:36:42Z", "type": "forcePushed"}]}