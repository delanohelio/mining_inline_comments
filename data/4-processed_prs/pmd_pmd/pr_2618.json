{"pr_number": 2618, "pr_title": "[java] New rule: UnusedAssignment", "pr_createdAt": "2020-06-27T17:14:04Z", "pr_url": "https://github.com/pmd/pmd/pull/2618", "timeline": [{"oid": "dd0532f09504cfab4a101811bd132df58759d77a", "url": "https://github.com/pmd/pmd/commit/dd0532f09504cfab4a101811bd132df58759d77a", "message": "Add UnusedAssignment to replace data flow rule", "committedDate": "2020-06-27T16:21:38Z", "type": "commit"}, {"oid": "e8bd8c1d7179e1aa1ad15632ffd8af9cc27408f4", "url": "https://github.com/pmd/pmd/commit/e8bd8c1d7179e1aa1ad15632ffd8af9cc27408f4", "message": "Fix conditional flow", "committedDate": "2020-06-27T16:21:38Z", "type": "commit"}, {"oid": "138698be0a737727fdb7412101ecc86067e149fb", "url": "https://github.com/pmd/pmd/commit/138698be0a737727fdb7412101ecc86067e149fb", "message": "Handle while loop", "committedDate": "2020-06-27T16:21:38Z", "type": "commit"}, {"oid": "2448cc73ceaac84d4ee5d445a0e9c953750e9b12", "url": "https://github.com/pmd/pmd/commit/2448cc73ceaac84d4ee5d445a0e9c953750e9b12", "message": "Handle break", "committedDate": "2020-06-27T16:21:38Z", "type": "commit"}, {"oid": "d0a96e78086aff90a7b49c7e48d47356fa0a3806", "url": "https://github.com/pmd/pmd/commit/d0a96e78086aff90a7b49c7e48d47356fa0a3806", "message": "Finish loops", "committedDate": "2020-06-27T16:21:38Z", "type": "commit"}, {"oid": "e771242597b6e469b9b42756b936410731f53575", "url": "https://github.com/pmd/pmd/commit/e771242597b6e469b9b42756b936410731f53575", "message": "Switch", "committedDate": "2020-06-27T16:21:38Z", "type": "commit"}, {"oid": "75b5fbf62b0ab733201fc76c21b2521c698f77d9", "url": "https://github.com/pmd/pmd/commit/75b5fbf62b0ab733201fc76c21b2521c698f77d9", "message": "Continue statement", "committedDate": "2020-06-27T16:21:38Z", "type": "commit"}, {"oid": "5cebe5d5ec4eae0f6f86854f16df2e525903732a", "url": "https://github.com/pmd/pmd/commit/5cebe5d5ec4eae0f6f86854f16df2e525903732a", "message": "Consider inc/decrement expressions", "committedDate": "2020-06-27T16:21:38Z", "type": "commit"}, {"oid": "990b39c47219ed45ea9b86477dcd41001ed0067f", "url": "https://github.com/pmd/pmd/commit/990b39c47219ed45ea9b86477dcd41001ed0067f", "message": "Handle labeled loops", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "fec7a3b14bb7fe5a51a6988f895a57d5debee9ad", "url": "https://github.com/pmd/pmd/commit/fec7a3b14bb7fe5a51a6988f895a57d5debee9ad", "message": "REVERT code to check for unused variables", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "b6dd5ad425a6ef8ce6c85e5669912117f63909e8", "url": "https://github.com/pmd/pmd/commit/b6dd5ad425a6ef8ce6c85e5669912117f63909e8", "message": "Simplify", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "aee18faae3cf75144f284f48d9d6fc18181fc7b2", "url": "https://github.com/pmd/pmd/commit/aee18faae3cf75144f284f48d9d6fc18181fc7b2", "message": "Named labels", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "069287e9e15d88263d49414e2470b8fd293eb1dc", "url": "https://github.com/pmd/pmd/commit/069287e9e15d88263d49414e2470b8fd293eb1dc", "message": "Better messages", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "9f54f2715e8c3bcdf34a26e9e688c92761850f44", "url": "https://github.com/pmd/pmd/commit/9f54f2715e8c3bcdf34a26e9e688c92761850f44", "message": "Change terminology", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "972610fe898c7c308f716ff423511bef295cf13c", "url": "https://github.com/pmd/pmd/commit/972610fe898c7c308f716ff423511bef295cf13c", "message": "Try/catch", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "e228e5590fd0a9a029f74cd43e0a9f2f7b4997b2", "url": "https://github.com/pmd/pmd/commit/e228e5590fd0a9a029f74cd43e0a9f2f7b4997b2", "message": "Improve finally", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "32392ed27e77669dbc1731eeeba39cf7bb1350f0", "url": "https://github.com/pmd/pmd/commit/32392ed27e77669dbc1731eeeba39cf7bb1350f0", "message": "Lambda bug", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "b7e5cb0182fe5b9ccf9365728f5db7cfaf55b3c8", "url": "https://github.com/pmd/pmd/commit/b7e5cb0182fe5b9ccf9365728f5db7cfaf55b3c8", "message": "Refactor", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "d9a9a83caff0c857258854d350b29c53aa24b80d", "url": "https://github.com/pmd/pmd/commit/d9a9a83caff0c857258854d350b29c53aa24b80d", "message": "Handle field initializers and ctors", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "46ae538b18ff625c752f598f8e3c6b407778a27a", "url": "https://github.com/pmd/pmd/commit/46ae538b18ff625c752f598f8e3c6b407778a27a", "message": "Fix some FPs", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "3a036c4933e2485b60cc7d4eb2260f4719dbad4d", "url": "https://github.com/pmd/pmd/commit/3a036c4933e2485b60cc7d4eb2260f4719dbad4d", "message": "FN with ctor var shadowing", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "e0e2d8de6c032d902e62839679ecee8376f14841", "url": "https://github.com/pmd/pmd/commit/e0e2d8de6c032d902e62839679ecee8376f14841", "message": "Fix foreach bug", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "776bf0990c8a7557e7e11720dd59e508d66de0b3", "url": "https://github.com/pmd/pmd/commit/776bf0990c8a7557e7e11720dd59e508d66de0b3", "message": "React to @SuppressWarnings(\"unused\")", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "5fe97ee9ca339c2d95d2872ad56bb1a5c82dfecb", "url": "https://github.com/pmd/pmd/commit/5fe97ee9ca339c2d95d2872ad56bb1a5c82dfecb", "message": "Add tests", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "96e96406ff8942e8513119dd3dc46f93dc33af23", "url": "https://github.com/pmd/pmd/commit/96e96406ff8942e8513119dd3dc46f93dc33af23", "message": "Better messages", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "496f7653c692c9a29dace4d3cddca539300c6547", "url": "https://github.com/pmd/pmd/commit/496f7653c692c9a29dace4d3cddca539300c6547", "message": "Special case pre-increment if value is used", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "cb09b6b9be067a670524c0345d99bbba01990aae", "url": "https://github.com/pmd/pmd/commit/cb09b6b9be067a670524c0345d99bbba01990aae", "message": "Test local/anon class", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "c837e244e9106d07ddefba31a1fbf24d6509dd6b", "url": "https://github.com/pmd/pmd/commit/c837e244e9106d07ddefba31a1fbf24d6509dd6b", "message": "Handle shortcut boolean expressions in if/ternary", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "1d022d3d918a9de2b48caf255ef2d7cc9a11c29a", "url": "https://github.com/pmd/pmd/commit/1d022d3d918a9de2b48caf255ef2d7cc9a11c29a", "message": "Fix FP with side-effect in toplevel condition", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "58adfca79ffa118860e6fdd7d9cfb77231267c87", "url": "https://github.com/pmd/pmd/commit/58adfca79ffa118860e6fdd7d9cfb77231267c87", "message": "Fix parenthesized expressions", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "b7c09a955507c4c42e257ed4d02b0b956afcbf89", "url": "https://github.com/pmd/pmd/commit/b7c09a955507c4c42e257ed4d02b0b956afcbf89", "message": "Suppress some overlap with UnusedVariable", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "2dc8675b8573b6d562eed398b2d2fd96bd8dd653", "url": "https://github.com/pmd/pmd/commit/2dc8675b8573b6d562eed398b2d2fd96bd8dd653", "message": "Doc", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "b0891dfca34ddee707c209c9fbf66e7452aafe68", "url": "https://github.com/pmd/pmd/commit/b0891dfca34ddee707c209c9fbf66e7452aafe68", "message": "Refactor", "committedDate": "2020-06-27T16:21:39Z", "type": "commit"}, {"oid": "36b0f831587452210d95378e12584ddd13783ee6", "url": "https://github.com/pmd/pmd/commit/36b0f831587452210d95378e12584ddd13783ee6", "message": "Make sure DFA issues are fixed\n\nRefs #1304, #399, #400, #1107, #1251, #1606, #1675, #1682, #2131", "committedDate": "2020-06-27T17:08:50Z", "type": "commit"}, {"oid": "b04954112631c6ac820b2e8daec994be0475d19f", "url": "https://github.com/pmd/pmd/commit/b04954112631c6ac820b2e8daec994be0475d19f", "message": "Fix pmd warnings", "committedDate": "2020-06-27T20:19:13Z", "type": "commit"}, {"oid": "4207c367402119ef636a03f01e8a9be9a1d882c2", "url": "https://github.com/pmd/pmd/commit/4207c367402119ef636a03f01e8a9be9a1d882c2", "message": "Fix some bugs", "committedDate": "2020-06-27T21:34:29Z", "type": "commit"}, {"oid": "49f775be83dd3a62a04eba8089dabab754bf6ca6", "url": "https://github.com/pmd/pmd/commit/49f775be83dd3a62a04eba8089dabab754bf6ca6", "message": "Disable reporting of unused vars by default", "committedDate": "2020-06-27T22:26:22Z", "type": "commit"}, {"oid": "105f1a13a1ad4e07fa923d0def82283424954146", "url": "https://github.com/pmd/pmd/commit/105f1a13a1ad4e07fa923d0def82283424954146", "message": "Implement loop condition flow", "committedDate": "2020-06-28T00:22:06Z", "type": "commit"}, {"oid": "388e29a9debba65ccba4af181e8f5309c31f30ad", "url": "https://github.com/pmd/pmd/commit/388e29a9debba65ccba4af181e8f5309c31f30ad", "message": "Fix unused exception in loop", "committedDate": "2020-06-28T14:35:53Z", "type": "commit"}, {"oid": "3d7aaf7cda1f1e7fb09e2856e3e8de1fc5a85dcc", "url": "https://github.com/pmd/pmd/commit/3d7aaf7cda1f1e7fb09e2856e3e8de1fc5a85dcc", "message": "Fix FPs with reportUnusedVariables & foreach vars", "committedDate": "2020-06-28T15:03:57Z", "type": "commit"}, {"oid": "546c525ad064753531cd70af3e21d556016f0cc0", "url": "https://github.com/pmd/pmd/commit/546c525ad064753531cd70af3e21d556016f0cc0", "message": "Shorten messages a bit", "committedDate": "2020-06-28T15:08:35Z", "type": "commit"}, {"oid": "a6d9d595ddaf9fe3efaffe07a7ec5936a06902fe", "url": "https://github.com/pmd/pmd/commit/a6d9d595ddaf9fe3efaffe07a7ec5936a06902fe", "message": "Add test case for unused var", "committedDate": "2020-06-28T15:26:23Z", "type": "commit"}, {"oid": "82995fbe077bfa3358093f6776de227a9c77fddb", "url": "https://github.com/pmd/pmd/commit/82995fbe077bfa3358093f6776de227a9c77fddb", "message": "Fix unused formal value FN", "committedDate": "2020-06-28T15:57:45Z", "type": "commit"}, {"oid": "734da43fbf971c10249460f5e1a16e50c1a4824d", "url": "https://github.com/pmd/pmd/commit/734da43fbf971c10249460f5e1a16e50c1a4824d", "message": "Ignore vars that start with \"ignore\"", "committedDate": "2020-06-28T16:11:14Z", "type": "commit"}, {"oid": "8c30440843f9ddd7663efcfbe2dbec0babcb8fa6", "url": "https://github.com/pmd/pmd/commit/8c30440843f9ddd7663efcfbe2dbec0babcb8fa6", "message": "Move to bestpractices.xml", "committedDate": "2020-06-28T16:15:04Z", "type": "commit"}, {"oid": "e04223356b54160688ddcadc1a3b60f03e662c5c", "url": "https://github.com/pmd/pmd/commit/e04223356b54160688ddcadc1a3b60f03e662c5c", "message": "Merge branch 'master' into new-rule-UnusedAssignment", "committedDate": "2020-06-28T16:19:40Z", "type": "commit"}, {"oid": "556685de1b7e4e96f8c84388be7fa024f4a4d02f", "url": "https://github.com/pmd/pmd/commit/556685de1b7e4e96f8c84388be7fa024f4a4d02f", "message": "Remove changes to VariableNameDeclaration\n\nProbably this is what causes DFAAR to change\nbehavior. The current behavior is wrong (two\nvariables are not equal just from their name,\nthat doesn't account for whether they're declared\nindependently or shadow a declaration). But\nwhatever, this will be scrapped in 7.0", "committedDate": "2020-06-28T16:41:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzNDYxNA==", "url": "https://github.com/pmd/pmd/pull/2618#discussion_r455934614", "bodyText": "I think, we can use rule chain, then? I'll try it before I merge....", "author": "adangel", "createdAt": "2020-07-16T16:59:25Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UnusedAssignmentRule.java", "diffHunk": "@@ -0,0 +1,1343 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.java.rule.bestpractices;\n+\n+\n+import static net.sourceforge.pmd.lang.java.rule.codestyle.ConfusingTernaryRule.unwrapParentheses;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import net.sourceforge.pmd.RuleContext;\n+import net.sourceforge.pmd.lang.ast.Node;\n+import net.sourceforge.pmd.lang.java.ast.ASTAnyTypeBodyDeclaration;\n+import net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration;\n+import net.sourceforge.pmd.lang.java.ast.ASTAssignmentOperator;\n+import net.sourceforge.pmd.lang.java.ast.ASTBlock;\n+import net.sourceforge.pmd.lang.java.ast.ASTBlockStatement;\n+import net.sourceforge.pmd.lang.java.ast.ASTBreakStatement;\n+import net.sourceforge.pmd.lang.java.ast.ASTCatchStatement;\n+import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody;\n+import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;\n+import net.sourceforge.pmd.lang.java.ast.ASTConditionalAndExpression;\n+import net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression;\n+import net.sourceforge.pmd.lang.java.ast.ASTConditionalOrExpression;\n+import net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration;\n+import net.sourceforge.pmd.lang.java.ast.ASTContinueStatement;\n+import net.sourceforge.pmd.lang.java.ast.ASTDoStatement;\n+import net.sourceforge.pmd.lang.java.ast.ASTEnumBody;\n+import net.sourceforge.pmd.lang.java.ast.ASTExpression;\n+import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;\n+import net.sourceforge.pmd.lang.java.ast.ASTFinallyStatement;\n+import net.sourceforge.pmd.lang.java.ast.ASTForInit;\n+import net.sourceforge.pmd.lang.java.ast.ASTForStatement;\n+import net.sourceforge.pmd.lang.java.ast.ASTForUpdate;\n+import net.sourceforge.pmd.lang.java.ast.ASTFormalParameter;\n+import net.sourceforge.pmd.lang.java.ast.ASTIfStatement;\n+import net.sourceforge.pmd.lang.java.ast.ASTInitializer;\n+import net.sourceforge.pmd.lang.java.ast.ASTLabeledStatement;\n+import net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression;\n+import net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration;\n+import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;\n+import net.sourceforge.pmd.lang.java.ast.ASTName;\n+import net.sourceforge.pmd.lang.java.ast.ASTPostfixExpression;\n+import net.sourceforge.pmd.lang.java.ast.ASTPreDecrementExpression;\n+import net.sourceforge.pmd.lang.java.ast.ASTPreIncrementExpression;\n+import net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression;\n+import net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix;\n+import net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix;\n+import net.sourceforge.pmd.lang.java.ast.ASTResourceSpecification;\n+import net.sourceforge.pmd.lang.java.ast.ASTReturnStatement;\n+import net.sourceforge.pmd.lang.java.ast.ASTStatement;\n+import net.sourceforge.pmd.lang.java.ast.ASTStatementExpression;\n+import net.sourceforge.pmd.lang.java.ast.ASTSwitchExpression;\n+import net.sourceforge.pmd.lang.java.ast.ASTSwitchLabel;\n+import net.sourceforge.pmd.lang.java.ast.ASTSwitchLabeledRule;\n+import net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement;\n+import net.sourceforge.pmd.lang.java.ast.ASTThrowStatement;\n+import net.sourceforge.pmd.lang.java.ast.ASTTryStatement;\n+import net.sourceforge.pmd.lang.java.ast.ASTTypeDeclaration;\n+import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator;\n+import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;\n+import net.sourceforge.pmd.lang.java.ast.ASTVariableInitializer;\n+import net.sourceforge.pmd.lang.java.ast.ASTWhileStatement;\n+import net.sourceforge.pmd.lang.java.ast.ASTYieldStatement;\n+import net.sourceforge.pmd.lang.java.ast.JavaNode;\n+import net.sourceforge.pmd.lang.java.ast.JavaParserVisitorAdapter;\n+import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;\n+import net.sourceforge.pmd.lang.java.symboltable.ClassScope;\n+import net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration;\n+import net.sourceforge.pmd.lang.symboltable.Scope;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+public class UnusedAssignmentRule extends AbstractJavaRule {\n+\n+    /*\n+        Detects unused assignments. This performs a reaching definition\n+        analysis. This makes the assumption that there is no dead code.\n+\n+        Since we have the reaching definitions at each variable usage, we\n+        could also use that to detect other kinds of bug, eg conditions\n+        that are always true, or dereferences that will always NPE. In\n+        the general case though, this is complicated and better left to\n+        a DFA library, eg google Z3.\n+\n+        This analysis may be used as-is to detect switch labels that\n+        fall-through, which could be useful to improve accuracy of other\n+        rules.\n+\n+        TODO\n+           * labels on arbitrary statements (currently only loops)\n+           * explicit ctor call (hard to impossible without type res,\n+             or at least proper graph algorithms like toposort)\n+                -> this is pretty invisible as it causes false negatives, not FPs\n+           * test ternary expr\n+\n+        DONE\n+           * conditionals\n+           * loops\n+           * switch\n+           * loop labels\n+           * try/catch/finally\n+           * lambdas\n+           * constructors + initializers\n+           * anon class\n+           * test this.field in ctors\n+           * foreach var should be reassigned from one iter to another\n+           * test local class/anonymous class\n+           * shortcut conditionals have their own control-flow\n+           * parenthesized expressions\n+           * conditional exprs in loops\n+           * ignore variables that start with 'ignore'\n+\n+     */\n+\n+    private static final PropertyDescriptor<Boolean> CHECK_PREFIX_INCREMENT =\n+        PropertyFactory.booleanProperty(\"checkUnusedPrefixIncrement\")\n+                       .desc(\"Report expressions like ++i that may be replaced with (i + 1)\")\n+                       .defaultValue(false)\n+                       .build();\n+\n+    private static final PropertyDescriptor<Boolean> REPORT_UNUSED_VARS =\n+        PropertyFactory.booleanProperty(\"reportUnusedVariables\")\n+                       .desc(\"Report variables that are only initialized, and never read at all. \"\n+                                 + \"The rule UnusedVariable already cares for that, but you can enable it if needed\")\n+                       .defaultValue(false)\n+                       .build();\n+\n+    public UnusedAssignmentRule() {\n+        definePropertyDescriptor(CHECK_PREFIX_INCREMENT);\n+        definePropertyDescriptor(REPORT_UNUSED_VARS);\n+    }\n+\n+    @Override\n+    public Object visit(ASTCompilationUnit node, Object data) {\n+        for (JavaNode child : node.children()) {\n+            if (child instanceof ASTTypeDeclaration) {\n+\n+                ASTAnyTypeDeclaration typeDecl = (ASTAnyTypeDeclaration) child.getChild(child.getNumChildren() - 1);\n+                GlobalAlgoState result = new GlobalAlgoState();\n+                typeDecl.jjtAccept(ReachingDefsVisitor.ONLY_LOCALS, new SpanInfo(result));\n+\n+                reportFinished(result, (RuleContext) data);\n+            }\n+        }\n+\n+        return data;", "originalCommit": "556685de1b7e4e96f8c84388be7fa024f4a4d02f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2OTc5Ng==", "url": "https://github.com/pmd/pmd/pull/2618#discussion_r455969796", "bodyText": "I've added the rule chain visit, but it probably doesn't make any difference anyway.", "author": "adangel", "createdAt": "2020-07-16T17:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzNDYxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzNjU1OA==", "url": "https://github.com/pmd/pmd/pull/2618#discussion_r455936558", "bodyText": "I'll try to make the rule names actual links. Hopefully the {% rule notation will work here....", "author": "adangel", "createdAt": "2020-07-16T17:02:34Z", "path": "pmd-java/src/main/resources/category/java/bestpractices.xml", "diffHunk": "@@ -1298,6 +1298,120 @@ class Foo{\n         </example>\n     </rule>\n \n+    <rule name=\"UnusedAssignment\"\n+          language=\"java\"\n+          since=\"6.26.0\"\n+          message=\"The value assigned to this variable is never used or always overwritten\"\n+          class=\"net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedAssignmentRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_java_bestpractices.html#unusedassignment\">\n+        <description>\n+            Reports assignments to variables that are never used before the variable is overwritten,\n+            or goes out of scope. Unused assignments are those for which\n+            1. The variable is never read after the assignment, or\n+            2. The assigned value is always overwritten by other assignments before the next read of\n+            the variable.\n+\n+            The rule doesn't consider assignments to fields except for those of `this` in a constructor,\n+            or static fields of the current class in static initializers.\n+\n+            The rule may be suppressed with the standard `@SuppressWarnings(\"unused\")` tag.\n+\n+            The rule subsumes UnusedLocalVariable, and UnusedFormalParameter. Those violations are filtered", "originalCommit": "556685de1b7e4e96f8c84388be7fa024f4a4d02f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}