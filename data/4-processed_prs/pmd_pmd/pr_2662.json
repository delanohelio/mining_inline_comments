{"pr_number": 2662, "pr_title": "[java] UnnecessaryCaseChange can not detect the case like: foo.equals(bar.toLowerCase())", "pr_createdAt": "2020-07-24T08:39:37Z", "pr_url": "https://github.com/pmd/pmd/pull/2662", "timeline": [{"oid": "b8d878b4012de2211c253af185284ba3ae7943a2", "url": "https://github.com/pmd/pmd/commit/b8d878b4012de2211c253af185284ba3ae7943a2", "message": "[java] UnnecessaryCaseChange can not detect the case like: foo.equals(bar.toLowerCase())", "committedDate": "2020-07-24T08:25:14Z", "type": "commit"}, {"oid": "d69520f68fc68e40dc541604aa301246c8612ca7", "url": "https://github.com/pmd/pmd/commit/d69520f68fc68e40dc541604aa301246c8612ca7", "message": "UnnecessaryCaseChangeRule: NullPointerException in constructor fix", "committedDate": "2020-07-24T09:46:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg0NjUyOA==", "url": "https://github.com/pmd/pmd/pull/2662#discussion_r462846528", "bodyText": "We seem to visit only one type in this rule, so you can make use of the rulechain: https://pmd.github.io/latest/pmd_userdocs_extending_writing_java_rules.html#economic-traversal-the-rulechain", "author": "adangel", "createdAt": "2020-07-30T08:47:21Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/errorprone/UnnecessaryCaseChangeRule.java", "diffHunk": "@@ -4,83 +4,111 @@\n \n package net.sourceforge.pmd.lang.java.rule.errorprone;\n \n-import net.sourceforge.pmd.lang.ast.Node;\n+import static java.util.Arrays.asList;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.java.ast.ASTArgumentList;\n+import net.sourceforge.pmd.lang.java.ast.ASTArguments;\n import net.sourceforge.pmd.lang.java.ast.ASTName;\n import net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression;\n import net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix;\n import net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix;\n+import net.sourceforge.pmd.lang.java.ast.JavaNode;\n import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;\n \n public class UnnecessaryCaseChangeRule extends AbstractJavaRule {\n \n+    private static final List<String> CASE_CHANGING_METHODS = asList(\"toLowerCase\", \"toUpperCase\");\n+    private static final List<String> EQUALITY_METHODS = asList(\"equals\", \"equalsIgnoreCase\");\n+\n     @Override\n-    public Object visit(ASTPrimaryExpression exp, Object data) {\n-        int n = exp.getNumChildren();\n-        if (n < 4) {\n-            return data;\n+    public Object visit(ASTPrimaryExpression expr, Object data) {\n+        int caseChangingCallIndex = getCaseChangingMethodCallIndex(expr);\n+        if (caseChangingCallIndex != -1) {\n+            int chainedMethodCallIndex = caseChangingCallIndex + 2;\n+            if (hasEqualsMethodCallChainedAtPosition(expr, chainedMethodCallIndex)\n+                    || isArgumentOfEqualsMethodCall(expr)) {\n+                addViolation(data, expr);\n+            }\n         }\n+        return super.visit(expr, data);", "originalCommit": "d69520f68fc68e40dc541604aa301246c8612ca7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg0ODQ5OQ==", "url": "https://github.com/pmd/pmd/pull/2662#discussion_r462848499", "bodyText": "Just use sth. like this:\nfor (int callArgsIndex = 1; callArgsIndex < expr.getNumChildren(); callArgsIndex++) {\n    int callIndex = callArgsIndex - 1;\n    JavaNode node = expr.getChild(callIndex);\n...\nThere is no need to search for children by type if you don't look for a specific type....\n}", "author": "adangel", "createdAt": "2020-07-30T08:50:37Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/errorprone/UnnecessaryCaseChangeRule.java", "diffHunk": "@@ -4,83 +4,111 @@\n \n package net.sourceforge.pmd.lang.java.rule.errorprone;\n \n-import net.sourceforge.pmd.lang.ast.Node;\n+import static java.util.Arrays.asList;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.java.ast.ASTArgumentList;\n+import net.sourceforge.pmd.lang.java.ast.ASTArguments;\n import net.sourceforge.pmd.lang.java.ast.ASTName;\n import net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression;\n import net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix;\n import net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix;\n+import net.sourceforge.pmd.lang.java.ast.JavaNode;\n import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;\n \n public class UnnecessaryCaseChangeRule extends AbstractJavaRule {\n \n+    private static final List<String> CASE_CHANGING_METHODS = asList(\"toLowerCase\", \"toUpperCase\");\n+    private static final List<String> EQUALITY_METHODS = asList(\"equals\", \"equalsIgnoreCase\");\n+\n     @Override\n-    public Object visit(ASTPrimaryExpression exp, Object data) {\n-        int n = exp.getNumChildren();\n-        if (n < 4) {\n-            return data;\n+    public Object visit(ASTPrimaryExpression expr, Object data) {\n+        int caseChangingCallIndex = getCaseChangingMethodCallIndex(expr);\n+        if (caseChangingCallIndex != -1) {\n+            int chainedMethodCallIndex = caseChangingCallIndex + 2;\n+            if (hasEqualsMethodCallChainedAtPosition(expr, chainedMethodCallIndex)\n+                    || isArgumentOfEqualsMethodCall(expr)) {\n+                addViolation(data, expr);\n+            }\n         }\n+        return super.visit(expr, data);\n+    }\n \n-        int first = getBadPrefixOrNull(exp, n);\n-        if (first == -1) {\n-            return data;\n+    private int getCaseChangingMethodCallIndex(ASTPrimaryExpression expr) {\n+        List<JavaNode> exprNodes = expr.findChildrenOfType(JavaNode.class);", "originalCommit": "d69520f68fc68e40dc541604aa301246c8612ca7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg0OTM5MQ==", "url": "https://github.com/pmd/pmd/pull/2662#discussion_r462849391", "bodyText": "I think, it would make sense to integrate the null check into the method isNameOfCaseChangingMethod, wdyt?", "author": "adangel", "createdAt": "2020-07-30T08:52:10Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/errorprone/UnnecessaryCaseChangeRule.java", "diffHunk": "@@ -4,83 +4,111 @@\n \n package net.sourceforge.pmd.lang.java.rule.errorprone;\n \n-import net.sourceforge.pmd.lang.ast.Node;\n+import static java.util.Arrays.asList;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.java.ast.ASTArgumentList;\n+import net.sourceforge.pmd.lang.java.ast.ASTArguments;\n import net.sourceforge.pmd.lang.java.ast.ASTName;\n import net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression;\n import net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix;\n import net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix;\n+import net.sourceforge.pmd.lang.java.ast.JavaNode;\n import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;\n \n public class UnnecessaryCaseChangeRule extends AbstractJavaRule {\n \n+    private static final List<String> CASE_CHANGING_METHODS = asList(\"toLowerCase\", \"toUpperCase\");\n+    private static final List<String> EQUALITY_METHODS = asList(\"equals\", \"equalsIgnoreCase\");\n+\n     @Override\n-    public Object visit(ASTPrimaryExpression exp, Object data) {\n-        int n = exp.getNumChildren();\n-        if (n < 4) {\n-            return data;\n+    public Object visit(ASTPrimaryExpression expr, Object data) {\n+        int caseChangingCallIndex = getCaseChangingMethodCallIndex(expr);\n+        if (caseChangingCallIndex != -1) {\n+            int chainedMethodCallIndex = caseChangingCallIndex + 2;\n+            if (hasEqualsMethodCallChainedAtPosition(expr, chainedMethodCallIndex)\n+                    || isArgumentOfEqualsMethodCall(expr)) {\n+                addViolation(data, expr);\n+            }\n         }\n+        return super.visit(expr, data);\n+    }\n \n-        int first = getBadPrefixOrNull(exp, n);\n-        if (first == -1) {\n-            return data;\n+    private int getCaseChangingMethodCallIndex(ASTPrimaryExpression expr) {\n+        List<JavaNode> exprNodes = expr.findChildrenOfType(JavaNode.class);\n+        for (int callArgsIndex = 1; callArgsIndex < exprNodes.size(); callArgsIndex++) {\n+            int callIndex = callArgsIndex - 1;\n+            if (isCaseChangingMethodCall(exprNodes.get(callIndex), exprNodes.get(callArgsIndex))) {\n+                return callIndex;\n+            }\n         }\n+        return -1;\n+    }\n \n-        String second = getBadSuffixOrNull(exp, first + 2);\n-        if (second == null) {\n-            return data;\n-        }\n+    private boolean isCaseChangingMethodCall(JavaNode methodCall, JavaNode methodCallArgs) {\n+        String methodName = getCalledMethodName(methodCall);\n+        int methodArgsCount = getCalledMethodArgsCount(methodCallArgs);\n+        return methodName != null\n+                && isNameOfCaseChangingMethod(methodName) && methodArgsCount == 0;", "originalCommit": "d69520f68fc68e40dc541604aa301246c8612ca7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg1MTU0MQ==", "url": "https://github.com/pmd/pmd/pull/2662#discussion_r462851541", "bodyText": "I don't think, we should report here two violations, we have only one call to equals...", "author": "adangel", "createdAt": "2020-07-30T08:55:33Z", "path": "pmd-java/src/test/resources/net/sourceforge/pmd/lang/java/rule/errorprone/xml/UnnecessaryCaseChange.xml", "diffHunk": "@@ -54,7 +54,7 @@ public class Foo {\n \n     <test-code>\n         <description>failure case with toLowerCase().equals()</description>\n-        <expected-problems>1</expected-problems>\n+        <expected-problems>2</expected-problems>", "originalCommit": "d69520f68fc68e40dc541604aa301246c8612ca7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b205806124e668607fa7e9fe9db2bf901604def9", "url": "https://github.com/pmd/pmd/commit/b205806124e668607fa7e9fe9db2bf901604def9", "message": "UnnecessaryCaseChangeRule: violation reporting fix", "committedDate": "2020-07-30T10:22:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwMjIyMQ==", "url": "https://github.com/pmd/pmd/pull/2662#discussion_r463502221", "bodyText": "Since we don't use rule chain, you need to return super.visit(expr, data) here.... just returning data would skip nested classes etc.", "author": "adangel", "createdAt": "2020-07-31T09:21:17Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/errorprone/UnnecessaryCaseChangeRule.java", "diffHunk": "@@ -30,16 +30,18 @@ public Object visit(ASTPrimaryExpression expr, Object data) {\n             if (hasEqualsMethodCallChainedAtPosition(expr, chainedMethodCallIndex)\n                     || isArgumentOfEqualsMethodCall(expr)) {\n                 addViolation(data, expr);\n+                return data;", "originalCommit": "b205806124e668607fa7e9fe9db2bf901604def9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwNTIxOA==", "url": "https://github.com/pmd/pmd/pull/2662#discussion_r463505218", "bodyText": "Ohh, sorry. I thought it would be okay to skip processing nested expressions in case we have already reported a problem here. I'll fix that", "author": "Drofff", "createdAt": "2020-07-31T09:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwMjIyMQ=="}], "type": "inlineReview"}, {"oid": "eca547b5054814933f87f0718e0432bc2e27e5da", "url": "https://github.com/pmd/pmd/commit/eca547b5054814933f87f0718e0432bc2e27e5da", "message": "UnnecessaryCaseChangeRule: nested expressions traversing fix", "committedDate": "2020-08-01T21:54:27Z", "type": "commit"}]}