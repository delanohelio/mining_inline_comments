{"pr_number": 2934, "pr_title": "[java] CompareObjectsWithEquals / UseEqualsToCompareStrings - False negatives with fields", "pr_createdAt": "2020-11-19T21:21:59Z", "pr_url": "https://github.com/pmd/pmd/pull/2934", "timeline": [{"oid": "1e6c79c19fe716ced57f41389959db490ced7037", "url": "https://github.com/pmd/pmd/commit/1e6c79c19fe716ced57f41389959db490ced7037", "message": "[java] CompareObjectsWithEquals / UseEqualsToCompareStrings - Fix FN\n\nFixes false negatives in case fields are referenced with this.\nType resolution on PrimaryExpression works well enough to\nsimply check the type.", "committedDate": "2020-11-19T20:08:15Z", "type": "commit"}, {"oid": "3020183a2918978f5282739f176a74f318694fcb", "url": "https://github.com/pmd/pmd/commit/3020183a2918978f5282739f176a74f318694fcb", "message": "[doc] Update release notes, refs #2934", "committedDate": "2020-11-20T08:07:35Z", "type": "commit"}, {"oid": "a1297dfd09b353f410127ef948ab1b7bb86aec92", "url": "https://github.com/pmd/pmd/commit/a1297dfd09b353f410127ef948ab1b7bb86aec92", "message": "[java] Consider comparison with null literal as valid", "committedDate": "2020-11-20T11:20:25Z", "type": "commit"}, {"oid": "2c950641d237bbb1e830767a20e4294dffefd08f", "url": "https://github.com/pmd/pmd/commit/2c950641d237bbb1e830767a20e4294dffefd08f", "message": "[java] Avoid false positives with literals", "committedDate": "2020-11-20T14:50:30Z", "type": "commit"}, {"oid": "cda99a1629b9c47d09fc3807eed829dff3d9fc60", "url": "https://github.com/pmd/pmd/commit/cda99a1629b9c47d09fc3807eed829dff3d9fc60", "message": "[java] CompareObjectsWithEquals - whitelist java.lang.class and this", "committedDate": "2020-11-20T15:41:41Z", "type": "commit"}, {"oid": "02135513c9ed63338e7d06e83e4b01230fe4b54e", "url": "https://github.com/pmd/pmd/commit/02135513c9ed63338e7d06e83e4b01230fe4b54e", "message": "[java] CompareObjectsWithEquals: Fix more false positives", "committedDate": "2020-11-20T19:39:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA0NzY5OA==", "url": "https://github.com/pmd/pmd/pull/2934#discussion_r532047698", "bodyText": "In #2899 I considered this legal only in equals method:\nhttps://github.com/pmd/pmd/pull/2899/files#r532047509\nShould we do that on master too?", "author": "oowekyala", "createdAt": "2020-11-28T14:44:54Z", "path": "pmd-java/src/test/resources/net/sourceforge/pmd/lang/java/rule/errorprone/xml/CompareObjectsWithEquals.xml", "diffHunk": "@@ -207,6 +236,79 @@ public class CompareWithEqualsTest {\n     {\n         return a == b;\n     }\n+}\n+        ]]></code>\n+    </test-code>\n+\n+    <test-code>\n+        <description>#2934 False negative - class with fields</description>\n+        <expected-problems>4</expected-problems>\n+        <expected-linenumbers>8,9,10,11</expected-linenumbers>\n+        <code><![CDATA[\n+package net.sourceforge.pmd.lang.java.rule.errorprone.compareobjectswithequals;\n+\n+public class ClassWithFields {\n+    private Object a;\n+    private Object b;\n+\n+    boolean test1() {\n+        return  a == b // violation\n+             && this.a == b // violation\n+             && a != this.b // violation\n+             && this.a == this.b // violation\n+             && a.equals(b) // ok\n+             && this.a.equals(this.b); // ok\n+    }\n+}\n+        ]]></code>\n+    </test-code>\n+\n+    <test-code>\n+        <description>#2934 comparison with null is valid and with primitive literals</description>\n+        <expected-problems>2</expected-problems>\n+        <expected-linenumbers>18,19</expected-linenumbers>\n+        <code><![CDATA[\n+package net.sourceforge.pmd.lang.java.rule.errorprone.compareobjectswithequals;\n+\n+public class ClassWithFields {\n+    private Object a;\n+    private Object b;\n+\n+    boolean test1() {\n+        return a == null // ok\n+             && this.a == null; // ok\n+    }\n+\n+    void test2(StringBuilder sb) {\n+        if (sb != null) { } // ok\n+    }\n+\n+    public void bar(Integer x, Integer y) {\n+        if (x == 1) { } // ok\n+        if (x == y) { } // not ok! only works -128<x<127 dependent on Integer caching\n+        if (x == \"String\") { } // not ok\n+    }\n+}\n+        ]]></code>\n+    </test-code>\n+\n+    <test-code>\n+        <description>#2934 this and class should be ignored</description>\n+        <expected-problems>0</expected-problems>\n+        <code><![CDATA[\n+package net.sourceforge.pmd.lang.java.rule.errorprone.compareobjectswithequals;\n+\n+public class ClassWithFields {\n+    private Object a;\n+    private Object b;\n+\n+    void test(Object o) {\n+        if (this == o) { } // should be allowed, since this is a often used pattern in Object::equals.", "originalCommit": "02135513c9ed63338e7d06e83e4b01230fe4b54e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzODc4MA==", "url": "https://github.com/pmd/pmd/pull/2934#discussion_r536238780", "bodyText": "Hm... good question. I think, I considered \"this\" similar to \"null\", and didn't think longer about it (null kind of a keyword like this).\nMaybe we should really restrict that to the equals method... Like I've written in the comment :) Yes, let's do that.", "author": "adangel", "createdAt": "2020-12-04T16:53:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA0NzY5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI2MTQ0NQ==", "url": "https://github.com/pmd/pmd/pull/2934#discussion_r536261445", "bodyText": "I've fixed that with 7f299c4 on master.", "author": "adangel", "createdAt": "2020-12-04T17:32:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA0NzY5OA=="}], "type": "inlineReview"}]}