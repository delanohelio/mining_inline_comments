{"pr_number": 2816, "pr_title": "[apex] Detect 'Database' method invocations inside loops", "pr_createdAt": "2020-10-06T16:21:50Z", "pr_url": "https://github.com/pmd/pmd/pull/2816", "timeline": [{"oid": "8fb69b24db2ac934cc175c983b395d6000353da5", "url": "https://github.com/pmd/pmd/commit/8fb69b24db2ac934cc175c983b395d6000353da5", "message": "Add Apex AvoidDatabaseMethodCallsInLoopsRule\n\nFixes https://github.com/pmd/pmd/issues/1713, Database statements aren't detected in for loops.\n\n- Added new AvoidDatabaseMethodCallsInLoopsRule that adds a violation if any methods from the System Database class are invoked from within a loop.\n\n- Refactored AvoidDmlStatementsInLoopsRule, AvoidSoqlInLoopsRule, and AvoidSoslInLoopsRule to derive from AbstractAvoidNodeInLoopsRule.", "committedDate": "2020-10-06T02:02:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMzkwMQ==", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r500433901", "bodyText": "Should the common constructor code be moved here or left in the concrete classes? I know that sometimes people like that type of configuration in the concrete class.", "author": "jbartolotta-sfdc", "createdAt": "2020-10-06T16:26:33Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/performance/AbstractAvoidNodeInLoopsRule.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.performance;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTBlockStatement;\n+import net.sourceforge.pmd.lang.apex.ast.ASTDoLoopStatement;\n+import net.sourceforge.pmd.lang.apex.ast.ASTForEachStatement;\n+import net.sourceforge.pmd.lang.apex.ast.ASTForLoopStatement;\n+import net.sourceforge.pmd.lang.apex.ast.ASTReturnStatement;\n+import net.sourceforge.pmd.lang.apex.ast.ASTWhileLoopStatement;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.AbstractNode;\n+import net.sourceforge.pmd.lang.ast.Node;\n+\n+/**\n+ * Base class for any rules that detect operations contained within a loop that could be more efficiently executed by\n+ * refactoring the code into a batched execution.\n+ */\n+abstract class AbstractAvoidNodeInLoopsRule extends AbstractApexRule {", "originalCommit": "8fb69b24db2ac934cc175c983b395d6000353da5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3OTQ3NQ==", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r502779475", "bodyText": "I'd move common code logic to the base class, but leave rule properties at the concrete classes. Right now, I only see rule properties, so keep it as is.\nNote: all these code-climate rule properties will be removed with PMD 7 anyway, so don't worry too much about them.", "author": "adangel", "createdAt": "2020-10-10T11:17:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMzkwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNDg0Mw==", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r500434843", "bodyText": "I created entries in all xml files that contained the other \"Avoid..InLoops\" classes. I wasn't sure if this was correct given that they are marked deprecated, please let me know.", "author": "jbartolotta-sfdc", "createdAt": "2020-10-06T16:28:02Z", "path": "pmd-apex/src/main/resources/rulesets/apex/performance.xml", "diffHunk": "@@ -8,6 +8,7 @@\n The Performance ruleset contains a collection of good practices which should be followed.\n   </description>\n \n+    <rule ref=\"category/apex/performance.xml/AvoidDatabaseMethodCallsInLoops\" deprecated=\"true\" />", "originalCommit": "8fb69b24db2ac934cc175c983b395d6000353da5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MDQwMw==", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r502780403", "bodyText": "These are old rulesets, which we don't maintain anymore. They are just here for backwards compatibility and should not be used anymore. So, just revert the change here, thanks.", "author": "adangel", "createdAt": "2020-10-10T11:28:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNDg0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNjYyNQ==", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r500436625", "bodyText": "I was not sure if I was supposed to create this file or not. Let me know if I should remove it from the PR.", "author": "jbartolotta-sfdc", "createdAt": "2020-10-06T16:30:45Z", "path": "pmd-core/src/main/resources/rulesets/releases/6290.xml", "diffHunk": "@@ -0,0 +1,13 @@\n+<?xml version=\"1.0\"?>", "originalCommit": "8fb69b24db2ac934cc175c983b395d6000353da5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MDg3Nw==", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r502780877", "bodyText": "That's great, please leave it, thanks! We usually create this file when we merge the PR and update release notes.", "author": "adangel", "createdAt": "2020-10-10T11:34:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNjYyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNzc5Nw==", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r500437797", "bodyText": "How can I test this link?\nI followed the instructions at https://pmd.github.io/latest/pmd_devdocs_writing_documentation.html#building but the Jekyll site only contained the sidebar links, all of the rules returned a 404.", "author": "jbartolotta-sfdc", "createdAt": "2020-10-06T16:32:33Z", "path": "pmd-apex/src/main/resources/category/apex/performance.xml", "diffHunk": "@@ -80,4 +80,26 @@ public class Something {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidDatabaseMethodCallsInLoops\"\n+          language=\"apex\"\n+          since=\"6.29.0\"\n+          message=\"Avoid database method calls inside loops\"\n+          class=\"net.sourceforge.pmd.lang.apex.rule.performance.AvoidDatabaseMethodCallsInLoopsRule\"\n+          externalInfoUrl=\"${pmd.website.baseurl}/pmd_rules_apex_performance.html#avoiddatabasemethodcallsinloops\">", "originalCommit": "8fb69b24db2ac934cc175c983b395d6000353da5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MDIyNQ==", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r502780225", "bodyText": "The rule documentation is generated by the module \"pmd-doc\". If you build this module, it will create the files under docs/pages/pmd/rules (these files are not committed).", "author": "adangel", "createdAt": "2020-10-10T11:25:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNzc5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3OTY4OQ==", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r502779689", "bodyText": "This rule only visits one node type. There we can take some performance advantage by using \"rule chain\" -> https://pmd.github.io/latest/pmd_userdocs_extending_writing_java_rules.html#economic-traversal-the-rulechain", "author": "adangel", "createdAt": "2020-10-10T11:19:49Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/performance/AvoidDatabaseMethodCallsInLoopsRule.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.performance;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethodCallExpression;\n+import net.sourceforge.pmd.lang.apex.rule.internal.Helper;\n+\n+public class AvoidDatabaseMethodCallsInLoopsRule extends AbstractAvoidNodeInLoopsRule {\n+    public AvoidDatabaseMethodCallsInLoopsRule() {\n+        setProperty(CODECLIMATE_CATEGORIES, \"Performance\");\n+        // Note: Often more complicated as just moving a few lines.\n+        // Involves Maps...\n+        setProperty(CODECLIMATE_REMEDIATION_MULTIPLIER, 150);\n+        setProperty(CODECLIMATE_BLOCK_HIGHLIGHTING, false);\n+    }\n+\n+    @Override\n+    public Object visit(ASTMethodCallExpression node, Object data) {", "originalCommit": "8fb69b24db2ac934cc175c983b395d6000353da5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MDMxOA==", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r502780318", "bodyText": "We try to order the entries alphabetically by rule name. This rule needs to be added as the first rule in the file....", "author": "adangel", "createdAt": "2020-10-10T11:27:01Z", "path": "pmd-apex/src/main/resources/category/apex/performance.xml", "diffHunk": "@@ -80,4 +80,26 @@ public class Something {\n         </example>\n     </rule>\n \n+    <rule name=\"AvoidDatabaseMethodCallsInLoops\"", "originalCommit": "8fb69b24db2ac934cc175c983b395d6000353da5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MDYxMA==", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r502780610", "bodyText": "Please also not modify this ruleset, it's deprecated in favor of quickstart.xml.... We probably should have added this info to the ruleset's description....", "author": "adangel", "createdAt": "2020-10-10T11:30:38Z", "path": "pmd-apex/src/main/resources/rulesets/apex/ruleset.xml", "diffHunk": "@@ -12,6 +12,7 @@\n    <rule ref=\"rulesets/apex/quickstart.xml/TooManyFields\" deprecated=\"true\" />\n    <rule ref=\"rulesets/apex/quickstart.xml/AvoidDeeplyNestedIfStmts\" deprecated=\"true\" />\n    <rule ref=\"rulesets/apex/quickstart.xml/CyclomaticComplexity\" deprecated=\"true\" />\n+   <rule ref=\"rulesets/apex/quickstart.xml/AvoidDatabaseMethodCallsInLoops\" deprecated=\"true\" />", "originalCommit": "8fb69b24db2ac934cc175c983b395d6000353da5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "98d0f0f38f9134926f90708faff1c5a9963448e1", "url": "https://github.com/pmd/pmd/commit/98d0f0f38f9134926f90708faff1c5a9963448e1", "message": "Changes based on initial PR feedback\n\n- Rename AvoidDatabaseMethodCallsInLoopsRule to OperationWithLimitsInLoop.\n- Add AvoidDmlStatementsInLoopsRule, AvoidSoqlInLoopsRule, and AvoidSoslInLoopsRule checks into OperationWithLimitsInLoop.\n- Deprecate AvoidDmlStatementsInLoopsRule, AvoidSoqlInLoopsRule, and AvoidSoslInLoopsRule in favor of OperationWithLimitsInLoop.", "committedDate": "2020-10-21T18:25:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYzNDcxNQ==", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r509634715", "bodyText": "Github is showing this diff in an odd way. It's the addition of the depecated attribute on line 129. And the addition of the new OperationWithLimitsInLoop XML.", "author": "jbartolotta-sfdc", "createdAt": "2020-10-21T19:59:51Z", "path": "pmd-apex/src/main/resources/rulesets/apex/quickstart.xml", "diffHunk": "@@ -126,7 +126,16 @@\n          <property name=\"cc_block_highlighting\" value=\"false\" />\n       </properties>\n    </rule>\n-   <rule ref=\"category/apex/performance.xml/AvoidDmlStatementsInLoops\" message=\"Avoid DML Statements inside loops\">\n+   <rule ref=\"category/apex/performance.xml/AvoidDmlStatementsInLoops\" message=\"Avoid DML Statements inside loops\" deprecated=\"true\">", "originalCommit": "98d0f0f38f9134926f90708faff1c5a9963448e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYzNTYwNg==", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r509635606", "bodyText": "I'm not sure how useful this test is, but I adapted it to pass after deprecating the 3 rules.", "author": "jbartolotta-sfdc", "createdAt": "2020-10-21T20:00:23Z", "path": "pmd-apex/src/test/java/net/sourceforge/pmd/lang/apex/DefaultRulesetTest.java", "diffHunk": "@@ -41,10 +44,11 @@ public void cleanup() {\n \n     @Test\n     public void loadQuickstartRuleset() throws Exception {\n+        List<String> logRecords = new ArrayList<>();", "originalCommit": "98d0f0f38f9134926f90708faff1c5a9963448e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIzNTk0MA==", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r510235940", "bodyText": "I think, the goal of the test is, to verify, when using the quickstart ruleset, that you don't get deprecation warnings....\nThat means: run.sh pmd -R rulesets/apex/quickstart.xml .... shouldn't warn you about deprecations...\nI'll have a look, what exactly the problem is here.... (maybe we use a wrong rule set factory here).", "author": "adangel", "createdAt": "2020-10-22T15:03:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYzNTYwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3NjQyNg==", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r510276426", "bodyText": "Ok, it turns out, that we should not have deprecated rules in quickstart.xml. I'll remove these 3 old rules. That's ok for this ruleset, since the new rule replaces the 3 old rules.\nReferencing the rules via quickstart.xml is not officially supported, e.g. if someone uses the following reference in a custom ruleset, that will break:\n<rule ref=\"rulesets/apex/quickstart.xml/AvoidSoqlInLoops\" />\n\ncorrect would have been:\n<rule ref=\"category/apex/performance.xml/AvoidSoqlInLoops\" />\n\nThis continues to work, but will now issue a deprecation warning.\nSo, I consider this ok.", "author": "adangel", "createdAt": "2020-10-22T15:56:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYzNTYwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYzNjc1MQ==", "url": "https://github.com/pmd/pmd/pull/2816#discussion_r509636751", "bodyText": "This file now contains all test cases for the 4 cases that can trigger the rule. I copied them from the rules which are being deprecated.", "author": "jbartolotta-sfdc", "createdAt": "2020-10-21T20:01:15Z", "path": "pmd-apex/src/test/resources/net/sourceforge/pmd/lang/apex/rule/performance/xml/OperationWithLimitsInLoop.xml", "diffHunk": "@@ -0,0 +1,413 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "originalCommit": "98d0f0f38f9134926f90708faff1c5a9963448e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}