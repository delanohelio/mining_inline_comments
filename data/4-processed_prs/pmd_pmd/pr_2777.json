{"pr_number": 2777, "pr_title": "[java] Implement constant values", "pr_createdAt": "2020-09-12T12:26:28Z", "pr_url": "https://github.com/pmd/pmd/pull/2777", "timeline": [{"oid": "a582504c1445b73865d649814e752980fc6f6bcf", "url": "https://github.com/pmd/pmd/commit/a582504c1445b73865d649814e752980fc6f6bcf", "message": "Implement constant expressions", "committedDate": "2020-09-11T14:15:17Z", "type": "commit"}, {"oid": "0c8851a3c1ebe4ee78be091973c7e460716bfdec", "url": "https://github.com/pmd/pmd/commit/0c8851a3c1ebe4ee78be091973c7e460716bfdec", "message": "Implement references to constant fields", "committedDate": "2020-09-11T14:26:20Z", "type": "commit"}, {"oid": "9cf91bad0b4c7faeff3ddd158ef9b1a3dfab9cf1", "url": "https://github.com/pmd/pmd/commit/9cf91bad0b4c7faeff3ddd158ef9b1a3dfab9cf1", "message": "Fix #520: suppress warnings with const expr", "committedDate": "2020-09-11T14:35:32Z", "type": "commit"}, {"oid": "1001c4a4515aff385fe8c696660a8891d4c614b3", "url": "https://github.com/pmd/pmd/commit/1001c4a4515aff385fe8c696660a8891d4c614b3", "message": "Fix tests", "committedDate": "2020-09-12T00:26:09Z", "type": "commit"}, {"oid": "2da4d4eac87e3baf3365a679bfc22b5f5c1a955e", "url": "https://github.com/pmd/pmd/commit/2da4d4eac87e3baf3365a679bfc22b5f5c1a955e", "message": "Merge branch 'java-grammar' into java-const-values", "committedDate": "2020-09-12T12:02:58Z", "type": "commit"}, {"oid": "ea5b18fb25dcfeb569786d0a4ef683fcf5a2596e", "url": "https://github.com/pmd/pmd/commit/ea5b18fb25dcfeb569786d0a4ef683fcf5a2596e", "message": "Checkstyle", "committedDate": "2020-09-12T12:25:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIwNDc0OQ==", "url": "https://github.com/pmd/pmd/pull/2777#discussion_r490204749", "bodyText": "(\"PMD.\" + rule.getName()).equals(stringVal) // NOPMD uselessparentheses false positive\n\nSeems to be #2739", "author": "adangel", "createdAt": "2020-09-17T12:30:25Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/internal/AnnotationSuppressionUtil.java", "diffHunk": "@@ -108,15 +109,19 @@ private static boolean hasSuppressWarningsAnnotationFor(final Annotatable node,\n     // @formatter:on\n     private static boolean annotationSuppresses(ASTAnnotation annotation, Rule rule) {\n         if (TypeTestUtil.isA(SuppressWarnings.class, annotation)) {\n-            for (ASTStringLiteral element : annotation.findDescendantsOfType(ASTStringLiteral.class)) {\n-                if (element.hasImageEqualTo(\"\\\"PMD\\\"\") || element.hasImageEqualTo(\n-                    \"\\\"PMD.\" + rule.getName() + \"\\\"\")\n-                    // Check for standard annotations values\n-                    || element.hasImageEqualTo(\"\\\"all\\\"\")\n-                    || element.hasImageEqualTo(\"\\\"serial\\\"\") && SERIAL_RULES.contains(rule.getName())\n-                    || element.hasImageEqualTo(\"\\\"unused\\\"\") && UNUSED_RULES.contains(rule.getName())\n-                    || element.hasImageEqualTo(\"\\\"all\\\"\")) {\n-                    return true;\n+            for (ASTMemberValue value : annotation.getValuesForName(ASTMemberValuePair.VALUE_ATTR)) {\n+                Object constVal = value.getConstValue();\n+                if (constVal instanceof String) {\n+                    String stringVal = (String) constVal;\n+                    if (\"PMD\".equals(stringVal)\n+                        || (\"PMD.\" + rule.getName()).equals(stringVal) // NOPMD uselessparentheses false positive", "originalCommit": "ea5b18fb25dcfeb569786d0a4ef683fcf5a2596e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}