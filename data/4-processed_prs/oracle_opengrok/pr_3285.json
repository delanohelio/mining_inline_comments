{"pr_number": 3285, "pr_title": "Allow users to specify custom mirroring and sync command", "pr_createdAt": "2020-10-16T22:19:28Z", "pr_url": "https://github.com/oracle/opengrok/pull/3285", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE3MTY0MQ==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r509171641", "bodyText": "do the tests assume that Git is installed on the system ?", "author": "vladak", "createdAt": "2020-10-21T10:36:06Z", "path": "opengrok-tools/src/test/python/test_mirror.py", "diffHunk": "@@ -376,3 +398,183 @@ def mock_get_repo_type(*args):\n             repos = get_repos_for_project(project_name, None, source_root,\n                                           ignored_repos=['.'])\n             assert len(repos) == 0\n+\n+\n+@pytest.mark.parametrize(['config', 'expected_command'], [\n+    (None, 'default-command'),\n+    ('/usr/bin/git', '/usr/bin/git'),\n+    ({}, 'default-command'),\n+    ({'incoming': '/bin/false'}, 'default-command'),\n+    ([], 'default-command'),\n+    ({'command': '/usr/local/bin/git'}, '/usr/local/bin/git'),\n+    (\n+            {'command': '/usr/local/bin/git', 'incoming': '/bin/false'},\n+            '/usr/local/bin/git'\n+    )\n+])\n+def test_mirroring_custom_repository_command(config, expected_command):\n+    assert expected_command == Repository._repository_command(\n+        config,\n+        lambda: 'default-command'\n+    )\n+\n+\n+@pytest.mark.parametrize(\n+    ('touch_binary'), [\n+        pytest.param('/bin/touch',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/bin/touch'),\n+                         reason=\"requires /bin binaries\")),\n+        pytest.param('/usr/bin/touch',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/usr/bin/touch'),\n+                         reason=\"requires /usr/bin binaries\")),\n+    ]\n+)\n+def test_mirroring_custom_incoming_invoke_command(touch_binary):\n+    with tempfile.TemporaryDirectory() as repository_root:\n+        repository = GitRepository(mock(), repository_root, 'test-1', {\n+            'incoming': [touch_binary, 'incoming.txt']\n+        }, None, None, None)\n+        assert repository.incoming() is False\n+        assert 'incoming.txt' in os.listdir(repository_root)\n+\n+\n+@pytest.mark.parametrize(\n+    ('echo_binary'), [\n+        pytest.param('/bin/echo',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/bin/echo'),\n+                         reason=\"requires /bin binaries\")),\n+        pytest.param('/usr/bin/echo',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/usr/bin/echo'),\n+                         reason=\"requires /usr/bin binaries\")),\n+    ]\n+)\n+def test_mirroring_custom_incoming_changes(echo_binary):\n+    with tempfile.TemporaryDirectory() as repository_root:\n+        repository = GitRepository(mock(), repository_root, 'test-1', {", "originalCommit": "507eed5bd1667638081e310fc2f446b77b7abfbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkzODQwOA==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r509938408", "bodyText": "No no, the git command is never executed, most of the tests uses custom commands (like echo or true/false) and the rest uses mocking for the original call.", "author": "tulinkry", "createdAt": "2020-10-22T07:29:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE3MTY0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE3MjcyNg==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r509172726", "bodyText": "make 'sync.txt' a variable ?", "author": "vladak", "createdAt": "2020-10-21T10:38:05Z", "path": "opengrok-tools/src/test/python/test_mirror.py", "diffHunk": "@@ -376,3 +398,183 @@ def mock_get_repo_type(*args):\n             repos = get_repos_for_project(project_name, None, source_root,\n                                           ignored_repos=['.'])\n             assert len(repos) == 0\n+\n+\n+@pytest.mark.parametrize(['config', 'expected_command'], [\n+    (None, 'default-command'),\n+    ('/usr/bin/git', '/usr/bin/git'),\n+    ({}, 'default-command'),\n+    ({'incoming': '/bin/false'}, 'default-command'),\n+    ([], 'default-command'),\n+    ({'command': '/usr/local/bin/git'}, '/usr/local/bin/git'),\n+    (\n+            {'command': '/usr/local/bin/git', 'incoming': '/bin/false'},\n+            '/usr/local/bin/git'\n+    )\n+])\n+def test_mirroring_custom_repository_command(config, expected_command):\n+    assert expected_command == Repository._repository_command(\n+        config,\n+        lambda: 'default-command'\n+    )\n+\n+\n+@pytest.mark.parametrize(\n+    ('touch_binary'), [\n+        pytest.param('/bin/touch',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/bin/touch'),\n+                         reason=\"requires /bin binaries\")),\n+        pytest.param('/usr/bin/touch',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/usr/bin/touch'),\n+                         reason=\"requires /usr/bin binaries\")),\n+    ]\n+)\n+def test_mirroring_custom_incoming_invoke_command(touch_binary):\n+    with tempfile.TemporaryDirectory() as repository_root:\n+        repository = GitRepository(mock(), repository_root, 'test-1', {\n+            'incoming': [touch_binary, 'incoming.txt']\n+        }, None, None, None)\n+        assert repository.incoming() is False\n+        assert 'incoming.txt' in os.listdir(repository_root)\n+\n+\n+@pytest.mark.parametrize(\n+    ('echo_binary'), [\n+        pytest.param('/bin/echo',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/bin/echo'),\n+                         reason=\"requires /bin binaries\")),\n+        pytest.param('/usr/bin/echo',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/usr/bin/echo'),\n+                         reason=\"requires /usr/bin binaries\")),\n+    ]\n+)\n+def test_mirroring_custom_incoming_changes(echo_binary):\n+    with tempfile.TemporaryDirectory() as repository_root:\n+        repository = GitRepository(mock(), repository_root, 'test-1', {\n+            'incoming': [echo_binary, 'new incoming changes!']\n+        }, None, None, None)\n+        assert repository.incoming() is True\n+\n+\n+@pytest.mark.parametrize(\n+    ('true_binary'), [\n+        pytest.param('/bin/true',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/bin/true'),\n+                         reason=\"requires /bin binaries\")),\n+        pytest.param('/usr/bin/true',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/usr/bin/true'),\n+                         reason=\"requires /usr/bin binaries\")),\n+    ]\n+)\n+def test_mirroring_custom_incoming_no_changes(true_binary):\n+    with tempfile.TemporaryDirectory() as repository_root:\n+        repository = GitRepository(mock(), repository_root, 'test-1', {\n+            'incoming': true_binary\n+        }, None, None, None)\n+        assert repository.incoming() is False\n+\n+\n+@pytest.mark.parametrize(\n+    ('false_binary'), [\n+        pytest.param('/bin/false',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/bin/false'),\n+                         reason=\"requires /bin binaries\")),\n+        pytest.param('/usr/bin/false',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/usr/bin/false'),\n+                         reason=\"requires /usr/bin binaries\")),\n+    ]\n+)\n+def test_mirroring_custom_incoming_error(false_binary):\n+    with pytest.raises(RepositoryException):\n+        with tempfile.TemporaryDirectory() as repository_root:\n+            repository = GitRepository(mock(), repository_root, 'test-1', {\n+                'incoming': false_binary\n+            }, None, None, None)\n+            repository.incoming()\n+\n+\n+def test_mirroring_incoming_invoke_original_command():\n+    with tempfile.TemporaryDirectory() as repository_root:\n+        repository = GitRepository(mock(), repository_root, 'test-1',\n+                                   None, None, None, None)\n+        with when(repository).incoming_check().thenReturn(0):\n+            repository.incoming()\n+            verify(repository).incoming_check()\n+\n+\n+@pytest.mark.parametrize(\n+    ('touch_binary'), [\n+        pytest.param('/bin/touch',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/bin/touch'),\n+                         reason=\"requires /bin binaries\")),\n+        pytest.param('/usr/bin/touch',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/usr/bin/touch'),\n+                         reason=\"requires /usr/bin binaries\")),\n+    ]\n+)\n+def test_mirroring_custom_sync_invoke_command(touch_binary):\n+    with tempfile.TemporaryDirectory() as repository_root:\n+        repository = GitRepository(mock(), repository_root, 'test-1', {\n+            'sync': [touch_binary, 'sync.txt']\n+        }, None, None, None)\n+        assert repository.sync() == 0\n+        assert 'sync.txt' in os.listdir(repository_root)", "originalCommit": "507eed5bd1667638081e310fc2f446b77b7abfbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyODc4Ng==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r510428786", "bodyText": "done", "author": "tulinkry", "createdAt": "2020-10-22T20:12:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE3MjcyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE3MzA0MA==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r509173040", "bodyText": "make 'incoming.txt' a variable ?", "author": "vladak", "createdAt": "2020-10-21T10:38:43Z", "path": "opengrok-tools/src/test/python/test_mirror.py", "diffHunk": "@@ -376,3 +398,183 @@ def mock_get_repo_type(*args):\n             repos = get_repos_for_project(project_name, None, source_root,\n                                           ignored_repos=['.'])\n             assert len(repos) == 0\n+\n+\n+@pytest.mark.parametrize(['config', 'expected_command'], [\n+    (None, 'default-command'),\n+    ('/usr/bin/git', '/usr/bin/git'),\n+    ({}, 'default-command'),\n+    ({'incoming': '/bin/false'}, 'default-command'),\n+    ([], 'default-command'),\n+    ({'command': '/usr/local/bin/git'}, '/usr/local/bin/git'),\n+    (\n+            {'command': '/usr/local/bin/git', 'incoming': '/bin/false'},\n+            '/usr/local/bin/git'\n+    )\n+])\n+def test_mirroring_custom_repository_command(config, expected_command):\n+    assert expected_command == Repository._repository_command(\n+        config,\n+        lambda: 'default-command'\n+    )\n+\n+\n+@pytest.mark.parametrize(\n+    ('touch_binary'), [\n+        pytest.param('/bin/touch',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/bin/touch'),\n+                         reason=\"requires /bin binaries\")),\n+        pytest.param('/usr/bin/touch',\n+                     marks=pytest.mark.skipif(\n+                         not os.path.exists('/usr/bin/touch'),\n+                         reason=\"requires /usr/bin binaries\")),\n+    ]\n+)\n+def test_mirroring_custom_incoming_invoke_command(touch_binary):\n+    with tempfile.TemporaryDirectory() as repository_root:\n+        repository = GitRepository(mock(), repository_root, 'test-1', {\n+            'incoming': [touch_binary, 'incoming.txt']\n+        }, None, None, None)\n+        assert repository.incoming() is False\n+        assert 'incoming.txt' in os.listdir(repository_root)", "originalCommit": "507eed5bd1667638081e310fc2f446b77b7abfbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyODczNQ==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r510428735", "bodyText": "done", "author": "tulinkry", "createdAt": "2020-10-22T20:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE3MzA0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE3NTc3NQ==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r509175775", "bodyText": "refactor to a function and use that in incoming() as well ?", "author": "vladak", "createdAt": "2020-10-21T10:43:40Z", "path": "opengrok-tools/src/main/python/opengrok_tools/scm/repository.py", "diffHunk": "@@ -59,6 +61,11 @@ def getCommand(self, cmd, **kwargs):\n \n     def sync(self):\n         # Eventually, there might be per-repository hooks added here.\n+        if isinstance(self.configured_commands, dict) and \\", "originalCommit": "507eed5bd1667638081e310fc2f446b77b7abfbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyODY3OA==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r510428678", "bodyText": "done", "author": "tulinkry", "createdAt": "2020-10-22T20:12:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE3NTc3NQ=="}], "type": "inlineReview"}, {"oid": "be43bc79277294a5ed9abea32b3ca2decd6eeb3e", "url": "https://github.com/oracle/opengrok/commit/be43bc79277294a5ed9abea32b3ca2decd6eeb3e", "message": "allowing users to override sync and incoming command", "committedDate": "2020-10-22T20:03:12Z", "type": "commit"}, {"oid": "1a345fb0bc35a830f451e3a9539fbe9d60e98a22", "url": "https://github.com/oracle/opengrok/commit/1a345fb0bc35a830f451e3a9539fbe9d60e98a22", "message": "adding tests", "committedDate": "2020-10-22T20:03:12Z", "type": "commit"}, {"oid": "fce5a162256948c7e62e00342ae9432afe204aa1", "url": "https://github.com/oracle/opengrok/commit/fce5a162256948c7e62e00342ae9432afe204aa1", "message": "fix checkstyle", "committedDate": "2020-10-22T20:03:12Z", "type": "commit"}, {"oid": "6d69130dfebcb00078ec3f71907254d825806dac", "url": "https://github.com/oracle/opengrok/commit/6d69130dfebcb00078ec3f71907254d825806dac", "message": "adapting to new line length", "committedDate": "2020-10-22T20:04:46Z", "type": "commit"}, {"oid": "16575f2b88dba74a72ff51a22c11821e952c6202", "url": "https://github.com/oracle/opengrok/commit/16575f2b88dba74a72ff51a22c11821e952c6202", "message": "using variable for filenames", "committedDate": "2020-10-22T20:06:41Z", "type": "commit"}, {"oid": "96d5d260298cb5e29f0bca2f26664f74b4a211d5", "url": "https://github.com/oracle/opengrok/commit/96d5d260298cb5e29f0bca2f26664f74b4a211d5", "message": "extracting common code", "committedDate": "2020-10-22T20:11:45Z", "type": "commit"}, {"oid": "96d5d260298cb5e29f0bca2f26664f74b4a211d5", "url": "https://github.com/oracle/opengrok/commit/96d5d260298cb5e29f0bca2f26664f74b4a211d5", "message": "extracting common code", "committedDate": "2020-10-22T20:11:45Z", "type": "forcePushed"}, {"oid": "ec7de8bd11676b8c256dd7f6b7cbe7e42f68b061", "url": "https://github.com/oracle/opengrok/commit/ec7de8bd11676b8c256dd7f6b7cbe7e42f68b061", "message": "adding copyrights", "committedDate": "2020-10-22T20:16:10Z", "type": "commit"}, {"oid": "aa06f86f2907d9deb44743ae9e83194f70061fbc", "url": "https://github.com/oracle/opengrok/commit/aa06f86f2907d9deb44743ae9e83194f70061fbc", "message": "removing redundant file", "committedDate": "2020-10-22T20:16:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcxNTg5Mg==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r510715892", "bodyText": "this one don't change", "author": "vladak", "createdAt": "2020-10-23T08:20:21Z", "path": "opengrok-tools/src/main/python/opengrok_tools/scm/repository.py", "diffHunk": "@@ -18,10 +18,12 @@\n #\n \n #\n-# Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.\n+# Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.", "originalCommit": "aa06f86f2907d9deb44743ae9e83194f70061fbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcxNjcwOQ==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r510716709", "bodyText": "changed", "author": "tulinkry", "createdAt": "2020-10-23T08:21:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcxNTg5Mg=="}], "type": "inlineReview"}, {"oid": "739a0f8cfc53ac79257a1a37bcdda10d05df3725", "url": "https://github.com/oracle/opengrok/commit/739a0f8cfc53ac79257a1a37bcdda10d05df3725", "message": "revert back original copyrights", "committedDate": "2020-10-23T08:27:50Z", "type": "commit"}, {"oid": "739a0f8cfc53ac79257a1a37bcdda10d05df3725", "url": "https://github.com/oracle/opengrok/commit/739a0f8cfc53ac79257a1a37bcdda10d05df3725", "message": "revert back original copyrights", "committedDate": "2020-10-23T08:27:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDczOTYxMw==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r510739613", "bodyText": "the 'sync' string could be a variable", "author": "vladak", "createdAt": "2020-10-23T08:59:47Z", "path": "opengrok-tools/src/main/python/opengrok_tools/scm/repository.py", "diffHunk": "@@ -59,6 +62,10 @@ def getCommand(self, cmd, **kwargs):\n \n     def sync(self):\n         # Eventually, there might be per-repository hooks added here.\n+        if self.is_command_overridden(self.configured_commands, 'sync'):", "originalCommit": "739a0f8cfc53ac79257a1a37bcdda10d05df3725", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDczOTY4Ng==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r510739686", "bodyText": "ditto", "author": "vladak", "createdAt": "2020-10-23T08:59:53Z", "path": "opengrok-tools/src/main/python/opengrok_tools/scm/repository.py", "diffHunk": "@@ -75,6 +82,105 @@ def incoming(self):\n         \"\"\"\n         Check if there are any incoming changes.\n \n+        Return True if so, False otherwise.\n+        \"\"\"\n+        if self.is_command_overridden(self.configured_commands, 'incoming'):", "originalCommit": "739a0f8cfc53ac79257a1a37bcdda10d05df3725", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0MDYwOQ==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r510740609", "bodyText": "is this something that could be reused in the individual repository implementations ? same for _run_custom_incoming_command().", "author": "vladak", "createdAt": "2020-10-23T09:01:33Z", "path": "opengrok-tools/src/main/python/opengrok_tools/scm/repository.py", "diffHunk": "@@ -75,6 +82,105 @@ def incoming(self):\n         \"\"\"\n         Check if there are any incoming changes.\n \n+        Return True if so, False otherwise.\n+        \"\"\"\n+        if self.is_command_overridden(self.configured_commands, 'incoming'):\n+            return self._run_custom_incoming_command(\n+                self.listify(self.configured_commands['incoming'])\n+            )\n+        return self.incoming_check()\n+\n+    def incoming_check(self):\n+        \"\"\"\n+        Check if there are any incoming changes.\n+\n         Return True if so, False otherwise.\n         \"\"\"\n         return True\n+\n+    def _run_custom_sync_command(self, command):", "originalCommit": "739a0f8cfc53ac79257a1a37bcdda10d05df3725", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM4Mjc4Nw==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r511382787", "bodyText": "I think it's possible, didn't do it for mercurial as it contains more complicated logic.", "author": "tulinkry", "createdAt": "2020-10-24T10:25:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0MDYwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM4MzEyMg==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r511383122", "bodyText": "I split it to a commit per repository type, could you review it again if that is ok? I don't have enough resources to test all of the repository types.", "author": "tulinkry", "createdAt": "2020-10-24T10:26:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0MDYwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0MTM1NQ==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r510741355", "bodyText": "log the actual command", "author": "vladak", "createdAt": "2020-10-23T09:03:01Z", "path": "opengrok-tools/src/main/python/opengrok_tools/scm/repository.py", "diffHunk": "@@ -75,6 +82,105 @@ def incoming(self):\n         \"\"\"\n         Check if there are any incoming changes.\n \n+        Return True if so, False otherwise.\n+        \"\"\"\n+        if self.is_command_overridden(self.configured_commands, 'incoming'):\n+            return self._run_custom_incoming_command(\n+                self.listify(self.configured_commands['incoming'])\n+            )\n+        return self.incoming_check()\n+\n+    def incoming_check(self):\n+        \"\"\"\n+        Check if there are any incoming changes.\n+\n         Return True if so, False otherwise.\n         \"\"\"\n         return True\n+\n+    def _run_custom_sync_command(self, command):\n+        \"\"\"\n+        Execute the custom sync command.\n+\n+        :param command: the command\n+        :return: 0 on success execution, 1 otherwise\n+        \"\"\"\n+        status, output = self._run_command(command)\n+        log_handler = self.logger.info if status == 0 else self.logger.warning\n+        log_handler(\"output of '{}':\".format(command))\n+        log_handler(output)\n+        return status\n+\n+    def _run_custom_incoming_command(self, command):\n+        \"\"\"\n+        Execute the custom incoming command.\n+\n+        :param command: the command\n+        :return: true when there are changes, false otherwise\n+        \"\"\"\n+        status, output = self._run_command(command)\n+        if status != 0:\n+            self.logger.error(\"output of '{}':\".format(command))\n+            self.logger.error(output)\n+            raise RepositoryException(\n+                'failed to check for incoming in repository {}'.format(self)\n+            )\n+        return len(output.strip()) > 0\n+\n+    def _run_command(self, command):\n+        \"\"\"\n+        Execute the command.\n+\n+        :param command: the command\n+        :return: tuple of (status, output)\n+                    - status: 0 on success execution, non-zero otherwise\n+                    - output: command output as string\n+        \"\"\"\n+        cmd = self.getCommand(command, work_dir=self.path,\n+                              env_vars=self.env, logger=self.logger)\n+        cmd.execute()\n+        if cmd.getretcode() != 0 or cmd.getstate() != Command.FINISHED:\n+            cmd.log_error(\"failed to perform command\")", "originalCommit": "739a0f8cfc53ac79257a1a37bcdda10d05df3725", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0MTg1Mg==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r510741852", "bodyText": "and the retcode + state", "author": "vladak", "createdAt": "2020-10-23T09:03:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0MTM1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkyNjAzNw==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r510926037", "bodyText": "that's part of the method\n    def log_error(self, msg):\n        if self.state is Command.FINISHED:\n            self.logger.error(\"{}: command {} in directory {} exited with {}\".\n                              format(msg, self.cmd, self.work_dir,\n                                     self.getretcode()))\n        else:\n            self.logger.error(\"{}: command {} in directory {} ended with \"\n                              \"invalid state {}\".\n                              format(msg, self.cmd, self.work_dir, self.state))", "author": "tulinkry", "createdAt": "2020-10-23T14:32:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0MTM1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1MTg0OQ==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r510751849", "bodyText": "expected first, actual second ?", "author": "vladak", "createdAt": "2020-10-23T09:20:57Z", "path": "opengrok-tools/src/test/python/test_mirror.py", "diffHunk": "@@ -376,3 +400,185 @@ def mock_get_repo_type(*args):\n             repos = get_repos_for_project(project_name, None, source_root,\n                                           ignored_repos=['.'])\n             assert len(repos) == 0\n+\n+\n+@pytest.mark.parametrize(['config', 'expected_command'], [", "originalCommit": "739a0f8cfc53ac79257a1a37bcdda10d05df3725", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3Mjg5Ng==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r511372896", "bodyText": "done", "author": "tulinkry", "createdAt": "2020-10-24T09:58:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1MTg0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1NzMzOA==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r510757338", "bodyText": "make 'default-command' a variable ?", "author": "vladak", "createdAt": "2020-10-23T09:29:43Z", "path": "opengrok-tools/src/test/python/test_mirror.py", "diffHunk": "@@ -376,3 +400,185 @@ def mock_get_repo_type(*args):\n             repos = get_repos_for_project(project_name, None, source_root,\n                                           ignored_repos=['.'])\n             assert len(repos) == 0\n+\n+\n+@pytest.mark.parametrize(['config', 'expected_command'], [\n+    (None, 'default-command'),", "originalCommit": "739a0f8cfc53ac79257a1a37bcdda10d05df3725", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MzU2NA==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r511373564", "bodyText": "done", "author": "tulinkry", "createdAt": "2020-10-24T09:59:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1NzMzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1OTU3Ng==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r510759576", "bodyText": "this should probably say that it looks up the 'command' key", "author": "vladak", "createdAt": "2020-10-23T09:33:33Z", "path": "opengrok-tools/src/main/python/opengrok_tools/scm/repository.py", "diffHunk": "@@ -75,6 +82,105 @@ def incoming(self):\n         \"\"\"\n         Check if there are any incoming changes.\n \n+        Return True if so, False otherwise.\n+        \"\"\"\n+        if self.is_command_overridden(self.configured_commands, 'incoming'):\n+            return self._run_custom_incoming_command(\n+                self.listify(self.configured_commands['incoming'])\n+            )\n+        return self.incoming_check()\n+\n+    def incoming_check(self):\n+        \"\"\"\n+        Check if there are any incoming changes.\n+\n         Return True if so, False otherwise.\n         \"\"\"\n         return True\n+\n+    def _run_custom_sync_command(self, command):\n+        \"\"\"\n+        Execute the custom sync command.\n+\n+        :param command: the command\n+        :return: 0 on success execution, 1 otherwise\n+        \"\"\"\n+        status, output = self._run_command(command)\n+        log_handler = self.logger.info if status == 0 else self.logger.warning\n+        log_handler(\"output of '{}':\".format(command))\n+        log_handler(output)\n+        return status\n+\n+    def _run_custom_incoming_command(self, command):\n+        \"\"\"\n+        Execute the custom incoming command.\n+\n+        :param command: the command\n+        :return: true when there are changes, false otherwise\n+        \"\"\"\n+        status, output = self._run_command(command)\n+        if status != 0:\n+            self.logger.error(\"output of '{}':\".format(command))\n+            self.logger.error(output)\n+            raise RepositoryException(\n+                'failed to check for incoming in repository {}'.format(self)\n+            )\n+        return len(output.strip()) > 0\n+\n+    def _run_command(self, command):\n+        \"\"\"\n+        Execute the command.\n+\n+        :param command: the command\n+        :return: tuple of (status, output)\n+                    - status: 0 on success execution, non-zero otherwise\n+                    - output: command output as string\n+        \"\"\"\n+        cmd = self.getCommand(command, work_dir=self.path,\n+                              env_vars=self.env, logger=self.logger)\n+        cmd.execute()\n+        if cmd.getretcode() != 0 or cmd.getstate() != Command.FINISHED:\n+            cmd.log_error(\"failed to perform command\")\n+            status = cmd.getretcode()\n+            if status == 0 and cmd.getstate() != Command.FINISHED:\n+                status = 1\n+            return status, '\\n'.join(filter(None, [\n+                cmd.getoutputstr(),\n+                cmd.geterroutputstr()\n+            ]))\n+        return 0, cmd.getoutputstr()\n+\n+    @staticmethod\n+    def _repository_command(configured_commands, default=lambda: None):\n+        \"\"\"\n+        Get the repository command, or use default supplier.\n+\n+        :param configured_commands: commands section from configuration", "originalCommit": "739a0f8cfc53ac79257a1a37bcdda10d05df3725", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MTUwOQ==", "url": "https://github.com/oracle/opengrok/pull/3285#discussion_r511371509", "bodyText": "When I add that, I should perhaps mention that it only does the lookup when the configured_commands is a dictionary and that all together....is exactly what is in the code. So I'm not a big fan adding that comment.", "author": "tulinkry", "createdAt": "2020-10-24T09:54:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1OTU3Ng=="}], "type": "inlineReview"}, {"oid": "84821b0640433fcd053862c0c349c9c00e5170ae", "url": "https://github.com/oracle/opengrok/commit/84821b0640433fcd053862c0c349c9c00e5170ae", "message": "use variable for sync and incoming", "committedDate": "2020-10-24T08:07:40Z", "type": "commit"}, {"oid": "c696c01c91438d68b90b2fb070b9b06f0810f069", "url": "https://github.com/oracle/opengrok/commit/c696c01c91438d68b90b2fb070b9b06f0810f069", "message": "returning boolean", "committedDate": "2020-10-24T08:11:04Z", "type": "commit"}, {"oid": "82f27e91e4e30febce27ccbd81ba52f5842443ea", "url": "https://github.com/oracle/opengrok/commit/82f27e91e4e30febce27ccbd81ba52f5842443ea", "message": "refactor docs", "committedDate": "2020-10-24T08:12:13Z", "type": "commit"}, {"oid": "66adc4d45d2e286c0a74efcea0f49151bf04b5a8", "url": "https://github.com/oracle/opengrok/commit/66adc4d45d2e286c0a74efcea0f49151bf04b5a8", "message": "using the line-length 120", "committedDate": "2020-10-24T09:56:12Z", "type": "commit"}, {"oid": "203c875a32ada3369efb612e86958c2709018400", "url": "https://github.com/oracle/opengrok/commit/203c875a32ada3369efb612e86958c2709018400", "message": "swap expected and config in tests", "committedDate": "2020-10-24T09:57:58Z", "type": "commit"}, {"oid": "2b9c65e0ed3ef667679abb5f15e2ec9c540fec66", "url": "https://github.com/oracle/opengrok/commit/2b9c65e0ed3ef667679abb5f15e2ec9c540fec66", "message": "variable for DEFAULT_COMMAND", "committedDate": "2020-10-24T09:59:43Z", "type": "commit"}, {"oid": "2b9c65e0ed3ef667679abb5f15e2ec9c540fec66", "url": "https://github.com/oracle/opengrok/commit/2b9c65e0ed3ef667679abb5f15e2ec9c540fec66", "message": "variable for DEFAULT_COMMAND", "committedDate": "2020-10-24T09:59:43Z", "type": "forcePushed"}, {"oid": "58be0eee4462c90980c38e4ca7ad433506548ed0", "url": "https://github.com/oracle/opengrok/commit/58be0eee4462c90980c38e4ca7ad433506548ed0", "message": "refactoring the code on the same line", "committedDate": "2020-10-24T10:11:57Z", "type": "commit"}, {"oid": "f20f38003ae5c399a3a4c6dde49d43d4358a924a", "url": "https://github.com/oracle/opengrok/commit/f20f38003ae5c399a3a4c6dde49d43d4358a924a", "message": "reusing base repository methods in git repository", "committedDate": "2020-10-24T10:14:11Z", "type": "commit"}, {"oid": "89ff2c876c11b9c154d651d381218c6a41383cf8", "url": "https://github.com/oracle/opengrok/commit/89ff2c876c11b9c154d651d381218c6a41383cf8", "message": "reusing base repository methods in perforce repository", "committedDate": "2020-10-24T10:27:28Z", "type": "commit"}, {"oid": "b5841491a8f257b794649213d6e4f99871096779", "url": "https://github.com/oracle/opengrok/commit/b5841491a8f257b794649213d6e4f99871096779", "message": "reusing base repository methods in repo repository", "committedDate": "2020-10-24T10:27:28Z", "type": "commit"}, {"oid": "664396768536c02153523c571989623d0b9feaa2", "url": "https://github.com/oracle/opengrok/commit/664396768536c02153523c571989623d0b9feaa2", "message": "reusing base repository methods in svn repository", "committedDate": "2020-10-24T10:27:28Z", "type": "commit"}, {"oid": "6b9f29d02d983decf8ebeab6abe3258d94bc5f76", "url": "https://github.com/oracle/opengrok/commit/6b9f29d02d983decf8ebeab6abe3258d94bc5f76", "message": "reusing base repository methods in teamware repository", "committedDate": "2020-10-24T10:27:28Z", "type": "commit"}, {"oid": "6b9f29d02d983decf8ebeab6abe3258d94bc5f76", "url": "https://github.com/oracle/opengrok/commit/6b9f29d02d983decf8ebeab6abe3258d94bc5f76", "message": "reusing base repository methods in teamware repository", "committedDate": "2020-10-24T10:27:28Z", "type": "forcePushed"}]}