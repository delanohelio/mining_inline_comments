{"pr_number": 6031, "pr_title": "[Issue 4175] [pulsar-function-go] Add Go Function heartbeat (and gRPC service) for production usage", "pr_createdAt": "2020-01-11T02:21:29Z", "pr_url": "https://github.com/apache/pulsar/pull/6031", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0MzAwNA==", "url": "https://github.com/apache/pulsar/pull/6031#discussion_r366943004", "bodyText": "please don't remove the comments", "author": "wolfstudy", "createdAt": "2020-01-15T15:34:29Z", "path": "pulsar-function-go/pb/doc.go", "diffHunk": "@@ -17,18 +17,4 @@\n // under the License.\n //\n \n-// Package api provides the protocol buffer messages that Pulsar\n-// uses for the client/broker wire protocol.\n-// See \"Pulsar binary protocol specification\" for more information.\n-// https://pulsar.incubator.apache.org/docs/latest/project/BinaryProtocol/\n-//\n-// The protocol definition files are part of the main Pulsar source,\n-// located within the Pulsar repository at:\n-// https://github.com/apache/incubator-pulsar/tree/master/pulsar-common/src/main/proto\n-//\n-// The generated Go code was created from the source Pulsar files at git:\n-//    tag:      v1.18-2614-g548c726b8\n-//    revision: 548c726b8e7f0e163b1132c9ada6ba83d6bec572\n-//\n-// Files generated by the protoc-gen-go program should not be modified.\n-package pb\n+package api", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0MzM1OA==", "url": "https://github.com/apache/pulsar/pull/6031#discussion_r366943358", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tmyMap := c.instanceConf.funcDetails.GetSource().InputSpecs\n          \n          \n            \n            \tinputMap := c.instanceConf.funcDetails.GetSource().InputSpecs", "author": "wolfstudy", "createdAt": "2020-01-15T15:35:05Z", "path": "pulsar-function-go/pf/context.go", "diffHunk": "@@ -43,7 +43,15 @@ func (c *FunctionContext) GetInstanceID() int {\n }\n \n func (c *FunctionContext) GetInputTopics() []string {\n-\treturn c.inputTopics\n+\tmyMap := c.instanceConf.funcDetails.GetSource().InputSpecs", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0MzU5OQ==", "url": "https://github.com/apache/pulsar/pull/6031#discussion_r366943599", "bodyText": "please remove the comments", "author": "wolfstudy", "createdAt": "2020-01-15T15:35:29Z", "path": "pulsar-function-go/pf/context.go", "diffHunk": "@@ -43,7 +43,15 @@ func (c *FunctionContext) GetInstanceID() int {\n }\n \n func (c *FunctionContext) GetInputTopics() []string {\n-\treturn c.inputTopics\n+\tmyMap := c.instanceConf.funcDetails.GetSource().InputSpecs\n+\tinputTopics := make([]string, len(myMap))\n+\ti := 0\n+\tfor k := range myMap {\n+\t\tinputTopics[i] = k\n+\t\ti++\n+\t}\n+\treturn inputTopics\n+\t//return c.inputTopics", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0MzkyOQ==", "url": "https://github.com/apache/pulsar/pull/6031#discussion_r366943929", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpb \"github.com/apache/pulsar/pulsar-function-go/pb\"\n          \n          \n            \n            \t\"github.com/apache/pulsar/pulsar-function-go/pb\"", "author": "wolfstudy", "createdAt": "2020-01-15T15:36:00Z", "path": "pulsar-function-go/pf/instance.go", "diffHunk": "@@ -21,12 +21,13 @@ package pf\n \n import (\n \t\"context\"\n+\t\"github.com/golang/protobuf/ptypes/empty\"\n \t\"math\"\n \t\"time\"\n \n \t\"github.com/apache/pulsar/pulsar-client-go/pulsar\"\n \tlog \"github.com/apache/pulsar/pulsar-function-go/logutil\"\n-\t\"github.com/apache/pulsar/pulsar-function-go/pb\"\n+\tpb \"github.com/apache/pulsar/pulsar-function-go/pb\"", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAyNzU0Nw==", "url": "https://github.com/apache/pulsar/pull/6031#discussion_r367027547", "bodyText": "When I make this change, I can't get it to build. I get unresolved variables, even if I remove pb from the references in the code.", "author": "devinbost", "createdAt": "2020-01-15T18:10:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0MzkyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NDg4NQ==", "url": "https://github.com/apache/pulsar/pull/6031#discussion_r366944885", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tlog.Errorf(\"Haven't received health check from spawner in a while. Stopping instance...\")\n          \n          \n            \n            \t\tlog.Error(\"Haven't received health check from spawner in a while. Stopping instance...\")", "author": "wolfstudy", "createdAt": "2020-01-15T15:37:35Z", "path": "pulsar-function-go/pf/instance.go", "diffHunk": "@@ -35,19 +36,57 @@ type goInstance struct {\n \tproducer  pulsar.Producer\n \tconsumers map[string]pulsar.Consumer\n \tclient    pulsar.Client\n+\tlastHealthCheckTs int64\n }\n \n+\n // newGoInstance init goInstance and init function context\n func newGoInstance() *goInstance {\n \tgoInstance := &goInstance{\n \t\tcontext:   NewFuncContext(),\n \t\tconsumers: make(map[string]pulsar.Consumer),\n \t}\n+\tnow := time.Now()\n+\tgoInstance.lastHealthCheckTs = now.UnixNano()\n \treturn goInstance\n }\n \n+func (gi *goInstance) processSpawnerHealthCheckTimer(tkr *time.Ticker){\n+\tlog.Info(\"Starting processSpawnerHealthCheckTimer\")\n+\tnow := time.Now()\n+\tmaxIdleTime := gi.context.GetMaxIdleTime()\n+\ttimeSinceLastCheck := now.UnixNano() - gi.lastHealthCheckTs\n+\tif (timeSinceLastCheck) > (maxIdleTime)  {\n+\t\tlog.Errorf(\"Haven't received health check from spawner in a while. Stopping instance...\")", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NTM2NA==", "url": "https://github.com/apache/pulsar/pull/6031#discussion_r366945364", "bodyText": "please remove the commets", "author": "wolfstudy", "createdAt": "2020-01-15T15:38:20Z", "path": "pulsar-function-go/pf/instance.go", "diffHunk": "@@ -35,19 +36,57 @@ type goInstance struct {\n \tproducer  pulsar.Producer\n \tconsumers map[string]pulsar.Consumer\n \tclient    pulsar.Client\n+\tlastHealthCheckTs int64\n }\n \n+\n // newGoInstance init goInstance and init function context\n func newGoInstance() *goInstance {\n \tgoInstance := &goInstance{\n \t\tcontext:   NewFuncContext(),\n \t\tconsumers: make(map[string]pulsar.Consumer),\n \t}\n+\tnow := time.Now()\n+\tgoInstance.lastHealthCheckTs = now.UnixNano()\n \treturn goInstance\n }\n \n+func (gi *goInstance) processSpawnerHealthCheckTimer(tkr *time.Ticker){\n+\tlog.Info(\"Starting processSpawnerHealthCheckTimer\")\n+\tnow := time.Now()\n+\tmaxIdleTime := gi.context.GetMaxIdleTime()\n+\ttimeSinceLastCheck := now.UnixNano() - gi.lastHealthCheckTs\n+\tif (timeSinceLastCheck) > (maxIdleTime)  {\n+\t\tlog.Errorf(\"Haven't received health check from spawner in a while. Stopping instance...\")\n+\t\tgi.close()\n+\t\t// os.Exit(1)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NjY1NA==", "url": "https://github.com/apache/pulsar/pull/6031#discussion_r366946654", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpb \"github.com/apache/pulsar/pulsar-function-go/pb\"\n          \n          \n            \n            \t\"github.com/apache/pulsar/pulsar-function-go/pb\"", "author": "wolfstudy", "createdAt": "2020-01-15T15:40:30Z", "path": "pulsar-function-go/pf/instanceConf.go", "diffHunk": "@@ -24,7 +24,7 @@ import (\n \t\"time\"\n \n \t\"github.com/apache/pulsar/pulsar-function-go/conf\"\n-\t\"github.com/apache/pulsar/pulsar-function-go/pb\"\n+\tpb \"github.com/apache/pulsar/pulsar-function-go/pb\"", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAyODgyMw==", "url": "https://github.com/apache/pulsar/pull/6031#discussion_r367028823", "bodyText": "Again, when I make this change, I can't get it to build.", "author": "devinbost", "createdAt": "2020-01-15T18:12:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NjY1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0Njk0MA==", "url": "https://github.com/apache/pulsar/pull/6031#discussion_r366946940", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpb \"github.com/apache/pulsar/pulsar-function-go/pb\"\n          \n          \n            \n            \t\"github.com/apache/pulsar/pulsar-function-go/pb\"", "author": "wolfstudy", "createdAt": "2020-01-15T15:40:57Z", "path": "pulsar-function-go/pf/instanceControlServicer.go", "diffHunk": "@@ -0,0 +1,71 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+\n+package pf\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"github.com/golang/protobuf/ptypes/empty\"\n+\t\"net\"\n+\t\"google.golang.org/grpc\"\n+\tlog \"github.com/apache/pulsar/pulsar-function-go/logutil\"\n+\tpb \"github.com/apache/pulsar/pulsar-function-go/pb\"", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAyODk0OA==", "url": "https://github.com/apache/pulsar/pull/6031#discussion_r367028948", "bodyText": "Again, when I make this change, I can't get it to build.", "author": "devinbost", "createdAt": "2020-01-15T18:13:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0Njk0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NzgzOQ==", "url": "https://github.com/apache/pulsar/pull/6031#discussion_r366947839", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprintln(\"Starting processSpawnerHealthCheckTimer\")\n          \n          \n            \n            \tfmt.Println(\"Starting processSpawnerHealthCheckTimer\")", "author": "wolfstudy", "createdAt": "2020-01-15T15:42:18Z", "path": "pulsar-function-go/pf/instance_test.go", "diffHunk": "@@ -0,0 +1,93 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+\n+package pf\n+\n+import (\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"strconv\"\n+\t\"testing\"\n+\t\"time\"\n+)\n+\n+\n+func testProcessSpawnerHealthCheckTimer(tkr *time.Ticker, lastHealthCheckTs int64, expectedHealthCheckInterval int32, counter *int ){\n+\tprintln(\"Starting processSpawnerHealthCheckTimer\")", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0ODUyNw==", "url": "https://github.com/apache/pulsar/pull/6031#discussion_r366948527", "bodyText": "@devinbost please replace println() with fmt.Println()", "author": "wolfstudy", "createdAt": "2020-01-15T15:43:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NzgzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0ODk1NA==", "url": "https://github.com/apache/pulsar/pull/6031#discussion_r366948954", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            func testProcessSpawnerHealthCheckTimer(tkr *time.Ticker, lastHealthCheckTs int64, expectedHealthCheckInterval int32, counter *int ){\n          \n          \n            \n            func testProcessSpawnerHealthCheckTimer(tkr *time.Ticker, lastHealthCheckTs int64, expectedHealthCheckInterval int32, counter int ){", "author": "wolfstudy", "createdAt": "2020-01-15T15:44:06Z", "path": "pulsar-function-go/pf/instance_test.go", "diffHunk": "@@ -0,0 +1,93 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+\n+package pf\n+\n+import (\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"strconv\"\n+\t\"testing\"\n+\t\"time\"\n+)\n+\n+\n+func testProcessSpawnerHealthCheckTimer(tkr *time.Ticker, lastHealthCheckTs int64, expectedHealthCheckInterval int32, counter *int ){", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAzMTM4Nw==", "url": "https://github.com/apache/pulsar/pull/6031#discussion_r367031387", "bodyText": "This change breaks the test because the counter variable doesn't propagate as needed for the assertion.", "author": "devinbost", "createdAt": "2020-01-15T18:18:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0ODk1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0OTE1Mg==", "url": "https://github.com/apache/pulsar/pull/6031#discussion_r366949152", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            func testStartScheduler(counter *int){\n          \n          \n            \n            func testStartScheduler(counter int){", "author": "wolfstudy", "createdAt": "2020-01-15T15:44:28Z", "path": "pulsar-function-go/pf/instance_test.go", "diffHunk": "@@ -0,0 +1,93 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+\n+package pf\n+\n+import (\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"strconv\"\n+\t\"testing\"\n+\t\"time\"\n+)\n+\n+\n+func testProcessSpawnerHealthCheckTimer(tkr *time.Ticker, lastHealthCheckTs int64, expectedHealthCheckInterval int32, counter *int ){\n+\tprintln(\"Starting processSpawnerHealthCheckTimer\")\n+\tnow := time.Now()\n+\tmaxIdleTime := int64(time.Duration(expectedHealthCheckInterval) * 3 * time.Second)\n+\tprintln(\"maxIdleTime is: \" + strconv.FormatInt(maxIdleTime, 10))\n+\ttimeSinceLastCheck := now.UnixNano() - lastHealthCheckTs\n+\tprintln(\"timeSinceLastCheck is: \" + strconv.FormatInt(timeSinceLastCheck, 10))\n+\tif (timeSinceLastCheck) > (maxIdleTime)  {\n+\t\tprintln(\"Haven't received health check from spawner in a while. Stopping instance...\")\n+\t\t// os.Exit(1)\n+\t\ttkr.Stop()\n+\t} else {\n+\t\tprintln(\"Continuing to check\")\n+\t\t*counter++\n+\t}\n+}\n+\n+func testStartScheduler(counter *int){", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAzNzMyNw==", "url": "https://github.com/apache/pulsar/pull/6031#discussion_r367037327", "bodyText": "Again, this change breaks the test because the counter variable doesn't propagate as needed for the assertion.", "author": "devinbost", "createdAt": "2020-01-15T18:30:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0OTE1Mg=="}], "type": "inlineReview"}, {"oid": "6e2174d9ed3bc074785c36583f463774239100fd", "url": "https://github.com/apache/pulsar/commit/6e2174d9ed3bc074785c36583f463774239100fd", "message": "Enabled grpc plugin to gRPC generate.sh script to fix issues causing omission of methods for gRPC server registration in generated gRPC files for Go. (#4175)\n\nGenerated updated gRPC files that contain service registration methods for creating gRPC service in Go. Also, upgraded proto version to 3. (#4175)\n\nFixed build errors by prefixing pulsar-function-go/pb with pb alias. (#4175).\n\nAdded instanceControlServicer.go as the servicer responsible for serving the gRPC service for the Go Function instances (#4175). Rough draft right now.\n\nAdded changes to show intent behind passing port value to Start in function.go. Also, added some code to support healthcheck and added methods to support instanceConrolServicer. Just needed to commit changes to allow reproducible test errors. (#4175).\n\nUpdated function.go Start method to make it more clear where we need to provide a port value (#4175).\n\nAdded port and expectedHealthCheckInterval to use of function context. Updated all references. (#4175)\n\nAdded Apache license to gRPC-generated files in attempt to get license check test to pass (#4175).\n\nCreated instanceControlServicer_test.go to test gRPC server and validate that HealthCheck method returns true as expected (#4175).\n\nFixed bug in FunctionContext (and context_test.go) where the inputTopics field was being referenced when it wasn't getting populated. Updated GetInputTopics method to get input topics from the source location (#4175).\n\nFixed bug in FunctionContext (and context_test.go) where the inputTopics field was being referenced when it wasn't getting populated. Updated GetInputTopics method to get input topics from the source location. (Should have been part of previous commit.) Also, added expectedHealthCheckInterval to conf.yaml for testing. (#4175).\n\nFixed license formatting by running mvn license:format (#4175).\n\nAdded logic and tests to allow healthCheck to kill instances that aren't receiving their regular health checks. Still needs an end-to-end test involving FunctionManager to check for possible issues that could kill instances incorrectly (#4175).\n\nRemoved inputTopics field from FunctionContext (#4175).\n\nAdding the progress I've made so far on migrating the Prometheus code to Go... currently blocked due to missing methods from the Go client. Waiting for information from the Prometheus maintainers to find a workaround. (#4175).\n\nFixed license check. (#4175)\n\nReverting the last two commits since they should go into a separate PR. (#4174).\n\nRe-added test file that was accidentially deleted (#4175).\n\nAdded a few comments to make review easier (#4175).\n\nMade minor (non-functional) changes as per PR review (#4175).\n\nFixed print statements (#4175).\n\nRe-added comment after getting maven license formatting correct (#4175).", "committedDate": "2020-01-20T20:10:32Z", "type": "commit"}, {"oid": "6e2174d9ed3bc074785c36583f463774239100fd", "url": "https://github.com/apache/pulsar/commit/6e2174d9ed3bc074785c36583f463774239100fd", "message": "Enabled grpc plugin to gRPC generate.sh script to fix issues causing omission of methods for gRPC server registration in generated gRPC files for Go. (#4175)\n\nGenerated updated gRPC files that contain service registration methods for creating gRPC service in Go. Also, upgraded proto version to 3. (#4175)\n\nFixed build errors by prefixing pulsar-function-go/pb with pb alias. (#4175).\n\nAdded instanceControlServicer.go as the servicer responsible for serving the gRPC service for the Go Function instances (#4175). Rough draft right now.\n\nAdded changes to show intent behind passing port value to Start in function.go. Also, added some code to support healthcheck and added methods to support instanceConrolServicer. Just needed to commit changes to allow reproducible test errors. (#4175).\n\nUpdated function.go Start method to make it more clear where we need to provide a port value (#4175).\n\nAdded port and expectedHealthCheckInterval to use of function context. Updated all references. (#4175)\n\nAdded Apache license to gRPC-generated files in attempt to get license check test to pass (#4175).\n\nCreated instanceControlServicer_test.go to test gRPC server and validate that HealthCheck method returns true as expected (#4175).\n\nFixed bug in FunctionContext (and context_test.go) where the inputTopics field was being referenced when it wasn't getting populated. Updated GetInputTopics method to get input topics from the source location (#4175).\n\nFixed bug in FunctionContext (and context_test.go) where the inputTopics field was being referenced when it wasn't getting populated. Updated GetInputTopics method to get input topics from the source location. (Should have been part of previous commit.) Also, added expectedHealthCheckInterval to conf.yaml for testing. (#4175).\n\nFixed license formatting by running mvn license:format (#4175).\n\nAdded logic and tests to allow healthCheck to kill instances that aren't receiving their regular health checks. Still needs an end-to-end test involving FunctionManager to check for possible issues that could kill instances incorrectly (#4175).\n\nRemoved inputTopics field from FunctionContext (#4175).\n\nAdding the progress I've made so far on migrating the Prometheus code to Go... currently blocked due to missing methods from the Go client. Waiting for information from the Prometheus maintainers to find a workaround. (#4175).\n\nFixed license check. (#4175)\n\nReverting the last two commits since they should go into a separate PR. (#4174).\n\nRe-added test file that was accidentially deleted (#4175).\n\nAdded a few comments to make review easier (#4175).\n\nMade minor (non-functional) changes as per PR review (#4175).\n\nFixed print statements (#4175).\n\nRe-added comment after getting maven license formatting correct (#4175).", "committedDate": "2020-01-20T20:10:32Z", "type": "forcePushed"}, {"oid": "a40e22936ef471117fd929186e8231ae61fd5acc", "url": "https://github.com/apache/pulsar/commit/a40e22936ef471117fd929186e8231ae61fd5acc", "message": "Removed comment that I forgot to remove (#4175).", "committedDate": "2020-01-20T20:14:34Z", "type": "commit"}, {"oid": "8ac03f9566c03e9fee0e899a7b9e1dea57d85bda", "url": "https://github.com/apache/pulsar/commit/8ac03f9566c03e9fee0e899a7b9e1dea57d85bda", "message": "Fixed formatting issues for style check (#4175).", "committedDate": "2020-01-20T20:49:05Z", "type": "commit"}, {"oid": "e1bf686cfc2493d0fb1a71138a0370f28fb146d4", "url": "https://github.com/apache/pulsar/commit/e1bf686cfc2493d0fb1a71138a0370f28fb146d4", "message": "Updated gRPC test to no longer use deprecated method (#4175).", "committedDate": "2020-01-20T21:09:02Z", "type": "commit"}, {"oid": "5be01311e80f76fb7defe8b5e9b0176322e0fd43", "url": "https://github.com/apache/pulsar/commit/5be01311e80f76fb7defe8b5e9b0176322e0fd43", "message": "Fixed more formatting issues by using goimports (#4175).", "committedDate": "2020-01-20T21:21:32Z", "type": "commit"}, {"oid": "992ae4cd28a9601159003e8c13d18a8083f9ac03", "url": "https://github.com/apache/pulsar/commit/992ae4cd28a9601159003e8c13d18a8083f9ac03", "message": "Fixed even more formatting issues (#4175).", "committedDate": "2020-01-20T21:27:22Z", "type": "commit"}, {"oid": "f4a36efa0708cfcdf9e9893af45b8c371d414203", "url": "https://github.com/apache/pulsar/commit/f4a36efa0708cfcdf9e9893af45b8c371d414203", "message": "Fixed yet even more formatting issues (#4175).", "committedDate": "2020-01-20T21:35:02Z", "type": "commit"}, {"oid": "772191866a205f1a6972d85ca2ae54c4ec2d7f16", "url": "https://github.com/apache/pulsar/commit/772191866a205f1a6972d85ca2ae54c4ec2d7f16", "message": "Adding arbitrary space character to readme to trigger new build to get intermittent test failures to pass. (#6031)", "committedDate": "2020-01-24T23:58:33Z", "type": "commit"}, {"oid": "8a01d1c5c7c3d63e5a70217ed88ecc738f851b65", "url": "https://github.com/apache/pulsar/commit/8a01d1c5c7c3d63e5a70217ed88ecc738f851b65", "message": "Adding arbitrary comment character to code file to trigger new build to get intermittent test failures to pass. (#6031)", "committedDate": "2020-01-25T02:55:56Z", "type": "commit"}, {"oid": "b3dccc907ec05b282c0d8e04c848324c108df36f", "url": "https://github.com/apache/pulsar/commit/b3dccc907ec05b282c0d8e04c848324c108df36f", "message": "Adding arbitrary comment character to code file to trigger new build to get intermittent test failures to pass. Attempt 3. (#6031)", "committedDate": "2020-01-25T05:25:29Z", "type": "commit"}, {"oid": "71e1cea2e43fceef66e1cdc89be9f1409ae186ea", "url": "https://github.com/apache/pulsar/commit/71e1cea2e43fceef66e1cdc89be9f1409ae186ea", "message": "Adding arbitrary comment character to code file to trigger new build to get intermittent test failures to pass. Attempt 4. (#6031)", "committedDate": "2020-01-25T05:52:06Z", "type": "commit"}, {"oid": "be6133fe591f846685e7fc7a3a0f36588b624847", "url": "https://github.com/apache/pulsar/commit/be6133fe591f846685e7fc7a3a0f36588b624847", "message": "Edited arbitrary comment character to trigger new build to get intermittent test failures to pass. Attempt 5. (#6031)", "committedDate": "2020-01-25T06:34:29Z", "type": "commit"}, {"oid": "f9e81fdd32e6cd0817a115d86c5f1b3f563d59af", "url": "https://github.com/apache/pulsar/commit/f9e81fdd32e6cd0817a115d86c5f1b3f563d59af", "message": "Edited arbitrary comment character to trigger new build to get intermittent test failures to pass. Attempt 6. (#6031)", "committedDate": "2020-01-25T17:25:46Z", "type": "commit"}]}