{"pr_number": 6905, "pr_title": "[Issue #6842] feat(schema): allow for schema reader and writer registration on SchemaDefinition", "pr_createdAt": "2020-05-07T08:04:15Z", "pr_url": "https://github.com/apache/pulsar/pull/6905", "timeline": [{"oid": "5af0792d16dd868274f6be8297dc5f6244096a94", "url": "https://github.com/apache/pulsar/commit/5af0792d16dd868274f6be8297dc5f6244096a94", "message": "feat(schema): allow for schema reader and writer registration on SchemaDefinition\n\nWith this feature it is possible to configure own SchemaReader and SchemaWriter on SchemaDefinition instantiation. With this it is possible to e.g. reuse already configured Jackson ObjectMapper instances.", "committedDate": "2020-05-07T08:00:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyMjk3NQ==", "url": "https://github.com/apache/pulsar/pull/6905#discussion_r421622975", "bodyText": "Can we be sure nobody is using this class (since renaming is a backward-breaking change)? (Same question for the writer.)", "author": "hansenc", "createdAt": "2020-05-07T16:08:48Z", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/schema/reader/JacksonJsonReader.java", "diffHunk": "@@ -27,11 +27,11 @@\n import java.io.IOException;\n import java.io.InputStream;\n \n-public class JsonReader<T> implements SchemaReader<T> {\n+public class JacksonJsonReader<T> implements SchemaReader<T> {", "originalCommit": "5af0792d16dd868274f6be8297dc5f6244096a94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY0OTUxOQ==", "url": "https://github.com/apache/pulsar/pull/6905#discussion_r421649519", "bodyText": "Well .. yeah someone could have used this class, for whatever reason from outside the framework. But it's original name is bad chosen, probably keep both and make the old class deprecated?", "author": "Persi", "createdAt": "2020-05-07T16:50:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyMjk3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3NDA2MA==", "url": "https://github.com/apache/pulsar/pull/6905#discussion_r421674060", "bodyText": "The rename is not worth it, IMO, but I defer to maintainers.", "author": "hansenc", "createdAt": "2020-05-07T17:31:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyMjk3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzODA1MQ==", "url": "https://github.com/apache/pulsar/pull/6905#discussion_r421938051", "bodyText": "I kept both versions and deprecated the old ones.", "author": "Persi", "createdAt": "2020-05-08T04:57:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyMjk3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyNDU5NQ==", "url": "https://github.com/apache/pulsar/pull/6905#discussion_r421624595", "bodyText": "I think you meant return this;, which begs the question, can we have some tests?", "author": "hansenc", "createdAt": "2020-05-07T16:11:20Z", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/schema/SchemaDefinitionBuilderImpl.java", "diffHunk": "@@ -114,6 +120,18 @@\n         return this;\n     }\n \n+    @Override\n+    public SchemaDefinitionBuilder<T> withSchemaReader(SchemaReader<T> reader) {\n+        this.reader=reader;\n+        return null;", "originalCommit": "5af0792d16dd868274f6be8297dc5f6244096a94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY0NTU0OA==", "url": "https://github.com/apache/pulsar/pull/6905#discussion_r421645548", "bodyText": "Welll ... obviously I meant that ... you should never do two things at once ...", "author": "Persi", "createdAt": "2020-05-07T16:44:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyNDU5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyNDc4NQ==", "url": "https://github.com/apache/pulsar/pull/6905#discussion_r421624785", "bodyText": "return this;", "author": "hansenc", "createdAt": "2020-05-07T16:11:37Z", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/schema/SchemaDefinitionBuilderImpl.java", "diffHunk": "@@ -114,6 +120,18 @@\n         return this;\n     }\n \n+    @Override\n+    public SchemaDefinitionBuilder<T> withSchemaReader(SchemaReader<T> reader) {\n+        this.reader=reader;\n+        return null;\n+    }\n+\n+    @Override\n+    public SchemaDefinitionBuilder<T> withSchemaWriter(SchemaWriter<T> writer) {\n+        this.writer = writer;\n+        return null;", "originalCommit": "5af0792d16dd868274f6be8297dc5f6244096a94", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYzNDI2NA==", "url": "https://github.com/apache/pulsar/pull/6905#discussion_r421634264", "bodyText": "This interface is used for more than just JSON schemas, right? If so, it will be confusing for users to be able to set a reader and writer for any type of schema when they will only be used for JSON schemas and ignored otherwise. So we either need to support this broadly, or instead we can overload JSONSchema.of() for a more targeted approach.", "author": "hansenc", "createdAt": "2020-05-07T16:26:26Z", "path": "pulsar-client-api/src/main/java/org/apache/pulsar/client/api/schema/SchemaDefinition.java", "diffHunk": "@@ -76,4 +78,18 @@\n      * @return the flag of supportSchemaVersioning\n      */\n     boolean getSupportSchemaVersioning();\n+\n+    /**\n+     * Get a configured schema reader.\n+     *\n+     * @return optional containing configured schema reader or empty optional if none is configure\n+     */\n+    Optional<SchemaReader<T>> getSchemaReaderOpt();", "originalCommit": "5af0792d16dd868274f6be8297dc5f6244096a94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY0ODMyNQ==", "url": "https://github.com/apache/pulsar/pull/6905#discussion_r421648325", "bodyText": "This interface can be used for other schemas as well, but both SchemaReader and SchemaWriter as well. I see what you mean, did not recognize the Producer and Consumer instantiators with Schema as parameter. But I am not sure if Schema class is meant to be used like that from outside the framework. As they already introduced some default Schema instantiators in the client api Schema class, I would not promote Schema.of for public use, as it is an internal of the framework.", "author": "Persi", "createdAt": "2020-05-07T16:49:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYzNDI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2NTk3Nw==", "url": "https://github.com/apache/pulsar/pull/6905#discussion_r421665977", "bodyText": "Hmm, you'll probably want to overload Schema.JSON(Class<T>) and Schema.JSON(SchemaDefinition) as well as JSONSchema.of(). All of these are referenced in the docs so presumably they are meant for public use. (Though I would have guessed JSONSchema.of is not meant for public use since it's in the impl package. \ud83e\udd37)", "author": "hansenc", "createdAt": "2020-05-07T17:18:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYzNDI2NA=="}], "type": "inlineReview"}, {"oid": "96b32f7924c33a528c4c78e748855083d553a6d4", "url": "https://github.com/apache/pulsar/commit/96b32f7924c33a528c4c78e748855083d553a6d4", "message": "fix: fix wrong return types and keep api compatibility", "committedDate": "2020-05-08T04:56:24Z", "type": "commit"}, {"oid": "bc80892cbe3620eefb17ff39cf2e6e1b5b08c4be", "url": "https://github.com/apache/pulsar/commit/bc80892cbe3620eefb17ff39cf2e6e1b5b08c4be", "message": "chore: fixed license info", "committedDate": "2020-05-08T05:30:43Z", "type": "commit"}, {"oid": "ed8cc7bb618f479417d7ed263f56fe1ee3cde88d", "url": "https://github.com/apache/pulsar/commit/ed8cc7bb618f479417d7ed263f56fe1ee3cde88d", "message": "fix: SchemaDefinitionBuilderImpl build verification\n\nAdded unit and integration tests for SchemaReader and SchemaWriter registration", "committedDate": "2020-05-09T09:02:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2OTcwMQ==", "url": "https://github.com/apache/pulsar/pull/6905#discussion_r423469701", "bodyText": "Avoid using import .*", "author": "codelipenghui", "createdAt": "2020-05-12T05:26:43Z", "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/BrokerClientIntegrationTest.java", "diffHunk": "@@ -67,16 +71,14 @@\n import org.apache.pulsar.broker.service.Topic;\n import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n import org.apache.pulsar.client.admin.PulsarAdminException;\n-import org.apache.pulsar.client.api.Consumer;\n-import org.apache.pulsar.client.api.ConsumerBuilder;\n-import org.apache.pulsar.client.api.Message;\n-import org.apache.pulsar.client.api.MessageId;\n-import org.apache.pulsar.client.api.Producer;\n-import org.apache.pulsar.client.api.ProducerConsumerBase;\n-import org.apache.pulsar.client.api.PulsarClient;\n-import org.apache.pulsar.client.api.PulsarClientException;\n-import org.apache.pulsar.client.api.SubscriptionType;\n+import org.apache.pulsar.client.api.*;", "originalCommit": "ed8cc7bb618f479417d7ed263f56fe1ee3cde88d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9a80bd71c2ba57a1b9288277138d2565e4070edb", "url": "https://github.com/apache/pulsar/commit/9a80bd71c2ba57a1b9288277138d2565e4070edb", "message": "chore(imports): reorganized imports to avoid *", "committedDate": "2020-05-12T07:35:26Z", "type": "commit"}]}