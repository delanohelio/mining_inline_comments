{"pr_number": 7713, "pr_title": "implement python logger wrapper", "pr_createdAt": "2020-07-31T18:24:08Z", "pr_url": "https://github.com/apache/pulsar/pull/7713", "timeline": [{"oid": "deebbe88a8ca77c9e49858f10fb8da6b0a4f38bc", "url": "https://github.com/apache/pulsar/commit/deebbe88a8ca77c9e49858f10fb8da6b0a4f38bc", "message": "rerun tests", "committedDate": "2020-09-05T08:37:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczODAxMA==", "url": "https://github.com/apache/pulsar/pull/7713#discussion_r490738010", "bodyText": "This equiation for log level conversion is used at multiple places, consider wrap it into function or somethink like that.", "author": "pinkavaj", "createdAt": "2020-09-18T06:50:47Z", "path": "pulsar-client-cpp/python/src/config.cc", "diffHunk": "@@ -74,6 +74,103 @@ static ClientConfiguration& ClientConfiguration_setAuthentication(ClientConfigur\n     return conf;\n }\n \n+class LoggerWrapper: public Logger {\n+    std::string _logger;\n+    PyObject* _pyLogger;\n+    int _currentPythonLogLevel = 10 + (Logger::LEVEL_INFO*10);\n+\n+    void _updateCurrentPythonLogLevel() {\n+        PyGILState_STATE state = PyGILState_Ensure();\n+\n+        try {\n+            _currentPythonLogLevel = py::call_method<int>(_pyLogger, \"getEffectiveLevel\");\n+        } catch (py::error_already_set e) {\n+            PyErr_Print();\n+        }\n+\n+        PyGILState_Release(state);\n+    };\n+\n+   public:\n+\n+    LoggerWrapper(const std::string &logger, PyObject* pyLogger) : _logger(logger) {\n+        _pyLogger = pyLogger;\n+        Py_XINCREF(_pyLogger);\n+\n+        _updateCurrentPythonLogLevel();\n+    }\n+\n+    LoggerWrapper(const LoggerWrapper& other) {\n+        _pyLogger = other._pyLogger;\n+        Py_XINCREF(_pyLogger);\n+    }\n+\n+    LoggerWrapper& operator=(const LoggerWrapper& other) {\n+        _pyLogger = other._pyLogger;\n+        Py_XINCREF(_pyLogger);\n+        return *this;\n+    }\n+\n+    virtual ~LoggerWrapper() {\n+        Py_XDECREF(_pyLogger);\n+    }\n+\n+    bool isEnabled(Level level) {\n+        return 10 + (level*10) >= _currentPythonLogLevel;", "originalCommit": "deebbe88a8ca77c9e49858f10fb8da6b0a4f38bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzNjAwNw==", "url": "https://github.com/apache/pulsar/pull/7713#discussion_r499136007", "bodyText": "extracted into a function", "author": "lbenc135", "createdAt": "2020-10-03T10:24:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczODAxMA=="}], "type": "inlineReview"}, {"oid": "6fcf18fad7e8c5200e4e018daea510f482f9b156", "url": "https://github.com/apache/pulsar/commit/6fcf18fad7e8c5200e4e018daea510f482f9b156", "message": "rerun tests", "committedDate": "2020-10-03T07:47:33Z", "type": "forcePushed"}, {"oid": "11be0b3a72e148b7db3ff7174210855ff272efc8", "url": "https://github.com/apache/pulsar/commit/11be0b3a72e148b7db3ff7174210855ff272efc8", "message": "add python logger test", "committedDate": "2020-12-28T08:33:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE2MTg2Mw==", "url": "https://github.com/apache/pulsar/pull/7713#discussion_r562161863", "bodyText": "The file and line information is not logged, but I'm not familiar with the code enought to decide what is more appropriate. From the point of developer I would preffer the file and line information in the log message.\nProbably someone more familiar with this code should speek his opinion.\nOtherwise looks good.", "author": "pinkavaj", "createdAt": "2021-01-21T20:02:32Z", "path": "pulsar-client-cpp/python/src/config.cc", "diffHunk": "@@ -74,6 +74,107 @@ static ClientConfiguration& ClientConfiguration_setAuthentication(ClientConfigur\n     return conf;\n }\n \n+class LoggerWrapper: public Logger {\n+    std::string _logger;\n+    PyObject* _pyLogger;\n+    int _currentPythonLogLevel = _getLogLevelValue(Logger::LEVEL_INFO);\n+\n+    void _updateCurrentPythonLogLevel() {\n+        PyGILState_STATE state = PyGILState_Ensure();\n+\n+        try {\n+            _currentPythonLogLevel = py::call_method<int>(_pyLogger, \"getEffectiveLevel\");\n+        } catch (py::error_already_set e) {\n+            PyErr_Print();\n+        }\n+\n+        PyGILState_Release(state);\n+    };\n+\n+    int _getLogLevelValue(Level level) {\n+        return 10 + (level * 10);\n+    }\n+\n+   public:\n+\n+    LoggerWrapper(const std::string &logger, PyObject* pyLogger) : _logger(logger) {\n+        _pyLogger = pyLogger;\n+        Py_XINCREF(_pyLogger);\n+\n+        _updateCurrentPythonLogLevel();\n+    }\n+\n+    LoggerWrapper(const LoggerWrapper& other) {\n+        _pyLogger = other._pyLogger;\n+        Py_XINCREF(_pyLogger);\n+    }\n+\n+    LoggerWrapper& operator=(const LoggerWrapper& other) {\n+        _pyLogger = other._pyLogger;\n+        Py_XINCREF(_pyLogger);\n+        return *this;\n+    }\n+\n+    virtual ~LoggerWrapper() {\n+        Py_XDECREF(_pyLogger);\n+    }\n+\n+    bool isEnabled(Level level) {\n+        return _getLogLevelValue(level) >= _currentPythonLogLevel;\n+    }\n+\n+    void log(Level level, int line, const std::string& message) {", "originalCommit": "11be0b3a72e148b7db3ff7174210855ff272efc8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE2Mzg4Mg==", "url": "https://github.com/apache/pulsar/pull/7713#discussion_r562163882", "bodyText": "Feel free to show example and you incentive to help with decission.", "author": "pinkavaj", "createdAt": "2021-01-21T20:06:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE2MTg2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTE3OTA4MQ==", "url": "https://github.com/apache/pulsar/pull/7713#discussion_r595179081", "bodyText": "Not having this info only truly matters if the Python Logger is connected ultimately to one or more Formatters that has tokens like filename, pathname or lineno in its format string.\nIt should be possible to create a LogRecord object (https://docs.python.org/3/library/logging.html#logrecord-objects) and pass it to Logger.handle method instead of using the simpler info, warning etc methods.  I for one think it is not worth the trouble and the implementation is fine as-is.", "author": "Bklyn", "createdAt": "2021-03-16T13:41:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE2MTg2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODA5MDQ0OA==", "url": "https://github.com/apache/pulsar/pull/7713#discussion_r598090448", "bodyText": "Thank you @Bklyn, please consider approving the PR", "author": "lbenc135", "createdAt": "2021-03-20T09:53:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE2MTg2Mw=="}], "type": "inlineReview"}, {"oid": "54ebbdb06f61b1ae9ea854530d7a3c7a806a095d", "url": "https://github.com/apache/pulsar/commit/54ebbdb06f61b1ae9ea854530d7a3c7a806a095d", "message": "add python logger test", "committedDate": "2021-03-20T08:08:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODgxODMyMw==", "url": "https://github.com/apache/pulsar/pull/7713#discussion_r598818323", "bodyText": "Perhaps spell out explicitly that this must be an instance of logging.Logger?", "author": "Bklyn", "createdAt": "2021-03-22T15:25:58Z", "path": "pulsar-client-cpp/python/pulsar/__init__.py", "diffHunk": "@@ -403,6 +405,8 @@ def __init__(self, service_url,\n           Configure whether the Pulsar client validates that the hostname of the\n           endpoint, matches the common name on the TLS certificate presented by\n           the endpoint.\n+        * `logger`:\n+          Set a Python logger for this Pulsar client.", "originalCommit": "f49f2816da31d391d40b9b140ccb0016f3c557aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQ1OTMwOQ==", "url": "https://github.com/apache/pulsar/pull/7713#discussion_r599459309", "bodyText": "Fixed", "author": "lbenc135", "createdAt": "2021-03-23T10:48:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODgxODMyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODgyMzYyOQ==", "url": "https://github.com/apache/pulsar/pull/7713#discussion_r598823629", "bodyText": "Initialize _logger from other._logger", "author": "Bklyn", "createdAt": "2021-03-22T15:30:10Z", "path": "pulsar-client-cpp/python/src/config.cc", "diffHunk": "@@ -88,6 +88,107 @@ static ProducerConfiguration& ProducerConfiguration_setCryptoKeyReader(ProducerC\n     return conf;\n }\n \n+class LoggerWrapper: public Logger {\n+    std::string _logger;\n+    PyObject* _pyLogger;\n+    int _currentPythonLogLevel = _getLogLevelValue(Logger::LEVEL_INFO);\n+\n+    void _updateCurrentPythonLogLevel() {\n+        PyGILState_STATE state = PyGILState_Ensure();\n+\n+        try {\n+            _currentPythonLogLevel = py::call_method<int>(_pyLogger, \"getEffectiveLevel\");\n+        } catch (py::error_already_set e) {\n+            PyErr_Print();\n+        }\n+\n+        PyGILState_Release(state);\n+    };\n+\n+    int _getLogLevelValue(Level level) {\n+        return 10 + (level * 10);\n+    }\n+\n+   public:\n+\n+    LoggerWrapper(const std::string &logger, PyObject* pyLogger) : _logger(logger) {\n+        _pyLogger = pyLogger;\n+        Py_XINCREF(_pyLogger);\n+\n+        _updateCurrentPythonLogLevel();\n+    }\n+\n+    LoggerWrapper(const LoggerWrapper& other) {", "originalCommit": "f49f2816da31d391d40b9b140ccb0016f3c557aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODgyNTE5NA==", "url": "https://github.com/apache/pulsar/pull/7713#discussion_r598825194", "bodyText": "As above, but is the _logger member even used?  Maybe you should drop it.", "author": "Bklyn", "createdAt": "2021-03-22T15:31:17Z", "path": "pulsar-client-cpp/python/src/config.cc", "diffHunk": "@@ -88,6 +88,107 @@ static ProducerConfiguration& ProducerConfiguration_setCryptoKeyReader(ProducerC\n     return conf;\n }\n \n+class LoggerWrapper: public Logger {\n+    std::string _logger;\n+    PyObject* _pyLogger;\n+    int _currentPythonLogLevel = _getLogLevelValue(Logger::LEVEL_INFO);\n+\n+    void _updateCurrentPythonLogLevel() {\n+        PyGILState_STATE state = PyGILState_Ensure();\n+\n+        try {\n+            _currentPythonLogLevel = py::call_method<int>(_pyLogger, \"getEffectiveLevel\");\n+        } catch (py::error_already_set e) {\n+            PyErr_Print();\n+        }\n+\n+        PyGILState_Release(state);\n+    };\n+\n+    int _getLogLevelValue(Level level) {\n+        return 10 + (level * 10);\n+    }\n+\n+   public:\n+\n+    LoggerWrapper(const std::string &logger, PyObject* pyLogger) : _logger(logger) {\n+        _pyLogger = pyLogger;\n+        Py_XINCREF(_pyLogger);\n+\n+        _updateCurrentPythonLogLevel();\n+    }\n+\n+    LoggerWrapper(const LoggerWrapper& other) {\n+        _pyLogger = other._pyLogger;\n+        Py_XINCREF(_pyLogger);\n+    }\n+\n+    LoggerWrapper& operator=(const LoggerWrapper& other) {", "originalCommit": "f49f2816da31d391d40b9b140ccb0016f3c557aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQ1OTU0NQ==", "url": "https://github.com/apache/pulsar/pull/7713#discussion_r599459545", "bodyText": "You were right, it was unused. Removed it.", "author": "lbenc135", "createdAt": "2021-03-23T10:49:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODgyNTE5NA=="}], "type": "inlineReview"}, {"oid": "7048f590f3e180ed2f5664921d6f335faf1afa38", "url": "https://github.com/apache/pulsar/commit/7048f590f3e180ed2f5664921d6f335faf1afa38", "message": "remove redundant code", "committedDate": "2021-03-23T10:04:36Z", "type": "forcePushed"}, {"oid": "fe775afc650f79cd3a96424be0589edba3666c38", "url": "https://github.com/apache/pulsar/commit/fe775afc650f79cd3a96424be0589edba3666c38", "message": "implement python logger wrapper", "committedDate": "2021-03-25T14:40:21Z", "type": "commit"}, {"oid": "838d6ae815b2117a0e28289e629f866fe3c6744d", "url": "https://github.com/apache/pulsar/commit/838d6ae815b2117a0e28289e629f866fe3c6744d", "message": "rerun tests", "committedDate": "2021-03-25T14:40:21Z", "type": "commit"}, {"oid": "ffe130bba8927454c67cc12480bfaabea7acb6bb", "url": "https://github.com/apache/pulsar/commit/ffe130bba8927454c67cc12480bfaabea7acb6bb", "message": "revert accidental merge change", "committedDate": "2021-03-25T14:40:21Z", "type": "commit"}, {"oid": "2aa9c0279b3703904291f96ee53284008509d27f", "url": "https://github.com/apache/pulsar/commit/2aa9c0279b3703904291f96ee53284008509d27f", "message": "extract log level equation to a function", "committedDate": "2021-03-25T14:40:21Z", "type": "commit"}, {"oid": "4cb86276d5e1792eb68b24a3897233f9291baab5", "url": "https://github.com/apache/pulsar/commit/4cb86276d5e1792eb68b24a3897233f9291baab5", "message": "add python logger test", "committedDate": "2021-03-25T14:40:21Z", "type": "commit"}, {"oid": "20852310c62d14d1b792b9740cf1b7a7676bf01f", "url": "https://github.com/apache/pulsar/commit/20852310c62d14d1b792b9740cf1b7a7676bf01f", "message": "try to fix the license error", "committedDate": "2021-03-25T14:40:21Z", "type": "commit"}, {"oid": "2dd8f746c85189296cb202d3f64339f6099584e9", "url": "https://github.com/apache/pulsar/commit/2dd8f746c85189296cb202d3f64339f6099584e9", "message": "update documentation", "committedDate": "2021-03-25T14:40:21Z", "type": "commit"}, {"oid": "e82dab9c0ac4a569ff80db60949ca0f49d3057ce", "url": "https://github.com/apache/pulsar/commit/e82dab9c0ac4a569ff80db60949ca0f49d3057ce", "message": "remove redundant code", "committedDate": "2021-03-25T14:40:21Z", "type": "commit"}, {"oid": "e82dab9c0ac4a569ff80db60949ca0f49d3057ce", "url": "https://github.com/apache/pulsar/commit/e82dab9c0ac4a569ff80db60949ca0f49d3057ce", "message": "remove redundant code", "committedDate": "2021-03-25T14:40:21Z", "type": "forcePushed"}, {"oid": "3da66f1b6d229ac42316c47d1b7ad8dba2fd4a0a", "url": "https://github.com/apache/pulsar/commit/3da66f1b6d229ac42316c47d1b7ad8dba2fd4a0a", "message": "Merge branch 'master' into feature/python_logger", "committedDate": "2021-05-19T06:34:00Z", "type": "commit"}]}