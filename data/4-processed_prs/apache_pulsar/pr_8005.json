{"pr_number": 8005, "pr_title": "[docs] Update Functions package content", "pr_createdAt": "2020-09-08T10:28:45Z", "pr_url": "https://github.com/apache/pulsar/pull/8005", "timeline": [{"oid": "22c2c48a8739a05275c522d0da5a74be4f054512", "url": "https://github.com/apache/pulsar/commit/22c2c48a8739a05275c522d0da5a74be4f054512", "message": "Re-org Functions package", "committedDate": "2020-09-08T09:46:53Z", "type": "commit"}, {"oid": "f6ac17416ead65fe0c714bf9dc689b5b407668ad", "url": "https://github.com/apache/pulsar/commit/f6ac17416ead65fe0c714bf9dc689b5b407668ad", "message": "fix format issues", "committedDate": "2020-09-08T10:24:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM1MTgxOA==", "url": "https://github.com/apache/pulsar/pull/8005#discussion_r485351818", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            > Currently, window function is not available in Python and Go.\n          \n          \n            \n            > Currently, the window function is unavailable in Python and Go.", "author": "Huanli-Meng", "createdAt": "2020-09-09T05:45:03Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -4,58 +4,24 @@ title: Package Pulsar Functions\n sidebar_label: \"How-to: Package\"\n ---\n \n-This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+You can package Pulsar functions in Java, Python, and Go. Packaging a window function in Java is the same as [packaging a function in Java](#java).\n \n-> **Tip**\n->\n-> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n->\n-> - Currently, the window function is not available in Python and Go.\n+> **Note**    \n+> Currently, window function is not available in Python and Go.", "originalCommit": "f6ac17416ead65fe0c714bf9dc689b5b407668ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM1MTk5OA==", "url": "https://github.com/apache/pulsar/pull/8005#discussion_r485351998", "bodyText": "a window function or the window function?", "author": "Huanli-Meng", "createdAt": "2020-09-09T05:45:33Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -4,58 +4,24 @@ title: Package Pulsar Functions\n sidebar_label: \"How-to: Package\"\n ---\n \n-This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+You can package Pulsar functions in Java, Python, and Go. Packaging a window function in Java is the same as [packaging a function in Java](#java).", "originalCommit": "f6ac17416ead65fe0c714bf9dc689b5b407668ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM1Mjc2OQ==", "url": "https://github.com/apache/pulsar/pull/8005#discussion_r485352769", "bodyText": "run pulsar cluster or run pulsar?", "author": "Huanli-Meng", "createdAt": "2020-09-09T05:48:05Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -4,58 +4,24 @@ title: Package Pulsar Functions\n sidebar_label: \"How-to: Package\"\n ---\n \n-This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+You can package Pulsar functions in Java, Python, and Go. Packaging a window function in Java is the same as [packaging a function in Java](#java).\n \n-> **Tip**\n->\n-> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n->\n-> - Currently, the window function is not available in Python and Go.\n+> **Note**    \n+> Currently, window function is not available in Python and Go.\n \n ## Prerequisite\n \n-Before running a Pulsar function, you need to start Pulsar.\n-\n-### Run a standalone Pulsar in Docker\n-\n-This example uses Docker to run a standalone Pulsar.\n-\n-```bash\n-docker run -it \\\n-    -p 6650:6650 \\\n-    -p 8080:8080 \\\n-    -v $PWD/data:/pulsar/data \\\n-    apachepulsar/pulsar:latest \\\n-    bin/pulsar standalone\n-```\n-\n-> **Tip**\n->\n-> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n->\n-> - To check whether the image starts, use the command `docker ps`.\n-\n-### Run Pulsar cluster in k8s\n-\n-For details about how to deploy a Pulsar cluster in the k8s environment, For details, see [here](helm-overview.md).\n+Before running a Pulsar function, you need to start Pulsar. You can [run a standalone Pulsar in Docker](getting-started-docker.md), or [run Pulsar cluster in Kubernetes](getting-started-helm.md).", "originalCommit": "f6ac17416ead65fe0c714bf9dc689b5b407668ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM1MzA4NA==", "url": "https://github.com/apache/pulsar/pull/8005#discussion_r485353084", "bodyText": "it should be Maven", "author": "Huanli-Meng", "createdAt": "2020-09-09T05:49:00Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -4,58 +4,24 @@ title: Package Pulsar Functions\n sidebar_label: \"How-to: Package\"\n ---\n \n-This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+You can package Pulsar functions in Java, Python, and Go. Packaging a window function in Java is the same as [packaging a function in Java](#java).\n \n-> **Tip**\n->\n-> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n->\n-> - Currently, the window function is not available in Python and Go.\n+> **Note**    \n+> Currently, window function is not available in Python and Go.\n \n ## Prerequisite\n \n-Before running a Pulsar function, you need to start Pulsar.\n-\n-### Run a standalone Pulsar in Docker\n-\n-This example uses Docker to run a standalone Pulsar.\n-\n-```bash\n-docker run -it \\\n-    -p 6650:6650 \\\n-    -p 8080:8080 \\\n-    -v $PWD/data:/pulsar/data \\\n-    apachepulsar/pulsar:latest \\\n-    bin/pulsar standalone\n-```\n-\n-> **Tip**\n->\n-> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n->\n-> - To check whether the image starts, use the command `docker ps`.\n-\n-### Run Pulsar cluster in k8s\n-\n-For details about how to deploy a Pulsar cluster in the k8s environment, For details, see [here](helm-overview.md).\n+Before running a Pulsar function, you need to start Pulsar. You can [run a standalone Pulsar in Docker](getting-started-docker.md), or [run Pulsar cluster in Kubernetes](getting-started-helm.md).\n \n+To check whether the Docker image starts, you can use the `docker ps` command.\n \n ## Java \n \n-This example demonstrates how to package a function in Java.\n-\n-> **Note**\n->\n-> This example assumes that you have [run a standalone Pulsar in Docker](#run-a-standalone-pulsar-in-docker) successfully.\n-\n+To package a function in Java, complete the following steps.\n \n-1. Create a new maven project with a pom file.\n+1. Create a new maven project with a pom file. In the following code sample, `mainClass` is your package name.", "originalCommit": "f6ac17416ead65fe0c714bf9dc689b5b407668ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUyMTQ2Ng==", "url": "https://github.com/apache/pulsar/pull/8005#discussion_r485521466", "bodyText": "@wolfstudy please confirm, thank you.", "author": "Jennifer88huang", "createdAt": "2020-09-09T10:56:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM1MzA4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM1MzQ1OQ==", "url": "https://github.com/apache/pulsar/pull/8005#discussion_r485353459", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 For the package imported, you can use one of the following interfaces:\n          \n          \n            \n                 For the imported package, you can use one of the following interfaces:", "author": "Huanli-Meng", "createdAt": "2020-09-09T05:50:09Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -127,49 +93,41 @@ This example demonstrates how to package a function in Java.\n         }\n     }\n     ```\n+ \n+     For the package imported, you can use one of the following interfaces:", "originalCommit": "f6ac17416ead65fe0c714bf9dc689b5b407668ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM1NDE5NA==", "url": "https://github.com/apache/pulsar/pull/8005#discussion_r485354194", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                After the Java function is packaged, a `target` directory is created automatically. Open the `target` directory to see if there is a jar package similar to `java-function-1.0-SNAPSHOT.jar`.\n          \n          \n            \n                After the Java function is packaged, a `target` directory is created automatically. Open the `target` directory to check if there is a JAR package similar to `java-function-1.0-SNAPSHOT.jar`.", "author": "Huanli-Meng", "createdAt": "2020-09-09T05:52:19Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -127,49 +93,41 @@ This example demonstrates how to package a function in Java.\n         }\n     }\n     ```\n+ \n+     For the package imported, you can use one of the following interfaces:\n+    - Function interface provided by Java 8: `java.util.function.Function`\n+    - Pulsar Function interface: `org.apache.pulsar.functions.api.Function`\n \n-    > **Tip**\n-    >\n-    > For the package imported, you can use one of the following interfaces:\n-    >\n-    > - Function interface provided by Java 8: `java.util.function.Function`\n-    >\n-    > - Pulsar Function interface: `org.apache.pulsar.functions.api.Function`\n-    >\n-    > The main difference between the two interfaces is that the `org.apache.pulsar.functions.api.Function` interface provides the context interface. When you write a function and want to interact with it, you can use context to obtain a wide variety of information and functionality for Pulsar Functions.\n-    > \n-    > **Example** \n-    >\n-    > This example uses `org.apache.pulsar.functions.api.Function` interface with context.\n-    >\n-    > ```\n-    > package org.example.functions;\n-    >\n-    > import org.apache.pulsar.functions.api.Context;\n-    > import org.apache.pulsar.functions.api.Function;\n-    > \n-    > import java.util.Arrays;\n-    >\n-    > public class WordCountFunction implements Function<String, Void> {\n-    >    // This function is invoked every time a message is published to the input topic\n-    >    @Override\n-    >    public Void process(String input, Context context) throws Exception {\n-    >       Arrays.asList(input.split(\" \")).forEach(word -> {\n-    >           String counterKey = word.toLowerCase();\n-    >           context.incrCounter(counterKey, 1);\n-    >        });\n-    >       return null;\n-    >   }\n-    > }\n-    > ```\n+    The main difference between the two interfaces is that the `org.apache.pulsar.functions.api.Function` interface provides the context interface. When you write a function and want to interact with it, you can use context to obtain a wide variety of information and functionality for Pulsar Functions.\n+\n+    The following example uses `org.apache.pulsar.functions.api.Function` interface with context.\n+\n+    ```\n+    package org.example.functions;\n+    import org.apache.pulsar.functions.api.Context;\n+    import org.apache.pulsar.functions.api.Function;\n+    \n+    import java.util.Arrays;\n+    public class WordCountFunction implements Function<String, Void> {\n+       // This function is invoked every time a message is published to the input topic\n+        @Override\n+        public Void process(String input, Context context) throws Exception {\n+           Arrays.asList(input.split(\" \")).forEach(word -> {\n+               String counterKey = word.toLowerCase();\n+               context.incrCounter(counterKey, 1);\n+            });\n+           return null;\n+       }\n+     }\n+     ```\n \n 3. Package the Java function.\n \n     ```bash\n     mvn package\n     ```\n \n-    After the Java function is packaged, a `target` directory is automatically created. Open the `target` directory to see if there is a jar package similar to `java-function-1.0-SNAPSHOT.jar`.\n+    After the Java function is packaged, a `target` directory is created automatically. Open the `target` directory to see if there is a jar package similar to `java-function-1.0-SNAPSHOT.jar`.", "originalCommit": "f6ac17416ead65fe0c714bf9dc689b5b407668ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM1NDgzNA==", "url": "https://github.com/apache/pulsar/pull/8005#discussion_r485354834", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To package a function with **ZIP file** in Python, complete the following steps.\n          \n          \n            \n            To package a function with the **ZIP file** in Python, complete the following steps.", "author": "Huanli-Meng", "createdAt": "2020-09-09T05:54:06Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -289,45 +233,31 @@ This example demonstrates how to package a function by **one python file** in Py\n     ...\n     ```\n \n-    > **Tip**\n-    >\n-    > - For the description about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` or see [here](reference-pulsar-admin.md#functions).\n-    > \n-    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Python function starts successfully.\n-    >\n-    >   ```text\n-    >   \"Created successfully\"\n-    >   ```\n-\n ### ZIP file\n \n-This example demonstrates how to package a function by **ZIP file** in Python.\n+To package a function with **ZIP file** in Python, complete the following steps.", "originalCommit": "f6ac17416ead65fe0c714bf9dc689b5b407668ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM1NjE1OA==", "url": "https://github.com/apache/pulsar/pull/8005#discussion_r485356158", "bodyText": "I think this sentence needs to be refined:\nwhether the parameter list and returned value list implemented are correct.\nThe parameter list and returned value list specified must be one of the following sample functions:", "author": "Huanli-Meng", "createdAt": "2020-09-09T05:58:05Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -449,34 +360,30 @@ This example demonstrates how to package a function in Go.\n     }\n     ```\n \n-    > **Tip**\n-    > \n-    > You can use context to connect with the Go function.\n-    >\n-    > ```\n-    > if fc, ok := pf.FromContext(ctx); ok {\n-    >    fmt.Printf(\"function ID is:%s, \", fc.GetFuncID())\n-    >    fmt.Printf(\"function version is:%s\\n\", fc.GetFuncVersion())\n-    > }\n-    > ```\n-\n-    > **Note**\n-    >\n-    > - In `main()`, you **only** need to register the function name to `Start()`. **Only** one function name can be received in `Start()`. \n-    >\n-    > - Go function uses Go reflection based on the received function name to verify whether the parameter list and returned value list implemented are correct. The parameter list and returned value list specified **must be** one of the following sample functions:\n-    >\n-    >   ```\n-    >   func ()\n-    >   func () error\n-    >   func (input) error\n-    >   func () (output, error)\n-    >   func (input) (output, error)\n-    >   func (context.Context) error\n-    >   func (context.Context, input) error\n-    >   func (context.Context) (output, error)\n-    >   func (context.Context, input) (output, error)\n-    >   ```\n+    You can use context to connect to the Go function.\n+    \n+    ```\n+    if fc, ok := pf.FromContext(ctx); ok {\n+        fmt.Printf(\"function ID is:%s, \", fc.GetFuncID())\n+        fmt.Printf(\"function version is:%s\\n\", fc.GetFuncVersion())\n+     }\n+     ```\n+\n+    When writing a Go function, remember that\n+    - In `main()`, you **only** need to register the function name to `Start()`. **Only** one function name is received in `Start()`. \n+    - Go function uses Go reflection based on the received function name to verify whether the parameter list and returned value list implemented are correct. The parameter list and returned value list specified **must be** one of the following sample functions:", "originalCommit": "f6ac17416ead65fe0c714bf9dc689b5b407668ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUyNTA4NQ==", "url": "https://github.com/apache/pulsar/pull/8005#discussion_r485525085", "bodyText": "nice catch, we can refine it, thanks for your reminder.", "author": "Jennifer88huang", "createdAt": "2020-09-09T11:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM1NjE1OA=="}], "type": "inlineReview"}, {"oid": "0619413eb6c8887726d9ddc826574167c5b73c1b", "url": "https://github.com/apache/pulsar/commit/0619413eb6c8887726d9ddc826574167c5b73c1b", "message": "update as per comments", "committedDate": "2020-09-09T11:52:44Z", "type": "commit"}]}