{"pr_number": 7741, "pr_title": "[Issue 5520][Function Doc] Add window function context docs for repo", "pr_createdAt": "2020-08-04T09:28:02Z", "pr_url": "https://github.com/apache/pulsar/pull/7741", "timeline": [{"oid": "7edb777202decd7a3fa8612059ca836428662025", "url": "https://github.com/apache/pulsar/commit/7edb777202decd7a3fa8612059ca836428662025", "message": "Add window function context docs for repo\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>", "committedDate": "2020-08-04T09:26:06Z", "type": "commit"}, {"oid": "e46b89cca262262346796ab5bc3e95d33c088a30", "url": "https://github.com/apache/pulsar/commit/e46b89cca262262346796ab5bc3e95d33c088a30", "message": "add sidebar for window function context\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>", "committedDate": "2020-08-04T09:29:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1ODg3Ng==", "url": "https://github.com/apache/pulsar/pull/7741#discussion_r464958876", "bodyText": "Delete lines 48-49 & 63. When support and examples in other languages are available, we'll have them back.", "author": "sijia-w", "createdAt": "2020-08-04T10:38:15Z", "path": "site2/docs/window-functions-context.md", "diffHunk": "@@ -0,0 +1,593 @@\n+---\n+id: window-functions-context\n+title: Window Functions Context\n+sidebar_label: \"Window Functions: Context\"\n+---\n+\n+Java SDK provides access to a **window context object** that can be used by a window function. This context object provides a wide variety of information and functionality for Pulsar window functions as below.\n+\n+- [Spec](#spec)\n+\n+  * Names of all input topics and the output topic associated with the function.\n+  * Tenant and namespace associated with the function.\n+  * Pulsar window function name, ID, and version.\n+  * ID of the Pulsar function instance running the window function.\n+  * Number of instances that invoke the window function.\n+  * Built-in type or custom class name of the output schema.\n+  \n+- [Logger](#logger)\n+  \n+  * Logger object used by the window function, which can be used to create window function log messages.\n+\n+- [User config](#user-config)\n+  \n+  * Access to arbitrary user configuration values.\n+\n+- [Routing](#routing)\n+  \n+  * Function to publish new messages to arbitrary topics.\n+\n+- [Metrics](#metrics)\n+  \n+  * Interface for recording metrics.\n+\n+- [State storage](#state-storage)\n+  \n+  * Interface for storing and retrieving state in [state storage](#state-storage).\n+\n+## Spec\n+\n+Spec contains the basic information of a function.\n+\n+### Get input topics\n+\n+`getInputTopics` method gets the **name list** of all input topics.\n+\n+This example demonstrates how to get the name list of all input topics in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->", "originalCommit": "e46b89cca262262346796ab5bc3e95d33c088a30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk3NjczMA==", "url": "https://github.com/apache/pulsar/pull/7741#discussion_r464976730", "bodyText": "Same here. Lines 71-71 & 85.", "author": "sijia-w", "createdAt": "2020-08-04T11:16:31Z", "path": "site2/docs/window-functions-context.md", "diffHunk": "@@ -0,0 +1,593 @@\n+---\n+id: window-functions-context\n+title: Window Functions Context\n+sidebar_label: \"Window Functions: Context\"\n+---\n+\n+Java SDK provides access to a **window context object** that can be used by a window function. This context object provides a wide variety of information and functionality for Pulsar window functions as below.\n+\n+- [Spec](#spec)\n+\n+  * Names of all input topics and the output topic associated with the function.\n+  * Tenant and namespace associated with the function.\n+  * Pulsar window function name, ID, and version.\n+  * ID of the Pulsar function instance running the window function.\n+  * Number of instances that invoke the window function.\n+  * Built-in type or custom class name of the output schema.\n+  \n+- [Logger](#logger)\n+  \n+  * Logger object used by the window function, which can be used to create window function log messages.\n+\n+- [User config](#user-config)\n+  \n+  * Access to arbitrary user configuration values.\n+\n+- [Routing](#routing)\n+  \n+  * Function to publish new messages to arbitrary topics.\n+\n+- [Metrics](#metrics)\n+  \n+  * Interface for recording metrics.\n+\n+- [State storage](#state-storage)\n+  \n+  * Interface for storing and retrieving state in [state storage](#state-storage).\n+\n+## Spec\n+\n+Spec contains the basic information of a function.\n+\n+### Get input topics\n+\n+`getInputTopics` method gets the **name list** of all input topics.\n+\n+This example demonstrates how to get the name list of all input topics in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetInputTopicsWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        Collection<String> inputTopics = context.getInputTopics();\n+        System.out.println(inputTopics);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get output topic\n+\n+`getOutputTopic` method gets the **name of a topic** to which the message is sent.\n+\n+This example demonstrates how to get the name of an output topic in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->", "originalCommit": "e46b89cca262262346796ab5bc3e95d33c088a30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk3NzE1Mw==", "url": "https://github.com/apache/pulsar/pull/7741#discussion_r464977153", "bodyText": "Same here.", "author": "sijia-w", "createdAt": "2020-08-04T11:17:20Z", "path": "site2/docs/window-functions-context.md", "diffHunk": "@@ -0,0 +1,593 @@\n+---\n+id: window-functions-context\n+title: Window Functions Context\n+sidebar_label: \"Window Functions: Context\"\n+---\n+\n+Java SDK provides access to a **window context object** that can be used by a window function. This context object provides a wide variety of information and functionality for Pulsar window functions as below.\n+\n+- [Spec](#spec)\n+\n+  * Names of all input topics and the output topic associated with the function.\n+  * Tenant and namespace associated with the function.\n+  * Pulsar window function name, ID, and version.\n+  * ID of the Pulsar function instance running the window function.\n+  * Number of instances that invoke the window function.\n+  * Built-in type or custom class name of the output schema.\n+  \n+- [Logger](#logger)\n+  \n+  * Logger object used by the window function, which can be used to create window function log messages.\n+\n+- [User config](#user-config)\n+  \n+  * Access to arbitrary user configuration values.\n+\n+- [Routing](#routing)\n+  \n+  * Function to publish new messages to arbitrary topics.\n+\n+- [Metrics](#metrics)\n+  \n+  * Interface for recording metrics.\n+\n+- [State storage](#state-storage)\n+  \n+  * Interface for storing and retrieving state in [state storage](#state-storage).\n+\n+## Spec\n+\n+Spec contains the basic information of a function.\n+\n+### Get input topics\n+\n+`getInputTopics` method gets the **name list** of all input topics.\n+\n+This example demonstrates how to get the name list of all input topics in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetInputTopicsWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        Collection<String> inputTopics = context.getInputTopics();\n+        System.out.println(inputTopics);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get output topic\n+\n+`getOutputTopic` method gets the **name of a topic** to which the message is sent.\n+\n+This example demonstrates how to get the name of an output topic in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetOutputTopicWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String outputTopic = context.getOutputTopic();\n+        System.out.println(outputTopic);\n+\n+        return null;\n+    }\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get tenant\n+\n+`getTenant` method gets the tenant name associated with the window function.\n+\n+This example demonstrates how to get the tenant name in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->", "originalCommit": "e46b89cca262262346796ab5bc3e95d33c088a30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk3NzgyNQ==", "url": "https://github.com/apache/pulsar/pull/7741#discussion_r464977825", "bodyText": "Same here.", "author": "sijia-w", "createdAt": "2020-08-04T11:18:48Z", "path": "site2/docs/window-functions-context.md", "diffHunk": "@@ -0,0 +1,593 @@\n+---\n+id: window-functions-context\n+title: Window Functions Context\n+sidebar_label: \"Window Functions: Context\"\n+---\n+\n+Java SDK provides access to a **window context object** that can be used by a window function. This context object provides a wide variety of information and functionality for Pulsar window functions as below.\n+\n+- [Spec](#spec)\n+\n+  * Names of all input topics and the output topic associated with the function.\n+  * Tenant and namespace associated with the function.\n+  * Pulsar window function name, ID, and version.\n+  * ID of the Pulsar function instance running the window function.\n+  * Number of instances that invoke the window function.\n+  * Built-in type or custom class name of the output schema.\n+  \n+- [Logger](#logger)\n+  \n+  * Logger object used by the window function, which can be used to create window function log messages.\n+\n+- [User config](#user-config)\n+  \n+  * Access to arbitrary user configuration values.\n+\n+- [Routing](#routing)\n+  \n+  * Function to publish new messages to arbitrary topics.\n+\n+- [Metrics](#metrics)\n+  \n+  * Interface for recording metrics.\n+\n+- [State storage](#state-storage)\n+  \n+  * Interface for storing and retrieving state in [state storage](#state-storage).\n+\n+## Spec\n+\n+Spec contains the basic information of a function.\n+\n+### Get input topics\n+\n+`getInputTopics` method gets the **name list** of all input topics.\n+\n+This example demonstrates how to get the name list of all input topics in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetInputTopicsWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        Collection<String> inputTopics = context.getInputTopics();\n+        System.out.println(inputTopics);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get output topic\n+\n+`getOutputTopic` method gets the **name of a topic** to which the message is sent.\n+\n+This example demonstrates how to get the name of an output topic in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetOutputTopicWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String outputTopic = context.getOutputTopic();\n+        System.out.println(outputTopic);\n+\n+        return null;\n+    }\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get tenant\n+\n+`getTenant` method gets the tenant name associated with the window function.\n+\n+This example demonstrates how to get the tenant name in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetTenantWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String tenant = context.getTenant();\n+        System.out.println(tenant);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get namespace\n+\n+`getNamespace` method gets the namespace associated with the window function.\n+\n+This example demonstrates how to get the namespace in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->", "originalCommit": "e46b89cca262262346796ab5bc3e95d33c088a30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk3OTgxMA==", "url": "https://github.com/apache/pulsar/pull/7741#discussion_r464979810", "bodyText": "Maybe we can add a \"The\" at the beginning of this sentence. If you think this is better, then you can change all in this file.", "author": "sijia-w", "createdAt": "2020-08-04T11:22:50Z", "path": "site2/docs/window-functions-context.md", "diffHunk": "@@ -0,0 +1,593 @@\n+---\n+id: window-functions-context\n+title: Window Functions Context\n+sidebar_label: \"Window Functions: Context\"\n+---\n+\n+Java SDK provides access to a **window context object** that can be used by a window function. This context object provides a wide variety of information and functionality for Pulsar window functions as below.\n+\n+- [Spec](#spec)\n+\n+  * Names of all input topics and the output topic associated with the function.\n+  * Tenant and namespace associated with the function.\n+  * Pulsar window function name, ID, and version.\n+  * ID of the Pulsar function instance running the window function.\n+  * Number of instances that invoke the window function.\n+  * Built-in type or custom class name of the output schema.\n+  \n+- [Logger](#logger)\n+  \n+  * Logger object used by the window function, which can be used to create window function log messages.\n+\n+- [User config](#user-config)\n+  \n+  * Access to arbitrary user configuration values.\n+\n+- [Routing](#routing)\n+  \n+  * Function to publish new messages to arbitrary topics.\n+\n+- [Metrics](#metrics)\n+  \n+  * Interface for recording metrics.\n+\n+- [State storage](#state-storage)\n+  \n+  * Interface for storing and retrieving state in [state storage](#state-storage).\n+\n+## Spec\n+\n+Spec contains the basic information of a function.\n+\n+### Get input topics\n+\n+`getInputTopics` method gets the **name list** of all input topics.\n+\n+This example demonstrates how to get the name list of all input topics in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetInputTopicsWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        Collection<String> inputTopics = context.getInputTopics();\n+        System.out.println(inputTopics);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get output topic\n+\n+`getOutputTopic` method gets the **name of a topic** to which the message is sent.", "originalCommit": "e46b89cca262262346796ab5bc3e95d33c088a30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA0OTg1Mg==", "url": "https://github.com/apache/pulsar/pull/7741#discussion_r465049852", "bodyText": "OK will add it.", "author": "wolfstudy", "createdAt": "2020-08-04T13:28:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk3OTgxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4OTMxMg==", "url": "https://github.com/apache/pulsar/pull/7741#discussion_r464989312", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When you run or update Pulsar Functions created using SDK, you can pass arbitrary key/values to them with the `--user-config` flag. Key/values **must** be specified as JSON. \n          \n          \n            \n            When you run or update Pulsar Functions that are created using SDK, you can pass arbitrary key/value pairs to them with the `--user-config` flag. Key/value pairs **must** be specified as JSON.", "author": "sijia-w", "createdAt": "2020-08-04T11:42:36Z", "path": "site2/docs/window-functions-context.md", "diffHunk": "@@ -0,0 +1,593 @@\n+---\n+id: window-functions-context\n+title: Window Functions Context\n+sidebar_label: \"Window Functions: Context\"\n+---\n+\n+Java SDK provides access to a **window context object** that can be used by a window function. This context object provides a wide variety of information and functionality for Pulsar window functions as below.\n+\n+- [Spec](#spec)\n+\n+  * Names of all input topics and the output topic associated with the function.\n+  * Tenant and namespace associated with the function.\n+  * Pulsar window function name, ID, and version.\n+  * ID of the Pulsar function instance running the window function.\n+  * Number of instances that invoke the window function.\n+  * Built-in type or custom class name of the output schema.\n+  \n+- [Logger](#logger)\n+  \n+  * Logger object used by the window function, which can be used to create window function log messages.\n+\n+- [User config](#user-config)\n+  \n+  * Access to arbitrary user configuration values.\n+\n+- [Routing](#routing)\n+  \n+  * Function to publish new messages to arbitrary topics.\n+\n+- [Metrics](#metrics)\n+  \n+  * Interface for recording metrics.\n+\n+- [State storage](#state-storage)\n+  \n+  * Interface for storing and retrieving state in [state storage](#state-storage).\n+\n+## Spec\n+\n+Spec contains the basic information of a function.\n+\n+### Get input topics\n+\n+`getInputTopics` method gets the **name list** of all input topics.\n+\n+This example demonstrates how to get the name list of all input topics in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetInputTopicsWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        Collection<String> inputTopics = context.getInputTopics();\n+        System.out.println(inputTopics);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get output topic\n+\n+`getOutputTopic` method gets the **name of a topic** to which the message is sent.\n+\n+This example demonstrates how to get the name of an output topic in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetOutputTopicWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String outputTopic = context.getOutputTopic();\n+        System.out.println(outputTopic);\n+\n+        return null;\n+    }\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get tenant\n+\n+`getTenant` method gets the tenant name associated with the window function.\n+\n+This example demonstrates how to get the tenant name in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetTenantWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String tenant = context.getTenant();\n+        System.out.println(tenant);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get namespace\n+\n+`getNamespace` method gets the namespace associated with the window function.\n+\n+This example demonstrates how to get the namespace in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetNamespaceWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String ns = context.getNamespace();\n+        System.out.println(ns);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get function name\n+\n+`getFunctionName` method gets the window function name.\n+\n+This example demonstrates how to get the function name in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetNameOfWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionName = context.getFunctionName();\n+        System.out.println(functionName);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get function ID\n+\n+`getFunctionId` method gets the window function ID.\n+\n+This example demonstrates how to get the function ID in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetFunctionIDWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionID = context.getFunctionId();\n+        System.out.println(functionID);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get function version\n+\n+`getFunctionVersion` method gets the window function version.\n+\n+This example demonstrates how to get the function version of a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetVersionOfWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionVersion = context.getFunctionVersion();\n+        System.out.println(functionVersion);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get instance ID\n+\n+`getInstanceId` method gets the instance ID of a window function.\n+\n+This example demonstrates how to get the instance ID in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetInstanceIDWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        int instanceId = context.getInstanceId();\n+        System.out.println(instanceId);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get num instances\n+\n+`getNumInstances` method gets the number of instances that invoke the window function.\n+\n+This example demonstrates how to get the number of instances in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetNumInstancesWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        int numInstances = context.getNumInstances();\n+        System.out.println(numInstances);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get output schema type\n+\n+`getOutputSchemaType` method gets the built-in type or custom class name of the output schema.\n+\n+This example demonstrates how to get the output schema type of a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetOutputSchemaTypeWindowFunction implements WindowFunction<String, Void> {\n+\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String schemaType = context.getOutputSchemaType();\n+        System.out.println(schemaType);\n+\n+        return null;\n+    }\n+}\n+```\n+\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+## Logger\n+\n+Pulsar window functions using Java SDK has access to an [SLF4j](https://www.slf4j.org/) [`Logger`](https://www.slf4j.org/api/org/apache/log4j/Logger.html) object that can be used to produce logs at the chosen log level.\n+\n+This example logs either a `WARNING`-level or `INFO`-level log based on whether the incoming string contains the word `danger` or not in a Java function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+import java.util.Collection;\n+import org.apache.pulsar.functions.api.Record;\n+import org.apache.pulsar.functions.api.WindowContext;\n+import org.apache.pulsar.functions.api.WindowFunction;\n+import org.slf4j.Logger;\n+\n+public class LoggingWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        Logger log = context.getLogger();\n+        for (Record<String> record : inputs) {\n+            log.info(record + \"-window-log\");\n+        }\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+If you need your function to produce logs, specify a log topic when creating or running the function. \n+\n+```bash\n+bin/pulsar-admin functions create \\\n+  --jar my-functions.jar \\\n+  --classname my.package.LoggingFunction \\\n+  --log-topic persistent://public/default/logging-function-logs \\\n+  # Other function configs\n+```\n+\n+You can access all logs produced by `LoggingFunction` via the `persistent://public/default/logging-function-logs` topic.\n+\n+## Metrics\n+\n+Pulsar window functions can publish arbitrary metrics to the metrics interface which can be queried. \n+\n+> **Note**\n+>\n+> If a Pulsar window function uses the language-native interface for Java, that function is not able to publish metrics and stats to Pulsar.\n+\n+You can record metrics using the context object on a per-key basis. \n+\n+This example sets a metric for the `process-count` key and a different metric for the `elevens-count` key every time the function processes a message in a Java function. \n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+import java.util.Collection;\n+import org.apache.pulsar.functions.api.Record;\n+import org.apache.pulsar.functions.api.WindowContext;\n+import org.apache.pulsar.functions.api.WindowFunction;\n+\n+\n+/**\n+ * Example function that wants to keep track of\n+ * the event time of each message sent.\n+ */\n+public class UserMetricWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+\n+        for (Record<String> record : inputs) {\n+            if (record.getEventTime().isPresent()) {\n+                context.recordMetric(\"MessageEventTime\", record.getEventTime().get().doubleValue());\n+            }\n+        }\n+\n+        return null;\n+    }\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+## User config\n+\n+When you run or update Pulsar Functions created using SDK, you can pass arbitrary key/values to them with the `--user-config` flag. Key/values **must** be specified as JSON. ", "originalCommit": "e46b89cca262262346796ab5bc3e95d33c088a30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk5MTQ5NA==", "url": "https://github.com/apache/pulsar/pull/7741#discussion_r464991494", "bodyText": "Seems one sentence in two lines here.", "author": "sijia-w", "createdAt": "2020-08-04T11:47:11Z", "path": "site2/docs/window-functions-context.md", "diffHunk": "@@ -0,0 +1,593 @@\n+---\n+id: window-functions-context\n+title: Window Functions Context\n+sidebar_label: \"Window Functions: Context\"\n+---\n+\n+Java SDK provides access to a **window context object** that can be used by a window function. This context object provides a wide variety of information and functionality for Pulsar window functions as below.\n+\n+- [Spec](#spec)\n+\n+  * Names of all input topics and the output topic associated with the function.\n+  * Tenant and namespace associated with the function.\n+  * Pulsar window function name, ID, and version.\n+  * ID of the Pulsar function instance running the window function.\n+  * Number of instances that invoke the window function.\n+  * Built-in type or custom class name of the output schema.\n+  \n+- [Logger](#logger)\n+  \n+  * Logger object used by the window function, which can be used to create window function log messages.\n+\n+- [User config](#user-config)\n+  \n+  * Access to arbitrary user configuration values.\n+\n+- [Routing](#routing)\n+  \n+  * Function to publish new messages to arbitrary topics.\n+\n+- [Metrics](#metrics)\n+  \n+  * Interface for recording metrics.\n+\n+- [State storage](#state-storage)\n+  \n+  * Interface for storing and retrieving state in [state storage](#state-storage).\n+\n+## Spec\n+\n+Spec contains the basic information of a function.\n+\n+### Get input topics\n+\n+`getInputTopics` method gets the **name list** of all input topics.\n+\n+This example demonstrates how to get the name list of all input topics in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetInputTopicsWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        Collection<String> inputTopics = context.getInputTopics();\n+        System.out.println(inputTopics);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get output topic\n+\n+`getOutputTopic` method gets the **name of a topic** to which the message is sent.\n+\n+This example demonstrates how to get the name of an output topic in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetOutputTopicWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String outputTopic = context.getOutputTopic();\n+        System.out.println(outputTopic);\n+\n+        return null;\n+    }\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get tenant\n+\n+`getTenant` method gets the tenant name associated with the window function.\n+\n+This example demonstrates how to get the tenant name in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetTenantWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String tenant = context.getTenant();\n+        System.out.println(tenant);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get namespace\n+\n+`getNamespace` method gets the namespace associated with the window function.\n+\n+This example demonstrates how to get the namespace in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetNamespaceWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String ns = context.getNamespace();\n+        System.out.println(ns);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get function name\n+\n+`getFunctionName` method gets the window function name.\n+\n+This example demonstrates how to get the function name in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetNameOfWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionName = context.getFunctionName();\n+        System.out.println(functionName);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get function ID\n+\n+`getFunctionId` method gets the window function ID.\n+\n+This example demonstrates how to get the function ID in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetFunctionIDWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionID = context.getFunctionId();\n+        System.out.println(functionID);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get function version\n+\n+`getFunctionVersion` method gets the window function version.\n+\n+This example demonstrates how to get the function version of a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetVersionOfWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionVersion = context.getFunctionVersion();\n+        System.out.println(functionVersion);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get instance ID\n+\n+`getInstanceId` method gets the instance ID of a window function.\n+\n+This example demonstrates how to get the instance ID in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetInstanceIDWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        int instanceId = context.getInstanceId();\n+        System.out.println(instanceId);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get num instances\n+\n+`getNumInstances` method gets the number of instances that invoke the window function.\n+\n+This example demonstrates how to get the number of instances in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetNumInstancesWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        int numInstances = context.getNumInstances();\n+        System.out.println(numInstances);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get output schema type\n+\n+`getOutputSchemaType` method gets the built-in type or custom class name of the output schema.\n+\n+This example demonstrates how to get the output schema type of a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetOutputSchemaTypeWindowFunction implements WindowFunction<String, Void> {\n+\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String schemaType = context.getOutputSchemaType();\n+        System.out.println(schemaType);\n+\n+        return null;\n+    }\n+}\n+```\n+\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+## Logger\n+\n+Pulsar window functions using Java SDK has access to an [SLF4j](https://www.slf4j.org/) [`Logger`](https://www.slf4j.org/api/org/apache/log4j/Logger.html) object that can be used to produce logs at the chosen log level.\n+\n+This example logs either a `WARNING`-level or `INFO`-level log based on whether the incoming string contains the word `danger` or not in a Java function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+import java.util.Collection;\n+import org.apache.pulsar.functions.api.Record;\n+import org.apache.pulsar.functions.api.WindowContext;\n+import org.apache.pulsar.functions.api.WindowFunction;\n+import org.slf4j.Logger;\n+\n+public class LoggingWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        Logger log = context.getLogger();\n+        for (Record<String> record : inputs) {\n+            log.info(record + \"-window-log\");\n+        }\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+If you need your function to produce logs, specify a log topic when creating or running the function. \n+\n+```bash\n+bin/pulsar-admin functions create \\\n+  --jar my-functions.jar \\\n+  --classname my.package.LoggingFunction \\\n+  --log-topic persistent://public/default/logging-function-logs \\\n+  # Other function configs\n+```\n+\n+You can access all logs produced by `LoggingFunction` via the `persistent://public/default/logging-function-logs` topic.\n+\n+## Metrics\n+\n+Pulsar window functions can publish arbitrary metrics to the metrics interface which can be queried. \n+\n+> **Note**\n+>\n+> If a Pulsar window function uses the language-native interface for Java, that function is not able to publish metrics and stats to Pulsar.\n+\n+You can record metrics using the context object on a per-key basis. \n+\n+This example sets a metric for the `process-count` key and a different metric for the `elevens-count` key every time the function processes a message in a Java function. \n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+import java.util.Collection;\n+import org.apache.pulsar.functions.api.Record;\n+import org.apache.pulsar.functions.api.WindowContext;\n+import org.apache.pulsar.functions.api.WindowFunction;\n+\n+\n+/**\n+ * Example function that wants to keep track of\n+ * the event time of each message sent.\n+ */\n+public class UserMetricWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+\n+        for (Record<String> record : inputs) {\n+            if (record.getEventTime().isPresent()) {\n+                context.recordMetric(\"MessageEventTime\", record.getEventTime().get().doubleValue());\n+            }\n+        }\n+\n+        return null;\n+    }\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+## User config\n+\n+When you run or update Pulsar Functions created using SDK, you can pass arbitrary key/values to them with the `--user-config` flag. Key/values **must** be specified as JSON. \n+\n+This example passes a user configured key/value to a function.\n+\n+```bash\n+bin/pulsar-admin functions create \\\n+  --name word-filter \\\n+ --user-config '{\"forbidden-word\":\"rosebud\"}' \\\n+  # Other function configs\n+```\n+\n+### API\n+You can use the following APIs to get user-defined information for window functions.\n+#### getUserConfigMap\n+\n+`getUserConfigMap` API gets a map of all user-defined key/value configurations for the window function.\n+\n+\n+```java\n+/**\n+     * Get a map of all user-defined key/value configs for the function.\n+     *\n+     * @return The full map of user-defined config values\n+     */\n+    Map<String, Object> getUserConfigMap();\n+```\n+\n+\n+#### getUserConfigValue\n+\n+`getUserConfigValue` API gets a user-defined key/value.\n+\n+```java\n+/**\n+     * Get any user-defined key/value.\n+     *\n+     * @param key The key\n+     * @return The Optional value specified by the user for that key.\n+     */\n+    Optional<Object> getUserConfigValue(String key);\n+```\n+\n+#### getUserConfigValueOrDefault\n+\n+`getUserConfigValueOrDefault` API gets a user-defined key/value or a default value if none is present.\n+\n+```java\n+/**\n+     * Get any user-defined key/value or a default value if none is present.\n+     *\n+     * @param key\n+     * @param defaultValue\n+     * @return Either the user config value associated with a given key or a supplied default value\n+     */\n+    Object getUserConfigValueOrDefault(String key, Object defaultValue);\n+```\n+\n+### Example\n+\n+This example demonstrates how to access key/value pairs provided to Pulsar window functions.\n+\n+Java SDK context object enables you to access key/value pairs provided to Pulsar window functions via the command line (as JSON). \n+\n+>**Tip**\n+>\n+> For all key/value pairs passed to Java window functions, both the `key` and the `value` are `String`. To set the value to be a different type, you need to deserialize it from the `String` type.\n+\n+This example passes a key/value pair in a Java window function.\n+\n+```bash\n+bin/pulsar-admin functions create \\\n+   --user-config '{\"word-of-the-day\":\"verdure\"}' \\\n+  # Other function configs\n+ ```\n+\n+This example accesses values in a Java window function.\n+\n+`UserConfigFunction` function logs the string `\"The word of the day is verdure\"` every time the function is invoked (which means every time a message arrives). The user config of `word-of-the-day` is changed **only** when the function is updated with a new config value via \n+multiple ways, such as the command line tool or REST API.", "originalCommit": "e46b89cca262262346796ab5bc3e95d33c088a30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk5MTk1OA==", "url": "https://github.com/apache/pulsar/pull/7741#discussion_r464991958", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When you want to publish as many results as you want, you can use the `context.publish()` interface.\n          \n          \n            \n            You can use the `context.publish()` interface to publish as many results as you want.", "author": "sijia-w", "createdAt": "2020-08-04T11:48:11Z", "path": "site2/docs/window-functions-context.md", "diffHunk": "@@ -0,0 +1,593 @@\n+---\n+id: window-functions-context\n+title: Window Functions Context\n+sidebar_label: \"Window Functions: Context\"\n+---\n+\n+Java SDK provides access to a **window context object** that can be used by a window function. This context object provides a wide variety of information and functionality for Pulsar window functions as below.\n+\n+- [Spec](#spec)\n+\n+  * Names of all input topics and the output topic associated with the function.\n+  * Tenant and namespace associated with the function.\n+  * Pulsar window function name, ID, and version.\n+  * ID of the Pulsar function instance running the window function.\n+  * Number of instances that invoke the window function.\n+  * Built-in type or custom class name of the output schema.\n+  \n+- [Logger](#logger)\n+  \n+  * Logger object used by the window function, which can be used to create window function log messages.\n+\n+- [User config](#user-config)\n+  \n+  * Access to arbitrary user configuration values.\n+\n+- [Routing](#routing)\n+  \n+  * Function to publish new messages to arbitrary topics.\n+\n+- [Metrics](#metrics)\n+  \n+  * Interface for recording metrics.\n+\n+- [State storage](#state-storage)\n+  \n+  * Interface for storing and retrieving state in [state storage](#state-storage).\n+\n+## Spec\n+\n+Spec contains the basic information of a function.\n+\n+### Get input topics\n+\n+`getInputTopics` method gets the **name list** of all input topics.\n+\n+This example demonstrates how to get the name list of all input topics in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetInputTopicsWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        Collection<String> inputTopics = context.getInputTopics();\n+        System.out.println(inputTopics);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get output topic\n+\n+`getOutputTopic` method gets the **name of a topic** to which the message is sent.\n+\n+This example demonstrates how to get the name of an output topic in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetOutputTopicWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String outputTopic = context.getOutputTopic();\n+        System.out.println(outputTopic);\n+\n+        return null;\n+    }\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get tenant\n+\n+`getTenant` method gets the tenant name associated with the window function.\n+\n+This example demonstrates how to get the tenant name in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetTenantWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String tenant = context.getTenant();\n+        System.out.println(tenant);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get namespace\n+\n+`getNamespace` method gets the namespace associated with the window function.\n+\n+This example demonstrates how to get the namespace in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetNamespaceWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String ns = context.getNamespace();\n+        System.out.println(ns);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get function name\n+\n+`getFunctionName` method gets the window function name.\n+\n+This example demonstrates how to get the function name in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetNameOfWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionName = context.getFunctionName();\n+        System.out.println(functionName);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get function ID\n+\n+`getFunctionId` method gets the window function ID.\n+\n+This example demonstrates how to get the function ID in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetFunctionIDWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionID = context.getFunctionId();\n+        System.out.println(functionID);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get function version\n+\n+`getFunctionVersion` method gets the window function version.\n+\n+This example demonstrates how to get the function version of a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetVersionOfWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionVersion = context.getFunctionVersion();\n+        System.out.println(functionVersion);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get instance ID\n+\n+`getInstanceId` method gets the instance ID of a window function.\n+\n+This example demonstrates how to get the instance ID in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetInstanceIDWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        int instanceId = context.getInstanceId();\n+        System.out.println(instanceId);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get num instances\n+\n+`getNumInstances` method gets the number of instances that invoke the window function.\n+\n+This example demonstrates how to get the number of instances in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetNumInstancesWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        int numInstances = context.getNumInstances();\n+        System.out.println(numInstances);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get output schema type\n+\n+`getOutputSchemaType` method gets the built-in type or custom class name of the output schema.\n+\n+This example demonstrates how to get the output schema type of a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetOutputSchemaTypeWindowFunction implements WindowFunction<String, Void> {\n+\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String schemaType = context.getOutputSchemaType();\n+        System.out.println(schemaType);\n+\n+        return null;\n+    }\n+}\n+```\n+\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+## Logger\n+\n+Pulsar window functions using Java SDK has access to an [SLF4j](https://www.slf4j.org/) [`Logger`](https://www.slf4j.org/api/org/apache/log4j/Logger.html) object that can be used to produce logs at the chosen log level.\n+\n+This example logs either a `WARNING`-level or `INFO`-level log based on whether the incoming string contains the word `danger` or not in a Java function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+import java.util.Collection;\n+import org.apache.pulsar.functions.api.Record;\n+import org.apache.pulsar.functions.api.WindowContext;\n+import org.apache.pulsar.functions.api.WindowFunction;\n+import org.slf4j.Logger;\n+\n+public class LoggingWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        Logger log = context.getLogger();\n+        for (Record<String> record : inputs) {\n+            log.info(record + \"-window-log\");\n+        }\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+If you need your function to produce logs, specify a log topic when creating or running the function. \n+\n+```bash\n+bin/pulsar-admin functions create \\\n+  --jar my-functions.jar \\\n+  --classname my.package.LoggingFunction \\\n+  --log-topic persistent://public/default/logging-function-logs \\\n+  # Other function configs\n+```\n+\n+You can access all logs produced by `LoggingFunction` via the `persistent://public/default/logging-function-logs` topic.\n+\n+## Metrics\n+\n+Pulsar window functions can publish arbitrary metrics to the metrics interface which can be queried. \n+\n+> **Note**\n+>\n+> If a Pulsar window function uses the language-native interface for Java, that function is not able to publish metrics and stats to Pulsar.\n+\n+You can record metrics using the context object on a per-key basis. \n+\n+This example sets a metric for the `process-count` key and a different metric for the `elevens-count` key every time the function processes a message in a Java function. \n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+import java.util.Collection;\n+import org.apache.pulsar.functions.api.Record;\n+import org.apache.pulsar.functions.api.WindowContext;\n+import org.apache.pulsar.functions.api.WindowFunction;\n+\n+\n+/**\n+ * Example function that wants to keep track of\n+ * the event time of each message sent.\n+ */\n+public class UserMetricWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+\n+        for (Record<String> record : inputs) {\n+            if (record.getEventTime().isPresent()) {\n+                context.recordMetric(\"MessageEventTime\", record.getEventTime().get().doubleValue());\n+            }\n+        }\n+\n+        return null;\n+    }\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+## User config\n+\n+When you run or update Pulsar Functions created using SDK, you can pass arbitrary key/values to them with the `--user-config` flag. Key/values **must** be specified as JSON. \n+\n+This example passes a user configured key/value to a function.\n+\n+```bash\n+bin/pulsar-admin functions create \\\n+  --name word-filter \\\n+ --user-config '{\"forbidden-word\":\"rosebud\"}' \\\n+  # Other function configs\n+```\n+\n+### API\n+You can use the following APIs to get user-defined information for window functions.\n+#### getUserConfigMap\n+\n+`getUserConfigMap` API gets a map of all user-defined key/value configurations for the window function.\n+\n+\n+```java\n+/**\n+     * Get a map of all user-defined key/value configs for the function.\n+     *\n+     * @return The full map of user-defined config values\n+     */\n+    Map<String, Object> getUserConfigMap();\n+```\n+\n+\n+#### getUserConfigValue\n+\n+`getUserConfigValue` API gets a user-defined key/value.\n+\n+```java\n+/**\n+     * Get any user-defined key/value.\n+     *\n+     * @param key The key\n+     * @return The Optional value specified by the user for that key.\n+     */\n+    Optional<Object> getUserConfigValue(String key);\n+```\n+\n+#### getUserConfigValueOrDefault\n+\n+`getUserConfigValueOrDefault` API gets a user-defined key/value or a default value if none is present.\n+\n+```java\n+/**\n+     * Get any user-defined key/value or a default value if none is present.\n+     *\n+     * @param key\n+     * @param defaultValue\n+     * @return Either the user config value associated with a given key or a supplied default value\n+     */\n+    Object getUserConfigValueOrDefault(String key, Object defaultValue);\n+```\n+\n+### Example\n+\n+This example demonstrates how to access key/value pairs provided to Pulsar window functions.\n+\n+Java SDK context object enables you to access key/value pairs provided to Pulsar window functions via the command line (as JSON). \n+\n+>**Tip**\n+>\n+> For all key/value pairs passed to Java window functions, both the `key` and the `value` are `String`. To set the value to be a different type, you need to deserialize it from the `String` type.\n+\n+This example passes a key/value pair in a Java window function.\n+\n+```bash\n+bin/pulsar-admin functions create \\\n+   --user-config '{\"word-of-the-day\":\"verdure\"}' \\\n+  # Other function configs\n+ ```\n+\n+This example accesses values in a Java window function.\n+\n+`UserConfigFunction` function logs the string `\"The word of the day is verdure\"` every time the function is invoked (which means every time a message arrives). The user config of `word-of-the-day` is changed **only** when the function is updated with a new config value via \n+multiple ways, such as the command line tool or REST API.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+import org.apache.pulsar.functions.api.Context;\n+import org.apache.pulsar.functions.api.Function;\n+import org.slf4j.Logger;\n+\n+import java.util.Optional;\n+\n+public class UserConfigWindowFunction implements WindowFunction<String, String> {\n+    @Override\n+    public String process(Collection<Record<String>> input, WindowContext context) throws Exception {\n+        Optional<Object> whatToWrite = context.getUserConfigValue(\"WhatToWrite\");\n+        if (whatToWrite.get() != null) {\n+            return (String)whatToWrite.get();\n+        } else {\n+            return \"Not a nice way\";\n+        }\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+If no value is provided, you can access the entire user config map or set a default value.\n+\n+```java\n+// Get the whole config map\n+Map<String, String> allConfigs = context.getUserConfigMap();\n+\n+// Get value or resort to default\n+String wotd = context.getUserConfigValueOrDefault(\"word-of-the-day\", \"perspicacious\");\n+```\n+\n+## Routing\n+\n+When you want to publish as many results as you want, you can use the `context.publish()` interface.", "originalCommit": "e46b89cca262262346796ab5bc3e95d33c088a30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk5MjY5NQ==", "url": "https://github.com/apache/pulsar/pull/7741#discussion_r464992695", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            States are key-value pairs, where the key is a string and the value is arbitrary binary data\u2014counters are stored as 64-bit big-endian binary values. Keys are scoped to an individual Pulsar Function and shared between instances of that function.\n          \n          \n            \n            States are key-value pairs, where the key is a string and the value is arbitrary binary data\u2014counters are stored as 64-bit big-endian binary values. Keys are scoped to an individual Pulsar function and shared between instances of that function.", "author": "sijia-w", "createdAt": "2020-08-04T11:49:52Z", "path": "site2/docs/window-functions-context.md", "diffHunk": "@@ -0,0 +1,593 @@\n+---\n+id: window-functions-context\n+title: Window Functions Context\n+sidebar_label: \"Window Functions: Context\"\n+---\n+\n+Java SDK provides access to a **window context object** that can be used by a window function. This context object provides a wide variety of information and functionality for Pulsar window functions as below.\n+\n+- [Spec](#spec)\n+\n+  * Names of all input topics and the output topic associated with the function.\n+  * Tenant and namespace associated with the function.\n+  * Pulsar window function name, ID, and version.\n+  * ID of the Pulsar function instance running the window function.\n+  * Number of instances that invoke the window function.\n+  * Built-in type or custom class name of the output schema.\n+  \n+- [Logger](#logger)\n+  \n+  * Logger object used by the window function, which can be used to create window function log messages.\n+\n+- [User config](#user-config)\n+  \n+  * Access to arbitrary user configuration values.\n+\n+- [Routing](#routing)\n+  \n+  * Function to publish new messages to arbitrary topics.\n+\n+- [Metrics](#metrics)\n+  \n+  * Interface for recording metrics.\n+\n+- [State storage](#state-storage)\n+  \n+  * Interface for storing and retrieving state in [state storage](#state-storage).\n+\n+## Spec\n+\n+Spec contains the basic information of a function.\n+\n+### Get input topics\n+\n+`getInputTopics` method gets the **name list** of all input topics.\n+\n+This example demonstrates how to get the name list of all input topics in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetInputTopicsWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        Collection<String> inputTopics = context.getInputTopics();\n+        System.out.println(inputTopics);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get output topic\n+\n+`getOutputTopic` method gets the **name of a topic** to which the message is sent.\n+\n+This example demonstrates how to get the name of an output topic in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetOutputTopicWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String outputTopic = context.getOutputTopic();\n+        System.out.println(outputTopic);\n+\n+        return null;\n+    }\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get tenant\n+\n+`getTenant` method gets the tenant name associated with the window function.\n+\n+This example demonstrates how to get the tenant name in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetTenantWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String tenant = context.getTenant();\n+        System.out.println(tenant);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get namespace\n+\n+`getNamespace` method gets the namespace associated with the window function.\n+\n+This example demonstrates how to get the namespace in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetNamespaceWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String ns = context.getNamespace();\n+        System.out.println(ns);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get function name\n+\n+`getFunctionName` method gets the window function name.\n+\n+This example demonstrates how to get the function name in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetNameOfWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionName = context.getFunctionName();\n+        System.out.println(functionName);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get function ID\n+\n+`getFunctionId` method gets the window function ID.\n+\n+This example demonstrates how to get the function ID in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetFunctionIDWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionID = context.getFunctionId();\n+        System.out.println(functionID);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get function version\n+\n+`getFunctionVersion` method gets the window function version.\n+\n+This example demonstrates how to get the function version of a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetVersionOfWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionVersion = context.getFunctionVersion();\n+        System.out.println(functionVersion);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get instance ID\n+\n+`getInstanceId` method gets the instance ID of a window function.\n+\n+This example demonstrates how to get the instance ID in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetInstanceIDWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        int instanceId = context.getInstanceId();\n+        System.out.println(instanceId);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get num instances\n+\n+`getNumInstances` method gets the number of instances that invoke the window function.\n+\n+This example demonstrates how to get the number of instances in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetNumInstancesWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        int numInstances = context.getNumInstances();\n+        System.out.println(numInstances);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get output schema type\n+\n+`getOutputSchemaType` method gets the built-in type or custom class name of the output schema.\n+\n+This example demonstrates how to get the output schema type of a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetOutputSchemaTypeWindowFunction implements WindowFunction<String, Void> {\n+\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String schemaType = context.getOutputSchemaType();\n+        System.out.println(schemaType);\n+\n+        return null;\n+    }\n+}\n+```\n+\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+## Logger\n+\n+Pulsar window functions using Java SDK has access to an [SLF4j](https://www.slf4j.org/) [`Logger`](https://www.slf4j.org/api/org/apache/log4j/Logger.html) object that can be used to produce logs at the chosen log level.\n+\n+This example logs either a `WARNING`-level or `INFO`-level log based on whether the incoming string contains the word `danger` or not in a Java function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+import java.util.Collection;\n+import org.apache.pulsar.functions.api.Record;\n+import org.apache.pulsar.functions.api.WindowContext;\n+import org.apache.pulsar.functions.api.WindowFunction;\n+import org.slf4j.Logger;\n+\n+public class LoggingWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        Logger log = context.getLogger();\n+        for (Record<String> record : inputs) {\n+            log.info(record + \"-window-log\");\n+        }\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+If you need your function to produce logs, specify a log topic when creating or running the function. \n+\n+```bash\n+bin/pulsar-admin functions create \\\n+  --jar my-functions.jar \\\n+  --classname my.package.LoggingFunction \\\n+  --log-topic persistent://public/default/logging-function-logs \\\n+  # Other function configs\n+```\n+\n+You can access all logs produced by `LoggingFunction` via the `persistent://public/default/logging-function-logs` topic.\n+\n+## Metrics\n+\n+Pulsar window functions can publish arbitrary metrics to the metrics interface which can be queried. \n+\n+> **Note**\n+>\n+> If a Pulsar window function uses the language-native interface for Java, that function is not able to publish metrics and stats to Pulsar.\n+\n+You can record metrics using the context object on a per-key basis. \n+\n+This example sets a metric for the `process-count` key and a different metric for the `elevens-count` key every time the function processes a message in a Java function. \n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+import java.util.Collection;\n+import org.apache.pulsar.functions.api.Record;\n+import org.apache.pulsar.functions.api.WindowContext;\n+import org.apache.pulsar.functions.api.WindowFunction;\n+\n+\n+/**\n+ * Example function that wants to keep track of\n+ * the event time of each message sent.\n+ */\n+public class UserMetricWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+\n+        for (Record<String> record : inputs) {\n+            if (record.getEventTime().isPresent()) {\n+                context.recordMetric(\"MessageEventTime\", record.getEventTime().get().doubleValue());\n+            }\n+        }\n+\n+        return null;\n+    }\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+## User config\n+\n+When you run or update Pulsar Functions created using SDK, you can pass arbitrary key/values to them with the `--user-config` flag. Key/values **must** be specified as JSON. \n+\n+This example passes a user configured key/value to a function.\n+\n+```bash\n+bin/pulsar-admin functions create \\\n+  --name word-filter \\\n+ --user-config '{\"forbidden-word\":\"rosebud\"}' \\\n+  # Other function configs\n+```\n+\n+### API\n+You can use the following APIs to get user-defined information for window functions.\n+#### getUserConfigMap\n+\n+`getUserConfigMap` API gets a map of all user-defined key/value configurations for the window function.\n+\n+\n+```java\n+/**\n+     * Get a map of all user-defined key/value configs for the function.\n+     *\n+     * @return The full map of user-defined config values\n+     */\n+    Map<String, Object> getUserConfigMap();\n+```\n+\n+\n+#### getUserConfigValue\n+\n+`getUserConfigValue` API gets a user-defined key/value.\n+\n+```java\n+/**\n+     * Get any user-defined key/value.\n+     *\n+     * @param key The key\n+     * @return The Optional value specified by the user for that key.\n+     */\n+    Optional<Object> getUserConfigValue(String key);\n+```\n+\n+#### getUserConfigValueOrDefault\n+\n+`getUserConfigValueOrDefault` API gets a user-defined key/value or a default value if none is present.\n+\n+```java\n+/**\n+     * Get any user-defined key/value or a default value if none is present.\n+     *\n+     * @param key\n+     * @param defaultValue\n+     * @return Either the user config value associated with a given key or a supplied default value\n+     */\n+    Object getUserConfigValueOrDefault(String key, Object defaultValue);\n+```\n+\n+### Example\n+\n+This example demonstrates how to access key/value pairs provided to Pulsar window functions.\n+\n+Java SDK context object enables you to access key/value pairs provided to Pulsar window functions via the command line (as JSON). \n+\n+>**Tip**\n+>\n+> For all key/value pairs passed to Java window functions, both the `key` and the `value` are `String`. To set the value to be a different type, you need to deserialize it from the `String` type.\n+\n+This example passes a key/value pair in a Java window function.\n+\n+```bash\n+bin/pulsar-admin functions create \\\n+   --user-config '{\"word-of-the-day\":\"verdure\"}' \\\n+  # Other function configs\n+ ```\n+\n+This example accesses values in a Java window function.\n+\n+`UserConfigFunction` function logs the string `\"The word of the day is verdure\"` every time the function is invoked (which means every time a message arrives). The user config of `word-of-the-day` is changed **only** when the function is updated with a new config value via \n+multiple ways, such as the command line tool or REST API.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+import org.apache.pulsar.functions.api.Context;\n+import org.apache.pulsar.functions.api.Function;\n+import org.slf4j.Logger;\n+\n+import java.util.Optional;\n+\n+public class UserConfigWindowFunction implements WindowFunction<String, String> {\n+    @Override\n+    public String process(Collection<Record<String>> input, WindowContext context) throws Exception {\n+        Optional<Object> whatToWrite = context.getUserConfigValue(\"WhatToWrite\");\n+        if (whatToWrite.get() != null) {\n+            return (String)whatToWrite.get();\n+        } else {\n+            return \"Not a nice way\";\n+        }\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+If no value is provided, you can access the entire user config map or set a default value.\n+\n+```java\n+// Get the whole config map\n+Map<String, String> allConfigs = context.getUserConfigMap();\n+\n+// Get value or resort to default\n+String wotd = context.getUserConfigValueOrDefault(\"word-of-the-day\", \"perspicacious\");\n+```\n+\n+## Routing\n+\n+When you want to publish as many results as you want, you can use the `context.publish()` interface.\n+\n+This example shows that the `PublishFunction` class uses the built-in function in the context to publish messages to the `publishTopic` in a Java function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class PublishWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> input, WindowContext context) throws Exception {\n+        String publishTopic = (String) context.getUserConfigValueOrDefault(\"publish-topic\", \"publishtopic\");\n+        String output = String.format(\"%s!\", input);\n+        context.publish(publishTopic, output);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+## State storage\n+\n+Pulsar window functions use [Apache BookKeeper](https://bookkeeper.apache.org) as a state storage interface. StreamNative Platform installation (including the standalone installation) includes the deployment of BookKeeper bookies.\n+\n+StreamNative Platform integrates with Apache BookKeeper `table service` to store the `state` for functions. For example, the `WordCount` function can store its `counters` state into BookKeeper table service via Pulsar Functions state APIs.\n+\n+States are key-value pairs, where the key is a string and the value is arbitrary binary data\u2014counters are stored as 64-bit big-endian binary values. Keys are scoped to an individual Pulsar Function and shared between instances of that function.", "originalCommit": "e46b89cca262262346796ab5bc3e95d33c088a30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1MzMwOQ==", "url": "https://github.com/apache/pulsar/pull/7741#discussion_r465053309", "bodyText": "Maybe we should use Pulsar Function in here", "author": "wolfstudy", "createdAt": "2020-08-04T13:33:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk5MjY5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk5MzY1OQ==", "url": "https://github.com/apache/pulsar/pull/7741#discussion_r464993659", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Applications uses the `incrCounter` API to change the counter of a given `key` by the given `amount`. If the `key` does not exist, a new key is created.\n          \n          \n            \n            Applications use the `incrCounter` API to change the counter of a given `key` by the given `amount`. If the `key` does not exist, a new key is created.", "author": "sijia-w", "createdAt": "2020-08-04T11:51:36Z", "path": "site2/docs/window-functions-context.md", "diffHunk": "@@ -0,0 +1,593 @@\n+---\n+id: window-functions-context\n+title: Window Functions Context\n+sidebar_label: \"Window Functions: Context\"\n+---\n+\n+Java SDK provides access to a **window context object** that can be used by a window function. This context object provides a wide variety of information and functionality for Pulsar window functions as below.\n+\n+- [Spec](#spec)\n+\n+  * Names of all input topics and the output topic associated with the function.\n+  * Tenant and namespace associated with the function.\n+  * Pulsar window function name, ID, and version.\n+  * ID of the Pulsar function instance running the window function.\n+  * Number of instances that invoke the window function.\n+  * Built-in type or custom class name of the output schema.\n+  \n+- [Logger](#logger)\n+  \n+  * Logger object used by the window function, which can be used to create window function log messages.\n+\n+- [User config](#user-config)\n+  \n+  * Access to arbitrary user configuration values.\n+\n+- [Routing](#routing)\n+  \n+  * Function to publish new messages to arbitrary topics.\n+\n+- [Metrics](#metrics)\n+  \n+  * Interface for recording metrics.\n+\n+- [State storage](#state-storage)\n+  \n+  * Interface for storing and retrieving state in [state storage](#state-storage).\n+\n+## Spec\n+\n+Spec contains the basic information of a function.\n+\n+### Get input topics\n+\n+`getInputTopics` method gets the **name list** of all input topics.\n+\n+This example demonstrates how to get the name list of all input topics in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetInputTopicsWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        Collection<String> inputTopics = context.getInputTopics();\n+        System.out.println(inputTopics);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get output topic\n+\n+`getOutputTopic` method gets the **name of a topic** to which the message is sent.\n+\n+This example demonstrates how to get the name of an output topic in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetOutputTopicWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String outputTopic = context.getOutputTopic();\n+        System.out.println(outputTopic);\n+\n+        return null;\n+    }\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get tenant\n+\n+`getTenant` method gets the tenant name associated with the window function.\n+\n+This example demonstrates how to get the tenant name in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetTenantWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String tenant = context.getTenant();\n+        System.out.println(tenant);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get namespace\n+\n+`getNamespace` method gets the namespace associated with the window function.\n+\n+This example demonstrates how to get the namespace in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetNamespaceWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String ns = context.getNamespace();\n+        System.out.println(ns);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get function name\n+\n+`getFunctionName` method gets the window function name.\n+\n+This example demonstrates how to get the function name in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetNameOfWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionName = context.getFunctionName();\n+        System.out.println(functionName);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get function ID\n+\n+`getFunctionId` method gets the window function ID.\n+\n+This example demonstrates how to get the function ID in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetFunctionIDWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionID = context.getFunctionId();\n+        System.out.println(functionID);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get function version\n+\n+`getFunctionVersion` method gets the window function version.\n+\n+This example demonstrates how to get the function version of a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetVersionOfWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionVersion = context.getFunctionVersion();\n+        System.out.println(functionVersion);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get instance ID\n+\n+`getInstanceId` method gets the instance ID of a window function.\n+\n+This example demonstrates how to get the instance ID in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetInstanceIDWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        int instanceId = context.getInstanceId();\n+        System.out.println(instanceId);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get num instances\n+\n+`getNumInstances` method gets the number of instances that invoke the window function.\n+\n+This example demonstrates how to get the number of instances in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetNumInstancesWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        int numInstances = context.getNumInstances();\n+        System.out.println(numInstances);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get output schema type\n+\n+`getOutputSchemaType` method gets the built-in type or custom class name of the output schema.\n+\n+This example demonstrates how to get the output schema type of a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetOutputSchemaTypeWindowFunction implements WindowFunction<String, Void> {\n+\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String schemaType = context.getOutputSchemaType();\n+        System.out.println(schemaType);\n+\n+        return null;\n+    }\n+}\n+```\n+\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+## Logger\n+\n+Pulsar window functions using Java SDK has access to an [SLF4j](https://www.slf4j.org/) [`Logger`](https://www.slf4j.org/api/org/apache/log4j/Logger.html) object that can be used to produce logs at the chosen log level.\n+\n+This example logs either a `WARNING`-level or `INFO`-level log based on whether the incoming string contains the word `danger` or not in a Java function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+import java.util.Collection;\n+import org.apache.pulsar.functions.api.Record;\n+import org.apache.pulsar.functions.api.WindowContext;\n+import org.apache.pulsar.functions.api.WindowFunction;\n+import org.slf4j.Logger;\n+\n+public class LoggingWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        Logger log = context.getLogger();\n+        for (Record<String> record : inputs) {\n+            log.info(record + \"-window-log\");\n+        }\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+If you need your function to produce logs, specify a log topic when creating or running the function. \n+\n+```bash\n+bin/pulsar-admin functions create \\\n+  --jar my-functions.jar \\\n+  --classname my.package.LoggingFunction \\\n+  --log-topic persistent://public/default/logging-function-logs \\\n+  # Other function configs\n+```\n+\n+You can access all logs produced by `LoggingFunction` via the `persistent://public/default/logging-function-logs` topic.\n+\n+## Metrics\n+\n+Pulsar window functions can publish arbitrary metrics to the metrics interface which can be queried. \n+\n+> **Note**\n+>\n+> If a Pulsar window function uses the language-native interface for Java, that function is not able to publish metrics and stats to Pulsar.\n+\n+You can record metrics using the context object on a per-key basis. \n+\n+This example sets a metric for the `process-count` key and a different metric for the `elevens-count` key every time the function processes a message in a Java function. \n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+import java.util.Collection;\n+import org.apache.pulsar.functions.api.Record;\n+import org.apache.pulsar.functions.api.WindowContext;\n+import org.apache.pulsar.functions.api.WindowFunction;\n+\n+\n+/**\n+ * Example function that wants to keep track of\n+ * the event time of each message sent.\n+ */\n+public class UserMetricWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+\n+        for (Record<String> record : inputs) {\n+            if (record.getEventTime().isPresent()) {\n+                context.recordMetric(\"MessageEventTime\", record.getEventTime().get().doubleValue());\n+            }\n+        }\n+\n+        return null;\n+    }\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+## User config\n+\n+When you run or update Pulsar Functions created using SDK, you can pass arbitrary key/values to them with the `--user-config` flag. Key/values **must** be specified as JSON. \n+\n+This example passes a user configured key/value to a function.\n+\n+```bash\n+bin/pulsar-admin functions create \\\n+  --name word-filter \\\n+ --user-config '{\"forbidden-word\":\"rosebud\"}' \\\n+  # Other function configs\n+```\n+\n+### API\n+You can use the following APIs to get user-defined information for window functions.\n+#### getUserConfigMap\n+\n+`getUserConfigMap` API gets a map of all user-defined key/value configurations for the window function.\n+\n+\n+```java\n+/**\n+     * Get a map of all user-defined key/value configs for the function.\n+     *\n+     * @return The full map of user-defined config values\n+     */\n+    Map<String, Object> getUserConfigMap();\n+```\n+\n+\n+#### getUserConfigValue\n+\n+`getUserConfigValue` API gets a user-defined key/value.\n+\n+```java\n+/**\n+     * Get any user-defined key/value.\n+     *\n+     * @param key The key\n+     * @return The Optional value specified by the user for that key.\n+     */\n+    Optional<Object> getUserConfigValue(String key);\n+```\n+\n+#### getUserConfigValueOrDefault\n+\n+`getUserConfigValueOrDefault` API gets a user-defined key/value or a default value if none is present.\n+\n+```java\n+/**\n+     * Get any user-defined key/value or a default value if none is present.\n+     *\n+     * @param key\n+     * @param defaultValue\n+     * @return Either the user config value associated with a given key or a supplied default value\n+     */\n+    Object getUserConfigValueOrDefault(String key, Object defaultValue);\n+```\n+\n+### Example\n+\n+This example demonstrates how to access key/value pairs provided to Pulsar window functions.\n+\n+Java SDK context object enables you to access key/value pairs provided to Pulsar window functions via the command line (as JSON). \n+\n+>**Tip**\n+>\n+> For all key/value pairs passed to Java window functions, both the `key` and the `value` are `String`. To set the value to be a different type, you need to deserialize it from the `String` type.\n+\n+This example passes a key/value pair in a Java window function.\n+\n+```bash\n+bin/pulsar-admin functions create \\\n+   --user-config '{\"word-of-the-day\":\"verdure\"}' \\\n+  # Other function configs\n+ ```\n+\n+This example accesses values in a Java window function.\n+\n+`UserConfigFunction` function logs the string `\"The word of the day is verdure\"` every time the function is invoked (which means every time a message arrives). The user config of `word-of-the-day` is changed **only** when the function is updated with a new config value via \n+multiple ways, such as the command line tool or REST API.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+import org.apache.pulsar.functions.api.Context;\n+import org.apache.pulsar.functions.api.Function;\n+import org.slf4j.Logger;\n+\n+import java.util.Optional;\n+\n+public class UserConfigWindowFunction implements WindowFunction<String, String> {\n+    @Override\n+    public String process(Collection<Record<String>> input, WindowContext context) throws Exception {\n+        Optional<Object> whatToWrite = context.getUserConfigValue(\"WhatToWrite\");\n+        if (whatToWrite.get() != null) {\n+            return (String)whatToWrite.get();\n+        } else {\n+            return \"Not a nice way\";\n+        }\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+If no value is provided, you can access the entire user config map or set a default value.\n+\n+```java\n+// Get the whole config map\n+Map<String, String> allConfigs = context.getUserConfigMap();\n+\n+// Get value or resort to default\n+String wotd = context.getUserConfigValueOrDefault(\"word-of-the-day\", \"perspicacious\");\n+```\n+\n+## Routing\n+\n+When you want to publish as many results as you want, you can use the `context.publish()` interface.\n+\n+This example shows that the `PublishFunction` class uses the built-in function in the context to publish messages to the `publishTopic` in a Java function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class PublishWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> input, WindowContext context) throws Exception {\n+        String publishTopic = (String) context.getUserConfigValueOrDefault(\"publish-topic\", \"publishtopic\");\n+        String output = String.format(\"%s!\", input);\n+        context.publish(publishTopic, output);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+## State storage\n+\n+Pulsar window functions use [Apache BookKeeper](https://bookkeeper.apache.org) as a state storage interface. StreamNative Platform installation (including the standalone installation) includes the deployment of BookKeeper bookies.\n+\n+StreamNative Platform integrates with Apache BookKeeper `table service` to store the `state` for functions. For example, the `WordCount` function can store its `counters` state into BookKeeper table service via Pulsar Functions state APIs.\n+\n+States are key-value pairs, where the key is a string and the value is arbitrary binary data\u2014counters are stored as 64-bit big-endian binary values. Keys are scoped to an individual Pulsar Function and shared between instances of that function.\n+\n+Currently, Pulsar window functions expose Java API to access, update, and manage states. These APIs are available in the context object when you use Java SDK functions.\n+\n+| Java API| Description\n+|---|---\n+|`incrCounter`|Increases a built-in distributed counter referred by key.\n+|`getCounter`|Gets the counter value for the key.\n+|`putState`|Updates the state value for the key.\n+\n+You can use the following APIs to access, update, and manage states in Java window functions. \n+\n+#### incrCounter\n+\n+`incrCounter` API increases a built-in distributed counter referred by key.\n+\n+Applications uses the `incrCounter` API to change the counter of a given `key` by the given `amount`. If the `key` does not exist, a new key is created.", "originalCommit": "e46b89cca262262346796ab5bc3e95d33c088a30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "138f155309732ab30a13a82a10d63460a7aedc00", "url": "https://github.com/apache/pulsar/commit/138f155309732ab30a13a82a10d63460a7aedc00", "message": "fix comments\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>", "committedDate": "2020-08-04T13:34:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA0OTA4Ng==", "url": "https://github.com/apache/pulsar/pull/7741#discussion_r465049086", "bodyText": "What does this sentence mean?", "author": "Jennifer88huang", "createdAt": "2020-08-04T13:27:19Z", "path": "site2/docs/window-functions-context.md", "diffHunk": "@@ -0,0 +1,593 @@\n+---\n+id: window-functions-context\n+title: Window Functions Context\n+sidebar_label: \"Window Functions: Context\"\n+---\n+\n+Java SDK provides access to a **window context object** that can be used by a window function. This context object provides a wide variety of information and functionality for Pulsar window functions as below.\n+\n+- [Spec](#spec)\n+\n+  * Names of all input topics and the output topic associated with the function.\n+  * Tenant and namespace associated with the function.\n+  * Pulsar window function name, ID, and version.\n+  * ID of the Pulsar function instance running the window function.\n+  * Number of instances that invoke the window function.\n+  * Built-in type or custom class name of the output schema.\n+  \n+- [Logger](#logger)\n+  \n+  * Logger object used by the window function, which can be used to create window function log messages.\n+\n+- [User config](#user-config)\n+  \n+  * Access to arbitrary user configuration values.\n+\n+- [Routing](#routing)\n+  \n+  * Function to publish new messages to arbitrary topics.", "originalCommit": "e46b89cca262262346796ab5bc3e95d33c088a30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA4OTM5Mw==", "url": "https://github.com/apache/pulsar/pull/7741#discussion_r465089393", "bodyText": "How about refine it as follows?\nRouting is supported in Pulsar window functions. Pulsar window functions send messages to arbitrary topics as per the publish interface.", "author": "Jennifer88huang", "createdAt": "2020-08-04T14:23:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA0OTA4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1Mzg2NQ==", "url": "https://github.com/apache/pulsar/pull/7741#discussion_r465053865", "bodyText": "which example?", "author": "Jennifer88huang", "createdAt": "2020-08-04T13:34:53Z", "path": "site2/docs/window-functions-context.md", "diffHunk": "@@ -0,0 +1,593 @@\n+---\n+id: window-functions-context\n+title: Window Functions Context\n+sidebar_label: \"Window Functions: Context\"\n+---\n+\n+Java SDK provides access to a **window context object** that can be used by a window function. This context object provides a wide variety of information and functionality for Pulsar window functions as below.\n+\n+- [Spec](#spec)\n+\n+  * Names of all input topics and the output topic associated with the function.\n+  * Tenant and namespace associated with the function.\n+  * Pulsar window function name, ID, and version.\n+  * ID of the Pulsar function instance running the window function.\n+  * Number of instances that invoke the window function.\n+  * Built-in type or custom class name of the output schema.\n+  \n+- [Logger](#logger)\n+  \n+  * Logger object used by the window function, which can be used to create window function log messages.\n+\n+- [User config](#user-config)\n+  \n+  * Access to arbitrary user configuration values.\n+\n+- [Routing](#routing)\n+  \n+  * Function to publish new messages to arbitrary topics.\n+\n+- [Metrics](#metrics)\n+  \n+  * Interface for recording metrics.\n+\n+- [State storage](#state-storage)\n+  \n+  * Interface for storing and retrieving state in [state storage](#state-storage).\n+\n+## Spec\n+\n+Spec contains the basic information of a function.\n+\n+### Get input topics\n+\n+`getInputTopics` method gets the **name list** of all input topics.\n+\n+This example demonstrates how to get the name list of all input topics in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetInputTopicsWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        Collection<String> inputTopics = context.getInputTopics();\n+        System.out.println(inputTopics);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get output topic\n+\n+`getOutputTopic` method gets the **name of a topic** to which the message is sent.\n+\n+This example demonstrates how to get the name of an output topic in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetOutputTopicWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String outputTopic = context.getOutputTopic();\n+        System.out.println(outputTopic);\n+\n+        return null;\n+    }\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get tenant\n+\n+`getTenant` method gets the tenant name associated with the window function.\n+\n+This example demonstrates how to get the tenant name in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetTenantWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String tenant = context.getTenant();\n+        System.out.println(tenant);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get namespace\n+\n+`getNamespace` method gets the namespace associated with the window function.\n+\n+This example demonstrates how to get the namespace in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetNamespaceWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String ns = context.getNamespace();\n+        System.out.println(ns);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get function name\n+\n+`getFunctionName` method gets the window function name.\n+\n+This example demonstrates how to get the function name in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetNameOfWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionName = context.getFunctionName();\n+        System.out.println(functionName);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get function ID\n+\n+`getFunctionId` method gets the window function ID.\n+\n+This example demonstrates how to get the function ID in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetFunctionIDWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionID = context.getFunctionId();\n+        System.out.println(functionID);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get function version\n+\n+`getFunctionVersion` method gets the window function version.\n+\n+This example demonstrates how to get the function version of a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetVersionOfWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionVersion = context.getFunctionVersion();\n+        System.out.println(functionVersion);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get instance ID\n+\n+`getInstanceId` method gets the instance ID of a window function.\n+\n+This example demonstrates how to get the instance ID in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetInstanceIDWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        int instanceId = context.getInstanceId();\n+        System.out.println(instanceId);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get num instances\n+\n+`getNumInstances` method gets the number of instances that invoke the window function.\n+\n+This example demonstrates how to get the number of instances in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetNumInstancesWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        int numInstances = context.getNumInstances();\n+        System.out.println(numInstances);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get output schema type\n+\n+`getOutputSchemaType` method gets the built-in type or custom class name of the output schema.\n+\n+This example demonstrates how to get the output schema type of a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetOutputSchemaTypeWindowFunction implements WindowFunction<String, Void> {\n+\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String schemaType = context.getOutputSchemaType();\n+        System.out.println(schemaType);\n+\n+        return null;\n+    }\n+}\n+```\n+\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+## Logger\n+\n+Pulsar window functions using Java SDK has access to an [SLF4j](https://www.slf4j.org/) [`Logger`](https://www.slf4j.org/api/org/apache/log4j/Logger.html) object that can be used to produce logs at the chosen log level.\n+\n+This example logs either a `WARNING`-level or `INFO`-level log based on whether the incoming string contains the word `danger` or not in a Java function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+import java.util.Collection;\n+import org.apache.pulsar.functions.api.Record;\n+import org.apache.pulsar.functions.api.WindowContext;\n+import org.apache.pulsar.functions.api.WindowFunction;\n+import org.slf4j.Logger;\n+\n+public class LoggingWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        Logger log = context.getLogger();\n+        for (Record<String> record : inputs) {\n+            log.info(record + \"-window-log\");\n+        }\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+If you need your function to produce logs, specify a log topic when creating or running the function. \n+\n+```bash\n+bin/pulsar-admin functions create \\\n+  --jar my-functions.jar \\\n+  --classname my.package.LoggingFunction \\\n+  --log-topic persistent://public/default/logging-function-logs \\\n+  # Other function configs\n+```\n+\n+You can access all logs produced by `LoggingFunction` via the `persistent://public/default/logging-function-logs` topic.\n+\n+## Metrics\n+\n+Pulsar window functions can publish arbitrary metrics to the metrics interface which can be queried. \n+\n+> **Note**\n+>\n+> If a Pulsar window function uses the language-native interface for Java, that function is not able to publish metrics and stats to Pulsar.\n+\n+You can record metrics using the context object on a per-key basis. \n+\n+This example sets a metric for the `process-count` key and a different metric for the `elevens-count` key every time the function processes a message in a Java function. \n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+import java.util.Collection;\n+import org.apache.pulsar.functions.api.Record;\n+import org.apache.pulsar.functions.api.WindowContext;\n+import org.apache.pulsar.functions.api.WindowFunction;\n+\n+\n+/**\n+ * Example function that wants to keep track of\n+ * the event time of each message sent.\n+ */\n+public class UserMetricWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+\n+        for (Record<String> record : inputs) {\n+            if (record.getEventTime().isPresent()) {\n+                context.recordMetric(\"MessageEventTime\", record.getEventTime().get().doubleValue());\n+            }\n+        }\n+\n+        return null;\n+    }\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+## User config\n+\n+When you run or update Pulsar Functions created using SDK, you can pass arbitrary key/values to them with the `--user-config` flag. Key/values **must** be specified as JSON. \n+\n+This example passes a user configured key/value to a function.\n+\n+```bash\n+bin/pulsar-admin functions create \\\n+  --name word-filter \\\n+ --user-config '{\"forbidden-word\":\"rosebud\"}' \\\n+  # Other function configs\n+```\n+\n+### API\n+You can use the following APIs to get user-defined information for window functions.\n+#### getUserConfigMap\n+\n+`getUserConfigMap` API gets a map of all user-defined key/value configurations for the window function.\n+\n+\n+```java\n+/**\n+     * Get a map of all user-defined key/value configs for the function.\n+     *\n+     * @return The full map of user-defined config values\n+     */\n+    Map<String, Object> getUserConfigMap();\n+```\n+\n+\n+#### getUserConfigValue\n+\n+`getUserConfigValue` API gets a user-defined key/value.\n+\n+```java\n+/**\n+     * Get any user-defined key/value.\n+     *\n+     * @param key The key\n+     * @return The Optional value specified by the user for that key.\n+     */\n+    Optional<Object> getUserConfigValue(String key);\n+```\n+\n+#### getUserConfigValueOrDefault\n+\n+`getUserConfigValueOrDefault` API gets a user-defined key/value or a default value if none is present.\n+\n+```java\n+/**\n+     * Get any user-defined key/value or a default value if none is present.\n+     *\n+     * @param key\n+     * @param defaultValue\n+     * @return Either the user config value associated with a given key or a supplied default value\n+     */\n+    Object getUserConfigValueOrDefault(String key, Object defaultValue);\n+```\n+\n+### Example", "originalCommit": "e46b89cca262262346796ab5bc3e95d33c088a30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA2MDc3OA==", "url": "https://github.com/apache/pulsar/pull/7741#discussion_r465060778", "bodyText": "Maybe we can delete Example?", "author": "wolfstudy", "createdAt": "2020-08-04T13:45:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1Mzg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1NDcwOA==", "url": "https://github.com/apache/pulsar/pull/7741#discussion_r465054708", "bodyText": "please do not include \"streamnative platform\" related info in this PR.\nSame comments for the following cases.", "author": "Jennifer88huang", "createdAt": "2020-08-04T13:36:12Z", "path": "site2/docs/window-functions-context.md", "diffHunk": "@@ -0,0 +1,593 @@\n+---\n+id: window-functions-context\n+title: Window Functions Context\n+sidebar_label: \"Window Functions: Context\"\n+---\n+\n+Java SDK provides access to a **window context object** that can be used by a window function. This context object provides a wide variety of information and functionality for Pulsar window functions as below.\n+\n+- [Spec](#spec)\n+\n+  * Names of all input topics and the output topic associated with the function.\n+  * Tenant and namespace associated with the function.\n+  * Pulsar window function name, ID, and version.\n+  * ID of the Pulsar function instance running the window function.\n+  * Number of instances that invoke the window function.\n+  * Built-in type or custom class name of the output schema.\n+  \n+- [Logger](#logger)\n+  \n+  * Logger object used by the window function, which can be used to create window function log messages.\n+\n+- [User config](#user-config)\n+  \n+  * Access to arbitrary user configuration values.\n+\n+- [Routing](#routing)\n+  \n+  * Function to publish new messages to arbitrary topics.\n+\n+- [Metrics](#metrics)\n+  \n+  * Interface for recording metrics.\n+\n+- [State storage](#state-storage)\n+  \n+  * Interface for storing and retrieving state in [state storage](#state-storage).\n+\n+## Spec\n+\n+Spec contains the basic information of a function.\n+\n+### Get input topics\n+\n+`getInputTopics` method gets the **name list** of all input topics.\n+\n+This example demonstrates how to get the name list of all input topics in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetInputTopicsWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        Collection<String> inputTopics = context.getInputTopics();\n+        System.out.println(inputTopics);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get output topic\n+\n+`getOutputTopic` method gets the **name of a topic** to which the message is sent.\n+\n+This example demonstrates how to get the name of an output topic in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetOutputTopicWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String outputTopic = context.getOutputTopic();\n+        System.out.println(outputTopic);\n+\n+        return null;\n+    }\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get tenant\n+\n+`getTenant` method gets the tenant name associated with the window function.\n+\n+This example demonstrates how to get the tenant name in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetTenantWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String tenant = context.getTenant();\n+        System.out.println(tenant);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get namespace\n+\n+`getNamespace` method gets the namespace associated with the window function.\n+\n+This example demonstrates how to get the namespace in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetNamespaceWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String ns = context.getNamespace();\n+        System.out.println(ns);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get function name\n+\n+`getFunctionName` method gets the window function name.\n+\n+This example demonstrates how to get the function name in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetNameOfWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionName = context.getFunctionName();\n+        System.out.println(functionName);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get function ID\n+\n+`getFunctionId` method gets the window function ID.\n+\n+This example demonstrates how to get the function ID in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetFunctionIDWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionID = context.getFunctionId();\n+        System.out.println(functionID);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get function version\n+\n+`getFunctionVersion` method gets the window function version.\n+\n+This example demonstrates how to get the function version of a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetVersionOfWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionVersion = context.getFunctionVersion();\n+        System.out.println(functionVersion);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get instance ID\n+\n+`getInstanceId` method gets the instance ID of a window function.\n+\n+This example demonstrates how to get the instance ID in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetInstanceIDWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        int instanceId = context.getInstanceId();\n+        System.out.println(instanceId);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get num instances\n+\n+`getNumInstances` method gets the number of instances that invoke the window function.\n+\n+This example demonstrates how to get the number of instances in a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetNumInstancesWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        int numInstances = context.getNumInstances();\n+        System.out.println(numInstances);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+### Get output schema type\n+\n+`getOutputSchemaType` method gets the built-in type or custom class name of the output schema.\n+\n+This example demonstrates how to get the output schema type of a Java window function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class GetOutputSchemaTypeWindowFunction implements WindowFunction<String, Void> {\n+\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String schemaType = context.getOutputSchemaType();\n+        System.out.println(schemaType);\n+\n+        return null;\n+    }\n+}\n+```\n+\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+## Logger\n+\n+Pulsar window functions using Java SDK has access to an [SLF4j](https://www.slf4j.org/) [`Logger`](https://www.slf4j.org/api/org/apache/log4j/Logger.html) object that can be used to produce logs at the chosen log level.\n+\n+This example logs either a `WARNING`-level or `INFO`-level log based on whether the incoming string contains the word `danger` or not in a Java function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+import java.util.Collection;\n+import org.apache.pulsar.functions.api.Record;\n+import org.apache.pulsar.functions.api.WindowContext;\n+import org.apache.pulsar.functions.api.WindowFunction;\n+import org.slf4j.Logger;\n+\n+public class LoggingWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        Logger log = context.getLogger();\n+        for (Record<String> record : inputs) {\n+            log.info(record + \"-window-log\");\n+        }\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+If you need your function to produce logs, specify a log topic when creating or running the function. \n+\n+```bash\n+bin/pulsar-admin functions create \\\n+  --jar my-functions.jar \\\n+  --classname my.package.LoggingFunction \\\n+  --log-topic persistent://public/default/logging-function-logs \\\n+  # Other function configs\n+```\n+\n+You can access all logs produced by `LoggingFunction` via the `persistent://public/default/logging-function-logs` topic.\n+\n+## Metrics\n+\n+Pulsar window functions can publish arbitrary metrics to the metrics interface which can be queried. \n+\n+> **Note**\n+>\n+> If a Pulsar window function uses the language-native interface for Java, that function is not able to publish metrics and stats to Pulsar.\n+\n+You can record metrics using the context object on a per-key basis. \n+\n+This example sets a metric for the `process-count` key and a different metric for the `elevens-count` key every time the function processes a message in a Java function. \n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+import java.util.Collection;\n+import org.apache.pulsar.functions.api.Record;\n+import org.apache.pulsar.functions.api.WindowContext;\n+import org.apache.pulsar.functions.api.WindowFunction;\n+\n+\n+/**\n+ * Example function that wants to keep track of\n+ * the event time of each message sent.\n+ */\n+public class UserMetricWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+\n+        for (Record<String> record : inputs) {\n+            if (record.getEventTime().isPresent()) {\n+                context.recordMetric(\"MessageEventTime\", record.getEventTime().get().doubleValue());\n+            }\n+        }\n+\n+        return null;\n+    }\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+## User config\n+\n+When you run or update Pulsar Functions created using SDK, you can pass arbitrary key/values to them with the `--user-config` flag. Key/values **must** be specified as JSON. \n+\n+This example passes a user configured key/value to a function.\n+\n+```bash\n+bin/pulsar-admin functions create \\\n+  --name word-filter \\\n+ --user-config '{\"forbidden-word\":\"rosebud\"}' \\\n+  # Other function configs\n+```\n+\n+### API\n+You can use the following APIs to get user-defined information for window functions.\n+#### getUserConfigMap\n+\n+`getUserConfigMap` API gets a map of all user-defined key/value configurations for the window function.\n+\n+\n+```java\n+/**\n+     * Get a map of all user-defined key/value configs for the function.\n+     *\n+     * @return The full map of user-defined config values\n+     */\n+    Map<String, Object> getUserConfigMap();\n+```\n+\n+\n+#### getUserConfigValue\n+\n+`getUserConfigValue` API gets a user-defined key/value.\n+\n+```java\n+/**\n+     * Get any user-defined key/value.\n+     *\n+     * @param key The key\n+     * @return The Optional value specified by the user for that key.\n+     */\n+    Optional<Object> getUserConfigValue(String key);\n+```\n+\n+#### getUserConfigValueOrDefault\n+\n+`getUserConfigValueOrDefault` API gets a user-defined key/value or a default value if none is present.\n+\n+```java\n+/**\n+     * Get any user-defined key/value or a default value if none is present.\n+     *\n+     * @param key\n+     * @param defaultValue\n+     * @return Either the user config value associated with a given key or a supplied default value\n+     */\n+    Object getUserConfigValueOrDefault(String key, Object defaultValue);\n+```\n+\n+### Example\n+\n+This example demonstrates how to access key/value pairs provided to Pulsar window functions.\n+\n+Java SDK context object enables you to access key/value pairs provided to Pulsar window functions via the command line (as JSON). \n+\n+>**Tip**\n+>\n+> For all key/value pairs passed to Java window functions, both the `key` and the `value` are `String`. To set the value to be a different type, you need to deserialize it from the `String` type.\n+\n+This example passes a key/value pair in a Java window function.\n+\n+```bash\n+bin/pulsar-admin functions create \\\n+   --user-config '{\"word-of-the-day\":\"verdure\"}' \\\n+  # Other function configs\n+ ```\n+\n+This example accesses values in a Java window function.\n+\n+`UserConfigFunction` function logs the string `\"The word of the day is verdure\"` every time the function is invoked (which means every time a message arrives). The user config of `word-of-the-day` is changed **only** when the function is updated with a new config value via \n+multiple ways, such as the command line tool or REST API.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+import org.apache.pulsar.functions.api.Context;\n+import org.apache.pulsar.functions.api.Function;\n+import org.slf4j.Logger;\n+\n+import java.util.Optional;\n+\n+public class UserConfigWindowFunction implements WindowFunction<String, String> {\n+    @Override\n+    public String process(Collection<Record<String>> input, WindowContext context) throws Exception {\n+        Optional<Object> whatToWrite = context.getUserConfigValue(\"WhatToWrite\");\n+        if (whatToWrite.get() != null) {\n+            return (String)whatToWrite.get();\n+        } else {\n+            return \"Not a nice way\";\n+        }\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+If no value is provided, you can access the entire user config map or set a default value.\n+\n+```java\n+// Get the whole config map\n+Map<String, String> allConfigs = context.getUserConfigMap();\n+\n+// Get value or resort to default\n+String wotd = context.getUserConfigValueOrDefault(\"word-of-the-day\", \"perspicacious\");\n+```\n+\n+## Routing\n+\n+When you want to publish as many results as you want, you can use the `context.publish()` interface.\n+\n+This example shows that the `PublishFunction` class uses the built-in function in the context to publish messages to the `publishTopic` in a Java function.\n+\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--Java-->\n+\n+```java\n+public class PublishWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> input, WindowContext context) throws Exception {\n+        String publishTopic = (String) context.getUserConfigValueOrDefault(\"publish-topic\", \"publishtopic\");\n+        String output = String.format(\"%s!\", input);\n+        context.publish(publishTopic, output);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n+## State storage\n+\n+Pulsar window functions use [Apache BookKeeper](https://bookkeeper.apache.org) as a state storage interface. StreamNative Platform installation (including the standalone installation) includes the deployment of BookKeeper bookies.", "originalCommit": "e46b89cca262262346796ab5bc3e95d33c088a30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1NjIxNQ==", "url": "https://github.com/apache/pulsar/pull/7741#discussion_r465056215", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Applications can use the `getCounter` API to retrieve the counter of a given `key` changed by the `incrCounter` API.\n          \n          \n            \n            Applications uses the `getCounter` API to retrieve the counter of a given `key` changed by the `incrCounter` API.", "author": "Jennifer88huang", "createdAt": "2020-08-04T13:38:37Z", "path": "site2/docs/window-functions-context.md", "diffHunk": "@@ -0,0 +1,532 @@\n+---\n+id: window-functions-context\n+title: Window Functions Context\n+sidebar_label: \"Window Functions: Context\"\n+---\n+\n+Java SDK provides access to a **window context object** that can be used by a window function. This context object provides a wide variety of information and functionality for Pulsar window functions as below.\n+\n+- [Spec](#spec)\n+\n+  * Names of all input topics and the output topic associated with the function.\n+  * Tenant and namespace associated with the function.\n+  * Pulsar window function name, ID, and version.\n+  * ID of the Pulsar function instance running the window function.\n+  * Number of instances that invoke the window function.\n+  * Built-in type or custom class name of the output schema.\n+  \n+- [Logger](#logger)\n+  \n+  * Logger object used by the window function, which can be used to create window function log messages.\n+\n+- [User config](#user-config)\n+  \n+  * Access to arbitrary user configuration values.\n+\n+- [Routing](#routing)\n+  \n+  * Function to publish new messages to arbitrary topics.\n+\n+- [Metrics](#metrics)\n+  \n+  * Interface for recording metrics.\n+\n+- [State storage](#state-storage)\n+  \n+  * Interface for storing and retrieving state in [state storage](#state-storage).\n+\n+## Spec\n+\n+Spec contains the basic information of a function.\n+\n+### Get input topics\n+\n+The `getInputTopics` method gets the **name list** of all input topics.\n+\n+This example demonstrates how to get the name list of all input topics in a Java window function.\n+\n+```java\n+public class GetInputTopicsWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        Collection<String> inputTopics = context.getInputTopics();\n+        System.out.println(inputTopics);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+\n+### Get output topic\n+\n+The `getOutputTopic` method gets the **name of a topic** to which the message is sent.\n+\n+This example demonstrates how to get the name of an output topic in a Java window function.\n+\n+```java\n+public class GetOutputTopicWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String outputTopic = context.getOutputTopic();\n+        System.out.println(outputTopic);\n+\n+        return null;\n+    }\n+}\n+```\n+\n+### Get tenant\n+\n+The `getTenant` method gets the tenant name associated with the window function.\n+\n+This example demonstrates how to get the tenant name in a Java window function.\n+\n+```java\n+public class GetTenantWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String tenant = context.getTenant();\n+        System.out.println(tenant);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+\n+### Get namespace\n+\n+The `getNamespace` method gets the namespace associated with the window function.\n+\n+This example demonstrates how to get the namespace in a Java window function.\n+\n+```java\n+public class GetNamespaceWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String ns = context.getNamespace();\n+        System.out.println(ns);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+\n+### Get function name\n+\n+The `getFunctionName` method gets the window function name.\n+\n+This example demonstrates how to get the function name in a Java window function.\n+\n+```java\n+public class GetNameOfWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionName = context.getFunctionName();\n+        System.out.println(functionName);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+\n+### Get function ID\n+\n+The `getFunctionId` method gets the window function ID.\n+\n+This example demonstrates how to get the function ID in a Java window function.\n+\n+```java\n+public class GetFunctionIDWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionID = context.getFunctionId();\n+        System.out.println(functionID);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+\n+### Get function version\n+\n+The `getFunctionVersion` method gets the window function version.\n+\n+This example demonstrates how to get the function version of a Java window function.\n+\n+```java\n+public class GetVersionOfWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionVersion = context.getFunctionVersion();\n+        System.out.println(functionVersion);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+\n+### Get instance ID\n+\n+The `getInstanceId` method gets the instance ID of a window function.\n+\n+This example demonstrates how to get the instance ID in a Java window function.\n+\n+```java\n+public class GetInstanceIDWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        int instanceId = context.getInstanceId();\n+        System.out.println(instanceId);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+\n+### Get num instances\n+\n+The `getNumInstances` method gets the number of instances that invoke the window function.\n+\n+This example demonstrates how to get the number of instances in a Java window function.\n+\n+```java\n+public class GetNumInstancesWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        int numInstances = context.getNumInstances();\n+        System.out.println(numInstances);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+\n+### Get output schema type\n+\n+The `getOutputSchemaType` method gets the built-in type or custom class name of the output schema.\n+\n+This example demonstrates how to get the output schema type of a Java window function.\n+\n+```java\n+public class GetOutputSchemaTypeWindowFunction implements WindowFunction<String, Void> {\n+\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String schemaType = context.getOutputSchemaType();\n+        System.out.println(schemaType);\n+\n+        return null;\n+    }\n+}\n+```\n+\n+## Logger\n+\n+Pulsar window functions using Java SDK has access to an [SLF4j](https://www.slf4j.org/) [`Logger`](https://www.slf4j.org/api/org/apache/log4j/Logger.html) object that can be used to produce logs at the chosen log level.\n+\n+This example logs either a `WARNING`-level or `INFO`-level log based on whether the incoming string contains the word `danger` or not in a Java function.\n+\n+```java\n+import java.util.Collection;\n+import org.apache.pulsar.functions.api.Record;\n+import org.apache.pulsar.functions.api.WindowContext;\n+import org.apache.pulsar.functions.api.WindowFunction;\n+import org.slf4j.Logger;\n+\n+public class LoggingWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        Logger log = context.getLogger();\n+        for (Record<String> record : inputs) {\n+            log.info(record + \"-window-log\");\n+        }\n+        return null;\n+    }\n+\n+}\n+```\n+\n+If you need your function to produce logs, specify a log topic when creating or running the function. \n+\n+```bash\n+bin/pulsar-admin functions create \\\n+  --jar my-functions.jar \\\n+  --classname my.package.LoggingFunction \\\n+  --log-topic persistent://public/default/logging-function-logs \\\n+  # Other function configs\n+```\n+\n+You can access all logs produced by `LoggingFunction` via the `persistent://public/default/logging-function-logs` topic.\n+\n+## Metrics\n+\n+Pulsar window functions can publish arbitrary metrics to the metrics interface which can be queried. \n+\n+> **Note**\n+>\n+> If a Pulsar window function uses the language-native interface for Java, that function is not able to publish metrics and stats to Pulsar.\n+\n+You can record metrics using the context object on a per-key basis. \n+\n+This example sets a metric for the `process-count` key and a different metric for the `elevens-count` key every time the function processes a message in a Java function. \n+\n+```java\n+import java.util.Collection;\n+import org.apache.pulsar.functions.api.Record;\n+import org.apache.pulsar.functions.api.WindowContext;\n+import org.apache.pulsar.functions.api.WindowFunction;\n+\n+\n+/**\n+ * Example function that wants to keep track of\n+ * the event time of each message sent.\n+ */\n+public class UserMetricWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+\n+        for (Record<String> record : inputs) {\n+            if (record.getEventTime().isPresent()) {\n+                context.recordMetric(\"MessageEventTime\", record.getEventTime().get().doubleValue());\n+            }\n+        }\n+\n+        return null;\n+    }\n+}\n+```\n+\n+## User config\n+\n+When you run or update Pulsar Functions that are created using SDK, you can pass arbitrary key/value pairs to them with the `--user-config` flag. Key/value pairs **must** be specified as JSON. \n+\n+This example passes a user configured key/value to a function.\n+\n+```bash\n+bin/pulsar-admin functions create \\\n+  --name word-filter \\\n+ --user-config '{\"forbidden-word\":\"rosebud\"}' \\\n+  # Other function configs\n+```\n+\n+### API\n+You can use the following APIs to get user-defined information for window functions.\n+#### getUserConfigMap\n+\n+`getUserConfigMap` API gets a map of all user-defined key/value configurations for the window function.\n+\n+\n+```java\n+/**\n+     * Get a map of all user-defined key/value configs for the function.\n+     *\n+     * @return The full map of user-defined config values\n+     */\n+    Map<String, Object> getUserConfigMap();\n+```\n+\n+\n+#### getUserConfigValue\n+\n+The `getUserConfigValue` API gets a user-defined key/value.\n+\n+```java\n+/**\n+     * Get any user-defined key/value.\n+     *\n+     * @param key The key\n+     * @return The Optional value specified by the user for that key.\n+     */\n+    Optional<Object> getUserConfigValue(String key);\n+```\n+\n+#### getUserConfigValueOrDefault\n+\n+The `getUserConfigValueOrDefault` API gets a user-defined key/value or a default value if none is present.\n+\n+```java\n+/**\n+     * Get any user-defined key/value or a default value if none is present.\n+     *\n+     * @param key\n+     * @param defaultValue\n+     * @return Either the user config value associated with a given key or a supplied default value\n+     */\n+    Object getUserConfigValueOrDefault(String key, Object defaultValue);\n+```\n+\n+### Example\n+\n+This example demonstrates how to access key/value pairs provided to Pulsar window functions.\n+\n+Java SDK context object enables you to access key/value pairs provided to Pulsar window functions via the command line (as JSON). \n+\n+>**Tip**\n+>\n+> For all key/value pairs passed to Java window functions, both the `key` and the `value` are `String`. To set the value to be a different type, you need to deserialize it from the `String` type.\n+\n+This example passes a key/value pair in a Java window function.\n+\n+```bash\n+bin/pulsar-admin functions create \\\n+   --user-config '{\"word-of-the-day\":\"verdure\"}' \\\n+  # Other function configs\n+ ```\n+\n+This example accesses values in a Java window function.\n+\n+The `UserConfigFunction` function logs the string `\"The word of the day is verdure\"` every time the function is invoked (which means every time a message arrives). The user config of `word-of-the-day` is changed **only** when the function is updated with a new config value via \n+multiple ways, such as the command line tool or REST API.\n+\n+```java\n+import org.apache.pulsar.functions.api.Context;\n+import org.apache.pulsar.functions.api.Function;\n+import org.slf4j.Logger;\n+\n+import java.util.Optional;\n+\n+public class UserConfigWindowFunction implements WindowFunction<String, String> {\n+    @Override\n+    public String process(Collection<Record<String>> input, WindowContext context) throws Exception {\n+        Optional<Object> whatToWrite = context.getUserConfigValue(\"WhatToWrite\");\n+        if (whatToWrite.get() != null) {\n+            return (String)whatToWrite.get();\n+        } else {\n+            return \"Not a nice way\";\n+        }\n+    }\n+\n+}\n+```\n+\n+If no value is provided, you can access the entire user config map or set a default value.\n+\n+```java\n+// Get the whole config map\n+Map<String, String> allConfigs = context.getUserConfigMap();\n+\n+// Get value or resort to default\n+String wotd = context.getUserConfigValueOrDefault(\"word-of-the-day\", \"perspicacious\");\n+```\n+\n+## Routing\n+\n+You can use the `context.publish()` interface to publish as many results as you want.\n+\n+This example shows that the `PublishFunction` class uses the built-in function in the context to publish messages to the `publishTopic` in a Java function.\n+\n+```java\n+public class PublishWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> input, WindowContext context) throws Exception {\n+        String publishTopic = (String) context.getUserConfigValueOrDefault(\"publish-topic\", \"publishtopic\");\n+        String output = String.format(\"%s!\", input);\n+        context.publish(publishTopic, output);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+\n+## State storage\n+\n+Pulsar window functions use [Apache BookKeeper](https://bookkeeper.apache.org) as a state storage interface. StreamNative Platform installation (including the standalone installation) includes the deployment of BookKeeper bookies.\n+\n+StreamNative Platform integrates with Apache BookKeeper `table service` to store the `state` for functions. For example, the `WordCount` function can store its `counters` state into BookKeeper table service via Pulsar Functions state APIs.\n+\n+States are key-value pairs, where the key is a string and the value is arbitrary binary data\u2014counters are stored as 64-bit big-endian binary values. Keys are scoped to an individual Pulsar Function and shared between instances of that function.\n+\n+Currently, Pulsar window functions expose Java API to access, update, and manage states. These APIs are available in the context object when you use Java SDK functions.\n+\n+| Java API| Description\n+|---|---\n+|`incrCounter`|Increases a built-in distributed counter referred by key.\n+|`getCounter`|Gets the counter value for the key.\n+|`putState`|Updates the state value for the key.\n+\n+You can use the following APIs to access, update, and manage states in Java window functions. \n+\n+#### incrCounter\n+\n+The `incrCounter` API increases a built-in distributed counter referred by key.\n+\n+Applications use the `incrCounter` API to change the counter of a given `key` by the given `amount`. If the `key` does not exist, a new key is created.\n+\n+```java\n+    /**\n+     * Increment the builtin distributed counter referred by key\n+     * @param key The name of the key\n+     * @param amount The amount to be incremented\n+     */\n+    void incrCounter(String key, long amount);\n+```\n+\n+#### getCounter\n+\n+The `getCounter` API gets the counter value for the key.\n+\n+Applications can use the `getCounter` API to retrieve the counter of a given `key` changed by the `incrCounter` API.", "originalCommit": "138f155309732ab30a13a82a10d63460a7aedc00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1NzEzOQ==", "url": "https://github.com/apache/pulsar/pull/7741#discussion_r465057139", "bodyText": "Where does this example belongs to?", "author": "Jennifer88huang", "createdAt": "2020-08-04T13:40:02Z", "path": "site2/docs/window-functions-context.md", "diffHunk": "@@ -0,0 +1,532 @@\n+---\n+id: window-functions-context\n+title: Window Functions Context\n+sidebar_label: \"Window Functions: Context\"\n+---\n+\n+Java SDK provides access to a **window context object** that can be used by a window function. This context object provides a wide variety of information and functionality for Pulsar window functions as below.\n+\n+- [Spec](#spec)\n+\n+  * Names of all input topics and the output topic associated with the function.\n+  * Tenant and namespace associated with the function.\n+  * Pulsar window function name, ID, and version.\n+  * ID of the Pulsar function instance running the window function.\n+  * Number of instances that invoke the window function.\n+  * Built-in type or custom class name of the output schema.\n+  \n+- [Logger](#logger)\n+  \n+  * Logger object used by the window function, which can be used to create window function log messages.\n+\n+- [User config](#user-config)\n+  \n+  * Access to arbitrary user configuration values.\n+\n+- [Routing](#routing)\n+  \n+  * Function to publish new messages to arbitrary topics.\n+\n+- [Metrics](#metrics)\n+  \n+  * Interface for recording metrics.\n+\n+- [State storage](#state-storage)\n+  \n+  * Interface for storing and retrieving state in [state storage](#state-storage).\n+\n+## Spec\n+\n+Spec contains the basic information of a function.\n+\n+### Get input topics\n+\n+The `getInputTopics` method gets the **name list** of all input topics.\n+\n+This example demonstrates how to get the name list of all input topics in a Java window function.\n+\n+```java\n+public class GetInputTopicsWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        Collection<String> inputTopics = context.getInputTopics();\n+        System.out.println(inputTopics);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+\n+### Get output topic\n+\n+The `getOutputTopic` method gets the **name of a topic** to which the message is sent.\n+\n+This example demonstrates how to get the name of an output topic in a Java window function.\n+\n+```java\n+public class GetOutputTopicWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String outputTopic = context.getOutputTopic();\n+        System.out.println(outputTopic);\n+\n+        return null;\n+    }\n+}\n+```\n+\n+### Get tenant\n+\n+The `getTenant` method gets the tenant name associated with the window function.\n+\n+This example demonstrates how to get the tenant name in a Java window function.\n+\n+```java\n+public class GetTenantWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String tenant = context.getTenant();\n+        System.out.println(tenant);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+\n+### Get namespace\n+\n+The `getNamespace` method gets the namespace associated with the window function.\n+\n+This example demonstrates how to get the namespace in a Java window function.\n+\n+```java\n+public class GetNamespaceWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String ns = context.getNamespace();\n+        System.out.println(ns);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+\n+### Get function name\n+\n+The `getFunctionName` method gets the window function name.\n+\n+This example demonstrates how to get the function name in a Java window function.\n+\n+```java\n+public class GetNameOfWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionName = context.getFunctionName();\n+        System.out.println(functionName);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+\n+### Get function ID\n+\n+The `getFunctionId` method gets the window function ID.\n+\n+This example demonstrates how to get the function ID in a Java window function.\n+\n+```java\n+public class GetFunctionIDWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionID = context.getFunctionId();\n+        System.out.println(functionID);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+\n+### Get function version\n+\n+The `getFunctionVersion` method gets the window function version.\n+\n+This example demonstrates how to get the function version of a Java window function.\n+\n+```java\n+public class GetVersionOfWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String functionVersion = context.getFunctionVersion();\n+        System.out.println(functionVersion);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+\n+### Get instance ID\n+\n+The `getInstanceId` method gets the instance ID of a window function.\n+\n+This example demonstrates how to get the instance ID in a Java window function.\n+\n+```java\n+public class GetInstanceIDWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        int instanceId = context.getInstanceId();\n+        System.out.println(instanceId);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+\n+### Get num instances\n+\n+The `getNumInstances` method gets the number of instances that invoke the window function.\n+\n+This example demonstrates how to get the number of instances in a Java window function.\n+\n+```java\n+public class GetNumInstancesWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        int numInstances = context.getNumInstances();\n+        System.out.println(numInstances);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+\n+### Get output schema type\n+\n+The `getOutputSchemaType` method gets the built-in type or custom class name of the output schema.\n+\n+This example demonstrates how to get the output schema type of a Java window function.\n+\n+```java\n+public class GetOutputSchemaTypeWindowFunction implements WindowFunction<String, Void> {\n+\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        String schemaType = context.getOutputSchemaType();\n+        System.out.println(schemaType);\n+\n+        return null;\n+    }\n+}\n+```\n+\n+## Logger\n+\n+Pulsar window functions using Java SDK has access to an [SLF4j](https://www.slf4j.org/) [`Logger`](https://www.slf4j.org/api/org/apache/log4j/Logger.html) object that can be used to produce logs at the chosen log level.\n+\n+This example logs either a `WARNING`-level or `INFO`-level log based on whether the incoming string contains the word `danger` or not in a Java function.\n+\n+```java\n+import java.util.Collection;\n+import org.apache.pulsar.functions.api.Record;\n+import org.apache.pulsar.functions.api.WindowContext;\n+import org.apache.pulsar.functions.api.WindowFunction;\n+import org.slf4j.Logger;\n+\n+public class LoggingWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+        Logger log = context.getLogger();\n+        for (Record<String> record : inputs) {\n+            log.info(record + \"-window-log\");\n+        }\n+        return null;\n+    }\n+\n+}\n+```\n+\n+If you need your function to produce logs, specify a log topic when creating or running the function. \n+\n+```bash\n+bin/pulsar-admin functions create \\\n+  --jar my-functions.jar \\\n+  --classname my.package.LoggingFunction \\\n+  --log-topic persistent://public/default/logging-function-logs \\\n+  # Other function configs\n+```\n+\n+You can access all logs produced by `LoggingFunction` via the `persistent://public/default/logging-function-logs` topic.\n+\n+## Metrics\n+\n+Pulsar window functions can publish arbitrary metrics to the metrics interface which can be queried. \n+\n+> **Note**\n+>\n+> If a Pulsar window function uses the language-native interface for Java, that function is not able to publish metrics and stats to Pulsar.\n+\n+You can record metrics using the context object on a per-key basis. \n+\n+This example sets a metric for the `process-count` key and a different metric for the `elevens-count` key every time the function processes a message in a Java function. \n+\n+```java\n+import java.util.Collection;\n+import org.apache.pulsar.functions.api.Record;\n+import org.apache.pulsar.functions.api.WindowContext;\n+import org.apache.pulsar.functions.api.WindowFunction;\n+\n+\n+/**\n+ * Example function that wants to keep track of\n+ * the event time of each message sent.\n+ */\n+public class UserMetricWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> inputs, WindowContext context) throws Exception {\n+\n+        for (Record<String> record : inputs) {\n+            if (record.getEventTime().isPresent()) {\n+                context.recordMetric(\"MessageEventTime\", record.getEventTime().get().doubleValue());\n+            }\n+        }\n+\n+        return null;\n+    }\n+}\n+```\n+\n+## User config\n+\n+When you run or update Pulsar Functions that are created using SDK, you can pass arbitrary key/value pairs to them with the `--user-config` flag. Key/value pairs **must** be specified as JSON. \n+\n+This example passes a user configured key/value to a function.\n+\n+```bash\n+bin/pulsar-admin functions create \\\n+  --name word-filter \\\n+ --user-config '{\"forbidden-word\":\"rosebud\"}' \\\n+  # Other function configs\n+```\n+\n+### API\n+You can use the following APIs to get user-defined information for window functions.\n+#### getUserConfigMap\n+\n+`getUserConfigMap` API gets a map of all user-defined key/value configurations for the window function.\n+\n+\n+```java\n+/**\n+     * Get a map of all user-defined key/value configs for the function.\n+     *\n+     * @return The full map of user-defined config values\n+     */\n+    Map<String, Object> getUserConfigMap();\n+```\n+\n+\n+#### getUserConfigValue\n+\n+The `getUserConfigValue` API gets a user-defined key/value.\n+\n+```java\n+/**\n+     * Get any user-defined key/value.\n+     *\n+     * @param key The key\n+     * @return The Optional value specified by the user for that key.\n+     */\n+    Optional<Object> getUserConfigValue(String key);\n+```\n+\n+#### getUserConfigValueOrDefault\n+\n+The `getUserConfigValueOrDefault` API gets a user-defined key/value or a default value if none is present.\n+\n+```java\n+/**\n+     * Get any user-defined key/value or a default value if none is present.\n+     *\n+     * @param key\n+     * @param defaultValue\n+     * @return Either the user config value associated with a given key or a supplied default value\n+     */\n+    Object getUserConfigValueOrDefault(String key, Object defaultValue);\n+```\n+\n+### Example\n+\n+This example demonstrates how to access key/value pairs provided to Pulsar window functions.\n+\n+Java SDK context object enables you to access key/value pairs provided to Pulsar window functions via the command line (as JSON). \n+\n+>**Tip**\n+>\n+> For all key/value pairs passed to Java window functions, both the `key` and the `value` are `String`. To set the value to be a different type, you need to deserialize it from the `String` type.\n+\n+This example passes a key/value pair in a Java window function.\n+\n+```bash\n+bin/pulsar-admin functions create \\\n+   --user-config '{\"word-of-the-day\":\"verdure\"}' \\\n+  # Other function configs\n+ ```\n+\n+This example accesses values in a Java window function.\n+\n+The `UserConfigFunction` function logs the string `\"The word of the day is verdure\"` every time the function is invoked (which means every time a message arrives). The user config of `word-of-the-day` is changed **only** when the function is updated with a new config value via \n+multiple ways, such as the command line tool or REST API.\n+\n+```java\n+import org.apache.pulsar.functions.api.Context;\n+import org.apache.pulsar.functions.api.Function;\n+import org.slf4j.Logger;\n+\n+import java.util.Optional;\n+\n+public class UserConfigWindowFunction implements WindowFunction<String, String> {\n+    @Override\n+    public String process(Collection<Record<String>> input, WindowContext context) throws Exception {\n+        Optional<Object> whatToWrite = context.getUserConfigValue(\"WhatToWrite\");\n+        if (whatToWrite.get() != null) {\n+            return (String)whatToWrite.get();\n+        } else {\n+            return \"Not a nice way\";\n+        }\n+    }\n+\n+}\n+```\n+\n+If no value is provided, you can access the entire user config map or set a default value.\n+\n+```java\n+// Get the whole config map\n+Map<String, String> allConfigs = context.getUserConfigMap();\n+\n+// Get value or resort to default\n+String wotd = context.getUserConfigValueOrDefault(\"word-of-the-day\", \"perspicacious\");\n+```\n+\n+## Routing\n+\n+You can use the `context.publish()` interface to publish as many results as you want.\n+\n+This example shows that the `PublishFunction` class uses the built-in function in the context to publish messages to the `publishTopic` in a Java function.\n+\n+```java\n+public class PublishWindowFunction implements WindowFunction<String, Void> {\n+    @Override\n+    public Void process(Collection<Record<String>> input, WindowContext context) throws Exception {\n+        String publishTopic = (String) context.getUserConfigValueOrDefault(\"publish-topic\", \"publishtopic\");\n+        String output = String.format(\"%s!\", input);\n+        context.publish(publishTopic, output);\n+\n+        return null;\n+    }\n+\n+}\n+```\n+\n+## State storage\n+\n+Pulsar window functions use [Apache BookKeeper](https://bookkeeper.apache.org) as a state storage interface. StreamNative Platform installation (including the standalone installation) includes the deployment of BookKeeper bookies.\n+\n+StreamNative Platform integrates with Apache BookKeeper `table service` to store the `state` for functions. For example, the `WordCount` function can store its `counters` state into BookKeeper table service via Pulsar Functions state APIs.\n+\n+States are key-value pairs, where the key is a string and the value is arbitrary binary data\u2014counters are stored as 64-bit big-endian binary values. Keys are scoped to an individual Pulsar Function and shared between instances of that function.\n+\n+Currently, Pulsar window functions expose Java API to access, update, and manage states. These APIs are available in the context object when you use Java SDK functions.\n+\n+| Java API| Description\n+|---|---\n+|`incrCounter`|Increases a built-in distributed counter referred by key.\n+|`getCounter`|Gets the counter value for the key.\n+|`putState`|Updates the state value for the key.\n+\n+You can use the following APIs to access, update, and manage states in Java window functions. \n+\n+#### incrCounter\n+\n+The `incrCounter` API increases a built-in distributed counter referred by key.\n+\n+Applications use the `incrCounter` API to change the counter of a given `key` by the given `amount`. If the `key` does not exist, a new key is created.\n+\n+```java\n+    /**\n+     * Increment the builtin distributed counter referred by key\n+     * @param key The name of the key\n+     * @param amount The amount to be incremented\n+     */\n+    void incrCounter(String key, long amount);\n+```\n+\n+#### getCounter\n+\n+The `getCounter` API gets the counter value for the key.\n+\n+Applications can use the `getCounter` API to retrieve the counter of a given `key` changed by the `incrCounter` API.\n+\n+```java\n+    /**\n+     * Retrieve the counter value for the key.\n+     *\n+     * @param key name of the key\n+     * @return the amount of the counter value for this key\n+     */\n+    long getCounter(String key);\n+```\n+\n+Except the `getCounter` API, Pulsar also exposes a general key/value API (`putState`) for functions to store general key/value state.\n+\n+#### putState\n+\n+The `putState` API updates the state value for the key.\n+\n+```java\n+    /**\n+     * Update the state value for the key.\n+     *\n+     * @param key name of the key\n+     * @param value state value of the key\n+     */\n+    void putState(String key, ByteBuffer value);\n+```\n+\n+### Example", "originalCommit": "138f155309732ab30a13a82a10d63460a7aedc00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "86d849bf985253adec2e5711855e30155c0ac755", "url": "https://github.com/apache/pulsar/commit/86d849bf985253adec2e5711855e30155c0ac755", "message": "fix comments\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>", "committedDate": "2020-08-04T13:47:01Z", "type": "commit"}, {"oid": "9057cc071d5f0caab8f1c69104266a2775271503", "url": "https://github.com/apache/pulsar/commit/9057cc071d5f0caab8f1c69104266a2775271503", "message": "fix comments\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>", "committedDate": "2020-08-05T01:10:57Z", "type": "commit"}, {"oid": "990e607d6d0d5d20f7267b186e31d5c7a16fddcf", "url": "https://github.com/apache/pulsar/commit/990e607d6d0d5d20f7267b186e31d5c7a16fddcf", "message": "fix comments\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>", "committedDate": "2020-08-05T01:45:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNTUxMA==", "url": "https://github.com/apache/pulsar/pull/7741#discussion_r465425510", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ---\n          \n          \n            \n            id: window-functions-context\n          \n          \n            \n            title: Window Functions Context\n          \n          \n            \n            sidebar_label: \"Window Functions: Context\"\n          \n          \n            \n            ---\n          \n          \n            \n            ---\n          \n          \n            \n            id: version-2.3.0-window-functions-context\n          \n          \n            \n            title: Window Functions Context\n          \n          \n            \n            sidebar_label: \"Window Functions: Context\"\n          \n          \n            \n            original_id: window-functions-context\n          \n          \n            \n            ---", "author": "Jennifer88huang", "createdAt": "2020-08-05T01:52:06Z", "path": "site2/website/versioned_docs/version-2.3.0/window-functions-context.md", "diffHunk": "@@ -0,0 +1,528 @@\n+---\n+id: window-functions-context\n+title: Window Functions Context\n+sidebar_label: \"Window Functions: Context\"\n+---", "originalCommit": "990e607d6d0d5d20f7267b186e31d5c7a16fddcf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNTU2OQ==", "url": "https://github.com/apache/pulsar/pull/7741#discussion_r465425569", "bodyText": "please check all similar cases.", "author": "Jennifer88huang", "createdAt": "2020-08-05T01:52:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNTUxMA=="}], "type": "inlineReview"}, {"oid": "4f52d3333a9fdb177dc7c84161bb2c5f5656bf30", "url": "https://github.com/apache/pulsar/commit/4f52d3333a9fdb177dc7c84161bb2c5f5656bf30", "message": "fix comments\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>", "committedDate": "2020-08-05T01:58:34Z", "type": "commit"}, {"oid": "ebeb08c1a0bd1205fe33b10c90184246ed3d31fd", "url": "https://github.com/apache/pulsar/commit/ebeb08c1a0bd1205fe33b10c90184246ed3d31fd", "message": "fix comments\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>", "committedDate": "2020-08-05T02:03:32Z", "type": "commit"}]}