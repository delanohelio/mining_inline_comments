{"pr_number": 7627, "pr_title": "[doc] add cpp client document for oauth2 authentication", "pr_createdAt": "2020-07-22T11:17:03Z", "pr_url": "https://github.com/apache/pulsar/pull/7627", "timeline": [{"oid": "bdc9cff85767395d7ea0df05bc28345233ab7e91", "url": "https://github.com/apache/pulsar/commit/bdc9cff85767395d7ea0df05bc28345233ab7e91", "message": "add cpp example, rename file oauth to oauth2", "committedDate": "2020-07-22T11:09:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNTcxNg==", "url": "https://github.com/apache/pulsar/pull/7627#discussion_r458905716", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### CPP\n          \n          \n            \n            ### C++ client", "author": "Huanli-Meng", "createdAt": "2020-07-22T16:04:43Z", "path": "site2/docs/security-oauth2.md", "diffHunk": "@@ -74,20 +74,42 @@ You can use the Oauth2 authentication provider with the following Pulsar clients\n You can use the factory method to configure authentication for Pulsar Java client.\n \n ```java\n+String issuerUrl = \"https://dev-kt-aa9ne.us.auth0.com/oauth/token\";\n+String credentialsUrl = \"file:///path/to/KeyFile.json\";\n+String audience = \"https://dev-kt-aa9ne.us.auth0.com/api/v2/\";\n+\n PulsarClient client = PulsarClient.builder()\n     .serviceUrl(\"pulsar://broker.example.com:6650/\")\n     .authentication(\n-        AuthenticationFactoryOAuth2.clientCredentials(this.issuerUrl, this.credentialsUrl, this.audience))\n+        AuthenticationFactoryOAuth2.clientCredentials(issuerUrl, credentialsUrl, audience))\n     .build();\n ```\n \n In addition, you can also use the encoded parameters to configure authentication for Pulsar Java client.\n \n ```java\n Authentication auth = AuthenticationFactory\n-    .create(AuthenticationOAuth2.class.getName(), \"{\"type\":\"client_credentials\",\"privateKey\":\"...\",\"issuerUrl\":\"...\",\"audience\":\"...\"}\");\n+    .create(AuthenticationOAuth2.class.getName(), \"{\"type\":\"client_credentials\",\"privateKey\":\"./key/path/..\",\"issuerUrl\":\"...\",\"audience\":\"...\"}\");\n PulsarClient client = PulsarClient.builder()\n     .serviceUrl(\"pulsar://broker.example.com:6650/\")\n     .authentication(auth)\n     .build();\n-```\n\\ No newline at end of file\n+```\n+\n+### CPP", "originalCommit": "bdc9cff85767395d7ea0df05bc28345233ab7e91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNjQ0Mg==", "url": "https://github.com/apache/pulsar/pull/7627#discussion_r458906442", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Cpp client is similar to java client. user need to provide parameters of issuerUrl, private_key(which is the credentials file path), and audience.\n          \n          \n            \n            The C++ client is similar to the Java client. You need to provide parameters of `issuerUrl`, `private_key` (the credentials file path), and the audience.", "author": "Huanli-Meng", "createdAt": "2020-07-22T16:05:48Z", "path": "site2/docs/security-oauth2.md", "diffHunk": "@@ -74,20 +74,42 @@ You can use the Oauth2 authentication provider with the following Pulsar clients\n You can use the factory method to configure authentication for Pulsar Java client.\n \n ```java\n+String issuerUrl = \"https://dev-kt-aa9ne.us.auth0.com/oauth/token\";\n+String credentialsUrl = \"file:///path/to/KeyFile.json\";\n+String audience = \"https://dev-kt-aa9ne.us.auth0.com/api/v2/\";\n+\n PulsarClient client = PulsarClient.builder()\n     .serviceUrl(\"pulsar://broker.example.com:6650/\")\n     .authentication(\n-        AuthenticationFactoryOAuth2.clientCredentials(this.issuerUrl, this.credentialsUrl, this.audience))\n+        AuthenticationFactoryOAuth2.clientCredentials(issuerUrl, credentialsUrl, audience))\n     .build();\n ```\n \n In addition, you can also use the encoded parameters to configure authentication for Pulsar Java client.\n \n ```java\n Authentication auth = AuthenticationFactory\n-    .create(AuthenticationOAuth2.class.getName(), \"{\"type\":\"client_credentials\",\"privateKey\":\"...\",\"issuerUrl\":\"...\",\"audience\":\"...\"}\");\n+    .create(AuthenticationOAuth2.class.getName(), \"{\"type\":\"client_credentials\",\"privateKey\":\"./key/path/..\",\"issuerUrl\":\"...\",\"audience\":\"...\"}\");\n PulsarClient client = PulsarClient.builder()\n     .serviceUrl(\"pulsar://broker.example.com:6650/\")\n     .authentication(auth)\n     .build();\n-```\n\\ No newline at end of file\n+```\n+\n+### CPP\n+\n+Cpp client is similar to java client. user need to provide parameters of issuerUrl, private_key(which is the credentials file path), and audience.", "originalCommit": "bdc9cff85767395d7ea0df05bc28345233ab7e91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5dd92ddf0d4111e1b68f1992e503f1b19d6de33e", "url": "https://github.com/apache/pulsar/commit/5dd92ddf0d4111e1b68f1992e503f1b19d6de33e", "message": "Update site2/docs/security-oauth2.md\n\nCo-authored-by: HuanliMeng <48120384+Huanli-Meng@users.noreply.github.com>", "committedDate": "2020-07-23T00:17:40Z", "type": "commit"}, {"oid": "27ac572801bfedd2d0bee2841e8b8002d9a58c2f", "url": "https://github.com/apache/pulsar/commit/27ac572801bfedd2d0bee2841e8b8002d9a58c2f", "message": "Update site2/docs/security-oauth2.md\n\nCo-authored-by: HuanliMeng <48120384+Huanli-Meng@users.noreply.github.com>", "committedDate": "2020-07-23T00:17:50Z", "type": "commit"}]}