{"pr_number": 8037, "pr_title": "Pending ack client implement", "pr_createdAt": "2020-09-11T10:21:37Z", "pr_url": "https://github.com/apache/pulsar/pull/8037", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMxNjY0NA==", "url": "https://github.com/apache/pulsar/pull/8037#discussion_r489316644", "bodyText": "Looks don't need to remove again.", "author": "codelipenghui", "createdAt": "2020-09-16T09:59:45Z", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/PersistentAcknowledgmentsGroupingTracker.java", "diffHunk": "@@ -326,6 +388,86 @@ public void flush() {\n             }\n         }\n \n+        if (!pendingIndividualTransactionAcks.isEmpty()) {\n+            if (Commands.peerSupportsMultiMessageAcknowledgment(cnx.getRemoteEndpointProtocolVersion())) {\n+                // We can send 1 single protobuf command with all individual acks\n+                while (true) {\n+                    Triple<Long, Long, MessageIdImpl> entry = pendingIndividualTransactionAcks.pollFirst();\n+                    if (entry == null) {\n+                        break;\n+                    }\n+\n+                    // if messageId is checked then all the chunked related to that msg also processed so, ack all of\n+                    // them\n+                    MessageIdImpl[] chunkMsgIds = this.consumer.unAckedChunckedMessageIdSequenceMap.get(entry.getRight());\n+                    long mostSigBits = entry.getLeft();\n+                    long leastSigBits = entry.getMiddle();\n+                    MessageIdImpl messageId = entry.getRight();\n+                    if (chunkMsgIds != null && chunkMsgIds.length > 1) {\n+                        for (MessageIdImpl cMsgId : chunkMsgIds) {\n+                            if (cMsgId != null) {\n+                                newAckCommand(consumer.consumerId, cMsgId, null, AckType.Individual, null, Collections.emptyMap(), cnx, false, mostSigBits, leastSigBits);\n+                            }\n+                        }\n+                        // messages will be acked so, remove checked message sequence\n+                        this.consumer.unAckedChunckedMessageIdSequenceMap.remove(messageId);\n+                    } else {\n+                        newAckCommand(consumer.consumerId, messageId, null, AckType.Individual, null, Collections.emptyMap(), cnx, false, mostSigBits, leastSigBits);\n+                    }\n+                }\n+            } else {\n+                // When talking to older brokers, send the acknowledgements individually\n+                while (true) {\n+                    Triple<Long, Long, MessageIdImpl> entry = pendingIndividualTransactionAcks.pollFirst();\n+                    if (entry == null) {\n+                        break;\n+                    }\n+\n+                    newAckCommand(consumer.consumerId, entry.getRight(), null, AckType.Individual,\n+                            null, Collections.emptyMap(), cnx, false, entry.getLeft(), entry.getMiddle());\n+                    shouldFlush = true;\n+                }\n+            }\n+        }\n+\n+        if (!pendingIndividualTransactionBatchIndexAcks.isEmpty()) {\n+            Iterator<Map.Entry<TransactionImpl, ConcurrentHashMap<MessageIdImpl, ConcurrentBitSetRecyclable>>> transactionIterator = pendingIndividualTransactionBatchIndexAcks.entrySet().iterator();\n+            while (transactionIterator.hasNext()) {\n+                Map.Entry<TransactionImpl, ConcurrentHashMap<MessageIdImpl, ConcurrentBitSetRecyclable>> transactionEntry = transactionIterator.next();\n+                TransactionImpl txn = transactionEntry.getKey();\n+                synchronized (txn) {\n+                    if (pendingIndividualTransactionBatchIndexAcks.containsKey(txn)) {\n+                        List<Triple<Long, Long, ConcurrentBitSetRecyclable>> messageIdBitSetList = new ArrayList<>();\n+                        transactionEntriesToAck.put(txn, messageIdBitSetList);\n+                        Iterator<Map.Entry<MessageIdImpl, ConcurrentBitSetRecyclable>> messageIdIterator = transactionEntry.getValue().entrySet().iterator();\n+                        while (messageIdIterator.hasNext()) {\n+                            Map.Entry<MessageIdImpl, ConcurrentBitSetRecyclable> messageIdEntry = messageIdIterator.next();\n+                            ConcurrentBitSetRecyclable concurrentBitSetRecyclable =\n+                                    ConcurrentBitSetRecyclable.create(messageIdEntry.getValue());\n+                            MessageIdImpl messageId = messageIdEntry.getKey();\n+                            messageIdBitSetList.add(Triple.of(messageId.ledgerId, messageId.entryId, concurrentBitSetRecyclable));\n+                            messageIdEntry.getValue().set(0, messageIdEntry.getValue().size());\n+                            messageIdIterator.remove();\n+                        }\n+                        transactionIterator.remove();\n+                        pendingIndividualTransactionBatchIndexAcks.remove(transactionEntry.getKey());", "originalCommit": "355e682ad64bf911bd1b865325d6d67c654e907b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4e692941f3b2fc938deebde875d6d51d546c2721", "url": "https://github.com/apache/pulsar/commit/4e692941f3b2fc938deebde875d6d51d546c2721", "message": "Merge", "committedDate": "2020-09-17T06:39:43Z", "type": "commit"}, {"oid": "9f4bab6f9fec2d2f6edb32402dc11e7fc517d29a", "url": "https://github.com/apache/pulsar/commit/9f4bab6f9fec2d2f6edb32402dc11e7fc517d29a", "message": "Revert \"no message\"\n\nThis reverts commit c665fe5fc70909858a15e22d9c8fa0965ffc114a.", "committedDate": "2020-09-17T06:41:23Z", "type": "commit"}, {"oid": "5e3617b8ae93a6bbe7ffe5b25eafb9954742b541", "url": "https://github.com/apache/pulsar/commit/5e3617b8ae93a6bbe7ffe5b25eafb9954742b541", "message": "pendingAck client implement", "committedDate": "2020-09-17T06:43:29Z", "type": "commit"}, {"oid": "7410a28dcb378fa296fdc55465038f56eda605d2", "url": "https://github.com/apache/pulsar/commit/7410a28dcb378fa296fdc55465038f56eda605d2", "message": "Add the logic for forbiding client send all batch message ack.", "committedDate": "2020-09-17T06:43:29Z", "type": "commit"}, {"oid": "d6babe9c62c4e76d0b9a12f8f5bbe441c2519e04", "url": "https://github.com/apache/pulsar/commit/d6babe9c62c4e76d0b9a12f8f5bbe441c2519e04", "message": "Fix test", "committedDate": "2020-09-17T06:43:29Z", "type": "commit"}, {"oid": "57347ca38d3c061b26151d7056505f2a80524b39", "url": "https://github.com/apache/pulsar/commit/57347ca38d3c061b26151d7056505f2a80524b39", "message": "Modify the acknowledgeCumulative judge", "committedDate": "2020-09-17T06:43:29Z", "type": "commit"}, {"oid": "c3d5f4b4a23f31194b2064c39a7103c3096c131d", "url": "https://github.com/apache/pulsar/commit/c3d5f4b4a23f31194b2064c39a7103c3096c131d", "message": "revocer txn message logic", "committedDate": "2020-09-17T06:43:29Z", "type": "commit"}, {"oid": "25f8908c8527dcf722af8aebd46160ac6c505c4f", "url": "https://github.com/apache/pulsar/commit/25f8908c8527dcf722af8aebd46160ac6c505c4f", "message": "Modify the logic", "committedDate": "2020-09-17T06:43:30Z", "type": "commit"}, {"oid": "a52942fbf87bd6aa9b398b776d16c3ee157b2417", "url": "https://github.com/apache/pulsar/commit/a52942fbf87bd6aa9b398b776d16c3ee157b2417", "message": "This don't need to remove twice.", "committedDate": "2020-09-17T06:43:30Z", "type": "commit"}, {"oid": "1eb03a9c15125730f8d5315dae76504ef4d7e9be", "url": "https://github.com/apache/pulsar/commit/1eb03a9c15125730f8d5315dae76504ef4d7e9be", "message": "Rebase", "committedDate": "2020-09-17T06:59:14Z", "type": "commit"}, {"oid": "91c49beb631e863a5c7c0d75ba9c8ba4703db74b", "url": "https://github.com/apache/pulsar/commit/91c49beb631e863a5c7c0d75ba9c8ba4703db74b", "message": "modify the batch index ack", "committedDate": "2020-09-17T12:39:18Z", "type": "commit"}, {"oid": "3e03d99acbf1e759db14332b3dcad5c8e2580aa5", "url": "https://github.com/apache/pulsar/commit/3e03d99acbf1e759db14332b3dcad5c8e2580aa5", "message": "Modity the cumulative ack", "committedDate": "2020-09-17T12:58:38Z", "type": "commit"}]}