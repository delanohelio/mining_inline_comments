{"pr_number": 6684, "pr_title": "Support function with format: Function<I, CompletableFuture<O>>", "pr_createdAt": "2020-04-07T08:37:49Z", "pr_url": "https://github.com/apache/pulsar/pull/6684", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3ODU5Nw==", "url": "https://github.com/apache/pulsar/pull/6684#discussion_r404978597", "bodyText": "This is not applying any backpressure on the consumer. If the function doesn't have a mechanism to self-throttle, it will just blow up the memory.", "author": "merlimat", "createdAt": "2020-04-07T17:16:34Z", "path": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstance.java", "diffHunk": "@@ -52,23 +53,49 @@ public JavaInstance(ContextImpl contextImpl, Object userClassObject) {\n         }\n     }\n \n-    public JavaExecutionResult handleMessage(Record<?> record, Object input) {\n+    public CompletableFuture<JavaExecutionResult> handleMessage(Record<?> record, Object input) {\n         if (context != null) {\n             context.setCurrentMessageContext(record);\n         }\n+\n+        final CompletableFuture<JavaExecutionResult> future = new CompletableFuture<>();\n         JavaExecutionResult executionResult = new JavaExecutionResult();\n+\n         try {\n             Object output;\n             if (function != null) {\n                 output = function.process(input, context);\n             } else {\n                 output = javaUtilFunction.apply(input);\n             }\n-            executionResult.setResult(output);\n+\n+            if (output instanceof CompletableFuture) {\n+                // Function is in format: Function<I, CompletableFuture<O>>\n+                ((CompletableFuture) output).whenComplete((obj, throwable) -> {", "originalCommit": "7966d4609897fa4877b19aa15bdf1c06de37465a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4Nzk4NQ==", "url": "https://github.com/apache/pulsar/pull/6684#discussion_r404987985", "bodyText": "shared the same concern here. I think we need to introduce a setting to limit the max outstanding items (results) being processed.", "author": "sijie", "createdAt": "2020-04-07T17:31:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3ODU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxNjQ4NQ==", "url": "https://github.com/apache/pulsar/pull/6684#discussion_r405216485", "bodyText": "Ok. Thanks for the suggestion.", "author": "jiazhai", "createdAt": "2020-04-08T02:06:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3ODU5Nw=="}], "type": "inlineReview"}, {"oid": "2cd02634eaad0c8fc5c96ff84a9855267c06a2bc", "url": "https://github.com/apache/pulsar/commit/2cd02634eaad0c8fc5c96ff84a9855267c06a2bc", "message": "support func: Function<I, CompletableFuture<O>>", "committedDate": "2020-05-06T12:58:10Z", "type": "commit"}, {"oid": "ae811a60514bd46df4cb6038adec4981fdaf9c33", "url": "https://github.com/apache/pulsar/commit/ae811a60514bd46df4cb6038adec4981fdaf9c33", "message": "add 2 examples", "committedDate": "2020-05-06T12:58:10Z", "type": "commit"}, {"oid": "cbed6065b1434f96498d80696b622fc1faec5388", "url": "https://github.com/apache/pulsar/commit/cbed6065b1434f96498d80696b622fc1faec5388", "message": "add limit to the max outstanding items", "committedDate": "2020-05-06T16:14:41Z", "type": "commit"}, {"oid": "cbed6065b1434f96498d80696b622fc1faec5388", "url": "https://github.com/apache/pulsar/commit/cbed6065b1434f96498d80696b622fc1faec5388", "message": "add limit to the max outstanding items", "committedDate": "2020-05-06T16:14:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIyODkxMQ==", "url": "https://github.com/apache/pulsar/pull/6684#discussion_r421228911", "bodyText": "Looks the blocking queue can be simplified by a semaphore", "author": "codelipenghui", "createdAt": "2020-05-07T04:15:47Z", "path": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstance.java", "diffHunk": "@@ -40,9 +45,18 @@\n     private Function function;\n     private java.util.function.Function javaUtilFunction;\n \n-    public JavaInstance(ContextImpl contextImpl, Object userClassObject) {\n+    // for Async function max out standing items\n+    private final InstanceConfig instanceConfig;\n+    private final Executor executor;\n+    @Getter\n+    private final LinkedBlockingQueue<CompletableFuture<Void>> pendingAsyncRequests;\n+\n+    public JavaInstance(ContextImpl contextImpl, Object userClassObject, InstanceConfig instanceConfig) {\n \n         this.context = contextImpl;\n+        this.instanceConfig = instanceConfig;\n+        this.executor = Executors.newSingleThreadExecutor();\n+        this.pendingAsyncRequests = new LinkedBlockingQueue<>(this.instanceConfig.getMaxPendingAsyncRequests());", "originalCommit": "cbed6065b1434f96498d80696b622fc1faec5388", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM5MDAyNw==", "url": "https://github.com/apache/pulsar/pull/6684#discussion_r426390027", "bodyText": "we could change it once there is some performance issue in the future.", "author": "jiazhai", "createdAt": "2020-05-18T06:15:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIyODkxMQ=="}], "type": "inlineReview"}]}