{"pr_number": 6325, "pr_title": "KeyValue schema support for pulsar sql", "pr_createdAt": "2020-02-14T02:26:58Z", "pr_url": "https://github.com/apache/pulsar/pull/6325", "timeline": [{"oid": "f29d6025f3b1c4db87aee40e9a082981e9394afc", "url": "https://github.com/apache/pulsar/commit/f29d6025f3b1c4db87aee40e9a082981e9394afc", "message": "add `KeyValueSchema` support for pulsar sql", "committedDate": "2020-02-14T01:25:10Z", "type": "commit"}, {"oid": "dd44892b32e23f7b8007caa01082df6665fde22f", "url": "https://github.com/apache/pulsar/commit/dd44892b32e23f7b8007caa01082df6665fde22f", "message": "add `KeyValueSchema` support for pulsar sql", "committedDate": "2020-02-14T01:58:56Z", "type": "commit"}, {"oid": "fcd5fa66c55d0da3736845367942a49525fbcd64", "url": "https://github.com/apache/pulsar/commit/fcd5fa66c55d0da3736845367942a49525fbcd64", "message": "Merge branch 'pulsar-sql-schema-kv' of https://github.com/gaoran10/pulsar into pulsar-sql-schema-kv\n\n\u0001 Conflicts:\n\u0001\tpulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarMetadata.java\n\u0001\tpulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarSplit.java\n\u0001\tpulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarSplitManager.java\n\u0001\tpulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java", "committedDate": "2020-02-14T02:05:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyODQ5MQ==", "url": "https://github.com/apache/pulsar/pull/6325#discussion_r379228491", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        int keyLength2 = dataPayload.readInt();\n          \n          \n            \n                        int keyLength = dataPayload.readInt();", "author": "codelipenghui", "createdAt": "2020-02-14T02:53:17Z", "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/KeyValueSchemaHandler.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.sql.presto;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.airlift.log.Logger;\n+import io.netty.buffer.ByteBuf;\n+import java.util.List;\n+import java.util.Objects;\n+import org.apache.pulsar.client.impl.schema.KeyValueSchemaInfo;\n+import org.apache.pulsar.common.schema.KeyValue;\n+import org.apache.pulsar.common.schema.KeyValueEncodingType;\n+import org.apache.pulsar.common.schema.SchemaInfo;\n+\n+\n+/**\n+ * Schema handler for payload in the KeyValue format.\n+ */\n+public class KeyValueSchemaHandler implements SchemaHandler {\n+\n+    private static final Logger log = Logger.get(KeyValueSchemaHandler.class);\n+\n+    private final static ObjectMapper objectMapper = new ObjectMapper();\n+\n+    private final List<PulsarColumnHandle> columnHandles;\n+\n+    private final SchemaHandler keySchemaHandler;\n+\n+    private final SchemaHandler valueSchemaHandler;\n+\n+    private KeyValueEncodingType keyValueEncodingType;\n+\n+    public KeyValueSchemaHandler(SchemaInfo schemaInfo, List<PulsarColumnHandle> columnHandles) {\n+        this.columnHandles = columnHandles;\n+        KeyValue<SchemaInfo, SchemaInfo> kvSchemaInfo = KeyValueSchemaInfo.decodeKeyValueSchemaInfo(schemaInfo);\n+        keySchemaHandler = PulsarSchemaHandlers.newPulsarSchemaHandler(kvSchemaInfo.getKey(), columnHandles);\n+        valueSchemaHandler = PulsarSchemaHandlers.newPulsarSchemaHandler(kvSchemaInfo.getValue(), columnHandles);\n+        keyValueEncodingType = KeyValueSchemaInfo.decodeKeyValueEncodingType(schemaInfo);\n+    }\n+\n+    @Override\n+    public Object deserialize(ByteBuf payload) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object deserialize(ByteBuf keyPayload, ByteBuf dataPayload) {\n+        ByteBuf keyByteBuf;\n+        ByteBuf valueByteBuf;\n+        if (Objects.equals(keyValueEncodingType, KeyValueEncodingType.INLINE)) {\n+            dataPayload.resetReaderIndex();\n+            int keyLength2 = dataPayload.readInt();", "originalCommit": "fcd5fa66c55d0da3736845367942a49525fbcd64", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyODUyNA==", "url": "https://github.com/apache/pulsar/pull/6325#discussion_r379228524", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        int valueLength2 = dataPayload.readInt();\n          \n          \n            \n                        int valueLength = dataPayload.readInt();", "author": "codelipenghui", "createdAt": "2020-02-14T02:53:27Z", "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/KeyValueSchemaHandler.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.sql.presto;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.airlift.log.Logger;\n+import io.netty.buffer.ByteBuf;\n+import java.util.List;\n+import java.util.Objects;\n+import org.apache.pulsar.client.impl.schema.KeyValueSchemaInfo;\n+import org.apache.pulsar.common.schema.KeyValue;\n+import org.apache.pulsar.common.schema.KeyValueEncodingType;\n+import org.apache.pulsar.common.schema.SchemaInfo;\n+\n+\n+/**\n+ * Schema handler for payload in the KeyValue format.\n+ */\n+public class KeyValueSchemaHandler implements SchemaHandler {\n+\n+    private static final Logger log = Logger.get(KeyValueSchemaHandler.class);\n+\n+    private final static ObjectMapper objectMapper = new ObjectMapper();\n+\n+    private final List<PulsarColumnHandle> columnHandles;\n+\n+    private final SchemaHandler keySchemaHandler;\n+\n+    private final SchemaHandler valueSchemaHandler;\n+\n+    private KeyValueEncodingType keyValueEncodingType;\n+\n+    public KeyValueSchemaHandler(SchemaInfo schemaInfo, List<PulsarColumnHandle> columnHandles) {\n+        this.columnHandles = columnHandles;\n+        KeyValue<SchemaInfo, SchemaInfo> kvSchemaInfo = KeyValueSchemaInfo.decodeKeyValueSchemaInfo(schemaInfo);\n+        keySchemaHandler = PulsarSchemaHandlers.newPulsarSchemaHandler(kvSchemaInfo.getKey(), columnHandles);\n+        valueSchemaHandler = PulsarSchemaHandlers.newPulsarSchemaHandler(kvSchemaInfo.getValue(), columnHandles);\n+        keyValueEncodingType = KeyValueSchemaInfo.decodeKeyValueEncodingType(schemaInfo);\n+    }\n+\n+    @Override\n+    public Object deserialize(ByteBuf payload) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object deserialize(ByteBuf keyPayload, ByteBuf dataPayload) {\n+        ByteBuf keyByteBuf;\n+        ByteBuf valueByteBuf;\n+        if (Objects.equals(keyValueEncodingType, KeyValueEncodingType.INLINE)) {\n+            dataPayload.resetReaderIndex();\n+            int keyLength2 = dataPayload.readInt();\n+            keyByteBuf = dataPayload.readBytes(keyLength2);\n+\n+            int valueLength2 = dataPayload.readInt();", "originalCommit": "fcd5fa66c55d0da3736845367942a49525fbcd64", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzMTk0MQ==", "url": "https://github.com/apache/pulsar/pull/6325#discussion_r379231941", "bodyText": "It's better to use a since enum to indicate the column is key column or value column for KeyValueSchema.", "author": "codelipenghui", "createdAt": "2020-02-14T03:11:45Z", "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarColumnHandle.java", "diffHunk": "@@ -58,6 +59,16 @@\n \n     private final Integer[] positionIndices;\n \n+    /**\n+     * True if the column is key column handler for KeyValueSchema.\n+     */\n+    private final boolean key;\n+\n+    /**\n+     * True if the column is value column handler for KeyValueSchema.\n+     */\n+    private final boolean value;\n+", "originalCommit": "fcd5fa66c55d0da3736845367942a49525fbcd64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwODcwNA==", "url": "https://github.com/apache/pulsar/pull/6325#discussion_r379708704", "bodyText": "I'll use an enum instead to them", "author": "gaoran10", "createdAt": "2020-02-15T01:47:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzMTk0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNTQ1MQ==", "url": "https://github.com/apache/pulsar/pull/6325#discussion_r379235451", "bodyText": "Maybe this can be handled in PulsarColumnMetadata.class. If the PulsarColumnMetadata known the column is key or value, straightforward rename it.", "author": "codelipenghui", "createdAt": "2020-02-14T03:29:32Z", "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarMetadata.java", "diffHunk": "@@ -398,6 +408,50 @@ private ConnectorTableMetadata getTableMetadata(SchemaTableName schemaTableName,\n         }\n          return builder.build();\n     }\n+\n+    static List<ColumnMetadata> getPulsarColumnsFromKeyValueSchema(TopicName topicName,\n+                                                                   SchemaInfo schemaInfo,\n+                                                                   boolean withInternalColumns) {\n+        ImmutableList.Builder<ColumnMetadata> builder = ImmutableList.builder();\n+        KeyValue<SchemaInfo, SchemaInfo> kvSchemaInfo = KeyValueSchemaInfo.decodeKeyValueSchemaInfo(schemaInfo);\n+        SchemaInfo keySchemaInfo = kvSchemaInfo.getKey();\n+        List<ColumnMetadata> keyColumnMetadataList = getPulsarColumns(topicName, keySchemaInfo, false,\n+                true, false);\n+        renameColumnName(keyColumnMetadataList, \"key.\");\n+        builder.addAll(keyColumnMetadataList);\n+\n+        SchemaInfo valueSchemaInfo = kvSchemaInfo.getValue();\n+        List<ColumnMetadata> valueColumnMetadataList = getPulsarColumns(topicName, valueSchemaInfo, false,\n+                false, true);\n+        renameColumnName(valueColumnMetadataList, \"value.\");\n+        builder.addAll(valueColumnMetadataList);\n+\n+        if (withInternalColumns) {\n+            PulsarInternalColumn.getInternalFields()\n+                    .forEach(pulsarInternalColumn -> builder.add(pulsarInternalColumn.getColumnMetadata(false)));\n+        }\n+        return builder.build();\n+    }\n+\n+    private static void renameColumnName(List<ColumnMetadata> columnMetadataList, String namePrefix) {\n+        Class<PulsarColumnMetadata> clazz = PulsarColumnMetadata.class;\n+        Class<ColumnMetadata> superClazz = ColumnMetadata.class;\n+        Field nameField = null;\n+        Field nameWithCaseField = null;\n+        try {\n+            nameField = superClazz.getDeclaredField(\"name\");\n+            nameField.setAccessible(true);\n+            nameWithCaseField = clazz.getDeclaredField(\"nameWithCase\");\n+            nameWithCaseField.setAccessible(true);\n+            for (ColumnMetadata columnMetadata : columnMetadataList) {\n+                nameField.set(columnMetadata, namePrefix + columnMetadata.getName());\n+                nameWithCaseField.set(columnMetadata, columnMetadata.getName());\n+            }", "originalCommit": "fcd5fa66c55d0da3736845367942a49525fbcd64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwODYxOA==", "url": "https://github.com/apache/pulsar/pull/6325#discussion_r379708618", "bodyText": "Good idea!", "author": "gaoran10", "createdAt": "2020-02-15T01:46:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNTQ1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNjkzOA==", "url": "https://github.com/apache/pulsar/pull/6325#discussion_r379236938", "bodyText": "We can get the keyBytes by  message.getKeyBytes(), so that you don't need to decode a String by base64 decoder.", "author": "codelipenghui", "createdAt": "2020-02-14T03:38:07Z", "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarRecordCursor.java", "diffHunk": "@@ -418,7 +421,16 @@ public boolean advanceNextPosition() {\n         //start time for deseralizing record\n         metricsTracker.start_RECORD_DESERIALIZE_TIME();\n \n-        currentRecord = this.schemaHandler.deserialize(this.currentMessage.getData());\n+        if (this.schemaHandler instanceof KeyValueSchemaHandler) {\n+            ByteBuf keyByteBuf = null;\n+            if (this.currentMessage.getKey().isPresent()) {\n+                keyByteBuf = Unpooled.wrappedBuffer(\n+                        Base64.getDecoder().decode(this.currentMessage.getKey().get()));\n+            }", "originalCommit": "fcd5fa66c55d0da3736845367942a49525fbcd64", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0a5f532676951fdfa4fd682216dd49a31a67c9c8", "url": "https://github.com/apache/pulsar/commit/0a5f532676951fdfa4fd682216dd49a31a67c9c8", "message": "fix", "committedDate": "2020-02-14T18:14:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwMjEyMw==", "url": "https://github.com/apache/pulsar/pull/6325#discussion_r379702123", "bodyText": "It's better to named isKeyBase64Encoded().", "author": "codelipenghui", "createdAt": "2020-02-15T00:44:04Z", "path": "pulsar-common/src/main/java/org/apache/pulsar/common/api/raw/RawMessage.java", "diffHunk": "@@ -101,4 +101,19 @@\n      * @return the key of the message\n      */\n     Optional<String> getKey();\n+\n+    /**\n+     * Get byteBuf of the key.\n+     *\n+     * @return the byte array with the key payload\n+     */\n+    Optional<ByteBuf> getKeyBytes();\n+\n+    /**\n+     * Check whether the key has been base64 encoded.\n+     *\n+     * @return true if the key is base64 encoded, false otherwise\n+     */\n+    boolean hasBase64EncodedKey();", "originalCommit": "0a5f532676951fdfa4fd682216dd49a31a67c9c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwNTAxNQ==", "url": "https://github.com/apache/pulsar/pull/6325#discussion_r379705015", "bodyText": "If exception cause when reading schema properties, we'd better throw a runtime exception.", "author": "codelipenghui", "createdAt": "2020-02-15T01:07:40Z", "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarSplit.java", "diffHunk": "@@ -95,7 +97,23 @@ public PulsarSplit(\n         this.tupleDomain = requireNonNull(tupleDomain, \"tupleDomain is null\");\n         this.startPosition = PositionImpl.get(startPositionLedgerId, startPositionEntryId);\n         this.endPosition = PositionImpl.get(endPositionLedgerId, endPositionEntryId);\n+        this.schemaInfoProperties = schemaInfoProperties;\n         this.offloadPolicies = offloadPolicies;\n+\n+        SchemaInfo schemaInfoTemp;\n+        try {\n+            ObjectMapper objectMapper = new ObjectMapper();\n+            schemaInfoTemp = SchemaInfo.builder()\n+                    .name(originSchemaName)\n+                    .type(schemaType)\n+                    .schema(schema.getBytes(\"ISO8859-1\"))\n+                    .properties(objectMapper.readValue(schemaInfoProperties, Map.class))\n+                    .build();\n+        } catch (Exception e) {\n+            log.error(\"Create schemaInfo failed!\", e);\n+            schemaInfoTemp = SchemaInfo.builder().build();", "originalCommit": "0a5f532676951fdfa4fd682216dd49a31a67c9c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "105770625f66f188ae495274617e8f2ee552ed34", "url": "https://github.com/apache/pulsar/commit/105770625f66f188ae495274617e8f2ee552ed34", "message": "fix", "committedDate": "2020-02-15T01:54:54Z", "type": "commit"}, {"oid": "be97bf29692cffd5d474e9051fca4c42b09ab7a2", "url": "https://github.com/apache/pulsar/commit/be97bf29692cffd5d474e9051fca4c42b09ab7a2", "message": "fix", "committedDate": "2020-02-15T02:34:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg3NDU5Mw==", "url": "https://github.com/apache/pulsar/pull/6325#discussion_r379874593", "bodyText": "I don't think we need to add value. for value. We should keep the behavior consistent between messages with keys and without keys.", "author": "sijie", "createdAt": "2020-02-16T04:32:56Z", "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarColumnMetadata.java", "diffHunk": "@@ -32,15 +33,20 @@\n     private String nameWithCase;\n     private String[] fieldNames;\n     private Integer[] positionIndices;\n+    private PulsarColumnHandle.HandleKeyValueType handleKeyValueType;\n+    public final static String KEY_SCHEMA_COLUMN_PREFIX = \"key.\";\n+    public final static String VALUE_SCHEMA_COLUMN_PREFIX = \"value.\";", "originalCommit": "be97bf29692cffd5d474e9051fca4c42b09ab7a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg3NTA4Ng==", "url": "https://github.com/apache/pulsar/pull/6325#discussion_r379875086", "bodyText": "Yes, it\u2019s better! \ud83d\udc4d", "author": "gaoran10", "createdAt": "2020-02-16T04:47:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg3NDU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5MTg2NA==", "url": "https://github.com/apache/pulsar/pull/6325#discussion_r379891864", "bodyText": "Maybe we could use __key as the prefix of the key field name, this makes it easier to distinguish from the ordinary field name.", "author": "gaoran10", "createdAt": "2020-02-16T10:20:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg3NDU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzOTg0OQ==", "url": "https://github.com/apache/pulsar/pull/6325#discussion_r379939849", "bodyText": "Yes. +1", "author": "sijie", "createdAt": "2020-02-16T22:38:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg3NDU5Mw=="}], "type": "inlineReview"}, {"oid": "35a7056278a762f8c2fc0be51c3232495ebd468b", "url": "https://github.com/apache/pulsar/commit/35a7056278a762f8c2fc0be51c3232495ebd468b", "message": "modify prefix of the key schema filed name to '__key', remove the prefix of the value schema filed name.", "committedDate": "2020-02-16T10:18:13Z", "type": "commit"}, {"oid": "e2a92268791f0c3f8bb43aacf16105f23c73fea6", "url": "https://github.com/apache/pulsar/commit/e2a92268791f0c3f8bb43aacf16105f23c73fea6", "message": "test fix", "committedDate": "2020-02-17T00:58:59Z", "type": "commit"}]}