{"pr_number": 7904, "pr_title": "Add docs of package Pulsar Functions", "pr_createdAt": "2020-08-26T06:25:49Z", "pr_url": "https://github.com/apache/pulsar/pull/7904", "timeline": [{"oid": "2f189024c687c4e55684ce84118aa5ab500b585b", "url": "https://github.com/apache/pulsar/commit/2f189024c687c4e55684ce84118aa5ab500b585b", "message": "Add docs of package Pulsar Functions\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>", "committedDate": "2020-08-26T06:19:37Z", "type": "commit"}, {"oid": "93317cf12d9db31e36f2e0e02d980ecd71bf0ef5", "url": "https://github.com/apache/pulsar/commit/93317cf12d9db31e36f2e0e02d980ecd71bf0ef5", "message": "add zip file for python function\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>", "committedDate": "2020-08-27T06:10:10Z", "type": "commit"}, {"oid": "4bca8e598d627514093553cd69772e5b0062bf81", "url": "https://github.com/apache/pulsar/commit/4bca8e598d627514093553cd69772e5b0062bf81", "message": "add pip for python function\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>", "committedDate": "2020-08-27T07:12:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIxMTE3MA==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r478211170", "bodyText": "Pulsar docs start with heading 2.", "author": "Jennifer88huang", "createdAt": "2020-08-27T07:24:45Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+# Prerequisite", "originalCommit": "4bca8e598d627514093553cd69772e5b0062bf81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIxMTU0MQ==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r478211541", "bodyText": "start  up --> start\nCheck all similar cases in this md file.", "author": "Jennifer88huang", "createdAt": "2020-08-27T07:25:24Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+# Prerequisite\n+\n+Before running a Pulsar function, you need to start up Pulsar.", "originalCommit": "4bca8e598d627514093553cd69772e5b0062bf81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIxMjczMw==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r478212733", "bodyText": "remove \"please\".\nFor details, refer to https://developers.google.com/style/tone#politeness-and-use-of-please", "author": "Jennifer88huang", "createdAt": "2020-08-27T07:27:47Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+# Prerequisite\n+\n+Before running a Pulsar function, you need to start up Pulsar.\n+\n+## Run Pulsar cluster in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts up or not, use the command `docker ps`.\n+\n+## Run Pulsar cluster in k8s\n+\n+For how to deploy Pulsar cluster in the k8s environment, please refer to [here](https://pulsar.apache.org/docs/en/helm-overview/).", "originalCommit": "4bca8e598d627514093553cd69772e5b0062bf81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIxMzA1NQ==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r478213055", "bodyText": "the link is not correct.", "author": "Jennifer88huang", "createdAt": "2020-08-27T07:28:25Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+# Prerequisite\n+\n+Before running a Pulsar function, you need to start up Pulsar.\n+\n+## Run Pulsar cluster in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts up or not, use the command `docker ps`.\n+\n+## Run Pulsar cluster in k8s\n+\n+For how to deploy Pulsar cluster in the k8s environment, please refer to [here](https://pulsar.apache.org/docs/en/helm-overview/).\n+\n+\n+# Java \n+\n+This example demonstrates how to package a function in Java.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run Pulsar cluster in Docker) successfully.", "originalCommit": "4bca8e598d627514093553cd69772e5b0062bf81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIxODAzNg==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r478218036", "bodyText": "run a standalone Pulsar in Docker or run Pulsar cluster in Docker?\nHow about run Pulsar in K8s? Do the following steps work for K8s?", "author": "Jennifer88huang", "createdAt": "2020-08-27T07:37:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIxMzA1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIxNDA1MQ==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r478214051", "bodyText": "descriptions --> description", "author": "Jennifer88huang", "createdAt": "2020-08-27T07:30:17Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+# Prerequisite\n+\n+Before running a Pulsar function, you need to start up Pulsar.\n+\n+## Run Pulsar cluster in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts up or not, use the command `docker ps`.\n+\n+## Run Pulsar cluster in k8s\n+\n+For how to deploy Pulsar cluster in the k8s environment, please refer to [here](https://pulsar.apache.org/docs/en/helm-overview/).\n+\n+\n+# Java \n+\n+This example demonstrates how to package a function in Java.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run Pulsar cluster in Docker) successfully.\n+\n+\n+1. Create a new maven project with a pom file.\n+\n+    > **Tip**\n+    >\n+    > `mainClass` is your package name.\n+\n+    ```text\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>java-function</groupId>\n+        <artifactId>java-function</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.pulsar</groupId>\n+                <artifactId>pulsar-functions-api</artifactId>\n+                <version>2.6.0</version>\n+            </dependency>\n+        </dependencies>\n+\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <configuration>\n+                        <appendAssemblyId>false</appendAssemblyId>\n+                        <descriptorRefs>\n+                            <descriptorRef>jar-with-dependencies</descriptorRef>\n+                        </descriptorRefs>\n+                        <archive>\n+                        <manifest>\n+                            <mainClass>org.example.test.ExclamationFunction</mainClass>\n+                        </manifest>\n+                    </archive>\n+                    </configuration>\n+                    <executions>\n+                        <execution>\n+                            <id>make-assembly</id>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>assembly</goal>\n+                            </goals>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-compiler-plugin</artifactId>\n+                    <configuration>\n+                        <source>8</source>\n+                        <target>8</target>\n+                    </configuration>\n+                </plugin>\n+            </plugins>\n+        </build>\n+\n+    </project>\n+    ```\n+\n+2. Write a Java function.\n+\n+    ```\n+    package org.example.test;\n+\n+    import java.util.function.Function;\n+\n+    public class ExclamationFunction implements Function<String, String> {\n+        @Override\n+        public String apply(String s) {\n+            return \"This is my function!\";\n+        }\n+    }\n+    ```\n+\n+    > **Tip**\n+    >\n+    > For the package imported, you can use one of the following interfaces:\n+    >\n+    > - Function interface provided by Java 8: `java.util.function.Function`\n+    >\n+    > - Pulsar Function interface: `org.apache.pulsar.functions.api.Function`\n+    >\n+    > The main difference between the two interfaces is that the `org.apache.pulsar.functions.api.Function` interface provides the context interface. When you write a function and want to interact with it, you can use context to obtain a wide variety of information and functionality for Pulsar Functions.\n+    > \n+    > **Example** \n+    >\n+    > This example uses `org.apache.pulsar.functions.api.Function` interface with context.\n+    >\n+    > ```\n+    > package org.example.functions;\n+    >\n+    > import org.apache.pulsar.functions.api.Context;\n+    > import org.apache.pulsar.functions.api.Function;\n+    > \n+    > import java.util.Arrays;\n+    >\n+    > public class WordCountFunction implements Function<String, Void> {\n+    >    // This function is invoked every time a message is published to the input topic\n+    >    @Override\n+    >    public Void process(String input, Context context) throws Exception {\n+    >       Arrays.asList(input.split(\" \")).forEach(word -> {\n+    >           String counterKey = word.toLowerCase();\n+    >           context.incrCounter(counterKey, 1);\n+    >        });\n+    >       return null;\n+    >   }\n+    > }\n+    > ```\n+\n+3. Package the Java function.\n+\n+    ```bash\n+    mvn package\n+    ```\n+\n+    After the Java function is packaged, a `target` directory is automatically created. Open the `target` directory to see if there is a jar package similar to `java-function-1.0-SNAPSHOT.jar`.\n+\n+\n+4.  Run the Java function.\n+\n+     (1) Copy the packaged jar file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of java-function-1.0-SNAPSHOT.jar>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Java function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --jar java-function-1.0-SNAPSHOT.jar \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name JavaFunction\n+    ```\n+\n+    The following log indicates that the Java function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the descriptions about the parameters (for example, `--classname`, `--jar`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).", "originalCommit": "4bca8e598d627514093553cd69772e5b0062bf81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIxNDU3OQ==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r478214579", "bodyText": "the link is not correct, check all similar cases.", "author": "Jennifer88huang", "createdAt": "2020-08-27T07:31:15Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+# Prerequisite\n+\n+Before running a Pulsar function, you need to start up Pulsar.\n+\n+## Run Pulsar cluster in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts up or not, use the command `docker ps`.\n+\n+## Run Pulsar cluster in k8s\n+\n+For how to deploy Pulsar cluster in the k8s environment, please refer to [here](https://pulsar.apache.org/docs/en/helm-overview/).\n+\n+\n+# Java \n+\n+This example demonstrates how to package a function in Java.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run Pulsar cluster in Docker) successfully.\n+\n+\n+1. Create a new maven project with a pom file.\n+\n+    > **Tip**\n+    >\n+    > `mainClass` is your package name.\n+\n+    ```text\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>java-function</groupId>\n+        <artifactId>java-function</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.pulsar</groupId>\n+                <artifactId>pulsar-functions-api</artifactId>\n+                <version>2.6.0</version>\n+            </dependency>\n+        </dependencies>\n+\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <configuration>\n+                        <appendAssemblyId>false</appendAssemblyId>\n+                        <descriptorRefs>\n+                            <descriptorRef>jar-with-dependencies</descriptorRef>\n+                        </descriptorRefs>\n+                        <archive>\n+                        <manifest>\n+                            <mainClass>org.example.test.ExclamationFunction</mainClass>\n+                        </manifest>\n+                    </archive>\n+                    </configuration>\n+                    <executions>\n+                        <execution>\n+                            <id>make-assembly</id>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>assembly</goal>\n+                            </goals>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-compiler-plugin</artifactId>\n+                    <configuration>\n+                        <source>8</source>\n+                        <target>8</target>\n+                    </configuration>\n+                </plugin>\n+            </plugins>\n+        </build>\n+\n+    </project>\n+    ```\n+\n+2. Write a Java function.\n+\n+    ```\n+    package org.example.test;\n+\n+    import java.util.function.Function;\n+\n+    public class ExclamationFunction implements Function<String, String> {\n+        @Override\n+        public String apply(String s) {\n+            return \"This is my function!\";\n+        }\n+    }\n+    ```\n+\n+    > **Tip**\n+    >\n+    > For the package imported, you can use one of the following interfaces:\n+    >\n+    > - Function interface provided by Java 8: `java.util.function.Function`\n+    >\n+    > - Pulsar Function interface: `org.apache.pulsar.functions.api.Function`\n+    >\n+    > The main difference between the two interfaces is that the `org.apache.pulsar.functions.api.Function` interface provides the context interface. When you write a function and want to interact with it, you can use context to obtain a wide variety of information and functionality for Pulsar Functions.\n+    > \n+    > **Example** \n+    >\n+    > This example uses `org.apache.pulsar.functions.api.Function` interface with context.\n+    >\n+    > ```\n+    > package org.example.functions;\n+    >\n+    > import org.apache.pulsar.functions.api.Context;\n+    > import org.apache.pulsar.functions.api.Function;\n+    > \n+    > import java.util.Arrays;\n+    >\n+    > public class WordCountFunction implements Function<String, Void> {\n+    >    // This function is invoked every time a message is published to the input topic\n+    >    @Override\n+    >    public Void process(String input, Context context) throws Exception {\n+    >       Arrays.asList(input.split(\" \")).forEach(word -> {\n+    >           String counterKey = word.toLowerCase();\n+    >           context.incrCounter(counterKey, 1);\n+    >        });\n+    >       return null;\n+    >   }\n+    > }\n+    > ```\n+\n+3. Package the Java function.\n+\n+    ```bash\n+    mvn package\n+    ```\n+\n+    After the Java function is packaged, a `target` directory is automatically created. Open the `target` directory to see if there is a jar package similar to `java-function-1.0-SNAPSHOT.jar`.\n+\n+\n+4.  Run the Java function.\n+\n+     (1) Copy the packaged jar file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of java-function-1.0-SNAPSHOT.jar>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Java function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --jar java-function-1.0-SNAPSHOT.jar \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name JavaFunction\n+    ```\n+\n+    The following log indicates that the Java function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the descriptions about the parameters (for example, `--classname`, `--jar`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Java function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+# Python \n+\n+Python Function supports the following three forms:\n+\n+- One python file\n+- ZIP file\n+- PIP\n+\n+## One python file\n+\n+This example demonstrates how to package a function by **one python file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run Pulsar cluster in Docker) successfully.\n+\n+1. Write a Python function.\n+\n+    ```\n+    from pulsar import Function //  import the Function module from Pulsar\n+\n+    # The classic ExclamationFunction that appends an exclamation at the end\n+    # of the input\n+    class ExclamationFunction(Function):\n+      def __init__(self):\n+        pass\n+\n+      def process(self, input, context):\n+        return input + '!'\n+    ```\n+\n+    In this example, when you write a Python function, you need to inherit the Function class and implement the `process()` method.\n+\n+    `process()` mainly has two parameters: \n+\n+    - `input` represents your input.\n+  \n+    - `context` represents an interface exposed by the Pulsar Function. You can get the attributes in the Python function based on the provided context object.\n+\n+2. Install a Python client.\n+\n+    The implementation of a Python function depends on the Python client, so before deploying a Python function, you need to install the corresponding version of the Python client. \n+\n+    ```bash\n+    pip install python-client==2.6.0\n+    ```\n+\n+3. Run the Python Function.\n+\n+    (1) Copy the Python function file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of Python function file>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Python function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --py <path of Python Function file> \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name PythonFunction\n+    ```\n+\n+    The following log indicates that the Python function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the descriptions about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Python function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+## ZIP file\n+\n+This example demonstrates how to package a function by **ZIP file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run Pulsar cluster in Docker) successfully.", "originalCommit": "4bca8e598d627514093553cd69772e5b0062bf81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIxOTEwMg==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r478219102", "bodyText": "same questions with the above note.", "author": "Jennifer88huang", "createdAt": "2020-08-27T07:39:42Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+# Prerequisite\n+\n+Before running a Pulsar function, you need to start up Pulsar.\n+\n+## Run Pulsar cluster in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts up or not, use the command `docker ps`.\n+\n+## Run Pulsar cluster in k8s\n+\n+For how to deploy Pulsar cluster in the k8s environment, please refer to [here](https://pulsar.apache.org/docs/en/helm-overview/).\n+\n+\n+# Java \n+\n+This example demonstrates how to package a function in Java.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run Pulsar cluster in Docker) successfully.\n+\n+\n+1. Create a new maven project with a pom file.\n+\n+    > **Tip**\n+    >\n+    > `mainClass` is your package name.\n+\n+    ```text\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>java-function</groupId>\n+        <artifactId>java-function</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.pulsar</groupId>\n+                <artifactId>pulsar-functions-api</artifactId>\n+                <version>2.6.0</version>\n+            </dependency>\n+        </dependencies>\n+\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <configuration>\n+                        <appendAssemblyId>false</appendAssemblyId>\n+                        <descriptorRefs>\n+                            <descriptorRef>jar-with-dependencies</descriptorRef>\n+                        </descriptorRefs>\n+                        <archive>\n+                        <manifest>\n+                            <mainClass>org.example.test.ExclamationFunction</mainClass>\n+                        </manifest>\n+                    </archive>\n+                    </configuration>\n+                    <executions>\n+                        <execution>\n+                            <id>make-assembly</id>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>assembly</goal>\n+                            </goals>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-compiler-plugin</artifactId>\n+                    <configuration>\n+                        <source>8</source>\n+                        <target>8</target>\n+                    </configuration>\n+                </plugin>\n+            </plugins>\n+        </build>\n+\n+    </project>\n+    ```\n+\n+2. Write a Java function.\n+\n+    ```\n+    package org.example.test;\n+\n+    import java.util.function.Function;\n+\n+    public class ExclamationFunction implements Function<String, String> {\n+        @Override\n+        public String apply(String s) {\n+            return \"This is my function!\";\n+        }\n+    }\n+    ```\n+\n+    > **Tip**\n+    >\n+    > For the package imported, you can use one of the following interfaces:\n+    >\n+    > - Function interface provided by Java 8: `java.util.function.Function`\n+    >\n+    > - Pulsar Function interface: `org.apache.pulsar.functions.api.Function`\n+    >\n+    > The main difference between the two interfaces is that the `org.apache.pulsar.functions.api.Function` interface provides the context interface. When you write a function and want to interact with it, you can use context to obtain a wide variety of information and functionality for Pulsar Functions.\n+    > \n+    > **Example** \n+    >\n+    > This example uses `org.apache.pulsar.functions.api.Function` interface with context.\n+    >\n+    > ```\n+    > package org.example.functions;\n+    >\n+    > import org.apache.pulsar.functions.api.Context;\n+    > import org.apache.pulsar.functions.api.Function;\n+    > \n+    > import java.util.Arrays;\n+    >\n+    > public class WordCountFunction implements Function<String, Void> {\n+    >    // This function is invoked every time a message is published to the input topic\n+    >    @Override\n+    >    public Void process(String input, Context context) throws Exception {\n+    >       Arrays.asList(input.split(\" \")).forEach(word -> {\n+    >           String counterKey = word.toLowerCase();\n+    >           context.incrCounter(counterKey, 1);\n+    >        });\n+    >       return null;\n+    >   }\n+    > }\n+    > ```\n+\n+3. Package the Java function.\n+\n+    ```bash\n+    mvn package\n+    ```\n+\n+    After the Java function is packaged, a `target` directory is automatically created. Open the `target` directory to see if there is a jar package similar to `java-function-1.0-SNAPSHOT.jar`.\n+\n+\n+4.  Run the Java function.\n+\n+     (1) Copy the packaged jar file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of java-function-1.0-SNAPSHOT.jar>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Java function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --jar java-function-1.0-SNAPSHOT.jar \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name JavaFunction\n+    ```\n+\n+    The following log indicates that the Java function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the descriptions about the parameters (for example, `--classname`, `--jar`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Java function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+# Python \n+\n+Python Function supports the following three forms:\n+\n+- One python file\n+- ZIP file\n+- PIP\n+\n+## One python file\n+\n+This example demonstrates how to package a function by **one python file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run Pulsar cluster in Docker) successfully.", "originalCommit": "4bca8e598d627514093553cd69772e5b0062bf81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "66ef5527903256ec25a6c7a29f90239edff231af", "url": "https://github.com/apache/pulsar/commit/66ef5527903256ec25a6c7a29f90239edff231af", "message": "fix comments\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>", "committedDate": "2020-08-28T01:45:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyMDQwOQ==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r479920409", "bodyText": "run a standalone Pulsar in Docker", "author": "Jennifer88huang", "createdAt": "2020-08-31T06:29:59Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -35,18 +35,18 @@ docker run -it \\\n >\n > - To check whether the image starts up or not, use the command `docker ps`.\n \n-## Run Pulsar cluster in k8s\n+### Run Pulsar cluster in k8s\n \n-For how to deploy Pulsar cluster in the k8s environment, please refer to [here](https://pulsar.apache.org/docs/en/helm-overview/).\n+For how to deploy Pulsar cluster in the k8s environment, For details, refer to [here](https://pulsar.apache.org/docs/en/helm-overview/).\n \n \n-# Java \n+## Java \n \n This example demonstrates how to package a function in Java.\n \n > **Note**\n >\n-> This example assumes that you have [run a standalone Pulsar in Docker](#Run Pulsar cluster in Docker) successfully.\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.", "originalCommit": "66ef5527903256ec25a6c7a29f90239edff231af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyMzE2MA==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r479923160", "bodyText": "The link is not correct, you can build locally to check whether it works.", "author": "Jennifer88huang", "createdAt": "2020-08-31T06:36:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyMDQwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY0MDIwMQ==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r481640201", "bodyText": "you can use \"(#run-a-standalone-pulsar-in-docker)\" for the link.", "author": "Jennifer88huang", "createdAt": "2020-09-02T04:04:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyMDQwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1MDE3OA==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r479950178", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For how to deploy Pulsar cluster in the k8s environment, For details, refer to [here](https://pulsar.apache.org/docs/en/helm-overview/).\n          \n          \n            \n            For details about how to deploy a Pulsar cluster in the k8s environment, see [here](https://pulsar.apache.org/docs/en/helm-overview/).", "author": "sijia-w", "createdAt": "2020-08-31T07:35:29Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+## Prerequisite\n+\n+Before running a Pulsar function, you need to start Pulsar.\n+\n+### Run a standalone Pulsar in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts up or not, use the command `docker ps`.\n+\n+### Run Pulsar cluster in k8s\n+\n+For how to deploy Pulsar cluster in the k8s environment, For details, refer to [here](https://pulsar.apache.org/docs/en/helm-overview/).", "originalCommit": "66ef5527903256ec25a6c7a29f90239edff231af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1MjA2NA==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r479952064", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                >  - For the description about the parameters (for example, `--classname`, `--jar`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n          \n          \n            \n                >  - For the description about the parameters (for example, `--classname`, `--jar`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).", "author": "sijia-w", "createdAt": "2020-08-31T07:39:13Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+## Prerequisite\n+\n+Before running a Pulsar function, you need to start Pulsar.\n+\n+### Run a standalone Pulsar in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts up or not, use the command `docker ps`.\n+\n+### Run Pulsar cluster in k8s\n+\n+For how to deploy Pulsar cluster in the k8s environment, For details, refer to [here](https://pulsar.apache.org/docs/en/helm-overview/).\n+\n+\n+## Java \n+\n+This example demonstrates how to package a function in Java.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+\n+1. Create a new maven project with a pom file.\n+\n+    > **Tip**\n+    >\n+    > `mainClass` is your package name.\n+\n+    ```text\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>java-function</groupId>\n+        <artifactId>java-function</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.pulsar</groupId>\n+                <artifactId>pulsar-functions-api</artifactId>\n+                <version>2.6.0</version>\n+            </dependency>\n+        </dependencies>\n+\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <configuration>\n+                        <appendAssemblyId>false</appendAssemblyId>\n+                        <descriptorRefs>\n+                            <descriptorRef>jar-with-dependencies</descriptorRef>\n+                        </descriptorRefs>\n+                        <archive>\n+                        <manifest>\n+                            <mainClass>org.example.test.ExclamationFunction</mainClass>\n+                        </manifest>\n+                    </archive>\n+                    </configuration>\n+                    <executions>\n+                        <execution>\n+                            <id>make-assembly</id>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>assembly</goal>\n+                            </goals>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-compiler-plugin</artifactId>\n+                    <configuration>\n+                        <source>8</source>\n+                        <target>8</target>\n+                    </configuration>\n+                </plugin>\n+            </plugins>\n+        </build>\n+\n+    </project>\n+    ```\n+\n+2. Write a Java function.\n+\n+    ```\n+    package org.example.test;\n+\n+    import java.util.function.Function;\n+\n+    public class ExclamationFunction implements Function<String, String> {\n+        @Override\n+        public String apply(String s) {\n+            return \"This is my function!\";\n+        }\n+    }\n+    ```\n+\n+    > **Tip**\n+    >\n+    > For the package imported, you can use one of the following interfaces:\n+    >\n+    > - Function interface provided by Java 8: `java.util.function.Function`\n+    >\n+    > - Pulsar Function interface: `org.apache.pulsar.functions.api.Function`\n+    >\n+    > The main difference between the two interfaces is that the `org.apache.pulsar.functions.api.Function` interface provides the context interface. When you write a function and want to interact with it, you can use context to obtain a wide variety of information and functionality for Pulsar Functions.\n+    > \n+    > **Example** \n+    >\n+    > This example uses `org.apache.pulsar.functions.api.Function` interface with context.\n+    >\n+    > ```\n+    > package org.example.functions;\n+    >\n+    > import org.apache.pulsar.functions.api.Context;\n+    > import org.apache.pulsar.functions.api.Function;\n+    > \n+    > import java.util.Arrays;\n+    >\n+    > public class WordCountFunction implements Function<String, Void> {\n+    >    // This function is invoked every time a message is published to the input topic\n+    >    @Override\n+    >    public Void process(String input, Context context) throws Exception {\n+    >       Arrays.asList(input.split(\" \")).forEach(word -> {\n+    >           String counterKey = word.toLowerCase();\n+    >           context.incrCounter(counterKey, 1);\n+    >        });\n+    >       return null;\n+    >   }\n+    > }\n+    > ```\n+\n+3. Package the Java function.\n+\n+    ```bash\n+    mvn package\n+    ```\n+\n+    After the Java function is packaged, a `target` directory is automatically created. Open the `target` directory to see if there is a jar package similar to `java-function-1.0-SNAPSHOT.jar`.\n+\n+\n+4.  Run the Java function.\n+\n+     (1) Copy the packaged jar file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of java-function-1.0-SNAPSHOT.jar>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Java function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --jar java-function-1.0-SNAPSHOT.jar \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name JavaFunction\n+    ```\n+\n+    The following log indicates that the Java function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--jar`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).", "originalCommit": "66ef5527903256ec25a6c7a29f90239edff231af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1MjU1MQ==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r479952551", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Python Function supports the following three forms:\n          \n          \n            \n            Python Function supports the following three formats:", "author": "sijia-w", "createdAt": "2020-08-31T07:40:16Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+## Prerequisite\n+\n+Before running a Pulsar function, you need to start Pulsar.\n+\n+### Run a standalone Pulsar in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts up or not, use the command `docker ps`.\n+\n+### Run Pulsar cluster in k8s\n+\n+For how to deploy Pulsar cluster in the k8s environment, For details, refer to [here](https://pulsar.apache.org/docs/en/helm-overview/).\n+\n+\n+## Java \n+\n+This example demonstrates how to package a function in Java.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+\n+1. Create a new maven project with a pom file.\n+\n+    > **Tip**\n+    >\n+    > `mainClass` is your package name.\n+\n+    ```text\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>java-function</groupId>\n+        <artifactId>java-function</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.pulsar</groupId>\n+                <artifactId>pulsar-functions-api</artifactId>\n+                <version>2.6.0</version>\n+            </dependency>\n+        </dependencies>\n+\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <configuration>\n+                        <appendAssemblyId>false</appendAssemblyId>\n+                        <descriptorRefs>\n+                            <descriptorRef>jar-with-dependencies</descriptorRef>\n+                        </descriptorRefs>\n+                        <archive>\n+                        <manifest>\n+                            <mainClass>org.example.test.ExclamationFunction</mainClass>\n+                        </manifest>\n+                    </archive>\n+                    </configuration>\n+                    <executions>\n+                        <execution>\n+                            <id>make-assembly</id>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>assembly</goal>\n+                            </goals>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-compiler-plugin</artifactId>\n+                    <configuration>\n+                        <source>8</source>\n+                        <target>8</target>\n+                    </configuration>\n+                </plugin>\n+            </plugins>\n+        </build>\n+\n+    </project>\n+    ```\n+\n+2. Write a Java function.\n+\n+    ```\n+    package org.example.test;\n+\n+    import java.util.function.Function;\n+\n+    public class ExclamationFunction implements Function<String, String> {\n+        @Override\n+        public String apply(String s) {\n+            return \"This is my function!\";\n+        }\n+    }\n+    ```\n+\n+    > **Tip**\n+    >\n+    > For the package imported, you can use one of the following interfaces:\n+    >\n+    > - Function interface provided by Java 8: `java.util.function.Function`\n+    >\n+    > - Pulsar Function interface: `org.apache.pulsar.functions.api.Function`\n+    >\n+    > The main difference between the two interfaces is that the `org.apache.pulsar.functions.api.Function` interface provides the context interface. When you write a function and want to interact with it, you can use context to obtain a wide variety of information and functionality for Pulsar Functions.\n+    > \n+    > **Example** \n+    >\n+    > This example uses `org.apache.pulsar.functions.api.Function` interface with context.\n+    >\n+    > ```\n+    > package org.example.functions;\n+    >\n+    > import org.apache.pulsar.functions.api.Context;\n+    > import org.apache.pulsar.functions.api.Function;\n+    > \n+    > import java.util.Arrays;\n+    >\n+    > public class WordCountFunction implements Function<String, Void> {\n+    >    // This function is invoked every time a message is published to the input topic\n+    >    @Override\n+    >    public Void process(String input, Context context) throws Exception {\n+    >       Arrays.asList(input.split(\" \")).forEach(word -> {\n+    >           String counterKey = word.toLowerCase();\n+    >           context.incrCounter(counterKey, 1);\n+    >        });\n+    >       return null;\n+    >   }\n+    > }\n+    > ```\n+\n+3. Package the Java function.\n+\n+    ```bash\n+    mvn package\n+    ```\n+\n+    After the Java function is packaged, a `target` directory is automatically created. Open the `target` directory to see if there is a jar package similar to `java-function-1.0-SNAPSHOT.jar`.\n+\n+\n+4.  Run the Java function.\n+\n+     (1) Copy the packaged jar file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of java-function-1.0-SNAPSHOT.jar>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Java function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --jar java-function-1.0-SNAPSHOT.jar \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name JavaFunction\n+    ```\n+\n+    The following log indicates that the Java function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--jar`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Java function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+## Python \n+\n+Python Function supports the following three forms:", "originalCommit": "66ef5527903256ec25a6c7a29f90239edff231af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1Mjc2NQ==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r479952765", "bodyText": "I am not sure, the author please decide which is better.", "author": "sijia-w", "createdAt": "2020-08-31T07:40:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1MjU1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1MzQ0NQ==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r479953445", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            > This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n          \n          \n            \n            > This example assumes that you are [running a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.", "author": "sijia-w", "createdAt": "2020-08-31T07:42:12Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+## Prerequisite\n+\n+Before running a Pulsar function, you need to start Pulsar.\n+\n+### Run a standalone Pulsar in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts up or not, use the command `docker ps`.\n+\n+### Run Pulsar cluster in k8s\n+\n+For how to deploy Pulsar cluster in the k8s environment, For details, refer to [here](https://pulsar.apache.org/docs/en/helm-overview/).\n+\n+\n+## Java \n+\n+This example demonstrates how to package a function in Java.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+\n+1. Create a new maven project with a pom file.\n+\n+    > **Tip**\n+    >\n+    > `mainClass` is your package name.\n+\n+    ```text\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>java-function</groupId>\n+        <artifactId>java-function</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.pulsar</groupId>\n+                <artifactId>pulsar-functions-api</artifactId>\n+                <version>2.6.0</version>\n+            </dependency>\n+        </dependencies>\n+\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <configuration>\n+                        <appendAssemblyId>false</appendAssemblyId>\n+                        <descriptorRefs>\n+                            <descriptorRef>jar-with-dependencies</descriptorRef>\n+                        </descriptorRefs>\n+                        <archive>\n+                        <manifest>\n+                            <mainClass>org.example.test.ExclamationFunction</mainClass>\n+                        </manifest>\n+                    </archive>\n+                    </configuration>\n+                    <executions>\n+                        <execution>\n+                            <id>make-assembly</id>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>assembly</goal>\n+                            </goals>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-compiler-plugin</artifactId>\n+                    <configuration>\n+                        <source>8</source>\n+                        <target>8</target>\n+                    </configuration>\n+                </plugin>\n+            </plugins>\n+        </build>\n+\n+    </project>\n+    ```\n+\n+2. Write a Java function.\n+\n+    ```\n+    package org.example.test;\n+\n+    import java.util.function.Function;\n+\n+    public class ExclamationFunction implements Function<String, String> {\n+        @Override\n+        public String apply(String s) {\n+            return \"This is my function!\";\n+        }\n+    }\n+    ```\n+\n+    > **Tip**\n+    >\n+    > For the package imported, you can use one of the following interfaces:\n+    >\n+    > - Function interface provided by Java 8: `java.util.function.Function`\n+    >\n+    > - Pulsar Function interface: `org.apache.pulsar.functions.api.Function`\n+    >\n+    > The main difference between the two interfaces is that the `org.apache.pulsar.functions.api.Function` interface provides the context interface. When you write a function and want to interact with it, you can use context to obtain a wide variety of information and functionality for Pulsar Functions.\n+    > \n+    > **Example** \n+    >\n+    > This example uses `org.apache.pulsar.functions.api.Function` interface with context.\n+    >\n+    > ```\n+    > package org.example.functions;\n+    >\n+    > import org.apache.pulsar.functions.api.Context;\n+    > import org.apache.pulsar.functions.api.Function;\n+    > \n+    > import java.util.Arrays;\n+    >\n+    > public class WordCountFunction implements Function<String, Void> {\n+    >    // This function is invoked every time a message is published to the input topic\n+    >    @Override\n+    >    public Void process(String input, Context context) throws Exception {\n+    >       Arrays.asList(input.split(\" \")).forEach(word -> {\n+    >           String counterKey = word.toLowerCase();\n+    >           context.incrCounter(counterKey, 1);\n+    >        });\n+    >       return null;\n+    >   }\n+    > }\n+    > ```\n+\n+3. Package the Java function.\n+\n+    ```bash\n+    mvn package\n+    ```\n+\n+    After the Java function is packaged, a `target` directory is automatically created. Open the `target` directory to see if there is a jar package similar to `java-function-1.0-SNAPSHOT.jar`.\n+\n+\n+4.  Run the Java function.\n+\n+     (1) Copy the packaged jar file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of java-function-1.0-SNAPSHOT.jar>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Java function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --jar java-function-1.0-SNAPSHOT.jar \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name JavaFunction\n+    ```\n+\n+    The following log indicates that the Java function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--jar`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Java function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+## Python \n+\n+Python Function supports the following three forms:\n+\n+- One python file\n+- ZIP file\n+- PIP\n+\n+### One python file\n+\n+This example demonstrates how to package a function by **one python file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.", "originalCommit": "66ef5527903256ec25a6c7a29f90239edff231af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1MzU3NA==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r479953574", "bodyText": "The author please decide which is better.", "author": "sijia-w", "createdAt": "2020-08-31T07:42:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1MzQ0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1NDI2NA==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r479954264", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                >  - For the description about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n          \n          \n            \n                >  - For the description about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).", "author": "sijia-w", "createdAt": "2020-08-31T07:43:50Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+## Prerequisite\n+\n+Before running a Pulsar function, you need to start Pulsar.\n+\n+### Run a standalone Pulsar in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts up or not, use the command `docker ps`.\n+\n+### Run Pulsar cluster in k8s\n+\n+For how to deploy Pulsar cluster in the k8s environment, For details, refer to [here](https://pulsar.apache.org/docs/en/helm-overview/).\n+\n+\n+## Java \n+\n+This example demonstrates how to package a function in Java.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+\n+1. Create a new maven project with a pom file.\n+\n+    > **Tip**\n+    >\n+    > `mainClass` is your package name.\n+\n+    ```text\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>java-function</groupId>\n+        <artifactId>java-function</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.pulsar</groupId>\n+                <artifactId>pulsar-functions-api</artifactId>\n+                <version>2.6.0</version>\n+            </dependency>\n+        </dependencies>\n+\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <configuration>\n+                        <appendAssemblyId>false</appendAssemblyId>\n+                        <descriptorRefs>\n+                            <descriptorRef>jar-with-dependencies</descriptorRef>\n+                        </descriptorRefs>\n+                        <archive>\n+                        <manifest>\n+                            <mainClass>org.example.test.ExclamationFunction</mainClass>\n+                        </manifest>\n+                    </archive>\n+                    </configuration>\n+                    <executions>\n+                        <execution>\n+                            <id>make-assembly</id>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>assembly</goal>\n+                            </goals>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-compiler-plugin</artifactId>\n+                    <configuration>\n+                        <source>8</source>\n+                        <target>8</target>\n+                    </configuration>\n+                </plugin>\n+            </plugins>\n+        </build>\n+\n+    </project>\n+    ```\n+\n+2. Write a Java function.\n+\n+    ```\n+    package org.example.test;\n+\n+    import java.util.function.Function;\n+\n+    public class ExclamationFunction implements Function<String, String> {\n+        @Override\n+        public String apply(String s) {\n+            return \"This is my function!\";\n+        }\n+    }\n+    ```\n+\n+    > **Tip**\n+    >\n+    > For the package imported, you can use one of the following interfaces:\n+    >\n+    > - Function interface provided by Java 8: `java.util.function.Function`\n+    >\n+    > - Pulsar Function interface: `org.apache.pulsar.functions.api.Function`\n+    >\n+    > The main difference between the two interfaces is that the `org.apache.pulsar.functions.api.Function` interface provides the context interface. When you write a function and want to interact with it, you can use context to obtain a wide variety of information and functionality for Pulsar Functions.\n+    > \n+    > **Example** \n+    >\n+    > This example uses `org.apache.pulsar.functions.api.Function` interface with context.\n+    >\n+    > ```\n+    > package org.example.functions;\n+    >\n+    > import org.apache.pulsar.functions.api.Context;\n+    > import org.apache.pulsar.functions.api.Function;\n+    > \n+    > import java.util.Arrays;\n+    >\n+    > public class WordCountFunction implements Function<String, Void> {\n+    >    // This function is invoked every time a message is published to the input topic\n+    >    @Override\n+    >    public Void process(String input, Context context) throws Exception {\n+    >       Arrays.asList(input.split(\" \")).forEach(word -> {\n+    >           String counterKey = word.toLowerCase();\n+    >           context.incrCounter(counterKey, 1);\n+    >        });\n+    >       return null;\n+    >   }\n+    > }\n+    > ```\n+\n+3. Package the Java function.\n+\n+    ```bash\n+    mvn package\n+    ```\n+\n+    After the Java function is packaged, a `target` directory is automatically created. Open the `target` directory to see if there is a jar package similar to `java-function-1.0-SNAPSHOT.jar`.\n+\n+\n+4.  Run the Java function.\n+\n+     (1) Copy the packaged jar file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of java-function-1.0-SNAPSHOT.jar>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Java function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --jar java-function-1.0-SNAPSHOT.jar \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name JavaFunction\n+    ```\n+\n+    The following log indicates that the Java function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--jar`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Java function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+## Python \n+\n+Python Function supports the following three forms:\n+\n+- One python file\n+- ZIP file\n+- PIP\n+\n+### One python file\n+\n+This example demonstrates how to package a function by **one python file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+1. Write a Python function.\n+\n+    ```\n+    from pulsar import Function //  import the Function module from Pulsar\n+\n+    # The classic ExclamationFunction that appends an exclamation at the end\n+    # of the input\n+    class ExclamationFunction(Function):\n+      def __init__(self):\n+        pass\n+\n+      def process(self, input, context):\n+        return input + '!'\n+    ```\n+\n+    In this example, when you write a Python function, you need to inherit the Function class and implement the `process()` method.\n+\n+    `process()` mainly has two parameters: \n+\n+    - `input` represents your input.\n+  \n+    - `context` represents an interface exposed by the Pulsar Function. You can get the attributes in the Python function based on the provided context object.\n+\n+2. Install a Python client.\n+\n+    The implementation of a Python function depends on the Python client, so before deploying a Python function, you need to install the corresponding version of the Python client. \n+\n+    ```bash\n+    pip install python-client==2.6.0\n+    ```\n+\n+3. Run the Python Function.\n+\n+    (1) Copy the Python function file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of Python function file>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Python function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --py <path of Python Function file> \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name PythonFunction\n+    ```\n+\n+    The following log indicates that the Python function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).", "originalCommit": "66ef5527903256ec25a6c7a29f90239edff231af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1NDYwNA==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r479954604", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            > This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n          \n          \n            \n            > This example assumes that you are [running a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.", "author": "sijia-w", "createdAt": "2020-08-31T07:44:35Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+## Prerequisite\n+\n+Before running a Pulsar function, you need to start Pulsar.\n+\n+### Run a standalone Pulsar in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts up or not, use the command `docker ps`.\n+\n+### Run Pulsar cluster in k8s\n+\n+For how to deploy Pulsar cluster in the k8s environment, For details, refer to [here](https://pulsar.apache.org/docs/en/helm-overview/).\n+\n+\n+## Java \n+\n+This example demonstrates how to package a function in Java.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+\n+1. Create a new maven project with a pom file.\n+\n+    > **Tip**\n+    >\n+    > `mainClass` is your package name.\n+\n+    ```text\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>java-function</groupId>\n+        <artifactId>java-function</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.pulsar</groupId>\n+                <artifactId>pulsar-functions-api</artifactId>\n+                <version>2.6.0</version>\n+            </dependency>\n+        </dependencies>\n+\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <configuration>\n+                        <appendAssemblyId>false</appendAssemblyId>\n+                        <descriptorRefs>\n+                            <descriptorRef>jar-with-dependencies</descriptorRef>\n+                        </descriptorRefs>\n+                        <archive>\n+                        <manifest>\n+                            <mainClass>org.example.test.ExclamationFunction</mainClass>\n+                        </manifest>\n+                    </archive>\n+                    </configuration>\n+                    <executions>\n+                        <execution>\n+                            <id>make-assembly</id>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>assembly</goal>\n+                            </goals>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-compiler-plugin</artifactId>\n+                    <configuration>\n+                        <source>8</source>\n+                        <target>8</target>\n+                    </configuration>\n+                </plugin>\n+            </plugins>\n+        </build>\n+\n+    </project>\n+    ```\n+\n+2. Write a Java function.\n+\n+    ```\n+    package org.example.test;\n+\n+    import java.util.function.Function;\n+\n+    public class ExclamationFunction implements Function<String, String> {\n+        @Override\n+        public String apply(String s) {\n+            return \"This is my function!\";\n+        }\n+    }\n+    ```\n+\n+    > **Tip**\n+    >\n+    > For the package imported, you can use one of the following interfaces:\n+    >\n+    > - Function interface provided by Java 8: `java.util.function.Function`\n+    >\n+    > - Pulsar Function interface: `org.apache.pulsar.functions.api.Function`\n+    >\n+    > The main difference between the two interfaces is that the `org.apache.pulsar.functions.api.Function` interface provides the context interface. When you write a function and want to interact with it, you can use context to obtain a wide variety of information and functionality for Pulsar Functions.\n+    > \n+    > **Example** \n+    >\n+    > This example uses `org.apache.pulsar.functions.api.Function` interface with context.\n+    >\n+    > ```\n+    > package org.example.functions;\n+    >\n+    > import org.apache.pulsar.functions.api.Context;\n+    > import org.apache.pulsar.functions.api.Function;\n+    > \n+    > import java.util.Arrays;\n+    >\n+    > public class WordCountFunction implements Function<String, Void> {\n+    >    // This function is invoked every time a message is published to the input topic\n+    >    @Override\n+    >    public Void process(String input, Context context) throws Exception {\n+    >       Arrays.asList(input.split(\" \")).forEach(word -> {\n+    >           String counterKey = word.toLowerCase();\n+    >           context.incrCounter(counterKey, 1);\n+    >        });\n+    >       return null;\n+    >   }\n+    > }\n+    > ```\n+\n+3. Package the Java function.\n+\n+    ```bash\n+    mvn package\n+    ```\n+\n+    After the Java function is packaged, a `target` directory is automatically created. Open the `target` directory to see if there is a jar package similar to `java-function-1.0-SNAPSHOT.jar`.\n+\n+\n+4.  Run the Java function.\n+\n+     (1) Copy the packaged jar file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of java-function-1.0-SNAPSHOT.jar>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Java function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --jar java-function-1.0-SNAPSHOT.jar \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name JavaFunction\n+    ```\n+\n+    The following log indicates that the Java function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--jar`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Java function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+## Python \n+\n+Python Function supports the following three forms:\n+\n+- One python file\n+- ZIP file\n+- PIP\n+\n+### One python file\n+\n+This example demonstrates how to package a function by **one python file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+1. Write a Python function.\n+\n+    ```\n+    from pulsar import Function //  import the Function module from Pulsar\n+\n+    # The classic ExclamationFunction that appends an exclamation at the end\n+    # of the input\n+    class ExclamationFunction(Function):\n+      def __init__(self):\n+        pass\n+\n+      def process(self, input, context):\n+        return input + '!'\n+    ```\n+\n+    In this example, when you write a Python function, you need to inherit the Function class and implement the `process()` method.\n+\n+    `process()` mainly has two parameters: \n+\n+    - `input` represents your input.\n+  \n+    - `context` represents an interface exposed by the Pulsar Function. You can get the attributes in the Python function based on the provided context object.\n+\n+2. Install a Python client.\n+\n+    The implementation of a Python function depends on the Python client, so before deploying a Python function, you need to install the corresponding version of the Python client. \n+\n+    ```bash\n+    pip install python-client==2.6.0\n+    ```\n+\n+3. Run the Python Function.\n+\n+    (1) Copy the Python function file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of Python function file>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Python function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --py <path of Python Function file> \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name PythonFunction\n+    ```\n+\n+    The following log indicates that the Python function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Python function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+### ZIP file\n+\n+This example demonstrates how to package a function by **ZIP file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.", "originalCommit": "66ef5527903256ec25a6c7a29f90239edff231af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1NDcwNw==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r479954707", "bodyText": "The author please decide which is better.", "author": "sijia-w", "createdAt": "2020-08-31T07:44:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1NDYwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1NjI2MA==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r479956260", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Assuming zip file with format `func.zip`, extract to folder function and internal dir format:\n          \n          \n            \n            Assuming the zip file is named as `func.zip`, you need to extract to folder function and internal dir format:", "author": "sijia-w", "createdAt": "2020-08-31T07:47:45Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+## Prerequisite\n+\n+Before running a Pulsar function, you need to start Pulsar.\n+\n+### Run a standalone Pulsar in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts up or not, use the command `docker ps`.\n+\n+### Run Pulsar cluster in k8s\n+\n+For how to deploy Pulsar cluster in the k8s environment, For details, refer to [here](https://pulsar.apache.org/docs/en/helm-overview/).\n+\n+\n+## Java \n+\n+This example demonstrates how to package a function in Java.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+\n+1. Create a new maven project with a pom file.\n+\n+    > **Tip**\n+    >\n+    > `mainClass` is your package name.\n+\n+    ```text\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>java-function</groupId>\n+        <artifactId>java-function</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.pulsar</groupId>\n+                <artifactId>pulsar-functions-api</artifactId>\n+                <version>2.6.0</version>\n+            </dependency>\n+        </dependencies>\n+\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <configuration>\n+                        <appendAssemblyId>false</appendAssemblyId>\n+                        <descriptorRefs>\n+                            <descriptorRef>jar-with-dependencies</descriptorRef>\n+                        </descriptorRefs>\n+                        <archive>\n+                        <manifest>\n+                            <mainClass>org.example.test.ExclamationFunction</mainClass>\n+                        </manifest>\n+                    </archive>\n+                    </configuration>\n+                    <executions>\n+                        <execution>\n+                            <id>make-assembly</id>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>assembly</goal>\n+                            </goals>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-compiler-plugin</artifactId>\n+                    <configuration>\n+                        <source>8</source>\n+                        <target>8</target>\n+                    </configuration>\n+                </plugin>\n+            </plugins>\n+        </build>\n+\n+    </project>\n+    ```\n+\n+2. Write a Java function.\n+\n+    ```\n+    package org.example.test;\n+\n+    import java.util.function.Function;\n+\n+    public class ExclamationFunction implements Function<String, String> {\n+        @Override\n+        public String apply(String s) {\n+            return \"This is my function!\";\n+        }\n+    }\n+    ```\n+\n+    > **Tip**\n+    >\n+    > For the package imported, you can use one of the following interfaces:\n+    >\n+    > - Function interface provided by Java 8: `java.util.function.Function`\n+    >\n+    > - Pulsar Function interface: `org.apache.pulsar.functions.api.Function`\n+    >\n+    > The main difference between the two interfaces is that the `org.apache.pulsar.functions.api.Function` interface provides the context interface. When you write a function and want to interact with it, you can use context to obtain a wide variety of information and functionality for Pulsar Functions.\n+    > \n+    > **Example** \n+    >\n+    > This example uses `org.apache.pulsar.functions.api.Function` interface with context.\n+    >\n+    > ```\n+    > package org.example.functions;\n+    >\n+    > import org.apache.pulsar.functions.api.Context;\n+    > import org.apache.pulsar.functions.api.Function;\n+    > \n+    > import java.util.Arrays;\n+    >\n+    > public class WordCountFunction implements Function<String, Void> {\n+    >    // This function is invoked every time a message is published to the input topic\n+    >    @Override\n+    >    public Void process(String input, Context context) throws Exception {\n+    >       Arrays.asList(input.split(\" \")).forEach(word -> {\n+    >           String counterKey = word.toLowerCase();\n+    >           context.incrCounter(counterKey, 1);\n+    >        });\n+    >       return null;\n+    >   }\n+    > }\n+    > ```\n+\n+3. Package the Java function.\n+\n+    ```bash\n+    mvn package\n+    ```\n+\n+    After the Java function is packaged, a `target` directory is automatically created. Open the `target` directory to see if there is a jar package similar to `java-function-1.0-SNAPSHOT.jar`.\n+\n+\n+4.  Run the Java function.\n+\n+     (1) Copy the packaged jar file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of java-function-1.0-SNAPSHOT.jar>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Java function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --jar java-function-1.0-SNAPSHOT.jar \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name JavaFunction\n+    ```\n+\n+    The following log indicates that the Java function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--jar`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Java function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+## Python \n+\n+Python Function supports the following three forms:\n+\n+- One python file\n+- ZIP file\n+- PIP\n+\n+### One python file\n+\n+This example demonstrates how to package a function by **one python file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+1. Write a Python function.\n+\n+    ```\n+    from pulsar import Function //  import the Function module from Pulsar\n+\n+    # The classic ExclamationFunction that appends an exclamation at the end\n+    # of the input\n+    class ExclamationFunction(Function):\n+      def __init__(self):\n+        pass\n+\n+      def process(self, input, context):\n+        return input + '!'\n+    ```\n+\n+    In this example, when you write a Python function, you need to inherit the Function class and implement the `process()` method.\n+\n+    `process()` mainly has two parameters: \n+\n+    - `input` represents your input.\n+  \n+    - `context` represents an interface exposed by the Pulsar Function. You can get the attributes in the Python function based on the provided context object.\n+\n+2. Install a Python client.\n+\n+    The implementation of a Python function depends on the Python client, so before deploying a Python function, you need to install the corresponding version of the Python client. \n+\n+    ```bash\n+    pip install python-client==2.6.0\n+    ```\n+\n+3. Run the Python Function.\n+\n+    (1) Copy the Python function file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of Python function file>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Python function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --py <path of Python Function file> \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name PythonFunction\n+    ```\n+\n+    The following log indicates that the Python function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Python function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+### ZIP file\n+\n+This example demonstrates how to package a function by **ZIP file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+1. Prepare the ZIP file\n+\n+When packaging the ZIP file of the Python Function, the following requirements need to be met:\n+\n+```text\n+Assuming zip file with format `func.zip`, extract to folder function and internal dir format:", "originalCommit": "66ef5527903256ec25a6c7a29f90239edff231af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1NjQzMg==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r479956432", "bodyText": "I do not quite understand the second half sentence...", "author": "sijia-w", "createdAt": "2020-08-31T07:48:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1NjI2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1NzA1NQ==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r479957055", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Now we take [exclamation.zip](https://github.com/apache/pulsar/tree/master/tests/docker-images/latest-version-image/python-examples) as an example, its internal structure is as follows:\n          \n          \n            \n            Now we take [exclamation.zip](https://github.com/apache/pulsar/tree/master/tests/docker-images/latest-version-image/python-examples) as an example, of which the internal structure is as follows:\n          \n      \n    \n    \n  \n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Now we take [exclamation.zip](https://github.com/apache/pulsar/tree/master/tests/docker-images/latest-version-image/python-examples) as an example, its internal structure is as follows:\n          \n          \n            \n            Now we take [exclamation.zip](https://github.com/apache/pulsar/tree/master/tests/docker-images/latest-version-image/python-examples) as an example. The internal structure is as follows:", "author": "sijia-w", "createdAt": "2020-08-31T07:49:21Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+## Prerequisite\n+\n+Before running a Pulsar function, you need to start Pulsar.\n+\n+### Run a standalone Pulsar in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts up or not, use the command `docker ps`.\n+\n+### Run Pulsar cluster in k8s\n+\n+For how to deploy Pulsar cluster in the k8s environment, For details, refer to [here](https://pulsar.apache.org/docs/en/helm-overview/).\n+\n+\n+## Java \n+\n+This example demonstrates how to package a function in Java.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+\n+1. Create a new maven project with a pom file.\n+\n+    > **Tip**\n+    >\n+    > `mainClass` is your package name.\n+\n+    ```text\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>java-function</groupId>\n+        <artifactId>java-function</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.pulsar</groupId>\n+                <artifactId>pulsar-functions-api</artifactId>\n+                <version>2.6.0</version>\n+            </dependency>\n+        </dependencies>\n+\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <configuration>\n+                        <appendAssemblyId>false</appendAssemblyId>\n+                        <descriptorRefs>\n+                            <descriptorRef>jar-with-dependencies</descriptorRef>\n+                        </descriptorRefs>\n+                        <archive>\n+                        <manifest>\n+                            <mainClass>org.example.test.ExclamationFunction</mainClass>\n+                        </manifest>\n+                    </archive>\n+                    </configuration>\n+                    <executions>\n+                        <execution>\n+                            <id>make-assembly</id>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>assembly</goal>\n+                            </goals>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-compiler-plugin</artifactId>\n+                    <configuration>\n+                        <source>8</source>\n+                        <target>8</target>\n+                    </configuration>\n+                </plugin>\n+            </plugins>\n+        </build>\n+\n+    </project>\n+    ```\n+\n+2. Write a Java function.\n+\n+    ```\n+    package org.example.test;\n+\n+    import java.util.function.Function;\n+\n+    public class ExclamationFunction implements Function<String, String> {\n+        @Override\n+        public String apply(String s) {\n+            return \"This is my function!\";\n+        }\n+    }\n+    ```\n+\n+    > **Tip**\n+    >\n+    > For the package imported, you can use one of the following interfaces:\n+    >\n+    > - Function interface provided by Java 8: `java.util.function.Function`\n+    >\n+    > - Pulsar Function interface: `org.apache.pulsar.functions.api.Function`\n+    >\n+    > The main difference between the two interfaces is that the `org.apache.pulsar.functions.api.Function` interface provides the context interface. When you write a function and want to interact with it, you can use context to obtain a wide variety of information and functionality for Pulsar Functions.\n+    > \n+    > **Example** \n+    >\n+    > This example uses `org.apache.pulsar.functions.api.Function` interface with context.\n+    >\n+    > ```\n+    > package org.example.functions;\n+    >\n+    > import org.apache.pulsar.functions.api.Context;\n+    > import org.apache.pulsar.functions.api.Function;\n+    > \n+    > import java.util.Arrays;\n+    >\n+    > public class WordCountFunction implements Function<String, Void> {\n+    >    // This function is invoked every time a message is published to the input topic\n+    >    @Override\n+    >    public Void process(String input, Context context) throws Exception {\n+    >       Arrays.asList(input.split(\" \")).forEach(word -> {\n+    >           String counterKey = word.toLowerCase();\n+    >           context.incrCounter(counterKey, 1);\n+    >        });\n+    >       return null;\n+    >   }\n+    > }\n+    > ```\n+\n+3. Package the Java function.\n+\n+    ```bash\n+    mvn package\n+    ```\n+\n+    After the Java function is packaged, a `target` directory is automatically created. Open the `target` directory to see if there is a jar package similar to `java-function-1.0-SNAPSHOT.jar`.\n+\n+\n+4.  Run the Java function.\n+\n+     (1) Copy the packaged jar file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of java-function-1.0-SNAPSHOT.jar>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Java function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --jar java-function-1.0-SNAPSHOT.jar \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name JavaFunction\n+    ```\n+\n+    The following log indicates that the Java function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--jar`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Java function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+## Python \n+\n+Python Function supports the following three forms:\n+\n+- One python file\n+- ZIP file\n+- PIP\n+\n+### One python file\n+\n+This example demonstrates how to package a function by **one python file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+1. Write a Python function.\n+\n+    ```\n+    from pulsar import Function //  import the Function module from Pulsar\n+\n+    # The classic ExclamationFunction that appends an exclamation at the end\n+    # of the input\n+    class ExclamationFunction(Function):\n+      def __init__(self):\n+        pass\n+\n+      def process(self, input, context):\n+        return input + '!'\n+    ```\n+\n+    In this example, when you write a Python function, you need to inherit the Function class and implement the `process()` method.\n+\n+    `process()` mainly has two parameters: \n+\n+    - `input` represents your input.\n+  \n+    - `context` represents an interface exposed by the Pulsar Function. You can get the attributes in the Python function based on the provided context object.\n+\n+2. Install a Python client.\n+\n+    The implementation of a Python function depends on the Python client, so before deploying a Python function, you need to install the corresponding version of the Python client. \n+\n+    ```bash\n+    pip install python-client==2.6.0\n+    ```\n+\n+3. Run the Python Function.\n+\n+    (1) Copy the Python function file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of Python function file>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Python function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --py <path of Python Function file> \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name PythonFunction\n+    ```\n+\n+    The following log indicates that the Python function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Python function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+### ZIP file\n+\n+This example demonstrates how to package a function by **ZIP file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+1. Prepare the ZIP file\n+\n+When packaging the ZIP file of the Python Function, the following requirements need to be met:\n+\n+```text\n+Assuming zip file with format `func.zip`, extract to folder function and internal dir format:\n+    \"func/src\"\n+    \"func/requirements.txt\"\n+    \"func/deps\"\n+```\n+Now we take [exclamation.zip](https://github.com/apache/pulsar/tree/master/tests/docker-images/latest-version-image/python-examples) as an example, its internal structure is as follows:", "originalCommit": "66ef5527903256ec25a6c7a29f90239edff231af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1NzI4Ng==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r479957286", "bodyText": "The author can choose either or keep it as it is now.", "author": "sijia-w", "createdAt": "2020-08-31T07:49:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1NzA1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1NzU0MA==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r479957540", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                >  - For the description about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n          \n          \n            \n                >  - For the description about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).", "author": "sijia-w", "createdAt": "2020-08-31T07:50:13Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+## Prerequisite\n+\n+Before running a Pulsar function, you need to start Pulsar.\n+\n+### Run a standalone Pulsar in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts up or not, use the command `docker ps`.\n+\n+### Run Pulsar cluster in k8s\n+\n+For how to deploy Pulsar cluster in the k8s environment, For details, refer to [here](https://pulsar.apache.org/docs/en/helm-overview/).\n+\n+\n+## Java \n+\n+This example demonstrates how to package a function in Java.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+\n+1. Create a new maven project with a pom file.\n+\n+    > **Tip**\n+    >\n+    > `mainClass` is your package name.\n+\n+    ```text\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>java-function</groupId>\n+        <artifactId>java-function</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.pulsar</groupId>\n+                <artifactId>pulsar-functions-api</artifactId>\n+                <version>2.6.0</version>\n+            </dependency>\n+        </dependencies>\n+\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <configuration>\n+                        <appendAssemblyId>false</appendAssemblyId>\n+                        <descriptorRefs>\n+                            <descriptorRef>jar-with-dependencies</descriptorRef>\n+                        </descriptorRefs>\n+                        <archive>\n+                        <manifest>\n+                            <mainClass>org.example.test.ExclamationFunction</mainClass>\n+                        </manifest>\n+                    </archive>\n+                    </configuration>\n+                    <executions>\n+                        <execution>\n+                            <id>make-assembly</id>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>assembly</goal>\n+                            </goals>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-compiler-plugin</artifactId>\n+                    <configuration>\n+                        <source>8</source>\n+                        <target>8</target>\n+                    </configuration>\n+                </plugin>\n+            </plugins>\n+        </build>\n+\n+    </project>\n+    ```\n+\n+2. Write a Java function.\n+\n+    ```\n+    package org.example.test;\n+\n+    import java.util.function.Function;\n+\n+    public class ExclamationFunction implements Function<String, String> {\n+        @Override\n+        public String apply(String s) {\n+            return \"This is my function!\";\n+        }\n+    }\n+    ```\n+\n+    > **Tip**\n+    >\n+    > For the package imported, you can use one of the following interfaces:\n+    >\n+    > - Function interface provided by Java 8: `java.util.function.Function`\n+    >\n+    > - Pulsar Function interface: `org.apache.pulsar.functions.api.Function`\n+    >\n+    > The main difference between the two interfaces is that the `org.apache.pulsar.functions.api.Function` interface provides the context interface. When you write a function and want to interact with it, you can use context to obtain a wide variety of information and functionality for Pulsar Functions.\n+    > \n+    > **Example** \n+    >\n+    > This example uses `org.apache.pulsar.functions.api.Function` interface with context.\n+    >\n+    > ```\n+    > package org.example.functions;\n+    >\n+    > import org.apache.pulsar.functions.api.Context;\n+    > import org.apache.pulsar.functions.api.Function;\n+    > \n+    > import java.util.Arrays;\n+    >\n+    > public class WordCountFunction implements Function<String, Void> {\n+    >    // This function is invoked every time a message is published to the input topic\n+    >    @Override\n+    >    public Void process(String input, Context context) throws Exception {\n+    >       Arrays.asList(input.split(\" \")).forEach(word -> {\n+    >           String counterKey = word.toLowerCase();\n+    >           context.incrCounter(counterKey, 1);\n+    >        });\n+    >       return null;\n+    >   }\n+    > }\n+    > ```\n+\n+3. Package the Java function.\n+\n+    ```bash\n+    mvn package\n+    ```\n+\n+    After the Java function is packaged, a `target` directory is automatically created. Open the `target` directory to see if there is a jar package similar to `java-function-1.0-SNAPSHOT.jar`.\n+\n+\n+4.  Run the Java function.\n+\n+     (1) Copy the packaged jar file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of java-function-1.0-SNAPSHOT.jar>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Java function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --jar java-function-1.0-SNAPSHOT.jar \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name JavaFunction\n+    ```\n+\n+    The following log indicates that the Java function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--jar`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Java function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+## Python \n+\n+Python Function supports the following three forms:\n+\n+- One python file\n+- ZIP file\n+- PIP\n+\n+### One python file\n+\n+This example demonstrates how to package a function by **one python file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+1. Write a Python function.\n+\n+    ```\n+    from pulsar import Function //  import the Function module from Pulsar\n+\n+    # The classic ExclamationFunction that appends an exclamation at the end\n+    # of the input\n+    class ExclamationFunction(Function):\n+      def __init__(self):\n+        pass\n+\n+      def process(self, input, context):\n+        return input + '!'\n+    ```\n+\n+    In this example, when you write a Python function, you need to inherit the Function class and implement the `process()` method.\n+\n+    `process()` mainly has two parameters: \n+\n+    - `input` represents your input.\n+  \n+    - `context` represents an interface exposed by the Pulsar Function. You can get the attributes in the Python function based on the provided context object.\n+\n+2. Install a Python client.\n+\n+    The implementation of a Python function depends on the Python client, so before deploying a Python function, you need to install the corresponding version of the Python client. \n+\n+    ```bash\n+    pip install python-client==2.6.0\n+    ```\n+\n+3. Run the Python Function.\n+\n+    (1) Copy the Python function file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of Python function file>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Python function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --py <path of Python Function file> \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name PythonFunction\n+    ```\n+\n+    The following log indicates that the Python function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Python function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+### ZIP file\n+\n+This example demonstrates how to package a function by **ZIP file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+1. Prepare the ZIP file\n+\n+When packaging the ZIP file of the Python Function, the following requirements need to be met:\n+\n+```text\n+Assuming zip file with format `func.zip`, extract to folder function and internal dir format:\n+    \"func/src\"\n+    \"func/requirements.txt\"\n+    \"func/deps\"\n+```\n+Now we take [exclamation.zip](https://github.com/apache/pulsar/tree/master/tests/docker-images/latest-version-image/python-examples) as an example, its internal structure is as follows:\n+\n+```text\n+.\n+\u251c\u2500\u2500 deps\n+\u2502\u00a0\u00a0 \u2514\u2500\u2500 sh-1.12.14-py2.py3-none-any.whl\n+\u2514\u2500\u2500 src\n+    \u2514\u2500\u2500 exclamation.py\n+```\n+\n+2. Run the Python Function\n+\n+    (1) Copy the ZIP file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of ZIP file>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Python function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname exclamation \\\n+    --py <path of ZIP file> \\\n+    --inputs persistent://public/default/in-topic \\\n+    --output persistent://public/default/out-topic \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name PythonFunction\n+    ```\n+\n+    The following log indicates that the Python function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).", "originalCommit": "66ef5527903256ec25a6c7a29f90239edff231af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1NzgzOA==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r479957838", "bodyText": "Same as above.", "author": "sijia-w", "createdAt": "2020-08-31T07:50:48Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+## Prerequisite\n+\n+Before running a Pulsar function, you need to start Pulsar.\n+\n+### Run a standalone Pulsar in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts up or not, use the command `docker ps`.\n+\n+### Run Pulsar cluster in k8s\n+\n+For how to deploy Pulsar cluster in the k8s environment, For details, refer to [here](https://pulsar.apache.org/docs/en/helm-overview/).\n+\n+\n+## Java \n+\n+This example demonstrates how to package a function in Java.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+\n+1. Create a new maven project with a pom file.\n+\n+    > **Tip**\n+    >\n+    > `mainClass` is your package name.\n+\n+    ```text\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>java-function</groupId>\n+        <artifactId>java-function</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.pulsar</groupId>\n+                <artifactId>pulsar-functions-api</artifactId>\n+                <version>2.6.0</version>\n+            </dependency>\n+        </dependencies>\n+\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <configuration>\n+                        <appendAssemblyId>false</appendAssemblyId>\n+                        <descriptorRefs>\n+                            <descriptorRef>jar-with-dependencies</descriptorRef>\n+                        </descriptorRefs>\n+                        <archive>\n+                        <manifest>\n+                            <mainClass>org.example.test.ExclamationFunction</mainClass>\n+                        </manifest>\n+                    </archive>\n+                    </configuration>\n+                    <executions>\n+                        <execution>\n+                            <id>make-assembly</id>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>assembly</goal>\n+                            </goals>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-compiler-plugin</artifactId>\n+                    <configuration>\n+                        <source>8</source>\n+                        <target>8</target>\n+                    </configuration>\n+                </plugin>\n+            </plugins>\n+        </build>\n+\n+    </project>\n+    ```\n+\n+2. Write a Java function.\n+\n+    ```\n+    package org.example.test;\n+\n+    import java.util.function.Function;\n+\n+    public class ExclamationFunction implements Function<String, String> {\n+        @Override\n+        public String apply(String s) {\n+            return \"This is my function!\";\n+        }\n+    }\n+    ```\n+\n+    > **Tip**\n+    >\n+    > For the package imported, you can use one of the following interfaces:\n+    >\n+    > - Function interface provided by Java 8: `java.util.function.Function`\n+    >\n+    > - Pulsar Function interface: `org.apache.pulsar.functions.api.Function`\n+    >\n+    > The main difference between the two interfaces is that the `org.apache.pulsar.functions.api.Function` interface provides the context interface. When you write a function and want to interact with it, you can use context to obtain a wide variety of information and functionality for Pulsar Functions.\n+    > \n+    > **Example** \n+    >\n+    > This example uses `org.apache.pulsar.functions.api.Function` interface with context.\n+    >\n+    > ```\n+    > package org.example.functions;\n+    >\n+    > import org.apache.pulsar.functions.api.Context;\n+    > import org.apache.pulsar.functions.api.Function;\n+    > \n+    > import java.util.Arrays;\n+    >\n+    > public class WordCountFunction implements Function<String, Void> {\n+    >    // This function is invoked every time a message is published to the input topic\n+    >    @Override\n+    >    public Void process(String input, Context context) throws Exception {\n+    >       Arrays.asList(input.split(\" \")).forEach(word -> {\n+    >           String counterKey = word.toLowerCase();\n+    >           context.incrCounter(counterKey, 1);\n+    >        });\n+    >       return null;\n+    >   }\n+    > }\n+    > ```\n+\n+3. Package the Java function.\n+\n+    ```bash\n+    mvn package\n+    ```\n+\n+    After the Java function is packaged, a `target` directory is automatically created. Open the `target` directory to see if there is a jar package similar to `java-function-1.0-SNAPSHOT.jar`.\n+\n+\n+4.  Run the Java function.\n+\n+     (1) Copy the packaged jar file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of java-function-1.0-SNAPSHOT.jar>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Java function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --jar java-function-1.0-SNAPSHOT.jar \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name JavaFunction\n+    ```\n+\n+    The following log indicates that the Java function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--jar`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Java function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+## Python \n+\n+Python Function supports the following three forms:\n+\n+- One python file\n+- ZIP file\n+- PIP\n+\n+### One python file\n+\n+This example demonstrates how to package a function by **one python file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+1. Write a Python function.\n+\n+    ```\n+    from pulsar import Function //  import the Function module from Pulsar\n+\n+    # The classic ExclamationFunction that appends an exclamation at the end\n+    # of the input\n+    class ExclamationFunction(Function):\n+      def __init__(self):\n+        pass\n+\n+      def process(self, input, context):\n+        return input + '!'\n+    ```\n+\n+    In this example, when you write a Python function, you need to inherit the Function class and implement the `process()` method.\n+\n+    `process()` mainly has two parameters: \n+\n+    - `input` represents your input.\n+  \n+    - `context` represents an interface exposed by the Pulsar Function. You can get the attributes in the Python function based on the provided context object.\n+\n+2. Install a Python client.\n+\n+    The implementation of a Python function depends on the Python client, so before deploying a Python function, you need to install the corresponding version of the Python client. \n+\n+    ```bash\n+    pip install python-client==2.6.0\n+    ```\n+\n+3. Run the Python Function.\n+\n+    (1) Copy the Python function file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of Python function file>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Python function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --py <path of Python Function file> \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name PythonFunction\n+    ```\n+\n+    The following log indicates that the Python function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Python function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+### ZIP file\n+\n+This example demonstrates how to package a function by **ZIP file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+1. Prepare the ZIP file\n+\n+When packaging the ZIP file of the Python Function, the following requirements need to be met:\n+\n+```text\n+Assuming zip file with format `func.zip`, extract to folder function and internal dir format:\n+    \"func/src\"\n+    \"func/requirements.txt\"\n+    \"func/deps\"\n+```\n+Now we take [exclamation.zip](https://github.com/apache/pulsar/tree/master/tests/docker-images/latest-version-image/python-examples) as an example, its internal structure is as follows:\n+\n+```text\n+.\n+\u251c\u2500\u2500 deps\n+\u2502\u00a0\u00a0 \u2514\u2500\u2500 sh-1.12.14-py2.py3-none-any.whl\n+\u2514\u2500\u2500 src\n+    \u2514\u2500\u2500 exclamation.py\n+```\n+\n+2. Run the Python Function\n+\n+    (1) Copy the ZIP file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of ZIP file>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Python function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname exclamation \\\n+    --py <path of ZIP file> \\\n+    --inputs persistent://public/default/in-topic \\\n+    --output persistent://public/default/out-topic \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name PythonFunction\n+    ```\n+\n+    The following log indicates that the Python function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Python function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+### PIP\n+\n+This example demonstrates how to package a function by **PIP** in Python.\n+\n+> **Note**\n+>\n+> The PIP method is only supported in the runtime of kubernetes.\n+> This example assumes that you have [run a Pulsar cluster in k8s](#Run Pulsar cluster in k8s) successfully.", "originalCommit": "66ef5527903256ec25a6c7a29f90239edff231af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1ODU5OA==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r479958598", "bodyText": "If you have more than one piece of information under a note, please use unordered list.\nIf the unordered list is not used and there is no empty line between two lines, please make sure there are two spaces at the end of a line, so the next line is a new line.\nIf there is only one piece of information, please NOT use the unordered list.", "author": "sijia-w", "createdAt": "2020-08-31T07:52:26Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+## Prerequisite\n+\n+Before running a Pulsar function, you need to start Pulsar.\n+\n+### Run a standalone Pulsar in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts up or not, use the command `docker ps`.\n+\n+### Run Pulsar cluster in k8s\n+\n+For how to deploy Pulsar cluster in the k8s environment, For details, refer to [here](https://pulsar.apache.org/docs/en/helm-overview/).\n+\n+\n+## Java \n+\n+This example demonstrates how to package a function in Java.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+\n+1. Create a new maven project with a pom file.\n+\n+    > **Tip**\n+    >\n+    > `mainClass` is your package name.\n+\n+    ```text\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>java-function</groupId>\n+        <artifactId>java-function</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.pulsar</groupId>\n+                <artifactId>pulsar-functions-api</artifactId>\n+                <version>2.6.0</version>\n+            </dependency>\n+        </dependencies>\n+\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <configuration>\n+                        <appendAssemblyId>false</appendAssemblyId>\n+                        <descriptorRefs>\n+                            <descriptorRef>jar-with-dependencies</descriptorRef>\n+                        </descriptorRefs>\n+                        <archive>\n+                        <manifest>\n+                            <mainClass>org.example.test.ExclamationFunction</mainClass>\n+                        </manifest>\n+                    </archive>\n+                    </configuration>\n+                    <executions>\n+                        <execution>\n+                            <id>make-assembly</id>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>assembly</goal>\n+                            </goals>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-compiler-plugin</artifactId>\n+                    <configuration>\n+                        <source>8</source>\n+                        <target>8</target>\n+                    </configuration>\n+                </plugin>\n+            </plugins>\n+        </build>\n+\n+    </project>\n+    ```\n+\n+2. Write a Java function.\n+\n+    ```\n+    package org.example.test;\n+\n+    import java.util.function.Function;\n+\n+    public class ExclamationFunction implements Function<String, String> {\n+        @Override\n+        public String apply(String s) {\n+            return \"This is my function!\";\n+        }\n+    }\n+    ```\n+\n+    > **Tip**\n+    >\n+    > For the package imported, you can use one of the following interfaces:\n+    >\n+    > - Function interface provided by Java 8: `java.util.function.Function`\n+    >\n+    > - Pulsar Function interface: `org.apache.pulsar.functions.api.Function`\n+    >\n+    > The main difference between the two interfaces is that the `org.apache.pulsar.functions.api.Function` interface provides the context interface. When you write a function and want to interact with it, you can use context to obtain a wide variety of information and functionality for Pulsar Functions.\n+    > \n+    > **Example** \n+    >\n+    > This example uses `org.apache.pulsar.functions.api.Function` interface with context.\n+    >\n+    > ```\n+    > package org.example.functions;\n+    >\n+    > import org.apache.pulsar.functions.api.Context;\n+    > import org.apache.pulsar.functions.api.Function;\n+    > \n+    > import java.util.Arrays;\n+    >\n+    > public class WordCountFunction implements Function<String, Void> {\n+    >    // This function is invoked every time a message is published to the input topic\n+    >    @Override\n+    >    public Void process(String input, Context context) throws Exception {\n+    >       Arrays.asList(input.split(\" \")).forEach(word -> {\n+    >           String counterKey = word.toLowerCase();\n+    >           context.incrCounter(counterKey, 1);\n+    >        });\n+    >       return null;\n+    >   }\n+    > }\n+    > ```\n+\n+3. Package the Java function.\n+\n+    ```bash\n+    mvn package\n+    ```\n+\n+    After the Java function is packaged, a `target` directory is automatically created. Open the `target` directory to see if there is a jar package similar to `java-function-1.0-SNAPSHOT.jar`.\n+\n+\n+4.  Run the Java function.\n+\n+     (1) Copy the packaged jar file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of java-function-1.0-SNAPSHOT.jar>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Java function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --jar java-function-1.0-SNAPSHOT.jar \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name JavaFunction\n+    ```\n+\n+    The following log indicates that the Java function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--jar`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Java function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+## Python \n+\n+Python Function supports the following three forms:\n+\n+- One python file\n+- ZIP file\n+- PIP\n+\n+### One python file\n+\n+This example demonstrates how to package a function by **one python file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+1. Write a Python function.\n+\n+    ```\n+    from pulsar import Function //  import the Function module from Pulsar\n+\n+    # The classic ExclamationFunction that appends an exclamation at the end\n+    # of the input\n+    class ExclamationFunction(Function):\n+      def __init__(self):\n+        pass\n+\n+      def process(self, input, context):\n+        return input + '!'\n+    ```\n+\n+    In this example, when you write a Python function, you need to inherit the Function class and implement the `process()` method.\n+\n+    `process()` mainly has two parameters: \n+\n+    - `input` represents your input.\n+  \n+    - `context` represents an interface exposed by the Pulsar Function. You can get the attributes in the Python function based on the provided context object.\n+\n+2. Install a Python client.\n+\n+    The implementation of a Python function depends on the Python client, so before deploying a Python function, you need to install the corresponding version of the Python client. \n+\n+    ```bash\n+    pip install python-client==2.6.0\n+    ```\n+\n+3. Run the Python Function.\n+\n+    (1) Copy the Python function file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of Python function file>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Python function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --py <path of Python Function file> \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name PythonFunction\n+    ```\n+\n+    The following log indicates that the Python function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Python function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+### ZIP file\n+\n+This example demonstrates how to package a function by **ZIP file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+1. Prepare the ZIP file\n+\n+When packaging the ZIP file of the Python Function, the following requirements need to be met:\n+\n+```text\n+Assuming zip file with format `func.zip`, extract to folder function and internal dir format:\n+    \"func/src\"\n+    \"func/requirements.txt\"\n+    \"func/deps\"\n+```\n+Now we take [exclamation.zip](https://github.com/apache/pulsar/tree/master/tests/docker-images/latest-version-image/python-examples) as an example, its internal structure is as follows:\n+\n+```text\n+.\n+\u251c\u2500\u2500 deps\n+\u2502\u00a0\u00a0 \u2514\u2500\u2500 sh-1.12.14-py2.py3-none-any.whl\n+\u2514\u2500\u2500 src\n+    \u2514\u2500\u2500 exclamation.py\n+```\n+\n+2. Run the Python Function\n+\n+    (1) Copy the ZIP file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of ZIP file>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Python function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname exclamation \\\n+    --py <path of ZIP file> \\\n+    --inputs persistent://public/default/in-topic \\\n+    --output persistent://public/default/out-topic \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name PythonFunction\n+    ```\n+\n+    The following log indicates that the Python function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Python function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+### PIP\n+\n+This example demonstrates how to package a function by **PIP** in Python.\n+\n+> **Note**", "originalCommit": "66ef5527903256ec25a6c7a29f90239edff231af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2MjI3Mg==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r479962272", "bodyText": "Same as above.", "author": "sijia-w", "createdAt": "2020-08-31T07:59:45Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+## Prerequisite\n+\n+Before running a Pulsar function, you need to start Pulsar.\n+\n+### Run a standalone Pulsar in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts up or not, use the command `docker ps`.\n+\n+### Run Pulsar cluster in k8s\n+\n+For how to deploy Pulsar cluster in the k8s environment, For details, refer to [here](https://pulsar.apache.org/docs/en/helm-overview/).\n+\n+\n+## Java \n+\n+This example demonstrates how to package a function in Java.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+\n+1. Create a new maven project with a pom file.\n+\n+    > **Tip**\n+    >\n+    > `mainClass` is your package name.\n+\n+    ```text\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>java-function</groupId>\n+        <artifactId>java-function</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.pulsar</groupId>\n+                <artifactId>pulsar-functions-api</artifactId>\n+                <version>2.6.0</version>\n+            </dependency>\n+        </dependencies>\n+\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <configuration>\n+                        <appendAssemblyId>false</appendAssemblyId>\n+                        <descriptorRefs>\n+                            <descriptorRef>jar-with-dependencies</descriptorRef>\n+                        </descriptorRefs>\n+                        <archive>\n+                        <manifest>\n+                            <mainClass>org.example.test.ExclamationFunction</mainClass>\n+                        </manifest>\n+                    </archive>\n+                    </configuration>\n+                    <executions>\n+                        <execution>\n+                            <id>make-assembly</id>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>assembly</goal>\n+                            </goals>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-compiler-plugin</artifactId>\n+                    <configuration>\n+                        <source>8</source>\n+                        <target>8</target>\n+                    </configuration>\n+                </plugin>\n+            </plugins>\n+        </build>\n+\n+    </project>\n+    ```\n+\n+2. Write a Java function.\n+\n+    ```\n+    package org.example.test;\n+\n+    import java.util.function.Function;\n+\n+    public class ExclamationFunction implements Function<String, String> {\n+        @Override\n+        public String apply(String s) {\n+            return \"This is my function!\";\n+        }\n+    }\n+    ```\n+\n+    > **Tip**\n+    >\n+    > For the package imported, you can use one of the following interfaces:\n+    >\n+    > - Function interface provided by Java 8: `java.util.function.Function`\n+    >\n+    > - Pulsar Function interface: `org.apache.pulsar.functions.api.Function`\n+    >\n+    > The main difference between the two interfaces is that the `org.apache.pulsar.functions.api.Function` interface provides the context interface. When you write a function and want to interact with it, you can use context to obtain a wide variety of information and functionality for Pulsar Functions.\n+    > \n+    > **Example** \n+    >\n+    > This example uses `org.apache.pulsar.functions.api.Function` interface with context.\n+    >\n+    > ```\n+    > package org.example.functions;\n+    >\n+    > import org.apache.pulsar.functions.api.Context;\n+    > import org.apache.pulsar.functions.api.Function;\n+    > \n+    > import java.util.Arrays;\n+    >\n+    > public class WordCountFunction implements Function<String, Void> {\n+    >    // This function is invoked every time a message is published to the input topic\n+    >    @Override\n+    >    public Void process(String input, Context context) throws Exception {\n+    >       Arrays.asList(input.split(\" \")).forEach(word -> {\n+    >           String counterKey = word.toLowerCase();\n+    >           context.incrCounter(counterKey, 1);\n+    >        });\n+    >       return null;\n+    >   }\n+    > }\n+    > ```\n+\n+3. Package the Java function.\n+\n+    ```bash\n+    mvn package\n+    ```\n+\n+    After the Java function is packaged, a `target` directory is automatically created. Open the `target` directory to see if there is a jar package similar to `java-function-1.0-SNAPSHOT.jar`.\n+\n+\n+4.  Run the Java function.\n+\n+     (1) Copy the packaged jar file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of java-function-1.0-SNAPSHOT.jar>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Java function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --jar java-function-1.0-SNAPSHOT.jar \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name JavaFunction\n+    ```\n+\n+    The following log indicates that the Java function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--jar`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Java function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+## Python \n+\n+Python Function supports the following three forms:\n+\n+- One python file\n+- ZIP file\n+- PIP\n+\n+### One python file\n+\n+This example demonstrates how to package a function by **one python file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+1. Write a Python function.\n+\n+    ```\n+    from pulsar import Function //  import the Function module from Pulsar\n+\n+    # The classic ExclamationFunction that appends an exclamation at the end\n+    # of the input\n+    class ExclamationFunction(Function):\n+      def __init__(self):\n+        pass\n+\n+      def process(self, input, context):\n+        return input + '!'\n+    ```\n+\n+    In this example, when you write a Python function, you need to inherit the Function class and implement the `process()` method.\n+\n+    `process()` mainly has two parameters: \n+\n+    - `input` represents your input.\n+  \n+    - `context` represents an interface exposed by the Pulsar Function. You can get the attributes in the Python function based on the provided context object.\n+\n+2. Install a Python client.\n+\n+    The implementation of a Python function depends on the Python client, so before deploying a Python function, you need to install the corresponding version of the Python client. \n+\n+    ```bash\n+    pip install python-client==2.6.0\n+    ```\n+\n+3. Run the Python Function.\n+\n+    (1) Copy the Python function file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of Python function file>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Python function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --py <path of Python Function file> \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name PythonFunction\n+    ```\n+\n+    The following log indicates that the Python function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Python function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+### ZIP file\n+\n+This example demonstrates how to package a function by **ZIP file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+1. Prepare the ZIP file\n+\n+When packaging the ZIP file of the Python Function, the following requirements need to be met:\n+\n+```text\n+Assuming zip file with format `func.zip`, extract to folder function and internal dir format:\n+    \"func/src\"\n+    \"func/requirements.txt\"\n+    \"func/deps\"\n+```\n+Now we take [exclamation.zip](https://github.com/apache/pulsar/tree/master/tests/docker-images/latest-version-image/python-examples) as an example, its internal structure is as follows:\n+\n+```text\n+.\n+\u251c\u2500\u2500 deps\n+\u2502\u00a0\u00a0 \u2514\u2500\u2500 sh-1.12.14-py2.py3-none-any.whl\n+\u2514\u2500\u2500 src\n+    \u2514\u2500\u2500 exclamation.py\n+```\n+\n+2. Run the Python Function\n+\n+    (1) Copy the ZIP file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of ZIP file>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Python function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname exclamation \\\n+    --py <path of ZIP file> \\\n+    --inputs persistent://public/default/in-topic \\\n+    --output persistent://public/default/out-topic \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name PythonFunction\n+    ```\n+\n+    The following log indicates that the Python function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Python function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+### PIP\n+\n+This example demonstrates how to package a function by **PIP** in Python.\n+\n+> **Note**\n+>\n+> The PIP method is only supported in the runtime of kubernetes.\n+> This example assumes that you have [run a Pulsar cluster in k8s](#Run Pulsar cluster in k8s) successfully.\n+\n+1. Config `functions_worker.yml`:\n+\n+```text\n+#### Kubernetes Runtime ####\n+installUserCodeDependencies: true\n+```\n+\n+2. Write your Python Function\n+\n+```\n+from pulsar import Function\n+import js2xml\n+\n+# The classic ExclamationFunction that appends an exclamation at the end\n+# of the input\n+class ExclamationFunction(Function):\n+  def __init__(self):\n+    pass\n+\n+  def process(self, input, context):\n+    // add your logic\n+    return input + '!'\n+```\n+\n+Here we can introduce additional dependencies. When Python Function detects that the file currently used is `whl` and the `installUserCodeDependencies` parameter is specified, the system will execute `pip install` to install the dependencies required in Python Function.\n+\n+3. Generate the `whl` file\n+\n+```shell script\n+$ cd $PULSAR_HOME/pulsar-functions/scripts/python\n+$ chmod +x generate.sh\n+$ ./generate.sh <path of your Python Function> <path of the whl output dir> <the version of whl>\n+# e.g: ./generate.sh /path/to/python /path/to/python/output 1.0.0\n+```\n+\n+Output in `/path/to/python/output`:\n+\n+```text\n+-rw-r--r--  1 root  staff   1.8K  8 27 14:29 pulsarfunction-1.0.0-py2-none-any.whl\n+-rw-r--r--  1 root  staff   1.4K  8 27 14:29 pulsarfunction-1.0.0.tar.gz\n+-rw-r--r--  1 root  staff     0B  8 27 14:29 pulsarfunction.whl\n+```\n+\n+## Go \n+\n+This example demonstrates how to package a function in Go.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.", "originalCommit": "66ef5527903256ec25a6c7a29f90239edff231af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2Mjk5Mw==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r479962993", "bodyText": "returned value list implemented is a bit confusing.", "author": "sijia-w", "createdAt": "2020-08-31T08:01:08Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+## Prerequisite\n+\n+Before running a Pulsar function, you need to start Pulsar.\n+\n+### Run a standalone Pulsar in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts up or not, use the command `docker ps`.\n+\n+### Run Pulsar cluster in k8s\n+\n+For how to deploy Pulsar cluster in the k8s environment, For details, refer to [here](https://pulsar.apache.org/docs/en/helm-overview/).\n+\n+\n+## Java \n+\n+This example demonstrates how to package a function in Java.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+\n+1. Create a new maven project with a pom file.\n+\n+    > **Tip**\n+    >\n+    > `mainClass` is your package name.\n+\n+    ```text\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>java-function</groupId>\n+        <artifactId>java-function</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.pulsar</groupId>\n+                <artifactId>pulsar-functions-api</artifactId>\n+                <version>2.6.0</version>\n+            </dependency>\n+        </dependencies>\n+\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <configuration>\n+                        <appendAssemblyId>false</appendAssemblyId>\n+                        <descriptorRefs>\n+                            <descriptorRef>jar-with-dependencies</descriptorRef>\n+                        </descriptorRefs>\n+                        <archive>\n+                        <manifest>\n+                            <mainClass>org.example.test.ExclamationFunction</mainClass>\n+                        </manifest>\n+                    </archive>\n+                    </configuration>\n+                    <executions>\n+                        <execution>\n+                            <id>make-assembly</id>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>assembly</goal>\n+                            </goals>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-compiler-plugin</artifactId>\n+                    <configuration>\n+                        <source>8</source>\n+                        <target>8</target>\n+                    </configuration>\n+                </plugin>\n+            </plugins>\n+        </build>\n+\n+    </project>\n+    ```\n+\n+2. Write a Java function.\n+\n+    ```\n+    package org.example.test;\n+\n+    import java.util.function.Function;\n+\n+    public class ExclamationFunction implements Function<String, String> {\n+        @Override\n+        public String apply(String s) {\n+            return \"This is my function!\";\n+        }\n+    }\n+    ```\n+\n+    > **Tip**\n+    >\n+    > For the package imported, you can use one of the following interfaces:\n+    >\n+    > - Function interface provided by Java 8: `java.util.function.Function`\n+    >\n+    > - Pulsar Function interface: `org.apache.pulsar.functions.api.Function`\n+    >\n+    > The main difference between the two interfaces is that the `org.apache.pulsar.functions.api.Function` interface provides the context interface. When you write a function and want to interact with it, you can use context to obtain a wide variety of information and functionality for Pulsar Functions.\n+    > \n+    > **Example** \n+    >\n+    > This example uses `org.apache.pulsar.functions.api.Function` interface with context.\n+    >\n+    > ```\n+    > package org.example.functions;\n+    >\n+    > import org.apache.pulsar.functions.api.Context;\n+    > import org.apache.pulsar.functions.api.Function;\n+    > \n+    > import java.util.Arrays;\n+    >\n+    > public class WordCountFunction implements Function<String, Void> {\n+    >    // This function is invoked every time a message is published to the input topic\n+    >    @Override\n+    >    public Void process(String input, Context context) throws Exception {\n+    >       Arrays.asList(input.split(\" \")).forEach(word -> {\n+    >           String counterKey = word.toLowerCase();\n+    >           context.incrCounter(counterKey, 1);\n+    >        });\n+    >       return null;\n+    >   }\n+    > }\n+    > ```\n+\n+3. Package the Java function.\n+\n+    ```bash\n+    mvn package\n+    ```\n+\n+    After the Java function is packaged, a `target` directory is automatically created. Open the `target` directory to see if there is a jar package similar to `java-function-1.0-SNAPSHOT.jar`.\n+\n+\n+4.  Run the Java function.\n+\n+     (1) Copy the packaged jar file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of java-function-1.0-SNAPSHOT.jar>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Java function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --jar java-function-1.0-SNAPSHOT.jar \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name JavaFunction\n+    ```\n+\n+    The following log indicates that the Java function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--jar`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Java function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+## Python \n+\n+Python Function supports the following three forms:\n+\n+- One python file\n+- ZIP file\n+- PIP\n+\n+### One python file\n+\n+This example demonstrates how to package a function by **one python file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+1. Write a Python function.\n+\n+    ```\n+    from pulsar import Function //  import the Function module from Pulsar\n+\n+    # The classic ExclamationFunction that appends an exclamation at the end\n+    # of the input\n+    class ExclamationFunction(Function):\n+      def __init__(self):\n+        pass\n+\n+      def process(self, input, context):\n+        return input + '!'\n+    ```\n+\n+    In this example, when you write a Python function, you need to inherit the Function class and implement the `process()` method.\n+\n+    `process()` mainly has two parameters: \n+\n+    - `input` represents your input.\n+  \n+    - `context` represents an interface exposed by the Pulsar Function. You can get the attributes in the Python function based on the provided context object.\n+\n+2. Install a Python client.\n+\n+    The implementation of a Python function depends on the Python client, so before deploying a Python function, you need to install the corresponding version of the Python client. \n+\n+    ```bash\n+    pip install python-client==2.6.0\n+    ```\n+\n+3. Run the Python Function.\n+\n+    (1) Copy the Python function file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of Python function file>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Python function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --py <path of Python Function file> \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name PythonFunction\n+    ```\n+\n+    The following log indicates that the Python function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Python function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+### ZIP file\n+\n+This example demonstrates how to package a function by **ZIP file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+1. Prepare the ZIP file\n+\n+When packaging the ZIP file of the Python Function, the following requirements need to be met:\n+\n+```text\n+Assuming zip file with format `func.zip`, extract to folder function and internal dir format:\n+    \"func/src\"\n+    \"func/requirements.txt\"\n+    \"func/deps\"\n+```\n+Now we take [exclamation.zip](https://github.com/apache/pulsar/tree/master/tests/docker-images/latest-version-image/python-examples) as an example, its internal structure is as follows:\n+\n+```text\n+.\n+\u251c\u2500\u2500 deps\n+\u2502\u00a0\u00a0 \u2514\u2500\u2500 sh-1.12.14-py2.py3-none-any.whl\n+\u2514\u2500\u2500 src\n+    \u2514\u2500\u2500 exclamation.py\n+```\n+\n+2. Run the Python Function\n+\n+    (1) Copy the ZIP file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of ZIP file>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Python function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname exclamation \\\n+    --py <path of ZIP file> \\\n+    --inputs persistent://public/default/in-topic \\\n+    --output persistent://public/default/out-topic \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name PythonFunction\n+    ```\n+\n+    The following log indicates that the Python function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Python function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+### PIP\n+\n+This example demonstrates how to package a function by **PIP** in Python.\n+\n+> **Note**\n+>\n+> The PIP method is only supported in the runtime of kubernetes.\n+> This example assumes that you have [run a Pulsar cluster in k8s](#Run Pulsar cluster in k8s) successfully.\n+\n+1. Config `functions_worker.yml`:\n+\n+```text\n+#### Kubernetes Runtime ####\n+installUserCodeDependencies: true\n+```\n+\n+2. Write your Python Function\n+\n+```\n+from pulsar import Function\n+import js2xml\n+\n+# The classic ExclamationFunction that appends an exclamation at the end\n+# of the input\n+class ExclamationFunction(Function):\n+  def __init__(self):\n+    pass\n+\n+  def process(self, input, context):\n+    // add your logic\n+    return input + '!'\n+```\n+\n+Here we can introduce additional dependencies. When Python Function detects that the file currently used is `whl` and the `installUserCodeDependencies` parameter is specified, the system will execute `pip install` to install the dependencies required in Python Function.\n+\n+3. Generate the `whl` file\n+\n+```shell script\n+$ cd $PULSAR_HOME/pulsar-functions/scripts/python\n+$ chmod +x generate.sh\n+$ ./generate.sh <path of your Python Function> <path of the whl output dir> <the version of whl>\n+# e.g: ./generate.sh /path/to/python /path/to/python/output 1.0.0\n+```\n+\n+Output in `/path/to/python/output`:\n+\n+```text\n+-rw-r--r--  1 root  staff   1.8K  8 27 14:29 pulsarfunction-1.0.0-py2-none-any.whl\n+-rw-r--r--  1 root  staff   1.4K  8 27 14:29 pulsarfunction-1.0.0.tar.gz\n+-rw-r--r--  1 root  staff     0B  8 27 14:29 pulsarfunction.whl\n+```\n+\n+## Go \n+\n+This example demonstrates how to package a function in Go.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+1. Write a Go function.\n+\n+    Currently, Go function can be **only** implemented using SDK and the interface of the function is exposed in the form of SDK. Before using the Go function, you need to import \"github.com/apache/pulsar/pulsar-function-go/pf\". \n+\n+    ```\n+    import (\n+        \"context\"\n+        \"fmt\"\n+\n+        \"github.com/apache/pulsar/pulsar-function-go/pf\"\n+    )\n+\n+    func HandleRequest(ctx context.Context, input []byte) error {\n+        fmt.Println(string(input) + \"!\")\n+        return nil\n+    }\n+\n+    func main() {\n+        pf.Start(HandleRequest)\n+    }\n+    ```\n+\n+    > **Tip**\n+    > \n+    > You can use context to connect with the Go function.\n+    >\n+    > ```\n+    > if fc, ok := pf.FromContext(ctx); ok {\n+    >    fmt.Printf(\"function ID is:%s, \", fc.GetFuncID())\n+    >    fmt.Printf(\"function version is:%s\\n\", fc.GetFuncVersion())\n+    > }\n+    > ```\n+\n+    > **Note**\n+    >\n+    > - In `main()`, you **only** need to register the function name to `Start()`. **Only** one function name can be received in `Start()`. \n+    >\n+    > - Go function uses Go reflection based on the received function name to verify whether the parameter list and returned value list implemented are correct. The parameter list and returned value list specified **must be** one of the following sample functions:", "originalCommit": "66ef5527903256ec25a6c7a29f90239edff231af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2MzMyMA==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r479963320", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                >  - For the description about the parameters (for example, `--classname`, `--go`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n          \n          \n            \n                >  - For the description about the parameters (for example, `--classname`, `--go`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).", "author": "sijia-w", "createdAt": "2020-08-31T08:01:45Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+## Prerequisite\n+\n+Before running a Pulsar function, you need to start Pulsar.\n+\n+### Run a standalone Pulsar in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts up or not, use the command `docker ps`.\n+\n+### Run Pulsar cluster in k8s\n+\n+For how to deploy Pulsar cluster in the k8s environment, For details, refer to [here](https://pulsar.apache.org/docs/en/helm-overview/).\n+\n+\n+## Java \n+\n+This example demonstrates how to package a function in Java.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+\n+1. Create a new maven project with a pom file.\n+\n+    > **Tip**\n+    >\n+    > `mainClass` is your package name.\n+\n+    ```text\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>java-function</groupId>\n+        <artifactId>java-function</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.pulsar</groupId>\n+                <artifactId>pulsar-functions-api</artifactId>\n+                <version>2.6.0</version>\n+            </dependency>\n+        </dependencies>\n+\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <configuration>\n+                        <appendAssemblyId>false</appendAssemblyId>\n+                        <descriptorRefs>\n+                            <descriptorRef>jar-with-dependencies</descriptorRef>\n+                        </descriptorRefs>\n+                        <archive>\n+                        <manifest>\n+                            <mainClass>org.example.test.ExclamationFunction</mainClass>\n+                        </manifest>\n+                    </archive>\n+                    </configuration>\n+                    <executions>\n+                        <execution>\n+                            <id>make-assembly</id>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>assembly</goal>\n+                            </goals>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-compiler-plugin</artifactId>\n+                    <configuration>\n+                        <source>8</source>\n+                        <target>8</target>\n+                    </configuration>\n+                </plugin>\n+            </plugins>\n+        </build>\n+\n+    </project>\n+    ```\n+\n+2. Write a Java function.\n+\n+    ```\n+    package org.example.test;\n+\n+    import java.util.function.Function;\n+\n+    public class ExclamationFunction implements Function<String, String> {\n+        @Override\n+        public String apply(String s) {\n+            return \"This is my function!\";\n+        }\n+    }\n+    ```\n+\n+    > **Tip**\n+    >\n+    > For the package imported, you can use one of the following interfaces:\n+    >\n+    > - Function interface provided by Java 8: `java.util.function.Function`\n+    >\n+    > - Pulsar Function interface: `org.apache.pulsar.functions.api.Function`\n+    >\n+    > The main difference between the two interfaces is that the `org.apache.pulsar.functions.api.Function` interface provides the context interface. When you write a function and want to interact with it, you can use context to obtain a wide variety of information and functionality for Pulsar Functions.\n+    > \n+    > **Example** \n+    >\n+    > This example uses `org.apache.pulsar.functions.api.Function` interface with context.\n+    >\n+    > ```\n+    > package org.example.functions;\n+    >\n+    > import org.apache.pulsar.functions.api.Context;\n+    > import org.apache.pulsar.functions.api.Function;\n+    > \n+    > import java.util.Arrays;\n+    >\n+    > public class WordCountFunction implements Function<String, Void> {\n+    >    // This function is invoked every time a message is published to the input topic\n+    >    @Override\n+    >    public Void process(String input, Context context) throws Exception {\n+    >       Arrays.asList(input.split(\" \")).forEach(word -> {\n+    >           String counterKey = word.toLowerCase();\n+    >           context.incrCounter(counterKey, 1);\n+    >        });\n+    >       return null;\n+    >   }\n+    > }\n+    > ```\n+\n+3. Package the Java function.\n+\n+    ```bash\n+    mvn package\n+    ```\n+\n+    After the Java function is packaged, a `target` directory is automatically created. Open the `target` directory to see if there is a jar package similar to `java-function-1.0-SNAPSHOT.jar`.\n+\n+\n+4.  Run the Java function.\n+\n+     (1) Copy the packaged jar file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of java-function-1.0-SNAPSHOT.jar>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Java function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --jar java-function-1.0-SNAPSHOT.jar \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name JavaFunction\n+    ```\n+\n+    The following log indicates that the Java function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--jar`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Java function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+## Python \n+\n+Python Function supports the following three forms:\n+\n+- One python file\n+- ZIP file\n+- PIP\n+\n+### One python file\n+\n+This example demonstrates how to package a function by **one python file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+1. Write a Python function.\n+\n+    ```\n+    from pulsar import Function //  import the Function module from Pulsar\n+\n+    # The classic ExclamationFunction that appends an exclamation at the end\n+    # of the input\n+    class ExclamationFunction(Function):\n+      def __init__(self):\n+        pass\n+\n+      def process(self, input, context):\n+        return input + '!'\n+    ```\n+\n+    In this example, when you write a Python function, you need to inherit the Function class and implement the `process()` method.\n+\n+    `process()` mainly has two parameters: \n+\n+    - `input` represents your input.\n+  \n+    - `context` represents an interface exposed by the Pulsar Function. You can get the attributes in the Python function based on the provided context object.\n+\n+2. Install a Python client.\n+\n+    The implementation of a Python function depends on the Python client, so before deploying a Python function, you need to install the corresponding version of the Python client. \n+\n+    ```bash\n+    pip install python-client==2.6.0\n+    ```\n+\n+3. Run the Python Function.\n+\n+    (1) Copy the Python function file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of Python function file>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Python function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --py <path of Python Function file> \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name PythonFunction\n+    ```\n+\n+    The following log indicates that the Python function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Python function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+### ZIP file\n+\n+This example demonstrates how to package a function by **ZIP file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+1. Prepare the ZIP file\n+\n+When packaging the ZIP file of the Python Function, the following requirements need to be met:\n+\n+```text\n+Assuming zip file with format `func.zip`, extract to folder function and internal dir format:\n+    \"func/src\"\n+    \"func/requirements.txt\"\n+    \"func/deps\"\n+```\n+Now we take [exclamation.zip](https://github.com/apache/pulsar/tree/master/tests/docker-images/latest-version-image/python-examples) as an example, its internal structure is as follows:\n+\n+```text\n+.\n+\u251c\u2500\u2500 deps\n+\u2502\u00a0\u00a0 \u2514\u2500\u2500 sh-1.12.14-py2.py3-none-any.whl\n+\u2514\u2500\u2500 src\n+    \u2514\u2500\u2500 exclamation.py\n+```\n+\n+2. Run the Python Function\n+\n+    (1) Copy the ZIP file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of ZIP file>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Python function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname exclamation \\\n+    --py <path of ZIP file> \\\n+    --inputs persistent://public/default/in-topic \\\n+    --output persistent://public/default/out-topic \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name PythonFunction\n+    ```\n+\n+    The following log indicates that the Python function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Python function starts up successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+### PIP\n+\n+This example demonstrates how to package a function by **PIP** in Python.\n+\n+> **Note**\n+>\n+> The PIP method is only supported in the runtime of kubernetes.\n+> This example assumes that you have [run a Pulsar cluster in k8s](#Run Pulsar cluster in k8s) successfully.\n+\n+1. Config `functions_worker.yml`:\n+\n+```text\n+#### Kubernetes Runtime ####\n+installUserCodeDependencies: true\n+```\n+\n+2. Write your Python Function\n+\n+```\n+from pulsar import Function\n+import js2xml\n+\n+# The classic ExclamationFunction that appends an exclamation at the end\n+# of the input\n+class ExclamationFunction(Function):\n+  def __init__(self):\n+    pass\n+\n+  def process(self, input, context):\n+    // add your logic\n+    return input + '!'\n+```\n+\n+Here we can introduce additional dependencies. When Python Function detects that the file currently used is `whl` and the `installUserCodeDependencies` parameter is specified, the system will execute `pip install` to install the dependencies required in Python Function.\n+\n+3. Generate the `whl` file\n+\n+```shell script\n+$ cd $PULSAR_HOME/pulsar-functions/scripts/python\n+$ chmod +x generate.sh\n+$ ./generate.sh <path of your Python Function> <path of the whl output dir> <the version of whl>\n+# e.g: ./generate.sh /path/to/python /path/to/python/output 1.0.0\n+```\n+\n+Output in `/path/to/python/output`:\n+\n+```text\n+-rw-r--r--  1 root  staff   1.8K  8 27 14:29 pulsarfunction-1.0.0-py2-none-any.whl\n+-rw-r--r--  1 root  staff   1.4K  8 27 14:29 pulsarfunction-1.0.0.tar.gz\n+-rw-r--r--  1 root  staff     0B  8 27 14:29 pulsarfunction.whl\n+```\n+\n+## Go \n+\n+This example demonstrates how to package a function in Go.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#Run a standalone Pulsar in Docker) successfully.\n+\n+1. Write a Go function.\n+\n+    Currently, Go function can be **only** implemented using SDK and the interface of the function is exposed in the form of SDK. Before using the Go function, you need to import \"github.com/apache/pulsar/pulsar-function-go/pf\". \n+\n+    ```\n+    import (\n+        \"context\"\n+        \"fmt\"\n+\n+        \"github.com/apache/pulsar/pulsar-function-go/pf\"\n+    )\n+\n+    func HandleRequest(ctx context.Context, input []byte) error {\n+        fmt.Println(string(input) + \"!\")\n+        return nil\n+    }\n+\n+    func main() {\n+        pf.Start(HandleRequest)\n+    }\n+    ```\n+\n+    > **Tip**\n+    > \n+    > You can use context to connect with the Go function.\n+    >\n+    > ```\n+    > if fc, ok := pf.FromContext(ctx); ok {\n+    >    fmt.Printf(\"function ID is:%s, \", fc.GetFuncID())\n+    >    fmt.Printf(\"function version is:%s\\n\", fc.GetFuncVersion())\n+    > }\n+    > ```\n+\n+    > **Note**\n+    >\n+    > - In `main()`, you **only** need to register the function name to `Start()`. **Only** one function name can be received in `Start()`. \n+    >\n+    > - Go function uses Go reflection based on the received function name to verify whether the parameter list and returned value list implemented are correct. The parameter list and returned value list specified **must be** one of the following sample functions:\n+    >\n+    >   ```\n+    >   func ()\n+    >   func () error\n+    >   func (input) error\n+    >   func () (output, error)\n+    >   func (input) (output, error)\n+    >   func (context.Context) error\n+    >   func (context.Context, input) error\n+    >   func (context.Context) (output, error)\n+    >   func (context.Context, input) (output, error)\n+    >   ```\n+\n+2. Build the Go function.\n+\n+    ```\n+    go build <your Go Function filename>.go \n+    ```\n+\n+3. Run the Go Function.\n+\n+    (1) Copy the Go function file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <your go function path>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Go function with the following command.\n+\n+    ```\n+    ./bin/pulsar-admin functions localrun \\\n+        --go [your go function path] \n+        --inputs [input topics] \\\n+        --output [output topic] \\\n+        --tenant [default:public] \\\n+        --namespace [default:default] \\\n+        --name [custom unique go function name] \n+    ```\n+\n+    The following log indicates that the Go function starts up successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--go`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` to get more information or see [here](http://pulsar.apache.org/docs/en/pulsar-admin/#functions).", "originalCommit": "66ef5527903256ec25a6c7a29f90239edff231af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2MzY0MA==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r479963640", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            > - To check whether the image starts up or not, use the command `docker ps`.\n          \n          \n            \n            > - To check whether the image starts up, use the command `docker ps`.", "author": "sijia-w", "createdAt": "2020-08-31T08:02:26Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+## Prerequisite\n+\n+Before running a Pulsar function, you need to start Pulsar.\n+\n+### Run a standalone Pulsar in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts up or not, use the command `docker ps`.", "originalCommit": "66ef5527903256ec25a6c7a29f90239edff231af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5f564e5ed01836cb008fd30e4523228b7eed54f8", "url": "https://github.com/apache/pulsar/commit/5f564e5ed01836cb008fd30e4523228b7eed54f8", "message": "fix comments\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>", "committedDate": "2020-09-02T03:39:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYzOTU3Ng==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r481639576", "bodyText": "use relative path for links, update it as (helm-overview.md)", "author": "Jennifer88huang", "createdAt": "2020-09-02T04:03:20Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+## Prerequisite\n+\n+Before running a Pulsar function, you need to start Pulsar.\n+\n+### Run a standalone Pulsar in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts up, use the command `docker ps`.\n+\n+### Run Pulsar cluster in k8s\n+\n+For details about how to deploy a Pulsar cluster in the k8s environment, For details, see [here](https://pulsar.apache.org/docs/en/helm-overview/).", "originalCommit": "5f564e5ed01836cb008fd30e4523228b7eed54f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY0MTQwOQ==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r481641409", "bodyText": "what does \"the image starts up\"?", "author": "Jennifer88huang", "createdAt": "2020-09-02T04:05:21Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+## Prerequisite\n+\n+Before running a Pulsar function, you need to start Pulsar.\n+\n+### Run a standalone Pulsar in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts up, use the command `docker ps`.", "originalCommit": "5f564e5ed01836cb008fd30e4523228b7eed54f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fd60d001d1d6a4229c3dc5c06d267592eb2f9550", "url": "https://github.com/apache/pulsar/commit/fd60d001d1d6a4229c3dc5c06d267592eb2f9550", "message": "fix comments\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>", "committedDate": "2020-09-04T05:39:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQxMjI3MQ==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r483412271", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For details about how to deploy a Pulsar cluster in the k8s environment, For details, see [here](helm-overview.md).\n          \n          \n            \n            For details about how to deploy a Pulsar cluster in the k8s environment, see [here](helm-overview.md).", "author": "Jennifer88huang", "createdAt": "2020-09-04T06:24:50Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+## Prerequisite\n+\n+Before running a Pulsar function, you need to start Pulsar.\n+\n+### Run a standalone Pulsar in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts, use the command `docker ps`.\n+\n+### Run Pulsar cluster in k8s\n+\n+For details about how to deploy a Pulsar cluster in the k8s environment, For details, see [here](helm-overview.md).", "originalCommit": "fd60d001d1d6a4229c3dc5c06d267592eb2f9550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQxMzcyNw==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r483413727", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Here we can introduce additional dependencies. When Python Function detects that the file currently used is `whl` and the `installUserCodeDependencies` parameter is specified, the system will execute `pip install` to install the dependencies required in Python Function.\n          \n          \n            \n            Here we can introduce additional dependencies. When Python Function detects that the file currently used is `whl` and the `installUserCodeDependencies` parameter is specified, the system use the `pip install` command to install the dependencies required in Python Function.", "author": "Jennifer88huang", "createdAt": "2020-09-04T06:28:59Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+## Prerequisite\n+\n+Before running a Pulsar function, you need to start Pulsar.\n+\n+### Run a standalone Pulsar in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts, use the command `docker ps`.\n+\n+### Run Pulsar cluster in k8s\n+\n+For details about how to deploy a Pulsar cluster in the k8s environment, For details, see [here](helm-overview.md).\n+\n+\n+## Java \n+\n+This example demonstrates how to package a function in Java.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#run-a-standalone-pulsar-in-docker) successfully.\n+\n+\n+1. Create a new maven project with a pom file.\n+\n+    > **Tip**\n+    >\n+    > `mainClass` is your package name.\n+\n+    ```text\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>java-function</groupId>\n+        <artifactId>java-function</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.pulsar</groupId>\n+                <artifactId>pulsar-functions-api</artifactId>\n+                <version>2.6.0</version>\n+            </dependency>\n+        </dependencies>\n+\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <configuration>\n+                        <appendAssemblyId>false</appendAssemblyId>\n+                        <descriptorRefs>\n+                            <descriptorRef>jar-with-dependencies</descriptorRef>\n+                        </descriptorRefs>\n+                        <archive>\n+                        <manifest>\n+                            <mainClass>org.example.test.ExclamationFunction</mainClass>\n+                        </manifest>\n+                    </archive>\n+                    </configuration>\n+                    <executions>\n+                        <execution>\n+                            <id>make-assembly</id>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>assembly</goal>\n+                            </goals>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-compiler-plugin</artifactId>\n+                    <configuration>\n+                        <source>8</source>\n+                        <target>8</target>\n+                    </configuration>\n+                </plugin>\n+            </plugins>\n+        </build>\n+\n+    </project>\n+    ```\n+\n+2. Write a Java function.\n+\n+    ```\n+    package org.example.test;\n+\n+    import java.util.function.Function;\n+\n+    public class ExclamationFunction implements Function<String, String> {\n+        @Override\n+        public String apply(String s) {\n+            return \"This is my function!\";\n+        }\n+    }\n+    ```\n+\n+    > **Tip**\n+    >\n+    > For the package imported, you can use one of the following interfaces:\n+    >\n+    > - Function interface provided by Java 8: `java.util.function.Function`\n+    >\n+    > - Pulsar Function interface: `org.apache.pulsar.functions.api.Function`\n+    >\n+    > The main difference between the two interfaces is that the `org.apache.pulsar.functions.api.Function` interface provides the context interface. When you write a function and want to interact with it, you can use context to obtain a wide variety of information and functionality for Pulsar Functions.\n+    > \n+    > **Example** \n+    >\n+    > This example uses `org.apache.pulsar.functions.api.Function` interface with context.\n+    >\n+    > ```\n+    > package org.example.functions;\n+    >\n+    > import org.apache.pulsar.functions.api.Context;\n+    > import org.apache.pulsar.functions.api.Function;\n+    > \n+    > import java.util.Arrays;\n+    >\n+    > public class WordCountFunction implements Function<String, Void> {\n+    >    // This function is invoked every time a message is published to the input topic\n+    >    @Override\n+    >    public Void process(String input, Context context) throws Exception {\n+    >       Arrays.asList(input.split(\" \")).forEach(word -> {\n+    >           String counterKey = word.toLowerCase();\n+    >           context.incrCounter(counterKey, 1);\n+    >        });\n+    >       return null;\n+    >   }\n+    > }\n+    > ```\n+\n+3. Package the Java function.\n+\n+    ```bash\n+    mvn package\n+    ```\n+\n+    After the Java function is packaged, a `target` directory is automatically created. Open the `target` directory to see if there is a jar package similar to `java-function-1.0-SNAPSHOT.jar`.\n+\n+\n+4.  Run the Java function.\n+\n+     (1) Copy the packaged jar file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of java-function-1.0-SNAPSHOT.jar>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Java function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --jar java-function-1.0-SNAPSHOT.jar \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name JavaFunction\n+    ```\n+\n+    The following log indicates that the Java function starts successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--jar`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` or see [here](reference-pulsar-admin.md#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Java function starts successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+## Python \n+\n+Python Function supports the following three formats:\n+\n+- One python file\n+- ZIP file\n+- PIP\n+\n+### One python file\n+\n+This example demonstrates how to package a function by **one python file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#run-a-standalone-pulsar-in-docker) successfully.\n+\n+1. Write a Python function.\n+\n+    ```\n+    from pulsar import Function //  import the Function module from Pulsar\n+\n+    # The classic ExclamationFunction that appends an exclamation at the end\n+    # of the input\n+    class ExclamationFunction(Function):\n+      def __init__(self):\n+        pass\n+\n+      def process(self, input, context):\n+        return input + '!'\n+    ```\n+\n+    In this example, when you write a Python function, you need to inherit the Function class and implement the `process()` method.\n+\n+    `process()` mainly has two parameters: \n+\n+    - `input` represents your input.\n+  \n+    - `context` represents an interface exposed by the Pulsar Function. You can get the attributes in the Python function based on the provided context object.\n+\n+2. Install a Python client.\n+\n+    The implementation of a Python function depends on the Python client, so before deploying a Python function, you need to install the corresponding version of the Python client. \n+\n+    ```bash\n+    pip install python-client==2.6.0\n+    ```\n+\n+3. Run the Python Function.\n+\n+    (1) Copy the Python function file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of Python function file>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Python function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --py <path of Python Function file> \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name PythonFunction\n+    ```\n+\n+    The following log indicates that the Python function starts successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    > - For the description about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` or see [here](reference-pulsar-admin.md#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Python function starts successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+### ZIP file\n+\n+This example demonstrates how to package a function by **ZIP file** in Python.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#run-a-standalone-pulsar-in-docker) successfully.\n+\n+1. Prepare the ZIP file\n+\n+When packaging the ZIP file of the Python Function, the following requirements need to be met:\n+\n+```text\n+Assuming the zip file is named as `func.zip`, unzip the `func.zip` folder:\n+    \"func/src\"\n+    \"func/requirements.txt\"\n+    \"func/deps\"\n+```\n+Now we take [exclamation.zip](https://github.com/apache/pulsar/tree/master/tests/docker-images/latest-version-image/python-examples) as an example, of which the internal structure is as follows:\n+\n+```text\n+.\n+\u251c\u2500\u2500 deps\n+\u2502\u00a0\u00a0 \u2514\u2500\u2500 sh-1.12.14-py2.py3-none-any.whl\n+\u2514\u2500\u2500 src\n+    \u2514\u2500\u2500 exclamation.py\n+```\n+\n+2. Run the Python Function\n+\n+    (1) Copy the ZIP file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of ZIP file>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Python function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname exclamation \\\n+    --py <path of ZIP file> \\\n+    --inputs persistent://public/default/in-topic \\\n+    --output persistent://public/default/out-topic \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name PythonFunction\n+    ```\n+\n+    The following log indicates that the Python function starts successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    > - For the description about the parameters (for example, `--classname`, `--py`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` or see [here](reference-pulsar-admin.md#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Python function starts successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```\n+\n+### PIP\n+\n+This example demonstrates how to package a function by **PIP** in Python.\n+\n+> **Note**\n+>\n+> - The PIP method is only supported in the runtime of kubernetes.\n+> - This example assumes that you have [run a Pulsar cluster in k8s](#run-pulsar-cluster-in-k8s) successfully.\n+\n+1. Config `functions_worker.yml`:\n+\n+```text\n+#### Kubernetes Runtime ####\n+installUserCodeDependencies: true\n+```\n+\n+2. Write your Python Function\n+\n+```\n+from pulsar import Function\n+import js2xml\n+\n+# The classic ExclamationFunction that appends an exclamation at the end\n+# of the input\n+class ExclamationFunction(Function):\n+  def __init__(self):\n+    pass\n+\n+  def process(self, input, context):\n+    // add your logic\n+    return input + '!'\n+```\n+\n+Here we can introduce additional dependencies. When Python Function detects that the file currently used is `whl` and the `installUserCodeDependencies` parameter is specified, the system will execute `pip install` to install the dependencies required in Python Function.", "originalCommit": "fd60d001d1d6a4229c3dc5c06d267592eb2f9550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQxNDI4Mg==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r483414282", "bodyText": "Since we have Prerequisite, we can just remove the note in each Function.", "author": "Jennifer88huang", "createdAt": "2020-09-04T06:30:34Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+## Prerequisite\n+\n+Before running a Pulsar function, you need to start Pulsar.\n+\n+### Run a standalone Pulsar in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts, use the command `docker ps`.\n+\n+### Run Pulsar cluster in k8s\n+\n+For details about how to deploy a Pulsar cluster in the k8s environment, For details, see [here](helm-overview.md).\n+\n+\n+## Java \n+\n+This example demonstrates how to package a function in Java.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#run-a-standalone-pulsar-in-docker) successfully.", "originalCommit": "fd60d001d1d6a4229c3dc5c06d267592eb2f9550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQxNTY0MQ==", "url": "https://github.com/apache/pulsar/pull/7904#discussion_r483415641", "bodyText": "I see the same tip occurs several times in this doc, if it's important information, you can add it in the body. If you prefer tips, I suggest that we can keep one.\nFor guides on \"Tip/Note\", refer to https://developers.google.com/style/notices", "author": "Jennifer88huang", "createdAt": "2020-09-04T06:34:04Z", "path": "site2/docs/functions-package.md", "diffHunk": "@@ -0,0 +1,524 @@\n+---\n+id: functions-package\n+title: Package Pulsar Functions\n+sidebar_label: \"How-to: Package\"\n+---\n+\n+This section provides step-by-step instructions to package Pulsar functions in Java, Python, and Go. \n+\n+> **Tip**\n+>\n+> - Packaging a window function in Java is the same as [packaging a function in Java](#java) as below. \n+>\n+> - Currently, the window function is not available in Python and Go.\n+\n+## Prerequisite\n+\n+Before running a Pulsar function, you need to start Pulsar.\n+\n+### Run a standalone Pulsar in Docker\n+\n+This example uses Docker to run a standalone Pulsar.\n+\n+```bash\n+docker run -it \\\n+    -p 6650:6650 \\\n+    -p 8080:8080 \\\n+    -v $PWD/data:/pulsar/data \\\n+    apachepulsar/pulsar:latest \\\n+    bin/pulsar standalone\n+```\n+\n+> **Tip**\n+>\n+> - `$PWD/data` is the local directory. `-v` maps the `/pulsar/data` directory in the Docker image to the local `$PWD/data` directory.\n+>\n+> - To check whether the image starts, use the command `docker ps`.\n+\n+### Run Pulsar cluster in k8s\n+\n+For details about how to deploy a Pulsar cluster in the k8s environment, For details, see [here](helm-overview.md).\n+\n+\n+## Java \n+\n+This example demonstrates how to package a function in Java.\n+\n+> **Note**\n+>\n+> This example assumes that you have [run a standalone Pulsar in Docker](#run-a-standalone-pulsar-in-docker) successfully.\n+\n+\n+1. Create a new maven project with a pom file.\n+\n+    > **Tip**\n+    >\n+    > `mainClass` is your package name.\n+\n+    ```text\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>java-function</groupId>\n+        <artifactId>java-function</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.pulsar</groupId>\n+                <artifactId>pulsar-functions-api</artifactId>\n+                <version>2.6.0</version>\n+            </dependency>\n+        </dependencies>\n+\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <configuration>\n+                        <appendAssemblyId>false</appendAssemblyId>\n+                        <descriptorRefs>\n+                            <descriptorRef>jar-with-dependencies</descriptorRef>\n+                        </descriptorRefs>\n+                        <archive>\n+                        <manifest>\n+                            <mainClass>org.example.test.ExclamationFunction</mainClass>\n+                        </manifest>\n+                    </archive>\n+                    </configuration>\n+                    <executions>\n+                        <execution>\n+                            <id>make-assembly</id>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>assembly</goal>\n+                            </goals>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-compiler-plugin</artifactId>\n+                    <configuration>\n+                        <source>8</source>\n+                        <target>8</target>\n+                    </configuration>\n+                </plugin>\n+            </plugins>\n+        </build>\n+\n+    </project>\n+    ```\n+\n+2. Write a Java function.\n+\n+    ```\n+    package org.example.test;\n+\n+    import java.util.function.Function;\n+\n+    public class ExclamationFunction implements Function<String, String> {\n+        @Override\n+        public String apply(String s) {\n+            return \"This is my function!\";\n+        }\n+    }\n+    ```\n+\n+    > **Tip**\n+    >\n+    > For the package imported, you can use one of the following interfaces:\n+    >\n+    > - Function interface provided by Java 8: `java.util.function.Function`\n+    >\n+    > - Pulsar Function interface: `org.apache.pulsar.functions.api.Function`\n+    >\n+    > The main difference between the two interfaces is that the `org.apache.pulsar.functions.api.Function` interface provides the context interface. When you write a function and want to interact with it, you can use context to obtain a wide variety of information and functionality for Pulsar Functions.\n+    > \n+    > **Example** \n+    >\n+    > This example uses `org.apache.pulsar.functions.api.Function` interface with context.\n+    >\n+    > ```\n+    > package org.example.functions;\n+    >\n+    > import org.apache.pulsar.functions.api.Context;\n+    > import org.apache.pulsar.functions.api.Function;\n+    > \n+    > import java.util.Arrays;\n+    >\n+    > public class WordCountFunction implements Function<String, Void> {\n+    >    // This function is invoked every time a message is published to the input topic\n+    >    @Override\n+    >    public Void process(String input, Context context) throws Exception {\n+    >       Arrays.asList(input.split(\" \")).forEach(word -> {\n+    >           String counterKey = word.toLowerCase();\n+    >           context.incrCounter(counterKey, 1);\n+    >        });\n+    >       return null;\n+    >   }\n+    > }\n+    > ```\n+\n+3. Package the Java function.\n+\n+    ```bash\n+    mvn package\n+    ```\n+\n+    After the Java function is packaged, a `target` directory is automatically created. Open the `target` directory to see if there is a jar package similar to `java-function-1.0-SNAPSHOT.jar`.\n+\n+\n+4.  Run the Java function.\n+\n+     (1) Copy the packaged jar file to the Pulsar image.\n+\n+    ```bash\n+    docker exec -it [CONTAINER ID] /bin/bash\n+    docker cp <path of java-function-1.0-SNAPSHOT.jar>  CONTAINER ID:/pulsar\n+    ```\n+\n+    (2) Run the Java function using the following command.\n+\n+    ```bash\n+    ./bin/pulsar-admin functions localrun \\\n+    --classname org.example.test.ExclamationFunction \\\n+    --jar java-function-1.0-SNAPSHOT.jar \\\n+    --inputs persistent://public/default/my-topic-1 \\\n+    --output persistent://public/default/test-1 \\\n+    --tenant public \\\n+    --namespace default \\\n+    --name JavaFunction\n+    ```\n+\n+    The following log indicates that the Java function starts successfully.\n+\n+    ```text\n+    ...\n+    07:55:03.724 [main] INFO  org.apache.pulsar.functions.runtime.ProcessRuntime - Started process successfully\n+    ...\n+    ```\n+\n+    > **Tip**\n+    >\n+    >  - For the description about the parameters (for example, `--classname`, `--jar`, `--inputs`, and so on), run the command `./bin/pulsar-admin functions` or see [here](reference-pulsar-admin.md#functions).\n+    > \n+    > - If you want to start a function in cluster mode, replace `localrun` with `create` in the command above. The following log indicates that the Java function starts successfully.\n+    >\n+    >   ```text\n+    >   \"Created successfully\"\n+    >   ```", "originalCommit": "fd60d001d1d6a4229c3dc5c06d267592eb2f9550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}