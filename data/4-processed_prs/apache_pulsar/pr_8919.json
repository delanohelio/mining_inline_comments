{"pr_number": 8919, "pr_title": "[ISSUE 8477][docs] Duplicate info of using C++ in Pulsar  ", "pr_createdAt": "2020-12-11T12:13:25Z", "pr_url": "https://github.com/apache/pulsar/pull/8919", "timeline": [{"oid": "c45e5742b250f5ec2e0ff778c7548bc37651c3d4", "url": "https://github.com/apache/pulsar/commit/c45e5742b250f5ec2e0ff778c7548bc37651c3d4", "message": "fix 8477 doc issue", "committedDate": "2020-12-11T12:11:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQxOTM1Mg==", "url": "https://github.com/apache/pulsar/pull/8919#discussion_r541419352", "bodyText": "I think it is better to use an ordered list to refine this part. Ans use the period (.) at the end of each sentence instead of a colon (:). Please check through the whole updates.", "author": "Huanli-Meng", "createdAt": "2020-12-11T23:40:59Z", "path": "site2/docs/client-libraries-cpp.md", "diffHunk": "@@ -14,40 +14,100 @@ Pulsar C++ client is supported on **Linux** and **MacOS** platforms.\n \n [Doxygen](http://www.doxygen.nl/)-generated API docs for the C++ client are available [here](/api/cpp).\n \n+## System requirements\n+\n+You need to have the following installed to use the C++ client:\n+\n+* [CMake](https://cmake.org/)\n+* [Boost](http://www.boost.org/)\n+* [Protocol Buffers](https://developers.google.com/protocol-buffers/) 2.6\n+* [Log4CXX](https://logging.apache.org/log4cxx)\n+* [libcurl](https://curl.haxx.se/libcurl/)\n+* [Google Test](https://github.com/google/googletest)\n+* [JsonCpp](https://github.com/open-source-parsers/jsoncpp)\n+\n ## Linux\n \n+### Compilation ", "originalCommit": "c45e5742b250f5ec2e0ff778c7548bc37651c3d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQxOTU1MA==", "url": "https://github.com/apache/pulsar/pull/8919#discussion_r541419550", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The resulting files, `libpulsar.so` and `libpulsar.a` will be placed in the `lib` folder of the repo. The tools `perfProducer` and `perfConsumer` will be placed in the `perf` directory.\n          \n          \n            \n            The resulting files, `libpulsar.so` and `libpulsar.a` will be placed in the `lib` folder of the repository. The tools `perfProducer` and `perfConsumer` will be placed in the `perf` directory.", "author": "Huanli-Meng", "createdAt": "2020-12-11T23:41:22Z", "path": "site2/docs/client-libraries-cpp.md", "diffHunk": "@@ -14,40 +14,100 @@ Pulsar C++ client is supported on **Linux** and **MacOS** platforms.\n \n [Doxygen](http://www.doxygen.nl/)-generated API docs for the C++ client are available [here](/api/cpp).\n \n+## System requirements\n+\n+You need to have the following installed to use the C++ client:\n+\n+* [CMake](https://cmake.org/)\n+* [Boost](http://www.boost.org/)\n+* [Protocol Buffers](https://developers.google.com/protocol-buffers/) 2.6\n+* [Log4CXX](https://logging.apache.org/log4cxx)\n+* [libcurl](https://curl.haxx.se/libcurl/)\n+* [Google Test](https://github.com/google/googletest)\n+* [JsonCpp](https://github.com/open-source-parsers/jsoncpp)\n+\n ## Linux\n \n+### Compilation \n+\n+The compilation starts with cloning the Pulsar repository:\n+\n+```shell\n+$ git clone https://github.com/apache/pulsar\n+```\n+\n+Install all of the necessary dependencies:\n+\n+```shell\n+$ apt-get install cmake libssl-dev libcurl4-openssl-dev liblog4cxx-dev \\\n+  libprotobuf-dev protobuf-compiler libboost-all-dev google-mock libgtest-dev libjsoncpp-dev\n+```\n+\n+Then compile and install [Google Test](https://github.com/google/googletest):\n+\n+```shell\n+# libgtest-dev version is 1.18.0 or above\n+$ cd /usr/src/googletest\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp ./googlemock/libgmock.a ./googlemock/gtest/libgtest.a /usr/lib/\n+\n+# less than 1.18.0\n+$ cd /usr/src/gtest\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp libgtest.a /usr/lib\n+\n+$ cd /usr/src/gmock\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp libgmock.a /usr/lib\n+```\n+\n+Finally, compile the Pulsar client library for C++ inside the Pulsar repo:\n+\n+```shell\n+$ cd pulsar-client-cpp\n+$ cmake .\n+$ make\n+```\n+\n+The resulting files, `libpulsar.so` and `libpulsar.a` will be placed in the `lib` folder of the repo. The tools `perfProducer` and `perfConsumer` will be placed in the `perf` directory.", "originalCommit": "c45e5742b250f5ec2e0ff778c7548bc37651c3d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQyMTYwNA==", "url": "https://github.com/apache/pulsar/pull/8919#discussion_r541421604", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Four kinds of libraries `libpulsar.so` / `libpulsarnossl.so` / `libpulsar.a` / `libpulsarwithdeps.a` are included in your `/usr/lib` after rpm/deb being downloaded and installed.\n          \n          \n            \n            The `libpulsar.so`, `libpulsarnossl.so`, `libpulsar.a`, and `libpulsarwithdeps.a` libraries are included in your `/usr/lib` after RPM or DEB being downloaded and installed.", "author": "Huanli-Meng", "createdAt": "2020-12-11T23:43:41Z", "path": "site2/docs/client-libraries-cpp.md", "diffHunk": "@@ -14,40 +14,100 @@ Pulsar C++ client is supported on **Linux** and **MacOS** platforms.\n \n [Doxygen](http://www.doxygen.nl/)-generated API docs for the C++ client are available [here](/api/cpp).\n \n+## System requirements\n+\n+You need to have the following installed to use the C++ client:\n+\n+* [CMake](https://cmake.org/)\n+* [Boost](http://www.boost.org/)\n+* [Protocol Buffers](https://developers.google.com/protocol-buffers/) 2.6\n+* [Log4CXX](https://logging.apache.org/log4cxx)\n+* [libcurl](https://curl.haxx.se/libcurl/)\n+* [Google Test](https://github.com/google/googletest)\n+* [JsonCpp](https://github.com/open-source-parsers/jsoncpp)\n+\n ## Linux\n \n+### Compilation \n+\n+The compilation starts with cloning the Pulsar repository:\n+\n+```shell\n+$ git clone https://github.com/apache/pulsar\n+```\n+\n+Install all of the necessary dependencies:\n+\n+```shell\n+$ apt-get install cmake libssl-dev libcurl4-openssl-dev liblog4cxx-dev \\\n+  libprotobuf-dev protobuf-compiler libboost-all-dev google-mock libgtest-dev libjsoncpp-dev\n+```\n+\n+Then compile and install [Google Test](https://github.com/google/googletest):\n+\n+```shell\n+# libgtest-dev version is 1.18.0 or above\n+$ cd /usr/src/googletest\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp ./googlemock/libgmock.a ./googlemock/gtest/libgtest.a /usr/lib/\n+\n+# less than 1.18.0\n+$ cd /usr/src/gtest\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp libgtest.a /usr/lib\n+\n+$ cd /usr/src/gmock\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp libgmock.a /usr/lib\n+```\n+\n+Finally, compile the Pulsar client library for C++ inside the Pulsar repo:\n+\n+```shell\n+$ cd pulsar-client-cpp\n+$ cmake .\n+$ make\n+```\n+\n+The resulting files, `libpulsar.so` and `libpulsar.a` will be placed in the `lib` folder of the repo. The tools `perfProducer` and `perfConsumer` will be placed in the `perf` directory.\n+\n+### Install Dependencies\n+\n > Since 2.1.0 release, Pulsar ships pre-built RPM and Debian packages. You can download and install those packages directly.\n \n-Four kind of libraries `libpulsar.so` / `libpulsarnossl.so` / `libpulsar.a` / `libpulsarwithdeps.a` are included in your `/usr/lib` after rpm/deb download and install.\n-By default, they are build under code path `${PULSAR_HOME}/pulsar-client-cpp`, using command\n- `cmake . -DBUILD_TESTS=OFF -DLINK_STATIC=ON && make pulsarShared pulsarSharedNossl pulsarStatic pulsarStaticWithDeps -j 3`\n-These libraries rely on some other libraries, if you want to get detailed version of dependencies libraries, please reference [these](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/rpm/Dockerfile) [files](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/deb/Dockerfile).\n+Four kinds of libraries `libpulsar.so` / `libpulsarnossl.so` / `libpulsar.a` / `libpulsarwithdeps.a` are included in your `/usr/lib` after rpm/deb being downloaded and installed.", "originalCommit": "c45e5742b250f5ec2e0ff778c7548bc37651c3d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQyMjE5Mw==", "url": "https://github.com/apache/pulsar/pull/8919#discussion_r541422193", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            These libraries rely on some other libraries, if you want to get detailed version of dependencies, please reference [rpm](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/rpm/Dockerfile) or [deb](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/deb/Dockerfile) files.\n          \n          \n            \n            These libraries rely on some other libraries, if you want to get detailed version of dependencies, see [RPM](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/rpm/Dockerfile) or [DEB](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/deb/Dockerfile) files.", "author": "Huanli-Meng", "createdAt": "2020-12-11T23:44:28Z", "path": "site2/docs/client-libraries-cpp.md", "diffHunk": "@@ -14,40 +14,100 @@ Pulsar C++ client is supported on **Linux** and **MacOS** platforms.\n \n [Doxygen](http://www.doxygen.nl/)-generated API docs for the C++ client are available [here](/api/cpp).\n \n+## System requirements\n+\n+You need to have the following installed to use the C++ client:\n+\n+* [CMake](https://cmake.org/)\n+* [Boost](http://www.boost.org/)\n+* [Protocol Buffers](https://developers.google.com/protocol-buffers/) 2.6\n+* [Log4CXX](https://logging.apache.org/log4cxx)\n+* [libcurl](https://curl.haxx.se/libcurl/)\n+* [Google Test](https://github.com/google/googletest)\n+* [JsonCpp](https://github.com/open-source-parsers/jsoncpp)\n+\n ## Linux\n \n+### Compilation \n+\n+The compilation starts with cloning the Pulsar repository:\n+\n+```shell\n+$ git clone https://github.com/apache/pulsar\n+```\n+\n+Install all of the necessary dependencies:\n+\n+```shell\n+$ apt-get install cmake libssl-dev libcurl4-openssl-dev liblog4cxx-dev \\\n+  libprotobuf-dev protobuf-compiler libboost-all-dev google-mock libgtest-dev libjsoncpp-dev\n+```\n+\n+Then compile and install [Google Test](https://github.com/google/googletest):\n+\n+```shell\n+# libgtest-dev version is 1.18.0 or above\n+$ cd /usr/src/googletest\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp ./googlemock/libgmock.a ./googlemock/gtest/libgtest.a /usr/lib/\n+\n+# less than 1.18.0\n+$ cd /usr/src/gtest\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp libgtest.a /usr/lib\n+\n+$ cd /usr/src/gmock\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp libgmock.a /usr/lib\n+```\n+\n+Finally, compile the Pulsar client library for C++ inside the Pulsar repo:\n+\n+```shell\n+$ cd pulsar-client-cpp\n+$ cmake .\n+$ make\n+```\n+\n+The resulting files, `libpulsar.so` and `libpulsar.a` will be placed in the `lib` folder of the repo. The tools `perfProducer` and `perfConsumer` will be placed in the `perf` directory.\n+\n+### Install Dependencies\n+\n > Since 2.1.0 release, Pulsar ships pre-built RPM and Debian packages. You can download and install those packages directly.\n \n-Four kind of libraries `libpulsar.so` / `libpulsarnossl.so` / `libpulsar.a` / `libpulsarwithdeps.a` are included in your `/usr/lib` after rpm/deb download and install.\n-By default, they are build under code path `${PULSAR_HOME}/pulsar-client-cpp`, using command\n- `cmake . -DBUILD_TESTS=OFF -DLINK_STATIC=ON && make pulsarShared pulsarSharedNossl pulsarStatic pulsarStaticWithDeps -j 3`\n-These libraries rely on some other libraries, if you want to get detailed version of dependencies libraries, please reference [these](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/rpm/Dockerfile) [files](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/deb/Dockerfile).\n+Four kinds of libraries `libpulsar.so` / `libpulsarnossl.so` / `libpulsar.a` / `libpulsarwithdeps.a` are included in your `/usr/lib` after rpm/deb being downloaded and installed.\n+\n+By default, they are built under code path `${PULSAR_HOME}/pulsar-client-cpp`. You can use this command:\n+ `cmake . -DBUILD_TESTS=OFF -DLINK_STATIC=ON && make pulsarShared pulsarSharedNossl pulsarStatic pulsarStaticWithDeps -j 3`.\n+These libraries rely on some other libraries, if you want to get detailed version of dependencies, please reference [rpm](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/rpm/Dockerfile) or [deb](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/deb/Dockerfile) files.", "originalCommit": "c45e5742b250f5ec2e0ff778c7548bc37651c3d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQyMzQ0Ng==", "url": "https://github.com/apache/pulsar/pull/8919#discussion_r541423446", "bodyText": "how is this command is used for? used for build libraries under the default code path or use this command to build these libraries under a different code path? It is better ti explain more detailed.", "author": "Huanli-Meng", "createdAt": "2020-12-11T23:46:05Z", "path": "site2/docs/client-libraries-cpp.md", "diffHunk": "@@ -14,40 +14,100 @@ Pulsar C++ client is supported on **Linux** and **MacOS** platforms.\n \n [Doxygen](http://www.doxygen.nl/)-generated API docs for the C++ client are available [here](/api/cpp).\n \n+## System requirements\n+\n+You need to have the following installed to use the C++ client:\n+\n+* [CMake](https://cmake.org/)\n+* [Boost](http://www.boost.org/)\n+* [Protocol Buffers](https://developers.google.com/protocol-buffers/) 2.6\n+* [Log4CXX](https://logging.apache.org/log4cxx)\n+* [libcurl](https://curl.haxx.se/libcurl/)\n+* [Google Test](https://github.com/google/googletest)\n+* [JsonCpp](https://github.com/open-source-parsers/jsoncpp)\n+\n ## Linux\n \n+### Compilation \n+\n+The compilation starts with cloning the Pulsar repository:\n+\n+```shell\n+$ git clone https://github.com/apache/pulsar\n+```\n+\n+Install all of the necessary dependencies:\n+\n+```shell\n+$ apt-get install cmake libssl-dev libcurl4-openssl-dev liblog4cxx-dev \\\n+  libprotobuf-dev protobuf-compiler libboost-all-dev google-mock libgtest-dev libjsoncpp-dev\n+```\n+\n+Then compile and install [Google Test](https://github.com/google/googletest):\n+\n+```shell\n+# libgtest-dev version is 1.18.0 or above\n+$ cd /usr/src/googletest\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp ./googlemock/libgmock.a ./googlemock/gtest/libgtest.a /usr/lib/\n+\n+# less than 1.18.0\n+$ cd /usr/src/gtest\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp libgtest.a /usr/lib\n+\n+$ cd /usr/src/gmock\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp libgmock.a /usr/lib\n+```\n+\n+Finally, compile the Pulsar client library for C++ inside the Pulsar repo:\n+\n+```shell\n+$ cd pulsar-client-cpp\n+$ cmake .\n+$ make\n+```\n+\n+The resulting files, `libpulsar.so` and `libpulsar.a` will be placed in the `lib` folder of the repo. The tools `perfProducer` and `perfConsumer` will be placed in the `perf` directory.\n+\n+### Install Dependencies\n+\n > Since 2.1.0 release, Pulsar ships pre-built RPM and Debian packages. You can download and install those packages directly.\n \n-Four kind of libraries `libpulsar.so` / `libpulsarnossl.so` / `libpulsar.a` / `libpulsarwithdeps.a` are included in your `/usr/lib` after rpm/deb download and install.\n-By default, they are build under code path `${PULSAR_HOME}/pulsar-client-cpp`, using command\n- `cmake . -DBUILD_TESTS=OFF -DLINK_STATIC=ON && make pulsarShared pulsarSharedNossl pulsarStatic pulsarStaticWithDeps -j 3`\n-These libraries rely on some other libraries, if you want to get detailed version of dependencies libraries, please reference [these](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/rpm/Dockerfile) [files](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/deb/Dockerfile).\n+Four kinds of libraries `libpulsar.so` / `libpulsarnossl.so` / `libpulsar.a` / `libpulsarwithdeps.a` are included in your `/usr/lib` after rpm/deb being downloaded and installed.\n+\n+By default, they are built under code path `${PULSAR_HOME}/pulsar-client-cpp`. You can use this command:", "originalCommit": "c45e5742b250f5ec2e0ff778c7548bc37651c3d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQyNDM4NA==", "url": "https://github.com/apache/pulsar/pull/8919#discussion_r541424384", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            2. `libpulsarnossl.so` is a shared library that similar to `libpulsar.so` except that the libraries `openssl` and `crypto` are dynamically linked. Below is the command to use this Pulsar library:\n          \n          \n            \n            2. `libpulsarnossl.so` is a shared library that is similar to `libpulsar.so` except that the libraries `openssl` and `crypto` are dynamically linked. Below is the command to use this Pulsar library:", "author": "Huanli-Meng", "createdAt": "2020-12-11T23:47:14Z", "path": "site2/docs/client-libraries-cpp.md", "diffHunk": "@@ -14,40 +14,100 @@ Pulsar C++ client is supported on **Linux** and **MacOS** platforms.\n \n [Doxygen](http://www.doxygen.nl/)-generated API docs for the C++ client are available [here](/api/cpp).\n \n+## System requirements\n+\n+You need to have the following installed to use the C++ client:\n+\n+* [CMake](https://cmake.org/)\n+* [Boost](http://www.boost.org/)\n+* [Protocol Buffers](https://developers.google.com/protocol-buffers/) 2.6\n+* [Log4CXX](https://logging.apache.org/log4cxx)\n+* [libcurl](https://curl.haxx.se/libcurl/)\n+* [Google Test](https://github.com/google/googletest)\n+* [JsonCpp](https://github.com/open-source-parsers/jsoncpp)\n+\n ## Linux\n \n+### Compilation \n+\n+The compilation starts with cloning the Pulsar repository:\n+\n+```shell\n+$ git clone https://github.com/apache/pulsar\n+```\n+\n+Install all of the necessary dependencies:\n+\n+```shell\n+$ apt-get install cmake libssl-dev libcurl4-openssl-dev liblog4cxx-dev \\\n+  libprotobuf-dev protobuf-compiler libboost-all-dev google-mock libgtest-dev libjsoncpp-dev\n+```\n+\n+Then compile and install [Google Test](https://github.com/google/googletest):\n+\n+```shell\n+# libgtest-dev version is 1.18.0 or above\n+$ cd /usr/src/googletest\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp ./googlemock/libgmock.a ./googlemock/gtest/libgtest.a /usr/lib/\n+\n+# less than 1.18.0\n+$ cd /usr/src/gtest\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp libgtest.a /usr/lib\n+\n+$ cd /usr/src/gmock\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp libgmock.a /usr/lib\n+```\n+\n+Finally, compile the Pulsar client library for C++ inside the Pulsar repo:\n+\n+```shell\n+$ cd pulsar-client-cpp\n+$ cmake .\n+$ make\n+```\n+\n+The resulting files, `libpulsar.so` and `libpulsar.a` will be placed in the `lib` folder of the repo. The tools `perfProducer` and `perfConsumer` will be placed in the `perf` directory.\n+\n+### Install Dependencies\n+\n > Since 2.1.0 release, Pulsar ships pre-built RPM and Debian packages. You can download and install those packages directly.\n \n-Four kind of libraries `libpulsar.so` / `libpulsarnossl.so` / `libpulsar.a` / `libpulsarwithdeps.a` are included in your `/usr/lib` after rpm/deb download and install.\n-By default, they are build under code path `${PULSAR_HOME}/pulsar-client-cpp`, using command\n- `cmake . -DBUILD_TESTS=OFF -DLINK_STATIC=ON && make pulsarShared pulsarSharedNossl pulsarStatic pulsarStaticWithDeps -j 3`\n-These libraries rely on some other libraries, if you want to get detailed version of dependencies libraries, please reference [these](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/rpm/Dockerfile) [files](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/deb/Dockerfile).\n+Four kinds of libraries `libpulsar.so` / `libpulsarnossl.so` / `libpulsar.a` / `libpulsarwithdeps.a` are included in your `/usr/lib` after rpm/deb being downloaded and installed.\n+\n+By default, they are built under code path `${PULSAR_HOME}/pulsar-client-cpp`. You can use this command:\n+ `cmake . -DBUILD_TESTS=OFF -DLINK_STATIC=ON && make pulsarShared pulsarSharedNossl pulsarStatic pulsarStaticWithDeps -j 3`.\n+These libraries rely on some other libraries, if you want to get detailed version of dependencies, please reference [rpm](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/rpm/Dockerfile) or [deb](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/deb/Dockerfile) files.\n+\n+1. `libpulsar.so` is a shared library, which contains statically linked `boost` and `openssl`. It also dynamically links all other needed libraries. Below is the command to use this Pulsar library:\n \n-1. `libpulsar.so` is the Shared library, it contains statically linked `boost` and `openssl`, and will also dynamically link all other needed libraries.\n-The command the when use this pulsar library is like this:\n ```bash\n  g++ --std=c++11  PulsarTest.cpp -o test /usr/lib/libpulsar.so -I/usr/local/ssl/include\n ```\n \n-2. `libpulsarnossl.so` is the Shared library that similar to `libpulsar.so` except that the library `openssl` and `crypto` are dynamically linked.\n-The command the when use this pulsar library is like this:\n+2. `libpulsarnossl.so` is a shared library that similar to `libpulsar.so` except that the libraries `openssl` and `crypto` are dynamically linked. Below is the command to use this Pulsar library:", "originalCommit": "c45e5742b250f5ec2e0ff778c7548bc37651c3d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQyNDY5OQ==", "url": "https://github.com/apache/pulsar/pull/8919#discussion_r541424699", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            3. `libpulsar.a` is the static library. You need load dependencies before using this library. Below is the command to use this Pulsar library:\n          \n          \n            \n            3. `libpulsar.a` is a static library. You need load dependencies before using this library. Below is the command to use this Pulsar library:", "author": "Huanli-Meng", "createdAt": "2020-12-11T23:47:37Z", "path": "site2/docs/client-libraries-cpp.md", "diffHunk": "@@ -14,40 +14,100 @@ Pulsar C++ client is supported on **Linux** and **MacOS** platforms.\n \n [Doxygen](http://www.doxygen.nl/)-generated API docs for the C++ client are available [here](/api/cpp).\n \n+## System requirements\n+\n+You need to have the following installed to use the C++ client:\n+\n+* [CMake](https://cmake.org/)\n+* [Boost](http://www.boost.org/)\n+* [Protocol Buffers](https://developers.google.com/protocol-buffers/) 2.6\n+* [Log4CXX](https://logging.apache.org/log4cxx)\n+* [libcurl](https://curl.haxx.se/libcurl/)\n+* [Google Test](https://github.com/google/googletest)\n+* [JsonCpp](https://github.com/open-source-parsers/jsoncpp)\n+\n ## Linux\n \n+### Compilation \n+\n+The compilation starts with cloning the Pulsar repository:\n+\n+```shell\n+$ git clone https://github.com/apache/pulsar\n+```\n+\n+Install all of the necessary dependencies:\n+\n+```shell\n+$ apt-get install cmake libssl-dev libcurl4-openssl-dev liblog4cxx-dev \\\n+  libprotobuf-dev protobuf-compiler libboost-all-dev google-mock libgtest-dev libjsoncpp-dev\n+```\n+\n+Then compile and install [Google Test](https://github.com/google/googletest):\n+\n+```shell\n+# libgtest-dev version is 1.18.0 or above\n+$ cd /usr/src/googletest\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp ./googlemock/libgmock.a ./googlemock/gtest/libgtest.a /usr/lib/\n+\n+# less than 1.18.0\n+$ cd /usr/src/gtest\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp libgtest.a /usr/lib\n+\n+$ cd /usr/src/gmock\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp libgmock.a /usr/lib\n+```\n+\n+Finally, compile the Pulsar client library for C++ inside the Pulsar repo:\n+\n+```shell\n+$ cd pulsar-client-cpp\n+$ cmake .\n+$ make\n+```\n+\n+The resulting files, `libpulsar.so` and `libpulsar.a` will be placed in the `lib` folder of the repo. The tools `perfProducer` and `perfConsumer` will be placed in the `perf` directory.\n+\n+### Install Dependencies\n+\n > Since 2.1.0 release, Pulsar ships pre-built RPM and Debian packages. You can download and install those packages directly.\n \n-Four kind of libraries `libpulsar.so` / `libpulsarnossl.so` / `libpulsar.a` / `libpulsarwithdeps.a` are included in your `/usr/lib` after rpm/deb download and install.\n-By default, they are build under code path `${PULSAR_HOME}/pulsar-client-cpp`, using command\n- `cmake . -DBUILD_TESTS=OFF -DLINK_STATIC=ON && make pulsarShared pulsarSharedNossl pulsarStatic pulsarStaticWithDeps -j 3`\n-These libraries rely on some other libraries, if you want to get detailed version of dependencies libraries, please reference [these](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/rpm/Dockerfile) [files](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/deb/Dockerfile).\n+Four kinds of libraries `libpulsar.so` / `libpulsarnossl.so` / `libpulsar.a` / `libpulsarwithdeps.a` are included in your `/usr/lib` after rpm/deb being downloaded and installed.\n+\n+By default, they are built under code path `${PULSAR_HOME}/pulsar-client-cpp`. You can use this command:\n+ `cmake . -DBUILD_TESTS=OFF -DLINK_STATIC=ON && make pulsarShared pulsarSharedNossl pulsarStatic pulsarStaticWithDeps -j 3`.\n+These libraries rely on some other libraries, if you want to get detailed version of dependencies, please reference [rpm](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/rpm/Dockerfile) or [deb](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/deb/Dockerfile) files.\n+\n+1. `libpulsar.so` is a shared library, which contains statically linked `boost` and `openssl`. It also dynamically links all other needed libraries. Below is the command to use this Pulsar library:\n \n-1. `libpulsar.so` is the Shared library, it contains statically linked `boost` and `openssl`, and will also dynamically link all other needed libraries.\n-The command the when use this pulsar library is like this:\n ```bash\n  g++ --std=c++11  PulsarTest.cpp -o test /usr/lib/libpulsar.so -I/usr/local/ssl/include\n ```\n \n-2. `libpulsarnossl.so` is the Shared library that similar to `libpulsar.so` except that the library `openssl` and `crypto` are dynamically linked.\n-The command the when use this pulsar library is like this:\n+2. `libpulsarnossl.so` is a shared library that similar to `libpulsar.so` except that the libraries `openssl` and `crypto` are dynamically linked. Below is the command to use this Pulsar library:\n+\n ```bash\n  g++ --std=c++11  PulsarTest.cpp -o test /usr/lib/libpulsarnossl.so -lssl -lcrypto -I/usr/local/ssl/include -L/usr/local/ssl/lib\n ```\n \n-3. `libpulsar.a` is the Static library, it need to load some dependencies library when using it. \n-The command the when use this pulsar library is like this:\n+3. `libpulsar.a` is the static library. You need load dependencies before using this library. Below is the command to use this Pulsar library:", "originalCommit": "c45e5742b250f5ec2e0ff778c7548bc37651c3d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQyNTgwNA==", "url": "https://github.com/apache/pulsar/pull/8919#discussion_r541425804", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `libpulsarwithdeps.a` does not include library openssl related libraries `libssl` and `libcrypto`, because these 2 libraries are related to security. It is more reasonable and easier to use the versions provided by the local system to handle security issues and upgrade libraries.\n          \n          \n            \n            `libpulsarwithdeps.a` does not include library `openssl` related libraries `libssl` and `libcrypto`, because these two libraries are related to security. It is more reasonable and easier to use the versions provided by the local system to handle security issues and upgrade libraries.", "author": "Huanli-Meng", "createdAt": "2020-12-11T23:49:02Z", "path": "site2/docs/client-libraries-cpp.md", "diffHunk": "@@ -14,40 +14,100 @@ Pulsar C++ client is supported on **Linux** and **MacOS** platforms.\n \n [Doxygen](http://www.doxygen.nl/)-generated API docs for the C++ client are available [here](/api/cpp).\n \n+## System requirements\n+\n+You need to have the following installed to use the C++ client:\n+\n+* [CMake](https://cmake.org/)\n+* [Boost](http://www.boost.org/)\n+* [Protocol Buffers](https://developers.google.com/protocol-buffers/) 2.6\n+* [Log4CXX](https://logging.apache.org/log4cxx)\n+* [libcurl](https://curl.haxx.se/libcurl/)\n+* [Google Test](https://github.com/google/googletest)\n+* [JsonCpp](https://github.com/open-source-parsers/jsoncpp)\n+\n ## Linux\n \n+### Compilation \n+\n+The compilation starts with cloning the Pulsar repository:\n+\n+```shell\n+$ git clone https://github.com/apache/pulsar\n+```\n+\n+Install all of the necessary dependencies:\n+\n+```shell\n+$ apt-get install cmake libssl-dev libcurl4-openssl-dev liblog4cxx-dev \\\n+  libprotobuf-dev protobuf-compiler libboost-all-dev google-mock libgtest-dev libjsoncpp-dev\n+```\n+\n+Then compile and install [Google Test](https://github.com/google/googletest):\n+\n+```shell\n+# libgtest-dev version is 1.18.0 or above\n+$ cd /usr/src/googletest\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp ./googlemock/libgmock.a ./googlemock/gtest/libgtest.a /usr/lib/\n+\n+# less than 1.18.0\n+$ cd /usr/src/gtest\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp libgtest.a /usr/lib\n+\n+$ cd /usr/src/gmock\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp libgmock.a /usr/lib\n+```\n+\n+Finally, compile the Pulsar client library for C++ inside the Pulsar repo:\n+\n+```shell\n+$ cd pulsar-client-cpp\n+$ cmake .\n+$ make\n+```\n+\n+The resulting files, `libpulsar.so` and `libpulsar.a` will be placed in the `lib` folder of the repo. The tools `perfProducer` and `perfConsumer` will be placed in the `perf` directory.\n+\n+### Install Dependencies\n+\n > Since 2.1.0 release, Pulsar ships pre-built RPM and Debian packages. You can download and install those packages directly.\n \n-Four kind of libraries `libpulsar.so` / `libpulsarnossl.so` / `libpulsar.a` / `libpulsarwithdeps.a` are included in your `/usr/lib` after rpm/deb download and install.\n-By default, they are build under code path `${PULSAR_HOME}/pulsar-client-cpp`, using command\n- `cmake . -DBUILD_TESTS=OFF -DLINK_STATIC=ON && make pulsarShared pulsarSharedNossl pulsarStatic pulsarStaticWithDeps -j 3`\n-These libraries rely on some other libraries, if you want to get detailed version of dependencies libraries, please reference [these](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/rpm/Dockerfile) [files](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/deb/Dockerfile).\n+Four kinds of libraries `libpulsar.so` / `libpulsarnossl.so` / `libpulsar.a` / `libpulsarwithdeps.a` are included in your `/usr/lib` after rpm/deb being downloaded and installed.\n+\n+By default, they are built under code path `${PULSAR_HOME}/pulsar-client-cpp`. You can use this command:\n+ `cmake . -DBUILD_TESTS=OFF -DLINK_STATIC=ON && make pulsarShared pulsarSharedNossl pulsarStatic pulsarStaticWithDeps -j 3`.\n+These libraries rely on some other libraries, if you want to get detailed version of dependencies, please reference [rpm](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/rpm/Dockerfile) or [deb](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/deb/Dockerfile) files.\n+\n+1. `libpulsar.so` is a shared library, which contains statically linked `boost` and `openssl`. It also dynamically links all other needed libraries. Below is the command to use this Pulsar library:\n \n-1. `libpulsar.so` is the Shared library, it contains statically linked `boost` and `openssl`, and will also dynamically link all other needed libraries.\n-The command the when use this pulsar library is like this:\n ```bash\n  g++ --std=c++11  PulsarTest.cpp -o test /usr/lib/libpulsar.so -I/usr/local/ssl/include\n ```\n \n-2. `libpulsarnossl.so` is the Shared library that similar to `libpulsar.so` except that the library `openssl` and `crypto` are dynamically linked.\n-The command the when use this pulsar library is like this:\n+2. `libpulsarnossl.so` is a shared library that similar to `libpulsar.so` except that the libraries `openssl` and `crypto` are dynamically linked. Below is the command to use this Pulsar library:\n+\n ```bash\n  g++ --std=c++11  PulsarTest.cpp -o test /usr/lib/libpulsarnossl.so -lssl -lcrypto -I/usr/local/ssl/include -L/usr/local/ssl/lib\n ```\n \n-3. `libpulsar.a` is the Static library, it need to load some dependencies library when using it. \n-The command the when use this pulsar library is like this:\n+3. `libpulsar.a` is the static library. You need load dependencies before using this library. Below is the command to use this Pulsar library:\n+\n ```bash\n  g++ --std=c++11  PulsarTest.cpp -o test /usr/lib/libpulsar.a -lssl -lcrypto -ldl -lpthread  -I/usr/local/ssl/include -L/usr/local/ssl/lib -lboost_system -lboost_regex -lcurl -lprotobuf -lzstd -lz\n ```\n \n-4. `libpulsarwithdeps.a` is the Static library, base on `libpulsar.a`, and archived in the dependencies libraries of `libboost_regex`,  `libboost_system`, `libcurl`, `libprotobuf`, `libzstd` and `libz`, \n-The command the when use this pulsar library is like this:\n+4. `libpulsarwithdeps.a` is a static library, based on `libpulsar.a`. It is archived in the dependencies of `libboost_regex`, `libboost_system`, `libcurl`, `libprotobuf`, `libzstd` and `libz`. Below is the command to use this Pulsar library:\n+\n ```bash\n  g++ --std=c++11  PulsarTest.cpp -o test /usr/lib/libpulsarwithdeps.a -lssl -lcrypto -ldl -lpthread  -I/usr/local/ssl/include -L/usr/local/ssl/lib\n ```\n-`libpulsarwithdeps.a` does not include library openssl related libraries: `libssl` and `libcrypto`, because these 2 library is related to security, \n-by using user local system provided version is more reasonable, and more easy for user to handling security issue and library upgrade.\n+`libpulsarwithdeps.a` does not include library openssl related libraries `libssl` and `libcrypto`, because these 2 libraries are related to security. It is more reasonable and easier to use the versions provided by the local system to handle security issues and upgrade libraries.", "originalCommit": "c45e5742b250f5ec2e0ff778c7548bc37651c3d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQyNzA0NQ==", "url": "https://github.com/apache/pulsar/pull/8919#discussion_r541427045", "bodyText": "use an ordered list and use a period(.) instead of a colon (:) at the end of each sentence.", "author": "Huanli-Meng", "createdAt": "2020-12-11T23:50:47Z", "path": "site2/docs/client-libraries-cpp.md", "diffHunk": "@@ -129,6 +189,45 @@ Debian packages are created at `pulsar-client-cpp/pkg/deb/BUILD/DEB/`.\n \n ## MacOS\n \n+### Compilation\n+\n+The compilation starts with cloning the Pulsar repository:", "originalCommit": "c45e5742b250f5ec2e0ff778c7548bc37651c3d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQyOTA5NQ==", "url": "https://github.com/apache/pulsar/pull/8919#discussion_r541429095", "bodyText": "Log4CXX is no longer required", "author": "merlimat", "createdAt": "2020-12-11T23:53:20Z", "path": "site2/docs/client-libraries-cpp.md", "diffHunk": "@@ -14,40 +14,100 @@ Pulsar C++ client is supported on **Linux** and **MacOS** platforms.\n \n [Doxygen](http://www.doxygen.nl/)-generated API docs for the C++ client are available [here](/api/cpp).\n \n+## System requirements\n+\n+You need to have the following installed to use the C++ client:\n+\n+* [CMake](https://cmake.org/)\n+* [Boost](http://www.boost.org/)\n+* [Protocol Buffers](https://developers.google.com/protocol-buffers/) 2.6\n+* [Log4CXX](https://logging.apache.org/log4cxx)", "originalCommit": "c45e5742b250f5ec2e0ff778c7548bc37651c3d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQyOTI4Mw==", "url": "https://github.com/apache/pulsar/pull/8919#discussion_r541429283", "bodyText": "JsonCpp too is no longer required", "author": "merlimat", "createdAt": "2020-12-11T23:53:36Z", "path": "site2/docs/client-libraries-cpp.md", "diffHunk": "@@ -14,40 +14,100 @@ Pulsar C++ client is supported on **Linux** and **MacOS** platforms.\n \n [Doxygen](http://www.doxygen.nl/)-generated API docs for the C++ client are available [here](/api/cpp).\n \n+## System requirements\n+\n+You need to have the following installed to use the C++ client:\n+\n+* [CMake](https://cmake.org/)\n+* [Boost](http://www.boost.org/)\n+* [Protocol Buffers](https://developers.google.com/protocol-buffers/) 2.6\n+* [Log4CXX](https://logging.apache.org/log4cxx)\n+* [libcurl](https://curl.haxx.se/libcurl/)\n+* [Google Test](https://github.com/google/googletest)\n+* [JsonCpp](https://github.com/open-source-parsers/jsoncpp)", "originalCommit": "c45e5742b250f5ec2e0ff778c7548bc37651c3d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8877e71d6f4984d549250e82ab330dadf1fd9a8f", "url": "https://github.com/apache/pulsar/commit/8877e71d6f4984d549250e82ab330dadf1fd9a8f", "message": "update", "committedDate": "2020-12-12T11:20:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3ODQyMg==", "url": "https://github.com/apache/pulsar/pull/8919#discussion_r547078422", "bodyText": "You need to install the following components before using the C++ client:", "author": "Jennifer88huang", "createdAt": "2020-12-22T05:38:01Z", "path": "site2/docs/client-libraries-cpp.md", "diffHunk": "@@ -14,40 +14,99 @@ Pulsar C++ client is supported on **Linux** and **MacOS** platforms.\n \n [Doxygen](http://www.doxygen.nl/)-generated API docs for the C++ client are available [here](/api/cpp).\n \n+## System requirements\n+\n+You need to have the following installed to use the C++ client:", "originalCommit": "8877e71d6f4984d549250e82ab330dadf1fd9a8f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3ODc1NQ==", "url": "https://github.com/apache/pulsar/pull/8919#discussion_r547078755", "bodyText": "Use present tense, see https://developers.google.com/style/tense", "author": "Jennifer88huang", "createdAt": "2020-12-22T05:39:19Z", "path": "site2/docs/client-libraries-cpp.md", "diffHunk": "@@ -14,40 +14,99 @@ Pulsar C++ client is supported on **Linux** and **MacOS** platforms.\n \n [Doxygen](http://www.doxygen.nl/)-generated API docs for the C++ client are available [here](/api/cpp).\n \n+## System requirements\n+\n+You need to have the following installed to use the C++ client:\n+\n+* [CMake](https://cmake.org/)\n+* [Boost](http://www.boost.org/)\n+* [Protocol Buffers](https://developers.google.com/protocol-buffers/) 2.6\n+* [libcurl](https://curl.haxx.se/libcurl/)\n+* [Google Test](https://github.com/google/googletest)\n+\n ## Linux\n \n+### Compilation \n+\n+1. Clone the Pulsar repository.\n+\n+```shell\n+$ git clone https://github.com/apache/pulsar\n+```\n+\n+2. Install all necessary dependencies.\n+\n+```shell\n+$ apt-get install cmake libssl-dev libcurl4-openssl-dev liblog4cxx-dev \\\n+  libprotobuf-dev protobuf-compiler libboost-all-dev google-mock libgtest-dev libjsoncpp-dev\n+```\n+\n+3. Compile and install [Google Test](https://github.com/google/googletest).\n+\n+```shell\n+# libgtest-dev version is 1.18.0 or above\n+$ cd /usr/src/googletest\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp ./googlemock/libgmock.a ./googlemock/gtest/libgtest.a /usr/lib/\n+\n+# less than 1.18.0\n+$ cd /usr/src/gtest\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp libgtest.a /usr/lib\n+\n+$ cd /usr/src/gmock\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp libgmock.a /usr/lib\n+```\n+\n+4. Compile the Pulsar client library for C++ inside the Pulsar repository.\n+\n+```shell\n+$ cd pulsar-client-cpp\n+$ cmake .\n+$ make\n+```\n+\n+With a successful installation, the files `libpulsar.so` and `libpulsar.a` will be in the `lib` folder of the repository. The tools `perfProducer` and `perfConsumer` will be in the `perf` directory.", "originalCommit": "8877e71d6f4984d549250e82ab330dadf1fd9a8f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3OTIzNQ==", "url": "https://github.com/apache/pulsar/pull/8919#discussion_r547079235", "bodyText": "Try to use active voice, see https://developers.google.com/style/voice\nYou can refine it as sth like:\n\"The xxx are included in your /usr/lib after you download and install xxx\"", "author": "Jennifer88huang", "createdAt": "2020-12-22T05:41:14Z", "path": "site2/docs/client-libraries-cpp.md", "diffHunk": "@@ -14,40 +14,99 @@ Pulsar C++ client is supported on **Linux** and **MacOS** platforms.\n \n [Doxygen](http://www.doxygen.nl/)-generated API docs for the C++ client are available [here](/api/cpp).\n \n+## System requirements\n+\n+You need to have the following installed to use the C++ client:\n+\n+* [CMake](https://cmake.org/)\n+* [Boost](http://www.boost.org/)\n+* [Protocol Buffers](https://developers.google.com/protocol-buffers/) 2.6\n+* [libcurl](https://curl.haxx.se/libcurl/)\n+* [Google Test](https://github.com/google/googletest)\n+\n ## Linux\n \n+### Compilation \n+\n+1. Clone the Pulsar repository.\n+\n+```shell\n+$ git clone https://github.com/apache/pulsar\n+```\n+\n+2. Install all necessary dependencies.\n+\n+```shell\n+$ apt-get install cmake libssl-dev libcurl4-openssl-dev liblog4cxx-dev \\\n+  libprotobuf-dev protobuf-compiler libboost-all-dev google-mock libgtest-dev libjsoncpp-dev\n+```\n+\n+3. Compile and install [Google Test](https://github.com/google/googletest).\n+\n+```shell\n+# libgtest-dev version is 1.18.0 or above\n+$ cd /usr/src/googletest\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp ./googlemock/libgmock.a ./googlemock/gtest/libgtest.a /usr/lib/\n+\n+# less than 1.18.0\n+$ cd /usr/src/gtest\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp libgtest.a /usr/lib\n+\n+$ cd /usr/src/gmock\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp libgmock.a /usr/lib\n+```\n+\n+4. Compile the Pulsar client library for C++ inside the Pulsar repository.\n+\n+```shell\n+$ cd pulsar-client-cpp\n+$ cmake .\n+$ make\n+```\n+\n+With a successful installation, the files `libpulsar.so` and `libpulsar.a` will be in the `lib` folder of the repository. The tools `perfProducer` and `perfConsumer` will be in the `perf` directory.\n+\n+### Install Dependencies\n+\n > Since 2.1.0 release, Pulsar ships pre-built RPM and Debian packages. You can download and install those packages directly.\n \n-Four kind of libraries `libpulsar.so` / `libpulsarnossl.so` / `libpulsar.a` / `libpulsarwithdeps.a` are included in your `/usr/lib` after rpm/deb download and install.\n-By default, they are build under code path `${PULSAR_HOME}/pulsar-client-cpp`, using command\n- `cmake . -DBUILD_TESTS=OFF -DLINK_STATIC=ON && make pulsarShared pulsarSharedNossl pulsarStatic pulsarStaticWithDeps -j 3`\n-These libraries rely on some other libraries, if you want to get detailed version of dependencies libraries, please reference [these](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/rpm/Dockerfile) [files](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/deb/Dockerfile).\n+The `libpulsar.so`, `libpulsarnossl.so`, `libpulsar.a`, and `libpulsarwithdeps.a` libraries are included in your `/usr/lib` after RPM or DEB being downloaded and installed.", "originalCommit": "8877e71d6f4984d549250e82ab330dadf1fd9a8f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3OTM0NA==", "url": "https://github.com/apache/pulsar/pull/8919#discussion_r547079344", "bodyText": "under --> in\nin the xxx path", "author": "Jennifer88huang", "createdAt": "2020-12-22T05:41:41Z", "path": "site2/docs/client-libraries-cpp.md", "diffHunk": "@@ -14,40 +14,99 @@ Pulsar C++ client is supported on **Linux** and **MacOS** platforms.\n \n [Doxygen](http://www.doxygen.nl/)-generated API docs for the C++ client are available [here](/api/cpp).\n \n+## System requirements\n+\n+You need to have the following installed to use the C++ client:\n+\n+* [CMake](https://cmake.org/)\n+* [Boost](http://www.boost.org/)\n+* [Protocol Buffers](https://developers.google.com/protocol-buffers/) 2.6\n+* [libcurl](https://curl.haxx.se/libcurl/)\n+* [Google Test](https://github.com/google/googletest)\n+\n ## Linux\n \n+### Compilation \n+\n+1. Clone the Pulsar repository.\n+\n+```shell\n+$ git clone https://github.com/apache/pulsar\n+```\n+\n+2. Install all necessary dependencies.\n+\n+```shell\n+$ apt-get install cmake libssl-dev libcurl4-openssl-dev liblog4cxx-dev \\\n+  libprotobuf-dev protobuf-compiler libboost-all-dev google-mock libgtest-dev libjsoncpp-dev\n+```\n+\n+3. Compile and install [Google Test](https://github.com/google/googletest).\n+\n+```shell\n+# libgtest-dev version is 1.18.0 or above\n+$ cd /usr/src/googletest\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp ./googlemock/libgmock.a ./googlemock/gtest/libgtest.a /usr/lib/\n+\n+# less than 1.18.0\n+$ cd /usr/src/gtest\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp libgtest.a /usr/lib\n+\n+$ cd /usr/src/gmock\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp libgmock.a /usr/lib\n+```\n+\n+4. Compile the Pulsar client library for C++ inside the Pulsar repository.\n+\n+```shell\n+$ cd pulsar-client-cpp\n+$ cmake .\n+$ make\n+```\n+\n+With a successful installation, the files `libpulsar.so` and `libpulsar.a` will be in the `lib` folder of the repository. The tools `perfProducer` and `perfConsumer` will be in the `perf` directory.\n+\n+### Install Dependencies\n+\n > Since 2.1.0 release, Pulsar ships pre-built RPM and Debian packages. You can download and install those packages directly.\n \n-Four kind of libraries `libpulsar.so` / `libpulsarnossl.so` / `libpulsar.a` / `libpulsarwithdeps.a` are included in your `/usr/lib` after rpm/deb download and install.\n-By default, they are build under code path `${PULSAR_HOME}/pulsar-client-cpp`, using command\n- `cmake . -DBUILD_TESTS=OFF -DLINK_STATIC=ON && make pulsarShared pulsarSharedNossl pulsarStatic pulsarStaticWithDeps -j 3`\n-These libraries rely on some other libraries, if you want to get detailed version of dependencies libraries, please reference [these](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/rpm/Dockerfile) [files](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/deb/Dockerfile).\n+The `libpulsar.so`, `libpulsarnossl.so`, `libpulsar.a`, and `libpulsarwithdeps.a` libraries are included in your `/usr/lib` after RPM or DEB being downloaded and installed.\n+\n+By default, they are built under code path `${PULSAR_HOME}/pulsar-client-cpp`. The building command is as below.", "originalCommit": "8877e71d6f4984d549250e82ab330dadf1fd9a8f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4MDA0Mg==", "url": "https://github.com/apache/pulsar/pull/8919#discussion_r547080042", "bodyText": "Below is the command to use this Pulsar library -->\nYou can use this Pulsar library with the command below.\nIf it's an action that should be done by users, use the second person, see https://developers.google.com/style/person", "author": "Jennifer88huang", "createdAt": "2020-12-22T05:44:12Z", "path": "site2/docs/client-libraries-cpp.md", "diffHunk": "@@ -14,40 +14,99 @@ Pulsar C++ client is supported on **Linux** and **MacOS** platforms.\n \n [Doxygen](http://www.doxygen.nl/)-generated API docs for the C++ client are available [here](/api/cpp).\n \n+## System requirements\n+\n+You need to have the following installed to use the C++ client:\n+\n+* [CMake](https://cmake.org/)\n+* [Boost](http://www.boost.org/)\n+* [Protocol Buffers](https://developers.google.com/protocol-buffers/) 2.6\n+* [libcurl](https://curl.haxx.se/libcurl/)\n+* [Google Test](https://github.com/google/googletest)\n+\n ## Linux\n \n+### Compilation \n+\n+1. Clone the Pulsar repository.\n+\n+```shell\n+$ git clone https://github.com/apache/pulsar\n+```\n+\n+2. Install all necessary dependencies.\n+\n+```shell\n+$ apt-get install cmake libssl-dev libcurl4-openssl-dev liblog4cxx-dev \\\n+  libprotobuf-dev protobuf-compiler libboost-all-dev google-mock libgtest-dev libjsoncpp-dev\n+```\n+\n+3. Compile and install [Google Test](https://github.com/google/googletest).\n+\n+```shell\n+# libgtest-dev version is 1.18.0 or above\n+$ cd /usr/src/googletest\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp ./googlemock/libgmock.a ./googlemock/gtest/libgtest.a /usr/lib/\n+\n+# less than 1.18.0\n+$ cd /usr/src/gtest\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp libgtest.a /usr/lib\n+\n+$ cd /usr/src/gmock\n+$ sudo cmake .\n+$ sudo make\n+$ sudo cp libgmock.a /usr/lib\n+```\n+\n+4. Compile the Pulsar client library for C++ inside the Pulsar repository.\n+\n+```shell\n+$ cd pulsar-client-cpp\n+$ cmake .\n+$ make\n+```\n+\n+With a successful installation, the files `libpulsar.so` and `libpulsar.a` will be in the `lib` folder of the repository. The tools `perfProducer` and `perfConsumer` will be in the `perf` directory.\n+\n+### Install Dependencies\n+\n > Since 2.1.0 release, Pulsar ships pre-built RPM and Debian packages. You can download and install those packages directly.\n \n-Four kind of libraries `libpulsar.so` / `libpulsarnossl.so` / `libpulsar.a` / `libpulsarwithdeps.a` are included in your `/usr/lib` after rpm/deb download and install.\n-By default, they are build under code path `${PULSAR_HOME}/pulsar-client-cpp`, using command\n- `cmake . -DBUILD_TESTS=OFF -DLINK_STATIC=ON && make pulsarShared pulsarSharedNossl pulsarStatic pulsarStaticWithDeps -j 3`\n-These libraries rely on some other libraries, if you want to get detailed version of dependencies libraries, please reference [these](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/rpm/Dockerfile) [files](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/deb/Dockerfile).\n+The `libpulsar.so`, `libpulsarnossl.so`, `libpulsar.a`, and `libpulsarwithdeps.a` libraries are included in your `/usr/lib` after RPM or DEB being downloaded and installed.\n+\n+By default, they are built under code path `${PULSAR_HOME}/pulsar-client-cpp`. The building command is as below.\n+ `cmake . -DBUILD_TESTS=OFF -DLINK_STATIC=ON && make pulsarShared pulsarSharedNossl pulsarStatic pulsarStaticWithDeps -j 3`.\n+\n+These libraries rely on some other libraries, if you want to get detailed version of dependencies, see [RPM](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/rpm/Dockerfile) or [DEB](https://github.com/apache/pulsar/blob/master/pulsar-client-cpp/pkg/deb/Dockerfile) files.\n+\n+1. `libpulsar.so` is a shared library, which contains statically linked `boost` and `openssl`. It also dynamically links all other needed libraries. Below is the command to use this Pulsar library.\n \n-1. `libpulsar.so` is the Shared library, it contains statically linked `boost` and `openssl`, and will also dynamically link all other needed libraries.\n-The command the when use this pulsar library is like this:\n ```bash\n  g++ --std=c++11  PulsarTest.cpp -o test /usr/lib/libpulsar.so -I/usr/local/ssl/include\n ```\n \n-2. `libpulsarnossl.so` is the Shared library that similar to `libpulsar.so` except that the library `openssl` and `crypto` are dynamically linked.\n-The command the when use this pulsar library is like this:\n+2. `libpulsarnossl.so` is a shared library, similar to `libpulsar.so` except that the libraries `openssl` and `crypto` are dynamically linked. Below is the command to use this Pulsar library.", "originalCommit": "8877e71d6f4984d549250e82ab330dadf1fd9a8f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4MDY3OQ==", "url": "https://github.com/apache/pulsar/pull/8919#discussion_r547080679", "bodyText": "After you install RPM successfully, Pulsar libraries are in the /usr/lib path.", "author": "Jennifer88huang", "createdAt": "2020-12-22T05:46:27Z", "path": "site2/docs/client-libraries-cpp.md", "diffHunk": "@@ -65,7 +124,7 @@ by using user local system provided version is more reasonable, and more easy fo\n $ rpm -ivh apache-pulsar-client*.rpm\n ```\n \n-After install, Pulsar libraries will be placed under `/usr/lib`.\n+With a successful installation, you will see Pulsar libraries under `/usr/lib`.", "originalCommit": "8877e71d6f4984d549250e82ab330dadf1fd9a8f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4MTAwNw==", "url": "https://github.com/apache/pulsar/pull/8919#discussion_r547081007", "bodyText": "what does \"leaves\" mean in this sentence?", "author": "Jennifer88huang", "createdAt": "2020-12-22T05:47:37Z", "path": "site2/docs/client-libraries-cpp.md", "diffHunk": "@@ -104,7 +163,7 @@ mvn install -DskipTests\n pulsar-client-cpp/pkg/rpm/docker-build-rpm.sh\n ```\n \n-This builds the RPM inside a Docker container and it leaves the RPMs in `pulsar-client-cpp/pkg/rpm/RPMS/x86_64/`.\n+This command builds the RPM inside a Docker container and it leaves the RPMs in `pulsar-client-cpp/pkg/rpm/RPMS/x86_64/`.", "originalCommit": "8877e71d6f4984d549250e82ab330dadf1fd9a8f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2ca3aaed1418b0a0e654d084b8d1a2309d8a1c76", "url": "https://github.com/apache/pulsar/commit/2ca3aaed1418b0a0e654d084b8d1a2309d8a1c76", "message": "Update client-libraries-cpp.md", "committedDate": "2020-12-23T09:54:02Z", "type": "commit"}, {"oid": "1c40d4824259fd7c42ce6233c25f054dde48c34e", "url": "https://github.com/apache/pulsar/commit/1c40d4824259fd7c42ce6233c25f054dde48c34e", "message": "update sidebars", "committedDate": "2020-12-24T09:55:44Z", "type": "commit"}]}