{"pr_number": 6763, "pr_title": "[docs] Fix encryption examples", "pr_createdAt": "2020-04-18T09:53:27Z", "pr_url": "https://github.com/apache/pulsar/pull/6763", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY5NTYyMg==", "url": "https://github.com/apache/pulsar/pull/6763#discussion_r410695622", "bodyText": "In above 2 lines SEND and DISCARD should be removed?", "author": "jiazhai", "createdAt": "2020-04-18T13:01:08Z", "path": "site2/docs/security-encryption.md", "diffHunk": "@@ -160,16 +165,15 @@ When producers want to encrypt the messages with multiple keys, producers add al\n If you need to encrypt the messages using 2 keys (myapp.messagekey1 and myapp.messagekey2), refer to the following example.\n \n ```java\n-conf.addEncryptionKey(\"myapp.messagekey1\");\n-conf.addEncryptionKey(\"myapp.messagekey2\");\n+PulsarClient.newProducer().addEncryptionKey(\"myapp.messagekey1\").addEncryptionKey(\"myapp.messagekey2\");\n ```\n ## Decrypt encrypted messages at the consumer application\n Consumers require access one of the private keys to decrypt messages that the producer produces. If you want to receive encrypted messages, create a public or private key and give your public key to the producer application to encrypt messages using your public key.\n \n ## Handle failures\n * Producer/ Consumer loses access to the key\n-  * Producer action fails indicating the cause of the failure. Application has the option to proceed with sending unencrypted message in such cases. Call conf.setCryptoFailureAction(ProducerCryptoFailureAction) to control the producer behavior. The default behavior is to fail the request.\n-  * If consumption fails due to decryption failure or missing keys in consumer, application has the option to consume the encrypted message or discard it. Call conf.setCryptoFailureAction(ConsumerCryptoFailureAction) to control the consumer behavior. The default behavior is to fail the request. Application is never able to decrypt the messages if the private key is permanently lost.\n+  * Producer action fails indicating the cause of the failure. Application has the option to proceed with sending unencrypted message in such cases. Call PulsarClient.newProducer().cryptoFailureAction(ProducerCryptoFailureAction.SEND) to control the producer behavior. The default behavior is to fail the request.\n+  * If consumption fails due to decryption failure or missing keys in consumer, application has the option to consume the encrypted message or discard it. Call PulsarClient.newConsumer().cryptoFailureAction(ConsumerCryptoFailureAction.DISCARD) to control the consumer behavior. The default behavior is to fail the request. Application is never able to decrypt the messages if the private key is permanently lost.", "originalCommit": "1601b79cc96fa82f05ceb5aa4852cb56b7599356", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwMDY0Mg==", "url": "https://github.com/apache/pulsar/pull/6763#discussion_r410700642", "bodyText": "Done", "author": "trexinc", "createdAt": "2020-04-18T13:48:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY5NTYyMg=="}], "type": "inlineReview"}, {"oid": "e1f7d63ce88c1c3f28cad372365bfdeed3d67ea4", "url": "https://github.com/apache/pulsar/commit/e1f7d63ce88c1c3f28cad372365bfdeed3d67ea4", "message": "Fix encryption examples", "committedDate": "2020-04-18T13:44:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIzODYwOA==", "url": "https://github.com/apache/pulsar/pull/6763#discussion_r414238608", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Pulsar generates new AES data key every 4 hours or after publishing a certain number of messages. A producer fetches the asymmetric public key every 4 hours by calling CryptoKeyReader.getPublicKey() to retrieve the latest version.\n          \n          \n            \n            Pulsar generates a new AES data key every 4 hours or after publishing a certain number of messages. A producer fetches the asymmetric public key every 4 hours by calling CryptoKeyReader.getPublicKey() to retrieve the latest version.", "author": "Anonymitaet", "createdAt": "2020-04-24T02:00:19Z", "path": "site2/docs/security-encryption.md", "diffHunk": "@@ -144,11 +148,12 @@ for (int i = 0; i < 10; i++) {\n \n // Acknowledge the consumption of all messages at once\n consumer.acknowledgeCumulative(msg);\n+consumer.close();\n pulsarClient.close();\n ```\n \n ## Key rotation\n-Pulsar generates new AES data key every 4 hours or after publishing a certain number of messages. A producer fetches the asymmetric public key every 4 hours by calling CryptoKeyReader::getPublicKey() to retrieve the latest version.\n+Pulsar generates new AES data key every 4 hours or after publishing a certain number of messages. A producer fetches the asymmetric public key every 4 hours by calling CryptoKeyReader.getPublicKey() to retrieve the latest version.", "originalCommit": "e1f7d63ce88c1c3f28cad372365bfdeed3d67ea4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cbd260b0a288d69c93f839d3904cf0dbd1fc635d", "url": "https://github.com/apache/pulsar/commit/cbd260b0a288d69c93f839d3904cf0dbd1fc635d", "message": "Minor grammar fix\n\nCo-Authored-By: Yu Liu <50226895+Anonymitaet@users.noreply.github.com>", "committedDate": "2020-04-24T06:04:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5NjUxOQ==", "url": "https://github.com/apache/pulsar/pull/6763#discussion_r416796519", "bodyText": "what will be the myappkey", "author": "kjaggann", "createdAt": "2020-04-28T17:32:21Z", "path": "site2/docs/security-encryption.md", "diffHunk": "@@ -78,18 +78,20 @@ class RawFileKeyReader implements CryptoKeyReader {\n         return keyInfo;\n     }\n }\n-PulsarClient pulsarClient = PulsarClient.create(\"http://localhost:8080\");\n \n-ProducerConfiguration prodConf = new ProducerConfiguration();\n-prodConf.setCryptoKeyReader(new RawFileKeyReader(\"test_ecdsa_pubkey.pem\", \"test_ecdsa_privkey.pem\"));\n-prodConf.addEncryptionKey(\"myappkey\");\n+PulsarClient pulsarClient = PulsarClient.builder().serviceUrl(\"pulsar://localhost:6650\").build();\n \n-Producer producer = pulsarClient.createProducer(\"persistent://my-tenant/my-ns/my-topic\", prodConf);\n+Producer producer = pulsarClient.newProducer()\n+                .topic(\"persistent://my-tenant/my-ns/my-topic\")\n+                .addEncryptionKey(\"myappkey\")", "originalCommit": "e1f7d63ce88c1c3f28cad372365bfdeed3d67ea4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5ODk1NA==", "url": "https://github.com/apache/pulsar/pull/6763#discussion_r416798954", "bodyText": "Its just a \u201ctag\u201d for the key. So the consumer knows with which key to decrypt. As basically every producer can use a different encryption key", "author": "trexinc", "createdAt": "2020-04-28T17:36:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5NjUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxNDY3NQ==", "url": "https://github.com/apache/pulsar/pull/6763#discussion_r416814675", "bodyText": "I used secured  AES key generated from this method\nKey key;\nSecureRandom rand = new SecureRandom();\nKeyGenerator generator = KeyGenerator.getInstance(\"AES\");\ngenerator.init(256, rand);\nkey = generator.generateKey();\nand  created a producer\nProducer<byte[]> producer = client.newProducer()\n.topic(\"persistent://my-tenant/my-namespace/my-topic-1\")\n.cryptoKeyReader(new RawFileKeyReader(\"src/main/resources/test_ecdsa_pubkey.pem\", \"src/main/resources/test_ecdsa_privkey.pem\"))\n.addEncryptionKey(\"key\")\n.enableBatching(false)\n.create();\nBut i got this exception\norg.apache.pulsar.client.api.PulsarClientException: java.util.concurrent.ExecutionException: org.apache.pulsar.client.api.PulsarClientException: java.lang.NoSuchMethodError: 'org.apache.pulsar.shade.io.netty.buffer.ByteBuf org.apache.pulsar.client.api.MessageCrypto.encrypt(java.util.Set, org.apache.pulsar.client.api.CryptoKeyReader, java.util.function.Supplier, org.apache.pulsar.shade.io.netty.buffer.ByteBuf)'\n\nI followed the document", "author": "kjaggann", "createdAt": "2020-04-28T18:00:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5NjUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgyMTkzMQ==", "url": "https://github.com/apache/pulsar/pull/6763#discussion_r416821931", "bodyText": "Yep, this seems to be completely broken in 2.5.1. Works fine in 2.5.0.", "author": "trexinc", "createdAt": "2020-04-28T18:12:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5NjUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgyOTA1MQ==", "url": "https://github.com/apache/pulsar/pull/6763#discussion_r416829051", "bodyText": "Well, it works fine if you add this dependency:\ncompile group: 'org.apache.pulsar', name: 'pulsar-client-messagecrypto-bc', version: '2.5.1'\nDon't know if this a bug or this is how it is supposed to be now with the whole addition of bcfips support.", "author": "trexinc", "createdAt": "2020-04-28T18:23:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5NjUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1NTgwMQ==", "url": "https://github.com/apache/pulsar/pull/6763#discussion_r416855801", "bodyText": "I have already added that dependency\nhowever i have raised a ticket for this\nISSUE-6834: Apache pulsar Encryption failed using ecdsa", "author": "kjaggann", "createdAt": "2020-04-28T19:08:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5NjUxOQ=="}], "type": "inlineReview"}]}