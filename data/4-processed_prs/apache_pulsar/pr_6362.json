{"pr_number": 6362, "pr_title": "[ClientAPI]Fix hasMessageAvailable()", "pr_createdAt": "2020-02-19T07:38:44Z", "pr_url": "https://github.com/apache/pulsar/pull/6362", "timeline": [{"oid": "c210b31bbc98137005e7beb6bc997533c0821ea8", "url": "https://github.com/apache/pulsar/commit/c210b31bbc98137005e7beb6bc997533c0821ea8", "message": "fix hasMessageAvailable for reader", "committedDate": "2020-02-19T07:37:22Z", "type": "commit"}, {"oid": "095f932eb55ec247ee6d1a878e7130137dfc8fd2", "url": "https://github.com/apache/pulsar/commit/095f932eb55ec247ee6d1a878e7130137dfc8fd2", "message": "add test case", "committedDate": "2020-02-19T09:46:50Z", "type": "commit"}, {"oid": "55fd071c8e1420aa70df4d78ad02ef3da95c71dc", "url": "https://github.com/apache/pulsar/commit/55fd071c8e1420aa70df4d78ad02ef3da95c71dc", "message": "sort id to make test deterministic", "committedDate": "2020-02-19T09:52:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM0NjU5MQ==", "url": "https://github.com/apache/pulsar/pull/6362#discussion_r381346591", "bodyText": "I think you can useCommands.parseMessageMetadata(entry.getDataBuffer()) to get the MessageMetadata.  The batch size maintained in MessageMetadata.", "author": "codelipenghui", "createdAt": "2020-02-19T14:59:26Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "diffHunk": "@@ -1412,6 +1424,51 @@ protected void handleGetLastMessageId(CommandGetLastMessageId getLastMessageId)\n         }\n     }\n \n+    private int getLargestBatchIndex(Topic topic, PositionImpl position, long requestId) {\n+        PersistentTopic persistentTopic = (PersistentTopic) topic;\n+        ManagedLedgerImpl ml = (ManagedLedgerImpl) persistentTopic.getManagedLedger();\n+\n+        CompletableFuture<Entry> entryFuture = new CompletableFuture<>();\n+        ml.asyncReadEntry(position, new AsyncCallbacks.ReadEntryCallback() {\n+            @Override\n+            public void readEntryComplete(Entry entry, Object ctx) {\n+                entryFuture.complete(entry);\n+            }\n+\n+            @Override\n+            public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n+                entryFuture.completeExceptionally(exception);\n+            }\n+        }, null);\n+\n+        CompletableFuture<Integer> batchSizeFuture = entryFuture.thenApply(entry -> {\n+            int[] sizeHolder = new int[1];\n+            try {\n+                MessageParser.parseMessage(TopicName.get(topic.getName()), entry.getLedgerId(), entry.getEntryId(),\n+                        entry.getDataBuffer(), (message) -> {\n+                            sizeHolder[0] = ((RawMessageImpl) message).getBatchSize();\n+                            message.release();\n+                        }, Commands.DEFAULT_MAX_MESSAGE_SIZE);", "originalCommit": "55fd071c8e1420aa70df4d78ad02ef3da95c71dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "11102e0abefb2393f381fbfe97ecce1c2b588418", "url": "https://github.com/apache/pulsar/commit/11102e0abefb2393f381fbfe97ecce1c2b588418", "message": "fix comments", "committedDate": "2020-02-19T16:08:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwMjc1MQ==", "url": "https://github.com/apache/pulsar/pull/6362#discussion_r381502751", "bodyText": "This is being called within an IO thread. We cannot block on the future", "author": "merlimat", "createdAt": "2020-02-19T19:42:40Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "diffHunk": "@@ -1412,6 +1424,43 @@ protected void handleGetLastMessageId(CommandGetLastMessageId getLastMessageId)\n         }\n     }\n \n+    private int getLargestBatchIndex(Topic topic, PositionImpl position, long requestId) {\n+        PersistentTopic persistentTopic = (PersistentTopic) topic;\n+        ManagedLedgerImpl ml = (ManagedLedgerImpl) persistentTopic.getManagedLedger();\n+\n+        CompletableFuture<Entry> entryFuture = new CompletableFuture<>();\n+        ml.asyncReadEntry(position, new AsyncCallbacks.ReadEntryCallback() {\n+            @Override\n+            public void readEntryComplete(Entry entry, Object ctx) {\n+                entryFuture.complete(entry);\n+            }\n+\n+            @Override\n+            public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n+                entryFuture.completeExceptionally(exception);\n+            }\n+        }, null);\n+\n+        CompletableFuture<Integer> batchSizeFuture = entryFuture.thenApply(entry -> {\n+            MessageMetadata metadata = Commands.parseMessageMetadata(entry.getDataBuffer());\n+            int batchSize = metadata.getNumMessagesInBatch();\n+            entry.release();\n+            return batchSize;\n+        });\n+\n+        try {\n+            int batchSize =  batchSizeFuture.get();", "originalCommit": "11102e0abefb2393f381fbfe97ecce1c2b588418", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTczMjAzMQ==", "url": "https://github.com/apache/pulsar/pull/6362#discussion_r381732031", "bodyText": "Fixed.", "author": "yjshen", "createdAt": "2020-02-20T04:11:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwMjc1MQ=="}], "type": "inlineReview"}, {"oid": "9b6e600f28d3fa5faf16543a2e02b855705b511a", "url": "https://github.com/apache/pulsar/commit/9b6e600f28d3fa5faf16543a2e02b855705b511a", "message": "get batch size async", "committedDate": "2020-02-20T04:10:55Z", "type": "commit"}, {"oid": "172b638200ade5bc61adf3c6b5e2609261866429", "url": "https://github.com/apache/pulsar/commit/172b638200ade5bc61adf3c6b5e2609261866429", "message": "Merge remote-tracking branch 'apache/master' into has_msg_avalilable", "committedDate": "2020-02-24T14:21:02Z", "type": "commit"}, {"oid": "172b638200ade5bc61adf3c6b5e2609261866429", "url": "https://github.com/apache/pulsar/commit/172b638200ade5bc61adf3c6b5e2609261866429", "message": "Merge remote-tracking branch 'apache/master' into has_msg_avalilable", "committedDate": "2020-02-24T14:21:02Z", "type": "forcePushed"}, {"oid": "2278a9b9cf4d4a7aaaae7fa110170095e5622afa", "url": "https://github.com/apache/pulsar/commit/2278a9b9cf4d4a7aaaae7fa110170095e5622afa", "message": "move logic to async", "committedDate": "2020-02-25T05:36:40Z", "type": "commit"}, {"oid": "8f7d4d5a3b003cc11423b35484fc1c7c01a4e2eb", "url": "https://github.com/apache/pulsar/commit/8f7d4d5a3b003cc11423b35484fc1c7c01a4e2eb", "message": "reset lastDequeue to earliest when seek", "committedDate": "2020-02-25T05:54:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3MDk0OQ==", "url": "https://github.com/apache/pulsar/pull/6362#discussion_r383670949", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    CountDownLatch latch = new CountDownLatch(100);\n          \n          \n            \n                    CountDownLatch latch = new CountDownLatch(numOfMessage);", "author": "zymap", "createdAt": "2020-02-25T05:51:14Z", "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/api/TopicReaderTest.java", "diffHunk": "@@ -531,6 +542,68 @@ public void testMessageAvailableAfterRestart() throws Exception {\n \n     }\n \n+    @Test(dataProvider = \"variationsForHasMessageAvailable\")\n+    public void testHasMessageAvailable(boolean enableBatch, boolean startInclusive) throws Exception {\n+        final String topicName = \"persistent://my-property/my-ns/HasMessageAvailable\";\n+        final int numOfMessage = 100;\n+\n+        ProducerBuilder<byte[]> producerBuilder = pulsarClient.newProducer()\n+                .topic(topicName);\n+\n+        if (enableBatch) {\n+            producerBuilder\n+                    .enableBatching(true)\n+                    .batchingMaxMessages(10);\n+        } else {\n+            producerBuilder\n+                    .enableBatching(false);\n+        }\n+\n+        Producer<byte[]> producer = producerBuilder.create();\n+\n+        CountDownLatch latch = new CountDownLatch(100);", "originalCommit": "2278a9b9cf4d4a7aaaae7fa110170095e5622afa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8c895f17677fa7cff68b499efdd154754cee2d1b", "url": "https://github.com/apache/pulsar/commit/8c895f17677fa7cff68b499efdd154754cee2d1b", "message": "resolve comments", "committedDate": "2020-02-25T06:21:28Z", "type": "commit"}, {"oid": "3724b449bbf0295c14fa38026bd5a2e7e7460211", "url": "https://github.com/apache/pulsar/commit/3724b449bbf0295c14fa38026bd5a2e7e7460211", "message": "fix compactor test", "committedDate": "2020-02-26T01:48:12Z", "type": "commit"}, {"oid": "5af7a1252ab272bee50f257d5830486aa84f99a1", "url": "https://github.com/apache/pulsar/commit/5af7a1252ab272bee50f257d5830486aa84f99a1", "message": "retrigger", "committedDate": "2020-02-26T03:01:31Z", "type": "commit"}, {"oid": "c3a94e2d831e40f524ddc0d32e47e0c5b6f50a1b", "url": "https://github.com/apache/pulsar/commit/c3a94e2d831e40f524ddc0d32e47e0c5b6f50a1b", "message": "rerun tests", "committedDate": "2020-02-26T03:48:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxOTQ4Nw==", "url": "https://github.com/apache/pulsar/pull/6362#discussion_r386619487", "bodyText": "Ideally we should be avoiding this read by just recording the number of messages in the last batch, along with the current position.", "author": "merlimat", "createdAt": "2020-03-02T20:02:37Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "diffHunk": "@@ -1396,22 +1401,83 @@ protected void handleGetLastMessageId(CommandGetLastMessageId getLastMessageId)\n             Topic topic = consumer.getSubscription().getTopic();\n             Position position = topic.getLastMessageId();\n             int partitionIndex = TopicName.getPartitionIndex(topic.getName());\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"[{}] [{}][{}] Get LastMessageId {} partitionIndex {}\", remoteAddress,\n-                    topic.getName(), consumer.getSubscription().getName(), position, partitionIndex);\n-            }\n-            MessageIdData messageId = MessageIdData.newBuilder()\n-                .setLedgerId(((PositionImpl)position).getLedgerId())\n-                .setEntryId(((PositionImpl)position).getEntryId())\n-                .setPartition(partitionIndex)\n-                .build();\n \n-            ctx.writeAndFlush(Commands.newGetLastMessageIdResponse(requestId, messageId));\n+            getLargestBatchIndexWhenPossible(\n+                    topic,\n+                    (PositionImpl) position,\n+                    partitionIndex,\n+                    requestId,\n+                    consumer.getSubscription().getName());\n+\n         } else {\n             ctx.writeAndFlush(Commands.newError(getLastMessageId.getRequestId(), ServerError.MetadataError, \"Consumer not found\"));\n         }\n     }\n \n+    private void getLargestBatchIndexWhenPossible(\n+            Topic topic,\n+            PositionImpl position,\n+            int partitionIndex,\n+            long requestId,\n+            String subscriptionName) {\n+\n+        PersistentTopic persistentTopic = (PersistentTopic) topic;\n+        ManagedLedgerImpl ml = (ManagedLedgerImpl) persistentTopic.getManagedLedger();\n+\n+        // If it's not pointing to a valid entry, respond messageId of the current position.\n+        if (position.getEntryId() == -1) {\n+            MessageIdData messageId = MessageIdData.newBuilder()\n+                    .setLedgerId(position.getLedgerId())\n+                    .setEntryId(position.getEntryId())\n+                    .setPartition(partitionIndex).build();\n+\n+            ctx.writeAndFlush(Commands.newGetLastMessageIdResponse(requestId, messageId));\n+        }\n+\n+        // For a valid position, we read the entry out and parse the batch size from its metadata.\n+        CompletableFuture<Entry> entryFuture = new CompletableFuture<>();\n+        ml.asyncReadEntry(position, new AsyncCallbacks.ReadEntryCallback() {", "originalCommit": "c3a94e2d831e40f524ddc0d32e47e0c5b6f50a1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}