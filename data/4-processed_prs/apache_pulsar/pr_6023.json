{"pr_number": 6023, "pr_title": "[pulsar-client-go]Add DeliverAfter option for go client", "pr_createdAt": "2020-01-09T12:53:13Z", "pr_url": "https://github.com/apache/pulsar/pull/6023", "timeline": [{"oid": "74420a938177730a8810f7620ae61557f635210c", "url": "https://github.com/apache/pulsar/commit/74420a938177730a8810f7620ae61557f635210c", "message": "Add DeliverAfter option for go client", "committedDate": "2020-01-09T12:33:05Z", "type": "commit"}, {"oid": "9e277bbceea77117cabfddf114b01dd7f70ccd67", "url": "https://github.com/apache/pulsar/commit/9e277bbceea77117cabfddf114b01dd7f70ccd67", "message": "fix doc", "committedDate": "2020-01-09T12:47:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3NTg2OQ==", "url": "https://github.com/apache/pulsar/pull/6023#discussion_r428175869", "bodyText": "Can we replace fmt.Printf with t.Logf()?", "author": "wolfstudy", "createdAt": "2020-05-20T17:12:34Z", "path": "pulsar-client-go/pulsar/producer_test.go", "diffHunk": "@@ -416,3 +416,71 @@ func TestProducer_SendAndGetMsgID(t *testing.T) {\n \t\tassert.NotNil(t, IsNil(msgID))\n \t}\n }\n+\n+func TestProducer_DelayMessage(t *testing.T) {\n+\tclient, err := NewClient(ClientOptions{\n+\t\tURL: \"pulsar://localhost:6650\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer client.Close()\n+\n+\ttopicName := \"test-send-with-message-id\"\n+\tproducer, err := client.CreateProducer(ProducerOptions{\n+\t\tTopic: topicName,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer producer.Close()\n+\n+\tfailoverConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-failover\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer failoverConsumer.Close()\n+\n+\tsharedConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-shared\",\n+\t\tType:             Shared,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer sharedConsumer.Close()\n+\n+\tctx := context.Background()\n+\n+\tdelay := time.Second*5\n+\tbegin := time.Now()\n+\tfmt.Printf(\"begin %v\\n\", begin)\n+\tfor i := 0; i < 10; i++ {\n+\t\terr := producer.Send(ctx, ProducerMessage{\n+\t\t\tPayload: []byte(fmt.Sprintf(\"hello-%d\", i)),\n+\t\t\tDeliverAfter: delay,\n+\t\t})\n+\t\tfmt.Printf(\"send message %d\\n\", i)", "originalCommit": "9e277bbceea77117cabfddf114b01dd7f70ccd67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3NjA1OA==", "url": "https://github.com/apache/pulsar/pull/6023#discussion_r428176058", "bodyText": "Please replace fmt.Printf with t.Logf().", "author": "wolfstudy", "createdAt": "2020-05-20T17:12:53Z", "path": "pulsar-client-go/pulsar/producer_test.go", "diffHunk": "@@ -416,3 +416,71 @@ func TestProducer_SendAndGetMsgID(t *testing.T) {\n \t\tassert.NotNil(t, IsNil(msgID))\n \t}\n }\n+\n+func TestProducer_DelayMessage(t *testing.T) {\n+\tclient, err := NewClient(ClientOptions{\n+\t\tURL: \"pulsar://localhost:6650\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer client.Close()\n+\n+\ttopicName := \"test-send-with-message-id\"\n+\tproducer, err := client.CreateProducer(ProducerOptions{\n+\t\tTopic: topicName,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer producer.Close()\n+\n+\tfailoverConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-failover\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer failoverConsumer.Close()\n+\n+\tsharedConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-shared\",\n+\t\tType:             Shared,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer sharedConsumer.Close()\n+\n+\tctx := context.Background()\n+\n+\tdelay := time.Second*5\n+\tbegin := time.Now()\n+\tfmt.Printf(\"begin %v\\n\", begin)\n+\tfor i := 0; i < 10; i++ {\n+\t\terr := producer.Send(ctx, ProducerMessage{\n+\t\t\tPayload: []byte(fmt.Sprintf(\"hello-%d\", i)),\n+\t\t\tDeliverAfter: delay,\n+\t\t})\n+\t\tfmt.Printf(\"send message %d\\n\", i)\n+\t\tassert.Nil(t, err)\n+\t}\n+\n+\t// Failover consumer will receive the messages immediately while\n+    // the shared consumer will get them after the delay\n+\tfor i := 0; i < 10; i++ {\n+\t\tmsg, err := failoverConsumer.Receive(ctx)\n+\t\tassert.Nil(t, err)\n+\t\tfmt.Printf(\"message: %s\\n\",msg.Payload())", "originalCommit": "9e277bbceea77117cabfddf114b01dd7f70ccd67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3NjI3NQ==", "url": "https://github.com/apache/pulsar/pull/6023#discussion_r428176275", "bodyText": "Please replace fmt.Printf with t.Logf().", "author": "wolfstudy", "createdAt": "2020-05-20T17:13:15Z", "path": "pulsar-client-go/pulsar/producer_test.go", "diffHunk": "@@ -416,3 +416,71 @@ func TestProducer_SendAndGetMsgID(t *testing.T) {\n \t\tassert.NotNil(t, IsNil(msgID))\n \t}\n }\n+\n+func TestProducer_DelayMessage(t *testing.T) {\n+\tclient, err := NewClient(ClientOptions{\n+\t\tURL: \"pulsar://localhost:6650\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer client.Close()\n+\n+\ttopicName := \"test-send-with-message-id\"\n+\tproducer, err := client.CreateProducer(ProducerOptions{\n+\t\tTopic: topicName,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer producer.Close()\n+\n+\tfailoverConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-failover\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer failoverConsumer.Close()\n+\n+\tsharedConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-shared\",\n+\t\tType:             Shared,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer sharedConsumer.Close()\n+\n+\tctx := context.Background()\n+\n+\tdelay := time.Second*5\n+\tbegin := time.Now()\n+\tfmt.Printf(\"begin %v\\n\", begin)\n+\tfor i := 0; i < 10; i++ {\n+\t\terr := producer.Send(ctx, ProducerMessage{\n+\t\t\tPayload: []byte(fmt.Sprintf(\"hello-%d\", i)),\n+\t\t\tDeliverAfter: delay,\n+\t\t})\n+\t\tfmt.Printf(\"send message %d\\n\", i)\n+\t\tassert.Nil(t, err)\n+\t}\n+\n+\t// Failover consumer will receive the messages immediately while\n+    // the shared consumer will get them after the delay\n+\tfor i := 0; i < 10; i++ {\n+\t\tmsg, err := failoverConsumer.Receive(ctx)\n+\t\tassert.Nil(t, err)\n+\t\tfmt.Printf(\"message: %s\\n\",msg.Payload())\n+\t\terr = failoverConsumer.Ack(msg)\n+\t\tassert.Nil(t, err)\n+\n+\t\tfmt.Printf(\"after %v\\n\", time.Now())", "originalCommit": "9e277bbceea77117cabfddf114b01dd7f70ccd67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3NjMwOQ==", "url": "https://github.com/apache/pulsar/pull/6023#discussion_r428176309", "bodyText": "Please replace fmt.Printf with t.Logf().", "author": "wolfstudy", "createdAt": "2020-05-20T17:13:19Z", "path": "pulsar-client-go/pulsar/producer_test.go", "diffHunk": "@@ -416,3 +416,71 @@ func TestProducer_SendAndGetMsgID(t *testing.T) {\n \t\tassert.NotNil(t, IsNil(msgID))\n \t}\n }\n+\n+func TestProducer_DelayMessage(t *testing.T) {\n+\tclient, err := NewClient(ClientOptions{\n+\t\tURL: \"pulsar://localhost:6650\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer client.Close()\n+\n+\ttopicName := \"test-send-with-message-id\"\n+\tproducer, err := client.CreateProducer(ProducerOptions{\n+\t\tTopic: topicName,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer producer.Close()\n+\n+\tfailoverConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-failover\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer failoverConsumer.Close()\n+\n+\tsharedConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-shared\",\n+\t\tType:             Shared,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer sharedConsumer.Close()\n+\n+\tctx := context.Background()\n+\n+\tdelay := time.Second*5\n+\tbegin := time.Now()\n+\tfmt.Printf(\"begin %v\\n\", begin)\n+\tfor i := 0; i < 10; i++ {\n+\t\terr := producer.Send(ctx, ProducerMessage{\n+\t\t\tPayload: []byte(fmt.Sprintf(\"hello-%d\", i)),\n+\t\t\tDeliverAfter: delay,\n+\t\t})\n+\t\tfmt.Printf(\"send message %d\\n\", i)\n+\t\tassert.Nil(t, err)\n+\t}\n+\n+\t// Failover consumer will receive the messages immediately while\n+    // the shared consumer will get them after the delay\n+\tfor i := 0; i < 10; i++ {\n+\t\tmsg, err := failoverConsumer.Receive(ctx)\n+\t\tassert.Nil(t, err)\n+\t\tfmt.Printf(\"message: %s\\n\",msg.Payload())\n+\t\terr = failoverConsumer.Ack(msg)\n+\t\tassert.Nil(t, err)\n+\n+\t\tfmt.Printf(\"after %v\\n\", time.Now())\n+\t\tassert.True(t, time.Since(begin) < delay)\n+\t}\n+\n+\tfor i := 0; i < 10; i++ {\n+\t\tmsg, err := sharedConsumer.Receive(ctx)\n+\t\tassert.Nil(t, err)\n+\t\tfmt.Printf(\"message: %s\\n\",msg.Payload())", "originalCommit": "9e277bbceea77117cabfddf114b01dd7f70ccd67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3NjM2Nw==", "url": "https://github.com/apache/pulsar/pull/6023#discussion_r428176367", "bodyText": "Please replace fmt.Printf with t.Logf().", "author": "wolfstudy", "createdAt": "2020-05-20T17:13:24Z", "path": "pulsar-client-go/pulsar/producer_test.go", "diffHunk": "@@ -416,3 +416,71 @@ func TestProducer_SendAndGetMsgID(t *testing.T) {\n \t\tassert.NotNil(t, IsNil(msgID))\n \t}\n }\n+\n+func TestProducer_DelayMessage(t *testing.T) {\n+\tclient, err := NewClient(ClientOptions{\n+\t\tURL: \"pulsar://localhost:6650\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer client.Close()\n+\n+\ttopicName := \"test-send-with-message-id\"\n+\tproducer, err := client.CreateProducer(ProducerOptions{\n+\t\tTopic: topicName,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer producer.Close()\n+\n+\tfailoverConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-failover\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer failoverConsumer.Close()\n+\n+\tsharedConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-shared\",\n+\t\tType:             Shared,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer sharedConsumer.Close()\n+\n+\tctx := context.Background()\n+\n+\tdelay := time.Second*5\n+\tbegin := time.Now()\n+\tfmt.Printf(\"begin %v\\n\", begin)\n+\tfor i := 0; i < 10; i++ {\n+\t\terr := producer.Send(ctx, ProducerMessage{\n+\t\t\tPayload: []byte(fmt.Sprintf(\"hello-%d\", i)),\n+\t\t\tDeliverAfter: delay,\n+\t\t})\n+\t\tfmt.Printf(\"send message %d\\n\", i)\n+\t\tassert.Nil(t, err)\n+\t}\n+\n+\t// Failover consumer will receive the messages immediately while\n+    // the shared consumer will get them after the delay\n+\tfor i := 0; i < 10; i++ {\n+\t\tmsg, err := failoverConsumer.Receive(ctx)\n+\t\tassert.Nil(t, err)\n+\t\tfmt.Printf(\"message: %s\\n\",msg.Payload())\n+\t\terr = failoverConsumer.Ack(msg)\n+\t\tassert.Nil(t, err)\n+\n+\t\tfmt.Printf(\"after %v\\n\", time.Now())\n+\t\tassert.True(t, time.Since(begin) < delay)\n+\t}\n+\n+\tfor i := 0; i < 10; i++ {\n+\t\tmsg, err := sharedConsumer.Receive(ctx)\n+\t\tassert.Nil(t, err)\n+\t\tfmt.Printf(\"message: %s\\n\",msg.Payload())\n+\t\terr = sharedConsumer.Ack(msg)\n+\t\tassert.Nil(t, err)\n+\n+\t\tfmt.Printf(\"after %v\\n\", time.Now())", "originalCommit": "9e277bbceea77117cabfddf114b01dd7f70ccd67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3NjUxMw==", "url": "https://github.com/apache/pulsar/pull/6023#discussion_r428176513", "bodyText": "Please replace fmt.Printf with t.Logf().", "author": "wolfstudy", "createdAt": "2020-05-20T17:13:38Z", "path": "pulsar-client-go/pulsar/producer_test.go", "diffHunk": "@@ -416,3 +416,71 @@ func TestProducer_SendAndGetMsgID(t *testing.T) {\n \t\tassert.NotNil(t, IsNil(msgID))\n \t}\n }\n+\n+func TestProducer_DelayMessage(t *testing.T) {\n+\tclient, err := NewClient(ClientOptions{\n+\t\tURL: \"pulsar://localhost:6650\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer client.Close()\n+\n+\ttopicName := \"test-send-with-message-id\"\n+\tproducer, err := client.CreateProducer(ProducerOptions{\n+\t\tTopic: topicName,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer producer.Close()\n+\n+\tfailoverConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-failover\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer failoverConsumer.Close()\n+\n+\tsharedConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-shared\",\n+\t\tType:             Shared,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer sharedConsumer.Close()\n+\n+\tctx := context.Background()\n+\n+\tdelay := time.Second*5\n+\tbegin := time.Now()\n+\tfmt.Printf(\"begin %v\\n\", begin)", "originalCommit": "9e277bbceea77117cabfddf114b01dd7f70ccd67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ3NTE2Mw==", "url": "https://github.com/apache/pulsar/pull/6023#discussion_r428475163", "bodyText": "replaced", "author": "snowcrumble", "createdAt": "2020-05-21T06:45:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3NjUxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3Njc0Ng==", "url": "https://github.com/apache/pulsar/pull/6023#discussion_r428176746", "bodyText": "Can we rename the topic name?", "author": "wolfstudy", "createdAt": "2020-05-20T17:14:02Z", "path": "pulsar-client-go/pulsar/producer_test.go", "diffHunk": "@@ -416,3 +416,71 @@ func TestProducer_SendAndGetMsgID(t *testing.T) {\n \t\tassert.NotNil(t, IsNil(msgID))\n \t}\n }\n+\n+func TestProducer_DelayMessage(t *testing.T) {\n+\tclient, err := NewClient(ClientOptions{\n+\t\tURL: \"pulsar://localhost:6650\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer client.Close()\n+\n+\ttopicName := \"test-send-with-message-id\"", "originalCommit": "9e277bbceea77117cabfddf114b01dd7f70ccd67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3NzM3Mg==", "url": "https://github.com/apache/pulsar/pull/6023#discussion_r428177372", "bodyText": "This topic name is the same as the topic name in another test case, in order to avoid test conflicts, please replace it", "author": "wolfstudy", "createdAt": "2020-05-20T17:15:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3Njc0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3Nzg5MQ==", "url": "https://github.com/apache/pulsar/pull/6023#discussion_r428177891", "bodyText": "func newTopicName() string {\n\treturn fmt.Sprintf(\"my-topic-%v\", time.Now().Nanosecond())\n}", "author": "wolfstudy", "createdAt": "2020-05-20T17:15:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3Njc0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ3MzkyMA==", "url": "https://github.com/apache/pulsar/pull/6023#discussion_r428473920", "bodyText": "ofcourse", "author": "snowcrumble", "createdAt": "2020-05-21T06:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3Njc0Ng=="}], "type": "inlineReview"}, {"oid": "7e8e973095d0c476cbd6309f35f73b0a23559a03", "url": "https://github.com/apache/pulsar/commit/7e8e973095d0c476cbd6309f35f73b0a23559a03", "message": "use t.Logf instead of fmt.Printf", "committedDate": "2020-05-21T06:44:44Z", "type": "commit"}, {"oid": "43ba33b225f6916a78cb04e82b4d5f2a63a75493", "url": "https://github.com/apache/pulsar/commit/43ba33b225f6916a78cb04e82b4d5f2a63a75493", "message": "Merge remote-tracking branch 'apache/master' into add-delay-message-for-go", "committedDate": "2020-06-02T04:12:20Z", "type": "commit"}]}