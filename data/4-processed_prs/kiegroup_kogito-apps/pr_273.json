{"pr_number": 273, "pr_title": "Kogito 2275 - trusty service uses persistence abstraction", "pr_createdAt": "2020-06-17T11:40:32Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/273", "timeline": [{"oid": "06a5900346f19c689e83c97b520a2f6580012899", "url": "https://github.com/kiegroup/kogito-apps/commit/06a5900346f19c689e83c97b520a2f6580012899", "message": "Create trustyCI.yml", "committedDate": "2020-05-26T12:43:09Z", "type": "commit"}, {"oid": "e28aaa2c0876b61441bec40203b1ca39d066630d", "url": "https://github.com/kiegroup/kogito-apps/commit/e28aaa2c0876b61441bec40203b1ca39d066630d", "message": "Update trustyCI.yml", "committedDate": "2020-05-26T12:52:33Z", "type": "commit"}, {"oid": "e64db78b9b86b86b39ad74e5ecb482c3738e29a7", "url": "https://github.com/kiegroup/kogito-apps/commit/e64db78b9b86b86b39ad74e5ecb482c3738e29a7", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-05-29T07:46:12Z", "type": "commit"}, {"oid": "4eedb7b29a4eb163eef6e08296b269f07f76a466", "url": "https://github.com/kiegroup/kogito-apps/commit/4eedb7b29a4eb163eef6e08296b269f07f76a466", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-06-04T08:25:27Z", "type": "commit"}, {"oid": "95a89856d1a0d04de27ce0517ddffb5c4edcf931", "url": "https://github.com/kiegroup/kogito-apps/commit/95a89856d1a0d04de27ce0517ddffb5c4edcf931", "message": "create storage abstraction", "committedDate": "2020-06-04T11:20:16Z", "type": "commit"}, {"oid": "16cf560065ac91a5ac1f16bba1c8bcdc4cf74645", "url": "https://github.com/kiegroup/kogito-apps/commit/16cf560065ac91a5ac1f16bba1c8bcdc4cf74645", "message": "Revert \"Update trustyCI.yml\"\n\nThis reverts commit e28aaa2c0876b61441bec40203b1ca39d066630d.", "committedDate": "2020-06-04T11:25:05Z", "type": "commit"}, {"oid": "936b6376ea9a67f5f518da57789f337476d860db", "url": "https://github.com/kiegroup/kogito-apps/commit/936b6376ea9a67f5f518da57789f337476d860db", "message": "Revert \"Create trustyCI.yml\"\n\nThis reverts commit 06a5900346f19c689e83c97b520a2f6580012899.", "committedDate": "2020-06-04T11:25:20Z", "type": "commit"}, {"oid": "279c3265eda41f15a9c7cab798fa0ce29f382dac", "url": "https://github.com/kiegroup/kogito-apps/commit/279c3265eda41f15a9c7cab798fa0ce29f382dac", "message": "Refactor infinispan query tests", "committedDate": "2020-06-04T11:37:17Z", "type": "commit"}, {"oid": "cc6d7ef238643c7de278daa337bd961ac2188671", "url": "https://github.com/kiegroup/kogito-apps/commit/cc6d7ef238643c7de278daa337bd961ac2188671", "message": "refactor infinispan query tests", "committedDate": "2020-06-04T11:42:25Z", "type": "commit"}, {"oid": "7296acfa97640c0727e5bad06413600b86176999", "url": "https://github.com/kiegroup/kogito-apps/commit/7296acfa97640c0727e5bad06413600b86176999", "message": "refactoring data-index-protobuf", "committedDate": "2020-06-04T12:31:11Z", "type": "commit"}, {"oid": "af94b7ee471b1eadf0752b76a089da3cd74560bf", "url": "https://github.com/kiegroup/kogito-apps/commit/af94b7ee471b1eadf0752b76a089da3cd74560bf", "message": "refactoring getProtobufCache", "committedDate": "2020-06-04T14:38:55Z", "type": "commit"}, {"oid": "1c3d2d9e1fb19d2e90cfb5551d9f0a755591875b", "url": "https://github.com/kiegroup/kogito-apps/commit/1c3d2d9e1fb19d2e90cfb5551d9f0a755591875b", "message": "refactoring Storage annotations", "committedDate": "2020-06-04T15:36:56Z", "type": "commit"}, {"oid": "093a0b152d2c75e54a1cddd069a84abbaf08da91", "url": "https://github.com/kiegroup/kogito-apps/commit/093a0b152d2c75e54a1cddd069a84abbaf08da91", "message": "fix pom", "committedDate": "2020-06-04T20:44:15Z", "type": "commit"}, {"oid": "4adfbf90c4509cfcea02c55c93f433d3bb1534ef", "url": "https://github.com/kiegroup/kogito-apps/commit/4adfbf90c4509cfcea02c55c93f433d3bb1534ef", "message": "Fix CacheService annotation", "committedDate": "2020-06-05T09:07:31Z", "type": "commit"}, {"oid": "a009b2bb0c9dfd0c2c836154291f3c8dd1ae9823", "url": "https://github.com/kiegroup/kogito-apps/commit/a009b2bb0c9dfd0c2c836154291f3c8dd1ae9823", "message": "fix integration tests", "committedDate": "2020-06-05T10:47:17Z", "type": "commit"}, {"oid": "ce65822cd90fc7c4ee5b556c9721237e4d55cbc2", "url": "https://github.com/kiegroup/kogito-apps/commit/ce65822cd90fc7c4ee5b556c9721237e4d55cbc2", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-06-05T11:06:46Z", "type": "commit"}, {"oid": "a1ed61cb0ef05836a574cd5b1f85a9adf3336ad0", "url": "https://github.com/kiegroup/kogito-apps/commit/a1ed61cb0ef05836a574cd5b1f85a9adf3336ad0", "message": "rename classes based on comments", "committedDate": "2020-06-05T11:59:21Z", "type": "commit"}, {"oid": "3968883c669a2efacd8cf5dbf3e8f1d0f0f60490", "url": "https://github.com/kiegroup/kogito-apps/commit/3968883c669a2efacd8cf5dbf3e8f1d0f0f60490", "message": "rename classes based on comments", "committedDate": "2020-06-05T12:04:28Z", "type": "commit"}, {"oid": "55a8847ce804a849380f4d2383215517f2b4ba6c", "url": "https://github.com/kiegroup/kogito-apps/commit/55a8847ce804a849380f4d2383215517f2b4ba6c", "message": "refactoring getProtobufCache and getProcessIdModelCache", "committedDate": "2020-06-05T13:26:11Z", "type": "commit"}, {"oid": "4e781ec386dd0cc0d11c3a9b1dd397beb10d8869", "url": "https://github.com/kiegroup/kogito-apps/commit/4e781ec386dd0cc0d11c3a9b1dd397beb10d8869", "message": "refactoring protobuf module", "committedDate": "2020-06-05T15:15:44Z", "type": "commit"}, {"oid": "05b9dd58c5d0bef3af6176e63629b57f3bf6a704", "url": "https://github.com/kiegroup/kogito-apps/commit/05b9dd58c5d0bef3af6176e63629b57f3bf6a704", "message": "rename methods according to comments", "committedDate": "2020-06-08T07:35:18Z", "type": "commit"}, {"oid": "a866ee207fdf049bf4e2455a571eb7ff1952c394", "url": "https://github.com/kiegroup/kogito-apps/commit/a866ee207fdf049bf4e2455a571eb7ff1952c394", "message": "add kogito storage commons readme", "committedDate": "2020-06-08T08:00:25Z", "type": "commit"}, {"oid": "5355eded0d7e654a6b4cba7fb0650cbc22138109", "url": "https://github.com/kiegroup/kogito-apps/commit/5355eded0d7e654a6b4cba7fb0650cbc22138109", "message": "rename parameters", "committedDate": "2020-06-08T12:52:13Z", "type": "commit"}, {"oid": "77939ad03565261e899cf5c652d31cc1289356bf", "url": "https://github.com/kiegroup/kogito-apps/commit/77939ad03565261e899cf5c652d31cc1289356bf", "message": "add trusty storage modules", "committedDate": "2020-06-08T13:30:41Z", "type": "commit"}, {"oid": "106bcee5a580feca60de3cf802faf1a76299aa3b", "url": "https://github.com/kiegroup/kogito-apps/commit/106bcee5a580feca60de3cf802faf1a76299aa3b", "message": "rename decision storage", "committedDate": "2020-06-08T13:50:09Z", "type": "commit"}, {"oid": "e08e47ff17554c39797935f9aa4dafaef3845f26", "url": "https://github.com/kiegroup/kogito-apps/commit/e08e47ff17554c39797935f9aa4dafaef3845f26", "message": "add licences", "committedDate": "2020-06-08T13:52:16Z", "type": "commit"}, {"oid": "37e12d443a0bb7966b623e7c3179ca0fae3da963", "url": "https://github.com/kiegroup/kogito-apps/commit/37e12d443a0bb7966b623e7c3179ca0fae3da963", "message": "use the trusty storage layer to retrieve executions", "committedDate": "2020-06-08T14:49:29Z", "type": "commit"}, {"oid": "f8ce33323b51866fb5a494aebef3832d3288c1fe", "url": "https://github.com/kiegroup/kogito-apps/commit/f8ce33323b51866fb5a494aebef3832d3288c1fe", "message": "fix readme", "committedDate": "2020-06-08T14:50:22Z", "type": "commit"}, {"oid": "70ca5e299c7bbd97ae8d5e671ee382ceac876962", "url": "https://github.com/kiegroup/kogito-apps/commit/70ca5e299c7bbd97ae8d5e671ee382ceac876962", "message": "move protobuf domain to api and remove unused imports", "committedDate": "2020-06-09T05:03:50Z", "type": "commit"}, {"oid": "fbb8c1c1804d76d600fb627601fc2a751c6750ac", "url": "https://github.com/kiegroup/kogito-apps/commit/fbb8c1c1804d76d600fb627601fc2a751c6750ac", "message": "Merge branch 'KOGITO-2326-storage-abstraction' into KOGITO-2275-trusty-storage", "committedDate": "2020-06-09T05:10:02Z", "type": "commit"}, {"oid": "74667b1bfadb3f5c49112e361a9f31842df2e17c", "url": "https://github.com/kiegroup/kogito-apps/commit/74667b1bfadb3f5c49112e361a9f31842df2e17c", "message": "add integration test", "committedDate": "2020-06-09T12:57:43Z", "type": "commit"}, {"oid": "2c6a4ecf3d48d2b891261ed6c637d8e8f11eb42f", "url": "https://github.com/kiegroup/kogito-apps/commit/2c6a4ecf3d48d2b891261ed6c637d8e8f11eb42f", "message": "refactoring getProtobufCache", "committedDate": "2020-06-09T13:58:50Z", "type": "commit"}, {"oid": "fb17921111a3f356b54d099c84f651c399bdf5d1", "url": "https://github.com/kiegroup/kogito-apps/commit/fb17921111a3f356b54d099c84f651c399bdf5d1", "message": "remove getProtobufCache old method", "committedDate": "2020-06-09T14:02:56Z", "type": "commit"}, {"oid": "bd29feb5a9429115e932299baf72b07ac3e5daf3", "url": "https://github.com/kiegroup/kogito-apps/commit/bd29feb5a9429115e932299baf72b07ac3e5daf3", "message": "remove getProtobufCache from DataIndexStorageManager, ProtobufService injected directly in protobuf manager", "committedDate": "2020-06-10T07:18:01Z", "type": "commit"}, {"oid": "67c1fe1e781ed9ba5ed592baf49c57f8dcfa9fc1", "url": "https://github.com/kiegroup/kogito-apps/commit/67c1fe1e781ed9ba5ed592baf49c57f8dcfa9fc1", "message": "Merge branch 'KOGITO-2326-storage-abstraction' into KOGITO-2275-trusty-storage", "committedDate": "2020-06-10T07:22:43Z", "type": "commit"}, {"oid": "8ec04ea04d9efec0271abdcf4ba692c76914a202", "url": "https://github.com/kiegroup/kogito-apps/commit/8ec04ea04d9efec0271abdcf4ba692c76914a202", "message": "Update kogito-storage-commons/kogito-storage-commons-infinispan/src/main/java/org/kie/kogito/storage/infinispan/cache/StorageImpl.java\n\nCo-authored-by: Cristiano Nicolai <cristiano.nicolai@gmail.com>", "committedDate": "2020-06-10T08:58:45Z", "type": "commit"}, {"oid": "56b8c818a0747418a69cae89ba8df1efa9e58362", "url": "https://github.com/kiegroup/kogito-apps/commit/56b8c818a0747418a69cae89ba8df1efa9e58362", "message": "add enum marshaller to be fixed", "committedDate": "2020-06-10T09:02:15Z", "type": "commit"}, {"oid": "b8f255dcbd20bd01d8860819ca5a90dafdf3c204", "url": "https://github.com/kiegroup/kogito-apps/commit/b8f255dcbd20bd01d8860819ca5a90dafdf3c204", "message": "update poms, rename kogito.data-index.storage.type, optimize imports", "committedDate": "2020-06-10T11:27:11Z", "type": "commit"}, {"oid": "09c6481fcae228bb515e131025c8e08998b31c77", "url": "https://github.com/kiegroup/kogito-apps/commit/09c6481fcae228bb515e131025c8e08998b31c77", "message": "Merge branch 'KOGITO-2326-storage-abstraction' of https://github.com/r00ta/kogito-apps into KOGITO-2326-storage-abstraction", "committedDate": "2020-06-10T11:30:37Z", "type": "commit"}, {"oid": "bcb056c6586eef781ac09ba67fad5886a59e3418", "url": "https://github.com/kiegroup/kogito-apps/commit/bcb056c6586eef781ac09ba67fad5886a59e3418", "message": "create conflict", "committedDate": "2020-06-10T11:32:58Z", "type": "commit"}, {"oid": "f1ae2c5863d2acaeac0861ca90869b0b48b4a16f", "url": "https://github.com/kiegroup/kogito-apps/commit/f1ae2c5863d2acaeac0861ca90869b0b48b4a16f", "message": "fix CacheImpl history", "committedDate": "2020-06-10T11:48:39Z", "type": "commit"}, {"oid": "7998143eea7ab6ec19f9a3457d4a7d3c317ab268", "url": "https://github.com/kiegroup/kogito-apps/commit/7998143eea7ab6ec19f9a3457d4a7d3c317ab268", "message": "commit changes", "committedDate": "2020-06-10T11:51:17Z", "type": "commit"}, {"oid": "1a86160b1314cf1d0eebc34f2f69fd9b1bd552b2", "url": "https://github.com/kiegroup/kogito-apps/commit/1a86160b1314cf1d0eebc34f2f69fd9b1bd552b2", "message": "create conflict", "committedDate": "2020-06-10T12:02:02Z", "type": "commit"}, {"oid": "906c4771e264406629a7f28d889e7c2b7bd6999f", "url": "https://github.com/kiegroup/kogito-apps/commit/906c4771e264406629a7f28d889e7c2b7bd6999f", "message": "recover CacheImpl history", "committedDate": "2020-06-10T12:05:59Z", "type": "commit"}, {"oid": "c7c7338817aede05af7d0d58d41b3a7f62f29828", "url": "https://github.com/kiegroup/kogito-apps/commit/c7c7338817aede05af7d0d58d41b3a7f62f29828", "message": "move to StorageImpl", "committedDate": "2020-06-10T12:07:52Z", "type": "commit"}, {"oid": "40b980c612dcea09d2185cf45f93709dacb93072", "url": "https://github.com/kiegroup/kogito-apps/commit/40b980c612dcea09d2185cf45f93709dacb93072", "message": "remove duplicated code", "committedDate": "2020-06-10T13:03:53Z", "type": "commit"}, {"oid": "a4f68f6173b43fc6d73a8c56898a5fd6dbcb9ce7", "url": "https://github.com/kiegroup/kogito-apps/commit/a4f68f6173b43fc6d73a8c56898a5fd6dbcb9ce7", "message": "create conflict", "committedDate": "2020-06-10T13:11:48Z", "type": "commit"}, {"oid": "1ec5a5a2a30448da89b8c364afc1fc50c6a24731", "url": "https://github.com/kiegroup/kogito-apps/commit/1ec5a5a2a30448da89b8c364afc1fc50c6a24731", "message": "remove StorageImpl without history", "committedDate": "2020-06-10T13:28:24Z", "type": "commit"}, {"oid": "90750c9cc73d9384d4ad311acf7d2f9306fa1f00", "url": "https://github.com/kiegroup/kogito-apps/commit/90750c9cc73d9384d4ad311acf7d2f9306fa1f00", "message": "add CacheImpl", "committedDate": "2020-06-10T13:28:50Z", "type": "commit"}, {"oid": "b2236ebed8f003f374043b12eda2b3663201e988", "url": "https://github.com/kiegroup/kogito-apps/commit/b2236ebed8f003f374043b12eda2b3663201e988", "message": "add CacheImpl", "committedDate": "2020-06-10T13:29:00Z", "type": "commit"}, {"oid": "eb7338fb58c693009f61e1fdb1727d52a715a38e", "url": "https://github.com/kiegroup/kogito-apps/commit/eb7338fb58c693009f61e1fdb1727d52a715a38e", "message": "update StorageImpl", "committedDate": "2020-06-10T13:29:28Z", "type": "commit"}, {"oid": "1bab731b435784816eeb62cc8c4e0401b7c3a629", "url": "https://github.com/kiegroup/kogito-apps/commit/1bab731b435784816eeb62cc8c4e0401b7c3a629", "message": "refactoring getDomainModelCache", "committedDate": "2020-06-10T14:33:11Z", "type": "commit"}, {"oid": "c944dfd312dbd1ae3fd173f819d97da5083c8348", "url": "https://github.com/kiegroup/kogito-apps/commit/c944dfd312dbd1ae3fd173f819d97da5083c8348", "message": "refactoring getDomainModelCache", "committedDate": "2020-06-10T15:07:15Z", "type": "commit"}, {"oid": "53b45befa614195b0cc82c44f7c3bb98e354a43f", "url": "https://github.com/kiegroup/kogito-apps/commit/53b45befa614195b0cc82c44f7c3bb98e354a43f", "message": "remove unused dependencies", "committedDate": "2020-06-11T07:18:24Z", "type": "commit"}, {"oid": "dd93797ed789c3af9c42a78cbadc83f1082f4a61", "url": "https://github.com/kiegroup/kogito-apps/commit/dd93797ed789c3af9c42a78cbadc83f1082f4a61", "message": "Update kogito-storage-commons/kogito-storage-commons-api/src/main/java/org/kie/kogito/storage/api/StorageService.java\n\nCo-authored-by: Cristiano Nicolai <cristiano.nicolai@gmail.com>", "committedDate": "2020-06-11T07:20:10Z", "type": "commit"}, {"oid": "636404b66c3da97642bd580aeabd8ad836571790", "url": "https://github.com/kiegroup/kogito-apps/commit/636404b66c3da97642bd580aeabd8ad836571790", "message": "Update data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/DataIndexStorageService.java\n\nCo-authored-by: Cristiano Nicolai <cristiano.nicolai@gmail.com>", "committedDate": "2020-06-11T07:20:48Z", "type": "commit"}, {"oid": "a0d2fe316cc9a82f3592650c61165562ad7003fc", "url": "https://github.com/kiegroup/kogito-apps/commit/a0d2fe316cc9a82f3592650c61165562ad7003fc", "message": "rename caches parameters", "committedDate": "2020-06-11T07:22:44Z", "type": "commit"}, {"oid": "d9aa40fc88152aab387e4ff0a95bdbaa45e6969b", "url": "https://github.com/kiegroup/kogito-apps/commit/d9aa40fc88152aab387e4ff0a95bdbaa45e6969b", "message": "rename kogito-storage-* with kogito-persistence-*", "committedDate": "2020-06-11T08:02:32Z", "type": "commit"}, {"oid": "cdff17386ec269cb159191b989025779e0725f74", "url": "https://github.com/kiegroup/kogito-apps/commit/cdff17386ec269cb159191b989025779e0725f74", "message": "remove kogito prefix from persistence modules", "committedDate": "2020-06-11T08:18:38Z", "type": "commit"}, {"oid": "86ffba1a88286e271d330d4ff60b4fb5d67bce0c", "url": "https://github.com/kiegroup/kogito-apps/commit/86ffba1a88286e271d330d4ff60b4fb5d67bce0c", "message": "Merge branch 'KOGITO-2326-storage-abstraction' into KOGITO-2275-trusty-storage", "committedDate": "2020-06-11T13:35:45Z", "type": "commit"}, {"oid": "04f910272bd9ae22c36fd59b90a3e9e3942455ac", "url": "https://github.com/kiegroup/kogito-apps/commit/04f910272bd9ae22c36fd59b90a3e9e3942455ac", "message": "rebase", "committedDate": "2020-06-11T13:42:58Z", "type": "commit"}, {"oid": "ea8ad0b20ddf2e13b2f35c46c902ffc45af105c9", "url": "https://github.com/kiegroup/kogito-apps/commit/ea8ad0b20ddf2e13b2f35c46c902ffc45af105c9", "message": "update marshallers", "committedDate": "2020-06-11T14:57:26Z", "type": "commit"}, {"oid": "0c4cb307ce880bb913e2f1d353b25ba858042a14", "url": "https://github.com/kiegroup/kogito-apps/commit/0c4cb307ce880bb913e2f1d353b25ba858042a14", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-2275-trusty-storage", "committedDate": "2020-06-15T06:58:35Z", "type": "commit"}, {"oid": "3090a3a3019c936455936205fbf941b93cb03304", "url": "https://github.com/kiegroup/kogito-apps/commit/3090a3a3019c936455936205fbf941b93cb03304", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-2326-storage-abstraction", "committedDate": "2020-06-15T07:00:00Z", "type": "commit"}, {"oid": "1d0f9ad2e4dec9023501761f1bf1338e68f26425", "url": "https://github.com/kiegroup/kogito-apps/commit/1d0f9ad2e4dec9023501761f1bf1338e68f26425", "message": "Merge branch 'KOGITO-2326-storage-abstraction' into KOGITO-2275-trusty-storage", "committedDate": "2020-06-15T07:05:52Z", "type": "commit"}, {"oid": "d4b0423bbbfb1ff0155bde0bdd44663903bde24a", "url": "https://github.com/kiegroup/kogito-apps/commit/d4b0423bbbfb1ff0155bde0bdd44663903bde24a", "message": "add integration test", "committedDate": "2020-06-15T08:44:49Z", "type": "commit"}, {"oid": "7de147dcbba8888e5fa97b3a47a93016f7eb175c", "url": "https://github.com/kiegroup/kogito-apps/commit/7de147dcbba8888e5fa97b3a47a93016f7eb175c", "message": "update readme", "committedDate": "2020-06-15T09:50:56Z", "type": "commit"}, {"oid": "54e3f7a5ff59169d7f0af7f27d87eb3719626fa2", "url": "https://github.com/kiegroup/kogito-apps/commit/54e3f7a5ff59169d7f0af7f27d87eb3719626fa2", "message": "remove unused ProtobufService in DataIndexStorageServiceImpl", "committedDate": "2020-06-15T12:07:41Z", "type": "commit"}, {"oid": "a026505361e799831474654fbc4aabce009844b0", "url": "https://github.com/kiegroup/kogito-apps/commit/a026505361e799831474654fbc4aabce009844b0", "message": "fix code smells", "committedDate": "2020-06-15T14:46:20Z", "type": "commit"}, {"oid": "e30ec6608bec55fba6797e5971c37111830111e5", "url": "https://github.com/kiegroup/kogito-apps/commit/e30ec6608bec55fba6797e5971c37111830111e5", "message": "Provide the parametrized type in AttributeFilter", "committedDate": "2020-06-15T14:53:16Z", "type": "commit"}, {"oid": "39d4447bb67aa711b2c4bc4825354da543007085", "url": "https://github.com/kiegroup/kogito-apps/commit/39d4447bb67aa711b2c4bc4825354da543007085", "message": "fix code smells", "committedDate": "2020-06-15T16:36:54Z", "type": "commit"}, {"oid": "100b0795df49018fcc69786ab60c7fe0b8124b3c", "url": "https://github.com/kiegroup/kogito-apps/commit/100b0795df49018fcc69786ab60c7fe0b8124b3c", "message": "fix code smells", "committedDate": "2020-06-15T20:23:30Z", "type": "commit"}, {"oid": "c4762c7a294fdee3f084518fd6aa50fc3b022743", "url": "https://github.com/kiegroup/kogito-apps/commit/c4762c7a294fdee3f084518fd6aa50fc3b022743", "message": "Merge branch 'KOGITO-2326-storage-abstraction' into KOGITO-2275-trusty-storage", "committedDate": "2020-06-16T08:00:57Z", "type": "commit"}, {"oid": "599517a8c825e3f8826b2e0a601c52f111dfb3d0", "url": "https://github.com/kiegroup/kogito-apps/commit/599517a8c825e3f8826b2e0a601c52f111dfb3d0", "message": "try enum marshaller", "committedDate": "2020-06-16T11:30:47Z", "type": "commit"}, {"oid": "63bcb5aa9edc423d3023b567c4a12205193a777c", "url": "https://github.com/kiegroup/kogito-apps/commit/63bcb5aa9edc423d3023b567c4a12205193a777c", "message": "refactoring infinispan resource test", "committedDate": "2020-06-16T15:31:11Z", "type": "commit"}, {"oid": "1faecb6fea9d57ca09266ae45806949549b9e033", "url": "https://github.com/kiegroup/kogito-apps/commit/1faecb6fea9d57ca09266ae45806949549b9e033", "message": "refactoring and implementation of getDecisionById method", "committedDate": "2020-06-17T09:20:05Z", "type": "commit"}, {"oid": "bfad2c3e2662c7998245275df6c4c5daa8040ad5", "url": "https://github.com/kiegroup/kogito-apps/commit/bfad2c3e2662c7998245275df6c4c5daa8040ad5", "message": "resolve conflicts", "committedDate": "2020-06-17T09:24:20Z", "type": "commit"}, {"oid": "6858ce6357ed860641f079d521fe9ba5ffae58ca", "url": "https://github.com/kiegroup/kogito-apps/commit/6858ce6357ed860641f079d521fe9ba5ffae58ca", "message": "add v1/executions/decisions/{executionId} endpoint with tests", "committedDate": "2020-06-17T11:36:27Z", "type": "commit"}, {"oid": "861eaebde3a84669370c5dd15c07f7d63c7e9590", "url": "https://github.com/kiegroup/kogito-apps/commit/861eaebde3a84669370c5dd15c07f7d63c7e9590", "message": "make tests public", "committedDate": "2020-06-17T11:42:04Z", "type": "commit"}, {"oid": "b679480ed564aecc6169404fe60df86e4a4c87b2", "url": "https://github.com/kiegroup/kogito-apps/commit/b679480ed564aecc6169404fe60df86e4a4c87b2", "message": "restore imports", "committedDate": "2020-06-17T11:42:52Z", "type": "commit"}, {"oid": "9a2556d7a8cba7b10458a4ccf2598e52c4117dc1", "url": "https://github.com/kiegroup/kogito-apps/commit/9a2556d7a8cba7b10458a4ccf2598e52c4117dc1", "message": "remove unused dependencies", "committedDate": "2020-06-17T11:52:49Z", "type": "commit"}, {"oid": "577664039d8ac7b4d99f6782e84bbe4e31440f1a", "url": "https://github.com/kiegroup/kogito-apps/commit/577664039d8ac7b4d99f6782e84bbe4e31440f1a", "message": "update pom", "committedDate": "2020-06-17T12:16:48Z", "type": "commit"}, {"oid": "dc08780f3e6bef266c87cdcfc2ead7d977d96216", "url": "https://github.com/kiegroup/kogito-apps/commit/dc08780f3e6bef266c87cdcfc2ead7d977d96216", "message": "rebase", "committedDate": "2020-06-18T08:40:46Z", "type": "commit"}, {"oid": "448d136db8f116bf1db5d2f3d55950b0fbddcdf1", "url": "https://github.com/kiegroup/kogito-apps/commit/448d136db8f116bf1db5d2f3d55950b0fbddcdf1", "message": "remove duplicated dependency", "committedDate": "2020-06-18T08:49:30Z", "type": "commit"}, {"oid": "597ff4b3f25ed7616047c6c12acae409d22f7500", "url": "https://github.com/kiegroup/kogito-apps/commit/597ff4b3f25ed7616047c6c12acae409d22f7500", "message": "refactoring", "committedDate": "2020-06-18T08:50:17Z", "type": "commit"}, {"oid": "dce400f53370b07cbe676ad44ec43ef5ca827858", "url": "https://github.com/kiegroup/kogito-apps/commit/dce400f53370b07cbe676ad44ec43ef5ca827858", "message": "fix pom", "committedDate": "2020-06-18T09:36:01Z", "type": "commit"}, {"oid": "538c6ad6b3fea89b6642cd1efca19fcdb21eeafe", "url": "https://github.com/kiegroup/kogito-apps/commit/538c6ad6b3fea89b6642cd1efca19fcdb21eeafe", "message": "run integration tests in pom and handle already existing elements with tests", "committedDate": "2020-06-18T10:06:01Z", "type": "commit"}, {"oid": "48115cb8a723b3f2b3589963a92f00d79d2d6072", "url": "https://github.com/kiegroup/kogito-apps/commit/48115cb8a723b3f2b3589963a92f00d79d2d6072", "message": "improve tests for non-existing decisions", "committedDate": "2020-06-18T12:15:35Z", "type": "commit"}, {"oid": "1b9da9393067c686bb5b59eedf41752bc38e888d", "url": "https://github.com/kiegroup/kogito-apps/commit/1b9da9393067c686bb5b59eedf41752bc38e888d", "message": "fix test", "committedDate": "2020-06-18T12:17:29Z", "type": "commit"}, {"oid": "07913931b150d926873916a9b33973f6d4297952", "url": "https://github.com/kiegroup/kogito-apps/commit/07913931b150d926873916a9b33973f6d4297952", "message": "optimize code quality", "committedDate": "2020-06-18T12:20:19Z", "type": "commit"}, {"oid": "8d9781c2f097b64bc095a3f7aeabe796b8d44185", "url": "https://github.com/kiegroup/kogito-apps/commit/8d9781c2f097b64bc095a3f7aeabe796b8d44185", "message": "fix tests", "committedDate": "2020-06-19T11:31:23Z", "type": "commit"}, {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44", "url": "https://github.com/kiegroup/kogito-apps/commit/97a619f94282ce22a979cbb1c4811bb3c8e84d44", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-2275-trusty-storage", "committedDate": "2020-06-19T13:36:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1NzUyNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443157524", "bodyText": "Is there any reason to use context classloader \"Thread.currentThread().getContextClassLoader()\" instead of \"this.getClass().getResourceAsStream()\".", "author": "jiripetrlik", "createdAt": "2020-06-20T20:25:25Z", "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/ProtostreamProducer.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.infinispan.protostream.FileDescriptorSource;\n+import org.infinispan.protostream.MessageMarshaller;\n+\n+@ApplicationScoped\n+public class ProtostreamProducer {\n+\n+    @Inject\n+    ObjectMapper mapper;\n+\n+    @Produces\n+    FileDescriptorSource kogitoTypesDescriptor() throws IOException {\n+        FileDescriptorSource source = new FileDescriptorSource();\n+        source.addProtoFile(\"decision.proto\", Thread.currentThread().getContextClassLoader().getResourceAsStream(\"META-INF/decision.proto\"));", "originalCommit": "97a619f94282ce22a979cbb1c4811bb3c8e84d44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM5NDIwMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443394203", "bodyText": "Hi, the equivalent code would be this.getClass().getClassLoader().getResourceAsStream(\"META-INF/decision.proto\")). TCCL is in general preferred, but in this case it's not a big deal (https://access.redhat.com/solutions/3097731). lmkwyt", "author": "r00ta", "createdAt": "2020-06-22T08:24:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1NzUyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQzMTQ2OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443431469", "bodyText": "@r00ta\nI agree that this is a detail. But if I understand correctly the code we want to load \"META-INF/decision.proto\" is in the same jar as class and we do not expect that user will change this file in his deployment. Therefore I expect we want to use the same classloader as our class do.\nHowever, I understand that this is only a detail and we will probably never do Wildfly module or something from this code. So, I have no strong opinion on this.", "author": "jiripetrlik", "createdAt": "2020-06-22T09:28:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1NzUyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU1MjkxOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443552919", "bodyText": "For the record, fine for me to review this usage but if we decide to change, please update this too \n  \n    \n      kogito-apps/data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/ProtostreamProducer.java\n    \n    \n        Lines 35 to 36\n      in\n      3604788\n    \n    \n    \n    \n\n        \n          \n           source.addProtoFile(KOGITO_INDEX_PROTO, Thread.currentThread().getContextClassLoader().getResourceAsStream(\"META-INF/kogito-index.proto\")); \n        \n\n        \n          \n           source.addProtoFile(KOGITO_TYPES_PROTO, Thread.currentThread().getContextClassLoader().getResourceAsStream(\"kogito-types.proto\"));", "author": "danielezonca", "createdAt": "2020-06-22T13:21:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1NzUyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA2NDMxNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r444064316", "bodyText": "ok, If you agree I would change it for trusty in the current PR, and then in another one I'll change it for the data-index", "author": "r00ta", "createdAt": "2020-06-23T08:48:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1NzUyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA2NTI0NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r444065244", "bodyText": "To be honest it is fine for me to stay with the current code, I just mentioned that the same strategy is used in data-index so if we will change, we should update that code too. :)", "author": "danielezonca", "createdAt": "2020-06-23T08:49:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1NzUyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE2NTgzMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r444165830", "bodyText": "Also from my side I think we can stay with the current implementation.", "author": "r00ta", "createdAt": "2020-06-23T11:54:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1NzUyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc4MDY2Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r444780667", "bodyText": "Ok, I have no problem with it.", "author": "jiripetrlik", "createdAt": "2020-06-24T09:54:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1NzUyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1Nzc0Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443157743", "bodyText": "There is only a pom in this module. I would suggest to create Mongo implementation in a separate PR. By creating an empty Mongo module we probably make a false assumption that we implement it.", "author": "jiripetrlik", "createdAt": "2020-06-20T20:28:46Z", "path": "trusty/trusty-storage/trusty-storage-mongo/pom.xml", "diffHunk": "@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "originalCommit": "97a619f94282ce22a979cbb1c4811bb3c8e84d44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM1OTg5MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443359891", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-06-22T07:17:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1Nzc0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1Nzg4OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443157888", "bodyText": "Please add missing license header.", "author": "jiripetrlik", "createdAt": "2020-06-20T20:31:02Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/mocks/StorageImplMock.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package org.kie.kogito.trusty.service.mocks;", "originalCommit": "97a619f94282ce22a979cbb1c4811bb3c8e84d44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1Nzk0NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443157945", "bodyText": "Please add missing license header.", "author": "jiripetrlik", "createdAt": "2020-06-20T20:31:58Z", "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/ProtostreamProducer.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.kie.kogito.trusty.storage.infinispan;", "originalCommit": "97a619f94282ce22a979cbb1c4811bb3c8e84d44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODA0OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158049", "bodyText": "Missing license header.", "author": "jiripetrlik", "createdAt": "2020-06-20T20:33:52Z", "path": "trusty/trusty-storage/trusty-storage-api/src/main/java/org/kie/kogito/trusty/storage/api/TrustyStorageServiceImpl.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.kie.kogito.trusty.storage.api;", "originalCommit": "97a619f94282ce22a979cbb1c4811bb3c8e84d44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODA3NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158075", "bodyText": "Missing license header.", "author": "jiripetrlik", "createdAt": "2020-06-20T20:34:21Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/api/DecisionApiV1.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.kie.kogito.trusty.service.api;", "originalCommit": "97a619f94282ce22a979cbb1c4811bb3c8e84d44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODMwMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158300", "bodyText": "I would suggest to not use a capital letter as the first letter of the method.  Also do not use underline.", "author": "jiripetrlik", "createdAt": "2020-06-20T20:37:50Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceTest.java", "diffHunk": "@@ -16,6 +16,92 @@\n \n package org.kie.kogito.trusty.service;\n \n+import java.time.OffsetDateTime;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.InjectMock;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.query.Query;\n+import org.kie.kogito.persistence.infinispan.cache.StorageImpl;\n+import org.kie.kogito.trusty.service.mocks.StorageImplMock;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@QuarkusTest\n public class TrustyServiceTest {\n \n+    @Inject\n+    TrustyService trustyService;\n+\n+    @InjectMock\n+    TrustyStorageService storageService;\n+\n+    @Test\n+    void GivenADecision_WhenStoreDecisionIsCalled_ThenNoExceptionsAreThrown() {", "originalCommit": "97a619f94282ce22a979cbb1c4811bb3c8e84d44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODMwNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158304", "bodyText": "I would suggest to not use a capital letter as the first letter of the method. Also do not use underline.", "author": "jiripetrlik", "createdAt": "2020-06-20T20:37:56Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceTest.java", "diffHunk": "@@ -16,6 +16,92 @@\n \n package org.kie.kogito.trusty.service;\n \n+import java.time.OffsetDateTime;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.InjectMock;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.query.Query;\n+import org.kie.kogito.persistence.infinispan.cache.StorageImpl;\n+import org.kie.kogito.trusty.service.mocks.StorageImplMock;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@QuarkusTest\n public class TrustyServiceTest {\n \n+    @Inject\n+    TrustyService trustyService;\n+\n+    @InjectMock\n+    TrustyStorageService storageService;\n+\n+    @Test\n+    void GivenADecision_WhenStoreDecisionIsCalled_ThenNoExceptionsAreThrown() {\n+        Decision decision = new Decision();\n+        Storage storageMock = mock(Storage.class);\n+        when(storageMock.put(any(Object.class), any(Object.class))).thenReturn(decision);\n+\n+        when(storageService.getDecisionsStorage()).thenReturn(storageMock);\n+        Assertions.assertDoesNotThrow(() -> trustyService.storeDecision(\"test\", decision));\n+    }\n+\n+    @Test\n+    void GivenADecision_WhenADecisionIsStoredAndRetrieved_ThenTheOriginalObjectIsReturned() {", "originalCommit": "97a619f94282ce22a979cbb1c4811bb3c8e84d44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODMxMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158310", "bodyText": "I would suggest to not use a capital letter as the first letter of the method.  Also do not use underline.", "author": "jiripetrlik", "createdAt": "2020-06-20T20:38:03Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceTest.java", "diffHunk": "@@ -16,6 +16,92 @@\n \n package org.kie.kogito.trusty.service;\n \n+import java.time.OffsetDateTime;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.InjectMock;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.query.Query;\n+import org.kie.kogito.persistence.infinispan.cache.StorageImpl;\n+import org.kie.kogito.trusty.service.mocks.StorageImplMock;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@QuarkusTest\n public class TrustyServiceTest {\n \n+    @Inject\n+    TrustyService trustyService;\n+\n+    @InjectMock\n+    TrustyStorageService storageService;\n+\n+    @Test\n+    void GivenADecision_WhenStoreDecisionIsCalled_ThenNoExceptionsAreThrown() {\n+        Decision decision = new Decision();\n+        Storage storageMock = mock(Storage.class);\n+        when(storageMock.put(any(Object.class), any(Object.class))).thenReturn(decision);\n+\n+        when(storageService.getDecisionsStorage()).thenReturn(storageMock);\n+        Assertions.assertDoesNotThrow(() -> trustyService.storeDecision(\"test\", decision));\n+    }\n+\n+    @Test\n+    void GivenADecision_WhenADecisionIsStoredAndRetrieved_ThenTheOriginalObjectIsReturned() {\n+        String executionId = \"executionId\";\n+        Decision decision = new Decision();\n+        decision.setExecutionId(executionId);\n+\n+        Query queryMock = mock(Query.class);\n+        when(queryMock.filter(any(List.class))).thenReturn(queryMock);\n+        when(queryMock.limit(any(Integer.class))).thenReturn(queryMock);\n+        when(queryMock.offset(any(Integer.class))).thenReturn(queryMock);\n+        when(queryMock.execute()).thenReturn(List.of(decision));\n+\n+        Storage storageMock = mock(Storage.class);\n+        when(storageMock.put(eq(executionId), any(Object.class))).thenReturn(decision);\n+        when(storageMock.containsKey(eq(executionId))).thenReturn(false);\n+        when(storageMock.query()).thenReturn(queryMock);\n+\n+        when(storageService.getDecisionsStorage()).thenReturn(storageMock);\n+\n+        trustyService.storeDecision(\"executionId\", decision);\n+\n+        List<Execution> result = trustyService.getExecutionHeaders(OffsetDateTime.now().minusDays(1), OffsetDateTime.now(), 100, 0, \"\");\n+\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(decision.getExecutionId(), result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    void GivenADecision_WhenADecisionIsStoredAndRetrievedById_ThenTheOriginalObjectIsReturned() {", "originalCommit": "97a619f94282ce22a979cbb1c4811bb3c8e84d44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODQyMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158420", "bodyText": "I would suggest to not use a capital letter as the first letter of the method. Also do not use underline.", "author": "jiripetrlik", "createdAt": "2020-06-20T20:40:09Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceIT.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.kie.kogito.trusty.service;\n+\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+\n+@QuarkusTest\n+@QuarkusTestResource(TrustyInfinispanServerTestResource.class)\n+public class TrustyServiceIT {\n+\n+    @Inject\n+    TrustyService trustyService;\n+\n+    @Inject\n+    TrustyStorageService trustyStorageService;\n+\n+    @BeforeEach\n+    public void setup() {\n+        trustyStorageService.getDecisionsStorage().clear();\n+    }\n+\n+    @Test\n+    public void testStoreAndRetrieveExecution() {\n+        storeExecution(\"myExecution\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692957000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692959000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenTwoExecutions_WhenTheQueryExcludesOneExecution_ThenOnlyOneExecutionIsReturned() {\n+        storeExecution(\"myExecution\", 1591692950000L);\n+        storeExecution(\"executionId2\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692940000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692955000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenTwoExecutions_WhenThePrefixIsUsed_ThenOnlyOneExecutionIsReturned() {\n+        storeExecution(\"myExecution\", 1591692950000L);\n+        storeExecution(\"executionId2\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692940000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692959000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"my\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenAnExecution_WhenGetDecisionByIdIsCalled_ThenTheExecutionIsReturned() {", "originalCommit": "97a619f94282ce22a979cbb1c4811bb3c8e84d44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODQyNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158426", "bodyText": "I would suggest to not use a capital letter as the first letter of the method. Also do not use underline.", "author": "jiripetrlik", "createdAt": "2020-06-20T20:40:14Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceIT.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.kie.kogito.trusty.service;\n+\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+\n+@QuarkusTest\n+@QuarkusTestResource(TrustyInfinispanServerTestResource.class)\n+public class TrustyServiceIT {\n+\n+    @Inject\n+    TrustyService trustyService;\n+\n+    @Inject\n+    TrustyStorageService trustyStorageService;\n+\n+    @BeforeEach\n+    public void setup() {\n+        trustyStorageService.getDecisionsStorage().clear();\n+    }\n+\n+    @Test\n+    public void testStoreAndRetrieveExecution() {\n+        storeExecution(\"myExecution\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692957000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692959000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenTwoExecutions_WhenTheQueryExcludesOneExecution_ThenOnlyOneExecutionIsReturned() {\n+        storeExecution(\"myExecution\", 1591692950000L);\n+        storeExecution(\"executionId2\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692940000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692955000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenTwoExecutions_WhenThePrefixIsUsed_ThenOnlyOneExecutionIsReturned() {\n+        storeExecution(\"myExecution\", 1591692950000L);\n+        storeExecution(\"executionId2\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692940000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692959000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"my\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenAnExecution_WhenGetDecisionByIdIsCalled_ThenTheExecutionIsReturned() {\n+        String executionId = \"myExecution\";\n+        storeExecution(executionId, 1591692950000L);\n+\n+        Decision result = trustyService.getDecisionById(executionId);\n+        Assertions.assertEquals(executionId, result.getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenADuplicatedDecision_WhenTheDecisionIsStored_ThenAnExceptionIsRaised() {", "originalCommit": "97a619f94282ce22a979cbb1c4811bb3c8e84d44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODQzMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158431", "bodyText": "I would suggest to not use a capital letter as the first letter of the method. Also do not use underline.", "author": "jiripetrlik", "createdAt": "2020-06-20T20:40:21Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceIT.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.kie.kogito.trusty.service;\n+\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+\n+@QuarkusTest\n+@QuarkusTestResource(TrustyInfinispanServerTestResource.class)\n+public class TrustyServiceIT {\n+\n+    @Inject\n+    TrustyService trustyService;\n+\n+    @Inject\n+    TrustyStorageService trustyStorageService;\n+\n+    @BeforeEach\n+    public void setup() {\n+        trustyStorageService.getDecisionsStorage().clear();\n+    }\n+\n+    @Test\n+    public void testStoreAndRetrieveExecution() {\n+        storeExecution(\"myExecution\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692957000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692959000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenTwoExecutions_WhenTheQueryExcludesOneExecution_ThenOnlyOneExecutionIsReturned() {\n+        storeExecution(\"myExecution\", 1591692950000L);\n+        storeExecution(\"executionId2\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692940000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692955000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenTwoExecutions_WhenThePrefixIsUsed_ThenOnlyOneExecutionIsReturned() {\n+        storeExecution(\"myExecution\", 1591692950000L);\n+        storeExecution(\"executionId2\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692940000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692959000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"my\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenAnExecution_WhenGetDecisionByIdIsCalled_ThenTheExecutionIsReturned() {\n+        String executionId = \"myExecution\";\n+        storeExecution(executionId, 1591692950000L);\n+\n+        Decision result = trustyService.getDecisionById(executionId);\n+        Assertions.assertEquals(executionId, result.getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenADuplicatedDecision_WhenTheDecisionIsStored_ThenAnExceptionIsRaised() {\n+        String executionId = \"myExecution\";\n+        storeExecution(executionId, 1591692950000L);\n+        Assertions.assertThrows(IllegalArgumentException.class, () -> storeExecution(executionId, 1591692950000L));\n+    }\n+\n+    @Test\n+    public void GivenNoExecutions_WhenADecisionIsRetrieved_ThenAnExceptionIsRaised() {", "originalCommit": "97a619f94282ce22a979cbb1c4811bb3c8e84d44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODQ1MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158451", "bodyText": "I would suggest to not use a capital letter as the first letter of the method. Also do not use underline.", "author": "jiripetrlik", "createdAt": "2020-06-20T20:40:35Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceIT.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.kie.kogito.trusty.service;\n+\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+\n+@QuarkusTest\n+@QuarkusTestResource(TrustyInfinispanServerTestResource.class)\n+public class TrustyServiceIT {\n+\n+    @Inject\n+    TrustyService trustyService;\n+\n+    @Inject\n+    TrustyStorageService trustyStorageService;\n+\n+    @BeforeEach\n+    public void setup() {\n+        trustyStorageService.getDecisionsStorage().clear();\n+    }\n+\n+    @Test\n+    public void testStoreAndRetrieveExecution() {\n+        storeExecution(\"myExecution\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692957000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692959000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenTwoExecutions_WhenTheQueryExcludesOneExecution_ThenOnlyOneExecutionIsReturned() {", "originalCommit": "97a619f94282ce22a979cbb1c4811bb3c8e84d44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODQ2OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158468", "bodyText": "I would suggest to not use a capital letter as the first letter of the method. Also do not use underline.", "author": "jiripetrlik", "createdAt": "2020-06-20T20:40:42Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceIT.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.kie.kogito.trusty.service;\n+\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+\n+@QuarkusTest\n+@QuarkusTestResource(TrustyInfinispanServerTestResource.class)\n+public class TrustyServiceIT {\n+\n+    @Inject\n+    TrustyService trustyService;\n+\n+    @Inject\n+    TrustyStorageService trustyStorageService;\n+\n+    @BeforeEach\n+    public void setup() {\n+        trustyStorageService.getDecisionsStorage().clear();\n+    }\n+\n+    @Test\n+    public void testStoreAndRetrieveExecution() {\n+        storeExecution(\"myExecution\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692957000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692959000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenTwoExecutions_WhenTheQueryExcludesOneExecution_ThenOnlyOneExecutionIsReturned() {\n+        storeExecution(\"myExecution\", 1591692950000L);\n+        storeExecution(\"executionId2\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692940000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692955000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenTwoExecutions_WhenThePrefixIsUsed_ThenOnlyOneExecutionIsReturned() {", "originalCommit": "97a619f94282ce22a979cbb1c4811bb3c8e84d44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODYzNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158636", "bodyText": "License header is missing.", "author": "jiripetrlik", "createdAt": "2020-06-20T20:43:31Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceIT.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.kie.kogito.trusty.service;", "originalCommit": "97a619f94282ce22a979cbb1c4811bb3c8e84d44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODY1Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158652", "bodyText": "License header is missing.", "author": "jiripetrlik", "createdAt": "2020-06-20T20:43:45Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyInfinispanServerTestResource.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.kie.kogito.trusty.service;", "originalCommit": "97a619f94282ce22a979cbb1c4811bb3c8e84d44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODY3NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158674", "bodyText": "License header is missing.", "author": "jiripetrlik", "createdAt": "2020-06-20T20:44:03Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/DecisionsApiV1.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.kie.kogito.trusty.service.api;", "originalCommit": "97a619f94282ce22a979cbb1c4811bb3c8e84d44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1OTA2Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443159062", "bodyText": "It seems that this logger is not used.", "author": "jiripetrlik", "createdAt": "2020-06-20T20:50:54Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/DecisionsApiV1.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.kie.kogito.trusty.service.api;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.eclipse.microprofile.openapi.annotations.Operation;\n+import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;\n+import org.eclipse.microprofile.openapi.annotations.media.Content;\n+import org.eclipse.microprofile.openapi.annotations.media.Schema;\n+import org.eclipse.microprofile.openapi.annotations.parameters.Parameter;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;\n+import org.jboss.resteasy.annotations.jaxrs.PathParam;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Path(\"v1/executions/decisions\")\n+public class DecisionsApiV1 {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DecisionsApiV1.class);", "originalCommit": "97a619f94282ce22a979cbb1c4811bb3c8e84d44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1OTE5NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443159194", "bodyText": "MessageMarshaller is deprecated according to Sonar cloud.", "author": "jiripetrlik", "createdAt": "2020-06-20T20:53:11Z", "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/DecisionMarshaller.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.infinispan.protostream.MessageMarshaller;\n+import org.kie.kogito.persistence.infinispan.protostream.AbstractMarshaller;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.ExecutionTypeEnum;\n+\n+public class DecisionMarshaller extends AbstractMarshaller implements MessageMarshaller<Decision> {", "originalCommit": "97a619f94282ce22a979cbb1c4811bb3c8e84d44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM5NzIzMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443397233", "bodyText": "Yeah, I know. Currently the documentation of infinispan still uses it (https://infinispan.org/docs/dev/titles/developing/developing.html), and this is currently what we do in the data-index (https://github.com/kiegroup/kogito-apps/search?q=MessageMarshaller&unscoped_q=MessageMarshaller). I'll look for an alternative", "author": "r00ta", "createdAt": "2020-06-22T08:29:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1OTE5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQwODI3Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443408273", "bodyText": "Apparently this is the only method to create a custom marshaller when it is not possible to annotate the class that has to be stored (in this case Decision). As a matter of facts, the idea is that Decision is in the api module and it is not infinispan specific. I'll ping the infinispan team to understand if there is an alternative", "author": "r00ta", "createdAt": "2020-06-22T08:48:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1OTE5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQxNzAwOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443417009", "bodyText": "Unfortunately, this feature still has to be implemented https://issues.redhat.com/browse/IPROTO-137 . lmkwyt @jiripetrlik", "author": "r00ta", "createdAt": "2020-06-22T09:03:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1OTE5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQyNDU1OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443424558", "bodyText": "@r00ta\nHello, thank you for quick reply! I think we can keep deprecated interface for now and comment it with TODO and link to the https://issues.redhat.com/browse/IPROTO-137. Once IPROTO-137 is finished we can decide what to do about it.", "author": "jiripetrlik", "createdAt": "2020-06-22T09:16:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1OTE5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU1MzUzOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443553538", "bodyText": "@r00ta\nCan you please create a KOGITO ticket (unassigned is fine) to remove the usages of this method so we can track?", "author": "danielezonca", "createdAt": "2020-06-22T13:22:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1OTE5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA1OTczNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r444059736", "bodyText": "@danielezonca @jiripetrlik here it is https://issues.redhat.com/browse/KOGITO-2517", "author": "r00ta", "createdAt": "2020-06-23T08:40:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1OTE5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1OTIxNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443159216", "bodyText": "Missing license header.", "author": "jiripetrlik", "createdAt": "2020-06-20T20:53:29Z", "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/DecisionMarshaller.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.kie.kogito.trusty.storage.infinispan;", "originalCommit": "97a619f94282ce22a979cbb1c4811bb3c8e84d44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1OTI3Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443159276", "bodyText": "MessageMarshaller is deprecated according to Sonar cloud.", "author": "jiripetrlik", "createdAt": "2020-06-20T20:54:33Z", "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/ProtostreamProducer.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.infinispan.protostream.FileDescriptorSource;\n+import org.infinispan.protostream.MessageMarshaller;\n+\n+@ApplicationScoped\n+public class ProtostreamProducer {\n+\n+    @Inject\n+    ObjectMapper mapper;\n+\n+    @Produces\n+    FileDescriptorSource kogitoTypesDescriptor() throws IOException {\n+        FileDescriptorSource source = new FileDescriptorSource();\n+        source.addProtoFile(\"decision.proto\", Thread.currentThread().getContextClassLoader().getResourceAsStream(\"META-INF/decision.proto\"));\n+        return source;\n+    }\n+\n+    @Produces\n+    MessageMarshaller decisionMarshaller() {", "originalCommit": "97a619f94282ce22a979cbb1c4811bb3c8e84d44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0d10a2a8e7375518f6c3699b66107fc820616953", "url": "https://github.com/kiegroup/kogito-apps/commit/0d10a2a8e7375518f6c3699b66107fc820616953", "message": "add licence headers, rename tests, optimize imports, remove empty mongo module", "committedDate": "2020-06-22T07:16:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA4ODIxNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r442088216", "bodyText": "Is this file needed?", "author": "danielezonca", "createdAt": "2020-06-18T09:18:33Z", "path": "trusty/trusty-service/src/main/resources/META-INF/kogito-cache-default.xml", "diffHunk": "@@ -0,0 +1,14 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "originalCommit": "597ff4b3f25ed7616047c6c12acae409d22f7500", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwNjQxMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443606411", "bodyText": "Yes, it is needed by \n  \n    \n      kogito-apps/persistence-commons/persistence-commons-infinispan/src/main/java/org/kie/kogito/persistence/infinispan/cache/InfinispanCacheManager.java\n    \n    \n         Line 97\n      in\n      a57350f\n    \n    \n    \n    \n\n        \n          \n           RemoteCache<K, V> cache = manager.administration().getOrCreateCache(name, new KogitoCacheDefaultConfiguration(name)); \n        \n    \n  \n\n . But actually it would make sense to move it to trusty-persistence-infinispan, wdyt?", "author": "r00ta", "createdAt": "2020-06-22T14:36:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA4ODIxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY4ODk4Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443688987", "bodyText": "Yes it should be better \ud83d\udc4d", "author": "danielezonca", "createdAt": "2020-06-22T16:38:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA4ODIxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ0MjYyMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443442621", "bodyText": "Can you move strings to a constant class?", "author": "danielezonca", "createdAt": "2020-06-22T09:48:43Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/TrustyService.java", "diffHunk": "@@ -17,25 +17,50 @@\n package org.kie.kogito.trusty.service;\n \n import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n import java.util.List;\n \n import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n \n-import org.jboss.resteasy.spi.NotImplementedYetException;\n-import org.kie.kogito.trusty.service.models.Execution;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.query.AttributeFilter;\n+import org.kie.kogito.persistence.api.query.QueryFilterFactory;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n \n @ApplicationScoped\n public class TrustyService implements ITrustyService {\n \n+    @Inject\n+    TrustyStorageService storageService;\n+\n     @Override\n     public List<Execution> getExecutionHeaders(OffsetDateTime from, OffsetDateTime to, int limit, int offset, String prefix) {\n-        throw new NotImplementedYetException(\"Not implemented yet.\");\n+        Storage<String, Decision> storage = storageService.getDecisionsStorage();\n+        List<AttributeFilter<?>> filters = new ArrayList<>();\n+        filters.add(QueryFilterFactory.like(\"executionId\", prefix + \"*\"));\n+        filters.add(QueryFilterFactory.greaterThanEqual(\"executionTimestamp\", from.toInstant().toEpochMilli()));\n+        filters.add(QueryFilterFactory.lessThanEqual(\"executionTimestamp\", to.toInstant().toEpochMilli()));", "originalCommit": "0d10a2a8e7375518f6c3699b66107fc820616953", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA1MjQ1OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r444052459", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-06-23T08:29:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ0MjYyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ0MzE2NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443443165", "bodyText": "Are you sure of this behavior? Don't we want to support update?", "author": "danielezonca", "createdAt": "2020-06-22T09:49:43Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/TrustyService.java", "diffHunk": "@@ -17,25 +17,50 @@\n package org.kie.kogito.trusty.service;\n \n import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n import java.util.List;\n \n import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n \n-import org.jboss.resteasy.spi.NotImplementedYetException;\n-import org.kie.kogito.trusty.service.models.Execution;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.query.AttributeFilter;\n+import org.kie.kogito.persistence.api.query.QueryFilterFactory;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n \n @ApplicationScoped\n public class TrustyService implements ITrustyService {\n \n+    @Inject\n+    TrustyStorageService storageService;\n+\n     @Override\n     public List<Execution> getExecutionHeaders(OffsetDateTime from, OffsetDateTime to, int limit, int offset, String prefix) {\n-        throw new NotImplementedYetException(\"Not implemented yet.\");\n+        Storage<String, Decision> storage = storageService.getDecisionsStorage();\n+        List<AttributeFilter<?>> filters = new ArrayList<>();\n+        filters.add(QueryFilterFactory.like(\"executionId\", prefix + \"*\"));\n+        filters.add(QueryFilterFactory.greaterThanEqual(\"executionTimestamp\", from.toInstant().toEpochMilli()));\n+        filters.add(QueryFilterFactory.lessThanEqual(\"executionTimestamp\", to.toInstant().toEpochMilli()));\n+        return new ArrayList<>(storage.query().limit(limit).offset(offset).filter(filters).execute());\n+    }\n+\n+    @Override\n+    public Decision getDecisionById(String executionId) {\n+        Storage<String, Decision> storage = storageService.getDecisionsStorage();\n+        if (!storage.containsKey(executionId)) {\n+            throw new IllegalArgumentException(String.format(\"A decision with ID %s does not exist in the storage.\", executionId));\n+        }\n+        return storage.get(executionId);\n     }\n \n     @Override\n-    public void storeExecution(String executionId, Execution execution) {\n-        throw new NotImplementedYetException(\"Not implemented yet.\");\n+    public void storeDecision(String executionId, Decision decision) {\n+        Storage<String, Decision> storage = storageService.getDecisionsStorage();\n+        if (storage.containsKey(executionId)) {\n+            throw new IllegalArgumentException(String.format(\"A decision with ID %s is already present in the storage.\", executionId));\n+        }", "originalCommit": "0d10a2a8e7375518f6c3699b66107fc820616953", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU2MzAxMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443563011", "bodyText": "@danielezonca Personally, for the update operation I would create another method (when it will be needed). I think we should not overwrite items in the storage by default, lmkwyt", "author": "r00ta", "createdAt": "2020-06-22T13:36:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ0MzE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE1OTMwMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r444159303", "bodyText": "I've implemented the updateDecision method as agreeded by phone call", "author": "r00ta", "createdAt": "2020-06-23T11:41:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ0MzE2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ0NTIxNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443445217", "bodyText": "I would prefer to get error message from ex.getMessage() otherwise it is possible to \"hide\" the real error message with this new string", "author": "danielezonca", "createdAt": "2020-06-22T09:53:11Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/DecisionsApiV1.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.api;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.eclipse.microprofile.openapi.annotations.Operation;\n+import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;\n+import org.eclipse.microprofile.openapi.annotations.media.Content;\n+import org.eclipse.microprofile.openapi.annotations.media.Schema;\n+import org.eclipse.microprofile.openapi.annotations.parameters.Parameter;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;\n+import org.jboss.resteasy.annotations.jaxrs.PathParam;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+\n+@Path(\"v1/executions/decisions\")\n+public class DecisionsApiV1 {\n+\n+    @Inject\n+    ITrustyService trustyService;\n+\n+    @GET\n+    @Path(\"/{key}\")\n+    @APIResponses(value = {\n+            @APIResponse(description = \"Gets the decision detail header.\", responseCode = \"200\", content = @Content(mediaType = MediaType.APPLICATION_JSON, schema = @Schema(type = SchemaType.OBJECT, implementation = ExecutionHeaderResponse.class))),\n+            @APIResponse(description = \"Bad Request\", responseCode = \"400\", content = @Content(mediaType = MediaType.TEXT_PLAIN))\n+    }\n+    )\n+    @Operation(summary = \"Gets The decision header with details.\", description = \"Gets the decision detail header.\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Response getExecutionById(\n+            @Parameter(\n+                    name = \"executionId\",\n+                    description = \"The execution ID.\",\n+                    required = true,\n+                    schema = @Schema(implementation = String.class)\n+            ) @PathParam(\"executionId\") String executionId) {\n+\n+        Decision decision;\n+        try {\n+            decision = trustyService.getDecisionById(executionId);\n+        } catch (IllegalArgumentException ex) {\n+            return Response.status(Response.Status.BAD_REQUEST.getStatusCode(), String.format(\"Execution with ID %s does not exist in the storage.\", executionId)).build();", "originalCommit": "0d10a2a8e7375518f6c3699b66107fc820616953", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA1MjM1MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r444052350", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-06-23T08:29:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ0NTIxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUwNjg5NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443506895", "bodyText": "If you are not using REST api nor using many injections, you can probably use a plain unit test without QuarkusTest.\nI would suggest you to create a constructor in TrustyService that accept TrustyStorageService and move @Inject annotation directly on the constructor.\nIn this way you can easily instantiate the service in a @Before method using a mock, a mocked implementation or the real instance with better control.\nWdyt?", "author": "danielezonca", "createdAt": "2020-06-22T11:58:11Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceTest.java", "diffHunk": "@@ -16,6 +16,87 @@\n \n package org.kie.kogito.trusty.service;\n \n+import java.time.OffsetDateTime;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.InjectMock;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.query.Query;\n+import org.kie.kogito.trusty.service.mocks.StorageImplMock;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@QuarkusTest", "originalCommit": "0d10a2a8e7375518f6c3699b66107fc820616953", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA1NDY1Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r444054657", "bodyText": "I've avoided QuarkusTest now, let me know if it looks good to you", "author": "r00ta", "createdAt": "2020-06-23T08:32:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUwNjg5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE1OTQyMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r444159422", "bodyText": "Implemented as agreeded by phone call", "author": "r00ta", "createdAt": "2020-06-23T11:42:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUwNjg5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0NTE3OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443545179", "bodyText": "Side note related to this class: if you really want to test TrustyStorageService and TrustyService in two different classes you should try to properly split test logic: most (all?) the logic is inside TrustyStorageService so here you should probably just verify (using Mockito) that method A is invoking method B etc.\nThe risk is to test the implementation and/or test the mock logic you just defined.\nI think it could be better to have a single test class to cover the logic of both. Wdyt?", "author": "danielezonca", "createdAt": "2020-06-22T13:08:45Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceTest.java", "diffHunk": "@@ -16,6 +16,87 @@\n \n package org.kie.kogito.trusty.service;\n \n+import java.time.OffsetDateTime;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.InjectMock;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.query.Query;\n+import org.kie.kogito.trusty.service.mocks.StorageImplMock;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@QuarkusTest\n public class TrustyServiceTest {", "originalCommit": "0d10a2a8e7375518f6c3699b66107fc820616953", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NTI3Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443655272", "bodyText": "Currently TrustyStorageService is not really tested anywhere, since it is only exposing the \"cache\" of the decisions. I think the TrustyStorageService should be mocked anyway in the tests of the TrustyService. I know there is not much to test, as a matter of facts I've implemented just 3 unit tests and some integration tests for the TrustyService. Let's have a call to better clarify your points", "author": "r00ta", "createdAt": "2020-06-22T15:45:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0NTE3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0NjExMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443546110", "bodyText": "Is this needed? Are we using infinispan in any test?", "author": "danielezonca", "createdAt": "2020-06-22T13:10:19Z", "path": "trusty/trusty-service/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,10 @@\n+# Infinispan", "originalCommit": "0d10a2a8e7375518f6c3699b66107fc820616953", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYxNzUzMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443617531", "bodyText": "@danielezonca yes, in order to select which storage layer is to be used, we have to set the properties here. For me the question is how do we write integration tests for mongo for example. I think that at one point we will have to move (some) integration tests out of this module to a separated module (or put them in kogito-examples?)", "author": "r00ta", "createdAt": "2020-06-22T14:51:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0NjExMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0NjU5Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443546592", "bodyText": "Are them used?", "author": "danielezonca", "createdAt": "2020-06-22T13:11:10Z", "path": "trusty/trusty-storage/trusty-storage-api/pom.xml", "diffHunk": "@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>trusty-storage</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>trusty-storage-api</artifactId>\n+  <name>Kogito :: Trusty Storage API</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>persistence-commons-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-databind</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-annotations</artifactId>\n+    </dependency>", "originalCommit": "0d10a2a8e7375518f6c3699b66107fc820616953", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NTQxOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443655418", "bodyText": "Nope, I'll remove them", "author": "r00ta", "createdAt": "2020-06-22T15:45:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0NjU5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU1MDQyNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443550424", "bodyText": "Can you please add a test to verify that all fields of Decision are covered (if possible use a mechanism that dynamically takes methods from Decision so that if we add a field the test fails", "author": "danielezonca", "createdAt": "2020-06-22T13:17:38Z", "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/DecisionMarshaller.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.infinispan.protostream.MessageMarshaller;\n+import org.kie.kogito.persistence.infinispan.protostream.AbstractMarshaller;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.ExecutionTypeEnum;\n+\n+public class DecisionMarshaller extends AbstractMarshaller implements MessageMarshaller<Decision> {\n+\n+    private static final ObjectMapper myMapper = new ObjectMapper();\n+\n+    public DecisionMarshaller(ObjectMapper mapper) {\n+        super(mapper);\n+    }\n+\n+    @Override\n+    public Decision readFrom(ProtoStreamReader reader) throws IOException {", "originalCommit": "0d10a2a8e7375518f6c3699b66107fc820616953", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA1NTA5Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r444055093", "bodyText": "Done, lmkwyt", "author": "r00ta", "createdAt": "2020-06-23T08:33:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU1MDQyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE2MDEyNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r444160127", "bodyText": "The check on the mapping has been implemented using reflection, I'll resolve the conversation", "author": "r00ta", "createdAt": "2020-06-23T11:43:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU1MDQyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU1MDUxMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443550510", "bodyText": "Same as above", "author": "danielezonca", "createdAt": "2020-06-22T13:17:46Z", "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/DecisionMarshaller.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.infinispan.protostream.MessageMarshaller;\n+import org.kie.kogito.persistence.infinispan.protostream.AbstractMarshaller;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.ExecutionTypeEnum;\n+\n+public class DecisionMarshaller extends AbstractMarshaller implements MessageMarshaller<Decision> {\n+\n+    private static final ObjectMapper myMapper = new ObjectMapper();\n+\n+    public DecisionMarshaller(ObjectMapper mapper) {\n+        super(mapper);\n+    }\n+\n+    @Override\n+    public Decision readFrom(ProtoStreamReader reader) throws IOException {\n+        Decision result = new Decision();\n+\n+        result.setExecutionId(reader.readString(\"executionId\"));\n+        result.setExecutionTimestamp(reader.readLong(\"executionTimestamp\"));\n+        result.setSuccess(reader.readBoolean(\"hasSucceeded\"));\n+        result.setExecutorName(reader.readString(\"executorName\"));\n+        result.setExecutedModelName(reader.readString(\"executedModelName\"));\n+        result.setExecutionType(myMapper.readValue(reader.readString(\"executionType\"), ExecutionTypeEnum.class));\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public void writeTo(ProtoStreamWriter writer, Decision result) throws IOException {", "originalCommit": "0d10a2a8e7375518f6c3699b66107fc820616953", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA1NTEyMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r444055122", "bodyText": "Done, lmkwyt", "author": "r00ta", "createdAt": "2020-06-23T08:33:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU1MDUxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE2MDMxNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r444160317", "bodyText": "Implemented as agreeded by phone call", "author": "r00ta", "createdAt": "2020-06-23T11:43:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU1MDUxMA=="}], "type": "inlineReview"}, {"oid": "8fab37617fcfef35b38ddf0d2d86662a33a906cd", "url": "https://github.com/kiegroup/kogito-apps/commit/8fab37617fcfef35b38ddf0d2d86662a33a906cd", "message": "implement protostream tests, create constants, move cache config, change return message api, remove unused dependencies", "committedDate": "2020-06-23T08:28:16Z", "type": "commit"}, {"oid": "36d3cf8a7c8ad4318e1c3005a9492fd0b036c4c2", "url": "https://github.com/kiegroup/kogito-apps/commit/36d3cf8a7c8ad4318e1c3005a9492fd0b036c4c2", "message": "test mapping Decision-Marshaller, improve CDI of TrustyService, implement update method", "committedDate": "2020-06-23T11:41:04Z", "type": "commit"}, {"oid": "56c259be54f3b4c00f762bc145ecb6ac02ad5ffa", "url": "https://github.com/kiegroup/kogito-apps/commit/56c259be54f3b4c00f762bc145ecb6ac02ad5ffa", "message": "fix sonarcloud", "committedDate": "2020-06-23T11:46:20Z", "type": "commit"}, {"oid": "9780ad8594abbabc53f4d9d1a21492d15bffab88", "url": "https://github.com/kiegroup/kogito-apps/commit/9780ad8594abbabc53f4d9d1a21492d15bffab88", "message": "rename DecisionApiV1 test class", "committedDate": "2020-06-23T11:48:39Z", "type": "commit"}, {"oid": "4235f0a0e166502e9f4690a16604d0f977aa5b6f", "url": "https://github.com/kiegroup/kogito-apps/commit/4235f0a0e166502e9f4690a16604d0f977aa5b6f", "message": "fix tests", "committedDate": "2020-06-23T14:41:28Z", "type": "commit"}]}