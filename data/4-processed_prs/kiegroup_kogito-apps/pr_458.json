{"pr_number": 458, "pr_title": "KOGITO-3208: integration test for trusty service and explainability service", "pr_createdAt": "2020-09-16T13:11:52Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/458", "timeline": [{"oid": "a73c06d20f89cab34e57f7ae5121d81205845eac", "url": "https://github.com/kiegroup/kogito-apps/commit/a73c06d20f89cab34e57f7ae5121d81205845eac", "message": "KOGITO-3208: implement integration-tests-trusty-service", "committedDate": "2020-09-21T19:58:53Z", "type": "forcePushed"}, {"oid": "e9a21a2fdb6acce12a90b42863b321848d35d4c3", "url": "https://github.com/kiegroup/kogito-apps/commit/e9a21a2fdb6acce12a90b42863b321848d35d4c3", "message": "KOGITO-3208: implement integration-tests-trusty-service", "committedDate": "2020-09-21T19:59:37Z", "type": "forcePushed"}, {"oid": "463ea19282a4c817c42f39037fdd6d4498ceab7c", "url": "https://github.com/kiegroup/kogito-apps/commit/463ea19282a4c817c42f39037fdd6d4498ceab7c", "message": "KOGITO-3208: implement integration-tests-trusty-service", "committedDate": "2020-09-28T13:51:10Z", "type": "forcePushed"}, {"oid": "121910364adfa07873804d9e4d9c213b65c4cede", "url": "https://github.com/kiegroup/kogito-apps/commit/121910364adfa07873804d9e4d9c213b65c4cede", "message": "KOGITO-3208: implement integration-tests-trusty-service", "committedDate": "2020-09-30T09:29:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcwODk4NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501708984", "bodyText": "Why are these deps only in compile scope? Is there any particular reason for that?", "author": "jiripetrlik", "createdAt": "2020-10-08T13:13:18Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/pom.xml", "diffHunk": "@@ -0,0 +1,70 @@\n+<?xml version=\"1.0\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>integration-tests-trusty-service</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>integration-tests-trusty-service-common</artifactId>\n+\n+  <name>Kogito Apps :: Integration Tests :: Trusty Service :: Common</name>\n+  <description>Processes and common classes for integration tests</description>\n+\n+  <properties>\n+    <sonar.exclusions>**/it/*.java,**/testcontainers/*.java</sonar.exclusions>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>trusty-service-api</artifactId>\n+      <scope>compile</scope>", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI3NDk2Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502274963", "bodyText": "I think I added this dependency via Intellij and this is its standard way. I will remove the explicit scope.", "author": "kostola", "createdAt": "2020-10-09T08:36:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcwODk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUzNjI1Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502536252", "bodyText": "I was wrong. I must explicitly add compile because by default those dependencies are in test scope but, since this is a common module that is imported in the framework-specific test packages, here the compile scope is correct so the dependent modules won't need to reimport the dependencies as well.", "author": "kostola", "createdAt": "2020-10-09T16:14:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcwODk4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxMTExMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501711112", "bodyText": "Can we consider some waiting loop which checks regulry if the result is available? It might be faster.", "author": "jiripetrlik", "createdAt": "2020-10-08T13:16:12Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/it/trusty/AbstractTrustyExplainabilityEnd2EndIT.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.it.trusty;\n+\n+import java.util.function.BiFunction;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.ExplainabilityServiceMessagingContainer;\n+import org.kie.kogito.testcontainers.InfinispanContainer;\n+import org.kie.kogito.testcontainers.KogitoServiceContainer;\n+import org.kie.kogito.testcontainers.TrustyServiceContainer;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.kie.kogito.trusty.service.responses.SalienciesResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public abstract class AbstractTrustyExplainabilityEnd2EndIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractTrustyExplainabilityEnd2EndIT.class);\n+\n+    private final BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer;\n+\n+    protected AbstractTrustyExplainabilityEnd2EndIT(BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer) {\n+        this.kogitoServiceContainerProducer = kogitoServiceContainerProducer;\n+    }\n+\n+    @Test\n+    public void doTest() throws Exception {\n+        try (\n+                final Network network = Network.newNetwork();\n+\n+                final InfinispanContainer infinispan = new InfinispanContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"infinispan\");\n+\n+                final KafkaContainer kafka = new KafkaContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kafka\");\n+\n+                final ExplainabilityServiceMessagingContainer explService = new ExplainabilityServiceMessagingContainer(\"kafka:9092\", 10)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"expl-service\");\n+\n+                final TrustyServiceContainer trustyService = new TrustyServiceContainer(\"infinispan:11222\", \"kafka:9092\", true)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"trusty-service\");\n+\n+                final KogitoServiceContainer kogitoService = kogitoServiceContainerProducer.apply(\"kafka:9092\", \"http://kogito-service:8080\")\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kogito-service\")\n+        ) {\n+            infinispan.start();\n+            assertTrue(infinispan.isRunning());\n+\n+            kafka.start();\n+            assertTrue(kafka.isRunning());\n+\n+            Testcontainers.exposeHostPorts(18080);\n+\n+            explService.start();\n+            assertTrue(explService.isRunning());\n+\n+            trustyService.start();\n+            assertTrue(trustyService.isRunning());\n+\n+            kogitoService.start();\n+            assertTrue(kogitoService.isRunning());\n+\n+            String json = \"{\\\"Driver\\\":{\\\"Age\\\":25,\\\"Points\\\":13},\\\"Violation\\\":{\\\"Type\\\":\\\"speed\\\",\\\"Actual Speed\\\":115,\\\"Speed Limit\\\":100}}\";\n+\n+            given()\n+                    .port(kogitoService.getFirstMappedPort())\n+                    .contentType(\"application/json\")\n+                    .body(json)\n+                    .when().post(\"/Traffic Violation\")\n+                    .then().statusCode(200);\n+\n+            // wait a reasonable amount of time for the loop to complete\n+            Thread.sleep(5000);", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUzNzQzNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502537436", "bodyText": "Done following this suggestion \ud83d\udc4d", "author": "kostola", "createdAt": "2020-10-09T16:16:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxMTExMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxNDU1MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501714550", "bodyText": "Can we run this loop multiple times and evaluate whether multiple invocations are handled correctly and not mixed for example etc.?", "author": "jiripetrlik", "createdAt": "2020-10-08T13:20:38Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/it/trusty/AbstractTrustyExplainabilityEnd2EndIT.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.it.trusty;\n+\n+import java.util.function.BiFunction;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.ExplainabilityServiceMessagingContainer;\n+import org.kie.kogito.testcontainers.InfinispanContainer;\n+import org.kie.kogito.testcontainers.KogitoServiceContainer;\n+import org.kie.kogito.testcontainers.TrustyServiceContainer;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.kie.kogito.trusty.service.responses.SalienciesResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public abstract class AbstractTrustyExplainabilityEnd2EndIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractTrustyExplainabilityEnd2EndIT.class);\n+\n+    private final BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer;\n+\n+    protected AbstractTrustyExplainabilityEnd2EndIT(BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer) {\n+        this.kogitoServiceContainerProducer = kogitoServiceContainerProducer;\n+    }\n+\n+    @Test\n+    public void doTest() throws Exception {\n+        try (\n+                final Network network = Network.newNetwork();\n+\n+                final InfinispanContainer infinispan = new InfinispanContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"infinispan\");\n+\n+                final KafkaContainer kafka = new KafkaContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kafka\");\n+\n+                final ExplainabilityServiceMessagingContainer explService = new ExplainabilityServiceMessagingContainer(\"kafka:9092\", 10)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"expl-service\");\n+\n+                final TrustyServiceContainer trustyService = new TrustyServiceContainer(\"infinispan:11222\", \"kafka:9092\", true)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"trusty-service\");\n+\n+                final KogitoServiceContainer kogitoService = kogitoServiceContainerProducer.apply(\"kafka:9092\", \"http://kogito-service:8080\")\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kogito-service\")\n+        ) {\n+            infinispan.start();\n+            assertTrue(infinispan.isRunning());\n+\n+            kafka.start();\n+            assertTrue(kafka.isRunning());\n+\n+            Testcontainers.exposeHostPorts(18080);\n+\n+            explService.start();\n+            assertTrue(explService.isRunning());\n+\n+            trustyService.start();\n+            assertTrue(trustyService.isRunning());\n+\n+            kogitoService.start();\n+            assertTrue(kogitoService.isRunning());\n+\n+            String json = \"{\\\"Driver\\\":{\\\"Age\\\":25,\\\"Points\\\":13},\\\"Violation\\\":{\\\"Type\\\":\\\"speed\\\",\\\"Actual Speed\\\":115,\\\"Speed Limit\\\":100}}\";\n+\n+            given()\n+                    .port(kogitoService.getFirstMappedPort())\n+                    .contentType(\"application/json\")\n+                    .body(json)\n+                    .when().post(\"/Traffic Violation\")\n+                    .then().statusCode(200);\n+\n+            // wait a reasonable amount of time for the loop to complete\n+            Thread.sleep(5000);\n+\n+            ExecutionsResponse executionsResponse = given()\n+                    .port(trustyService.getFirstMappedPort())\n+                    .when().get(\"/executions?limit=1\")\n+                    .then().statusCode(200)\n+                    .extract().as(ExecutionsResponse.class);\n+\n+            assertSame(1, executionsResponse.getHeaders().size());\n+\n+            String executionId = executionsResponse.getHeaders().stream()\n+                    .findFirst()\n+                    .map(ExecutionHeaderResponse::getExecutionId)\n+                    .orElseThrow(IllegalStateException::new);\n+\n+            assertNotNull(executionId);\n+\n+            SalienciesResponse salienciesResponse = given()\n+                    .port(trustyService.getFirstMappedPort())\n+                    .when().get(\"/executions/decisions/\" + executionId + \"/explanations/saliencies\")\n+                    .then().statusCode(200)\n+                    .extract().as(SalienciesResponse.class);\n+\n+            assertEquals(\"SUCCEEDED\", salienciesResponse.getStatus());", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc1NzM1MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r503757350", "bodyText": "Do you mean the whole loop? Generating execution + verifying that it's stored in trusty + verify explainability results?", "author": "kostola", "createdAt": "2020-10-13T08:19:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxNDU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA1NzU1NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r504057555", "bodyText": "Yes. Would it be possible? It will be much more robust integration test if there are multiple evaluation etc. We know that all is processed well and without any mixing of messages etc.", "author": "jiripetrlik", "createdAt": "2020-10-13T15:40:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxNDU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ5NTcxMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r504495712", "bodyText": "Yes I will do it now \ud83d\ude09", "author": "kostola", "createdAt": "2020-10-14T08:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxNDU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI2NDAwNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r505264007", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-10-15T07:28:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxNDU1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxNDY5MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501714690", "bodyText": "Unexpected new line.", "author": "jiripetrlik", "createdAt": "2020-10-08T13:20:49Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/it/trusty/AbstractTrustyExplainabilityEnd2EndIT.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.it.trusty;\n+\n+import java.util.function.BiFunction;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.ExplainabilityServiceMessagingContainer;\n+import org.kie.kogito.testcontainers.InfinispanContainer;\n+import org.kie.kogito.testcontainers.KogitoServiceContainer;\n+import org.kie.kogito.testcontainers.TrustyServiceContainer;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.kie.kogito.trusty.service.responses.SalienciesResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public abstract class AbstractTrustyExplainabilityEnd2EndIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractTrustyExplainabilityEnd2EndIT.class);\n+\n+    private final BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer;\n+\n+    protected AbstractTrustyExplainabilityEnd2EndIT(BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer) {\n+        this.kogitoServiceContainerProducer = kogitoServiceContainerProducer;\n+    }\n+\n+    @Test\n+    public void doTest() throws Exception {\n+        try (\n+                final Network network = Network.newNetwork();\n+\n+                final InfinispanContainer infinispan = new InfinispanContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"infinispan\");\n+\n+                final KafkaContainer kafka = new KafkaContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kafka\");\n+\n+                final ExplainabilityServiceMessagingContainer explService = new ExplainabilityServiceMessagingContainer(\"kafka:9092\", 10)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"expl-service\");\n+\n+                final TrustyServiceContainer trustyService = new TrustyServiceContainer(\"infinispan:11222\", \"kafka:9092\", true)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"trusty-service\");\n+\n+                final KogitoServiceContainer kogitoService = kogitoServiceContainerProducer.apply(\"kafka:9092\", \"http://kogito-service:8080\")\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kogito-service\")\n+        ) {\n+            infinispan.start();\n+            assertTrue(infinispan.isRunning());\n+\n+            kafka.start();\n+            assertTrue(kafka.isRunning());\n+\n+            Testcontainers.exposeHostPorts(18080);\n+\n+            explService.start();\n+            assertTrue(explService.isRunning());\n+\n+            trustyService.start();\n+            assertTrue(trustyService.isRunning());\n+\n+            kogitoService.start();\n+            assertTrue(kogitoService.isRunning());\n+\n+            String json = \"{\\\"Driver\\\":{\\\"Age\\\":25,\\\"Points\\\":13},\\\"Violation\\\":{\\\"Type\\\":\\\"speed\\\",\\\"Actual Speed\\\":115,\\\"Speed Limit\\\":100}}\";\n+\n+            given()\n+                    .port(kogitoService.getFirstMappedPort())\n+                    .contentType(\"application/json\")\n+                    .body(json)\n+                    .when().post(\"/Traffic Violation\")\n+                    .then().statusCode(200);\n+\n+            // wait a reasonable amount of time for the loop to complete\n+            Thread.sleep(5000);\n+\n+            ExecutionsResponse executionsResponse = given()\n+                    .port(trustyService.getFirstMappedPort())\n+                    .when().get(\"/executions?limit=1\")\n+                    .then().statusCode(200)\n+                    .extract().as(ExecutionsResponse.class);\n+\n+            assertSame(1, executionsResponse.getHeaders().size());\n+\n+            String executionId = executionsResponse.getHeaders().stream()\n+                    .findFirst()\n+                    .map(ExecutionHeaderResponse::getExecutionId)\n+                    .orElseThrow(IllegalStateException::new);\n+\n+            assertNotNull(executionId);\n+\n+            SalienciesResponse salienciesResponse = given()\n+                    .port(trustyService.getFirstMappedPort())\n+                    .when().get(\"/executions/decisions/\" + executionId + \"/explanations/saliencies\")\n+                    .then().statusCode(200)\n+                    .extract().as(SalienciesResponse.class);\n+\n+            assertEquals(\"SUCCEEDED\", salienciesResponse.getStatus());\n+        }\n+    }\n+", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUzNjM5Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502536396", "bodyText": "Removed \ud83d\udc4d", "author": "kostola", "createdAt": "2020-10-09T16:14:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxNDY5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczMjMzMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r498732333", "bodyText": "Can you please clarify this code? Do you get dmn file from a remote jar?", "author": "danielezonca", "createdAt": "2020-10-02T10:07:34Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/pom.xml", "diffHunk": "@@ -0,0 +1,70 @@\n+<?xml version=\"1.0\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>integration-tests-trusty-service</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>integration-tests-trusty-service-common</artifactId>\n+\n+  <name>Kogito Apps :: Integration Tests :: Trusty Service :: Common</name>\n+  <description>Processes and common classes for integration tests</description>\n+\n+  <properties>\n+    <sonar.exclusions>**/it/*.java,**/testcontainers/*.java</sonar.exclusions>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>trusty-service-api</artifactId>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.testcontainers</groupId>\n+      <artifactId>testcontainers</artifactId>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.testcontainers</groupId>\n+      <artifactId>kafka</artifactId>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-api</artifactId>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.rest-assured</groupId>\n+      <artifactId>rest-assured</artifactId>\n+      <scope>compile</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-remote-resources-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>bundle</goal>\n+            </goals>\n+            <configuration>\n+              <includes>\n+                <include>**/*.dmn</include>\n+              </includes>", "originalCommit": "121910364adfa07873804d9e4d9c213b65c4cede", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI2NDI5OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502264298", "bodyText": "The dmn files used in the tests are contained in the common module and bundled during compilation. The resources of this module are then imported in the framework-specific test modules (quarkus and springboot).\nI used the same structure already implemented in the jobs-service integration tests.", "author": "kostola", "createdAt": "2020-10-09T08:17:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczMjMzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY4NTc1Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r504685753", "bodyText": "Is it possible to include all the resources without filter dmn specifically? I think this could make it more \"future proof\"", "author": "danielezonca", "createdAt": "2020-10-14T13:41:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczMjMzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI2ODA3OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r505268078", "bodyText": "According to the plugin documentation, the include directives must be explicitly specified.\nI didn't test with a generic * filter, but I'd prefer specifying new filters when needed in the future rather than blindly including every resource file.", "author": "kostola", "createdAt": "2020-10-15T07:32:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczMjMzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NzU0NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r498787544", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <!-- internal containers used for testing (built by maven) -->\n          \n          \n            \n                <!-- internal containers used for testing (built by maven using quarkus-container-image-jib) -->", "author": "danielezonca", "createdAt": "2020-10-02T12:23:12Z", "path": "pom.xml", "diffHunk": "@@ -27,9 +27,12 @@\n \n     <version.org.infinispan.image>10.1.5.Final</version.org.infinispan.image>\n \n-    <!-- containers used for testing -->\n+    <!-- external containers used for testing -->\n     <container.image.infinispan>quay.io/infinispan/server:${version.org.infinispan.image}</container.image.infinispan>\n+    <!-- internal containers used for testing (built by maven) -->", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUxNDU0MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502514541", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-10-09T15:36:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NzU0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY5NzMzNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501697335", "bodyText": "What about use this alternative?", "author": "danielezonca", "createdAt": "2020-10-08T12:55:44Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/it/trusty/AbstractTrustyExplainabilityEnd2EndIT.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.it.trusty;\n+\n+import java.util.function.BiFunction;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.ExplainabilityServiceMessagingContainer;\n+import org.kie.kogito.testcontainers.InfinispanContainer;\n+import org.kie.kogito.testcontainers.KogitoServiceContainer;\n+import org.kie.kogito.testcontainers.TrustyServiceContainer;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.kie.kogito.trusty.service.responses.SalienciesResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public abstract class AbstractTrustyExplainabilityEnd2EndIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractTrustyExplainabilityEnd2EndIT.class);\n+\n+    private final BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer;\n+\n+    protected AbstractTrustyExplainabilityEnd2EndIT(BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer) {\n+        this.kogitoServiceContainerProducer = kogitoServiceContainerProducer;\n+    }\n+\n+    @Test\n+    public void doTest() throws Exception {\n+        try (\n+                final Network network = Network.newNetwork();\n+\n+                final InfinispanContainer infinispan = new InfinispanContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"infinispan\");\n+\n+                final KafkaContainer kafka = new KafkaContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kafka\");\n+\n+                final ExplainabilityServiceMessagingContainer explService = new ExplainabilityServiceMessagingContainer(\"kafka:9092\", 10)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"expl-service\");\n+\n+                final TrustyServiceContainer trustyService = new TrustyServiceContainer(\"infinispan:11222\", \"kafka:9092\", true)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"trusty-service\");\n+\n+                final KogitoServiceContainer kogitoService = kogitoServiceContainerProducer.apply(\"kafka:9092\", \"http://kogito-service:8080\")\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kogito-service\")\n+        ) {\n+            infinispan.start();\n+            assertTrue(infinispan.isRunning());\n+\n+            kafka.start();\n+            assertTrue(kafka.isRunning());\n+\n+            Testcontainers.exposeHostPorts(18080);\n+\n+            explService.start();\n+            assertTrue(explService.isRunning());\n+\n+            trustyService.start();\n+            assertTrue(trustyService.isRunning());\n+\n+            kogitoService.start();\n+            assertTrue(kogitoService.isRunning());\n+\n+            String json = \"{\\\"Driver\\\":{\\\"Age\\\":25,\\\"Points\\\":13},\\\"Violation\\\":{\\\"Type\\\":\\\"speed\\\",\\\"Actual Speed\\\":115,\\\"Speed Limit\\\":100}}\";\n+\n+            given()\n+                    .port(kogitoService.getFirstMappedPort())\n+                    .contentType(\"application/json\")\n+                    .body(json)\n+                    .when().post(\"/Traffic Violation\")\n+                    .then().statusCode(200);\n+\n+            // wait a reasonable amount of time for the loop to complete\n+            Thread.sleep(5000);", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI2NzcxOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502267718", "bodyText": "Yes it's definitely cleaner. Thanks!", "author": "kostola", "createdAt": "2020-10-09T08:23:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY5NzMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUzNjQ5Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502536493", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-10-09T16:14:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY5NzMzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcwNjY0MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501706640", "bodyText": "Please copy the default application.properties file from the archetype to be on the safe side\nhttps://github.com/kiegroup/kogito-runtimes/blob/master/archetypes/kogito-springboot-archetype/src/main/resources/archetype-resources/src/main/resources/application.properties", "author": "danielezonca", "createdAt": "2020-10-08T13:09:48Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-springboot/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,18 @@\n+#\n+#  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+#\n+#  Licensed under the Apache License, Version 2.0 (the \"License\");\n+#  you may not use this file except in compliance with the License.\n+#  You may obtain a copy of the License at\n+#\n+#        http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+#  limitations under the License.\n+#\n+\n+server.address=0.0.0.0\n+resteasy.jaxrs.scan-packages=org.kie.kogito.**,http*", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUzNjU1NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502536554", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-10-09T16:14:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcwNjY0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxMjU4OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501712589", "bodyText": "@r00ta\nCan you please double check if this change can have an impact on Keycloak integration?", "author": "danielezonca", "createdAt": "2020-10-08T13:18:03Z", "path": "trusty/trusty-service/src/main/resources/application.properties", "diffHunk": "@@ -1,18 +1,30 @@\n quarkus.http.cors=true\n \n-#oidc\n-quarkus.oidc.enabled=true\n-quarkus.oidc.tenant-enabled=false\n+# Quarkus OIDC\n+quarkus.oidc.enabled=false\n+quarkus.oidc.auth-server-url=none", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2NzYyMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r505667623", "bodyText": "That change was wrong. I fixed it now and added Keycloak to the integration tests.", "author": "kostola", "createdAt": "2020-10-15T16:11:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxMjU4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMTg5OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501721898", "bodyText": "Please move to constants:\n\naliases\nports", "author": "danielezonca", "createdAt": "2020-10-08T13:30:40Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/it/trusty/AbstractTrustyExplainabilityEnd2EndIT.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.it.trusty;\n+\n+import java.util.function.BiFunction;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.ExplainabilityServiceMessagingContainer;\n+import org.kie.kogito.testcontainers.InfinispanContainer;\n+import org.kie.kogito.testcontainers.KogitoServiceContainer;\n+import org.kie.kogito.testcontainers.TrustyServiceContainer;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.kie.kogito.trusty.service.responses.SalienciesResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public abstract class AbstractTrustyExplainabilityEnd2EndIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractTrustyExplainabilityEnd2EndIT.class);\n+\n+    private final BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer;\n+\n+    protected AbstractTrustyExplainabilityEnd2EndIT(BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer) {\n+        this.kogitoServiceContainerProducer = kogitoServiceContainerProducer;\n+    }\n+\n+    @Test\n+    public void doTest() throws Exception {\n+        try (\n+                final Network network = Network.newNetwork();\n+\n+                final InfinispanContainer infinispan = new InfinispanContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"infinispan\");\n+\n+                final KafkaContainer kafka = new KafkaContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kafka\");\n+\n+                final ExplainabilityServiceMessagingContainer explService = new ExplainabilityServiceMessagingContainer(\"kafka:9092\", 10)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"expl-service\");\n+\n+                final TrustyServiceContainer trustyService = new TrustyServiceContainer(\"infinispan:11222\", \"kafka:9092\", true)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"trusty-service\");\n+\n+                final KogitoServiceContainer kogitoService = kogitoServiceContainerProducer.apply(\"kafka:9092\", \"http://kogito-service:8080\")\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kogito-service\")", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUzNjg2Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502536863", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-10-09T16:15:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMTg5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMjUwNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501722506", "bodyText": "Is this value fixed?", "author": "danielezonca", "createdAt": "2020-10-08T13:31:35Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/it/trusty/AbstractTrustyExplainabilityEnd2EndIT.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.it.trusty;\n+\n+import java.util.function.BiFunction;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.ExplainabilityServiceMessagingContainer;\n+import org.kie.kogito.testcontainers.InfinispanContainer;\n+import org.kie.kogito.testcontainers.KogitoServiceContainer;\n+import org.kie.kogito.testcontainers.TrustyServiceContainer;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.kie.kogito.trusty.service.responses.SalienciesResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public abstract class AbstractTrustyExplainabilityEnd2EndIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractTrustyExplainabilityEnd2EndIT.class);\n+\n+    private final BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer;\n+\n+    protected AbstractTrustyExplainabilityEnd2EndIT(BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer) {\n+        this.kogitoServiceContainerProducer = kogitoServiceContainerProducer;\n+    }\n+\n+    @Test\n+    public void doTest() throws Exception {\n+        try (\n+                final Network network = Network.newNetwork();\n+\n+                final InfinispanContainer infinispan = new InfinispanContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"infinispan\");\n+\n+                final KafkaContainer kafka = new KafkaContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kafka\");\n+\n+                final ExplainabilityServiceMessagingContainer explService = new ExplainabilityServiceMessagingContainer(\"kafka:9092\", 10)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"expl-service\");\n+\n+                final TrustyServiceContainer trustyService = new TrustyServiceContainer(\"infinispan:11222\", \"kafka:9092\", true)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"trusty-service\");\n+\n+                final KogitoServiceContainer kogitoService = kogitoServiceContainerProducer.apply(\"kafka:9092\", \"http://kogito-service:8080\")\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kogito-service\")\n+        ) {\n+            infinispan.start();\n+            assertTrue(infinispan.isRunning());\n+\n+            kafka.start();\n+            assertTrue(kafka.isRunning());\n+\n+            Testcontainers.exposeHostPorts(18080);", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUzNzg2Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502537866", "bodyText": "Sorry this was a leftover from some previous tests. I removed it now.", "author": "kostola", "createdAt": "2020-10-09T16:17:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMjUwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMjY3Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501722672", "bodyText": "Move to config/constant?", "author": "danielezonca", "createdAt": "2020-10-08T13:31:50Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/testcontainers/InfinispanContainer.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.testcontainers;\n+\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import static org.kie.kogito.testcontainers.TestcontainersUtils.getImageName;\n+\n+public class InfinispanContainer extends GenericContainer<InfinispanContainer> {\n+\n+    public InfinispanContainer() {\n+        super(getImageName(\"infinispan\"));  // \"quay.io/infinispan/server:10.1.5.Final\"\n+        addEnv(\"USER\", \"admin\");\n+        addEnv(\"PASS\", \"admin\");\n+        addExposedPort(11222);", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyNzg0Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502527842", "bodyText": "This is only the internal exposed port, which should be fixed to this value, it will then be mapped to a random available one by testcontainers. Do you still want to create a config for it?", "author": "kostola", "createdAt": "2020-10-09T15:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMjY3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMjgyNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501722826", "bodyText": "Move to config/constant?", "author": "danielezonca", "createdAt": "2020-10-08T13:32:02Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/testcontainers/KogitoServiceContainer.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.testcontainers;\n+\n+import org.testcontainers.containers.GenericContainer;\n+\n+import static org.kie.kogito.testcontainers.TestcontainersUtils.getImageName;\n+\n+public class KogitoServiceContainer extends GenericContainer<KogitoServiceContainer> {\n+\n+    public KogitoServiceContainer(String kogitoServiceUrl) {\n+        super(getImageName(\"kogito-service\"));  // \"org.kie.kogito/integration-tests-trusty-service-quarkus:1.0.0-SNAPSHOT\"\n+        addEnv(\"KOGITO_SERVICE_URL\", kogitoServiceUrl);\n+        addExposedPort(8080);", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyNzk3MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502527971", "bodyText": "Same as here.", "author": "kostola", "createdAt": "2020-10-09T15:59:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMjgyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMzEyMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501723120", "bodyText": "Move to config/constant?", "author": "danielezonca", "createdAt": "2020-10-08T13:32:28Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/testcontainers/TrustyServiceContainer.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.testcontainers;\n+\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import static org.kie.kogito.testcontainers.TestcontainersUtils.getImageName;\n+\n+public class TrustyServiceContainer extends GenericContainer<TrustyServiceContainer> {\n+\n+    public TrustyServiceContainer(String infinispanServerList, String kafkaBootstrapServer, boolean explainabilityEnabled) {\n+        super(getImageName(\"trusty-service\"));  // \"org.kie.kogito/trusty-service:1.0.0-SNAPSHOT\"\n+        addEnv(\"INFINISPAN_SERVER_LIST\", infinispanServerList);\n+        addEnv(\"KAFKA_BOOTSTRAP_SERVERS\", kafkaBootstrapServer);\n+        addEnv(\"TRUSTY_EXPLAINABILITY_ENABLED\", String.valueOf(explainabilityEnabled));\n+        addExposedPort(8080);", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyODA1Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502528053", "bodyText": "Same as here.", "author": "kostola", "createdAt": "2020-10-09T15:59:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMzEyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyNTI5MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501725291", "bodyText": "Can you please clarify the reason of this?", "author": "danielezonca", "createdAt": "2020-10-08T13:35:26Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-quarkus/pom.xml", "diffHunk": "@@ -0,0 +1,114 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>integration-tests-trusty-service</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>integration-tests-trusty-service-quarkus</artifactId>\n+  <name>Kogito Apps :: Integration Tests :: Trusty Service :: Quarkus</name>\n+\n+  <properties>\n+    <container.image.kogito-service>org.kie.kogito/integration-tests-trusty-service-quarkus:${project.version}</container.image.kogito-service>\n+  </properties>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>kogito-bom</artifactId>\n+        <version>${project.version}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-bom</artifactId>\n+        <version>${version.io.quarkus}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-quarkus</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>tracing-decision-quarkus-addon</artifactId>\n+    </dependency>\n+\n+    <!-- Build container image -->\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-container-image-jib</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>integration-tests-trusty-service-common</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-remote-resources-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>process</goal>\n+            </goals>\n+            <configuration>\n+              <outputDirectory>${project.basedir}/src/main/resources/</outputDirectory>\n+              <resourceBundles>\n+                <resourceBundle>org.kie.kogito:integration-tests-trusty-service-common:${project.version}</resourceBundle>\n+              </resourceBundles>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      <plugin>\n+        <artifactId>maven-clean-plugin</artifactId>\n+        <configuration>\n+          <filesets>\n+            <fileset>\n+              <directory>${project.basedir}/src/main/resources/</directory>\n+              <includes>\n+                <include>*.dmn</include>\n+              </includes>\n+            </fileset>\n+          </filesets>\n+        </configuration>", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI2NTk4Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502265987", "bodyText": "This is part of the behavior described here.\nIt should delete the imported resources from the common module during the clean phase.", "author": "kostola", "createdAt": "2020-10-09T08:20:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyNTI5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyNTY5Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501725693", "bodyText": "Can you please clarify the reason of this?", "author": "danielezonca", "createdAt": "2020-10-08T13:35:56Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-quarkus/pom.xml", "diffHunk": "@@ -0,0 +1,114 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>integration-tests-trusty-service</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>integration-tests-trusty-service-quarkus</artifactId>\n+  <name>Kogito Apps :: Integration Tests :: Trusty Service :: Quarkus</name>\n+\n+  <properties>\n+    <container.image.kogito-service>org.kie.kogito/integration-tests-trusty-service-quarkus:${project.version}</container.image.kogito-service>\n+  </properties>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>kogito-bom</artifactId>\n+        <version>${project.version}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-bom</artifactId>\n+        <version>${version.io.quarkus}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-quarkus</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>tracing-decision-quarkus-addon</artifactId>\n+    </dependency>\n+\n+    <!-- Build container image -->\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-container-image-jib</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>integration-tests-trusty-service-common</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-remote-resources-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>process</goal>\n+            </goals>\n+            <configuration>\n+              <outputDirectory>${project.basedir}/src/main/resources/</outputDirectory>\n+              <resourceBundles>\n+                <resourceBundle>org.kie.kogito:integration-tests-trusty-service-common:${project.version}</resourceBundle>", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI2NjQ2OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502266469", "bodyText": "This is part of the behavior described here.\nIt imports in the current project sources the resources bundled in the common module.", "author": "kostola", "createdAt": "2020-10-09T08:20:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyNTY5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI2OTM1Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r505269357", "bodyText": "More info in the plugin documentation.", "author": "kostola", "createdAt": "2020-10-15T07:33:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyNTY5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyNTgzMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501725833", "bodyText": "Can you please clarify the reason of this?", "author": "danielezonca", "createdAt": "2020-10-08T13:36:09Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-springboot/pom.xml", "diffHunk": "@@ -0,0 +1,103 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>integration-tests-trusty-service</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>integration-tests-trusty-service-springboot</artifactId>\n+  <name>Kogito Apps :: Integration Tests :: Trusty Service :: Spring Boot</name>\n+\n+  <properties>\n+    <container.image.kogito-service>org.kie.kogito/integration-tests-trusty-service-springboot:${project.version}</container.image.kogito-service>\n+    <sonar.exclusions>**/KogitoApplication.java</sonar.exclusions>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-springboot-starter</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>tracing-decision-springboot-addon</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>integration-tests-trusty-service-common</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-remote-resources-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>process</goal>\n+            </goals>\n+            <configuration>\n+              <resourceBundles>\n+                <resourceBundle>org.kie.kogito:integration-tests-trusty-service-common:${project.version}</resourceBundle>", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI2NjUzOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502266538", "bodyText": "This is part of the behavior described here.\nIt imports in the current project sources the resources bundled in the common module.", "author": "kostola", "createdAt": "2020-10-09T08:21:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyNTgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI2OTc4MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r505269781", "bodyText": "More info in the plugin documentation.", "author": "kostola", "createdAt": "2020-10-15T07:33:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyNTgzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyNjA2Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501726062", "bodyText": "Can you please clarify the reason of this?", "author": "danielezonca", "createdAt": "2020-10-08T13:36:26Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-springboot/pom.xml", "diffHunk": "@@ -0,0 +1,103 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>integration-tests-trusty-service</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>integration-tests-trusty-service-springboot</artifactId>\n+  <name>Kogito Apps :: Integration Tests :: Trusty Service :: Spring Boot</name>\n+\n+  <properties>\n+    <container.image.kogito-service>org.kie.kogito/integration-tests-trusty-service-springboot:${project.version}</container.image.kogito-service>\n+    <sonar.exclusions>**/KogitoApplication.java</sonar.exclusions>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-springboot-starter</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>tracing-decision-springboot-addon</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>integration-tests-trusty-service-common</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-remote-resources-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>process</goal>\n+            </goals>\n+            <configuration>\n+              <resourceBundles>\n+                <resourceBundle>org.kie.kogito:integration-tests-trusty-service-common:${project.version}</resourceBundle>\n+              </resourceBundles>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-maven-plugin</artifactId>\n+        <version>${version.springboot}</version>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>repackage</goal>\n+            </goals>\n+          </execution>", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI2NzQ1NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502267455", "bodyText": "Tbh I think this is here because I used the same configs from the jobs-service integration tests. I don't know exactly what is its purpose.", "author": "kostola", "createdAt": "2020-10-09T08:22:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyNjA2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI4NTI2MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r505285261", "bodyText": "It was apparently unneeded. I removed it and everything still works fine. \ud83d\ude04", "author": "kostola", "createdAt": "2020-10-15T07:46:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyNjA2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyNjQ2NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501726465", "bodyText": "Please move it to property", "author": "danielezonca", "createdAt": "2020-10-08T13:36:57Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-springboot/pom.xml", "diffHunk": "@@ -0,0 +1,103 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>integration-tests-trusty-service</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>integration-tests-trusty-service-springboot</artifactId>\n+  <name>Kogito Apps :: Integration Tests :: Trusty Service :: Spring Boot</name>\n+\n+  <properties>\n+    <container.image.kogito-service>org.kie.kogito/integration-tests-trusty-service-springboot:${project.version}</container.image.kogito-service>\n+    <sonar.exclusions>**/KogitoApplication.java</sonar.exclusions>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-springboot-starter</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>tracing-decision-springboot-addon</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>integration-tests-trusty-service-common</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-remote-resources-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>process</goal>\n+            </goals>\n+            <configuration>\n+              <resourceBundles>\n+                <resourceBundle>org.kie.kogito:integration-tests-trusty-service-common:${project.version}</resourceBundle>\n+              </resourceBundles>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-maven-plugin</artifactId>\n+        <version>${version.springboot}</version>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>repackage</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>kogito-maven-plugin</artifactId>\n+        <version>${project.version}</version>\n+        <extensions>true</extensions>\n+        <configuration>\n+          <!-- this is necessary to scan the .bpmn files from external resources, that are not on src/main/resources -->\n+          <kieSourcesDirectory>${project.basedir}/target/classes</kieSourcesDirectory>\n+        </configuration>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>com.google.cloud.tools</groupId>\n+        <artifactId>jib-maven-plugin</artifactId>\n+        <version>2.5.2</version>", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUzNzAyOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502537029", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-10-09T16:15:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyNjQ2NQ=="}], "type": "inlineReview"}, {"oid": "235ad9f1a8f1d4c7f4892bf93ec62e0d3bd2d803", "url": "https://github.com/kiegroup/kogito-apps/commit/235ad9f1a8f1d4c7f4892bf93ec62e0d3bd2d803", "message": "KOGITO-3208: fix keycloak in trusty service and integration tests", "committedDate": "2020-10-15T16:19:24Z", "type": "forcePushed"}, {"oid": "020be89fca56ca30fb4ebacbfe1ef4c1e1235fa4", "url": "https://github.com/kiegroup/kogito-apps/commit/020be89fca56ca30fb4ebacbfe1ef4c1e1235fa4", "message": "KOGITO-3208: implement integration-tests-trusty-service", "committedDate": "2020-10-19T13:50:04Z", "type": "commit"}, {"oid": "93813a404f0331dc8865e906461758b80beccfd2", "url": "https://github.com/kiegroup/kogito-apps/commit/93813a404f0331dc8865e906461758b80beccfd2", "message": "KOGITO-3208: simplify *TrustyExplainabilityEnd2EndIT classes", "committedDate": "2020-10-19T13:50:04Z", "type": "commit"}, {"oid": "56ba57445e9f05fa1d79a031fb107d25c81eaf44", "url": "https://github.com/kiegroup/kogito-apps/commit/56ba57445e9f05fa1d79a031fb107d25c81eaf44", "message": "KOGITO-3208: update root pom.xml\n\nCo-authored-by: Daniele Zonca <dzonca@redhat.com>", "committedDate": "2020-10-19T13:50:05Z", "type": "commit"}, {"oid": "99f9f474aa5e79c6b1fd01a15e6d38381670ba25", "url": "https://github.com/kiegroup/kogito-apps/commit/99f9f474aa5e79c6b1fd01a15e6d38381670ba25", "message": "KOGITO-3208: fixes to integration-tests-trusty-service", "committedDate": "2020-10-19T13:50:05Z", "type": "commit"}, {"oid": "d12c0cc1ea2eef4572f2a100d7b41bbfb61fb3ca", "url": "https://github.com/kiegroup/kogito-apps/commit/d12c0cc1ea2eef4572f2a100d7b41bbfb61fb3ca", "message": "KOGITO-3208: test with multiple executions in AbstractTrustyExplainabilityEnd2EndIT", "committedDate": "2020-10-19T13:50:05Z", "type": "commit"}, {"oid": "89944dceaf93f7e83bc67deb8c9c9b602060059f", "url": "https://github.com/kiegroup/kogito-apps/commit/89944dceaf93f7e83bc67deb8c9c9b602060059f", "message": "KOGITO-3208: fix integration-tests-trusty-service-springboot/pom.xml", "committedDate": "2020-10-19T13:50:05Z", "type": "commit"}, {"oid": "5631242cb88863dbc0bd58e9388c7a7ede8e2c3a", "url": "https://github.com/kiegroup/kogito-apps/commit/5631242cb88863dbc0bd58e9388c7a7ede8e2c3a", "message": "KOGITO-3208: fix keycloak in trusty service and integration tests", "committedDate": "2020-10-19T13:50:06Z", "type": "commit"}, {"oid": "5631242cb88863dbc0bd58e9388c7a7ede8e2c3a", "url": "https://github.com/kiegroup/kogito-apps/commit/5631242cb88863dbc0bd58e9388c7a7ede8e2c3a", "message": "KOGITO-3208: fix keycloak in trusty service and integration tests", "committedDate": "2020-10-19T13:50:06Z", "type": "forcePushed"}, {"oid": "641445b9ce9004b9f8b3bdd0ca1839af65280d9e", "url": "https://github.com/kiegroup/kogito-apps/commit/641445b9ce9004b9f8b3bdd0ca1839af65280d9e", "message": "KOGITO-3208: restore quarkus.oidc properties in trusty-service", "committedDate": "2020-10-20T15:23:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYxOTcxOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r508619718", "bodyText": "Hi @kostola , when I've enabled cors I faced the issue that it is working properly only if also oidc is enabled. Before removing this, could you please double check that everything is still working properly? This is the only file I've looked at during this review just to be clear", "author": "r00ta", "createdAt": "2020-10-20T15:36:26Z", "path": "trusty/trusty-service/src/main/resources/application.properties", "diffHunk": "@@ -1,18 +1,27 @@\n quarkus.http.cors=true\n \n-#oidc\n-quarkus.oidc.enabled=true", "originalCommit": "5631242cb88863dbc0bd58e9388c7a7ede8e2c3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYyMjY5NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r508622695", "bodyText": "wops, sorry, I just noticed you already changed it few minutes ago", "author": "r00ta", "createdAt": "2020-10-20T15:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYxOTcxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyNzE5Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r509027192", "bodyText": "Yep those missing lines were a mistake. I fixed them.", "author": "kostola", "createdAt": "2020-10-21T06:46:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYxOTcxOA=="}], "type": "inlineReview"}, {"oid": "de282aebcb2f33d1e612c3d4f780a50b8e2cdfa6", "url": "https://github.com/kiegroup/kogito-apps/commit/de282aebcb2f33d1e612c3d4f780a50b8e2cdfa6", "message": "Merge branch 'master' into 'KOGITO-3208'", "committedDate": "2020-10-26T08:38:22Z", "type": "commit"}, {"oid": "de282aebcb2f33d1e612c3d4f780a50b8e2cdfa6", "url": "https://github.com/kiegroup/kogito-apps/commit/de282aebcb2f33d1e612c3d4f780a50b8e2cdfa6", "message": "Merge branch 'master' into 'KOGITO-3208'", "committedDate": "2020-10-26T08:38:22Z", "type": "forcePushed"}, {"oid": "a36b33347e18c942b8b9e69e8b54280862ac0c48", "url": "https://github.com/kiegroup/kogito-apps/commit/a36b33347e18c942b8b9e69e8b54280862ac0c48", "message": "Merge branch 'master' into 'KOGITO-3208'", "committedDate": "2020-10-27T08:36:25Z", "type": "commit"}, {"oid": "1a35c058f7d6e70ae4afb3f289919eceac4c215d", "url": "https://github.com/kiegroup/kogito-apps/commit/1a35c058f7d6e70ae4afb3f289919eceac4c215d", "message": "KOGITO-3208: merge branch 'master' into 'KOGITO-3208'", "committedDate": "2020-10-30T08:00:17Z", "type": "commit"}, {"oid": "a6210b0f7c4ab9b2b21547df0a1ac67b45e0358d", "url": "https://github.com/kiegroup/kogito-apps/commit/a6210b0f7c4ab9b2b21547df0a1ac67b45e0358d", "message": "KOGITO-3208: fix pom.xml", "committedDate": "2020-10-30T08:51:27Z", "type": "commit"}]}