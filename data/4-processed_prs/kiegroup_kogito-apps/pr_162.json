{"pr_number": 162, "pr_title": "KOGITO-1732 - Review serviceurl handling", "pr_createdAt": "2020-04-08T06:21:34Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/162", "timeline": [{"oid": "b955ed0eb0226effcf6476d3142fa2a738f1dcfb", "url": "https://github.com/kiegroup/kogito-apps/commit/b955ed0eb0226effcf6476d3142fa2a738f1dcfb", "message": "KOGITO-1732 - Review serviceurl handling", "committedDate": "2020-04-08T07:09:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MDc3NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/162#discussion_r406140774", "bodyText": "it is worth checking if endpoint is null", "author": "tiagodolphine", "createdAt": "2020-04-09T11:32:55Z", "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/graphql/GraphQLSchemaManager.java", "diffHunk": "@@ -140,11 +140,24 @@ private GraphQLSchema createSchema() {\n         return schemaGenerator.makeExecutableSchema(typeDefinitionRegistry, runtimeWiring);\n     }\n \n-    private String getProcessInstanceServiceUrl(DataFetchingEnvironment env) {\n+    protected String getProcessInstanceServiceUrl(DataFetchingEnvironment env) {\n         ProcessInstance source = env.getSource();\n+        if (source == null || source.getEndpoint() == null || source.getProcessId() == null) {\n+            return null;\n+        }\n         String endpoint = source.getEndpoint();\n-        String context = \"/\" + source.getProcessId();\n-        return context.equals(endpoint) ? null : endpoint.substring(0, endpoint.indexOf(context));\n+        LOGGER.debug(\"Process endpoint {}\", endpoint);\n+        if (endpoint.startsWith(\"/\")) {", "originalCommit": "b955ed0eb0226effcf6476d3142fa2a738f1dcfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0OTY3MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/162#discussion_r406149671", "bodyText": "I'm checking on line 145 :)", "author": "cristianonicolai", "createdAt": "2020-04-09T11:51:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MDc3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxNzk3MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/162#discussion_r406217970", "bodyText": "+1", "author": "tiagodolphine", "createdAt": "2020-04-09T13:49:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MDc3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MTM2OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/162#discussion_r406141369", "bodyText": "just suggestion to extract the source.getProcessId().contains(\".\") ? source.getProcessId().substring(source.getProcessId().lastIndexOf('.') + 1) : source.getProcessId(); to a method.", "author": "tiagodolphine", "createdAt": "2020-04-09T11:34:09Z", "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/graphql/GraphQLSchemaManager.java", "diffHunk": "@@ -140,11 +140,24 @@ private GraphQLSchema createSchema() {\n         return schemaGenerator.makeExecutableSchema(typeDefinitionRegistry, runtimeWiring);\n     }\n \n-    private String getProcessInstanceServiceUrl(DataFetchingEnvironment env) {\n+    protected String getProcessInstanceServiceUrl(DataFetchingEnvironment env) {\n         ProcessInstance source = env.getSource();\n+        if (source == null || source.getEndpoint() == null || source.getProcessId() == null) {\n+            return null;\n+        }\n         String endpoint = source.getEndpoint();\n-        String context = \"/\" + source.getProcessId();\n-        return context.equals(endpoint) ? null : endpoint.substring(0, endpoint.indexOf(context));\n+        LOGGER.debug(\"Process endpoint {}\", endpoint);\n+        if (endpoint.startsWith(\"/\")) {\n+            LOGGER.warn(\"Process '{}' endpoint '{}', does not contain full URL, please review the kogito.service.url system property to point the public URL for this runtime.\",\n+                        source.getProcessId(), endpoint);\n+        }\n+        String context = source.getProcessId().contains(\".\") ? source.getProcessId().substring(source.getProcessId().lastIndexOf('.') + 1) : source.getProcessId();", "originalCommit": "b955ed0eb0226effcf6476d3142fa2a738f1dcfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MDkyNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/162#discussion_r406150924", "bodyText": "done", "author": "cristianonicolai", "createdAt": "2020-04-09T11:54:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MTM2OQ=="}], "type": "inlineReview"}, {"oid": "40c25ad1856590101bf2940eac5ab23b5bbceef1", "url": "https://github.com/kiegroup/kogito-apps/commit/40c25ad1856590101bf2940eac5ab23b5bbceef1", "message": "KOGITO-1732 - Review serviceurl handling", "committedDate": "2020-04-09T11:53:01Z", "type": "forcePushed"}, {"oid": "e17d0e3b52e37a3d6209cc7ceba167373a6c1a64", "url": "https://github.com/kiegroup/kogito-apps/commit/e17d0e3b52e37a3d6209cc7ceba167373a6c1a64", "message": "KOGITO-1732 - Review serviceurl handling", "committedDate": "2020-04-09T11:54:54Z", "type": "commit"}, {"oid": "e17d0e3b52e37a3d6209cc7ceba167373a6c1a64", "url": "https://github.com/kiegroup/kogito-apps/commit/e17d0e3b52e37a3d6209cc7ceba167373a6c1a64", "message": "KOGITO-1732 - Review serviceurl handling", "committedDate": "2020-04-09T11:54:54Z", "type": "forcePushed"}]}