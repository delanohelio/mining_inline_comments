{"pr_number": 372, "pr_title": "KOGITO-2933: Code cleanup on DE components", "pr_createdAt": "2020-08-06T14:12:34Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/372", "timeline": [{"oid": "731f99584d4df07143932d3cbfcec1c774380c9c", "url": "https://github.com/kiegroup/kogito-apps/commit/731f99584d4df07143932d3cbfcec1c774380c9c", "message": "KOGITO-2933: Code cleanup on DE components", "committedDate": "2020-08-06T14:51:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyODgzOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/372#discussion_r466928839", "bodyText": "can we specify type of filterChips ?\nI think it could be\n(filterChips: (chips: string[]) => string[]) => void", "author": "jstastny-cz", "createdAt": "2020-08-07T09:27:53Z", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -15,40 +15,44 @@ import {\n } from '@patternfly/react-core';\n import { GraphQL } from '../../../graphql/types';\n import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n-import gql from 'graphql-tag';\n-import { useApolloClient } from 'react-apollo';\n import { QuestionCircleIcon } from '@patternfly/react-icons';\n-import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import { set, removeDuplicates } from '../../../utils/Utils';\n import '../../styles.css';\n \n-const DomainExplorerFilterOptions = ({\n-  enableCache,\n+interface ResponseType {\n+  loading?: boolean;\n+  data: any;\n+}\n+interface IOwnProps {\n+  filterChips: string[];\n+  finalFilters: object;\n+  generateFilterQuery: () => void;\n+  getQueryTypes: ResponseType;\n+  getSchema: ResponseType;\n+  reset: boolean;\n+  runQuery: boolean;\n+  setFilterChips: (filterChips) => void;", "originalCommit": "731f99584d4df07143932d3cbfcec1c774380c9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyOTI1Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/372#discussion_r466929257", "bodyText": "also here?\nsetFinalFilters: (finalFilters: (filters: string[]) => void) => void;", "author": "jstastny-cz", "createdAt": "2020-08-07T09:28:48Z", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -15,40 +15,44 @@ import {\n } from '@patternfly/react-core';\n import { GraphQL } from '../../../graphql/types';\n import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n-import gql from 'graphql-tag';\n-import { useApolloClient } from 'react-apollo';\n import { QuestionCircleIcon } from '@patternfly/react-icons';\n-import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import { set, removeDuplicates } from '../../../utils/Utils';\n import '../../styles.css';\n \n-const DomainExplorerFilterOptions = ({\n-  enableCache,\n+interface ResponseType {\n+  loading?: boolean;\n+  data: any;\n+}\n+interface IOwnProps {\n+  filterChips: string[];\n+  finalFilters: object;\n+  generateFilterQuery: () => void;\n+  getQueryTypes: ResponseType;\n+  getSchema: ResponseType;\n+  reset: boolean;\n+  runQuery: boolean;\n+  setFilterChips: (filterChips) => void;\n+  setFinalFilters: (finalFilters) => void;", "originalCommit": "731f99584d4df07143932d3cbfcec1c774380c9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyOTc2MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/372#discussion_r466929761", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              setOffset: (offset) => void;\n          \n          \n            \n              setReset: (reset) => void;\n          \n          \n            \n              setRunQuery: (runQuery) => void;\n          \n          \n            \n              setOffset: (offset: number) => void;\n          \n          \n            \n              setReset: (reset: boolean) => void;\n          \n          \n            \n              setRunQuery: (runQuery: boolean) => void;", "author": "jstastny-cz", "createdAt": "2020-08-07T09:29:49Z", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -15,40 +15,44 @@ import {\n } from '@patternfly/react-core';\n import { GraphQL } from '../../../graphql/types';\n import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n-import gql from 'graphql-tag';\n-import { useApolloClient } from 'react-apollo';\n import { QuestionCircleIcon } from '@patternfly/react-icons';\n-import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import { set, removeDuplicates } from '../../../utils/Utils';\n import '../../styles.css';\n \n-const DomainExplorerFilterOptions = ({\n-  enableCache,\n+interface ResponseType {\n+  loading?: boolean;\n+  data: any;\n+}\n+interface IOwnProps {\n+  filterChips: string[];\n+  finalFilters: object;\n+  generateFilterQuery: () => void;\n+  getQueryTypes: ResponseType;\n+  getSchema: ResponseType;\n+  reset: boolean;\n+  runQuery: boolean;\n+  setFilterChips: (filterChips) => void;\n+  setFinalFilters: (finalFilters) => void;\n+  setOffset: (offset) => void;\n+  setReset: (reset) => void;\n+  setRunQuery: (runQuery) => void;", "originalCommit": "731f99584d4df07143932d3cbfcec1c774380c9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMzI1MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/372#discussion_r466933251", "bodyText": "can we specify type of type? :-)", "author": "jstastny-cz", "createdAt": "2020-08-07T09:36:46Z", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -38,22 +38,45 @@ import {\n   KogitoEmptyStateType\n } from '../../Atoms/KogitoEmptyState/KogitoEmptyState';\n \n-const DomainExplorerTable = ({\n+interface RowContent {\n+  cells: string[] | object[];\n+  parent?: number;\n+  isOpen?: boolean;\n+  rowKey: string;\n+}\n+interface IOwnProps {\n+  columnFilters: any[];\n+  displayTable: boolean;\n+  displayEmptyState: boolean;\n+  filterError: string;\n+  finalFilters: object;\n+  filterChips: string[];\n+  handleRetry: () => void;\n+  isLoadingMore: boolean;\n+  offset: number;\n+  onDeleteChip: (type) => void;", "originalCommit": "731f99584d4df07143932d3cbfcec1c774380c9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMzU3OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/372#discussion_r466933578", "bodyText": "also rows, can we define type? even any[] would help at least.", "author": "jstastny-cz", "createdAt": "2020-08-07T09:37:31Z", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -38,22 +38,45 @@ import {\n   KogitoEmptyStateType\n } from '../../Atoms/KogitoEmptyState/KogitoEmptyState';\n \n-const DomainExplorerTable = ({\n+interface RowContent {\n+  cells: string[] | object[];\n+  parent?: number;\n+  isOpen?: boolean;\n+  rowKey: string;\n+}\n+interface IOwnProps {\n+  columnFilters: any[];\n+  displayTable: boolean;\n+  displayEmptyState: boolean;\n+  filterError: string;\n+  finalFilters: object;\n+  filterChips: string[];\n+  handleRetry: () => void;\n+  isLoadingMore: boolean;\n+  offset: number;\n+  onDeleteChip: (type) => void;\n+  parameters: object[];\n+  rows: RowContent[];\n+  selected: string[];\n+  setRows: (rows) => void;", "originalCommit": "731f99584d4df07143932d3cbfcec1c774380c9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzNzA5OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/372#discussion_r466937098", "bodyText": "can we add comment on what does it actually mean when we have true result? The finalFilters check is clear and understandable, but I have issue understanding why parameters need to be greater than 1 to perform any action.", "author": "jstastny-cz", "createdAt": "2020-08-07T09:44:45Z", "path": "ui-packages/packages/common/src/components/Organisms/DomainExplorer/DomainExplorer.tsx", "diffHunk": "@@ -201,6 +207,64 @@ const DomainExplorer: React.FC<IOwnProps> = ({\n     fields: parameters\n   });\n \n+  async function generateFilterQuery() {\n+    setTableLoading(true);\n+    setEnableRefresh(true);\n+    if (\n+      parameters.length > 1 &&", "originalCommit": "731f99584d4df07143932d3cbfcec1c774380c9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk5NzcwNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/372#discussion_r466997704", "bodyText": "@jstastny-cz  added a comment explaining this condition", "author": "Sara4994", "createdAt": "2020-08-07T12:04:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzNzA5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzNzQzMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/372#discussion_r466937432", "bodyText": "here I am not sure what we expect the firstKey to be and why don't we check that particular one.", "author": "jstastny-cz", "createdAt": "2020-08-07T09:45:25Z", "path": "ui-packages/packages/common/src/components/Organisms/DomainExplorer/DomainExplorer.tsx", "diffHunk": "@@ -201,6 +207,64 @@ const DomainExplorer: React.FC<IOwnProps> = ({\n     fields: parameters\n   });\n \n+  async function generateFilterQuery() {\n+    setTableLoading(true);\n+    setEnableRefresh(true);\n+    if (\n+      parameters.length > 1 &&\n+      finalFilters &&\n+      Object.keys(finalFilters).length > 0\n+    ) {\n+      try {\n+        const response = await client.query({\n+          query: gql`\n+            ${domainQuery.query}\n+          `,\n+          variables: domainQuery.variables,\n+          fetchPolicy: enableCache ? 'cache-first' : 'network-only'\n+        });\n+        const firstKey = Object.keys(response.data)[0];", "originalCommit": "731f99584d4df07143932d3cbfcec1c774380c9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk5NzMyNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/372#discussion_r466997325", "bodyText": "@jstastny-cz as discussed, added a check if response.data has length 1", "author": "Sara4994", "createdAt": "2020-08-07T12:04:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzNzQzMg=="}], "type": "inlineReview"}, {"oid": "162b7d8fe4f4e7144665496516bf69e272383d2a", "url": "https://github.com/kiegroup/kogito-apps/commit/162b7d8fe4f4e7144665496516bf69e272383d2a", "message": "KOGITO-2933: Code cleanup on DE components", "committedDate": "2020-08-07T12:00:14Z", "type": "forcePushed"}, {"oid": "7ddf4951fc79815088aff36cdf3e7b7a9b44f99e", "url": "https://github.com/kiegroup/kogito-apps/commit/7ddf4951fc79815088aff36cdf3e7b7a9b44f99e", "message": "KOGITO-2933: Code cleanup on DE components", "committedDate": "2020-08-09T09:54:59Z", "type": "forcePushed"}, {"oid": "bcc6cea4d6c191de0b8cf8a4d5fffe10a4f22339", "url": "https://github.com/kiegroup/kogito-apps/commit/bcc6cea4d6c191de0b8cf8a4d5fffe10a4f22339", "message": "KOGITO-2933: Code cleanup on DE components", "committedDate": "2020-08-10T09:59:10Z", "type": "forcePushed"}, {"oid": "7140f5110b8c9c675fbf5be0949639b224e3d77e", "url": "https://github.com/kiegroup/kogito-apps/commit/7140f5110b8c9c675fbf5be0949639b224e3d77e", "message": "KOGITO-2933: Code cleanup on DE components", "committedDate": "2020-08-10T14:14:04Z", "type": "forcePushed"}, {"oid": "cb6c36ca8360f6f343662409c57912d30161f0ba", "url": "https://github.com/kiegroup/kogito-apps/commit/cb6c36ca8360f6f343662409c57912d30161f0ba", "message": "KOGITO-2933: Code cleanup on DE components", "committedDate": "2020-08-10T15:41:57Z", "type": "forcePushed"}, {"oid": "6d7ef4c7ed5029877cb13a23a79a51e2191d0ba0", "url": "https://github.com/kiegroup/kogito-apps/commit/6d7ef4c7ed5029877cb13a23a79a51e2191d0ba0", "message": "KOGITO-2933: Code cleanup on DE components", "committedDate": "2020-08-11T05:20:53Z", "type": "commit"}, {"oid": "6d7ef4c7ed5029877cb13a23a79a51e2191d0ba0", "url": "https://github.com/kiegroup/kogito-apps/commit/6d7ef4c7ed5029877cb13a23a79a51e2191d0ba0", "message": "KOGITO-2933: Code cleanup on DE components", "committedDate": "2020-08-11T05:20:53Z", "type": "forcePushed"}]}