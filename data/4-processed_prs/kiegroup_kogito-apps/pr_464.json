{"pr_number": 464, "pr_title": "KOGITO-2691: Task Console Keycloak authentiation", "pr_createdAt": "2020-09-18T16:50:44Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/464", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA3NDIxOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/464#discussion_r491074218", "bodyText": "@jstastny-cz I made this class as a helper to simplify the tests that require the KogitoAppContext. I added it inside of the 'mocks' folder because I knew it was making sonarcloud to skip it...", "author": "pefernan", "createdAt": "2020-09-18T16:52:52Z", "path": "ui-packages/packages/common/src/environment/auth/tests/mocks/KogitoAppContextTestingUtils.ts", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import * as Keycloak from '../../../../utils/KeycloakClient';\n+import * as KogitoAppContext from '../../../context/KogitoAppContext';\n+import { TestUserSystemImpl } from '../../TestUserSystem';\n+\n+export const testIsAuthEnabledMock = jest.spyOn(Keycloak, 'isAuthEnabled');", "originalCommit": "761cbd18af32af49bf50010b5fc4f39e09d0b7ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2MzIxNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/464#discussion_r494263216", "bodyText": "imo the cleaner solution would be to new folder like utils and exclude it from the sonar reporting too.", "author": "jstastny-cz", "createdAt": "2020-09-24T12:11:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA3NDIxOA=="}], "type": "inlineReview"}, {"oid": "991d519f4ebfe200265fe71674e13f1af1db0b19", "url": "https://github.com/kiegroup/kogito-apps/commit/991d519f4ebfe200265fe71674e13f1af1db0b19", "message": "KOGITO-2691: Task Console Keycloak authentiation", "committedDate": "2020-09-21T07:30:42Z", "type": "forcePushed"}, {"oid": "430cb92f46087c654727ff6bcd2917b9b6b3a616", "url": "https://github.com/kiegroup/kogito-apps/commit/430cb92f46087c654727ff6bcd2917b9b6b3a616", "message": "- Unused pages cleanup", "committedDate": "2020-09-21T14:38:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1NTQwNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/464#discussion_r494255405", "bodyText": "These attributes need to be set at top-level element in the custom component. Here it is the Modal, so please move it there and adapt the type attribute to reflect that.", "author": "jstastny-cz", "createdAt": "2020-09-24T11:57:19Z", "path": "ui-packages/packages/common/src/components/Atoms/AddTestUser/AddTestUser.tsx", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import React, { useState } from 'react';\n+import { componentOuiaProps, OUIAProps } from '../../../utils/OuiaUtils';\n+import {\n+  ActionGroup,\n+  Alert,\n+  Button,\n+  Checkbox,\n+  Form,\n+  FormGroup,\n+  Modal,\n+  ModalVariant,\n+  Stack,\n+  StackItem,\n+  Text,\n+  TextContent,\n+  TextInput,\n+  TextVariants\n+} from '@patternfly/react-core';\n+import {\n+  AppContext,\n+  EnvironmentMode,\n+  useKogitoAppContext\n+} from '../../../environment/context/KogitoAppContext';\n+import {\n+  TestUserManager,\n+  TestUserSystem\n+} from '../../../environment/auth/Auth';\n+\n+interface IOwnProps {\n+  isOpen: boolean;\n+  toggleModal: () => void;\n+}\n+\n+const AddTestUser: React.FC<IOwnProps & OUIAProps> = ({\n+  isOpen,\n+  toggleModal,\n+  ouiaId,\n+  ouiaSafe\n+}) => {\n+  const context: AppContext = useKogitoAppContext();\n+\n+  const [userIdValidated, setUserIdValidated] = useState<any>('default');\n+  const [userIdError, setUserIdError] = useState<string>();\n+\n+  const [userId, setUserId] = useState<string>();\n+\n+  const [groupsValidated, setGroupsValidated] = useState<any>('default');\n+  const [groupsError, setGroupsError] = useState<string>();\n+  const [groups, setGroups] = useState<string>();\n+  const [login, setLogin] = useState<boolean>(true);\n+\n+  const validateUserId = (newUserId: string): boolean => {\n+    setUserId(newUserId);\n+\n+    if (!newUserId || !newUserId.trim()) {\n+      setUserIdValidated('error');\n+      setUserIdError('User Id cannot be empty.');\n+      return false;\n+    }\n+\n+    const testUserSystem: TestUserSystem = context.userSystem as TestUserSystem;\n+    const userManager: TestUserManager = testUserSystem.getUserManager();\n+    const user = userManager.getUser(newUserId);\n+\n+    if (user) {\n+      if (userManager.systemUsers().includes(newUserId)) {\n+        setUserIdValidated('error');\n+        setUserIdError(\n+          `Already exists a system user identified by '${newUserId}'. Please choose another user id.`\n+        );\n+        return false;\n+      }\n+      setUserIdValidated('warning');\n+      setUserIdError(\n+        `Already exists a user identified by '${newUserId}'. Press 'Add' to replace it.`\n+      );\n+      return true;\n+    }\n+\n+    setUserIdValidated('success');\n+    setUserIdError(null);\n+    return true;\n+  };\n+\n+  const checkEmptyArray = (newGroups: string): boolean => {\n+    return (\n+      newGroups.split(',').filter(group => group && group.trim().length > 0)\n+        .length > 0\n+    );\n+  };\n+\n+  const validateGroups = (newGroups: string): boolean => {\n+    setGroups(newGroups);\n+\n+    if (!newGroups || !newGroups.trim() || !checkEmptyArray(newGroups)) {\n+      setGroupsValidated('error');\n+      setGroupsError('User groups cannot be empty.');\n+      return false;\n+    }\n+    setGroupsValidated('success');\n+    setGroupsError(null);\n+    return true;\n+  };\n+\n+  const addUser = () => {\n+    const isUserIdValidated = validateUserId(userId);\n+    const areGroupsValidated = validateGroups(groups);\n+    if (isUserIdValidated && areGroupsValidated) {\n+      const testUserSystem: TestUserSystem = context.userSystem as TestUserSystem;\n+\n+      const userGroups = groups\n+        .split(',')\n+        .map(group => group.trim())\n+        .filter(group => group.length > 0);\n+\n+      testUserSystem.getUserManager().addUser(userId, userGroups);\n+\n+      close();\n+\n+      if (login) {\n+        testUserSystem.su(userId);\n+      }\n+    }\n+  };\n+\n+  const close = () => {\n+    toggleModal();\n+    setUserId(null);\n+    setUserIdValidated('default');\n+    setUserIdError(null);\n+    setGroups(null);\n+    setGroupsValidated('default');\n+    setGroupsError(null);\n+    setLogin(true);\n+  };\n+\n+  if (context.environment.mode !== EnvironmentMode.TEST || !isOpen) {\n+    return null;\n+  }\n+\n+  return (\n+    <Modal\n+      aria-label=\"add-test-user-modal\"\n+      title=\"Add new test user\"\n+      variant={ModalVariant.small}\n+      onClose={close}\n+      isOpen={isOpen}\n+    >\n+      <Stack hasGutter>\n+        <StackItem>\n+          <Alert\n+            title=\"Adds a new user to the user system\"\n+            variant=\"info\"\n+            isInline\n+          >\n+            <TextContent>\n+              <Text component={TextVariants.p}>\n+                Temporarily adds a new user to the user system (only for testing\n+                purposes). Newly added users will be stored in-memory.\n+              </Text>\n+              <Text component={TextVariants.p}>\n+                Refresh the app to clear the test users and leave the user\n+                system in his original state.\n+              </Text>\n+            </TextContent>\n+          </Alert>\n+        </StackItem>\n+        <StackItem isFilled>\n+          <Form {...componentOuiaProps(ouiaId, 'add-test-user-form', ouiaSafe)}>", "originalCommit": "430cb92f46087c654727ff6bcd2917b9b6b3a616", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1NzMzNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/464#discussion_r494257335", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const handleaddUserModalToggle = () => {\n          \n          \n            \n              const handleAddUserModalToggle = () => {", "author": "jstastny-cz", "createdAt": "2020-09-24T12:00:52Z", "path": "ui-packages/packages/common/src/components/Molecules/PageToolbar/PageToolbar.tsx", "diffHunk": "@@ -1,32 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n import React, { useState } from 'react';\n import {\n+  Avatar,\n   Dropdown,\n+  DropdownItem,\n+  DropdownSeparator,\n   DropdownToggle,\n   Toolbar,\n   ToolbarGroup,\n-  ToolbarItem,\n-  DropdownItem,\n-  DropdownSeparator\n+  ToolbarItem\n } from '@patternfly/react-core';\n import accessibleStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\n import { css } from '@patternfly/react-styles';\n import AboutModalBox from '../AboutModalBox/AboutModalBox';\n-import {\n-  getUserName,\n-  handleLogout,\n-  isAuthEnabled\n-} from '../../../utils/KeycloakClient';\n import { componentOuiaProps, OUIAProps } from '../../../utils/OuiaUtils';\n+import userImage from '../../../static/avatar.svg';\n+import {\n+  AppContext,\n+  isContextInTestMode,\n+  useKogitoAppContext\n+} from '../../../environment/context/KogitoAppContext';\n+import PageToolbarUsersDropdownGroup from '../PageToolbarUsersDropdownGroup/PageToolbarUsersDropdownGroup';\n+import AddTestUser from '../../Atoms/AddTestUser/AddTestUser';\n \n const PageToolbar: React.FunctionComponent<OUIAProps> = ({\n   ouiaId,\n   ouiaSafe\n }) => {\n-  const [isDropdownOpen, setDropdownOpen] = useState(false);\n-  const [modalToggle, setmodalToggle] = useState(false);\n+  const [isDropdownOpen, setDropdownOpen] = useState<boolean>(false);\n+  const [modalToggle, setmodalToggle] = useState<boolean>(false);\n+  const [addUserToggle, setAddUserToggle] = useState<boolean>(false);\n+\n+  const context: AppContext = useKogitoAppContext();\n \n-  const handleModalToggle = () => {\n-    setmodalToggle(modalToggle ? false : true);\n+  const testMode = isContextInTestMode(context);\n+\n+  const handleAboutModalToggle = () => {\n+    setmodalToggle(!modalToggle);\n+  };\n+\n+  const handleaddUserModalToggle = () => {", "originalCommit": "430cb92f46087c654727ff6bcd2917b9b6b3a616", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1Nzg0Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/464#discussion_r494257846", "bodyText": "I don't think I get the purpose - why is this called this way?", "author": "jstastny-cz", "createdAt": "2020-09-24T12:01:48Z", "path": "ui-packages/packages/common/src/components/Molecules/PageToolbar/PageToolbar.tsx", "diffHunk": "@@ -36,26 +65,55 @@ const PageToolbar: React.FunctionComponent<OUIAProps> = ({\n   const onDropdownSelect = () => {\n     setDropdownOpen(!isDropdownOpen);\n   };\n-  const userDropdownItems = [\n-    <DropdownItem key={1} onClick={handleModalToggle}>\n+\n+  const getUserName = () => {\n+    return context && context.getCurrentUser()\n+      ? context.getCurrentUser().id\n+      : 'Anonymous';\n+  };\n+\n+  const handleLogout = () => {\n+    if (context.userSystem) {\n+      context.userSystem.logout();\n+    }\n+  };\n+\n+  const userDropdownItems: React.ReactElement[] = [];\n+\n+  userDropdownItems.push(\n+    <DropdownItem\n+      key={userDropdownItems.length}\n+      onClick={handleAboutModalToggle}\n+    >\n       About\n     </DropdownItem>\n-  ];\n+  );\n \n-  if (isAuthEnabled()) {\n+  if (testMode) {\n     userDropdownItems.push(\n-      <DropdownSeparator key={2} />,\n-      <DropdownItem component=\"button\" key={3} onClick={handleLogout}>\n-        Log out\n-      </DropdownItem>\n+      <PageToolbarUsersDropdownGroup\n+        key={userDropdownItems.length}\n+        toggleAddUsersModal={() => setAddUserToggle(true)}\n+      />\n     );\n   }\n \n+  userDropdownItems.push(<DropdownSeparator key={userDropdownItems.length} />);\n+  userDropdownItems.push(\n+    <DropdownItem key={userDropdownItems.length} onClick={handleLogout}>\n+      Log out\n+    </DropdownItem>\n+  );\n+\n   return (\n     <React.Fragment>\n       <AboutModalBox\n         isOpenProp={modalToggle}\n-        handleModalToggleProp={handleModalToggle}\n+        handleModalToggleProp={handleAboutModalToggle}\n+      />\n+      <AddTestUser", "originalCommit": "430cb92f46087c654727ff6bcd2917b9b6b3a616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4MzY2Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/464#discussion_r500083666", "bodyText": "used for testing in dev mode, when auth is configured this does not appear.", "author": "jstastny-cz", "createdAt": "2020-10-06T08:07:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1Nzg0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2MDY3Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/464#discussion_r494260676", "bodyText": "I would prefer for the PageToolbarUsersDropdownGroup to render just as the DropdownGroup  and add the separator to the userDropdownItems here dynamically (not as part of the component render).", "author": "jstastny-cz", "createdAt": "2020-09-24T12:06:36Z", "path": "ui-packages/packages/common/src/components/Molecules/PageToolbar/PageToolbar.tsx", "diffHunk": "@@ -36,26 +65,55 @@ const PageToolbar: React.FunctionComponent<OUIAProps> = ({\n   const onDropdownSelect = () => {\n     setDropdownOpen(!isDropdownOpen);\n   };\n-  const userDropdownItems = [\n-    <DropdownItem key={1} onClick={handleModalToggle}>\n+\n+  const getUserName = () => {\n+    return context && context.getCurrentUser()\n+      ? context.getCurrentUser().id\n+      : 'Anonymous';\n+  };\n+\n+  const handleLogout = () => {\n+    if (context.userSystem) {\n+      context.userSystem.logout();\n+    }\n+  };\n+\n+  const userDropdownItems: React.ReactElement[] = [];\n+\n+  userDropdownItems.push(\n+    <DropdownItem\n+      key={userDropdownItems.length}\n+      onClick={handleAboutModalToggle}\n+    >\n       About\n     </DropdownItem>\n-  ];\n+  );\n \n-  if (isAuthEnabled()) {\n+  if (testMode) {\n     userDropdownItems.push(\n-      <DropdownSeparator key={2} />,\n-      <DropdownItem component=\"button\" key={3} onClick={handleLogout}>\n-        Log out\n-      </DropdownItem>\n+      <PageToolbarUsersDropdownGroup", "originalCommit": "430cb92f46087c654727ff6bcd2917b9b6b3a616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyMDU5Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/464#discussion_r495820593", "bodyText": "+1", "author": "pefernan", "createdAt": "2020-09-28T09:52:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2MDY3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2MTEzNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/464#discussion_r494261136", "bodyText": "OUIA compliance - I'd suggest to remove the fragment and move DropdownSeparator to higher level so that this component renders just as DropdownGroup", "author": "jstastny-cz", "createdAt": "2020-09-24T12:07:23Z", "path": "ui-packages/packages/common/src/components/Molecules/PageToolbarUsersDropdownGroup/PageToolbarUsersDropdownGroup.tsx", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import React from 'react';\n+import {\n+  AppContext,\n+  isContextInTestMode,\n+  useKogitoAppContext\n+} from '../../../environment/context/KogitoAppContext';\n+import { TestUserSystem } from '../../../environment/auth/Auth';\n+import {\n+  DropdownGroup,\n+  DropdownItem,\n+  DropdownSeparator,\n+  Tooltip\n+} from '@patternfly/react-core';\n+\n+interface IOwnProps {\n+  toggleAddUsersModal: () => void;\n+}\n+\n+const PageToolbarUsersDropdownGroup: React.FC<IOwnProps> = ({\n+  toggleAddUsersModal\n+}) => {\n+  const context: AppContext = useKogitoAppContext();\n+\n+  if (!isContextInTestMode(context)) {\n+    return null;\n+  }\n+  const testUserSystem: TestUserSystem = context.userSystem as TestUserSystem;\n+\n+  const users = testUserSystem.getUserManager().listAllUsers();\n+\n+  return (\n+    <>", "originalCommit": "430cb92f46087c654727ff6bcd2917b9b6b3a616", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "82b57b79cbb163a19c0e63bb6ffa6e0b0dc9db03", "url": "https://github.com/kiegroup/kogito-apps/commit/82b57b79cbb163a19c0e63bb6ffa6e0b0dc9db03", "message": "- Fetched last changes\n- Code review changes", "committedDate": "2020-10-02T15:02:02Z", "type": "forcePushed"}, {"oid": "79db601857a8b8c4630778f6074be398cf9acc8f", "url": "https://github.com/kiegroup/kogito-apps/commit/79db601857a8b8c4630778f6074be398cf9acc8f", "message": "- Fetched last changes\n- Code review changes", "committedDate": "2020-10-02T15:03:59Z", "type": "forcePushed"}, {"oid": "e2b11e77a30598dfe505868a500c3e7f05e4227b", "url": "https://github.com/kiegroup/kogito-apps/commit/e2b11e77a30598dfe505868a500c3e7f05e4227b", "message": "- Fetched last changes\n- Code review changes", "committedDate": "2020-10-04T19:43:47Z", "type": "forcePushed"}, {"oid": "957e84fdbe0c244d80e9d149cfe68a43a6295669", "url": "https://github.com/kiegroup/kogito-apps/commit/957e84fdbe0c244d80e9d149cfe68a43a6295669", "message": "- Fetched last changes\n- Code review changes", "committedDate": "2020-10-04T19:45:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyNDcwMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/464#discussion_r499524700", "bodyText": "@pefernan My mistake, The property we should use to enable disable security must be \"quarkus.oidc.tenant-enabled\" instead of \"quarkus.oidc.enabled\". Regarding is the used to enable/disable security at runtime. This change have to be applied to management console too.", "author": "nmirasch", "createdAt": "2020-10-05T11:20:55Z", "path": "task-console/src/main/java/org/kie/kogito/task/console/VertxRouter.java", "diffHunk": "@@ -41,6 +41,10 @@\n     @ConfigProperty(name = \"kogito.dataindex.http.url\", defaultValue = \"http://localhost:8180\")\n     String dataIndexHttpURL;\n \n+    @Inject\n+    @ConfigProperty(name = \"quarkus.oidc.enabled\", defaultValue = \"false\")", "originalCommit": "957e84fdbe0c244d80e9d149cfe68a43a6295669", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d2c4821c1779bdb4284c096bab0a3906ee2357d5", "url": "https://github.com/kiegroup/kogito-apps/commit/d2c4821c1779bdb4284c096bab0a3906ee2357d5", "message": "KOGITO-2691: Task Console Keycloak authentiation", "committedDate": "2020-10-05T13:42:02Z", "type": "commit"}, {"oid": "e71cd132821e72fca49664eb287f3ee24a1f2b42", "url": "https://github.com/kiegroup/kogito-apps/commit/e71cd132821e72fca49664eb287f3ee24a1f2b42", "message": "- added mock data", "committedDate": "2020-10-05T13:42:02Z", "type": "commit"}, {"oid": "73e76a020c55398b7e44528773a2dd8e31d6f598", "url": "https://github.com/kiegroup/kogito-apps/commit/73e76a020c55398b7e44528773a2dd8e31d6f598", "message": "- Unused pages cleanup", "committedDate": "2020-10-05T13:42:03Z", "type": "commit"}, {"oid": "91d33fdf30bb0562bc4c3ff82a575cc2af63a689", "url": "https://github.com/kiegroup/kogito-apps/commit/91d33fdf30bb0562bc4c3ff82a575cc2af63a689", "message": "- Fetched last changes\n- Code review changes", "committedDate": "2020-10-05T13:42:45Z", "type": "commit"}, {"oid": "df34237b25942768d4fe14eef5cdddff4ff4e26a", "url": "https://github.com/kiegroup/kogito-apps/commit/df34237b25942768d4fe14eef5cdddff4ff4e26a", "message": "- Code changes", "committedDate": "2020-10-05T14:26:02Z", "type": "forcePushed"}, {"oid": "5ec8b2627ac1c4ea98dcf7bd1fe13a5dfd3855fb", "url": "https://github.com/kiegroup/kogito-apps/commit/5ec8b2627ac1c4ea98dcf7bd1fe13a5dfd3855fb", "message": "- Code changes", "committedDate": "2020-10-05T14:30:12Z", "type": "forcePushed"}, {"oid": "d180bee244001be4e3c849c55337badd41717803", "url": "https://github.com/kiegroup/kogito-apps/commit/d180bee244001be4e3c849c55337badd41717803", "message": "- Code changes", "committedDate": "2020-10-05T18:39:16Z", "type": "commit"}, {"oid": "d180bee244001be4e3c849c55337badd41717803", "url": "https://github.com/kiegroup/kogito-apps/commit/d180bee244001be4e3c849c55337badd41717803", "message": "- Code changes", "committedDate": "2020-10-05T18:39:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4OTMzOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/464#discussion_r500089338", "bodyText": "This would exclude all the utils, which is not desirable imo (as there are ), I think **/tests/utils/** could be better fitting our needs.", "author": "jstastny-cz", "createdAt": "2020-10-06T08:17:20Z", "path": "ui-packages/pom.xml", "diffHunk": "@@ -22,7 +22,7 @@\n       ${path.to.packages}/task-console/src,\n       ${path.to.packages}/trusty/src\n     </sonar.sources>\n-    <sonar.exclusions>**/__mocks__/**,**/mocks/**,**/*.stories.tsx</sonar.exclusions>\n+    <sonar.exclusions>**/__mocks__/**,**/mocks/**,**/utils/**,**/*.stories.tsx</sonar.exclusions>", "originalCommit": "d180bee244001be4e3c849c55337badd41717803", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8b62e2acc2d29b0fed29b29036de38085bf956a9", "url": "https://github.com/kiegroup/kogito-apps/commit/8b62e2acc2d29b0fed29b29036de38085bf956a9", "message": "- Improved sonar exclusions", "committedDate": "2020-10-06T08:23:50Z", "type": "commit"}]}