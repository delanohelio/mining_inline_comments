{"pr_number": 433, "pr_title": "KOGITO-3194 - add list feature type to support collections in expl-service", "pr_createdAt": "2020-09-02T08:30:28Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/433", "timeline": [{"oid": "2042a6bc518e7c96cab9f4c174b1e8218e8da600", "url": "https://github.com/kiegroup/kogito-apps/commit/2042a6bc518e7c96cab9f4c174b1e8218e8da600", "message": "KOGITO-3194 - add list feature type to support collections in expl-service", "committedDate": "2020-09-02T08:28:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk3NTIzMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r481975233", "bodyText": "Why this double wrapping? new ArrayList<>(list) should be enough", "author": "danielezonca", "createdAt": "2020-09-02T10:45:37Z", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java", "diffHunk": "@@ -363,6 +364,35 @@\n             return new Value<>(Currency.getInstance(Locale.getDefault()));\n         }\n \n+        @Override\n+        public List<double[]> encode(Value<?> target, Value<?>... values) {\n+            return encodeEquals(target, values);\n+        }\n+    },\n+\n+    LIST(\"list\") {\n+        @Override\n+        public Value<?> drop(Value<?> value) {\n+            return new Value<>(Collections.emptyList());\n+        }\n+\n+        @Override\n+        public Value<?> perturb(Value<?> value, PerturbationContext perturbationContext) {\n+            List<?> copy;\n+            if (value.getUnderlyingObject() instanceof List) {\n+                List<?> list = (List<?>) value.getUnderlyingObject();\n+                copy = new ArrayList<>(List.copyOf(list));", "originalCommit": "2042a6bc518e7c96cab9f4c174b1e8218e8da600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAxMDI3Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r482010276", "bodyText": "correct, it's an oversight.", "author": "tteofili", "createdAt": "2020-09-02T11:53:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk3NTIzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk3NjY5MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r481976690", "bodyText": "I think it makes more sense to raise an exception if user tries to perturb a list but the value is not a list. Wdyt?", "author": "danielezonca", "createdAt": "2020-09-02T10:48:10Z", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java", "diffHunk": "@@ -363,6 +364,35 @@\n             return new Value<>(Currency.getInstance(Locale.getDefault()));\n         }\n \n+        @Override\n+        public List<double[]> encode(Value<?> target, Value<?>... values) {\n+            return encodeEquals(target, values);\n+        }\n+    },\n+\n+    LIST(\"list\") {\n+        @Override\n+        public Value<?> drop(Value<?> value) {\n+            return new Value<>(Collections.emptyList());\n+        }\n+\n+        @Override\n+        public Value<?> perturb(Value<?> value, PerturbationContext perturbationContext) {\n+            List<?> copy;\n+            if (value.getUnderlyingObject() instanceof List) {\n+                List<?> list = (List<?>) value.getUnderlyingObject();\n+                copy = new ArrayList<>(List.copyOf(list));\n+                int[] indexesToBePerturbed = perturbationContext.getRandom().ints(0, copy.size()).distinct()\n+                        .limit(perturbationContext.getNoOfPerturbations()).toArray();\n+                for (int index : indexesToBePerturbed) {\n+                    copy.remove(index);\n+                }\n+            } else {\n+                copy = Collections.emptyList();", "originalCommit": "2042a6bc518e7c96cab9f4c174b1e8218e8da600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAxMDIzNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r482010235", "bodyText": "+1", "author": "tteofili", "createdAt": "2020-09-02T11:53:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk3NjY5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk3NzY1MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r481977650", "bodyText": "Now that we handle all the types I think it could make sense to throw an exception here (actually this should never happen). Wdyt?", "author": "danielezonca", "createdAt": "2020-09-02T10:49:55Z", "path": "explainability/explainability-service/src/main/java/org/kie/kogito/explainability/ConversionUtils.java", "diffHunk": "@@ -41,26 +47,51 @@ private ConversionUtils() {\n \n     protected static Feature toFeature(String name, Object value) {\n         if (value instanceof JsonObject) {\n-            return new Feature(name, Type.COMPOSITE, new Value<>(toFeatureList((JsonObject) value)));\n+            return FeatureFactory.newCompositeFeature(name, toFeatureList((JsonObject) value));\n         }\n         return toTypeValuePair(value)\n                 .map(p -> new Feature(name, p.getLeft(), p.getRight()))\n                 .orElse(null);\n     }\n \n     public static Feature toFeature(String name, TypedValue value) {\n-        // TODO: handle COLLECTION values https://issues.redhat.com/browse/KOGITO-3194\n         if (value.isUnit()) {\n             return toTypeValuePair(value.toUnit().getValue())\n                     .map(p -> new Feature(name, p.getLeft(), p.getRight()))\n                     .orElse(null);\n         }\n         if (value.isStructure()) {\n-            return new Feature(name, Type.COMPOSITE, new Value<>(toFeatureList(value.toStructure().getValue())));\n+            return FeatureFactory.newCompositeFeature(name, toFeatureList(value.toStructure().getValue()));\n+        }\n+        if (value.isCollection()) {\n+            return FeatureFactory.newListFeature(name, toList(value.toCollection()));\n         }\n         return null;", "originalCommit": "2042a6bc518e7c96cab9f4c174b1e8218e8da600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAyNjkzMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r482026933", "bodyText": "+1", "author": "tteofili", "createdAt": "2020-09-02T12:24:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk3NzY1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk3ODkxNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r481978915", "bodyText": "protected", "author": "danielezonca", "createdAt": "2020-09-02T10:52:14Z", "path": "explainability/explainability-service/src/main/java/org/kie/kogito/explainability/ConversionUtils.java", "diffHunk": "@@ -41,26 +47,51 @@ private ConversionUtils() {\n \n     protected static Feature toFeature(String name, Object value) {\n         if (value instanceof JsonObject) {\n-            return new Feature(name, Type.COMPOSITE, new Value<>(toFeatureList((JsonObject) value)));\n+            return FeatureFactory.newCompositeFeature(name, toFeatureList((JsonObject) value));\n         }\n         return toTypeValuePair(value)\n                 .map(p -> new Feature(name, p.getLeft(), p.getRight()))\n                 .orElse(null);\n     }\n \n     public static Feature toFeature(String name, TypedValue value) {\n-        // TODO: handle COLLECTION values https://issues.redhat.com/browse/KOGITO-3194\n         if (value.isUnit()) {\n             return toTypeValuePair(value.toUnit().getValue())\n                     .map(p -> new Feature(name, p.getLeft(), p.getRight()))\n                     .orElse(null);\n         }\n         if (value.isStructure()) {\n-            return new Feature(name, Type.COMPOSITE, new Value<>(toFeatureList(value.toStructure().getValue())));\n+            return FeatureFactory.newCompositeFeature(name, toFeatureList(value.toStructure().getValue()));\n+        }\n+        if (value.isCollection()) {\n+            return FeatureFactory.newListFeature(name, toList(value.toCollection()));\n         }\n         return null;\n     }\n \n+    private static List<Object> toList(CollectionValue collectionValue) {", "originalCommit": "2042a6bc518e7c96cab9f4c174b1e8218e8da600", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4NDQ2OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r481984469", "bodyText": "Now that we handle all the types I think it could make sense to throw an exception here (actually this should never happen). Wdyt?", "author": "danielezonca", "createdAt": "2020-09-02T11:03:14Z", "path": "explainability/explainability-service/src/main/java/org/kie/kogito/explainability/ConversionUtils.java", "diffHunk": "@@ -99,14 +130,14 @@ protected static Output toOutput(String name, Object value) {\n     }\n \n     public static Output toOutput(String name, TypedValue value) {\n-        // TODO: handle COLLECTION values https://issues.redhat.com/browse/KOGITO-3194\n         if (value.isUnit()) {\n             return toTypeValuePair(value.toUnit().getValue())\n                     .map(p -> new Output(name, p.getLeft(), p.getRight(), 1d))\n                     .orElse(null);\n-        }\n-        if (value.isStructure()) {\n+        } else if (value.isStructure()) {\n             return new Output(name, Type.COMPOSITE, new Value<>(toFeatureList(value.toStructure().getValue())), 1d);\n+        } else if (value.isCollection()) {\n+            return new Output(name, Type.LIST, new Value<>(toList(value.toCollection())), 1d);\n         }\n         return null;", "originalCommit": "2042a6bc518e7c96cab9f4c174b1e8218e8da600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAyNzA4OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r482027088", "bodyText": "+1", "author": "tteofili", "createdAt": "2020-09-02T12:25:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4NDQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwNDEyMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r482904121", "bodyText": "It is not resolved yet :)", "author": "danielezonca", "createdAt": "2020-09-03T11:23:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4NDQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkxNjU1Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r482916557", "bodyText": "Type.LIST has been dropped and this changed to use Type.COMPOSITE, not sure why it doesn't show up here ...", "author": "tteofili", "createdAt": "2020-09-03T11:47:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4NDQ2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4ODQxMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r481988412", "bodyText": "Can you please add some tests with List of Structure and List of List?\nCan you also improve this last assertion? For example you can verify that the internal object type is correct in addition", "author": "danielezonca", "createdAt": "2020-09-02T11:11:26Z", "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/model/TypeTest.java", "diffHunk": "@@ -143,6 +144,21 @@ void testPerturbCompositeFeature() {\n         assertNotEquals(value, perturbedValue);\n     }\n \n+    @Test\n+    void testPerturbListFeature() {\n+        PerturbationContext perturbationContext = new PerturbationContext(new Random(), 2);\n+        List<Double> list = new LinkedList<>();\n+        list.add(1d);\n+        list.add(2d);\n+        list.add(3d);\n+        list.add(4d);\n+        Feature feature = FeatureFactory.newListFeature(\"name\", list);\n+        Value<?> value = feature.getValue();\n+        Value<?> perturbedValue = feature.getType().perturb(value, perturbationContext);\n+        assertNotNull(perturbedValue);\n+        assertNotEquals(value, perturbedValue);", "originalCommit": "2042a6bc518e7c96cab9f4c174b1e8218e8da600", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MDY3MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r481990671", "bodyText": "Can you please clarify the scope of this perturb method? As far as I can see it generates a list of random numbers and then it uses them as index to remove elements.\nIn other words if it generates all the index the result will be an empty list etc but the values are not changed.\nI was expecting more a method that alter the values inside the list and not only the number of elements", "author": "danielezonca", "createdAt": "2020-09-02T11:16:02Z", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java", "diffHunk": "@@ -363,6 +364,35 @@\n             return new Value<>(Currency.getInstance(Locale.getDefault()));\n         }\n \n+        @Override\n+        public List<double[]> encode(Value<?> target, Value<?>... values) {\n+            return encodeEquals(target, values);\n+        }\n+    },\n+\n+    LIST(\"list\") {\n+        @Override\n+        public Value<?> drop(Value<?> value) {\n+            return new Value<>(Collections.emptyList());\n+        }\n+\n+        @Override\n+        public Value<?> perturb(Value<?> value, PerturbationContext perturbationContext) {\n+            List<?> copy;\n+            if (value.getUnderlyingObject() instanceof List) {\n+                List<?> list = (List<?>) value.getUnderlyingObject();\n+                copy = new ArrayList<>(List.copyOf(list));\n+                int[] indexesToBePerturbed = perturbationContext.getRandom().ints(0, copy.size()).distinct()\n+                        .limit(perturbationContext.getNoOfPerturbations()).toArray();\n+                for (int index : indexesToBePerturbed) {\n+                    copy.remove(index);\n+                }", "originalCommit": "2042a6bc518e7c96cab9f4c174b1e8218e8da600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg1MTYzNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r482851634", "bodyText": "agreed, I decided to drop the Type.LIST in favor of using Type.COMPOSITE.", "author": "tteofili", "createdAt": "2020-09-03T09:46:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MDY3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5Mjg2NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r481992865", "bodyText": "Can you explain this block of code?\nI don't understand why we will have a completely different content for the list based on the type: if it is a unit it will be a list of JsonNode, if it is a structure we will have a list of list of Feature while if it is a collection we will nest another list.\nIs this expected?", "author": "danielezonca", "createdAt": "2020-09-02T11:20:17Z", "path": "explainability/explainability-service/src/main/java/org/kie/kogito/explainability/ConversionUtils.java", "diffHunk": "@@ -41,26 +47,51 @@ private ConversionUtils() {\n \n     protected static Feature toFeature(String name, Object value) {\n         if (value instanceof JsonObject) {\n-            return new Feature(name, Type.COMPOSITE, new Value<>(toFeatureList((JsonObject) value)));\n+            return FeatureFactory.newCompositeFeature(name, toFeatureList((JsonObject) value));\n         }\n         return toTypeValuePair(value)\n                 .map(p -> new Feature(name, p.getLeft(), p.getRight()))\n                 .orElse(null);\n     }\n \n     public static Feature toFeature(String name, TypedValue value) {\n-        // TODO: handle COLLECTION values https://issues.redhat.com/browse/KOGITO-3194\n         if (value.isUnit()) {\n             return toTypeValuePair(value.toUnit().getValue())\n                     .map(p -> new Feature(name, p.getLeft(), p.getRight()))\n                     .orElse(null);\n         }\n         if (value.isStructure()) {\n-            return new Feature(name, Type.COMPOSITE, new Value<>(toFeatureList(value.toStructure().getValue())));\n+            return FeatureFactory.newCompositeFeature(name, toFeatureList(value.toStructure().getValue()));\n+        }\n+        if (value.isCollection()) {\n+            return FeatureFactory.newListFeature(name, toList(value.toCollection()));\n         }\n         return null;\n     }\n \n+    private static List<Object> toList(CollectionValue collectionValue) {\n+        Collection<TypedValue> values = collectionValue.getValue();\n+        List<Object> list = new LinkedList<>();\n+        for (TypedValue typedValue : values) {\n+            if (typedValue.isUnit()) {\n+                UnitValue unitValue = typedValue.toUnit();\n+                JsonNode jsonNode = unitValue.getValue();\n+                list.add(jsonNode);\n+            } else if (typedValue.isStructure()) {\n+                StructureValue structureValue = typedValue.toStructure();\n+                Map<String, TypedValue> map = structureValue.getValue();\n+                List<Feature> features = toFeatureList(map);\n+                list.add(features);\n+            } else if (typedValue.isCollection()) {\n+                CollectionValue nestedCollectionValue = typedValue.toCollection();\n+                List<Object> nested = toList(nestedCollectionValue);\n+                list.add(nested);\n+            }", "originalCommit": "2042a6bc518e7c96cab9f4c174b1e8218e8da600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg1MTI3OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r482851279", "bodyText": "after reviewing the code I think this can much better resolved by using Type.COMPOSITE because it automatically handles \"deep\" perturbation of the items of the list and doesn't require this typed handling of the items of the list (they all get handled as Features).", "author": "tteofili", "createdAt": "2020-09-03T09:46:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5Mjg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MzE5Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r481993196", "bodyText": "Can you please add a test with List of Structure and List of List?", "author": "danielezonca", "createdAt": "2020-09-02T11:20:49Z", "path": "explainability/explainability-service/src/test/java/org/kie/kogito/explainability/ConversionUtilsTest.java", "diffHunk": "@@ -85,8 +85,17 @@ void toFeatureTypedValue() {\n         assertEquals(Type.TEXT, features.get(0).getType());\n         assertEquals(\"stringValue\", features.get(0).getValue().getUnderlyingObject());\n \n-        // TODO add collection support https://issues.redhat.com/browse/KOGITO-3194\n-        assertNull(ConversionUtils.toFeature(\"name\", new CollectionValue(\"list\")));\n+        List<TypedValue> values = List.of(new UnitValue(\"number\", new DoubleNode(0d)),\n+                                          new UnitValue(\"number\", new DoubleNode(1d)));\n+        Feature collectionFeature = ConversionUtils.toFeature(\"name\", new CollectionValue(\"list\", values));\n+        assertNotNull(collectionFeature);\n+        assertEquals(\"name\", collectionFeature.getName());\n+        assertEquals(Type.LIST, collectionFeature.getType());\n+        assertTrue(collectionFeature.getValue().getUnderlyingObject() instanceof List);\n+        @SuppressWarnings(\"unchecked\")\n+        List<Double> objects = (List<Double>) collectionFeature.getValue().getUnderlyingObject();\n+        assertEquals(2, objects.size());", "originalCommit": "2042a6bc518e7c96cab9f4c174b1e8218e8da600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg0ODIxNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r482848215", "bodyText": "I've added a test with a List of List of Structures.", "author": "tteofili", "createdAt": "2020-09-03T09:41:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MzE5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MzkyMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r481993923", "bodyText": "Can you please add a test with List of Structure and List of List?\nPlease improve the assertions too to verify the content too", "author": "danielezonca", "createdAt": "2020-09-02T11:22:09Z", "path": "explainability/explainability-service/src/test/java/org/kie/kogito/explainability/ConversionUtilsTest.java", "diffHunk": "@@ -133,8 +142,9 @@ void toOutputTypedValue() {\n         assertEquals(Type.TEXT, features.get(0).getType());\n         assertEquals(\"stringValue\", features.get(0).getValue().getUnderlyingObject());\n \n-        // TODO add collection support https://issues.redhat.com/browse/KOGITO-3194\n-        assertNull(ConversionUtils.toOutput(\"name\", new CollectionValue(\"list\")));\n+        List<TypedValue> values = List.of(new UnitValue(\"number\", new DoubleNode(0d)),\n+                                          new UnitValue(\"number\", new DoubleNode(1d)));\n+        assertNotNull(ConversionUtils.toOutput(\"name\", new CollectionValue(\"list\", values)));", "originalCommit": "2042a6bc518e7c96cab9f4c174b1e8218e8da600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg0ODEzNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r482848137", "bodyText": "I've added a test with a List of List of Structures.", "author": "tteofili", "createdAt": "2020-09-03T09:41:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MzkyMw=="}], "type": "inlineReview"}, {"oid": "d6dfa665d02a20270f01bd08efd66798344f368b", "url": "https://github.com/kiegroup/kogito-apps/commit/d6dfa665d02a20270f01bd08efd66798344f368b", "message": "KOGITO-3194 - dropped Type.LIST, switched to Type.COMPOSITE for CollectionValue", "committedDate": "2020-09-03T09:37:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwMzYwNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r482903607", "bodyText": "Unused import?", "author": "danielezonca", "createdAt": "2020-09-03T11:22:25Z", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java", "diffHunk": "@@ -22,6 +22,7 @@\n import java.time.temporal.ChronoUnit;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;", "originalCommit": "d6dfa665d02a20270f01bd08efd66798344f368b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwNjI5NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r482906294", "bodyText": "sure", "author": "tteofili", "createdAt": "2020-09-03T11:27:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwMzYwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwMzczMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r482903731", "bodyText": "Unused import?", "author": "danielezonca", "createdAt": "2020-09-03T11:22:41Z", "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/model/TypeTest.java", "diffHunk": "@@ -14,6 +14,7 @@\n import org.junit.jupiter.params.provider.EnumSource;\n \n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;", "originalCommit": "d6dfa665d02a20270f01bd08efd66798344f368b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwNjM1Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r482906352", "bodyText": "sure", "author": "tteofili", "createdAt": "2020-09-03T11:28:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwMzczMQ=="}], "type": "inlineReview"}, {"oid": "c4c90cc006d1cd7ddfebedbc895c52519b6d4552", "url": "https://github.com/kiegroup/kogito-apps/commit/c4c90cc006d1cd7ddfebedbc895c52519b6d4552", "message": "KOGITO-3194 - removed unused imports", "committedDate": "2020-09-03T11:45:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcxNDcxNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r484714716", "bodyText": "why linkedlist?", "author": "r00ta", "createdAt": "2020-09-08T07:40:48Z", "path": "explainability/explainability-service/src/main/java/org/kie/kogito/explainability/ConversionUtils.java", "diffHunk": "@@ -41,24 +47,36 @@ private ConversionUtils() {\n \n     protected static Feature toFeature(String name, Object value) {\n         if (value instanceof JsonObject) {\n-            return new Feature(name, Type.COMPOSITE, new Value<>(toFeatureList((JsonObject) value)));\n+            return FeatureFactory.newCompositeFeature(name, toFeatureList((JsonObject) value));\n         }\n         return toTypeValuePair(value)\n                 .map(p -> new Feature(name, p.getLeft(), p.getRight()))\n                 .orElse(null);\n     }\n \n     public static Feature toFeature(String name, TypedValue value) {\n-        // TODO: handle COLLECTION values https://issues.redhat.com/browse/KOGITO-3194\n         if (value.isUnit()) {\n             return toTypeValuePair(value.toUnit().getValue())\n                     .map(p -> new Feature(name, p.getLeft(), p.getRight()))\n                     .orElse(null);\n+        } else if (value.isStructure()) {\n+            return FeatureFactory.newCompositeFeature(name, toFeatureList(value.toStructure().getValue()));\n+        } else if (value.isCollection()) {\n+            return FeatureFactory.newCompositeFeature(name, toFeatureList(name, value.toCollection()));\n+        } else {\n+            throw new RuntimeException(String.format(\"unexpected value kind %s\", value.getKind()));\n         }\n-        if (value.isStructure()) {\n-            return new Feature(name, Type.COMPOSITE, new Value<>(toFeatureList(value.toStructure().getValue())));\n+    }\n+\n+    protected static List<Feature> toFeatureList(String name, CollectionValue collectionValue) {\n+        Collection<TypedValue> values = collectionValue.getValue();\n+        List<Feature> list = new LinkedList<>();", "originalCommit": "c4c90cc006d1cd7ddfebedbc895c52519b6d4552", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDczOTY2MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r484739661", "bodyText": "it's ok to put ArrayList since we know the List size in advance, but I doubt the scale of no. of items we expect to have in such collections would cause a noticeable difference in practice.", "author": "tteofili", "createdAt": "2020-09-08T08:23:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcxNDcxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcxNTQzMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r484715432", "bodyText": "any alternative to the name objects that is too much generic?", "author": "r00ta", "createdAt": "2020-09-08T07:42:08Z", "path": "explainability/explainability-service/src/test/java/org/kie/kogito/explainability/ConversionUtilsTest.java", "diffHunk": "@@ -85,8 +87,81 @@ void toFeatureTypedValue() {\n         assertEquals(Type.TEXT, features.get(0).getType());\n         assertEquals(\"stringValue\", features.get(0).getValue().getUnderlyingObject());\n \n-        // TODO add collection support https://issues.redhat.com/browse/KOGITO-3194\n-        assertNull(ConversionUtils.toFeature(\"name\", new CollectionValue(\"list\")));\n+        List<TypedValue> values = List.of(new UnitValue(\"number\", new DoubleNode(0d)),\n+                                          new UnitValue(\"number\", new DoubleNode(1d)));\n+        Feature collectionFeature = ConversionUtils.toFeature(\"name\", new CollectionValue(\"list\", values));\n+        assertNotNull(collectionFeature);\n+        assertEquals(\"name\", collectionFeature.getName());\n+        assertEquals(Type.COMPOSITE, collectionFeature.getType());\n+        assertTrue(collectionFeature.getValue().getUnderlyingObject() instanceof List);\n+        @SuppressWarnings(\"unchecked\")\n+        List<Feature> objects = (List<Feature>) collectionFeature.getValue().getUnderlyingObject();\n+        assertEquals(2, objects.size());\n+        for (Feature f : objects) {\n+            assertNotNull(f);\n+            assertNotNull(f.getName());\n+            assertNotNull(f.getType());\n+            assertEquals(Type.NUMBER, f.getType());\n+            assertNotNull(f.getValue());\n+        }\n+    }\n+\n+    @Test\n+    void testNestedCollection() {\n+        Collection<TypedValue> depthTwoOne = new ArrayList<>(2);\n+        depthTwoOne.add(new StructureValue(\"complex\", singletonMap(\n+                \"key\",\n+                new UnitValue(\"string1\", new TextNode(\"value one\")))));\n+        depthTwoOne.add(new StructureValue(\"complex\", singletonMap(\n+                \"key\",\n+                new UnitValue(\"string1\", new TextNode(\"value two\")))));\n+\n+        Collection<TypedValue> depthTwoTwo = new ArrayList<>(2);\n+        depthTwoTwo.add(new StructureValue(\"complex\", singletonMap(\n+                \"key\",\n+                new UnitValue(\"string1\", new TextNode(\"value three\")))));\n+        depthTwoTwo.add(new StructureValue(\"complex\", singletonMap(\n+                \"key\",\n+                new UnitValue(\"string1\", new TextNode(\"value four\")))));\n+\n+        CollectionValue depthOneLeft = new CollectionValue(\"list\", depthTwoOne);\n+        CollectionValue depthOneRight = new CollectionValue(\"list\", depthTwoTwo);\n+        Collection<TypedValue> depthOne = new ArrayList<>(2);\n+        depthOne.add(depthOneLeft);\n+        depthOne.add(depthOneRight);\n+        CollectionValue value = new CollectionValue(\"list\", depthOne);\n+        Feature collectionFeature = ConversionUtils.toFeature(\"name\", value);\n+        assertNotNull(collectionFeature);\n+        assertEquals(\"name\", collectionFeature.getName());\n+        assertEquals(Type.COMPOSITE, collectionFeature.getType());\n+        assertTrue(collectionFeature.getValue().getUnderlyingObject() instanceof List);\n+        @SuppressWarnings(\"unchecked\")\n+        List<Feature> objects = (List<Feature>) collectionFeature.getValue().getUnderlyingObject();", "originalCommit": "c4c90cc006d1cd7ddfebedbc895c52519b6d4552", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDczNjgyMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r484736822", "bodyText": "what about deepFeatures ? :)", "author": "tteofili", "createdAt": "2020-09-08T08:19:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcxNTQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4MDExOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/433#discussion_r484780119", "bodyText": "fine for me", "author": "r00ta", "createdAt": "2020-09-08T09:28:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcxNTQzMg=="}], "type": "inlineReview"}, {"oid": "879c94409daf21888864da4b481e097107612f79", "url": "https://github.com/kiegroup/kogito-apps/commit/879c94409daf21888864da4b481e097107612f79", "message": "KOGITO-3194 - review based improvements", "committedDate": "2020-09-08T08:25:46Z", "type": "commit"}]}