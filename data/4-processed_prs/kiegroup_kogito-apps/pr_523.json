{"pr_number": 523, "pr_title": "PLANNER-2209: Task management API", "pr_createdAt": "2020-11-04T17:04:48Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/523", "timeline": [{"oid": "8b62b490504763b7748965657b7afcb672ed7bc9", "url": "https://github.com/kiegroup/kogito-apps/commit/8b62b490504763b7748965657b7afcb672ed7bc9", "message": "PLANNER-2209: Task management API", "committedDate": "2020-11-05T08:14:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4MDM0Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/523#discussion_r517880347", "bodyText": "Is the client instance expected to have this timeout changed during runtime? If not, we already have a builder below, so the ProcessServiceClientConfig might be immutable.", "author": "rsynek", "createdAt": "2020-11-05T08:46:41Z", "path": "task-assigning/task-assigning-process-service-client/src/main/java/org/kie/kogito/taskassigning/process/service/client/ProcessServiceClientConfig.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.taskassigning.process.service.client;\n+\n+public class ProcessServiceClientConfig {\n+\n+    private String serviceUrl;\n+\n+    private long connectTimeoutMillis;\n+\n+    private long readTimeoutMillis;\n+\n+    private ProcessServiceClientConfig() {\n+    }\n+\n+    public static Builder newBuilder() {\n+        return new Builder();\n+    }\n+\n+    public void setServiceUrl(String serviceUrl) {\n+        this.serviceUrl = serviceUrl;\n+    }\n+\n+    /**\n+     * Set the connect timeout in milliseconds.\n+     * <p>\n+     * Like JAX-RS's <code>javax.ws.rs.client.ClientBuilder</code>'s\n+     * <code>connectTimeout</code> method, specifying a timeout of 0 represents\n+     * infinity, and negative values are not allowed.\n+     */\n+    public void setConnectTimeoutMillis(long connectTimeoutMillis) {", "originalCommit": "8b62b490504763b7748965657b7afcb672ed7bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5MjE4Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/523#discussion_r517892182", "bodyText": "simplifies the builder implementation, but yeah, it can be immutable.", "author": "wmedvede", "createdAt": "2020-11-05T09:05:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4MDM0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4MDcyMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/523#discussion_r517880720", "bodyText": "May I ask what does the \"MP\" stands for?", "author": "rsynek", "createdAt": "2020-11-05T08:47:20Z", "path": "task-assigning/task-assigning-process-service-client/src/main/java/org/kie/kogito/taskassigning/process/service/client/impl/mp/ProcessServiceClientMP.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.taskassigning.process.service.client.impl.mp;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.kie.kogito.taskassigning.process.service.client.ProcessServiceClient;\n+\n+public class ProcessServiceClientMP implements ProcessServiceClient {", "originalCommit": "8b62b490504763b7748965657b7afcb672ed7bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4Nzc1NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/523#discussion_r517887754", "bodyText": "Stands for MicroProfile, meaning that is the PSC implementation based on Eclipse Micro Profile.", "author": "wmedvede", "createdAt": "2020-11-05T08:58:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4MDcyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4MTMwNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/523#discussion_r517881305", "bodyText": "Is the phase the same as task status? Maybe just a different vocabulary in Kogito?", "author": "rsynek", "createdAt": "2020-11-05T08:48:11Z", "path": "task-assigning/task-assigning-process-service-client/src/main/java/org/kie/kogito/taskassigning/process/service/client/impl/mp/ProcessServiceClientMP.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.taskassigning.process.service.client.impl.mp;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.kie.kogito.taskassigning.process.service.client.ProcessServiceClient;\n+\n+public class ProcessServiceClientMP implements ProcessServiceClient {\n+\n+    private ProcessServiceClientRest client;\n+\n+    public ProcessServiceClientMP(ProcessServiceClientRest client) {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public Set<String> getAvailablePhases(String processId, String processInstanceId, String taskId, String workItemId, String user, List<String> groups) {", "originalCommit": "8b62b490504763b7748965657b7afcb672ed7bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkwMDI3OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/523#discussion_r517900278", "bodyText": "no, phase and status are very close, but mean different things.\n\"phase\":  is the stage in the tasks lifecyle where a given workitem can be at a given moment, or where we want to transition it.\n\"status\": is the state that the workitem have, given that it's in a given phase.\ne.g.\nA workitem in phase \"complete\" will have status \"Completed\"", "author": "wmedvede", "createdAt": "2020-11-05T09:18:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4MTMwNQ=="}], "type": "inlineReview"}, {"oid": "a97a8cfa6f88242706e1e36a5b59b35f39e9ceb4", "url": "https://github.com/kiegroup/kogito-apps/commit/a97a8cfa6f88242706e1e36a5b59b35f39e9ceb4", "message": "PLANNER-2209: Task management API", "committedDate": "2020-11-05T12:11:02Z", "type": "forcePushed"}, {"oid": "36b15a0bbdad5b2c78f5e44865c1ff13e60deebc", "url": "https://github.com/kiegroup/kogito-apps/commit/36b15a0bbdad5b2c78f5e44865c1ff13e60deebc", "message": "PLANNER-2209: Task management API", "committedDate": "2020-11-11T10:11:37Z", "type": "forcePushed"}, {"oid": "9bb8d0ec1eb43eeb01e415efebeecbc97cfe3d2b", "url": "https://github.com/kiegroup/kogito-apps/commit/9bb8d0ec1eb43eeb01e415efebeecbc97cfe3d2b", "message": "PLANNER-2209: Task management API", "committedDate": "2020-11-11T11:34:05Z", "type": "forcePushed"}, {"oid": "9b0680011caa7802e96b830ca8ef4683ffea4eba", "url": "https://github.com/kiegroup/kogito-apps/commit/9b0680011caa7802e96b830ca8ef4683ffea4eba", "message": "PLANNER-2209: Task management API", "committedDate": "2020-11-11T13:50:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgyODU4Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/523#discussion_r524828583", "bodyText": "@wmedvede have you considered using Quarkus REST client/Microprofile via interface definition instead? It feels to me that it would be a much more integrated and easier solution to adopt.", "author": "cristianonicolai", "createdAt": "2020-11-17T01:37:27Z", "path": "task-assigning/task-assigning-process-service-client/src/main/java/org/kie/kogito/taskassigning/process/service/client/ProcessServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.taskassigning.process.service.client;\n+\n+public interface ProcessServiceClientFactory {\n+\n+    ProcessServiceClient newClient(ProcessServiceClientConfig config, AuthenticationCredentials credentials);", "originalCommit": "9b0680011caa7802e96b830ca8ef4683ffea4eba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5MDU3MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/523#discussion_r525090571", "bodyText": "Yes, the Quarkus REST client/Microprofile is being used in the internal implementation of this interface, so by one side yes, it's being used. But the thing is that in general, e.g, with the CDI approach for using the client/Microprofile via interface, you can't model the case of having the same service interface pointing to different URL's, vary the authentication methods, etc. So this setup hides all this internal aspects.", "author": "wmedvede", "createdAt": "2020-11-17T11:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgyODU4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzMDI4Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/523#discussion_r524830282", "bodyText": "@wmedvede wiremock can handle dynamic port natively, see https://github.com/kiegroup/kogito-runtimes/pull/846/files#diff-7c249da939fa07273b07dc5113360f2fb1795512b479e20e125d86fbd9d16954R59", "author": "cristianonicolai", "createdAt": "2020-11-17T01:42:29Z", "path": "task-assigning/task-assigning-process-service-client/src/test/java/org/kie/kogito/taskassigning/process/service/client/WireMockKeycloakResource.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.taskassigning.process.service.client;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.github.tomakehurst.wiremock.matching.UrlPattern;\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.configureFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static javax.ws.rs.core.HttpHeaders.CONTENT_TYPE;\n+import static javax.ws.rs.core.MediaType.APPLICATION_FORM_URLENCODED;\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.kie.kogito.taskassigning.process.service.client.TestUtil.findFreePort;\n+\n+public class WireMockKeycloakResource implements QuarkusTestResourceLifecycleManager {\n+\n+    public static final String KEY_CLOAK_SERVICE_URL = \"keycloak.service.url\";\n+    public static final String REALM = \"kogito-tests\";\n+    public static final String CLIENT_ID = \"kogito-backend-service\";\n+    public static final String SECRET = \"secret\";\n+    public static final String ACCESS_TOKEN = \"ACCESS_TOKEN\";\n+    public static final String REFRESH_TOKEN = \"REFRESH_TOKEN\";\n+    public static final String SESSION_STATE = \"SESSION_STATE\";\n+    public static final String KEYCLOAK_USER = \"KeycloakUser\";\n+    public static final String KEYCLOAK_PASSWORD = \"KeycloakPassword\";\n+\n+    private static final int DEFAULT_PORT = 9788;\n+\n+    private WireMockServer wireMockServer;\n+\n+    @Override\n+    public Map<String, String> start() {\n+        int port = findFreePort(DEFAULT_PORT);\n+        configureFor(port);\n+        wireMockServer = new WireMockServer(port);", "originalCommit": "9b0680011caa7802e96b830ca8ef4683ffea4eba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzNDY5Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/523#discussion_r524834693", "bodyText": "Maybe return a Jackson ObjectNode as it would be a generic JSON here?", "author": "cristianonicolai", "createdAt": "2020-11-17T01:55:57Z", "path": "task-assigning/task-assigning-process-service-client/src/main/java/org/kie/kogito/taskassigning/process/service/client/impl/mp/ProcessServiceClientRest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.taskassigning.process.service.client.impl.mp;\n+\n+import java.io.Closeable;\n+import java.util.List;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+\n+import org.jboss.resteasy.annotations.jaxrs.PathParam;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+\n+public interface ProcessServiceClientRest extends Closeable {\n+\n+    @POST\n+    @Path(\"/{processId}/{processInstanceId}/{taskId}/{workitemId}\")\n+    @Produces(APPLICATION_JSON)\n+    @Consumes(APPLICATION_JSON)\n+    Object transitionTask(@PathParam String processId, @PathParam String processInstanceId, @PathParam String taskId, @PathParam String workitemId,", "originalCommit": "9b0680011caa7802e96b830ca8ef4683ffea4eba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4efb67ec6a4b1f8cda5ae2b6ef8e81bbb9ba4a24", "url": "https://github.com/kiegroup/kogito-apps/commit/4efb67ec6a4b1f8cda5ae2b6ef8e81bbb9ba4a24", "message": "PLANNER-2209: Task management API", "committedDate": "2020-11-17T14:06:30Z", "type": "forcePushed"}, {"oid": "cc4c2b5197a4133ccc68609380891eaf246c8802", "url": "https://github.com/kiegroup/kogito-apps/commit/cc4c2b5197a4133ccc68609380891eaf246c8802", "message": "PLANNER-2209: Task management API", "committedDate": "2020-11-25T07:46:13Z", "type": "commit"}, {"oid": "cc4c2b5197a4133ccc68609380891eaf246c8802", "url": "https://github.com/kiegroup/kogito-apps/commit/cc4c2b5197a4133ccc68609380891eaf246c8802", "message": "PLANNER-2209: Task management API", "committedDate": "2020-11-25T07:46:13Z", "type": "forcePushed"}]}