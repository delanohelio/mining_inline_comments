{"pr_number": 246, "pr_title": "Kogito 2326 - Kogito apps storage abstraction", "pr_createdAt": "2020-06-04T11:27:43Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/246", "timeline": [{"oid": "06a5900346f19c689e83c97b520a2f6580012899", "url": "https://github.com/kiegroup/kogito-apps/commit/06a5900346f19c689e83c97b520a2f6580012899", "message": "Create trustyCI.yml", "committedDate": "2020-05-26T12:43:09Z", "type": "commit"}, {"oid": "e28aaa2c0876b61441bec40203b1ca39d066630d", "url": "https://github.com/kiegroup/kogito-apps/commit/e28aaa2c0876b61441bec40203b1ca39d066630d", "message": "Update trustyCI.yml", "committedDate": "2020-05-26T12:52:33Z", "type": "commit"}, {"oid": "e64db78b9b86b86b39ad74e5ecb482c3738e29a7", "url": "https://github.com/kiegroup/kogito-apps/commit/e64db78b9b86b86b39ad74e5ecb482c3738e29a7", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-05-29T07:46:12Z", "type": "commit"}, {"oid": "4eedb7b29a4eb163eef6e08296b269f07f76a466", "url": "https://github.com/kiegroup/kogito-apps/commit/4eedb7b29a4eb163eef6e08296b269f07f76a466", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-06-04T08:25:27Z", "type": "commit"}, {"oid": "95a89856d1a0d04de27ce0517ddffb5c4edcf931", "url": "https://github.com/kiegroup/kogito-apps/commit/95a89856d1a0d04de27ce0517ddffb5c4edcf931", "message": "create storage abstraction", "committedDate": "2020-06-04T11:20:16Z", "type": "commit"}, {"oid": "16cf560065ac91a5ac1f16bba1c8bcdc4cf74645", "url": "https://github.com/kiegroup/kogito-apps/commit/16cf560065ac91a5ac1f16bba1c8bcdc4cf74645", "message": "Revert \"Update trustyCI.yml\"\n\nThis reverts commit e28aaa2c0876b61441bec40203b1ca39d066630d.", "committedDate": "2020-06-04T11:25:05Z", "type": "commit"}, {"oid": "936b6376ea9a67f5f518da57789f337476d860db", "url": "https://github.com/kiegroup/kogito-apps/commit/936b6376ea9a67f5f518da57789f337476d860db", "message": "Revert \"Create trustyCI.yml\"\n\nThis reverts commit 06a5900346f19c689e83c97b520a2f6580012899.", "committedDate": "2020-06-04T11:25:20Z", "type": "commit"}, {"oid": "279c3265eda41f15a9c7cab798fa0ce29f382dac", "url": "https://github.com/kiegroup/kogito-apps/commit/279c3265eda41f15a9c7cab798fa0ce29f382dac", "message": "Refactor infinispan query tests", "committedDate": "2020-06-04T11:37:17Z", "type": "commit"}, {"oid": "cc6d7ef238643c7de278daa337bd961ac2188671", "url": "https://github.com/kiegroup/kogito-apps/commit/cc6d7ef238643c7de278daa337bd961ac2188671", "message": "refactor infinispan query tests", "committedDate": "2020-06-04T11:42:25Z", "type": "commit"}, {"oid": "7296acfa97640c0727e5bad06413600b86176999", "url": "https://github.com/kiegroup/kogito-apps/commit/7296acfa97640c0727e5bad06413600b86176999", "message": "refactoring data-index-protobuf", "committedDate": "2020-06-04T12:31:11Z", "type": "commit"}, {"oid": "af94b7ee471b1eadf0752b76a089da3cd74560bf", "url": "https://github.com/kiegroup/kogito-apps/commit/af94b7ee471b1eadf0752b76a089da3cd74560bf", "message": "refactoring getProtobufCache", "committedDate": "2020-06-04T14:38:55Z", "type": "commit"}, {"oid": "1c3d2d9e1fb19d2e90cfb5551d9f0a755591875b", "url": "https://github.com/kiegroup/kogito-apps/commit/1c3d2d9e1fb19d2e90cfb5551d9f0a755591875b", "message": "refactoring Storage annotations", "committedDate": "2020-06-04T15:36:56Z", "type": "commit"}, {"oid": "093a0b152d2c75e54a1cddd069a84abbaf08da91", "url": "https://github.com/kiegroup/kogito-apps/commit/093a0b152d2c75e54a1cddd069a84abbaf08da91", "message": "fix pom", "committedDate": "2020-06-04T20:44:15Z", "type": "commit"}, {"oid": "4adfbf90c4509cfcea02c55c93f433d3bb1534ef", "url": "https://github.com/kiegroup/kogito-apps/commit/4adfbf90c4509cfcea02c55c93f433d3bb1534ef", "message": "Fix CacheService annotation", "committedDate": "2020-06-05T09:07:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxMjY5NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435412695", "bodyText": "To be removed?", "author": "danielezonca", "createdAt": "2020-06-04T17:04:19Z", "path": "kogito-storage/kogito-storage-api/pom.xml", "diffHunk": "@@ -0,0 +1,75 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kogito-storage</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+  <name>Kogito :: Kogito Storage API</name>\n+  <artifactId>kogito-storage-api</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-databind</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-annotations</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>jakarta.inject</groupId>\n+      <artifactId>jakarta.inject-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.assertj</groupId>\n+      <artifactId>assertj-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-junit5</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.rest-assured</groupId>\n+      <artifactId>rest-assured</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+<!--  <build>-->\n+<!--    <plugins>-->\n+<!--      <plugin>-->\n+<!--        <groupId>org.jboss.jandex</groupId>-->\n+<!--        <artifactId>jandex-maven-plugin</artifactId>-->\n+<!--        <executions>-->\n+<!--          <execution>-->\n+<!--            <id>make-index</id>-->\n+<!--            <goals>-->\n+<!--              <goal>jandex</goal>-->\n+<!--            </goals>-->\n+<!--          </execution>-->\n+<!--        </executions>-->\n+<!--      </plugin>-->\n+<!--    </plugins>-->\n+<!--  </build>-->", "originalCommit": "1c3d2d9e1fb19d2e90cfb5551d9f0a755591875b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0Mzc0Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435743747", "bodyText": "Can you please rename it kogito-storage-commons?", "author": "danielezonca", "createdAt": "2020-06-05T07:40:06Z", "path": "kogito-storage/pom.xml", "diffHunk": "@@ -0,0 +1,22 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kogito-apps</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kogito-storage</artifactId>", "originalCommit": "1c3d2d9e1fb19d2e90cfb5551d9f0a755591875b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0NTM2NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435745364", "bodyText": "Why these changes? Most (all?) of the codebase use import static", "author": "danielezonca", "createdAt": "2020-06-05T07:43:24Z", "path": "kogito-storage/kogito-storage-api/src/test/java/org/kie/kogito/storage/api/annotations/ProducerTest.java", "diffHunk": "@@ -14,22 +14,20 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.storage;\n+package org.kie.kogito.storage.api.annotations;\n \n import javax.enterprise.inject.Instance;\n \n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n-import org.kie.kogito.index.cache.CacheService;\n+import org.kie.kogito.storage.api.CacheService;\n+import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n+import org.mockito.Mockito;\n import org.mockito.junit.jupiter.MockitoExtension;\n \n-import static org.mockito.Mockito.eq;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;", "originalCommit": "093a0b152d2c75e54a1cddd069a84abbaf08da91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4OTM3Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435789376", "bodyText": "I think storage.api.annotations is misleading for this. Can you please move it to storage.factory?", "author": "danielezonca", "createdAt": "2020-06-05T09:05:34Z", "path": "kogito-storage/kogito-storage-api/src/main/java/org/kie/kogito/storage/api/annotations/Producer.java", "diffHunk": "@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.storage;\n+package org.kie.kogito.storage.api.annotations;", "originalCommit": "093a0b152d2c75e54a1cddd069a84abbaf08da91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4OTUxMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435789512", "bodyText": "I think storage.api.annotations is misleading for this. Can you please move it to storage.factory?", "author": "danielezonca", "createdAt": "2020-06-05T09:05:49Z", "path": "kogito-storage/kogito-storage-api/src/main/java/org/kie/kogito/storage/api/annotations/Storage.java", "diffHunk": "@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.storage;\n+package org.kie.kogito.storage.api.annotations;", "originalCommit": "093a0b152d2c75e54a1cddd069a84abbaf08da91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4OTU4Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435789586", "bodyText": "I think storage.api.annotations is misleading for this. Can you please move it to storage.factory?", "author": "danielezonca", "createdAt": "2020-06-05T09:05:56Z", "path": "kogito-storage/kogito-storage-api/src/main/java/org/kie/kogito/storage/api/annotations/StorageImpl.java", "diffHunk": "@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.storage;\n+package org.kie.kogito.storage.api.annotations;", "originalCommit": "093a0b152d2c75e54a1cddd069a84abbaf08da91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgwMTY1MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435801650", "bodyText": "Can you rename it as Storage?", "author": "danielezonca", "createdAt": "2020-06-05T09:27:39Z", "path": "kogito-storage/kogito-storage-api/src/main/java/org/kie/kogito/storage/api/Cache.java", "diffHunk": "@@ -14,22 +14,35 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.cache;\n+package org.kie.kogito.storage.api;\n \n-import java.util.concurrent.ConcurrentMap;\n+import java.util.Map;\n+import java.util.Set;\n import java.util.function.Consumer;\n \n-import org.kie.kogito.index.query.Query;\n+import org.kie.kogito.storage.api.query.Query;\n \n-public interface Cache<K, V> extends ConcurrentMap<K, V> {\n+public interface Cache<K, V> {", "originalCommit": "093a0b152d2c75e54a1cddd069a84abbaf08da91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgwMTk0Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435801947", "bodyText": "Can you rename it as StorageService?", "author": "danielezonca", "createdAt": "2020-06-05T09:28:10Z", "path": "kogito-storage/kogito-storage-api/src/main/java/org/kie/kogito/storage/api/CacheService.java", "diffHunk": "@@ -14,20 +14,12 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.cache;\n+package org.kie.kogito.storage.api;\n \n import com.fasterxml.jackson.databind.node.ObjectNode;\n-import org.kie.kogito.index.model.Job;\n-import org.kie.kogito.index.model.ProcessInstance;\n-import org.kie.kogito.index.model.UserTaskInstance;\n \n public interface CacheService {", "originalCommit": "093a0b152d2c75e54a1cddd069a84abbaf08da91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgwNTQ0Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435805442", "bodyText": "We are not using IName naming convention for interfaces in this project so please rename it as DataIndexStorageService", "author": "danielezonca", "createdAt": "2020-06-05T09:34:33Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/IDataIndexStorageExtension.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.kie.kogito.index;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.kie.kogito.index.model.Job;\n+import org.kie.kogito.index.model.ProcessInstance;\n+import org.kie.kogito.index.model.UserTaskInstance;\n+import org.kie.kogito.storage.api.Cache;\n+\n+public interface IDataIndexStorageExtension {", "originalCommit": "093a0b152d2c75e54a1cddd069a84abbaf08da91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgwNjE2Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435806162", "bodyText": "Can you please rename it as DataIndexStorageServiceImpl?\nMissing @ApplicationScoped annotation", "author": "danielezonca", "createdAt": "2020-06-05T09:35:54Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/DataIndexStorageExtension.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.kie.kogito.index;\n+\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.kie.kogito.index.model.Job;\n+import org.kie.kogito.index.model.ProcessInstance;\n+import org.kie.kogito.index.model.UserTaskInstance;\n+import org.kie.kogito.storage.api.Cache;\n+import org.kie.kogito.storage.api.CacheService;\n+\n+public class DataIndexStorageExtension implements IDataIndexStorageExtension {", "originalCommit": "093a0b152d2c75e54a1cddd069a84abbaf08da91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgxMTU5OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435811598", "bodyText": "Is this custom? Can we move it to shared library too?", "author": "danielezonca", "createdAt": "2020-06-05T09:45:48Z", "path": "data-index/data-index-storage/data-index-storage-infinispan/src/main/java/org/kie/kogito/index/infinispan/schema/ProtoSchemaAcceptor.java", "diffHunk": "@@ -14,23 +14,23 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.infinispan.protostream;\n+package org.kie.kogito.index.infinispan.schema;\n \n import javax.enterprise.context.ApplicationScoped;\n \n import org.eclipse.microprofile.config.inject.ConfigProperty;\n-import org.kie.kogito.index.schema.SchemaAcceptor;\n-import org.kie.kogito.index.schema.SchemaType;\n+import org.kie.kogito.storage.api.schema.SchemaAcceptor;\n+import org.kie.kogito.storage.api.schema.SchemaType;\n \n-import static org.kie.kogito.index.infinispan.Constants.INFINISPAN_STORAGE;\n+import static org.kie.kogito.storage.infinispan.Constants.INFINISPAN_STORAGE;\n \n @ApplicationScoped\n public class ProtoSchemaAcceptor implements SchemaAcceptor {", "originalCommit": "093a0b152d2c75e54a1cddd069a84abbaf08da91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgxMTgxOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435811819", "bodyText": "Is this custom? Can we move it to shared library too?", "author": "danielezonca", "createdAt": "2020-06-05T09:46:11Z", "path": "data-index/data-index-storage/data-index-storage-infinispan/src/main/java/org/kie/kogito/index/infinispan/schema/ProtoSchemaManager.java", "diffHunk": "@@ -14,22 +14,22 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.infinispan.protostream;\n+package org.kie.kogito.index.infinispan.schema;", "originalCommit": "093a0b152d2c75e54a1cddd069a84abbaf08da91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUwNTgyOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r436505829", "bodyText": "@danielezonca This class is process specific: it uses the cache getProcessIdModelCache i.e. PROCESS_ID_MODEL_CACHE. In addition to that it is infinispan specific since it uses ProtobufMetadataManagerConstants.ERRORS_KEY_SUFFIX .\nWe might create an abstract class in the common module but most of the implementation would remain in the consumer code. wdyt?", "author": "r00ta", "createdAt": "2020-06-08T07:34:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgxMTgxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MjU5OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r436742598", "bodyText": "Ok let's postpone this changes to a future ticket. Can you please open a ticket for that?", "author": "danielezonca", "createdAt": "2020-06-08T14:14:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgxMTgxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1MDYyNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437450625", "bodyText": "Yes, done", "author": "r00ta", "createdAt": "2020-06-09T14:07:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgxMTgxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgxOTY3NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435819674", "bodyText": "Is it possible to move most of this data-index-storage-protobuf module as additional shared module?\nWe can try to use the same approach of shared base module and then data-index specific additions", "author": "danielezonca", "createdAt": "2020-06-05T10:00:24Z", "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/domain/ProtoDomainModelProducer.java", "diffHunk": "@@ -29,14 +29,12 @@\n import org.infinispan.protostream.descriptors.FieldDescriptor;\n import org.infinispan.protostream.descriptors.FileDescriptor;\n import org.infinispan.protostream.impl.AnnotatedDescriptorImpl;\n-import org.kie.kogito.index.domain.AttributeDescriptor;\n-import org.kie.kogito.index.domain.DomainDescriptor;\n-import org.kie.kogito.index.event.DomainModelRegisteredEvent;\n+import org.kie.kogito.index.protobuf.FileDescriptorRegisteredEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import static java.util.stream.Collectors.toMap;\n import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n \n @ApplicationScoped\n public class ProtoDomainModelProducer {", "originalCommit": "093a0b152d2c75e54a1cddd069a84abbaf08da91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzMjkyMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435832922", "bodyText": "The protobuf module is strongly coupled with processes and infinispan, if we want to move it to a common module it requires more work. Let's do that in another PR", "author": "r00ta", "createdAt": "2020-06-05T10:27:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgxOTY3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MDM5OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435990398", "bodyText": "I've moved it : )", "author": "r00ta", "createdAt": "2020-06-05T15:17:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgxOTY3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyMjg2Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435822866", "bodyText": "I think we can make this generic too adding String storageType as parameter and rename the method as getModelCacheByType(storageType).\nIn this way PROCESS_ID_MODEL_CACHE can be moved out of this class and provided as parameter.", "author": "danielezonca", "createdAt": "2020-06-05T10:06:29Z", "path": "kogito-storage/kogito-storage-infinispan/src/main/java/org/kie/kogito/storage/infinispan/cache/InfinispanCacheManager.java", "diffHunk": "@@ -114,27 +105,13 @@ public void stop(@Observes ShutdownEvent event) {\n     }\n \n     @Override\n-    public Cache<String, ProcessInstance> getProcessInstancesCache() {\n-        return new CacheImpl<>(getOrCreateCache(PROCESS_INSTANCES_CACHE, cacheTemplateName), ProcessInstance.class.getName());\n-    }\n-\n-    @Override\n-    public Cache<String, UserTaskInstance> getUserTaskInstancesCache() {\n-        return new CacheImpl<>(getOrCreateCache(USER_TASK_INSTANCES_CACHE, cacheTemplateName), UserTaskInstance.class.getName());\n-    }\n-\n-    @Override\n-    public Cache<String, Job> getJobsCache() {\n-        return new CacheImpl<>(getOrCreateCache(JOBS_CACHE, cacheTemplateName), Job.class.getName());\n-    }\n-\n-    public Map<String, String> getProtobufCache() {\n-        return manager.getCache(ProtobufMetadataManagerConstants.PROTOBUF_METADATA_CACHE_NAME);\n+    public Cache<String, String> getProcessIdModelCache() {\n+        return new CacheImpl<>(manager.administration().getOrCreateCache(PROCESS_ID_MODEL_CACHE, (String) null), String.class.getName());\n     }", "originalCommit": "093a0b152d2c75e54a1cddd069a84abbaf08da91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyMzM4Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435823382", "bodyText": "Please move the whole graphql package to common module", "author": "danielezonca", "createdAt": "2020-06-05T10:07:36Z", "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/graphql/GraphQLObjectTypeMapper.java", "diffHunk": "@@ -25,9 +25,9 @@\n import graphql.schema.GraphQLOutputType;\n import graphql.schema.GraphQLSchema;\n import graphql.schema.GraphQLType;\n-import org.kie.kogito.index.domain.AttributeDescriptor;\n-import org.kie.kogito.index.domain.DomainDescriptor;\n import org.kie.kogito.index.model.KogitoMetadata;\n+import org.kie.kogito.index.protobuf.domain.AttributeDescriptor;\n+import org.kie.kogito.index.protobuf.domain.DomainDescriptor;", "originalCommit": "093a0b152d2c75e54a1cddd069a84abbaf08da91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MDc4Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435990783", "bodyText": "as agreeded by phone call we postpone this to another ticket", "author": "r00ta", "createdAt": "2020-06-05T15:18:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyMzM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwNDIyOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r436004228", "bodyText": "Can you please create a ticket to track it?", "author": "danielezonca", "createdAt": "2020-06-05T15:39:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyMzM4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyNTE1Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435825153", "bodyText": "Can you please rename this class as StorageQualifier?", "author": "danielezonca", "createdAt": "2020-06-05T10:11:09Z", "path": "kogito-storage/kogito-storage-api/src/main/java/org/kie/kogito/storage/api/annotations/Storage.java", "diffHunk": "@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.storage;\n+package org.kie.kogito.storage.api.annotations;\n \n import java.lang.annotation.Retention;", "originalCommit": "093a0b152d2c75e54a1cddd069a84abbaf08da91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyNTI2NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435825265", "bodyText": "Can you please rename this class as StorageQualifierImpl?", "author": "danielezonca", "createdAt": "2020-06-05T10:11:24Z", "path": "kogito-storage/kogito-storage-api/src/main/java/org/kie/kogito/storage/api/annotations/StorageImpl.java", "diffHunk": "@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.storage;\n+package org.kie.kogito.storage.api.annotations;\n \n import java.util.Objects;", "originalCommit": "093a0b152d2c75e54a1cddd069a84abbaf08da91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a009b2bb0c9dfd0c2c836154291f3c8dd1ae9823", "url": "https://github.com/kiegroup/kogito-apps/commit/a009b2bb0c9dfd0c2c836154291f3c8dd1ae9823", "message": "fix integration tests", "committedDate": "2020-06-05T10:47:17Z", "type": "commit"}, {"oid": "ce65822cd90fc7c4ee5b556c9721237e4d55cbc2", "url": "https://github.com/kiegroup/kogito-apps/commit/ce65822cd90fc7c4ee5b556c9721237e4d55cbc2", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-06-05T11:06:46Z", "type": "commit"}, {"oid": "a1ed61cb0ef05836a574cd5b1f85a9adf3336ad0", "url": "https://github.com/kiegroup/kogito-apps/commit/a1ed61cb0ef05836a574cd5b1f85a9adf3336ad0", "message": "rename classes based on comments", "committedDate": "2020-06-05T11:59:21Z", "type": "commit"}, {"oid": "3968883c669a2efacd8cf5dbf3e8f1d0f0f60490", "url": "https://github.com/kiegroup/kogito-apps/commit/3968883c669a2efacd8cf5dbf3e8f1d0f0f60490", "message": "rename classes based on comments", "committedDate": "2020-06-05T12:04:28Z", "type": "commit"}, {"oid": "55a8847ce804a849380f4d2383215517f2b4ba6c", "url": "https://github.com/kiegroup/kogito-apps/commit/55a8847ce804a849380f4d2383215517f2b4ba6c", "message": "refactoring getProtobufCache and getProcessIdModelCache", "committedDate": "2020-06-05T13:26:11Z", "type": "commit"}, {"oid": "4e781ec386dd0cc0d11c3a9b1dd397beb10d8869", "url": "https://github.com/kiegroup/kogito-apps/commit/4e781ec386dd0cc0d11c3a9b1dd397beb10d8869", "message": "refactoring protobuf module", "committedDate": "2020-06-05T15:15:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwODUyMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r436008523", "bodyText": "Please rename the method as getModelCacheByType", "author": "danielezonca", "createdAt": "2020-06-05T15:46:48Z", "path": "kogito-storage-commons/kogito-storage-commons-api/src/main/java/org/kie/kogito/storage/api/StorageService.java", "diffHunk": "@@ -14,22 +14,18 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.cache;\n+package org.kie.kogito.storage.api;\n \n-import com.fasterxml.jackson.databind.node.ObjectNode;\n-import org.kie.kogito.index.model.Job;\n-import org.kie.kogito.index.model.ProcessInstance;\n-import org.kie.kogito.index.model.UserTaskInstance;\n-\n-public interface CacheService {\n+import java.util.Map;\n \n-    Cache<String, ProcessInstance> getProcessInstancesCache();\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n \n-    Cache<String, UserTaskInstance> getUserTaskInstancesCache();\n+public interface StorageService {\n+    Storage<String, String> getProtobufCache();\n \n-    Cache<String, Job> getJobsCache();\n+    <T> Storage<String, T> getCache(String index, Class<T> type);\n \n-    Cache<String, ObjectNode> getDomainModelCache(String processId);\n+    Storage<String, ObjectNode> getDomainModelCache(String index, String processId);\n \n-    Cache<String, String> getProcessIdModelCache();\n+    Storage<String, String> getProcessIdModelCache(String index);", "originalCommit": "4e781ec386dd0cc0d11c3a9b1dd397beb10d8869", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwODc1Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r436008756", "bodyText": "Please rename parameters as type and elementId", "author": "danielezonca", "createdAt": "2020-06-05T15:47:13Z", "path": "kogito-storage-commons/kogito-storage-commons-api/src/main/java/org/kie/kogito/storage/api/StorageService.java", "diffHunk": "@@ -14,22 +14,18 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.cache;\n+package org.kie.kogito.storage.api;\n \n-import com.fasterxml.jackson.databind.node.ObjectNode;\n-import org.kie.kogito.index.model.Job;\n-import org.kie.kogito.index.model.ProcessInstance;\n-import org.kie.kogito.index.model.UserTaskInstance;\n-\n-public interface CacheService {\n+import java.util.Map;\n \n-    Cache<String, ProcessInstance> getProcessInstancesCache();\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n \n-    Cache<String, UserTaskInstance> getUserTaskInstancesCache();\n+public interface StorageService {\n+    Storage<String, String> getProtobufCache();\n \n-    Cache<String, Job> getJobsCache();\n+    <T> Storage<String, T> getCache(String index, Class<T> type);\n \n-    Cache<String, ObjectNode> getDomainModelCache(String processId);\n+    Storage<String, ObjectNode> getDomainModelCache(String index, String processId);", "originalCommit": "4e781ec386dd0cc0d11c3a9b1dd397beb10d8869", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxNTI3MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r436015270", "bodyText": "Remove TODO?", "author": "danielezonca", "createdAt": "2020-06-05T15:58:34Z", "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/ProtostreamProducer.java", "diffHunk": "@@ -24,6 +24,7 @@\n import org.infinispan.protostream.FileDescriptorSource;\n \n @ApplicationScoped\n+// TODO: wiring class to leave in consumer", "originalCommit": "4e781ec386dd0cc0d11c3a9b1dd397beb10d8869", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "05b9dd58c5d0bef3af6176e63629b57f3bf6a704", "url": "https://github.com/kiegroup/kogito-apps/commit/05b9dd58c5d0bef3af6176e63629b57f3bf6a704", "message": "rename methods according to comments", "committedDate": "2020-06-08T07:35:18Z", "type": "commit"}, {"oid": "a866ee207fdf049bf4e2455a571eb7ff1952c394", "url": "https://github.com/kiegroup/kogito-apps/commit/a866ee207fdf049bf4e2455a571eb7ff1952c394", "message": "add kogito storage commons readme", "committedDate": "2020-06-08T08:00:25Z", "type": "commit"}, {"oid": "5355eded0d7e654a6b4cba7fb0650cbc22138109", "url": "https://github.com/kiegroup/kogito-apps/commit/5355eded0d7e654a6b4cba7fb0650cbc22138109", "message": "rename parameters", "committedDate": "2020-06-08T12:52:13Z", "type": "commit"}, {"oid": "e08e47ff17554c39797935f9aa4dafaef3845f26", "url": "https://github.com/kiegroup/kogito-apps/commit/e08e47ff17554c39797935f9aa4dafaef3845f26", "message": "add licences", "committedDate": "2020-06-08T13:52:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY1NDE0Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r436654146", "bodyText": "What about a simple How to use it ? :)", "author": "danielezonca", "createdAt": "2020-06-08T12:25:51Z", "path": "kogito-storage-commons/README.md", "diffHunk": "@@ -0,0 +1,17 @@\n+# Kogito storage commons\n+\n+This is the module that provides the persistence abstraction for the kogito apps. \n+\n+It is composed by three modules: \n+\n+1) `kogito-storage-commons-api` contains the interfaces `Storage` and `StorageService` that the consumer has to inject in his application. In addition to that, it contains the interface `Query` that the consumer has to use to query the storage. \n+2) `kogito-storage-commons-infinispan` contains all the classes to manage infinispan as persistence layer. \n+3) `kogito-storage-commons-protobuf` contains the `ProtobufService` that the consumer can use to manage his protobuf schemas. \n+\n+## How to use the abstraction provided by this module", "originalCommit": "a866ee207fdf049bf4e2455a571eb7ff1952c394", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc2ODA1OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r436768058", "bodyText": "fixed : D", "author": "r00ta", "createdAt": "2020-06-08T14:50:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY1NDE0Ng=="}], "type": "inlineReview"}, {"oid": "f8ce33323b51866fb5a494aebef3832d3288c1fe", "url": "https://github.com/kiegroup/kogito-apps/commit/f8ce33323b51866fb5a494aebef3832d3288c1fe", "message": "fix readme", "committedDate": "2020-06-08T14:50:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5ODk4Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r436798986", "bodyText": "I think getProtobufCache should be part of the protobuf implementation, because other types of storage service won't be able to implement the interface.", "author": "xieshenzh", "createdAt": "2020-06-08T15:33:02Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/DataIndexStorageService.java", "diffHunk": "@@ -14,22 +14,27 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.cache;\n+package org.kie.kogito.index;\n+\n+import java.util.Map;\n \n import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.kie.kogito.index.model.Job;\n import org.kie.kogito.index.model.ProcessInstance;\n import org.kie.kogito.index.model.UserTaskInstance;\n+import org.kie.kogito.storage.api.Storage;\n+\n+public interface DataIndexStorageService {\n \n-public interface CacheService {\n+    Storage<String, String> getProtobufCache();", "originalCommit": "f8ce33323b51866fb5a494aebef3832d3288c1fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzODgzOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437138838", "bodyText": "Hi @xiezhang7 , thx for the comment!\nDo you mean that getProtobufCache should be implemented only by the infinispan module and the ProtobufService should then depend directly on the infinispan module only?", "author": "r00ta", "createdAt": "2020-06-09T05:02:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5ODk4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1NzgzNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437357834", "bodyText": "Yes. Thanks.", "author": "xieshenzh", "createdAt": "2020-06-09T12:09:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5ODk4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0OTc0OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437449749", "bodyText": "I've moved getProtobufCache to the ProtobufService with the commit 2c6a4ec. The ProtobufService is now injected in the DataIndexStorageServiceImpl -> the interface for the data-index is not changed. Let me know wdyt @xiezhang7", "author": "r00ta", "createdAt": "2020-06-09T14:05:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5ODk4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5NjA2OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437496069", "bodyText": "I don't think ProtobufService should be injected in the DataIndexStorageServiceImpl. Because only ProtoSchemaManager invokes getProtobufCache which is part of the infinispan implementation. Other storage implementations won't need this service. So it could be injected in ProtoSchemaManager directly.", "author": "xieshenzh", "createdAt": "2020-06-09T15:05:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5ODk4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwOTk4OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437909989", "bodyText": "Ok, I've removed getProtobufCache from DataIndexStorageServiceImpl and I've injected directly the ProtobufService where needed to provide the protobuf cache, lmkwyt", "author": "r00ta", "createdAt": "2020-06-10T07:20:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5ODk4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5OTMwNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r436799306", "bodyText": "Map is not used by the interface and can be removed.", "author": "xieshenzh", "createdAt": "2020-06-08T15:33:31Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/DataIndexStorageService.java", "diffHunk": "@@ -14,22 +14,27 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.cache;\n+package org.kie.kogito.index;\n+\n+import java.util.Map;", "originalCommit": "f8ce33323b51866fb5a494aebef3832d3288c1fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzOTM2OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437139368", "bodyText": "Removed", "author": "r00ta", "createdAt": "2020-06-09T05:04:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5OTMwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgwMzE3OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r436803179", "bodyText": "I don't think AttributeDescriptor, DomainDescriptor and DomainModelRegisteredEvent should be part of the protobuf implementation. They are supposed to be part of the API. If the data structure is not ideal, maybe we can review it in future.", "author": "xieshenzh", "createdAt": "2020-06-08T15:39:15Z", "path": "kogito-storage-commons/kogito-storage-commons-protobuf/src/main/java/org/kie/kogito/storage/protobuf/domain/DomainDescriptor.java", "diffHunk": "@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.domain;\n+package org.kie.kogito.storage.protobuf.domain;", "originalCommit": "f8ce33323b51866fb5a494aebef3832d3288c1fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzOTMzNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437139335", "bodyText": "Moved to api.proto, if it's fine for you feel free to resolve the conversation", "author": "r00ta", "createdAt": "2020-06-09T05:04:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgwMzE3OQ=="}], "type": "inlineReview"}, {"oid": "70ca5e299c7bbd97ae8d5e671ee382ceac876962", "url": "https://github.com/kiegroup/kogito-apps/commit/70ca5e299c7bbd97ae8d5e671ee382ceac876962", "message": "move protobuf domain to api and remove unused imports", "committedDate": "2020-06-09T05:03:50Z", "type": "commit"}, {"oid": "2c6a4ecf3d48d2b891261ed6c637d8e8f11eb42f", "url": "https://github.com/kiegroup/kogito-apps/commit/2c6a4ecf3d48d2b891261ed6c637d8e8f11eb42f", "message": "refactoring getProtobufCache", "committedDate": "2020-06-09T13:58:50Z", "type": "commit"}, {"oid": "fb17921111a3f356b54d099c84f651c399bdf5d1", "url": "https://github.com/kiegroup/kogito-apps/commit/fb17921111a3f356b54d099c84f651c399bdf5d1", "message": "remove getProtobufCache old method", "committedDate": "2020-06-09T14:02:56Z", "type": "commit"}, {"oid": "bd29feb5a9429115e932299baf72b07ac3e5daf3", "url": "https://github.com/kiegroup/kogito-apps/commit/bd29feb5a9429115e932299baf72b07ac3e5daf3", "message": "remove getProtobufCache from DataIndexStorageManager, ProtobufService injected directly in protobuf manager", "committedDate": "2020-06-10T07:18:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3MzQ4Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437873486", "bodyText": "can we keep the import * ? :)", "author": "cristianonicolai", "createdAt": "2020-06-10T05:46:50Z", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/IndexingServiceIT.java", "diffHunk": "@@ -53,7 +53,28 @@\n import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.Matchers.emptyOrNullString;\n import static org.hamcrest.Matchers.hasItems;\n-import static org.kie.kogito.index.GraphQLUtils.*;", "originalCommit": "fb17921111a3f356b54d099c84f651c399bdf5d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA1MjU5Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438052596", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-06-10T11:29:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3MzQ4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NTQ2MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437875461", "bodyText": "@r00ta perhaps move this file to StorageImpl so we can keep its change history?", "author": "cristianonicolai", "createdAt": "2020-06-10T05:53:31Z", "path": "data-index/data-index-storage/data-index-storage-infinispan/src/main/java/org/kie/kogito/index/infinispan/cache/CacheImpl.java", "diffHunk": "@@ -1,205 +0,0 @@\n-/*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.kie.kogito.index.infinispan.cache;\n-\n-import java.util.Collection;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.function.BiConsumer;\n-import java.util.function.BiFunction;\n-import java.util.function.Consumer;\n-import java.util.function.Function;\n-\n-import org.infinispan.client.hotrod.RemoteCache;\n-import org.kie.kogito.index.cache.Cache;\n-import org.kie.kogito.index.infinispan.listener.CacheObjectCreatedListener;\n-import org.kie.kogito.index.infinispan.listener.CacheObjectRemovedListener;\n-import org.kie.kogito.index.infinispan.listener.CacheObjectUpdatedListener;\n-import org.kie.kogito.index.infinispan.query.InfinispanQuery;\n-import org.kie.kogito.index.query.Query;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class CacheImpl<K, V> implements Cache<K, V> {", "originalCommit": "fb17921111a3f356b54d099c84f651c399bdf5d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExNzYwMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438117603", "bodyText": "@cristianonicolai do you have any tip to do the trick? I tried for some time but I did not find the way to make it work (the last thing I'd like to do is to create a new PR and copy/paste the new code there :) ).", "author": "r00ta", "createdAt": "2020-06-10T13:23:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NTQ2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2ODQxNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438168414", "bodyText": "yeah git doesnt like if you move and do significant changes to a file in the same commit :/ the usual workaround is to break move and changes into different prs but not sure how feasible that is in here.", "author": "cristianonicolai", "createdAt": "2020-06-10T14:31:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NTQ2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIwMzA2NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438203065", "bodyText": "btw I see your point, unfortunately moving a lot files I missed that intellij deleted/created this new file.\nActually the history of this file was just one commit before this PR, but I understand that we should keep it. Once we are ok with this PR I'll create a new fresh branch/PR with the code (and properly rename the file :) ) if it's ok for you", "author": "r00ta", "createdAt": "2020-06-10T15:15:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NTQ2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyMDAxOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438220018", "bodyText": "sure, np", "author": "cristianonicolai", "createdAt": "2020-06-10T15:37:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NTQ2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2ODAwMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438768003", "bodyText": "Hi @cristianonicolai , I've moved everything to another PR. The funny thing is that In the commits none of the files were deleted, but github still think that a couple of them are deleted/recreated. Investigating a little bit I found out that also in the current PR git blame works perfectly, so the history is there also for the files StorageImpl/CacheImpl.\n\nBut unfortunately ProtoDomainModelProducerTest does not have it.\nWe can move to the PR #266 where Github thinks that only a couple of files are re-created (but git blame works perfectly on them), or stay in this one where ProtoDomainModelProducerTest has no history.", "author": "r00ta", "createdAt": "2020-06-11T13:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NTQ2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NjY5NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437876694", "bodyText": "should this file be moved instead?", "author": "cristianonicolai", "createdAt": "2020-06-10T05:57:14Z", "path": "data-index/data-index-storage/data-index-storage-protobuf/src/test/java/org/kie/kogito/index/protobuf/ProtoDomainModelProducerTest.java", "diffHunk": "@@ -1,53 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.kie.kogito.index.protobuf;\n-\n-import javax.enterprise.event.Event;\n-\n-import org.infinispan.protostream.descriptors.FileDescriptor;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-import org.kie.kogito.index.event.DomainModelRegisteredEvent;\n-import org.mockito.InjectMocks;\n-import org.mockito.Mock;\n-import org.mockito.junit.jupiter.MockitoExtension;\n-\n-import static org.kie.kogito.index.protobuf.TestUtils.ADDITIONAL_DESCRIPTORS;\n-import static org.kie.kogito.index.protobuf.TestUtils.DOMAIN_DESCRIPTOR;\n-import static org.kie.kogito.index.protobuf.TestUtils.PROCESS_ID;\n-import static org.kie.kogito.index.protobuf.TestUtils.getTestFileDescriptor;\n-import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Mockito.verify;\n-\n-@ExtendWith(MockitoExtension.class)\n-class ProtoDomainModelProducerTest {", "originalCommit": "fb17921111a3f356b54d099c84f651c399bdf5d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYyMjUzMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438622530", "bodyText": "Same as above", "author": "r00ta", "createdAt": "2020-06-11T08:23:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NjY5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NzE1MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437877151", "bodyText": "should this property be generic for all services? Maybe defined as kogito.storage.type ?\n@danielezonca", "author": "cristianonicolai", "createdAt": "2020-06-10T05:58:42Z", "path": "kogito-storage-commons/README.md", "diffHunk": "@@ -0,0 +1,17 @@\n+# Kogito storage commons\n+\n+This is the module that provides the persistence abstraction for the kogito apps. \n+\n+It is composed by three modules: \n+\n+1) `kogito-storage-commons-api` contains the interfaces `Storage` and `StorageService` that the consumer has to inject in his application. In addition to that, it contains the interface `Query` that the consumer has to use to query the storage. \n+2) `kogito-storage-commons-infinispan` contains all the classes to manage infinispan as persistence layer. \n+3) `kogito-storage-commons-protobuf` contains the `ProtobufService` that the consumer can use to manage his protobuf schemas. \n+\n+## How to use it\n+\n+The consumer has to \n+\n+1) Inject the `StorageService` bean where needed, and the implementation will be selected using the property `kogito.data-index.storage.type`. ", "originalCommit": "fb17921111a3f356b54d099c84f651c399bdf5d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAwNTU1Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438005552", "bodyText": "I agree, kogito.storage.type is better", "author": "danielezonca", "createdAt": "2020-06-10T09:56:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NzE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA1MjY3NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438052675", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-06-10T11:29:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NzE1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3OTIyMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437879222", "bodyText": "It feels that getDomainModelCache and getModelCacheByType are specific to data index I would leave that in the data index storage.", "author": "cristianonicolai", "createdAt": "2020-06-10T06:05:08Z", "path": "kogito-storage-commons/kogito-storage-commons-api/src/main/java/org/kie/kogito/storage/api/StorageService.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.storage.api;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+public interface StorageService {\n+\n+    <T> Storage<String, T> getCache(String index, Class<T> type);\n+\n+    Storage<String, ObjectNode> getDomainModelCache(String type, String elementId);", "originalCommit": "fb17921111a3f356b54d099c84f651c399bdf5d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5ODAzMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438198032", "bodyText": "I've refactored it a bit: now the interface StorageService looks like\npublic interface StorageService {\n\n    Storage<String, String> getCache(String index);\n\n    <T> Storage<String, T> getCache(String index, Class<T> type);\n\n    <T> Storage<String, T> getCacheWithDataFormat(String index, Class<T> type, String rootType);\n\nAnd the logic of getDomainModelCache is moved into the data-index, lmkwyt", "author": "r00ta", "createdAt": "2020-06-10T15:09:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3OTIyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MDMwMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437880300", "bodyText": "dependency not needed", "author": "cristianonicolai", "createdAt": "2020-06-10T06:08:23Z", "path": "kogito-storage-commons/kogito-storage-commons-api/pom.xml", "diffHunk": "@@ -0,0 +1,58 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kogito-storage-commons</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+  <name>Kogito :: Kogito Storage API</name>\n+  <artifactId>kogito-storage-commons-api</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-databind</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-annotations</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>jakarta.inject</groupId>\n+      <artifactId>jakarta.inject-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>", "originalCommit": "fb17921111a3f356b54d099c84f651c399bdf5d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4ODA4MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438588081", "bodyText": "This dependency is needed in the ProducerTest", "author": "r00ta", "createdAt": "2020-06-11T07:15:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MDMwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MDMxNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437880315", "bodyText": "dependency not needed", "author": "cristianonicolai", "createdAt": "2020-06-10T06:08:27Z", "path": "kogito-storage-commons/kogito-storage-commons-api/pom.xml", "diffHunk": "@@ -0,0 +1,58 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kogito-storage-commons</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+  <name>Kogito :: Kogito Storage API</name>\n+  <artifactId>kogito-storage-commons-api</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-databind</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-annotations</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>jakarta.inject</groupId>\n+      <artifactId>jakarta.inject-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.assertj</groupId>\n+      <artifactId>assertj-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>", "originalCommit": "fb17921111a3f356b54d099c84f651c399bdf5d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4OTcyNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438589726", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-06-11T07:18:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MDMxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MDMzNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437880337", "bodyText": "dependency not needed", "author": "cristianonicolai", "createdAt": "2020-06-10T06:08:31Z", "path": "kogito-storage-commons/kogito-storage-commons-api/pom.xml", "diffHunk": "@@ -0,0 +1,58 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kogito-storage-commons</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+  <name>Kogito :: Kogito Storage API</name>\n+  <artifactId>kogito-storage-commons-api</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-databind</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-annotations</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>jakarta.inject</groupId>\n+      <artifactId>jakarta.inject-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.assertj</groupId>\n+      <artifactId>assertj-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-junit5</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.rest-assured</groupId>", "originalCommit": "fb17921111a3f356b54d099c84f651c399bdf5d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4OTc4MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438589780", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-06-11T07:18:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MDMzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MTcxMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437881710", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "author": "cristianonicolai", "createdAt": "2020-06-10T06:12:38Z", "path": "kogito-storage-commons/kogito-storage-commons-api/src/main/java/org/kie/kogito/storage/api/StorageService.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "originalCommit": "fb17921111a3f356b54d099c84f651c399bdf5d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MjY4Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437882682", "bodyText": "dependency not needed?", "author": "cristianonicolai", "createdAt": "2020-06-10T06:15:38Z", "path": "kogito-storage-commons/kogito-storage-commons-infinispan/pom.xml", "diffHunk": "@@ -0,0 +1,57 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kogito-storage-commons</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kogito-storage-commons-infinispan</artifactId>\n+  <name>Kogito :: Kogito Storage Infinispan</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-storage-commons-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-infinispan-client</artifactId>\n+    </dependency>\n+\n+    <!-- Health Check -->\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>infinispan-quarkus-health-addon</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.assertj</groupId>\n+      <artifactId>assertj-core</artifactId>", "originalCommit": "fb17921111a3f356b54d099c84f651c399bdf5d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4OTgyNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438589826", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-06-11T07:18:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MjY4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MjkyOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437882928", "bodyText": "keep import * :)", "author": "cristianonicolai", "createdAt": "2020-06-10T06:16:18Z", "path": "kogito-storage-commons/kogito-storage-commons-infinispan/src/test/java/org/kie/kogito/storage/infinispan/query/InfinispanQueryTest.java", "diffHunk": "@@ -27,23 +27,39 @@\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.Arguments;\n import org.junit.jupiter.params.provider.MethodSource;\n-import org.kie.kogito.index.model.ProcessInstance;\n-import org.kie.kogito.index.query.AttributeFilter;\n+import org.kie.kogito.storage.api.query.AttributeFilter;\n import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n \n import static java.util.Arrays.asList;\n import static java.util.Collections.emptyList;\n-import static org.kie.kogito.index.query.QueryFilterFactory.*;", "originalCommit": "fb17921111a3f356b54d099c84f651c399bdf5d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4OTkyMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438589921", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-06-11T07:19:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MjkyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MzAwNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437883007", "bodyText": "missing name", "author": "cristianonicolai", "createdAt": "2020-06-10T06:16:32Z", "path": "kogito-storage-commons/kogito-storage-commons-protobuf/pom.xml", "diffHunk": "@@ -0,0 +1,54 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kogito-apps</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+", "originalCommit": "fb17921111a3f356b54d099c84f651c399bdf5d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4OTg3Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438589872", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-06-11T07:19:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MzAwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwMzIxNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437903216", "bodyText": "dependency not needed?", "author": "cristianonicolai", "createdAt": "2020-06-10T07:06:13Z", "path": "kogito-storage-commons/kogito-storage-commons-protobuf/pom.xml", "diffHunk": "@@ -0,0 +1,54 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kogito-apps</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kogito-storage-commons-protobuf</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-storage-commons-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>infinispan-persistence-addon</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.infinispan.protostream</groupId>\n+      <artifactId>protostream</artifactId>\n+    </dependency>\n+\n+    <!-- test -->\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-storage-commons-infinispan</artifactId>", "originalCommit": "fb17921111a3f356b54d099c84f651c399bdf5d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA1Mjc5Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438052797", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-06-10T11:29:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwMzIxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwNTQwOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437905408", "bodyText": "should a test be added for this?", "author": "cristianonicolai", "createdAt": "2020-06-10T07:11:03Z", "path": "kogito-storage-commons/kogito-storage-commons-protobuf/src/test/java/org/kie/kogito/storage/protobuf/ProtoDomainModelProducerTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.storage.protobuf;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import javax.enterprise.event.Event;\n+\n+import org.infinispan.protostream.FileDescriptorSource;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.config.Configuration;\n+import org.infinispan.protostream.descriptors.FileDescriptor;\n+import org.infinispan.protostream.impl.SerializationContextImpl;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.storage.api.proto.DomainModelRegisteredEvent;\n+import org.kie.kogito.storage.protobuf.domain.ProtoDomainModelProducer;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.kie.kogito.storage.protobuf.ProtobufService.DOMAIN_MODEL_PROTO_NAME;\n+import static org.kie.kogito.storage.protobuf.TestUtils.ADDITIONAL_DESCRIPTORS;\n+import static org.kie.kogito.storage.protobuf.TestUtils.DOMAIN_DESCRIPTOR;\n+import static org.kie.kogito.storage.protobuf.TestUtils.PROCESS_ID;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+\n+@ExtendWith(MockitoExtension.class)\n+class ProtoDomainModelProducerTest {\n+\n+    @Mock\n+    Event<DomainModelRegisteredEvent> domainEvent;\n+\n+    @InjectMocks\n+    ProtoDomainModelProducer protoDomainModelProducer;\n+\n+    @Test\n+    void onFileDescriptorRegistered() {\n+        FileDescriptor fileDescriptor = getTestFileDescriptor();\n+        FileDescriptorRegisteredEvent event = new FileDescriptorRegisteredEvent(fileDescriptor);\n+        protoDomainModelProducer.onFileDescriptorRegistered(event);\n+\n+        verify(domainEvent).fire(eq(new DomainModelRegisteredEvent(PROCESS_ID, DOMAIN_DESCRIPTOR, ADDITIONAL_DESCRIPTORS)));\n+    }\n+\n+    static FileDescriptor getTestFileDescriptor() {\n+        String content = getTestFileContent();\n+        SerializationContext ctx = new SerializationContextImpl(Configuration.builder().build());\n+        ctx.registerProtoFiles(FileDescriptorSource.fromString(DOMAIN_MODEL_PROTO_NAME, content));\n+        return ctx.getFileDescriptors().get(DOMAIN_MODEL_PROTO_NAME);\n+    }\n+\n+    static String getTestFileContent() {\n+        return getTestFileContent(\"test.proto\");\n+    }\n+\n+    static String getTestFileInvalidContent() {\n+        return getTestFileContent(\"test_invalid.proto\");", "originalCommit": "fb17921111a3f356b54d099c84f651c399bdf5d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwNTM2OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438105369", "bodyText": "My bad! I duplicated this code from TestUtils during the refactoring and actually it is not needed anymore. I remove it using TestUtils", "author": "r00ta", "createdAt": "2020-06-10T13:05:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwNTQwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwNTYyMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437905622", "bodyText": "missing name", "author": "cristianonicolai", "createdAt": "2020-06-10T07:11:30Z", "path": "kogito-storage-commons/pom.xml", "diffHunk": "@@ -0,0 +1,23 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kogito-apps</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kogito-storage-commons</artifactId>", "originalCommit": "fb17921111a3f356b54d099c84f651c399bdf5d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA1MjgzOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438052839", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-06-10T11:30:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwNTYyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwNjI2OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437906268", "bodyText": "I know Maven can handle the build order, but could you add this module as the first in the module list?", "author": "cristianonicolai", "createdAt": "2020-06-10T07:12:49Z", "path": "pom.xml", "diffHunk": "@@ -64,5 +64,6 @@\n     <module>management-console</module>\n     <module>explainability-service</module>\n     <module>trusty</module>\n+    <module>kogito-storage-commons</module>", "originalCommit": "fb17921111a3f356b54d099c84f651c399bdf5d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA1MjkwNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438052907", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-06-10T11:30:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwNjI2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwOTEzOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437909138", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "author": "cristianonicolai", "createdAt": "2020-06-10T07:18:48Z", "path": "kogito-storage-commons/kogito-storage-commons-infinispan/src/main/java/org/kie/kogito/storage/infinispan/cache/StorageImpl.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "originalCommit": "fb17921111a3f356b54d099c84f651c399bdf5d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8ec04ea04d9efec0271abdcf4ba692c76914a202", "url": "https://github.com/kiegroup/kogito-apps/commit/8ec04ea04d9efec0271abdcf4ba692c76914a202", "message": "Update kogito-storage-commons/kogito-storage-commons-infinispan/src/main/java/org/kie/kogito/storage/infinispan/cache/StorageImpl.java\n\nCo-authored-by: Cristiano Nicolai <cristiano.nicolai@gmail.com>", "committedDate": "2020-06-10T08:58:45Z", "type": "commit"}, {"oid": "b8f255dcbd20bd01d8860819ca5a90dafdf3c204", "url": "https://github.com/kiegroup/kogito-apps/commit/b8f255dcbd20bd01d8860819ca5a90dafdf3c204", "message": "update poms, rename kogito.data-index.storage.type, optimize imports", "committedDate": "2020-06-10T11:27:11Z", "type": "commit"}, {"oid": "09c6481fcae228bb515e131025c8e08998b31c77", "url": "https://github.com/kiegroup/kogito-apps/commit/09c6481fcae228bb515e131025c8e08998b31c77", "message": "Merge branch 'KOGITO-2326-storage-abstraction' of https://github.com/r00ta/kogito-apps into KOGITO-2326-storage-abstraction", "committedDate": "2020-06-10T11:30:37Z", "type": "commit"}, {"oid": "bcb056c6586eef781ac09ba67fad5886a59e3418", "url": "https://github.com/kiegroup/kogito-apps/commit/bcb056c6586eef781ac09ba67fad5886a59e3418", "message": "create conflict", "committedDate": "2020-06-10T11:32:58Z", "type": "commit"}, {"oid": "f1ae2c5863d2acaeac0861ca90869b0b48b4a16f", "url": "https://github.com/kiegroup/kogito-apps/commit/f1ae2c5863d2acaeac0861ca90869b0b48b4a16f", "message": "fix CacheImpl history", "committedDate": "2020-06-10T11:48:39Z", "type": "commit"}, {"oid": "7998143eea7ab6ec19f9a3457d4a7d3c317ab268", "url": "https://github.com/kiegroup/kogito-apps/commit/7998143eea7ab6ec19f9a3457d4a7d3c317ab268", "message": "commit changes", "committedDate": "2020-06-10T11:51:17Z", "type": "commit"}, {"oid": "1a86160b1314cf1d0eebc34f2f69fd9b1bd552b2", "url": "https://github.com/kiegroup/kogito-apps/commit/1a86160b1314cf1d0eebc34f2f69fd9b1bd552b2", "message": "create conflict", "committedDate": "2020-06-10T12:02:02Z", "type": "commit"}, {"oid": "906c4771e264406629a7f28d889e7c2b7bd6999f", "url": "https://github.com/kiegroup/kogito-apps/commit/906c4771e264406629a7f28d889e7c2b7bd6999f", "message": "recover CacheImpl history", "committedDate": "2020-06-10T12:05:59Z", "type": "commit"}, {"oid": "c7c7338817aede05af7d0d58d41b3a7f62f29828", "url": "https://github.com/kiegroup/kogito-apps/commit/c7c7338817aede05af7d0d58d41b3a7f62f29828", "message": "move to StorageImpl", "committedDate": "2020-06-10T12:07:52Z", "type": "commit"}, {"oid": "40b980c612dcea09d2185cf45f93709dacb93072", "url": "https://github.com/kiegroup/kogito-apps/commit/40b980c612dcea09d2185cf45f93709dacb93072", "message": "remove duplicated code", "committedDate": "2020-06-10T13:03:53Z", "type": "commit"}, {"oid": "a4f68f6173b43fc6d73a8c56898a5fd6dbcb9ce7", "url": "https://github.com/kiegroup/kogito-apps/commit/a4f68f6173b43fc6d73a8c56898a5fd6dbcb9ce7", "message": "create conflict", "committedDate": "2020-06-10T13:11:48Z", "type": "commit"}, {"oid": "1ec5a5a2a30448da89b8c364afc1fc50c6a24731", "url": "https://github.com/kiegroup/kogito-apps/commit/1ec5a5a2a30448da89b8c364afc1fc50c6a24731", "message": "remove StorageImpl without history", "committedDate": "2020-06-10T13:28:24Z", "type": "commit"}, {"oid": "90750c9cc73d9384d4ad311acf7d2f9306fa1f00", "url": "https://github.com/kiegroup/kogito-apps/commit/90750c9cc73d9384d4ad311acf7d2f9306fa1f00", "message": "add CacheImpl", "committedDate": "2020-06-10T13:28:50Z", "type": "commit"}, {"oid": "b2236ebed8f003f374043b12eda2b3663201e988", "url": "https://github.com/kiegroup/kogito-apps/commit/b2236ebed8f003f374043b12eda2b3663201e988", "message": "add CacheImpl", "committedDate": "2020-06-10T13:29:00Z", "type": "commit"}, {"oid": "eb7338fb58c693009f61e1fdb1727d52a715a38e", "url": "https://github.com/kiegroup/kogito-apps/commit/eb7338fb58c693009f61e1fdb1727d52a715a38e", "message": "update StorageImpl", "committedDate": "2020-06-10T13:29:28Z", "type": "commit"}, {"oid": "1bab731b435784816eeb62cc8c4e0401b7c3a629", "url": "https://github.com/kiegroup/kogito-apps/commit/1bab731b435784816eeb62cc8c4e0401b7c3a629", "message": "refactoring getDomainModelCache", "committedDate": "2020-06-10T14:33:11Z", "type": "commit"}, {"oid": "c944dfd312dbd1ae3fd173f819d97da5083c8348", "url": "https://github.com/kiegroup/kogito-apps/commit/c944dfd312dbd1ae3fd173f819d97da5083c8348", "message": "refactoring getDomainModelCache", "committedDate": "2020-06-10T15:07:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0NjM1OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438546359", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Storage<String, ObjectNode> getDomainModelCache(String elementId);\n          \n          \n            \n                Storage<String, ObjectNode> getDomainModelCache(String processId);", "author": "cristianonicolai", "createdAt": "2020-06-11T05:12:59Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/DataIndexStorageService.java", "diffHunk": "@@ -14,22 +14,23 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.cache;\n+package org.kie.kogito.index;\n \n import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.kie.kogito.index.model.Job;\n import org.kie.kogito.index.model.ProcessInstance;\n import org.kie.kogito.index.model.UserTaskInstance;\n+import org.kie.kogito.storage.api.Storage;\n \n-public interface CacheService {\n+public interface DataIndexStorageService {\n \n-    Cache<String, ProcessInstance> getProcessInstancesCache();\n+    Storage<String, ProcessInstance> getProcessInstancesCache();\n \n-    Cache<String, UserTaskInstance> getUserTaskInstancesCache();\n+    Storage<String, UserTaskInstance> getUserTaskInstancesCache();\n \n-    Cache<String, Job> getJobsCache();\n+    Storage<String, Job> getJobsCache();\n \n-    Cache<String, ObjectNode> getDomainModelCache(String processId);\n+    Storage<String, ObjectNode> getDomainModelCache(String elementId);", "originalCommit": "c944dfd312dbd1ae3fd173f819d97da5083c8348", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0NjU3OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438546578", "bodyText": "replace index by name ?", "author": "cristianonicolai", "createdAt": "2020-06-11T05:13:47Z", "path": "kogito-storage-commons/kogito-storage-commons-api/src/main/java/org/kie/kogito/storage/api/StorageService.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.storage.api;\n+\n+public interface StorageService {\n+\n+    Storage<String, String> getCache(String index);", "originalCommit": "c944dfd312dbd1ae3fd173f819d97da5083c8348", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU5MjEwOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438592109", "bodyText": "Done, I've also renamed index with name everywhere", "author": "r00ta", "createdAt": "2020-06-11T07:23:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0NjU3OA=="}], "type": "inlineReview"}, {"oid": "53b45befa614195b0cc82c44f7c3bb98e354a43f", "url": "https://github.com/kiegroup/kogito-apps/commit/53b45befa614195b0cc82c44f7c3bb98e354a43f", "message": "remove unused dependencies", "committedDate": "2020-06-11T07:18:24Z", "type": "commit"}, {"oid": "dd93797ed789c3af9c42a78cbadc83f1082f4a61", "url": "https://github.com/kiegroup/kogito-apps/commit/dd93797ed789c3af9c42a78cbadc83f1082f4a61", "message": "Update kogito-storage-commons/kogito-storage-commons-api/src/main/java/org/kie/kogito/storage/api/StorageService.java\n\nCo-authored-by: Cristiano Nicolai <cristiano.nicolai@gmail.com>", "committedDate": "2020-06-11T07:20:10Z", "type": "commit"}, {"oid": "636404b66c3da97642bd580aeabd8ad836571790", "url": "https://github.com/kiegroup/kogito-apps/commit/636404b66c3da97642bd580aeabd8ad836571790", "message": "Update data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/DataIndexStorageService.java\n\nCo-authored-by: Cristiano Nicolai <cristiano.nicolai@gmail.com>", "committedDate": "2020-06-11T07:20:48Z", "type": "commit"}, {"oid": "a0d2fe316cc9a82f3592650c61165562ad7003fc", "url": "https://github.com/kiegroup/kogito-apps/commit/a0d2fe316cc9a82f3592650c61165562ad7003fc", "message": "rename caches parameters", "committedDate": "2020-06-11T07:22:44Z", "type": "commit"}, {"oid": "d9aa40fc88152aab387e4ff0a95bdbaa45e6969b", "url": "https://github.com/kiegroup/kogito-apps/commit/d9aa40fc88152aab387e4ff0a95bdbaa45e6969b", "message": "rename kogito-storage-* with kogito-persistence-*", "committedDate": "2020-06-11T08:02:32Z", "type": "commit"}, {"oid": "cdff17386ec269cb159191b989025779e0725f74", "url": "https://github.com/kiegroup/kogito-apps/commit/cdff17386ec269cb159191b989025779e0725f74", "message": "remove kogito prefix from persistence modules", "committedDate": "2020-06-11T08:18:38Z", "type": "commit"}, {"oid": "3090a3a3019c936455936205fbf941b93cb03304", "url": "https://github.com/kiegroup/kogito-apps/commit/3090a3a3019c936455936205fbf941b93cb03304", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-2326-storage-abstraction", "committedDate": "2020-06-15T07:00:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAxNjI3Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r440016276", "bodyText": "@r00ta need to drop kogito from the module names", "author": "cristianonicolai", "createdAt": "2020-06-15T08:36:52Z", "path": "persistence-commons/README.md", "diffHunk": "@@ -0,0 +1,17 @@\n+# Kogito persistence commons\n+\n+This is the module that provides the persistence abstraction for the kogito apps. \n+\n+It is composed by three modules: \n+\n+1) `kogito-persistence-commons-api` contains the interfaces `Storage` and `StorageService` that the consumer has to inject in his application. In addition to that, it contains the interface `Query` that the consumer has to use to query the storage. ", "originalCommit": "3090a3a3019c936455936205fbf941b93cb03304", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2MDE5NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r440060195", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-06-15T09:51:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAxNjI3Ng=="}], "type": "inlineReview"}, {"oid": "7de147dcbba8888e5fa97b3a47a93016f7eb175c", "url": "https://github.com/kiegroup/kogito-apps/commit/7de147dcbba8888e5fa97b3a47a93016f7eb175c", "message": "update readme", "committedDate": "2020-06-15T09:50:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEyNDU3OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r440124579", "bodyText": "Not used", "author": "danielezonca", "createdAt": "2020-06-15T11:58:53Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/DataIndexStorageServiceImpl.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.kie.kogito.index.model.Job;\n+import org.kie.kogito.index.model.ProcessInstance;\n+import org.kie.kogito.index.model.UserTaskInstance;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.StorageService;\n+import org.kie.kogito.persistence.protobuf.ProtobufService;\n+\n+@ApplicationScoped\n+public class DataIndexStorageServiceImpl implements DataIndexStorageService {\n+\n+    private static final String PROCESS_INSTANCES_CACHE = \"processinstances\";\n+    private static final String USER_TASK_INSTANCES_CACHE = \"usertaskinstances\";\n+    private static final String JOBS_CACHE = \"jobs\";\n+    private static final String PROCESS_ID_MODEL_CACHE = \"processidmodel\";\n+\n+    @Inject\n+    StorageService cacheService;\n+\n+    @Inject\n+    ProtobufService protobufService;", "originalCommit": "7de147dcbba8888e5fa97b3a47a93016f7eb175c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEyOTA0Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r440129042", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-06-15T12:08:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEyNDU3OQ=="}], "type": "inlineReview"}, {"oid": "54e3f7a5ff59169d7f0af7f27d87eb3719626fa2", "url": "https://github.com/kiegroup/kogito-apps/commit/54e3f7a5ff59169d7f0af7f27d87eb3719626fa2", "message": "remove unused ProtobufService in DataIndexStorageServiceImpl", "committedDate": "2020-06-15T12:07:41Z", "type": "commit"}, {"oid": "a026505361e799831474654fbc4aabce009844b0", "url": "https://github.com/kiegroup/kogito-apps/commit/a026505361e799831474654fbc4aabce009844b0", "message": "fix code smells", "committedDate": "2020-06-15T14:46:20Z", "type": "commit"}, {"oid": "e30ec6608bec55fba6797e5971c37111830111e5", "url": "https://github.com/kiegroup/kogito-apps/commit/e30ec6608bec55fba6797e5971c37111830111e5", "message": "Provide the parametrized type in AttributeFilter", "committedDate": "2020-06-15T14:53:16Z", "type": "commit"}, {"oid": "39d4447bb67aa711b2c4bc4825354da543007085", "url": "https://github.com/kiegroup/kogito-apps/commit/39d4447bb67aa711b2c4bc4825354da543007085", "message": "fix code smells", "committedDate": "2020-06-15T16:36:54Z", "type": "commit"}, {"oid": "100b0795df49018fcc69786ab60c7fe0b8124b3c", "url": "https://github.com/kiegroup/kogito-apps/commit/100b0795df49018fcc69786ab60c7fe0b8124b3c", "message": "fix code smells", "committedDate": "2020-06-15T20:23:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwNzc0Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r440807742", "bodyText": "Is there any reason behind changing access modifier from public to default? same goes to the test methods below. This is not consistent with all the test classes in this module (all are public).", "author": "afalhambra", "createdAt": "2020-06-16T12:23:32Z", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/cache/StorageIT.java", "diffHunk": "@@ -25,27 +25,29 @@\n import io.quarkus.test.common.QuarkusTestResource;\n import io.quarkus.test.junit.QuarkusTest;\n import org.junit.jupiter.api.Test;\n+import org.kie.kogito.index.DataIndexStorageService;\n import org.kie.kogito.index.InfinispanServerTestResource;\n import org.kie.kogito.index.model.ProcessInstance;\n import org.kie.kogito.index.model.ProcessInstanceState;\n+import org.kie.kogito.persistence.api.Storage;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.kie.kogito.index.TestUtils.getProcessInstance;\n \n @QuarkusTest\n @QuarkusTestResource(InfinispanServerTestResource.class)\n-public class CacheIT {\n+class StorageIT {", "originalCommit": "100b0795df49018fcc69786ab60c7fe0b8124b3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0NDAwMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r440944000", "bodyText": "It was a sonarcloud warning (it's present in all the builds actually, see here https://sonarcloud.io/project/issues?id=org.kie.kogito%3Akogito-apps&open=AXI4nFUhwTXxARAeQrZ2&pullRequest=231&resolved=false) . I can change it back, I don't have a strong opinion on that. lmkwyt", "author": "r00ta", "createdAt": "2020-06-16T15:30:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwNzc0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1OTQyNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r440959427", "bodyText": "I would rather keep it with public access but just because all the rest of the test classes in this module are defined as public, just to keep it consistent in this particular case.", "author": "afalhambra", "createdAt": "2020-06-16T15:51:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwNzc0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzNDE2OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r441034169", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-06-16T17:50:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwNzc0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg1NDEwNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r440854105", "bodyText": "This dependency is not really needed here for this module.\nHowever, data-index-storage-infinispan needs it (currently it works cause storage-infinispan has a dep on storage-api).\nShouldn't be better to remove this from here and move to:\nhttps://github.com/kiegroup/kogito-apps/blob/master/data-index/data-index-storage/data-index-storage-infinispan/pom.xml#L20\nwdyt?", "author": "afalhambra", "createdAt": "2020-06-16T13:35:18Z", "path": "data-index/data-index-storage/data-index-storage-api/pom.xml", "diffHunk": "@@ -13,6 +13,14 @@\n   <name>Kogito :: Data Index Storage API</name>\n \n   <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>persistence-commons-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>persistence-commons-protobuf</artifactId>\n+    </dependency>", "originalCommit": "100b0795df49018fcc69786ab60c7fe0b8124b3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0NTkyNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r440945926", "bodyText": "Yep, you are right", "author": "r00ta", "createdAt": "2020-06-16T15:33:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg1NDEwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg2NzcxMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r440867711", "bodyText": "As I mentioned before, maybe it's worth to move the following dep here from pom.xml file in data-index-storage-api module\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <dependency>\n          \n          \n            \n                <dependency>\n          \n          \n            \n                  <groupId>org.kie.kogito</groupId>\n          \n          \n            \n                  <artifactId>persistence-commons-protobuf</artifactId>\n          \n          \n            \n                </dependency>", "author": "afalhambra", "createdAt": "2020-06-16T13:53:12Z", "path": "data-index/data-index-storage/data-index-storage-infinispan/pom.xml", "diffHunk": "@@ -17,6 +17,10 @@\n       <groupId>org.kie.kogito</groupId>\n       <artifactId>data-index-storage-api</artifactId>\n     </dependency>\n+    <dependency>", "originalCommit": "100b0795df49018fcc69786ab60c7fe0b8124b3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0ODAyMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r440948023", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-06-16T15:36:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg2NzcxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4NTczNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r440885734", "bodyText": "same with this dep - it's already included in data-index-storage-api. Is it really needed here?", "author": "afalhambra", "createdAt": "2020-06-16T14:16:25Z", "path": "data-index/data-index-storage/data-index-storage-protobuf/pom.xml", "diffHunk": "@@ -18,6 +18,10 @@\n       <groupId>org.kie.kogito</groupId>\n       <artifactId>data-index-storage-api</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>persistence-commons-protobuf</artifactId>\n+    </dependency>", "originalCommit": "100b0795df49018fcc69786ab60c7fe0b8124b3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0NzkyMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r440947922", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-06-16T15:35:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4NTczNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwNDAwOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r440904008", "bodyText": "why changing access modifier to default? is there any reason behind? same goes to the test methods. All the test classes are defined as public with public test methods. Just to keep it consistent across modules.", "author": "afalhambra", "createdAt": "2020-06-16T14:40:08Z", "path": "persistence-commons/persistence-commons-infinispan/src/test/java/org/kie/kogito/persistence/infinispan/query/InfinispanQueryTest.java", "diffHunk": "@@ -27,22 +27,23 @@\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.Arguments;\n import org.junit.jupiter.params.provider.MethodSource;\n-import org.kie.kogito.index.model.ProcessInstance;\n-import org.kie.kogito.index.query.AttributeFilter;\n+import org.kie.kogito.persistence.api.query.AttributeFilter;\n import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n \n import static java.util.Arrays.asList;\n import static java.util.Collections.emptyList;\n-import static org.kie.kogito.index.query.QueryFilterFactory.*;\n-import static org.kie.kogito.index.query.SortDirection.ASC;\n-import static org.kie.kogito.index.query.SortDirection.DESC;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.*;\n+import static org.kie.kogito.persistence.api.query.SortDirection.ASC;\n+import static org.kie.kogito.persistence.api.query.SortDirection.DESC;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n @ExtendWith(MockitoExtension.class)\n-public class InfinispanQueryTest {\n+class InfinispanQueryTest {", "originalCommit": "100b0795df49018fcc69786ab60c7fe0b8124b3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0OTg0NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r440949845", "bodyText": "Same as above, let me know : )", "author": "r00ta", "createdAt": "2020-06-16T15:38:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwNDAwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1OTk0Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r440959943", "bodyText": "it is ok here, there are no other test classes. Thanks!", "author": "afalhambra", "createdAt": "2020-06-16T15:52:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwNDAwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzNTA0NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r441035044", "bodyText": "Ok! I'll leave it as it is now then", "author": "r00ta", "createdAt": "2020-06-16T17:51:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwNDAwOA=="}], "type": "inlineReview"}, {"oid": "e7e604f499d292c1680f56d08b61c78daf3f1b27", "url": "https://github.com/kiegroup/kogito-apps/commit/e7e604f499d292c1680f56d08b61c78daf3f1b27", "message": "removed unused dependencies", "committedDate": "2020-06-16T15:35:39Z", "type": "commit"}, {"oid": "ccd9cfda6e640d8809389381f2a56f3241a7b4b2", "url": "https://github.com/kiegroup/kogito-apps/commit/ccd9cfda6e640d8809389381f2a56f3241a7b4b2", "message": "make StorageIT identifiers public", "committedDate": "2020-06-16T17:49:59Z", "type": "commit"}]}