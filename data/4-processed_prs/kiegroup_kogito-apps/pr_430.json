{"pr_number": 430, "pr_title": "KOGITO-3229 Update TrustyUI Explanation section following API changes", "pr_createdAt": "2020-09-01T18:01:34Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/430", "timeline": [{"oid": "8cbec1fa453b733c7b75ab486052d8056b3374a2", "url": "https://github.com/kiegroup/kogito-apps/commit/8cbec1fa453b733c7b75ab486052d8056b3374a2", "message": "KOGITO-3229 Updating Explanation section following API changes", "committedDate": "2020-09-01T17:52:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk2MzEwOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/430#discussion_r481963108", "bodyText": "There's talk on zulip of using executions/decisions/{exId}/explain/saliencies.\n@r00ta @kostola What was finally agreed?", "author": "manstis", "createdAt": "2020-09-02T10:23:36Z", "path": "ui-packages/packages/trusty/api-mock/routes.json", "diffHunk": "@@ -4,5 +4,5 @@\n   \"/executions/:executionType/:executionId/structuredInputs\": \"/inputs?executionId=:executionId\",\n   \"/executions/:executionType/:executionId/outcomes\": \"/outcomes?header.executionId=:executionId&singular=1\",\n   \"/executions/:executionType/:executionId/outcomes/:outcomeId\": \"/outcomeDetail?outcomeId=:outcomeId&singular=1\",\n-  \"/executions/:executionType/:executionId/featureImportance\": \"/featureImportance?executionId=:executionId\"\n+  \"/executions/:executionType/:executionId/saliencies\": \"/saliencies\"", "originalCommit": "8cbec1fa453b733c7b75ab486052d8056b3374a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA3NTU3MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/430#discussion_r482075571", "bodyText": "I've updated the endpoint to /explanations/saliencies.", "author": "kelvah", "createdAt": "2020-09-02T13:38:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk2MzEwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk2Njc5NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/430#discussion_r481966795", "bodyText": "Is this still the correct name for this hook?", "author": "manstis", "createdAt": "2020-09-02T10:30:21Z", "path": "ui-packages/packages/trusty/src/components/Templates/Explanation/useFeaturesScores.tsx", "diffHunk": "@@ -1,57 +1,42 @@\n import { useEffect, useState } from 'react';\n-import { RemoteData, FeatureScores } from '../../../types';\n-import { AxiosRequestConfig } from 'axios';\n-import { EXECUTIONS_PATH, httpClient } from '../../../utils/api/httpClient';\n-import { orderBy } from 'lodash';\n+import { FeatureScores, RemoteData, Saliencies } from '../../../types';\n+import { orderBy, find } from 'lodash';\n \n-const useFeaturesScores = (executionId: string) => {\n-  const [featuresScores, setFeaturesScores] = useState<\n-    RemoteData<Error, FeatureScores[]>\n-  >({\n-    status: 'NOT_ASKED'\n-  });\n+const useFeaturesScores = (", "originalCommit": "8cbec1fa453b733c7b75ab486052d8056b3374a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk2Njg4OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/430#discussion_r481966889", "bodyText": "(And file name)", "author": "manstis", "createdAt": "2020-09-02T10:30:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk2Njc5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MzM1Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/430#discussion_r481993356", "bodyText": "useSaliencies is now the hook fetching the saliences endpoint and retrieving all the explainability info for the current execution, while useFeaturesScores gets the scores for the currently selected outcome (plus some manipulation).\nit seemed OK to call them like that. Do you have any suggestion about renaming them?", "author": "kelvah", "createdAt": "2020-09-02T11:21:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk2Njc5NQ=="}], "type": "inlineReview"}, {"oid": "fb9100576c79dcb49c1ccb3990fe3ea679c695d0", "url": "https://github.com/kiegroup/kogito-apps/commit/fb9100576c79dcb49c1ccb3990fe3ea679c695d0", "message": "KOGITO-3229 Fixed full explanation chart not closing", "committedDate": "2020-09-02T11:25:56Z", "type": "commit"}, {"oid": "e7ed79a1d3ea629a681f446495e13954a8599ac3", "url": "https://github.com/kiegroup/kogito-apps/commit/e7ed79a1d3ea629a681f446495e13954a8599ac3", "message": "KOGITO-3229 Fixed saliencies endpoint", "committedDate": "2020-09-02T13:36:27Z", "type": "commit"}, {"oid": "a970d59db8ace526e773640cb5c03ef905b0ef14", "url": "https://github.com/kiegroup/kogito-apps/commit/a970d59db8ace526e773640cb5c03ef905b0ef14", "message": "KOGITO-3229 Removed links to other dashboards", "committedDate": "2020-09-03T14:56:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxMjA2Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/430#discussion_r483512066", "bodyText": "I would consider putting all the status values into an enum and replace the occurrences of string literals, but not introduced in this PR.", "author": "jstastny-cz", "createdAt": "2020-09-04T09:47:57Z", "path": "ui-packages/packages/trusty/src/components/Templates/Explanation/Explanation.tsx", "diffHunk": "@@ -162,9 +177,9 @@ const Explanation = ({ outcomes }: ExplanationProps) => {\n               </Title>\n             </StackItem>\n             <StackItem>\n-              {(featuresScores.status === 'LOADING' ||\n-                (featuresScores.status === 'SUCCESS' &&\n-                  featuresScores.data.length > 0)) && (\n+              {(saliencies.status === 'LOADING' ||", "originalCommit": "a970d59db8ace526e773640cb5c03ef905b0ef14", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxMzYxOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/430#discussion_r483513618", "bodyText": "especially here would the enums be useful - I have troubles identifying what the applicable values are in which property.", "author": "jstastny-cz", "createdAt": "2020-09-04T09:50:59Z", "path": "ui-packages/packages/trusty/src/components/Templates/Explanation/tests/useFeaturesScores.test.tsx", "diffHunk": "@@ -1,21 +1,37 @@\n import { renderHook } from '@testing-library/react-hooks';\n import useFeaturesScores from '../useFeaturesScores';\n-import * as api from '../../../../utils/api/httpClient';\n-import { FeatureScores } from '../../../../types';\n-import { act } from 'react-test-renderer';\n+import { RemoteData, Saliencies } from '../../../../types';\n import { orderBy } from 'lodash';\n \n-const flushPromises = () => new Promise(setImmediate);\n-const apiMock = jest.spyOn(api, 'httpClient');\n-\n-beforeEach(() => {\n-  apiMock.mockClear();\n-});\n-\n describe('useFeaturesScores', () => {\n   test('retrieves feature scores of an execution', async () => {\n-    const scores = {\n-      data: {\n+    const { result } = renderHook(() => {\n+      // tslint:disable-next-line:react-hooks-nesting\n+      return useFeaturesScores(\n+        saliencies,\n+        'b2b0ed8d-c1e2-46b5-3ac54ff4beae-1000'\n+      );\n+    });\n+    let sortedFeatures;\n+    if (saliencies.status === 'SUCCESS') {\n+      sortedFeatures = orderBy(\n+        saliencies.data.saliencies[0].featureImportance,\n+        item => Math.abs(item.featureScore),\n+        'asc'\n+      );\n+    }\n+\n+    expect(result.current.featuresScores).toStrictEqual(sortedFeatures);\n+  });\n+});\n+\n+const saliencies = {\n+  status: 'SUCCESS',\n+  data: {\n+    status: 'SUCCEEDED',", "originalCommit": "a970d59db8ace526e773640cb5c03ef905b0ef14", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxNTUwMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/430#discussion_r483515501", "bodyText": "I would suggest rely here on an enum that'd be exported and used globally.", "author": "jstastny-cz", "createdAt": "2020-09-04T09:54:39Z", "path": "ui-packages/packages/trusty/src/types.ts", "diffHunk": "@@ -70,9 +70,20 @@ export interface Outcome {\n \n export interface FeatureScores {\n   featureName: string;\n+  featureId: string;\n   featureScore: number;\n }\n \n+export interface Saliency {\n+  outcomeId: string;\n+  featureImportance: FeatureScores[];\n+}\n+export interface Saliencies {\n+  status: 'SUCCEEDED' | 'FAILED';", "originalCommit": "a970d59db8ace526e773640cb5c03ef905b0ef14", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}