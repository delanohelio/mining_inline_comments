{"pr_number": 528, "pr_title": "KOGITO-3797 Avoid timeout exception from Infinispan", "pr_createdAt": "2020-11-09T08:56:00Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/528", "timeline": [{"oid": "9508844134ff53c66a1f74e12b082168662875c6", "url": "https://github.com/kiegroup/kogito-apps/commit/9508844134ff53c66a1f74e12b082168662875c6", "message": "KOGITO-3797 Avoid timeout exception from Infinispan", "committedDate": "2020-12-03T04:23:45Z", "type": "forcePushed"}, {"oid": "a3b85e36be5891c7892ccc478acfd1667729b23d", "url": "https://github.com/kiegroup/kogito-apps/commit/a3b85e36be5891c7892ccc478acfd1667729b23d", "message": "KOGITO-3797 Avoid timeout exception from Infinispan", "committedDate": "2020-12-03T04:53:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkzODI0OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/528#discussion_r534938248", "bodyText": "why not using the Optional.of().orElse ?", "author": "radtriste", "createdAt": "2020-12-03T08:45:50Z", "path": "persistence-commons/persistence-commons-infinispan/src/main/java/org/kie/kogito/persistence/infinispan/cache/InfinispanCacheManager.java", "diffHunk": "@@ -72,42 +74,39 @@ public void destroy() {\n     /**\n      * Gets the cache if exists, otherwise tries to create one with the given template.\n      * If the template does not exist on the server, creates the cache based on a default configuration.\n+     *\n      * @param name the cache manager name\n-     * @param template the template that must exists on the server\n      * @see KogitoCacheDefaultConfiguration\n      */\n-    protected <K, V> RemoteCache<K, V> getOrCreateCache(final String name, final String template) {\n-        try {\n-            LOGGER.debug(\"Trying to get cache {} from the server\", name);\n-            RemoteCache<K, V> remoteCache = manager.getCache(name);\n-            if (remoteCache == null) {\n-                LOGGER.debug(\"Cache {} not found, trying to create a new one based on template {}\", name, template);\n-                return manager.administration().getOrCreateCache(name, template);\n-            }\n-            return remoteCache;\n-        } catch (HotRodClientException e) {\n-            if (e.isServerError()) {\n-                LOGGER.info(\"Creating a cache for '{}' based on the default configuration\", name);\n-                RemoteCache<K, V> cache = manager.administration().getOrCreateCache(name, new KogitoCacheDefaultConfiguration(name));\n-                LOGGER.debug(\"Default cache created {}\", cache.getName());\n-                return cache;\n-            }\n-            throw e;\n+    protected <K, V> RemoteCache<K, V> getOrCreateCache(final String name) {\n+        LOGGER.debug(\"Trying to get cache {} from the server\", name);\n+        RemoteCache<K, V> remoteCache = manager.getCache(name);\n+        return remoteCache == null ? createCache(name) : remoteCache;", "originalCommit": "a3b85e36be5891c7892ccc478acfd1667729b23d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5MTg3OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/528#discussion_r535991879", "bodyText": "old style coder? :P dont see much of a need for that in here to be honest.", "author": "cristianonicolai", "createdAt": "2020-12-04T10:21:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkzODI0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5NDg3Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/528#discussion_r535994872", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    RemoteCache<K, V> remoteCache = manager.getCache(name);\n          \n          \n            \n                    return remoteCache == null ? createCache(name) : remoteCache;\n          \n          \n            \n                    return Optional.ofNullable(manager.getCache(name)).orElse(createCache(name))\n          \n      \n    \n    \n  \n\n:P", "author": "radtriste", "createdAt": "2020-12-04T10:25:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkzODI0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk0NDgyNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/528#discussion_r534944825", "bodyText": "same here, something like\nreturn admin.createCache(name, cacheTemplate.orElse(new KogitoCacheDefaultConfiguration(name)))\n\nAlso the DEBUG log should not be there IMO or change the message Cache {} not found => Creating cache based on ...", "author": "radtriste", "createdAt": "2020-12-03T08:49:04Z", "path": "persistence-commons/persistence-commons-infinispan/src/main/java/org/kie/kogito/persistence/infinispan/cache/InfinispanCacheManager.java", "diffHunk": "@@ -72,42 +74,39 @@ public void destroy() {\n     /**\n      * Gets the cache if exists, otherwise tries to create one with the given template.\n      * If the template does not exist on the server, creates the cache based on a default configuration.\n+     *\n      * @param name the cache manager name\n-     * @param template the template that must exists on the server\n      * @see KogitoCacheDefaultConfiguration\n      */\n-    protected <K, V> RemoteCache<K, V> getOrCreateCache(final String name, final String template) {\n-        try {\n-            LOGGER.debug(\"Trying to get cache {} from the server\", name);\n-            RemoteCache<K, V> remoteCache = manager.getCache(name);\n-            if (remoteCache == null) {\n-                LOGGER.debug(\"Cache {} not found, trying to create a new one based on template {}\", name, template);\n-                return manager.administration().getOrCreateCache(name, template);\n-            }\n-            return remoteCache;\n-        } catch (HotRodClientException e) {\n-            if (e.isServerError()) {\n-                LOGGER.info(\"Creating a cache for '{}' based on the default configuration\", name);\n-                RemoteCache<K, V> cache = manager.administration().getOrCreateCache(name, new KogitoCacheDefaultConfiguration(name));\n-                LOGGER.debug(\"Default cache created {}\", cache.getName());\n-                return cache;\n-            }\n-            throw e;\n+    protected <K, V> RemoteCache<K, V> getOrCreateCache(final String name) {\n+        LOGGER.debug(\"Trying to get cache {} from the server\", name);\n+        RemoteCache<K, V> remoteCache = manager.getCache(name);\n+        return remoteCache == null ? createCache(name) : remoteCache;\n+    }\n+\n+    protected <K, V> RemoteCache<K, V> createCache(final String name) {\n+        RemoteCacheManagerAdmin admin = manager.administration();\n+        if (cacheTemplateName.isPresent()) {\n+            LOGGER.debug(\"Cache {} not found, trying to create a new one based on template {}\", name, cacheTemplateName.get());\n+            return admin.createCache(name, cacheTemplateName.get());\n+        } else {\n+            LOGGER.debug(\"Cache {} not found, trying to create a new one based on Kogito default configuration\", name);\n+            return admin.createCache(name, new KogitoCacheDefaultConfiguration(name));", "originalCommit": "a3b85e36be5891c7892ccc478acfd1667729b23d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5MjM3MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/528#discussion_r535992370", "bodyText": "ok, I tweaked the log because I think it can be handy to know which config will be used, at least helped me during the tests.", "author": "cristianonicolai", "createdAt": "2020-12-04T10:21:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk0NDgyNQ=="}], "type": "inlineReview"}, {"oid": "2193ae130979fd78199dd97787db397beefbf9f1", "url": "https://github.com/kiegroup/kogito-apps/commit/2193ae130979fd78199dd97787db397beefbf9f1", "message": "KOGITO-3797 Avoid timeout exception from Infinispan", "committedDate": "2020-12-04T10:20:38Z", "type": "forcePushed"}, {"oid": "2d3df0d5d0fdbc5b201c5221d79bf250ab38888c", "url": "https://github.com/kiegroup/kogito-apps/commit/2d3df0d5d0fdbc5b201c5221d79bf250ab38888c", "message": "KOGITO-3797 Avoid timeout exception from Infinispan", "committedDate": "2020-12-07T09:22:45Z", "type": "commit"}, {"oid": "2d3df0d5d0fdbc5b201c5221d79bf250ab38888c", "url": "https://github.com/kiegroup/kogito-apps/commit/2d3df0d5d0fdbc5b201c5221d79bf250ab38888c", "message": "KOGITO-3797 Avoid timeout exception from Infinispan", "committedDate": "2020-12-07T09:22:45Z", "type": "forcePushed"}]}