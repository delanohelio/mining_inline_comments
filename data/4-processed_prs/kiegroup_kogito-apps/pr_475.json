{"pr_number": 475, "pr_title": "KOGITO-2092 Task inbox filters building block", "pr_createdAt": "2020-10-06T10:32:53Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/475", "timeline": [{"oid": "0dbd6ae87ae97086c2236189659ddd977a1c83fd", "url": "https://github.com/kiegroup/kogito-apps/commit/0dbd6ae87ae97086c2236189659ddd977a1c83fd", "message": "KOGITO-2092 Task inbox filters building block", "committedDate": "2020-10-07T04:07:27Z", "type": "forcePushed"}, {"oid": "60d9143cce88b75001648daa09d6c41ff055e7c3", "url": "https://github.com/kiegroup/kogito-apps/commit/60d9143cce88b75001648daa09d6c41ff055e7c3", "message": "KOGITO-2092 Task inbox filters building block", "committedDate": "2020-10-07T06:02:35Z", "type": "forcePushed"}, {"oid": "8aa59042e3ab0d3f69162902bb5f9b3570f8f44b", "url": "https://github.com/kiegroup/kogito-apps/commit/8aa59042e3ab0d3f69162902bb5f9b3570f8f44b", "message": "KOGITO-2092 Task inbox filters building block", "committedDate": "2020-10-07T08:18:41Z", "type": "forcePushed"}, {"oid": "253ee96a4f50ba7efab60b5408de0abcddf4c9f1", "url": "https://github.com/kiegroup/kogito-apps/commit/253ee96a4f50ba7efab60b5408de0abcddf4c9f1", "message": "KOGITO-2092 Task inbox filters building block", "committedDate": "2020-10-07T11:20:32Z", "type": "forcePushed"}, {"oid": "51c18d6149a9cf84ad38f9c4282a894ab194c001", "url": "https://github.com/kiegroup/kogito-apps/commit/51c18d6149a9cf84ad38f9c4282a894ab194c001", "message": "KOGITO-2092 Task inbox filters building block", "committedDate": "2020-10-08T08:49:31Z", "type": "forcePushed"}, {"oid": "56745627360328b538208722a654c022f8ee034f", "url": "https://github.com/kiegroup/kogito-apps/commit/56745627360328b538208722a654c022f8ee034f", "message": "KOGITO-2092 Task inbox filters building block", "committedDate": "2020-10-13T05:59:28Z", "type": "commit"}, {"oid": "56745627360328b538208722a654c022f8ee034f", "url": "https://github.com/kiegroup/kogito-apps/commit/56745627360328b538208722a654c022f8ee034f", "message": "KOGITO-2092 Task inbox filters building block", "committedDate": "2020-10-13T05:59:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgxNjAxNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/475#discussion_r503816014", "bodyText": "white space formatting (missing space after if).", "author": "jstastny-cz", "createdAt": "2020-10-13T09:46:18Z", "path": "ui-packages/packages/task-console/server/server.js", "diffHunk": "@@ -59,37 +59,82 @@ function timeout(ms) {\n   return new Promise(resolve => setTimeout(resolve, ms));\n }\n \n+const checkStatesFilters = (userTaskInstance, states) => {\n+  return states.includes(userTaskInstance.state)\n+}\n+\n+const checkTaskNameFilters = (userTaskInstance, names) => {\n+  for (let i = 0; i < names.length; i++) {\n+    if (\n+      userTaskInstance.referenceName &&\n+      userTaskInstance.referenceName\n+        .toLowerCase()\n+        .indexOf(\n+          names[i].referenceName.like.toLowerCase()\n+        ) > -1\n+    ) {\n+      return true\n+    }\n+  }\n+}\n+\n+const checkTaskAssignment = (userTaskInstance, assignments) => {\n+  const actualOwnerClause = assignments.or[0];\n+  if (actualOwnerClause.actualOwner.equal === userTaskInstance.actualOwner) {\n+    return true;\n+  }\n+\n+  const potentialUsersClause = assignments.or[1];\n+\n+  if (userTaskInstance.potentialUsers.includes(potentialUsersClause.potentialUsers.contains)) {\n+    return true;\n+  }\n+\n+  const potentialGroupsClause = assignments.or[2];\n+  return potentialGroupsClause.potentialGroups.containsAny\n+    .some(clauseGroup => userTaskInstance.potentialGroups.includes(clauseGroup));\n+}\n+\n // Provide resolver functions for your schema fields\n const resolvers = {\n   Query: {\n     UserTaskInstances: async (parent, args) => {\n       let result = data.UserTaskInstances.filter(datum => {\n-\n-        if (args['where'].state && args['where'].state.in) {\n-          return args['where'].state.in.includes(datum.state);\n-        } else if (args['where'].id && args['where'].id.equal) {\n-          // mock to return single id\n-          return datum.id === args['where'].id.equal\n-        } else {\n-          // querying tasks assigned to current user\n-          const actualOwnerClause = args['where'].or[0];\n-          if(actualOwnerClause.actualOwner.equal === datum.actualOwner) {\n-            return true;\n+        console.log('args', args)\n+        \n+        if (args['where'].and) {\n+          // if filter available\n+          if(!checkTaskAssignment(datum,args['where'].and[0])){", "originalCommit": "56745627360328b538208722a654c022f8ee034f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg4MjY4OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/475#discussion_r503882689", "bodyText": "done :)", "author": "AjayJagan", "createdAt": "2020-10-13T11:43:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgxNjAxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgyMTUzNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/475#discussion_r503821537", "bodyText": "I would rename the id argument into something more general, as in both cases below, the value is not an id really, it's either state or taskName ... so I would rename id->value or similar.\nThat might also apply to the type argument ... it's rather a categoryName passed to the ToolbarFilter component, right? Also in case of this attribute and checking strings below, I'd like to see a more tighter relation, not just string comparison - can we have an enum Category with values Status and TaskName for example? those values would be passed as categoryName to ToolbarFilter and then matched here below (possibly by a switch instead of two independent ifs).", "author": "jstastny-cz", "createdAt": "2020-10-13T09:55:03Z", "path": "ui-packages/packages/task-console/src/components/Molecules/TaskInboxToolbar/TaskInboxToolbar.tsx", "diffHunk": "@@ -0,0 +1,209 @@\n+import React, { useState, useContext, useReducer, useEffect } from 'react';\n+import {\n+  Button,\n+  Select,\n+  SelectOption,\n+  SelectVariant,\n+  ToolbarFilter,\n+  ToolbarGroup,\n+  ToolbarItem,\n+  ToolbarToggleGroup,\n+  Toolbar,\n+  ToolbarContent,\n+  TextInput,\n+  InputGroup\n+} from '@patternfly/react-core';\n+import { FilterIcon, SyncIcon } from '@patternfly/react-icons';\n+import _ from 'lodash';\n+import TaskConsoleContext, {\n+  IContext\n+} from '../../../context/TaskConsoleContext/TaskConsoleContext';\n+import { GraphQL, componentOuiaProps, OUIAProps } from '@kogito-apps/common';\n+import { getAllTaskStates } from '../../../util/Utils';\n+\n+interface ITaskInboxFilterProps {\n+  applyFilter: () => void;\n+  resetFilter: () => void;\n+}\n+const TaskInboxToolbar: React.FC<ITaskInboxFilterProps & OUIAProps> = ({\n+  applyFilter,\n+  resetFilter,\n+  ouiaSafe,\n+  ouiaId\n+}) => {\n+  const context: IContext<GraphQL.UserTaskInstance> = useContext(\n+    TaskConsoleContext\n+  );\n+  const [, forceUpdate] = useReducer(x => x + 1, 0);\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [searchText, setSearchText] = useState<string>('');\n+\n+  useEffect(() => {\n+    context.getActiveFilters().selectedStatus = [\n+      ...context.getActiveFilters().filters.status\n+    ];\n+    forceUpdate();\n+  }, []);\n+\n+  const onFilterClick = () => {\n+    context.getActiveFilters().filters.status = [\n+      ...context.getActiveFilters().selectedStatus\n+    ];\n+    if (\n+      !context.getActiveFilters().filters.taskNames.includes(searchText) &&\n+      searchText.length > 0\n+    ) {\n+      context.getActiveFilters().filters.taskNames = [\n+        ...context.getActiveFilters().filters.taskNames,\n+        searchText\n+      ];\n+    }\n+    setSearchText('');\n+    applyFilter();\n+  };\n+\n+  const onSelect = (event: React.MouseEvent, selection: string): void => {\n+    const selectedStatus = context.getActiveFilters().selectedStatus;\n+    if (!selectedStatus.includes(selection)) {\n+      selectedStatus.push(selection);\n+    } else {\n+      _.remove(selectedStatus, (status: string) => {\n+        return status === selection;\n+      });\n+    }\n+\n+    forceUpdate();\n+  };\n+\n+  const onDelete = (type: string = '', id: string = ''): void => {", "originalCommit": "56745627360328b538208722a654c022f8ee034f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg4Mjc0NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/475#discussion_r503882744", "bodyText": "done :)", "author": "AjayJagan", "createdAt": "2020-10-13T11:43:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgyMTUzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgyNDc1Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/475#discussion_r503824752", "bodyText": "can't we filter the options based on the status string rather than relying on fixed offset?", "author": "jstastny-cz", "createdAt": "2020-10-13T10:00:11Z", "path": "ui-packages/packages/task-console/src/components/Molecules/TaskInboxToolbar/tests/TaskInboxToolbar.test.tsx", "diffHunk": "@@ -0,0 +1,165 @@\n+import React, { FormEvent } from 'react';\n+import TaskInboxToolbar from '../TaskInboxToolbar';\n+import { getWrapper, GraphQL, DefaultUser, User } from '@kogito-apps/common';\n+import TaskConsoleContext, {\n+  DefaultContext\n+} from '../../../../context/TaskConsoleContext/TaskConsoleContext';\n+import {\n+  Select,\n+  SelectOption,\n+  Chip,\n+  TextInputBase\n+} from '@patternfly/react-core';\n+import { act } from 'react-dom/test-utils';\n+import wait from 'waait';\n+/* tslint:disable */\n+const testUser: User = new DefaultUser('test', ['group1', 'group2']);\n+const applyFilter = jest.fn();\n+const resetFilter = jest.fn();\n+\n+const getTaskInboxWrapper = context => {\n+  return getWrapper(\n+    <TaskConsoleContext.Provider value={context}>\n+      <TaskInboxToolbar applyFilter={applyFilter} resetFilter={resetFilter} />\n+    </TaskConsoleContext.Provider>,\n+    'TaskInboxToolbar'\n+  );\n+};\n+\n+describe('TaskInbox toolbar tests', () => {\n+  it('toolbar initial snapshot', () => {\n+    const context = new DefaultContext<GraphQL.UserTaskInstance>(testUser);\n+    expect(getTaskInboxWrapper(context)).toMatchSnapshot();\n+  });\n+  it('select status from dropdown', () => {\n+    const context = new DefaultContext<GraphQL.UserTaskInstance>(testUser);\n+    let wrapper = getTaskInboxWrapper(context);\n+    wrapper\n+      .find(Select)\n+      .find('button')\n+      .simulate('click');\n+    wrapper = wrapper.update();\n+    // check length to be 5\n+    expect(wrapper.find(Select).find(SelectOption).length).toBe(5);\n+    wrapper\n+      .find(Select)\n+      .find(SelectOption)\n+      .at(2)", "originalCommit": "56745627360328b538208722a654c022f8ee034f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg4MjgxMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/475#discussion_r503882812", "bodyText": "done :)", "author": "AjayJagan", "createdAt": "2020-10-13T11:43:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgyNDc1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgyOTkwMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/475#discussion_r503829902", "bodyText": "We need to mock the TaskInboxToolbar in all but this test to prevent the huge snapshot file.\nEasiest way might be:\n\nmove this test to a separate file.\nin TaskInbox.test.tsx mock the TaskInboxToolbar component.\nin the new file don't mock it (for exactly this test).", "author": "jstastny-cz", "createdAt": "2020-10-13T10:08:53Z", "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/tests/TaskInbox.test.tsx", "diffHunk": "@@ -324,4 +469,188 @@ describe('TaskInbox tests', () => {\n       direction: 'asc'\n     });\n   });\n+\n+  it('show no filters selected state and select reset', async () => {", "originalCommit": "56745627360328b538208722a654c022f8ee034f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg4Mjk0Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/475#discussion_r503882946", "bodyText": "@jstastny-cz , please tell me if the file name looks ok", "author": "AjayJagan", "createdAt": "2020-10-13T11:43:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgyOTkwMg=="}], "type": "inlineReview"}, {"oid": "3149a9faad710993c0e977bc3cbc991e3c1e9c59", "url": "https://github.com/kiegroup/kogito-apps/commit/3149a9faad710993c0e977bc3cbc991e3c1e9c59", "message": "KOGITO-2092 Test fixes", "committedDate": "2020-10-13T11:57:20Z", "type": "forcePushed"}, {"oid": "538c14709bbcb73837226812073bc6e7c286cb9c", "url": "https://github.com/kiegroup/kogito-apps/commit/538c14709bbcb73837226812073bc6e7c286cb9c", "message": "KOGITO-2092 Test fixes", "committedDate": "2020-10-13T12:02:36Z", "type": "forcePushed"}, {"oid": "8091bf7e45cc45290ceecd3478cddc33b9fe99aa", "url": "https://github.com/kiegroup/kogito-apps/commit/8091bf7e45cc45290ceecd3478cddc33b9fe99aa", "message": "KOGITO-2092 Test fixes", "committedDate": "2020-10-13T12:13:24Z", "type": "forcePushed"}, {"oid": "904ad8ce13e3471a8a2111363ad8d2a07c04df74", "url": "https://github.com/kiegroup/kogito-apps/commit/904ad8ce13e3471a8a2111363ad8d2a07c04df74", "message": "KOGITO-2092 Test fixes", "committedDate": "2020-10-13T15:07:59Z", "type": "commit"}, {"oid": "904ad8ce13e3471a8a2111363ad8d2a07c04df74", "url": "https://github.com/kiegroup/kogito-apps/commit/904ad8ce13e3471a8a2111363ad8d2a07c04df74", "message": "KOGITO-2092 Test fixes", "committedDate": "2020-10-13T15:07:59Z", "type": "forcePushed"}]}