{"pr_number": 347, "pr_title": "KOGITO-2857 - Add trusty readme/documentation", "pr_createdAt": "2020-07-24T21:21:11Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/347", "timeline": [{"oid": "2a9a9a2cad157b0ff9fa3e135642ea2c9c5a4dc3", "url": "https://github.com/kiegroup/kogito-apps/commit/2a9a9a2cad157b0ff9fa3e135642ea2c9c5a4dc3", "message": "add trusty readme", "committedDate": "2020-07-24T21:18:40Z", "type": "commit"}, {"oid": "fe42c35b4be720934326bb8a775140e3f1c6de52", "url": "https://github.com/kiegroup/kogito-apps/commit/fe42c35b4be720934326bb8a775140e3f1c6de52", "message": "update readme", "committedDate": "2020-07-27T07:00:14Z", "type": "commit"}, {"oid": "f11c31c771b0cb9bfdd30948cd30be680fcc2e74", "url": "https://github.com/kiegroup/kogito-apps/commit/f11c31c771b0cb9bfdd30948cd30be680fcc2e74", "message": "update readme", "committedDate": "2020-08-06T21:50:18Z", "type": "commit"}, {"oid": "9389544b2d0ab478e094456db8409c4a05da9eea", "url": "https://github.com/kiegroup/kogito-apps/commit/9389544b2d0ab478e094456db8409c4a05da9eea", "message": "Update README.md", "committedDate": "2020-08-10T07:06:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgwNDk0NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/347#discussion_r467804945", "bodyText": "Would it be possible to add an example of \"explanation\" to this README? It would be useful for user to see what kind of information he can expect.", "author": "jiripetrlik", "createdAt": "2020-08-10T10:06:52Z", "path": "trusty/README.md", "diffHunk": "@@ -0,0 +1,69 @@\n+# Trusty Service \n+\n+Within the TrustyAI initiative, the trusty service is the main service that aims to collect tracing events emitted by one or more kogito-runtime application and to provide explainability on top of the decisions that have been by the application. \n+\n+## Architecture \n+\n+The architecture looks like the following: \n+\n+![trusty-architecture_enterprise](https://user-images.githubusercontent.com/18282531/89585961-167c3700-d83f-11ea-8fdc-ab840442bb62.png)\n+\n+In particular we have: \n+1) A kogito-runtime application with the `tracing` addon activated.\n+2) A kafka broker and an infinispan instance.\n+3) The trusty service (this module).\n+4) The explainability service\n+5) The auditUI \n+\n+Descriptions and instructions for every single component are provided in the next subsections. \n+\n+### The kogito-runtime application \n+\n+The kogito-runtime application is a standard kogito application that has imported the `tracing-addon` as dependency \n+\n+```xml\n+      <dependency>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>tracing</artifactId>\n+      </dependency>\n+```\n+\n+and that is using one or more DMN models. In addition to that, the application needs to know the address of the kafka broker. For example, if you are using Quarkus, you can \n+set it with an enviroment variable\n+```bash\n+export KAFKA_BOOTSTRAP_SERVERS=localhost:9092\n+```\n+This is needed because every time a decision is evaluated for a dmn model, a trace event is generated and emitted. This event contains all the information needed to provide explainability and accountability on the decision that has been taken. \n+\n+If you are new to kogito, we recommend to start with https://kogito.kie.org/get-started/ . \n+\n+### The kafka broker and the infinispan instance\n+\n+You will have to provide a kafka instance as well as an infinispan instance. At the end of this readme, there is a link that contains a full end to end example. \n+\n+### The Trusty service\n+\n+The Trusty service consumes tracing events generated by the kogito-runtime application. A tracing event is a bunch of data that contains \n+the request that has been made to the kogito endpoint, the result, the outcomes of all the dmn nodes (decisions and BKM for example), and error messages if any.\n+The responsability of this service is to store all the information about the decision and to interact with the explainability service to retrieve the analysis of the decision. \n+The trusty service depends of course on kafka, but also on infinispan to persist the tracing information. \n+Enviroment variables can be used to set the information needed to connect to kafka and infinispan, for example\n+\n+```bash\n+export KAFKA_BOOTSTRAP_SERVERS=localhost:9092\n+export QUARKUS_INFINISPAN_CLIENT_SERVER_LIST=localhost:11222\n+export QUARKUS_INFINISPAN_CLIENT_AUTH_USERNAME=myuser\n+export QUARKUS_INFINISPAN_CLIENT_AUTH_PASSWORD=mypassword\n+```\n+\n+### Explainability service\n+\n+The explainability service provides local and global explaination. ", "originalCommit": "9389544b2d0ab478e094456db8409c4a05da9eea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg2MjEzNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/347#discussion_r467862135", "bodyText": "Hi @jiripetrlik , unfortunately in this very moment the explainability service is not ready yet to interact with the explainability library we are developing. Meaning that we are not ready to demonstrate here how to interact with the service and what the user should expect..\nShall we create a ticket so that we keep track and integrate this readme when we will be ready?", "author": "r00ta", "createdAt": "2020-08-10T12:15:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgwNDk0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5Njc2NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/347#discussion_r468396764", "bodyText": "Here it is https://issues.redhat.com/browse/KOGITO-3033", "author": "r00ta", "createdAt": "2020-08-11T07:59:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgwNDk0NQ=="}], "type": "inlineReview"}]}