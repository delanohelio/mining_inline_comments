{"pr_number": 208, "pr_title": "[KOGITO-1559] Data Index service refactoring to support alternative storage solution", "pr_createdAt": "2020-05-05T00:29:24Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/208", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzOTIxMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421239210", "bodyText": "Only id should be considered to be the same Job.", "author": "cristianonicolai", "createdAt": "2020-05-07T04:57:15Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/model/Job.java", "diffHunk": "@@ -182,4 +183,35 @@ public String toString() {\n                 \", executionCounter=\" + executionCounter +\n                 '}';\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        Job job = (Job) o;\n+        return Objects.equals(id, job.id) &&", "originalCommit": "3c97fab73909cea0a3c29847d9c0a928407cbf93", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzOTc1Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421239757", "bodyText": "no need to override", "author": "cristianonicolai", "createdAt": "2020-05-07T04:59:15Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/model/ProcessInstance.java", "diffHunk": "@@ -72,4 +73,27 @@ public String toString() {\n                 \", error=\" + error +\n                 \"} \" + super.toString();\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {", "originalCommit": "3c97fab73909cea0a3c29847d9c0a928407cbf93", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzOTkyNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421239925", "bodyText": "only id should be considered", "author": "cristianonicolai", "createdAt": "2020-05-07T04:59:52Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/model/ProcessInstanceMeta.java", "diffHunk": "@@ -171,4 +172,33 @@ public String toString() {\n                 \", lastUpdated=\" + lastUpdate +\n                 '}';\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        ProcessInstanceMeta that = (ProcessInstanceMeta) o;\n+        return Objects.equals(id, that.id) &&", "originalCommit": "3c97fab73909cea0a3c29847d9c0a928407cbf93", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MDA1OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421240058", "bodyText": "no need to override", "author": "cristianonicolai", "createdAt": "2020-05-07T05:00:25Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/model/UserTaskInstance.java", "diffHunk": "@@ -82,4 +84,25 @@ public JsonNode getOutputs() {\n     public void setOutputs(JsonNode outputs) {\n         this.outputs = outputs;\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {", "originalCommit": "3c97fab73909cea0a3c29847d9c0a928407cbf93", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MDE0NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421240145", "bodyText": "only id should be considered", "author": "cristianonicolai", "createdAt": "2020-05-07T05:00:41Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/model/UserTaskInstanceMeta.java", "diffHunk": "@@ -198,4 +199,36 @@ public String toString() {\n                 \", lastUpdate=\" + lastUpdate +\n                 '}';\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        UserTaskInstanceMeta that = (UserTaskInstanceMeta) o;\n+        return Objects.equals(id, that.id) &&", "originalCommit": "3c97fab73909cea0a3c29847d9c0a928407cbf93", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NTc3Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421245772", "bodyText": "missing headers", "author": "cristianonicolai", "createdAt": "2020-05-07T05:21:26Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/protobuf/ProtobufManager.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package org.kie.kogito.index.protobuf;", "originalCommit": "3c97fab73909cea0a3c29847d9c0a928407cbf93", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0Njk1MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421246950", "bodyText": "is it needed here?", "author": "cristianonicolai", "createdAt": "2020-05-07T05:25:35Z", "path": "data-index/data-index-storage/data-index-storage-protobuf/pom.xml", "diffHunk": "@@ -0,0 +1,62 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>data-index-storage</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>data-index-storage-protobuf</artifactId>\n+  <name>Kogito :: Data Index Storage Protobuf</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>data-index-storage-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>infinispan-persistence-addon</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-infinispan-client</artifactId>", "originalCommit": "3c97fab73909cea0a3c29847d9c0a928407cbf93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyMjE1Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421722152", "bodyText": "The quarkus infinispan client library is used to load and parse the proto files. It is compatible with quarkus, so I didn't change that. We can replace it with other libraries. Please advise. Thanks.", "author": "xieshenzh", "createdAt": "2020-05-07T18:53:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0Njk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1NDMxMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431154310", "bodyText": "perhaps only use the infinispan protostream dependency instead of the entire client from Quarkus", "author": "cristianonicolai", "createdAt": "2020-05-27T14:00:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0Njk1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0ODQyOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421248429", "bodyText": "This most likely only works if you have two implementations. What if you have multiple? Or even further, how do you plan for data index to use different persistence, build time, runtime config, profiles, etc?", "author": "cristianonicolai", "createdAt": "2020-05-07T05:31:05Z", "path": "data-index/data-index-storage/data-index-storage-infinispan/src/main/java/org/kie/kogito/index/infinispan/cache/InfinispanCacheManager.java", "diffHunk": "@@ -38,11 +39,13 @@\n import org.kie.kogito.index.model.Job;\n import org.kie.kogito.index.model.ProcessInstance;\n import org.kie.kogito.index.model.UserTaskInstance;\n+import org.kie.kogito.index.protobuf.ProtobufManager;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n @ApplicationScoped\n-public class InfinispanCacheManager implements CacheService {\n+@DefaultBean", "originalCommit": "3c97fab73909cea0a3c29847d9c0a928407cbf93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyMjIxMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421722210", "bodyText": "Quarkus has a new feature to enable beans for quarkus build profile at build time. We can use that if choosing persistence at build time is acceptable.", "author": "xieshenzh", "createdAt": "2020-05-07T18:53:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0ODQyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4MDcxMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421980712", "bodyText": "I thought the idea for data-index service was to treat it as a black box, that you just run. I am not sure users should rebuild it, I mean: we should discuss it further.\ni.e. we may have separate backends; but I would expect users to \"plug\" them. Of course, this may make native compilation a bit less trivial; in this case we should either ship a binary with everything tacke in, or ship pre-built binaries.\nThe alternative may be we don't use native compilation for data-index and just run it in JVM mode; then we should be able to exploit dynamic loading as usual.", "author": "evacchi", "createdAt": "2020-05-08T07:07:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0ODQyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwODE3OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r422308179", "bodyText": "@evacchi changed it to choose persistence at runtime with application.properties. Thanks.", "author": "xieshenzh", "createdAt": "2020-05-08T18:43:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0ODQyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNjE2Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421416163", "bodyText": "shouldnt the shared module be independent of infinispan addon?", "author": "cristianonicolai", "createdAt": "2020-05-07T10:54:56Z", "path": "data-index/data-index-storage/data-index-storage-protobuf/pom.xml", "diffHunk": "@@ -0,0 +1,62 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>data-index-storage</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>data-index-storage-protobuf</artifactId>\n+  <name>Kogito :: Data Index Storage Protobuf</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>data-index-storage-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>infinispan-persistence-addon</artifactId>", "originalCommit": "3c97fab73909cea0a3c29847d9c0a928407cbf93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyMjQzMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421722431", "bodyText": "This module is used to load and parse proto files. kogito-types.proto is loaded by default, and it is imported by the domain model proto files. The file is packaged in the artifact of infinispan-persistence-addon, that's why infinispan addon is in the dependencies.", "author": "xieshenzh", "createdAt": "2020-05-07T18:53:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNjE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4MTEwNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421981105", "bodyText": "I suppose if there is shared logic then it should be moved in a third \"agnostic\" dependency?", "author": "evacchi", "createdAt": "2020-05-08T07:08:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNjE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwOTA1Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r422309053", "bodyText": "@evacchi should I create a new module in runtime for the kogito proto files loaded by default?", "author": "xieshenzh", "createdAt": "2020-05-08T18:45:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNjE2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNjMzMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421416333", "bodyText": "will other db implementations also depend on protobuf?", "author": "cristianonicolai", "createdAt": "2020-05-07T10:55:20Z", "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/FileDescriptorProducer.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.protobuf;\n+\n+import java.io.IOException;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+\n+import org.infinispan.protostream.FileDescriptorSource;\n+\n+@ApplicationScoped\n+public class FileDescriptorProducer {\n+\n+    @Produces\n+    FileDescriptorSource kogitoTypesDescriptor() throws IOException {\n+        FileDescriptorSource source = new FileDescriptorSource();\n+        source.addProtoFile(\"kogito-index.proto\", Thread.currentThread().getContextClassLoader().getResourceAsStream(\"META-INF/kogito-index.proto\"));", "originalCommit": "3c97fab73909cea0a3c29847d9c0a928407cbf93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyMjQ3NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421722475", "bodyText": "I think other DB implementation will need the indexing information from the protobuf files. In addition, GraphQL currently also needs the information for the configurations related to domain models.", "author": "xieshenzh", "createdAt": "2020-05-07T18:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNjMzMw=="}], "type": "inlineReview"}, {"oid": "c312a75711df04a76b53af943bd5f220c7b17c79", "url": "https://github.com/kiegroup/kogito-apps/commit/c312a75711df04a76b53af943bd5f220c7b17c79", "message": "[KOGITO-1559] Pull request", "committedDate": "2020-05-07T19:03:19Z", "type": "forcePushed"}, {"oid": "cd2c77bb554787e604eeb86ab2af52337f4ad53b", "url": "https://github.com/kiegroup/kogito-apps/commit/cd2c77bb554787e604eeb86ab2af52337f4ad53b", "message": "[KOGITO-1559] Pull request", "committedDate": "2020-05-07T19:18:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczNzQ5NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421737495", "bodyText": "@rhtevan renamed the interface to ProtobufCacheService.", "author": "xieshenzh", "createdAt": "2020-05-07T19:20:57Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/protobuf/ProtobufCacheService.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.protobuf;\n+\n+import java.util.Map;\n+\n+public interface ProtobufCacheService {", "originalCommit": "cd2c77bb554787e604eeb86ab2af52337f4ad53b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5ODE2NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r424098165", "bodyText": "Shall we make the string value as either a constant or enum value?", "author": "rhtevan", "createdAt": "2020-05-12T23:53:17Z", "path": "data-index/data-index-storage/data-index-storage-infinispan/src/main/java/org/kie/kogito/index/infinispan/cache/InfinispanCacheManager.java", "diffHunk": "@@ -44,7 +45,8 @@\n import org.slf4j.LoggerFactory;\n \n @ApplicationScoped\n-@DefaultBean\n+@Default\n+@Persistence(\"infinispan\")", "originalCommit": "0cbcd1f6ab1136a849a1e1e803ecbe67e45ca210", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxMDEzOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r430210139", "bodyText": "You are using a CDI qualifier even to promote a specific instance to be injected but this impose to client code to know add a qualifier everywhere.\nWhat about preserve only Storage?\nThis means:\n\nadd Storage qualifier in this class where Instance<CacheService> and Instance<ProtobufCacheService> are injected\nremove Default qualifier to InfinispanCacheManager\nremove StorageSupported both from producer and injection points\n\nThe result is that each implementation should be exposed as Storage qualified bean, then this producer will take all of them and produce the only default instance so it will be enough to Inject without any additional qualifier in customer code.\nWdyt?", "author": "danielezonca", "createdAt": "2020-05-26T07:31:18Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/cdi/Producer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ *\n+ *  * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  * you may not use this file except in compliance with the License.\n+ *  * You may obtain a copy of the License at\n+ *  *\n+ *  *       http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  * See the License for the specific language governing permissions and\n+ *  * limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.index.cdi;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.kie.kogito.index.cache.CacheService;\n+import org.kie.kogito.index.protobuf.ProtobufCacheService;\n+\n+@ApplicationScoped\n+public class Producer {", "originalCommit": "86469a16eb5bb4f18384f4c7b1e0b50562c2fd66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDczNzgzNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r430737834", "bodyText": "@danielezonca @rhtevan updated. Please take a look.", "author": "xieshenzh", "createdAt": "2020-05-26T22:16:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxMDEzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxNjEyOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r430216128", "bodyText": "Default should not be needed (see comment above)", "author": "danielezonca", "createdAt": "2020-05-26T07:42:58Z", "path": "data-index/data-index-storage/data-index-storage-infinispan/src/main/java/org/kie/kogito/index/infinispan/cache/InfinispanCacheManager.java", "diffHunk": "@@ -35,14 +36,20 @@\n import org.infinispan.query.remote.client.ProtobufMetadataManagerConstants;\n import org.kie.kogito.index.cache.Cache;\n import org.kie.kogito.index.cache.CacheService;\n+import org.kie.kogito.index.cdi.Storage;\n import org.kie.kogito.index.model.Job;\n import org.kie.kogito.index.model.ProcessInstance;\n import org.kie.kogito.index.model.UserTaskInstance;\n+import org.kie.kogito.index.protobuf.ProtobufCacheService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.kie.kogito.index.infinispan.Constants.INFINISPAN_STORAGE;\n+\n @ApplicationScoped\n-public class InfinispanCacheManager implements CacheService {\n+@Default", "originalCommit": "86469a16eb5bb4f18384f4c7b1e0b50562c2fd66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYwMDkxMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r430600912", "bodyText": "@xiezhang7 Second thought on naming this qualifier. How does 'WithStorage' sound to you? Instead of using two qualifiers, perhaps could try to use just one qualifier, 'WithStorage' with member value like: 'configured', 'mongo', 'ispn' etc., and default to 'configured'.", "author": "rhtevan", "createdAt": "2020-05-26T17:56:46Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/cdi/Storage.java", "diffHunk": "@@ -29,7 +29,7 @@\n @Qualifier\n @Retention(RUNTIME)\n @Target({TYPE})\n-public @interface Persistence {\n+public @interface Storage {", "originalCommit": "86469a16eb5bb4f18384f4c7b1e0b50562c2fd66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYwMjg1Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r430602852", "bodyText": "@xiezhang7 How about name it as 'WithStorageQualifier' or 'WithStorageLiteral'?", "author": "rhtevan", "createdAt": "2020-05-26T17:59:10Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/cdi/StorageImpl.java", "diffHunk": "@@ -20,11 +20,11 @@\n \n import javax.enterprise.util.AnnotationLiteral;\n \n-public class PersistenceImpl extends AnnotationLiteral<Persistence> implements Persistence {\n+public class StorageImpl extends AnnotationLiteral<Storage> implements Storage {", "originalCommit": "86469a16eb5bb4f18384f4c7b1e0b50562c2fd66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYwNDUyMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r430604520", "bodyText": "@xiezhang7 Maybe not needed.", "author": "rhtevan", "createdAt": "2020-05-26T18:00:52Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/cdi/StorageSupported.java", "diffHunk": "@@ -31,6 +31,6 @@\n @Qualifier\n @Retention(RUNTIME)\n @Target({METHOD, FIELD, PARAMETER})\n-public @interface InjectPersistence {\n+public @interface StorageSupported {", "originalCommit": "86469a16eb5bb4f18384f4c7b1e0b50562c2fd66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyNTMwMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r430625303", "bodyText": "@xiezhang7 How about use an enum type with values?", "author": "rhtevan", "createdAt": "2020-05-26T18:36:47Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/cdi/Storage.java", "diffHunk": "@@ -29,7 +29,7 @@\n @Qualifier\n @Retention(RUNTIME)\n @Target({TYPE})\n-public @interface Persistence {\n+public @interface Storage {\n \n     String value();", "originalCommit": "86469a16eb5bb4f18384f4c7b1e0b50562c2fd66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyNjcyMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r430626722", "bodyText": "@xiezhang7 Could try @Any.", "author": "rhtevan", "createdAt": "2020-05-26T18:39:18Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/cdi/Producer.java", "diffHunk": "@@ -30,7 +30,7 @@\n @ApplicationScoped\n public class Producer {\n \n-    @ConfigProperty(name = \"persistence.type\")\n+    @ConfigProperty(name = \"storage.type\")\n     String persistenceType;\n \n     @Inject", "originalCommit": "86469a16eb5bb4f18384f4c7b1e0b50562c2fd66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "url": "https://github.com/kiegroup/kogito-apps/commit/5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "message": "[KOGITO-1559] Create interface for data schema processing", "committedDate": "2020-05-26T22:10:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1Nzc3Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431057776", "bodyText": "Do you need any specific method of InfinispanCacheManager that is not available in the interface? I think we can leverage on @Storage annotation even here like\n    @Inject\n    @Storage(INFINISPAN_STORAGE)\n    CacheService cacheManager;", "author": "danielezonca", "createdAt": "2020-05-27T11:50:56Z", "path": "data-index/data-index-storage/data-index-storage-infinispan/src/main/java/org/kie/kogito/index/infinispan/schema/ProtoSchemaConsumer.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ *\n+ *  * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  * you may not use this file except in compliance with the License.\n+ *  * You may obtain a copy of the License at\n+ *  *\n+ *  *       http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  * See the License for the specific language governing permissions and\n+ *  * limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.index.infinispan.schema;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Any;\n+import javax.inject.Inject;\n+\n+import org.infinispan.query.remote.client.ProtobufMetadataManagerConstants;\n+import org.kie.kogito.index.infinispan.cache.InfinispanCacheManager;\n+import org.kie.kogito.index.schema.SchemaDescriptor;\n+import org.kie.kogito.index.schema.SchemaRegisteredEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyList;\n+\n+@ApplicationScoped\n+public class ProtoSchemaConsumer {\n+\n+    static final Logger LOGGER = LoggerFactory.getLogger(ProtoSchemaConsumer.class);\n+\n+    @Inject\n+    ProtoSchemaAcceptor schemaAcceptor;\n+\n+    @Inject\n+    @Any\n+    InfinispanCacheManager cacheManager;", "originalCommit": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2NTEyMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431365122", "bodyText": "Yes, the method getProtobufCache is not part of the interface, it is specific to the infinispan implementation.\nMap<String, String> cache = cacheManager.getProtobufCache();", "author": "xieshenzh", "createdAt": "2020-05-27T18:45:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1Nzc3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1ODA2NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431058064", "bodyText": "I think @Storage is more specific", "author": "danielezonca", "createdAt": "2020-05-27T11:51:30Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/storage/Producer.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ *\n+ *  * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  * you may not use this file except in compliance with the License.\n+ *  * You may obtain a copy of the License at\n+ *  *\n+ *  *       http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  * See the License for the specific language governing permissions and\n+ *  * limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.index.storage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Any;\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.kie.kogito.index.cache.CacheService;\n+\n+@ApplicationScoped\n+public class Producer {\n+\n+    @ConfigProperty(name = \"storage.type\")\n+    String storageType;\n+\n+    @Inject\n+    @Any", "originalCommit": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzOTk2OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431439969", "bodyText": "@Storage requires a value to indicate the storage type of the bean.\nI tried @Storage without a value (i.e. using the default value). It matches only the beans of @Storage with the default value, and all other beans with a different value are excluded.\nIf you know the proper way to use @Storage here, could you please elaborate? Thanks.", "author": "xieshenzh", "createdAt": "2020-05-27T21:02:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1ODA2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzODA0Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r433138046", "bodyText": "Ok you are right, @Storage will match only bean without value specified so let's keep @Any :)", "author": "danielezonca", "createdAt": "2020-06-01T09:41:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1ODA2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyODM2Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r430928366", "bodyText": "please keep in the same event package.", "author": "cristianonicolai", "createdAt": "2020-05-27T07:59:42Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/domain/DomainModelRegisteredEvent.java", "diffHunk": "@@ -1,20 +1,22 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates. \n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *  * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  * you may not use this file except in compliance with the License.\n+ *  * You may obtain a copy of the License at\n+ *  *\n+ *  *       http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  * See the License for the specific language governing permissions and\n+ *  * limitations under the License.\n  *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n  */\n \n-package org.kie.kogito.index.event;\n+package org.kie.kogito.index.domain;", "originalCommit": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0NDcxMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431044713", "bodyText": "unused import org.kie.kogito.index.domain.DomainDescriptor;", "author": "cristianonicolai", "createdAt": "2020-05-27T11:23:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyODM2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0NTIyNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431045227", "bodyText": "please review the license format for all files in the PR as it doesnt match the current standard of the project.", "author": "cristianonicolai", "createdAt": "2020-05-27T11:25:05Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/domain/DomainModelRegisteredEvent.java", "diffHunk": "@@ -1,20 +1,22 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates. \n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *  * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *  *", "originalCommit": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA3NjcwNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431076706", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Assert.assertTrue(protoSchemaAcceptor.accept(new SchemaType(PROTO_SCHEMA_TYPE)));\n          \n          \n            \n                    assertTrue(protoSchemaAcceptor.accept(new SchemaType(PROTO_SCHEMA_TYPE)));", "author": "cristianonicolai", "createdAt": "2020-05-27T12:25:54Z", "path": "data-index/data-index-storage/data-index-storage-infinispan/src/test/java/org/kie/kogito/index/infinispan/schema/ProtoSchemaAcceptorTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ *\n+ *  * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  * you may not use this file except in compliance with the License.\n+ *  * You may obtain a copy of the License at\n+ *  *\n+ *  *       http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  * See the License for the specific language governing permissions and\n+ *  * limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.index.infinispan.schema;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.index.schema.SchemaType;\n+import org.wildfly.common.Assert;\n+\n+import static org.kie.kogito.index.infinispan.Constants.INFINISPAN_STORAGE;\n+import static org.kie.kogito.index.infinispan.schema.ProtoSchemaAcceptor.PROTO_SCHEMA_TYPE;\n+\n+class ProtoSchemaAcceptorTest {\n+\n+    ProtoSchemaAcceptor protoSchemaAcceptor = new ProtoSchemaAcceptor();\n+\n+    @Test\n+    void accept_true() {\n+        protoSchemaAcceptor.storageType = INFINISPAN_STORAGE;\n+        Assert.assertTrue(protoSchemaAcceptor.accept(new SchemaType(PROTO_SCHEMA_TYPE)));", "originalCommit": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA3NzAzOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431077039", "bodyText": "Could you please define a more meaningful name for what is actually tested in here?\nSame comment for all other methods in this class.", "author": "cristianonicolai", "createdAt": "2020-05-27T12:26:31Z", "path": "data-index/data-index-storage/data-index-storage-infinispan/src/test/java/org/kie/kogito/index/infinispan/schema/ProtoSchemaAcceptorTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ *\n+ *  * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  * you may not use this file except in compliance with the License.\n+ *  * You may obtain a copy of the License at\n+ *  *\n+ *  *       http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  * See the License for the specific language governing permissions and\n+ *  * limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.index.infinispan.schema;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.index.schema.SchemaType;\n+import org.wildfly.common.Assert;\n+\n+import static org.kie.kogito.index.infinispan.Constants.INFINISPAN_STORAGE;\n+import static org.kie.kogito.index.infinispan.schema.ProtoSchemaAcceptor.PROTO_SCHEMA_TYPE;\n+\n+class ProtoSchemaAcceptorTest {\n+\n+    ProtoSchemaAcceptor protoSchemaAcceptor = new ProtoSchemaAcceptor();\n+\n+    @Test\n+    void accept_true() {", "originalCommit": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA4MDE4Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431080182", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ProtoSchemaProducer {\n          \n          \n            \n            public class ProtoSchemaManager {", "author": "cristianonicolai", "createdAt": "2020-05-27T12:31:53Z", "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/schema/ProtoSchemaProducer.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ *\n+ *  * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  * you may not use this file except in compliance with the License.\n+ *  * You may obtain a copy of the License at\n+ *  *\n+ *  *       http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  * See the License for the specific language governing permissions and\n+ *  * limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.index.protobuf.schema;\n+\n+import java.util.Optional;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import org.infinispan.protostream.descriptors.Descriptor;\n+import org.infinispan.protostream.descriptors.FieldDescriptor;\n+import org.infinispan.protostream.descriptors.Option;\n+import org.kie.kogito.index.protobuf.ProtobufValidationException;\n+import org.kie.kogito.index.schema.ProcessDescriptor;\n+import org.kie.kogito.index.schema.SchemaDescriptor;\n+import org.kie.kogito.index.schema.SchemaRegisteredEvent;\n+import org.kie.kogito.index.schema.SchemaType;\n+\n+import static java.lang.String.format;\n+import static org.kie.kogito.index.Constants.KOGITO_DOMAIN_ATTRIBUTE;\n+\n+@ApplicationScoped\n+public class ProtoSchemaProducer {", "originalCommit": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0NTY1MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431145651", "bodyText": "Could you please instead of deleting rename to ProtoSchemaManager so we keep track of the changes", "author": "cristianonicolai", "createdAt": "2020-05-27T13:49:00Z", "path": "data-index/data-index-storage/data-index-storage-infinispan/src/main/java/org/kie/kogito/index/infinispan/protostream/ProtobufService.java", "diffHunk": "@@ -1,149 +0,0 @@\n-/*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.kie.kogito.index.infinispan.protostream;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.enterprise.event.Event;\n-import javax.enterprise.event.Observes;\n-import javax.inject.Inject;\n-\n-import io.quarkus.runtime.StartupEvent;\n-import org.infinispan.protostream.FileDescriptorSource;\n-import org.infinispan.protostream.SerializationContext;\n-import org.infinispan.protostream.config.Configuration;\n-import org.infinispan.protostream.descriptors.Descriptor;\n-import org.infinispan.protostream.descriptors.FieldDescriptor;\n-import org.infinispan.protostream.descriptors.FileDescriptor;\n-import org.infinispan.protostream.descriptors.Option;\n-import org.infinispan.protostream.impl.SerializationContextImpl;\n-import org.infinispan.query.remote.client.ProtobufMetadataManagerConstants;\n-import org.kie.kogito.index.infinispan.cache.InfinispanCacheManager;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import static java.lang.String.format;\n-import static java.util.Collections.emptyList;\n-import static org.kie.kogito.index.Constants.KOGITO_DOMAIN_ATTRIBUTE;\n-\n-@ApplicationScoped\n-public class ProtobufService {", "originalCommit": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0NjcwMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431146703", "bodyText": "Any particular reason why jandex index is needed for this module?", "author": "cristianonicolai", "createdAt": "2020-05-27T13:50:17Z", "path": "data-index/data-index-storage/data-index-storage-api/pom.xml", "diffHunk": "@@ -21,5 +21,26 @@\n       <groupId>com.fasterxml.jackson.core</groupId>\n       <artifactId>jackson-annotations</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>\n+    </dependency>\n   </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.jboss.jandex</groupId>\n+        <artifactId>jandex-maven-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>make-index</id>\n+            <goals>\n+              <goal>jandex</goal>", "originalCommit": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4NDIxNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431184215", "bodyText": "Cause we have implementations in the *-api module, IMO that should not be the case, also removing the need for jandex here.", "author": "jstastny-cz", "createdAt": "2020-05-27T14:34:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0NjcwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ0MDE0OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431440149", "bodyText": "Will remove this plugin.", "author": "xieshenzh", "createdAt": "2020-05-27T21:02:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0NjcwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0ODUyNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431148527", "bodyText": "Deleted and added file?", "author": "cristianonicolai", "createdAt": "2020-05-27T13:52:36Z", "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/ProtobufService.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.protobuf;\n+\n+import java.util.Optional;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import org.infinispan.protostream.FileDescriptorSource;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.config.Configuration;\n+import org.infinispan.protostream.descriptors.FileDescriptor;\n+import org.infinispan.protostream.impl.SerializationContextImpl;\n+import org.kie.kogito.index.cache.CacheService;\n+import org.kie.kogito.index.protobuf.domain.DomainModelDescriptorRegisteredEvent;\n+import org.kie.kogito.index.protobuf.schema.SchemaDescriptorRegisteredEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ProtobufService {", "originalCommit": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ5NTcyMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431495720", "bodyText": "Because of too many changes, github cannot recognize the file is moved instead of be created.\nThe original ProtobufService   code is split to three classes: org.kie.kogito.index.protobuf.ProtobufService, org.kie.kogito.index.protobuf.schema.ProtoSchemaManager, org.kie.kogito.index.infinispan.protostream.ProtoSchemaManager", "author": "xieshenzh", "createdAt": "2020-05-27T23:17:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0ODUyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0ODY0Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431148643", "bodyText": "not used, please remove", "author": "cristianonicolai", "createdAt": "2020-05-27T13:52:44Z", "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/ProtobufService.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.protobuf;\n+\n+import java.util.Optional;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import org.infinispan.protostream.FileDescriptorSource;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.config.Configuration;\n+import org.infinispan.protostream.descriptors.FileDescriptor;\n+import org.infinispan.protostream.impl.SerializationContextImpl;\n+import org.kie.kogito.index.cache.CacheService;\n+import org.kie.kogito.index.protobuf.domain.DomainModelDescriptorRegisteredEvent;\n+import org.kie.kogito.index.protobuf.schema.SchemaDescriptorRegisteredEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ProtobufService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ProtobufService.class);\n+\n+    @Inject\n+    CacheService service;", "originalCommit": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1MTIwOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431151209", "bodyText": "when is long used? can a test be provided and probably doing Long.parseLong(input.toString()) of a Long is not needed.", "author": "cristianonicolai", "createdAt": "2020-05-27T13:56:02Z", "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/graphql/GraphQLScalarTypeProducer.java", "diffHunk": "@@ -55,13 +55,13 @@ public GraphQLScalarType dateTimeScalar() {\n         return GraphQLScalarType.newScalar()\n                 .name(\"DateTime\")\n                 .description(\"An ISO-8601 compliant DateTime Scalar\")\n-                .coercing(new Coercing() {\n+                .coercing(new Coercing<>() {\n                     @Override\n                     public Object serialize(Object input) {\n                         ZonedDateTime dateTime;\n                         if (input instanceof ZonedDateTime) {\n                             dateTime = (ZonedDateTime) input;\n-                        } else if (input instanceof String) {\n+                        } else if (input instanceof String || input instanceof Long) {", "originalCommit": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1NDc3Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431354773", "bodyText": "This is for data from MongoDB. I'll remove this change from this PR.", "author": "xieshenzh", "createdAt": "2020-05-27T18:27:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1MTIwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1NjIyNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431156227", "bodyText": "please move the file instead of deleting and recreating.", "author": "cristianonicolai", "createdAt": "2020-05-27T14:02:43Z", "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/FileDescriptorProducer.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.protobuf;\n+\n+import java.io.IOException;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+\n+import org.infinispan.protostream.FileDescriptorSource;\n+\n+@ApplicationScoped\n+public class FileDescriptorProducer {", "originalCommit": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5MDYxOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431190619", "bodyText": "Actually this producer used to be in different class before: ProtostreamProducer.java", "author": "jstastny-cz", "createdAt": "2020-05-27T14:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1NjIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1MzU0OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431353548", "bodyText": "It is part of ProtostreamProducer.java. It is the data schema , so separated it from the infinispan storage code. I'll rename it back to  ProtostreamProducer.java.", "author": "xieshenzh", "createdAt": "2020-05-27T18:25:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1NjIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3NzMyMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431177321", "bodyText": "ideally we should prevent such changes, especially when not touching the file elsewhere, the same applies for imports order.", "author": "jstastny-cz", "createdAt": "2020-05-27T14:29:28Z", "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/service/IndexingService.java", "diffHunk": "@@ -114,7 +114,7 @@ private ObjectNode indexKogitoDomain(ObjectNode kogitoEvent, ObjectNode kogitoCa\n \n         ArrayNode indexPIArray = (ArrayNode) kogitoEvent.get(PROCESS_INSTANCES_DOMAIN_ATTRIBUTE);\n         if (indexPIArray != null) {\n-            \n+", "originalCommit": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ5NjM1NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431496354", "bodyText": "Reverted all such changes", "author": "xieshenzh", "createdAt": "2020-05-27T23:19:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3NzMyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4NTQwMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431185400", "bodyText": "should this be still in api module?", "author": "jstastny-cz", "createdAt": "2020-05-27T14:35:28Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/storage/Producer.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ *\n+ *  * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  * you may not use this file except in compliance with the License.\n+ *  * You may obtain a copy of the License at\n+ *  *\n+ *  *       http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  * See the License for the specific language governing permissions and\n+ *  * limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.index.storage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Any;\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.kie.kogito.index.cache.CacheService;\n+\n+@ApplicationScoped\n+public class Producer {", "originalCommit": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwMjczMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431402732", "bodyText": "Will move implementation to the data-index-service module.", "author": "xieshenzh", "createdAt": "2020-05-27T19:48:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4NTQwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4NTc1Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431185753", "bodyText": "Should this be still in api module?", "author": "jstastny-cz", "createdAt": "2020-05-27T14:35:48Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/storage/StorageImpl.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *\n+ *  * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  * you may not use this file except in compliance with the License.\n+ *  * You may obtain a copy of the License at\n+ *  *\n+ *  *       http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  * See the License for the specific language governing permissions and\n+ *  * limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.index.storage;\n+\n+import javax.enterprise.util.AnnotationLiteral;\n+\n+public class StorageImpl extends AnnotationLiteral<Storage> implements Storage {", "originalCommit": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4ODM1OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431188358", "bodyText": "listProtoCacheKeys->logProtoCacheKeys", "author": "jstastny-cz", "createdAt": "2020-05-27T14:38:20Z", "path": "data-index/data-index-storage/data-index-storage-infinispan/src/main/java/org/kie/kogito/index/infinispan/schema/ProtoSchemaConsumer.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ *\n+ *  * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  * you may not use this file except in compliance with the License.\n+ *  * You may obtain a copy of the License at\n+ *  *\n+ *  *       http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  * See the License for the specific language governing permissions and\n+ *  * limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.index.infinispan.schema;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Any;\n+import javax.inject.Inject;\n+\n+import org.infinispan.query.remote.client.ProtobufMetadataManagerConstants;\n+import org.kie.kogito.index.infinispan.cache.InfinispanCacheManager;\n+import org.kie.kogito.index.schema.SchemaDescriptor;\n+import org.kie.kogito.index.schema.SchemaRegisteredEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyList;\n+\n+@ApplicationScoped\n+public class ProtoSchemaConsumer {\n+\n+    static final Logger LOGGER = LoggerFactory.getLogger(ProtoSchemaConsumer.class);\n+\n+    @Inject\n+    ProtoSchemaAcceptor schemaAcceptor;\n+\n+    @Inject\n+    @Any\n+    InfinispanCacheManager cacheManager;\n+\n+    public void onSchemaRegisteredEvent(@Observes SchemaRegisteredEvent event) {\n+        if (schemaAcceptor.accept(event.getSchemaType())) {\n+            SchemaDescriptor schemaDescriptor = event.getSchemaDescriptor();\n+            cacheManager.getProtobufCache().put(schemaDescriptor.getName(), schemaDescriptor.getSchemaContent());\n+            schemaDescriptor.getProcessDescriptor().ifPresent(processDescriptor -> {\n+                Map<String, String> cache = cacheManager.getProtobufCache();\n+                cacheManager.getProcessIdModelCache().put(processDescriptor.getProcessId(), processDescriptor.getProcessType());\n+\n+                List<String> errors = checkSchemaErrors(cache);\n+\n+                if (!errors.isEmpty()) {\n+                    String message = \"Proto Schema contain errors:\\n\" + errors.stream().collect(Collectors.joining(\"\\n\"));\n+                    throw new RuntimeException(message);\n+                }\n+\n+                if (LOGGER.isDebugEnabled()) {\n+                    listProtoCacheKeys();", "originalCommit": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4b4e37d0c7949a23a35506c97e78e90788716bf4", "url": "https://github.com/kiegroup/kogito-apps/commit/4b4e37d0c7949a23a35506c97e78e90788716bf4", "message": "[KOGITO-1559] pull request", "committedDate": "2020-05-27T22:55:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwMTg3Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431301873", "bodyText": "Don't we want to start our properties with kogito. prefix ?\neven use kogito.data-index here like we do on jobs-service ?\n\n  \n    \n      kogito-apps/jobs-service/src/main/resources/application.properties\n    \n    \n         Line 57\n      in\n      efe03a6\n    \n    \n    \n    \n\n        \n          \n           kogito.jobs-service.persistence=in-memory", "author": "radtriste", "createdAt": "2020-05-27T17:02:02Z", "path": "data-index/data-index-service/src/main/resources/application.properties", "diffHunk": "@@ -14,6 +14,7 @@ quarkus.http.cors=true\n \n # Infinispan\n quarkus.infinispan-client.server-list=localhost:11222\n+storage.type=infinispan", "originalCommit": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzMjA5Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431832097", "bodyText": "Renamed the property. Thanks.", "author": "xieshenzh", "createdAt": "2020-05-28T13:25:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwMTg3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwMjc4Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431302786", "bodyText": "same here for the prefix", "author": "radtriste", "createdAt": "2020-05-27T17:03:44Z", "path": "data-index/data-index-service/src/test/resources/application.properties", "diffHunk": "@@ -67,6 +67,7 @@ quarkus.infinispan-client.auth-realm=default\n quarkus.infinispan-client.auth-server-name=infinispan\n quarkus.infinispan-client.client-intelligence=BASIC\n quarkus.infinispan-client.sasl-mechanism=DIGEST-MD5\n+storage.type=infinispan", "originalCommit": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg5NTE3MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431895171", "bodyText": "what is the purpose of fileName here? It's being used just in the firing event?\nEDITED:\nThere are several invocations of the method with fileName=\"\", I'd argue for the method overload to make fileName optional, plus swap the order of arguments (to have the optional on the right).\nPlus I could really use javadoc for this (or these) method(s) to quickly spot the difference of use cases.", "author": "jstastny-cz", "createdAt": "2020-05-28T14:46:35Z", "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/ProtobufService.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.protobuf;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import org.infinispan.protostream.FileDescriptorSource;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.config.Configuration;\n+import org.infinispan.protostream.descriptors.FileDescriptor;\n+import org.infinispan.protostream.impl.SerializationContextImpl;\n+import org.kie.kogito.index.protobuf.domain.DomainModelDescriptorRegisteredEvent;\n+import org.kie.kogito.index.protobuf.schema.SchemaDescriptorRegisteredEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ProtobufService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ProtobufService.class);\n+\n+    @Inject\n+    FileDescriptorSource kogitoDescriptors;\n+\n+    @Inject\n+    Event<DomainModelDescriptorRegisteredEvent> domainModelEvent;\n+\n+    @Inject\n+    Event<SchemaDescriptorRegisteredEvent> schemaEvent;\n+\n+    void onStart(@Observes StartupEvent ev) {\n+        kogitoDescriptors.getFileDescriptors().forEach((name, bytes) -> {\n+            LOGGER.info(\"Registering Kogito ProtoBuffer file: {}\", name);\n+            schemaEvent.fire(new SchemaDescriptorRegisteredEvent(name, new String(bytes), null, t -> null));\n+        });\n+    }\n+\n+    public void registerProtoBufferType(String fileName, String content) {", "originalCommit": "d78f746c30d62aee48219346e21ae97f9176fcba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyODY4Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r432028682", "bodyText": "fileName is not really needed according to the original design. I'll revert this method signature change.", "author": "xieshenzh", "createdAt": "2020-05-28T18:13:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg5NTE3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg5ODAyOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431898028", "bodyText": "What does it really mean passing the empty string? IMO a overloaded method would be better (including the swapped order of args):\nregisterProtoBufferType(String content, String fileName)\nregisterProtoBufferType(String content)", "author": "jstastny-cz", "createdAt": "2020-05-28T14:50:07Z", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/graphql/WebSocketSubscriptionIT.java", "diffHunk": "@@ -78,7 +78,7 @@ public void testProcessInstanceSubscription() throws Exception {\n         String processId = \"travels\";\n         String processInstanceId = UUID.randomUUID().toString();\n \n-        protobufService.registerProtoBufferType(getTravelsProtoBufferFile());\n+        protobufService.registerProtoBufferType(\"\", getTravelsProtoBufferFile());", "originalCommit": "d78f746c30d62aee48219346e21ae97f9176fcba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwMDE5NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431900194", "bodyText": "Didn't we want to throw ProtobufValidationException added above?", "author": "jstastny-cz", "createdAt": "2020-05-28T14:52:50Z", "path": "data-index/data-index-storage/data-index-storage-infinispan/src/main/java/org/kie/kogito/index/infinispan/protostream/ProtoSchemaManager.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.infinispan.protostream;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Any;\n+import javax.inject.Inject;\n+\n+import org.infinispan.query.remote.client.ProtobufMetadataManagerConstants;\n+import org.kie.kogito.index.event.SchemaRegisteredEvent;\n+import org.kie.kogito.index.infinispan.cache.InfinispanCacheManager;\n+import org.kie.kogito.index.schema.SchemaDescriptor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyList;\n+\n+@ApplicationScoped\n+public class ProtoSchemaManager {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ProtoSchemaManager.class);\n+\n+    @Inject\n+    ProtoSchemaAcceptor schemaAcceptor;\n+\n+    @Inject\n+    @Any\n+    InfinispanCacheManager cacheManager;\n+\n+    public void onSchemaRegisteredEvent(@Observes SchemaRegisteredEvent event) {\n+        if (schemaAcceptor.accept(event.getSchemaType())) {\n+            SchemaDescriptor schemaDescriptor = event.getSchemaDescriptor();\n+            cacheManager.getProtobufCache().put(schemaDescriptor.getName(), schemaDescriptor.getSchemaContent());\n+            schemaDescriptor.getProcessDescriptor().ifPresent(processDescriptor -> {\n+                Map<String, String> cache = cacheManager.getProtobufCache();\n+                cacheManager.getProcessIdModelCache().put(processDescriptor.getProcessId(), processDescriptor.getProcessType());\n+\n+                List<String> errors = checkSchemaErrors(cache);\n+\n+                if (!errors.isEmpty()) {\n+                    String message = \"Proto Schema contain errors:\\n\" + String.join(\"\\n\", errors);\n+                    throw new RuntimeException(message);", "originalCommit": "d78f746c30d62aee48219346e21ae97f9176fcba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyOTYyMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r432029622", "bodyText": "ProtobufValidationException is not part of the API. It is in the data-index-storage-protobuf module.\nBut data-index-storage-infinispan module doesn't need  data-index-storage-protobuf as dependency.\nEventually the exception will be converted to ProtobufValidationException by ProtobufService at line 106.", "author": "xieshenzh", "createdAt": "2020-05-28T18:14:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwMDE5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwMzU4NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431903584", "bodyText": "Just checking - ProtobufValidationException probably does not fit in here, correct?", "author": "jstastny-cz", "createdAt": "2020-05-28T14:57:15Z", "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/ProtobufService.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.protobuf;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import org.infinispan.protostream.FileDescriptorSource;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.config.Configuration;\n+import org.infinispan.protostream.descriptors.FileDescriptor;\n+import org.infinispan.protostream.impl.SerializationContextImpl;\n+import org.kie.kogito.index.protobuf.domain.DomainModelDescriptorRegisteredEvent;\n+import org.kie.kogito.index.protobuf.schema.SchemaDescriptorRegisteredEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ProtobufService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ProtobufService.class);\n+\n+    @Inject\n+    FileDescriptorSource kogitoDescriptors;\n+\n+    @Inject\n+    Event<DomainModelDescriptorRegisteredEvent> domainModelEvent;\n+\n+    @Inject\n+    Event<SchemaDescriptorRegisteredEvent> schemaEvent;\n+\n+    void onStart(@Observes StartupEvent ev) {\n+        kogitoDescriptors.getFileDescriptors().forEach((name, bytes) -> {\n+            LOGGER.info(\"Registering Kogito ProtoBuffer file: {}\", name);\n+            schemaEvent.fire(new SchemaDescriptorRegisteredEvent(name, new String(bytes), null, t -> null));\n+        });\n+    }\n+\n+    public void registerProtoBufferType(String fileName, String content) {\n+        LOGGER.debug(\"Registering new ProtoBuffer file with content: \\n{}\", content);\n+\n+        content = content.replaceAll(\"kogito.Date\", \"string\");\n+        SerializationContext ctx = new SerializationContextImpl(Configuration.builder().build());\n+        try {\n+            ctx.registerProtoFiles(kogitoDescriptors);\n+            ctx.registerProtoFiles(FileDescriptorSource.fromString(\"\", content));\n+        } catch (Exception ex) {\n+            LOGGER.warn(\"Error trying to parse proto buffer file: {}\", ex.getMessage(), ex);\n+            throw ex;", "originalCommit": "d78f746c30d62aee48219346e21ae97f9176fcba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAzMDE1OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r432030159", "bodyText": "It is in the original code. I didn't change. I guess it just means to log any exception message.", "author": "xieshenzh", "createdAt": "2020-05-28T18:15:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwMzU4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwNDAyNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431904024", "bodyText": "Just wondering - Shouldn't the \"\" here be the fileName?", "author": "jstastny-cz", "createdAt": "2020-05-28T14:57:50Z", "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/ProtobufService.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.protobuf;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import org.infinispan.protostream.FileDescriptorSource;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.config.Configuration;\n+import org.infinispan.protostream.descriptors.FileDescriptor;\n+import org.infinispan.protostream.impl.SerializationContextImpl;\n+import org.kie.kogito.index.protobuf.domain.DomainModelDescriptorRegisteredEvent;\n+import org.kie.kogito.index.protobuf.schema.SchemaDescriptorRegisteredEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ProtobufService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ProtobufService.class);\n+\n+    @Inject\n+    FileDescriptorSource kogitoDescriptors;\n+\n+    @Inject\n+    Event<DomainModelDescriptorRegisteredEvent> domainModelEvent;\n+\n+    @Inject\n+    Event<SchemaDescriptorRegisteredEvent> schemaEvent;\n+\n+    void onStart(@Observes StartupEvent ev) {\n+        kogitoDescriptors.getFileDescriptors().forEach((name, bytes) -> {\n+            LOGGER.info(\"Registering Kogito ProtoBuffer file: {}\", name);\n+            schemaEvent.fire(new SchemaDescriptorRegisteredEvent(name, new String(bytes), null, t -> null));\n+        });\n+    }\n+\n+    public void registerProtoBufferType(String fileName, String content) {\n+        LOGGER.debug(\"Registering new ProtoBuffer file with content: \\n{}\", content);\n+\n+        content = content.replaceAll(\"kogito.Date\", \"string\");\n+        SerializationContext ctx = new SerializationContextImpl(Configuration.builder().build());\n+        try {\n+            ctx.registerProtoFiles(kogitoDescriptors);\n+            ctx.registerProtoFiles(FileDescriptorSource.fromString(\"\", content));", "originalCommit": "d78f746c30d62aee48219346e21ae97f9176fcba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAzMDM0Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r432030347", "bodyText": "It is in the original code. I didn't change.\nI don't think the value really matters. But I'll change it to \"domainModel\".", "author": "xieshenzh", "createdAt": "2020-05-28T18:16:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwNDAyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwNDExMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431904113", "bodyText": "Just wondering - Shouldn't the \"\" here be the fileName?", "author": "jstastny-cz", "createdAt": "2020-05-28T14:57:57Z", "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/ProtobufService.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.protobuf;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import org.infinispan.protostream.FileDescriptorSource;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.config.Configuration;\n+import org.infinispan.protostream.descriptors.FileDescriptor;\n+import org.infinispan.protostream.impl.SerializationContextImpl;\n+import org.kie.kogito.index.protobuf.domain.DomainModelDescriptorRegisteredEvent;\n+import org.kie.kogito.index.protobuf.schema.SchemaDescriptorRegisteredEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ProtobufService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ProtobufService.class);\n+\n+    @Inject\n+    FileDescriptorSource kogitoDescriptors;\n+\n+    @Inject\n+    Event<DomainModelDescriptorRegisteredEvent> domainModelEvent;\n+\n+    @Inject\n+    Event<SchemaDescriptorRegisteredEvent> schemaEvent;\n+\n+    void onStart(@Observes StartupEvent ev) {\n+        kogitoDescriptors.getFileDescriptors().forEach((name, bytes) -> {\n+            LOGGER.info(\"Registering Kogito ProtoBuffer file: {}\", name);\n+            schemaEvent.fire(new SchemaDescriptorRegisteredEvent(name, new String(bytes), null, t -> null));\n+        });\n+    }\n+\n+    public void registerProtoBufferType(String fileName, String content) {\n+        LOGGER.debug(\"Registering new ProtoBuffer file with content: \\n{}\", content);\n+\n+        content = content.replaceAll(\"kogito.Date\", \"string\");\n+        SerializationContext ctx = new SerializationContextImpl(Configuration.builder().build());\n+        try {\n+            ctx.registerProtoFiles(kogitoDescriptors);\n+            ctx.registerProtoFiles(FileDescriptorSource.fromString(\"\", content));\n+        } catch (Exception ex) {\n+            LOGGER.warn(\"Error trying to parse proto buffer file: {}\", ex.getMessage(), ex);\n+            throw ex;\n+        }\n+\n+        FileDescriptor desc = ctx.getFileDescriptors().get(\"\");", "originalCommit": "d78f746c30d62aee48219346e21ae97f9176fcba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAzMDQwOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r432030409", "bodyText": "I'll change it to \"domainModel\".", "author": "xieshenzh", "createdAt": "2020-05-28T18:16:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwNDExMw=="}], "type": "inlineReview"}, {"oid": "df5f1e0ccfbd12defd107b32eff33bda8a333dee", "url": "https://github.com/kiegroup/kogito-apps/commit/df5f1e0ccfbd12defd107b32eff33bda8a333dee", "message": "[KOGITO-1559] pull request changes for protobuf module", "committedDate": "2020-05-29T13:28:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxOTk2Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r433019967", "bodyText": "the API module should be quite lightweight, can you review the need to bring quarkus-core dependency here please.", "author": "cristianonicolai", "createdAt": "2020-06-01T02:42:49Z", "path": "data-index/data-index-storage/data-index-storage-api/pom.xml", "diffHunk": "@@ -21,5 +21,9 @@\n       <groupId>com.fasterxml.jackson.core</groupId>\n       <artifactId>jackson-annotations</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>", "originalCommit": "df5f1e0ccfbd12defd107b32eff33bda8a333dee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2MzAxNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r433263016", "bodyText": "Will replace it with jakarta.inject-api which is lightweight.", "author": "xieshenzh", "createdAt": "2020-06-01T14:20:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxOTk2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMTI4MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r433021281", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void testAccept_supportedStorageTypeAndSchemaType() {\n          \n          \n            \n                void supportedStorageTypeAndSchemaType() {", "author": "cristianonicolai", "createdAt": "2020-06-01T02:50:57Z", "path": "data-index/data-index-storage/data-index-storage-infinispan/src/test/java/org/kie/kogito/index/infinispan/protostream/ProtoSchemaAcceptorTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.infinispan.protostream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.index.schema.SchemaType;\n+\n+import static org.kie.kogito.index.infinispan.Constants.INFINISPAN_STORAGE;\n+import static org.kie.kogito.index.infinispan.protostream.ProtoSchemaAcceptor.PROTO_SCHEMA_TYPE;\n+import static org.wildfly.common.Assert.assertFalse;\n+import static org.wildfly.common.Assert.assertTrue;\n+\n+class ProtoSchemaAcceptorTest {\n+\n+    ProtoSchemaAcceptor protoSchemaAcceptor = new ProtoSchemaAcceptor();\n+\n+    @Test\n+    void testAccept_supportedStorageTypeAndSchemaType() {", "originalCommit": "df5f1e0ccfbd12defd107b32eff33bda8a333dee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMTMzOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r433021339", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void testAccept_unsupportedSchemaType() {\n          \n          \n            \n                void unsupportedSchemaType() {", "author": "cristianonicolai", "createdAt": "2020-06-01T02:51:16Z", "path": "data-index/data-index-storage/data-index-storage-infinispan/src/test/java/org/kie/kogito/index/infinispan/protostream/ProtoSchemaAcceptorTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.infinispan.protostream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.index.schema.SchemaType;\n+\n+import static org.kie.kogito.index.infinispan.Constants.INFINISPAN_STORAGE;\n+import static org.kie.kogito.index.infinispan.protostream.ProtoSchemaAcceptor.PROTO_SCHEMA_TYPE;\n+import static org.wildfly.common.Assert.assertFalse;\n+import static org.wildfly.common.Assert.assertTrue;\n+\n+class ProtoSchemaAcceptorTest {\n+\n+    ProtoSchemaAcceptor protoSchemaAcceptor = new ProtoSchemaAcceptor();\n+\n+    @Test\n+    void testAccept_supportedStorageTypeAndSchemaType() {\n+        protoSchemaAcceptor.storageType = INFINISPAN_STORAGE;\n+        assertTrue(protoSchemaAcceptor.accept(new SchemaType(PROTO_SCHEMA_TYPE)));\n+    }\n+\n+    @Test\n+    void testAccept_unsupportedSchemaType() {", "originalCommit": "df5f1e0ccfbd12defd107b32eff33bda8a333dee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMTM2Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r433021367", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void testAccept_unsupportedStorageType() {\n          \n          \n            \n                void unsupportedStorageType() {", "author": "cristianonicolai", "createdAt": "2020-06-01T02:51:25Z", "path": "data-index/data-index-storage/data-index-storage-infinispan/src/test/java/org/kie/kogito/index/infinispan/protostream/ProtoSchemaAcceptorTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.infinispan.protostream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.index.schema.SchemaType;\n+\n+import static org.kie.kogito.index.infinispan.Constants.INFINISPAN_STORAGE;\n+import static org.kie.kogito.index.infinispan.protostream.ProtoSchemaAcceptor.PROTO_SCHEMA_TYPE;\n+import static org.wildfly.common.Assert.assertFalse;\n+import static org.wildfly.common.Assert.assertTrue;\n+\n+class ProtoSchemaAcceptorTest {\n+\n+    ProtoSchemaAcceptor protoSchemaAcceptor = new ProtoSchemaAcceptor();\n+\n+    @Test\n+    void testAccept_supportedStorageTypeAndSchemaType() {\n+        protoSchemaAcceptor.storageType = INFINISPAN_STORAGE;\n+        assertTrue(protoSchemaAcceptor.accept(new SchemaType(PROTO_SCHEMA_TYPE)));\n+    }\n+\n+    @Test\n+    void testAccept_unsupportedSchemaType() {\n+        protoSchemaAcceptor.storageType = INFINISPAN_STORAGE;\n+        assertFalse(protoSchemaAcceptor.accept(new SchemaType(\"test\")));\n+    }\n+\n+    @Test\n+    void testAccept_unsupportedStorageType() {", "originalCommit": "df5f1e0ccfbd12defd107b32eff33bda8a333dee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMTkzMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r433021930", "bodyText": "is this dependency really needed?", "author": "cristianonicolai", "createdAt": "2020-06-01T02:54:45Z", "path": "data-index/data-index-storage/data-index-storage-protobuf/pom.xml", "diffHunk": "@@ -0,0 +1,62 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>data-index-storage</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>data-index-storage-protobuf</artifactId>\n+  <name>Kogito :: Data Index Storage Protobuf</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>data-index-storage-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>infinispan-persistence-addon</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>", "originalCommit": "df5f1e0ccfbd12defd107b32eff33bda8a333dee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI0MzU0MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r433243540", "bodyText": "It is required for StartupEvent and ShutdownEvent", "author": "xieshenzh", "createdAt": "2020-06-01T13:47:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMTkzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMjUwNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r433022507", "bodyText": "is this dependency really needed?", "author": "cristianonicolai", "createdAt": "2020-06-01T02:58:18Z", "path": "data-index/data-index-storage/data-index-storage-protobuf/pom.xml", "diffHunk": "@@ -0,0 +1,62 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>data-index-storage</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>data-index-storage-protobuf</artifactId>\n+  <name>Kogito :: Data Index Storage Protobuf</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>data-index-storage-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>infinispan-persistence-addon</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.infinispan.protostream</groupId>\n+      <artifactId>protostream</artifactId>\n+    </dependency>\n+\n+    <!-- test -->\n+    <dependency>\n+      <groupId>org.assertj</groupId>", "originalCommit": "df5f1e0ccfbd12defd107b32eff33bda8a333dee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMjUzMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r433022532", "bodyText": "is this dependency really needed?", "author": "cristianonicolai", "createdAt": "2020-06-01T02:58:28Z", "path": "data-index/data-index-storage/data-index-storage-protobuf/pom.xml", "diffHunk": "@@ -0,0 +1,62 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>data-index-storage</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>data-index-storage-protobuf</artifactId>\n+  <name>Kogito :: Data Index Storage Protobuf</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>data-index-storage-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>infinispan-persistence-addon</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.infinispan.protostream</groupId>\n+      <artifactId>protostream</artifactId>\n+    </dependency>\n+\n+    <!-- test -->\n+    <dependency>\n+      <groupId>org.assertj</groupId>\n+      <artifactId>assertj-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-params</artifactId>", "originalCommit": "df5f1e0ccfbd12defd107b32eff33bda8a333dee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyNDM0OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r433024349", "bodyText": "@xiezhang7 if you fire both events here, we might endup registering domains for proto files that are invalid, I would recommend keeping the logic and order that these events were handled.", "author": "cristianonicolai", "createdAt": "2020-06-01T03:09:49Z", "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/ProtobufService.java", "diffHunk": "@@ -101,19 +101,11 @@ public void registerProtoBufferType(String content) throws Exception {\n \n         validateDescriptorField(messageName, descriptor, KOGITO_DOMAIN_ATTRIBUTE);\n \n-        Map<String, String> cache = manager.getProtobufCache();\n-        cache.put(processId + \".proto\", content);\n-        manager.getProcessIdModelCache().put(processId, fullTypeName);\n-        List<String> errors = checkSchemaErrors(cache);\n-        if (errors.isEmpty()) {\n-            event.fire(new FileDescriptorRegisteredEvent(desc));\n-        } else {\n-            String message = \"Proto Schema contain errors:\\n\" + errors.stream().collect(Collectors.joining(\"\\n\"));\n-            throw new ProtobufValidationException(message);\n-        }\n-\n-        if (LOGGER.isDebugEnabled()) {\n-            listProtoCacheKeys();\n+        try {\n+            schemaEvent.fire(new SchemaRegisteredEvent(new SchemaDescriptor(processId + \".proto\", content, new ProcessDescriptor(processId, fullTypeName)), SCHEMA_TYPE));", "originalCommit": "df5f1e0ccfbd12defd107b32eff33bda8a333dee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5MzYwMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r433493603", "bodyText": "@cristianonicolai The events are fired synchronously. If the execution of the first event throws an exception, the execution of the second event won't take place. I have added test to verify that, and also another test to make sure exception is thrown if the proto files are invalid.", "author": "xieshenzh", "createdAt": "2020-06-01T21:13:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyNDM0OQ=="}], "type": "inlineReview"}, {"oid": "542c62a088bc4a61d18f7835b814a9b543040ddb", "url": "https://github.com/kiegroup/kogito-apps/commit/542c62a088bc4a61d18f7835b814a9b543040ddb", "message": "[KOGITO-1559] sonar analysis", "committedDate": "2020-06-01T23:55:58Z", "type": "forcePushed"}, {"oid": "2959a209f1e2d6d448ebc1b518fce380f24374d4", "url": "https://github.com/kiegroup/kogito-apps/commit/2959a209f1e2d6d448ebc1b518fce380f24374d4", "message": "[KOGITO-1559] Data Index service refactoring to support alternative storage solution", "committedDate": "2020-06-03T20:23:05Z", "type": "forcePushed"}, {"oid": "2aaf8ea4019de9bc3a7e4654ae26d752c270945b", "url": "https://github.com/kiegroup/kogito-apps/commit/2aaf8ea4019de9bc3a7e4654ae26d752c270945b", "message": "[KOGITO-1559] Data Index refactoring to support alternative storage solution", "committedDate": "2020-06-03T20:27:40Z", "type": "forcePushed"}, {"oid": "21396abf94fd61376bca8f338972f510f5c88bd3", "url": "https://github.com/kiegroup/kogito-apps/commit/21396abf94fd61376bca8f338972f510f5c88bd3", "message": "[KOGITO-1559] Data Index service refactoring to support alternative storage solution", "committedDate": "2020-06-03T21:50:43Z", "type": "forcePushed"}, {"oid": "0828b27688f507eb607e25b137802f11f69531d2", "url": "https://github.com/kiegroup/kogito-apps/commit/0828b27688f507eb607e25b137802f11f69531d2", "message": "[KOGITO-1559] Data Index refactoring to support alternative storage solution", "committedDate": "2020-06-03T23:34:50Z", "type": "commit"}, {"oid": "0828b27688f507eb607e25b137802f11f69531d2", "url": "https://github.com/kiegroup/kogito-apps/commit/0828b27688f507eb607e25b137802f11f69531d2", "message": "[KOGITO-1559] Data Index refactoring to support alternative storage solution", "committedDate": "2020-06-03T23:34:50Z", "type": "forcePushed"}]}