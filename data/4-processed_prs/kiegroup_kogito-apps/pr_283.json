{"pr_number": 283, "pr_title": "KOGITO-1139 Add node retrigger action in process instance timeline", "pr_createdAt": "2020-06-19T09:04:11Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/283", "timeline": [{"oid": "9a4b78de0b5334db5b00af73c5a02ee115f3fd46", "url": "https://github.com/kiegroup/kogito-apps/commit/9a4b78de0b5334db5b00af73c5a02ee115f3fd46", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-06-19T10:59:08Z", "type": "forcePushed"}, {"oid": "e298accd9401fd7946122e3a15c25107a6d35a71", "url": "https://github.com/kiegroup/kogito-apps/commit/e298accd9401fd7946122e3a15c25107a6d35a71", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-06-19T12:35:42Z", "type": "forcePushed"}, {"oid": "64abe97445f8252f36136a92cdeaaf4969e3e9d4", "url": "https://github.com/kiegroup/kogito-apps/commit/64abe97445f8252f36136a92cdeaaf4969e3e9d4", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-06-22T05:36:09Z", "type": "forcePushed"}, {"oid": "73509df517500c2d5db15ba6e40b911449cae790", "url": "https://github.com/kiegroup/kogito-apps/commit/73509df517500c2d5db15ba6e40b911449cae790", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-06-22T07:34:18Z", "type": "forcePushed"}, {"oid": "e680c59dcf75b36ceb3fd4da412411fedcf51495", "url": "https://github.com/kiegroup/kogito-apps/commit/e680c59dcf75b36ceb3fd4da412411fedcf51495", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-06-23T04:52:04Z", "type": "forcePushed"}, {"oid": "daba65eb4b51fd26198bb5cd3fdfa9d3cd1fdcd0", "url": "https://github.com/kiegroup/kogito-apps/commit/daba65eb4b51fd26198bb5cd3fdfa9d3cd1fdcd0", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-06-23T04:58:20Z", "type": "forcePushed"}, {"oid": "e908cdc29006052380819e8f75a1c072c7809ce9", "url": "https://github.com/kiegroup/kogito-apps/commit/e908cdc29006052380819e8f75a1c072c7809ce9", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-06-23T12:33:01Z", "type": "forcePushed"}, {"oid": "8b97831a9c3518808fb93fd33d5adeb19f8d0c9c", "url": "https://github.com/kiegroup/kogito-apps/commit/8b97831a9c3518808fb93fd33d5adeb19f8d0c9c", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-06-23T14:00:37Z", "type": "forcePushed"}, {"oid": "f49e839d4cb80d1c3dc5db602adf0e8b678b860a", "url": "https://github.com/kiegroup/kogito-apps/commit/f49e839d4cb80d1c3dc5db602adf0e8b678b860a", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-06-23T15:45:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMwODY0Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r445308643", "bodyText": "formatting is a bit off - mainly whitespace, please try to reformat", "author": "jstastny-cz", "createdAt": "2020-06-25T05:04:48Z", "path": "ui-packages/packages/management-console/server/MockData/controllers.js", "diffHunk": "@@ -71,5 +71,20 @@ module.exports = controller = {\n       data[0].state = 'ABORTED';\n       res.status(200).send('success');\n     }\n+  },\n+  \n+  callNodeRetrigger:(req,res)=>{", "originalCommit": "f49e839d4cb80d1c3dc5db602adf0e8b678b860a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MTIwOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r445991209", "bodyText": "removed the whitespace", "author": "AjayJagan", "createdAt": "2020-06-26T06:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMwODY0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxMDM1MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r445310350", "bodyText": "should we validate what happened after the click?", "author": "jstastny-cz", "createdAt": "2020-06-25T05:11:05Z", "path": "ui-packages/packages/management-console/src/components/Templates/ProcessDetailsPage/tests/ProcessDetailsPage.test.tsx", "diffHunk": "@@ -209,7 +217,20 @@ describe('Process Details Page component tests', () => {\n     );\n     expect(wrapper).toMatchSnapshot();\n   });\n-\n+  it('abort button click', async () => {\n+    const wrapper = await getWrapperAsync(\n+      <MockedProvider mocks={mocks1} addTypename={false}>\n+        <BrowserRouter>\n+          <ProcessDetailsPage {...props} />\n+        </BrowserRouter>\n+      </MockedProvider>,\n+      'ProcessDetailsPage'\n+    );\n+    wrapper\n+      .find('#abort-button')\n+      .first()\n+      .simulate('click');", "originalCommit": "f49e839d4cb80d1c3dc5db602adf0e8b678b860a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4Mzg0MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r446883841", "bodyText": "should we click twice here?", "author": "jstastny-cz", "createdAt": "2020-06-29T10:11:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxMDM1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxMDU4Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r445310583", "bodyText": "please mock the react-icons in whole file", "author": "jstastny-cz", "createdAt": "2020-06-25T05:11:53Z", "path": "ui-packages/packages/management-console/src/components/Templates/ProcessDetailsPage/tests/__snapshots__/ProcessDetailsPage.test.tsx.snap", "diffHunk": "@@ -833,6 +863,71 @@ exports[`Process Details Page component tests snapshot testing in Active state 1\n                             </span>\n                           </li>\n                         </BreadcrumbItem>\n+                        <BreadcrumbItem\n+                          key=\"1\"\n+                        >\n+                          <li\n+                            className=\"pf-c-breadcrumb__item\"\n+                          >\n+                            <Link\n+                              to={\n+                                Object {\n+                                  \"pathname\": \"/ProcessInstances/8035b580-6ae4-4aa8-9ec0-e18e19809e0b\",\n+                                  \"state\": Object {\n+                                    \"filters\": Object {\n+                                      \"businessKey\": Array [],\n+                                      \"status\": Array [\n+                                        \"ACTIVE\",\n+                                      ],\n+                                    },\n+                                  },\n+                                }\n+                              }\n+                            >\n+                              <LinkAnchor\n+                                href=\"/ProcessInstances/8035b580-6ae4-4aa8-9ec0-e18e19809e0b\"\n+                                navigate={[Function]}\n+                              >\n+                                <a\n+                                  href=\"/ProcessInstances/8035b580-6ae4-4aa8-9ec0-e18e19809e0b\"\n+                                  onClick={[Function]}\n+                                >\n+                                  8035b580-6ae4-4aa8-9ec0-e18e19809e0b\n+                                </a>\n+                              </LinkAnchor>\n+                            </Link>\n+                            <span\n+                              className=\"pf-c-breadcrumb__item-divider\"\n+                            >\n+                              <AngleRightIcon", "originalCommit": "f49e839d4cb80d1c3dc5db602adf0e8b678b860a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxMTAwNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r445311004", "bodyText": "these svg fragments are from some button? could we mock it?", "author": "jstastny-cz", "createdAt": "2020-06-25T05:13:44Z", "path": "ui-packages/packages/management-console/src/components/Templates/ProcessDetailsPage/tests/__snapshots__/ProcessDetailsPage.test.tsx.snap", "diffHunk": "@@ -23940,9 +24141,149 @@ exports[`Process Details Page component tests snapshot testing in Suspended stat\n             ]\n           }\n           appendTo={\n-            <body>\n+            <body\n+              class=\"\"\n+            >\n               <div />\n               <div />\n+              <div>\n+                <div\n+                  class=\"pf-c-backdrop\"\n+                >\n+                  <div\n+                    class=\"pf-l-bullseye\"\n+                  >\n+                    <div\n+                      aria-describedby=\"pf-modal-2\"\n+                      aria-label=\"\"\n+                      aria-modal=\"true\"\n+                      class=\"pf-c-modal-box pf-m-sm\"\n+                      role=\"dialog\"\n+                    >\n+                      <button\n+                        aria-label=\"Close\"\n+                        class=\"pf-c-button pf-m-plain\"\n+                        type=\"button\"\n+                      >\n+                        <svg", "originalCommit": "f49e839d4cb80d1c3dc5db602adf0e8b678b860a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxMjEyMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r445312122", "bodyText": "we're not checking here the outcome, IDK in this case maybe whether the mocked functions were invoked or sth like that.", "author": "jstastny-cz", "createdAt": "2020-06-25T05:18:05Z", "path": "ui-packages/packages/management-console/src/utils/tests/Utils.test.tsx", "diffHunk": "@@ -159,4 +160,48 @@ describe('uitility function testing', () => {\n       );\n     });\n   });\n+\n+  describe('retrigger click tests', () => {\n+    const processInstanceData = {\n+      id: '8035b580-6ae4-4aa8-9ec0-e18e19809e0b',\n+      processId: 'trav',\n+      serviceUrl: 'http://localhost:4000',\n+      state: ProcessInstanceState.Active\n+    };\n+    const nodeObject = {\n+      nodeId: '2',\n+      name: 'Confirm travel',\n+      definitionId: 'UserTask_2',\n+      id: '843bd287-fb6e-4ee7-a304-ba9b430e52d8',\n+      enter: '2019-10-22T04:43:01.148Z',\n+      exit: null,\n+      type: 'HumanTaskNode'\n+    };\n+    const setModalTitle = jest.fn();\n+    const setTitleType = jest.fn();\n+    const setModalContent = jest.fn();\n+    const handleAbortModalToggle = jest.fn();\n+    it('executes retrigger node process successfully', () => {\n+      mockedAxios.post.mockResolvedValue({});\n+      handleNodeInstanceRetrigger(\n+        processInstanceData,\n+        nodeObject,\n+        setModalTitle,\n+        setTitleType,\n+        setModalContent,\n+        handleAbortModalToggle\n+      );", "originalCommit": "f49e839d4cb80d1c3dc5db602adf0e8b678b860a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MTQ2NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r445991464", "bodyText": "I have tested the title, type and the content being set", "author": "AjayJagan", "createdAt": "2020-06-26T06:27:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxMjEyMg=="}], "type": "inlineReview"}, {"oid": "f0e25f9ccb92ffbfc2d842aed98612ca650650a0", "url": "https://github.com/kiegroup/kogito-apps/commit/f0e25f9ccb92ffbfc2d842aed98612ca650650a0", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-06-26T06:25:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3OTczNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r446879735", "bodyText": "please mock the @kogito-apps/common as you'd do for any external package - not to rely on its inner folder structure here.\nLike you did for @patternfly/react-icons:\njest.mock('@kogito-apps/common', () => ({\n  ...jest.requireActual('@kogito-apps/common'),\n  ProcessDescriptor: () => {\n    return <MockedComponent />;\n  },\n  KogitoSpinner: () =>\n.\n.\n.\n}));", "author": "jstastny-cz", "createdAt": "2020-06-29T09:06:16Z", "path": "ui-packages/packages/management-console/src/components/Templates/ProcessDetailsPage/tests/ProcessDetailsPage.test.tsx", "diffHunk": "@@ -6,6 +6,54 @@ import { BrowserRouter } from 'react-router-dom';\n import { getWrapperAsync, GraphQL } from '@kogito-apps/common';\n import GetProcessInstanceByIdDocument = GraphQL.GetProcessInstanceByIdDocument;\n import ProcessInstanceState = GraphQL.ProcessInstanceState;\n+import { setTitle } from '../../../../utils/Utils';\n+\n+jest.mock('../../../../utils/Utils');\n+jest.mock('../../../Atoms/ProcessListModal/ProcessListModal');\n+jest.mock('../../../Atoms/ProcessListBulkInstances/ProcessListBulkInstances');\n+jest.mock(", "originalCommit": "f0e25f9ccb92ffbfc2d842aed98612ca650650a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxMDY1Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r446910656", "bodyText": "changed now :)", "author": "AjayJagan", "createdAt": "2020-06-29T11:51:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3OTczNQ=="}], "type": "inlineReview"}, {"oid": "f9f81f6737e5a0d4493d947f2d3b74fb730e8bc0", "url": "https://github.com/kiegroup/kogito-apps/commit/f9f81f6737e5a0d4493d947f2d3b74fb730e8bc0", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-06-29T11:46:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNTcxNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r446935717", "bodyText": "this dropdown is the same as the on in following elseif branch, just a few strings change there. Can we derive a function and just keep the moving parts as arguments?", "author": "jstastny-cz", "createdAt": "2020-06-29T12:34:57Z", "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/ProcessDetailsTimeline.tsx", "diffHunk": "@@ -73,23 +73,140 @@ const ProcessDetailsTimeline: React.FC<IOwnProps> = ({\n           setModalTitle,\n           setTitleType,\n           setModalContent,\n-          handleSkipModalToggle\n+          handleModalToggle\n         )\n       }\n     >\n       Skip\n     </DropdownItem>\n   ];\n \n-  const onKebabToggle = isOpen => {\n-    setIsKebabOpen(isOpen);\n+  const nodeManagementDropdownItems = [\n+    <DropdownItem\n+      key=\"retrigger\"\n+      component=\"button\"\n+      onClick={() =>\n+        handleNodeInstanceRetrigger(\n+          data,\n+          nodeObject,\n+          setModalTitle,\n+          setTitleType,\n+          setModalContent,\n+          handleModalToggle\n+        )\n+      }\n+    >\n+      Retrigger node\n+    </DropdownItem>\n+  ];\n+\n+  const onKebabToggle = (isOpen: boolean, node, id) => {\n+    /* tslint:disable-next-line */\n+    setNodeObject(node);\n+    if (isOpen) {\n+      setKebabOpenArray([...kebabOpenArray, id]);\n+    } else {\n+      const tempKebabArray = [...kebabOpenArray];\n+      const index = tempKebabArray.indexOf(id);\n+      tempKebabArray.splice(index, 1);\n+      setKebabOpenArray(tempKebabArray);\n+    }\n   };\n \n-  const onDropdownSelect = event => {\n-    setIsKebabOpen(!isKebabOpen);\n+  const onDropdownSelect = id => {\n+    const tempKebabArray = [...kebabOpenArray];\n+    const index = tempKebabArray.indexOf(id);\n+    tempKebabArray.splice(index, 1);\n+    setKebabOpenArray(tempKebabArray);\n   };\n+\n+  const handleModalToggle = () => {\n+    setIsModalOpen(!isModalOpen);\n+  };\n+\n+  const processManagementKebabButtons = (content, index) => {\n+    if (\n+      data.addons.includes('process-management') &&\n+      data.serviceUrl !== null &&\n+      data.error &&\n+      content.definitionId === data.error.nodeDefinitionId &&\n+      data.state !== GraphQL.ProcessInstanceState.Completed\n+    ) {\n+      return (\n+        <Dropdown", "originalCommit": "f9f81f6737e5a0d4493d947f2d3b74fb730e8bc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNzEyNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r446937125", "bodyText": "Or maybe! create a separate component here? covering all the cases we have here in this function processManagementKebabButtons together with onDropdownSelect and onKebabToggle,... ?", "author": "jstastny-cz", "createdAt": "2020-06-29T12:37:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNTcxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxODg0Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447418842", "bodyText": "Hey @jstastny-cz - I have converted the redundant code to a simple function . Please have a look", "author": "AjayJagan", "createdAt": "2020-06-30T05:30:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNTcxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwNjg4OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447506889", "bodyText": "converted to a simple function removing redundant code :)", "author": "AjayJagan", "createdAt": "2020-06-30T08:29:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNTcxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1ODQwNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r446958407", "bodyText": "So we're clicking twice here, right? first open, second close? Then I'd check also if the Dropdown was actually opened -> add a isOpen check after first click that would check expect true", "author": "jstastny-cz", "createdAt": "2020-06-29T13:10:25Z", "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/tests/ProcessDetailsTimeline.test.tsx", "diffHunk": "@@ -133,37 +221,153 @@ describe('ProcessDetailsTimeline component tests', () => {\n     expect(wrapper).toMatchSnapshot();\n   });\n \n-  it('onSelect click test', () => {\n-    const wrapper = shallow(<ProcessDetailsTimeline {...props2} />);\n+  it('Snapshot testing for completed state', () => {\n+    const wrapper = shallow(<ProcessDetailsTimeline {...props3} />);\n+    expect(wrapper).toMatchSnapshot();\n+  });\n \n-    const event = {\n-      currentTarget: {}\n-    } as React.ChangeEvent<HTMLInputElement>;\n-    wrapper\n-      .find('#dropdown-kebab')\n-      .props()\n-      ['onSelect'](event);\n-    expect(wrapper.find('#dropdown-kebab').props()['isOpen']).toBeTruthy();\n+  it('onSelect click test', () => {\n+    const wrapper = getWrapper(\n+      <ProcessDetailsTimeline {...props1} />,\n+      'ProcessDetailsTimeline'\n+    );\n+    act(() => {\n+      wrapper\n+        .find(Dropdown)\n+        .first()\n+        .props()\n+        ['onSelect']();\n+      wrapper", "originalCommit": "f9f81f6737e5a0d4493d947f2d3b74fb730e8bc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwNzU2OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447507568", "bodyText": "as discussed I was not able to assert the isOpen properly .. let's investigate it more and do it in an incremental pr", "author": "AjayJagan", "createdAt": "2020-06-30T08:30:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1ODQwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1OTIyNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r446959227", "bodyText": "check before here that the kebab was open by the onToggle invocation.", "author": "jstastny-cz", "createdAt": "2020-06-29T13:11:40Z", "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/tests/ProcessDetailsTimeline.test.tsx", "diffHunk": "@@ -133,37 +221,153 @@ describe('ProcessDetailsTimeline component tests', () => {\n     expect(wrapper).toMatchSnapshot();\n   });\n \n-  it('onSelect click test', () => {\n-    const wrapper = shallow(<ProcessDetailsTimeline {...props2} />);\n+  it('Snapshot testing for completed state', () => {\n+    const wrapper = shallow(<ProcessDetailsTimeline {...props3} />);\n+    expect(wrapper).toMatchSnapshot();\n+  });\n \n-    const event = {\n-      currentTarget: {}\n-    } as React.ChangeEvent<HTMLInputElement>;\n-    wrapper\n-      .find('#dropdown-kebab')\n-      .props()\n-      ['onSelect'](event);\n-    expect(wrapper.find('#dropdown-kebab').props()['isOpen']).toBeTruthy();\n+  it('onSelect click test', () => {\n+    const wrapper = getWrapper(\n+      <ProcessDetailsTimeline {...props1} />,\n+      'ProcessDetailsTimeline'\n+    );\n+    act(() => {\n+      wrapper\n+        .find(Dropdown)\n+        .first()\n+        .props()\n+        ['onSelect']();\n+      wrapper\n+        .find(Dropdown)\n+        .at(1)\n+        .props()\n+        ['onSelect']();\n+    });\n+    expect(\n+      wrapper\n+        .find(Dropdown)\n+        .first()\n+        .props()['isOpen']\n+    ).toBeFalsy();\n   });\n \n-  it('onToggle click test', () => {\n-    const wrapper = shallow(<ProcessDetailsTimeline {...props2} />);\n-    wrapper\n-      .find('#dropdown-kebab')\n-      .props()\n-      ['toggle']['props']['onToggle']();\n+  it('onToggle click test - node management', () => {\n+    const contentForNodeManagement = {\n+      nodeId: '111-555-898',\n+      name: 'Confirm travel',\n+      definitionId: '_69e0a0f5-2360-4174-a8f8-a892a31fc2f964rc',\n+      id: '69e0a0f5-2360-4174-a8f8-a892a31fc2f9',\n+      enter: '2019-10-22T03:40:44.089Z',\n+      exit: null,\n+      type: 'HumanTaskNode'\n+    };\n+    const wrapper = getWrapper(\n+      <ProcessDetailsTimeline {...props1} />,\n+      'ProcessDetailsTimeline'\n+    );\n+    act(() => {\n+      wrapper\n+        .find('#timeline-kebab-toggle-nodemanagement-1')\n+        .find('KebabToggle')\n+        .props()\n+        ['onToggle'](\n+          false,\n+          contentForNodeManagement,\n+          'timeline-kebab-toggle-nodemanagement-1'\n+        );\n+      wrapper", "originalCommit": "f9f81f6737e5a0d4493d947f2d3b74fb730e8bc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwNzcyMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447507722", "bodyText": "as discussed I was not able to assert the isOpen properly .. let's investigate it more and do it in an incremental pr", "author": "AjayJagan", "createdAt": "2020-06-30T08:31:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1OTIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2MzUxNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r446963515", "bodyText": "please add at least comments with description on what we're acutally clicking (improves readability of test).", "author": "jstastny-cz", "createdAt": "2020-06-29T13:18:01Z", "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/tests/ProcessDetailsTimeline.test.tsx", "diffHunk": "@@ -133,37 +221,153 @@ describe('ProcessDetailsTimeline component tests', () => {\n     expect(wrapper).toMatchSnapshot();\n   });\n \n-  it('onSelect click test', () => {\n-    const wrapper = shallow(<ProcessDetailsTimeline {...props2} />);\n+  it('Snapshot testing for completed state', () => {\n+    const wrapper = shallow(<ProcessDetailsTimeline {...props3} />);\n+    expect(wrapper).toMatchSnapshot();\n+  });\n \n-    const event = {\n-      currentTarget: {}\n-    } as React.ChangeEvent<HTMLInputElement>;\n-    wrapper\n-      .find('#dropdown-kebab')\n-      .props()\n-      ['onSelect'](event);\n-    expect(wrapper.find('#dropdown-kebab').props()['isOpen']).toBeTruthy();\n+  it('onSelect click test', () => {\n+    const wrapper = getWrapper(\n+      <ProcessDetailsTimeline {...props1} />,\n+      'ProcessDetailsTimeline'\n+    );\n+    act(() => {\n+      wrapper\n+        .find(Dropdown)\n+        .first()\n+        .props()\n+        ['onSelect']();\n+      wrapper\n+        .find(Dropdown)\n+        .at(1)\n+        .props()\n+        ['onSelect']();\n+    });\n+    expect(\n+      wrapper\n+        .find(Dropdown)\n+        .first()\n+        .props()['isOpen']\n+    ).toBeFalsy();\n   });\n \n-  it('onToggle click test', () => {\n-    const wrapper = shallow(<ProcessDetailsTimeline {...props2} />);\n-    wrapper\n-      .find('#dropdown-kebab')\n-      .props()\n-      ['toggle']['props']['onToggle']();\n+  it('onToggle click test - node management', () => {\n+    const contentForNodeManagement = {\n+      nodeId: '111-555-898',\n+      name: 'Confirm travel',\n+      definitionId: '_69e0a0f5-2360-4174-a8f8-a892a31fc2f964rc',\n+      id: '69e0a0f5-2360-4174-a8f8-a892a31fc2f9',\n+      enter: '2019-10-22T03:40:44.089Z',\n+      exit: null,\n+      type: 'HumanTaskNode'\n+    };\n+    const wrapper = getWrapper(\n+      <ProcessDetailsTimeline {...props1} />,\n+      'ProcessDetailsTimeline'\n+    );\n+    act(() => {\n+      wrapper\n+        .find('#timeline-kebab-toggle-nodemanagement-1')\n+        .find('KebabToggle')\n+        .props()\n+        ['onToggle'](\n+          false,\n+          contentForNodeManagement,\n+          'timeline-kebab-toggle-nodemanagement-1'\n+        );\n+      wrapper\n+        .find('#timeline-kebab-toggle-nodemanagement-1')\n+        .find('KebabToggle')\n+        .props()\n+        ['onToggle'](\n+          true,\n+          contentForNodeManagement,\n+          'timeline-kebab-toggle-nodemanagement-1'\n+        );\n+    });\n+    expect(\n+      wrapper\n+        .find('#timeline-kebab-toggle-nodemanagement-1')\n+        .find('KebabToggle')\n+        .prop('isOpen')\n+    ).toBeFalsy();\n   });\n \n-  it('handle and handle retry click test', () => {\n-    const wrapper = shallow(<ProcessDetailsTimeline {...props2} />);\n+  it('onToggle click test - process management', () => {\n+    const contentForProcessManagement = {\n+      nodeId: '111-555-898',\n+      name: 'Confirm travel',\n+      definitionId: 'abc-efg-hij',\n+      id: '69e0a0f5-2360-4174-a8f8-a892a31fc2f9r25e',\n+      enter: '2019-10-22T03:40:44.089Z',\n+      exit: null,\n+      type: 'HumanTaskNode'\n+    };\n+    const wrapper = getWrapper(\n+      <ProcessDetailsTimeline {...props1} />,\n+      'ProcessDetailsTimeline'\n+    );\n+    act(() => {\n+      wrapper\n+        .find('#timeline-kebab-toggle-0')\n+        .find('KebabToggle')\n+        .props()\n+        ['onToggle'](\n+          false,\n+          contentForProcessManagement,\n+          'timeline-kebab-toggle-0'\n+        );\n+    });\n+    expect(\n+      wrapper\n+        .find('#timeline-kebab-toggle-0')\n+        .find('KebabToggle')\n+        .prop('isOpen')\n+    ).toBeFalsy();\n+  });\n \n+  it('handle skip , handle retry and nodecancel click test', async () => {\n+    const wrapper = shallow(<ProcessDetailsTimeline {...props1} />);\n+    mockedAxios.post.mockResolvedValue({});\n+    mockedAxios.post.mockRejectedValue({});\n+    mockedAxios.delete.mockResolvedValue({});\n+    mockedAxios.delete.mockRejectedValue({});\n     wrapper\n-      .find('#dropdown-kebab')\n+      .find(Dropdown)", "originalCommit": "f9f81f6737e5a0d4493d947f2d3b74fb730e8bc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2NzAzOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r446967038", "bodyText": "Please see if we can test each step here -> each onClick invocation should IMO be followed by a expect unless there is a valid reason not to - each onClick IMO should have an influence on the DOM, so I expect this is not a case here and it is testable.", "author": "jstastny-cz", "createdAt": "2020-06-29T13:22:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2MzUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwODE0NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447508145", "bodyText": "added the comments and placed the expect below each click for better readability", "author": "AjayJagan", "createdAt": "2020-06-30T08:31:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2MzUxNQ=="}], "type": "inlineReview"}, {"oid": "dea4c4d98d782cd00a2dc6e93bfe643b37beff22", "url": "https://github.com/kiegroup/kogito-apps/commit/dea4c4d98d782cd00a2dc6e93bfe643b37beff22", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-06-30T05:27:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzMzMwMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447433301", "bodyText": "@AjayJagan I think onSuccessAction you actually dont need any parameters. This method just called called so you know it operation succeed.", "author": "cristianonicolai", "createdAt": "2020-06-30T06:13:17Z", "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -182,25 +167,29 @@ export const handleAbort = (\n     });\n };\n \n-export const isModalOpen = (\n-  modalTitle,\n-  isSkipModalOpen,\n-  isRetryModalOpen\n-): boolean => {\n-  if (modalTitle === 'Skip operation') {\n-    return isSkipModalOpen;\n-  } else if (modalTitle === 'Retry operation') {\n-    return isRetryModalOpen;\n-  }\n-};\n-export const modalToggle = (\n-  modalTitle,\n-  handleSkipModalToggle,\n-  handleRetryModalToggle\n-): (() => void) => {\n-  if (modalTitle === 'Skip operation') {\n-    return handleSkipModalToggle;\n-  } else if (modalTitle === 'Retry operation') {\n-    return handleRetryModalToggle;\n-  }\n+export const handleNodeInstanceRetrigger = (\n+  processInstanceData: Pick<\n+    ProcessInstance,\n+    'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n+  >,\n+  nodeObject: any,\n+  onSuccessAction: (title: string, content: string) => void,", "originalCommit": "dea4c4d98d782cd00a2dc6e93bfe643b37beff22", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzMzU2Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447433567", "bodyText": "in here I would propose to only have a message: string as result so you can build the final content.", "author": "cristianonicolai", "createdAt": "2020-06-30T06:14:01Z", "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -182,25 +167,29 @@ export const handleAbort = (\n     });\n };\n \n-export const isModalOpen = (\n-  modalTitle,\n-  isSkipModalOpen,\n-  isRetryModalOpen\n-): boolean => {\n-  if (modalTitle === 'Skip operation') {\n-    return isSkipModalOpen;\n-  } else if (modalTitle === 'Retry operation') {\n-    return isRetryModalOpen;\n-  }\n-};\n-export const modalToggle = (\n-  modalTitle,\n-  handleSkipModalToggle,\n-  handleRetryModalToggle\n-): (() => void) => {\n-  if (modalTitle === 'Skip operation') {\n-    return handleSkipModalToggle;\n-  } else if (modalTitle === 'Retry operation') {\n-    return handleRetryModalToggle;\n-  }\n+export const handleNodeInstanceRetrigger = (\n+  processInstanceData: Pick<\n+    ProcessInstance,\n+    'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n+  >,\n+  nodeObject: any,\n+  onSuccessAction: (title: string, content: string) => void,\n+  onFailureAction: (title: string, content: string) => void", "originalCommit": "dea4c4d98d782cd00a2dc6e93bfe643b37beff22", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzNTgwNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447435806", "bodyText": "You can either pass the id as String or a `Pick<\nNodeInstance,\n'id'\n\n`\nNode name is not needed as message should be built in the calling method.", "author": "cristianonicolai", "createdAt": "2020-06-30T06:19:40Z", "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -182,25 +167,29 @@ export const handleAbort = (\n     });\n };\n \n-export const isModalOpen = (\n-  modalTitle,\n-  isSkipModalOpen,\n-  isRetryModalOpen\n-): boolean => {\n-  if (modalTitle === 'Skip operation') {\n-    return isSkipModalOpen;\n-  } else if (modalTitle === 'Retry operation') {\n-    return isRetryModalOpen;\n-  }\n-};\n-export const modalToggle = (\n-  modalTitle,\n-  handleSkipModalToggle,\n-  handleRetryModalToggle\n-): (() => void) => {\n-  if (modalTitle === 'Skip operation') {\n-    return handleSkipModalToggle;\n-  } else if (modalTitle === 'Retry operation') {\n-    return handleRetryModalToggle;\n-  }\n+export const handleNodeInstanceRetrigger = (\n+  processInstanceData: Pick<\n+    ProcessInstance,\n+    'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n+  >,\n+  nodeObject: any,", "originalCommit": "dea4c4d98d782cd00a2dc6e93bfe643b37beff22", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzOTgwMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447439801", "bodyText": "you just call onDropdownSelect id from here?", "author": "cristianonicolai", "createdAt": "2020-06-30T06:29:14Z", "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/ProcessDetailsTimeline.tsx", "diffHunk": "@@ -24,72 +24,149 @@ import {\n import React, { useState } from 'react';\n import './ProcessDetailsTimeline.css';\n import { GraphQL } from '@kogito-apps/common';\n-import { handleRetry, handleSkip } from '../../../utils/Utils';\n+import {\n+  handleRetry,\n+  handleSkip,\n+  handleNodeInstanceRetrigger,\n+  setTitle\n+} from '../../../utils/Utils';\n import ProcessInstance = GraphQL.ProcessInstance;\n+import ProcessListModal from '../../Atoms/ProcessListModal/ProcessListModal';\n \n export interface IOwnProps {\n   data: Pick<\n     ProcessInstance,\n     'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n   >;\n-  setModalTitle: (modalTitle: string) => void;\n-  setTitleType: (titleType: string) => void;\n-  setModalContent: (modalContent: string) => void;\n-  handleSkipModalToggle: () => void;\n-  handleRetryModalToggle: () => void;\n }\n \n-const ProcessDetailsTimeline: React.FC<IOwnProps> = ({\n-  data,\n-  setModalTitle,\n-  setModalContent,\n-  setTitleType,\n-  handleRetryModalToggle,\n-  handleSkipModalToggle\n-}) => {\n-  const [isKebabOpen, setIsKebabOpen] = useState(false);\n-  const dropdownItems = [\n-    <DropdownItem\n-      key=\"retry\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleRetry(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleRetryModalToggle\n-        )\n-      }\n-    >\n-      Retry\n-    </DropdownItem>,\n-    <DropdownItem\n-      key=\"skip\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleSkip(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleSkipModalToggle\n-        )\n-      }\n-    >\n-      Skip\n-    </DropdownItem>\n-  ];\n+const ProcessDetailsTimeline: React.FC<IOwnProps> = ({ data }) => {\n+  const [nodeObject, setNodeObject] = useState({});\n+  const [kebabOpenArray, setKebabOpenArray] = useState([]);\n+  const [modalTitle, setModalTitle] = useState<string>('');\n+  const [titleType, setTitleType] = useState<string>('');\n+  const [modalContent, setModalContent] = useState<string>('');\n+  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n+  const ignoredNodeTypes = ['Join', 'Split', 'EndNode'];\n+\n+  const onKebabToggle = (isOpen: boolean, node, id) => {\n+    setNodeObject(node);\n+    if (isOpen) {\n+      setKebabOpenArray([...kebabOpenArray, id]);\n+    } else {\n+      const tempKebabArray = [...kebabOpenArray];", "originalCommit": "dea4c4d98d782cd00a2dc6e93bfe643b37beff22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2NDE2Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447764162", "bodyText": "@AjayJagan ^", "author": "cristianonicolai", "createdAt": "2020-06-30T15:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzOTgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMjE3Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447802176", "bodyText": "reused the function :)", "author": "AjayJagan", "createdAt": "2020-06-30T16:07:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzOTgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0NDcxOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447444719", "bodyText": "same here, would keep onSuccessAction as simple function and onFailureAction with a message string to be returned.", "author": "cristianonicolai", "createdAt": "2020-06-30T06:40:35Z", "path": "ui-packages/packages/management-console/src/components/Atoms/ErrorPopover/ErrorPopover.tsx", "diffHunk": "@@ -9,19 +9,13 @@ import { GraphQL } from '@kogito-apps/common';\n import ProcessInstance = GraphQL.ProcessInstance;\n interface IOwnProps {\n   processInstanceData: ProcessInstance;\n-  setModalTitle: (modalTitle: string) => void;\n-  setTitleType: (titleType: string) => void;\n-  setModalContent: (modalContent: string) => void;\n-  handleRetryModalToggle: () => void;\n-  handleSkipModalToggle: () => void;\n+  onSuccessAction: (title: string, content: string) => void;", "originalCommit": "dea4c4d98d782cd00a2dc6e93bfe643b37beff22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUyODM3MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447528371", "bodyText": "@cristianonicolai - so do we need to have something like this for failure 'The node confirm travel failed to retirgger', or the real error message itself which looks something like - 'no such node found in the process instance'(checked using the swagger)", "author": "AjayJagan", "createdAt": "2020-06-30T09:02:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0NDcxOQ=="}], "type": "inlineReview"}, {"oid": "739e6e3ec70a10bcd02c9a1e29b1c1cd1814cca7", "url": "https://github.com/kiegroup/kogito-apps/commit/739e6e3ec70a10bcd02c9a1e29b1c1cd1814cca7", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-06-30T13:12:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2NTUyMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447765522", "bodyText": "need to pass message here?", "author": "cristianonicolai", "createdAt": "2020-06-30T15:17:02Z", "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -182,25 +151,23 @@ export const handleAbort = (\n     });\n };\n \n-export const isModalOpen = (\n-  modalTitle,\n-  isSkipModalOpen,\n-  isRetryModalOpen\n-): boolean => {\n-  if (modalTitle === 'Skip operation') {\n-    return isSkipModalOpen;\n-  } else if (modalTitle === 'Retry operation') {\n-    return isRetryModalOpen;\n-  }\n-};\n-export const modalToggle = (\n-  modalTitle,\n-  handleSkipModalToggle,\n-  handleRetryModalToggle\n-): (() => void) => {\n-  if (modalTitle === 'Skip operation') {\n-    return handleSkipModalToggle;\n-  } else if (modalTitle === 'Retry operation') {\n-    return handleRetryModalToggle;\n-  }\n+export const handleNodeInstanceRetrigger = (\n+  processInstanceData: Pick<\n+    ProcessInstance,\n+    'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n+  >,\n+  nodeObject: Pick<GraphQL.NodeInstance, 'id'>,\n+  onRetriggerSuccess,\n+  onRetriggerFailure\n+) => {\n+  axios\n+    .post(\n+      `${processInstanceData.serviceUrl}/management/processes/${processInstanceData.processId}/instances/${processInstanceData.id}/nodeInstances/${nodeObject.id}`\n+    )\n+    .then(() => {\n+      onRetriggerSuccess();\n+    })\n+    .catch(() => {\n+      onRetriggerFailure();", "originalCommit": "739e6e3ec70a10bcd02c9a1e29b1c1cd1814cca7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3Njg0Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447776846", "bodyText": "we show the name of the node that has failed to retrigger.. is that fine or should I get the error message and show it in the modal", "author": "AjayJagan", "createdAt": "2020-06-30T15:31:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2NTUyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2NTY3MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447765671", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              nodeObject: Pick<GraphQL.NodeInstance, 'id'>,\n          \n          \n            \n              node: Pick<GraphQL.NodeInstance, 'id'>,", "author": "cristianonicolai", "createdAt": "2020-06-30T15:17:17Z", "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -182,25 +151,23 @@ export const handleAbort = (\n     });\n };\n \n-export const isModalOpen = (\n-  modalTitle,\n-  isSkipModalOpen,\n-  isRetryModalOpen\n-): boolean => {\n-  if (modalTitle === 'Skip operation') {\n-    return isSkipModalOpen;\n-  } else if (modalTitle === 'Retry operation') {\n-    return isRetryModalOpen;\n-  }\n-};\n-export const modalToggle = (\n-  modalTitle,\n-  handleSkipModalToggle,\n-  handleRetryModalToggle\n-): (() => void) => {\n-  if (modalTitle === 'Skip operation') {\n-    return handleSkipModalToggle;\n-  } else if (modalTitle === 'Retry operation') {\n-    return handleRetryModalToggle;\n-  }\n+export const handleNodeInstanceRetrigger = (\n+  processInstanceData: Pick<\n+    ProcessInstance,\n+    'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n+  >,\n+  nodeObject: Pick<GraphQL.NodeInstance, 'id'>,", "originalCommit": "739e6e3ec70a10bcd02c9a1e29b1c1cd1814cca7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2NTc2Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447765766", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              processInstanceData: Pick<\n          \n          \n            \n              processInstance: Pick<", "author": "cristianonicolai", "createdAt": "2020-06-30T15:17:23Z", "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -182,25 +151,23 @@ export const handleAbort = (\n     });\n };\n \n-export const isModalOpen = (\n-  modalTitle,\n-  isSkipModalOpen,\n-  isRetryModalOpen\n-): boolean => {\n-  if (modalTitle === 'Skip operation') {\n-    return isSkipModalOpen;\n-  } else if (modalTitle === 'Retry operation') {\n-    return isRetryModalOpen;\n-  }\n-};\n-export const modalToggle = (\n-  modalTitle,\n-  handleSkipModalToggle,\n-  handleRetryModalToggle\n-): (() => void) => {\n-  if (modalTitle === 'Skip operation') {\n-    return handleSkipModalToggle;\n-  } else if (modalTitle === 'Retry operation') {\n-    return handleRetryModalToggle;\n-  }\n+export const handleNodeInstanceRetrigger = (\n+  processInstanceData: Pick<", "originalCommit": "739e6e3ec70a10bcd02c9a1e29b1c1cd1814cca7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMjUzNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447802534", "bodyText": "changed", "author": "AjayJagan", "createdAt": "2020-06-30T16:07:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2NTc2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2NjgwOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447766808", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const onRetriggerFailure = (): void => {\n          \n          \n            \n              const onRetriggerFailure = (name: String): void => {", "author": "cristianonicolai", "createdAt": "2020-06-30T15:18:49Z", "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/ProcessDetailsTimeline.tsx", "diffHunk": "@@ -24,72 +24,190 @@ import {\n import React, { useState } from 'react';\n import './ProcessDetailsTimeline.css';\n import { GraphQL } from '@kogito-apps/common';\n-import { handleRetry, handleSkip } from '../../../utils/Utils';\n+import {\n+  handleRetry,\n+  handleSkip,\n+  handleNodeInstanceRetrigger,\n+  setTitle\n+} from '../../../utils/Utils';\n import ProcessInstance = GraphQL.ProcessInstance;\n+import ProcessListModal from '../../Atoms/ProcessListModal/ProcessListModal';\n \n export interface IOwnProps {\n   data: Pick<\n     ProcessInstance,\n     'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n   >;\n-  setModalTitle: (modalTitle: string) => void;\n-  setTitleType: (titleType: string) => void;\n-  setModalContent: (modalContent: string) => void;\n-  handleSkipModalToggle: () => void;\n-  handleRetryModalToggle: () => void;\n }\n \n-const ProcessDetailsTimeline: React.FC<IOwnProps> = ({\n-  data,\n-  setModalTitle,\n-  setModalContent,\n-  setTitleType,\n-  handleRetryModalToggle,\n-  handleSkipModalToggle\n-}) => {\n-  const [isKebabOpen, setIsKebabOpen] = useState(false);\n-  const dropdownItems = [\n-    <DropdownItem\n-      key=\"retry\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleRetry(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleRetryModalToggle\n-        )\n-      }\n-    >\n-      Retry\n-    </DropdownItem>,\n-    <DropdownItem\n-      key=\"skip\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleSkip(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleSkipModalToggle\n-        )\n-      }\n-    >\n-      Skip\n-    </DropdownItem>\n-  ];\n-\n-  const onKebabToggle = isOpen => {\n-    setIsKebabOpen(isOpen);\n+const ProcessDetailsTimeline: React.FC<IOwnProps> = ({ data }) => {\n+  const [nodeObject, setNodeObject] = useState<GraphQL.NodeInstance>();\n+  const [kebabOpenArray, setKebabOpenArray] = useState([]);\n+  const [modalTitle, setModalTitle] = useState<string>('');\n+  const [titleType, setTitleType] = useState<string>('');\n+  const [modalContent, setModalContent] = useState<string>('');\n+  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n+  const ignoredNodeTypes = ['Join', 'Split', 'EndNode'];\n+\n+  const onKebabToggle = (isOpen: boolean, node, id) => {\n+    setNodeObject(node);\n+    if (isOpen) {\n+      setKebabOpenArray([...kebabOpenArray, id]);\n+    } else {\n+      const tempKebabArray = [...kebabOpenArray];\n+      const index = tempKebabArray.indexOf(id);\n+      tempKebabArray.splice(index, 1);\n+      setKebabOpenArray(tempKebabArray);\n+    }\n+  };\n+\n+  const onDropdownSelect = id => {\n+    const tempKebabArray = [...kebabOpenArray];\n+    const index = tempKebabArray.indexOf(id);\n+    tempKebabArray.splice(index, 1);\n+    setKebabOpenArray(tempKebabArray);\n+  };\n+\n+  const handleModalToggle = () => {\n+    setIsModalOpen(!isModalOpen);\n+  };\n+\n+  const onSuccessAction = () => {\n+    setTitleType('success');\n+    handleModalToggle();\n+  };\n+\n+  const onFailureAction = () => {\n+    setTitleType('failure');\n+    handleModalToggle();\n+  };\n+\n+  const onRetriggerSuccess = (): void => {\n+    setModalTitle('Node retrigger process');\n+    setModalContent(`The node ${nodeObject.name} was successfully retriggered`);\n+    onSuccessAction();\n+  };\n+\n+  const onRetriggerFailure = (): void => {", "originalCommit": "739e6e3ec70a10bcd02c9a1e29b1c1cd1814cca7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMjYzNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447802635", "bodyText": "changed", "author": "AjayJagan", "createdAt": "2020-06-30T16:07:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2NjgwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2NzAwMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447767003", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const onRetriggerSuccess = (): void => {\n          \n          \n            \n              const onRetriggerSuccess = (name: String): void => {", "author": "cristianonicolai", "createdAt": "2020-06-30T15:19:06Z", "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/ProcessDetailsTimeline.tsx", "diffHunk": "@@ -24,72 +24,190 @@ import {\n import React, { useState } from 'react';\n import './ProcessDetailsTimeline.css';\n import { GraphQL } from '@kogito-apps/common';\n-import { handleRetry, handleSkip } from '../../../utils/Utils';\n+import {\n+  handleRetry,\n+  handleSkip,\n+  handleNodeInstanceRetrigger,\n+  setTitle\n+} from '../../../utils/Utils';\n import ProcessInstance = GraphQL.ProcessInstance;\n+import ProcessListModal from '../../Atoms/ProcessListModal/ProcessListModal';\n \n export interface IOwnProps {\n   data: Pick<\n     ProcessInstance,\n     'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n   >;\n-  setModalTitle: (modalTitle: string) => void;\n-  setTitleType: (titleType: string) => void;\n-  setModalContent: (modalContent: string) => void;\n-  handleSkipModalToggle: () => void;\n-  handleRetryModalToggle: () => void;\n }\n \n-const ProcessDetailsTimeline: React.FC<IOwnProps> = ({\n-  data,\n-  setModalTitle,\n-  setModalContent,\n-  setTitleType,\n-  handleRetryModalToggle,\n-  handleSkipModalToggle\n-}) => {\n-  const [isKebabOpen, setIsKebabOpen] = useState(false);\n-  const dropdownItems = [\n-    <DropdownItem\n-      key=\"retry\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleRetry(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleRetryModalToggle\n-        )\n-      }\n-    >\n-      Retry\n-    </DropdownItem>,\n-    <DropdownItem\n-      key=\"skip\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleSkip(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleSkipModalToggle\n-        )\n-      }\n-    >\n-      Skip\n-    </DropdownItem>\n-  ];\n-\n-  const onKebabToggle = isOpen => {\n-    setIsKebabOpen(isOpen);\n+const ProcessDetailsTimeline: React.FC<IOwnProps> = ({ data }) => {\n+  const [nodeObject, setNodeObject] = useState<GraphQL.NodeInstance>();\n+  const [kebabOpenArray, setKebabOpenArray] = useState([]);\n+  const [modalTitle, setModalTitle] = useState<string>('');\n+  const [titleType, setTitleType] = useState<string>('');\n+  const [modalContent, setModalContent] = useState<string>('');\n+  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n+  const ignoredNodeTypes = ['Join', 'Split', 'EndNode'];\n+\n+  const onKebabToggle = (isOpen: boolean, node, id) => {\n+    setNodeObject(node);\n+    if (isOpen) {\n+      setKebabOpenArray([...kebabOpenArray, id]);\n+    } else {\n+      const tempKebabArray = [...kebabOpenArray];\n+      const index = tempKebabArray.indexOf(id);\n+      tempKebabArray.splice(index, 1);\n+      setKebabOpenArray(tempKebabArray);\n+    }\n+  };\n+\n+  const onDropdownSelect = id => {\n+    const tempKebabArray = [...kebabOpenArray];\n+    const index = tempKebabArray.indexOf(id);\n+    tempKebabArray.splice(index, 1);\n+    setKebabOpenArray(tempKebabArray);\n+  };\n+\n+  const handleModalToggle = () => {\n+    setIsModalOpen(!isModalOpen);\n+  };\n+\n+  const onSuccessAction = () => {\n+    setTitleType('success');\n+    handleModalToggle();\n+  };\n+\n+  const onFailureAction = () => {\n+    setTitleType('failure');\n+    handleModalToggle();\n+  };\n+\n+  const onRetriggerSuccess = (): void => {", "originalCommit": "739e6e3ec70a10bcd02c9a1e29b1c1cd1814cca7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMjcwNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447802704", "bodyText": "changed", "author": "AjayJagan", "createdAt": "2020-06-30T16:07:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2NzAwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2NzM2OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447767368", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          onRetriggerSuccess,\n          \n          \n            \n                          () => onRetriggerSuccess(node.name),", "author": "cristianonicolai", "createdAt": "2020-06-30T15:19:38Z", "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/ProcessDetailsTimeline.tsx", "diffHunk": "@@ -24,72 +24,190 @@ import {\n import React, { useState } from 'react';\n import './ProcessDetailsTimeline.css';\n import { GraphQL } from '@kogito-apps/common';\n-import { handleRetry, handleSkip } from '../../../utils/Utils';\n+import {\n+  handleRetry,\n+  handleSkip,\n+  handleNodeInstanceRetrigger,\n+  setTitle\n+} from '../../../utils/Utils';\n import ProcessInstance = GraphQL.ProcessInstance;\n+import ProcessListModal from '../../Atoms/ProcessListModal/ProcessListModal';\n \n export interface IOwnProps {\n   data: Pick<\n     ProcessInstance,\n     'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n   >;\n-  setModalTitle: (modalTitle: string) => void;\n-  setTitleType: (titleType: string) => void;\n-  setModalContent: (modalContent: string) => void;\n-  handleSkipModalToggle: () => void;\n-  handleRetryModalToggle: () => void;\n }\n \n-const ProcessDetailsTimeline: React.FC<IOwnProps> = ({\n-  data,\n-  setModalTitle,\n-  setModalContent,\n-  setTitleType,\n-  handleRetryModalToggle,\n-  handleSkipModalToggle\n-}) => {\n-  const [isKebabOpen, setIsKebabOpen] = useState(false);\n-  const dropdownItems = [\n-    <DropdownItem\n-      key=\"retry\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleRetry(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleRetryModalToggle\n-        )\n-      }\n-    >\n-      Retry\n-    </DropdownItem>,\n-    <DropdownItem\n-      key=\"skip\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleSkip(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleSkipModalToggle\n-        )\n-      }\n-    >\n-      Skip\n-    </DropdownItem>\n-  ];\n-\n-  const onKebabToggle = isOpen => {\n-    setIsKebabOpen(isOpen);\n+const ProcessDetailsTimeline: React.FC<IOwnProps> = ({ data }) => {\n+  const [nodeObject, setNodeObject] = useState<GraphQL.NodeInstance>();\n+  const [kebabOpenArray, setKebabOpenArray] = useState([]);\n+  const [modalTitle, setModalTitle] = useState<string>('');\n+  const [titleType, setTitleType] = useState<string>('');\n+  const [modalContent, setModalContent] = useState<string>('');\n+  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n+  const ignoredNodeTypes = ['Join', 'Split', 'EndNode'];\n+\n+  const onKebabToggle = (isOpen: boolean, node, id) => {\n+    setNodeObject(node);\n+    if (isOpen) {\n+      setKebabOpenArray([...kebabOpenArray, id]);\n+    } else {\n+      const tempKebabArray = [...kebabOpenArray];\n+      const index = tempKebabArray.indexOf(id);\n+      tempKebabArray.splice(index, 1);\n+      setKebabOpenArray(tempKebabArray);\n+    }\n+  };\n+\n+  const onDropdownSelect = id => {\n+    const tempKebabArray = [...kebabOpenArray];\n+    const index = tempKebabArray.indexOf(id);\n+    tempKebabArray.splice(index, 1);\n+    setKebabOpenArray(tempKebabArray);\n+  };\n+\n+  const handleModalToggle = () => {\n+    setIsModalOpen(!isModalOpen);\n+  };\n+\n+  const onSuccessAction = () => {\n+    setTitleType('success');\n+    handleModalToggle();\n+  };\n+\n+  const onFailureAction = () => {\n+    setTitleType('failure');\n+    handleModalToggle();\n+  };\n+\n+  const onRetriggerSuccess = (): void => {\n+    setModalTitle('Node retrigger process');\n+    setModalContent(`The node ${nodeObject.name} was successfully retriggered`);\n+    onSuccessAction();\n+  };\n+\n+  const onRetriggerFailure = (): void => {\n+    setModalTitle('Node retrigger process');\n+    setModalContent(`The node ${nodeObject.name} failed to retrigger`);\n+    onFailureAction();\n+  };\n+\n+  const onRetrySuccess = (): void => {\n+    setModalTitle('Retry operation');\n+    setModalContent(\n+      'Process execution has successfully re-executed node which was in error state.'\n+    );\n+    onSuccessAction();\n+  };\n+\n+  const onRetryFailure = (errorMessage: string): void => {\n+    setModalTitle('Retry operation');\n+    setModalContent(\n+      `Process execution failed to re-execute node which is in error state. Message: ${errorMessage}`\n+    );\n+    onFailureAction();\n+  };\n+\n+  const onSkipSuccess = (): void => {\n+    setModalTitle('Skip operation');\n+    setModalContent(\n+      'Process execution has successfully skipped node which was in error state.'\n+    );\n+    onSuccessAction();\n+  };\n+\n+  const onSkipFailure = (errorMessage: string): void => {\n+    setModalTitle('Retry operation');\n+    setModalContent(\n+      `Process execution failed to skip node which is in error state. Message: ${errorMessage}`\n+    );\n+    onFailureAction();\n   };\n \n-  const onDropdownSelect = event => {\n-    setIsKebabOpen(!isKebabOpen);\n+  const dropdownItems = (processInstanceData, node) => {\n+    if (\n+      processInstanceData.error &&\n+      node.definitionId === processInstanceData.error.nodeDefinitionId\n+    ) {\n+      return [\n+        <DropdownItem\n+          key=\"retry\"\n+          component=\"button\"\n+          onClick={() =>\n+            handleRetry(processInstanceData, onRetrySuccess, onRetryFailure)\n+          }\n+        >\n+          Retry\n+        </DropdownItem>,\n+        <DropdownItem\n+          key=\"skip\"\n+          component=\"button\"\n+          onClick={() =>\n+            handleSkip(processInstanceData, onSkipSuccess, onSkipFailure)\n+          }\n+        >\n+          Skip\n+        </DropdownItem>\n+      ];\n+    } else if (node.exit === null && !ignoredNodeTypes.includes(node.type)) {\n+      return [\n+        <DropdownItem\n+          key=\"retrigger\"\n+          component=\"button\"\n+          onClick={() =>\n+            handleNodeInstanceRetrigger(\n+              data,\n+              node,\n+              onRetriggerSuccess,", "originalCommit": "739e6e3ec70a10bcd02c9a1e29b1c1cd1814cca7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMjc4MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447802780", "bodyText": "changed", "author": "AjayJagan", "createdAt": "2020-06-30T16:07:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2NzM2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2Nzc3Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447767777", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          onRetriggerFailure\n          \n          \n            \n                          () => onRetriggerFailurenode.name)", "author": "cristianonicolai", "createdAt": "2020-06-30T15:20:08Z", "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/ProcessDetailsTimeline.tsx", "diffHunk": "@@ -24,72 +24,190 @@ import {\n import React, { useState } from 'react';\n import './ProcessDetailsTimeline.css';\n import { GraphQL } from '@kogito-apps/common';\n-import { handleRetry, handleSkip } from '../../../utils/Utils';\n+import {\n+  handleRetry,\n+  handleSkip,\n+  handleNodeInstanceRetrigger,\n+  setTitle\n+} from '../../../utils/Utils';\n import ProcessInstance = GraphQL.ProcessInstance;\n+import ProcessListModal from '../../Atoms/ProcessListModal/ProcessListModal';\n \n export interface IOwnProps {\n   data: Pick<\n     ProcessInstance,\n     'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n   >;\n-  setModalTitle: (modalTitle: string) => void;\n-  setTitleType: (titleType: string) => void;\n-  setModalContent: (modalContent: string) => void;\n-  handleSkipModalToggle: () => void;\n-  handleRetryModalToggle: () => void;\n }\n \n-const ProcessDetailsTimeline: React.FC<IOwnProps> = ({\n-  data,\n-  setModalTitle,\n-  setModalContent,\n-  setTitleType,\n-  handleRetryModalToggle,\n-  handleSkipModalToggle\n-}) => {\n-  const [isKebabOpen, setIsKebabOpen] = useState(false);\n-  const dropdownItems = [\n-    <DropdownItem\n-      key=\"retry\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleRetry(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleRetryModalToggle\n-        )\n-      }\n-    >\n-      Retry\n-    </DropdownItem>,\n-    <DropdownItem\n-      key=\"skip\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleSkip(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleSkipModalToggle\n-        )\n-      }\n-    >\n-      Skip\n-    </DropdownItem>\n-  ];\n-\n-  const onKebabToggle = isOpen => {\n-    setIsKebabOpen(isOpen);\n+const ProcessDetailsTimeline: React.FC<IOwnProps> = ({ data }) => {\n+  const [nodeObject, setNodeObject] = useState<GraphQL.NodeInstance>();\n+  const [kebabOpenArray, setKebabOpenArray] = useState([]);\n+  const [modalTitle, setModalTitle] = useState<string>('');\n+  const [titleType, setTitleType] = useState<string>('');\n+  const [modalContent, setModalContent] = useState<string>('');\n+  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n+  const ignoredNodeTypes = ['Join', 'Split', 'EndNode'];\n+\n+  const onKebabToggle = (isOpen: boolean, node, id) => {\n+    setNodeObject(node);\n+    if (isOpen) {\n+      setKebabOpenArray([...kebabOpenArray, id]);\n+    } else {\n+      const tempKebabArray = [...kebabOpenArray];\n+      const index = tempKebabArray.indexOf(id);\n+      tempKebabArray.splice(index, 1);\n+      setKebabOpenArray(tempKebabArray);\n+    }\n+  };\n+\n+  const onDropdownSelect = id => {\n+    const tempKebabArray = [...kebabOpenArray];\n+    const index = tempKebabArray.indexOf(id);\n+    tempKebabArray.splice(index, 1);\n+    setKebabOpenArray(tempKebabArray);\n+  };\n+\n+  const handleModalToggle = () => {\n+    setIsModalOpen(!isModalOpen);\n+  };\n+\n+  const onSuccessAction = () => {\n+    setTitleType('success');\n+    handleModalToggle();\n+  };\n+\n+  const onFailureAction = () => {\n+    setTitleType('failure');\n+    handleModalToggle();\n+  };\n+\n+  const onRetriggerSuccess = (): void => {\n+    setModalTitle('Node retrigger process');\n+    setModalContent(`The node ${nodeObject.name} was successfully retriggered`);\n+    onSuccessAction();\n+  };\n+\n+  const onRetriggerFailure = (): void => {\n+    setModalTitle('Node retrigger process');\n+    setModalContent(`The node ${nodeObject.name} failed to retrigger`);\n+    onFailureAction();\n+  };\n+\n+  const onRetrySuccess = (): void => {\n+    setModalTitle('Retry operation');\n+    setModalContent(\n+      'Process execution has successfully re-executed node which was in error state.'\n+    );\n+    onSuccessAction();\n+  };\n+\n+  const onRetryFailure = (errorMessage: string): void => {\n+    setModalTitle('Retry operation');\n+    setModalContent(\n+      `Process execution failed to re-execute node which is in error state. Message: ${errorMessage}`\n+    );\n+    onFailureAction();\n+  };\n+\n+  const onSkipSuccess = (): void => {\n+    setModalTitle('Skip operation');\n+    setModalContent(\n+      'Process execution has successfully skipped node which was in error state.'\n+    );\n+    onSuccessAction();\n+  };\n+\n+  const onSkipFailure = (errorMessage: string): void => {\n+    setModalTitle('Retry operation');\n+    setModalContent(\n+      `Process execution failed to skip node which is in error state. Message: ${errorMessage}`\n+    );\n+    onFailureAction();\n   };\n \n-  const onDropdownSelect = event => {\n-    setIsKebabOpen(!isKebabOpen);\n+  const dropdownItems = (processInstanceData, node) => {\n+    if (\n+      processInstanceData.error &&\n+      node.definitionId === processInstanceData.error.nodeDefinitionId\n+    ) {\n+      return [\n+        <DropdownItem\n+          key=\"retry\"\n+          component=\"button\"\n+          onClick={() =>\n+            handleRetry(processInstanceData, onRetrySuccess, onRetryFailure)\n+          }\n+        >\n+          Retry\n+        </DropdownItem>,\n+        <DropdownItem\n+          key=\"skip\"\n+          component=\"button\"\n+          onClick={() =>\n+            handleSkip(processInstanceData, onSkipSuccess, onSkipFailure)\n+          }\n+        >\n+          Skip\n+        </DropdownItem>\n+      ];\n+    } else if (node.exit === null && !ignoredNodeTypes.includes(node.type)) {\n+      return [\n+        <DropdownItem\n+          key=\"retrigger\"\n+          component=\"button\"\n+          onClick={() =>\n+            handleNodeInstanceRetrigger(\n+              data,\n+              node,\n+              onRetriggerSuccess,\n+              onRetriggerFailure", "originalCommit": "739e6e3ec70a10bcd02c9a1e29b1c1cd1814cca7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMjgzOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447802839", "bodyText": "changed", "author": "AjayJagan", "createdAt": "2020-06-30T16:08:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2Nzc3Nw=="}], "type": "inlineReview"}, {"oid": "ab536664e47253a6e67816bece0bd22867cfe020", "url": "https://github.com/kiegroup/kogito-apps/commit/ab536664e47253a6e67816bece0bd22867cfe020", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-06-30T16:05:21Z", "type": "forcePushed"}, {"oid": "4d4cd60c4ade3acf8df13df55b8a213c74f584ba", "url": "https://github.com/kiegroup/kogito-apps/commit/4d4cd60c4ade3acf8df13df55b8a213c74f584ba", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-07-01T04:17:40Z", "type": "forcePushed"}, {"oid": "3ea06c9a6a185f86583ee81e57199c46f6313001", "url": "https://github.com/kiegroup/kogito-apps/commit/3ea06c9a6a185f86583ee81e57199c46f6313001", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-07-01T10:04:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI2MzMwMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448263301", "bodyText": "We could reduce code repetition even more:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const onSuccessAction = (title: string, content: string): void => {\n          \n          \n            \n                setTitleType('success');\n          \n          \n            \n                setModalTitle(title);\n          \n          \n            \n                setModalContent(content);\n          \n          \n            \n                handleModalToggle();\n          \n          \n            \n              };\n          \n          \n            \n            \n          \n          \n            \n              const onFailureAction = (title: string, content: string): void => {\n          \n          \n            \n                setTitleType('failure');\n          \n          \n            \n                setModalTitle(title);\n          \n          \n            \n                setModalContent(content);\n          \n          \n            \n                handleModalToggle();\n          \n          \n            \n              };\n          \n          \n            \n              const onAction = (type: string, title: string, content: string): void => {\n          \n          \n            \n                setTitleType(type);\n          \n          \n            \n                setModalTitle(title);\n          \n          \n            \n                setModalContent(content);\n          \n          \n            \n                handleModalToggle();\n          \n          \n            \n              }\n          \n          \n            \n              const onSuccessAction = (title: string, content: string): void => {\n          \n          \n            \n                onAction('success', title, content)\n          \n          \n            \n              };\n          \n          \n            \n            \n          \n          \n            \n              const onFailureAction = (title: string, content: string): void => {\n          \n          \n            \n                onAction('failure', title, content)\n          \n          \n            \n              };", "author": "jstastny-cz", "createdAt": "2020-07-01T10:15:44Z", "path": "ui-packages/packages/management-console/src/components/Molecules/ProcessListTableItems/ProcessListTableItems.tsx", "diffHunk": "@@ -103,7 +97,46 @@ const ProcessListTableItems: React.FC<IOwnProps> = ({\n   const onToggle = _isOpen => {\n     setisOpen(_isOpen);\n   };\n+  const onSuccessAction = (title: string, content: string): void => {\n+    setTitleType('success');\n+    setModalTitle(title);\n+    setModalContent(content);\n+    handleModalToggle();\n+  };\n+\n+  const onFailureAction = (title: string, content: string): void => {\n+    setTitleType('failure');\n+    setModalTitle(title);\n+    setModalContent(content);\n+    handleModalToggle();\n+  };", "originalCommit": "3ea06c9a6a185f86583ee81e57199c46f6313001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM3MTA5Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448371096", "bodyText": "changed as requested :)", "author": "AjayJagan", "createdAt": "2020-07-01T13:41:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI2MzMwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI2NjYyMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448266620", "bodyText": "Is this exactly the same as in ProcessListTableItems ? Can we extract the dropdownitems together with the actions to a separate component/s?\nConceptually in following lines:\nMove dropdowns and their actions to a separate file, let's call Actions for now. Resulting would be: Actions.SkipDropdownItem, Actions.onSkipSuccess(), Actions.onSkipFailure(), Actions.RetryDropdownItem ...\nthen in const dropdownItems below we would be adding return [ <Actions.RetryDropdownItem/>, <Actions.SkipDropdownItem/> ] and the on-functions would be hidden in Actions.\nBut we would need probably to pass the functions to alter the modal from there ... or would moving the ProcessListModal to the new file help there? to have another component <Actions.ProcessListModal /> ...\nI mean at least as a follow-up action ... wdyt?", "author": "jstastny-cz", "createdAt": "2020-07-01T10:22:17Z", "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/ProcessDetailsTimeline.tsx", "diffHunk": "@@ -24,72 +24,187 @@ import {\n import React, { useState } from 'react';\n import './ProcessDetailsTimeline.css';\n import { GraphQL } from '@kogito-apps/common';\n-import { handleRetry, handleSkip } from '../../../utils/Utils';\n+import {\n+  handleRetry,\n+  handleSkip,\n+  handleNodeInstanceRetrigger,\n+  setTitle\n+} from '../../../utils/Utils';\n import ProcessInstance = GraphQL.ProcessInstance;\n+import ProcessListModal from '../../Atoms/ProcessListModal/ProcessListModal';\n \n export interface IOwnProps {\n   data: Pick<\n     ProcessInstance,\n     'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n   >;\n-  setModalTitle: (modalTitle: string) => void;\n-  setTitleType: (titleType: string) => void;\n-  setModalContent: (modalContent: string) => void;\n-  handleSkipModalToggle: () => void;\n-  handleRetryModalToggle: () => void;\n }\n \n-const ProcessDetailsTimeline: React.FC<IOwnProps> = ({\n-  data,\n-  setModalTitle,\n-  setModalContent,\n-  setTitleType,\n-  handleRetryModalToggle,\n-  handleSkipModalToggle\n-}) => {\n-  const [isKebabOpen, setIsKebabOpen] = useState(false);\n-  const dropdownItems = [\n-    <DropdownItem\n-      key=\"retry\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleRetry(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleRetryModalToggle\n-        )\n-      }\n-    >\n-      Retry\n-    </DropdownItem>,\n-    <DropdownItem\n-      key=\"skip\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleSkip(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleSkipModalToggle\n-        )\n-      }\n-    >\n-      Skip\n-    </DropdownItem>\n-  ];\n-\n-  const onKebabToggle = isOpen => {\n-    setIsKebabOpen(isOpen);\n+const ProcessDetailsTimeline: React.FC<IOwnProps> = ({ data }) => {\n+  const [kebabOpenArray, setKebabOpenArray] = useState([]);\n+  const [modalTitle, setModalTitle] = useState<string>('');\n+  const [titleType, setTitleType] = useState<string>('');\n+  const [modalContent, setModalContent] = useState<string>('');\n+  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n+  const ignoredNodeTypes = ['Join', 'Split', 'EndNode'];\n+\n+  const onKebabToggle = (isOpen: boolean, id) => {\n+    if (isOpen) {\n+      setKebabOpenArray([...kebabOpenArray, id]);\n+    } else {\n+      onDropdownSelect(id);\n+    }\n+  };\n+\n+  const onDropdownSelect = id => {\n+    const tempKebabArray = [...kebabOpenArray];\n+    const index = tempKebabArray.indexOf(id);\n+    tempKebabArray.splice(index, 1);\n+    setKebabOpenArray(tempKebabArray);\n+  };\n+\n+  const handleModalToggle = () => {\n+    setIsModalOpen(!isModalOpen);\n+  };\n+\n+  const onSuccessAction = (title: string, content: string): void => {\n+    setTitleType('success');\n+    setModalTitle(title);\n+    setModalContent(content);\n+    handleModalToggle();\n+  };\n+\n+  const onFailureAction = (title: string, content: string): void => {\n+    setTitleType('failure');\n+    setModalTitle(title);\n+    setModalContent(content);\n+    handleModalToggle();\n+  };\n+\n+  const onRetriggerSuccess = (name: string): void => {\n+    onSuccessAction(\n+      'Node retrigger process',\n+      `The node ${name} was successfully retriggered`\n+    );\n+  };\n+\n+  const onRetriggerFailure = (name: string): void => {\n+    onFailureAction(\n+      'Node retrigger process',\n+      `The node ${name} failed to retrigger`\n+    );\n+  };\n+\n+  const onRetrySuccess = (): void => {\n+    onSuccessAction(\n+      'Retry operation',\n+      'Process execution has successfully re-executed node which was in error state.'\n+    );\n+  };\n+\n+  const onRetryFailure = (errorMessage: string): void => {\n+    onFailureAction(\n+      'Retry operation',\n+      `Process execution failed to re-execute node which is in error state. Message: ${errorMessage}`\n+    );\n+  };\n+\n+  const onSkipSuccess = (): void => {\n+    onSuccessAction(\n+      'Skip operation',\n+      'Process execution has successfully skipped node which was in error state.'\n+    );\n+  };\n+\n+  const onSkipFailure = (errorMessage: string): void => {\n+    onFailureAction(\n+      'Retry operation',\n+      `Process execution failed to skip node which is in error state. Message: ${errorMessage}`\n+    );", "originalCommit": "3ea06c9a6a185f86583ee81e57199c46f6313001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM2OTQzMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448369431", "bodyText": "yeah I had similar idea, it starts to become evident that we would need another component here for the actions.", "author": "cristianonicolai", "createdAt": "2020-07-01T13:38:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI2NjYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM3MDM1OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448370358", "bodyText": "so do you want me to go with the same PR?", "author": "AjayJagan", "createdAt": "2020-07-01T13:39:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI2NjYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM4NjQ4MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448386481", "bodyText": "This can be done as a follow up ..\nhere is the JIRA link for that -> https://issues.redhat.com/browse/KOGITO-2608", "author": "AjayJagan", "createdAt": "2020-07-01T14:04:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI2NjYyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwMjg0Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448302846", "bodyText": "can we add check for the result? probably checking if onRetriggerFailure() has been invoked ..... or check contents of the modal?", "author": "jstastny-cz", "createdAt": "2020-07-01T11:36:47Z", "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/tests/ProcessDetailsTimeline.test.tsx", "diffHunk": "@@ -133,37 +203,167 @@ describe('ProcessDetailsTimeline component tests', () => {\n     expect(wrapper).toMatchSnapshot();\n   });\n \n-  it('onSelect click test', () => {\n-    const wrapper = shallow(<ProcessDetailsTimeline {...props2} />);\n+  it('Snapshot testing for completed state', () => {\n+    const wrapper = shallow(<ProcessDetailsTimeline {...props3} />);\n+    expect(wrapper).toMatchSnapshot();\n+  });\n \n-    const event = {\n-      currentTarget: {}\n-    } as React.ChangeEvent<HTMLInputElement>;\n-    wrapper\n-      .find('#dropdown-kebab')\n-      .props()\n-      ['onSelect'](event);\n-    expect(wrapper.find('#dropdown-kebab').props()['isOpen']).toBeTruthy();\n+  it('onKebabToggle click test', async () => {\n+    let wrapper = mount(<ProcessDetailsTimeline {...props1} />);\n+    await act(async () => {\n+      wrapper\n+        .find(Dropdown)\n+        .at(0)\n+        .find(KebabToggle)\n+        .find('button')\n+        .simulate('click');\n+      await wait(0);\n+      wrapper = wrapper.update();\n+    });\n+    expect(\n+      wrapper\n+        .find(Dropdown)\n+        .at(0)\n+        .props()['isOpen']\n+    ).toBeTruthy();\n+    await act(async () => {\n+      wrapper\n+        .find(Dropdown)\n+        .at(0)\n+        .find(KebabToggle)\n+        .find('button')\n+        .simulate('click');\n+      await wait(0);\n+      wrapper = wrapper.update();\n+    });\n+    expect(\n+      wrapper\n+        .find(Dropdown)\n+        .at(0)\n+        .props()['isOpen']\n+    ).toBeFalsy();\n   });\n \n-  it('onToggle click test', () => {\n-    const wrapper = shallow(<ProcessDetailsTimeline {...props2} />);\n-    wrapper\n-      .find('#dropdown-kebab')\n-      .props()\n-      ['toggle']['props']['onToggle']();\n+  describe('handleSkip tests', () => {\n+    const handleSkipSpy = jest.spyOn(Utils, 'handleSkip');\n+    it('success test', async () => {\n+      mockedAxios.post.mockResolvedValue({});\n+      let wrapper = mount(<ProcessDetailsTimeline {...props1} />);\n+      await act(async () => {\n+        wrapper\n+          .find(Dropdown)\n+          .at(0)\n+          .find(KebabToggle)\n+          .find('button')\n+          .simulate('click');\n+        await wait(0);\n+        wrapper = wrapper.update();\n+        wrapper\n+          .find(DropdownItem)\n+          .at(1)\n+          .simulate('click');\n+      });\n+      expect(handleSkipSpy).toHaveBeenCalled();\n+    });\n+    it('failure', async () => {\n+      mockedAxios.post.mockRejectedValue({});\n+      let wrapper = mount(<ProcessDetailsTimeline {...props1} />);\n+      await act(async () => {\n+        wrapper\n+          .find(Dropdown)\n+          .at(0)\n+          .find(KebabToggle)\n+          .find('button')\n+          .simulate('click');\n+        await wait(0);\n+        wrapper = wrapper.update();\n+        wrapper\n+          .find(DropdownItem)\n+          .at(1)\n+          .simulate('click');\n+      });\n+      expect(handleSkipSpy).toHaveBeenCalled();\n+    });\n   });\n \n-  it('handle and handle retry click test', () => {\n-    const wrapper = shallow(<ProcessDetailsTimeline {...props2} />);\n+  describe('nodeInstanceRetrigger tests', () => {\n+    const handleNodeInstanceRetriggerSpy = jest.spyOn(\n+      Utils,\n+      'handleNodeInstanceRetrigger'\n+    );\n+    it('success test', async () => {\n+      mockedAxios.post.mockResolvedValue({});\n+      let wrapper = mount(<ProcessDetailsTimeline {...props1} />);\n+      await act(async () => {\n+        wrapper\n+          .find(Dropdown)\n+          .at(1)\n+          .find(KebabToggle)\n+          .find('button')\n+          .simulate('click');\n+        await wait(0);\n+        wrapper = wrapper.update();\n+        wrapper.find(DropdownItem).simulate('click');\n+      });\n+      expect(handleNodeInstanceRetriggerSpy).toHaveBeenCalled();\n+    });\n+    it('failure', async () => {\n+      mockedAxios.post.mockRejectedValue({});\n+      let wrapper = mount(<ProcessDetailsTimeline {...props1} />);\n+      await act(async () => {\n+        wrapper\n+          .find(Dropdown)\n+          .at(1)\n+          .find(KebabToggle)\n+          .find('button')\n+          .simulate('click');\n+        await wait(0);\n+        wrapper = wrapper.update();\n+        wrapper.find(DropdownItem).simulate('click');\n+      });\n+      expect(handleNodeInstanceRetriggerSpy).toHaveBeenCalled();", "originalCommit": "3ea06c9a6a185f86583ee81e57199c46f6313001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM3MTMxNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448371317", "bodyText": "so now the modalContent is being checked as well", "author": "AjayJagan", "createdAt": "2020-07-01T13:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwMjg0Ng=="}], "type": "inlineReview"}, {"oid": "d74b937bc72b45e08e2aa96f417a170b32fc91b7", "url": "https://github.com/kiegroup/kogito-apps/commit/d74b937bc72b45e08e2aa96f417a170b32fc91b7", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-07-01T13:40:24Z", "type": "forcePushed"}, {"oid": "34648553b9665ce741f62e83e12a2d5e4f0a984e", "url": "https://github.com/kiegroup/kogito-apps/commit/34648553b9665ce741f62e83e12a2d5e4f0a984e", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-07-01T14:50:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4ODU0MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448688540", "bodyText": "Should all these error messages be getting put into a separate file for i18n and ease of maintenance?\nIn other places, we say \"The node [id] was...\" Should we stick with that wording here? I.e. \"The node [id] was successfully re-executed.\" Is it important that it was in an error state? Or that it is now (if it failed wouldn't it be assumed to be now in error?) @cristianonicolai", "author": "srambach", "createdAt": "2020-07-02T00:49:19Z", "path": "ui-packages/packages/management-console/src/components/Molecules/ProcessListTableItems/ProcessListTableItems.tsx", "diffHunk": "@@ -104,6 +103,44 @@ const ProcessListTableItems: React.FC<IOwnProps> = ({\n     setisOpen(_isOpen);\n   };\n \n+  const onAction = (title: string, content: string, type: string): void => {\n+    setTitleType(type);\n+    setModalTitle(title);\n+    setModalContent(content);\n+    handleModalToggle();\n+  };\n+\n+  const onRetrySuccess = (): void => {\n+    onAction(\n+      'Retry operation',\n+      'Process execution has successfully re-executed node which was in error state.',", "originalCommit": "34648553b9665ce741f62e83e12a2d5e4f0a984e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODczNzc3MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448737770", "bodyText": "@srambach I agree we need to review i18n and consolidate these messages. @nmirasch could you open a JIRA for that?\nRegarding this message in specific, I agree to make it more consistent so: The node [name] was successfully re-executed. looks good to me.", "author": "cristianonicolai", "createdAt": "2020-07-02T04:10:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4ODU0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4MTkwOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448781908", "bodyText": "@cristianonicolai  @srambach  sure, here it is  https://issues.redhat.com/browse/KOGITO-2625", "author": "nmirasch", "createdAt": "2020-07-02T06:44:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4ODU0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzNDY5MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r449134691", "bodyText": "\ud83d\udc4d", "author": "srambach", "createdAt": "2020-07-02T16:27:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4ODU0MA=="}], "type": "inlineReview"}, {"oid": "e82b7f05c999b55ac6af991eaf2d955b9e8bed74", "url": "https://github.com/kiegroup/kogito-apps/commit/e82b7f05c999b55ac6af991eaf2d955b9e8bed74", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-07-02T07:49:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg4OTYxMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448889611", "bodyText": "type shouldnt be TitleType?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const onAction = (title: string, content: string, type: string): void => {\n          \n          \n            \n              const onAction = (title: string, content: string, type: TitleType): void => {", "author": "cristianonicolai", "createdAt": "2020-07-02T09:58:50Z", "path": "ui-packages/packages/management-console/src/components/Molecules/ProcessListTableItems/ProcessListTableItems.tsx", "diffHunk": "@@ -104,6 +103,44 @@ const ProcessListTableItems: React.FC<IOwnProps> = ({\n     setisOpen(_isOpen);\n   };\n \n+  const onAction = (title: string, content: string, type: string): void => {", "originalCommit": "e82b7f05c999b55ac6af991eaf2d955b9e8bed74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk2NDc2Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448964767", "bodyText": "changed", "author": "AjayJagan", "createdAt": "2020-07-02T12:28:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg4OTYxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5NDE5Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448894197", "bodyText": "you shouldn't receive a node here. The node endpoint for retrigger is a different one, already covered in handleNodeInstanceRetrigger method", "author": "cristianonicolai", "createdAt": "2020-07-02T10:07:03Z", "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -87,68 +87,50 @@ export const setTitle = (\n };\n \n export const handleSkip = (\n-  processInstanceData: Pick<\n+  processInstance: Pick<\n     ProcessInstance,\n-    'id' | 'processId' | 'serviceUrl' | 'state'\n+    'id' | 'processId' | 'serviceUrl' | 'state' | 'processName'\n   >,\n-  setModalTitle: (modalTitle: string) => void,\n-  setTitleType: (titleType: string) => void,\n-  setModalContent: (modalContent: string) => void,\n-  handleSkipModalToggle: () => void\n+  node: Pick<GraphQL.NodeInstance, 'name'>,\n+  onSkipSuccess: (name: string) => void,\n+  onSkipFailure: (name: string, errorMessage: string) => void\n ): void => {\n-  setModalTitle('Skip operation');\n   axios\n     .post(\n-      `${processInstanceData.serviceUrl}/management/processes/${processInstanceData.processId}/instances/${processInstanceData.id}/skip`\n+      `${processInstance.serviceUrl}/management/processes/${processInstance.processId}/instances/${processInstance.id}/skip`\n     )\n     .then(() => {\n-      setTitleType('success');\n-      setModalContent(\n-        'Process execution has successfully skipped node which was in error state.'\n-      );\n-      handleSkipModalToggle();\n+      onSkipSuccess(node ? node.name : processInstance.processName);\n     })\n     .catch(error => {\n-      setTitleType('failure');\n-      setModalContent(\n-        `Process execution failed to skip node which is in error state. Message: ${JSON.stringify(\n-          error.message\n-        )}`\n+      onSkipFailure(\n+        node ? node.name : processInstance.processName,\n+        JSON.stringify(error.message)\n       );\n-      handleSkipModalToggle();\n     });\n };\n \n export const handleRetry = (\n-  processInstanceData: Pick<\n+  processInstance: Pick<\n     ProcessInstance,\n-    'id' | 'processId' | 'serviceUrl' | 'state'\n+    'id' | 'processId' | 'serviceUrl' | 'state' | 'processName'\n   >,\n-  setModalTitle: (modalTitle: string) => void,\n-  setTitleType: (titleType: string) => void,\n-  setModalContent: (modalContent: string) => void,\n-  handleRetryModalToggle: () => void\n+  node: Pick<GraphQL.NodeInstance, 'name'>,", "originalCommit": "e82b7f05c999b55ac6af991eaf2d955b9e8bed74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk2NDY5NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448964694", "bodyText": "done", "author": "AjayJagan", "createdAt": "2020-07-02T12:28:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5NDE5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5NTE4NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448895184", "bodyText": "I think you only need serviceUrl, processId, id here", "author": "cristianonicolai", "createdAt": "2020-07-02T10:08:56Z", "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -182,25 +159,23 @@ export const handleAbort = (\n     });\n };\n \n-export const isModalOpen = (\n-  modalTitle,\n-  isSkipModalOpen,\n-  isRetryModalOpen\n-): boolean => {\n-  if (modalTitle === 'Skip operation') {\n-    return isSkipModalOpen;\n-  } else if (modalTitle === 'Retry operation') {\n-    return isRetryModalOpen;\n-  }\n-};\n-export const modalToggle = (\n-  modalTitle,\n-  handleSkipModalToggle,\n-  handleRetryModalToggle\n-): (() => void) => {\n-  if (modalTitle === 'Skip operation') {\n-    return handleSkipModalToggle;\n-  } else if (modalTitle === 'Retry operation') {\n-    return handleRetryModalToggle;\n-  }\n+export const handleNodeInstanceRetrigger = (\n+  processInstance: Pick<\n+    ProcessInstance,\n+    'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'", "originalCommit": "e82b7f05c999b55ac6af991eaf2d955b9e8bed74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk2NDYwNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448964605", "bodyText": "yes only passing that", "author": "AjayJagan", "createdAt": "2020-07-02T12:28:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5NTE4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5NjE1OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448896159", "bodyText": "you dont need node in here", "author": "cristianonicolai", "createdAt": "2020-07-02T10:10:46Z", "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -87,68 +87,50 @@ export const setTitle = (\n };\n \n export const handleSkip = (\n-  processInstanceData: Pick<\n+  processInstance: Pick<\n     ProcessInstance,\n-    'id' | 'processId' | 'serviceUrl' | 'state'\n+    'id' | 'processId' | 'serviceUrl' | 'state' | 'processName'\n   >,\n-  setModalTitle: (modalTitle: string) => void,\n-  setTitleType: (titleType: string) => void,\n-  setModalContent: (modalContent: string) => void,\n-  handleSkipModalToggle: () => void\n+  node: Pick<GraphQL.NodeInstance, 'name'>,", "originalCommit": "e82b7f05c999b55ac6af991eaf2d955b9e8bed74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk2NDQ5NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448964494", "bodyText": "removed", "author": "AjayJagan", "createdAt": "2020-07-02T12:27:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5NjE1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5Njk2MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448896961", "bodyText": "do you need to pass name back? you already have this in the calling method?", "author": "cristianonicolai", "createdAt": "2020-07-02T10:12:20Z", "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -87,68 +87,50 @@ export const setTitle = (\n };\n \n export const handleSkip = (\n-  processInstanceData: Pick<\n+  processInstance: Pick<\n     ProcessInstance,\n-    'id' | 'processId' | 'serviceUrl' | 'state'\n+    'id' | 'processId' | 'serviceUrl' | 'state' | 'processName'\n   >,\n-  setModalTitle: (modalTitle: string) => void,\n-  setTitleType: (titleType: string) => void,\n-  setModalContent: (modalContent: string) => void,\n-  handleSkipModalToggle: () => void\n+  node: Pick<GraphQL.NodeInstance, 'name'>,\n+  onSkipSuccess: (name: string) => void,\n+  onSkipFailure: (name: string, errorMessage: string) => void\n ): void => {\n-  setModalTitle('Skip operation');\n   axios\n     .post(\n-      `${processInstanceData.serviceUrl}/management/processes/${processInstanceData.processId}/instances/${processInstanceData.id}/skip`\n+      `${processInstance.serviceUrl}/management/processes/${processInstance.processId}/instances/${processInstance.id}/skip`\n     )\n     .then(() => {\n-      setTitleType('success');\n-      setModalContent(\n-        'Process execution has successfully skipped node which was in error state.'\n-      );\n-      handleSkipModalToggle();\n+      onSkipSuccess(node ? node.name : processInstance.processName);\n     })\n     .catch(error => {\n-      setTitleType('failure');\n-      setModalContent(\n-        `Process execution failed to skip node which is in error state. Message: ${JSON.stringify(\n-          error.message\n-        )}`\n+      onSkipFailure(\n+        node ? node.name : processInstance.processName,", "originalCommit": "e82b7f05c999b55ac6af991eaf2d955b9e8bed74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5Nzc4NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448897785", "bodyText": "shouldn't need the name here, its available in the calling method.", "author": "cristianonicolai", "createdAt": "2020-07-02T10:13:59Z", "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -87,68 +87,50 @@ export const setTitle = (\n };\n \n export const handleSkip = (\n-  processInstanceData: Pick<\n+  processInstance: Pick<\n     ProcessInstance,\n-    'id' | 'processId' | 'serviceUrl' | 'state'\n+    'id' | 'processId' | 'serviceUrl' | 'state' | 'processName'", "originalCommit": "e82b7f05c999b55ac6af991eaf2d955b9e8bed74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwNDU0MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448904541", "bodyText": "missing to pass the error message here?", "author": "cristianonicolai", "createdAt": "2020-07-02T10:26:47Z", "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -182,25 +159,23 @@ export const handleAbort = (\n     });\n };\n \n-export const isModalOpen = (\n-  modalTitle,\n-  isSkipModalOpen,\n-  isRetryModalOpen\n-): boolean => {\n-  if (modalTitle === 'Skip operation') {\n-    return isSkipModalOpen;\n-  } else if (modalTitle === 'Retry operation') {\n-    return isRetryModalOpen;\n-  }\n-};\n-export const modalToggle = (\n-  modalTitle,\n-  handleSkipModalToggle,\n-  handleRetryModalToggle\n-): (() => void) => {\n-  if (modalTitle === 'Skip operation') {\n-    return handleSkipModalToggle;\n-  } else if (modalTitle === 'Retry operation') {\n-    return handleRetryModalToggle;\n-  }\n+export const handleNodeInstanceRetrigger = (\n+  processInstance: Pick<\n+    ProcessInstance,\n+    'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n+  >,\n+  node: Pick<GraphQL.NodeInstance, 'id'>,\n+  onRetriggerSuccess,\n+  onRetriggerFailure\n+) => {\n+  axios\n+    .post(\n+      `${processInstance.serviceUrl}/management/processes/${processInstance.processId}/instances/${processInstance.id}/nodeInstances/${node.id}`\n+    )\n+    .then(() => {\n+      onRetriggerSuccess();\n+    })\n+    .catch(() => {\n+      onRetriggerFailure();", "originalCommit": "e82b7f05c999b55ac6af991eaf2d955b9e8bed74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ca09b68cce3844ec0772b08c3e0f784850f7cc2b", "url": "https://github.com/kiegroup/kogito-apps/commit/ca09b68cce3844ec0772b08c3e0f784850f7cc2b", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-07-02T12:17:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4NjE5OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448986198", "bodyText": "please remove unsued code :)", "author": "cristianonicolai", "createdAt": "2020-07-02T13:04:47Z", "path": "ui-packages/packages/management-console/src/components/Molecules/ProcessListTableItems/ProcessListTableItems.tsx", "diffHunk": "@@ -104,6 +103,44 @@ const ProcessListTableItems: React.FC<IOwnProps> = ({\n     setisOpen(_isOpen);\n   };\n \n+  const onAction = (title: string, content: string, type: string): void => {\n+    setTitleType(type);\n+    setModalTitle(title);\n+    setModalContent(content);\n+    handleModalToggle();\n+  };\n+\n+  // const onRetrySuccess = (name: string): void => {", "originalCommit": "ca09b68cce3844ec0772b08c3e0f784850f7cc2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTExNDA1OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r449114058", "bodyText": "done", "author": "AjayJagan", "createdAt": "2020-07-02T15:54:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4NjE5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2MDAwMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r449060000", "bodyText": "@AjayJagan you can get these functions pushed back. If you have in here lets say:\nonRetryClick and onSkipClick, then all popup and messages get centralized into ProcessListTableItems  wdyt?", "author": "cristianonicolai", "createdAt": "2020-07-02T14:53:03Z", "path": "ui-packages/packages/management-console/src/components/Atoms/ErrorPopover/ErrorPopover.tsx", "diffHunk": "@@ -1,27 +1,24 @@\n import React from 'react';\n import { Popover, Button } from '@patternfly/react-core';\n import {\n-  handleSkip,\n   handleRetry,\n-  stateIconCreator\n+  stateIconCreator,\n+  handleSkip\n } from '../../../utils/Utils';\n import { GraphQL } from '@kogito-apps/common';\n import ProcessInstance = GraphQL.ProcessInstance;\n+\n+enum TitleType {\n+  SUCCESS = 'success',\n+  FAILURE = 'failure'\n+}\n interface IOwnProps {\n   processInstanceData: ProcessInstance;\n-  setModalTitle: (modalTitle: string) => void;\n-  setTitleType: (titleType: string) => void;\n-  setModalContent: (modalContent: string) => void;\n-  handleRetryModalToggle: () => void;\n-  handleSkipModalToggle: () => void;\n+  onAction: (title: string, content: string, type: TitleType) => void;", "originalCommit": "ca09b68cce3844ec0772b08c3e0f784850f7cc2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTExNDM5MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r449114390", "bodyText": "grouped those functions :)", "author": "AjayJagan", "createdAt": "2020-07-02T15:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2MDAwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2ODE4Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r449068182", "bodyText": "@AjayJagan could we have a more meaningful name for this function?", "author": "cristianonicolai", "createdAt": "2020-07-02T15:05:00Z", "path": "ui-packages/packages/management-console/src/components/Molecules/ProcessListTableItems/ProcessListTableItems.tsx", "diffHunk": "@@ -104,6 +103,44 @@ const ProcessListTableItems: React.FC<IOwnProps> = ({\n     setisOpen(_isOpen);\n   };\n \n+  const onAction = (title: string, content: string, type: string): void => {", "originalCommit": "ca09b68cce3844ec0772b08c3e0f784850f7cc2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTExNDIzOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r449114239", "bodyText": "renamed to onShowMessage as you suggested.", "author": "AjayJagan", "createdAt": "2020-07-02T15:54:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2ODE4Mg=="}], "type": "inlineReview"}, {"oid": "a1b539ba52d17488cd758db80684018a98f344fd", "url": "https://github.com/kiegroup/kogito-apps/commit/a1b539ba52d17488cd758db80684018a98f344fd", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-07-02T15:52:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTExNTQ2Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r449115467", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                type: string\n          \n          \n            \n                type: TitleType", "author": "cristianonicolai", "createdAt": "2020-07-02T15:56:13Z", "path": "ui-packages/packages/management-console/src/components/Molecules/ProcessListTableItems/ProcessListTableItems.tsx", "diffHunk": "@@ -104,6 +103,50 @@ const ProcessListTableItems: React.FC<IOwnProps> = ({\n     setisOpen(_isOpen);\n   };\n \n+  const onShowMessage = (\n+    title: string,\n+    content: string,\n+    type: string", "originalCommit": "a1b539ba52d17488cd758db80684018a98f344fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTExOTI5NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r449119295", "bodyText": "done :D", "author": "AjayJagan", "createdAt": "2020-07-02T16:01:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTExNTQ2Nw=="}], "type": "inlineReview"}, {"oid": "ed83458a3fa6adbb454393111bd52054b6a72a43", "url": "https://github.com/kiegroup/kogito-apps/commit/ed83458a3fa6adbb454393111bd52054b6a72a43", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-07-02T16:00:59Z", "type": "forcePushed"}, {"oid": "f309094f63d1296e4ea4f73fb697f00dec15a004", "url": "https://github.com/kiegroup/kogito-apps/commit/f309094f63d1296e4ea4f73fb697f00dec15a004", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-07-02T16:49:15Z", "type": "commit"}, {"oid": "f309094f63d1296e4ea4f73fb697f00dec15a004", "url": "https://github.com/kiegroup/kogito-apps/commit/f309094f63d1296e4ea4f73fb697f00dec15a004", "message": "KOGITO-1139 Add node retrigger action in process instance timeline", "committedDate": "2020-07-02T16:49:15Z", "type": "forcePushed"}]}