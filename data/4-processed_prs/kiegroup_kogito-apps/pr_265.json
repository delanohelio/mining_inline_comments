{"pr_number": 265, "pr_title": "[KOGITO-2255] [KOGITO-2256] Job Service - Refactoring Job APIs to use kogito-timer API", "pr_createdAt": "2020-06-10T19:56:06Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/265", "timeline": [{"oid": "065efcbb8c2b0b7ffdf774ac3f969f81b0d657b9", "url": "https://github.com/kiegroup/kogito-apps/commit/065efcbb8c2b0b7ffdf774ac3f969f81b0d657b9", "message": "Refactoring Job APIs to the kogito-timer apis\n\nFixing tests and applying some todos on the code\n\nremoving unused class", "committedDate": "2020-06-10T20:02:07Z", "type": "forcePushed"}, {"oid": "cbbf1e69ba1959d94afade95be497fbcaab0f68a", "url": "https://github.com/kiegroup/kogito-apps/commit/cbbf1e69ba1959d94afade95be497fbcaab0f68a", "message": "Fix http job executor", "committedDate": "2020-07-08T20:03:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk0NDc5Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r451944792", "bodyText": "@tiagodolphine having refactoring as the package name seems a bit odd to me, is that something that could be avoided?", "author": "cristianonicolai", "createdAt": "2020-07-09T03:35:21Z", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/refactoring/job/HttpJob.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.jobs.service.refactoring.job;", "originalCommit": "cbbf1e69ba1959d94afade95be497fbcaab0f68a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA5NTk3MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r452095970", "bodyText": "same question. I assume it's because this is WIP", "author": "evacchi", "createdAt": "2020-07-09T09:43:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk0NDc5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5NzA0Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r452797047", "bodyText": "Yes, guys, I forgot to move the classes from proper packages :(, they were there just to make things easier during the refactoring process, I'll change it.", "author": "tiagodolphine", "createdAt": "2020-07-10T11:55:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk0NDc5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk0NTIyMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r451945221", "bodyText": "Would just the id be enough to indicate that this is the same job?", "author": "cristianonicolai", "createdAt": "2020-07-09T03:37:29Z", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/refactoring/job/JobDetails.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.jobs.service.refactoring.job;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Objects;\n+import java.util.StringJoiner;\n+\n+import org.kie.kogito.jobs.service.model.JobStatus;\n+import org.kie.kogito.timer.Job;\n+import org.kie.kogito.timer.Trigger;\n+\n+/**\n+ * Represents a Job Instance on the Job Service. This instance may be persisted and loaded at any point in time.\n+ * @param <T>\n+ */\n+public class JobDetails <T> {\n+\n+    private String id;//the unique id internally on the job service\n+    private String correlationId; //the job id on the runtimes, for instance\n+    private JobStatus status;\n+    private ZonedDateTime lastUpdate;\n+    private Integer retries;\n+    private Integer priority;\n+    private Integer executionCounter;//number of times the job was executed\n+    //may be used to build the job\u1e26andle\n+    private String scheduledId;//the execution control on the scheduler (id on vertx.setTimer, quartzId...)\n+\n+    private T payload;//process, rule, decision\n+    private Recipient recipient;//http callback, event topic\n+    private Trigger trigger;//when/how it should be executed\n+    private Type type;\n+\n+    enum Type {\n+\n+        HTTP(HttpJob.class);\n+\n+        private Class<? extends Job> jobClass;\n+\n+        Type(Class<? extends Job> jobClass) {\n+            this.jobClass = jobClass;\n+        }\n+\n+        public Class<? extends Job> getJobClass() {\n+            return jobClass;\n+        }\n+    }\n+\n+    public JobDetails(String id, String correlationId, JobStatus status, ZonedDateTime lastUpdate, Integer retries,\n+                      Integer executionCounter, String scheduledId, T payload, Recipient recipient, Trigger trigger,\n+                      Type type, Integer priority) {\n+        this.id = id;\n+        this.correlationId = correlationId;\n+        this.status = status;\n+        this.lastUpdate = lastUpdate;\n+        this.retries = retries;\n+        this.executionCounter = executionCounter;\n+        this.scheduledId = scheduledId;\n+        this.payload = payload;\n+        this.recipient = recipient;\n+        this.trigger = trigger;\n+        this.type = type;\n+        this.priority = priority;\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public String getCorrelationId() {\n+        return correlationId;\n+    }\n+\n+    public JobStatus getStatus() {\n+        return status;\n+    }\n+\n+    public ZonedDateTime getLastUpdate() {\n+        return lastUpdate;\n+    }\n+\n+    public Integer getRetries() {\n+        return retries;\n+    }\n+\n+    public Integer getExecutionCounter() {\n+        return executionCounter;\n+    }\n+\n+    public String getScheduledId() {\n+        return scheduledId;\n+    }\n+\n+    public T getPayload() {\n+        return payload;\n+    }\n+\n+    public Recipient getRecipient() {\n+        return recipient;\n+    }\n+\n+    public Trigger getTrigger() {\n+        return trigger;\n+    }\n+\n+    public Type getType() {\n+        return type;\n+    }\n+\n+    public Integer getPriority() {\n+        return priority;\n+    }\n+\n+    public static <T>JobDetailsBuilder<T> builder(){\n+        return new JobDetailsBuilder<>();\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof JobDetails)) {\n+            return false;\n+        }\n+        JobDetails<?> that = (JobDetails<?>) o;\n+        return Objects.equals(getId(), that.getId()) &&", "originalCommit": "cbbf1e69ba1959d94afade95be497fbcaab0f68a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk0NTM3Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r451945376", "bodyText": "just curious, what other types we could add in the future?\nor for instance, have different implementation of jobdetails, like a HttpJobDetails instead?", "author": "cristianonicolai", "createdAt": "2020-07-09T03:38:19Z", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/refactoring/job/JobDetails.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.jobs.service.refactoring.job;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Objects;\n+import java.util.StringJoiner;\n+\n+import org.kie.kogito.jobs.service.model.JobStatus;\n+import org.kie.kogito.timer.Job;\n+import org.kie.kogito.timer.Trigger;\n+\n+/**\n+ * Represents a Job Instance on the Job Service. This instance may be persisted and loaded at any point in time.\n+ * @param <T>\n+ */\n+public class JobDetails <T> {\n+\n+    private String id;//the unique id internally on the job service\n+    private String correlationId; //the job id on the runtimes, for instance\n+    private JobStatus status;\n+    private ZonedDateTime lastUpdate;\n+    private Integer retries;\n+    private Integer priority;\n+    private Integer executionCounter;//number of times the job was executed\n+    //may be used to build the job\u1e26andle\n+    private String scheduledId;//the execution control on the scheduler (id on vertx.setTimer, quartzId...)\n+\n+    private T payload;//process, rule, decision\n+    private Recipient recipient;//http callback, event topic\n+    private Trigger trigger;//when/how it should be executed\n+    private Type type;\n+\n+    enum Type {\n+\n+        HTTP(HttpJob.class);", "originalCommit": "cbbf1e69ba1959d94afade95be497fbcaab0f68a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5Nzc1NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r452797754", "bodyText": "@cristianonicolai we could have for instance EventJob or something like that where instead of sending HTTP requests as callbacks we could publish events into a Kafka topic, wdyt?", "author": "tiagodolphine", "createdAt": "2020-07-10T11:56:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk0NTM3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk0NjAzNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r451946037", "bodyText": "perhaps use Boolean instead?", "author": "cristianonicolai", "createdAt": "2020-07-09T03:41:22Z", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/refactoring/job/ManageableJobHandle.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.jobs.service.refactoring.job;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+import org.kie.kogito.timer.JobHandle;\n+\n+public class ManageableJobHandle implements JobHandle {\n+\n+    private boolean cancel;", "originalCommit": "cbbf1e69ba1959d94afade95be497fbcaab0f68a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk0NzA1Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r451947053", "bodyText": "remove class?", "author": "cristianonicolai", "createdAt": "2020-07-09T03:46:07Z", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/repository/infinispan/InfinispanJobRepository.java", "diffHunk": "@@ -1,124 +1,125 @@\n-/*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.kie.kogito.jobs.service.repository.infinispan;\n-\n-import java.time.ZonedDateTime;\n-import java.util.Arrays;\n-import java.util.concurrent.CompletionStage;\n-import java.util.stream.Collectors;\n-\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.inject.Inject;\n-\n-import io.vertx.core.Vertx;\n-import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n-import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n-import org.infinispan.client.hotrod.Flag;\n-import org.infinispan.client.hotrod.RemoteCache;\n-import org.infinispan.client.hotrod.RemoteCacheManager;\n-import org.infinispan.client.hotrod.Search;\n-import org.infinispan.query.dsl.QueryFactory;\n-import org.infinispan.query.dsl.SortOrder;\n-import org.kie.kogito.jobs.service.model.JobStatus;\n-import org.kie.kogito.jobs.service.model.ScheduledJob;\n-import org.kie.kogito.jobs.service.qualifier.Repository;\n-import org.kie.kogito.jobs.service.repository.ReactiveJobRepository;\n-import org.kie.kogito.jobs.service.repository.impl.BaseReactiveJobRepository;\n-import org.kie.kogito.jobs.service.stream.JobStreams;\n-import org.kie.kogito.jobs.service.utils.DateUtil;\n-\n-import static org.kie.kogito.jobs.service.repository.infinispan.InfinispanConfiguration.Caches.SCHEDULED_JOBS;\n-\n-@ApplicationScoped\n-@Repository(\"infinispan\")\n-public class InfinispanJobRepository extends BaseReactiveJobRepository implements ReactiveJobRepository {\n-\n-    private RemoteCache<String, ScheduledJob> cache;\n-    private QueryFactory queryFactory;\n-\n-    InfinispanJobRepository() {\n-        super(null, null);\n-    }\n-\n-    @Inject\n-    public InfinispanJobRepository(Vertx vertx,\n-                                   JobStreams jobStreams,\n-                                   RemoteCacheManager remoteCacheManager) {\n-        super(vertx, jobStreams);\n-        this.cache = remoteCacheManager.administration().getOrCreateCache(SCHEDULED_JOBS, (String) null);\n-        this.queryFactory = Search.getQueryFactory(cache);\n-    }\n-\n-    @Override\n-    public CompletionStage<ScheduledJob> doSave(ScheduledJob job) {\n-\n-        return runAsync(() -> cache.put(job.getId(), job))\n-                .thenCompose(j -> get(job.getId()));\n-    }\n-\n-    @Override\n-    public CompletionStage<ScheduledJob> get(String id) {\n-        return runAsync(() -> cache.get(id));\n-    }\n-\n-    @Override\n-    public CompletionStage<Boolean> exists(String id) {\n-        return runAsync(() -> cache.containsKey(id));\n-    }\n-\n-    @Override\n-    public CompletionStage<ScheduledJob> delete(String id) {\n-        return runAsync(() -> cache\n-                .withFlags(Flag.FORCE_RETURN_VALUE)\n-                .remove(id));\n-    }\n-\n-    @Override\n-    public PublisherBuilder<ScheduledJob> findAll() {\n-        return ReactiveStreams\n-                .fromIterable(queryFactory.from(ScheduledJob.class)\n-                                      .build()\n-                                      .list());\n-    }\n-\n-    @Override\n-    public PublisherBuilder<ScheduledJob> findByStatus(JobStatus... status) {\n-        return ReactiveStreams.fromIterable(queryFactory.from(ScheduledJob.class)\n-                                                    .having(\"status\")\n-                                                    .in(Arrays.stream(status)\n-                                                                .map(JobStatus::name)\n-                                                                .collect(Collectors.toList()))\n-                                                    .build()\n-                                                    .list());\n-    }\n-\n-    public PublisherBuilder<ScheduledJob> findByStatusBetweenDatesOrderByPriority(ZonedDateTime from, ZonedDateTime to,\n-                                                                                  JobStatus... status) {\n-        return ReactiveStreams.fromIterable(queryFactory.from(ScheduledJob.class)\n-                                                    .having(\"status\")\n-                                                    .in(Arrays.stream(status)\n-                                                                .map(JobStatus::name)\n-                                                                .collect(Collectors.toList()))\n-                                                    .and()\n-                                                    .having(\"expirationTime\")\n-                                                    .between(DateUtil.zonedDateTimeToInstant(from),\n-                                                             DateUtil.zonedDateTimeToInstant(to))\n-                                                    .orderBy(\"priority\", SortOrder.DESC)\n-                                                    .build()\n-                                                    .list());\n-    }\n-}\n\\ No newline at end of file\n+///*\n+// * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+// *\n+// * Licensed under the Apache License, Version 2.0 (the \"License\");\n+// * you may not use this file except in compliance with the License.\n+// * You may obtain a copy of the License at\n+// *\n+// *     http://www.apache.org/licenses/LICENSE-2.0\n+// *\n+// * Unless required by applicable law or agreed to in writing, software\n+// * distributed under the License is distributed on an \"AS IS\" BASIS,\n+// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// * See the License for the specific language governing permissions and\n+// * limitations under the License.\n+// */\n+//\n+//package org.kie.kogito.jobs.service.repository.infinispan;\n+//\n+//import java.time.ZonedDateTime;\n+//import java.util.Arrays;\n+//import java.util.concurrent.CompletionStage;\n+//import java.util.stream.Collectors;\n+//\n+//import javax.enterprise.context.ApplicationScoped;\n+//import javax.inject.Inject;\n+//\n+//import io.vertx.core.Vertx;\n+//import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+//import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+//import org.infinispan.client.hotrod.Flag;\n+//import org.infinispan.client.hotrod.RemoteCache;\n+//import org.infinispan.client.hotrod.RemoteCacheManager;\n+//import org.infinispan.client.hotrod.Search;\n+//import org.infinispan.query.dsl.QueryFactory;\n+//import org.infinispan.query.dsl.SortOrder;\n+//import org.kie.kogito.jobs.service.model.JobStatus;\n+//import org.kie.kogito.jobs.service.model.ScheduledJob;\n+//import org.kie.kogito.jobs.service.qualifier.Repository;\n+//import org.kie.kogito.jobs.service.repository.ReactiveJobRepository;\n+//import org.kie.kogito.jobs.service.repository.impl.BaseReactiveJobRepository;\n+//import org.kie.kogito.jobs.service.stream.JobStreams;\n+//import org.kie.kogito.jobs.service.utils.DateUtil;\n+//\n+//import static org.kie.kogito.jobs.service.repository.infinispan.InfinispanConfiguration.Caches.SCHEDULED_JOBS;\n+//\n+//@ApplicationScoped\n+//@Repository(\"infinispan\")\n+//public class InfinispanJobRepository extends BaseReactiveJobRepository implements ReactiveJobRepository {", "originalCommit": "cbbf1e69ba1959d94afade95be497fbcaab0f68a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwODMyMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r452208322", "bodyText": "+1", "author": "evacchi", "createdAt": "2020-07-09T13:15:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk0NzA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5OTI1OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r452799258", "bodyText": "well, in fact, I need to implement the repository for the new models with infinispan and all the profobuf mapping etc... I commented it here just to test the flow with on the in-memory repository (that is easier). This PR is not completed, I mean I opened it because I wanted some feedback from you in case we need some change on the approach.", "author": "tiagodolphine", "createdAt": "2020-07-10T12:00:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk0NzA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA2OTkxMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r456069911", "bodyText": "fixed", "author": "tiagodolphine", "createdAt": "2020-07-16T20:50:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk0NzA1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwODc3MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r452208770", "bodyText": "delete?", "author": "evacchi", "createdAt": "2020-07-09T13:16:23Z", "path": "jobs-service/src/test/java/org/kie/kogito/jobs/service/repository/infinispan/InfinispanJobRepositoryIT.java", "diffHunk": "@@ -30,28 +30,28 @@\n \n import static org.mockito.Mockito.mock;\n \n-@QuarkusTest\n-@QuarkusTestResource(InfinispanServerTestResource.class)\n-@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n-class InfinispanJobRepositoryIT extends BaseJobRepositoryTest {\n-\n-    private InfinispanJobRepository tested;\n-\n-    @Inject\n-    RemoteCacheManager remoteCacheManager;\n-\n-    @BeforeEach\n-    public void setUp() {\n-        remoteCacheManager\n-                .administration()\n-                .getOrCreateCache(InfinispanConfiguration.Caches.SCHEDULED_JOBS, (String) null)\n-                .clear();\n-        tested = new InfinispanJobRepository(mockVertx(), mockJobStreams(), remoteCacheManager);\n-        super.setUp();\n-    }\n-\n-    @Override\n-    public ReactiveJobRepository tested() {\n-        return tested;\n-    }\n-}\n\\ No newline at end of file\n+//@QuarkusTest\n+//@QuarkusTestResource(InfinispanServerTestResource.class)\n+//@TestInstance(TestInstance.Lifecycle.PER_CLASS)", "originalCommit": "cbbf1e69ba1959d94afade95be497fbcaab0f68a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA2OTUzNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r456069536", "bodyText": "fixed", "author": "tiagodolphine", "createdAt": "2020-07-16T20:49:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwODc3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwODk0NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r452208944", "bodyText": "?", "author": "evacchi", "createdAt": "2020-07-09T13:16:38Z", "path": "jobs-service/src/test/java/org/kie/kogito/jobs/service/resource/JobResourceIT.java", "diffHunk": "@@ -64,8 +65,9 @@ void create() throws Exception {\n                 .statusCode(200)\n                 .extract()\n                 .as(ScheduledJob.class);\n-        assertEquals(job, response);\n-    }\n+        //assertEquals(job, response);\n+        //TODO", "originalCommit": "cbbf1e69ba1959d94afade95be497fbcaab0f68a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5OTU5Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r452799593", "bodyText": "I need to fix and finish the remaining tests...", "author": "tiagodolphine", "createdAt": "2020-07-10T12:00:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwODk0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA2OTQwMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r456069401", "bodyText": "done", "author": "tiagodolphine", "createdAt": "2020-07-16T20:49:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwODk0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwOTExNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r452209115", "bodyText": "delete?", "author": "evacchi", "createdAt": "2020-07-09T13:16:53Z", "path": "jobs-service/src/test/java/org/kie/kogito/jobs/time/impl/VertxTimerServiceSchedulerTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+///*", "originalCommit": "cbbf1e69ba1959d94afade95be497fbcaab0f68a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA2OTI5NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r456069295", "bodyText": "done", "author": "tiagodolphine", "createdAt": "2020-07-16T20:49:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwOTExNQ=="}], "type": "inlineReview"}, {"oid": "adfa96246975b5b49c0f8af9a64d2954a389ae0b", "url": "https://github.com/kiegroup/kogito-apps/commit/adfa96246975b5b49c0f8af9a64d2954a389ae0b", "message": "Refactoring Job APIs to the kogito-timer apis\n\nFixing tests and applying some todos on the code\n\nremoving unused class\n\nFix http job executor", "committedDate": "2020-07-15T17:35:11Z", "type": "commit"}, {"oid": "2873e17a12c1e3ed25403b7125bc34d557c44026", "url": "https://github.com/kiegroup/kogito-apps/commit/2873e17a12c1e3ed25403b7125bc34d557c44026", "message": "KOGITO-2255 moving new classes and apply infinispan persistence\n\nFixing tests", "committedDate": "2020-07-15T17:35:14Z", "type": "commit"}, {"oid": "2873e17a12c1e3ed25403b7125bc34d557c44026", "url": "https://github.com/kiegroup/kogito-apps/commit/2873e17a12c1e3ed25403b7125bc34d557c44026", "message": "KOGITO-2255 moving new classes and apply infinispan persistence\n\nFixing tests", "committedDate": "2020-07-15T17:35:14Z", "type": "forcePushed"}, {"oid": "106314f86b1ebf83f83428aefb7f3a5534d38f78", "url": "https://github.com/kiegroup/kogito-apps/commit/106314f86b1ebf83f83428aefb7f3a5534d38f78", "message": "add VertxTimerServiceSchedulerTest", "committedDate": "2020-07-15T19:18:50Z", "type": "commit"}, {"oid": "f6e1d4552d7ddbdb1af793a99d512d36897a5fa0", "url": "https://github.com/kiegroup/kogito-apps/commit/f6e1d4552d7ddbdb1af793a99d512d36897a5fa0", "message": "Fix sonar issues and integration test", "committedDate": "2020-07-16T17:52:06Z", "type": "commit"}, {"oid": "a9e4b3e926de6b1cc0a76df88dfbee501e1d25a6", "url": "https://github.com/kiegroup/kogito-apps/commit/a9e4b3e926de6b1cc0a76df88dfbee501e1d25a6", "message": "adding ScheduledJobAdapterTest", "committedDate": "2020-07-16T20:48:13Z", "type": "commit"}, {"oid": "76c8f0ac200345cd61e18e40a4d7910f84ea8e62", "url": "https://github.com/kiegroup/kogito-apps/commit/76c8f0ac200345cd61e18e40a4d7910f84ea8e62", "message": "Adding more tests", "committedDate": "2020-07-17T14:14:04Z", "type": "commit"}, {"oid": "44c9d4af21f13e17a776aacf6f133ac2fbd0c875", "url": "https://github.com/kiegroup/kogito-apps/commit/44c9d4af21f13e17a776aacf6f133ac2fbd0c875", "message": "removing comment", "committedDate": "2020-07-17T17:03:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2NDcwMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461264703", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "author": "cristianonicolai", "createdAt": "2020-07-28T01:32:48Z", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/scheduler/impl/TimerDelegateJobScheduler.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "originalCommit": "44c9d4af21f13e17a776aacf6f133ac2fbd0c875", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYxMTU0MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461611541", "bodyText": "+1", "author": "tiagodolphine", "createdAt": "2020-07-28T14:12:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2NDcwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2NDg2Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461264862", "bodyText": "format seems a bit off", "author": "cristianonicolai", "createdAt": "2020-07-28T01:33:29Z", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/scheduler/impl/TimerDelegateJobScheduler.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.jobs.service.scheduler.impl;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.eclipse.microprofile.reactive.messaging.Acknowledgment;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.kie.kogito.jobs.service.executor.HttpJobExecutor;\n+import org.kie.kogito.jobs.service.model.JobExecutionResponse;\n+import org.kie.kogito.jobs.service.model.job.HttpJob;\n+import org.kie.kogito.jobs.service.model.job.HttpJobContext;\n+import org.kie.kogito.jobs.service.model.job.JobDetails;\n+import org.kie.kogito.jobs.service.model.job.ManageableJobHandle;\n+import org.kie.kogito.jobs.service.repository.ReactiveJobRepository;\n+import org.kie.kogito.jobs.service.scheduler.BaseTimerJobScheduler;\n+import org.kie.kogito.jobs.service.stream.AvailableStreams;\n+import org.kie.kogito.jobs.service.utils.ErrorHandling;\n+import org.kie.kogito.timer.Trigger;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Job Scheduler based on Vert.x engine.\n+ */\n+@ApplicationScoped\n+public class TimerDelegateJobScheduler extends BaseTimerJobScheduler {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TimerDelegateJobScheduler.class);\n+\n+    private HttpJobExecutor httpJobExecutor;\n+\n+    private VertxTimerServiceScheduler delegate;\n+\n+    protected TimerDelegateJobScheduler() {\n+    }\n+\n+    @Inject\n+    public TimerDelegateJobScheduler(ReactiveJobRepository jobRepository,\n+                                     @ConfigProperty(name = \"kogito.jobs-service.backoffRetryMillis\")\n+                                             long backoffRetryMillis,", "originalCommit": "44c9d4af21f13e17a776aacf6f133ac2fbd0c875", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzMDc1OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461630759", "bodyText": "changed", "author": "tiagodolphine", "createdAt": "2020-07-28T14:34:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2NDg2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2NDk0Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461264942", "bodyText": "should we have defaults for these properties?", "author": "cristianonicolai", "createdAt": "2020-07-28T01:33:48Z", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/scheduler/impl/TimerDelegateJobScheduler.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.jobs.service.scheduler.impl;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.eclipse.microprofile.reactive.messaging.Acknowledgment;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.kie.kogito.jobs.service.executor.HttpJobExecutor;\n+import org.kie.kogito.jobs.service.model.JobExecutionResponse;\n+import org.kie.kogito.jobs.service.model.job.HttpJob;\n+import org.kie.kogito.jobs.service.model.job.HttpJobContext;\n+import org.kie.kogito.jobs.service.model.job.JobDetails;\n+import org.kie.kogito.jobs.service.model.job.ManageableJobHandle;\n+import org.kie.kogito.jobs.service.repository.ReactiveJobRepository;\n+import org.kie.kogito.jobs.service.scheduler.BaseTimerJobScheduler;\n+import org.kie.kogito.jobs.service.stream.AvailableStreams;\n+import org.kie.kogito.jobs.service.utils.ErrorHandling;\n+import org.kie.kogito.timer.Trigger;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Job Scheduler based on Vert.x engine.\n+ */\n+@ApplicationScoped\n+public class TimerDelegateJobScheduler extends BaseTimerJobScheduler {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TimerDelegateJobScheduler.class);\n+\n+    private HttpJobExecutor httpJobExecutor;\n+\n+    private VertxTimerServiceScheduler delegate;\n+\n+    protected TimerDelegateJobScheduler() {\n+    }\n+\n+    @Inject\n+    public TimerDelegateJobScheduler(ReactiveJobRepository jobRepository,\n+                                     @ConfigProperty(name = \"kogito.jobs-service.backoffRetryMillis\")", "originalCommit": "44c9d4af21f13e17a776aacf6f133ac2fbd0c875", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYxMTM3Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461611376", "bodyText": "well the defaults are coming from the application.properties", "author": "tiagodolphine", "createdAt": "2020-07-28T14:11:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2NDk0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2OTMzNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461269337", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "author": "cristianonicolai", "createdAt": "2020-07-28T01:50:07Z", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/scheduler/impl/TimerDelegateJobScheduler.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "originalCommit": "44c9d4af21f13e17a776aacf6f133ac2fbd0c875", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzMDkxMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461630910", "bodyText": "+1", "author": "tiagodolphine", "createdAt": "2020-07-28T14:35:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2OTMzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3MDM3NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461270374", "bodyText": "Maybe have this as JsonNode or perhaps make JobDetails to receive a type parameter for the payload?", "author": "cristianonicolai", "createdAt": "2020-07-28T01:53:51Z", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/model/job/JobDetails.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.jobs.service.model.job;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Objects;\n+import java.util.StringJoiner;\n+\n+import org.kie.kogito.jobs.service.model.JobStatus;\n+import org.kie.kogito.timer.Job;\n+import org.kie.kogito.timer.Trigger;\n+\n+/**\n+ * Represents a Job Instance on the Job Service. This instance may be persisted and loaded at any point in time.\n+ */\n+public class JobDetails {\n+\n+    private String id;//the unique id internally on the job service\n+    private String correlationId; //the job id on the runtimes, for instance\n+    private JobStatus status;\n+    private ZonedDateTime lastUpdate;\n+    private Integer retries;\n+    private Integer priority;\n+    private Integer executionCounter;//number of times the job was executed\n+    private String scheduledId;//the execution control on the scheduler (id on vertx.setTimer, quartzId...)\n+\n+    private Object payload;//process, rule, decision", "originalCommit": "44c9d4af21f13e17a776aacf6f133ac2fbd0c875", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYxNTk0MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461615940", "bodyText": "the idea is the payload is a black box, not handled by jobs-service it just passes it, anyway, there is no real use case for it now, we can change/improve it, this will be useful for the REST APIs, like sending process information (what we have into the current job itself, processed, processinstanceid, etc), so the client that sends the payload knows its type and how to marshall/unmarshall.", "author": "tiagodolphine", "createdAt": "2020-07-28T14:16:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3MDM3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3MDgxOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461270818", "bodyText": "wouldnt the id be enough to decalre two jobs as identical?", "author": "cristianonicolai", "createdAt": "2020-07-28T01:55:20Z", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/model/job/JobDetails.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.jobs.service.model.job;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Objects;\n+import java.util.StringJoiner;\n+\n+import org.kie.kogito.jobs.service.model.JobStatus;\n+import org.kie.kogito.timer.Job;\n+import org.kie.kogito.timer.Trigger;\n+\n+/**\n+ * Represents a Job Instance on the Job Service. This instance may be persisted and loaded at any point in time.\n+ */\n+public class JobDetails {\n+\n+    private String id;//the unique id internally on the job service\n+    private String correlationId; //the job id on the runtimes, for instance\n+    private JobStatus status;\n+    private ZonedDateTime lastUpdate;\n+    private Integer retries;\n+    private Integer priority;\n+    private Integer executionCounter;//number of times the job was executed\n+    private String scheduledId;//the execution control on the scheduler (id on vertx.setTimer, quartzId...)\n+\n+    private Object payload;//process, rule, decision\n+    private Recipient recipient;//http callback, event topic\n+    private Trigger trigger;//when/how it should be executed\n+    private Type type;\n+\n+    public enum Type {\n+\n+        HTTP(HttpJob.class);\n+\n+        private Class<? extends Job> jobClass;\n+\n+        Type(Class<? extends Job> jobClass) {\n+            this.jobClass = jobClass;\n+        }\n+\n+        public Class<? extends Job> getJobClass() {\n+            return jobClass;\n+        }\n+    }\n+\n+    @SuppressWarnings(\"java:S107\")\n+    protected JobDetails(String id, String correlationId, JobStatus status, ZonedDateTime lastUpdate, Integer retries,\n+                      Integer executionCounter, String scheduledId, Object payload, Recipient recipient, Trigger trigger,\n+                      Type type, Integer priority) {\n+        this.id = id;\n+        this.correlationId = correlationId;\n+        this.status = status;\n+        this.lastUpdate = lastUpdate;\n+        this.retries = retries;\n+        this.executionCounter = executionCounter;\n+        this.scheduledId = scheduledId;\n+        this.payload = payload;\n+        this.recipient = recipient;\n+        this.trigger = trigger;\n+        this.type = type;\n+        this.priority = priority;\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public String getCorrelationId() {\n+        return correlationId;\n+    }\n+\n+    public JobStatus getStatus() {\n+        return status;\n+    }\n+\n+    public ZonedDateTime getLastUpdate() {\n+        return lastUpdate;\n+    }\n+\n+    public Integer getRetries() {\n+        return retries;\n+    }\n+\n+    public Integer getExecutionCounter() {\n+        return executionCounter;\n+    }\n+\n+    public String getScheduledId() {\n+        return scheduledId;\n+    }\n+\n+    public Object getPayload() {\n+        return payload;\n+    }\n+\n+    public Recipient getRecipient() {\n+        return recipient;\n+    }\n+\n+    public Trigger getTrigger() {\n+        return trigger;\n+    }\n+\n+    public Type getType() {\n+        return type;\n+    }\n+\n+    public Integer getPriority() {\n+        return priority;\n+    }\n+\n+    public static JobDetailsBuilder builder() {\n+        return new JobDetailsBuilder();\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof JobDetails)) {\n+            return false;\n+        }\n+        JobDetails that = (JobDetails) o;\n+        return Objects.equals(getId(), that.getId()) &&", "originalCommit": "44c9d4af21f13e17a776aacf6f133ac2fbd0c875", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3MTc4MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461271780", "bodyText": "seems a bit strange to have a constructor with just cancel. Shouldnt this be more of a setter thing? Also perhaps use Boolean object instead", "author": "cristianonicolai", "createdAt": "2020-07-28T01:58:46Z", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/model/job/ManageableJobHandle.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.jobs.service.model.job;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+import org.kie.kogito.timer.JobHandle;\n+\n+public class ManageableJobHandle implements JobHandle {\n+\n+    private boolean cancel;\n+    private Long id;\n+    private ZonedDateTime scheduledTime;\n+\n+    public ManageableJobHandle(Long id) {\n+        this.id = id;\n+    }\n+\n+    public ManageableJobHandle(String id) {\n+        this.id = Optional.ofNullable(id).map(Long::parseLong).orElse(null);\n+    }\n+\n+\n+    public ManageableJobHandle(boolean cancel) {", "originalCommit": "44c9d4af21f13e17a776aacf6f133ac2fbd0c875", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3MjAyNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461272024", "bodyText": "Perhaps here have the typed Job so you can have the payload defined.", "author": "cristianonicolai", "createdAt": "2020-07-28T01:59:42Z", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/model/job/ProcessJob.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.jobs.service.model.job;\n+\n+import org.kie.kogito.jobs.api.Job;\n+\n+public class ProcessJob extends Job {", "originalCommit": "44c9d4af21f13e17a776aacf6f133ac2fbd0c875", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3MjI5Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461272292", "bodyText": "move it into its own file?", "author": "cristianonicolai", "createdAt": "2020-07-28T02:00:26Z", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/model/job/Recipient.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.jobs.service.model.job;\n+\n+import java.util.Objects;\n+import java.util.StringJoiner;\n+\n+public interface Recipient {\n+\n+    class HTTPRecipient implements Recipient {", "originalCommit": "44c9d4af21f13e17a776aacf6f133ac2fbd0c875", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3Mjc3NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461272774", "bodyText": "I think would be nicer to see this in closer in the ProcessJob somehow.", "author": "cristianonicolai", "createdAt": "2020-07-28T02:02:08Z", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/model/job/ScheduledJobAdapter.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.jobs.service.model.job;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.kie.kogito.jobs.api.JobBuilder;\n+import org.kie.kogito.jobs.service.model.ScheduledJob;\n+import org.kie.kogito.jobs.service.utils.DateUtil;\n+import org.kie.kogito.timer.Trigger;\n+import org.kie.kogito.timer.impl.IntervalTrigger;\n+import org.kie.kogito.timer.impl.PointInTimeTrigger;\n+\n+import static org.kie.kogito.jobs.service.utils.DateUtil.toDate;\n+\n+public class ScheduledJobAdapter {\n+\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+    private ScheduledJobAdapter() {\n+    }\n+\n+    public static ScheduledJob of(JobDetails jobDetails) {\n+        final ProcessPayload payload = payloadDeserialize(String.valueOf(jobDetails.getPayload()));\n+        return ScheduledJob.builder()\n+                .job(new JobBuilder()\n+                             .id(jobDetails.getId())\n+                             .priority(jobDetails.getPriority())\n+                             .expirationTime(Optional.ofNullable(jobDetails.getTrigger())\n+                                                     .map(Trigger::hasNextFireTime)\n+                                                     .map(DateUtil::fromDate)\n+                                                     .orElse(null))\n+                             .callbackEndpoint(Optional.ofNullable(jobDetails.getRecipient())\n+                                                       .map(Recipient.HTTPRecipient.class::cast)\n+                                                       .map(Recipient.HTTPRecipient::getEndpoint)\n+                                                       .orElse(null))\n+                             .repeatLimit(Optional.ofNullable(jobDetails.getTrigger())\n+                                                  .filter(IntervalTrigger.class::isInstance)\n+                                                  .map(IntervalTrigger.class::cast)\n+                                                  .map(IntervalTrigger::getRepeatLimit)\n+                                                  .orElse(null))\n+                             .repeatInterval(Optional.ofNullable(jobDetails.getTrigger())\n+                                                     .filter(IntervalTrigger.class::isInstance)\n+                                                     .map(IntervalTrigger.class::cast)\n+                                                     .map(IntervalTrigger::getPeriod)\n+                                                     .orElse(null))\n+                             .rootProcessId(payload.getRootProcessId())\n+                             .rootProcessInstanceId(payload.getRootProcessInstanceId())\n+                             .processId(payload.getProcessId())\n+                             .processInstanceId(payload.getProcessInstanceId())\n+                             .build())\n+                .scheduledId(jobDetails.getScheduledId())\n+                .status(jobDetails.getStatus())\n+                .executionCounter(jobDetails.getExecutionCounter())\n+                .retries(jobDetails.getRetries())\n+                .lastUpdate(jobDetails.getLastUpdate())\n+                .build();\n+    }\n+\n+    public static JobDetails to(ScheduledJob scheduledJob) {\n+        return new JobDetailsBuilder()\n+                .id(scheduledJob.getId())\n+                .correlationId(scheduledJob.getId())\n+                .executionCounter(scheduledJob.getExecutionCounter())\n+                .lastUpdate(scheduledJob.getLastUpdate())\n+                .payload(\"process\")\n+                .recipient(new Recipient.HTTPRecipient(scheduledJob.getCallbackEndpoint()))\n+                .retries(scheduledJob.getRetries())\n+                .scheduledId(scheduledJob.getScheduledId())\n+                .status(scheduledJob.getStatus())\n+                .type(JobDetails.Type.HTTP)\n+                .trigger(triggerAdapter(scheduledJob))\n+                .priority(scheduledJob.getPriority())\n+                .payload(payloadSerialize(scheduledJob))\n+                .build();\n+    }\n+\n+    public static Trigger triggerAdapter(ScheduledJob scheduledJob) {\n+        return Optional.ofNullable(scheduledJob)\n+                .filter(job -> Objects.nonNull(job.getExpirationTime()))\n+                .map(job -> job.hasInterval()\n+                        .<Trigger>map(interval -> new IntervalTrigger(0l,\n+                                                                      toDate(scheduledJob.getExpirationTime()),\n+                                                                      null,\n+                                                                      scheduledJob.getRepeatLimit(),\n+                                                                      0,\n+                                                                      interval,\n+                                                                      null,\n+                                                                      null))\n+                        .orElse(new PointInTimeTrigger(scheduledJob.getExpirationTime().toInstant().toEpochMilli(),\n+                                                       null, null)))\n+                .orElse(null);\n+    }\n+\n+    public static IntervalTrigger intervalTrigger(ZonedDateTime start, int repeatLimit, int intervalMillis) {\n+        return new IntervalTrigger(0, toDate(start), null, repeatLimit, 0, intervalMillis, null, null);\n+    }\n+\n+    public static String payloadSerialize(ScheduledJob scheduledJob) {\n+        try {\n+            return OBJECT_MAPPER.writeValueAsString(new ProcessPayload(scheduledJob.getProcessInstanceId(),\n+                                                                       scheduledJob.getRootProcessInstanceId(),\n+                                                                       scheduledJob.getProcessId(),\n+                                                                       scheduledJob.getRootProcessId()));\n+        } catch (JsonProcessingException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public static ProcessPayload payloadDeserialize(String payload) {\n+        try {\n+            return OBJECT_MAPPER.readValue(payload, ProcessPayload.class);\n+        } catch (JsonProcessingException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    final static class ProcessPayload {", "originalCommit": "44c9d4af21f13e17a776aacf6f133ac2fbd0c875", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3Mjk2NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461272965", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "author": "cristianonicolai", "createdAt": "2020-07-28T02:02:48Z", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/repository/infinispan/marshaller/JobDetailsMarshaller.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "originalCommit": "44c9d4af21f13e17a776aacf6f133ac2fbd0c875", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3MzI3MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461273271", "bodyText": "shouldnt this be the concrete class instead?", "author": "cristianonicolai", "createdAt": "2020-07-28T02:03:55Z", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/repository/infinispan/marshaller/JobDetailsMarshaller.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.jobs.service.repository.infinispan.marshaller;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+import org.kie.kogito.jobs.service.model.JobStatus;\n+import org.kie.kogito.jobs.service.model.job.JobDetails;\n+import org.kie.kogito.jobs.service.model.job.Recipient;\n+import org.kie.kogito.timer.Trigger;\n+\n+import static org.kie.kogito.jobs.service.utils.DateUtil.instantToZonedDateTime;\n+import static org.kie.kogito.jobs.service.utils.DateUtil.zonedDateTimeToInstant;\n+\n+public class JobDetailsMarshaller extends BaseMarshaller<JobDetails> {\n+\n+    @Override\n+    public String getTypeName() {\n+        return getPackage() + \".JobDetails\";\n+    }\n+\n+    @Override\n+    public Class<? extends JobDetails> getJavaClass() {\n+        return JobDetails.class;\n+    }\n+\n+    @Override\n+    public void writeTo(ProtoStreamWriter writer, JobDetails job) throws IOException {\n+        writer.writeString(\"id\", job.getId());\n+        writer.writeString(\"correlationId\", job.getCorrelationId());\n+        writer.writeString(\"status\", mapEnum(job.getStatus()));\n+        writer.writeInstant(\"lastUpdate\", zonedDateTimeToInstant(job.getLastUpdate()));\n+        writer.writeInt(\"retries\", job.getRetries());\n+        writer.writeInt(\"priority\", job.getPriority());\n+        writer.writeInt(\"executionCounter\", job.getExecutionCounter());\n+        writer.writeString(\"scheduledId\", job.getScheduledId());\n+        writer.writeString(\"payload\", String.valueOf(job.getPayload()));\n+        writer.writeObject(\"recipient\", job.getRecipient(), getInterface(job.getRecipient()));\n+        writer.writeObject(\"trigger\", job.getTrigger(), getInterface(job.getTrigger()));\n+        writer.writeString(\"type\", mapEnum(job.getType()));\n+    }\n+\n+    public Class<?> getInterface(Object object) {", "originalCommit": "44c9d4af21f13e17a776aacf6f133ac2fbd0c875", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3MzM2Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461273363", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "author": "cristianonicolai", "createdAt": "2020-07-28T02:04:19Z", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/repository/infinispan/marshaller/RecipientMarshaller.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "originalCommit": "44c9d4af21f13e17a776aacf6f133ac2fbd0c875", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzMTA0NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461631045", "bodyText": "+1", "author": "tiagodolphine", "createdAt": "2020-07-28T14:35:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3MzM2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3MzQyOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461273429", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "author": "cristianonicolai", "createdAt": "2020-07-28T02:04:34Z", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/repository/infinispan/marshaller/TriggerMarshaller.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "originalCommit": "44c9d4af21f13e17a776aacf6f133ac2fbd0c875", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzMTEwNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461631104", "bodyText": "+1", "author": "tiagodolphine", "createdAt": "2020-07-28T14:35:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3MzQyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NDMxNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461274314", "bodyText": "@tiagodolphine wouldnt be best to have a marshaller for each type? IntervalTrigger and PointInTimeTrigger? Seems that the data structure is quite different.", "author": "cristianonicolai", "createdAt": "2020-07-28T02:07:54Z", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/repository/infinispan/marshaller/TriggerMarshaller.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.jobs.service.repository.infinispan.marshaller;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.Optional;\n+\n+import org.kie.kogito.timer.Trigger;\n+import org.kie.kogito.timer.impl.IntervalTrigger;\n+import org.kie.kogito.timer.impl.PointInTimeTrigger;\n+\n+public class TriggerMarshaller extends BaseMarshaller<Trigger> {", "originalCommit": "44c9d4af21f13e17a776aacf6f133ac2fbd0c875", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYxOTI3Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461619272", "bodyText": "Well, this is tricky because here we have an interface with multiple implementations, and the model is based on the interface. Anyway, this is the way I found to make it work and setting the attributes as optional.", "author": "tiagodolphine", "createdAt": "2020-07-28T14:20:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NDMxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NTAwOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461275009", "bodyText": "proto guidelines actually recommend avoiding required fields altogether to allow better evolution/migration even tought from a domain model it would make sense.", "author": "cristianonicolai", "createdAt": "2020-07-28T02:10:33Z", "path": "jobs-service/src/main/resources/META-INF/library.proto", "diffHunk": "@@ -1,24 +1,30 @@\n package job.service;\n \n-message ScheduledJob {\n-\n-  //job attributes\n+message JobDetails {\n   required string id = 1;\n-  optional string callbackEndpoint = 2;\n-  optional int64 expirationTime = 3;\n-  optional int32 priority = 4;\n-  optional string processId = 5;\n-  optional string processInstanceId = 6;\n-  optional string rootProcessId = 7;\n-  optional string rootProcessInstanceId = 8;\n-  optional int64 repeatInterval = 9;\n-  optional int32 repeatLimit = 10;\n+  optional string correlationId = 2;\n+  required string status = 3;//enum", "originalCommit": "44c9d4af21f13e17a776aacf6f133ac2fbd0c875", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYyMDE1Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461620152", "bodyText": "The status is a mandatory field, but I can set as optional, no problem.", "author": "tiagodolphine", "createdAt": "2020-07-28T14:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NTAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYyMDk5NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461620995", "bodyText": "Anyway I'll set all fields as optional", "author": "tiagodolphine", "createdAt": "2020-07-28T14:22:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NTAwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NTIyNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r461275224", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "author": "cristianonicolai", "createdAt": "2020-07-28T02:11:19Z", "path": "jobs-service/src/test/java/org/kie/kogito/jobs/service/scheduler/impl/TimerDelegateJobSchedulerTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "originalCommit": "44c9d4af21f13e17a776aacf6f133ac2fbd0c875", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4585294cf9388cb8d9296ae3f12f253fc6600c7b", "url": "https://github.com/kiegroup/kogito-apps/commit/4585294cf9388cb8d9296ae3f12f253fc6600c7b", "message": "apply PR comments", "committedDate": "2020-07-28T14:33:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk0MzkwNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r464943907", "bodyText": "This seems to be unnecessary, @tiagodolphine, wdyt?", "author": "MarianMacik", "createdAt": "2020-08-04T10:07:25Z", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/scheduler/impl/VertxTimerServiceScheduler.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.jobs.service.scheduler.impl;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.time.chrono.ChronoZonedDateTime;\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import io.vertx.mutiny.core.Vertx;\n+import org.kie.kogito.jobs.service.model.job.ManageableJobHandle;\n+import org.kie.kogito.jobs.service.utils.DateUtil;\n+import org.kie.kogito.timer.InternalSchedulerService;\n+import org.kie.kogito.timer.Job;\n+import org.kie.kogito.timer.JobContext;\n+import org.kie.kogito.timer.TimerService;\n+import org.kie.kogito.timer.Trigger;\n+import org.kie.kogito.timer.impl.DefaultTimerJobFactoryManager;\n+import org.kie.kogito.timer.impl.TimerJobFactoryManager;\n+import org.kie.kogito.timer.impl.TimerJobInstance;\n+\n+@ApplicationScoped\n+public class VertxTimerServiceScheduler implements TimerService<ManageableJobHandle>,\n+                                                   InternalSchedulerService {\n+\n+    protected TimerJobFactoryManager jobFactoryManager = DefaultTimerJobFactoryManager.instance;\n+\n+    protected Vertx vertx;\n+\n+    public VertxTimerServiceScheduler() {\n+        vertx = Vertx.vertx();\n+    }\n+\n+    public VertxTimerServiceScheduler(Vertx vertx) {\n+        this.vertx = vertx;\n+    }\n+\n+    @Override\n+    public long getCurrentTime() {\n+        return System.currentTimeMillis();\n+    }\n+\n+    @Override\n+    public void reset() {\n+        //no action is required\n+    }\n+\n+    @Override\n+    public void shutdown() {\n+        vertx.close();\n+    }\n+\n+    @Override\n+    public long getTimeToNextJob() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public Collection<TimerJobInstance> getTimerJobInstances(long id) {\n+        return jobFactoryManager.getTimerJobInstances();\n+    }\n+\n+    @Override\n+    public void setTimerJobFactoryManager(TimerJobFactoryManager timerJobFactoryManager) {\n+        this.jobFactoryManager = timerJobFactoryManager;\n+    }\n+\n+    @Override\n+    public TimerJobFactoryManager getTimerJobFactoryManager() {\n+        return jobFactoryManager;\n+    }\n+\n+    @Override\n+    public ManageableJobHandle scheduleJob(Job job, JobContext ctx, Trigger trigger) {\n+        return Optional.ofNullable(trigger.hasNextFireTime())\n+                .map(id -> new ManageableJobHandle(false))\n+                .map(jobHandle -> jobFactoryManager.createTimerJobInstance(job, ctx, trigger, jobHandle, this))\n+                .map(jobInstance -> {\n+                    internalSchedule(jobInstance);\n+                    return (ManageableJobHandle) jobInstance.getJobHandle();\n+                })\n+                .orElse(null);\n+    }\n+\n+    @Override\n+    public boolean removeJob(ManageableJobHandle jobHandle) {\n+        return vertx.cancelTimer(jobHandle.getId());\n+    }\n+\n+    @Override\n+    public void internalSchedule(TimerJobInstance timerJobInstance) {\n+        final Trigger trigger = timerJobInstance.getTrigger();\n+        if (trigger.hasNextFireTime() == null) {\n+            return;\n+        }\n+        final long then = trigger.hasNextFireTime().getTime();\n+        final ZonedDateTime now = DateUtil.now();\n+        final long delay = calculateDelay(then, now);\n+        final ManageableJobHandle handle = (ManageableJobHandle) timerJobInstance.getJobHandle();\n+        long scheduledId = vertx.setTimer(delay, i -> {\n+            timerJobInstance.getJob().execute(timerJobInstance.getJobContext());\n+            if (handle.isCancel()) {\n+                return;\n+            }", "originalCommit": "4585294cf9388cb8d9296ae3f12f253fc6600c7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1ODg0OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r466558849", "bodyText": "Fixed by #374", "author": "MarianMacik", "createdAt": "2020-08-06T17:08:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk0MzkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU2MDk0OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/265#discussion_r466560949", "bodyText": "Fixed by #374\n\nThanks @MarianMacik, already approved it.", "author": "tiagodolphine", "createdAt": "2020-08-06T17:12:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk0MzkwNw=="}], "type": "inlineReview"}]}