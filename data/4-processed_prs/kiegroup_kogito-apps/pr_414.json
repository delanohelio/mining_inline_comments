{"pr_number": 414, "pr_title": "KOGITO-2085: Task Inbox component", "pr_createdAt": "2020-08-26T11:19:08Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/414", "timeline": [{"oid": "c5544a2740da6d6bd23084d17e7045d72225fd7f", "url": "https://github.com/kiegroup/kogito-apps/commit/c5544a2740da6d6bd23084d17e7045d72225fd7f", "message": "- Fixed testing & dev env", "committedDate": "2020-08-27T07:16:59Z", "type": "forcePushed"}, {"oid": "ac65e75876fbf22cc9e0d1707f9f13e188babfb2", "url": "https://github.com/kiegroup/kogito-apps/commit/ac65e75876fbf22cc9e0d1707f9f13e188babfb2", "message": "- Fixed testing & dev env", "committedDate": "2020-08-27T08:59:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkxODcxMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/414#discussion_r478918710", "bodyText": "@pefernan getTasksForUser? would describe better the query", "author": "nmirasch", "createdAt": "2020-08-28T08:07:50Z", "path": "ui-packages/packages/common/src/graphql/queries.tsx", "diffHunk": "@@ -271,3 +271,47 @@ const GET_USER_TASK = gql`\n     }\n   }\n `;\n+\n+const GET_TASKS_FOR_USER = gql`\n+  query getTaskForUser(", "originalCommit": "ac65e75876fbf22cc9e0d1707f9f13e188babfb2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI0ODczOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/414#discussion_r477248738", "bodyText": "does this mean that a user should see the task assigned to a different user at all times? Or is this just for an admin user? I would expect some differentiation in that case.", "author": "jstastny-cz", "createdAt": "2020-08-26T12:06:47Z", "path": "ui-packages/packages/common/src/graphql/queries.tsx", "diffHunk": "@@ -271,3 +271,47 @@ const GET_USER_TASK = gql`\n     }\n   }\n `;\n+\n+const GET_TASKS_FOR_USER = gql`\n+  query getTaskForUser(\n+    $user: String\n+    $groups: [String!]\n+    $offset: Int\n+    $limit: Int\n+  ) {\n+    UserTaskInstances(\n+      where: {\n+        or: [\n+          { actualOwner: { equal: $user } }\n+          { potentialUsers: { contains: $user } }", "originalCommit": "9dc5381cfbe27b2f736e340908c89c8ca37e6fe8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAyMjc5OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/414#discussion_r480022798", "bodyText": "@jstastny-cz well, the user should be able to see the tasks where he is  the actual owner, or the ones he is a potential owner to be able to claim them\n@cristianonicolai is that true right??", "author": "pefernan", "createdAt": "2020-08-31T09:59:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI0ODczOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1NTE3Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/414#discussion_r479955173", "bodyText": "whitespace formatting does not seem to be in sync with the rest of the file", "author": "jstastny-cz", "createdAt": "2020-08-31T07:45:41Z", "path": "ui-packages/packages/task-console/server/server.js", "diffHunk": "@@ -56,17 +61,31 @@ function timeout(ms) {\n const resolvers = {\n   Query: {\n     UserTaskInstances: async (parent, args) => {\n-      const result = data.UserTaskInstances.filter(datum => {\n-        console.log('args', args['where']);\n-        if (args['where'].id && args['where'].id.equal) {\n-          return datum.id == args['where'].id.equal;\n-        }\n+      let result = data.UserTaskInstances.filter(datum => {\n+        console.log('args', args)\n+\n         if (args['where'].state && args['where'].state.in) {\n           return args['where'].state.in.includes(datum.state);\n+        } else {\n+          // searching for tasks assigned to current user\n+          return true;\n         }\n+\n         return false;\n       });\n+\n       await timeout(2000);\n+\n+      if(args.pagination) {", "originalCommit": "ac65e75876fbf22cc9e0d1707f9f13e188babfb2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2NzQ4NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/414#discussion_r479967485", "bodyText": "It's named column, but is rather a fragment,  I would expect for this to return DataTableColumn.", "author": "jstastny-cz", "createdAt": "2020-08-31T08:10:19Z", "path": "ui-packages/packages/task-console/src/components/Atoms/TaskStateColumn/TaskStateColumn.tsx", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import React from 'react';\n+import {\n+  BanIcon,\n+  CheckCircleIcon,\n+  OnRunningIcon\n+} from '@patternfly/react-icons';\n+\n+import { GraphQL } from '@kogito-apps/common';\n+import UserTaskInstance = GraphQL.UserTaskInstance;\n+\n+interface IOwnProps {\n+  task: UserTaskInstance;\n+}\n+\n+const TaskStateColumn: React.FC<IOwnProps> = ({ task }) => {", "originalCommit": "ac65e75876fbf22cc9e0d1707f9f13e188babfb2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2NzgwNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/414#discussion_r479967806", "bodyText": "It's named column, but is rather a fragment, I would expect for this to return DataTableColumn.", "author": "jstastny-cz", "createdAt": "2020-08-31T08:10:53Z", "path": "ui-packages/packages/task-console/src/components/Atoms/TaskDescriptionColumn/TaskDescriptionColumn.tsx", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import React, { useContext } from 'react';\n+import { ItemDescriptor, GraphQL } from '@kogito-apps/common';\n+import { Link } from 'react-router-dom';\n+import TaskConsoleContext, {\n+  IContext\n+} from '../../../context/TaskConsoleContext/TaskConsoleContext';\n+import UserTaskInstance = GraphQL.UserTaskInstance;\n+\n+interface IOwnProps {\n+  task: UserTaskInstance;\n+}\n+\n+const TaskDescriptionColumn: React.FC<IOwnProps> = ({ task }) => {", "originalCommit": "ac65e75876fbf22cc9e0d1707f9f13e188babfb2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk3MTY4MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/414#discussion_r479971681", "bodyText": "can we mock LoadMore too?", "author": "jstastny-cz", "createdAt": "2020-08-31T08:18:37Z", "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/tests/TaskInbox.test.tsx", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import React from 'react';\n+import userTasks from './mocks/testdata';\n+import {\n+  DataTable,\n+  DefaultUser,\n+  getWrapperAsync,\n+  KogitoEmptyState,\n+  LoadMore,\n+  ServerErrors,\n+  User\n+} from '@kogito-apps/common';\n+import { MockedProvider } from '@apollo/react-testing';\n+import { gql } from 'apollo-boost';\n+import TaskInbox from '../TaskInbox';\n+import TaskConsoleContextProvider from '../../../../context/TaskConsoleContext/TaskConsoleContextProvider';\n+import { MemoryRouter as Router } from 'react-router';\n+import { act } from 'react-dom/test-utils';\n+\n+const GET_TASKS_FOR_USER = gql`\n+  query getTaskForUser(\n+    $user: String\n+    $groups: [String!]\n+    $offset: Int\n+    $limit: Int\n+  ) {\n+    UserTaskInstances(\n+      where: {\n+        or: [\n+          { actualOwner: { equal: $user } }\n+          { potentialUsers: { contains: $user } }\n+          { potentialGroups: { containsAny: $groups } }\n+        ]\n+      }\n+      pagination: { offset: $offset, limit: $limit }\n+    ) {\n+      id\n+      name\n+      referenceName\n+      description\n+      priority\n+      processInstanceId\n+      processId\n+      rootProcessInstanceId\n+      rootProcessId\n+      state\n+      actualOwner\n+      adminGroups\n+      adminUsers\n+      completed\n+      started\n+      excludedUsers\n+      potentialGroups\n+      potentialUsers\n+      inputs\n+      outputs\n+      referenceName\n+      lastUpdate\n+      endpoint\n+    }\n+  }\n+`;\n+\n+const MockedComponent = (): React.ReactElement => {\n+  return <></>;\n+};\n+\n+jest.mock('@kogito-apps/common', () => ({\n+  ...jest.requireActual('@kogito-apps/common'),\n+  DataTable: () => {\n+    return <MockedComponent />;\n+  },\n+  KogitoEmptyState: () => {\n+    return <MockedComponent />;\n+  },\n+  KogitoSpinner: () => {\n+    return <MockedComponent />;\n+  },\n+  ServerErrors: () => {", "originalCommit": "ac65e75876fbf22cc9e0d1707f9f13e188babfb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5MzE3NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/414#discussion_r480093174", "bodyText": "In this case I cannot mock it since I need to test the load more functionality on the task inbox", "author": "pefernan", "createdAt": "2020-08-31T12:22:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk3MTY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk3MzU1OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/414#discussion_r479973559", "bodyText": "can we use JSX here instead of objects?", "author": "jstastny-cz", "createdAt": "2020-08-31T08:22:19Z", "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/TaskInbox.tsx", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import React, { useContext, useEffect, useState } from 'react';\n+import { Bullseye } from '@patternfly/react-core';\n+import Moment from 'react-moment';\n+import {\n+  KogitoSpinner,\n+  DataTable,\n+  LoadMore,\n+  GraphQL,\n+  DataTableColumn,\n+  ServerErrors,\n+  KogitoEmptyStateType,\n+  KogitoEmptyState\n+} from '@kogito-apps/common';\n+import TaskConsoleContext, {\n+  IContext\n+} from '../../../context/TaskConsoleContext/TaskConsoleContext';\n+import TaskDescriptionColumn from '../../Atoms/TaskDescriptionColumn/TaskDescriptionColumn';\n+import UserTaskInstance = GraphQL.UserTaskInstance;\n+import TaskStateColumn from '../../Atoms/TaskStateColumn/TaskStateColumn';\n+\n+const UserTaskLoadingComponent = (\n+  <Bullseye>\n+    <KogitoSpinner spinnerText=\"Loading user tasks...\" />\n+  </Bullseye>\n+);\n+\n+const TaskInbox: React.FC = props => {\n+  const [defaultPageSize] = useState<number>(10);\n+  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n+  const [isLoading, setIsLoading] = useState<boolean>(false);\n+  const [queryOffset, setOffset] = useState<number>(0);\n+  const [pageSize, setPageSize] = useState<number>(defaultPageSize);\n+  const [isLoadingMore, setIsLoadingMore] = useState<boolean>(false);\n+  const [tableData, setTableData] = useState<any[]>([]);\n+\n+  const context: IContext<UserTaskInstance> = useContext(TaskConsoleContext);\n+\n+  const [\n+    getUserTasks,\n+    { loading, error, data, refetch, networkStatus }\n+  ] = GraphQL.useGetTaskForUserLazyQuery({\n+    fetchPolicy: 'network-only',\n+    notifyOnNetworkStatusChange: true,\n+    variables: {\n+      user: context.getUser().id,\n+      groups: context.getUser().groups,\n+      offset: queryOffset,\n+      limit: pageSize\n+    }\n+  });\n+\n+  const onGetMoreInstances = (_queryOffset, _pageSize, _loadMore) => {\n+    setIsLoadingMore(_loadMore);\n+\n+    if (_queryOffset !== queryOffset) {\n+      setOffset(_queryOffset);\n+    }\n+\n+    if (_pageSize !== pageSize) {\n+      setPageSize(_pageSize);\n+    }\n+\n+    getUserTasks({\n+      variables: {\n+        user: context.getUser().id,\n+        groups: context.getUser().groups,\n+        offset: _queryOffset,\n+        limit: _pageSize\n+      }\n+    });\n+  };\n+\n+  useEffect(() => {\n+    onGetMoreInstances(queryOffset, pageSize, false);\n+  }, []);\n+\n+  useEffect(() => {\n+    if (isLoadingMore === undefined || !isLoadingMore) {\n+      setIsLoading(loading);\n+    }\n+    if (!loading && data !== undefined) {\n+      const newData = tableData.concat(data.UserTaskInstances);\n+      setTableData(newData);\n+      if (queryOffset > 0 && tableData.length > 0) {\n+        setIsLoadingMore(false);\n+      }\n+      if (!isLoaded) {\n+        setIsLoaded(true);\n+      }\n+    }\n+  }, [data]);\n+\n+  if (error) {\n+    return <ServerErrors error={error} variant={'large'} />;\n+  }\n+\n+  if (!isLoaded) {\n+    return UserTaskLoadingComponent;\n+  }\n+\n+  if (tableData.length === 0) {\n+    return (\n+      <KogitoEmptyState\n+        type={KogitoEmptyStateType.Search}\n+        title=\"No results found\"\n+        body=\"Try using different filters\"\n+      />\n+    );\n+  }\n+\n+  const columns: DataTableColumn[] = [\n+    {", "originalCommit": "ac65e75876fbf22cc9e0d1707f9f13e188babfb2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk3NjczMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/414#discussion_r479976730", "bodyText": "should we reuse the one from queries.tsx by importing them?", "author": "jstastny-cz", "createdAt": "2020-08-31T08:28:28Z", "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/tests/TaskInbox.test.tsx", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import React from 'react';\n+import userTasks from './mocks/testdata';\n+import {\n+  DataTable,\n+  DefaultUser,\n+  getWrapperAsync,\n+  KogitoEmptyState,\n+  LoadMore,\n+  ServerErrors,\n+  User\n+} from '@kogito-apps/common';\n+import { MockedProvider } from '@apollo/react-testing';\n+import { gql } from 'apollo-boost';\n+import TaskInbox from '../TaskInbox';\n+import TaskConsoleContextProvider from '../../../../context/TaskConsoleContext/TaskConsoleContextProvider';\n+import { MemoryRouter as Router } from 'react-router';\n+import { act } from 'react-dom/test-utils';\n+\n+const GET_TASKS_FOR_USER = gql`", "originalCommit": "ac65e75876fbf22cc9e0d1707f9f13e188babfb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAyNjU4MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/414#discussion_r480026580", "bodyText": "yea, I don't like that too but I think the only solution would be exporting the queries on the common module, IDK if that's a good practice... @Sara4994 WDYT??", "author": "pefernan", "createdAt": "2020-08-31T10:07:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk3NjczMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAzMTkyNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/414#discussion_r480031924", "bodyText": "@pefernan yes, better to import from common module", "author": "Sara4994", "createdAt": "2020-08-31T10:19:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk3NjczMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4NzA2NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/414#discussion_r479987065", "bodyText": "changes to yarn.lock without any change in package.json.", "author": "jstastny-cz", "createdAt": "2020-08-31T08:48:37Z", "path": "ui-packages/yarn.lock", "diffHunk": "@@ -3,9 +3,9 @@\n \n \n \"@apollo/protobufjs@^1.0.3\":\n-  version \"1.0.4\"\n-  resolved \"https://registry.yarnpkg.com/@apollo/protobufjs/-/protobufjs-1.0.4.tgz#cf01747a55359066341f31b5ce8db17df44244e0\"\n-  integrity sha512-EE3zx+/D/wur/JiLp6VCiw1iYdyy1lCJMf8CGPkLeDt5QJrN4N8tKFx33Ah4V30AUQzMk7Uz4IXKZ1LOj124gA==\n+  version \"1.0.5\"", "originalCommit": "ac65e75876fbf22cc9e0d1707f9f13e188babfb2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9c094263b1320d92a69aa06632b43476203c9236", "url": "https://github.com/kiegroup/kogito-apps/commit/9c094263b1320d92a69aa06632b43476203c9236", "message": "KOGITO-2085: Task Inbox component\n\n- Adding Query\n- Adding Pagination\n- Code refactors, fixed testing, added mocked data", "committedDate": "2020-08-31T12:04:09Z", "type": "commit"}, {"oid": "9d101f723751a1b8b1a65a474b9b171cfe2b7ccd", "url": "https://github.com/kiegroup/kogito-apps/commit/9d101f723751a1b8b1a65a474b9b171cfe2b7ccd", "message": "- Fixed testing & dev env", "committedDate": "2020-08-31T12:04:09Z", "type": "commit"}, {"oid": "3ae38254ccf0ccc32e1c8ae8b6e53095e376fe55", "url": "https://github.com/kiegroup/kogito-apps/commit/3ae38254ccf0ccc32e1c8ae8b6e53095e376fe55", "message": "- Code improvements", "committedDate": "2020-08-31T14:23:32Z", "type": "forcePushed"}, {"oid": "12d2bc83a0d1a4a2eb96facd07dddbac7cc6814d", "url": "https://github.com/kiegroup/kogito-apps/commit/12d2bc83a0d1a4a2eb96facd07dddbac7cc6814d", "message": "- Code improvements", "committedDate": "2020-08-31T20:03:45Z", "type": "commit"}, {"oid": "12d2bc83a0d1a4a2eb96facd07dddbac7cc6814d", "url": "https://github.com/kiegroup/kogito-apps/commit/12d2bc83a0d1a4a2eb96facd07dddbac7cc6814d", "message": "- Code improvements", "committedDate": "2020-08-31T20:03:45Z", "type": "forcePushed"}]}