{"pr_number": 554, "pr_title": "KOGITO-3589 Extract apps from runtimes", "pr_createdAt": "2020-11-24T07:29:32Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/554", "timeline": [{"oid": "c6cec7974c9c397a9c383ef74c3023e46c760afc", "url": "https://github.com/kiegroup/kogito-apps/commit/c6cec7974c9c397a9c383ef74c3023e46c760afc", "message": "KOGITO-3589 Extract apps from runtimes", "committedDate": "2020-12-15T17:42:23Z", "type": "commit"}, {"oid": "c6cec7974c9c397a9c383ef74c3023e46c760afc", "url": "https://github.com/kiegroup/kogito-apps/commit/c6cec7974c9c397a9c383ef74c3023e46c760afc", "message": "KOGITO-3589 Extract apps from runtimes", "committedDate": "2020-12-15T17:42:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQyNDYwMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/554#discussion_r544424602", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Not using githubscm.commitChanges() because globbing won't work.\n          \n          \n            \n                // See: https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r449268738\n          \n          \n            \n                dir(repo) {\n          \n          \n            \n                    addNotIgnoredPoms()\n          \n          \n            \n                    sh \"git commit -m '${commitMsg}'\"\n          \n          \n            \n                dir(repo) {\n          \n          \n            \n                    githubscm.commitChanges(commitMsg, { githubscm.findAndStageNotIgnoredFiles('pom.xml') })", "author": "Kevin-Mok", "createdAt": "2020-12-16T16:08:48Z", "path": "Jenkinsfile.deploy", "diffHunk": "@@ -0,0 +1,289 @@\n+import org.jenkinsci.plugins.workflow.libs.Library\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+import org.kie.jenkins.MavenCommand\n+import org.kie.jenkins.MavenStagingHelper\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+\n+    tools {\n+        maven 'kie-maven-3.6.2'\n+        jdk 'kie-jdk11'\n+    }\n+    \n+    options {\n+        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')\n+    }\n+\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        \n+        // Git information\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Which branch to build? Set if you are not on a multibranch pipeline.')\n+        string(name: 'GIT_AUTHOR', defaultValue: 'kiegroup', description: 'Which Git author repository ?')\n+\n+        // Build&test information\n+        string(name: 'MAVEN_DEPENDENCIES_REPOSITORY', defaultValue: '', description: 'Maven repository where to find dependencies if those are not in the default Jboss repository.')\n+        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip tests')\n+        string(name: 'MAVEN_SETTINGS_CONFIG_FILE_ID', defaultValue: 'kogito_release_settings', description: 'Maven settings configfile to use in pipeline for Maven commands')\n+\n+        // Deploy information\n+        string(name: 'MAVEN_DEPLOY_REPOSITORY', defaultValue: '', description: 'Specify a Maven repository to deploy the artifacts.')\n+\n+        // Release information\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        \n+        // Nexus staging default parameters\n+        string(name: 'NEXUS_RELEASE_URL', defaultValue: 'https://repository.jboss.org/nexus', description: 'Nexus URL for release staging')\n+        string(name: 'NEXUS_RELEASE_REPOSITORY_ID', defaultValue: 'jboss-releases-repository', description: 'Nexus Release repository ID for staging')\n+        string(name: 'NEXUS_STAGING_PROFILE_ID', defaultValue: '2161b7b8da0080', description: 'Nexus staging profile ID for release process ')\n+        string(name: 'NEXUS_BUILD_PROMOTION_PROFILE_ID', defaultValue: 'ea49ccd6f174', description: 'Nexus Build Promotion profile ID for release process')\n+\n+        // Bot author information. Set as params for easy testing.\n+        string(name: 'GIT_AUTHOR_BOT', defaultValue: 'bsig-gh-bot', description: 'From which author should the PR be created ?')\n+        string(name: 'BOT_CREDENTIALS_ID', defaultValue: 'bsig-gh-bot', description: 'Credentials for PR creation')\n+    }\n+\n+    environment {\n+        MAVEN_OPTS = '-Xms1024m -Xmx4g'\n+\n+        BOT_BRANCH_HASH = \"${util.generateHash(10)}\"\n+\n+        // Maven configuration\n+        MAVEN_DEPLOY_LOCAL_DIR=\"${WORKSPACE}/maven_deploy_dir\"\n+    }\n+\n+    stages {\n+        stage('Initialize') {\n+            steps {\n+                script {\n+                    cleanWs()\n+                    \n+                    if (params.DISPLAY_NAME != '') {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+\n+                    checkoutRepo('kogito-apps')\n+                }\n+            }\n+            post {\n+                success {\n+                    script {\n+                        setDeployPropertyIfNeeded('git.branch', getBuildBranch())\n+                        setDeployPropertyIfNeeded('git.author', getGitAuthor())\n+                        setDeployPropertyIfNeeded('project.version', getProjectVersion())\n+                        setDeployPropertyIfNeeded('release', isRelease())\n+\n+                    }\n+                }\n+            }\n+        }\n+\n+        stage('Prepare for PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                prepareForPR('kogito-apps')\n+            }\n+        }\n+        stage('Update project version'){\n+            when {\n+                expression { return getProjectVersion() != '' }\n+            }\n+            steps {\n+                script {\n+                    maven.mvnVersionsUpdateParentAndChildModules(getMavenCommand(), getProjectVersion(), true)\n+                }\n+            }\n+        }\n+        stage('Build kogito-apps') {\n+            steps {\n+                script {\n+                    getMavenCommand().skipTests(params.SKIP_TESTS).run('clean install')\n+                }\n+            }\n+            post {\n+                always {\n+                    saveReports(params.SKIP_TESTS)\n+                }\n+            }\n+        }\n+        stage('Deploy artifacts') {\n+            steps {\n+                script {\n+                    if(!isRelease() || params.MAVEN_DEPLOY_REPOSITORY){\n+                        runMavenDeploy(getMavenCommand())\n+                    } else {\n+                         // Deploy locally and then to staging\n+                        runMavenDeployLocally(getMavenCommand())\n+                        runMavenStage(getMavenCommand())\n+                    }\n+                }\n+            }\n+        }\n+        stage('Create PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                commitAndCreatePR('kogito-apps')\n+            }\n+            post {\n+                success {\n+                    script {\n+                        setDeployPropertyIfNeeded('kogito-apps.pr.source.uri', \"https://github.com/${getBotAuthor()}/kogito-apps\")\n+                        setDeployPropertyIfNeeded('kogito-apps.pr.source.ref', getBotBranch())\n+                        setDeployPropertyIfNeeded('kogito-apps.pr.target.uri', \"https://github.com/${getGitAuthor()}/kogito-apps\")\n+                        setDeployPropertyIfNeeded('kogito-apps.pr.target.ref', getBuildBranch())\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    post {\n+        always {\n+            script {\n+                def propertiesStr = deployProperties.collect{ entry ->  \"${entry.key}=${entry.value}\" }.join(\"\\n\")\n+                writeFile(text: propertiesStr, file: 'deployment.properties')\n+                archiveArtifacts(artifacts: 'deployment.properties')\n+            }\n+            cleanWs()\n+        }\n+    }\n+}\n+\n+void saveReports(boolean allowEmpty=false){\n+    junit testResults: '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml', allowEmptyResults: allowEmpty\n+}\n+\n+void checkoutRepo(String repo, String dirName=repo) {\n+    dir(dirName) {\n+        deleteDir()\n+        checkout(githubscm.resolveRepository(repo, getGitAuthor(), getBuildBranch(), false))\n+    }\n+}\n+\n+void prepareForPR(String repo) {\n+    dir(repo) {\n+        githubscm.forkRepo(getBotAuthorCredsID())\n+        githubscm.createBranch(getBotBranch())\n+    }\n+}\n+\n+void addNotIgnoredPoms() {\n+    // based on https://stackoverflow.com/a/59888964/8811872\n+    sh '''\n+    find . -type f -name 'pom.xml' > found_poms.txt\n+    poms_to_add=\"\"\n+    while IFS= read -r pom; do\n+        if ! git check-ignore -q \"\\$pom\"; then\n+            poms_to_add=\"\\$poms_to_add \\$pom\"\n+        fi\n+    done < found_poms.txt\n+    rm found_poms.txt\n+    git add \\$poms_to_add\n+    git status\n+    '''\n+}\n+\n+void commitAndCreatePR(String repo) {\n+    def commitMsg = \"[${getBuildBranch()}] Update project version to ${getProjectVersion()} for release\"\n+    def prBody = \"Generated by build ${BUILD_TAG}: ${BUILD_URL}.\\nPlease do not merge, it will be merged automatically after testing.\"\n+    // Not using githubscm.commitChanges() because globbing won't work.\n+    // See: https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r449268738\n+    dir(repo) {\n+        addNotIgnoredPoms()\n+        sh \"git commit -m '${commitMsg}'\"", "originalCommit": "c6cec7974c9c397a9c383ef74c3023e46c760afc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQyNTE3NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/554#discussion_r544425175", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            void addNotIgnoredPoms() {\n          \n          \n            \n                // based on https://stackoverflow.com/a/59888964/8811872\n          \n          \n            \n                sh '''\n          \n          \n            \n                find . -type f -name 'pom.xml' > found_poms.txt\n          \n          \n            \n                poms_to_add=\"\"\n          \n          \n            \n                while IFS= read -r pom; do\n          \n          \n            \n                    if ! git check-ignore -q \"\\$pom\"; then\n          \n          \n            \n                        poms_to_add=\"\\$poms_to_add \\$pom\"\n          \n          \n            \n                    fi\n          \n          \n            \n                done < found_poms.txt\n          \n          \n            \n                rm found_poms.txt\n          \n          \n            \n                git add \\$poms_to_add\n          \n          \n            \n                git status\n          \n          \n            \n                '''\n          \n          \n            \n            }", "author": "Kevin-Mok", "createdAt": "2020-12-16T16:09:27Z", "path": "Jenkinsfile.deploy", "diffHunk": "@@ -0,0 +1,289 @@\n+import org.jenkinsci.plugins.workflow.libs.Library\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+import org.kie.jenkins.MavenCommand\n+import org.kie.jenkins.MavenStagingHelper\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+\n+    tools {\n+        maven 'kie-maven-3.6.2'\n+        jdk 'kie-jdk11'\n+    }\n+    \n+    options {\n+        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')\n+    }\n+\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        \n+        // Git information\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Which branch to build? Set if you are not on a multibranch pipeline.')\n+        string(name: 'GIT_AUTHOR', defaultValue: 'kiegroup', description: 'Which Git author repository ?')\n+\n+        // Build&test information\n+        string(name: 'MAVEN_DEPENDENCIES_REPOSITORY', defaultValue: '', description: 'Maven repository where to find dependencies if those are not in the default Jboss repository.')\n+        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip tests')\n+        string(name: 'MAVEN_SETTINGS_CONFIG_FILE_ID', defaultValue: 'kogito_release_settings', description: 'Maven settings configfile to use in pipeline for Maven commands')\n+\n+        // Deploy information\n+        string(name: 'MAVEN_DEPLOY_REPOSITORY', defaultValue: '', description: 'Specify a Maven repository to deploy the artifacts.')\n+\n+        // Release information\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        \n+        // Nexus staging default parameters\n+        string(name: 'NEXUS_RELEASE_URL', defaultValue: 'https://repository.jboss.org/nexus', description: 'Nexus URL for release staging')\n+        string(name: 'NEXUS_RELEASE_REPOSITORY_ID', defaultValue: 'jboss-releases-repository', description: 'Nexus Release repository ID for staging')\n+        string(name: 'NEXUS_STAGING_PROFILE_ID', defaultValue: '2161b7b8da0080', description: 'Nexus staging profile ID for release process ')\n+        string(name: 'NEXUS_BUILD_PROMOTION_PROFILE_ID', defaultValue: 'ea49ccd6f174', description: 'Nexus Build Promotion profile ID for release process')\n+\n+        // Bot author information. Set as params for easy testing.\n+        string(name: 'GIT_AUTHOR_BOT', defaultValue: 'bsig-gh-bot', description: 'From which author should the PR be created ?')\n+        string(name: 'BOT_CREDENTIALS_ID', defaultValue: 'bsig-gh-bot', description: 'Credentials for PR creation')\n+    }\n+\n+    environment {\n+        MAVEN_OPTS = '-Xms1024m -Xmx4g'\n+\n+        BOT_BRANCH_HASH = \"${util.generateHash(10)}\"\n+\n+        // Maven configuration\n+        MAVEN_DEPLOY_LOCAL_DIR=\"${WORKSPACE}/maven_deploy_dir\"\n+    }\n+\n+    stages {\n+        stage('Initialize') {\n+            steps {\n+                script {\n+                    cleanWs()\n+                    \n+                    if (params.DISPLAY_NAME != '') {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+\n+                    checkoutRepo('kogito-apps')\n+                }\n+            }\n+            post {\n+                success {\n+                    script {\n+                        setDeployPropertyIfNeeded('git.branch', getBuildBranch())\n+                        setDeployPropertyIfNeeded('git.author', getGitAuthor())\n+                        setDeployPropertyIfNeeded('project.version', getProjectVersion())\n+                        setDeployPropertyIfNeeded('release', isRelease())\n+\n+                    }\n+                }\n+            }\n+        }\n+\n+        stage('Prepare for PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                prepareForPR('kogito-apps')\n+            }\n+        }\n+        stage('Update project version'){\n+            when {\n+                expression { return getProjectVersion() != '' }\n+            }\n+            steps {\n+                script {\n+                    maven.mvnVersionsUpdateParentAndChildModules(getMavenCommand(), getProjectVersion(), true)\n+                }\n+            }\n+        }\n+        stage('Build kogito-apps') {\n+            steps {\n+                script {\n+                    getMavenCommand().skipTests(params.SKIP_TESTS).run('clean install')\n+                }\n+            }\n+            post {\n+                always {\n+                    saveReports(params.SKIP_TESTS)\n+                }\n+            }\n+        }\n+        stage('Deploy artifacts') {\n+            steps {\n+                script {\n+                    if(!isRelease() || params.MAVEN_DEPLOY_REPOSITORY){\n+                        runMavenDeploy(getMavenCommand())\n+                    } else {\n+                         // Deploy locally and then to staging\n+                        runMavenDeployLocally(getMavenCommand())\n+                        runMavenStage(getMavenCommand())\n+                    }\n+                }\n+            }\n+        }\n+        stage('Create PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                commitAndCreatePR('kogito-apps')\n+            }\n+            post {\n+                success {\n+                    script {\n+                        setDeployPropertyIfNeeded('kogito-apps.pr.source.uri', \"https://github.com/${getBotAuthor()}/kogito-apps\")\n+                        setDeployPropertyIfNeeded('kogito-apps.pr.source.ref', getBotBranch())\n+                        setDeployPropertyIfNeeded('kogito-apps.pr.target.uri', \"https://github.com/${getGitAuthor()}/kogito-apps\")\n+                        setDeployPropertyIfNeeded('kogito-apps.pr.target.ref', getBuildBranch())\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    post {\n+        always {\n+            script {\n+                def propertiesStr = deployProperties.collect{ entry ->  \"${entry.key}=${entry.value}\" }.join(\"\\n\")\n+                writeFile(text: propertiesStr, file: 'deployment.properties')\n+                archiveArtifacts(artifacts: 'deployment.properties')\n+            }\n+            cleanWs()\n+        }\n+    }\n+}\n+\n+void saveReports(boolean allowEmpty=false){\n+    junit testResults: '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml', allowEmptyResults: allowEmpty\n+}\n+\n+void checkoutRepo(String repo, String dirName=repo) {\n+    dir(dirName) {\n+        deleteDir()\n+        checkout(githubscm.resolveRepository(repo, getGitAuthor(), getBuildBranch(), false))\n+    }\n+}\n+\n+void prepareForPR(String repo) {\n+    dir(repo) {\n+        githubscm.forkRepo(getBotAuthorCredsID())\n+        githubscm.createBranch(getBotBranch())\n+    }\n+}\n+\n+void addNotIgnoredPoms() {\n+    // based on https://stackoverflow.com/a/59888964/8811872\n+    sh '''\n+    find . -type f -name 'pom.xml' > found_poms.txt\n+    poms_to_add=\"\"\n+    while IFS= read -r pom; do\n+        if ! git check-ignore -q \"\\$pom\"; then\n+            poms_to_add=\"\\$poms_to_add \\$pom\"\n+        fi\n+    done < found_poms.txt\n+    rm found_poms.txt\n+    git add \\$poms_to_add\n+    git status\n+    '''\n+}\n+", "originalCommit": "c6cec7974c9c397a9c383ef74c3023e46c760afc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQyNjYyOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/554#discussion_r544426629", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            void addNotIgnoredPoms() {\n          \n          \n            \n                // based on https://stackoverflow.com/a/59888964/8811872\n          \n          \n            \n                sh '''\n          \n          \n            \n                find . -type f -name 'pom.xml' > found_poms.txt\n          \n          \n            \n                poms_to_add=\"\"\n          \n          \n            \n                while IFS= read -r pom; do\n          \n          \n            \n                    if ! git check-ignore -q \"\\$pom\"; then\n          \n          \n            \n                        poms_to_add=\"\\$poms_to_add \\$pom\"\n          \n          \n            \n                    fi\n          \n          \n            \n                done < found_poms.txt\n          \n          \n            \n                rm found_poms.txt\n          \n          \n            \n                git add \\$poms_to_add\n          \n          \n            \n                '''\n          \n          \n            \n            }", "author": "Kevin-Mok", "createdAt": "2020-12-16T16:11:15Z", "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,292 @@\n+import org.jenkinsci.plugins.workflow.libs.Library\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+import org.kie.jenkins.MavenCommand\n+\n+deployProperties = [:]\n+pipelineProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7'\n+    }\n+\n+    tools {\n+        maven 'kie-maven-3.6.2'\n+        jdk 'kie-jdk11'\n+    }\n+    \n+    options {\n+        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')\n+    }\n+\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        \n+        // Deploy job url to retrieve deployment.properties\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        \n+        // Git information which can override `deployment.properties`\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: '', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        string(name: 'GIT_AUTHOR', defaultValue: '', description: 'Override `deployment.properties`. Which Git author repository ?')\n+        \n+        // Build&Deploy information for next snapshots\n+        string(name: 'MAVEN_SETTINGS_CONFIG_FILE_ID', defaultValue: 'kogito_release_settings', description: 'Maven settings configfile to use in pipeline for Maven commands')\n+        string(name: 'MAVEN_DEPENDENCIES_REPOSITORY', defaultValue: '', description: 'Maven repository where to find dependencies if those are not in the default Jboss repository.')\n+        string(name: 'MAVEN_DEPLOY_REPOSITORY', defaultValue: '', description: 'Specify a Maven repository to deploy the artifacts.')\n+\n+        // Release information which can override `deployment.properties`\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'STAGING_REPO_URL', defaultValue: '', description: 'Override `deployment.properties`.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+\n+        // Bot author information. Set as params for easy testing.\n+        string(name: 'BOT_CREDENTIALS_ID', defaultValue: 'bsig-gh-bot', description: 'Credentials for PR creation')\n+\n+        // Main author creds\n+        string(name: 'AUTHOR_CREDS_ID', defaultValue: 'kie-ci', description: 'Credentials for PR merge')\n+        string(name: 'GITHUB_TOKEN_CREDS_ID', defaultValue: 'kie-ci2-token', description: 'GH token to be used with GH CLI')\n+    }\n+\n+    environment {\n+        PROPERTIES_FILE_NAME = 'deployment.properties'\n+\n+        BOT_BRANCH_HASH = \"${util.generateHash(10)}\"\n+        \n+        GITHUB_CLI_VERSION = '0.11.1'\n+    }\n+\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    cleanWs()\n+                    \n+                    if (params.DISPLAY_NAME != '') {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+\n+                    installGithubCLI()\n+                }\n+            }\n+        }\n+        stage('Merge deploy PR and tag') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps{\n+                script {\n+                    dir('kogito-apps') {\n+                        checkoutRepo('kogito-apps')\n+                        mergeAndPush('kogito-apps', getDeployPrLink('kogito-apps'))\n+                        tagLatest()\n+                    }\n+                }\n+            }\n+        }\n+        stage('Set apps next snapshot version'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                script {\n+                    dir('kogito-apps-bot') {\n+                        prepareForPR('kogito-apps')\n+\n+                        maven.mvnVersionsUpdateParentAndChildModules(getMavenCommand(), getSnapshotVersion(), true)\n+\n+                        commitAndCreatePR('kogito-apps')\n+                    }\n+                    dir('kogito-apps') {\n+                        sh \"git checkout ${getBuildBranch()}\"\n+                        mergeAndPush('kogito-apps', getPipelinePrLink('kogito-apps'))\n+\n+                        runMavenDeploy(getMavenCommand())\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    post {\n+        always {\n+            cleanWs()\n+        }\n+    }\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Deployment properties\n+//////////////////////////////////////////////////////////////////////////////\n+\n+void readDeployProperties(){\n+    String deployUrl = params.DEPLOY_BUILD_URL\n+    if (deployUrl != ''){\n+        if(!deployUrl.endsWith('/')){\n+            deployUrl += '/'\n+        }\n+        sh \"wget ${deployUrl}artifact/${PROPERTIES_FILE_NAME} -O ${PROPERTIES_FILE_NAME}\"\n+        deployProperties = readProperties file: PROPERTIES_FILE_NAME\n+        // echo all properties\n+        echo deployProperties.collect{ entry -> \"${entry.key}=${entry.value}\" }.join('\\n')\n+    }\n+}\n+\n+boolean hasDeployProperty(String key){\n+    return deployProperties[key] != null\n+}\n+\n+String getDeployProperty(String key){\n+    if(hasDeployProperty(key)){\n+        return deployProperties[key]\n+    }\n+    return ''\n+}\n+\n+String getParamOrDeployProperty(String paramKey, String deployPropertyKey){\n+    if (params[paramKey] != ''){\n+        return params[paramKey]\n+    }\n+    return getDeployProperty(deployPropertyKey)\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Getter / Setter\n+//////////////////////////////////////////////////////////////////////////////\n+\n+boolean isRelease() {\n+    return params.RELEASE || (getDeployProperty('release') == 'true')\n+}\n+\n+String getProjectVersion() {\n+    return getParamOrDeployProperty('PROJECT_VERSION', 'project.version')\n+}\n+\n+String getSnapshotVersion() {\n+    return util.getNextVersion(getProjectVersion(), 'micro')\n+}\n+\n+String getGitTag() {\n+    return params.GIT_TAG != '' ? params.GIT_TAG : getProjectVersion()\n+}\n+\n+String getBuildBranch() {\n+    return getParamOrDeployProperty('BUILD_BRANCH_NAME', 'git.branch')\n+}\n+\n+String getGitAuthor() {\n+    return getParamOrDeployProperty('GIT_AUTHOR', 'git.author')\n+}\n+\n+String getGitAuthorCredsID(){\n+    return params.AUTHOR_CREDS_ID\n+}\n+\n+String getBotAuthorCredsID(){\n+    return params.BOT_CREDENTIALS_ID\n+}\n+\n+String getDeployPrLink(String repo){\n+    return getDeployProperty(\"${repo}.pr.link\")\n+}\n+\n+String getPipelinePrLink(String repo){\n+    return pipelineProperties[\"${repo}.pr.link\"]\n+}\n+\n+void setPipelinePrLink(String repo, String value){\n+    pipelineProperties[\"${repo}.pr.link\"] = value\n+}\n+\n+String getSnapshotBranch(){\n+    return \"${getSnapshotVersion().toLowerCase()}-${env.BOT_BRANCH_HASH}\"\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Git\n+//////////////////////////////////////////////////////////////////////////////\n+\n+void checkoutRepo(String repo) {\n+    deleteDir()\n+    checkout(githubscm.resolveRepository(repo, getGitAuthor(), getBuildBranch(), false))\n+    // need to manually checkout branch since on a detached branch after checkout command\n+    sh \"git checkout ${getBuildBranch()}\"\n+}\n+\n+void mergeAndPush(String repo, String prLink) {\n+    if (prLink != '') {\n+        githubscm.mergePR(prLink, getGitAuthorCredsID())\n+        githubscm.pushObject('origin', getBuildBranch(), getGitAuthorCredsID())\n+    }\n+}\n+\n+void tagLatest() {\n+    if (getGitTag() != '') {\n+        githubscm.tagRepository(getGitTag(), env.BUILD_TAG)\n+        githubscm.pushObject('origin', \"--tags ${getGitTag()}\", getGitAuthorCredsID())\n+    }\n+}\n+\n+void prepareForPR(String repo) {\n+    checkoutRepo(repo)\n+    githubscm.forkRepo(getBotAuthorCredsID())\n+    githubscm.createBranch(getSnapshotBranch())\n+}\n+\n+void addNotIgnoredPoms() {\n+    // based on https://stackoverflow.com/a/59888964/8811872\n+    sh '''\n+    find . -type f -name 'pom.xml' > found_poms.txt\n+    poms_to_add=\"\"\n+    while IFS= read -r pom; do\n+        if ! git check-ignore -q \"\\$pom\"; then\n+            poms_to_add=\"\\$poms_to_add \\$pom\"\n+        fi\n+    done < found_poms.txt\n+    rm found_poms.txt\n+    git add \\$poms_to_add\n+    '''\n+}\n+", "originalCommit": "c6cec7974c9c397a9c383ef74c3023e46c760afc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQyOTE0Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/554#discussion_r544429146", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Not using githubscm.commitChanges() because globbing won't work.\n          \n          \n            \n                // See: https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r449268738\n          \n          \n            \n                addNotIgnoredPoms()\n          \n          \n            \n                sh \"git commit -m '${commitMsg}'\"\n          \n          \n            \n                \n          \n          \n            \n                githubscm.commitChanges(commitMsg, { githubscm.findAndStageNotIgnoredFiles('pom.xml') })", "author": "Kevin-Mok", "createdAt": "2020-12-16T16:14:17Z", "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,292 @@\n+import org.jenkinsci.plugins.workflow.libs.Library\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+import org.kie.jenkins.MavenCommand\n+\n+deployProperties = [:]\n+pipelineProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7'\n+    }\n+\n+    tools {\n+        maven 'kie-maven-3.6.2'\n+        jdk 'kie-jdk11'\n+    }\n+    \n+    options {\n+        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')\n+    }\n+\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        \n+        // Deploy job url to retrieve deployment.properties\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        \n+        // Git information which can override `deployment.properties`\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: '', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        string(name: 'GIT_AUTHOR', defaultValue: '', description: 'Override `deployment.properties`. Which Git author repository ?')\n+        \n+        // Build&Deploy information for next snapshots\n+        string(name: 'MAVEN_SETTINGS_CONFIG_FILE_ID', defaultValue: 'kogito_release_settings', description: 'Maven settings configfile to use in pipeline for Maven commands')\n+        string(name: 'MAVEN_DEPENDENCIES_REPOSITORY', defaultValue: '', description: 'Maven repository where to find dependencies if those are not in the default Jboss repository.')\n+        string(name: 'MAVEN_DEPLOY_REPOSITORY', defaultValue: '', description: 'Specify a Maven repository to deploy the artifacts.')\n+\n+        // Release information which can override `deployment.properties`\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'STAGING_REPO_URL', defaultValue: '', description: 'Override `deployment.properties`.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+\n+        // Bot author information. Set as params for easy testing.\n+        string(name: 'BOT_CREDENTIALS_ID', defaultValue: 'bsig-gh-bot', description: 'Credentials for PR creation')\n+\n+        // Main author creds\n+        string(name: 'AUTHOR_CREDS_ID', defaultValue: 'kie-ci', description: 'Credentials for PR merge')\n+        string(name: 'GITHUB_TOKEN_CREDS_ID', defaultValue: 'kie-ci2-token', description: 'GH token to be used with GH CLI')\n+    }\n+\n+    environment {\n+        PROPERTIES_FILE_NAME = 'deployment.properties'\n+\n+        BOT_BRANCH_HASH = \"${util.generateHash(10)}\"\n+        \n+        GITHUB_CLI_VERSION = '0.11.1'\n+    }\n+\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    cleanWs()\n+                    \n+                    if (params.DISPLAY_NAME != '') {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+\n+                    installGithubCLI()\n+                }\n+            }\n+        }\n+        stage('Merge deploy PR and tag') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps{\n+                script {\n+                    dir('kogito-apps') {\n+                        checkoutRepo('kogito-apps')\n+                        mergeAndPush('kogito-apps', getDeployPrLink('kogito-apps'))\n+                        tagLatest()\n+                    }\n+                }\n+            }\n+        }\n+        stage('Set apps next snapshot version'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                script {\n+                    dir('kogito-apps-bot') {\n+                        prepareForPR('kogito-apps')\n+\n+                        maven.mvnVersionsUpdateParentAndChildModules(getMavenCommand(), getSnapshotVersion(), true)\n+\n+                        commitAndCreatePR('kogito-apps')\n+                    }\n+                    dir('kogito-apps') {\n+                        sh \"git checkout ${getBuildBranch()}\"\n+                        mergeAndPush('kogito-apps', getPipelinePrLink('kogito-apps'))\n+\n+                        runMavenDeploy(getMavenCommand())\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    post {\n+        always {\n+            cleanWs()\n+        }\n+    }\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Deployment properties\n+//////////////////////////////////////////////////////////////////////////////\n+\n+void readDeployProperties(){\n+    String deployUrl = params.DEPLOY_BUILD_URL\n+    if (deployUrl != ''){\n+        if(!deployUrl.endsWith('/')){\n+            deployUrl += '/'\n+        }\n+        sh \"wget ${deployUrl}artifact/${PROPERTIES_FILE_NAME} -O ${PROPERTIES_FILE_NAME}\"\n+        deployProperties = readProperties file: PROPERTIES_FILE_NAME\n+        // echo all properties\n+        echo deployProperties.collect{ entry -> \"${entry.key}=${entry.value}\" }.join('\\n')\n+    }\n+}\n+\n+boolean hasDeployProperty(String key){\n+    return deployProperties[key] != null\n+}\n+\n+String getDeployProperty(String key){\n+    if(hasDeployProperty(key)){\n+        return deployProperties[key]\n+    }\n+    return ''\n+}\n+\n+String getParamOrDeployProperty(String paramKey, String deployPropertyKey){\n+    if (params[paramKey] != ''){\n+        return params[paramKey]\n+    }\n+    return getDeployProperty(deployPropertyKey)\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Getter / Setter\n+//////////////////////////////////////////////////////////////////////////////\n+\n+boolean isRelease() {\n+    return params.RELEASE || (getDeployProperty('release') == 'true')\n+}\n+\n+String getProjectVersion() {\n+    return getParamOrDeployProperty('PROJECT_VERSION', 'project.version')\n+}\n+\n+String getSnapshotVersion() {\n+    return util.getNextVersion(getProjectVersion(), 'micro')\n+}\n+\n+String getGitTag() {\n+    return params.GIT_TAG != '' ? params.GIT_TAG : getProjectVersion()\n+}\n+\n+String getBuildBranch() {\n+    return getParamOrDeployProperty('BUILD_BRANCH_NAME', 'git.branch')\n+}\n+\n+String getGitAuthor() {\n+    return getParamOrDeployProperty('GIT_AUTHOR', 'git.author')\n+}\n+\n+String getGitAuthorCredsID(){\n+    return params.AUTHOR_CREDS_ID\n+}\n+\n+String getBotAuthorCredsID(){\n+    return params.BOT_CREDENTIALS_ID\n+}\n+\n+String getDeployPrLink(String repo){\n+    return getDeployProperty(\"${repo}.pr.link\")\n+}\n+\n+String getPipelinePrLink(String repo){\n+    return pipelineProperties[\"${repo}.pr.link\"]\n+}\n+\n+void setPipelinePrLink(String repo, String value){\n+    pipelineProperties[\"${repo}.pr.link\"] = value\n+}\n+\n+String getSnapshotBranch(){\n+    return \"${getSnapshotVersion().toLowerCase()}-${env.BOT_BRANCH_HASH}\"\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Git\n+//////////////////////////////////////////////////////////////////////////////\n+\n+void checkoutRepo(String repo) {\n+    deleteDir()\n+    checkout(githubscm.resolveRepository(repo, getGitAuthor(), getBuildBranch(), false))\n+    // need to manually checkout branch since on a detached branch after checkout command\n+    sh \"git checkout ${getBuildBranch()}\"\n+}\n+\n+void mergeAndPush(String repo, String prLink) {\n+    if (prLink != '') {\n+        githubscm.mergePR(prLink, getGitAuthorCredsID())\n+        githubscm.pushObject('origin', getBuildBranch(), getGitAuthorCredsID())\n+    }\n+}\n+\n+void tagLatest() {\n+    if (getGitTag() != '') {\n+        githubscm.tagRepository(getGitTag(), env.BUILD_TAG)\n+        githubscm.pushObject('origin', \"--tags ${getGitTag()}\", getGitAuthorCredsID())\n+    }\n+}\n+\n+void prepareForPR(String repo) {\n+    checkoutRepo(repo)\n+    githubscm.forkRepo(getBotAuthorCredsID())\n+    githubscm.createBranch(getSnapshotBranch())\n+}\n+\n+void addNotIgnoredPoms() {\n+    // based on https://stackoverflow.com/a/59888964/8811872\n+    sh '''\n+    find . -type f -name 'pom.xml' > found_poms.txt\n+    poms_to_add=\"\"\n+    while IFS= read -r pom; do\n+        if ! git check-ignore -q \"\\$pom\"; then\n+            poms_to_add=\"\\$poms_to_add \\$pom\"\n+        fi\n+    done < found_poms.txt\n+    rm found_poms.txt\n+    git add \\$poms_to_add\n+    '''\n+}\n+\n+void commitAndCreatePR(String repo) {\n+    def commitMsg = \"[${getBuildBranch()}] Update snapshot version to ${getSnapshotVersion()}\"\n+    def prBody = \"Generated by build ${BUILD_TAG}: ${BUILD_URL}.\\nPlease do not merge, it will be merged automatically after testing.\"\n+    // Not using githubscm.commitChanges() because globbing won't work.\n+    // See: https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r449268738\n+    addNotIgnoredPoms()\n+    sh \"git commit -m '${commitMsg}'\"", "originalCommit": "c6cec7974c9c397a9c383ef74c3023e46c760afc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "383560511ec91288a3221a69a95cad3be1de1d6b", "url": "https://github.com/kiegroup/kogito-apps/commit/383560511ec91288a3221a69a95cad3be1de1d6b", "message": "Apply suggestions from code review\n\nCo-authored-by: Kevin Mok <kevin.mok@live.ca>", "committedDate": "2020-12-16T16:28:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2ODc1MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/554#discussion_r544968751", "bodyText": "Maybe worth moving to the shared libraries? (not in scope for this PR)", "author": "rsynek", "createdAt": "2020-12-17T10:13:34Z", "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,275 @@\n+import org.jenkinsci.plugins.workflow.libs.Library\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+import org.kie.jenkins.MavenCommand\n+\n+deployProperties = [:]\n+pipelineProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7'\n+    }\n+\n+    tools {\n+        maven 'kie-maven-3.6.2'\n+        jdk 'kie-jdk11'\n+    }\n+    \n+    options {\n+        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')\n+    }\n+\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        \n+        // Deploy job url to retrieve deployment.properties\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        \n+        // Git information which can override `deployment.properties`\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: '', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        string(name: 'GIT_AUTHOR', defaultValue: '', description: 'Override `deployment.properties`. Which Git author repository ?')\n+        \n+        // Build&Deploy information for next snapshots\n+        string(name: 'MAVEN_SETTINGS_CONFIG_FILE_ID', defaultValue: 'kogito_release_settings', description: 'Maven settings configfile to use in pipeline for Maven commands')\n+        string(name: 'MAVEN_DEPENDENCIES_REPOSITORY', defaultValue: '', description: 'Maven repository where to find dependencies if those are not in the default Jboss repository.')\n+        string(name: 'MAVEN_DEPLOY_REPOSITORY', defaultValue: '', description: 'Specify a Maven repository to deploy the artifacts.')\n+\n+        // Release information which can override `deployment.properties`\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'STAGING_REPO_URL', defaultValue: '', description: 'Override `deployment.properties`.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+\n+        // Bot author information. Set as params for easy testing.\n+        string(name: 'BOT_CREDENTIALS_ID', defaultValue: 'bsig-gh-bot', description: 'Credentials for PR creation')\n+\n+        // Main author creds\n+        string(name: 'AUTHOR_CREDS_ID', defaultValue: 'kie-ci', description: 'Credentials for PR merge')\n+        string(name: 'GITHUB_TOKEN_CREDS_ID', defaultValue: 'kie-ci2-token', description: 'GH token to be used with GH CLI')\n+    }\n+\n+    environment {\n+        PROPERTIES_FILE_NAME = 'deployment.properties'\n+\n+        BOT_BRANCH_HASH = \"${util.generateHash(10)}\"\n+        \n+        GITHUB_CLI_VERSION = '0.11.1'\n+    }\n+\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    cleanWs()\n+                    \n+                    if (params.DISPLAY_NAME != '') {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+\n+                    installGithubCLI()\n+                }\n+            }\n+        }\n+        stage('Merge deploy PR and tag') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps{\n+                script {\n+                    dir('kogito-apps') {\n+                        checkoutRepo('kogito-apps')\n+                        mergeAndPush('kogito-apps', getDeployPrLink('kogito-apps'))\n+                        tagLatest()\n+                    }\n+                }\n+            }\n+        }\n+        stage('Set apps next snapshot version'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                script {\n+                    dir('kogito-apps-bot') {\n+                        prepareForPR('kogito-apps')\n+\n+                        maven.mvnVersionsUpdateParentAndChildModules(getMavenCommand(), getSnapshotVersion(), true)\n+\n+                        commitAndCreatePR('kogito-apps')\n+                    }\n+                    dir('kogito-apps') {\n+                        sh \"git checkout ${getBuildBranch()}\"\n+                        mergeAndPush('kogito-apps', getPipelinePrLink('kogito-apps'))\n+\n+                        runMavenDeploy(getMavenCommand())\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    post {\n+        always {\n+            cleanWs()\n+        }\n+    }\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Deployment properties\n+//////////////////////////////////////////////////////////////////////////////\n+\n+void readDeployProperties(){\n+    String deployUrl = params.DEPLOY_BUILD_URL\n+    if (deployUrl != ''){\n+        if(!deployUrl.endsWith('/')){\n+            deployUrl += '/'\n+        }\n+        sh \"wget ${deployUrl}artifact/${PROPERTIES_FILE_NAME} -O ${PROPERTIES_FILE_NAME}\"\n+        deployProperties = readProperties file: PROPERTIES_FILE_NAME\n+        // echo all properties\n+        echo deployProperties.collect{ entry -> \"${entry.key}=${entry.value}\" }.join('\\n')\n+    }\n+}\n+\n+boolean hasDeployProperty(String key){\n+    return deployProperties[key] != null\n+}\n+\n+String getDeployProperty(String key){\n+    if(hasDeployProperty(key)){\n+        return deployProperties[key]\n+    }\n+    return ''\n+}\n+\n+String getParamOrDeployProperty(String paramKey, String deployPropertyKey){\n+    if (params[paramKey] != ''){\n+        return params[paramKey]\n+    }\n+    return getDeployProperty(deployPropertyKey)\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Getter / Setter\n+//////////////////////////////////////////////////////////////////////////////\n+\n+boolean isRelease() {\n+    return params.RELEASE || (getDeployProperty('release') == 'true')\n+}\n+\n+String getProjectVersion() {\n+    return getParamOrDeployProperty('PROJECT_VERSION', 'project.version')\n+}\n+\n+String getSnapshotVersion() {\n+    return util.getNextVersion(getProjectVersion(), 'micro')\n+}\n+\n+String getGitTag() {\n+    return params.GIT_TAG != '' ? params.GIT_TAG : getProjectVersion()\n+}\n+\n+String getBuildBranch() {\n+    return getParamOrDeployProperty('BUILD_BRANCH_NAME', 'git.branch')\n+}\n+\n+String getGitAuthor() {\n+    return getParamOrDeployProperty('GIT_AUTHOR', 'git.author')\n+}\n+\n+String getGitAuthorCredsID(){\n+    return params.AUTHOR_CREDS_ID\n+}\n+\n+String getBotAuthorCredsID(){\n+    return params.BOT_CREDENTIALS_ID\n+}\n+\n+String getDeployPrLink(String repo){\n+    return getDeployProperty(\"${repo}.pr.link\")\n+}\n+\n+String getPipelinePrLink(String repo){\n+    return pipelineProperties[\"${repo}.pr.link\"]\n+}\n+\n+void setPipelinePrLink(String repo, String value){\n+    pipelineProperties[\"${repo}.pr.link\"] = value\n+}\n+\n+String getSnapshotBranch(){\n+    return \"${getSnapshotVersion().toLowerCase()}-${env.BOT_BRANCH_HASH}\"\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Git\n+//////////////////////////////////////////////////////////////////////////////\n+\n+void checkoutRepo(String repo) {\n+    deleteDir()\n+    checkout(githubscm.resolveRepository(repo, getGitAuthor(), getBuildBranch(), false))\n+    // need to manually checkout branch since on a detached branch after checkout command\n+    sh \"git checkout ${getBuildBranch()}\"\n+}\n+\n+void mergeAndPush(String repo, String prLink) {\n+    if (prLink != '') {\n+        githubscm.mergePR(prLink, getGitAuthorCredsID())\n+        githubscm.pushObject('origin', getBuildBranch(), getGitAuthorCredsID())\n+    }\n+}\n+\n+void tagLatest() {\n+    if (getGitTag() != '') {\n+        githubscm.tagRepository(getGitTag(), env.BUILD_TAG)\n+        githubscm.pushObject('origin', \"--tags ${getGitTag()}\", getGitAuthorCredsID())\n+    }\n+}\n+\n+void prepareForPR(String repo) {\n+    checkoutRepo(repo)\n+    githubscm.forkRepo(getBotAuthorCredsID())\n+    githubscm.createBranch(getSnapshotBranch())\n+}\n+\n+void commitAndCreatePR(String repo) {\n+    def commitMsg = \"[${getBuildBranch()}] Update snapshot version to ${getSnapshotVersion()}\"\n+    def prBody = \"Generated by build ${BUILD_TAG}: ${BUILD_URL}.\\nPlease do not merge, it will be merged automatically after testing.\"\n+    \n+    githubscm.commitChanges(commitMsg, { githubscm.findAndStageNotIgnoredFiles('pom.xml') })\n+    githubscm.pushObject('origin', getSnapshotBranch(), getBotAuthorCredsID())\n+    setPipelinePrLink(repo, githubscm.createPR(commitMsg, prBody, getBuildBranch(), getBotAuthorCredsID()))\n+}\n+\n+void installGithubCLI() {\n+    sh \"\"\"\n+    wget https://github.com/cli/cli/releases/download/v${env.GITHUB_CLI_VERSION}/gh_${env.GITHUB_CLI_VERSION}_linux_amd64.tar.gz\n+    tar xzf gh_${env.GITHUB_CLI_VERSION}_linux_amd64.tar.gz\n+    mv gh_${env.GITHUB_CLI_VERSION}_linux_amd64/bin/gh .\n+    rm -r gh_${env.GITHUB_CLI_VERSION}_linux_amd64*\n+    \"\"\"\n+}", "originalCommit": "383560511ec91288a3221a69a95cad3be1de1d6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA3ODUwOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/554#discussion_r545078508", "bodyText": "will do in a future PR ;)", "author": "radtriste", "createdAt": "2020-12-17T13:11:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2ODc1MQ=="}], "type": "inlineReview"}]}