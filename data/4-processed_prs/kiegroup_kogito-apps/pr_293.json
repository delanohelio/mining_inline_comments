{"pr_number": 293, "pr_title": "[KOGITO-2121] MongoDB for Data Index service", "pr_createdAt": "2020-06-24T01:18:24Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/293", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwMzEwOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r444703108", "bodyText": "I think here you can use some operators defined in the MongoDB client. Something like\nimport static com.mongodb.client.model.Filters.and;\nimport static com.mongodb.client.model.Filters.eq;\nimport static com.mongodb.client.model.Filters.gt;\nimport static com.mongodb.client.model.Filters.gte;\nimport static com.mongodb.client.model.Filters.in;\nimport static com.mongodb.client.model.Filters.lt;\nimport static com.mongodb.client.model.Filters.lte;\nimport static com.mongodb.client.model.Filters.not;\nimport static com.mongodb.client.model.Filters.or;\nimport static com.mongodb.client.model.Filters.regex;\n\n\n\n    @Override\n    public List<T> execute() {\n        List<Bson> conditions = filters.stream().map(x -> createCondition(x)).collect(Collectors.toList());\n        Iterator<T> it = collection.find(and(conditions)).iterator();\n\n        List<T> copy = new ArrayList<T>();\n        while (it.hasNext()) {\n            copy.add(it.next());\n        }\n        return copy;\n    }\n\n    private Bson createCondition(AttributeFilter filter) {\n        switch (filter.getCondition()) {\n            case CONTAINS:\n                return regex(filter.getAttribute(), getValueForQueryString(filter.getValue()));\n            case CONTAINS_ALL:\n                return and((Iterable<Bson>) ((List) filter.getValue()).stream().map(x -> regex(filter.getAttribute(), getValueForQueryString(x))).iterator());\n            case CONTAINS_ANY:\n                return or((Iterable<Bson>) ((List) filter.getValue()).stream().map(x -> regex(filter.getAttribute(), getValueForQueryString(x))).iterator());\n            case LIKE:\n                return regex(filter.getAttribute(), getValueForQueryString(filter.getValue()) + \"*\");\n            case EQUAL:\n                return eq(filter.getAttribute(), filter.getValue());\n            case IN:\n                return in(filter.getAttribute(), ((List) filter.getValue()).stream().iterator());\n            case IS_NULL:\n                return eq(filter.getAttribute(), null);\n            case NOT_NULL:\n                return not(eq(filter.getAttribute(), null));\n            case BETWEEN:\n                List<Object> value = (List<Object>) filter.getValue();\n                return and(gte(filter.getAttribute(), value.get(0)), lte(filter.getAttribute(), value.get(1)));\n            case GT:\n                return gt(filter.getAttribute(), filter.getValue());\n            case GTE:\n                return gte(filter.getAttribute(), filter.getValue());\n            case LT:\n                return lt(filter.getAttribute(), filter.getValue());\n            case LTE:\n                return lte(filter.getAttribute(), filter.getValue());\n            case OR:\n                return or(createCondition(filter));\n            case AND:\n                return and(createCondition(filter));\n            default:\n                return null;\n        }\n    }\n    private static String getValueForQueryString(Object value) {\n        return value instanceof String ? \"'\" + value + \"'\" : value.toString();\n    }\n\nIf it works.. we would have less code, easier to understand", "author": "r00ta", "createdAt": "2020-06-24T07:39:11Z", "path": "persistence-commons/persistence-commons-mongodb/src/main/java/org/kie/kogito/persistence/mongodb/utils/QueryUtils.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.persistence.mongodb.utils;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+import io.quarkus.mongodb.panache.runtime.MongoOperations;\n+import org.kie.kogito.persistence.api.query.AttributeFilter;\n+\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.joining;\n+\n+public class QueryUtils {\n+\n+    public static Function<String, String> FILTER_ATTRIBUTE_FUNCTION = attribute -> format(\"'%s'\", \"id\".equalsIgnoreCase(attribute) ? MongoOperations.ID : attribute);\n+\n+    public static Function<String, String> SORT_ATTRIBUTE_FUNCTION = attribute -> format(\"%s\", \"id\".equalsIgnoreCase(attribute) ? MongoOperations.ID : attribute);\n+\n+    public static BiFunction<String, Object, String> FILTER_VALUE_AS_STRING_FUNCTION = (attribute, value) -> value instanceof String ? \"'\" + value + \"'\" : value.toString();\n+\n+    public static Optional<String> generateQueryString(List<AttributeFilter<?>> filters, Function<String, String> filterAttributeFunction, BiFunction<String, Object, String> filterValueFunction) {\n+        return Optional.ofNullable(filters).map(fs -> format(\"{ %s }\", fs.stream().map(f -> generateSingleQueryString(f, filterAttributeFunction, filterValueFunction)).collect(joining(\", \"))));\n+    }\n+\n+    private static <T> String generateSingleQueryString(AttributeFilter<T> filter, Function<String, String> filterAttributeFunction, BiFunction<String, Object, String> filterValueFunction) {\n+        switch (filter.getCondition()) {\n+            case CONTAINS:\n+            case EQUAL:\n+                return format(\"%s: %s\", filterAttributeFunction.apply(filter.getAttribute()), filterValueFunction.apply(filter.getAttribute(), filter.getValue()));\n+            case LIKE:\n+                return format(\"%s: { $regex: /^%s$/ }\", filterAttributeFunction.apply(filter.getAttribute()), ((String) filter.getValue()).replaceAll(\"\\\\*\", \".*\"));\n+            case IS_NULL:\n+                return format(\"%s: { $exists: false }\", filterAttributeFunction.apply(filter.getAttribute()));\n+            case NOT_NULL:\n+                return format(\"%s: { $exists: true }\", filterAttributeFunction.apply(filter.getAttribute()));\n+            case GT:\n+                return format(\"%s: { $gt: %s }\", filterAttributeFunction.apply(filter.getAttribute()), filterValueFunction.apply(filter.getAttribute(), filter.getValue()));\n+            case GTE:\n+                return format(\"%s: { $gte: %s }\", filterAttributeFunction.apply(filter.getAttribute()), filterValueFunction.apply(filter.getAttribute(), filter.getValue()));\n+            case LT:\n+                return format(\"%s: { $lt: %s }\", filterAttributeFunction.apply(filter.getAttribute()), filterValueFunction.apply(filter.getAttribute(), filter.getValue()));\n+            case LTE:\n+                return format(\"%s: { $lte: %s }\", filterAttributeFunction.apply(filter.getAttribute()), filterValueFunction.apply(filter.getAttribute(), filter.getValue()));\n+            case BETWEEN:\n+                List<Object> value = (List<Object>) filter.getValue();\n+                return format(\"$and: [ { %s: { $gte: %s } }, { %s: { $lte: %s } } ]\", filterAttributeFunction.apply(filter.getAttribute()), filterValueFunction.apply(filter.getAttribute(), value.get(0)),\n+                              filterAttributeFunction.apply(filter.getAttribute()), filterValueFunction.apply(filter.getAttribute(), value.get(1)));\n+            case IN:\n+                return format(\"%s: { $in: [ %s ] }\", filterAttributeFunction.apply(filter.getAttribute()), ((List) filter.getValue()).stream().map(v -> filterValueFunction.apply(filter.getAttribute(), v)).collect(joining(\", \")));\n+            case CONTAINS_ALL:\n+                return format(\"%s: { $all: [ %s ] }\", filterAttributeFunction.apply(filter.getAttribute()), ((List) filter.getValue()).stream().map(v -> filterValueFunction.apply(filter.getAttribute(), v)).collect(joining(\", \")));\n+            case CONTAINS_ANY:\n+                return format(\"$or: [ %s ]\", ((List) filter.getValue()).stream().map(v -> filterValueFunction.apply(filter.getAttribute(), v)).map(v -> format(\"{ %s: { $in: [ %s ] } }\", filterAttributeFunction.apply(filter.getAttribute()), v)).collect(joining(\", \")));\n+            case OR:\n+                return format(\"$or: [ %s ]\", ((List<AttributeFilter<?>>) filter.getValue()).stream().map(f -> format(\"{ %s }\", generateSingleQueryString(f, filterAttributeFunction, filterValueFunction))).collect(joining(\", \")));\n+            case AND:\n+                return format(\"$and: [ %s ]\", ((List<AttributeFilter<?>>) filter.getValue()).stream().map(f -> format(\"{ %s }\", generateSingleQueryString(f, filterAttributeFunction, filterValueFunction))).collect(joining(\", \")));\n+            default:\n+                return null;", "originalCommit": "6505bb3886f0184506e6ed2fd18fed09534667b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAyOTc1Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r447029756", "bodyText": "Changed to user MongoDB client. Thanks.", "author": "xieshenzh", "createdAt": "2020-06-29T14:49:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwMzEwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMjAzMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r444712031", "bodyText": "Just a very small side note that is not really related to this PR. Isnt't better to rename them setObjectCreatedListener since there can be just one listener?", "author": "r00ta", "createdAt": "2020-06-24T07:55:57Z", "path": "persistence-commons/persistence-commons-mongodb/src/main/java/org/kie/kogito/persistence/mongodb/storage/AbstractStorage.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.persistence.mongodb.storage;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.model.ReplaceOptions;\n+import io.quarkus.mongodb.panache.runtime.MongoOperations;\n+import org.bson.BsonDocument;\n+import org.bson.BsonString;\n+import org.bson.Document;\n+import org.kie.kogito.persistence.api.Storage;\n+\n+public abstract class AbstractStorage<K, V, E> implements Storage<K, V> {\n+\n+    protected Consumer<V> objectCreatedListener;\n+    protected Consumer<V> objectUpdatedListener;\n+    protected Consumer<K> objectRemovedListener;\n+\n+    @Override\n+    public void addObjectCreatedListener(Consumer<V> consumer) {\n+        this.objectCreatedListener = consumer;\n+    }\n+\n+    @Override\n+    public void addObjectUpdatedListener(Consumer<V> consumer) {\n+        this.objectUpdatedListener = consumer;\n+    }\n+\n+    @Override\n+    public void addObjectRemovedListener(Consumer<K> consumer) {\n+        this.objectRemovedListener = consumer;\n+    }", "originalCommit": "6505bb3886f0184506e6ed2fd18fed09534667b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzMTk3MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r447031970", "bodyText": "I think the infinispan implementation supports multiple listeners, that's why it is named  addObjectCreatedListener.", "author": "xieshenzh", "createdAt": "2020-06-29T14:51:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMjAzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMzc1Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r444713752", "bodyText": "Shouldn't return v instead of the oldvalue?", "author": "r00ta", "createdAt": "2020-06-24T07:58:52Z", "path": "persistence-commons/persistence-commons-mongodb/src/main/java/org/kie/kogito/persistence/mongodb/storage/AbstractStorage.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.persistence.mongodb.storage;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.model.ReplaceOptions;\n+import io.quarkus.mongodb.panache.runtime.MongoOperations;\n+import org.bson.BsonDocument;\n+import org.bson.BsonString;\n+import org.bson.Document;\n+import org.kie.kogito.persistence.api.Storage;\n+\n+public abstract class AbstractStorage<K, V, E> implements Storage<K, V> {\n+\n+    protected Consumer<V> objectCreatedListener;\n+    protected Consumer<V> objectUpdatedListener;\n+    protected Consumer<K> objectRemovedListener;\n+\n+    @Override\n+    public void addObjectCreatedListener(Consumer<V> consumer) {\n+        this.objectCreatedListener = consumer;\n+    }\n+\n+    @Override\n+    public void addObjectUpdatedListener(Consumer<V> consumer) {\n+        this.objectUpdatedListener = consumer;\n+    }\n+\n+    @Override\n+    public void addObjectRemovedListener(Consumer<K> consumer) {\n+        this.objectRemovedListener = consumer;\n+    }\n+\n+    @Override\n+    public boolean containsKey(K o) {\n+        return getCollection().find(new Document(MongoOperations.ID, o)).iterator().hasNext();\n+    }\n+\n+    @Override\n+    public Set<Map.Entry<K, V>> entrySet() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    protected abstract MongoCollection<E> getCollection();\n+\n+    protected abstract E mapToEntity(K key, V value);\n+\n+    protected abstract V mapToModel(K key, E entity);\n+\n+    @Override\n+    public V get(Object o) {\n+        return Optional.ofNullable(getCollection().find(new Document(MongoOperations.ID, o)).first()).map(e -> mapToModel((K) o, e)).orElse(null);\n+    }\n+\n+    @Override\n+    public V put(K s, V v) {\n+        V oldValue = this.get(s);\n+        Optional.ofNullable(v).map(n -> mapToEntity(s, n)).ifPresent(\n+                e -> getCollection().replaceOne(\n+                        new BsonDocument(MongoOperations.ID, new BsonString(s.toString())),\n+                        e, new ReplaceOptions().upsert(true)));\n+        Optional.ofNullable(oldValue).ifPresentOrElse(o -> Optional.ofNullable(this.objectUpdatedListener).ifPresent(l -> l.accept(v)),\n+                                                      () -> Optional.ofNullable(this.objectCreatedListener).ifPresent(l -> l.accept(v)));\n+        return oldValue;", "originalCommit": "6505bb3886f0184506e6ed2fd18fed09534667b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEyOTAyOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r446129028", "bodyText": "I think we want to use same Java Map semantic for put so it is correct to return previous value", "author": "danielezonca", "createdAt": "2020-06-26T11:32:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMzc1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY5ODgxNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r444698814", "bodyText": "Can you please move version definition to kogito-runtimes bom?", "author": "danielezonca", "createdAt": "2020-06-24T07:30:21Z", "path": "data-index/data-index-storage/data-index-storage-mongodb/pom.xml", "diffHunk": "@@ -0,0 +1,73 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>data-index-storage</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>data-index-storage-mongodb</artifactId>\n+  <name>Kogito :: Data Index Storage MongoDB</name>\n+\n+  <properties>\n+    <version.org.mongodb.image>4.0</version.org.mongodb.image>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>data-index-storage-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>persistence-commons-mongodb</artifactId>\n+      <version>${project.version}</version>", "originalCommit": "6505bb3886f0184506e6ed2fd18fed09534667b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzMzAxMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r447033013", "bodyText": "Moved to kogito-runtime bom. Created PR kiegroup/kogito-runtimes#591 .", "author": "xieshenzh", "createdAt": "2020-06-29T14:53:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY5ODgxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY5ODg5Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r444698896", "bodyText": "Can you please move version definition to kogito-runtimes bom?", "author": "danielezonca", "createdAt": "2020-06-24T07:30:31Z", "path": "data-index/data-index-storage/data-index-storage-mongodb/pom.xml", "diffHunk": "@@ -0,0 +1,73 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>data-index-storage</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>data-index-storage-mongodb</artifactId>\n+  <name>Kogito :: Data Index Storage MongoDB</name>\n+\n+  <properties>\n+    <version.org.mongodb.image>4.0</version.org.mongodb.image>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>data-index-storage-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>persistence-commons-mongodb</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-junit5</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.assertj</groupId>\n+      <artifactId>assertj-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>persistence-commons-mongodb</artifactId>\n+      <version>${project.version}</version>", "originalCommit": "6505bb3886f0184506e6ed2fd18fed09534667b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY5OTU2MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r444699560", "bodyText": "What is this used for?", "author": "danielezonca", "createdAt": "2020-06-24T07:31:50Z", "path": "data-index/data-index-storage/data-index-storage-mongodb/pom.xml", "diffHunk": "@@ -0,0 +1,73 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>data-index-storage</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>data-index-storage-mongodb</artifactId>\n+  <name>Kogito :: Data Index Storage MongoDB</name>\n+\n+  <properties>\n+    <version.org.mongodb.image>4.0</version.org.mongodb.image>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>data-index-storage-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>persistence-commons-mongodb</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-junit5</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.assertj</groupId>\n+      <artifactId>assertj-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>persistence-commons-mongodb</artifactId>\n+      <version>${project.version}</version>\n+      <classifier>tests</classifier>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.testcontainers</groupId>\n+      <artifactId>testcontainers</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n+            <mongodb.version>${version.org.mongodb.image}</mongodb.version>\n+            <quarkus.test.profile>mongodb</quarkus.test.profile>", "originalCommit": "6505bb3886f0184506e6ed2fd18fed09534667b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzOTI5OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r447039299", "bodyText": "Removed. Thanks.", "author": "xieshenzh", "createdAt": "2020-06-29T15:01:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY5OTU2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwMTY3Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r444701672", "bodyText": "Can you explain the reason of this? (same question for fromObjectNode)", "author": "danielezonca", "createdAt": "2020-06-24T07:36:13Z", "path": "data-index/data-index-storage/data-index-storage-mongodb/src/main/java/org/kie/kogito/index/mongodb/model/DomainEntity.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.mongodb.model;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import io.quarkus.mongodb.panache.runtime.MongoOperations;\n+import org.bson.BsonString;\n+import org.bson.Document;\n+import org.kie.kogito.index.mongodb.storage.DomainStorage;\n+import org.kie.kogito.persistence.mongodb.utils.ModelUtils;\n+\n+import static org.kie.kogito.persistence.mongodb.utils.ModelUtils.jsonNodeToDocument;\n+\n+public class DomainEntity {\n+\n+    public static ObjectNode toObjectNode(String id, Document document) {\n+        if (document == null) {\n+            return null;\n+        }\n+\n+        ObjectNode node = ModelUtils.documentToJsonNode(document, ObjectNode.class);\n+        node.remove(MongoOperations.ID);\n+        node.put(DomainStorage.ID, id);", "originalCommit": "6505bb3886f0184506e6ed2fd18fed09534667b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0MDk1NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r447040955", "bodyText": "MongoDB converts the id attribute to _id as the primary key. This converts it back.", "author": "xieshenzh", "createdAt": "2020-06-29T15:04:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwMTY3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5NTMxMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r445695311", "bodyText": "Why two different ids?", "author": "danielezonca", "createdAt": "2020-06-25T16:43:54Z", "path": "data-index/data-index-storage/data-index-storage-mongodb/src/main/java/org/kie/kogito/index/mongodb/model/ProcessInstanceEntity.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.mongodb.model;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.quarkus.mongodb.panache.MongoEntity;\n+import io.quarkus.mongodb.panache.PanacheMongoEntityBase;\n+import org.bson.Document;\n+import org.bson.codecs.pojo.annotations.BsonId;\n+import org.kie.kogito.index.model.NodeInstance;\n+import org.kie.kogito.index.model.ProcessInstance;\n+import org.kie.kogito.index.model.ProcessInstanceError;\n+\n+import static org.kie.kogito.index.Constants.PROCESS_INSTANCES_STORAGE;\n+import static org.kie.kogito.persistence.mongodb.utils.ModelUtils.documentToJsonNode;\n+import static org.kie.kogito.persistence.mongodb.utils.ModelUtils.instantToZonedDateTime;\n+import static org.kie.kogito.persistence.mongodb.utils.ModelUtils.jsonNodeToDocument;\n+import static org.kie.kogito.persistence.mongodb.utils.ModelUtils.zonedDateTimeToInstant;\n+\n+@MongoEntity(collection = PROCESS_INSTANCES_STORAGE)\n+public class ProcessInstanceEntity extends PanacheMongoEntityBase {\n+\n+    @BsonId\n+    public String id;\n+\n+    public String processId;\n+\n+    public Set<String> roles;\n+\n+    public Document variables;\n+\n+    public String endpoint;\n+\n+    public List<NodeInstanceEntity> nodes;\n+\n+    public Integer state;\n+\n+    public Long start;\n+\n+    public Long end;\n+\n+    public String rootProcessInstanceId;\n+\n+    public String rootProcessId;\n+\n+    public String parentProcessInstanceId;\n+\n+    public String processName;\n+\n+    public ProcessInstanceErrorEntity error;\n+\n+    public Set<String> addons;\n+\n+    public Long lastUpdate;\n+\n+    public String businessKey;\n+\n+    public static ProcessInstance toProcessInstance(ProcessInstanceEntity entity) {\n+        if (entity == null) {\n+            return null;\n+        }\n+\n+        ProcessInstance instance = new ProcessInstance();\n+        instance.setId(entity.id);\n+        instance.setProcessId(entity.processId);\n+        instance.setRoles(entity.roles);\n+        instance.setVariables(documentToJsonNode(entity.variables, JsonNode.class));\n+        instance.setEndpoint(entity.endpoint);\n+        instance.setNodes(Optional.ofNullable(entity.nodes).map(nodes -> nodes.stream().map(NodeInstanceEntity::toNodeInstance).collect(Collectors.toList())).orElse(null));\n+        instance.setState(entity.state);\n+        instance.setStart(instantToZonedDateTime(entity.start));\n+        instance.setEnd(instantToZonedDateTime(entity.end));\n+        instance.setRootProcessId(entity.rootProcessId);\n+        instance.setRootProcessInstanceId(entity.rootProcessInstanceId);\n+        instance.setParentProcessInstanceId(entity.parentProcessInstanceId);\n+        instance.setProcessName(entity.processName);\n+        instance.setError(Optional.ofNullable(entity.error).map(ProcessInstanceErrorEntity::toProcessInstanceError).orElse(null));\n+        instance.setAddons(entity.addons);\n+        instance.setLastUpdate(instantToZonedDateTime(entity.lastUpdate));\n+        instance.setBusinessKey(entity.businessKey);\n+        return instance;\n+    }\n+\n+    public static ProcessInstanceEntity fromProcessInstance(ProcessInstance instance) {\n+        if (instance == null) {\n+            return null;\n+        }\n+\n+        ProcessInstanceEntity entity = new ProcessInstanceEntity();\n+        entity.id = instance.getId();\n+        entity.processId = instance.getProcessId();\n+        entity.roles = instance.getRoles();\n+        entity.variables = jsonNodeToDocument(instance.getVariables());\n+        entity.endpoint = instance.getEndpoint();\n+        entity.nodes = Optional.ofNullable(instance.getNodes()).map(nodes -> nodes.stream().map(NodeInstanceEntity::fromNodeInstance).collect(Collectors.toList())).orElse(null);\n+        entity.state = instance.getState();\n+        entity.start = zonedDateTimeToInstant(instance.getStart());\n+        entity.end = zonedDateTimeToInstant(instance.getEnd());\n+        entity.rootProcessId = instance.getRootProcessId();\n+        entity.rootProcessInstanceId = instance.getRootProcessInstanceId();\n+        entity.parentProcessInstanceId = instance.getParentProcessInstanceId();\n+        entity.processName = instance.getProcessName();\n+        entity.error = Optional.ofNullable(instance.getError()).map(ProcessInstanceErrorEntity::fromProcessInstanceError).orElse(null);\n+        entity.addons = instance.getAddons();\n+        entity.lastUpdate = zonedDateTimeToInstant(instance.getLastUpdate());\n+        entity.businessKey = instance.getBusinessKey();\n+        return entity;\n+    }\n+\n+    public static class NodeInstanceEntity {\n+\n+        public String _id;\n+\n+        public String id;", "originalCommit": "6505bb3886f0184506e6ed2fd18fed09534667b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0NTYwOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r447045608", "bodyText": "Added a dummy _id here to avoid MongoDB converting the id attribute to _id to create primary key. I don't think it is necessary to create primary keys for the embedded documents.", "author": "xieshenzh", "createdAt": "2020-06-29T15:10:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5NTMxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyNzU3Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r448127577", "bodyText": "@xiezhang7 wouldnt mongodb create the _id anyway and assign a primary key for that? If thats the case then we can simple resue the id attribute that we already provide.", "author": "cristianonicolai", "createdAt": "2020-07-01T05:44:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5NTMxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg3MzE3Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r451873176", "bodyText": "MongoDB won't create the _id if there is a dummy one.\nI have removed the _id and id will be converted to _id.", "author": "xieshenzh", "createdAt": "2020-07-08T23:07:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5NTMxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5OTQ1NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r445699454", "bodyText": "What is the reason for the changes of this class? Unused fields?", "author": "danielezonca", "createdAt": "2020-06-25T16:50:21Z", "path": "persistence-commons/persistence-commons-protobuf/src/test/resources/test.proto", "diffHunk": "@@ -4,45 +4,19 @@ package org.acme.travels.travels;\n option kogito_model = \"Travels\";\n option kogito_id = \"travels\";\n \n-/* @Indexed */\n-message Address {\n-    option java_package = \"org.acme.travels.travels\";\n-    /* @Field(store = Store.YES) */\n-    optional string city = 1;\n-    /* @Field(store = Store.YES) */\n-    optional string country = 2;\n-    /* @Field(store = Store.YES) */\n-    optional string street = 3;\n-    /* @Field(store = Store.YES) */\n-    optional string zipCode = 4;\n-}\n /* @Indexed */\n message Flight {\n     option java_package = \"org.acme.travels.travels\";\n     /* @Field(store = Store.YES) */\n-    optional string arrival = 1;\n-    /* @Field(store = Store.YES) */\n-    optional string departure = 2;\n-    /* @Field(store = Store.YES) */\n-    optional string flightNumber = 3;\n-    /* @Field(store = Store.YES) */\n-    optional string gate = 4;\n-    /* @Field(store = Store.YES) */\n-    optional string seat = 5;\n+    optional string flightNumber = 1;\n }\n /* @Indexed */\n message Hotel {\n     option java_package = \"org.acme.travels.travels\";\n     /* @Field(store = Store.YES) */\n-    optional Address address = 1;\n-    /* @Field(store = Store.YES) */\n-    optional string bookingNumber = 2;\n-    /* @Field(store = Store.YES) */\n-    optional string name = 3;\n-    /* @Field(store = Store.YES) */\n-    optional string phone = 4;\n-    /* @Field(store = Store.YES) */\n-    optional string room = 5;\n+    optional string name = 1;\n+\n+    optional string room = 2;", "originalCommit": "6505bb3886f0184506e6ed2fd18fed09534667b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0NzE2OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r447047168", "bodyText": "Too simplify the tests and avoid creating too many indexes.", "author": "xieshenzh", "createdAt": "2020-06-29T15:12:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5OTQ1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxNzA5Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r446017097", "bodyText": "I think it makes sense to refactor common module schema package to abstract over ProcessDescriptor because it should be generic. In this way it should be possible to remove/update also this ProcessIndexEvent.\n@r00ta @xiezhang7 @rhtevan\nWdyt? Should we create a ticket for that?", "author": "danielezonca", "createdAt": "2020-06-26T07:33:57Z", "path": "persistence-commons/persistence-commons-mongodb/src/main/java/org/kie/kogito/persistence/mongodb/index/ProcessIndexEvent.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.persistence.mongodb.index;\n+\n+import java.util.Objects;\n+\n+import org.kie.kogito.persistence.api.schema.ProcessDescriptor;\n+\n+public class ProcessIndexEvent {", "originalCommit": "6505bb3886f0184506e6ed2fd18fed09534667b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMTA5Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r446031096", "bodyText": "What is the reason of this sleep?", "author": "danielezonca", "createdAt": "2020-06-26T08:03:38Z", "path": "data-index/data-index-storage/data-index-storage-mongodb/src/test/java/org/kie/kogito/index/mongodb/query/DomainQueryTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.mongodb.query;\n+\n+import java.util.UUID;\n+\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.index.mongodb.TestUtils;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.query.SortDirection;\n+import org.kie.kogito.persistence.mongodb.MongoDBServerTestResource;\n+import org.kie.kogito.persistence.mongodb.storage.MongoDBStorageFactory;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.singletonList;\n+import static org.kie.kogito.index.mongodb.query.QueryTestBase.assertWithObjectNode;\n+import static org.kie.kogito.index.mongodb.query.QueryTestBase.assertWithObjectNodeInOrder;\n+import static org.kie.kogito.index.mongodb.query.QueryTestBase.queryAndAssert;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.and;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.between;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.contains;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.containsAll;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.containsAny;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.equalTo;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.greaterThan;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.greaterThanEqual;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.in;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.isNull;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.lessThan;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.lessThanEqual;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.like;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.notNull;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.or;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.orderBy;\n+\n+@QuarkusTest\n+@QuarkusTestResource(MongoDBServerTestResource.class)\n+public class DomainQueryTest {\n+\n+    @Inject\n+    MongoDBStorageFactory storageFactory;\n+\n+    Storage<String, ObjectNode> storage;\n+\n+    @BeforeEach\n+    void setUp() {\n+        this.storage = (Storage<String, ObjectNode>) storageFactory.getOrCreateStorage(\"travels_domain\");\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        storage.clear();\n+    }\n+\n+    @Test\n+    void test() {\n+        String processInstanceId1 = UUID.randomUUID().toString() + \"_process1\";\n+        String processInstanceId2 = UUID.randomUUID().toString();\n+\n+        ObjectNode node1 = TestUtils.createDomainData(processInstanceId1, \"John\", \"Doe\");\n+        QueryTestBase.testSleep();", "originalCommit": "6505bb3886f0184506e6ed2fd18fed09534667b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0OTExNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r447049117", "bodyText": "This is used to create desired timestamps for the tests. I have removed the sleep and explicitly specify the time interval instead.", "author": "xieshenzh", "createdAt": "2020-06-29T15:15:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMTA5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3MDQ4OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r446070488", "bodyText": "The semantic of all these methods is getOrCreate so can you please use mongoDBStorageFactory.getOrCreateStorage also in these two methods?\nActually I think it could be nice to rename getCache methods to better explain the idea but let's do it in another PR because otherwise we will have a lot of code changes and review it will be harder", "author": "danielezonca", "createdAt": "2020-06-26T09:21:50Z", "path": "persistence-commons/persistence-commons-mongodb/src/main/java/org/kie/kogito/persistence/mongodb/storage/MongoDBStorageService.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.persistence.mongodb.storage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.StorageService;\n+import org.kie.kogito.persistence.api.factory.StorageQualifier;\n+\n+import static org.kie.kogito.persistence.mongodb.Constants.MONGODB_STORAGE;\n+\n+@ApplicationScoped\n+@StorageQualifier(MONGODB_STORAGE)\n+public class MongoDBStorageService implements StorageService {\n+\n+    @Inject\n+    MongoDBStorageFactory mongoDBStorageFactory;\n+\n+    @Override\n+    public Storage<String, String> getCache(String name) {\n+        return (Storage<String, String>) mongoDBStorageFactory.getStorage(name);\n+    }\n+\n+    @Override\n+    public <T> Storage<String, T> getCache(String name, Class<T> type) {\n+        return (Storage<String, T>) mongoDBStorageFactory.getStorage(name);", "originalCommit": "6505bb3886f0184506e6ed2fd18fed09534667b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1Mzc1Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r447053757", "bodyText": "@r00ta @danielezonca I have changed the implementation of StorageService for MongoDB as suggested.\nActually, I don't think the collections are created here. The collections are created when data insertion or index creation takes place.\nPlease take a look. Thanks.", "author": "xieshenzh", "createdAt": "2020-06-29T15:21:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3MDQ4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3OTI2Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r446079266", "bodyText": "Please consider this and relative quarkus issue", "author": "danielezonca", "createdAt": "2020-06-26T09:39:24Z", "path": "persistence-commons/persistence-commons-mongodb/src/test/java/org/kie/kogito/persistence/mongodb/MongoDBServerTestResource.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.persistence.mongodb;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.FixedHostPortGenericContainer;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+public class MongoDBServerTestResource implements QuarkusTestResourceLifecycleManager {\n+\n+    private static final String MONGODB_VERSION = System.getProperty(\"mongodb.version\");\n+    private static final Logger LOGGER = LoggerFactory.getLogger(MongoDBServerTestResource.class);\n+    private GenericContainer mongoDB;\n+\n+    @Override\n+    public Map<String, String> start() {\n+        if (MONGODB_VERSION == null) {\n+            throw new RuntimeException(\"Please define a valid MongoDB image version in system property mongodb.version\");", "originalCommit": "6505bb3886f0184506e6ed2fd18fed09534667b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1ODAwMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r447058003", "bodyText": "I have changed all the tests that use the test resource to failsafe integration tests.", "author": "xieshenzh", "createdAt": "2020-06-29T15:27:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3OTI2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjExODI5Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r446118292", "bodyText": "Is it possible to move this impl (or part of it) to common module?\nI think it could be nice if we can limit code user has to write to use this library to the different implementations of AbstractStorage and then leverage on CDI to retrieve in a generic way all the components.\nWdyt?", "author": "danielezonca", "createdAt": "2020-06-26T11:07:17Z", "path": "data-index/data-index-storage/data-index-storage-mongodb/src/main/java/org/kie/kogito/index/mongodb/storage/MongoDBStorageFactoryImpl.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.mongodb.storage;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.mongodb.index.IndexCreateOrUpdateEvent;\n+import org.kie.kogito.persistence.mongodb.index.ProcessIndexEvent;\n+import org.kie.kogito.persistence.mongodb.storage.MongoDBStorageFactory;\n+\n+import static org.kie.kogito.index.Constants.JOBS_STORAGE;\n+import static org.kie.kogito.index.Constants.PROCESS_ID_MODEL_STORAGE;\n+import static org.kie.kogito.index.Constants.PROCESS_INSTANCES_STORAGE;\n+import static org.kie.kogito.index.Constants.USER_TASK_INSTANCES_STORAGE;\n+import static org.kie.kogito.index.mongodb.Constants.DOMAIN_COLLECTON_NAME_AFFIX;\n+import static org.kie.kogito.index.mongodb.Constants.getDomainCollectionName;\n+\n+@ApplicationScoped\n+public class MongoDBStorageFactoryImpl implements MongoDBStorageFactory {", "originalCommit": "6505bb3886f0184506e6ed2fd18fed09534667b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1OTk3Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r447059976", "bodyText": "Moved all the MongoDB Storage implementation to one class MongoStorage. Thanks.", "author": "xieshenzh", "createdAt": "2020-06-29T15:30:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjExODI5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEyNTU1OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r446125559", "bodyText": "What about move this fail statement just after ctx.registerProtoFiles(invalidFileDescriptorSource)? You can remove return fromcatch block in this case and I think it is a bit more readable.\nWdyt?", "author": "danielezonca", "createdAt": "2020-06-26T11:24:11Z", "path": "persistence-commons/persistence-commons-protobuf/src/test/java/org/kie/kogito/persistence/protobuf/ProtoIndexParserTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.persistence.protobuf;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+import org.infinispan.protostream.DescriptorParserException;\n+import org.infinispan.protostream.FileDescriptorSource;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.descriptors.FieldDescriptor;\n+import org.infinispan.protostream.descriptors.FileDescriptor;\n+import org.infinispan.protostream.impl.SerializationContextImpl;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.persistence.api.schema.AttributeDescriptor;\n+import org.kie.kogito.persistence.api.schema.EntityIndexDescriptor;\n+\n+import static java.util.stream.Collectors.toMap;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.kie.kogito.persistence.protobuf.ProtoIndexParser.INDEXED_ANNOTATION;\n+import static org.kie.kogito.persistence.protobuf.ProtoIndexParser.configureBuilder;\n+import static org.kie.kogito.persistence.protobuf.ProtoIndexParser.createAttributeDescriptor;\n+import static org.kie.kogito.persistence.protobuf.ProtoIndexParser.createEntityIndexeDescriptors;\n+import static org.kie.kogito.persistence.protobuf.TestUtils.getTestFileContent;\n+import static org.kie.kogito.persistence.protobuf.TestUtils.getValidEntityIndexDescriptors;\n+\n+class ProtoIndexParserTest {\n+\n+    @Test\n+    void testConfigureBuilder() {\n+        Map<String, EntityIndexDescriptor> entityIndexes = createFileDescriptor().getMessageTypes().stream().map(t -> t.<EntityIndexDescriptor>getProcessedAnnotation(INDEXED_ANNOTATION))\n+                .filter(Objects::nonNull).collect(toMap(EntityIndexDescriptor::getName, Function.identity()));\n+        assertEquals(getValidEntityIndexDescriptors(false), entityIndexes);\n+    }\n+\n+    @Test\n+    void testConfigureBuilderWithInvalidFile() {\n+        SerializationContext ctx = new SerializationContextImpl(configureBuilder().build());\n+        FileDescriptorSource invalidFileDescriptorSource = FileDescriptorSource.fromString(\"invalid\", \"invalid\");\n+        try {\n+            ctx.registerProtoFiles(invalidFileDescriptorSource);\n+        } catch (DescriptorParserException ex) {\n+            // Successfully throw exception\n+            return;\n+        }\n+\n+        fail(\"Failed to process invalid proto file\");", "originalCommit": "6505bb3886f0184506e6ed2fd18fed09534667b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2MDM0Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r447060347", "bodyText": "Moved. Thanks.", "author": "xieshenzh", "createdAt": "2020-06-29T15:30:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEyNTU1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEyNjg5Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r446126896", "bodyText": "Is the limit 63 or 64? Now with this value the condition\n        if (MAX_INDEX_NUMBER < indexNameMap.size()) {\nwill fail with 64 fields", "author": "danielezonca", "createdAt": "2020-06-26T11:27:20Z", "path": "persistence-commons/persistence-commons-mongodb/src/main/java/org/kie/kogito/persistence/mongodb/index/IndexManager.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.persistence.mongodb.index;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimaps;\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.Indexes;\n+import io.quarkus.mongodb.panache.runtime.MongoOperations;\n+import org.bson.Document;\n+import org.kie.kogito.persistence.api.schema.EntityIndexDescriptor;\n+import org.kie.kogito.persistence.api.schema.IndexDescriptor;\n+import org.kie.kogito.persistence.api.schema.SchemaRegisteredEvent;\n+import org.kie.kogito.persistence.api.schema.SchemaRegistrationException;\n+\n+@ApplicationScoped\n+public class IndexManager {\n+\n+    private static long MAX_INDEX_NUMBER = 63L;", "originalCommit": "6505bb3886f0184506e6ed2fd18fed09534667b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2MjQ2Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r447062466", "bodyText": "Because there is a default index on the primary key _id. There are only 63 left to be created.", "author": "xieshenzh", "createdAt": "2020-06-29T15:33:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEyNjg5Ng=="}], "type": "inlineReview"}, {"oid": "d87d5ca42e66b3688626ba9410eb04b148b2e9de", "url": "https://github.com/kiegroup/kogito-apps/commit/d87d5ca42e66b3688626ba9410eb04b148b2e9de", "message": "Change MongoStorage implementation", "committedDate": "2020-06-29T03:18:28Z", "type": "forcePushed"}, {"oid": "986026baab393d52d70c4127c3f43973468efbc5", "url": "https://github.com/kiegroup/kogito-apps/commit/986026baab393d52d70c4127c3f43973468efbc5", "message": "Documentation for data index with MongoDB", "committedDate": "2020-06-29T14:47:07Z", "type": "forcePushed"}, {"oid": "2a8288df19b09d75dfdaa309a84c77833f97e420", "url": "https://github.com/kiegroup/kogito-apps/commit/2a8288df19b09d75dfdaa309a84c77833f97e420", "message": "Documentation for data index with MongoDB", "committedDate": "2020-06-29T14:59:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyMjk0MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r448122940", "bodyText": "could you use https://www.testcontainers.org/modules/databases/mongodb/ instead of a generic container?", "author": "cristianonicolai", "createdAt": "2020-07-01T05:27:20Z", "path": "data-index/data-index-storage/data-index-storage-mongodb/pom.xml", "diffHunk": "@@ -0,0 +1,86 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>data-index-storage</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>data-index-storage-mongodb</artifactId>\n+  <name>Kogito :: Data Index Storage MongoDB</name>\n+\n+  <properties>\n+    <container.image.mongodb>mongo:4.0</container.image.mongodb>", "originalCommit": "2a8288df19b09d75dfdaa309a84c77833f97e420", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc1Mzk4MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r451753981", "bodyText": "Changed to use the testcontainers MongoDB module.", "author": "xieshenzh", "createdAt": "2020-07-08T18:45:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyMjk0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyMzUwOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r448123509", "bodyText": "@xiezhang7 I believe id should be enough to identify the same job.", "author": "cristianonicolai", "createdAt": "2020-07-01T05:29:44Z", "path": "data-index/data-index-storage/data-index-storage-mongodb/src/main/java/org/kie/kogito/index/mongodb/model/JobEntity.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.mongodb.model;\n+\n+import java.util.Objects;\n+\n+import io.quarkus.mongodb.panache.MongoEntity;\n+import io.quarkus.mongodb.panache.PanacheMongoEntityBase;\n+import org.bson.codecs.pojo.annotations.BsonId;\n+\n+import static org.kie.kogito.index.Constants.JOBS_STORAGE;\n+\n+@MongoEntity(collection = JOBS_STORAGE)\n+public class JobEntity extends PanacheMongoEntityBase {\n+\n+    @BsonId\n+    public String id;\n+\n+    public String processId;\n+\n+    public String processInstanceId;\n+\n+    public String rootProcessId;\n+\n+    public String rootProcessInstanceId;\n+\n+    public Long expirationTime;\n+\n+    public Integer priority;\n+\n+    public String callbackEndpoint;\n+\n+    public Long repeatInterval;\n+\n+    public Integer repeatLimit;\n+\n+    public String scheduledId;\n+\n+    public Integer retries;\n+\n+    public String status;\n+\n+    public Long lastUpdate;\n+\n+    public Integer executionCounter;\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        JobEntity jobEntity = (JobEntity) o;\n+        return Objects.equals(id, jobEntity.id) &&", "originalCommit": "2a8288df19b09d75dfdaa309a84c77833f97e420", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc1NDI0MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r451754241", "bodyText": "Updated", "author": "xieshenzh", "createdAt": "2020-07-08T18:45:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyMzUwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyNjQ0MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r448126441", "bodyText": "same here, id should be enough to identify the same process instance", "author": "cristianonicolai", "createdAt": "2020-07-01T05:39:53Z", "path": "data-index/data-index-storage/data-index-storage-mongodb/src/main/java/org/kie/kogito/index/mongodb/model/ProcessInstanceEntity.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.mongodb.model;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import io.quarkus.mongodb.panache.MongoEntity;\n+import io.quarkus.mongodb.panache.PanacheMongoEntityBase;\n+import org.bson.Document;\n+import org.bson.codecs.pojo.annotations.BsonId;\n+\n+import static org.kie.kogito.index.Constants.PROCESS_INSTANCES_STORAGE;\n+\n+@MongoEntity(collection = PROCESS_INSTANCES_STORAGE)\n+public class ProcessInstanceEntity extends PanacheMongoEntityBase {\n+\n+    @BsonId\n+    public String id;\n+\n+    public String processId;\n+\n+    public Set<String> roles;\n+\n+    public Document variables;\n+\n+    public String endpoint;\n+\n+    public List<NodeInstanceEntity> nodes;\n+\n+    public Integer state;\n+\n+    public Long start;\n+\n+    public Long end;\n+\n+    public String rootProcessInstanceId;\n+\n+    public String rootProcessId;\n+\n+    public String parentProcessInstanceId;\n+\n+    public String processName;\n+\n+    public ProcessInstanceErrorEntity error;\n+\n+    public Set<String> addons;\n+\n+    public Long lastUpdate;\n+\n+    public String businessKey;\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        ProcessInstanceEntity that = (ProcessInstanceEntity) o;\n+        return Objects.equals(id, that.id) &&", "originalCommit": "2a8288df19b09d75dfdaa309a84c77833f97e420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyNzgzNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r448127836", "bodyText": "_id or id should be enough to identify the node instance.", "author": "cristianonicolai", "createdAt": "2020-07-01T05:44:54Z", "path": "data-index/data-index-storage/data-index-storage-mongodb/src/main/java/org/kie/kogito/index/mongodb/model/ProcessInstanceEntity.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.mongodb.model;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import io.quarkus.mongodb.panache.MongoEntity;\n+import io.quarkus.mongodb.panache.PanacheMongoEntityBase;\n+import org.bson.Document;\n+import org.bson.codecs.pojo.annotations.BsonId;\n+\n+import static org.kie.kogito.index.Constants.PROCESS_INSTANCES_STORAGE;\n+\n+@MongoEntity(collection = PROCESS_INSTANCES_STORAGE)\n+public class ProcessInstanceEntity extends PanacheMongoEntityBase {\n+\n+    @BsonId\n+    public String id;\n+\n+    public String processId;\n+\n+    public Set<String> roles;\n+\n+    public Document variables;\n+\n+    public String endpoint;\n+\n+    public List<NodeInstanceEntity> nodes;\n+\n+    public Integer state;\n+\n+    public Long start;\n+\n+    public Long end;\n+\n+    public String rootProcessInstanceId;\n+\n+    public String rootProcessId;\n+\n+    public String parentProcessInstanceId;\n+\n+    public String processName;\n+\n+    public ProcessInstanceErrorEntity error;\n+\n+    public Set<String> addons;\n+\n+    public Long lastUpdate;\n+\n+    public String businessKey;\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        ProcessInstanceEntity that = (ProcessInstanceEntity) o;\n+        return Objects.equals(id, that.id) &&\n+                Objects.equals(processId, that.processId) &&\n+                Objects.equals(roles, that.roles) &&\n+                Objects.equals(variables, that.variables) &&\n+                Objects.equals(endpoint, that.endpoint) &&\n+                Objects.equals(nodes, that.nodes) &&\n+                Objects.equals(state, that.state) &&\n+                Objects.equals(start, that.start) &&\n+                Objects.equals(end, that.end) &&\n+                Objects.equals(rootProcessInstanceId, that.rootProcessInstanceId) &&\n+                Objects.equals(rootProcessId, that.rootProcessId) &&\n+                Objects.equals(parentProcessInstanceId, that.parentProcessInstanceId) &&\n+                Objects.equals(processName, that.processName) &&\n+                Objects.equals(error, that.error) &&\n+                Objects.equals(addons, that.addons) &&\n+                Objects.equals(lastUpdate, that.lastUpdate) &&\n+                Objects.equals(businessKey, that.businessKey);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(id, processId, roles, variables, endpoint, nodes, state, start, end, rootProcessInstanceId, rootProcessId, parentProcessInstanceId, processName, error, addons, lastUpdate, businessKey);\n+    }\n+\n+    public static class NodeInstanceEntity {\n+\n+        public String _id;\n+\n+        public String id;\n+\n+        public String name;\n+\n+        public String nodeId;\n+\n+        public String type;\n+\n+        public Long enter;\n+\n+        public Long exit;\n+\n+        public String definitionId;\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) {\n+                return true;\n+            }\n+            if (o == null || getClass() != o.getClass()) {\n+                return false;\n+            }\n+            NodeInstanceEntity that = (NodeInstanceEntity) o;\n+            return Objects.equals(_id, that._id) &&", "originalCommit": "2a8288df19b09d75dfdaa309a84c77833f97e420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyODM0NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r448128344", "bodyText": "shouldnt this be just an embedded document, do we actually need an id for it?", "author": "cristianonicolai", "createdAt": "2020-07-01T05:46:30Z", "path": "data-index/data-index-storage/data-index-storage-mongodb/src/main/java/org/kie/kogito/index/mongodb/model/ProcessInstanceEntity.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.mongodb.model;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import io.quarkus.mongodb.panache.MongoEntity;\n+import io.quarkus.mongodb.panache.PanacheMongoEntityBase;\n+import org.bson.Document;\n+import org.bson.codecs.pojo.annotations.BsonId;\n+\n+import static org.kie.kogito.index.Constants.PROCESS_INSTANCES_STORAGE;\n+\n+@MongoEntity(collection = PROCESS_INSTANCES_STORAGE)\n+public class ProcessInstanceEntity extends PanacheMongoEntityBase {\n+\n+    @BsonId\n+    public String id;\n+\n+    public String processId;\n+\n+    public Set<String> roles;\n+\n+    public Document variables;\n+\n+    public String endpoint;\n+\n+    public List<NodeInstanceEntity> nodes;\n+\n+    public Integer state;\n+\n+    public Long start;\n+\n+    public Long end;\n+\n+    public String rootProcessInstanceId;\n+\n+    public String rootProcessId;\n+\n+    public String parentProcessInstanceId;\n+\n+    public String processName;\n+\n+    public ProcessInstanceErrorEntity error;\n+\n+    public Set<String> addons;\n+\n+    public Long lastUpdate;\n+\n+    public String businessKey;\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        ProcessInstanceEntity that = (ProcessInstanceEntity) o;\n+        return Objects.equals(id, that.id) &&\n+                Objects.equals(processId, that.processId) &&\n+                Objects.equals(roles, that.roles) &&\n+                Objects.equals(variables, that.variables) &&\n+                Objects.equals(endpoint, that.endpoint) &&\n+                Objects.equals(nodes, that.nodes) &&\n+                Objects.equals(state, that.state) &&\n+                Objects.equals(start, that.start) &&\n+                Objects.equals(end, that.end) &&\n+                Objects.equals(rootProcessInstanceId, that.rootProcessInstanceId) &&\n+                Objects.equals(rootProcessId, that.rootProcessId) &&\n+                Objects.equals(parentProcessInstanceId, that.parentProcessInstanceId) &&\n+                Objects.equals(processName, that.processName) &&\n+                Objects.equals(error, that.error) &&\n+                Objects.equals(addons, that.addons) &&\n+                Objects.equals(lastUpdate, that.lastUpdate) &&\n+                Objects.equals(businessKey, that.businessKey);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(id, processId, roles, variables, endpoint, nodes, state, start, end, rootProcessInstanceId, rootProcessId, parentProcessInstanceId, processName, error, addons, lastUpdate, businessKey);\n+    }\n+\n+    public static class NodeInstanceEntity {\n+\n+        public String _id;\n+\n+        public String id;\n+\n+        public String name;\n+\n+        public String nodeId;\n+\n+        public String type;\n+\n+        public Long enter;\n+\n+        public Long exit;\n+\n+        public String definitionId;\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) {\n+                return true;\n+            }\n+            if (o == null || getClass() != o.getClass()) {\n+                return false;\n+            }\n+            NodeInstanceEntity that = (NodeInstanceEntity) o;\n+            return Objects.equals(_id, that._id) &&\n+                    Objects.equals(id, that.id) &&\n+                    Objects.equals(name, that.name) &&\n+                    Objects.equals(nodeId, that.nodeId) &&\n+                    Objects.equals(type, that.type) &&\n+                    Objects.equals(enter, that.enter) &&\n+                    Objects.equals(exit, that.exit) &&\n+                    Objects.equals(definitionId, that.definitionId);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(_id, id, name, nodeId, type, enter, exit, definitionId);\n+        }\n+    }\n+\n+    public static class ProcessInstanceErrorEntity {\n+\n+        public String _id;", "originalCommit": "2a8288df19b09d75dfdaa309a84c77833f97e420", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg3MjM0Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r451872342", "bodyText": "Removed it and MongoDB won't generate id for it.", "author": "xieshenzh", "createdAt": "2020-07-08T23:05:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyODM0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyODgxMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r448128810", "bodyText": "id should be used enough here to identify the same task.", "author": "cristianonicolai", "createdAt": "2020-07-01T05:48:07Z", "path": "data-index/data-index-storage/data-index-storage-mongodb/src/main/java/org/kie/kogito/index/mongodb/model/UserTaskInstanceEntity.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.mongodb.model;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import io.quarkus.mongodb.panache.MongoEntity;\n+import io.quarkus.mongodb.panache.PanacheMongoEntityBase;\n+import org.bson.Document;\n+import org.bson.codecs.pojo.annotations.BsonId;\n+\n+import static org.kie.kogito.index.Constants.USER_TASK_INSTANCES_STORAGE;\n+\n+@MongoEntity(collection = USER_TASK_INSTANCES_STORAGE)\n+public class UserTaskInstanceEntity extends PanacheMongoEntityBase {\n+\n+    @BsonId\n+    public String id;\n+\n+    public String description;\n+\n+    public String name;\n+\n+    public String priority;\n+\n+    public String processInstanceId;\n+\n+    public String state;\n+\n+    public String actualOwner;\n+\n+    public Set<String> adminGroups;\n+\n+    public Set<String> adminUsers;\n+\n+    public Long completed;\n+\n+    public Long started;\n+\n+    public Set<String> excludedUsers;\n+\n+    public Set<String> potentialGroups;\n+\n+    public Set<String> potentialUsers;\n+\n+    public String referenceName;\n+\n+    public Long lastUpdate;\n+\n+    public String processId;\n+\n+    public String rootProcessId;\n+\n+    public String rootProcessInstanceId;\n+\n+    public Document inputs;\n+\n+    public Document outputs;\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        UserTaskInstanceEntity that = (UserTaskInstanceEntity) o;\n+        return Objects.equals(id, that.id) &&", "originalCommit": "2a8288df19b09d75dfdaa309a84c77833f97e420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyOTU0Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r448129547", "bodyText": "could you use the constructor or init method for this?", "author": "cristianonicolai", "createdAt": "2020-07-01T05:50:35Z", "path": "data-index/data-index-storage/data-index-storage-mongodb/src/main/java/org/kie/kogito/index/mongodb/storage/MongoModelServiceImpl.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.mongodb.storage;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import org.kie.kogito.index.model.Job;\n+import org.kie.kogito.index.model.ProcessInstance;\n+import org.kie.kogito.index.model.UserTaskInstance;\n+import org.kie.kogito.index.mongodb.model.DomainEntityMapper;\n+import org.kie.kogito.index.mongodb.model.JobEntityMapper;\n+import org.kie.kogito.index.mongodb.model.ProcessIdEntity;\n+import org.kie.kogito.index.mongodb.model.ProcessIdEntityMapper;\n+import org.kie.kogito.index.mongodb.model.ProcessInstanceEntityMapper;\n+import org.kie.kogito.index.mongodb.model.UserTaskInstanceEntityMapper;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.mongodb.index.IndexCreateOrUpdateEvent;\n+import org.kie.kogito.persistence.mongodb.index.ProcessIndexEvent;\n+import org.kie.kogito.persistence.mongodb.model.MongoEntityMapper;\n+import org.kie.kogito.persistence.mongodb.storage.MongoModelService;\n+import org.kie.kogito.persistence.mongodb.storage.MongoStorage;\n+\n+import static org.kie.kogito.index.Constants.JOBS_STORAGE;\n+import static org.kie.kogito.index.Constants.PROCESS_ID_MODEL_STORAGE;\n+import static org.kie.kogito.index.Constants.PROCESS_INSTANCES_STORAGE;\n+import static org.kie.kogito.index.Constants.USER_TASK_INSTANCES_STORAGE;\n+import static org.kie.kogito.index.mongodb.Constants.getDomainCollectionName;\n+import static org.kie.kogito.index.mongodb.Constants.isDomainCollection;\n+import static org.kie.kogito.persistence.mongodb.storage.StorageUtils.getCollection;\n+\n+@ApplicationScoped\n+public class MongoModelServiceImpl implements MongoModelService {\n+\n+    @Inject\n+    Event<IndexCreateOrUpdateEvent> indexCreateOrUpdateEvent;\n+\n+    Map<String, Supplier<MongoEntityMapper>> entityMapperMap = new ConcurrentHashMap<>();\n+\n+    {", "originalCommit": "2a8288df19b09d75dfdaa309a84c77833f97e420", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE1MTA4Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r449151086", "bodyText": "Actually I would suggest to make entityMapperMap as static and same this block, it seems a readonly static map", "author": "danielezonca", "createdAt": "2020-07-02T16:56:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyOTU0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc1NTIwMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r451755203", "bodyText": "Changed to static", "author": "xieshenzh", "createdAt": "2020-07-08T18:47:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyOTU0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEzMTEzOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r448131138", "bodyText": "perhpas use a @before or @beforeall for initialization?", "author": "cristianonicolai", "createdAt": "2020-07-01T05:55:37Z", "path": "data-index/data-index-storage/data-index-storage-mongodb/src/test/java/org/kie/kogito/index/mongodb/model/JobEntityMapperTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.mongodb.model;\n+\n+import java.time.ZonedDateTime;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.index.model.Job;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.kie.kogito.index.mongodb.model.ModelUtils.zonedDateTimeToInstant;\n+\n+class JobEntityMapperTest {\n+\n+    JobEntityMapper jobEntityMapper = new JobEntityMapper();\n+\n+    Job job;\n+\n+    JobEntity jobEntity;\n+\n+    {", "originalCommit": "2a8288df19b09d75dfdaa309a84c77833f97e420", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc1NTQ5Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r451755493", "bodyText": "Updated", "author": "xieshenzh", "createdAt": "2020-07-08T18:48:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEzMTEzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEzMTQ5NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r448131495", "bodyText": "same here, using a @before/all", "author": "cristianonicolai", "createdAt": "2020-07-01T05:56:56Z", "path": "data-index/data-index-storage/data-index-storage-mongodb/src/test/java/org/kie/kogito/index/mongodb/model/ProcessInstanceEntityMapperTest.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.mongodb.model;\n+\n+import java.time.ZonedDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.index.model.NodeInstance;\n+import org.kie.kogito.index.model.ProcessInstance;\n+import org.kie.kogito.index.model.ProcessInstanceError;\n+\n+import static com.google.common.collect.Lists.newArrayList;\n+import static com.google.common.collect.Sets.newHashSet;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.kie.kogito.index.mongodb.model.ModelUtils.MAPPER;\n+import static org.kie.kogito.index.mongodb.model.ModelUtils.jsonNodeToDocument;\n+import static org.kie.kogito.index.mongodb.model.ModelUtils.zonedDateTimeToInstant;\n+\n+class ProcessInstanceEntityMapperTest {\n+\n+    ProcessInstanceEntityMapper processInstanceEntityMapper = new ProcessInstanceEntityMapper();\n+\n+    ProcessInstance processInstance;\n+\n+    ProcessInstanceEntity processInstanceEntity;\n+\n+    {", "originalCommit": "2a8288df19b09d75dfdaa309a84c77833f97e420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEzMTcwMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r448131703", "bodyText": "same @before", "author": "cristianonicolai", "createdAt": "2020-07-01T05:57:35Z", "path": "data-index/data-index-storage/data-index-storage-mongodb/src/test/java/org/kie/kogito/index/mongodb/model/UserTaskInstanceEntityMapperTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.mongodb.model;\n+\n+import java.time.ZonedDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.index.model.UserTaskInstance;\n+\n+import static com.google.common.collect.Sets.newHashSet;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.kie.kogito.index.mongodb.model.ModelUtils.MAPPER;\n+import static org.kie.kogito.index.mongodb.model.ModelUtils.jsonNodeToDocument;\n+import static org.kie.kogito.index.mongodb.model.ModelUtils.zonedDateTimeToInstant;\n+\n+class UserTaskInstanceEntityMapperTest {\n+\n+    UserTaskInstanceEntityMapper userTaskInstanceEntityMapper = new UserTaskInstanceEntityMapper();\n+\n+    UserTaskInstance userTaskInstance;\n+\n+    UserTaskInstanceEntity userTaskInstanceEntity;\n+\n+    {", "originalCommit": "2a8288df19b09d75dfdaa309a84c77833f97e420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEzMjAxNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r448132014", "bodyText": "do we need  + \"_process1\" in here?", "author": "cristianonicolai", "createdAt": "2020-07-01T05:58:38Z", "path": "data-index/data-index-storage/data-index-storage-mongodb/src/test/java/org/kie/kogito/index/mongodb/query/DomainQueryIT.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.mongodb.query;\n+\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.bson.Document;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.index.mongodb.TestUtils;\n+import org.kie.kogito.index.mongodb.model.DomainEntityMapper;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.query.SortDirection;\n+import org.kie.kogito.persistence.mongodb.MongoDBServerTestResource;\n+import org.kie.kogito.persistence.mongodb.storage.MongoStorage;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.singletonList;\n+import static org.kie.kogito.index.mongodb.query.QueryTestBase.assertWithObjectNode;\n+import static org.kie.kogito.index.mongodb.query.QueryTestBase.assertWithObjectNodeInOrder;\n+import static org.kie.kogito.index.mongodb.query.QueryTestBase.queryAndAssert;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.and;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.between;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.contains;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.containsAll;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.containsAny;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.equalTo;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.greaterThan;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.greaterThanEqual;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.in;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.isNull;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.lessThan;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.lessThanEqual;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.like;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.notNull;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.or;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.orderBy;\n+import static org.kie.kogito.persistence.mongodb.storage.StorageUtils.getCollection;\n+\n+@QuarkusTest\n+@QuarkusTestResource(MongoDBServerTestResource.class)\n+public class DomainQueryIT {\n+\n+    Storage<String, ObjectNode> storage;\n+\n+    @BeforeEach\n+    void setUp() {\n+        this.storage = new MongoStorage<>(getCollection(\"travels_domain\", Document.class), \"org.acme.travels.travels.Travels\", new DomainEntityMapper());\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        storage.clear();\n+    }\n+\n+    @Test\n+    void test() {\n+        String processInstanceId1 = UUID.randomUUID().toString() + \"_process1\";", "originalCommit": "2a8288df19b09d75dfdaa309a84c77833f97e420", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc1NTk4Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r451755982", "bodyText": "Removed and updated tests accordingly", "author": "xieshenzh", "createdAt": "2020-07-08T18:49:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEzMjAxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEzMjQ0MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r448132440", "bodyText": "same, do we need \"_job1\" ?", "author": "cristianonicolai", "createdAt": "2020-07-01T06:00:00Z", "path": "data-index/data-index-storage/data-index-storage-mongodb/src/test/java/org/kie/kogito/index/mongodb/query/JobQueryIT.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.mongodb.query;\n+\n+import java.util.UUID;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.index.model.Job;\n+import org.kie.kogito.index.mongodb.TestUtils;\n+import org.kie.kogito.index.mongodb.model.JobEntity;\n+import org.kie.kogito.index.mongodb.model.JobEntityMapper;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.query.SortDirection;\n+import org.kie.kogito.persistence.mongodb.MongoDBServerTestResource;\n+import org.kie.kogito.persistence.mongodb.storage.MongoStorage;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.singletonList;\n+import static org.kie.kogito.index.Constants.JOBS_STORAGE;\n+import static org.kie.kogito.index.mongodb.query.QueryTestBase.assertWithId;\n+import static org.kie.kogito.index.mongodb.query.QueryTestBase.assertWithIdInOrder;\n+import static org.kie.kogito.index.mongodb.query.QueryTestBase.queryAndAssert;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.and;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.between;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.contains;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.containsAll;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.containsAny;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.equalTo;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.greaterThan;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.greaterThanEqual;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.in;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.isNull;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.lessThan;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.lessThanEqual;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.like;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.notNull;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.or;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.orderBy;\n+import static org.kie.kogito.persistence.mongodb.storage.StorageUtils.getCollection;\n+\n+@QuarkusTest\n+@QuarkusTestResource(MongoDBServerTestResource.class)\n+public class JobQueryIT {\n+\n+    Storage<String, Job> storage;\n+\n+    @BeforeEach\n+    void setUp() {\n+        this.storage = new MongoStorage<>(getCollection(JOBS_STORAGE, JobEntity.class), Job.class.getName(), new JobEntityMapper());\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        storage.clear();\n+    }\n+\n+    @Test\n+    void test() {\n+        String jobId1 = UUID.randomUUID().toString() + \"_job1\";", "originalCommit": "2a8288df19b09d75dfdaa309a84c77833f97e420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEzMzkzMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r448133931", "bodyText": "same regarding \"_task1\"", "author": "cristianonicolai", "createdAt": "2020-07-01T06:04:55Z", "path": "data-index/data-index-storage/data-index-storage-mongodb/src/test/java/org/kie/kogito/index/mongodb/query/UserTaskInstanceQueryIT.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.mongodb.query;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.UUID;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.index.model.UserTaskInstance;\n+import org.kie.kogito.index.mongodb.TestUtils;\n+import org.kie.kogito.index.mongodb.model.UserTaskInstanceEntity;\n+import org.kie.kogito.index.mongodb.model.UserTaskInstanceEntityMapper;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.query.SortDirection;\n+import org.kie.kogito.persistence.mongodb.MongoDBServerTestResource;\n+import org.kie.kogito.persistence.mongodb.storage.MongoStorage;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.singletonList;\n+import static org.kie.kogito.index.Constants.USER_TASK_INSTANCES_STORAGE;\n+import static org.kie.kogito.index.mongodb.query.QueryTestBase.assertWithId;\n+import static org.kie.kogito.index.mongodb.query.QueryTestBase.assertWithIdInOrder;\n+import static org.kie.kogito.index.mongodb.query.QueryTestBase.queryAndAssert;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.and;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.between;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.contains;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.containsAll;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.containsAny;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.equalTo;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.greaterThan;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.greaterThanEqual;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.in;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.isNull;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.lessThan;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.lessThanEqual;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.like;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.notNull;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.or;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.orderBy;\n+import static org.kie.kogito.persistence.mongodb.storage.StorageUtils.getCollection;\n+\n+@QuarkusTest\n+@QuarkusTestResource(MongoDBServerTestResource.class)\n+public class UserTaskInstanceQueryIT {\n+\n+    Storage<String, UserTaskInstance> storage;\n+\n+    @BeforeEach\n+    void setUp() {\n+        this.storage = new MongoStorage<>(getCollection(USER_TASK_INSTANCES_STORAGE, UserTaskInstanceEntity.class), UserTaskInstance.class.getName(), new UserTaskInstanceEntityMapper());\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        storage.clear();\n+    }\n+\n+    @Test\n+    void test() {\n+        String taskId1 = UUID.randomUUID().toString() + \"_task1\";", "originalCommit": "2a8288df19b09d75dfdaa309a84c77833f97e420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEzNjE4Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r448136187", "bodyText": "@xiezhang7 perhpas these tests should extend StorageTestBase ?", "author": "cristianonicolai", "createdAt": "2020-07-01T06:11:52Z", "path": "data-index/data-index-storage/data-index-storage-mongodb/src/test/java/org/kie/kogito/index/mongodb/storage/ProcessInstanceStorageIT.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.mongodb.storage;\n+\n+import java.util.UUID;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.index.model.ProcessInstance;\n+import org.kie.kogito.index.model.ProcessInstanceState;\n+import org.kie.kogito.index.mongodb.TestUtils;\n+import org.kie.kogito.index.mongodb.model.ProcessInstanceEntity;\n+import org.kie.kogito.index.mongodb.model.ProcessInstanceEntityMapper;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.mongodb.MongoDBServerTestResource;\n+import org.kie.kogito.persistence.mongodb.storage.MongoStorage;\n+\n+import static org.kie.kogito.index.Constants.PROCESS_INSTANCES_STORAGE;\n+import static org.kie.kogito.persistence.mongodb.storage.StorageUtils.getCollection;\n+\n+@QuarkusTest\n+@QuarkusTestResource(MongoDBServerTestResource.class)\n+class ProcessInstanceStorageIT {\n+\n+    Storage<String, ProcessInstance> storage;\n+\n+    @BeforeEach\n+    void setUp() {\n+        this.storage = new MongoStorage<>(getCollection(PROCESS_INSTANCES_STORAGE, ProcessInstanceEntity.class), ProcessInstance.class.getName(), new ProcessInstanceEntityMapper());\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        storage.clear();\n+    }\n+\n+    @Test\n+    void testCache() {\n+        String processInstanceId = UUID.randomUUID().toString();\n+        ProcessInstance processInstance1 = TestUtils.createProcessInstance(processInstanceId, RandomStringUtils.randomAlphabetic(5), UUID.randomUUID().toString(), RandomStringUtils.randomAlphabetic(10), ProcessInstanceState.ACTIVE.ordinal(), 0L);\n+        ProcessInstance processInstance2 = TestUtils.createProcessInstance(processInstanceId, RandomStringUtils.randomAlphabetic(5), UUID.randomUUID().toString(), RandomStringUtils.randomAlphabetic(10), ProcessInstanceState.COMPLETED.ordinal(), 1000L);\n+        StorageTestBase.testStorage(storage, processInstanceId, processInstance1, processInstance2);", "originalCommit": "2a8288df19b09d75dfdaa309a84c77833f97e420", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc1NzA3OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r451757079", "bodyText": "Updated", "author": "xieshenzh", "createdAt": "2020-07-08T18:51:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEzNjE4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEzNzAyMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r448137021", "bodyText": "@xiezhang7 I think we should review and simply include this module by default. Otherwise we will have issues to keep it up-to-date if not part of the default build.", "author": "cristianonicolai", "createdAt": "2020-07-01T06:14:23Z", "path": "data-index/data-index-storage/pom.xml", "diffHunk": "@@ -13,10 +13,27 @@\n   <packaging>pom</packaging>\n   <name>Kogito :: Data Index Storage</name>\n \n-  <modules>\n-    <module>data-index-storage-api</module>\n-    <module>data-index-storage-protobuf</module>\n-    <module>data-index-storage-infinispan</module>\n-  </modules>\n+  <profiles>\n+    <profile>\n+      <id>default</id>\n+      <activation>\n+        <activeByDefault>true</activeByDefault>\n+      </activation>\n+      <modules>\n+        <module>data-index-storage-api</module>\n+        <module>data-index-storage-protobuf</module>\n+        <module>data-index-storage-infinispan</module>\n+      </modules>\n+    </profile>\n+    <profile>\n+      <id>experimental</id>\n+      <modules>\n+        <module>data-index-storage-api</module>\n+        <module>data-index-storage-protobuf</module>\n+        <module>data-index-storage-infinispan</module>\n+        <module>data-index-storage-mongodb</module>", "originalCommit": "2a8288df19b09d75dfdaa309a84c77833f97e420", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc1NzI4MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r451757280", "bodyText": "Updated", "author": "xieshenzh", "createdAt": "2020-07-08T18:51:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEzNzAyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEzOTMxNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r448139316", "bodyText": "@xiezhang7 I guess the InfinispanCacheManager should not be initialized at all if not in use?", "author": "cristianonicolai", "createdAt": "2020-07-01T06:20:55Z", "path": "persistence-commons/persistence-commons-infinispan/src/main/java/org/kie/kogito/persistence/infinispan/cache/InfinispanCacheManager.java", "diffHunk": "@@ -52,22 +53,33 @@\n     @ConfigProperty(name = \"kogito.cache.domain.template\", defaultValue = \"kogito-template\")\n     String cacheTemplateName;\n \n+    @ConfigProperty(name = \"kogito.persistence.type\")\n+    String storageType;\n+\n     @Inject\n+    Provider<RemoteCacheManager> remoteCacheManagerProvider;\n+\n     RemoteCacheManager manager;\n \n     @PostConstruct\n     public void init() {\n         jsonDataFormat = DataFormat.builder().valueType(MediaType.APPLICATION_JSON).valueMarshaller(marshaller).build();\n-        manager.start();\n+        // Not initialize RemoteCacheManager if not using infinispan to avoid connection error\n+        if (INFINISPAN_STORAGE.equals(storageType)) {", "originalCommit": "2a8288df19b09d75dfdaa309a84c77833f97e420", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc2MjY2Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r451762666", "bodyText": "It is not initialized. But InfinispanCacheManager observes ShutdownEvent. So it will be created when quarkus terminates and fires ShutdownEvent.", "author": "xieshenzh", "createdAt": "2020-07-08T19:01:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEzOTMxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4MTA4OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r454381088", "bodyText": "Moved the observes method to another class, so that InfinispanCacheManager won't be initialized at all.", "author": "xieshenzh", "createdAt": "2020-07-14T14:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEzOTMxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEzOTY0Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r448139643", "bodyText": "suggestion to use mongodb testcontainer instead.", "author": "cristianonicolai", "createdAt": "2020-07-01T06:21:47Z", "path": "persistence-commons/persistence-commons-mongodb/pom.xml", "diffHunk": "@@ -0,0 +1,105 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>persistence-commons</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>persistence-commons-mongodb</artifactId>\n+  <name>Kogito :: Persistence Commons MongoDB</name>\n+\n+  <properties>\n+    <container.image.mongodb>mongo:4.0</container.image.mongodb>", "originalCommit": "2a8288df19b09d75dfdaa309a84c77833f97e420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1MjE4MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r448152181", "bodyText": "contains in here means an element in the array, perhaps look into using elemMatch ?", "author": "cristianonicolai", "createdAt": "2020-07-01T06:52:25Z", "path": "persistence-commons/persistence-commons-mongodb/src/main/java/org/kie/kogito/persistence/mongodb/query/QueryUtils.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.persistence.mongodb.query;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import org.bson.conversions.Bson;\n+import org.kie.kogito.persistence.api.query.AttributeFilter;\n+\n+import static com.mongodb.client.model.Filters.all;\n+import static com.mongodb.client.model.Filters.and;\n+import static com.mongodb.client.model.Filters.eq;\n+import static com.mongodb.client.model.Filters.exists;\n+import static com.mongodb.client.model.Filters.gt;\n+import static com.mongodb.client.model.Filters.gte;\n+import static com.mongodb.client.model.Filters.in;\n+import static com.mongodb.client.model.Filters.lt;\n+import static com.mongodb.client.model.Filters.lte;\n+import static com.mongodb.client.model.Filters.or;\n+import static com.mongodb.client.model.Filters.regex;\n+import static java.util.stream.Collectors.toList;\n+\n+public class QueryUtils {\n+\n+    private QueryUtils() {\n+    }\n+\n+    static Optional<Bson> generateQuery(List<AttributeFilter<?>> filters, Function<String, String> filterAttributeFunction) {\n+        return Optional.ofNullable(filters).filter(f -> !f.isEmpty()).map(fs -> and(fs.stream().map(f -> generateSingleQuery(f, filterAttributeFunction)).collect(toList())));\n+    }\n+\n+    static Bson generateSingleQuery(AttributeFilter<?> filter, Function<String, String> filterAttributeFunction) {\n+        switch (filter.getCondition()) {\n+            case CONTAINS:", "originalCommit": "2a8288df19b09d75dfdaa309a84c77833f97e420", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg3NDI1NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r451874255", "bodyText": "According to this mongodb tutorial, eq is used to query if the array field contains at least one element with the specified value.", "author": "xieshenzh", "createdAt": "2020-07-08T23:11:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1MjE4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1MjcxMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r448152710", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static Bson generateSingleQuery(AttributeFilter<?> filter, Function<String, String> filterAttributeFunction) {\n          \n          \n            \n                static Bson generateSingleQuery(AttributeFilter<?> filter, Function<String, String> filterFunction) {", "author": "cristianonicolai", "createdAt": "2020-07-01T06:53:40Z", "path": "persistence-commons/persistence-commons-mongodb/src/main/java/org/kie/kogito/persistence/mongodb/query/QueryUtils.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.persistence.mongodb.query;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import org.bson.conversions.Bson;\n+import org.kie.kogito.persistence.api.query.AttributeFilter;\n+\n+import static com.mongodb.client.model.Filters.all;\n+import static com.mongodb.client.model.Filters.and;\n+import static com.mongodb.client.model.Filters.eq;\n+import static com.mongodb.client.model.Filters.exists;\n+import static com.mongodb.client.model.Filters.gt;\n+import static com.mongodb.client.model.Filters.gte;\n+import static com.mongodb.client.model.Filters.in;\n+import static com.mongodb.client.model.Filters.lt;\n+import static com.mongodb.client.model.Filters.lte;\n+import static com.mongodb.client.model.Filters.or;\n+import static com.mongodb.client.model.Filters.regex;\n+import static java.util.stream.Collectors.toList;\n+\n+public class QueryUtils {\n+\n+    private QueryUtils() {\n+    }\n+\n+    static Optional<Bson> generateQuery(List<AttributeFilter<?>> filters, Function<String, String> filterAttributeFunction) {\n+        return Optional.ofNullable(filters).filter(f -> !f.isEmpty()).map(fs -> and(fs.stream().map(f -> generateSingleQuery(f, filterAttributeFunction)).collect(toList())));\n+    }\n+\n+    static Bson generateSingleQuery(AttributeFilter<?> filter, Function<String, String> filterAttributeFunction) {", "originalCommit": "2a8288df19b09d75dfdaa309a84c77833f97e420", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc2MzM3Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r451763377", "bodyText": "Updated", "author": "xieshenzh", "createdAt": "2020-07-08T19:02:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1MjcxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1NTI3MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r448155270", "bodyText": "it should be able to add a list of listeners.\nAlso, take a look at https://mongodb.github.io/mongo-java-driver/4.0/driver/tutorials/change-streams/\nWe should be able to get changes done even from another runtime instance.", "author": "cristianonicolai", "createdAt": "2020-07-01T06:59:24Z", "path": "persistence-commons/persistence-commons-mongodb/src/main/java/org/kie/kogito/persistence/mongodb/storage/MongoStorage.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.persistence.mongodb.storage;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.model.ReplaceOptions;\n+import io.quarkus.mongodb.panache.runtime.MongoOperations;\n+import org.bson.Document;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.query.Query;\n+import org.kie.kogito.persistence.mongodb.model.MongoEntityMapper;\n+import org.kie.kogito.persistence.mongodb.query.MongoQuery;\n+\n+public class MongoStorage<K, V, E> implements Storage<K, V> {\n+\n+    Consumer<V> objectCreatedListener;\n+    Consumer<V> objectUpdatedListener;\n+    Consumer<K> objectRemovedListener;\n+\n+    MongoEntityMapper<K, V, E> mongoEntityMapper;\n+\n+    MongoCollection<E> mongoCollection;\n+    String rootType;\n+\n+    public MongoStorage(MongoCollection<E> mongoCollection, String rootType, MongoEntityMapper<K, V, E> mongoEntityMapper) {\n+        this.mongoCollection = mongoCollection;\n+        this.rootType = rootType;\n+        this.mongoEntityMapper = mongoEntityMapper;\n+    }\n+\n+    @Override\n+    public void addObjectCreatedListener(Consumer<V> consumer) {\n+        this.objectCreatedListener = consumer;", "originalCommit": "2a8288df19b09d75dfdaa309a84c77833f97e420", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzMDQxNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r451830416", "bodyText": "Changed to use change-streams.", "author": "xieshenzh", "createdAt": "2020-07-08T21:17:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1NTI3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE2MTkyMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r448161921", "bodyText": "please include in the main profile", "author": "cristianonicolai", "createdAt": "2020-07-01T07:13:51Z", "path": "persistence-commons/pom.xml", "diffHunk": "@@ -13,12 +13,27 @@\n   <artifactId>persistence-commons</artifactId>\n   <packaging>pom</packaging>\n \n-  <modules>\n-    <module>persistence-commons-api</module>\n-    <module>persistence-commons-infinispan</module>\n-    <module>persistence-commons-protobuf</module>\n-  </modules>\n-\n-\n+  <profiles>\n+    <profile>\n+      <id>default</id>\n+      <activation>\n+        <activeByDefault>true</activeByDefault>\n+      </activation>\n+      <modules>\n+        <module>persistence-commons-api</module>\n+        <module>persistence-commons-protobuf</module>\n+        <module>persistence-commons-infinispan</module>\n+      </modules>\n+    </profile>\n+    <profile>\n+      <id>experimental</id>", "originalCommit": "2a8288df19b09d75dfdaa309a84c77833f97e420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "869269a2bbf82450f7b0e3c2cf59413364009d78", "url": "https://github.com/kiegroup/kogito-apps/commit/869269a2bbf82450f7b0e3c2cf59413364009d78", "message": "Add mongodb integration tests for data-index-service", "committedDate": "2020-07-08T02:21:20Z", "type": "forcePushed"}, {"oid": "2c289dfa088e603e38202d604646d0a80f524f33", "url": "https://github.com/kiegroup/kogito-apps/commit/2c289dfa088e603e38202d604646d0a80f524f33", "message": "Resolve conflicts", "committedDate": "2020-07-14T13:50:00Z", "type": "forcePushed"}, {"oid": "1610e8fdc9ba4ae66982bee8055e9d1d4523896c", "url": "https://github.com/kiegroup/kogito-apps/commit/1610e8fdc9ba4ae66982bee8055e9d1d4523896c", "message": "Resolve conflicts", "committedDate": "2020-07-14T14:01:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwMjE3MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r455002170", "bodyText": "@xiezhang7 shouldn't this be handled by the addObjectCreatedListener method so it only returns once subscription.request is called?", "author": "cristianonicolai", "createdAt": "2020-07-15T12:09:05Z", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/cache/AbstractStorageIT.java", "diffHunk": "@@ -78,10 +77,23 @@ public void testObjectRemovedListener() throws Exception {\n         CompletableFuture<String> cf = new CompletableFuture<>();\n         Storage<String, ProcessInstance> cache = cacheService.getProcessInstancesCache();\n         cache.addObjectRemovedListener(id -> cf.complete(id));\n+        awaitForListenerReady();\n         cache.put(processInstanceId, getProcessInstance(processId, processInstanceId, ProcessInstanceState.ACTIVE.ordinal(), null, null));\n         cache.remove(processInstanceId);\n \n         String id = cf.get(1, TimeUnit.MINUTES);\n         assertThat(id).isEqualTo(processInstanceId);\n     }\n+\n+    @AfterEach\n+    void tearDown() {\n+        Storage<String, ProcessInstance> cache = cacheService.getProcessInstancesCache();\n+        cache.clear();\n+    }\n+\n+    static void awaitForListenerReady() {", "originalCommit": "1610e8fdc9ba4ae66982bee8055e9d1d4523896c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0ODUxNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r456448517", "bodyText": "Moved to addObjectCreatedListener .", "author": "xieshenzh", "createdAt": "2020-07-17T13:39:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwMjE3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwNDMxNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r455004315", "bodyText": "Could we simply reuse the same proto files for both tests?", "author": "cristianonicolai", "createdAt": "2020-07-15T12:12:59Z", "path": "data-index/data-index-service/src/test/resources/deals-mongo.proto", "diffHunk": "@@ -0,0 +1,37 @@\n+syntax = \"proto2\";", "originalCommit": "1610e8fdc9ba4ae66982bee8055e9d1d4523896c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0OTgwOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r456449809", "bodyText": "The proto files for infinispan tests have more than 64 index annotations. Mongodb cannot create so many indexes.", "author": "xieshenzh", "createdAt": "2020-07-17T13:41:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwNDMxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxODgwMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r455018801", "bodyText": "@xiezhang7 shouldn't we reuse the MongoClient created by Quarkus instead? You should be able to retrieve that using injection.", "author": "cristianonicolai", "createdAt": "2020-07-15T12:38:44Z", "path": "persistence-commons/persistence-commons-mongodb/src/main/java/org/kie/kogito/persistence/mongodb/storage/StorageUtils.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.persistence.mongodb.storage;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+\n+import com.mongodb.ConnectionString;\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.reactivestreams.client.MongoClient;\n+import com.mongodb.reactivestreams.client.MongoClients;\n+import io.quarkus.mongodb.panache.runtime.MongoOperations;\n+import org.bson.BsonDocument;\n+import org.bson.Document;\n+import org.bson.conversions.Bson;\n+import org.kie.kogito.persistence.mongodb.model.MongoEntityMapper;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import static com.mongodb.client.model.Aggregates.match;\n+import static com.mongodb.client.model.changestream.FullDocument.UPDATE_LOOKUP;\n+import static java.util.Collections.singletonList;\n+import static org.eclipse.microprofile.config.ConfigProvider.getConfig;\n+import static org.kie.kogito.persistence.mongodb.model.ModelUtils.documentToObject;\n+\n+public class StorageUtils {\n+\n+    private StorageUtils() {\n+    }\n+\n+    private static MongoClient mongoClient;\n+\n+    static {\n+        String mongoConnectionProperty = \"quarkus.mongodb.connection-string\";\n+        String connection = getConfig().getValue(mongoConnectionProperty, String.class);\n+        mongoClient = MongoClients.create(new ConnectionString(connection));", "originalCommit": "1610e8fdc9ba4ae66982bee8055e9d1d4523896c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ1MDcyMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r456450720", "bodyText": "Changed to use mongo client .", "author": "xieshenzh", "createdAt": "2020-07-17T13:43:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxODgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyMDQ0Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r455020446", "bodyText": "so it seems that we're creating multiple databases per type. Could we simplify that so there is only one database with multiple collections?", "author": "cristianonicolai", "createdAt": "2020-07-15T12:41:39Z", "path": "persistence-commons/persistence-commons-mongodb/src/main/java/org/kie/kogito/persistence/mongodb/storage/StorageUtils.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.persistence.mongodb.storage;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+\n+import com.mongodb.ConnectionString;\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.reactivestreams.client.MongoClient;\n+import com.mongodb.reactivestreams.client.MongoClients;\n+import io.quarkus.mongodb.panache.runtime.MongoOperations;\n+import org.bson.BsonDocument;\n+import org.bson.Document;\n+import org.bson.conversions.Bson;\n+import org.kie.kogito.persistence.mongodb.model.MongoEntityMapper;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import static com.mongodb.client.model.Aggregates.match;\n+import static com.mongodb.client.model.changestream.FullDocument.UPDATE_LOOKUP;\n+import static java.util.Collections.singletonList;\n+import static org.eclipse.microprofile.config.ConfigProvider.getConfig;\n+import static org.kie.kogito.persistence.mongodb.model.ModelUtils.documentToObject;\n+\n+public class StorageUtils {\n+\n+    private StorageUtils() {\n+    }\n+\n+    private static MongoClient mongoClient;\n+\n+    static {\n+        String mongoConnectionProperty = \"quarkus.mongodb.connection-string\";\n+        String connection = getConfig().getValue(mongoConnectionProperty, String.class);\n+        mongoClient = MongoClients.create(new ConnectionString(connection));\n+    }\n+\n+    public static <E> MongoCollection<E> getCollection(String collection, Class<E> type) {\n+        return MongoOperations.mongoDatabase(type).getCollection(collection, type);", "originalCommit": "1610e8fdc9ba4ae66982bee8055e9d1d4523896c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ1MTU2Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r456451567", "bodyText": "Changed to explicitly use one database .", "author": "xieshenzh", "createdAt": "2020-07-17T13:44:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyMDQ0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTExMjAzMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r455112033", "bodyText": "@xiezhang7 should be enough to override this property using System.setProperty that way I think you can avoid creating the MongoConfigSource", "author": "cristianonicolai", "createdAt": "2020-07-15T14:50:18Z", "path": "persistence-commons/persistence-commons-mongodb/src/test/java/org/kie/kogito/persistence/mongodb/MongoServerTestResource.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.persistence.mongodb;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+import org.testcontainers.containers.MongoDBContainer;\n+\n+import static org.kie.kogito.persistence.mongodb.MongoConfigSource.addProperty;\n+\n+public class MongoServerTestResource implements QuarkusTestResourceLifecycleManager {\n+\n+    private static final String MONGODB_CONNECTION_PROPERTY = \"quarkus.mongodb.connection-string\";\n+\n+    private MongoDBContainer mongoDBContainer;\n+\n+    @Override\n+    public Map<String, String> start() {\n+        mongoDBContainer = new MongoDBContainer();\n+        mongoDBContainer.start();\n+        addProperty(MONGODB_CONNECTION_PROPERTY, mongoDBContainer.getReplicaSetUrl());", "originalCommit": "1610e8fdc9ba4ae66982bee8055e9d1d4523896c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ1MjA4Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r456452083", "bodyText": "Done. Removed MongoConfigSource .", "author": "xieshenzh", "createdAt": "2020-07-17T13:45:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTExMjAzMw=="}], "type": "inlineReview"}, {"oid": "ac5b4d8fa4809468001c75fe88421db89683e72a", "url": "https://github.com/kiegroup/kogito-apps/commit/ac5b4d8fa4809468001c75fe88421db89683e72a", "message": "Remove dependency on Panache", "committedDate": "2020-07-16T22:31:15Z", "type": "forcePushed"}, {"oid": "43fc9f7cb79a7bce16d7b3c502020cecd729ad1a", "url": "https://github.com/kiegroup/kogito-apps/commit/43fc9f7cb79a7bce16d7b3c502020cecd729ad1a", "message": "Remove dependency on Panache", "committedDate": "2020-07-17T00:50:45Z", "type": "forcePushed"}, {"oid": "48b444e456d675ec35a1eb91b6b3ac7e58219d74", "url": "https://github.com/kiegroup/kogito-apps/commit/48b444e456d675ec35a1eb91b6b3ac7e58219d74", "message": "Remove dependency on Panache", "committedDate": "2020-07-17T03:53:28Z", "type": "forcePushed"}, {"oid": "6ce2eafe26807cbc43c1b74424fcef3c6e0578c5", "url": "https://github.com/kiegroup/kogito-apps/commit/6ce2eafe26807cbc43c1b74424fcef3c6e0578c5", "message": "Remove dependency on Panache", "committedDate": "2020-07-17T13:37:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3MDg0Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r457070847", "bodyText": "maybe just comment out this, otherwise it can be quite verbose on Jenkins build.", "author": "cristianonicolai", "createdAt": "2020-07-20T05:42:48Z", "path": "data-index/data-index-storage/data-index-storage-mongodb/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,15 @@\n+# Quarkus\n+quarkus.log.console.enable=true\n+quarkus.log.console.level=INFO\n+quarkus.log.level=INFO\n+quarkus.log.category.\"org.kie.kogito\".level=DEBUG", "originalCommit": "6ce2eafe26807cbc43c1b74424fcef3c6e0578c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3NTMzMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r457675330", "bodyText": "Commented out.", "author": "xieshenzh", "createdAt": "2020-07-20T20:34:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3MDg0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3Mjk1Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r457072957", "bodyText": "@xiezhang7 couldnt this be avoided if you add a CountDownLatch that called once onSubscribe is called?", "author": "cristianonicolai", "createdAt": "2020-07-20T05:47:17Z", "path": "persistence-commons/persistence-commons-mongodb/src/main/java/org/kie/kogito/persistence/mongodb/storage/StorageUtils.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.persistence.mongodb.storage;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;\n+\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.reactivestreams.client.MongoCollection;\n+import org.bson.BsonDocument;\n+import org.bson.Document;\n+import org.bson.conversions.Bson;\n+import org.kie.kogito.persistence.mongodb.model.MongoEntityMapper;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import static com.mongodb.client.model.Aggregates.match;\n+import static com.mongodb.client.model.changestream.FullDocument.UPDATE_LOOKUP;\n+import static java.util.Collections.singletonList;\n+import static org.kie.kogito.persistence.mongodb.model.ModelUtils.MONGO_ID;\n+import static org.kie.kogito.persistence.mongodb.model.ModelUtils.documentToObject;\n+\n+public class StorageUtils {\n+\n+    private StorageUtils() {\n+\n+    }\n+\n+    public static <V, E> void watchCollection(MongoCollection<E> reactiveMongoCollection, Bson operationType,\n+                                              BiConsumer<String, V> consumer, MongoEntityMapper<V, E> mongoEntityMapper) {\n+        reactiveMongoCollection.watch(singletonList(match(operationType)))\n+                .fullDocument(UPDATE_LOOKUP).subscribe(new ObjectListenerSubscriber<>(consumer, mongoEntityMapper));\n+\n+        // There is no way to check if MongoDB Change Stream is ready https://jira.mongodb.org/browse/NODE-2247\n+        // Pause the execution to wait for the Change Stream to be ready\n+        try {\n+            TimeUnit.MILLISECONDS.sleep(1500L);", "originalCommit": "6ce2eafe26807cbc43c1b74424fcef3c6e0578c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3NjMwMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r457676303", "bodyText": "I have tried that. But even after onSubscribe is called, the ChangeStream is not ready.", "author": "xieshenzh", "createdAt": "2020-07-20T20:36:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3Mjk1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3NDYxNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r457074614", "bodyText": "same here, please comment out so logs arent so verbose in Jenkis.", "author": "cristianonicolai", "createdAt": "2020-07-20T05:50:28Z", "path": "persistence-commons/persistence-commons-mongodb/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,15 @@\n+# Quarkus\n+quarkus.log.console.enable=true\n+quarkus.log.console.level=INFO\n+quarkus.log.level=INFO\n+quarkus.log.category.\"org.kie.kogito\".level=DEBUG", "originalCommit": "6ce2eafe26807cbc43c1b74424fcef3c6e0578c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3NTQwOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/293#discussion_r457675408", "bodyText": "Commented out.", "author": "xieshenzh", "createdAt": "2020-07-20T20:34:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3NDYxNA=="}], "type": "inlineReview"}, {"oid": "37b6714ddfbeba4dbb1e0c7611f11816e3016b8c", "url": "https://github.com/kiegroup/kogito-apps/commit/37b6714ddfbeba4dbb1e0c7611f11816e3016b8c", "message": "Use getter and setter for the entity", "committedDate": "2020-07-20T18:49:05Z", "type": "forcePushed"}, {"oid": "c1b5c3f4ba8b22f0077b5a7e35ac64c8d4fb3531", "url": "https://github.com/kiegroup/kogito-apps/commit/c1b5c3f4ba8b22f0077b5a7e35ac64c8d4fb3531", "message": "Use getter and setter for the entity", "committedDate": "2020-07-20T20:38:44Z", "type": "forcePushed"}, {"oid": "51484d9983400e69279b58d970225aec91fc21c9", "url": "https://github.com/kiegroup/kogito-apps/commit/51484d9983400e69279b58d970225aec91fc21c9", "message": "[KOGITO-2121] MongoDB for Data Index service", "committedDate": "2020-07-21T17:46:05Z", "type": "commit"}, {"oid": "0870a1e457f0ce96c0f1332006c162db70ed2558", "url": "https://github.com/kiegroup/kogito-apps/commit/0870a1e457f0ce96c0f1332006c162db70ed2558", "message": "Use mongo client for query operator", "committedDate": "2020-07-21T17:46:05Z", "type": "commit"}, {"oid": "10f00cbf7aeffd547187a6fdd2543b1454fd5179", "url": "https://github.com/kiegroup/kogito-apps/commit/10f00cbf7aeffd547187a6fdd2543b1454fd5179", "message": "Change MongoStorage implementation", "committedDate": "2020-07-21T17:46:05Z", "type": "commit"}, {"oid": "96751734630bb6b54360b06e02590be8d41d8e16", "url": "https://github.com/kiegroup/kogito-apps/commit/96751734630bb6b54360b06e02590be8d41d8e16", "message": "Documentation for data index with MongoDB", "committedDate": "2020-07-21T17:46:05Z", "type": "commit"}, {"oid": "0015ec1456adfdc9eaaa56de5d57a3f81479d9a2", "url": "https://github.com/kiegroup/kogito-apps/commit/0015ec1456adfdc9eaaa56de5d57a3f81479d9a2", "message": "Use testcontainers mongodb module for mongodb integration test", "committedDate": "2020-07-21T17:46:05Z", "type": "commit"}, {"oid": "026b3b3dd27cdb63796aae256a6676d09ac52328", "url": "https://github.com/kiegroup/kogito-apps/commit/026b3b3dd27cdb63796aae256a6676d09ac52328", "message": "Remove unnecessary \"_id\" for subdocument", "committedDate": "2020-07-21T17:46:05Z", "type": "commit"}, {"oid": "78ab641789585b9e7839e342bedf40c7bac1c824", "url": "https://github.com/kiegroup/kogito-apps/commit/78ab641789585b9e7839e342bedf40c7bac1c824", "message": "Use MongoDB ChangeStream for object listener", "committedDate": "2020-07-21T17:46:05Z", "type": "commit"}, {"oid": "e29a021a1e2a8acae7b30a2fb7d390ffdaea1226", "url": "https://github.com/kiegroup/kogito-apps/commit/e29a021a1e2a8acae7b30a2fb7d390ffdaea1226", "message": "Add mongodb integration tests for data-index-service", "committedDate": "2020-07-21T17:46:05Z", "type": "commit"}, {"oid": "665213c1d5f50c9307aefe3636fb2b0b2258ab1b", "url": "https://github.com/kiegroup/kogito-apps/commit/665213c1d5f50c9307aefe3636fb2b0b2258ab1b", "message": "Sonar analysis", "committedDate": "2020-07-21T17:46:05Z", "type": "commit"}, {"oid": "06bcbf41ceb10a26d734ecab19d3af237746ddb1", "url": "https://github.com/kiegroup/kogito-apps/commit/06bcbf41ceb10a26d734ecab19d3af237746ddb1", "message": "Resolve conflicts", "committedDate": "2020-07-21T17:46:05Z", "type": "commit"}, {"oid": "3744e743d7e8e07c726f799d561da38c119fd2b9", "url": "https://github.com/kiegroup/kogito-apps/commit/3744e743d7e8e07c726f799d561da38c119fd2b9", "message": "Remove dependency on Panache", "committedDate": "2020-07-21T17:46:05Z", "type": "commit"}, {"oid": "cb0e174c93144433960e514cf9ca1fe490b089c0", "url": "https://github.com/kiegroup/kogito-apps/commit/cb0e174c93144433960e514cf9ca1fe490b089c0", "message": "Use getter and setter for the entity", "committedDate": "2020-07-21T17:46:05Z", "type": "commit"}, {"oid": "ae3f1465c51388cd4d4d3e657d6c63ece03e6c74", "url": "https://github.com/kiegroup/kogito-apps/commit/ae3f1465c51388cd4d4d3e657d6c63ece03e6c74", "message": "Sonar analysis", "committedDate": "2020-07-21T19:07:18Z", "type": "forcePushed"}, {"oid": "16dcd5f24d87fdd11e3c5e0294e821eff634ad70", "url": "https://github.com/kiegroup/kogito-apps/commit/16dcd5f24d87fdd11e3c5e0294e821eff634ad70", "message": "Sonar analysis", "committedDate": "2020-07-21T20:58:55Z", "type": "commit"}, {"oid": "16dcd5f24d87fdd11e3c5e0294e821eff634ad70", "url": "https://github.com/kiegroup/kogito-apps/commit/16dcd5f24d87fdd11e3c5e0294e821eff634ad70", "message": "Sonar analysis", "committedDate": "2020-07-21T20:58:55Z", "type": "forcePushed"}]}