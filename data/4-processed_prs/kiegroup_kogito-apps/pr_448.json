{"pr_number": 448, "pr_title": "KOGITO-1140 Add node trigger to process details page", "pr_createdAt": "2020-09-08T08:10:33Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/448", "timeline": [{"oid": "4865cbb280d94c7f31dec5f6d9df86cf2c71bb0f", "url": "https://github.com/kiegroup/kogito-apps/commit/4865cbb280d94c7f31dec5f6d9df86cf2c71bb0f", "message": "KOGITO-1140 Add node trigger to process details page", "committedDate": "2020-09-08T10:08:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzNzUwMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/448#discussion_r485537502", "bodyText": "@AjayJagan  this dropdown have to be created from the process definition nodes. We can retrieve that info accessing to runtime Rest endpoint  .../management/processes/{processId}/nodes. Here you are creating it from the process instance existing nodes", "author": "nmirasch", "createdAt": "2020-09-09T11:28:06Z", "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsNodeTrigger/ProcessDetailsNodeTrigger.tsx", "diffHunk": "@@ -0,0 +1,195 @@\n+import {\n+  Card,\n+  CardBody,\n+  CardHeader,\n+  Title,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  Flex,\n+  FlexItem,\n+  TextContent,\n+  Text,\n+  TextVariants,\n+  Split,\n+  SplitItem,\n+  Button\n+} from '@patternfly/react-core';\n+import React, { useState } from 'react';\n+import { CaretDownIcon } from '@patternfly/react-icons';\n+import ProcessListModal from '../../Atoms/ProcessListModal/ProcessListModal';\n+import { setTitle, handleNodeTrigger } from '../../../utils/Utils';\n+import { GraphQL } from '@kogito-apps/common';\n+\n+interface NodeTriggerProps {\n+  processInstanceData: Pick<\n+    GraphQL.ProcessInstance,\n+    'id' | 'serviceUrl' | 'processId' | 'nodes'\n+  >;\n+}\n+\n+const ProcessDetailsNodeTrigger: React.FC<NodeTriggerProps> = ({\n+  processInstanceData\n+}) => {\n+  const [isOpen, setIsOpen] = useState<boolean>(false);\n+  const [selectedNode, setSelectedNode] = useState<GraphQL.NodeInstance>(null);\n+  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n+  const [modalTitle, setModalTitle] = useState<string>('');\n+  const [titleType, setTitleType] = useState<string>('');\n+  const [modalContent, setModalContent] = useState<string>('');\n+\n+  const handleModalToggle = (): void => {\n+    setIsModalOpen(!isModalOpen);\n+  };\n+\n+  const onSelect = (event: React.SyntheticEvent<HTMLDivElement>): void => {\n+    setIsOpen(!isOpen);\n+    getSelectedNode(event.currentTarget.id);\n+  };\n+\n+  const onToggle = (isDropDownOpen: boolean): void => {\n+    setIsOpen(isDropDownOpen);\n+  };\n+\n+  const getSelectedNode = (selectedNodeName: string): void => {\n+    const selectedNodeObject: GraphQL.NodeInstance[] = processInstanceData.nodes.filter(\n+      (node: GraphQL.NodeInstance) => node.name === selectedNodeName\n+    );\n+    setSelectedNode(selectedNodeObject[0]);\n+  };\n+\n+  const createNodeDropDown = (nodes: GraphQL.NodeInstance[]): JSX.Element[] => {\n+    const nodeDropDown: JSX.Element[] = [];\n+    nodes.forEach((node: GraphQL.NodeInstance) => {\n+      node.type !== null &&\n+        node.type !== 'Join' &&\n+        node.type !== 'StartNode' &&\n+        nodeDropDown.push(\n+          <DropdownItem key={node.id} id={node.name}>\n+            {node.name}\n+          </DropdownItem>\n+        );\n+    });\n+    return nodeDropDown;\n+  };\n+\n+  const onTriggerClick = async (): Promise<void> => {\n+    setModalTitle('Node trigger process');\n+    await handleNodeTrigger(\n+      processInstanceData,\n+      selectedNode,\n+      () => {\n+        setTitleType('success');\n+        setModalContent(\n+          `The node ${selectedNode.name} was triggered successfully`\n+        );\n+      },\n+      errorMessage => {\n+        setTitleType('failure');\n+        setModalContent(\n+          `The node ${selectedNode.name} failed to trigger. ErrorMessage : ${errorMessage}`\n+        );\n+      }\n+    );\n+    handleModalToggle();\n+  };\n+\n+  return (\n+    <Card>\n+      <ProcessListModal\n+        isModalOpen={isModalOpen}\n+        handleModalToggle={handleModalToggle}\n+        modalTitle={setTitle(titleType, modalTitle)}\n+        modalContent={modalContent}\n+        processName={selectedNode && selectedNode.name}\n+      />\n+      <CardHeader>\n+        <Title headingLevel=\"h3\" size=\"xl\">\n+          Node Trigger\n+        </Title>\n+      </CardHeader>\n+      <CardHeader>\n+        <div>Manually triggers a node</div>\n+      </CardHeader>\n+      <CardBody>\n+        <div>\n+          <Dropdown\n+            direction=\"up\"\n+            onSelect={onSelect}\n+            toggle={\n+              <DropdownToggle\n+                id=\"toggle-id\"\n+                onToggle={onToggle}\n+                toggleIndicator={CaretDownIcon}\n+              >\n+                {selectedNode ? selectedNode.name : 'select a node'}\n+              </DropdownToggle>\n+            }\n+            isOpen={isOpen}\n+            dropdownItems={createNodeDropDown(processInstanceData.nodes)}", "originalCommit": "4865cbb280d94c7f31dec5f6d9df86cf2c71bb0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkxMTI5Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/448#discussion_r494911293", "bodyText": "done \ud83d\udc4d", "author": "AjayJagan", "createdAt": "2020-09-25T10:59:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzNzUwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUxOTczOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/448#discussion_r488519738", "bodyText": "please add OUIA component attributes.", "author": "jstastny-cz", "createdAt": "2020-09-15T09:25:44Z", "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsNodeTrigger/ProcessDetailsNodeTrigger.tsx", "diffHunk": "@@ -0,0 +1,195 @@\n+import {\n+  Card,\n+  CardBody,\n+  CardHeader,\n+  Title,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  Flex,\n+  FlexItem,\n+  TextContent,\n+  Text,\n+  TextVariants,\n+  Split,\n+  SplitItem,\n+  Button\n+} from '@patternfly/react-core';\n+import React, { useState } from 'react';\n+import { CaretDownIcon } from '@patternfly/react-icons';\n+import ProcessListModal from '../../Atoms/ProcessListModal/ProcessListModal';\n+import { setTitle, handleNodeTrigger } from '../../../utils/Utils';\n+import { GraphQL } from '@kogito-apps/common';\n+\n+interface NodeTriggerProps {\n+  processInstanceData: Pick<\n+    GraphQL.ProcessInstance,\n+    'id' | 'serviceUrl' | 'processId' | 'nodes'\n+  >;\n+}\n+\n+const ProcessDetailsNodeTrigger: React.FC<NodeTriggerProps> = ({\n+  processInstanceData\n+}) => {\n+  const [isOpen, setIsOpen] = useState<boolean>(false);\n+  const [selectedNode, setSelectedNode] = useState<GraphQL.NodeInstance>(null);\n+  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n+  const [modalTitle, setModalTitle] = useState<string>('');\n+  const [titleType, setTitleType] = useState<string>('');\n+  const [modalContent, setModalContent] = useState<string>('');\n+\n+  const handleModalToggle = (): void => {\n+    setIsModalOpen(!isModalOpen);\n+  };\n+\n+  const onSelect = (event: React.SyntheticEvent<HTMLDivElement>): void => {\n+    setIsOpen(!isOpen);\n+    getSelectedNode(event.currentTarget.id);\n+  };\n+\n+  const onToggle = (isDropDownOpen: boolean): void => {\n+    setIsOpen(isDropDownOpen);\n+  };\n+\n+  const getSelectedNode = (selectedNodeName: string): void => {\n+    const selectedNodeObject: GraphQL.NodeInstance[] = processInstanceData.nodes.filter(\n+      (node: GraphQL.NodeInstance) => node.name === selectedNodeName\n+    );\n+    setSelectedNode(selectedNodeObject[0]);\n+  };\n+\n+  const createNodeDropDown = (nodes: GraphQL.NodeInstance[]): JSX.Element[] => {\n+    const nodeDropDown: JSX.Element[] = [];\n+    nodes.forEach((node: GraphQL.NodeInstance) => {\n+      node.type !== null &&\n+        node.type !== 'Join' &&\n+        node.type !== 'StartNode' &&\n+        nodeDropDown.push(\n+          <DropdownItem key={node.id} id={node.name}>\n+            {node.name}\n+          </DropdownItem>\n+        );\n+    });\n+    return nodeDropDown;\n+  };\n+\n+  const onTriggerClick = async (): Promise<void> => {\n+    setModalTitle('Node trigger process');\n+    await handleNodeTrigger(\n+      processInstanceData,\n+      selectedNode,\n+      () => {\n+        setTitleType('success');\n+        setModalContent(\n+          `The node ${selectedNode.name} was triggered successfully`\n+        );\n+      },\n+      errorMessage => {\n+        setTitleType('failure');\n+        setModalContent(\n+          `The node ${selectedNode.name} failed to trigger. ErrorMessage : ${errorMessage}`\n+        );\n+      }\n+    );\n+    handleModalToggle();\n+  };\n+\n+  return (\n+    <Card>", "originalCommit": "4865cbb280d94c7f31dec5f6d9df86cf2c71bb0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkxMTIwNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/448#discussion_r494911206", "bodyText": "added OUIA props", "author": "AjayJagan", "createdAt": "2020-09-25T10:59:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUxOTczOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyNDMzMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/448#discussion_r488524332", "bodyText": "Could we mock the trigger component or do we need it fully rendered for the test?", "author": "jstastny-cz", "createdAt": "2020-09-15T09:33:03Z", "path": "ui-packages/packages/management-console/src/components/Templates/ProcessDetailsPage/tests/__snapshots__/ProcessDetailsPage.test.tsx.snap", "diffHunk": "@@ -884,6 +884,343 @@ exports[`Process Details Page component tests snapshot testing in Active state 1\n                     />\n                   </div>\n                 </FlexItem>\n+                <FlexItem>\n+                  <div\n+                    className=\"\"\n+                  >\n+                    <ProcessDetailsNodeTrigger", "originalCommit": "4865cbb280d94c7f31dec5f6d9df86cf2c71bb0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkxMTE1OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/448#discussion_r494911158", "bodyText": "mocked :)", "author": "AjayJagan", "createdAt": "2020-09-25T10:59:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyNDMzMg=="}], "type": "inlineReview"}, {"oid": "775f2a9a907905af2381b6e936b54482058978cd", "url": "https://github.com/kiegroup/kogito-apps/commit/775f2a9a907905af2381b6e936b54482058978cd", "message": "KOGITO-1140 Add node trigger to process details page", "committedDate": "2020-09-25T10:55:31Z", "type": "forcePushed"}, {"oid": "d8c3830ef7b20bb4a80e797730f8cf712d040f48", "url": "https://github.com/kiegroup/kogito-apps/commit/d8c3830ef7b20bb4a80e797730f8cf712d040f48", "message": "KOGITO-1140 Add node trigger to process details page", "committedDate": "2020-09-25T10:58:55Z", "type": "forcePushed"}, {"oid": "e32baf7c605c493121faa3b3fd2c57f49cab20ae", "url": "https://github.com/kiegroup/kogito-apps/commit/e32baf7c605c493121faa3b3fd2c57f49cab20ae", "message": "KOGITO-1140 Add node trigger to process details page", "committedDate": "2020-10-07T08:27:30Z", "type": "forcePushed"}, {"oid": "6adcf574794bda4dd260aab8be7b71b39788769c", "url": "https://github.com/kiegroup/kogito-apps/commit/6adcf574794bda4dd260aab8be7b71b39788769c", "message": "KOGITO-1140 Add node trigger to process details page", "committedDate": "2020-10-08T10:51:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTczNDMyNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/448#discussion_r501734325", "bodyText": "@AjayJagan this button only should be enabled when there is a node selected to avoid to handle that situation throwing an error message.", "author": "nmirasch", "createdAt": "2020-10-08T13:47:16Z", "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsNodeTrigger/ProcessDetailsNodeTrigger.tsx", "diffHunk": "@@ -0,0 +1,212 @@\n+import {\n+  Card,\n+  CardBody,\n+  CardHeader,\n+  Title,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  Flex,\n+  FlexItem,\n+  TextContent,\n+  Text,\n+  TextVariants,\n+  Split,\n+  SplitItem,\n+  Button\n+} from '@patternfly/react-core';\n+import React, { useState, useEffect } from 'react';\n+import { CaretDownIcon } from '@patternfly/react-icons';\n+import ProcessListModal from '../../Atoms/ProcessListModal/ProcessListModal';\n+import {\n+  setTitle,\n+  handleNodeTrigger,\n+  getTriggerableNodes,\n+  TriggerableNode\n+} from '../../../utils/Utils';\n+import { GraphQL, OUIAProps, componentOuiaProps } from '@kogito-apps/common';\n+\n+interface NodeTriggerProps {\n+  processInstanceData: Pick<\n+    GraphQL.ProcessInstance,\n+    'id' | 'serviceUrl' | 'processId'\n+  >;\n+}\n+\n+const ProcessDetailsNodeTrigger: React.FC<NodeTriggerProps & OUIAProps> = ({\n+  processInstanceData,\n+  ouiaId,\n+  ouiaSafe\n+}) => {\n+  const [isOpen, setIsOpen] = useState<boolean>(false);\n+  const [selectedNode, setSelectedNode] = useState(null);\n+  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n+  const [modalTitle, setModalTitle] = useState<string>('');\n+  const [titleType, setTitleType] = useState<string>('');\n+  const [modalContent, setModalContent] = useState<string>('');\n+  const [nodes, setNodes] = useState([]);\n+  /* tslint:disable:no-floating-promises */\n+  useEffect(() => {\n+    (async () => {\n+      const nodesArray = await getTriggerableNodes(processInstanceData);\n+      setNodes(nodesArray);\n+    })();\n+  }, []);\n+\n+  const handleModalToggle = (): void => {\n+    setIsModalOpen(!isModalOpen);\n+  };\n+\n+  const onSelect = (event: React.SyntheticEvent<HTMLDivElement>): void => {\n+    setIsOpen(!isOpen);\n+    getSelectedNode(event.currentTarget.id);\n+  };\n+\n+  const onToggle = (isDropDownOpen: boolean): void => {\n+    setIsOpen(isDropDownOpen);\n+  };\n+\n+  const getSelectedNode = (selectedNodeName: string): void => {\n+    const selectedNodeObject: TriggerableNode[] =\n+      nodes.length > 0 &&\n+      nodes.filter((node: TriggerableNode) => node.name === selectedNodeName);\n+\n+    setSelectedNode(selectedNodeObject[0]);\n+  };\n+\n+  const createNodeDropDown = (): JSX.Element[] => {\n+    const nodeDropDown: JSX.Element[] = [];\n+    nodes.length > 0 &&\n+      nodes.forEach((node: TriggerableNode) => {\n+        node.type !== null &&\n+          node.type !== 'StartNode' &&\n+          node.type !== 'Join' &&\n+          nodeDropDown.push(\n+            <DropdownItem key={node.uniqueId} id={node.name}>\n+              {node.name}\n+            </DropdownItem>\n+          );\n+      });\n+    return nodeDropDown;\n+  };\n+\n+  const onTriggerClick = async (): Promise<void> => {\n+    setModalTitle('Node trigger process');\n+    await handleNodeTrigger(\n+      processInstanceData,\n+      selectedNode,\n+      () => {\n+        setTitleType('success');\n+        setModalContent(\n+          `The node ${selectedNode.name} was triggered successfully`\n+        );\n+      },\n+      errorMessage => {\n+        setTitleType('failure');\n+        setModalContent(\n+          `The node ${selectedNode.name} failed to trigger. ErrorMessage : ${errorMessage}`\n+        );\n+      }\n+    );\n+    handleModalToggle();\n+  };\n+\n+  return (\n+    <Card {...componentOuiaProps(ouiaId, 'node-trigger', ouiaSafe)}>\n+      <ProcessListModal\n+        isModalOpen={isModalOpen}\n+        handleModalToggle={handleModalToggle}\n+        modalTitle={setTitle(titleType, modalTitle)}\n+        modalContent={modalContent}\n+        processName={selectedNode && selectedNode.name}\n+      />\n+      <CardHeader>\n+        <Title headingLevel=\"h3\" size=\"xl\">\n+          Node Trigger\n+        </Title>\n+      </CardHeader>\n+      <CardHeader>\n+        <div>Manually triggers a node</div>\n+      </CardHeader>\n+      <CardBody>\n+        <div>\n+          <Dropdown\n+            direction=\"up\"\n+            onSelect={onSelect}\n+            toggle={\n+              <DropdownToggle\n+                id=\"toggle-id\"\n+                onToggle={onToggle}\n+                toggleIndicator={CaretDownIcon}\n+              >\n+                {selectedNode ? selectedNode.name : 'select a node'}\n+              </DropdownToggle>\n+            }\n+            isOpen={isOpen}\n+            dropdownItems={createNodeDropDown()}\n+          />\n+        </div>\n+        {selectedNode && (\n+          <>\n+            <div className=\"pf-u-mt-md\">\n+              <Flex direction={{ default: 'column' }}>\n+                <FlexItem>\n+                  <TextContent>\n+                    {' '}\n+                    <Split hasGutter>\n+                      <SplitItem>\n+                        <Text component={TextVariants.h6}>Node name : </Text>\n+                      </SplitItem>\n+                      <SplitItem>\n+                        <Text component={TextVariants.p}>\n+                          {selectedNode.name}\n+                        </Text>\n+                      </SplitItem>\n+                    </Split>\n+                  </TextContent>\n+                </FlexItem>\n+                <FlexItem>\n+                  <TextContent>\n+                    {' '}\n+                    <Split hasGutter>\n+                      <SplitItem>\n+                        <Text component={TextVariants.h6}>Node type : </Text>\n+                      </SplitItem>\n+                      <SplitItem>\n+                        <Text component={TextVariants.p}>\n+                          {selectedNode.type}\n+                        </Text>\n+                      </SplitItem>\n+                    </Split>\n+                  </TextContent>\n+                </FlexItem>\n+                <FlexItem>\n+                  <TextContent>\n+                    {' '}\n+                    <Split hasGutter>\n+                      <SplitItem>\n+                        <Text component={TextVariants.h6}>Node id : </Text>\n+                      </SplitItem>\n+                      <SplitItem>\n+                        <Text component={TextVariants.p}>\n+                          {selectedNode.id}\n+                        </Text>\n+                      </SplitItem>\n+                    </Split>\n+                  </TextContent>\n+                </FlexItem>\n+              </Flex>\n+            </div>\n+          </>\n+        )}\n+        <div className=\"pf-u-mt-md\">\n+          <Button variant=\"secondary\" onClick={onTriggerClick} id=\"trigger\">", "originalCommit": "6adcf574794bda4dd260aab8be7b71b39788769c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM0NjY4NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/448#discussion_r502346685", "bodyText": "added a disable condition", "author": "AjayJagan", "createdAt": "2020-10-09T10:51:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTczNDMyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1MDY0NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/448#discussion_r501750644", "bodyText": "@AjayJagan \"The node ${selectedNode.name} trigger failed.\"", "author": "nmirasch", "createdAt": "2020-10-08T14:08:28Z", "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsNodeTrigger/ProcessDetailsNodeTrigger.tsx", "diffHunk": "@@ -0,0 +1,212 @@\n+import {\n+  Card,\n+  CardBody,\n+  CardHeader,\n+  Title,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  Flex,\n+  FlexItem,\n+  TextContent,\n+  Text,\n+  TextVariants,\n+  Split,\n+  SplitItem,\n+  Button\n+} from '@patternfly/react-core';\n+import React, { useState, useEffect } from 'react';\n+import { CaretDownIcon } from '@patternfly/react-icons';\n+import ProcessListModal from '../../Atoms/ProcessListModal/ProcessListModal';\n+import {\n+  setTitle,\n+  handleNodeTrigger,\n+  getTriggerableNodes,\n+  TriggerableNode\n+} from '../../../utils/Utils';\n+import { GraphQL, OUIAProps, componentOuiaProps } from '@kogito-apps/common';\n+\n+interface NodeTriggerProps {\n+  processInstanceData: Pick<\n+    GraphQL.ProcessInstance,\n+    'id' | 'serviceUrl' | 'processId'\n+  >;\n+}\n+\n+const ProcessDetailsNodeTrigger: React.FC<NodeTriggerProps & OUIAProps> = ({\n+  processInstanceData,\n+  ouiaId,\n+  ouiaSafe\n+}) => {\n+  const [isOpen, setIsOpen] = useState<boolean>(false);\n+  const [selectedNode, setSelectedNode] = useState(null);\n+  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n+  const [modalTitle, setModalTitle] = useState<string>('');\n+  const [titleType, setTitleType] = useState<string>('');\n+  const [modalContent, setModalContent] = useState<string>('');\n+  const [nodes, setNodes] = useState([]);\n+  /* tslint:disable:no-floating-promises */\n+  useEffect(() => {\n+    (async () => {\n+      const nodesArray = await getTriggerableNodes(processInstanceData);\n+      setNodes(nodesArray);\n+    })();\n+  }, []);\n+\n+  const handleModalToggle = (): void => {\n+    setIsModalOpen(!isModalOpen);\n+  };\n+\n+  const onSelect = (event: React.SyntheticEvent<HTMLDivElement>): void => {\n+    setIsOpen(!isOpen);\n+    getSelectedNode(event.currentTarget.id);\n+  };\n+\n+  const onToggle = (isDropDownOpen: boolean): void => {\n+    setIsOpen(isDropDownOpen);\n+  };\n+\n+  const getSelectedNode = (selectedNodeName: string): void => {\n+    const selectedNodeObject: TriggerableNode[] =\n+      nodes.length > 0 &&\n+      nodes.filter((node: TriggerableNode) => node.name === selectedNodeName);\n+\n+    setSelectedNode(selectedNodeObject[0]);\n+  };\n+\n+  const createNodeDropDown = (): JSX.Element[] => {\n+    const nodeDropDown: JSX.Element[] = [];\n+    nodes.length > 0 &&\n+      nodes.forEach((node: TriggerableNode) => {\n+        node.type !== null &&\n+          node.type !== 'StartNode' &&\n+          node.type !== 'Join' &&\n+          nodeDropDown.push(\n+            <DropdownItem key={node.uniqueId} id={node.name}>\n+              {node.name}\n+            </DropdownItem>\n+          );\n+      });\n+    return nodeDropDown;\n+  };\n+\n+  const onTriggerClick = async (): Promise<void> => {\n+    setModalTitle('Node trigger process');\n+    await handleNodeTrigger(\n+      processInstanceData,\n+      selectedNode,\n+      () => {\n+        setTitleType('success');\n+        setModalContent(\n+          `The node ${selectedNode.name} was triggered successfully`\n+        );\n+      },\n+      errorMessage => {\n+        setTitleType('failure');\n+        setModalContent(\n+          `The node ${selectedNode.name} failed to trigger. ErrorMessage : ${errorMessage}`", "originalCommit": "6adcf574794bda4dd260aab8be7b71b39788769c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM0Njc3OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/448#discussion_r502346779", "bodyText": "changed :)", "author": "AjayJagan", "createdAt": "2020-10-09T10:51:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1MDY0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1NDUyOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/448#discussion_r501754528", "bodyText": "@AjayJagan here we can provide some instructions about how to proceed, something like\n\"Select a node from the process nodes list and click 'Trigger' to launch it manually.\"", "author": "nmirasch", "createdAt": "2020-10-08T14:13:35Z", "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsNodeTrigger/ProcessDetailsNodeTrigger.tsx", "diffHunk": "@@ -0,0 +1,212 @@\n+import {\n+  Card,\n+  CardBody,\n+  CardHeader,\n+  Title,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  Flex,\n+  FlexItem,\n+  TextContent,\n+  Text,\n+  TextVariants,\n+  Split,\n+  SplitItem,\n+  Button\n+} from '@patternfly/react-core';\n+import React, { useState, useEffect } from 'react';\n+import { CaretDownIcon } from '@patternfly/react-icons';\n+import ProcessListModal from '../../Atoms/ProcessListModal/ProcessListModal';\n+import {\n+  setTitle,\n+  handleNodeTrigger,\n+  getTriggerableNodes,\n+  TriggerableNode\n+} from '../../../utils/Utils';\n+import { GraphQL, OUIAProps, componentOuiaProps } from '@kogito-apps/common';\n+\n+interface NodeTriggerProps {\n+  processInstanceData: Pick<\n+    GraphQL.ProcessInstance,\n+    'id' | 'serviceUrl' | 'processId'\n+  >;\n+}\n+\n+const ProcessDetailsNodeTrigger: React.FC<NodeTriggerProps & OUIAProps> = ({\n+  processInstanceData,\n+  ouiaId,\n+  ouiaSafe\n+}) => {\n+  const [isOpen, setIsOpen] = useState<boolean>(false);\n+  const [selectedNode, setSelectedNode] = useState(null);\n+  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n+  const [modalTitle, setModalTitle] = useState<string>('');\n+  const [titleType, setTitleType] = useState<string>('');\n+  const [modalContent, setModalContent] = useState<string>('');\n+  const [nodes, setNodes] = useState([]);\n+  /* tslint:disable:no-floating-promises */\n+  useEffect(() => {\n+    (async () => {\n+      const nodesArray = await getTriggerableNodes(processInstanceData);\n+      setNodes(nodesArray);\n+    })();\n+  }, []);\n+\n+  const handleModalToggle = (): void => {\n+    setIsModalOpen(!isModalOpen);\n+  };\n+\n+  const onSelect = (event: React.SyntheticEvent<HTMLDivElement>): void => {\n+    setIsOpen(!isOpen);\n+    getSelectedNode(event.currentTarget.id);\n+  };\n+\n+  const onToggle = (isDropDownOpen: boolean): void => {\n+    setIsOpen(isDropDownOpen);\n+  };\n+\n+  const getSelectedNode = (selectedNodeName: string): void => {\n+    const selectedNodeObject: TriggerableNode[] =\n+      nodes.length > 0 &&\n+      nodes.filter((node: TriggerableNode) => node.name === selectedNodeName);\n+\n+    setSelectedNode(selectedNodeObject[0]);\n+  };\n+\n+  const createNodeDropDown = (): JSX.Element[] => {\n+    const nodeDropDown: JSX.Element[] = [];\n+    nodes.length > 0 &&\n+      nodes.forEach((node: TriggerableNode) => {\n+        node.type !== null &&\n+          node.type !== 'StartNode' &&\n+          node.type !== 'Join' &&\n+          nodeDropDown.push(\n+            <DropdownItem key={node.uniqueId} id={node.name}>\n+              {node.name}\n+            </DropdownItem>\n+          );\n+      });\n+    return nodeDropDown;\n+  };\n+\n+  const onTriggerClick = async (): Promise<void> => {\n+    setModalTitle('Node trigger process');\n+    await handleNodeTrigger(\n+      processInstanceData,\n+      selectedNode,\n+      () => {\n+        setTitleType('success');\n+        setModalContent(\n+          `The node ${selectedNode.name} was triggered successfully`\n+        );\n+      },\n+      errorMessage => {\n+        setTitleType('failure');\n+        setModalContent(\n+          `The node ${selectedNode.name} failed to trigger. ErrorMessage : ${errorMessage}`\n+        );\n+      }\n+    );\n+    handleModalToggle();\n+  };\n+\n+  return (\n+    <Card {...componentOuiaProps(ouiaId, 'node-trigger', ouiaSafe)}>\n+      <ProcessListModal\n+        isModalOpen={isModalOpen}\n+        handleModalToggle={handleModalToggle}\n+        modalTitle={setTitle(titleType, modalTitle)}\n+        modalContent={modalContent}\n+        processName={selectedNode && selectedNode.name}\n+      />\n+      <CardHeader>\n+        <Title headingLevel=\"h3\" size=\"xl\">\n+          Node Trigger\n+        </Title>\n+      </CardHeader>\n+      <CardHeader>\n+        <div>Manually triggers a node</div>", "originalCommit": "6adcf574794bda4dd260aab8be7b71b39788769c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM0NjgzMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/448#discussion_r502346832", "bodyText": "changed :)", "author": "AjayJagan", "createdAt": "2020-10-09T10:51:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1NDUyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5MzI4Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/448#discussion_r501893286", "bodyText": "@AjayJagan I see a lot of duplicated code in loading the wrapper with the triggerableNodes before each test, Maybe we can create a block to do that, and call before executing each test and try to avoid this dupplication. Could you take a look on this?", "author": "nmirasch", "createdAt": "2020-10-08T17:33:03Z", "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsNodeTrigger/tests/ProcessDetailsNodeTrigger.test.tsx", "diffHunk": "@@ -0,0 +1,178 @@\n+import React from 'react';\n+import ProcessDetailsNodeTrigger from '../ProcessDetailsNodeTrigger';\n+import { getWrapperAsync } from '@kogito-apps/common';\n+import { DropdownToggle, DropdownItem, FlexItem } from '@patternfly/react-core';\n+import { act } from 'react-dom/test-utils';\n+import axios from 'axios';\n+jest.mock('axios');\n+const mockedAxios = axios as jest.Mocked<typeof axios>;\n+\n+/* tslint:disable:no-string-literal */\n+const ProcessInstanceData = {\n+  id: 'a1e139d5-4e77-48c9-84ae-34578e904e5a',\n+  processId: 'travels',\n+  serviceUrl: 'http://localhost:4000'\n+};\n+const mockTriggerableNodes = [\n+  {\n+    nodeDefinitionId: '_BDA56801-1155-4AF2-94D4-7DAADED2E3C0',\n+    name: 'Send visa application',\n+    id: 1,\n+    type: 'ActionNode',\n+    uniqueId: '1'\n+  },\n+  {\n+    nodeDefinitionId: '_175DC79D-C2F1-4B28-BE2D-B583DFABF70D',\n+    name: 'Book',\n+    id: 2,\n+    type: 'Split',\n+    uniqueId: '2'\n+  },\n+  {\n+    nodeDefinitionId: '_E611283E-30B0-46B9-8305-768A002C7518',\n+    name: 'visasrejected',\n+    id: 3,\n+    type: 'EventNode',\n+    uniqueId: '3'\n+  }\n+];\n+describe('Process details node trigger component tests', () => {\n+  mockedAxios.get.mockResolvedValue({ data: mockTriggerableNodes });\n+  it('snapshot testing with none selected', async () => {\n+    const wrapper = await getWrapperAsync(\n+      <ProcessDetailsNodeTrigger processInstanceData={ProcessInstanceData} />,\n+      'ProcessDetailsNodeTrigger'\n+    );\n+    expect(wrapper).toMatchSnapshot();\n+  });\n+\n+  it('select a node test ', async () => {\n+    mockedAxios.get.mockResolvedValue({ data: mockTriggerableNodes });\n+    let wrapper = await getWrapperAsync(\n+      <ProcessDetailsNodeTrigger processInstanceData={ProcessInstanceData} />,\n+      'ProcessDetailsNodeTrigger'\n+    );\n+\n+    await act(async () => {\n+      wrapper\n+        .find(DropdownToggle)\n+        .find('button')\n+        .simulate('click');\n+    });\n+    wrapper = wrapper.update();\n+\n+    await act(async () => {\n+      wrapper\n+        .find(DropdownItem)\n+        .at(1)\n+        .simulate('click');\n+    });\n+    wrapper = wrapper.update();\n+    // snapshot with data displayed\n+    expect(wrapper).toMatchSnapshot();\n+    expect(wrapper.find(FlexItem).length).toEqual(3);\n+    // //  Node name displayed\n+    expect(\n+      wrapper\n+        .find(FlexItem)\n+        .find('h6')\n+        .children()\n+        .at(0)\n+        .contains('Node name : ')\n+    ).toBeTruthy();\n+    // Node type displayed\n+    expect(\n+      wrapper\n+        .find(FlexItem)\n+        .find('h6')\n+        .children()\n+        .at(1)\n+        .contains('Node type : ')\n+    ).toBeTruthy();\n+    // Node id displayed\n+    expect(\n+      wrapper\n+        .find(FlexItem)\n+        .find('h6')\n+        .children()\n+        .at(2)\n+        .contains('Node id : ')\n+    ).toBeTruthy();\n+  });\n+\n+  it('Node trigger success tests', async () => {\n+    mockedAxios.get.mockResolvedValue({ data: mockTriggerableNodes });", "originalCommit": "6adcf574794bda4dd260aab8be7b71b39788769c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM0ODIwMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/448#discussion_r502348203", "bodyText": "converted to a common function . Please have a look", "author": "AjayJagan", "createdAt": "2020-10-09T10:54:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5MzI4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM2MzIyMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/448#discussion_r502363221", "bodyText": "@AjayJagan looks better to me now, thanks!", "author": "nmirasch", "createdAt": "2020-10-09T11:27:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5MzI4Ng=="}], "type": "inlineReview"}, {"oid": "870acb9d3c537485526a35f3ed56ae3edb88e6cb", "url": "https://github.com/kiegroup/kogito-apps/commit/870acb9d3c537485526a35f3ed56ae3edb88e6cb", "message": "KOGITO-1140 Add node trigger to process details page", "committedDate": "2020-10-09T10:50:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA1NjI0Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/448#discussion_r503056243", "bodyText": "@AjayJagan  Just a small nitpick. Can we follow the same naming pattern as on other components \"IOwnProps\", just to maintain some uniformity among all the components?", "author": "Sara4994", "createdAt": "2020-10-12T06:05:05Z", "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsNodeTrigger/ProcessDetailsNodeTrigger.tsx", "diffHunk": "@@ -0,0 +1,220 @@\n+import {\n+  Card,\n+  CardBody,\n+  CardHeader,\n+  Title,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  Flex,\n+  FlexItem,\n+  TextContent,\n+  Text,\n+  TextVariants,\n+  Split,\n+  SplitItem,\n+  Button\n+} from '@patternfly/react-core';\n+import React, { useState, useEffect } from 'react';\n+import { CaretDownIcon } from '@patternfly/react-icons';\n+import ProcessListModal from '../../Atoms/ProcessListModal/ProcessListModal';\n+import {\n+  setTitle,\n+  handleNodeTrigger,\n+  getTriggerableNodes,\n+  TriggerableNode\n+} from '../../../utils/Utils';\n+import { GraphQL, OUIAProps, componentOuiaProps } from '@kogito-apps/common';\n+\n+interface NodeTriggerProps {", "originalCommit": "870acb9d3c537485526a35f3ed56ae3edb88e6cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA3OTk1OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/448#discussion_r503079959", "bodyText": "done :)", "author": "AjayJagan", "createdAt": "2020-10-12T07:06:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA1NjI0Mw=="}], "type": "inlineReview"}, {"oid": "047388413d193a073a39e85e90674a614490bde7", "url": "https://github.com/kiegroup/kogito-apps/commit/047388413d193a073a39e85e90674a614490bde7", "message": "KOGITO-1140 Add node trigger to process details page", "committedDate": "2020-10-12T06:55:02Z", "type": "forcePushed"}, {"oid": "f639d759c1c76b9e9bc3e24e3fc651d881458c81", "url": "https://github.com/kiegroup/kogito-apps/commit/f639d759c1c76b9e9bc3e24e3fc651d881458c81", "message": "KOGITO-1140 Add node trigger to process details page", "committedDate": "2020-10-12T07:41:17Z", "type": "forcePushed"}, {"oid": "24d962b22c0065221d5e7449956068d48df0b7a0", "url": "https://github.com/kiegroup/kogito-apps/commit/24d962b22c0065221d5e7449956068d48df0b7a0", "message": "KOGITO-1140 Add node trigger to process details page", "committedDate": "2020-10-12T11:03:35Z", "type": "forcePushed"}, {"oid": "ee023e83516b2b23e1b99c7c8b10333b09799c8e", "url": "https://github.com/kiegroup/kogito-apps/commit/ee023e83516b2b23e1b99c7c8b10333b09799c8e", "message": "KOGITO-1140 Add node trigger to process details page", "committedDate": "2020-10-13T10:11:45Z", "type": "forcePushed"}, {"oid": "fe1915e20460d74f238750ff1e6eb589e51eceae", "url": "https://github.com/kiegroup/kogito-apps/commit/fe1915e20460d74f238750ff1e6eb589e51eceae", "message": "KOGITO-1140 Add node trigger to process details page", "committedDate": "2020-10-13T11:48:58Z", "type": "forcePushed"}, {"oid": "af190c22741cafef263ec9a772fadbedf5fcde77", "url": "https://github.com/kiegroup/kogito-apps/commit/af190c22741cafef263ec9a772fadbedf5fcde77", "message": "KOGITO-1140 Add node trigger to process details page", "committedDate": "2020-10-13T14:29:28Z", "type": "forcePushed"}, {"oid": "67817fb75543b150556dda0318b32a59df58c0b3", "url": "https://github.com/kiegroup/kogito-apps/commit/67817fb75543b150556dda0318b32a59df58c0b3", "message": "KOGITO-1140 Add node trigger to process details page", "committedDate": "2020-10-13T15:44:04Z", "type": "forcePushed"}, {"oid": "1220dd7e673e708062ecc0a0fc94c829a4100d29", "url": "https://github.com/kiegroup/kogito-apps/commit/1220dd7e673e708062ecc0a0fc94c829a4100d29", "message": "KOGITO-1140 Add node trigger to process details page", "committedDate": "2020-10-14T05:39:54Z", "type": "forcePushed"}, {"oid": "d4c3f24ada9d5631fba6cd3d005efece4f7cfcd8", "url": "https://github.com/kiegroup/kogito-apps/commit/d4c3f24ada9d5631fba6cd3d005efece4f7cfcd8", "message": "KOGITO-1140 Add node trigger to process details page", "committedDate": "2020-10-14T08:34:29Z", "type": "commit"}, {"oid": "d4c3f24ada9d5631fba6cd3d005efece4f7cfcd8", "url": "https://github.com/kiegroup/kogito-apps/commit/d4c3f24ada9d5631fba6cd3d005efece4f7cfcd8", "message": "KOGITO-1140 Add node trigger to process details page", "committedDate": "2020-10-14T08:34:29Z", "type": "forcePushed"}]}