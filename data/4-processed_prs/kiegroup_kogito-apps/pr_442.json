{"pr_number": 442, "pr_title": "KOGITO-3271 - PDPExplainer(Test) improvements", "pr_createdAt": "2020-09-04T16:01:41Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/442", "timeline": [{"oid": "efdda9023714222f2a6cd7d74c4b39cfb8dcdba7", "url": "https://github.com/kiegroup/kogito-apps/commit/efdda9023714222f2a6cd7d74c4b39cfb8dcdba7", "message": "KOGITO-3271 - Fixes for 0 stdDev data, using outputs in PDPExplainer, more consistent testing in PDPExplainerTest", "committedDate": "2020-09-04T15:59:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg2NjczOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r484866739", "bodyText": "remove redundant comment?", "author": "r00ta", "createdAt": "2020-09-08T12:10:39Z", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/utils/DataUtils.java", "diffHunk": "@@ -66,13 +66,13 @@ private DataUtils() {\n         double d = getStdDev(data, m);\n \n         // force desired standard deviation\n-        double d1 = stdDeviation / d;\n+        double d1 = d != 0 ? stdDeviation / d : stdDeviation; // avoid division by zero\n         for (int i = 0; i < size; i++) {\n             data[i] *= d1;\n         }\n \n         // get the new mean\n-        double m1 = m * stdDeviation / d;\n+        double m1 = d != 0 ? m * stdDeviation / d : m * stdDeviation; // avoid division by zero", "originalCommit": "efdda9023714222f2a6cd7d74c4b39cfb8dcdba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg3NTE4Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r484875186", "bodyText": "sure", "author": "tteofili", "createdAt": "2020-09-08T12:25:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg2NjczOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg2OTA5MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r484869091", "bodyText": "Just for my understanding, what do you mean with this comment?  why is the first feature always skipped?", "author": "r00ta", "createdAt": "2020-09-08T12:14:56Z", "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "diffHunk": "@@ -33,51 +33,71 @@\n import org.kie.kogito.explainability.model.Value;\n import org.kie.kogito.explainability.utils.DataUtils;\n \n-import java.util.Collection;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n import static java.util.concurrent.CompletableFuture.supplyAsync;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class PartialDependencePlotExplainerTest {\n \n     PartialDependencePlotExplainer partialDependencePlotProvider = new PartialDependencePlotExplainer();\n     PredictionProviderMetadata metadata = new PredictionProviderMetadata() {\n         @Override\n         public DataDistribution getDataDistribution() {\n-            return DataUtils.generateRandomDataDistribution(10, 100, new FakeRandom());\n+            return DataUtils.generateRandomDataDistribution(3, 100, new FakeRandom());\n         }\n \n         @Override\n         public PredictionInput getInputShape() {\n             List<Feature> features = new LinkedList<>();\n-            features.add(FeatureFactory.newTextFeature(\"text\", \"\"));\n+            features.add(FeatureFactory.newNumericalFeature(\"f0\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f1\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f2\", 0));\n             return new PredictionInput(features);\n         }\n \n         @Override\n         public PredictionOutput getOutputShape() {\n             List<Output> outputs = new LinkedList<>();\n-            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(null), 0d));\n+            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(false), 0d));\n             return new PredictionOutput(outputs);\n         }\n     };\n \n     @Test\n     void testPdpTextClassifier() throws Exception {\n-        PredictionProvider modelInfo = TestUtils.getDummyTextClassifier();\n-        Collection<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n+        PredictionProvider modelInfo = TestUtils.getSumSkipModel(0);\n+        List<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n         assertNotNull(pdps);\n         for (PartialDependenceGraph pdp : pdps) {\n             assertNotNull(pdp.getFeature());\n             assertNotNull(pdp.getX());\n             assertNotNull(pdp.getY());\n             assertEquals(pdp.getX().length, pdp.getY().length);\n+            assertGraph(pdp);\n+        }\n+        // the first feature is always skipped by the model, so the predictions are not affected, hence PDP Y values are constant", "originalCommit": "efdda9023714222f2a6cd7d74c4b39cfb8dcdba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg3NzQ5Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r484877497", "bodyText": "the specific test/dummy model that is used in the test is designed to always skip a given feature, in this case it skips the first one, see TestUtils.getSumSkipModel(0).\nFor this reason that specific (first) feature never affects the output and therefore its PDP graph results in a constant y (an horizontal straight line).", "author": "tteofili", "createdAt": "2020-09-08T12:29:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg2OTA5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg3MDY3MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r484870670", "bodyText": "iiuc this is somehow dependent to FakeRandom, I'm not sure it's a good idea to assert something that depends on that implementation (also because it returns always the same number)", "author": "r00ta", "createdAt": "2020-09-08T12:17:44Z", "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "diffHunk": "@@ -33,51 +33,71 @@\n import org.kie.kogito.explainability.model.Value;\n import org.kie.kogito.explainability.utils.DataUtils;\n \n-import java.util.Collection;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n import static java.util.concurrent.CompletableFuture.supplyAsync;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class PartialDependencePlotExplainerTest {\n \n     PartialDependencePlotExplainer partialDependencePlotProvider = new PartialDependencePlotExplainer();\n     PredictionProviderMetadata metadata = new PredictionProviderMetadata() {\n         @Override\n         public DataDistribution getDataDistribution() {\n-            return DataUtils.generateRandomDataDistribution(10, 100, new FakeRandom());\n+            return DataUtils.generateRandomDataDistribution(3, 100, new FakeRandom());\n         }\n \n         @Override\n         public PredictionInput getInputShape() {\n             List<Feature> features = new LinkedList<>();\n-            features.add(FeatureFactory.newTextFeature(\"text\", \"\"));\n+            features.add(FeatureFactory.newNumericalFeature(\"f0\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f1\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f2\", 0));\n             return new PredictionInput(features);\n         }\n \n         @Override\n         public PredictionOutput getOutputShape() {\n             List<Output> outputs = new LinkedList<>();\n-            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(null), 0d));\n+            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(false), 0d));\n             return new PredictionOutput(outputs);\n         }\n     };\n \n     @Test\n     void testPdpTextClassifier() throws Exception {\n-        PredictionProvider modelInfo = TestUtils.getDummyTextClassifier();\n-        Collection<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n+        PredictionProvider modelInfo = TestUtils.getSumSkipModel(0);\n+        List<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n         assertNotNull(pdps);\n         for (PartialDependenceGraph pdp : pdps) {\n             assertNotNull(pdp.getFeature());\n             assertNotNull(pdp.getX());\n             assertNotNull(pdp.getY());\n             assertEquals(pdp.getX().length, pdp.getY().length);\n+            assertGraph(pdp);\n+        }\n+        // the first feature is always skipped by the model, so the predictions are not affected, hence PDP Y values are constant\n+        PartialDependenceGraph fixedFeatureGraph = pdps.get(0);\n+        assertEquals(Arrays.stream(fixedFeatureGraph.getY()).distinct().count(), 1);\n+\n+        // the other two instead change but in the same way, due the behaviour of FakeRandom in generating data/distributions", "originalCommit": "efdda9023714222f2a6cd7d74c4b39cfb8dcdba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk0Mzk1NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r484943955", "bodyText": "yes, it depends on FakeRandom, qualitatetively this is the only check we an do on those graphs.\nI can drop it eventually.", "author": "tteofili", "createdAt": "2020-09-08T14:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg3MDY3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg3MzQ0OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r484873449", "bodyText": "Since Double.Nan > whatever is always false you can remove the first assertion. Regarding the second assertion, since the loop starts from 1 the first element of pdp.getY() is not checked", "author": "r00ta", "createdAt": "2020-09-08T12:22:36Z", "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "diffHunk": "@@ -33,51 +33,71 @@\n import org.kie.kogito.explainability.model.Value;\n import org.kie.kogito.explainability.utils.DataUtils;\n \n-import java.util.Collection;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n import static java.util.concurrent.CompletableFuture.supplyAsync;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class PartialDependencePlotExplainerTest {\n \n     PartialDependencePlotExplainer partialDependencePlotProvider = new PartialDependencePlotExplainer();\n     PredictionProviderMetadata metadata = new PredictionProviderMetadata() {\n         @Override\n         public DataDistribution getDataDistribution() {\n-            return DataUtils.generateRandomDataDistribution(10, 100, new FakeRandom());\n+            return DataUtils.generateRandomDataDistribution(3, 100, new FakeRandom());\n         }\n \n         @Override\n         public PredictionInput getInputShape() {\n             List<Feature> features = new LinkedList<>();\n-            features.add(FeatureFactory.newTextFeature(\"text\", \"\"));\n+            features.add(FeatureFactory.newNumericalFeature(\"f0\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f1\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f2\", 0));\n             return new PredictionInput(features);\n         }\n \n         @Override\n         public PredictionOutput getOutputShape() {\n             List<Output> outputs = new LinkedList<>();\n-            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(null), 0d));\n+            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(false), 0d));\n             return new PredictionOutput(outputs);\n         }\n     };\n \n     @Test\n     void testPdpTextClassifier() throws Exception {\n-        PredictionProvider modelInfo = TestUtils.getDummyTextClassifier();\n-        Collection<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n+        PredictionProvider modelInfo = TestUtils.getSumSkipModel(0);\n+        List<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n         assertNotNull(pdps);\n         for (PartialDependenceGraph pdp : pdps) {\n             assertNotNull(pdp.getFeature());\n             assertNotNull(pdp.getX());\n             assertNotNull(pdp.getY());\n             assertEquals(pdp.getX().length, pdp.getY().length);\n+            assertGraph(pdp);\n+        }\n+        // the first feature is always skipped by the model, so the predictions are not affected, hence PDP Y values are constant\n+        PartialDependenceGraph fixedFeatureGraph = pdps.get(0);\n+        assertEquals(Arrays.stream(fixedFeatureGraph.getY()).distinct().count(), 1);\n+\n+        // the other two instead change but in the same way, due the behaviour of FakeRandom in generating data/distributions\n+        assertArrayEquals(pdps.get(1).getY(), pdps.get(2).getY());\n+    }\n+\n+    private void assertGraph(PartialDependenceGraph pdp) {\n+        for (int i = 1; i < pdp.getX().length; i++) {\n+            assertNotEquals(Double.NaN, pdp.getX()[i]);\n+            assertNotEquals(Double.NaN, pdp.getY()[i]);\n+            assertTrue(pdp.getX()[i] > pdp.getX()[i - 1]);", "originalCommit": "efdda9023714222f2a6cd7d74c4b39cfb8dcdba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkzNjA0OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r484936048", "bodyText": "good points, thanks.", "author": "tteofili", "createdAt": "2020-09-08T13:50:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg3MzQ0OQ=="}], "type": "inlineReview"}, {"oid": "4aa3c044c6e8519c64565a517c14831643d8c49c", "url": "https://github.com/kiegroup/kogito-apps/commit/4aa3c044c6e8519c64565a517c14831643d8c49c", "message": "KOGITO-3271 - review based improvements", "committedDate": "2020-09-08T14:01:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMDM1Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r485810357", "bodyText": "ArrayList in general is better", "author": "danielezonca", "createdAt": "2020-09-09T17:56:51Z", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainer.java", "diffHunk": "@@ -74,19 +76,21 @@ public PartialDependencePlotExplainer() {\n     }\n \n     @Override\n-    public Collection<PartialDependenceGraph> explain(PredictionProvider model, PredictionProviderMetadata metadata) throws InterruptedException, ExecutionException, TimeoutException {\n+    public List<PartialDependenceGraph> explain(PredictionProvider model, PredictionProviderMetadata metadata) throws InterruptedException, ExecutionException, TimeoutException {\n         long start = System.currentTimeMillis();\n \n-        Collection<PartialDependenceGraph> pdps = new LinkedList<>();\n+        List<PartialDependenceGraph> pdps = new LinkedList<>();", "originalCommit": "4aa3c044c6e8519c64565a517c14831643d8c49c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEyOTAwNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r486129007", "bodyText": "ok", "author": "tteofili", "createdAt": "2020-09-10T07:38:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMDM1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMDk5Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r485810992", "bodyText": "Can you please add a comment to explain why/when v can be NaN?", "author": "danielezonca", "createdAt": "2020-09-09T17:58:01Z", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainer.java", "diffHunk": "@@ -121,7 +124,12 @@ public PartialDependencePlotExplainer() {\n                     // prediction requests are batched per value of feature 'Xs' under analysis\n                     for (PredictionOutput predictionOutput : predictionOutputs) {\n                         Output output = predictionOutput.getOutputs().get(outputIndex);\n-                        marginalImpacts[i] += output.getScore() / (double) seriesLength;\n+                        // use numerical output when possible, otherwise only use the score\n+                        double v = output.getValue().asNumber();\n+                        if (Double.isNaN(v)) {", "originalCommit": "4aa3c044c6e8519c64565a517c14831643d8c49c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE0NDExOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r486144118", "bodyText": "ok", "author": "tteofili", "createdAt": "2020-09-10T08:03:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMDk5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMTk4MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r485811980", "bodyText": "Minor comment, what about use explicit variable names to improve readability? I.e. : desiredMean, desiredStdDeviation, actualStdDeviation etc", "author": "danielezonca", "createdAt": "2020-09-09T17:59:39Z", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/utils/DataUtils.java", "diffHunk": "@@ -66,13 +66,13 @@ private DataUtils() {\n         double d = getStdDev(data, m);\n \n         // force desired standard deviation\n-        double d1 = stdDeviation / d;\n+        double d1 = d != 0 ? stdDeviation / d : stdDeviation; // avoid division by zero", "originalCommit": "4aa3c044c6e8519c64565a517c14831643d8c49c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE0NDI2MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r486144260", "bodyText": "sure", "author": "tteofili", "createdAt": "2020-09-10T08:04:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMTk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMzgxNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r485813816", "bodyText": "Please review if FakeRandom is still required. I added it in the past just to stabilize the test", "author": "danielezonca", "createdAt": "2020-09-09T18:02:54Z", "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "diffHunk": "@@ -33,51 +33,72 @@\n import org.kie.kogito.explainability.model.Value;\n import org.kie.kogito.explainability.utils.DataUtils;\n \n-import java.util.Collection;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n import static java.util.concurrent.CompletableFuture.supplyAsync;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class PartialDependencePlotExplainerTest {\n \n     PartialDependencePlotExplainer partialDependencePlotProvider = new PartialDependencePlotExplainer();\n     PredictionProviderMetadata metadata = new PredictionProviderMetadata() {\n         @Override\n         public DataDistribution getDataDistribution() {\n-            return DataUtils.generateRandomDataDistribution(10, 100, new FakeRandom());\n+            return DataUtils.generateRandomDataDistribution(3, 100, new FakeRandom());", "originalCommit": "4aa3c044c6e8519c64565a517c14831643d8c49c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE0NTMwMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r486145302", "bodyText": "I think it doesn't harm and it is useful to make sure test is deterministic without having to play with seeds.", "author": "tteofili", "createdAt": "2020-09-10T08:05:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMzgxNg=="}], "type": "inlineReview"}, {"oid": "6792e3fcbc367afbac0bb340f1d75566bf9e57a8", "url": "https://github.com/kiegroup/kogito-apps/commit/6792e3fcbc367afbac0bb340f1d75566bf9e57a8", "message": "KOGITO-3271 - review based fixes", "committedDate": "2020-09-10T08:10:13Z", "type": "commit"}, {"oid": "8e31168fa249c5fa8ef07b017f1dc52456c0cfba", "url": "https://github.com/kiegroup/kogito-apps/commit/8e31168fa249c5fa8ef07b017f1dc52456c0cfba", "message": "KOGITO-3271 - reducing cognitive complexity, minor fixes (names, imports, etc.)", "committedDate": "2020-09-10T08:47:52Z", "type": "commit"}, {"oid": "2c9bbed1863c32a050ee69dfb239269456b95147", "url": "https://github.com/kiegroup/kogito-apps/commit/2c9bbed1863c32a050ee69dfb239269456b95147", "message": "KOGITO-3271 - adjusted test to throw correct Exception", "committedDate": "2020-09-10T12:30:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwOTIxMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r487009211", "bodyText": "You should not \"hide\" InterruptedException. Please rethrow it instead of wrap it in a different exception", "author": "danielezonca", "createdAt": "2020-09-11T12:24:35Z", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainer.java", "diffHunk": "@@ -133,4 +117,69 @@ public PartialDependencePlotExplainer() {\n         LOGGER.debug(\"explanation time: {}ms\", (end - start));\n         return pdps;\n     }\n+\n+    /**\n+     * Perform batch predictions on the model.\n+     *\n+     * @param model            the model to be queried\n+     * @param predictionInputs a batch of inputs\n+     * @return a batch of outputs\n+     */\n+    private List<PredictionOutput> getOutputs(PredictionProvider model, List<PredictionInput> predictionInputs) {\n+        List<PredictionOutput> predictionOutputs;\n+        try {\n+            predictionOutputs = model.predictAsync(predictionInputs).get(Config.INSTANCE.getAsyncTimeout(), Config.INSTANCE.getAsyncTimeUnit());\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            LOGGER.error(\"Impossible to obtain prediction {}\", e.getMessage());\n+            throw new GlobalExplanationException(e);", "originalCommit": "2c9bbed1863c32a050ee69dfb239269456b95147", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzNzE0Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r487037147", "bodyText": "ok", "author": "tteofili", "createdAt": "2020-09-11T13:15:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwOTIxMQ=="}], "type": "inlineReview"}, {"oid": "fc5a014728f58f8d34bf5ed061bc792daf6b1e3f", "url": "https://github.com/kiegroup/kogito-apps/commit/fc5a014728f58f8d34bf5ed061bc792daf6b1e3f", "message": "KOGITO-3271 - minor fixes", "committedDate": "2020-09-15T15:23:24Z", "type": "commit"}, {"oid": "e407abe233bb519b218f8f5ba89b081ca62574d1", "url": "https://github.com/kiegroup/kogito-apps/commit/e407abe233bb519b218f8f5ba89b081ca62574d1", "message": "KOGITo-3271 - removed unused import", "committedDate": "2020-09-18T13:25:14Z", "type": "commit"}]}