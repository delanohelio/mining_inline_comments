{"pr_number": 317, "pr_title": "KOGITO-2699 Adding a list of failed instance in modal-bulk abort", "pr_createdAt": "2020-07-08T12:10:15Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/317", "timeline": [{"oid": "05ff74af8e1baf6b656e9a82930b73498f12284b", "url": "https://github.com/kiegroup/kogito-apps/commit/05ff74af8e1baf6b656e9a82930b73498f12284b", "message": "KOGITO-2699  Adding a list of failed instance in modal of bulk abort process", "committedDate": "2020-07-08T12:11:09Z", "type": "forcePushed"}, {"oid": "26ac24a55ca6fe4876d5531f2b32de10567fc547", "url": "https://github.com/kiegroup/kogito-apps/commit/26ac24a55ca6fe4876d5531f2b32de10567fc547", "message": "KOGITO-2699  Adding a list of failed instance in modal of bulk abort process", "committedDate": "2020-07-09T06:55:08Z", "type": "forcePushed"}, {"oid": "e10137ffab9b20d8b2da64d5f7d86fcd9a8a93f0", "url": "https://github.com/kiegroup/kogito-apps/commit/e10137ffab9b20d8b2da64d5f7d86fcd9a8a93f0", "message": "KOGITO-2699  Adding a list of failed instance in modal of bulk abort process", "committedDate": "2020-07-10T09:03:03Z", "type": "forcePushed"}, {"oid": "b121f2fe4ec0f074923e299471905b1199c2d57e", "url": "https://github.com/kiegroup/kogito-apps/commit/b121f2fe4ec0f074923e299471905b1199c2d57e", "message": "KOGITO-2699  Adding a list of failed instance in modal of bulk abort process", "committedDate": "2020-07-13T08:24:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA3ODcwMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r454078700", "bodyText": "@AjayJagan  Instead of using titleString directly and play with the value 'Abort operation' in the checks along the code ( like this ..titleString === 'Abort operation' &&) , we can define an operationType for that and centralize the literal showed in the same way , in this case would be 'Abort' but it will be prepared for the other types. wdyt?", "author": "nmirasch", "createdAt": "2020-07-14T03:35:26Z", "path": "ui-packages/packages/management-console/src/components/Atoms/ProcessListBulkInstances/ProcessListBulkInstances.tsx", "diffHunk": "@@ -5,170 +5,121 @@ import {\n   Text,\n   Divider,\n   TextList,\n-  TextListItem\n+  TextListItem,\n+  Tooltip\n } from '@patternfly/react-core';\n-import { ProcessDescriptor } from '@kogito-apps/common';\n+import { ProcessDescriptor, GraphQL } from '@kogito-apps/common';\n \n+interface ProcessManagementObject {\n+  [key: string]: GraphQL.ProcessInstance;\n+}\n+enum IgnoreMessage {\n+  AbortedMessage = 'The following process were ignored because they were in completed or aborted state'\n+}\n interface IOwnProps {\n-  abortedMessageObj: any;\n-  completedMessageObj: any;\n-  isSingleAbort: any;\n-  checkedArray: any;\n-  isAbortModalOpen: boolean;\n+  requiredInstances: ProcessManagementObject | {};\n+  ignoredInstances: ProcessManagementObject | {};\n+  failedInstances: ProcessManagementObject | {};\n+  checkedArray: GraphQL.ProcessInstanceState[];\n+  titleString: string;\n }\n const ProcessListBulkInstances: React.FC<IOwnProps> = ({\n-  abortedMessageObj,\n-  completedMessageObj,\n-  isSingleAbort,\n+  requiredInstances,\n+  ignoredInstances,\n+  failedInstances,\n   checkedArray,\n-  isAbortModalOpen\n+  titleString", "originalCommit": "b121f2fe4ec0f074923e299471905b1199c2d57e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwNjIwMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r454106202", "bodyText": "changed titleString to operationType- a new variable to determine the type of operation performed(Aborted,Skipped or Retried)", "author": "AjayJagan", "createdAt": "2020-07-14T05:15:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA3ODcwMA=="}], "type": "inlineReview"}, {"oid": "241da8ced829241d67a3ba528141d1c4dc3c7857", "url": "https://github.com/kiegroup/kogito-apps/commit/241da8ced829241d67a3ba528141d1c4dc3c7857", "message": "KOGITO-2699  Adding a list of failed instance in modal of bulk abort process", "committedDate": "2020-07-14T05:14:03Z", "type": "forcePushed"}, {"oid": "0c2172d4de7f5664a404f72288a3933130638a31", "url": "https://github.com/kiegroup/kogito-apps/commit/0c2172d4de7f5664a404f72288a3933130638a31", "message": "KOGITO-2699  Adding a list of failed instance in modal of bulk abort process", "committedDate": "2020-07-14T07:22:03Z", "type": "forcePushed"}, {"oid": "e0b99ffb54bd4aa619213fbec36bc5b526ff4cee", "url": "https://github.com/kiegroup/kogito-apps/commit/e0b99ffb54bd4aa619213fbec36bc5b526ff4cee", "message": "KOGITO-2699  Adding a list of failed instance in modal of bulk abort process", "committedDate": "2020-07-14T11:47:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgyMTQ4Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r454821482", "bodyText": "perhaps use pick id from GraphQL.ProcessInstance?", "author": "cristianonicolai", "createdAt": "2020-07-15T06:30:37Z", "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -177,79 +180,29 @@ export const handleNodeInstanceCancel = (\n     });\n };\n \n-export const handleAbortAll = (\n-  abortedObj,\n-  initData,\n-  setModalTitle,\n-  setTitleType,\n-  setAbortedMessageObj,\n-  setCompletedMessageObj,\n-  handleAbortModalToggle\n+export const performMultipleAbort = (\n+  instancesToBeAborted: ProcessManagementObject,", "originalCommit": "e0b99ffb54bd4aa619213fbec36bc5b526ff4cee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgyMjM5NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r454822394", "bodyText": "seems that we're sending the same array back?", "author": "cristianonicolai", "createdAt": "2020-07-15T06:33:00Z", "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -177,79 +180,29 @@ export const handleNodeInstanceCancel = (\n     });\n };\n \n-export const handleAbortAll = (\n-  abortedObj,\n-  initData,\n-  setModalTitle,\n-  setTitleType,\n-  setAbortedMessageObj,\n-  setCompletedMessageObj,\n-  handleAbortModalToggle\n+export const performMultipleAbort = (\n+  instancesToBeAborted: ProcessManagementObject,\n+  multiAbortSuccess: (\n+    instancesToBeAborted: ProcessManagementObject,", "originalCommit": "e0b99ffb54bd4aa619213fbec36bc5b526ff4cee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NzgxOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r455047818", "bodyText": "creating success and failure  instances separately now", "author": "AjayJagan", "createdAt": "2020-07-15T13:24:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgyMjM5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ2MjE5NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r455462194", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                instancesToBeAborted: ProcessManagementObject,\n          \n          \n            \n                sucessInstances: ProcessManagementObject,", "author": "cristianonicolai", "createdAt": "2020-07-16T01:50:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgyMjM5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgyNDY0OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r454824648", "bodyText": "Please keep only this enum, exporting it to be reused elsewhere.", "author": "cristianonicolai", "createdAt": "2020-07-15T06:38:40Z", "path": "ui-packages/packages/management-console/src/components/Atoms/ProcessListBulkInstances/ProcessListBulkInstances.tsx", "diffHunk": "@@ -7,168 +7,118 @@ import {\n   TextList,\n   TextListItem\n } from '@patternfly/react-core';\n-import { ProcessDescriptor } from '@kogito-apps/common';\n+import { ProcessDescriptor, GraphQL } from '@kogito-apps/common';\n+\n+interface ProcessManagementObject {\n+  [key: string]: GraphQL.ProcessInstance;\n+}\n+\n+enum OperationType {", "originalCommit": "e0b99ffb54bd4aa619213fbec36bc5b526ff4cee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0Nzk5MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r455047990", "bodyText": "reused OperationType enum", "author": "AjayJagan", "createdAt": "2020-07-15T13:24:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgyNDY0OA=="}], "type": "inlineReview"}, {"oid": "bf0277a55ecbbd7ff0a2dd51056beb0230ebfb74", "url": "https://github.com/kiegroup/kogito-apps/commit/bf0277a55ecbbd7ff0a2dd51056beb0230ebfb74", "message": "KOGITO-2699  Adding a list of failed instance in modal of bulk abort process", "committedDate": "2020-07-15T13:23:00Z", "type": "forcePushed"}, {"oid": "38033780af4effe7978d86df3fb91a856eeba8ca", "url": "https://github.com/kiegroup/kogito-apps/commit/38033780af4effe7978d86df3fb91a856eeba8ca", "message": "KOGITO-2699  Adding a list of failed instance in modal of bulk abort process", "committedDate": "2020-07-15T14:19:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ2NTc5Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r455465797", "bodyText": "maybe call this\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            interface ProcessManagementObject {\n          \n          \n            \n            interface ProcessInstanceBulkList {", "author": "cristianonicolai", "createdAt": "2020-07-16T02:03:21Z", "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -11,7 +11,9 @@ import {\n import { GraphQL } from '@kogito-apps/common';\n import ProcessInstanceState = GraphQL.ProcessInstanceState;\n import ProcessInstance = GraphQL.ProcessInstance;\n-\n+interface ProcessManagementObject {", "originalCommit": "38033780af4effe7978d86df3fb91a856eeba8ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ5ODYzNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r455498635", "bodyText": "changed", "author": "AjayJagan", "createdAt": "2020-07-16T04:10:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ2NTc5Nw=="}], "type": "inlineReview"}, {"oid": "512fc5de2a9d7431c116ec1f9493368574f2813e", "url": "https://github.com/kiegroup/kogito-apps/commit/512fc5de2a9d7431c116ec1f9493368574f2813e", "message": "KOGITO-2699  Adding a list of failed instance in modal of bulk abort process", "committedDate": "2020-07-16T04:10:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY0Njk0NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r455646944", "bodyText": "I'd argue that the OperationType should be rather ABORT, though I can see that you're using this below also in a notification where Aborted fits better ... but it's not straight forward.", "author": "jstastny-cz", "createdAt": "2020-07-16T09:20:44Z", "path": "ui-packages/packages/management-console/src/components/Atoms/ProcessListBulkInstances/ProcessListBulkInstances.tsx", "diffHunk": "@@ -7,168 +7,115 @@ import {\n   TextList,\n   TextListItem\n } from '@patternfly/react-core';\n-import { ProcessDescriptor } from '@kogito-apps/common';\n+import { ProcessDescriptor, GraphQL } from '@kogito-apps/common';\n+import { ProcessInstanceBulkList } from '../../Molecules/ProcessListToolbar/ProcessListToolbar';\n+\n+export enum OperationType {\n+  ABORTED = 'Aborted'", "originalCommit": "512fc5de2a9d7431c116ec1f9493368574f2813e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY0NzgxNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r455647817", "bodyText": "required? .... the word carries a connotation that these are somehow default/enforced by other means - like with attribute required=true .... maybe 'requested' would fit here?", "author": "jstastny-cz", "createdAt": "2020-07-16T09:22:04Z", "path": "ui-packages/packages/management-console/src/components/Atoms/ProcessListBulkInstances/ProcessListBulkInstances.tsx", "diffHunk": "@@ -7,168 +7,115 @@ import {\n   TextList,\n   TextListItem\n } from '@patternfly/react-core';\n-import { ProcessDescriptor } from '@kogito-apps/common';\n+import { ProcessDescriptor, GraphQL } from '@kogito-apps/common';\n+import { ProcessInstanceBulkList } from '../../Molecules/ProcessListToolbar/ProcessListToolbar';\n+\n+export enum OperationType {\n+  ABORTED = 'Aborted'\n+}\n \n interface IOwnProps {\n-  abortedMessageObj: any;\n-  completedMessageObj: any;\n-  isSingleAbort: any;\n-  checkedArray: any;\n-  isAbortModalOpen: boolean;\n+  requiredInstances: ProcessInstanceBulkList | {};", "originalCommit": "512fc5de2a9d7431c116ec1f9493368574f2813e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1MDEyNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r455650124", "bodyText": "We need to generalize this a bit, an exact match for the operation type here will mean we're gonna introduce a different branch for other bulk actions we're gonna implement?", "author": "jstastny-cz", "createdAt": "2020-07-16T09:25:17Z", "path": "ui-packages/packages/management-console/src/components/Atoms/ProcessListBulkInstances/ProcessListBulkInstances.tsx", "diffHunk": "@@ -7,168 +7,115 @@ import {\n   TextList,\n   TextListItem\n } from '@patternfly/react-core';\n-import { ProcessDescriptor } from '@kogito-apps/common';\n+import { ProcessDescriptor, GraphQL } from '@kogito-apps/common';\n+import { ProcessInstanceBulkList } from '../../Molecules/ProcessListToolbar/ProcessListToolbar';\n+\n+export enum OperationType {\n+  ABORTED = 'Aborted'\n+}\n \n interface IOwnProps {\n-  abortedMessageObj: any;\n-  completedMessageObj: any;\n-  isSingleAbort: any;\n-  checkedArray: any;\n-  isAbortModalOpen: boolean;\n+  requiredInstances: ProcessInstanceBulkList | {};\n+  ignoredInstances: ProcessInstanceBulkList | {};\n+  failedInstances: ProcessInstanceBulkList | {};\n+  checkedArray: GraphQL.ProcessInstanceState[];\n+  operationType: OperationType;\n }\n const ProcessListBulkInstances: React.FC<IOwnProps> = ({\n-  abortedMessageObj,\n-  completedMessageObj,\n-  isSingleAbort,\n+  requiredInstances,\n+  ignoredInstances,\n+  failedInstances,\n   checkedArray,\n-  isAbortModalOpen\n+  operationType\n }) => {\n   return (\n     <>\n-      {' '}\n-      {Object.keys(abortedMessageObj).length !== 0 &&\n-        Object.keys(completedMessageObj).length !== 0 &&\n-        !isSingleAbort && (\n-          <>\n-            <TextContent>\n-              <Text component={TextVariants.h2}>\n-                {' '}\n-                The following processes were aborted:\n-              </Text>\n-\n-              <TextList>\n-                {Object.entries(abortedMessageObj).map((process: any) => {\n-                  return (\n-                    <TextListItem key={process[0]}>\n-                      <ProcessDescriptor processInstanceData={process[1]} />\n-                    </TextListItem>\n-                  );\n-                })}\n-              </TextList>\n-            </TextContent>\n-            {!checkedArray.includes('ABORTED') &&\n-              isAbortModalOpen &&\n-              abortedMessageObj !== undefined &&\n-              Object.keys(abortedMessageObj).length !== 0 && (\n-                <TextContent className=\"pf-u-mt-sm\">\n-                  <Text>\n-                    Note: The process status has been updated. The list may\n-                    appear inconsistent until you refresh any applied filters.\n-                  </Text>\n-                </TextContent>\n-              )}\n-            <Divider component=\"div\" className=\"pf-u-my-xl\" />\n-            <TextContent>\n-              <Text component={TextVariants.h2}>\n-                The following processes were skipped because they were either\n-                completed or aborted:\n-              </Text>\n-\n-              <TextList>\n-                {Object.entries(completedMessageObj).map((process: any) => {\n-                  return (\n-                    <TextListItem key={process[0]}>\n-                      <ProcessDescriptor processInstanceData={process[1]} />\n-                    </TextListItem>\n-                  );\n-                })}\n-              </TextList>\n-            </TextContent>\n-          </>\n-        )}\n-      {Object.keys(abortedMessageObj).length === 0 &&\n-        Object.keys(completedMessageObj).length !== 0 &&\n-        !isSingleAbort && (\n-          <>\n-            <TextContent>\n-              <Text component={TextVariants.h2}>\n-                {' '}\n-                No processes were aborted\n-              </Text>\n-            </TextContent>\n-            <Divider component=\"div\" className=\"pf-u-my-xl\" />\n-            <TextContent>\n-              <Text component={TextVariants.h2}>\n-                The following processes were skipped because they were either\n-                completed or aborted:\n-              </Text>\n-\n-              <TextList>\n-                {Object.entries(completedMessageObj).map((process: any) => {\n-                  return (\n-                    <TextListItem key={process[0]}>\n+      {Object.keys(requiredInstances).length > 0 ? (\n+        <>\n+          <TextContent>\n+            <Text component={TextVariants.h2}>\n+              {`${operationType} processes: `}\n+            </Text>\n+            <TextList>\n+              {Object.entries(requiredInstances).map((process: any) => {\n+                return (\n+                  <TextListItem key={process[0]}>\n+                    <strong>\n                       <ProcessDescriptor processInstanceData={process[1]} />\n-                    </TextListItem>\n-                  );\n-                })}\n-              </TextList>\n-            </TextContent>\n-          </>\n-        )}\n-      {Object.keys(abortedMessageObj).length !== 0 &&\n-        Object.keys(completedMessageObj).length === 0 &&\n-        !isSingleAbort && (\n-          <>\n-            <TextContent>\n-              <Text component={TextVariants.h2}>\n-                {' '}\n-                The following processes were aborted:\n+                    </strong>\n+                  </TextListItem>\n+                );\n+              })}\n+            </TextList>\n+          </TextContent>\n+          {!checkedArray.includes(GraphQL.ProcessInstanceState.Aborted) &&\n+            requiredInstances !== undefined &&\n+            operationType === OperationType.ABORTED &&\n+            Object.keys(requiredInstances).length !== 0 && (\n+              <TextContent className=\"pf-u-mt-sm\">\n+                <Text component={TextVariants.small}>\n+                  Note: The process status has been updated. The list may appear\n+                  inconsistent until you refresh any applied filters.\n+                </Text>\n+              </TextContent>\n+            )}\n+        </>\n+      ) : (\n+        <TextContent>\n+          <Text component={TextVariants.h2}>\n+            {`No processes were ${operationType.toLowerCase()}`}\n+          </Text>\n+        </TextContent>\n+      )}\n+      {Object.keys(ignoredInstances).length !== 0 && (\n+        <>\n+          <Divider component=\"div\" className=\"pf-u-my-xl\" />\n+          <TextContent>\n+            <Text component={TextVariants.h2}>\n+              <span>Ignored processes:</span>\n+            </Text>\n+            {operationType === OperationType.ABORTED && (", "originalCommit": "512fc5de2a9d7431c116ec1f9493368574f2813e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1MTc3NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r455651774", "bodyText": "again, I would use word requested", "author": "jstastny-cz", "createdAt": "2020-07-16T09:28:03Z", "path": "ui-packages/packages/management-console/src/components/Atoms/ProcessListModal/ProcessListModal.tsx", "diffHunk": "@@ -8,30 +8,42 @@ import {\n   TextContent,\n   Text\n } from '@patternfly/react-core';\n-import ProcessListBulkInstances from '../ProcessListBulkInstances/ProcessListBulkInstances';\n+import ProcessListBulkInstances, {\n+  OperationType\n+} from '../ProcessListBulkInstances/ProcessListBulkInstances';\n+import { GraphQL } from '@kogito-apps/common';\n+import { ProcessInstanceBulkList } from '../../Molecules/ProcessListToolbar/ProcessListToolbar';\n \n interface IOwnProps {\n   modalTitle: JSX.Element;\n   modalContent?: string;\n   handleModalToggle: () => void;\n-  abortedMessageObj?: any;\n-  completedMessageObj?: any;\n+  requiredInstances?: ProcessInstanceBulkList;", "originalCommit": "512fc5de2a9d7431c116ec1f9493368574f2813e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1MjU4OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r455652589", "bodyText": "I'd change onOKClick -> onOkClick", "author": "jstastny-cz", "createdAt": "2020-07-16T09:29:24Z", "path": "ui-packages/packages/management-console/src/components/Atoms/ProcessListModal/ProcessListModal.tsx", "diffHunk": "@@ -8,30 +8,42 @@ import {\n   TextContent,\n   Text\n } from '@patternfly/react-core';\n-import ProcessListBulkInstances from '../ProcessListBulkInstances/ProcessListBulkInstances';\n+import ProcessListBulkInstances, {\n+  OperationType\n+} from '../ProcessListBulkInstances/ProcessListBulkInstances';\n+import { GraphQL } from '@kogito-apps/common';\n+import { ProcessInstanceBulkList } from '../../Molecules/ProcessListToolbar/ProcessListToolbar';\n \n interface IOwnProps {\n   modalTitle: JSX.Element;\n   modalContent?: string;\n   handleModalToggle: () => void;\n-  abortedMessageObj?: any;\n-  completedMessageObj?: any;\n+  requiredInstances?: ProcessInstanceBulkList;\n+  ignoredInstances?: ProcessInstanceBulkList;\n+  failedInstances?: ProcessInstanceBulkList;\n   isModalOpen: boolean;\n-  checkedArray: string[];\n-  isAbortModalOpen?: boolean;\n-  isSingleAbort?: any;\n+  checkedArray: GraphQL.ProcessInstanceState[];\n+  resetSelected?: () => void;\n+  operationType?: OperationType;\n }\n const ProcessListModal: React.FC<IOwnProps> = ({\n   modalContent,\n   modalTitle,\n-  abortedMessageObj,\n-  completedMessageObj,\n+  requiredInstances,\n+  ignoredInstances,\n   isModalOpen,\n   checkedArray,\n   handleModalToggle,\n-  isAbortModalOpen,\n-  isSingleAbort\n+  resetSelected,\n+  failedInstances,\n+  operationType\n }) => {\n+  const onOKClick = () => {", "originalCommit": "512fc5de2a9d7431c116ec1f9493368574f2813e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4NjU0MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r458586540", "bodyText": "done", "author": "AjayJagan", "createdAt": "2020-07-22T07:21:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1MjU4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1MzE5MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r455653190", "bodyText": "rename the test file - see *.test..tsx", "author": "jstastny-cz", "createdAt": "2020-07-16T09:30:22Z", "path": "ui-packages/packages/management-console/src/components/Atoms/ProcessListModal/tests/ProcessListModal.test..tsx", "diffHunk": "@@ -20,7 +20,7 @@ const props = {\n   checkedArray: [],\n   isAbortModalOpen: true,\n   modalContent: '',\n-  abortedMessageObj: {\n+  requiredInstances: {", "originalCommit": "512fc5de2a9d7431c116ec1f9493368574f2813e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4NjQxMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r458586411", "bodyText": "done", "author": "AjayJagan", "createdAt": "2020-07-22T07:21:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1MzE5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1MzQ1Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r455653457", "bodyText": "rename the file - see *.test..tsx.snap", "author": "jstastny-cz", "createdAt": "2020-07-16T09:30:49Z", "path": "ui-packages/packages/management-console/src/components/Atoms/ProcessListModal/tests/__snapshots__/ProcessListModal.test..tsx.snap", "diffHunk": "@@ -5,7 +5,7 @@ exports[`ProcessBulkModal component tests snapshot testing 1`] = `\n   actions={\n     Array [\n       <Unknown\n-        onClick={[MockFunction]}\n+        onClick={[Function]}", "originalCommit": "512fc5de2a9d7431c116ec1f9493368574f2813e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4NjI3OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r458586278", "bodyText": "done", "author": "AjayJagan", "createdAt": "2020-07-22T07:21:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1MzQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1NTQ5Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r455655493", "bodyText": "shouldn't we just refresh the table? By changing just the instances here any changes made in backend are not promoted here.", "author": "jstastny-cz", "createdAt": "2020-07-16T09:34:13Z", "path": "ui-packages/packages/management-console/src/components/Molecules/ProcessListToolbar/ProcessListToolbar.tsx", "diffHunk": "@@ -299,15 +326,88 @@ const ProcessListToolbar: React.FC<IOwnProps> = ({\n               }\n             });\n           }\n-          copyOfAbortedObj = { ...copyOfAbortedObj, ...tempObj };\n+          copyOfSelectedInstances = { ...copyOfSelectedInstances, ...tempObj };\n         });\n         setSelectedNumber(allSelected);\n-        setAbortedObj(copyOfAbortedObj);\n+        setSelectedInstances(copyOfSelectedInstances);\n         setInitData(copyOfInitData);\n       }\n     }\n   };\n \n+  const changeProcessToAborted = (", "originalCommit": "512fc5de2a9d7431c116ec1f9493368574f2813e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI1NDE0MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r456254141", "bodyText": "I think we should do something similar to what we did with the operationResult here - the functions are specific to a single action - ABORT. When there will be multiple of those this will become a mess - so an idea - can we move these functions together to some object with interface? Just got me thinking - what if we did sth like\nconst interface IOperation {\n    result: IOperationResultValue,\n    changeProcessStatus(ProcessInstanceBulkList): void,\n    perform(): void\n}\n\nconst interface IOperations {\n    [key: OperationType] : IOperation\n}\n\nand then use it as Operations.ABORT.result, Operations.ABORT.perform(), etc ...", "author": "jstastny-cz", "createdAt": "2020-07-17T06:55:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1NTQ5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA0NjAwNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r457046004", "bodyText": "shouldn't we just refresh the table? By changing just the instances here any changes made in backend are not promoted here.\n\n@cristianonicolai  - can you please comment on this :)", "author": "AjayJagan", "createdAt": "2020-07-20T04:47:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1NTQ5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1NjMwMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r455656301", "bodyText": "I would rather prevent the action from continuing and inform user to fix the selection explicitly (we have filters etc, so it is not a hard job to do).", "author": "jstastny-cz", "createdAt": "2020-07-16T09:35:42Z", "path": "ui-packages/packages/management-console/src/components/Molecules/ProcessListToolbar/ProcessListToolbar.tsx", "diffHunk": "@@ -299,15 +326,88 @@ const ProcessListToolbar: React.FC<IOwnProps> = ({\n               }\n             });\n           }\n-          copyOfAbortedObj = { ...copyOfAbortedObj, ...tempObj };\n+          copyOfSelectedInstances = { ...copyOfSelectedInstances, ...tempObj };\n         });\n         setSelectedNumber(allSelected);\n-        setAbortedObj(copyOfAbortedObj);\n+        setSelectedInstances(copyOfSelectedInstances);\n         setInitData(copyOfInitData);\n       }\n     }\n   };\n \n+  const changeProcessToAborted = (\n+    successInstances: ProcessInstanceBulkList\n+  ) => {\n+    Object.keys(successInstances).forEach(id => {\n+      initData.ProcessInstances.forEach(instance => {\n+        if (instance.id === id) {\n+          instance['state'] = GraphQL.ProcessInstanceState.Aborted;\n+        }\n+        if (instance.childDataList && instance.childDataList.length !== 0) {\n+          instance.childDataList.forEach(child => {\n+            if (child.id === id) {\n+              child['state'] = GraphQL.ProcessInstanceState.Aborted;\n+            }\n+          });\n+        }\n+      });\n+    });\n+  };\n+\n+  const onShowMessage = (\n+    title: string,\n+    successInstances: ProcessInstanceBulkList,\n+    failureInstances: ProcessInstanceBulkList,\n+    operation: OperationType\n+  ) => {\n+    setModalTitle(title);\n+    setRequiredInstances(successInstances);\n+    setTitleType('success');\n+    operation === OperationType.ABORTED &&\n+      changeProcessToAborted(successInstances);\n+    setFailedInstances(failureInstances);\n+    setOperationType(operation);\n+    handleModalToggle();\n+  };\n+\n+  const handleMultiAbort = async () => {\n+    const instancesToBeIgnored = {};\n+    for (const [id, processInstance] of Object.entries(selectedInstances)) {\n+      if (", "originalCommit": "512fc5de2a9d7431c116ec1f9493368574f2813e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI0NTQ5MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r456245491", "bodyText": "This could IMO be also an optional property of operationResult, sth like operationResult.warningMessage and instead of checking if we have aborted instances we'd just check if the operationResult.warningMessage is provided && successInstances.length!==0 ...", "author": "jstastny-cz", "createdAt": "2020-07-17T06:32:28Z", "path": "ui-packages/packages/management-console/src/components/Atoms/ProcessListBulkInstances/ProcessListBulkInstances.tsx", "diffHunk": "@@ -7,168 +7,105 @@ import {\n   TextList,\n   TextListItem\n } from '@patternfly/react-core';\n-import { ProcessDescriptor } from '@kogito-apps/common';\n+import { ProcessDescriptor, GraphQL } from '@kogito-apps/common';\n+import { OperationResultValue } from '../../Molecules/ProcessListToolbar/ProcessListToolbar';\n \n interface IOwnProps {\n-  abortedMessageObj: any;\n-  completedMessageObj: any;\n-  isSingleAbort: any;\n-  checkedArray: any;\n-  isAbortModalOpen: boolean;\n+  operationResult: OperationResultValue;\n+  checkedArray: GraphQL.ProcessInstanceState[];\n }\n const ProcessListBulkInstances: React.FC<IOwnProps> = ({\n-  abortedMessageObj,\n-  completedMessageObj,\n-  isSingleAbort,\n   checkedArray,\n-  isAbortModalOpen\n+  operationResult\n }) => {\n   return (\n     <>\n-      {' '}\n-      {Object.keys(abortedMessageObj).length !== 0 &&\n-        Object.keys(completedMessageObj).length !== 0 &&\n-        !isSingleAbort && (\n-          <>\n-            <TextContent>\n-              <Text component={TextVariants.h2}>\n-                {' '}\n-                The following processes were aborted:\n-              </Text>\n-\n-              <TextList>\n-                {Object.entries(abortedMessageObj).map((process: any) => {\n+      {Object.keys(operationResult.successInstances).length > 0 ? (\n+        <>\n+          <TextContent>\n+            <Text component={TextVariants.h2}>\n+              {`${operationResult.successMessage} processes: `}\n+            </Text>\n+            <TextList>\n+              {Object.entries(operationResult.successInstances).map(\n+                (process: any) => {\n                   return (\n                     <TextListItem key={process[0]}>\n-                      <ProcessDescriptor processInstanceData={process[1]} />\n+                      <strong>\n+                        <ProcessDescriptor processInstanceData={process[1]} />\n+                      </strong>\n                     </TextListItem>\n                   );\n-                })}\n-              </TextList>\n-            </TextContent>\n-            {!checkedArray.includes('ABORTED') &&\n-              isAbortModalOpen &&\n-              abortedMessageObj !== undefined &&\n-              Object.keys(abortedMessageObj).length !== 0 && (\n-                <TextContent className=\"pf-u-mt-sm\">\n-                  <Text>\n-                    Note: The process status has been updated. The list may\n-                    appear inconsistent until you refresh any applied filters.\n-                  </Text>\n-                </TextContent>\n+                }\n               )}\n-            <Divider component=\"div\" className=\"pf-u-my-xl\" />\n-            <TextContent>\n-              <Text component={TextVariants.h2}>\n-                The following processes were skipped because they were either\n-                completed or aborted:\n-              </Text>\n-\n-              <TextList>\n-                {Object.entries(completedMessageObj).map((process: any) => {\n-                  return (\n-                    <TextListItem key={process[0]}>\n-                      <ProcessDescriptor processInstanceData={process[1]} />\n-                    </TextListItem>\n-                  );\n-                })}\n-              </TextList>\n-            </TextContent>\n-          </>\n-        )}\n-      {Object.keys(abortedMessageObj).length === 0 &&\n-        Object.keys(completedMessageObj).length !== 0 &&\n-        !isSingleAbort && (\n-          <>\n-            <TextContent>\n-              <Text component={TextVariants.h2}>\n-                {' '}\n-                No processes were aborted\n-              </Text>\n-            </TextContent>\n-            <Divider component=\"div\" className=\"pf-u-my-xl\" />\n-            <TextContent>\n-              <Text component={TextVariants.h2}>\n-                The following processes were skipped because they were either\n-                completed or aborted:\n-              </Text>\n-\n-              <TextList>\n-                {Object.entries(completedMessageObj).map((process: any) => {\n-                  return (\n-                    <TextListItem key={process[0]}>\n-                      <ProcessDescriptor processInstanceData={process[1]} />\n-                    </TextListItem>\n-                  );\n-                })}\n-              </TextList>\n-            </TextContent>\n-          </>\n-        )}\n-      {Object.keys(abortedMessageObj).length !== 0 &&\n-        Object.keys(completedMessageObj).length === 0 &&\n-        !isSingleAbort && (\n-          <>\n-            <TextContent>\n-              <Text component={TextVariants.h2}>\n-                {' '}\n-                The following processes were aborted:\n-              </Text>\n-              <TextList>\n-                {Object.entries(abortedMessageObj).map((process: any) => {\n+            </TextList>\n+          </TextContent>\n+          {!checkedArray.includes(GraphQL.ProcessInstanceState.Aborted) &&", "originalCommit": "9889273f1535e5d1ebcac2c9a2d2d9041576662b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA0NzExMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r457047111", "bodyText": "@cristianonicolai  - can you please comment on this  , the reason I am having the check is that we need to check if the status-ABORTED is selected .. if so we don't show the message else we show the message(for other status like ACTIVE,COMPLETED etc...)", "author": "AjayJagan", "createdAt": "2020-07-20T04:49:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI0NTQ5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI0NjAzNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r456246036", "bodyText": "This message could be another property", "author": "jstastny-cz", "createdAt": "2020-07-17T06:34:09Z", "path": "ui-packages/packages/management-console/src/components/Atoms/ProcessListBulkInstances/ProcessListBulkInstances.tsx", "diffHunk": "@@ -7,168 +7,105 @@ import {\n   TextList,\n   TextListItem\n } from '@patternfly/react-core';\n-import { ProcessDescriptor } from '@kogito-apps/common';\n+import { ProcessDescriptor, GraphQL } from '@kogito-apps/common';\n+import { OperationResultValue } from '../../Molecules/ProcessListToolbar/ProcessListToolbar';\n \n interface IOwnProps {\n-  abortedMessageObj: any;\n-  completedMessageObj: any;\n-  isSingleAbort: any;\n-  checkedArray: any;\n-  isAbortModalOpen: boolean;\n+  operationResult: OperationResultValue;\n+  checkedArray: GraphQL.ProcessInstanceState[];\n }\n const ProcessListBulkInstances: React.FC<IOwnProps> = ({\n-  abortedMessageObj,\n-  completedMessageObj,\n-  isSingleAbort,\n   checkedArray,\n-  isAbortModalOpen\n+  operationResult\n }) => {\n   return (\n     <>\n-      {' '}\n-      {Object.keys(abortedMessageObj).length !== 0 &&\n-        Object.keys(completedMessageObj).length !== 0 &&\n-        !isSingleAbort && (\n-          <>\n-            <TextContent>\n-              <Text component={TextVariants.h2}>\n-                {' '}\n-                The following processes were aborted:\n-              </Text>\n-\n-              <TextList>\n-                {Object.entries(abortedMessageObj).map((process: any) => {\n+      {Object.keys(operationResult.successInstances).length > 0 ? (\n+        <>\n+          <TextContent>\n+            <Text component={TextVariants.h2}>\n+              {`${operationResult.successMessage} processes: `}\n+            </Text>\n+            <TextList>\n+              {Object.entries(operationResult.successInstances).map(\n+                (process: any) => {\n                   return (\n                     <TextListItem key={process[0]}>\n-                      <ProcessDescriptor processInstanceData={process[1]} />\n+                      <strong>\n+                        <ProcessDescriptor processInstanceData={process[1]} />\n+                      </strong>\n                     </TextListItem>\n                   );\n-                })}\n-              </TextList>\n-            </TextContent>\n-            {!checkedArray.includes('ABORTED') &&\n-              isAbortModalOpen &&\n-              abortedMessageObj !== undefined &&\n-              Object.keys(abortedMessageObj).length !== 0 && (\n-                <TextContent className=\"pf-u-mt-sm\">\n-                  <Text>\n-                    Note: The process status has been updated. The list may\n-                    appear inconsistent until you refresh any applied filters.\n-                  </Text>\n-                </TextContent>\n+                }\n               )}\n-            <Divider component=\"div\" className=\"pf-u-my-xl\" />\n-            <TextContent>\n-              <Text component={TextVariants.h2}>\n-                The following processes were skipped because they were either\n-                completed or aborted:\n-              </Text>\n-\n-              <TextList>\n-                {Object.entries(completedMessageObj).map((process: any) => {\n-                  return (\n-                    <TextListItem key={process[0]}>\n-                      <ProcessDescriptor processInstanceData={process[1]} />\n-                    </TextListItem>\n-                  );\n-                })}\n-              </TextList>\n-            </TextContent>\n-          </>\n-        )}\n-      {Object.keys(abortedMessageObj).length === 0 &&\n-        Object.keys(completedMessageObj).length !== 0 &&\n-        !isSingleAbort && (\n-          <>\n-            <TextContent>\n-              <Text component={TextVariants.h2}>\n-                {' '}\n-                No processes were aborted\n-              </Text>\n-            </TextContent>\n-            <Divider component=\"div\" className=\"pf-u-my-xl\" />\n-            <TextContent>\n-              <Text component={TextVariants.h2}>\n-                The following processes were skipped because they were either\n-                completed or aborted:\n-              </Text>\n-\n-              <TextList>\n-                {Object.entries(completedMessageObj).map((process: any) => {\n-                  return (\n-                    <TextListItem key={process[0]}>\n-                      <ProcessDescriptor processInstanceData={process[1]} />\n-                    </TextListItem>\n-                  );\n-                })}\n-              </TextList>\n-            </TextContent>\n-          </>\n-        )}\n-      {Object.keys(abortedMessageObj).length !== 0 &&\n-        Object.keys(completedMessageObj).length === 0 &&\n-        !isSingleAbort && (\n-          <>\n-            <TextContent>\n-              <Text component={TextVariants.h2}>\n-                {' '}\n-                The following processes were aborted:\n-              </Text>\n-              <TextList>\n-                {Object.entries(abortedMessageObj).map((process: any) => {\n+            </TextList>\n+          </TextContent>\n+          {!checkedArray.includes(GraphQL.ProcessInstanceState.Aborted) &&\n+            operationResult.successInstances !== undefined &&\n+            Object.keys(operationResult.successInstances).length !== 0 && (\n+              <TextContent className=\"pf-u-mt-sm\">\n+                <Text component={TextVariants.small}>\n+                  Note: The process status has been updated. The list may appear\n+                  inconsistent until you refresh any applied filters.\n+                </Text>\n+              </TextContent>\n+            )}\n+        </>\n+      ) : (\n+        <TextContent>\n+          <Text component={TextVariants.h2}>\n+            {`No processes were ${operationResult.successMessage.toLowerCase()}`}", "originalCommit": "9889273f1535e5d1ebcac2c9a2d2d9041576662b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ1ODIxMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r456458210", "bodyText": "+1", "author": "pefernan", "createdAt": "2020-07-17T13:55:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI0NjAzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4NjEwOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r458586109", "bodyText": "done", "author": "AjayJagan", "createdAt": "2020-07-22T07:21:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI0NjAzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI0Njk3Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r456246976", "bodyText": "we can add property operationResult.failedMessage and provide similar info to what's in ignored?\n            <Text component={TextVariants.small} className=\"pf-u-mt-sm\">\n              <span>{operationResult.failedMessage}</span>\n            </Text>", "author": "jstastny-cz", "createdAt": "2020-07-17T06:36:46Z", "path": "ui-packages/packages/management-console/src/components/Atoms/ProcessListBulkInstances/ProcessListBulkInstances.tsx", "diffHunk": "@@ -7,168 +7,105 @@ import {\n   TextList,\n   TextListItem\n } from '@patternfly/react-core';\n-import { ProcessDescriptor } from '@kogito-apps/common';\n+import { ProcessDescriptor, GraphQL } from '@kogito-apps/common';\n+import { OperationResultValue } from '../../Molecules/ProcessListToolbar/ProcessListToolbar';\n \n interface IOwnProps {\n-  abortedMessageObj: any;\n-  completedMessageObj: any;\n-  isSingleAbort: any;\n-  checkedArray: any;\n-  isAbortModalOpen: boolean;\n+  operationResult: OperationResultValue;\n+  checkedArray: GraphQL.ProcessInstanceState[];\n }\n const ProcessListBulkInstances: React.FC<IOwnProps> = ({\n-  abortedMessageObj,\n-  completedMessageObj,\n-  isSingleAbort,\n   checkedArray,\n-  isAbortModalOpen\n+  operationResult\n }) => {\n   return (\n     <>\n-      {' '}\n-      {Object.keys(abortedMessageObj).length !== 0 &&\n-        Object.keys(completedMessageObj).length !== 0 &&\n-        !isSingleAbort && (\n-          <>\n-            <TextContent>\n-              <Text component={TextVariants.h2}>\n-                {' '}\n-                The following processes were aborted:\n-              </Text>\n-\n-              <TextList>\n-                {Object.entries(abortedMessageObj).map((process: any) => {\n+      {Object.keys(operationResult.successInstances).length > 0 ? (\n+        <>\n+          <TextContent>\n+            <Text component={TextVariants.h2}>\n+              {`${operationResult.successMessage} processes: `}\n+            </Text>\n+            <TextList>\n+              {Object.entries(operationResult.successInstances).map(\n+                (process: any) => {\n                   return (\n                     <TextListItem key={process[0]}>\n-                      <ProcessDescriptor processInstanceData={process[1]} />\n+                      <strong>\n+                        <ProcessDescriptor processInstanceData={process[1]} />\n+                      </strong>\n                     </TextListItem>\n                   );\n-                })}\n-              </TextList>\n-            </TextContent>\n-            {!checkedArray.includes('ABORTED') &&\n-              isAbortModalOpen &&\n-              abortedMessageObj !== undefined &&\n-              Object.keys(abortedMessageObj).length !== 0 && (\n-                <TextContent className=\"pf-u-mt-sm\">\n-                  <Text>\n-                    Note: The process status has been updated. The list may\n-                    appear inconsistent until you refresh any applied filters.\n-                  </Text>\n-                </TextContent>\n+                }\n               )}\n-            <Divider component=\"div\" className=\"pf-u-my-xl\" />\n-            <TextContent>\n-              <Text component={TextVariants.h2}>\n-                The following processes were skipped because they were either\n-                completed or aborted:\n-              </Text>\n-\n-              <TextList>\n-                {Object.entries(completedMessageObj).map((process: any) => {\n-                  return (\n-                    <TextListItem key={process[0]}>\n-                      <ProcessDescriptor processInstanceData={process[1]} />\n-                    </TextListItem>\n-                  );\n-                })}\n-              </TextList>\n-            </TextContent>\n-          </>\n-        )}\n-      {Object.keys(abortedMessageObj).length === 0 &&\n-        Object.keys(completedMessageObj).length !== 0 &&\n-        !isSingleAbort && (\n-          <>\n-            <TextContent>\n-              <Text component={TextVariants.h2}>\n-                {' '}\n-                No processes were aborted\n-              </Text>\n-            </TextContent>\n-            <Divider component=\"div\" className=\"pf-u-my-xl\" />\n-            <TextContent>\n-              <Text component={TextVariants.h2}>\n-                The following processes were skipped because they were either\n-                completed or aborted:\n-              </Text>\n-\n-              <TextList>\n-                {Object.entries(completedMessageObj).map((process: any) => {\n-                  return (\n-                    <TextListItem key={process[0]}>\n-                      <ProcessDescriptor processInstanceData={process[1]} />\n-                    </TextListItem>\n-                  );\n-                })}\n-              </TextList>\n-            </TextContent>\n-          </>\n-        )}\n-      {Object.keys(abortedMessageObj).length !== 0 &&\n-        Object.keys(completedMessageObj).length === 0 &&\n-        !isSingleAbort && (\n-          <>\n-            <TextContent>\n-              <Text component={TextVariants.h2}>\n-                {' '}\n-                The following processes were aborted:\n-              </Text>\n-              <TextList>\n-                {Object.entries(abortedMessageObj).map((process: any) => {\n+            </TextList>\n+          </TextContent>\n+          {!checkedArray.includes(GraphQL.ProcessInstanceState.Aborted) &&\n+            operationResult.successInstances !== undefined &&\n+            Object.keys(operationResult.successInstances).length !== 0 && (\n+              <TextContent className=\"pf-u-mt-sm\">\n+                <Text component={TextVariants.small}>\n+                  Note: The process status has been updated. The list may appear\n+                  inconsistent until you refresh any applied filters.\n+                </Text>\n+              </TextContent>\n+            )}\n+        </>\n+      ) : (\n+        <TextContent>\n+          <Text component={TextVariants.h2}>\n+            {`No processes were ${operationResult.successMessage.toLowerCase()}`}\n+          </Text>\n+        </TextContent>\n+      )}\n+      {Object.keys(operationResult.ignoredInstances).length !== 0 && (\n+        <>\n+          <Divider component=\"div\" className=\"pf-u-my-xl\" />\n+          <TextContent>\n+            <Text component={TextVariants.h2}>\n+              <span>Ignored processes:</span>\n+            </Text>\n+            <Text component={TextVariants.small} className=\"pf-u-mt-sm\">\n+              <span>{operationResult.ignoredMessage}</span>\n+            </Text>\n+            <TextList>\n+              {Object.entries(operationResult.ignoredInstances).map(\n+                (process: any) => {\n                   return (\n                     <TextListItem key={process[0]}>\n-                      <ProcessDescriptor processInstanceData={process[1]} />\n+                      <strong>\n+                        <ProcessDescriptor processInstanceData={process[1]} />\n+                      </strong>\n                     </TextListItem>\n                   );\n-                })}\n-              </TextList>\n-            </TextContent>\n-            {!checkedArray.includes('ABORTED') &&\n-              isAbortModalOpen &&\n-              abortedMessageObj !== undefined &&\n-              Object.keys(abortedMessageObj).length !== 0 && (\n-                <TextContent className=\"pf-u-mt-sm\">\n-                  <Text>\n-                    Note: The process status has been updated. The list may\n-                    appear inconsistent until you refresh any applied filters.\n-                  </Text>\n-                </TextContent>\n+                }\n               )}\n-          </>\n-        )}\n-      {Object.keys(abortedMessageObj).length !== 0 &&\n-        Object.keys(completedMessageObj).length === 0 &&\n-        isSingleAbort && (\n-          <>\n-            <TextContent>\n-              <Text component={TextVariants.h2}>\n-                {' '}\n-                The following process was aborted:\n-              </Text>\n-              <TextList>\n-                {Object.entries(abortedMessageObj).map((process: any) => {\n+            </TextList>\n+          </TextContent>\n+        </>\n+      )}\n+      {Object.keys(operationResult.failedInstances).length !== 0 && (\n+        <>\n+          <Divider component=\"div\" className=\"pf-u-my-xl\" />\n+          <TextContent>\n+            <Text component={TextVariants.h2}>Errors:</Text>", "originalCommit": "9889273f1535e5d1ebcac2c9a2d2d9041576662b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI0OTU1MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r456249551", "bodyText": "should we keep naming convention -> IOperationResultValue ?", "author": "jstastny-cz", "createdAt": "2020-07-17T06:43:40Z", "path": "ui-packages/packages/management-console/src/components/Molecules/ProcessListToolbar/ProcessListToolbar.tsx", "diffHunk": "@@ -16,70 +16,115 @@ import {\n   DropdownToggle,\n   DropdownToggleCheckbox,\n   DropdownItem,\n-  DropdownPosition\n+  DropdownPosition,\n+  OverflowMenuControl,\n+  OverflowMenuContent,\n+  KebabToggle,\n+  OverflowMenu,\n+  OverflowMenuItem\n } from '@patternfly/react-core';\n import { FilterIcon, SyncIcon } from '@patternfly/react-icons';\n import _ from 'lodash';\n import './ProcessListToolbar.css';\n import { GraphQL } from '@kogito-apps/common';\n import ProcessInstanceState = GraphQL.ProcessInstanceState;\n-import { handleAbortAll } from '../../../utils/Utils';\n-\n type filterType = {\n   status: ProcessInstanceState[] | string[];\n   businessKey: string[];\n };\n+\n+export interface ProcessInstanceBulkList {\n+  [key: string]: GraphQL.ProcessInstance;\n+}\n+\n+import ProcessListModal from '../../Atoms/ProcessListModal/ProcessListModal';\n+import { performMultipleAbort, setTitle } from '../../../utils/Utils';\n+\n+/* tslint:disable:no-string-literal */\n interface IOwnProps {\n   filterClick: (statusArray: ProcessInstanceState[] | string[]) => void;\n   filters: filterType;\n   setFilters: (filters) => void;\n   initData: any;\n   setInitData: (initData) => void;\n-  abortedObj: any;\n-  setAbortedObj: any;\n-  setCompletedMessageObj: any;\n-  setAbortedMessageObj: any;\n+  selectedInstances: any;\n+  setSelectedInstances: any;\n   getProcessInstances: (options: any) => void;\n   setSearchWord: (searchWord: string) => void;\n   searchWord: string;\n   isAllChecked: boolean;\n   setIsAllChecked: (isAllChecked: boolean) => void;\n   setSelectedNumber: (selectedNumber: number) => void;\n   selectedNumber: number;\n-  statusArray: string[];\n+  statusArray: GraphQL.ProcessInstanceState[];\n   setStatusArray: (stautsArray) => void;\n-  setModalTitle: (modalTitle: string) => void;\n-  setTitleType: (titleType: string) => void;\n-  handleAbortModalToggle: () => void;\n }\n+\n+export interface OperationResultValue {", "originalCommit": "9889273f1535e5d1ebcac2c9a2d2d9041576662b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "08348b006ce482c0c7615bb5bf86b4ece1274e47", "url": "https://github.com/kiegroup/kogito-apps/commit/08348b006ce482c0c7615bb5bf86b4ece1274e47", "message": "KOGITO-2699 - consolidate the reports", "committedDate": "2020-07-20T12:03:15Z", "type": "forcePushed"}, {"oid": "89ac659f89706aee5322cd3750a989fe94b3c85a", "url": "https://github.com/kiegroup/kogito-apps/commit/89ac659f89706aee5322cd3750a989fe94b3c85a", "message": "KOGITO-2699 - consolidate the reports", "committedDate": "2020-07-21T13:11:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3NTQ0Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r458175447", "bodyText": "I would suggest following changes:\n\nintroduce singular variant of the interface too and reuse in the plural variant.\nkeep IOperationResult close to the rest of interfaces + keep just the instances there.\nadjust to pass around IOperation instead of IOperationResult\n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            interface IOperationResults {\n          \n          \n            \n              [key: string]: {\n          \n          \n            \n                successInstances: ProcessInstanceBulkList;\n          \n          \n            \n                failedInstances: ProcessInstanceBulkList;\n          \n          \n            \n                ignoredInstances: ProcessInstanceBulkList;\n          \n          \n            \n              };\n          \n          \n            \n            }\n          \n          \n            \n            interface IOperations {\n          \n          \n            \n              [key: string]: {\n          \n          \n            \n                results: {\n          \n          \n            \n                  successInstances: ProcessInstanceBulkList;\n          \n          \n            \n                  failedInstances: ProcessInstanceBulkList;\n          \n          \n            \n                  ignoredInstances: ProcessInstanceBulkList;\n          \n          \n            \n                };\n          \n          \n            \n                messages: {\n          \n          \n            \n                  successMessage: string;\n          \n          \n            \n                  warningMessage?: string;\n          \n          \n            \n                  ignoredMessage: string;\n          \n          \n            \n                  noProcessMessage: string;\n          \n          \n            \n                };\n          \n          \n            \n                functions: {\n          \n          \n            \n                  perform: () => void;\n          \n          \n            \n                  changeProcessStatus?: (successInstances: ProcessInstanceBulkList) => void;\n          \n          \n            \n                };\n          \n          \n            \n              };\n          \n          \n            \n            }\n          \n          \n            \n            export interface IOperationResult {\n          \n          \n            \n              successInstances: ProcessInstanceBulkList;\n          \n          \n            \n              failedInstances: ProcessInstanceBulkList;\n          \n          \n            \n              ignoredInstances: ProcessInstanceBulkList;\n          \n          \n            \n            }\n          \n          \n            \n            \n          \n          \n            \n            interface IOperationResults {\n          \n          \n            \n              [key: string]: IOperationResult\n          \n          \n            \n            }\n          \n          \n            \n            \n          \n          \n            \n            export interface IOperation {\n          \n          \n            \n              results: IOperationResult;\n          \n          \n            \n              messages: {\n          \n          \n            \n                successMessage: string;\n          \n          \n            \n                warningMessage?: string;\n          \n          \n            \n                ignoredMessage: string;\n          \n          \n            \n                noProcessMessage: string;\n          \n          \n            \n              };\n          \n          \n            \n              functions: {\n          \n          \n            \n                perform: () => void;\n          \n          \n            \n                changeProcessStatus?: (successInstances: ProcessInstanceBulkList) => void;\n          \n          \n            \n              };\n          \n          \n            \n            }\n          \n          \n            \n            \n          \n          \n            \n            interface IOperations {\n          \n          \n            \n              [key: string]: IOperation\n          \n          \n            \n            }", "author": "jstastny-cz", "createdAt": "2020-07-21T15:13:12Z", "path": "ui-packages/packages/management-console/src/components/Molecules/ProcessListToolbar/ProcessListToolbar.tsx", "diffHunk": "@@ -16,70 +16,191 @@ import {\n   DropdownToggle,\n   DropdownToggleCheckbox,\n   DropdownItem,\n-  DropdownPosition\n+  DropdownPosition,\n+  OverflowMenuControl,\n+  OverflowMenuContent,\n+  KebabToggle,\n+  OverflowMenu,\n+  OverflowMenuItem\n } from '@patternfly/react-core';\n import { FilterIcon, SyncIcon } from '@patternfly/react-icons';\n import _ from 'lodash';\n import './ProcessListToolbar.css';\n import { GraphQL } from '@kogito-apps/common';\n import ProcessInstanceState = GraphQL.ProcessInstanceState;\n-import { handleAbortAll } from '../../../utils/Utils';\n-\n type filterType = {\n   status: ProcessInstanceState[] | string[];\n   businessKey: string[];\n };\n+\n+export interface ProcessInstanceBulkList {\n+  [key: string]: GraphQL.ProcessInstance;\n+}\n+\n+import ProcessListModal from '../../Atoms/ProcessListModal/ProcessListModal';\n+import { performMultipleAbort, setTitle } from '../../../utils/Utils';\n+\n+/* tslint:disable:no-string-literal */\n interface IOwnProps {\n   filterClick: (statusArray: ProcessInstanceState[] | string[]) => void;\n   filters: filterType;\n   setFilters: (filters) => void;\n   initData: any;\n   setInitData: (initData) => void;\n-  abortedObj: any;\n-  setAbortedObj: any;\n-  setCompletedMessageObj: any;\n-  setAbortedMessageObj: any;\n+  selectedInstances: any;\n+  setSelectedInstances: any;\n   getProcessInstances: (options: any) => void;\n   setSearchWord: (searchWord: string) => void;\n   searchWord: string;\n   isAllChecked: boolean;\n   setIsAllChecked: (isAllChecked: boolean) => void;\n   setSelectedNumber: (selectedNumber: number) => void;\n   selectedNumber: number;\n-  statusArray: string[];\n+  statusArray: GraphQL.ProcessInstanceState[];\n   setStatusArray: (stautsArray) => void;\n-  setModalTitle: (modalTitle: string) => void;\n-  setTitleType: (titleType: string) => void;\n-  handleAbortModalToggle: () => void;\n }\n+interface IOperationResults {\n+  [key: string]: {\n+    successInstances: ProcessInstanceBulkList;\n+    failedInstances: ProcessInstanceBulkList;\n+    ignoredInstances: ProcessInstanceBulkList;\n+  };\n+}\n+interface IOperations {\n+  [key: string]: {\n+    results: {\n+      successInstances: ProcessInstanceBulkList;\n+      failedInstances: ProcessInstanceBulkList;\n+      ignoredInstances: ProcessInstanceBulkList;\n+    };\n+    messages: {\n+      successMessage: string;\n+      warningMessage?: string;\n+      ignoredMessage: string;\n+      noProcessMessage: string;\n+    };\n+    functions: {\n+      perform: () => void;\n+      changeProcessStatus?: (successInstances: ProcessInstanceBulkList) => void;\n+    };\n+  };\n+}", "originalCommit": "89ac659f89706aee5322cd3750a989fe94b3c85a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4NTkzMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r458585932", "bodyText": "done", "author": "AjayJagan", "createdAt": "2020-07-22T07:20:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3NTQ0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3OTY2Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r458179666", "bodyText": "here we'd just pass whole IOperation as operations[operationType]", "author": "jstastny-cz", "createdAt": "2020-07-21T15:18:48Z", "path": "ui-packages/packages/management-console/src/components/Molecules/ProcessListToolbar/ProcessListToolbar.tsx", "diffHunk": "@@ -471,20 +636,37 @@ const ProcessListToolbar: React.FC<IOwnProps> = ({\n         </DataToolbarItem>\n       </DataToolbarGroup>\n       <DataToolbarItem variant=\"separator\" />\n-      <DataToolbarGroup className=\"pf-u-ml-md\">{buttonItems}</DataToolbarGroup>\n+      <DataToolbarGroup className=\"pf-u-ml-md\" id=\"process-management-buttons\">\n+        {buttonItems}\n+      </DataToolbarGroup>\n     </React.Fragment>\n   );\n \n   return (\n-    <DataToolbar\n-      id=\"data-toolbar-with-filter\"\n-      className=\"pf-m-toggle-group-container kogito-management-console__state-dropdown-list\"\n-      collapseListedFiltersBreakpoint=\"xl\"\n-      clearAllFilters={() => clearAll()}\n-      clearFiltersButtonText=\"Reset to default\"\n-    >\n-      <DataToolbarContent>{toolbarItems}</DataToolbarContent>\n-    </DataToolbar>\n+    <>\n+      <ProcessListModal\n+        modalTitle={setTitle(titleType, modalTitle)}\n+        isModalOpen={isModalOpen}\n+        operationResult={", "originalCommit": "89ac659f89706aee5322cd3750a989fe94b3c85a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1MjQxMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r458552413", "bodyText": "done", "author": "AjayJagan", "createdAt": "2020-07-22T05:58:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3OTY2Ng=="}], "type": "inlineReview"}, {"oid": "f153303036525b427f28ceb41b46dee5a41db078", "url": "https://github.com/kiegroup/kogito-apps/commit/f153303036525b427f28ceb41b46dee5a41db078", "message": "KOGITO-2699 - consolidate the reports", "committedDate": "2020-07-22T05:20:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU3NjU5MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r458576591", "bodyText": "this still can be defined as\ninterface IOperations {\n  [key: string]: IOperation;\n}\n\nthus I would move IOperation from ProcessListModal here and have it all defined in a single place.", "author": "jstastny-cz", "createdAt": "2020-07-22T07:00:45Z", "path": "ui-packages/packages/management-console/src/components/Molecules/ProcessListToolbar/ProcessListToolbar.tsx", "diffHunk": "@@ -16,70 +16,195 @@ import {\n   DropdownToggle,\n   DropdownToggleCheckbox,\n   DropdownItem,\n-  DropdownPosition\n+  DropdownPosition,\n+  OverflowMenuControl,\n+  OverflowMenuContent,\n+  KebabToggle,\n+  OverflowMenu,\n+  OverflowMenuItem\n } from '@patternfly/react-core';\n import { FilterIcon, SyncIcon } from '@patternfly/react-icons';\n import _ from 'lodash';\n import './ProcessListToolbar.css';\n import { GraphQL } from '@kogito-apps/common';\n+import ProcessListModal from '../../Atoms/ProcessListModal/ProcessListModal';\n+import { performMultipleAbort, setTitle } from '../../../utils/Utils';\n import ProcessInstanceState = GraphQL.ProcessInstanceState;\n-import { handleAbortAll } from '../../../utils/Utils';\n-\n-type filterType = {\n-  status: ProcessInstanceState[] | string[];\n-  businessKey: string[];\n-};\n+/* tslint:disable:no-string-literal */\n interface IOwnProps {\n   filterClick: (statusArray: ProcessInstanceState[] | string[]) => void;\n   filters: filterType;\n   setFilters: (filters) => void;\n   initData: any;\n   setInitData: (initData) => void;\n-  abortedObj: any;\n-  setAbortedObj: any;\n-  setCompletedMessageObj: any;\n-  setAbortedMessageObj: any;\n+  selectedInstances: any;\n+  setSelectedInstances: any;\n   getProcessInstances: (options: any) => void;\n   setSearchWord: (searchWord: string) => void;\n   searchWord: string;\n   isAllChecked: boolean;\n   setIsAllChecked: (isAllChecked: boolean) => void;\n   setSelectedNumber: (selectedNumber: number) => void;\n   selectedNumber: number;\n-  statusArray: string[];\n+  statusArray: GraphQL.ProcessInstanceState[];\n   setStatusArray: (stautsArray) => void;\n-  setModalTitle: (modalTitle: string) => void;\n-  setTitleType: (titleType: string) => void;\n-  handleAbortModalToggle: () => void;\n }\n+\n+type filterType = {\n+  status: ProcessInstanceState[] | string[];\n+  businessKey: string[];\n+};\n+\n+export enum OperationType {\n+  ABORT = 'ABORT'\n+}\n+\n+export interface ProcessInstanceBulkList {\n+  [key: string]: GraphQL.ProcessInstance;\n+}\n+\n+export interface IOperationResult {\n+  successInstances: ProcessInstanceBulkList;\n+  failedInstances: ProcessInstanceBulkList;\n+  ignoredInstances: ProcessInstanceBulkList;\n+}\n+\n+export interface IOperationMessages {\n+  successMessage: string;\n+  warningMessage?: string;\n+  ignoredMessage: string;\n+  noProcessMessage: string;\n+}\n+\n+export interface IOperationFunctions {\n+  perform: () => void;\n+  changeProcessStatus?: (successInstances: ProcessInstanceBulkList) => void;\n+}\n+\n+interface IOperationResults {\n+  [key: string]: IOperationResult;\n+}\n+\n+interface IOperations {\n+  [key: string]: {", "originalCommit": "f153303036525b427f28ceb41b46dee5a41db078", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4NTQyOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r458585428", "bodyText": "done", "author": "AjayJagan", "createdAt": "2020-07-22T07:19:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU3NjU5MQ=="}], "type": "inlineReview"}, {"oid": "1b608d221ca5fcd1e6d198e302140672864fc32a", "url": "https://github.com/kiegroup/kogito-apps/commit/1b608d221ca5fcd1e6d198e302140672864fc32a", "message": "KOGITO-2699 - consolidate the reports", "committedDate": "2020-07-22T07:19:06Z", "type": "forcePushed"}, {"oid": "8a0028a3623b8535ac4eb4fe2907a932c30c61a6", "url": "https://github.com/kiegroup/kogito-apps/commit/8a0028a3623b8535ac4eb4fe2907a932c30c61a6", "message": "KOGITO-2699 - consolidate the reports", "committedDate": "2020-07-22T07:29:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcyNTg5Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r458725892", "bodyText": "use a more specific type?", "author": "cristianonicolai", "createdAt": "2020-07-22T11:33:27Z", "path": "ui-packages/packages/management-console/src/components/Molecules/ProcessListTableItems/ProcessListTableItems.tsx", "diffHunk": "@@ -49,26 +50,24 @@ interface IOwnProps {\n   initData: any;\n   setInitData: any;\n   loadingInitData: boolean;\n-  abortedObj: any;\n-  setAbortedObj: any;\n+  selectedInstances: any;", "originalCommit": "8a0028a3623b8535ac4eb4fe2907a932c30c61a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczNjkxOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r458736918", "bodyText": "done", "author": "AjayJagan", "createdAt": "2020-07-22T11:55:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcyNTg5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcyNjE2Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r458726163", "bodyText": "use more specific type?", "author": "cristianonicolai", "createdAt": "2020-07-22T11:34:02Z", "path": "ui-packages/packages/management-console/src/components/Molecules/ProcessListToolbar/ProcessListToolbar.tsx", "diffHunk": "@@ -16,70 +16,196 @@ import {\n   DropdownToggle,\n   DropdownToggleCheckbox,\n   DropdownItem,\n-  DropdownPosition\n+  DropdownPosition,\n+  OverflowMenuControl,\n+  OverflowMenuContent,\n+  KebabToggle,\n+  OverflowMenu,\n+  OverflowMenuItem\n } from '@patternfly/react-core';\n import { FilterIcon, SyncIcon } from '@patternfly/react-icons';\n import _ from 'lodash';\n import './ProcessListToolbar.css';\n import { GraphQL } from '@kogito-apps/common';\n+import ProcessListModal from '../../Atoms/ProcessListModal/ProcessListModal';\n+import { performMultipleAbort, setTitle } from '../../../utils/Utils';\n import ProcessInstanceState = GraphQL.ProcessInstanceState;\n-import { handleAbortAll } from '../../../utils/Utils';\n-\n-type filterType = {\n-  status: ProcessInstanceState[] | string[];\n-  businessKey: string[];\n-};\n+/* tslint:disable:no-string-literal */\n interface IOwnProps {\n   filterClick: (statusArray: ProcessInstanceState[] | string[]) => void;\n   filters: filterType;\n   setFilters: (filters) => void;\n   initData: any;\n   setInitData: (initData) => void;\n-  abortedObj: any;\n-  setAbortedObj: any;\n-  setCompletedMessageObj: any;\n-  setAbortedMessageObj: any;\n+  selectedInstances: any;", "originalCommit": "8a0028a3623b8535ac4eb4fe2907a932c30c61a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcyODUyOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r458728529", "bodyText": "use specific type?", "author": "cristianonicolai", "createdAt": "2020-07-22T11:38:53Z", "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessListTable/ProcessListTable.tsx", "diffHunk": "@@ -23,8 +23,8 @@ interface IOwnProps {\n   initData: any;\n   isLoading: boolean;\n   setIsError: (isError: boolean) => void;\n-  abortedObj: any;\n-  setAbortedObj: any;\n+  selectedInstances: any;", "originalCommit": "8a0028a3623b8535ac4eb4fe2907a932c30c61a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczNjk3Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r458736977", "bodyText": "done", "author": "AjayJagan", "createdAt": "2020-07-22T11:55:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcyODUyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyOTMxOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r458829319", "bodyText": "Shouldn't it have a ProcessInstanceBulkList type??", "author": "pefernan", "createdAt": "2020-07-22T14:21:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcyODUyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcyOTc1Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r458729757", "bodyText": "@AjayJagan would it make sense to call handleAbort for each instance?", "author": "cristianonicolai", "createdAt": "2020-07-22T11:41:14Z", "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -177,79 +178,25 @@ export const handleNodeInstanceCancel = (\n     });\n };\n \n-export const handleAbortAll = (\n-  abortedObj,\n-  initData,\n-  setModalTitle,\n-  setTitleType,\n-  setAbortedMessageObj,\n-  setCompletedMessageObj,\n-  handleAbortModalToggle\n+export const performMultipleAbort = async (\n+  instancesToBeAborted: ProcessInstanceBulkList,\n+  multiAbortAction: (\n+    instancesToBeAborted: ProcessInstanceBulkList,\n+    failedInstances: ProcessInstanceBulkList\n+  ) => void\n ) => {\n-  const tempAbortedObj = { ...abortedObj };\n-  const completedAndAborted = {};\n-  for (const [id, processInstance] of Object.entries(tempAbortedObj)) {\n-    initData.ProcessInstances.map(instance => {\n-      if (instance.id === id) {\n-        /* istanbul ignore else */\n-        if (\n-          instance.addons.includes('process-management') &&\n-          instance.serviceUrl !== null\n-        ) {\n-          if (\n-            instance.state === ProcessInstanceState.Completed ||\n-            instance.state === ProcessInstanceState.Aborted\n-          ) {\n-            completedAndAborted[id] = processInstance;\n-            delete tempAbortedObj[id];\n-          } else {\n-            instance.state = ProcessInstanceState.Aborted;\n-          }\n-        }\n-      }\n-      if (instance.childDataList !== undefined) {\n-        instance.childDataList.map(child => {\n-          if (child.id === id) {\n-            /* istanbul ignore else */\n-            if (\n-              instance.addons.includes('process-management') &&\n-              instance.serviceUrl !== null\n-            ) {\n-              if (\n-                child.state === ProcessInstanceState.Completed ||\n-                child.state === ProcessInstanceState.Aborted\n-              ) {\n-                completedAndAborted[id] = processInstance;\n-                delete tempAbortedObj[id];\n-              } else {\n-                child.state = ProcessInstanceState.Aborted;\n-              }\n-            }\n-          }\n-        });\n-      }\n-    });\n+  const successInstances = {};\n+  const failedInstances = {};\n+  for (const id of Object.keys(instancesToBeAborted)) {\n+    try {\n+      await axios.delete(", "originalCommit": "8a0028a3623b8535ac4eb4fe2907a932c30c61a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc3MDI0Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r458770242", "bodyText": "reused the same method :)", "author": "AjayJagan", "createdAt": "2020-07-22T12:56:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcyOTc1Nw=="}], "type": "inlineReview"}, {"oid": "909b46a1894fa8aecf4eea6e0e03d04fbb08c4a3", "url": "https://github.com/kiegroup/kogito-apps/commit/909b46a1894fa8aecf4eea6e0e03d04fbb08c4a3", "message": "KOGITO-2699 - consolidate the reports", "committedDate": "2020-07-22T11:51:43Z", "type": "forcePushed"}, {"oid": "481cdea4ad628328683944859921bcdf1c3bebfa", "url": "https://github.com/kiegroup/kogito-apps/commit/481cdea4ad628328683944859921bcdf1c3bebfa", "message": "KOGITO-2699 - consolidate the reports", "committedDate": "2020-07-22T11:54:42Z", "type": "forcePushed"}, {"oid": "1dc238b7e8a68ff5b8f658fdbdb69c6022d48060", "url": "https://github.com/kiegroup/kogito-apps/commit/1dc238b7e8a68ff5b8f658fdbdb69c6022d48060", "message": "KOGITO-2699 - consolidate the reports", "committedDate": "2020-07-22T12:55:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNTYyNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r458825627", "bodyText": "Maybe a little nitpicking here... but I see you're using ProcessInstanceBulkList from the toolbar module in different places  (I can see ProcessListTableItems and Utils) wouldn't it make sense if it could be place in a different module.  I'm not a fan of this kind of coupling, but that's just a personal preference.", "author": "pefernan", "createdAt": "2020-07-22T14:16:06Z", "path": "ui-packages/packages/management-console/src/components/Molecules/ProcessListTableItems/ProcessListTableItems.tsx", "diffHunk": "@@ -37,6 +37,8 @@ import {\n   stateIconCreator\n } from '../../../utils/Utils';\n import ProcessInstance = GraphQL.ProcessInstance;\n+import { ProcessInstanceBulkList } from '../ProcessListToolbar/ProcessListToolbar';", "originalCommit": "1dc238b7e8a68ff5b8f658fdbdb69c6022d48060", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg3MzM1MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r458873350", "bodyText": "@pefernan  as discussed we could take this as a separate task .. or we would be clustering this pr :P", "author": "AjayJagan", "createdAt": "2020-07-22T15:19:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNTYyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgzMDMwMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r458830303", "bodyText": "shouldn't it have a (selectedInstances: ProcessInstanceBulkList) type?", "author": "pefernan", "createdAt": "2020-07-22T14:22:26Z", "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessListTable/ProcessListTable.tsx", "diffHunk": "@@ -23,8 +23,8 @@ interface IOwnProps {\n   initData: any;\n   isLoading: boolean;\n   setIsError: (isError: boolean) => void;\n-  abortedObj: any;\n-  setAbortedObj: any;\n+  selectedInstances: any;\n+  setSelectedInstances: any;", "originalCommit": "1dc238b7e8a68ff5b8f658fdbdb69c6022d48060", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg3Mjg5NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r458872894", "bodyText": "yep added them :)", "author": "AjayJagan", "createdAt": "2020-07-22T15:18:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgzMDMwMw=="}], "type": "inlineReview"}, {"oid": "d88427eab97c38c703f02a43a9287f214f98050e", "url": "https://github.com/kiegroup/kogito-apps/commit/d88427eab97c38c703f02a43a9287f214f98050e", "message": "KOGITO-2699 - consolidate the reports", "committedDate": "2020-07-22T15:17:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUwMDgwMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r459500800", "bodyText": "Can you add \"already\" here please? These processes were ignored because they were already completed or aborted\nOtherwise it's a little weird to say it wasn't aborted because it was aborted...", "author": "srambach", "createdAt": "2020-07-23T14:39:53Z", "path": "ui-packages/packages/management-console/src/components/Atoms/ProcessListModal/tests/ProcessListModal.test.tsx", "diffHunk": "@@ -0,0 +1,129 @@\n+import React from 'react';\n+import { shallow } from 'enzyme';\n+import ProcessListModal from '../ProcessListModal';\n+import { InfoCircleIcon } from '@patternfly/react-icons';\n+import { GraphQL } from '@kogito-apps/common';\n+import ProcessInstanceState = GraphQL.ProcessInstanceState;\n+/* tslint:disable:no-string-literal */\n+const props = {\n+  modalTitle: (\n+    <>\n+      <InfoCircleIcon\n+        className=\"pf-u-mr-sm\"\n+        color=\"var(--pf-global--info-color--100)\"\n+      />\n+      {'Abort operation'}\n+    </>\n+  ),\n+  isModalOpen: true,\n+  handleModalToggle: jest.fn(),\n+  checkedArray: [],\n+  isAbortModalOpen: true,\n+  modalContent: 'The process travels was aborted successfully',\n+  operationResult: {\n+    messages: {\n+      successMessage: 'Aborted',\n+      ignoredMessage:\n+        'These processes were ignored because they were completed or aborted',", "originalCommit": "d88427eab97c38c703f02a43a9287f214f98050e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUxNjE4OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/317#discussion_r459516188", "bodyText": "done :)", "author": "AjayJagan", "createdAt": "2020-07-23T15:00:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUwMDgwMA=="}], "type": "inlineReview"}, {"oid": "5e0356cd176145b28b4545e5afb26d492939e4e7", "url": "https://github.com/kiegroup/kogito-apps/commit/5e0356cd176145b28b4545e5afb26d492939e4e7", "message": "KOGITO-2699 - consolidate the reports", "committedDate": "2020-07-23T14:53:52Z", "type": "forcePushed"}, {"oid": "20719b4875f27ac9e2b1c289bb75507a1f680a78", "url": "https://github.com/kiegroup/kogito-apps/commit/20719b4875f27ac9e2b1c289bb75507a1f680a78", "message": "KOGITO-2699 - consolidate the reports", "committedDate": "2020-07-23T14:59:37Z", "type": "forcePushed"}, {"oid": "238c7af2cf43ed3121591a80783ebea3adb6bbbd", "url": "https://github.com/kiegroup/kogito-apps/commit/238c7af2cf43ed3121591a80783ebea3adb6bbbd", "message": "KOGITO-2699 - consolidate the reports", "committedDate": "2020-07-27T05:02:25Z", "type": "forcePushed"}, {"oid": "a0665410a265e09abc3a1f5b2aecb555a68fd18e", "url": "https://github.com/kiegroup/kogito-apps/commit/a0665410a265e09abc3a1f5b2aecb555a68fd18e", "message": "KOGITO-2699  Adding a list of failed instance in modal of bulk abort process\n\nKOGITO-2699 - consolidate the reports", "committedDate": "2020-07-27T06:48:09Z", "type": "forcePushed"}, {"oid": "66587d7873b69d7608430533eb44657f737a8318", "url": "https://github.com/kiegroup/kogito-apps/commit/66587d7873b69d7608430533eb44657f737a8318", "message": "KOGITO-2699  Adding a list of failed instance in modal of bulk abort process\n\nKOGITO-2699 - consolidate the reports", "committedDate": "2020-07-27T07:52:37Z", "type": "commit"}, {"oid": "66587d7873b69d7608430533eb44657f737a8318", "url": "https://github.com/kiegroup/kogito-apps/commit/66587d7873b69d7608430533eb44657f737a8318", "message": "KOGITO-2699  Adding a list of failed instance in modal of bulk abort process\n\nKOGITO-2699 - consolidate the reports", "committedDate": "2020-07-27T07:52:37Z", "type": "forcePushed"}]}