{"pr_number": 6293, "pr_title": "Auth multi-user fix and new API endpoints", "pr_createdAt": "2020-11-12T12:54:19Z", "pr_url": "https://github.com/zaproxy/zaproxy/pull/6293", "timeline": [{"oid": "a8ceb9ad2e50187f124bc036d7ad5f9be432f0e3", "url": "https://github.com/zaproxy/zaproxy/commit/a8ceb9ad2e50187f124bc036d7ad5f9be432f0e3", "message": "Auth multi-user fix and new API endpoints WIP\n\nThe current polling option did not handle multiple users polling at the\nsame time. This PR should fix that.\n\nIt also adds more API endpoints to make the auth process less opaque and\nmore controllable.\n\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-11-12T13:15:27Z", "type": "forcePushed"}, {"oid": "5ea7cbd0fea3548b1e2a76ab0c222fdfb34a8294", "url": "https://github.com/zaproxy/zaproxy/commit/5ea7cbd0fea3548b1e2a76ab0c222fdfb34a8294", "message": "Auth multi-user fix and new API endpoints WIP\n\nThe current polling option did not handle multiple users polling at the\nsame time. This PR should fix that.\n\nIt also adds more API endpoints to make the auth process less opaque and\nmore controllable.\n\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-11-13T10:53:22Z", "type": "forcePushed"}, {"oid": "9ed4706ec88f7dafa246f3c4c142d7d150cfbd03", "url": "https://github.com/zaproxy/zaproxy/commit/9ed4706ec88f7dafa246f3c4c142d7d150cfbd03", "message": "Auth multi-user fix and new API endpoints WIP\n\nThe current polling option did not handle multiple users polling at the\nsame time. This PR should fix that.\n\nIt also adds more API endpoints to make the auth process less opaque and\nmore controllable.\n\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-11-13T12:29:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcyOTkwMg==", "url": "https://github.com/zaproxy/zaproxy/pull/6293#discussion_r532729902", "bodyText": "Could be merged.", "author": "thc202", "createdAt": "2020-11-30T16:31:24Z", "path": "zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java", "diffHunk": "@@ -290,29 +287,26 @@ public boolean isAuthenticated(HttpMessage msg, User user, boolean force) {\n             return true;\n         }\n \n-        List<String> contentToTest = new ArrayList<>();\n+        HttpMessage msgToTest;\n \n         switch (this.authCheckingStrategy) {\n             case EACH_REQ:\n-                contentToTest.add(msg.getRequestHeader().toString());\n-                contentToTest.add(msg.getRequestBody().toString());\n+                msgToTest = msg;\n                 break;\n             case EACH_REQ_RESP:\n-                contentToTest.add(msg.getRequestHeader().toString());\n-                contentToTest.add(msg.getRequestBody().toString());\n-                contentToTest.add(msg.getResponseHeader().toString());\n-                contentToTest.add(msg.getResponseBody().toString());\n+                msgToTest = msg;\n                 break;\n             case EACH_RESP:", "originalCommit": "9ed4706ec88f7dafa246f3c4c142d7d150cfbd03", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczMDAyNg==", "url": "https://github.com/zaproxy/zaproxy/pull/6293#discussion_r532730026", "bodyText": "Could be merged.", "author": "thc202", "createdAt": "2020-11-30T16:31:34Z", "path": "zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java", "diffHunk": "@@ -385,15 +347,39 @@ public boolean isAuthenticated(HttpMessage msg, User user, boolean force) {\n                 return false;\n         }\n \n+        return evaluateAuthRequest(msgToTest, authState);\n+    }\n+\n+    public boolean evaluateAuthRequest(HttpMessage msg, AuthenticationState authState) {\n+        List<String> contentToTest = new ArrayList<>();\n+        switch (authCheckingStrategy) {\n+            case EACH_REQ:\n+                contentToTest.add(msg.getRequestHeader().toString());\n+                contentToTest.add(msg.getRequestBody().toString());\n+                break;\n+            case EACH_REQ_RESP:\n+                contentToTest.add(msg.getRequestHeader().toString());\n+                contentToTest.add(msg.getRequestBody().toString());\n+                contentToTest.add(msg.getResponseHeader().toString());\n+                contentToTest.add(msg.getResponseBody().toString());\n+                break;\n+            case EACH_RESP:\n+                contentToTest.add(msg.getResponseHeader().toString());\n+                contentToTest.add(msg.getResponseBody().toString());\n+                break;\n+            case POLL_URL:", "originalCommit": "9ed4706ec88f7dafa246f3c4c142d7d150cfbd03", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczMDA5Ng==", "url": "https://github.com/zaproxy/zaproxy/pull/6293#discussion_r532730096", "bodyText": "getLong?", "author": "thc202", "createdAt": "2020-11-30T16:31:39Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/api/ApiImplementor.java", "diffHunk": "@@ -517,6 +517,14 @@ protected int getParam(JSONObject params, String name, int defaultValue) {\n         }\n     }\n \n+    protected long getParam(JSONObject params, String name, long defaultValue) {\n+        try {\n+            return params.getInt(name);", "originalCommit": "9ed4706ec88f7dafa246f3c4c142d7d150cfbd03", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc0NjI0Nw==", "url": "https://github.com/zaproxy/zaproxy/pull/6293#discussion_r532746247", "bodyText": "Should return internal error?", "author": "thc202", "createdAt": "2020-11-30T16:53:23Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/users/UsersAPI.java", "diffHunk": "@@ -233,6 +300,121 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc\n                 a.handleAction(actionParams);\n                 context.save();\n                 return ApiResponseElement.OK;\n+            case ACTION_AUTHENTICATE_AS_USER:\n+                user = getUser(params);\n+                int hId1 = user.getAuthenticationState().getLastAuthRequestHistoryId();\n+                user.authenticate();\n+                int hId2 = user.getAuthenticationState().getLastAuthRequestHistoryId();\n+\n+                if (hId2 > hId1) {\n+                    // Not all authentication methods result in an authentication request.\n+                    // In theory we could get a different one if other reqs are being made, but this\n+                    // is probably as safe as we can make it right now\n+                    ExtensionHistory extHistory =\n+                            Control.getSingleton()\n+                                    .getExtensionLoader()\n+                                    .getExtension(ExtensionHistory.class);\n+\n+                    if (extHistory != null) {\n+                        HistoryReference href = extHistory.getHistoryReference(hId2);\n+                        try {\n+                            HttpMessage authMsg = href.getHttpMessage();\n+                            ApiResponseSet<String> responseSet =\n+                                    ApiResponseConversionUtils.httpMessageToSet(hId2, authMsg);\n+                            responseSet.put(\n+                                    \"authSuccessful\",\n+                                    Boolean.toString(\n+                                            user.getContext()\n+                                                    .getAuthenticationMethod()\n+                                                    .evaluateAuthRequest(\n+                                                            authMsg,\n+                                                            user.getAuthenticationState())));\n+                            return responseSet;\n+                        } catch (Exception e) {\n+                            log.error(\"Failed to read auth request from db \" + hId2, e);", "originalCommit": "9ed4706ec88f7dafa246f3c4c142d7d150cfbd03", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc0NjI4OA==", "url": "https://github.com/zaproxy/zaproxy/pull/6293#discussion_r532746288", "bodyText": "Needs to handle IllegalArgumentException.", "author": "thc202", "createdAt": "2020-11-30T16:53:25Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/users/UsersAPI.java", "diffHunk": "@@ -233,6 +300,121 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc\n                 a.handleAction(actionParams);\n                 context.save();\n                 return ApiResponseElement.OK;\n+            case ACTION_AUTHENTICATE_AS_USER:\n+                user = getUser(params);\n+                int hId1 = user.getAuthenticationState().getLastAuthRequestHistoryId();\n+                user.authenticate();\n+                int hId2 = user.getAuthenticationState().getLastAuthRequestHistoryId();\n+\n+                if (hId2 > hId1) {\n+                    // Not all authentication methods result in an authentication request.\n+                    // In theory we could get a different one if other reqs are being made, but this\n+                    // is probably as safe as we can make it right now\n+                    ExtensionHistory extHistory =\n+                            Control.getSingleton()\n+                                    .getExtensionLoader()\n+                                    .getExtension(ExtensionHistory.class);\n+\n+                    if (extHistory != null) {\n+                        HistoryReference href = extHistory.getHistoryReference(hId2);\n+                        try {\n+                            HttpMessage authMsg = href.getHttpMessage();\n+                            ApiResponseSet<String> responseSet =\n+                                    ApiResponseConversionUtils.httpMessageToSet(hId2, authMsg);\n+                            responseSet.put(\n+                                    \"authSuccessful\",\n+                                    Boolean.toString(\n+                                            user.getContext()\n+                                                    .getAuthenticationMethod()\n+                                                    .evaluateAuthRequest(\n+                                                            authMsg,\n+                                                            user.getAuthenticationState())));\n+                            return responseSet;\n+                        } catch (Exception e) {\n+                            log.error(\"Failed to read auth request from db \" + hId2, e);\n+                        }\n+                    }\n+                }\n+\n+                return ApiResponseElement.OK;\n+\n+            case ACTION_POLL_AS_USER:\n+                user = getUser(params);\n+                try {\n+                    HttpMessage msg = user.getContext().getAuthenticationMethod().pollAsUser(user);", "originalCommit": "9ed4706ec88f7dafa246f3c4c142d7d150cfbd03", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc0OTg0MA==", "url": "https://github.com/zaproxy/zaproxy/pull/6293#discussion_r532749840", "bodyText": "String.valueOf(...)", "author": "thc202", "createdAt": "2020-11-30T16:57:51Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/users/UsersAPI.java", "diffHunk": "@@ -260,6 +442,57 @@ private ApiResponse buildResponseFromUser(User u) {\n         return new ApiResponseSet<>(\"user\", fields);\n     }\n \n+    private ApiResponse buildResponseFromAuthState(AuthenticationState state) {\n+        Map<String, String> fields = new HashMap<>();\n+        fields.put(\"lastSuccessfulAuthTimeInMs\", Long.toString(state.getLastSuccessfulAuthTime()));\n+        fields.put(\"lastAuthFailure\", state.getLastAuthFailure());\n+        fields.put(\"lastAuthHistoryId\", Integer.toString(state.getLastAuthRequestHistoryId()));\n+        fields.put(PARAM_LAST_POLL_RESULT, \"\" + state.getLastPollResult());", "originalCommit": "9ed4706ec88f7dafa246f3c4c142d7d150cfbd03", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc0OTg3Mw==", "url": "https://github.com/zaproxy/zaproxy/pull/6293#discussion_r532749873", "bodyText": ".toString()", "author": "thc202", "createdAt": "2020-11-30T16:57:54Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/users/UsersAPI.java", "diffHunk": "@@ -260,6 +442,57 @@ private ApiResponse buildResponseFromUser(User u) {\n         return new ApiResponseSet<>(\"user\", fields);\n     }\n \n+    private ApiResponse buildResponseFromAuthState(AuthenticationState state) {\n+        Map<String, String> fields = new HashMap<>();\n+        fields.put(\"lastSuccessfulAuthTimeInMs\", Long.toString(state.getLastSuccessfulAuthTime()));\n+        fields.put(\"lastAuthFailure\", state.getLastAuthFailure());\n+        fields.put(\"lastAuthHistoryId\", Integer.toString(state.getLastAuthRequestHistoryId()));\n+        fields.put(PARAM_LAST_POLL_RESULT, \"\" + state.getLastPollResult());\n+        fields.put(PARAM_REQUESTS_SINCE_LAST_POLL, Integer.toString(state.getRequestsSincePoll()));\n+        fields.put(PARAM_LAST_POLL_TIME_IN_MS, Long.toString(state.getLastPollTime()));\n+        return new ApiResponseSet<>(\"authenticationState\", fields);\n+    }\n+\n+    private ApiResponse buildResponseFromAuthSession(WebSession session) {\n+        ApiResponseList list = new ApiResponseList(\"authenticationSession\");\n+        if (session == null) {\n+            return list;\n+        }\n+        HttpState state = session.getHttpState();\n+        ApiResponseList cookieList = new ApiResponseList(\"cookies\");\n+        for (Cookie cookie : state.getCookies()) {\n+            Map<String, String> fields = new HashMap<>();\n+            fields.put(PARAM_COOKIE_DOMAIN, cookie.getDomain());\n+            fields.put(PARAM_COOKIE_NAME, cookie.getName());\n+            fields.put(PARAM_COOKIE_VALUE, cookie.getValue());\n+            fields.put(PARAM_COOKIE_PATH, cookie.getPath());\n+            fields.put(\"expires\", \"\" + cookie.getExpiryDate());", "originalCommit": "9ed4706ec88f7dafa246f3c4c142d7d150cfbd03", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc0OTg5NA==", "url": "https://github.com/zaproxy/zaproxy/pull/6293#discussion_r532749894", "bodyText": "Boolean.toString(...)", "author": "thc202", "createdAt": "2020-11-30T16:57:56Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/users/UsersAPI.java", "diffHunk": "@@ -260,6 +442,57 @@ private ApiResponse buildResponseFromUser(User u) {\n         return new ApiResponseSet<>(\"user\", fields);\n     }\n \n+    private ApiResponse buildResponseFromAuthState(AuthenticationState state) {\n+        Map<String, String> fields = new HashMap<>();\n+        fields.put(\"lastSuccessfulAuthTimeInMs\", Long.toString(state.getLastSuccessfulAuthTime()));\n+        fields.put(\"lastAuthFailure\", state.getLastAuthFailure());\n+        fields.put(\"lastAuthHistoryId\", Integer.toString(state.getLastAuthRequestHistoryId()));\n+        fields.put(PARAM_LAST_POLL_RESULT, \"\" + state.getLastPollResult());\n+        fields.put(PARAM_REQUESTS_SINCE_LAST_POLL, Integer.toString(state.getRequestsSincePoll()));\n+        fields.put(PARAM_LAST_POLL_TIME_IN_MS, Long.toString(state.getLastPollTime()));\n+        return new ApiResponseSet<>(\"authenticationState\", fields);\n+    }\n+\n+    private ApiResponse buildResponseFromAuthSession(WebSession session) {\n+        ApiResponseList list = new ApiResponseList(\"authenticationSession\");\n+        if (session == null) {\n+            return list;\n+        }\n+        HttpState state = session.getHttpState();\n+        ApiResponseList cookieList = new ApiResponseList(\"cookies\");\n+        for (Cookie cookie : state.getCookies()) {\n+            Map<String, String> fields = new HashMap<>();\n+            fields.put(PARAM_COOKIE_DOMAIN, cookie.getDomain());\n+            fields.put(PARAM_COOKIE_NAME, cookie.getName());\n+            fields.put(PARAM_COOKIE_VALUE, cookie.getValue());\n+            fields.put(PARAM_COOKIE_PATH, cookie.getPath());\n+            fields.put(\"expires\", \"\" + cookie.getExpiryDate());\n+            fields.put(PARAM_COOKIE_SECURE, \"\" + cookie.getSecure());", "originalCommit": "9ed4706ec88f7dafa246f3c4c142d7d150cfbd03", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc1MTk0Mg==", "url": "https://github.com/zaproxy/zaproxy/pull/6293#discussion_r532751942", "bodyText": "on \u2192 or?\nMs \u2192 ms?", "author": "thc202", "createdAt": "2020-11-30T17:00:44Z", "path": "zap/src/main/resources/org/zaproxy/zap/resources/Messages.properties", "diffHunk": "@@ -3160,34 +3160,61 @@ uiutils.desc = Core UI related functionality.\n uiutils.name = Core UI Extension\n \n users.api.action.newUser = Creates a new user with the given name for the context with the given ID.\n-users.api.action.newUser.param.contextId = \n+users.api.action.newUser.param.contextId = The Context Id\n users.api.action.newUser.param.name = \n users.api.action.removeUser = Removes the user with the given ID that belongs to the context with the given ID.\n-users.api.action.removeUser.param.contextId = \n-users.api.action.removeUser.param.userId = \n+users.api.action.removeUser.param.contextId =  The Context Id\n+users.api.action.removeUser.param.userId = The User Id\n users.api.action.setAuthenticationCredentials = Sets the authentication credentials for the user with the given ID that belongs to the context with the given ID.\n-users.api.action.setAuthenticationCredentials.param.contextId = \n-users.api.action.setAuthenticationCredentials.param.userId = \n+users.api.action.setAuthenticationCredentials.param.contextId = The Context Id\n+users.api.action.setAuthenticationCredentials.param.userId = The User Id\n users.api.action.setAuthenticationCredentials.param.authCredentialsConfigParams = \n+users.api.action.setAuthenticationState = Sets fields in the authentication state for the user identified by the Context and User Ids.\n+users.api.action.setAuthenticationState.param.contextId = The Context Id\n+users.api.action.setAuthenticationState.param.userId = The User Id\n+users.api.action.setAuthenticationState.param.lastPollResult = Last Poll Result - optional, should be 'true' or 'false'.\n+users.api.action.setAuthenticationState.param.lastPollTimeInMs = Last Poll Time in Milliseconds - optional, should be a long on 'NOW' for the current time in Ms.", "originalCommit": "9ed4706ec88f7dafa246f3c4c142d7d150cfbd03", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "849c0876fa68ecf0012871dc7599a78556a12991", "url": "https://github.com/zaproxy/zaproxy/commit/849c0876fa68ecf0012871dc7599a78556a12991", "message": "Auth multi-user fix and new API endpoints\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-12-01T11:24:33Z", "type": "commit"}, {"oid": "849c0876fa68ecf0012871dc7599a78556a12991", "url": "https://github.com/zaproxy/zaproxy/commit/849c0876fa68ecf0012871dc7599a78556a12991", "message": "Auth multi-user fix and new API endpoints\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-12-01T11:24:33Z", "type": "forcePushed"}]}