{"pr_number": 6371, "pr_title": "Adding support for handling manipulation of multiple NameValuePairs", "pr_createdAt": "2020-12-21T20:02:58Z", "pr_url": "https://github.com/zaproxy/zaproxy/pull/6371", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkwOTMxOQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r546909319", "bodyText": "@thc202 @kingthorin was planning to have another base class for usecases where scanrule wants to modify multiple name value pairs which is a use case for FileUpload scan rule. WDYT ?", "author": "preetkaran20", "createdAt": "2020-12-21T20:14:58Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractAppVariantPlugin.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package org.parosproxy.paros.core.scanner;\n+\n+import java.util.List;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.model.Model;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.ascan.VariantFactory;\n+\n+/**\n+ * {@code AbstractAppVariantPlugin} is the abstract base class which is used to run per variant to\n+ * modify multiple name value pairs of the {@code HttpMessage} per variant.\n+ *\n+ * @author KSASAN preetkaran20@gmail.com\n+ */\n+public abstract class AbstractAppVariantPlugin extends AbstractAppPlugin {", "originalCommit": "bc491cfb8dc3159f7ced7533ccd54f9897e1e9cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkzNDQ3MA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r546934470", "bodyText": "Wouldn\u2019t file upload use the multipart variant which can already handle manipulation of various elements? (File name, disposition, content type)", "author": "kingthorin", "createdAt": "2020-12-21T21:19:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkwOTMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0NTE5Mw==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r547045193", "bodyText": "No no, Variant handles the manipulation but AbstractAppParamPlugin calls the scan method for one field at a time hence this new class gives the access to entire variant so that child can manipulate fields as per there need.", "author": "preetkaran20", "createdAt": "2020-12-22T03:21:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkwOTMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0NTU4Mw==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r547045583", "bodyText": "Ah okay, I see what you're after.", "author": "kingthorin", "createdAt": "2020-12-22T03:22:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkwOTMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE4MjE4MQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r547182181", "bodyText": "Why not change AbstractAppParamPlugin to just expose all parameters if that's what's needed?\ne.g. scan(HttpMessage, List<NameValuePair>)\nThose interested in all parameters just need to override the method.\nWorth noting that variants do not support changing multiple parameters at the same time.", "author": "thc202", "createdAt": "2020-12-22T09:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkwOTMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI4NTM3NA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r547285374", "bodyText": "@thc202\nActually if we expose List<NameValuePair> then setParameter/setEscapedParameter method becomes irrelevant as it considers nameValuePair as class variable. Also param plugin was written for some other purpose and having default implementation seems hacky. WDYT ?\nOh variants don't support changing multiple parameters ? because of start index and end index of value getting changed after setparameter is invoked ?\nHow should be proceed on this ? shall we create a new setParameter method that re-initialise the variant with new message after setting parameter ?", "author": "preetkaran20", "createdAt": "2020-12-22T13:44:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkwOTMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMwNjAyNw==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r547306027", "bodyText": "The NameValuePairs are already being exposed through scan(HttpMessage, NameValuePair) (and there are scan rules that make use of it), the only difference is that we would be exposing all of them at once. Those methods would not be irrelevant, they are used by scan rules that scan just one parameter at the same time.\nThe variants don't keep track of what changes were already done to a given message, the parameters would have to be set at the same time for properly construct the payload.", "author": "thc202", "createdAt": "2020-12-22T14:25:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkwOTMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM2MDY1OQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r547360659", "bodyText": "@thc202\nno no, my point is that for the method that will expose list of name value pairs how are we going to call setParameter/setEscapedParameter methods?  we need to create 2 new methods which takes original nameValuePair as input and hence for someone who is implementing abstractAppParamPlugin it is tough to understand which method to invoke. I think new class creation is a clear demarcation between the 2 usecases.\n\n    private String setParameter(HttpMessage msg, NameValuePair originalPair, String value) {\n\n        StringBuilder newBodyBuilder = new StringBuilder(msg.getRequestBody().toString());\n        int idx = originalPair.getPosition() - 1;\n        MultipartFormParameter mpPart = multiPartParams.get(idx);\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\n                    \"i: \"\n                            + idx\n                            + \" pos: \"\n                            + originalPair.getPosition()\n                            + \" S: \"\n                            + mpPart.getStart()\n                            + \" E: \"\n                            + mpPart.getEnd());\n        }\n        newBodyBuilder.replace(mpPart.getStart(), mpPart.getEnd(), value);\n\n        String newBody = newBodyBuilder.toString();\n        msg.getRequestBody().setBody(newBody);\n        return newBody;\n    }\nWhat i was refering is that, the above method takes the start and end index from the already set HttpMessage (Original) in variant and if we set one value in the httpmessage (input to the method), original start and end index will start pointing to some other location and if we add another value to the same httpmessage (input to the method) it will update the httpmessage incorrectly and hence it will break the httpmessage.", "author": "preetkaran20", "createdAt": "2020-12-22T16:02:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkwOTMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk3NDgzNw==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r554974837", "bodyText": "I'm not sure it is, e.g. a list allows to add one element or multiple at the same time. If you have multiple parameters you call the method that accepts multiple, if you have one parameter you call the method that accepts one.\nYes, that's what I said in the previous comment, variants don't currently keep track of what changes were done to a given message, the parameters need to be set at the same time.", "author": "thc202", "createdAt": "2021-01-11T11:13:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkwOTMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTY1MjEyMw==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r555652123", "bodyText": "So my point was that:\nAbstractAppParamPlugin currently has following methods\n    protected String setParameter(HttpMessage message, String param, String value) {\n        return variant.setParameter(message, originalPair, param, value);\n    }\n\n    protected String setEscapedParameter(HttpMessage message, String param, String value) {\n        return variant.setEscapedParameter(message, originalPair, param, value);\n    }\nNow we need to add 2 new methods and final structure will be:\n protected String setParameter(HttpMessage message, String param, String value) {\n        return variant.setParameter(message, originalPair, param, value);\n    }\n\n    protected String setEscapedParameter(HttpMessage message, String param, String value) {\n        return variant.setEscapedParameter(message, originalPair, param, value);\n    }\n protected String setParameter(HttpMessage message, String param, String value, NameValuePair nameValuePair) {\n        return variant.setParameter(message, nameValuePair, param, value);\n    }\n\n    protected String setEscapedParameter(HttpMessage message, String param, String value, NameValuePair nameValuePair) {\n        return variant.setEscapedParameter(message, nameValuePair, param, value);\n    }\nI was thinking there is some difficulty in understanding and implementation where if child has called the original methods (old one) then it will cause issues, may be null pointer due to originalPair. Also from implementation the class variable originalPair is some times null and other times not which is some wrong design i feel.\nwhy to cause all this confusion.", "author": "preetkaran20", "createdAt": "2021-01-12T10:05:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkwOTMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTY5NzkyOQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r555697929", "bodyText": "The proposed methods do not support changing multiple parameters. Probably better to discuss how the variant will support changing multiple parameters instead, that's what actually will define how the plugin will expose that.", "author": "thc202", "createdAt": "2021-01-12T11:20:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkwOTMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODA5Mzg0MA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r628093840", "bodyText": "There's still no proposal on how to change the parameters at the same time #6371 (comment).\n\n@thc202  Now this PR handles changing multiple parameters. Please look at PR: https://github.com/zaproxy/zaproxy/pull/6371/files#diff-9dfdfe7aed90f3b927955bcfb81a1c9ae34e745c7b5b4e04d79b5b0130cfb12aR241", "author": "preetkaran20", "createdAt": "2021-05-07T10:15:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkwOTMxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTY1OTMzMg==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r555659332", "bodyText": "@thc202  @kingthorin my initial thought is to call setMessage again after setting the message for parsing the message again. This can be done from the setParameter api or by exposing a new api which can handle multiple updates and hence the new Api will not impact the performance of existing setparameter api.\nWDYT ?", "author": "preetkaran20", "createdAt": "2021-01-12T10:16:56Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java", "diffHunk": "@@ -55,10 +55,11 @@\n     // insensitive & DOTALL, and hit \"test\")\n \n     private List<NameValuePair> params = Collections.emptyList();\n-    private List<MultipartFormParameter> multiPartParams = new ArrayList<MultipartFormParameter>();\n+    private List<MultipartFormParameter> multiPartParams;\n \n     @Override\n     public void setMessage(HttpMessage msg) {\n+        multiPartParams = new ArrayList<MultipartFormParameter>();", "originalCommit": "31d4efaf62837eacac9417d8e546425d076cbeaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTY5OTUwMw==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r555699503", "bodyText": "It's not necessary to re-parse the message to be able to set multiple parameters.", "author": "thc202", "createdAt": "2021-01-12T11:23:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTY1OTMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTcwMzQ4OA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r555703488", "bodyText": "sure will think more on this.", "author": "preetkaran20", "createdAt": "2021-01-12T11:31:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTY1OTMzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODc3OTc4NA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r558779784", "bodyText": "need to validate... not corect loginc if value is 0 length", "author": "preetkaran20", "createdAt": "2021-01-16T02:44:53Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java", "diffHunk": "@@ -235,6 +236,15 @@ private String setParameter(HttpMessage msg, NameValuePair originalPair, String\n                             + mpPart.getEnd());\n         }\n         newBodyBuilder.replace(mpPart.getStart(), mpPart.getEnd(), value);\n+        int offset = value.length() - mpPart.getEnd() + mpPart.getStart() - 1;", "originalCommit": "14459c833532cb3239436fe78accc42d76545a4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODc5MjU0Mg==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r558792542", "bodyText": "need to write unittest cases", "author": "preetkaran20", "createdAt": "2021-01-16T03:11:51Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java", "diffHunk": "@@ -235,6 +236,15 @@ private String setParameter(HttpMessage msg, NameValuePair originalPair, String\n                             + mpPart.getEnd());\n         }\n         newBodyBuilder.replace(mpPart.getStart(), mpPart.getEnd(), value);\n+        int offset = value.length() - mpPart.getEnd() + mpPart.getStart();", "originalCommit": "d67dce2f7b12278d0a83735a4cc3d6dd5be77e4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "04ebca2126c97060ab94215753a9da1ed549955a", "url": "https://github.com/zaproxy/zaproxy/commit/04ebca2126c97060ab94215753a9da1ed549955a", "message": "Original State\n\nSigned-off-by: karan preet singh sasan <karanpreet_singh@intuit.com>", "committedDate": "2021-02-28T14:05:50Z", "type": "forcePushed"}, {"oid": "57e17348238a315a8aadcbf5ff9a6268297cabbe", "url": "https://github.com/zaproxy/zaproxy/commit/57e17348238a315a8aadcbf5ff9a6268297cabbe", "message": "Merge pull request #6587 from kingthorin/revert-cg\n\nrevert: ci workflow concurrency grouping", "committedDate": "2021-05-07T08:23:33Z", "type": "forcePushed"}, {"oid": "df39a2346595b0a48e422a3d6a06468a3702f038", "url": "https://github.com/zaproxy/zaproxy/commit/df39a2346595b0a48e422a3d6a06468a3702f038", "message": "incorporating review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>", "committedDate": "2021-06-16T06:25:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjM4ODA2MA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r652388060", "bodyText": "@thc202 I have made the condition on the position, considering it is unique and also param can be null too.", "author": "preetkaran20", "createdAt": "2021-06-16T06:30:52Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AppParametersBuilder.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package org.parosproxy.paros.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * {@code AppParametersBuilder} provides an easy way to build {@code AppParameters} and validates\n+ * the provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class AppParametersBuilder {\n+\n+    private List<AppParameter> appParameters = new ArrayList<>();\n+    private Set<Integer> nameValuePairPositions = new HashSet<>();\n+    private final Logger logger = LogManager.getLogger(this.getClass());\n+\n+    public AppParametersBuilder addAppParameter(\n+            NameValuePair nameValuePair, String param, String value, AppParamValueType operation) {\n+        if (!nameValuePairPositions.contains(nameValuePair.getPosition())) {", "originalCommit": "afc56e5d0bf6686b03875a21ada748457867133d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3MzIzNQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r665973235", "bodyText": "Sounds good.", "author": "thc202", "createdAt": "2021-07-08T08:16:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjM4ODA2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3NDA3OA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r665974078", "bodyText": "But it should allow to replace, that way the scan rules can reuse the builder to craft another message with slightly changes.", "author": "thc202", "createdAt": "2021-07-08T08:17:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjM4ODA2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjE3NjI2OA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r666176268", "bodyText": "hmm sure.", "author": "preetkaran20", "createdAt": "2021-07-08T13:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjM4ODA2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjM4ODcwMQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r652388701", "bodyText": "The return types are quite conflicting, like for multipart it is returning body of HttMessage where as for cookie it returns something else and for some variants it is returning the passed values.", "author": "preetkaran20", "createdAt": "2021-06-16T06:32:10Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/Variant.java", "diffHunk": "@@ -47,6 +47,17 @@ public String setParameter(\n     public String setEscapedParameter(\n             HttpMessage msg, NameValuePair originalPair, String param, String value);\n \n+    /**\n+     * Sets the parameters into the given {@code message}.\n+     *\n+     * @param message the message that will be changed\n+     * @param appParams list of name of the parameter\n+     * @return the parameter values set to HttpMessage\n+     */\n+    default List<String> setParameters(HttpMessage message, List<AppParameter> appParams) {", "originalCommit": "afc56e5d0bf6686b03875a21ada748457867133d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3NDc3MA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r665974770", "bodyText": "Fine returning void.", "author": "thc202", "createdAt": "2021-07-08T08:18:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjM4ODcwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjM4OTYwMw==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r652389603", "bodyText": "As for single parameter setParameter method is returning HTTP message's body so returned the same(by adding to list). @thc202  WDYT? I think setParameter should not return anything, not sure what was the reason for returning it.", "author": "preetkaran20", "createdAt": "2021-06-16T06:33:57Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java", "diffHunk": "@@ -209,33 +211,66 @@ public void setMessage(HttpMessage msg) {\n     @Override\n     public String setParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair), Arrays.asList(value));\n     }\n \n     @Override\n     public String setEscapedParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair), Arrays.asList(value));\n     }\n \n-    private String setParameter(HttpMessage msg, NameValuePair originalPair, String value) {\n+    @Override\n+    public List<String> setParameters(HttpMessage msg, List<AppParameter> appParameters) {\n+        return Arrays.asList(", "originalCommit": "afc56e5d0bf6686b03875a21ada748457867133d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3NTc4OQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r665975789", "bodyText": "Well, that allows to provide evidence of what was injected for instance. Although for multiple parameters it would be harder to provide a more precise evidence I guess.", "author": "thc202", "createdAt": "2021-07-08T08:20:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjM4OTYwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk2ODE0Nw==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r665968147", "bodyText": "Better move to AppParameter, this also applies to the name not just the value.", "author": "thc202", "createdAt": "2021-07-08T08:09:28Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AppParamValueType.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.parosproxy.paros.core.scanner;\n+\n+/**\n+ * {@code AppParamValueType} represents the type of AppParameter's value. This is useful for the\n+ * use-cases like say there is a parameter which is a URL then caller can itself encode/escape it so\n+ * that it can be directly used to modify {@code HttpMessage} or {@code Variant} has to escape it.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public enum AppParamValueType {", "originalCommit": "40c38694d5ec0e2cd63bbb69cc7acc9772bc9998", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjE4MzgxMg==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r666183812", "bodyText": "ok, with the comment this also applies to name, you are suggesting for javadoc?", "author": "preetkaran20", "createdAt": "2021-07-08T13:17:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk2ODE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjE4ODg1MA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r666188850", "bodyText": "Was about the name of the enum (though JavaDoc should be updated accordingly), e.g. PayloadFormat?", "author": "thc202", "createdAt": "2021-07-08T13:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk2ODE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjE5MTkxOQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r666191919", "bodyText": "ok", "author": "preetkaran20", "createdAt": "2021-07-08T13:27:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk2ODE0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk2OTgzMQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r665969831", "bodyText": "AppParameter is misleading, not just about the target app. InputVector would be closer to what it is.", "author": "thc202", "createdAt": "2021-07-08T08:11:48Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AppParameter.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.parosproxy.paros.core.scanner;\n+\n+/**\n+ * {@code AppParameter} class wraps the parameters which are used to modify the {@code HttpMessage}.\n+ * It is specifically used for updating multiple parameters of {@code HttpMessage}\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class AppParameter {", "originalCommit": "40c38694d5ec0e2cd63bbb69cc7acc9772bc9998", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3MDAxMg==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r665970012", "bodyText": "I'm not sure this needs to be passed around, the variants will have them already (this just needs to provide the position).", "author": "thc202", "createdAt": "2021-07-08T08:12:03Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AppParameter.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.parosproxy.paros.core.scanner;\n+\n+/**\n+ * {@code AppParameter} class wraps the parameters which are used to modify the {@code HttpMessage}.\n+ * It is specifically used for updating multiple parameters of {@code HttpMessage}\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class AppParameter {\n+    private NameValuePair nameValuePair;\n+    private String param;\n+    private String value;\n+    private AppParamValueType appParamValueType;\n+\n+    AppParameter(\n+            NameValuePair nameValuePair,", "originalCommit": "40c38694d5ec0e2cd63bbb69cc7acc9772bc9998", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjE4OTcwOQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r666189709", "bodyText": "shouldn't we align with the existing APIs because for a single call we are passing NameValuePair? Also, I think there is no need for the caller to know these internal things?", "author": "preetkaran20", "createdAt": "2021-07-08T13:24:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3MDAxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjE5NjgxNA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r666196814", "bodyText": "The only user of the constructor is the builder and the consumers are the variants, for the builder it doesn't matter if it passes the position or the whole NameValuePair, the variants just need to know about the position.", "author": "thc202", "createdAt": "2021-07-08T13:32:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3MDAxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjIwMDk3MQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r666200971", "bodyText": "hmm right, i think same reason like getName api.", "author": "preetkaran20", "createdAt": "2021-07-08T13:37:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3MDAxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3MDA2MQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r665970061", "bodyText": "getName()", "author": "thc202", "createdAt": "2021-07-08T08:12:06Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AppParameter.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.parosproxy.paros.core.scanner;\n+\n+/**\n+ * {@code AppParameter} class wraps the parameters which are used to modify the {@code HttpMessage}.\n+ * It is specifically used for updating multiple parameters of {@code HttpMessage}\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class AppParameter {\n+    private NameValuePair nameValuePair;\n+    private String param;\n+    private String value;\n+    private AppParamValueType appParamValueType;\n+\n+    AppParameter(\n+            NameValuePair nameValuePair,\n+            String param,\n+            String value,\n+            AppParamValueType appParamValueType) {\n+        this.nameValuePair = nameValuePair;\n+        this.param = param;\n+        this.value = value;\n+        this.appParamValueType = appParamValueType;\n+    }\n+\n+    public NameValuePair getNameValuePair() {\n+        return nameValuePair;\n+    }\n+\n+    public String getParam() {", "originalCommit": "40c38694d5ec0e2cd63bbb69cc7acc9772bc9998", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjE4NTA5NQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r666185095", "bodyText": "I think that these method names should align with earlier Api's parameter names. Else it will confuse users. WDYT?", "author": "preetkaran20", "createdAt": "2021-07-08T13:19:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3MDA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjE5MTY2OA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r666191668", "bodyText": "The main consumers of this API would be the variants, which know about the name (NameValuePair#getName()).", "author": "thc202", "createdAt": "2021-07-08T13:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3MDA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjE5MzIyMg==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r666193222", "bodyText": "hmm right as a consumer will be using the builder. Make sense.", "author": "preetkaran20", "createdAt": "2021-07-08T13:28:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3MDA2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3MDc2OA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r665970768", "bodyText": "It should be possible to set the name/value separately.", "author": "thc202", "createdAt": "2021-07-08T08:13:11Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AppParametersBuilder.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package org.parosproxy.paros.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * {@code AppParametersBuilder} provides an easy way to build {@code AppParameters} and validates\n+ * the provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class AppParametersBuilder {\n+\n+    private List<AppParameter> appParameters = new ArrayList<>();\n+    private Set<Integer> nameValuePairPositions = new HashSet<>();\n+    private final Logger logger = LogManager.getLogger(this.getClass());\n+\n+    public AppParametersBuilder addAppParameter(", "originalCommit": "40c38694d5ec0e2cd63bbb69cc7acc9772bc9998", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjE4NzExMw==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r666187113", "bodyText": "Didn't get you, Can you please explain more?", "author": "preetkaran20", "createdAt": "2021-07-08T13:21:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3MDc2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjE5MjkxNg==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r666192916", "bodyText": "The name can be an input vector as well and should be possible to change it without changing the value.", "author": "thc202", "createdAt": "2021-07-08T13:28:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3MDc2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjE5NTE2OA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r666195168", "bodyText": "ok, so you are suggesting the addition of one more method with just name. Right?", "author": "preetkaran20", "createdAt": "2021-07-08T13:30:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3MDc2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjE5ODk4MQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r666198981", "bodyText": "Yeah, one method for the value and another for the name (I guess we could still provide this one for the cases both name/value are changed).", "author": "thc202", "createdAt": "2021-07-08T13:35:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3MDc2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3MTM1MA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r665971350", "bodyText": "The changes to this class should be reverted, the variant should adjust the position based on the data injected.", "author": "thc202", "createdAt": "2021-07-08T08:14:02Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/MultipartFormParameter.java", "diffHunk": "@@ -44,6 +44,16 @@ public MultipartFormParameter(\n         this.type = type;\n     }\n \n+    public MultipartFormParameter(MultipartFormParameter multipartFormParameter) {", "originalCommit": "40c38694d5ec0e2cd63bbb69cc7acc9772bc9998", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjE3NTk5NQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r666175995", "bodyText": "yeah sure.", "author": "preetkaran20", "createdAt": "2021-07-08T13:07:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3MTM1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3MTY1NQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r665971655", "bodyText": "Remove the public modifiers.", "author": "thc202", "createdAt": "2021-07-08T08:14:27Z", "path": "zap/src/test/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParametersUnitTest.java", "diffHunk": "@@ -228,7 +228,293 @@ void shouldInjectParamValueModificationInFileNameParam() {\n     }\n \n     @Test\n-    void shouldInjectParamValueModificationInFileContentTypeParam() {\n+    public void shouldInjectSmallerParamValueModificationInFileNameParam() {", "originalCommit": "40c38694d5ec0e2cd63bbb69cc7acc9772bc9998", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3OTI3OA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r665979278", "bodyText": "Should also provide a method that returns the builder and both methods should mention each other, to make it clear how the API is supposed to be used.", "author": "thc202", "createdAt": "2021-07-08T08:24:48Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractAppParamPlugin.java", "diffHunk": "@@ -218,4 +219,15 @@ protected String setParameter(HttpMessage message, String param, String value) {\n     protected String setEscapedParameter(HttpMessage message, String param, String value) {\n         return variant.setEscapedParameter(message, originalPair, param, value);\n     }\n+\n+    /**\n+     * Sets the parameters into the given {@code message}.\n+     *\n+     * @param message the message that will be changed\n+     * @param appParams list of the parameters\n+     * @return the parameter values which are added to the HttpMesage\n+     */\n+    protected List<String> setParameters(HttpMessage message, List<AppParameter> appParams) {", "originalCommit": "40c38694d5ec0e2cd63bbb69cc7acc9772bc9998", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjE4MjIwMg==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r666182202", "bodyText": "ok, mention meaning java doc mention?", "author": "preetkaran20", "createdAt": "2021-07-08T13:15:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3OTI3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjE4MzU4OQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r666183589", "bodyText": "Right.", "author": "thc202", "createdAt": "2021-07-08T13:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3OTI3OA=="}], "type": "inlineReview"}, {"oid": "298abbfa7c5798f68c26c83086ee142bf7aff09b", "url": "https://github.com/zaproxy/zaproxy/commit/298abbfa7c5798f68c26c83086ee142bf7aff09b", "message": "Incorporating review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>", "committedDate": "2021-07-08T14:43:48Z", "type": "forcePushed"}, {"oid": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a", "url": "https://github.com/zaproxy/zaproxy/commit/d2e9018130d9a1dff22ecf4fd7de1f00c76b947a", "message": "Small Fix\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>", "committedDate": "2021-07-08T15:34:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU0OTE0MA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668549140", "bodyText": "Please, suppress the incompatibility instead.", "author": "thc202", "createdAt": "2021-07-13T08:35:55Z", "path": "zap/zap.gradle.kts", "diffHunk": "@@ -163,6 +164,7 @@ val japicmp by tasks.registering(JapicmpTask::class) {\n         reportName = \"japi.html\"\n         isAddDefaultRules = true\n         addRule(JApiChangeStatus.MODIFIED, AcceptMethodAbstractNowDefaultRule::class.java)\n+        addRule(JApiChangeStatus.MODIFIED, AcceptMethodNewDefaultRule::class.java)", "originalCommit": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODYyNjEyNg==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668626126", "bodyText": "didn't get you, can you please elaborate?", "author": "preetkaran20", "createdAt": "2021-07-13T10:14:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU0OTE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODY3ODE4OA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668678188", "bodyText": "got it, please review now.", "author": "preetkaran20", "createdAt": "2021-07-13T11:34:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU0OTE0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MTIzNQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668551235", "bodyText": "It just needs to keep the offset and sum to existing positions. No need to copy the parameters again.", "author": "thc202", "createdAt": "2021-07-13T08:38:28Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java", "diffHunk": "@@ -209,33 +212,78 @@ public void setMessage(HttpMessage msg) {\n     @Override\n     public String setParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));\n     }\n \n     @Override\n     public String setEscapedParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));\n     }\n \n-    private String setParameter(HttpMessage msg, NameValuePair originalPair, String value) {\n+    @Override\n+    public void setParameters(HttpMessage msg, List<InputVector> inputVectors) {\n+        this.setParameter(\n+                msg,\n+                inputVectors.stream()\n+                        .map(inputVector -> inputVector.getPosition())\n+                        .collect(Collectors.toList()),\n+                inputVectors.stream()\n+                        .map(inputVector -> inputVector.getValue())\n+                        .collect(Collectors.toList()));\n+    };\n \n+    private String setParameter(\n+            HttpMessage msg, List<Integer> nameValuePairPositions, List<String> values) {\n         StringBuilder newBodyBuilder = new StringBuilder(msg.getRequestBody().toString());\n-        int idx = originalPair.getPosition() - 1;\n-        MultipartFormParameter mpPart = multiPartParams.get(idx);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\n-                    \"i: \"\n-                            + idx\n-                            + \" pos: \"\n-                            + originalPair.getPosition()\n-                            + \" S: \"\n-                            + mpPart.getStart()\n-                            + \" E: \"\n-                            + mpPart.getEnd());\n-        }\n-        newBodyBuilder.replace(mpPart.getStart(), mpPart.getEnd(), value);\n+        List<MultipartFormParameter> multiPartParamsClone =\n+                new ArrayList<MultipartFormParameter>(this.multiPartParams);\n+        for (int index = 0; index < nameValuePairPositions.size(); index++) {\n+            int originalPosition = nameValuePairPositions.get(index);\n+            String value = values.get(index);\n+            int idx = originalPosition - 1;\n \n+            MultipartFormParameter mpPart = multiPartParamsClone.get(idx);\n+            if (LOGGER.isDebugEnabled()) {\n+                LOGGER.debug(\n+                        \"i: \"\n+                                + idx\n+                                + \" pos: \"\n+                                + originalPosition\n+                                + \" S: \"\n+                                + mpPart.getStart()\n+                                + \" E: \"\n+                                + mpPart.getEnd());\n+            }\n+            newBodyBuilder.replace(mpPart.getStart(), mpPart.getEnd(), value);\n+            int originalStart = mpPart.getStart();\n+            int offset = value.length() - mpPart.getEnd() + mpPart.getStart();\n+            mpPart =\n+                    new MultipartFormParameter(\n+                            mpPart.getName(),\n+                            mpPart.getValue(),\n+                            originalStart,\n+                            mpPart.getEnd() + offset,\n+                            mpPart.getPosition(),\n+                            mpPart.getType());\n+            multiPartParamsClone.set(idx, mpPart);\n+            // As we have updated one value and this can impact other multipart params\n+            // Hence this logic is to update the other multipart params", "originalCommit": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODYyNzkxMw==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668627913", "bodyText": "in the for loop? actually, the setter changes are reverted because of earlier review comments. Hence i cannot set the values inside the multipartformparameter hence need to create a new instance with newer values.", "author": "preetkaran20", "createdAt": "2021-07-13T10:17:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MTIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODY1MTQyOQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668651429", "bodyText": "can you please elaborate?", "author": "preetkaran20", "createdAt": "2021-07-13T10:52:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MTIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc2OTExNg==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668769116", "bodyText": "Calculate the difference of the values injected to the ones already present then you can just offset (i.e. sum) the start/end of the following parameters when replacing.", "author": "thc202", "createdAt": "2021-07-13T13:34:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MTIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODgwNDYyNw==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668804627", "bodyText": "but to do that we don't have setters, we need to create again the object.\nI think we should add the setters as that will make it easier to modify the values.", "author": "preetkaran20", "createdAt": "2021-07-13T14:13:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MTIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODg1NDI2NA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668854264", "bodyText": "@thc202 can you please help with this.", "author": "preetkaran20", "createdAt": "2021-07-13T15:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MTIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODg2ODU3OQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668868579", "bodyText": "are you suggesting to add a Map of position vs offset? in the start i will have offset as 0 then once i start modifying, i find the offset in the map and then while replacing use the offset.\ncannot we create a setter with package private visibility?", "author": "preetkaran20", "createdAt": "2021-07-13T15:20:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MTIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODg4NTgwMQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668885801", "bodyText": "I tried map thing and it is making the logic complex. we can easily do this with setters. @thc202", "author": "preetkaran20", "createdAt": "2021-07-13T15:39:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MTIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODkyNTM4MA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668925380", "bodyText": "It just needs an int for the offset, I'll get to you later.", "author": "thc202", "createdAt": "2021-07-13T16:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MTIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTQ4MzkzMw==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r669483933", "bodyText": "This will need #6690.", "author": "thc202", "createdAt": "2021-07-14T10:21:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MTIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY0NzMyMQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r669647321", "bodyText": "With the changes in place this can now be:\n-        List<MultipartFormParameter> multiPartParamsClone =\n-                new ArrayList<MultipartFormParameter>(this.multiPartParams);\n+        int offset = 0;\n         for (int index = 0; index < nameValuePairPositions.size(); index++) {\n             int originalPosition = nameValuePairPositions.get(index);\n             String value = values.get(index);\n             int idx = originalPosition - 1;\n \n-            MultipartFormParameter mpPart = multiPartParamsClone.get(idx);\n+            MultipartFormParameter mpPart = multiPartParams.get(idx);\n             if (LOGGER.isDebugEnabled()) {\n                 LOGGER.debug(\n                         \"i: \"\n@@ -268,34 +269,8 @@ public class VariantMultipartFormParameters implements Variant {\n                                 + \" E: \"\n                                 + mpPart.getEnd());\n             }\n-            newBodyBuilder.replace(mpPart.getStart(), mpPart.getEnd(), value);\n-            int originalStart = mpPart.getStart();\n-            int offset = value.length() - mpPart.getEnd() + mpPart.getStart();\n-            mpPart =\n-                    new MultipartFormParameter(\n-                            mpPart.getName(),\n-                            mpPart.getValue(),\n-                            originalStart,\n-                            mpPart.getEnd() + offset,\n-                            mpPart.getPosition(),\n-                            mpPart.getType());\n-            multiPartParamsClone.set(idx, mpPart);\n-            // As we have updated one value and this can impact other multipart params\n-            // Hence this logic is to update the other multipart params\n-            for (idx = 0; idx < multiPartParamsClone.size(); idx++) {\n-                mpPart = multiPartParamsClone.get(idx);\n-                if (mpPart.getStart() > originalStart) {\n-                    mpPart =\n-                            new MultipartFormParameter(\n-                                    mpPart.getName(),\n-                                    mpPart.getValue(),\n-                                    mpPart.getStart() + offset,\n-                                    mpPart.getEnd() + offset,\n-                                    mpPart.getPosition(),\n-                                    mpPart.getType());\n-                    multiPartParamsClone.set(idx, mpPart);\n-                }\n-            }\n+            newBodyBuilder.replace(mpPart.getStart() + offset, mpPart.getEnd() + offset, value);\n+            offset += value.length() - (mpPart.getEnd() - mpPart.getStart());", "author": "thc202", "createdAt": "2021-07-14T14:05:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MTIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY1MDE1Nw==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r669650157", "bodyText": "Note that some tests will need to update the position of the NameValuePairs.", "author": "thc202", "createdAt": "2021-07-14T14:08:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MTIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTA2MDAxNg==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r671060016", "bodyText": "This one was not addressed yet.", "author": "thc202", "createdAt": "2021-07-16T08:21:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MTIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTEzOTY0NQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r671139645", "bodyText": "Oh missed your comment. Will address", "author": "preetkaran20", "createdAt": "2021-07-16T10:27:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MTIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTE1ODc5OQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r671158799", "bodyText": "I think this code is working because of sorting by position. Actually, I didn't do this earlier and used ArrayList to store the offset because of the unordering thing.", "author": "preetkaran20", "createdAt": "2021-07-16T11:03:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MTIzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MTYwNw==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668551607", "bodyText": "final", "author": "thc202", "createdAt": "2021-07-13T08:39:00Z", "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVector.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+/**\n+ * {@code InputVector} class wraps the parameters which are used to modify the {@code HttpMessage}.\n+ * It is specifically used for updating multiple parameters of {@code HttpMessage}\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVector {\n+    private int position;\n+    private String name;\n+    private String value;\n+    private PayloadFormat payloadFormat;", "originalCommit": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1Mjc2MA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668552760", "bodyText": "represents the format of the payload.", "author": "thc202", "createdAt": "2021-07-13T08:40:17Z", "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVector.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+/**\n+ * {@code InputVector} class wraps the parameters which are used to modify the {@code HttpMessage}.\n+ * It is specifically used for updating multiple parameters of {@code HttpMessage}\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVector {\n+    private int position;\n+    private String name;\n+    private String value;\n+    private PayloadFormat payloadFormat;\n+\n+    InputVector(int position, String name, String value, PayloadFormat payloadFormat) {\n+        this.position = position;\n+        this.name = name;\n+        this.value = value;\n+        this.payloadFormat = payloadFormat;\n+    }\n+\n+    public int getPosition() {\n+        return position;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public PayloadFormat getPayloadFormat() {\n+        return payloadFormat;\n+    }\n+\n+    /**\n+     * {@code PayloadFormat} represents the type of InputVectors's name and value. This is useful", "originalCommit": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MzE2OQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668553169", "bodyText": "Remove static.\nNormally this would be declared above, before the instance variables.", "author": "thc202", "createdAt": "2021-07-13T08:40:48Z", "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVector.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+/**\n+ * {@code InputVector} class wraps the parameters which are used to modify the {@code HttpMessage}.\n+ * It is specifically used for updating multiple parameters of {@code HttpMessage}\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVector {\n+    private int position;\n+    private String name;\n+    private String value;\n+    private PayloadFormat payloadFormat;\n+\n+    InputVector(int position, String name, String value, PayloadFormat payloadFormat) {\n+        this.position = position;\n+        this.name = name;\n+        this.value = value;\n+        this.payloadFormat = payloadFormat;\n+    }\n+\n+    public int getPosition() {\n+        return position;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public PayloadFormat getPayloadFormat() {\n+        return payloadFormat;\n+    }\n+\n+    /**\n+     * {@code PayloadFormat} represents the type of InputVectors's name and value. This is useful\n+     * for the use-cases like say there is a parameter which is a URL then caller can itself\n+     * encode/escape it so that it can be directly used to modify {@code HttpMessage} or {@code\n+     * Variant} has to escape it.\n+     */\n+    public static enum PayloadFormat {", "originalCommit": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODYzNTIzNA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668635234", "bodyText": "thanks for mentioning this. I was unaware that the nested enums are imlicitly static.", "author": "preetkaran20", "createdAt": "2021-07-13T10:27:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MzE2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MzU1NQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668553555", "bodyText": "setNameAndValue", "author": "thc202", "createdAt": "2021-07-13T08:41:19Z", "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVectorBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.parosproxy.paros.core.scanner.NameValuePair;\n+import org.zaproxy.zap.core.scanner.InputVector.PayloadFormat;\n+\n+/**\n+ * {@code InputVectorBuilder} provides an easy way to build {@code InputVectors} and validates the\n+ * provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVectorBuilder {\n+\n+    private Map<Integer, InputVector> inputVectorsMap = new HashMap<>();\n+\n+    public InputVectorBuilder addAppParameter(", "originalCommit": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MzU3OA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668553578", "bodyText": "setValue", "author": "thc202", "createdAt": "2021-07-13T08:41:21Z", "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVectorBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.parosproxy.paros.core.scanner.NameValuePair;\n+import org.zaproxy.zap.core.scanner.InputVector.PayloadFormat;\n+\n+/**\n+ * {@code InputVectorBuilder} provides an easy way to build {@code InputVectors} and validates the\n+ * provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVectorBuilder {\n+\n+    private Map<Integer, InputVector> inputVectorsMap = new HashMap<>();\n+\n+    public InputVectorBuilder addAppParameter(\n+            NameValuePair nameValuePair, String param, String value, PayloadFormat payloadFormat) {\n+        inputVectorsMap.put(\n+                nameValuePair.getPosition(),\n+                new InputVector(nameValuePair.getPosition(), param, value, payloadFormat));\n+        return this;\n+    }\n+\n+    public InputVectorBuilder addAppParameterWithoutParam(", "originalCommit": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MzcxNw==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668553717", "bodyText": "setName", "author": "thc202", "createdAt": "2021-07-13T08:41:32Z", "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVectorBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.parosproxy.paros.core.scanner.NameValuePair;\n+import org.zaproxy.zap.core.scanner.InputVector.PayloadFormat;\n+\n+/**\n+ * {@code InputVectorBuilder} provides an easy way to build {@code InputVectors} and validates the\n+ * provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVectorBuilder {\n+\n+    private Map<Integer, InputVector> inputVectorsMap = new HashMap<>();\n+\n+    public InputVectorBuilder addAppParameter(\n+            NameValuePair nameValuePair, String param, String value, PayloadFormat payloadFormat) {\n+        inputVectorsMap.put(\n+                nameValuePair.getPosition(),\n+                new InputVector(nameValuePair.getPosition(), param, value, payloadFormat));\n+        return this;\n+    }\n+\n+    public InputVectorBuilder addAppParameterWithoutParam(\n+            NameValuePair nameValuePair, String value, PayloadFormat payloadFormat) {\n+        return this.addAppParameter(nameValuePair, null, value, payloadFormat);\n+    }\n+\n+    public InputVectorBuilder addAppParameterWithoutValue(", "originalCommit": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1NDg3OQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668554879", "bodyText": "null has special meaning (e.g. remove the IV), it should use the original values of the NameValuePair.", "author": "thc202", "createdAt": "2021-07-13T08:43:00Z", "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVectorBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.parosproxy.paros.core.scanner.NameValuePair;\n+import org.zaproxy.zap.core.scanner.InputVector.PayloadFormat;\n+\n+/**\n+ * {@code InputVectorBuilder} provides an easy way to build {@code InputVectors} and validates the\n+ * provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVectorBuilder {\n+\n+    private Map<Integer, InputVector> inputVectorsMap = new HashMap<>();\n+\n+    public InputVectorBuilder addAppParameter(\n+            NameValuePair nameValuePair, String param, String value, PayloadFormat payloadFormat) {\n+        inputVectorsMap.put(\n+                nameValuePair.getPosition(),\n+                new InputVector(nameValuePair.getPosition(), param, value, payloadFormat));\n+        return this;\n+    }\n+\n+    public InputVectorBuilder addAppParameterWithoutParam(\n+            NameValuePair nameValuePair, String value, PayloadFormat payloadFormat) {\n+        return this.addAppParameter(nameValuePair, null, value, payloadFormat);", "originalCommit": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1NTgzOA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668555838", "bodyText": "If it's creating a new list it does not need to return an unmodifiable one.", "author": "thc202", "createdAt": "2021-07-13T08:44:12Z", "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVectorBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.parosproxy.paros.core.scanner.NameValuePair;\n+import org.zaproxy.zap.core.scanner.InputVector.PayloadFormat;\n+\n+/**\n+ * {@code InputVectorBuilder} provides an easy way to build {@code InputVectors} and validates the\n+ * provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVectorBuilder {\n+\n+    private Map<Integer, InputVector> inputVectorsMap = new HashMap<>();\n+\n+    public InputVectorBuilder addAppParameter(\n+            NameValuePair nameValuePair, String param, String value, PayloadFormat payloadFormat) {\n+        inputVectorsMap.put(\n+                nameValuePair.getPosition(),\n+                new InputVector(nameValuePair.getPosition(), param, value, payloadFormat));\n+        return this;\n+    }\n+\n+    public InputVectorBuilder addAppParameterWithoutParam(\n+            NameValuePair nameValuePair, String value, PayloadFormat payloadFormat) {\n+        return this.addAppParameter(nameValuePair, null, value, payloadFormat);\n+    }\n+\n+    public InputVectorBuilder addAppParameterWithoutValue(\n+            NameValuePair nameValuePair, String param, PayloadFormat payloadFormat) {\n+        return this.addAppParameter(nameValuePair, param, null, payloadFormat);\n+    }\n+\n+    public List<InputVector> build() {\n+        return Collections.unmodifiableList(new ArrayList<>(inputVectorsMap.values()));", "originalCommit": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODYzNTgyOQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668635829", "bodyText": "yeah .... should not have done this mistake. thanks", "author": "preetkaran20", "createdAt": "2021-07-13T10:28:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1NTgzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1Njc1NA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668556754", "bodyText": "Add a see to the other method.", "author": "thc202", "createdAt": "2021-07-13T08:45:19Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractAppParamPlugin.java", "diffHunk": "@@ -218,4 +221,20 @@ protected String setParameter(HttpMessage message, String param, String value) {\n     protected String setEscapedParameter(HttpMessage message, String param, String value) {\n         return variant.setEscapedParameter(message, originalPair, param, value);\n     }\n+\n+    /** @return {@code InputVectorBuilder} which is used to build the {@code InputVector} */", "originalCommit": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU2NTM1OA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668565358", "bodyText": "It needs to have the format for name and value, since they can be set raw/escaped separately.", "author": "thc202", "createdAt": "2021-07-13T08:55:57Z", "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVector.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+/**\n+ * {@code InputVector} class wraps the parameters which are used to modify the {@code HttpMessage}.\n+ * It is specifically used for updating multiple parameters of {@code HttpMessage}\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVector {\n+    private int position;\n+    private String name;\n+    private String value;\n+    private PayloadFormat payloadFormat;", "originalCommit": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODY0MTgwNA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668641804", "bodyText": "so are you suggesting to have 2 payloadformat parameters?", "author": "preetkaran20", "createdAt": "2021-07-13T10:37:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU2NTM1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU2NzA0NA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668567044", "bodyText": "Worth noting/doc the caveat that calling these methods replaces the IV (so previous changes are lost).", "author": "thc202", "createdAt": "2021-07-13T08:58:04Z", "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVectorBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.parosproxy.paros.core.scanner.NameValuePair;\n+import org.zaproxy.zap.core.scanner.InputVector.PayloadFormat;\n+\n+/**\n+ * {@code InputVectorBuilder} provides an easy way to build {@code InputVectors} and validates the\n+ * provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVectorBuilder {\n+\n+    private Map<Integer, InputVector> inputVectorsMap = new HashMap<>();\n+\n+    public InputVectorBuilder addAppParameter(", "originalCommit": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d6e51ba3edd7d507fc9bb6d4e805187490575a34", "url": "https://github.com/zaproxy/zaproxy/commit/d6e51ba3edd7d507fc9bb6d4e805187490575a34", "message": "addressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>", "committedDate": "2021-07-13T10:58:04Z", "type": "forcePushed"}, {"oid": "9a36e9c2cf8153d923b3c43b6f0494bd7177fb09", "url": "https://github.com/zaproxy/zaproxy/commit/9a36e9c2cf8153d923b3c43b6f0494bd7177fb09", "message": "Correcting javadoc\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nAddressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nIncorporating review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nSmall Fix\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\naddressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>", "committedDate": "2021-07-13T11:10:23Z", "type": "forcePushed"}, {"oid": "f53102591d4f2424086c45c897ff1e858f7b8657", "url": "https://github.com/zaproxy/zaproxy/commit/f53102591d4f2424086c45c897ff1e858f7b8657", "message": "Small fix\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>", "committedDate": "2021-07-13T11:41:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3NDMwOQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668774309", "bodyText": "Since you added a link the see is not needed.", "author": "thc202", "createdAt": "2021-07-13T13:40:35Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractAppParamPlugin.java", "diffHunk": "@@ -218,4 +221,24 @@ protected String setParameter(HttpMessage message, String param, String value) {\n     protected String setEscapedParameter(HttpMessage message, String param, String value) {\n         return variant.setEscapedParameter(message, originalPair, param, value);\n     }\n+\n+    /**\n+     * @return {@code InputVectorBuilder} which is used to build the {@code InputVector} which is\n+     *     used by {@link #setParameters(HttpMessage, List)}\n+     * @see #setParameters(HttpMessage, List)", "originalCommit": "f53102591d4f2424086c45c897ff1e858f7b8657", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3NTA4OQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668775089", "bodyText": "Add since tag, same for the new methods in the implementation.\nappParams needs to be renamed.", "author": "thc202", "createdAt": "2021-07-13T13:41:30Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/Variant.java", "diffHunk": "@@ -47,6 +48,14 @@ public String setParameter(\n     public String setEscapedParameter(\n             HttpMessage msg, NameValuePair originalPair, String param, String value);\n \n+    /**\n+     * Sets the parameters into the given {@code message}.\n+     *\n+     * @param message the message that will be changed\n+     * @param appParams list of name of the parameter\n+     */\n+    default void setParameters(HttpMessage message, List<InputVector> appParams) {};", "originalCommit": "f53102591d4f2424086c45c897ff1e858f7b8657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc5OTczNQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668799735", "bodyText": "but every other method is set*.  Also why addParams not addParameters when we have named them parameters in other method.", "author": "preetkaran20", "createdAt": "2021-07-13T14:08:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3NTA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODgwMDYzNw==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668800637", "bodyText": "will add since tag", "author": "preetkaran20", "createdAt": "2021-07-13T14:09:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3NTA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODgwMTIzMg==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668801232", "bodyText": "Sorry, is that referring to which comment?", "author": "thc202", "createdAt": "2021-07-13T14:10:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3NTA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODgwMzQ1MA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668803450", "bodyText": "Ok, I see the edit, as mentioned earlier they might not be \"app\" parameters. (I'm talking about the name of the method parameter not the method itself.)", "author": "thc202", "createdAt": "2021-07-13T14:12:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3NTA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODgxNDIzNA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668814234", "bodyText": "oh sorry for the confusion.", "author": "preetkaran20", "createdAt": "2021-07-13T14:23:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3NTA4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3NjEyMA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668776120", "bodyText": "Move up to keep it closer to the variable that it applies to (same in other places, e.g. parameters).", "author": "thc202", "createdAt": "2021-07-13T13:42:43Z", "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVector.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+/**\n+ * {@code InputVector} class wraps the parameters which are used to modify the {@code HttpMessage}.\n+ * It is specifically used for updating multiple parameters of {@code HttpMessage}\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVector {\n+\n+    /**\n+     * {@code PayloadFormat} represents the format of the payload. This is useful for the use-cases\n+     * like say there is a parameter which is a URL then caller can itself encode/escape it so that\n+     * it can be directly used to modify {@code HttpMessage} or {@code Variant} has to escape it.\n+     */\n+    public enum PayloadFormat {\n+        REQUIRES_ESCAPING,\n+        ALREADY_ESCAPED\n+    }\n+\n+    private final int position;\n+    private final String name;\n+    private final String value;\n+    private final PayloadFormat namePayloadFormat;", "originalCommit": "f53102591d4f2424086c45c897ff1e858f7b8657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODgwNTE3Mg==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668805172", "bodyText": "oh ok", "author": "preetkaran20", "createdAt": "2021-07-13T14:14:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3NjEyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTA1ODkxOQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r671058919", "bodyText": "Parameters and methods should be updated accordingly for consistency.", "author": "thc202", "createdAt": "2021-07-16T08:19:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3NjEyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTE1MDI2OA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r671150268", "bodyText": "sure", "author": "preetkaran20", "createdAt": "2021-07-16T10:47:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3NjEyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3Njg4Mw==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668776883", "bodyText": "This applies to all three methods.", "author": "thc202", "createdAt": "2021-07-13T13:43:33Z", "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVectorBuilder.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.parosproxy.paros.core.scanner.NameValuePair;\n+import org.zaproxy.zap.core.scanner.InputVector.PayloadFormat;\n+\n+/**\n+ * {@code InputVectorBuilder} provides an easy way to build {@code InputVectors} and validates the\n+ * provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVectorBuilder {\n+\n+    private Map<Integer, InputVector> inputVectorsMap = new HashMap<>();\n+\n+    /**\n+     * Note: calling this method with same NameValuePair will overwrite the earlier name and value", "originalCommit": "f53102591d4f2424086c45c897ff1e858f7b8657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODgwNTU4NA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668805584", "bodyText": "already added in all three.", "author": "preetkaran20", "createdAt": "2021-07-13T14:14:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3Njg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODg0MzM0Nw==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668843347", "bodyText": "I meant it should be this description for all three, in all cases the name/value is replaced.", "author": "thc202", "createdAt": "2021-07-13T14:53:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3Njg4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3NzI5Ng==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668777296", "bodyText": "payloadFormat", "author": "thc202", "createdAt": "2021-07-13T13:44:01Z", "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVectorBuilder.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.parosproxy.paros.core.scanner.NameValuePair;\n+import org.zaproxy.zap.core.scanner.InputVector.PayloadFormat;\n+\n+/**\n+ * {@code InputVectorBuilder} provides an easy way to build {@code InputVectors} and validates the\n+ * provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVectorBuilder {\n+\n+    private Map<Integer, InputVector> inputVectorsMap = new HashMap<>();\n+\n+    /**\n+     * Note: calling this method with same NameValuePair will overwrite the earlier name and value\n+     * with the newer one.\n+     *\n+     * @param nameValuePair\n+     * @param param\n+     * @param value\n+     * @param namePayloadFormat\n+     * @param valuePayloadFormat\n+     * @return {@code InputVectorBuilder}\n+     */\n+    public InputVectorBuilder setNameAndValue(\n+            NameValuePair nameValuePair,\n+            String param,\n+            String value,\n+            PayloadFormat namePayloadFormat,\n+            PayloadFormat valuePayloadFormat) {\n+        inputVectorsMap.put(\n+                nameValuePair.getPosition(),\n+                new InputVector(\n+                        nameValuePair.getPosition(),\n+                        param,\n+                        value,\n+                        namePayloadFormat,\n+                        valuePayloadFormat));\n+        return this;\n+    }\n+\n+    /**\n+     * Note: calling this method with same NameValuePair will overwrite the earlier value with the\n+     * newer one.\n+     *\n+     * @param nameValuePair\n+     * @param value\n+     * @param valuePayloadFormat\n+     * @return {@code InputVectorBuilder}\n+     */\n+    public InputVectorBuilder setValue(\n+            NameValuePair nameValuePair, String value, PayloadFormat valuePayloadFormat) {", "originalCommit": "f53102591d4f2424086c45c897ff1e858f7b8657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODgwNTkxNg==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668805916", "bodyText": "ok will change the variable name", "author": "preetkaran20", "createdAt": "2021-07-13T14:14:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3NzI5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODg0MzY3NA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668843674", "bodyText": "Same for the name method.", "author": "thc202", "createdAt": "2021-07-13T14:53:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3NzI5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3ODE3OQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668778179", "bodyText": "This needs to be reviewed, I think some of the variants create the NameValuePairs with unescaped name/value.", "author": "thc202", "createdAt": "2021-07-13T13:45:03Z", "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVectorBuilder.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.parosproxy.paros.core.scanner.NameValuePair;\n+import org.zaproxy.zap.core.scanner.InputVector.PayloadFormat;\n+\n+/**\n+ * {@code InputVectorBuilder} provides an easy way to build {@code InputVectors} and validates the\n+ * provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVectorBuilder {\n+\n+    private Map<Integer, InputVector> inputVectorsMap = new HashMap<>();\n+\n+    /**\n+     * Note: calling this method with same NameValuePair will overwrite the earlier name and value\n+     * with the newer one.\n+     *\n+     * @param nameValuePair\n+     * @param param\n+     * @param value\n+     * @param namePayloadFormat\n+     * @param valuePayloadFormat\n+     * @return {@code InputVectorBuilder}\n+     */\n+    public InputVectorBuilder setNameAndValue(\n+            NameValuePair nameValuePair,\n+            String param,\n+            String value,\n+            PayloadFormat namePayloadFormat,\n+            PayloadFormat valuePayloadFormat) {\n+        inputVectorsMap.put(\n+                nameValuePair.getPosition(),\n+                new InputVector(\n+                        nameValuePair.getPosition(),\n+                        param,\n+                        value,\n+                        namePayloadFormat,\n+                        valuePayloadFormat));\n+        return this;\n+    }\n+\n+    /**\n+     * Note: calling this method with same NameValuePair will overwrite the earlier value with the\n+     * newer one.\n+     *\n+     * @param nameValuePair\n+     * @param value\n+     * @param valuePayloadFormat\n+     * @return {@code InputVectorBuilder}\n+     */\n+    public InputVectorBuilder setValue(\n+            NameValuePair nameValuePair, String value, PayloadFormat valuePayloadFormat) {\n+        return this.setNameAndValue(\n+                nameValuePair,\n+                nameValuePair.getName(),\n+                value,\n+                PayloadFormat.ALREADY_ESCAPED,", "originalCommit": "f53102591d4f2424086c45c897ff1e858f7b8657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODgwNjg4OA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668806888", "bodyText": "Does it matters? I think we can go with AlreadyEscaped parameter as default as this Api is not used till now.", "author": "preetkaran20", "createdAt": "2021-07-13T14:15:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3ODE3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODg0NDU5OQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668844599", "bodyText": "It does because it might change the meaning of the name/value, but not a \"blocker\" (we can tweak as needed later).", "author": "thc202", "createdAt": "2021-07-13T14:54:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3ODE3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3ODU2Nw==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668778567", "bodyText": "I'd expect this to be in the method excludes.", "author": "thc202", "createdAt": "2021-07-13T13:45:31Z", "path": "zap/zap.gradle.kts", "diffHunk": "@@ -154,7 +154,8 @@ val japicmp by tasks.registering(JapicmpTask::class) {\n     fieldExcludes = listOf()\n \n     classExcludes = listOf(\n-        \"org.zaproxy.zap.extension.custompages.ContextCustomPagePanel\\$CustomPagesMultipleOptionsPanel\")\n+        \"org.zaproxy.zap.extension.custompages.ContextCustomPagePanel\\$CustomPagesMultipleOptionsPanel\",\n+        \"org.parosproxy.paros.core.scanner.Variant#setParameters(HttpMessage, List)\")", "originalCommit": "f53102591d4f2424086c45c897ff1e858f7b8657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODgzMjQzMQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668832431", "bodyText": "I am not able to exclude this method with following string: org.parosproxy.paros.core.scanner.Variant#setParameters(org.parosproxy.paros.network.HttpMessage,java.util.List)\ncan you please help with this?", "author": "preetkaran20", "createdAt": "2021-07-13T14:42:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3ODU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODg0OTcxNA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668849714", "bodyText": "got it.please ignore.", "author": "preetkaran20", "createdAt": "2021-07-13T14:59:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3ODU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODg2NDY0OQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668864649", "bodyText": "There's a classpath issue that prevents the check from working when added to the method excludes, add just the class. Not worth keeping this waiting for that.", "author": "thc202", "createdAt": "2021-07-13T15:15:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3ODU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODg2OTc0Mg==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668869742", "bodyText": "I fixed it for now.", "author": "preetkaran20", "createdAt": "2021-07-13T15:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3ODU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODg4Mzk0Nw==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668883947", "bodyText": "It's preferable not to add that in this PR, it might break other plugins.", "author": "thc202", "createdAt": "2021-07-13T15:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3ODU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODg5MTQzNQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668891435", "bodyText": "oh ... ok", "author": "preetkaran20", "createdAt": "2021-07-13T15:46:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3ODU2Nw=="}], "type": "inlineReview"}, {"oid": "a7af7fc15fbbbc8ea1007c7b875a5260de934388", "url": "https://github.com/zaproxy/zaproxy/commit/a7af7fc15fbbbc8ea1007c7b875a5260de934388", "message": "Addressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>", "committedDate": "2021-07-13T15:07:51Z", "type": "forcePushed"}, {"oid": "1f07ac3777ec2c04ce52e03327cd2b5fa4265a9b", "url": "https://github.com/zaproxy/zaproxy/commit/1f07ac3777ec2c04ce52e03327cd2b5fa4265a9b", "message": "Addressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nSmall fix\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>", "committedDate": "2021-07-13T15:08:42Z", "type": "forcePushed"}, {"oid": "9f225fee8832c433c08326146f0be9e4383a681e", "url": "https://github.com/zaproxy/zaproxy/commit/9f225fee8832c433c08326146f0be9e4383a681e", "message": "Addressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nSmall fix\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nUpdate VariantMultipartFormParameters.java", "committedDate": "2021-07-13T15:12:38Z", "type": "forcePushed"}, {"oid": "f210682330ef4ae60e53d3700524a26edfcee482", "url": "https://github.com/zaproxy/zaproxy/commit/f210682330ef4ae60e53d3700524a26edfcee482", "message": "Addressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nSmall fix\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nUpdate VariantMultipartFormParameters.java\n\nLGTM fix", "committedDate": "2021-07-13T15:43:28Z", "type": "forcePushed"}, {"oid": "07ddd9549712b98929bf2a6e73dadb445321702b", "url": "https://github.com/zaproxy/zaproxy/commit/07ddd9549712b98929bf2a6e73dadb445321702b", "message": "Addressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nSmall fix\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nUpdate VariantMultipartFormParameters.java\n\nLGTM fix\n\nAddressing review comments", "committedDate": "2021-07-13T15:49:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODkwMDIzNg==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668900236", "bodyText": "Can be 2.11.0, the methods added in AbstractAppParamPlugin should have the tag as well. Also worth adding to the new classes.", "author": "thc202", "createdAt": "2021-07-13T15:56:23Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/Variant.java", "diffHunk": "@@ -47,6 +48,15 @@ public String setParameter(\n     public String setEscapedParameter(\n             HttpMessage msg, NameValuePair originalPair, String param, String value);\n \n+    /**\n+     * Sets the parameters into the given {@code message}.\n+     *\n+     * @param message the message that will be changed\n+     * @param inputVectors list of name of the parameter\n+     * @since TODO add version\n+     */\n+    default void setParameters(HttpMessage message, List<InputVector> inputVectors) {};", "originalCommit": "07ddd9549712b98929bf2a6e73dadb445321702b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODkwMjM1OQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668902359", "bodyText": "ok", "author": "preetkaran20", "createdAt": "2021-07-13T15:59:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODkwMDIzNg=="}], "type": "inlineReview"}, {"oid": "e5b0abf6ba09dad2beee4c861e9ae1b8a42dcf63", "url": "https://github.com/zaproxy/zaproxy/commit/e5b0abf6ba09dad2beee4c861e9ae1b8a42dcf63", "message": "Adding since tag\n\nAddressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nSmall fix\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nUpdate VariantMultipartFormParameters.java\n\nLGTM fix\n\nAddressing review comments", "committedDate": "2021-07-13T16:12:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODkyNTAwMg==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668925002", "bodyText": "Needs update.", "author": "thc202", "createdAt": "2021-07-13T16:26:43Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java", "diffHunk": "@@ -209,33 +212,85 @@ public void setMessage(HttpMessage msg) {\n     @Override\n     public String setParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));\n     }\n \n     @Override\n     public String setEscapedParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));\n     }\n \n-    private String setParameter(HttpMessage msg, NameValuePair originalPair, String value) {\n+    /**\n+     * Sets the parameters into the given {@code message}.\n+     *\n+     * @param msg the message that will be changed\n+     * @param inputVectors list of name of the parameter\n+     * @since TODO add version", "originalCommit": "e5b0abf6ba09dad2beee4c861e9ae1b8a42dcf63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODkyNjczNg==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668926736", "bodyText": "done", "author": "preetkaran20", "createdAt": "2021-07-13T16:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODkyNTAwMg=="}], "type": "inlineReview"}, {"oid": "55df57ad9c8af2f8366bca952f25eddeff2f97bd", "url": "https://github.com/zaproxy/zaproxy/commit/55df57ad9c8af2f8366bca952f25eddeff2f97bd", "message": "Adding since tag\n\nAddressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nSmall fix\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nUpdate VariantMultipartFormParameters.java\n\nLGTM fix\n\nAddressing review comments\n\nmissed one", "committedDate": "2021-07-13T16:28:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY1MDU3MQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r669650571", "bodyText": "Remove semicolon.", "author": "thc202", "createdAt": "2021-07-14T14:09:05Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/Variant.java", "diffHunk": "@@ -47,6 +48,15 @@ public String setParameter(\n     public String setEscapedParameter(\n             HttpMessage msg, NameValuePair originalPair, String param, String value);\n \n+    /**\n+     * Sets the parameters into the given {@code message}.\n+     *\n+     * @param message the message that will be changed\n+     * @param inputVectors list of name of the parameter\n+     * @since 2.11.0\n+     */\n+    default void setParameters(HttpMessage message, List<InputVector> inputVectors) {};", "originalCommit": "55df57ad9c8af2f8366bca952f25eddeff2f97bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY1MTQxMQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r669651411", "bodyText": "Use method references here and following.", "author": "thc202", "createdAt": "2021-07-14T14:10:02Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java", "diffHunk": "@@ -209,33 +212,85 @@ public void setMessage(HttpMessage msg) {\n     @Override\n     public String setParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));\n     }\n \n     @Override\n     public String setEscapedParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));\n     }\n \n-    private String setParameter(HttpMessage msg, NameValuePair originalPair, String value) {\n+    /**\n+     * Sets the parameters into the given {@code message}.\n+     *\n+     * @param msg the message that will be changed\n+     * @param inputVectors list of name of the parameter\n+     * @since 2.11.0\n+     */\n+    @Override\n+    public void setParameters(HttpMessage msg, List<InputVector> inputVectors) {\n+        this.setParameter(\n+                msg,\n+                inputVectors.stream()\n+                        .map(inputVector -> inputVector.getPosition())", "originalCommit": "55df57ad9c8af2f8366bca952f25eddeff2f97bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY1MTQ0OA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r669651448", "bodyText": "Remove semicolon.", "author": "thc202", "createdAt": "2021-07-14T14:10:05Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java", "diffHunk": "@@ -209,33 +212,85 @@ public void setMessage(HttpMessage msg) {\n     @Override\n     public String setParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));\n     }\n \n     @Override\n     public String setEscapedParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));\n     }\n \n-    private String setParameter(HttpMessage msg, NameValuePair originalPair, String value) {\n+    /**\n+     * Sets the parameters into the given {@code message}.\n+     *\n+     * @param msg the message that will be changed\n+     * @param inputVectors list of name of the parameter\n+     * @since 2.11.0\n+     */\n+    @Override\n+    public void setParameters(HttpMessage msg, List<InputVector> inputVectors) {\n+        this.setParameter(\n+                msg,\n+                inputVectors.stream()\n+                        .map(inputVector -> inputVector.getPosition())\n+                        .collect(Collectors.toList()),\n+                inputVectors.stream()\n+                        .map(inputVector -> inputVector.getValue())\n+                        .collect(Collectors.toList()));\n+    };", "originalCommit": "55df57ad9c8af2f8366bca952f25eddeff2f97bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY1MzExOA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r669653118", "bodyText": "Better if we return a consistent order, most of the variants would benefit of that, e.g.:\nreturn inputVectorsMap.values().stream().sorted(Comparator.comparingInt(InputVector::getPosition)).collect(Collectors.toList());", "author": "thc202", "createdAt": "2021-07-14T14:12:00Z", "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVectorBuilder.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.parosproxy.paros.core.scanner.NameValuePair;\n+import org.zaproxy.zap.core.scanner.InputVector.PayloadFormat;\n+\n+/**\n+ * {@code InputVectorBuilder} provides an easy way to build {@code InputVectors} and validates the\n+ * provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ * @since 2.11.0\n+ */\n+public class InputVectorBuilder {\n+\n+    private Map<Integer, InputVector> inputVectorsMap = new HashMap<>();\n+\n+    /**\n+     * Note: calling this method with same NameValuePair will overwrite the earlier name and value\n+     * with the newer one.\n+     *\n+     * @param nameValuePair\n+     * @param param\n+     * @param value\n+     * @param namePayloadFormat\n+     * @param valuePayloadFormat\n+     * @return {@code InputVectorBuilder}\n+     */\n+    public InputVectorBuilder setNameAndValue(\n+            NameValuePair nameValuePair,\n+            String param,\n+            String value,\n+            PayloadFormat namePayloadFormat,\n+            PayloadFormat valuePayloadFormat) {\n+        inputVectorsMap.put(\n+                nameValuePair.getPosition(),\n+                new InputVector(\n+                        nameValuePair.getPosition(),\n+                        param,\n+                        value,\n+                        namePayloadFormat,\n+                        valuePayloadFormat));\n+        return this;\n+    }\n+\n+    /**\n+     * Note: calling this method with same NameValuePair will overwrite the earlier name and value\n+     * with the newer one.\n+     *\n+     * @param nameValuePair\n+     * @param value\n+     * @param payloadFormat\n+     * @return {@code InputVectorBuilder}\n+     */\n+    public InputVectorBuilder setValue(\n+            NameValuePair nameValuePair, String value, PayloadFormat payloadFormat) {\n+        return this.setNameAndValue(\n+                nameValuePair,\n+                nameValuePair.getName(),\n+                value,\n+                PayloadFormat.ALREADY_ESCAPED,\n+                payloadFormat);\n+    }\n+\n+    /**\n+     * Note: calling this method with same NameValuePair will overwrite the earlier name and value\n+     * with the newer one.\n+     *\n+     * @param nameValuePair\n+     * @param param\n+     * @param payloadFormat\n+     * @return {@code InputVectorBuilder}\n+     */\n+    public InputVectorBuilder setName(\n+            NameValuePair nameValuePair, String param, PayloadFormat payloadFormat) {\n+        return this.setNameAndValue(\n+                nameValuePair,\n+                param,\n+                nameValuePair.getValue(),\n+                payloadFormat,\n+                PayloadFormat.ALREADY_ESCAPED);\n+    }\n+\n+    public List<InputVector> build() {\n+        return new ArrayList<>(inputVectorsMap.values());", "originalCommit": "55df57ad9c8af2f8366bca952f25eddeff2f97bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY2NTEyOA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r669665128", "bodyText": "as we are using HashMap with key position, hence it becomes somehow consistent order but will do.", "author": "preetkaran20", "createdAt": "2021-07-14T14:25:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY1MzExOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY4MDY5NA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r669680694", "bodyText": "done", "author": "preetkaran20", "createdAt": "2021-07-14T14:41:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY1MzExOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY4OTgxMw==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r669689813", "bodyText": "HashMap is not a SortedMap though.", "author": "thc202", "createdAt": "2021-07-14T14:51:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY1MzExOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY5MzY2Nw==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r669693667", "bodyText": "yeah, may be if size is more than 12, then i think hashcode will not give increasing order.", "author": "preetkaran20", "createdAt": "2021-07-14T14:55:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY1MzExOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY1NDA1NQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r669654055", "bodyText": "Can be parameterized, it's just testing different values (same for some of the following tests).", "author": "thc202", "createdAt": "2021-07-14T14:13:02Z", "path": "zap/src/test/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParametersUnitTest.java", "diffHunk": "@@ -227,6 +229,305 @@ void shouldInjectParamValueModificationInFileNameParam() {\n                 message.getRequestBody().toString(), equalTo(newMsg.getRequestBody().toString()));\n     }\n \n+    @Test\n+    void shouldInjectSmallerParamValueModificationInFileNameParam() {", "originalCommit": "55df57ad9c8af2f8366bca952f25eddeff2f97bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY3MzEzMg==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r669673132", "bodyText": "yeah", "author": "preetkaran20", "createdAt": "2021-07-14T14:33:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY1NDA1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY5ODA1NQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r669698055", "bodyText": "I meant JUnit test parameterization (e.g. VariantJSONQueryUnitTest). The tests shouldInjectParamValueMultipleTimesModificationsWith* can also be parameterized.", "author": "thc202", "createdAt": "2021-07-14T14:59:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY1NDA1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTc1OTExNA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r669759114", "bodyText": "oh ok. I have done the changes as suggested. Please have a look.", "author": "preetkaran20", "createdAt": "2021-07-14T16:11:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY1NDA1NQ=="}], "type": "inlineReview"}, {"oid": "cf43802cc6d4df01f05e120b7f12e08f1617dca8", "url": "https://github.com/zaproxy/zaproxy/commit/cf43802cc6d4df01f05e120b7f12e08f1617dca8", "message": "Fixing code\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>", "committedDate": "2021-07-14T14:20:53Z", "type": "forcePushed"}, {"oid": "0e3b8503f15115764d34cd03c15cc9356c38e79f", "url": "https://github.com/zaproxy/zaproxy/commit/0e3b8503f15115764d34cd03c15cc9356c38e79f", "message": "Fixing code\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nAddressing review comments", "committedDate": "2021-07-14T14:35:42Z", "type": "forcePushed"}, {"oid": "2385ec92a1f44c52e03fc91feb9fb3f2c858facb", "url": "https://github.com/zaproxy/zaproxy/commit/2385ec92a1f44c52e03fc91feb9fb3f2c858facb", "message": "Fixing code\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nAddressing review comments\n\nAdding parameterized tests", "committedDate": "2021-07-14T16:10:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTA2ODA1Ng==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r671068056", "bodyText": "Maybe remove this one, is exactly the same as the interface.", "author": "thc202", "createdAt": "2021-07-16T08:33:26Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java", "diffHunk": "@@ -215,33 +218,61 @@ public void setMessage(HttpMessage msg) {\n     @Override\n     public String setParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));\n     }\n \n     @Override\n     public String setEscapedParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));\n     }\n \n-    private String setParameter(HttpMessage msg, NameValuePair originalPair, String value) {\n+    /**\n+     * Sets the parameters into the given {@code message}.\n+     *\n+     * @param msg the message that will be changed\n+     * @param inputVectors list of name of the parameter\n+     * @since 2.11.0\n+     */", "originalCommit": "2385ec92a1f44c52e03fc91feb9fb3f2c858facb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTA2ODM4Mg==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r671068382", "bodyText": "Could use Collections.singletonList instead.", "author": "thc202", "createdAt": "2021-07-16T08:33:52Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java", "diffHunk": "@@ -215,33 +218,61 @@ public void setMessage(HttpMessage msg) {\n     @Override\n     public String setParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));\n     }\n \n     @Override\n     public String setEscapedParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));", "originalCommit": "2385ec92a1f44c52e03fc91feb9fb3f2c858facb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTE0OTQ1MQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r671149451", "bodyText": "thanks for mentioning it.", "author": "preetkaran20", "createdAt": "2021-07-16T10:45:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTA2ODM4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTA2ODczMA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r671068730", "bodyText": "Remove Empty.", "author": "thc202", "createdAt": "2021-07-16T08:34:22Z", "path": "zap/src/test/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParametersUnitTest.java", "diffHunk": "@@ -206,13 +213,13 @@ void shouldInjectParamValueModificationInFileParam() {\n                 message.getRequestBody().toString(), equalTo(newMsg.getRequestBody().toString()));\n     }\n \n-    @Test\n-    void shouldInjectParamValueModificationInFileNameParam() {\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"injected\", \"inj\", \"injectedFileName\", \"\"})\n+    void shouldInjectEmptyParamValueModificationInFileNameParam(String newValue) {", "originalCommit": "2385ec92a1f44c52e03fc91feb9fb3f2c858facb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7a82fe81553a7d3784ef6804d51cbf22d13b43f8", "url": "https://github.com/zaproxy/zaproxy/commit/7a82fe81553a7d3784ef6804d51cbf22d13b43f8", "message": "Correcting comments\n\nFixing code\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nAddressing review comments\n\nAdding parameterized tests", "committedDate": "2021-07-16T11:08:49Z", "type": "forcePushed"}, {"oid": "df1dba2d9ed920c723a19774687cf8a60df62081", "url": "https://github.com/zaproxy/zaproxy/commit/df1dba2d9ed920c723a19774687cf8a60df62081", "message": "Correcting comments\n\nFixing code\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nAddressing review comments\n\nAdding parameterized tests\n\nSmall logger fix", "committedDate": "2021-07-16T11:20:07Z", "type": "forcePushed"}, {"oid": "3b9a7e12f2e33c1dbd80c6c7bbdb0c9d5c97d3ca", "url": "https://github.com/zaproxy/zaproxy/commit/3b9a7e12f2e33c1dbd80c6c7bbdb0c9d5c97d3ca", "message": "Correcting comments\n\nFixing code\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nAddressing review comments\n\nAdding parameterized tests\n\nSmall logger fix\n\nAdding Most important method", "committedDate": "2021-07-17T08:26:23Z", "type": "forcePushed"}, {"oid": "2e74ef1f114aa024b155f6fe12272d0838ef3978", "url": "https://github.com/zaproxy/zaproxy/commit/2e74ef1f114aa024b155f6fe12272d0838ef3978", "message": "Adding support for handling manipulation of multiple NameValuePairs\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>", "committedDate": "2021-07-19T11:49:18Z", "type": "commit"}, {"oid": "2e74ef1f114aa024b155f6fe12272d0838ef3978", "url": "https://github.com/zaproxy/zaproxy/commit/2e74ef1f114aa024b155f6fe12272d0838ef3978", "message": "Adding support for handling manipulation of multiple NameValuePairs\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>", "committedDate": "2021-07-19T11:49:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MjI1NDEwMA==", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r672254100", "bodyText": "hmm yeah, we didn't need the message. thanks.", "author": "preetkaran20", "createdAt": "2021-07-19T12:31:15Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractAppParamPlugin.java", "diffHunk": "@@ -97,11 +99,22 @@ public void scan() {\n         }\n     }\n \n-    /** Scan the current message using the current Variant */\n-    private void scanVariant() {\n-        for (int i = 0; i < variant.getParamList().size() && !isStop(); i++) {\n+    /**\n+     * Scans the current message using the list of {@code NameValuePair}s handled by the current\n+     * variant. This method should be overridden for the use-cases of manipulating multiple\n+     * parameters in a {@code HttpMessage}.\n+     *\n+     * <p>By default this method calls {@link #scan(HttpMessage, NameValuePair)} for each {@code\n+     * NameValuePair}.\n+     *\n+     * @param nameValuePairs list of parameters handled by the current variant\n+     * @since 2.11.0\n+     * @see #setParameters(HttpMessage, List)\n+     */\n+    protected void scan(List<NameValuePair> nameValuePairs) {", "originalCommit": "2e74ef1f114aa024b155f6fe12272d0838ef3978", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}