{"pr_number": 917, "pr_title": "Structures API", "pr_createdAt": "2020-07-24T15:42:25Z", "pr_url": "https://github.com/FabricMC/fabric/pull/917", "timeline": [{"oid": "5c420335788906ac69f63b710763b9c8324dc97a", "url": "https://github.com/FabricMC/fabric/commit/5c420335788906ac69f63b710763b9c8324dc97a", "message": "Initial structures API implementation", "committedDate": "2020-07-24T16:00:05Z", "type": "forcePushed"}, {"oid": "87a67fb663676473d2b35f984e53f60c87c11177", "url": "https://github.com/FabricMC/fabric/commit/87a67fb663676473d2b35f984e53f60c87c11177", "message": "Initial structures API implementation", "committedDate": "2020-07-24T17:48:14Z", "type": "commit"}, {"oid": "87a67fb663676473d2b35f984e53f60c87c11177", "url": "https://github.com/FabricMC/fabric/commit/87a67fb663676473d2b35f984e53f60c87c11177", "message": "Initial structures API implementation", "committedDate": "2020-07-24T17:48:14Z", "type": "forcePushed"}, {"oid": "7972ad2361c958335eae3219e293731a9c3409bf", "url": "https://github.com/FabricMC/fabric/commit/7972ad2361c958335eae3219e293731a9c3409bf", "message": "Improve generics + add a superflatFeature helper method", "committedDate": "2020-07-25T14:47:29Z", "type": "commit"}, {"oid": "7972ad2361c958335eae3219e293731a9c3409bf", "url": "https://github.com/FabricMC/fabric/commit/7972ad2361c958335eae3219e293731a9c3409bf", "message": "Improve generics + add a superflatFeature helper method", "committedDate": "2020-07-25T14:47:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMjM2OA==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460422368", "bodyText": "buildAndRegister?", "author": "i509VCB", "createdAt": "2020-07-25T16:46:24Z", "path": "fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/api/structure/v1/FabricStructureBuilder.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.structure.v1;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import net.minecraft.util.Identifier;\n+import net.minecraft.world.gen.GenerationStep;\n+import net.minecraft.world.gen.chunk.StructureConfig;\n+import net.minecraft.world.gen.chunk.StructuresConfig;\n+import net.minecraft.world.gen.feature.ConfiguredStructureFeature;\n+import net.minecraft.world.gen.feature.FeatureConfig;\n+import net.minecraft.world.gen.feature.StructureFeature;\n+\n+import net.fabricmc.fabric.impl.structure.FabricStructuresImpl;\n+import net.fabricmc.fabric.impl.structure.StructuresConfigHooks;\n+import net.fabricmc.fabric.mixin.structure.FlatChunkGeneratorConfigAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructureFeatureAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructuresConfigAccessor;\n+\n+public class FabricStructureBuilder<FC extends FeatureConfig, S extends StructureFeature<FC>> {\n+\tprivate final Identifier id;\n+\tprivate final S structure;\n+\tprivate GenerationStep.Feature step;\n+\tprivate StructureConfig defaultConfig;\n+\tprivate ConfiguredStructureFeature<FC, ? extends StructureFeature<FC>> superflatFeature;\n+\tprivate boolean adjustsSurface = false;\n+\n+\tprivate FabricStructureBuilder(Identifier id, S structure) {\n+\t\tthis.id = id;\n+\t\tthis.structure = structure;\n+\t}\n+\n+\tpublic static <FC extends FeatureConfig, S extends StructureFeature<FC>> FabricStructureBuilder<FC, S> create(Identifier id, S structure) {\n+\t\treturn new FabricStructureBuilder<>(id, structure);\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> step(GenerationStep.Feature step) {\n+\t\tthis.step = step;\n+\t\treturn this;\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> defaultConfig(StructureConfig config) {\n+\t\tthis.defaultConfig = config;\n+\t\treturn this;\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> defaultConfig(int spacing, int separation, int salt) {\n+\t\treturn defaultConfig(new StructureConfig(spacing, separation, salt));\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> superflatFeature(ConfiguredStructureFeature<FC, ? extends StructureFeature<FC>> superflatFeature) {\n+\t\tthis.superflatFeature = superflatFeature;\n+\t\treturn this;\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> superflatFeature(FC config) {\n+\t\treturn superflatFeature(structure.configure(config));\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> adjustsSurface() {\n+\t\tthis.adjustsSurface = true;\n+\t\treturn this;\n+\t}\n+\n+\tpublic S register() {", "originalCommit": "7972ad2361c958335eae3219e293731a9c3409bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyNDY1NA==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460424654", "bodyText": "Actually register may be fine alone", "author": "i509VCB", "createdAt": "2020-07-25T17:10:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMjM2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMjU4OQ==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460422589", "bodyText": "This is fine, but I'd advise Objects.requireNonNull or preconditions.", "author": "i509VCB", "createdAt": "2020-07-25T16:48:59Z", "path": "fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/api/structure/v1/FabricStructureBuilder.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.structure.v1;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import net.minecraft.util.Identifier;\n+import net.minecraft.world.gen.GenerationStep;\n+import net.minecraft.world.gen.chunk.StructureConfig;\n+import net.minecraft.world.gen.chunk.StructuresConfig;\n+import net.minecraft.world.gen.feature.ConfiguredStructureFeature;\n+import net.minecraft.world.gen.feature.FeatureConfig;\n+import net.minecraft.world.gen.feature.StructureFeature;\n+\n+import net.fabricmc.fabric.impl.structure.FabricStructuresImpl;\n+import net.fabricmc.fabric.impl.structure.StructuresConfigHooks;\n+import net.fabricmc.fabric.mixin.structure.FlatChunkGeneratorConfigAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructureFeatureAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructuresConfigAccessor;\n+\n+public class FabricStructureBuilder<FC extends FeatureConfig, S extends StructureFeature<FC>> {\n+\tprivate final Identifier id;\n+\tprivate final S structure;\n+\tprivate GenerationStep.Feature step;\n+\tprivate StructureConfig defaultConfig;\n+\tprivate ConfiguredStructureFeature<FC, ? extends StructureFeature<FC>> superflatFeature;\n+\tprivate boolean adjustsSurface = false;\n+\n+\tprivate FabricStructureBuilder(Identifier id, S structure) {\n+\t\tthis.id = id;\n+\t\tthis.structure = structure;\n+\t}\n+\n+\tpublic static <FC extends FeatureConfig, S extends StructureFeature<FC>> FabricStructureBuilder<FC, S> create(Identifier id, S structure) {\n+\t\treturn new FabricStructureBuilder<>(id, structure);\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> step(GenerationStep.Feature step) {\n+\t\tthis.step = step;\n+\t\treturn this;\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> defaultConfig(StructureConfig config) {\n+\t\tthis.defaultConfig = config;\n+\t\treturn this;\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> defaultConfig(int spacing, int separation, int salt) {\n+\t\treturn defaultConfig(new StructureConfig(spacing, separation, salt));\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> superflatFeature(ConfiguredStructureFeature<FC, ? extends StructureFeature<FC>> superflatFeature) {\n+\t\tthis.superflatFeature = superflatFeature;\n+\t\treturn this;\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> superflatFeature(FC config) {\n+\t\treturn superflatFeature(structure.configure(config));\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> adjustsSurface() {\n+\t\tthis.adjustsSurface = true;\n+\t\treturn this;\n+\t}\n+\n+\tpublic S register() {\n+\t\tif (step == null) {", "originalCommit": "7972ad2361c958335eae3219e293731a9c3409bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ2MzQ1Ng==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460463456", "bodyText": "Yes, for these illegal states use objects check", "author": "liach", "createdAt": "2020-07-26T01:07:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMjU4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMjY5OA==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460422698", "bodyText": "Validate the parameter to make sure it is non-null (per use in build method)", "author": "i509VCB", "createdAt": "2020-07-25T16:50:11Z", "path": "fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/api/structure/v1/FabricStructureBuilder.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.structure.v1;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import net.minecraft.util.Identifier;\n+import net.minecraft.world.gen.GenerationStep;\n+import net.minecraft.world.gen.chunk.StructureConfig;\n+import net.minecraft.world.gen.chunk.StructuresConfig;\n+import net.minecraft.world.gen.feature.ConfiguredStructureFeature;\n+import net.minecraft.world.gen.feature.FeatureConfig;\n+import net.minecraft.world.gen.feature.StructureFeature;\n+\n+import net.fabricmc.fabric.impl.structure.FabricStructuresImpl;\n+import net.fabricmc.fabric.impl.structure.StructuresConfigHooks;\n+import net.fabricmc.fabric.mixin.structure.FlatChunkGeneratorConfigAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructureFeatureAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructuresConfigAccessor;\n+\n+public class FabricStructureBuilder<FC extends FeatureConfig, S extends StructureFeature<FC>> {\n+\tprivate final Identifier id;\n+\tprivate final S structure;\n+\tprivate GenerationStep.Feature step;\n+\tprivate StructureConfig defaultConfig;\n+\tprivate ConfiguredStructureFeature<FC, ? extends StructureFeature<FC>> superflatFeature;\n+\tprivate boolean adjustsSurface = false;\n+\n+\tprivate FabricStructureBuilder(Identifier id, S structure) {\n+\t\tthis.id = id;\n+\t\tthis.structure = structure;\n+\t}\n+\n+\tpublic static <FC extends FeatureConfig, S extends StructureFeature<FC>> FabricStructureBuilder<FC, S> create(Identifier id, S structure) {\n+\t\treturn new FabricStructureBuilder<>(id, structure);\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> step(GenerationStep.Feature step) {\n+\t\tthis.step = step;\n+\t\treturn this;\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> defaultConfig(StructureConfig config) {\n+\t\tthis.defaultConfig = config;", "originalCommit": "7972ad2361c958335eae3219e293731a9c3409bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMjc1Nw==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460422757", "bodyText": "Null check", "author": "i509VCB", "createdAt": "2020-07-25T16:50:40Z", "path": "fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/api/structure/v1/FabricStructureBuilder.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.structure.v1;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import net.minecraft.util.Identifier;\n+import net.minecraft.world.gen.GenerationStep;\n+import net.minecraft.world.gen.chunk.StructureConfig;\n+import net.minecraft.world.gen.chunk.StructuresConfig;\n+import net.minecraft.world.gen.feature.ConfiguredStructureFeature;\n+import net.minecraft.world.gen.feature.FeatureConfig;\n+import net.minecraft.world.gen.feature.StructureFeature;\n+\n+import net.fabricmc.fabric.impl.structure.FabricStructuresImpl;\n+import net.fabricmc.fabric.impl.structure.StructuresConfigHooks;\n+import net.fabricmc.fabric.mixin.structure.FlatChunkGeneratorConfigAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructureFeatureAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructuresConfigAccessor;\n+\n+public class FabricStructureBuilder<FC extends FeatureConfig, S extends StructureFeature<FC>> {\n+\tprivate final Identifier id;\n+\tprivate final S structure;\n+\tprivate GenerationStep.Feature step;\n+\tprivate StructureConfig defaultConfig;\n+\tprivate ConfiguredStructureFeature<FC, ? extends StructureFeature<FC>> superflatFeature;\n+\tprivate boolean adjustsSurface = false;\n+\n+\tprivate FabricStructureBuilder(Identifier id, S structure) {\n+\t\tthis.id = id;\n+\t\tthis.structure = structure;\n+\t}\n+\n+\tpublic static <FC extends FeatureConfig, S extends StructureFeature<FC>> FabricStructureBuilder<FC, S> create(Identifier id, S structure) {\n+\t\treturn new FabricStructureBuilder<>(id, structure);\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> step(GenerationStep.Feature step) {\n+\t\tthis.step = step;", "originalCommit": "7972ad2361c958335eae3219e293731a9c3409bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMjk4Ng==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460422986", "bodyText": "Assertion errors please. Also specify in message something like Untransformed Accessor or This shouldn't happen", "author": "i509VCB", "createdAt": "2020-07-25T16:54:07Z", "path": "fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/mixin/structure/StructureFeatureAccessor.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.structure;\n+\n+import java.util.List;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Mutable;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n+import org.spongepowered.asm.mixin.gen.Invoker;\n+\n+import net.minecraft.world.gen.GenerationStep;\n+import net.minecraft.world.gen.feature.StructureFeature;\n+\n+@Mixin(StructureFeature.class)\n+public interface StructureFeatureAccessor {\n+\t@Accessor(\"field_24861\")\n+\t@Mutable\n+\tstatic void setSurfaceAdjustingStructures(List<StructureFeature<?>> surfaceAdjustingStructures) {\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\n+\t@Invoker\n+\tstatic <F extends StructureFeature<?>> F callRegister(String name, F structureFeature, GenerationStep.Feature step) {\n+\t\tthrow new UnsupportedOperationException();", "originalCommit": "7972ad2361c958335eae3219e293731a9c3409bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMzA0Ng==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460423046", "bodyText": "Fully capitalized name, this is a static final field.", "author": "i509VCB", "createdAt": "2020-07-25T16:54:46Z", "path": "fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/impl/structure/FabricStructuresImpl.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.structure;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.WeakHashMap;\n+\n+import net.minecraft.world.gen.chunk.StructuresConfig;\n+\n+public class FabricStructuresImpl {\n+\tpublic static final Set<StructuresConfig> defaultStructuresConfigs = Collections.newSetFromMap(new WeakHashMap<>());", "originalCommit": "7972ad2361c958335eae3219e293731a9c3409bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMzE1MQ==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460423151", "bodyText": "Validate parameters as not null.", "author": "i509VCB", "createdAt": "2020-07-25T16:55:35Z", "path": "fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/api/structure/v1/FabricStructureBuilder.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.structure.v1;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import net.minecraft.util.Identifier;\n+import net.minecraft.world.gen.GenerationStep;\n+import net.minecraft.world.gen.chunk.StructureConfig;\n+import net.minecraft.world.gen.chunk.StructuresConfig;\n+import net.minecraft.world.gen.feature.ConfiguredStructureFeature;\n+import net.minecraft.world.gen.feature.FeatureConfig;\n+import net.minecraft.world.gen.feature.StructureFeature;\n+\n+import net.fabricmc.fabric.impl.structure.FabricStructuresImpl;\n+import net.fabricmc.fabric.impl.structure.StructuresConfigHooks;\n+import net.fabricmc.fabric.mixin.structure.FlatChunkGeneratorConfigAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructureFeatureAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructuresConfigAccessor;\n+\n+public class FabricStructureBuilder<FC extends FeatureConfig, S extends StructureFeature<FC>> {\n+\tprivate final Identifier id;\n+\tprivate final S structure;\n+\tprivate GenerationStep.Feature step;\n+\tprivate StructureConfig defaultConfig;\n+\tprivate ConfiguredStructureFeature<FC, ? extends StructureFeature<FC>> superflatFeature;\n+\tprivate boolean adjustsSurface = false;\n+\n+\tprivate FabricStructureBuilder(Identifier id, S structure) {\n+\t\tthis.id = id;\n+\t\tthis.structure = structure;\n+\t}\n+\n+\tpublic static <FC extends FeatureConfig, S extends StructureFeature<FC>> FabricStructureBuilder<FC, S> create(Identifier id, S structure) {", "originalCommit": "7972ad2361c958335eae3219e293731a9c3409bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMzIxMg==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460423212", "bodyText": "Javadoc please. Describe what each method in the builder does and which methods are required. I'd advise including a code example in class javadoc to show how to use this builder.", "author": "i509VCB", "createdAt": "2020-07-25T16:56:42Z", "path": "fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/api/structure/v1/FabricStructureBuilder.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.structure.v1;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import net.minecraft.util.Identifier;\n+import net.minecraft.world.gen.GenerationStep;\n+import net.minecraft.world.gen.chunk.StructureConfig;\n+import net.minecraft.world.gen.chunk.StructuresConfig;\n+import net.minecraft.world.gen.feature.ConfiguredStructureFeature;\n+import net.minecraft.world.gen.feature.FeatureConfig;\n+import net.minecraft.world.gen.feature.StructureFeature;\n+\n+import net.fabricmc.fabric.impl.structure.FabricStructuresImpl;\n+import net.fabricmc.fabric.impl.structure.StructuresConfigHooks;\n+import net.fabricmc.fabric.mixin.structure.FlatChunkGeneratorConfigAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructureFeatureAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructuresConfigAccessor;\n+\n+public class FabricStructureBuilder<FC extends FeatureConfig, S extends StructureFeature<FC>> {", "originalCommit": "7972ad2361c958335eae3219e293731a9c3409bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMzI0Nw==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460423247", "bodyText": "Since constructor is private, I'd make this class final or make the constructor protected.", "author": "i509VCB", "createdAt": "2020-07-25T16:57:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMzIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMzcwNQ==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460423705", "bodyText": "Is there a vanilla structure builder? If not I may consifer omitting Fabric from the class name, but player and liach may have different opinions about that.", "author": "i509VCB", "createdAt": "2020-07-25T17:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMzIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU0NTc2Nw==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460545767", "bodyText": "I'll keep the Fabric prefix.", "author": "Earthcomputer", "createdAt": "2020-07-26T16:17:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMzIxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMzMzNA==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460423334", "bodyText": "I have no idea what salt does in this context. Please explain it briefly in javadoc", "author": "i509VCB", "createdAt": "2020-07-25T16:57:59Z", "path": "fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/api/structure/v1/FabricStructureBuilder.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.structure.v1;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import net.minecraft.util.Identifier;\n+import net.minecraft.world.gen.GenerationStep;\n+import net.minecraft.world.gen.chunk.StructureConfig;\n+import net.minecraft.world.gen.chunk.StructuresConfig;\n+import net.minecraft.world.gen.feature.ConfiguredStructureFeature;\n+import net.minecraft.world.gen.feature.FeatureConfig;\n+import net.minecraft.world.gen.feature.StructureFeature;\n+\n+import net.fabricmc.fabric.impl.structure.FabricStructuresImpl;\n+import net.fabricmc.fabric.impl.structure.StructuresConfigHooks;\n+import net.fabricmc.fabric.mixin.structure.FlatChunkGeneratorConfigAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructureFeatureAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructuresConfigAccessor;\n+\n+public class FabricStructureBuilder<FC extends FeatureConfig, S extends StructureFeature<FC>> {\n+\tprivate final Identifier id;\n+\tprivate final S structure;\n+\tprivate GenerationStep.Feature step;\n+\tprivate StructureConfig defaultConfig;\n+\tprivate ConfiguredStructureFeature<FC, ? extends StructureFeature<FC>> superflatFeature;\n+\tprivate boolean adjustsSurface = false;\n+\n+\tprivate FabricStructureBuilder(Identifier id, S structure) {\n+\t\tthis.id = id;\n+\t\tthis.structure = structure;\n+\t}\n+\n+\tpublic static <FC extends FeatureConfig, S extends StructureFeature<FC>> FabricStructureBuilder<FC, S> create(Identifier id, S structure) {\n+\t\treturn new FabricStructureBuilder<>(id, structure);\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> step(GenerationStep.Feature step) {\n+\t\tthis.step = step;\n+\t\treturn this;\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> defaultConfig(StructureConfig config) {\n+\t\tthis.defaultConfig = config;\n+\t\treturn this;\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> defaultConfig(int spacing, int separation, int salt) {", "originalCommit": "7972ad2361c958335eae3219e293731a9c3409bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyNTk2Mg==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460425962", "bodyText": "I think salt just makes sure it doesn't spawn in the same place as another structure with same separation and spacing.", "author": "TheBrokenRail", "createdAt": "2020-07-25T17:25:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMzMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyODIxOA==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460428218", "bodyText": "You can probably just (@see StructureConfig) to the vanilla class. I contributed some Javadocs to Yarn that explain its fields (this method just constructs a StructureConfig and passes it to the other overload of defaultConfig).\nSee here: https://github.com/FabricMC/yarn/blob/20w30a/mappings/net/minecraft/world/gen/chunk/StructureConfig.mapping#L27", "author": "shartte", "createdAt": "2020-07-25T17:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMzMzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMzQxMQ==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460423411", "bodyText": "I assume this feature is used if the generator type is a superflat type. I'd specify that in javadoc so people know what it does.", "author": "i509VCB", "createdAt": "2020-07-25T16:59:08Z", "path": "fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/api/structure/v1/FabricStructureBuilder.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.structure.v1;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import net.minecraft.util.Identifier;\n+import net.minecraft.world.gen.GenerationStep;\n+import net.minecraft.world.gen.chunk.StructureConfig;\n+import net.minecraft.world.gen.chunk.StructuresConfig;\n+import net.minecraft.world.gen.feature.ConfiguredStructureFeature;\n+import net.minecraft.world.gen.feature.FeatureConfig;\n+import net.minecraft.world.gen.feature.StructureFeature;\n+\n+import net.fabricmc.fabric.impl.structure.FabricStructuresImpl;\n+import net.fabricmc.fabric.impl.structure.StructuresConfigHooks;\n+import net.fabricmc.fabric.mixin.structure.FlatChunkGeneratorConfigAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructureFeatureAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructuresConfigAccessor;\n+\n+public class FabricStructureBuilder<FC extends FeatureConfig, S extends StructureFeature<FC>> {\n+\tprivate final Identifier id;\n+\tprivate final S structure;\n+\tprivate GenerationStep.Feature step;\n+\tprivate StructureConfig defaultConfig;\n+\tprivate ConfiguredStructureFeature<FC, ? extends StructureFeature<FC>> superflatFeature;\n+\tprivate boolean adjustsSurface = false;\n+\n+\tprivate FabricStructureBuilder(Identifier id, S structure) {\n+\t\tthis.id = id;\n+\t\tthis.structure = structure;\n+\t}\n+\n+\tpublic static <FC extends FeatureConfig, S extends StructureFeature<FC>> FabricStructureBuilder<FC, S> create(Identifier id, S structure) {\n+\t\treturn new FabricStructureBuilder<>(id, structure);\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> step(GenerationStep.Feature step) {\n+\t\tthis.step = step;\n+\t\treturn this;\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> defaultConfig(StructureConfig config) {\n+\t\tthis.defaultConfig = config;\n+\t\treturn this;\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> defaultConfig(int spacing, int separation, int salt) {\n+\t\treturn defaultConfig(new StructureConfig(spacing, separation, salt));\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> superflatFeature(ConfiguredStructureFeature<FC, ? extends StructureFeature<FC>> superflatFeature) {", "originalCommit": "7972ad2361c958335eae3219e293731a9c3409bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMzUzMg==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460423532", "bodyText": "Assertion error please like the other accessor.", "author": "i509VCB", "createdAt": "2020-07-25T17:00:28Z", "path": "fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/mixin/structure/FlatChunkGeneratorConfigAccessor.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.structure;\n+\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n+\n+import net.minecraft.world.gen.chunk.FlatChunkGeneratorConfig;\n+import net.minecraft.world.gen.feature.ConfiguredStructureFeature;\n+import net.minecraft.world.gen.feature.StructureFeature;\n+\n+@Mixin(FlatChunkGeneratorConfig.class)\n+public interface FlatChunkGeneratorConfigAccessor {\n+\t@Accessor(\"STRUCTURE_TO_FEATURES\")\n+\tstatic Map<StructureFeature<?>, ConfiguredStructureFeature<?, ?>> getStructureToFeatures() {\n+\t\tthrow new UnsupportedOperationException();", "originalCommit": "7972ad2361c958335eae3219e293731a9c3409bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMzgzNw==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460423837", "bodyText": "Maybe put getName in quotes like this: \\\"getName\\\"", "author": "i509VCB", "createdAt": "2020-07-25T17:02:42Z", "path": "fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/api/structure/v1/FabricStructureBuilder.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.structure.v1;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import net.minecraft.util.Identifier;\n+import net.minecraft.world.gen.GenerationStep;\n+import net.minecraft.world.gen.chunk.StructureConfig;\n+import net.minecraft.world.gen.chunk.StructuresConfig;\n+import net.minecraft.world.gen.feature.ConfiguredStructureFeature;\n+import net.minecraft.world.gen.feature.FeatureConfig;\n+import net.minecraft.world.gen.feature.StructureFeature;\n+\n+import net.fabricmc.fabric.impl.structure.FabricStructuresImpl;\n+import net.fabricmc.fabric.impl.structure.StructuresConfigHooks;\n+import net.fabricmc.fabric.mixin.structure.FlatChunkGeneratorConfigAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructureFeatureAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructuresConfigAccessor;\n+\n+public class FabricStructureBuilder<FC extends FeatureConfig, S extends StructureFeature<FC>> {\n+\tprivate final Identifier id;\n+\tprivate final S structure;\n+\tprivate GenerationStep.Feature step;\n+\tprivate StructureConfig defaultConfig;\n+\tprivate ConfiguredStructureFeature<FC, ? extends StructureFeature<FC>> superflatFeature;\n+\tprivate boolean adjustsSurface = false;\n+\n+\tprivate FabricStructureBuilder(Identifier id, S structure) {\n+\t\tthis.id = id;\n+\t\tthis.structure = structure;\n+\t}\n+\n+\tpublic static <FC extends FeatureConfig, S extends StructureFeature<FC>> FabricStructureBuilder<FC, S> create(Identifier id, S structure) {\n+\t\treturn new FabricStructureBuilder<>(id, structure);\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> step(GenerationStep.Feature step) {\n+\t\tthis.step = step;\n+\t\treturn this;\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> defaultConfig(StructureConfig config) {\n+\t\tthis.defaultConfig = config;\n+\t\treturn this;\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> defaultConfig(int spacing, int separation, int salt) {\n+\t\treturn defaultConfig(new StructureConfig(spacing, separation, salt));\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> superflatFeature(ConfiguredStructureFeature<FC, ? extends StructureFeature<FC>> superflatFeature) {\n+\t\tthis.superflatFeature = superflatFeature;\n+\t\treturn this;\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> superflatFeature(FC config) {\n+\t\treturn superflatFeature(structure.configure(config));\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> adjustsSurface() {\n+\t\tthis.adjustsSurface = true;\n+\t\treturn this;\n+\t}\n+\n+\tpublic S register() {\n+\t\tif (step == null) {\n+\t\t\tthrow new IllegalStateException(\"Structure \\\"\" + id + \"\\\" is missing a generation step\");\n+\t\t}\n+\n+\t\tif (defaultConfig == null) {\n+\t\t\tthrow new IllegalStateException(\"Structure \\\"\" + id + \"\\\" is missing a default config\");\n+\t\t}\n+\n+\t\tStructureFeatureAccessor.callRegister(id.toString(), structure, step);\n+\n+\t\tif (!id.toString().equals(structure.getName())) {\n+\t\t\t// mods should not be overriding getName, but if they do and it's incorrect, this gives an error\n+\t\t\tthrow new IllegalStateException(\"Structure \" + id + \" has mismatching name \" + structure.getName() + \". Structures should not override getName.\");", "originalCommit": "7972ad2361c958335eae3219e293731a9c3409bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMzkxMg==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460423912", "bodyText": "I assume this is what causes the game to extend the walls of a villager house downwards to fill in air?", "author": "i509VCB", "createdAt": "2020-07-25T17:03:30Z", "path": "fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/api/structure/v1/FabricStructureBuilder.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.structure.v1;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import net.minecraft.util.Identifier;\n+import net.minecraft.world.gen.GenerationStep;\n+import net.minecraft.world.gen.chunk.StructureConfig;\n+import net.minecraft.world.gen.chunk.StructuresConfig;\n+import net.minecraft.world.gen.feature.ConfiguredStructureFeature;\n+import net.minecraft.world.gen.feature.FeatureConfig;\n+import net.minecraft.world.gen.feature.StructureFeature;\n+\n+import net.fabricmc.fabric.impl.structure.FabricStructuresImpl;\n+import net.fabricmc.fabric.impl.structure.StructuresConfigHooks;\n+import net.fabricmc.fabric.mixin.structure.FlatChunkGeneratorConfigAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructureFeatureAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructuresConfigAccessor;\n+\n+public class FabricStructureBuilder<FC extends FeatureConfig, S extends StructureFeature<FC>> {\n+\tprivate final Identifier id;\n+\tprivate final S structure;\n+\tprivate GenerationStep.Feature step;\n+\tprivate StructureConfig defaultConfig;\n+\tprivate ConfiguredStructureFeature<FC, ? extends StructureFeature<FC>> superflatFeature;\n+\tprivate boolean adjustsSurface = false;\n+\n+\tprivate FabricStructureBuilder(Identifier id, S structure) {\n+\t\tthis.id = id;\n+\t\tthis.structure = structure;\n+\t}\n+\n+\tpublic static <FC extends FeatureConfig, S extends StructureFeature<FC>> FabricStructureBuilder<FC, S> create(Identifier id, S structure) {\n+\t\treturn new FabricStructureBuilder<>(id, structure);\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> step(GenerationStep.Feature step) {\n+\t\tthis.step = step;\n+\t\treturn this;\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> defaultConfig(StructureConfig config) {\n+\t\tthis.defaultConfig = config;\n+\t\treturn this;\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> defaultConfig(int spacing, int separation, int salt) {\n+\t\treturn defaultConfig(new StructureConfig(spacing, separation, salt));\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> superflatFeature(ConfiguredStructureFeature<FC, ? extends StructureFeature<FC>> superflatFeature) {\n+\t\tthis.superflatFeature = superflatFeature;\n+\t\treturn this;\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> superflatFeature(FC config) {\n+\t\treturn superflatFeature(structure.configure(config));\n+\t}\n+\n+\tpublic FabricStructureBuilder<FC, S> adjustsSurface() {", "originalCommit": "7972ad2361c958335eae3219e293731a9c3409bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyNDA0OA==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460424048", "bodyText": "final and a private constructor since this is an impl class and has no real need to be constructed.", "author": "i509VCB", "createdAt": "2020-07-25T17:04:24Z", "path": "fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/impl/structure/FabricStructuresImpl.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.structure;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.WeakHashMap;\n+\n+import net.minecraft.world.gen.chunk.StructuresConfig;\n+\n+public class FabricStructuresImpl {", "originalCommit": "7972ad2361c958335eae3219e293731a9c3409bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyNDI2Ng==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460424266", "bodyText": "I remember modmuss had to add something to biome api since nether chunk generator was initialized before mod init. Maybe validate this isn't called too early before chunk generator type is created?", "author": "i509VCB", "createdAt": "2020-07-25T17:06:32Z", "path": "fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/mixin/structure/MixinChunkGeneratorType.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.structure;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.gen.chunk.ChunkGeneratorType;\n+\n+import net.fabricmc.fabric.impl.structure.FabricStructuresImpl;\n+\n+@Mixin(ChunkGeneratorType.class)\n+public class MixinChunkGeneratorType {\n+\t@Inject(method = \"method_30641\", at = @At(\"RETURN\"))\n+\tprivate static void onCreateCavesType(CallbackInfoReturnable<ChunkGeneratorType> cir) {\n+\t\tFabricStructuresImpl.defaultStructuresConfigs.add(cir.getReturnValue().getConfig());", "originalCommit": "7972ad2361c958335eae3219e293731a9c3409bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU0NjM2Nw==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460546367", "bodyText": "No, it's safe in this case. The DEFAULT_STRUCTURES_CONFIGS set stores the set of configs which copied from StructureFeature.DEFAULT_STRUCTURES. This is so that when a mod registers a structure after the StructuresConfig has been created, the register method loops over all existing configs and adds the structure to it. If the structure is registered before this StructureConfig is created, then since it's added to StructureFeature.DEFAULT_STRUCTURES the StructureConfig will copy the structure into its list anyway.", "author": "Earthcomputer", "createdAt": "2020-07-26T16:24:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyNDI2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyNDMyMQ==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460424321", "bodyText": "Assertion error", "author": "i509VCB", "createdAt": "2020-07-25T17:07:15Z", "path": "fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/mixin/structure/StructuresConfigAccessor.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.structure;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Mutable;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n+\n+import net.minecraft.world.gen.chunk.StructureConfig;\n+import net.minecraft.world.gen.chunk.StructuresConfig;\n+import net.minecraft.world.gen.feature.StructureFeature;\n+\n+@Mixin(StructuresConfig.class)\n+public interface StructuresConfigAccessor {\n+\t@Mutable\n+\t@Accessor(\"DEFAULT_STRUCTURES\")\n+\tstatic void setDefaultStructures(ImmutableMap<StructureFeature<?>, StructureConfig> defaultStructures) {\n+\t\tthrow new UnsupportedOperationException();", "originalCommit": "7972ad2361c958335eae3219e293731a9c3409bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyNDM5MQ==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460424391", "bodyText": "Hmm, what does this module use from base api? If it doesn't use anything from it, you can omit this dependency.", "author": "i509VCB", "createdAt": "2020-07-25T17:08:08Z", "path": "fabric-structure-api-v1/build.gradle", "diffHunk": "@@ -0,0 +1,6 @@\n+archivesBaseName = \"fabric-structure-api-v1\"\n+version = getSubprojectVersion(project, \"1.0.0\")\n+\n+dependencies {\n+\tcompile(project(path: ':fabric-api-base', configuration: 'dev'))", "originalCommit": "7972ad2361c958335eae3219e293731a9c3409bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5e7730e8d142b66f5a7b791a213e1e90d9536e01", "url": "https://github.com/FabricMC/fabric/commit/5e7730e8d142b66f5a7b791a213e1e90d9536e01", "message": "Initialize StructuresConfig class early to prevent its assertion failing", "committedDate": "2020-07-25T19:17:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ2MzU0Ng==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460463546", "bodyText": "Hmm, this Impl sounds like this is implementing an interface while this is not. Maybe FabricStructureUtil?", "author": "liach", "createdAt": "2020-07-26T01:08:47Z", "path": "fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/impl/structure/FabricStructuresImpl.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.structure;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.WeakHashMap;\n+\n+import net.minecraft.world.gen.chunk.StructuresConfig;\n+\n+public class FabricStructuresImpl {", "originalCommit": "5e7730e8d142b66f5a7b791a213e1e90d9536e01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5cb276b808dcefcaa2f12d43d22ca9f4d66f2d58", "url": "https://github.com/FabricMC/fabric/commit/5cb276b808dcefcaa2f12d43d22ca9f4d66f2d58", "message": "Add a testmod", "committedDate": "2020-07-26T11:28:32Z", "type": "commit"}, {"oid": "e8b75a5dd30a4409e997680e5e971abecf8a8779", "url": "https://github.com/FabricMC/fabric/commit/e8b75a5dd30a4409e997680e5e971abecf8a8779", "message": "Documentation and null assertions", "committedDate": "2020-07-26T16:03:45Z", "type": "commit"}, {"oid": "4d4a3f674a2ea90c753bef7ef83e3d0e39f8e6a2", "url": "https://github.com/FabricMC/fabric/commit/4d4a3f674a2ea90c753bef7ef83e3d0e39f8e6a2", "message": "Apply review suggestions", "committedDate": "2020-07-26T16:24:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU0NzMzMQ==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460547331", "bodyText": "Unless I missed something, I think the arguments are missing here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * FabricStructureBuilder.create()\n          \n          \n            \n             * FabricStructureBuilder.create(new Identifier(\"mymod:mystructure\"), structure)", "author": "shartte", "createdAt": "2020-07-26T16:32:45Z", "path": "fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/api/structure/v1/FabricStructureBuilder.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.structure.v1;\n+\n+import java.util.Objects;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import net.minecraft.util.Identifier;\n+import net.minecraft.world.gen.GenerationStep;\n+import net.minecraft.world.gen.chunk.StructureConfig;\n+import net.minecraft.world.gen.chunk.StructuresConfig;\n+import net.minecraft.world.gen.feature.ConfiguredStructureFeature;\n+import net.minecraft.world.gen.feature.FeatureConfig;\n+import net.minecraft.world.gen.feature.StructureFeature;\n+\n+import net.fabricmc.fabric.impl.structure.FabricStructureUtil;\n+import net.fabricmc.fabric.impl.structure.StructuresConfigHooks;\n+import net.fabricmc.fabric.mixin.structure.FlatChunkGeneratorConfigAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructureFeatureAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructuresConfigAccessor;\n+\n+/**\n+ * A builder for registering custom structures.\n+ *\n+ * <p>Example usage:\n+ * <pre>{@code\n+ * StructureFeature structure = new MyStructure(DefaultFeatureConfig.CODEC);\n+ * ConfiguredStructureFeature<DefaultFeatureConfig, ? extends StructureFeature<DefaultFeatureConfig>> configuredStructure\n+ *     = structure.configure(new DefaultFeatureConfig());\n+ * FabricStructureBuilder.create()", "originalCommit": "4d4a3f674a2ea90c753bef7ef83e3d0e39f8e6a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU0NzQ1OA==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460547458", "bodyText": "Oops", "author": "Earthcomputer", "createdAt": "2020-07-26T16:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU0NzMzMQ=="}], "type": "inlineReview"}, {"oid": "d28978bb9ae2b90993bd991bff9d5aededd28882", "url": "https://github.com/FabricMC/fabric/commit/d28978bb9ae2b90993bd991bff9d5aededd28882", "message": "Update fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/api/structure/v1/FabricStructureBuilder.java\n\nCo-authored-by: shartte <shartte@users.noreply.github.com>", "committedDate": "2020-07-26T16:34:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU0Nzg2Mw==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460547863", "bodyText": "I think the description here was flipped.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @param spacing The minimum distance between 2 structures of this type.\n          \n          \n            \n            \t * @param separation The average distance between 2 structures of this type along the X and Z axes.\n          \n          \n            \n            \t * @param spacing The average distance between 2 structures of this type along the X and Z axes in chunks.\n          \n          \n            \n            \t * @param separation The minimum distance between 2 structures of this type in chunks. Must be less than spacing.", "author": "shartte", "createdAt": "2020-07-26T16:38:06Z", "path": "fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/api/structure/v1/FabricStructureBuilder.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.structure.v1;\n+\n+import java.util.Objects;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import net.minecraft.util.Identifier;\n+import net.minecraft.world.gen.GenerationStep;\n+import net.minecraft.world.gen.chunk.StructureConfig;\n+import net.minecraft.world.gen.chunk.StructuresConfig;\n+import net.minecraft.world.gen.feature.ConfiguredStructureFeature;\n+import net.minecraft.world.gen.feature.FeatureConfig;\n+import net.minecraft.world.gen.feature.StructureFeature;\n+\n+import net.fabricmc.fabric.impl.structure.FabricStructureUtil;\n+import net.fabricmc.fabric.impl.structure.StructuresConfigHooks;\n+import net.fabricmc.fabric.mixin.structure.FlatChunkGeneratorConfigAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructureFeatureAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructuresConfigAccessor;\n+\n+/**\n+ * A builder for registering custom structures.\n+ *\n+ * <p>Example usage:\n+ * <pre>{@code\n+ * StructureFeature structure = new MyStructure(DefaultFeatureConfig.CODEC);\n+ * ConfiguredStructureFeature<DefaultFeatureConfig, ? extends StructureFeature<DefaultFeatureConfig>> configuredStructure\n+ *     = structure.configure(new DefaultFeatureConfig());\n+ * FabricStructureBuilder.create(new Identifier(\"mymod:mystructure\"), structure)\n+ *     .step(GenerationStep.Feature.SURFACE_STRUCTURES) // required\n+ *     .defaultConfig(32, 8, 12345) // required\n+ *     .superflatFeature(configuredStructure)\n+ *     .register();}\n+ * </pre></p>\n+ *\n+ * <p>This class does <i>not</i> add structures to biomes for you, you have to do that yourself. You may also need to\n+ * register custom structure pieces yourself.</p>\n+ */\n+public final class FabricStructureBuilder<FC extends FeatureConfig, S extends StructureFeature<FC>> {\n+\tprivate final Identifier id;\n+\tprivate final S structure;\n+\tprivate GenerationStep.Feature step;\n+\tprivate StructureConfig defaultConfig;\n+\tprivate ConfiguredStructureFeature<FC, ? extends StructureFeature<FC>> superflatFeature;\n+\tprivate boolean adjustsSurface = false;\n+\n+\tprivate FabricStructureBuilder(Identifier id, S structure) {\n+\t\tthis.id = id;\n+\t\tthis.structure = structure;\n+\t}\n+\n+\t/**\n+\t * Creates a new {@code FabricStructureBuilder} for registering a structure.\n+\t *\n+\t * @param id The structure ID.\n+\t * @param structure The {@linkplain StructureFeature} you want to register.\n+\t */\n+\tpublic static <FC extends FeatureConfig, S extends StructureFeature<FC>> FabricStructureBuilder<FC, S> create(Identifier id, S structure) {\n+\t\tObjects.requireNonNull(id, \"id must not be null\");\n+\t\tObjects.requireNonNull(structure, \"structure must not be null\");\n+\t\treturn new FabricStructureBuilder<>(id, structure);\n+\t}\n+\n+\t/**\n+\t * Sets the generation step of this structure. The generation step specifies when the structure is generated, to\n+\t * ensure they are generated in the correct order to reduce the amount of floating blocks.\n+\t *\n+\t * <p>The most commonly used values for structures are {@linkplain GenerationStep.Feature#SURFACE_STRUCTURES} and\n+\t * {@linkplain GenerationStep.Feature#UNDERGROUND_STRUCTURES}, however technically any value in the\n+\t * {@linkplain GenerationStep.Feature} enum may be used.</p>\n+\t *\n+\t * <p>This is a required option.</p>\n+\t */\n+\tpublic FabricStructureBuilder<FC, S> step(GenerationStep.Feature step) {\n+\t\tObjects.requireNonNull(step, \"step must not be null\");\n+\t\tthis.step = step;\n+\t\treturn this;\n+\t}\n+\n+\t/**\n+\t * Sets the default {@linkplain StructureConfig} for this structure. See the alternative\n+\t * {@linkplain #defaultConfig(int, int, int)} for details.\n+\t *\n+\t * <p>This is a required option.</p>\n+\t */\n+\tpublic FabricStructureBuilder<FC, S> defaultConfig(StructureConfig config) {\n+\t\tObjects.requireNonNull(config, \"config must not be null\");\n+\t\tthis.defaultConfig = config;\n+\t\treturn this;\n+\t}\n+\n+\t/**\n+\t * Sets the default {@linkplain StructureConfig} for this structure. This sets the default configuration of where in\n+\t * the world to place structures.\n+\t *\n+\t * <p>Note: the {@code spacing} and {@code separation} options are subject to other checks for whether the structure\n+\t * can spawn, such as biome. If these checks always pass and the structure can spawn in every biome, then the\n+\t * description of these values below would be exactly correct.</p>\n+\t *\n+\t * <p>This is a required option. Vanilla needs it to function.</p>\n+\t *\n+\t * @param spacing The minimum distance between 2 structures of this type.\n+\t * @param separation The average distance between 2 structures of this type along the X and Z axes.", "originalCommit": "d28978bb9ae2b90993bd991bff9d5aededd28882", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU0ODI0Mw==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460548243", "bodyText": "Feel free to ignore this one\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t// update existing structure configs\n          \n          \n            \n            \t\t// update existing sets of structure configs", "author": "shartte", "createdAt": "2020-07-26T16:41:53Z", "path": "fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/api/structure/v1/FabricStructureBuilder.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.structure.v1;\n+\n+import java.util.Objects;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import net.minecraft.util.Identifier;\n+import net.minecraft.world.gen.GenerationStep;\n+import net.minecraft.world.gen.chunk.StructureConfig;\n+import net.minecraft.world.gen.chunk.StructuresConfig;\n+import net.minecraft.world.gen.feature.ConfiguredStructureFeature;\n+import net.minecraft.world.gen.feature.FeatureConfig;\n+import net.minecraft.world.gen.feature.StructureFeature;\n+\n+import net.fabricmc.fabric.impl.structure.FabricStructureUtil;\n+import net.fabricmc.fabric.impl.structure.StructuresConfigHooks;\n+import net.fabricmc.fabric.mixin.structure.FlatChunkGeneratorConfigAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructureFeatureAccessor;\n+import net.fabricmc.fabric.mixin.structure.StructuresConfigAccessor;\n+\n+/**\n+ * A builder for registering custom structures.\n+ *\n+ * <p>Example usage:\n+ * <pre>{@code\n+ * StructureFeature structure = new MyStructure(DefaultFeatureConfig.CODEC);\n+ * ConfiguredStructureFeature<DefaultFeatureConfig, ? extends StructureFeature<DefaultFeatureConfig>> configuredStructure\n+ *     = structure.configure(new DefaultFeatureConfig());\n+ * FabricStructureBuilder.create(new Identifier(\"mymod:mystructure\"), structure)\n+ *     .step(GenerationStep.Feature.SURFACE_STRUCTURES) // required\n+ *     .defaultConfig(32, 8, 12345) // required\n+ *     .superflatFeature(configuredStructure)\n+ *     .register();}\n+ * </pre></p>\n+ *\n+ * <p>This class does <i>not</i> add structures to biomes for you, you have to do that yourself. You may also need to\n+ * register custom structure pieces yourself.</p>\n+ */\n+public final class FabricStructureBuilder<FC extends FeatureConfig, S extends StructureFeature<FC>> {\n+\tprivate final Identifier id;\n+\tprivate final S structure;\n+\tprivate GenerationStep.Feature step;\n+\tprivate StructureConfig defaultConfig;\n+\tprivate ConfiguredStructureFeature<FC, ? extends StructureFeature<FC>> superflatFeature;\n+\tprivate boolean adjustsSurface = false;\n+\n+\tprivate FabricStructureBuilder(Identifier id, S structure) {\n+\t\tthis.id = id;\n+\t\tthis.structure = structure;\n+\t}\n+\n+\t/**\n+\t * Creates a new {@code FabricStructureBuilder} for registering a structure.\n+\t *\n+\t * @param id The structure ID.\n+\t * @param structure The {@linkplain StructureFeature} you want to register.\n+\t */\n+\tpublic static <FC extends FeatureConfig, S extends StructureFeature<FC>> FabricStructureBuilder<FC, S> create(Identifier id, S structure) {\n+\t\tObjects.requireNonNull(id, \"id must not be null\");\n+\t\tObjects.requireNonNull(structure, \"structure must not be null\");\n+\t\treturn new FabricStructureBuilder<>(id, structure);\n+\t}\n+\n+\t/**\n+\t * Sets the generation step of this structure. The generation step specifies when the structure is generated, to\n+\t * ensure they are generated in the correct order to reduce the amount of floating blocks.\n+\t *\n+\t * <p>The most commonly used values for structures are {@linkplain GenerationStep.Feature#SURFACE_STRUCTURES} and\n+\t * {@linkplain GenerationStep.Feature#UNDERGROUND_STRUCTURES}, however technically any value in the\n+\t * {@linkplain GenerationStep.Feature} enum may be used.</p>\n+\t *\n+\t * <p>This is a required option.</p>\n+\t */\n+\tpublic FabricStructureBuilder<FC, S> step(GenerationStep.Feature step) {\n+\t\tObjects.requireNonNull(step, \"step must not be null\");\n+\t\tthis.step = step;\n+\t\treturn this;\n+\t}\n+\n+\t/**\n+\t * Sets the default {@linkplain StructureConfig} for this structure. See the alternative\n+\t * {@linkplain #defaultConfig(int, int, int)} for details.\n+\t *\n+\t * <p>This is a required option.</p>\n+\t */\n+\tpublic FabricStructureBuilder<FC, S> defaultConfig(StructureConfig config) {\n+\t\tObjects.requireNonNull(config, \"config must not be null\");\n+\t\tthis.defaultConfig = config;\n+\t\treturn this;\n+\t}\n+\n+\t/**\n+\t * Sets the default {@linkplain StructureConfig} for this structure. This sets the default configuration of where in\n+\t * the world to place structures.\n+\t *\n+\t * <p>Note: the {@code spacing} and {@code separation} options are subject to other checks for whether the structure\n+\t * can spawn, such as biome. If these checks always pass and the structure can spawn in every biome, then the\n+\t * description of these values below would be exactly correct.</p>\n+\t *\n+\t * <p>This is a required option. Vanilla needs it to function.</p>\n+\t *\n+\t * @param spacing The minimum distance between 2 structures of this type.\n+\t * @param separation The average distance between 2 structures of this type along the X and Z axes.\n+\t * @param salt The random salt of the structure. This does not affect how common the structure is, but every\n+\t *                structure must have an unique {@code salt} in order to spawn in different places.\n+\t *\n+\t * @see #defaultConfig(StructureConfig)\n+\t */\n+\tpublic FabricStructureBuilder<FC, S> defaultConfig(int spacing, int separation, int salt) {\n+\t\treturn defaultConfig(new StructureConfig(spacing, separation, salt));\n+\t}\n+\n+\t/**\n+\t * Sets the structure configuration which spawns in superflat worlds. If unset, this structure will not spawn in\n+\t * superflat worlds.\n+\t *\n+\t * @see #superflatFeature(FeatureConfig)\n+\t */\n+\tpublic FabricStructureBuilder<FC, S> superflatFeature(ConfiguredStructureFeature<FC, ? extends StructureFeature<FC>> superflatFeature) {\n+\t\tObjects.requireNonNull(superflatFeature, \"superflatFeature must not be null\");\n+\t\tthis.superflatFeature = superflatFeature;\n+\t\treturn this;\n+\t}\n+\n+\t/**\n+\t * Sets the structure configuration which spawns in superflat worlds. If unset, this structure will not spawn in\n+\t * superflat worlds.\n+\t *\n+\t * @see #superflatFeature(ConfiguredStructureFeature)\n+\t */\n+\tpublic FabricStructureBuilder<FC, S> superflatFeature(FC config) {\n+\t\treturn superflatFeature(structure.configure(config));\n+\t}\n+\n+\t/**\n+\t * Causes structure pieces of this structure to adjust the surface of the world to fit them, so that they don't\n+\t * stick out of or into the ground.\n+\t */\n+\tpublic FabricStructureBuilder<FC, S> adjustsSurface() {\n+\t\tthis.adjustsSurface = true;\n+\t\treturn this;\n+\t}\n+\n+\t/**\n+\t * Registers this structure and applies the other changes from the {@linkplain FabricStructureBuilder}.\n+\t */\n+\tpublic S register() {\n+\t\tObjects.requireNonNull(step, \"Structure \\\"\" + id + \"\\\" is missing a generation step\");\n+\t\tObjects.requireNonNull(defaultConfig, \"Structure \\\"\" + id + \"\\\" is missing a default config\");\n+\n+\t\t// Ensure StructuresConfig class is initialized, so the assertion in its static {} block doesn't fail\n+\t\tStructuresConfig.DEFAULT_STRUCTURES.size();\n+\n+\t\tStructureFeatureAccessor.callRegister(id.toString(), structure, step);\n+\n+\t\tif (!id.toString().equals(structure.getName())) {\n+\t\t\t// mods should not be overriding getName, but if they do and it's incorrect, this gives an error\n+\t\t\tthrow new IllegalStateException(String.format(\"Structure \\\"%s\\\" has mismatching name \\\"%s\\\". Structures should not override \\\"getName\\\".\", id, structure.getName()));\n+\t\t}\n+\n+\t\tStructuresConfigAccessor.setDefaultStructures(ImmutableMap.<StructureFeature<?>, StructureConfig>builder()\n+\t\t\t\t.putAll(StructuresConfig.DEFAULT_STRUCTURES)\n+\t\t\t\t.put(structure, defaultConfig)\n+\t\t\t\t.build());\n+\n+\t\tif (superflatFeature != null) {\n+\t\t\tFlatChunkGeneratorConfigAccessor.getStructureToFeatures().put(structure, superflatFeature);\n+\t\t}\n+\n+\t\tif (adjustsSurface) {\n+\t\t\tStructureFeatureAccessor.setSurfaceAdjustingStructures(ImmutableList.<StructureFeature<?>>builder()\n+\t\t\t\t\t.addAll(StructureFeature.field_24861)\n+\t\t\t\t\t.add(structure)\n+\t\t\t\t\t.build());\n+\t\t}\n+\n+\t\t// update existing structure configs", "originalCommit": "d28978bb9ae2b90993bd991bff9d5aededd28882", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU0ODQ1Mg==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460548452", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic static final Set<StructuresConfig> DEFAULT_STRUCTURES_CONFIGS = Collections.newSetFromMap(new WeakHashMap<>());\n          \n          \n            \n            \t// This tracks all StructuresConfig objects that have been created with the default set of structures\n          \n          \n            \n            \t// in order to add mod-created structures that are registered later\n          \n          \n            \n            \tpublic static final Set<StructuresConfig> DEFAULT_STRUCTURES_CONFIGS = Collections.newSetFromMap(new WeakHashMap<>());", "author": "shartte", "createdAt": "2020-07-26T16:44:21Z", "path": "fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/impl/structure/FabricStructureUtil.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.structure;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.WeakHashMap;\n+\n+import net.minecraft.world.gen.chunk.StructuresConfig;\n+\n+public final class FabricStructureUtil {\n+\tprivate FabricStructureUtil() { }\n+\n+\tpublic static final Set<StructuresConfig> DEFAULT_STRUCTURES_CONFIGS = Collections.newSetFromMap(new WeakHashMap<>());", "originalCommit": "d28978bb9ae2b90993bd991bff9d5aededd28882", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU0ODc2NQ==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r460548765", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t@Inject(method = \"<init>(Z)V\", at = @At(\"RETURN\"))\n          \n          \n            \n            \t// This constructor of StructuresConfig initializes it with the default set of structures.\n          \n          \n            \n            \t// Since a mod can register its structures later, we need to keep track of the object created\n          \n          \n            \n            \t// here, so that we can add new structures to it later.\n          \n          \n            \n            \t@Inject(method = \"<init>(Z)V\", at = @At(\"RETURN\"))", "author": "shartte", "createdAt": "2020-07-26T16:47:22Z", "path": "fabric-structure-api-v1/src/main/java/net/fabricmc/fabric/mixin/structure/MixinStructuresConfig.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.structure;\n+\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.world.gen.chunk.StructureConfig;\n+import net.minecraft.world.gen.chunk.StructuresConfig;\n+import net.minecraft.world.gen.feature.StructureFeature;\n+\n+import net.fabricmc.fabric.impl.structure.FabricStructureUtil;\n+import net.fabricmc.fabric.impl.structure.StructuresConfigHooks;\n+\n+@Mixin(StructuresConfig.class)\n+public class MixinStructuresConfig implements StructuresConfigHooks {\n+\t@Shadow\n+\t@Final\n+\tprivate Map<StructureFeature<?>, StructureConfig> structures;\n+\n+\t@Inject(method = \"<init>(Z)V\", at = @At(\"RETURN\"))", "originalCommit": "d28978bb9ae2b90993bd991bff9d5aededd28882", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "47f5012b7b4c7122636cd8381b1370da3feaceb0", "url": "https://github.com/FabricMC/fabric/commit/47f5012b7b4c7122636cd8381b1370da3feaceb0", "message": "Apply review suggestions", "committedDate": "2020-08-02T07:53:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkyMTI1MQ==", "url": "https://github.com/FabricMC/fabric/pull/917#discussion_r468921251", "bodyText": "Hopefully modmuss's biome pr will remove the need for this.", "author": "i509VCB", "createdAt": "2020-08-11T23:31:42Z", "path": "fabric-structure-api-v1/src/testmod/java/net/fabricmc/fabric/test/structure/mixin/MixinDefaultBiomeCreator.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.structure.mixin;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.biome.Biome;\n+import net.minecraft.world.biome.DefaultBiomeCreator;\n+\n+import net.fabricmc.fabric.test.structure.StructureTest;\n+\n+@Mixin(DefaultBiomeCreator.class)\n+public class MixinDefaultBiomeCreator {\n+\t@Inject(method = \"createPlains\", at = @At(\"RETURN\"))\n+\tprivate static void addCustomStructure(String parent, boolean sunflower, CallbackInfoReturnable<Biome> cir) {\n+\t\tif (!sunflower) {\n+\t\t\tcir.getReturnValue().addStructureFeature(StructureTest.CONFIGURED_STRUCTURE);", "originalCommit": "47f5012b7b4c7122636cd8381b1370da3feaceb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fee7a3e0c0623f7633924febab4e05c75d774bed", "url": "https://github.com/FabricMC/fabric/commit/fee7a3e0c0623f7633924febab4e05c75d774bed", "message": "Merge branch '1.16' into feature/structures", "committedDate": "2020-08-15T14:31:37Z", "type": "commit"}, {"oid": "1900725fdaaa1c79782db8b5005f408fa24ae108", "url": "https://github.com/FabricMC/fabric/commit/1900725fdaaa1c79782db8b5005f408fa24ae108", "message": "Update to 1.16.2", "committedDate": "2020-08-15T14:51:39Z", "type": "commit"}]}