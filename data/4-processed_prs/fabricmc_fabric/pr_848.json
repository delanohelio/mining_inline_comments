{"pr_number": 848, "pr_title": "Lifecycle Events: Part 2, Electric Boogaloo", "pr_createdAt": "2020-06-27T05:21:29Z", "pr_url": "https://github.com/FabricMC/fabric/pull/848", "timeline": [{"oid": "9fd59207a70b9b5696bce11a7963fa78763e56f8", "url": "https://github.com/FabricMC/fabric/commit/9fd59207a70b9b5696bce11a7963fa78763e56f8", "message": "Save event", "committedDate": "2020-07-01T21:05:34Z", "type": "forcePushed"}, {"oid": "5f3e31c611fe1cb2b3c7a30dcad88dcb7a4f0d72", "url": "https://github.com/FabricMC/fabric/commit/5f3e31c611fe1cb2b3c7a30dcad88dcb7a4f0d72", "message": "Add a few new server lifecycle events\n\nServer starting, Load World, Before server resource reload, After server resource reload", "committedDate": "2020-07-09T21:08:38Z", "type": "commit"}, {"oid": "2ccbfca50d4192eabc2d1ca81899ae908c1362d8", "url": "https://github.com/FabricMC/fabric/commit/2ccbfca50d4192eabc2d1ca81899ae908c1362d8", "message": "Save event", "committedDate": "2020-07-09T21:08:38Z", "type": "commit"}, {"oid": "b8f30a142dcc41e961448798a059253240248ab2", "url": "https://github.com/FabricMC/fabric/commit/b8f30a142dcc41e961448798a059253240248ab2", "message": "Split world load into ServerWorldEvents, add failure event for data pack reload", "committedDate": "2020-07-09T22:21:21Z", "type": "commit"}, {"oid": "b8f30a142dcc41e961448798a059253240248ab2", "url": "https://github.com/FabricMC/fabric/commit/b8f30a142dcc41e961448798a059253240248ab2", "message": "Split world load into ServerWorldEvents, add failure event for data pack reload", "committedDate": "2020-07-09T22:21:21Z", "type": "forcePushed"}, {"oid": "4d124329f73633ebf4bb032b186e971004b77cea", "url": "https://github.com/FabricMC/fabric/commit/4d124329f73633ebf4bb032b186e971004b77cea", "message": "cause", "committedDate": "2020-07-09T22:24:13Z", "type": "commit"}, {"oid": "4d124329f73633ebf4bb032b186e971004b77cea", "url": "https://github.com/FabricMC/fabric/commit/4d124329f73633ebf4bb032b186e971004b77cea", "message": "cause", "committedDate": "2020-07-09T22:24:13Z", "type": "forcePushed"}, {"oid": "37da944dcce4820477c5542ac1ac6a53bff265c0", "url": "https://github.com/FabricMC/fabric/commit/37da944dcce4820477c5542ac1ac6a53bff265c0", "message": "Merge fail and regular end.", "committedDate": "2020-07-09T22:55:17Z", "type": "commit"}, {"oid": "74fed6336426fafdbab54205474a381c2115f805", "url": "https://github.com/FabricMC/fabric/commit/74fed6336426fafdbab54205474a381c2115f805", "message": "Present tense lol", "committedDate": "2020-07-09T22:57:45Z", "type": "commit"}, {"oid": "9097c148da72e7311ab00635a1d2cad54942e061", "url": "https://github.com/FabricMC/fabric/commit/9097c148da72e7311ab00635a1d2cad54942e061", "message": "So we can just plainly specify the system properties", "committedDate": "2020-07-09T23:00:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4NjgyNQ==", "url": "https://github.com/FabricMC/fabric/pull/848#discussion_r452586825", "bodyText": "I highly doubt the function passed to exceptionally runs on completable future's default executor's thread than on the server thread.", "author": "liach", "createdAt": "2020-07-10T02:19:35Z", "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/mixin/event/lifecycle/MinecraftServerMixin.java", "diffHunk": "@@ -73,4 +89,33 @@ private void closeWorld(CallbackInfo ci, Iterator<ServerWorld> worlds, ServerWor\n \t\t\tServerBlockEntityEvents.BLOCK_ENTITY_UNLOAD.invoker().onUnload(blockEntity, serverWorld);\n \t\t}\n \t}\n+\n+\t// The locals you have to manage for an inject are insane. And do it twice. A redirect is much cleaner.\n+\t// Here is what it looks like with an inject: https://gist.github.com/i509VCB/f80077cc536eb4dba62b794eba5611c1\n+\t@Redirect(method = \"createWorlds\", at = @At(value = \"INVOKE\", target = \"Ljava/util/Map;put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\"))\n+\tprivate <K, V> V onLoadWorld(Map<K, V> worlds, K registryKey, V serverWorld) {\n+\t\tfinal V result = worlds.put(registryKey, serverWorld);\n+\t\tServerWorldEvents.LOAD.invoker().onWorldLoad((MinecraftServer) (Object) this, (ServerWorld) serverWorld);\n+\n+\t\treturn result;\n+\t}\n+\n+\t@Inject(method = \"reloadResources\", at = @At(\"HEAD\"))\n+\tprivate void beforeResourceReload(Collection<String> collection, CallbackInfoReturnable<CompletableFuture<Void>> cir) {\n+\t\tServerLifecycleEvents.START_DATA_PACK_RELOAD.invoker().startDataPackReload((MinecraftServer) (Object) this, this.serverResourceManager);\n+\t}\n+\n+\t@Inject(method = \"method_29440(Ljava/util/Collection;Lnet/minecraft/resource/ServerResourceManager;)V\", at = @At(\"TAIL\"))\n+\tprivate void afterResourceReload(Collection<String> enabledPacks, ServerResourceManager serverResourceManager, CallbackInfo ci) {\n+\t\tServerLifecycleEvents.END_DATA_PACK_RELOAD.invoker().endDataPackReload((MinecraftServer) (Object) this, this.serverResourceManager, true);\n+\t}\n+\n+\t@Inject(method = \"reloadResources\", at = @At(\"TAIL\"))\n+\tprivate void addResourceReloadFailureCallback(Collection<String> collection, CallbackInfoReturnable<CompletableFuture<Void>> cir) {\n+\t\t// Hook into fail\n+\t\tcir.getReturnValue().exceptionally(throwable -> {", "originalCommit": "9097c148da72e7311ab00635a1d2cad54942e061", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU5OTA2MA==", "url": "https://github.com/FabricMC/fabric/pull/848#discussion_r452599060", "bodyText": "I actually tested that, it does run on server thread.", "author": "i509VCB", "createdAt": "2020-07-10T03:10:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4NjgyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYwMDU2OA==", "url": "https://github.com/FabricMC/fabric/pull/848#discussion_r452600568", "bodyText": "I actually tested that\n\nThis sure runs on server thread if the completable future is completed. but if it isn't completed at that time, think something wrong will happen. Java only added a safe version of exceptionally exceptionallyAsync in 12\nhttps://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/concurrent/CompletionStage.html#exceptionallyAsync(java.util.function.Function,java.util.concurrent.Executor)\nAs a result you should use handleAsync instead https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/concurrent/CompletionStage.html#handleAsync(java.util.function.BiFunction,java.util.concurrent.Executor)\nsee https://stackoverflow.com/questions/38254268/completablefuture-exceptionally-with-executor", "author": "liach", "createdAt": "2020-07-10T03:17:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4NjgyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYwNzQxNQ==", "url": "https://github.com/FabricMC/fabric/pull/848#discussion_r452607415", "bodyText": "So handleAsync actually reduces the amount of injects we need by one. Should this be using the future's current thread or the server thread? (within handleAsync as the executor)", "author": "i509VCB", "createdAt": "2020-07-10T03:48:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4NjgyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4MTQ1OA==", "url": "https://github.com/FabricMC/fabric/pull/848#discussion_r453081458", "bodyText": "Handle async with server executor would probably be executed 1 tick after the reload is done given how server task scheduling works, but should be safe if we look at data packs' functions (\"minecraft:load\" function tag is executed 1 tick late too) \ud83d\udc4d so your current work should be great", "author": "liach", "createdAt": "2020-07-10T21:17:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4NjgyNQ=="}], "type": "inlineReview"}, {"oid": "ec5435801caba381fc0cff8271e441e500243bba", "url": "https://github.com/FabricMC/fabric/commit/ec5435801caba381fc0cff8271e441e500243bba", "message": "use handleAsync instead", "committedDate": "2020-07-10T05:59:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyMjkyMQ==", "url": "https://github.com/FabricMC/fabric/pull/848#discussion_r453222921", "bodyText": "Doesn't that @At need a remap = false so that the mixin AP doesn't complain?", "author": "Juuxel", "createdAt": "2020-07-11T18:44:00Z", "path": "fabric-lifecycle-events-v1/src/main/java/net/fabricmc/fabric/mixin/event/lifecycle/MinecraftServerMixin.java", "diffHunk": "@@ -73,4 +89,28 @@ private void closeWorld(CallbackInfo ci, Iterator<ServerWorld> worlds, ServerWor\n \t\t\tServerBlockEntityEvents.BLOCK_ENTITY_UNLOAD.invoker().onUnload(blockEntity, serverWorld);\n \t\t}\n \t}\n+\n+\t// The locals you have to manage for an inject are insane. And do it twice. A redirect is much cleaner.\n+\t// Here is what it looks like with an inject: https://gist.github.com/i509VCB/f80077cc536eb4dba62b794eba5611c1\n+\t@Redirect(method = \"createWorlds\", at = @At(value = \"INVOKE\", target = \"Ljava/util/Map;put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\"))", "originalCommit": "ec5435801caba381fc0cff8271e441e500243bba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyMzQxOQ==", "url": "https://github.com/FabricMC/fabric/pull/848#discussion_r453223419", "bodyText": "Probably a larger issue tbf since the mixin ap screechs on half the modules", "author": "i509VCB", "createdAt": "2020-07-11T18:50:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyMjkyMQ=="}], "type": "inlineReview"}]}