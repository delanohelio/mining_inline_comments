{"pr_number": 1053, "pr_title": "Ported 1.16.1 biomes-api-v1 to 1.16.2", "pr_createdAt": "2020-08-29T14:36:15Z", "pr_url": "https://github.com/FabricMC/fabric/pull/1053", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMDQyOA==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479800428", "bodyText": "I would suggest using InternalBiomeUtils.fromRawId similar to InternalBiomeUtils.getRawId so we can make them both use a DynamicRegistryManager if needed", "author": "CheaterCodes", "createdAt": "2020-08-30T18:22:02Z", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeUtils.java", "diffHunk": "@@ -138,7 +148,7 @@ public static void injectBiomesIntoClimate(LayerRandomnessSource random, int[] v\n \t\tif (reqWeightSum < vanillaArray.length) {\n \t\t\t// Vanilla biome; look it up from the vanilla array and transform accordingly.\n \n-\t\t\tresult.accept(transformBiome(random, BuiltinRegistries.BIOME.get(vanillaArray[(int) reqWeightSum]), climate));\n+\t\t\tresult.accept(transformBiome(random, Biomes.fromRawId(vanillaArray[(int) reqWeightSum]), climate));", "originalCommit": "6273175cdadcc9ff3b5993dc29df425220e29c0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxOTQ4OQ==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479819489", "bodyText": "Vanilla still uses Biomes.fromRawId itself in a place where a DynamicRegistryManager is unavailable, so this won't help.", "author": "shartte", "createdAt": "2020-08-30T21:47:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMDQyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxOTYzMw==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479819633", "bodyText": "You mean BiomeLayer.sample? I would've changed that too.\nDunno, to me that would feel better.", "author": "CheaterCodes", "createdAt": "2020-08-30T21:49:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMDQyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMDc5OA==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479800798", "bodyText": "I would suggest capturing the biomeRegistry in VanillaLayeredBiomeSource.<init> and use that one theoughout for the conversion RegistryKey <-> RawId. That should be compatible with using the DynamicRegistryManager then (and I think also json biomes).\nWe'd have to check if that capture covers all use cases, but I think it does.", "author": "CheaterCodes", "createdAt": "2020-08-30T18:25:33Z", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeUtils.java", "diffHunk": "@@ -148,7 +158,22 @@ public static void injectBiomesIntoClimate(LayerRandomnessSource random, int[] v\n \t\t}\n \t}\n \n-\tpublic static void recreateChunkGenerators(GeneratorOptions generatorOptions) {\n-\t\t((DimensionOptionsAccessor) (Object) generatorOptions.getDimensionMap().get(DimensionOptions.NETHER)).setChunkGenerator(DimensionTypeAccessor.createNetherGenerator(generatorOptions.getSeed()));\n+\tpublic static int getRawId(RegistryKey<Biome> key) {\n+\t\treturn BuiltinRegistries.BIOME.getRawId(BuiltinRegistries.BIOME.method_31140(key));", "originalCommit": "6273175cdadcc9ff3b5993dc29df425220e29c0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxOTUzNA==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479819534", "bodyText": "This will still not fix the Vanilla logic that also accesses the raw-id mapping directly and thus just complicates the logic needlessly.", "author": "shartte", "createdAt": "2020-08-30T21:48:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMDc5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMTE1Ng==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479801156", "bodyText": "This validation doesn't seem great to me. How does this interact with registering to DynamicRegistryManager.BUILTIN or using json biomes?\nI'd suggest dropping this validation for the initial PR.\nThis seems like it could cause issues, and that's the last thing we want validation to do.", "author": "CheaterCodes", "createdAt": "2020-08-30T18:29:23Z", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeUtils.java", "diffHunk": "@@ -148,7 +158,22 @@ public static void injectBiomesIntoClimate(LayerRandomnessSource random, int[] v\n \t\t}\n \t}\n \n-\tpublic static void recreateChunkGenerators(GeneratorOptions generatorOptions) {\n-\t\t((DimensionOptionsAccessor) (Object) generatorOptions.getDimensionMap().get(DimensionOptions.NETHER)).setChunkGenerator(DimensionTypeAccessor.createNetherGenerator(generatorOptions.getSeed()));\n+\tpublic static int getRawId(RegistryKey<Biome> key) {\n+\t\treturn BuiltinRegistries.BIOME.getRawId(BuiltinRegistries.BIOME.method_31140(key));\n+\t}\n+\n+\t/**\n+\t * Makes sure that the given registry key is mapped in {@link Biomes}. This mapping may be absent\n+\t * if mods register their biomes only in {@link BuiltinRegistries#BIOME}, and not using the\n+\t * private method in {@link Biomes}.\n+\t */\n+\tpublic static void ensureIdMapping(RegistryKey<Biome> biomeKey) {", "originalCommit": "6273175cdadcc9ff3b5993dc29df425220e29c0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxOTc3NQ==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479819775", "bodyText": "It doesn't interact with it. This API will be used by modders in their Mod initializers, when no dynamic registry manager exists. The only way to ensure only properly registered Biomes are used is to validate against the BuiltInRegistries, and follow the same general approach Vanilla does.", "author": "shartte", "createdAt": "2020-08-30T21:51:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMTE1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMTY5Ng==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479801696", "bodyText": "I would suggest using InternalBiomeUtils.fromRawId similar to InternalBiomeUtils.getRawId so we can make them both use a DynamicRegistryManager if needed.", "author": "CheaterCodes", "createdAt": "2020-08-30T18:34:43Z", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinAddEdgeBiomesLayer.java", "diffHunk": "@@ -31,18 +32,18 @@\n import net.fabricmc.fabric.impl.biome.InternalBiomeUtils;\n \n /**\n- * Adds edges and shores specified in {@link OverworldBiomes#addEdgeBiome(Biome, Biome, double)} and {@link OverworldBiomes#addShoreBiome(Biome, Biome, double)} to the edges layer.\n+ * Adds edges and shores specified in {@link OverworldBiomes#addEdgeBiome(RegistryKey, RegistryKey, double)} and {@link OverworldBiomes#addShoreBiome(RegistryKey, RegistryKey, double)} to the edges layer.\n  */\n @Mixin(AddEdgeBiomesLayer.class)\n public class MixinAddEdgeBiomesLayer {\n \t@Inject(at = @At(\"HEAD\"), method = \"sample\", cancellable = true)\n \tprivate void sample(LayerRandomnessSource rand, int north, int east, int south, int west, int center, CallbackInfoReturnable<Integer> info) {\n-\t\tBiome centerBiome = BuiltinRegistries.BIOME.get(center);\n+\t\tRegistryKey<Biome> centerBiome = Biomes.fromRawId(center);", "originalCommit": "6273175cdadcc9ff3b5993dc29df425220e29c0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxOTgwNA==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479819804", "bodyText": "Answered above.", "author": "shartte", "createdAt": "2020-08-30T21:51:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMTY5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMTgxMA==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479801810", "bodyText": "I would suggest using InternalBiomeUtils.fromRawId similar to InternalBiomeUtils.getRawId so we can make them both use a DynamicRegistryManager if needed.", "author": "CheaterCodes", "createdAt": "2020-08-30T18:35:45Z", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinAddHillsLayer.java", "diffHunk": "@@ -48,9 +55,13 @@ private void sample(LayerRandomnessSource rand, LayerSampler biomeSampler, Layer\n \t\tfinal int biomeId = biomeSampler.sample(chunkX, chunkZ);\n \t\tint noiseSample = noiseSampler.sample(chunkX, chunkZ);\n \t\tint processedNoiseSample = (noiseSample - 2) % 29;\n-\t\tfinal Biome biome = BuiltinRegistries.BIOME.get(biomeId);\n+\t\tRegistryKey<Biome> key = Biomes.fromRawId(biomeId);", "originalCommit": "6273175cdadcc9ff3b5993dc29df425220e29c0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxOTgxMw==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479819813", "bodyText": "Answered above.", "author": "shartte", "createdAt": "2020-08-30T21:51:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMTgxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMTk0MA==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479801940", "bodyText": "I would suggest using InternalBiomeUtils.fromRawId similar to InternalBiomeUtils.getRawId so we can make them both use a DynamicRegistryManager if needed.", "author": "CheaterCodes", "createdAt": "2020-08-30T18:37:17Z", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinAddRiversLayer.java", "diffHunk": "@@ -18,42 +18,39 @@\n \n import java.util.Map;\n \n-import org.spongepowered.asm.mixin.Final;\n import org.spongepowered.asm.mixin.Mixin;\n-import org.spongepowered.asm.mixin.Shadow;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Inject;\n import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n \n-import net.minecraft.util.registry.BuiltinRegistries;\n+import net.minecraft.util.registry.RegistryKey;\n import net.minecraft.world.biome.Biome;\n+import net.minecraft.world.biome.Biomes;\n+import net.minecraft.world.biome.BuiltInBiomes;\n import net.minecraft.world.biome.layer.AddRiversLayer;\n import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n import net.minecraft.world.biome.layer.util.LayerSampler;\n \n import net.fabricmc.fabric.api.biomes.v1.OverworldBiomes;\n import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n+import net.fabricmc.fabric.impl.biome.InternalBiomeUtils;\n \n /**\n- * Sets river biomes specified with {@link OverworldBiomes#setRiverBiome(Biome, Biome)}.\n+ * Sets river biomes specified with {@link OverworldBiomes#setRiverBiome(RegistryKey, RegistryKey)}.\n  */\n @Mixin(AddRiversLayer.class)\n public class MixinAddRiversLayer {\n-\t@Shadow\n-\t@Final\n-\tprivate static int RIVER_ID;\n-\n \t@Inject(at = @At(\"HEAD\"), method = \"sample\", cancellable = true)\n \tprivate void sample(LayerRandomnessSource rand, LayerSampler landSampler, LayerSampler riverSampler, int x, int z, CallbackInfoReturnable<Integer> info) {\n \t\tint landBiomeId = landSampler.sample(x, z);\n-\t\tBiome landBiome = BuiltinRegistries.BIOME.get(landBiomeId);\n+\t\tRegistryKey<Biome> landBiomeKey = Biomes.fromRawId(landBiomeId);", "originalCommit": "6273175cdadcc9ff3b5993dc29df425220e29c0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxOTgyMQ==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479819821", "bodyText": "Answered above.", "author": "shartte", "createdAt": "2020-08-30T21:51:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMTk0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMjA4Ng==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479802086", "bodyText": "I would suggest... Ok, I think you get the point.", "author": "CheaterCodes", "createdAt": "2020-08-30T18:39:09Z", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinAddRiversLayer.java", "diffHunk": "@@ -18,42 +18,39 @@\n \n import java.util.Map;\n \n-import org.spongepowered.asm.mixin.Final;\n import org.spongepowered.asm.mixin.Mixin;\n-import org.spongepowered.asm.mixin.Shadow;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Inject;\n import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n \n-import net.minecraft.util.registry.BuiltinRegistries;\n+import net.minecraft.util.registry.RegistryKey;\n import net.minecraft.world.biome.Biome;\n+import net.minecraft.world.biome.Biomes;\n+import net.minecraft.world.biome.BuiltInBiomes;\n import net.minecraft.world.biome.layer.AddRiversLayer;\n import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n import net.minecraft.world.biome.layer.util.LayerSampler;\n \n import net.fabricmc.fabric.api.biomes.v1.OverworldBiomes;\n import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n+import net.fabricmc.fabric.impl.biome.InternalBiomeUtils;\n \n /**\n- * Sets river biomes specified with {@link OverworldBiomes#setRiverBiome(Biome, Biome)}.\n+ * Sets river biomes specified with {@link OverworldBiomes#setRiverBiome(RegistryKey, RegistryKey)}.\n  */\n @Mixin(AddRiversLayer.class)\n public class MixinAddRiversLayer {\n-\t@Shadow\n-\t@Final\n-\tprivate static int RIVER_ID;\n-\n \t@Inject(at = @At(\"HEAD\"), method = \"sample\", cancellable = true)\n \tprivate void sample(LayerRandomnessSource rand, LayerSampler landSampler, LayerSampler riverSampler, int x, int z, CallbackInfoReturnable<Integer> info) {\n \t\tint landBiomeId = landSampler.sample(x, z);\n-\t\tBiome landBiome = BuiltinRegistries.BIOME.get(landBiomeId);\n+\t\tRegistryKey<Biome> landBiomeKey = Biomes.fromRawId(landBiomeId);\n \n \t\tint riverBiomeId = riverSampler.sample(x, z);\n-\t\tMap<Biome, Biome> overworldRivers = InternalBiomeData.getOverworldRivers();\n+\t\tMap<RegistryKey<Biome>, RegistryKey<Biome>> overworldRivers = InternalBiomeData.getOverworldRivers();\n \n-\t\tif (overworldRivers.containsKey(landBiome) && riverBiomeId == RIVER_ID) {\n-\t\t\tBiome riverBiome = overworldRivers.get(landBiome);\n-\t\t\tinfo.setReturnValue(riverBiome == null ? landBiomeId : BuiltinRegistries.BIOME.getRawId(riverBiome));\n+\t\tif (overworldRivers.containsKey(landBiomeKey) && Biomes.fromRawId(riverBiomeId) == BuiltInBiomes.RIVER) {", "originalCommit": "6273175cdadcc9ff3b5993dc29df425220e29c0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxOTg0MQ==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479819841", "bodyText": "Answered above.", "author": "shartte", "createdAt": "2020-08-30T21:51:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMjA4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMjQzNQ==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479802435", "bodyText": "Same thing again.", "author": "CheaterCodes", "createdAt": "2020-08-30T18:42:34Z", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinSetBaseBiomesLayer.java", "diffHunk": "@@ -96,16 +82,16 @@ private void injectCoolBiomes(LayerRandomnessSource random, int value, CallbackI\n \t@Inject(at = @At(\"RETURN\"), method = \"sample\", cancellable = true)\n \tprivate void transformVariants(LayerRandomnessSource random, int value, CallbackInfoReturnable<Integer> info) {\n \t\tint biomeId = info.getReturnValueI();\n-\t\tBiome biome = BuiltinRegistries.BIOME.get(biomeId);\n+\t\tRegistryKey<Biome> biome = Biomes.fromRawId(biomeId);", "originalCommit": "6273175cdadcc9ff3b5993dc29df425220e29c0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxOTg1MA==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479819850", "bodyText": "Answered above.", "author": "shartte", "createdAt": "2020-08-30T21:51:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMjQzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMjg5OA==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479802898", "bodyText": "Just gonna mention that I like my approach in my fork better, but this is probably fine too.", "author": "CheaterCodes", "createdAt": "2020-08-30T18:47:49Z", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinMultiNoiseBiomeSource.java", "diffHunk": "@@ -20,33 +20,45 @@\n import java.util.List;\n import java.util.function.Supplier;\n \n+import com.google.common.collect.ImmutableList;\n import com.mojang.datafixers.util.Pair;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Inject;\n import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n \n+import net.minecraft.util.registry.Registry;\n import net.minecraft.world.biome.Biome;\n import net.minecraft.world.biome.source.MultiNoiseBiomeSource;\n \n import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n \n-@Mixin(MultiNoiseBiomeSource.class)\n+/**\n+ * This Mixin is responsible for adding mod-biomes to the NETHER preset in the MultiNoiseBiomeSource.\n+ */\n+@Mixin(MultiNoiseBiomeSource.Preset.class)\n public class MixinMultiNoiseBiomeSource {", "originalCommit": "6273175cdadcc9ff3b5993dc29df425220e29c0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgyMDM1NQ==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479820355", "bodyText": "That might actually be better. I'll investigate adopting that approach.", "author": "shartte", "createdAt": "2020-08-30T21:53:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMjg5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg4NzcxNw==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r483887717", "bodyText": "Adopted your approach", "author": "shartte", "createdAt": "2020-09-05T00:22:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMjg5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMzA5NQ==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479803095", "bodyText": "I know you disagree, but I'm still gonna comment that I don't think we should use BuiltinRegistries, but DynamicRegistryManager.BUILTIN. We can easily provide a getter for that registry too.", "author": "CheaterCodes", "createdAt": "2020-08-30T18:50:09Z", "path": "fabric-biomes-v1/src/testmod/java/net/fabricmc/fabric/test/biome/FabricBiomeTest.java", "diffHunk": "@@ -16,26 +16,52 @@\n \n package net.fabricmc.fabric.test.biome;\n \n-import net.minecraft.world.biome.DefaultBiomeCreator;\n import net.minecraft.util.Identifier;\n import net.minecraft.util.registry.BuiltinRegistries;\n import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n import net.minecraft.world.biome.Biome;\n-import net.minecraft.world.biome.Biomes;\n+import net.minecraft.world.biome.BuiltInBiomes;\n+import net.minecraft.world.biome.DefaultBiomeCreator;\n \n import net.fabricmc.api.ModInitializer;\n import net.fabricmc.fabric.api.biomes.v1.NetherBiomes;\n import net.fabricmc.fabric.api.biomes.v1.OverworldBiomes;\n+import net.fabricmc.fabric.api.biomes.v1.OverworldClimate;\n \n+/**\n+ * <b>NOTES FOR TESTING:</b>\n+ * When running with this test-mod, also test this when running a dedicated server since there\n+ * are significant differences between server + client and how they sync biomes.\n+ *\n+ * <p>Ingame, you can use <code>/locatebiome</code> since we use nether- and end-biomes in the overworld,\n+ * and vice-versa, making them easy to find to verify the injection worked.\n+ *\n+ * <p>If you don't find a biome right away, teleport far away (~10000 blocks) from spawn and try again.\n+ */\n public class FabricBiomeTest implements ModInitializer {\n \tpublic static final String MOD_ID = \"fabric-biome-api-v1-testmod\";\n \n-\t@Override public void onInitialize() {\n-\t\tBiome biome = Registry.register(BuiltinRegistries.BIOME, new Identifier(MOD_ID, \"test_crimson_forest\"), DefaultBiomeCreator.createCrimsonForest());\n-\t\tNetherBiomes.addNetherBiome(Biomes.BEACH, new Biome.MixedNoisePoint(0.0F, 0.5F, 0.0F, 0.0F, 0.1F));\n-\t\tNetherBiomes.addNetherBiome(biome, new Biome.MixedNoisePoint(0.0F, 0.5F, 0.0F, 0.0F, 0.275F));\n+\tprivate static final RegistryKey<Biome> TEST_CRIMSON_FOREST = RegistryKey.of(Registry.BIOME_KEY, new Identifier(MOD_ID, \"test_crimson_forest\"));\n+\n+\tprivate static final RegistryKey<Biome> CUSTOM_PLAINS = RegistryKey.of(Registry.BIOME_KEY, new Identifier(MOD_ID, \"custom_plains\"));\n+\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\tRegistry.register(BuiltinRegistries.BIOME, TEST_CRIMSON_FOREST.getValue(), DefaultBiomeCreator.createCrimsonForest());", "originalCommit": "6273175cdadcc9ff3b5993dc29df425220e29c0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgyMDU3Mg==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479820572", "bodyText": "Paired with #1052 this is the easiest to explain and safest approach of registering worldgen objects, since it is also very easy to follow through the code (and check against Vanilla's behavior)", "author": "shartte", "createdAt": "2020-08-30T21:54:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMzA5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMzE5MQ==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479803191", "bodyText": "Would be nice if we could get this to work using json biomes, even if you think we shouldn't use those.\nPutting this here cause it'd be part of the test mod.", "author": "CheaterCodes", "createdAt": "2020-08-30T18:51:13Z", "path": "fabric-biomes-v1/src/testmod/java/net/fabricmc/fabric/test/biome/FabricBiomeTest.java", "diffHunk": "@@ -16,26 +16,52 @@\n \n package net.fabricmc.fabric.test.biome;\n \n-import net.minecraft.world.biome.DefaultBiomeCreator;\n import net.minecraft.util.Identifier;\n import net.minecraft.util.registry.BuiltinRegistries;\n import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n import net.minecraft.world.biome.Biome;\n-import net.minecraft.world.biome.Biomes;\n+import net.minecraft.world.biome.BuiltInBiomes;\n+import net.minecraft.world.biome.DefaultBiomeCreator;\n \n import net.fabricmc.api.ModInitializer;\n import net.fabricmc.fabric.api.biomes.v1.NetherBiomes;\n import net.fabricmc.fabric.api.biomes.v1.OverworldBiomes;\n+import net.fabricmc.fabric.api.biomes.v1.OverworldClimate;\n \n+/**\n+ * <b>NOTES FOR TESTING:</b>\n+ * When running with this test-mod, also test this when running a dedicated server since there\n+ * are significant differences between server + client and how they sync biomes.\n+ *\n+ * <p>Ingame, you can use <code>/locatebiome</code> since we use nether- and end-biomes in the overworld,\n+ * and vice-versa, making them easy to find to verify the injection worked.\n+ *\n+ * <p>If you don't find a biome right away, teleport far away (~10000 blocks) from spawn and try again.\n+ */\n public class FabricBiomeTest implements ModInitializer {\n \tpublic static final String MOD_ID = \"fabric-biome-api-v1-testmod\";\n \n-\t@Override public void onInitialize() {\n-\t\tBiome biome = Registry.register(BuiltinRegistries.BIOME, new Identifier(MOD_ID, \"test_crimson_forest\"), DefaultBiomeCreator.createCrimsonForest());\n-\t\tNetherBiomes.addNetherBiome(Biomes.BEACH, new Biome.MixedNoisePoint(0.0F, 0.5F, 0.0F, 0.0F, 0.1F));\n-\t\tNetherBiomes.addNetherBiome(biome, new Biome.MixedNoisePoint(0.0F, 0.5F, 0.0F, 0.0F, 0.275F));\n+\tprivate static final RegistryKey<Biome> TEST_CRIMSON_FOREST = RegistryKey.of(Registry.BIOME_KEY, new Identifier(MOD_ID, \"test_crimson_forest\"));\n+\n+\tprivate static final RegistryKey<Biome> CUSTOM_PLAINS = RegistryKey.of(Registry.BIOME_KEY, new Identifier(MOD_ID, \"custom_plains\"));\n+\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\tRegistry.register(BuiltinRegistries.BIOME, TEST_CRIMSON_FOREST.getValue(), DefaultBiomeCreator.createCrimsonForest());\n+\n+\t\tNetherBiomes.addNetherBiome(BuiltInBiomes.BEACH, new Biome.MixedNoisePoint(0.0F, 0.5F, 0.0F, 0.0F, 0.1F));\n+\t\tNetherBiomes.addNetherBiome(TEST_CRIMSON_FOREST, new Biome.MixedNoisePoint(0.0F, 0.5F, 0.0F, 0.0F, 0.275F));\n+\n+\t\tRegistry.register(BuiltinRegistries.BIOME, CUSTOM_PLAINS.getValue(), DefaultBiomeCreator.createPlains(false));\n+\t\tOverworldBiomes.addBiomeVariant(BuiltInBiomes.PLAINS, CUSTOM_PLAINS, 1);\n+\n+\t\tOverworldBiomes.addEdgeBiome(BuiltInBiomes.PLAINS, BuiltInBiomes.END_BARRENS, 0.9);\n+\n+\t\tOverworldBiomes.addShoreBiome(BuiltInBiomes.FOREST, BuiltInBiomes.NETHER_WASTES, 0.9);\n+\n+\t\tOverworldBiomes.addHillsBiome(BuiltInBiomes.BAMBOO_JUNGLE, BuiltInBiomes.BASALT_DELTAS, 0.9);\n \n-\t\tBiome customPlains = Registry.register(BuiltinRegistries.BIOME, new Identifier(MOD_ID, \"custom_plains\"), DefaultBiomeCreator.createPlains(null, false));\n-\t\tOverworldBiomes.addBiomeVariant(Biomes.PLAINS, customPlains, 1);\n+\t\tOverworldBiomes.addContinentalBiome(BuiltInBiomes.END_HIGHLANDS, OverworldClimate.DRY, 0.5);\n \t}", "originalCommit": "6273175cdadcc9ff3b5993dc29df425220e29c0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgyMDg0Ng==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479820846", "bodyText": "I don't think defining the same thing you could define with a constructor call in a JSON file justifies the added complexity for this API and everyone else involved. There is literally nothing else you gain from doing it in a JSON file.\nDatapacks don't factor into this. You can still override biome definitions from data packs like you can with Vanilla biomes, and defining a new biome in a datapack ist pointless since the mod that calls this API could not know about it beforehand.", "author": "shartte", "createdAt": "2020-08-30T21:57:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMzE5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY3NDgzMA==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479674830", "bodyText": "This effectively is a new module, so you should probably rename it to fabric-biome-api-v1", "author": "i509VCB", "createdAt": "2020-08-29T18:06:43Z", "path": "fabric-biomes-v1/build.gradle", "diffHunk": "@@ -1,2 +1,2 @@\n archivesBaseName = \"fabric-biomes-v1\"\n-version = getSubprojectVersion(project, \"1.0.2\")\n+version = getSubprojectVersion(project, \"1.1.0\")", "originalCommit": "6273175cdadcc9ff3b5993dc29df425220e29c0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgyMDkyOQ==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479820929", "bodyText": "Is it? It removes one public method and otherwise changes Biome arguments to RegistryKey?\nGranted. that is a breaking change but does that justify changing the module?", "author": "shartte", "createdAt": "2020-08-30T21:58:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY3NDgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NzYxOQ==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r483147619", "bodyText": "The entire module is effectively detached from every older version of biome api. Plus these are breaking changes with a module that was never re-released with .2.\nThe other biomes PR has the consensus by modmuss that naming and packages should be adapted due to an effective full break.", "author": "i509VCB", "createdAt": "2020-09-03T17:38:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY3NDgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA4NDM1NQ==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r484084355", "bodyText": "Its 100% atleast a 2.0.0. As for a new module no. -v2 would only need to be used where the old API was being kept around for backwards compat.", "author": "modmuss50", "createdAt": "2020-09-06T15:39:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY3NDgzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY3NTAxMA==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479675010", "bodyText": "Please name the method, this just confuses me.", "author": "i509VCB", "createdAt": "2020-08-29T18:09:02Z", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/AddHillsLayerAccessor.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.biome;\n+\n+import it.unimi.dsi.fastutil.ints.Int2IntMap;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n+\n+import net.minecraft.world.biome.layer.AddHillsLayer;\n+\n+@Mixin(AddHillsLayer.class)\n+public interface AddHillsLayerAccessor {\n+\t/**\n+\t * This field contains a raw-id to raw-id map for establishing parent/child relationships that\n+\t * model derived biomes.\n+\t *\n+\t * <p>For example, it contains a mapping for 1 -> 129 where 1 is the raw id of plains, while 129 is the raw id\n+\t * of the sunflower plains, which is derived from plains.\n+\t */\n+\t@Accessor\n+\tstatic Int2IntMap getField_26727() {", "originalCommit": "6273175cdadcc9ff3b5993dc29df425220e29c0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgyMjIxNw==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479822217", "bodyText": "I am afraid to rename it :-|\nI'll check out what the consequences of that are w.r.t. accessors.", "author": "shartte", "createdAt": "2020-08-30T22:11:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY3NTAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgyMjMxMw==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479822313", "bodyText": "If you want to rename the getter, specify the field name in the accessor annotation, i.e.:\n@Accessor(\"field_26727\")\nstatic Int2IntMap getFoo() {...", "author": "i509VCB", "createdAt": "2020-08-30T22:12:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY3NTAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgzMTAzNA==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479831034", "bodyText": "Will I have to name it fabric_xxyz in this case or does the accessor guarantee that conflicts are irrelevant still apply here?", "author": "shartte", "createdAt": "2020-08-30T23:43:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY3NTAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgzMTEyNQ==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r479831125", "bodyText": "Very rarely you'll have a conflict, (key bindings v0 being a former example of this). Should be fine", "author": "i509VCB", "createdAt": "2020-08-30T23:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY3NTAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2MDc3NQ==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r480360775", "bodyText": "Changed to getBaseToVariantMap", "author": "shartte", "createdAt": "2020-08-31T19:47:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY3NTAxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1MTE1NA==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r483151154", "bodyText": "What version did this biome thing occur in?\n.2 is probably not optimistic enough about version ranges, but not a major deal tbf", "author": "i509VCB", "createdAt": "2020-09-03T17:45:27Z", "path": "fabric-biomes-v1/src/main/resources/fabric.mod.json", "diffHunk": "@@ -16,8 +16,8 @@\n     \"FabricMC\"\n   ],\n   \"depends\": {\n-    \"fabricloader\": \">=0.4.0\",\n-    \"minecraft\": \">=1.16-alpha.20.22.a\"\n+    \"fabricloader\": \">=0.9.2\",\n+    \"minecraft\": \">=1.16.2\"", "originalCommit": "c1af3d3d36c04624d6289e0b5c236ea23d975132", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwMzA5Nw==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r483203097", "bodyText": "I did not test this with anything lower than 1.16.2,  hence the lower bound.", "author": "shartte", "createdAt": "2020-09-03T19:21:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1MTE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNTQ1Mw==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r483205453", "bodyText": "This is fine, no need to go lower. 1.16.1 wont work. No need to care about the snapshots or pre-releases here.", "author": "modmuss50", "createdAt": "2020-09-03T19:26:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1MTE1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1MTc3Ng==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r483151776", "bodyText": "please put these in alphabetical order. This reverse ordering adds a bunch of noise to the pull request", "author": "i509VCB", "createdAt": "2020-09-03T17:46:35Z", "path": "fabric-biomes-v1/src/main/resources/fabric-biomes-v1.mixins.json", "diffHunk": "@@ -3,17 +3,16 @@\n   \"package\": \"net.fabricmc.fabric.mixin.biome\",\n   \"compatibilityLevel\": \"JAVA_8\",\n   \"mixins\": [\n-    \"DimensionOptionsAccessor\",\n-    \"DimensionTypeAccessor\",\n     \"MixinAddEdgeBiomesLayer\",\n     \"MixinAddHillsLayer\",\n     \"MixinAddRiversLayer\",\n-    \"MixinBiomeSource\",\n     \"MixinSetBaseBiomesLayer\",\n-    \"MixinMinecraftDedicatedServer\",\n     \"MixinMultiNoiseBiomeSource\",\n-    \"MixinVanillaLayeredBiomeSource\",\n-    \"MultiNoiseBiomeSourceAccessor\"\n+    \"VanillaLayeredBiomeSourceAccessor\",\n+    \"MultiNoiseBiomeSourceAccessor\",\n+    \"BiomeSourceAccessor\",\n+    \"BiomesAccessor\",\n+    \"AddHillsLayerAccessor\"", "originalCommit": "c1af3d3d36c04624d6289e0b5c236ea23d975132", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg4NzY4Ng==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r483887686", "bodyText": "Done (also: it sucks that the suffix/prefix PR is still in limbo, this is mixed between the two and needs to be changed with that PR)", "author": "shartte", "createdAt": "2020-09-05T00:22:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1MTc3Ng=="}], "type": "inlineReview"}, {"oid": "e24ed8b394b710c176e419be3ac3c63246ed538b", "url": "https://github.com/FabricMC/fabric/commit/e24ed8b394b710c176e419be3ac3c63246ed538b", "message": "Ported 1.16.1 biomes-api-v1 to 1.16.2.\nPublic API changes:\n- Removed flagging biomes as suitable for player spawns since that is now handled in the Biome Builder.\n- Changed API over to RegistryKey's, not because it's necessary, but because it is more ergonomic since Vanilla Biomes in BuiltInBiomes are now all exposed as keys, rather than instances.", "committedDate": "2020-09-05T00:02:57Z", "type": "commit"}, {"oid": "82c487bb76385d154e06d45c6860230a51e5c48e", "url": "https://github.com/FabricMC/fabric/commit/82c487bb76385d154e06d45c6860230a51e5c48e", "message": "Changed to CheaterCode's mixin for modifying the nether biomes, saving us one accessor.", "committedDate": "2020-09-05T00:20:47Z", "type": "commit"}, {"oid": "bf1c84f1b03dfcd64eedd17779f9d2388880bd3a", "url": "https://github.com/FabricMC/fabric/commit/bf1c84f1b03dfcd64eedd17779f9d2388880bd3a", "message": "Move Bonanza", "committedDate": "2020-09-07T21:31:06Z", "type": "commit"}, {"oid": "337fe1c604f45d2ce3855f17d47d2064185ca1f4", "url": "https://github.com/FabricMC/fabric/commit/337fe1c604f45d2ce3855f17d47d2064185ca1f4", "message": "Finished moving and updating of the module, added experimental markers.", "committedDate": "2020-09-07T22:08:37Z", "type": "commit"}, {"oid": "ce552411e15f0d05fd62b229ce4813dda26d5069", "url": "https://github.com/FabricMC/fabric/commit/ce552411e15f0d05fd62b229ce4813dda26d5069", "message": "Adjusted experimental notes.", "committedDate": "2020-09-07T22:19:19Z", "type": "commit"}, {"oid": "2beb7acfcbaa62cb21d704d8065914e7ba670f27", "url": "https://github.com/FabricMC/fabric/commit/2beb7acfcbaa62cb21d704d8065914e7ba670f27", "message": "Finished rename from biomes-v1 to biome-api-v1", "committedDate": "2020-09-08T21:32:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE1NzY4Ng==", "url": "https://github.com/FabricMC/fabric/pull/1053#discussion_r487157686", "bodyText": "Can you undo this? This will make it fail to build on jenkins, should be better with 0.5 loom.", "author": "modmuss50", "createdAt": "2020-09-11T16:31:21Z", "path": "gradle.properties", "diffHunk": "@@ -1 +1 @@\n-org.gradle.jvmargs=-Xmx2560M", "originalCommit": "2beb7acfcbaa62cb21d704d8065914e7ba670f27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1e05fde7e3748535f2986e6de1de384af8ace357", "url": "https://github.com/FabricMC/fabric/commit/1e05fde7e3748535f2986e6de1de384af8ace357", "message": "Reverted memory settings in preparation for loom-0.5", "committedDate": "2020-09-11T17:35:59Z", "type": "commit"}]}