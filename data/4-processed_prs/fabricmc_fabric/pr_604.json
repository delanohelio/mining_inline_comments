{"pr_number": 604, "pr_title": "Fix commands on servers.", "pr_createdAt": "2020-05-02T15:44:58Z", "pr_url": "https://github.com/FabricMC/fabric/pull/604", "timeline": [{"oid": "1f7b202e25a8b856e7712ecbfb591f4740546f9c", "url": "https://github.com/FabricMC/fabric/commit/1f7b202e25a8b856e7712ecbfb591f4740546f9c", "message": "Fix commands on servers.\n\nBased off the same fix I made a year or two ago...", "committedDate": "2020-05-02T15:44:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk3Mzc5NA==", "url": "https://github.com/FabricMC/fabric/pull/604#discussion_r418973794", "bodyText": "You only have to fire with true. By passing false you fire the event twice.\nThe event is designed in a way where mod devs are expected to use the dedicated flag and handle registration for both integrated and dedicated servers in the same method.", "author": "i509VCB", "createdAt": "2020-05-02T15:47:21Z", "path": "fabric-command-api-v1/src/main/java/net/fabricmc/fabric/mixin/command/MixinMinecraftDedicatedServer.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.command;\n+\n+import java.io.File;\n+import java.net.Proxy;\n+\n+import com.mojang.authlib.GameProfileRepository;\n+import com.mojang.authlib.minecraft.MinecraftSessionService;\n+import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;\n+import com.mojang.datafixers.DataFixer;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.WorldGenerationProgressListenerFactory;\n+import net.minecraft.server.command.CommandManager;\n+import net.minecraft.server.dedicated.MinecraftDedicatedServer;\n+import net.minecraft.util.UserCache;\n+\n+import net.fabricmc.fabric.api.command.v1.CommandRegistrationCallback;\n+\n+@Mixin(MinecraftDedicatedServer.class)\n+public abstract class MixinMinecraftDedicatedServer extends MinecraftServer {\n+\tpublic MixinMinecraftDedicatedServer(File gameDir, Proxy proxy, DataFixer dataFixer, CommandManager commandManager, YggdrasilAuthenticationService authService, MinecraftSessionService sessionService, GameProfileRepository gameProfileRepository, UserCache userCache, WorldGenerationProgressListenerFactory worldGenerationProgressListenerFactory, String levelName) {\n+\t\tsuper(gameDir, proxy, dataFixer, commandManager, authService, sessionService, gameProfileRepository, userCache, worldGenerationProgressListenerFactory, levelName);\n+\t}\n+\n+\t@Inject(method = \"setupServer\", at = @At(\"HEAD\"))\n+\tprivate void setupServer(CallbackInfoReturnable<Boolean> info) {\n+\t\tCommandRegistrationCallback.EVENT.invoker().register(getCommandManager().getDispatcher(), true);\n+\t\tCommandRegistrationCallback.EVENT.invoker().register(getCommandManager().getDispatcher(), false);", "originalCommit": "1f7b202e25a8b856e7712ecbfb591f4740546f9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk3MzkyNQ==", "url": "https://github.com/FabricMC/fabric/pull/604#discussion_r418973925", "bodyText": "Well rather the flag says if the server is dedicated or integrated", "author": "i509VCB", "createdAt": "2020-05-02T15:48:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk3Mzc5NA=="}], "type": "inlineReview"}, {"oid": "eec636454532a28bbd37e9898b1060a451f46b8b", "url": "https://github.com/FabricMC/fabric/commit/eec636454532a28bbd37e9898b1060a451f46b8b", "message": "Fix", "committedDate": "2020-05-02T15:48:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMjM5NQ==", "url": "https://github.com/FabricMC/fabric/pull/604#discussion_r419002395", "bodyText": "Should we mixin this on client", "author": "liach", "createdAt": "2020-05-02T20:12:16Z", "path": "fabric-command-api-v1/src/main/resources/fabric-command-api-v1.mixins.json", "diffHunk": "@@ -3,7 +3,8 @@\n   \"package\": \"net.fabricmc.fabric.mixin.command\",\n   \"compatibilityLevel\": \"JAVA_8\",\n   \"mixins\": [\n-    \"MixinCommandManager\"\n+    \"MixinCommandManager\",\n+    \"MixinMinecraftDedicatedServer\"", "originalCommit": "eec636454532a28bbd37e9898b1060a451f46b8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMjkwMA==", "url": "https://github.com/FabricMC/fabric/pull/604#discussion_r419002900", "bodyText": "Yes, this follows how it was done before", "author": "modmuss50", "createdAt": "2020-05-02T20:17:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMjM5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwNDEzMA==", "url": "https://github.com/FabricMC/fabric/pull/604#discussion_r419004130", "bodyText": "Agreed, now whole dedi server is shipped on client so this sounds good", "author": "liach", "createdAt": "2020-05-02T20:29:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMjM5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwNDIwNA==", "url": "https://github.com/FabricMC/fabric/pull/604#discussion_r419004204", "bodyText": "it may not be ideal, but this needed fixing now, id be happy to look at a follow up PR that improves this.", "author": "modmuss50", "createdAt": "2020-05-02T20:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMjM5NQ=="}], "type": "inlineReview"}]}