{"pr_number": 493, "pr_title": "Add object builders to simplify the process of creating Villager professions", "pr_createdAt": "2020-02-02T23:10:06Z", "pr_url": "https://github.com/FabricMC/fabric/pull/493", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NTEyNw==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r373885127", "bodyText": "maybe just name it workstation?", "author": "LemmaEOF", "createdAt": "2020-02-02T23:34:43Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/village/v1/VillagerProfessionBuilder.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.village.v1;\n+\n+import java.util.Set;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.item.Item;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.village.TradeOffers;\n+import net.minecraft.village.VillagerProfession;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.impl.object.builder.VillagerProfessionBuilderImpl;\n+\n+/**\n+ * Allows the creation of new {@link VillagerProfession}s.\n+ *\n+ * <p>Note this does not register any trades to these villagers. To register trades, add a new entry with your profession as the key to {@link TradeOffers#PROFESSION_TO_LEVELED_TRADE}.\n+ */\n+public interface VillagerProfessionBuilder {\n+\t/**\n+\t * Creates a builder to make a {@link VillagerProfession}.\n+\t * @return A new builder.\n+\t */\n+\tstatic VillagerProfessionBuilder builder() {\n+\t\treturn new VillagerProfessionBuilderImpl();\n+\t}\n+\n+\tVillagerProfessionBuilder id(Identifier id);\n+\n+\t/**\n+\t * The {@link PointOfInterestType} the villager will search for when finding it's workstation.\n+\t * @param type The {@link PointOfInterestType}.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder workstationPointOfInterest(PointOfInterestType type);", "originalCommit": "209b1dd9440e8a66e2400b519742b1a3958fc1ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NTEzOA==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r373885138", "bodyText": "harvestableItem?", "author": "LemmaEOF", "createdAt": "2020-02-02T23:35:01Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/village/v1/VillagerProfessionBuilder.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.village.v1;\n+\n+import java.util.Set;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.item.Item;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.village.TradeOffers;\n+import net.minecraft.village.VillagerProfession;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.impl.object.builder.VillagerProfessionBuilderImpl;\n+\n+/**\n+ * Allows the creation of new {@link VillagerProfession}s.\n+ *\n+ * <p>Note this does not register any trades to these villagers. To register trades, add a new entry with your profession as the key to {@link TradeOffers#PROFESSION_TO_LEVELED_TRADE}.\n+ */\n+public interface VillagerProfessionBuilder {\n+\t/**\n+\t * Creates a builder to make a {@link VillagerProfession}.\n+\t * @return A new builder.\n+\t */\n+\tstatic VillagerProfessionBuilder builder() {\n+\t\treturn new VillagerProfessionBuilderImpl();\n+\t}\n+\n+\tVillagerProfessionBuilder id(Identifier id);\n+\n+\t/**\n+\t * The {@link PointOfInterestType} the villager will search for when finding it's workstation.\n+\t * @param type The {@link PointOfInterestType}.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder workstationPointOfInterest(PointOfInterestType type);\n+\n+\t/**\n+\t * An item that a Villager may harvest in this profession.\n+\t *\n+\t * <p>In Vanilla this is used by the farmer to define what type of crops the farmer can harvest.\n+\t *\n+\t * @param item An item.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder gatherableItem(Item item);", "originalCommit": "209b1dd9440e8a66e2400b519742b1a3958fc1ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NTE5Mg==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r373885192", "bodyText": "workSound? Sound events for block settings are just done under the name sounds.", "author": "LemmaEOF", "createdAt": "2020-02-02T23:35:45Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/village/v1/VillagerProfessionBuilder.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.village.v1;\n+\n+import java.util.Set;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.item.Item;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.village.TradeOffers;\n+import net.minecraft.village.VillagerProfession;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.impl.object.builder.VillagerProfessionBuilderImpl;\n+\n+/**\n+ * Allows the creation of new {@link VillagerProfession}s.\n+ *\n+ * <p>Note this does not register any trades to these villagers. To register trades, add a new entry with your profession as the key to {@link TradeOffers#PROFESSION_TO_LEVELED_TRADE}.\n+ */\n+public interface VillagerProfessionBuilder {\n+\t/**\n+\t * Creates a builder to make a {@link VillagerProfession}.\n+\t * @return A new builder.\n+\t */\n+\tstatic VillagerProfessionBuilder builder() {\n+\t\treturn new VillagerProfessionBuilderImpl();\n+\t}\n+\n+\tVillagerProfessionBuilder id(Identifier id);\n+\n+\t/**\n+\t * The {@link PointOfInterestType} the villager will search for when finding it's workstation.\n+\t * @param type The {@link PointOfInterestType}.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder workstationPointOfInterest(PointOfInterestType type);\n+\n+\t/**\n+\t * An item that a Villager may harvest in this profession.\n+\t *\n+\t * <p>In Vanilla this is used by the farmer to define what type of crops the farmer can harvest.\n+\t *\n+\t * @param item An item.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder gatherableItem(Item item);\n+\n+\t/**\n+\t * Set of items that a Villager may harvest in this profession.\n+\t *\n+\t * <p>In Vanilla this is used by the farmer to define what type of crops the farmer can harvest.\n+\t *\n+\t * @param items A set of items.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder gatherableItems(Set<Item> items);\n+\n+\t/**\n+\t * A block which might suffice as a job site for a Villager.\n+\t *\n+\t * <p>In vanilla this is used by the {@link VillagerProfession#FARMER Farmer} to stay near {@link Blocks#FARMLAND Farmland} when at it's job site.\n+\t *\n+\t * @param block The block.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder secondaryJobSite(Block block);\n+\n+\t/**\n+\t * Blocks which might suffice as a job site for a Villager.\n+\t *\n+\t * <p>In vanilla this is used by the {@link VillagerProfession#FARMER Farmer} to stay near {@link Blocks#FARMLAND Farmland} when at it's job site.\n+\t *\n+\t * @param blocks A set of blocks.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder secondaryJobSites(Set<Block> blocks);\n+\n+\t/**\n+\t * Represents the sound made when a Villager works.\n+\t * @param workSoundEvent The {@link SoundEvent} to be played.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder workSoundEvent(SoundEvent workSoundEvent);", "originalCommit": "209b1dd9440e8a66e2400b519742b1a3958fc1ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NTI2Ng==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r373885266", "bodyText": "Call Registry.register here instead maybe? Not sure which is better to do.", "author": "LemmaEOF", "createdAt": "2020-02-02T23:36:38Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/world/poi/v1/PointOfInterestHelper.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.world.poi.v1;\n+\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.mixin.object.builder.PointOfInterestTypeAccessor;\n+\n+/**\n+ * This class provides utilities to create a {@link PointOfInterestType}.\n+ */\n+public interface PointOfInterestHelper {\n+\t/**\n+\t * Registers and creates a {@link PointOfInterestType}.\n+\t * @param workStationStates A list of {@link BlockState BlockStates} which this {@link PointOfInterestType} can be present on.\n+\t * @param id The id of this {@link PointOfInterestType}.\n+\t * @param ticketCount The amount of tickets.\n+\t * @param searchDistance The search distance.\n+\t * @return a new {@link PointOfInterestType}.\n+\t */\n+\tstatic PointOfInterestType create(Set<BlockState> workStationStates, Identifier id, int ticketCount, int searchDistance) {\n+\t\treturn PointOfInterestTypeAccessor.callSetup(Registry.POINT_OF_INTEREST_TYPE.add(id, PointOfInterestTypeAccessor.callCreate(id.toString(), workStationStates, ticketCount, searchDistance)));", "originalCommit": "209b1dd9440e8a66e2400b519742b1a3958fc1ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NjUzOQ==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r373886539", "bodyText": "Arguably I could do either or make the registry call not part of this method, the setup basically binds all the block states to the point of interest type and verifies two pois don't share a state.", "author": "i509VCB", "createdAt": "2020-02-02T23:57:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NTI2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NTM0NQ==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r373885345", "bodyText": "BuyItem?", "author": "LemmaEOF", "createdAt": "2020-02-02T23:38:02Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/impl/object/builder/TradeOfferFactories.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.object.builder;\n+\n+import net.minecraft.enchantment.EnchantmentHelper;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.village.TradeOffer;\n+import net.minecraft.village.TradeOffers;\n+\n+public final class TradeOfferFactories {\n+\t@FunctionalInterface\n+\tpublic interface SellEnchantedTool {\n+\t\tSellEnchantedTool FACTORY = (item, basePrice, maxUses, experience, multiplier) -> ((entity, random) -> {\n+\t\t\tint level = 5 + random.nextInt(15);\n+\t\t\tItemStack sellItemStack = EnchantmentHelper.enchant(random, new ItemStack(item), level, false);\n+\t\t\tint calculatedPrice = Math.min(basePrice + level, 64);\n+\t\t\tItemStack buyItemStack = new ItemStack(Items.EMERALD, calculatedPrice);\n+\t\t\treturn new TradeOffer(buyItemStack, sellItemStack, maxUses, experience, multiplier);\n+\t\t});\n+\n+\t\tTradeOffers.Factory create(Item item, int basePrice, int maxUses, int experience, float multiplier);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface ProcessItem {\n+\t\tProcessItem FACTORY = (itemConvertible, secondCount, price, sellItem, sellCount, maxUses, experience) -> (entity, random) -> new TradeOffer(new ItemStack(Items.EMERALD, price), new ItemStack(itemConvertible, secondCount), new ItemStack(sellItem, sellCount), maxUses, experience, 0.05F);\n+\n+\t\tTradeOffers.Factory create(ItemConvertible itemConvertible, int secondCount, int price, Item sellItem, int sellCount, int maxUses, int experience);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface SellItem {\n+\t\tSellItem FACTORY = (itemStack, price, count, maxUses, experience, multiplier) -> (entity, random) -> new TradeOffer(new ItemStack(Items.EMERALD, price), new ItemStack(itemStack.getItem(), count), maxUses, experience, multiplier);\n+\n+\t\tTradeOffers.Factory create(ItemStack itemStack, int price, int count, int maxUses, int experience, float multiplier);\n+\t}\n+\n+\t@FunctionalInterface\n+\tpublic interface BuyForOneEmerald {", "originalCommit": "209b1dd9440e8a66e2400b519742b1a3958fc1ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMjM4Mg==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r374312382", "bodyText": "Should Identifier be passed in here? and possibly PointOfInterestType? Im not too sure, it shouldnt matter too much as you do check when building.", "author": "modmuss50", "createdAt": "2020-02-03T20:03:56Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/village/v1/VillagerProfessionBuilder.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.village.v1;\n+\n+import java.util.Set;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.item.Item;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.village.TradeOffers;\n+import net.minecraft.village.VillagerProfession;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.impl.object.builder.VillagerProfessionBuilderImpl;\n+\n+/**\n+ * Allows the creation of new {@link VillagerProfession}s.\n+ *\n+ * <p>Note this does not register any trades to these villagers. To register trades, add a new entry with your profession as the key to {@link TradeOffers#PROFESSION_TO_LEVELED_TRADE}.\n+ */\n+public interface VillagerProfessionBuilder {\n+\t/**\n+\t * Creates a builder to make a {@link VillagerProfession}.\n+\t * @return A new builder.\n+\t */\n+\tstatic VillagerProfessionBuilder builder() {", "originalCommit": "c6e8b5cca45ecbfa0604fe09d0e7defa61d83107", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMzMzMxOA==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r374333318", "bodyText": "I mean I could but I've already specified on the comments for the build method the two absolute requirements.", "author": "i509VCB", "createdAt": "2020-02-03T20:50:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMjM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1NzgyOQ==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r375057829", "bodyText": "If they are mandatory arguments it seems like it would be sensible to make them required for creating the builder to begin with. We should check how this is handled elsewhere in Fabric API.", "author": "coderbot16", "createdAt": "2020-02-05T04:49:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMjM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1ODY5OA==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r375058698", "bodyText": "I suggest naming this create as this method is in Builder than VillagerProfession class.", "author": "liach", "createdAt": "2020-02-05T04:54:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMjM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1OTE5Mg==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r375059192", "bodyText": "For these methods obtaining builder instances: I am strongly against requiring params for builder creation. This reduces the reusability of builders imo and hampers centralized builder control (e.g. if you have a global builder repository that offers new builder instnaces by type on demand)", "author": "liach", "createdAt": "2020-02-05T04:57:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMjM4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMzUxNA==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r374313514", "bodyText": "Im not a fan of having this logic here", "author": "modmuss50", "createdAt": "2020-02-03T20:06:20Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/impl/object/builder/TradeOfferFactories.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.object.builder;\n+\n+import net.minecraft.enchantment.EnchantmentHelper;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.village.TradeOffer;\n+import net.minecraft.village.TradeOffers;\n+\n+public final class TradeOfferFactories {\n+\t@FunctionalInterface\n+\tpublic interface SellEnchantedTool {\n+\t\tSellEnchantedTool FACTORY = (item, basePrice, maxUses, experience, multiplier) -> ((entity, random) -> {\n+\t\t\tint level = 5 + random.nextInt(15);", "originalCommit": "c6e8b5cca45ecbfa0604fe09d0e7defa61d83107", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyMjczNw==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r374322737", "bodyText": "There is a reason behind this is because the builtin enchanted tool factory is a package private inner class.\nIt's basically the same logic as the default villager trades factory but if it isn't 100% needed (since anyone can create a TradeOffer factory) we could remove it or handle this in another way.", "author": "i509VCB", "createdAt": "2020-02-03T20:26:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMzUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyNDkwMg==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r374324902", "bodyText": "With the way it is, if the vanilla logic changes this will require updating, and chances are that wont happen.", "author": "modmuss50", "createdAt": "2020-02-03T20:31:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMzUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyOTA3Mw==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r374329073", "bodyText": "One option I have is to use a bunch of reflection hacks to refer to the vanilla factories (since ATs are not an option) but a rename of a class file or change to the ctors will obviously break it there. Also it's just plain nasty code for another 3-4 trade types which are are quite dependent on a specific profession [And the type aware trade factory is straight up hardcoded with VillagerTypes].\nI probably will just leave it to the current three generic trade offer types and take out the enchanted item since a mod dev can add their own trade factories.", "author": "i509VCB", "createdAt": "2020-02-03T20:41:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMzUxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1ODQyMQ==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r375058421", "bodyText": "I prefer this be a final utility class (private constructor)", "author": "liach", "createdAt": "2020-02-05T04:52:59Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/village/v1/TradeOfferHelper.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.village.v1;\n+\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.village.TradeOffer;\n+import net.minecraft.village.TradeOffers;\n+\n+import net.fabricmc.fabric.impl.object.builder.TradeOfferFactories;\n+\n+/**\n+ * Since Mojang made all of the subclasses of {@link TradeOffers.Factory} private, we provide helper methods to create some generic {@link TradeOffer} factories.\n+ *\n+ * <p>A {@link TradeOffers.Factory} generates a {@link TradeOffer}. The {@link TradeOffers.Factory} are used to build a list of trades a villager can offer.\n+ */\n+public interface TradeOfferHelper {", "originalCommit": "5084a49e1d2965108d155905325b874b631f8734", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1ODU3MQ==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r375058571", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tVillagerProfessionBuilder harvestableItems(Set<Item> items);\n          \n          \n            \n            \tVillagerProfessionBuilder harvestableItems(Iterable<Item> items);", "author": "liach", "createdAt": "2020-02-05T04:53:53Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/village/v1/VillagerProfessionBuilder.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.village.v1;\n+\n+import java.util.Set;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.item.Item;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.village.TradeOffers;\n+import net.minecraft.village.VillagerProfession;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.impl.object.builder.VillagerProfessionBuilderImpl;\n+\n+/**\n+ * Allows the creation of new {@link VillagerProfession}s.\n+ *\n+ * <p>Note this does not register any trades to these villagers. To register trades, add a new entry with your profession as the key to {@link TradeOffers#PROFESSION_TO_LEVELED_TRADE}.\n+ */\n+public interface VillagerProfessionBuilder {\n+\t/**\n+\t * Creates a builder to make a {@link VillagerProfession}.\n+\t * @return A new builder.\n+\t */\n+\tstatic VillagerProfessionBuilder builder() {\n+\t\treturn new VillagerProfessionBuilderImpl();\n+\t}\n+\n+\tVillagerProfessionBuilder id(Identifier id);\n+\n+\t/**\n+\t * The {@link PointOfInterestType} the villager will search for when finding it's workstation.\n+\t * @param type The {@link PointOfInterestType}.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder workstation(PointOfInterestType type);\n+\n+\t/**\n+\t * An item that a Villager may harvest in this profession.\n+\t *\n+\t * <p>In Vanilla this is used by the farmer to define what type of crops the farmer can harvest.\n+\t *\n+\t * @param item An item.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder harvestableItem(Item item);\n+\n+\t/**\n+\t * Set of items that a Villager may harvest in this profession.\n+\t *\n+\t * <p>In Vanilla this is used by the farmer to define what type of crops the farmer can harvest.\n+\t *\n+\t * @param items A set of items.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder harvestableItems(Set<Item> items);", "originalCommit": "5084a49e1d2965108d155905325b874b631f8734", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1ODU5Mg==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r375058592", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tVillagerProfessionBuilder harvestableItem(Item item);\n          \n          \n            \n            \tVillagerProfessionBuilder harvestableItem(Item... items);", "author": "liach", "createdAt": "2020-02-05T04:54:00Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/village/v1/VillagerProfessionBuilder.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.village.v1;\n+\n+import java.util.Set;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.item.Item;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.village.TradeOffers;\n+import net.minecraft.village.VillagerProfession;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.impl.object.builder.VillagerProfessionBuilderImpl;\n+\n+/**\n+ * Allows the creation of new {@link VillagerProfession}s.\n+ *\n+ * <p>Note this does not register any trades to these villagers. To register trades, add a new entry with your profession as the key to {@link TradeOffers#PROFESSION_TO_LEVELED_TRADE}.\n+ */\n+public interface VillagerProfessionBuilder {\n+\t/**\n+\t * Creates a builder to make a {@link VillagerProfession}.\n+\t * @return A new builder.\n+\t */\n+\tstatic VillagerProfessionBuilder builder() {\n+\t\treturn new VillagerProfessionBuilderImpl();\n+\t}\n+\n+\tVillagerProfessionBuilder id(Identifier id);\n+\n+\t/**\n+\t * The {@link PointOfInterestType} the villager will search for when finding it's workstation.\n+\t * @param type The {@link PointOfInterestType}.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder workstation(PointOfInterestType type);\n+\n+\t/**\n+\t * An item that a Villager may harvest in this profession.\n+\t *\n+\t * <p>In Vanilla this is used by the farmer to define what type of crops the farmer can harvest.\n+\t *\n+\t * @param item An item.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder harvestableItem(Item item);", "originalCommit": "5084a49e1d2965108d155905325b874b631f8734", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1ODY0NQ==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r375058645", "bodyText": "more like work station, two words", "author": "liach", "createdAt": "2020-02-05T04:54:18Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/village/v1/VillagerProfessionBuilder.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.village.v1;\n+\n+import java.util.Set;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.item.Item;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.village.TradeOffers;\n+import net.minecraft.village.VillagerProfession;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.impl.object.builder.VillagerProfessionBuilderImpl;\n+\n+/**\n+ * Allows the creation of new {@link VillagerProfession}s.\n+ *\n+ * <p>Note this does not register any trades to these villagers. To register trades, add a new entry with your profession as the key to {@link TradeOffers#PROFESSION_TO_LEVELED_TRADE}.\n+ */\n+public interface VillagerProfessionBuilder {\n+\t/**\n+\t * Creates a builder to make a {@link VillagerProfession}.\n+\t * @return A new builder.\n+\t */\n+\tstatic VillagerProfessionBuilder builder() {\n+\t\treturn new VillagerProfessionBuilderImpl();\n+\t}\n+\n+\tVillagerProfessionBuilder id(Identifier id);\n+\n+\t/**\n+\t * The {@link PointOfInterestType} the villager will search for when finding it's workstation.\n+\t * @param type The {@link PointOfInterestType}.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder workstation(PointOfInterestType type);", "originalCommit": "5084a49e1d2965108d155905325b874b631f8734", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExOTYyMQ==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r375119621", "bodyText": "\"workstation\" on its own is a real word.", "author": "LemmaEOF", "createdAt": "2020-02-05T08:38:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1ODY0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1ODc0NA==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r375058744", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tVillagerProfessionBuilder secondaryJobSite(Block block);\n          \n          \n            \n            \tVillagerProfessionBuilder secondaryJobSite(Block... blocks);", "author": "liach", "createdAt": "2020-02-05T04:54:56Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/village/v1/VillagerProfessionBuilder.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.village.v1;\n+\n+import java.util.Set;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.item.Item;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.village.TradeOffers;\n+import net.minecraft.village.VillagerProfession;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.impl.object.builder.VillagerProfessionBuilderImpl;\n+\n+/**\n+ * Allows the creation of new {@link VillagerProfession}s.\n+ *\n+ * <p>Note this does not register any trades to these villagers. To register trades, add a new entry with your profession as the key to {@link TradeOffers#PROFESSION_TO_LEVELED_TRADE}.\n+ */\n+public interface VillagerProfessionBuilder {\n+\t/**\n+\t * Creates a builder to make a {@link VillagerProfession}.\n+\t * @return A new builder.\n+\t */\n+\tstatic VillagerProfessionBuilder builder() {\n+\t\treturn new VillagerProfessionBuilderImpl();\n+\t}\n+\n+\tVillagerProfessionBuilder id(Identifier id);\n+\n+\t/**\n+\t * The {@link PointOfInterestType} the villager will search for when finding it's workstation.\n+\t * @param type The {@link PointOfInterestType}.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder workstation(PointOfInterestType type);\n+\n+\t/**\n+\t * An item that a Villager may harvest in this profession.\n+\t *\n+\t * <p>In Vanilla this is used by the farmer to define what type of crops the farmer can harvest.\n+\t *\n+\t * @param item An item.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder harvestableItem(Item item);\n+\n+\t/**\n+\t * Set of items that a Villager may harvest in this profession.\n+\t *\n+\t * <p>In Vanilla this is used by the farmer to define what type of crops the farmer can harvest.\n+\t *\n+\t * @param items A set of items.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder harvestableItems(Set<Item> items);\n+\n+\t/**\n+\t * A block which might suffice as a job site for a Villager.\n+\t *\n+\t * <p>In vanilla this is used by the {@link VillagerProfession#FARMER Farmer} to stay near {@link Blocks#FARMLAND Farmland} when at it's job site.\n+\t *\n+\t * @param block The block.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder secondaryJobSite(Block block);", "originalCommit": "5084a49e1d2965108d155905325b874b631f8734", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1ODc3MQ==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r375058771", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tVillagerProfessionBuilder secondaryJobSites(Set<Block> blocks);\n          \n          \n            \n            \tVillagerProfessionBuilder secondaryJobSites(Iterable<Block> blocks);", "author": "liach", "createdAt": "2020-02-05T04:55:04Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/village/v1/VillagerProfessionBuilder.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.village.v1;\n+\n+import java.util.Set;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.item.Item;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.village.TradeOffers;\n+import net.minecraft.village.VillagerProfession;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.impl.object.builder.VillagerProfessionBuilderImpl;\n+\n+/**\n+ * Allows the creation of new {@link VillagerProfession}s.\n+ *\n+ * <p>Note this does not register any trades to these villagers. To register trades, add a new entry with your profession as the key to {@link TradeOffers#PROFESSION_TO_LEVELED_TRADE}.\n+ */\n+public interface VillagerProfessionBuilder {\n+\t/**\n+\t * Creates a builder to make a {@link VillagerProfession}.\n+\t * @return A new builder.\n+\t */\n+\tstatic VillagerProfessionBuilder builder() {\n+\t\treturn new VillagerProfessionBuilderImpl();\n+\t}\n+\n+\tVillagerProfessionBuilder id(Identifier id);\n+\n+\t/**\n+\t * The {@link PointOfInterestType} the villager will search for when finding it's workstation.\n+\t * @param type The {@link PointOfInterestType}.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder workstation(PointOfInterestType type);\n+\n+\t/**\n+\t * An item that a Villager may harvest in this profession.\n+\t *\n+\t * <p>In Vanilla this is used by the farmer to define what type of crops the farmer can harvest.\n+\t *\n+\t * @param item An item.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder harvestableItem(Item item);\n+\n+\t/**\n+\t * Set of items that a Villager may harvest in this profession.\n+\t *\n+\t * <p>In Vanilla this is used by the farmer to define what type of crops the farmer can harvest.\n+\t *\n+\t * @param items A set of items.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder harvestableItems(Set<Item> items);\n+\n+\t/**\n+\t * A block which might suffice as a job site for a Villager.\n+\t *\n+\t * <p>In vanilla this is used by the {@link VillagerProfession#FARMER Farmer} to stay near {@link Blocks#FARMLAND Farmland} when at it's job site.\n+\t *\n+\t * @param block The block.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder secondaryJobSite(Block block);\n+\n+\t/**\n+\t * Blocks which might suffice as a job site for a Villager.\n+\t *\n+\t * <p>In vanilla this is used by the {@link VillagerProfession#FARMER Farmer} to stay near {@link Blocks#FARMLAND Farmland} when at it's job site.\n+\t *\n+\t * @param blocks A set of blocks.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder secondaryJobSites(Set<Block> blocks);", "originalCommit": "5084a49e1d2965108d155905325b874b631f8734", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1ODg0OA==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r375058848", "bodyText": "Just state that you throw illegal state if these are not set", "author": "liach", "createdAt": "2020-02-05T04:55:30Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/village/v1/VillagerProfessionBuilder.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.village.v1;\n+\n+import java.util.Set;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.item.Item;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.village.TradeOffers;\n+import net.minecraft.village.VillagerProfession;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.impl.object.builder.VillagerProfessionBuilderImpl;\n+\n+/**\n+ * Allows the creation of new {@link VillagerProfession}s.\n+ *\n+ * <p>Note this does not register any trades to these villagers. To register trades, add a new entry with your profession as the key to {@link TradeOffers#PROFESSION_TO_LEVELED_TRADE}.\n+ */\n+public interface VillagerProfessionBuilder {\n+\t/**\n+\t * Creates a builder to make a {@link VillagerProfession}.\n+\t * @return A new builder.\n+\t */\n+\tstatic VillagerProfessionBuilder builder() {\n+\t\treturn new VillagerProfessionBuilderImpl();\n+\t}\n+\n+\tVillagerProfessionBuilder id(Identifier id);\n+\n+\t/**\n+\t * The {@link PointOfInterestType} the villager will search for when finding it's workstation.\n+\t * @param type The {@link PointOfInterestType}.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder workstation(PointOfInterestType type);\n+\n+\t/**\n+\t * An item that a Villager may harvest in this profession.\n+\t *\n+\t * <p>In Vanilla this is used by the farmer to define what type of crops the farmer can harvest.\n+\t *\n+\t * @param item An item.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder harvestableItem(Item item);\n+\n+\t/**\n+\t * Set of items that a Villager may harvest in this profession.\n+\t *\n+\t * <p>In Vanilla this is used by the farmer to define what type of crops the farmer can harvest.\n+\t *\n+\t * @param items A set of items.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder harvestableItems(Set<Item> items);\n+\n+\t/**\n+\t * A block which might suffice as a job site for a Villager.\n+\t *\n+\t * <p>In vanilla this is used by the {@link VillagerProfession#FARMER Farmer} to stay near {@link Blocks#FARMLAND Farmland} when at it's job site.\n+\t *\n+\t * @param block The block.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder secondaryJobSite(Block block);\n+\n+\t/**\n+\t * Blocks which might suffice as a job site for a Villager.\n+\t *\n+\t * <p>In vanilla this is used by the {@link VillagerProfession#FARMER Farmer} to stay near {@link Blocks#FARMLAND Farmland} when at it's job site.\n+\t *\n+\t * @param blocks A set of blocks.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder secondaryJobSites(Set<Block> blocks);\n+\n+\t/**\n+\t * Represents the sound made when a Villager works.\n+\t * @param workSoundEvent The {@link SoundEvent} to be played.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder workSound(SoundEvent workSoundEvent);\n+\n+\t/**\n+\t * Creates the {@link VillagerProfession}.\n+\t *\n+\t * <p>At minimum, a {@link VillagerProfession} requires an {@link VillagerProfessionBuilder#id(Identifier) Identifier}", "originalCommit": "5084a49e1d2965108d155905325b874b631f8734", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1OTM2NQ==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r375059365", "bodyText": "final class with private constructor suggested over interfaces", "author": "liach", "createdAt": "2020-02-05T04:58:08Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/world/poi/v1/PointOfInterestHelper.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.world.poi.v1;\n+\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.mixin.object.builder.PointOfInterestTypeAccessor;\n+\n+/**\n+ * This class provides utilities to create a {@link PointOfInterestType}.\n+ */\n+public interface PointOfInterestHelper {", "originalCommit": "5084a49e1d2965108d155905325b874b631f8734", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1OTU0NA==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r375059544", "bodyText": "I don't find a need for this method. Why add this?", "author": "liach", "createdAt": "2020-02-05T04:59:02Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/world/poi/v1/PointOfInterestHelper.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.world.poi.v1;\n+\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.mixin.object.builder.PointOfInterestTypeAccessor;\n+\n+/**\n+ * This class provides utilities to create a {@link PointOfInterestType}.\n+ */\n+public interface PointOfInterestHelper {\n+\t/**\n+\t * Registers and creates a {@link PointOfInterestType}.\n+\t * @param workStationStates A list of {@link BlockState BlockStates} which this {@link PointOfInterestType} can be present on.\n+\t * @param id The id of this {@link PointOfInterestType}.\n+\t * @param ticketCount The amount of tickets.\n+\t * @param searchDistance The search distance.\n+\t * @return a new {@link PointOfInterestType}.\n+\t */\n+\tstatic PointOfInterestType create(Set<BlockState> workStationStates, Identifier id, int ticketCount, int searchDistance) {\n+\t\treturn Registry.POINT_OF_INTEREST_TYPE.add(id, PointOfInterestTypeAccessor.callSetup(PointOfInterestTypeAccessor.callCreate(id.toString(), workStationStates, ticketCount, searchDistance)));\n+\t}\n+\n+\t/**\n+\t * Registers and creates a {@link PointOfInterestType}.\n+\t * @param workStationStates A list of {@link BlockState BlockStates} which this {@link PointOfInterestType} can be present on.\n+\t * @param id The id of this {@link PointOfInterestType}.\n+\t * @param ticketCount The amount of tickets.\n+\t * @param completionCondition A {@link Predicate} which determines whether this point of interest type should be present.\n+\t * @param searchDistance The search distance.\n+\t * @return a new {@link PointOfInterestType}.\n+\t */\n+\tstatic PointOfInterestType register(Set<BlockState> workStationStates, Identifier id, int ticketCount, Predicate<PointOfInterestType> completionCondition, int searchDistance) {\n+\t\treturn Registry.POINT_OF_INTEREST_TYPE.add(id, PointOfInterestTypeAccessor.callSetup(PointOfInterestTypeAccessor.callCreate(id.toString(), workStationStates, ticketCount, completionCondition, searchDistance)));\n+\t}\n+\n+\t/**\n+\t * Gets all possible {@link BlockState BlockStates} a Block could have.\n+\t * @param block The block to get all states from.\n+\t * @return All possible {@link BlockState BlockStates} the block could contain.\n+\t */\n+\tstatic Set<BlockState> getAllStatesOf(Block block) {", "originalCommit": "5084a49e1d2965108d155905325b874b631f8734", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MzEyOA==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r375063128", "bodyText": "It's more of a utility method for part of the setup for a point of interest type since it is present based on the state of the block.\nIt's more related to workStationStates in the method above.", "author": "i509VCB", "createdAt": "2020-02-05T05:17:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1OTU0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2NDc4OQ==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r375064789", "bodyText": "Just add a variant of your method that accepts a block instance then.", "author": "liach", "createdAt": "2020-02-05T05:25:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1OTU0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MDA3Mw==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r375060073", "bodyText": "I suggest merging 3 subinterfaces into 1 interface and convert this into an interface (like how ClientSideNetworkRegistry has an INSTANCE field that is populated by a ClientSideNetworkRegistryImpl) than having 3 impl instances in 3 public static final fields in the 3 subinterfaces. Also makes it easier for users.", "author": "liach", "createdAt": "2020-02-05T05:01:46Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/impl/object/builder/TradeOfferFactories.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.object.builder;\n+\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.village.TradeOffer;\n+import net.minecraft.village.TradeOffers;\n+\n+public final class TradeOfferFactories {", "originalCommit": "5084a49e1d2965108d155905325b874b631f8734", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MDE5NQ==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r375060195", "bodyText": "Should throw IllegalStateException than NullPointerException imo", "author": "liach", "createdAt": "2020-02-05T05:02:27Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/impl/object/builder/VillagerProfessionBuilderImpl.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.object.builder;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.item.Item;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.village.VillagerProfession;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.api.village.v1.VillagerProfessionBuilder;\n+import net.fabricmc.fabric.mixin.object.builder.VillagerProfessionAccessor;\n+\n+public class VillagerProfessionBuilderImpl implements VillagerProfessionBuilder {\n+\tprivate final ImmutableSet.Builder<Item> gatherableItemsBuilder = ImmutableSet.builder();\n+\tprivate final ImmutableSet.Builder<Block> secondaryJobSiteBlockBuilder = ImmutableSet.builder();\n+\n+\tprivate Identifier identifier;\n+\tprivate PointOfInterestType pointOfInterestType;\n+\tprivate SoundEvent workSoundEvent;\n+\n+\t@Override\n+\tpublic VillagerProfessionBuilder id(Identifier id) {\n+\t\tthis.identifier = id;\n+\t\treturn this;\n+\t}\n+\n+\t@Override\n+\tpublic VillagerProfessionBuilder workstation(PointOfInterestType type) {\n+\t\tthis.pointOfInterestType = type;\n+\t\treturn this;\n+\t}\n+\n+\t@Override\n+\tpublic VillagerProfessionBuilder harvestableItem(Item item) {\n+\t\tthis.gatherableItemsBuilder.add(item);\n+\t\treturn this;\n+\t}\n+\n+\t@Override\n+\tpublic VillagerProfessionBuilder harvestableItems(Set<Item> items) {\n+\t\tthis.gatherableItemsBuilder.addAll(items);\n+\t\treturn this;\n+\t}\n+\n+\t@Override\n+\tpublic VillagerProfessionBuilder secondaryJobSite(Block block) {\n+\t\tthis.secondaryJobSiteBlockBuilder.add(block);\n+\t\treturn this;\n+\t}\n+\n+\t@Override\n+\tpublic VillagerProfessionBuilder secondaryJobSites(Set<Block> blocks) {\n+\t\tthis.secondaryJobSiteBlockBuilder.addAll(blocks);\n+\t\treturn this;\n+\t}\n+\n+\t@Override\n+\tpublic VillagerProfessionBuilder workSound(SoundEvent workSoundEvent) {\n+\t\tthis.workSoundEvent = workSoundEvent;\n+\t\treturn this;\n+\t}\n+\n+\t@Override\n+\tpublic VillagerProfession build() {\n+\t\tcheckNotNull(this.identifier, \"An Identifier is required to build a new VillagerProfession.\");\n+\t\tcheckNotNull(this.pointOfInterestType, \"A PointOfInterestType is required to build a new VillagerProfession.\");", "originalCommit": "5084a49e1d2965108d155905325b874b631f8734", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY4ODg5MA==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r376688890", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tTradeOfferFactory FACTORIES = new TradeOfferFactoryImpl();\n          \n          \n            \n            \tTradeOfferFactory INSTANCE = new TradeOfferFactoryImpl();", "author": "liach", "createdAt": "2020-02-08T05:23:07Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/village/v1/TradeOfferFactory.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.village.v1;\n+\n+import net.minecraft.entity.passive.VillagerEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.village.TradeOffer;\n+import net.minecraft.village.TradeOffers;\n+\n+import net.fabricmc.fabric.impl.object.builder.TradeOfferFactoryImpl;\n+\n+/**\n+ * Represents some generic {@link TradeOffers.Factory} implementations since the vanilla factories are package private classes.\n+ */\n+public interface TradeOfferFactory {\n+\tTradeOfferFactory FACTORIES = new TradeOfferFactoryImpl();", "originalCommit": "a4d23ad9aa666ddab8aea35aa8bbea9834c1f68a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg1OTQ1MA==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r376859450", "bodyText": "This is like the rate of price growth after usage of this offer", "author": "liach", "createdAt": "2020-02-10T03:54:44Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/trading/v1/TradeOfferFactory.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.trading.v1;\n+\n+import net.minecraft.entity.passive.VillagerEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.village.TradeOffer;\n+import net.minecraft.village.TradeOffers;\n+\n+import net.fabricmc.fabric.impl.object.builder.TradeOfferFactoryImpl;\n+\n+/**\n+ * Represents some generic {@link TradeOffers.Factory} implementations since the vanilla factories are package private classes.\n+ *\n+ * <p>The {@link TradeOffers.Factory}s generated are used in generating {@link TradeOffer}s for Villagers and Wandering Traders.\n+ */\n+public interface TradeOfferFactory {\n+\tTradeOfferFactory INSTANCE = new TradeOfferFactoryImpl();\n+\n+\t/**\n+\t * Represents a trade where a villager buys an item and for one emerald, will \"process\" the item.\n+\t *\n+\t * <p>This is commonly used for cooking items (6 emeralds + 8 raw pork -> 8 cooked pork).\n+\t * @param itemConvertible The item to be processed\n+\t * @param secondCount The required amount of the item being processed.\n+\t * @param sellItem The item which is sold back to the player.\n+\t * @param sellCount The amount of the item sold back to the player.\n+\t * @param maxUses The amount of \"uses\" a trade can take before a villager needs to restock.\n+\t * @param experience The amount of experience the {@link VillagerEntity Villager} will receive.\n+\t * @return A new trade offer factory.\n+\t */\n+\tdefault TradeOffers.Factory createProcessItemFactory(ItemConvertible itemConvertible, int secondCount, Item sellItem, int sellCount, int maxUses, int experience) {\n+\t\treturn this.createProcessItemFactory(itemConvertible, secondCount, 1, sellItem, sellCount, maxUses, experience);\n+\t}\n+\n+\t/**\n+\t * Represents a trade where a villager buys an item and for a few emeralds, will \"process\" the item.\n+\t *\n+\t * <p>This is commonly used for cooking items (6 emeralds + 8 raw pork -> 8 cooked pork).\n+\t * @param itemConvertible The item to be processed\n+\t * @param secondCount The required amount of the item being processed.\n+\t * @param price The required amount of emeralds.\n+\t * @param sellItem The item which is sold back to the player.\n+\t * @param sellCount The amount of the item sold back to the player.\n+\t * @param maxUses The amount of \"uses\" a trade can take before a villager needs to restock.\n+\t * @param experience The amount of experience the {@link VillagerEntity Villager} will receive.\n+\t * @return A new trade offer factory.\n+\t */\n+\tTradeOffers.Factory createProcessItemFactory(ItemConvertible itemConvertible, int secondCount, int price, Item sellItem, int sellCount, int maxUses, int experience);\n+\n+\t/**\n+\t * Represents a trade offer where a villager will sell an item or amount of items for some emeralds.\n+\t * @param item The item this villager will sell.\n+\t * @param price The amount of emeralds needed to buy this item.\n+\t * @param count The amount of the item sold.\n+\t * @param maxUses The amount of \"uses\" a trade can take before a villager needs to restock.\n+\t * @param experience The amount of experience the {@link VillagerEntity Villager} will receive.\n+\t * @return A new trade offer factory.\n+\t */\n+\tdefault TradeOffers.Factory createSellItemFactory(Item item, int price, int count, int maxUses, int experience) {\n+\t\treturn this.createSellItemFactory(new ItemStack(item), price, count, maxUses, experience);\n+\t}\n+\n+\t/**\n+\t * Represents a trade offer where a villager will sell an item or amount of items for some emeralds.\n+\t * @param itemStack The item this villager will sell.\n+\t * @param price The amount of emeralds needed to buy this item.\n+\t * @param count The amount of the item sold.\n+\t * @param maxUses The amount of \"uses\" a trade can take before a villager needs to restock.\n+\t * @param experience The amount of experience the {@link VillagerEntity Villager} will receive.\n+\t * @return A new trade offer factory.\n+\t */\n+\tdefault TradeOffers.Factory createSellItemFactory(ItemStack itemStack, int price, int count, int maxUses, int experience) {\n+\t\treturn this.createSellItemFactory(itemStack, price, count, maxUses, experience, 0.05F);\n+\t}\n+\n+\t/**\n+\t * Represents a trade offer where a villager will sell an item or amount of items for some emeralds.\n+\t * @param itemStack The item this villager will sell.\n+\t * @param price The amount of emeralds needed to buy this item.\n+\t * @param count The amount of the item sold.\n+\t * @param maxUses The amount of \"uses\" a trade can take before a villager needs to restock.\n+\t * @param experience The amount of experience the {@link VillagerEntity Villager} will receive.\n+\t * @param multiplier A price multiplier which represents a possible deviation from the standard price.", "originalCommit": "ebb791cec11e5402f12e212f5e64ff027f3a3318", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg1OTgxMQ==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r376859811", "bodyText": "To be fair I wouldn't have known that since it's pretty vague in the mappings, maybe some TradeOffer javadoc in the future could be nice.", "author": "i509VCB", "createdAt": "2020-02-10T03:57:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg1OTQ1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2MjE4Nw==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r379862187", "bodyText": "Due to the fact that we know the first slot is always emeralds, I propose the following name changes:\n\nitemConvertible -> buyItem, in contrast to sellItem\nsecondCount -> buyCount, in contrast to sellCount\nprice -> emeraldPrice, as it's always for emeralds\n\nThis branches up to the top levels as well, so I'll leave small markers when appropriate.", "author": "Draylar", "createdAt": "2020-02-15T23:18:02Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/impl/object/builder/TradeOfferFactoryImpl.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.object.builder;\n+\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.village.TradeOffer;\n+import net.minecraft.village.TradeOffers;\n+\n+import net.fabricmc.fabric.api.trading.v1.TradeOfferFactory;\n+\n+public class TradeOfferFactoryImpl implements TradeOfferFactory {\n+\t@Override\n+\tpublic TradeOffers.Factory createProcessItemFactory(ItemConvertible itemConvertible, int secondCount, int price, Item sellItem, int sellCount, int maxUses, int experience) {\n+\t\treturn (entity, random) -> new TradeOffer(new ItemStack(Items.EMERALD, price), new ItemStack(itemConvertible, secondCount), new ItemStack(sellItem, sellCount), maxUses, experience, 0.05F);\n+\t}", "originalCommit": "2dc1304d5e6909e7908fbcc5be4ad89e51dc206f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2MjMyNw==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r379862327", "bodyText": "Name change suggestions:\n\nitemStack -> buyStack\nprice -> emeraldPrice, as noted in the above comment\ncount -> buyCount to match other methods", "author": "Draylar", "createdAt": "2020-02-15T23:22:06Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/impl/object/builder/TradeOfferFactoryImpl.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.object.builder;\n+\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.village.TradeOffer;\n+import net.minecraft.village.TradeOffers;\n+\n+import net.fabricmc.fabric.api.trading.v1.TradeOfferFactory;\n+\n+public class TradeOfferFactoryImpl implements TradeOfferFactory {\n+\t@Override\n+\tpublic TradeOffers.Factory createProcessItemFactory(ItemConvertible itemConvertible, int secondCount, int price, Item sellItem, int sellCount, int maxUses, int experience) {\n+\t\treturn (entity, random) -> new TradeOffer(new ItemStack(Items.EMERALD, price), new ItemStack(itemConvertible, secondCount), new ItemStack(sellItem, sellCount), maxUses, experience, 0.05F);\n+\t}\n+\n+\t@Override\n+\tpublic TradeOffers.Factory createSellItemFactory(ItemStack itemStack, int price, int count, int maxUses, int experience, float multiplier) {\n+\t\treturn (entity, random) -> new TradeOffer(new ItemStack(Items.EMERALD, price), new ItemStack(itemStack.getItem(), count), maxUses, experience, multiplier);\n+\t}", "originalCommit": "2dc1304d5e6909e7908fbcc5be4ad89e51dc206f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2MjQ0NQ==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r379862445", "bodyText": "Name change suggestions:\n\nitemConvertible -> buyItem\nprice -> buyAmount", "author": "Draylar", "createdAt": "2020-02-15T23:24:45Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/impl/object/builder/TradeOfferFactoryImpl.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.object.builder;\n+\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.village.TradeOffer;\n+import net.minecraft.village.TradeOffers;\n+\n+import net.fabricmc.fabric.api.trading.v1.TradeOfferFactory;\n+\n+public class TradeOfferFactoryImpl implements TradeOfferFactory {\n+\t@Override\n+\tpublic TradeOffers.Factory createProcessItemFactory(ItemConvertible itemConvertible, int secondCount, int price, Item sellItem, int sellCount, int maxUses, int experience) {\n+\t\treturn (entity, random) -> new TradeOffer(new ItemStack(Items.EMERALD, price), new ItemStack(itemConvertible, secondCount), new ItemStack(sellItem, sellCount), maxUses, experience, 0.05F);\n+\t}\n+\n+\t@Override\n+\tpublic TradeOffers.Factory createSellItemFactory(ItemStack itemStack, int price, int count, int maxUses, int experience, float multiplier) {\n+\t\treturn (entity, random) -> new TradeOffer(new ItemStack(Items.EMERALD, price), new ItemStack(itemStack.getItem(), count), maxUses, experience, multiplier);\n+\t}\n+\n+\t@Override\n+\tpublic TradeOffers.Factory createBuyItemForOneEmeraldFactory(ItemConvertible itemConvertible, int price, int maxUses, int experience) {\n+\t\treturn (entity, random) -> new TradeOffer(new ItemStack(itemConvertible, price), new ItemStack(Items.EMERALD), maxUses, experience, 0.05F);\n+\t}", "originalCommit": "2dc1304d5e6909e7908fbcc5be4ad89e51dc206f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2ODU1NQ==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r379868555", "bodyText": "I would put a newline before the params for readability (and it seems to be what most other API docs do). It might also make sense to double space the area between the parameter names and the descriptions.\nOnly placing a comment here because it's at the top of the review page, but it applies to other methods as well.\nAs for the method description, what if we opted to use a list; maybe something like this?\nRepresents a trade where a Villager processes an item at the cost of 1 Emerald.\n\n<p>Examples:\n<ul>\n<li>3x Raw Porkchop + 1x Emerald -> 3x Cooked Porkchop\n<li>4x Iron Ore + 1x Emerald -> 4x Iron Ingot\n</ul>\nExcuse my potentially incorrect HTML.", "author": "Draylar", "createdAt": "2020-02-16T01:44:49Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/trading/v1/TradeOfferFactory.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.trading.v1;\n+\n+import net.minecraft.entity.passive.VillagerEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.village.TradeOffer;\n+import net.minecraft.village.TradeOffers;\n+\n+import net.fabricmc.fabric.impl.object.builder.TradeOfferFactoryImpl;\n+\n+/**\n+ * Represents some generic {@link TradeOffers.Factory} implementations since the vanilla factories are package private classes.\n+ *\n+ * <p>The {@link TradeOffers.Factory}s generated are used in generating {@link TradeOffer}s for Villagers and Wandering Traders.\n+ */\n+public interface TradeOfferFactory {\n+\tTradeOfferFactory INSTANCE = new TradeOfferFactoryImpl();\n+\n+\t/**\n+\t * Represents a trade where a villager buys an item and for one emerald, will \"process\" the item.\n+\t *\n+\t * <p>This is commonly used for cooking items (6 emeralds + 8 raw pork -> 8 cooked pork).\n+\t * @param itemConvertible The item to be processed\n+\t * @param secondCount The required amount of the item being processed.\n+\t * @param sellItem The item which is sold back to the player.\n+\t * @param sellCount The amount of the item sold back to the player.\n+\t * @param maxUses The amount of \"uses\" a trade can take before a villager needs to restock.\n+\t * @param experience The amount of experience the {@link VillagerEntity Villager} will receive.\n+\t * @return A new trade offer factory.\n+\t */", "originalCommit": "2dc1304d5e6909e7908fbcc5be4ad89e51dc206f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2OTA5NA==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r379869094", "bodyText": "Allows the creation of... -> Allows for the creation of...\nAlternatively, something like This class provides a builder for creating new {@link VillagerProfession} instances. may work.", "author": "Draylar", "createdAt": "2020-02-16T01:59:56Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/villager/v1/VillagerProfessionBuilder.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.villager.v1;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.item.Item;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.village.TradeOffers;\n+import net.minecraft.village.VillagerProfession;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.impl.object.builder.VillagerProfessionBuilderImpl;\n+\n+/**\n+ * Allows the creation of new {@link VillagerProfession}s.\n+ *\n+ * <p>Note this does not register any trades to these villagers. To register trades, add a new entry with your profession as the key to {@link TradeOffers#PROFESSION_TO_LEVELED_TRADE}.\n+ */", "originalCommit": "2dc1304d5e6909e7908fbcc5be4ad89e51dc206f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2OTI5Nw==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r379869297", "bodyText": "What about \"Provides a new instance of the default VillagerProfessionBuilder implementation class.\", or something along those lines?\nThe description is a good start-- I would just add a little bit more information to it.", "author": "Draylar", "createdAt": "2020-02-16T02:05:13Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/villager/v1/VillagerProfessionBuilder.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.villager.v1;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.item.Item;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.village.TradeOffers;\n+import net.minecraft.village.VillagerProfession;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.impl.object.builder.VillagerProfessionBuilderImpl;\n+\n+/**\n+ * Allows the creation of new {@link VillagerProfession}s.\n+ *\n+ * <p>Note this does not register any trades to these villagers. To register trades, add a new entry with your profession as the key to {@link TradeOffers#PROFESSION_TO_LEVELED_TRADE}.\n+ */\n+public interface VillagerProfessionBuilder {\n+\t/**\n+\t * Creates a builder to make a {@link VillagerProfession}.\n+\t * @return A new builder.\n+\t */\n+\tstatic VillagerProfessionBuilder create() {\n+\t\treturn new VillagerProfessionBuilderImpl();\n+\t}", "originalCommit": "2dc1304d5e6909e7908fbcc5be4ad89e51dc206f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2OTQ1NA==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r379869454", "bodyText": "it's -> its, would also capitalize villager.\nI'm thinking it could be tweaked to...\nSets the {@link PointOfInterestType} a Villager with this profession will attempt to search for when finding its workstation.\nThe param should also be tweaked to be similar to the method descriptor, or removed. My recommendation is:\n@param workstation  workstation POI the Villager will search for\n(with type -> workstation parameter change)", "author": "Draylar", "createdAt": "2020-02-16T02:09:28Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/villager/v1/VillagerProfessionBuilder.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.villager.v1;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.item.Item;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.village.TradeOffers;\n+import net.minecraft.village.VillagerProfession;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.impl.object.builder.VillagerProfessionBuilderImpl;\n+\n+/**\n+ * Allows the creation of new {@link VillagerProfession}s.\n+ *\n+ * <p>Note this does not register any trades to these villagers. To register trades, add a new entry with your profession as the key to {@link TradeOffers#PROFESSION_TO_LEVELED_TRADE}.\n+ */\n+public interface VillagerProfessionBuilder {\n+\t/**\n+\t * Creates a builder to make a {@link VillagerProfession}.\n+\t * @return A new builder.\n+\t */\n+\tstatic VillagerProfessionBuilder create() {\n+\t\treturn new VillagerProfessionBuilderImpl();\n+\t}\n+\n+\tVillagerProfessionBuilder id(Identifier id);\n+\n+\t/**\n+\t * The {@link PointOfInterestType} the villager will search for when finding it's workstation.\n+\t * @param type The {@link PointOfInterestType}.\n+\t * @return this builder.\n+\t */", "originalCommit": "2dc1304d5e6909e7908fbcc5be4ad89e51dc206f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg3MjY1NA==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r379872654", "bodyText": "I disagree with abbrivating to POI to be fair", "author": "i509VCB", "createdAt": "2020-02-16T03:39:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2OTQ1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNjI5Ng==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r379936296", "bodyText": "Yeah, I agree POI isn't the correct term. Couldn't think of a better way to phrase it.", "author": "Draylar", "createdAt": "2020-02-16T21:51:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2OTQ1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2OTcwOQ==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r379869709", "bodyText": "Small issue, but\nIn Vanilla this -> In Vanilla, this\nThere's also inconsistent vanilla capitalization in this class-- I think lowercase is more appropriate.\nAs mentioned above, this param tag doesn't give any useful information. Maybe...\n@param items  items harvestable by this profession.", "author": "Draylar", "createdAt": "2020-02-16T02:16:22Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/villager/v1/VillagerProfessionBuilder.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.villager.v1;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.item.Item;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.village.TradeOffers;\n+import net.minecraft.village.VillagerProfession;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.impl.object.builder.VillagerProfessionBuilderImpl;\n+\n+/**\n+ * Allows the creation of new {@link VillagerProfession}s.\n+ *\n+ * <p>Note this does not register any trades to these villagers. To register trades, add a new entry with your profession as the key to {@link TradeOffers#PROFESSION_TO_LEVELED_TRADE}.\n+ */\n+public interface VillagerProfessionBuilder {\n+\t/**\n+\t * Creates a builder to make a {@link VillagerProfession}.\n+\t * @return A new builder.\n+\t */\n+\tstatic VillagerProfessionBuilder create() {\n+\t\treturn new VillagerProfessionBuilderImpl();\n+\t}\n+\n+\tVillagerProfessionBuilder id(Identifier id);\n+\n+\t/**\n+\t * The {@link PointOfInterestType} the villager will search for when finding it's workstation.\n+\t * @param type The {@link PointOfInterestType}.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder workstation(PointOfInterestType type);\n+\n+\t/**\n+\t * Items that a Villager may harvest in this profession.\n+\t *\n+\t * <p>In Vanilla this is used by the farmer to define what type of crops the farmer can harvest.\n+\t *\n+\t * @param items The items.\n+\t * @return this builder.\n+\t */", "originalCommit": "2dc1304d5e6909e7908fbcc5be4ad89e51dc206f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2OTgwMw==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r379869803", "bodyText": "Same case as the above comment.", "author": "Draylar", "createdAt": "2020-02-16T02:19:35Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/villager/v1/VillagerProfessionBuilder.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.villager.v1;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.item.Item;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.village.TradeOffers;\n+import net.minecraft.village.VillagerProfession;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.impl.object.builder.VillagerProfessionBuilderImpl;\n+\n+/**\n+ * Allows the creation of new {@link VillagerProfession}s.\n+ *\n+ * <p>Note this does not register any trades to these villagers. To register trades, add a new entry with your profession as the key to {@link TradeOffers#PROFESSION_TO_LEVELED_TRADE}.\n+ */\n+public interface VillagerProfessionBuilder {\n+\t/**\n+\t * Creates a builder to make a {@link VillagerProfession}.\n+\t * @return A new builder.\n+\t */\n+\tstatic VillagerProfessionBuilder create() {\n+\t\treturn new VillagerProfessionBuilderImpl();\n+\t}\n+\n+\tVillagerProfessionBuilder id(Identifier id);\n+\n+\t/**\n+\t * The {@link PointOfInterestType} the villager will search for when finding it's workstation.\n+\t * @param type The {@link PointOfInterestType}.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder workstation(PointOfInterestType type);\n+\n+\t/**\n+\t * Items that a Villager may harvest in this profession.\n+\t *\n+\t * <p>In Vanilla this is used by the farmer to define what type of crops the farmer can harvest.\n+\t *\n+\t * @param items The items.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder harvestableItems(Item... items);\n+\n+\t/**\n+\t * Items that a Villager may harvest in this profession.\n+\t *\n+\t * <p>In Vanilla this is used by the farmer to define what type of crops the farmer can harvest.\n+\t *\n+\t * @param items A set of items.\n+\t * @return this builder.\n+\t */", "originalCommit": "2dc1304d5e6909e7908fbcc5be4ad89e51dc206f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2OTgyOQ==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r379869829", "bodyText": "Start of the description needs a small tweak-- maybe something like Collection of blocks that suffice as a job site for this profession? Not sure what the best way to refer to varargs is here...\nparam -> @param blocks  collection of job site blocks", "author": "Draylar", "createdAt": "2020-02-16T02:20:45Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/villager/v1/VillagerProfessionBuilder.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.villager.v1;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.item.Item;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.village.TradeOffers;\n+import net.minecraft.village.VillagerProfession;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.impl.object.builder.VillagerProfessionBuilderImpl;\n+\n+/**\n+ * Allows the creation of new {@link VillagerProfession}s.\n+ *\n+ * <p>Note this does not register any trades to these villagers. To register trades, add a new entry with your profession as the key to {@link TradeOffers#PROFESSION_TO_LEVELED_TRADE}.\n+ */\n+public interface VillagerProfessionBuilder {\n+\t/**\n+\t * Creates a builder to make a {@link VillagerProfession}.\n+\t * @return A new builder.\n+\t */\n+\tstatic VillagerProfessionBuilder create() {\n+\t\treturn new VillagerProfessionBuilderImpl();\n+\t}\n+\n+\tVillagerProfessionBuilder id(Identifier id);\n+\n+\t/**\n+\t * The {@link PointOfInterestType} the villager will search for when finding it's workstation.\n+\t * @param type The {@link PointOfInterestType}.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder workstation(PointOfInterestType type);\n+\n+\t/**\n+\t * Items that a Villager may harvest in this profession.\n+\t *\n+\t * <p>In Vanilla this is used by the farmer to define what type of crops the farmer can harvest.\n+\t *\n+\t * @param items The items.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder harvestableItems(Item... items);\n+\n+\t/**\n+\t * Items that a Villager may harvest in this profession.\n+\t *\n+\t * <p>In Vanilla this is used by the farmer to define what type of crops the farmer can harvest.\n+\t *\n+\t * @param items A set of items.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder harvestableItems(Iterable<Item> items);\n+\n+\t/**\n+\t * A blocks which might suffice as a job site for a Villager.\n+\t *\n+\t * <p>In vanilla this is used by the {@link VillagerProfession#FARMER Farmer} to stay near {@link Blocks#FARMLAND Farmland} when at it's job site.\n+\t *\n+\t * @param blocks The blocks.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder secondaryJobSites(Block... blocks);", "originalCommit": "2dc1304d5e6909e7908fbcc5be4ad89e51dc206f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2OTg3OA==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r379869878", "bodyText": "Just the param tag here as mentioned above.", "author": "Draylar", "createdAt": "2020-02-16T02:21:57Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/villager/v1/VillagerProfessionBuilder.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.villager.v1;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.item.Item;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.village.TradeOffers;\n+import net.minecraft.village.VillagerProfession;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.impl.object.builder.VillagerProfessionBuilderImpl;\n+\n+/**\n+ * Allows the creation of new {@link VillagerProfession}s.\n+ *\n+ * <p>Note this does not register any trades to these villagers. To register trades, add a new entry with your profession as the key to {@link TradeOffers#PROFESSION_TO_LEVELED_TRADE}.\n+ */\n+public interface VillagerProfessionBuilder {\n+\t/**\n+\t * Creates a builder to make a {@link VillagerProfession}.\n+\t * @return A new builder.\n+\t */\n+\tstatic VillagerProfessionBuilder create() {\n+\t\treturn new VillagerProfessionBuilderImpl();\n+\t}\n+\n+\tVillagerProfessionBuilder id(Identifier id);\n+\n+\t/**\n+\t * The {@link PointOfInterestType} the villager will search for when finding it's workstation.\n+\t * @param type The {@link PointOfInterestType}.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder workstation(PointOfInterestType type);\n+\n+\t/**\n+\t * Items that a Villager may harvest in this profession.\n+\t *\n+\t * <p>In Vanilla this is used by the farmer to define what type of crops the farmer can harvest.\n+\t *\n+\t * @param items The items.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder harvestableItems(Item... items);\n+\n+\t/**\n+\t * Items that a Villager may harvest in this profession.\n+\t *\n+\t * <p>In Vanilla this is used by the farmer to define what type of crops the farmer can harvest.\n+\t *\n+\t * @param items A set of items.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder harvestableItems(Iterable<Item> items);\n+\n+\t/**\n+\t * A blocks which might suffice as a job site for a Villager.\n+\t *\n+\t * <p>In vanilla this is used by the {@link VillagerProfession#FARMER Farmer} to stay near {@link Blocks#FARMLAND Farmland} when at it's job site.\n+\t *\n+\t * @param blocks The blocks.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder secondaryJobSites(Block... blocks);\n+\n+\t/**\n+\t * Blocks which might suffice as a job site for a Villager.\n+\t *\n+\t * <p>In vanilla this is used by the {@link VillagerProfession#FARMER Farmer} to stay near {@link Blocks#FARMLAND Farmland} when at it's job site.\n+\t *\n+\t * @param blocks A set of blocks.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder secondaryJobSites(Iterable<Block> blocks);", "originalCommit": "2dc1304d5e6909e7908fbcc5be4ad89e51dc206f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2OTkwMA==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r379869900", "bodyText": "I don't think represents is the best term here, maybe it could be \"provides,\" or something similar?", "author": "Draylar", "createdAt": "2020-02-16T02:22:53Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/villager/v1/VillagerProfessionBuilder.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.villager.v1;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.item.Item;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.village.TradeOffers;\n+import net.minecraft.village.VillagerProfession;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.impl.object.builder.VillagerProfessionBuilderImpl;\n+\n+/**\n+ * Allows the creation of new {@link VillagerProfession}s.\n+ *\n+ * <p>Note this does not register any trades to these villagers. To register trades, add a new entry with your profession as the key to {@link TradeOffers#PROFESSION_TO_LEVELED_TRADE}.\n+ */\n+public interface VillagerProfessionBuilder {\n+\t/**\n+\t * Creates a builder to make a {@link VillagerProfession}.\n+\t * @return A new builder.\n+\t */\n+\tstatic VillagerProfessionBuilder create() {\n+\t\treturn new VillagerProfessionBuilderImpl();\n+\t}\n+\n+\tVillagerProfessionBuilder id(Identifier id);\n+\n+\t/**\n+\t * The {@link PointOfInterestType} the villager will search for when finding it's workstation.\n+\t * @param type The {@link PointOfInterestType}.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder workstation(PointOfInterestType type);\n+\n+\t/**\n+\t * Items that a Villager may harvest in this profession.\n+\t *\n+\t * <p>In Vanilla this is used by the farmer to define what type of crops the farmer can harvest.\n+\t *\n+\t * @param items The items.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder harvestableItems(Item... items);\n+\n+\t/**\n+\t * Items that a Villager may harvest in this profession.\n+\t *\n+\t * <p>In Vanilla this is used by the farmer to define what type of crops the farmer can harvest.\n+\t *\n+\t * @param items A set of items.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder harvestableItems(Iterable<Item> items);\n+\n+\t/**\n+\t * A blocks which might suffice as a job site for a Villager.\n+\t *\n+\t * <p>In vanilla this is used by the {@link VillagerProfession#FARMER Farmer} to stay near {@link Blocks#FARMLAND Farmland} when at it's job site.\n+\t *\n+\t * @param blocks The blocks.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder secondaryJobSites(Block... blocks);\n+\n+\t/**\n+\t * Blocks which might suffice as a job site for a Villager.\n+\t *\n+\t * <p>In vanilla this is used by the {@link VillagerProfession#FARMER Farmer} to stay near {@link Blocks#FARMLAND Farmland} when at it's job site.\n+\t *\n+\t * @param blocks A set of blocks.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder secondaryJobSites(Iterable<Block> blocks);\n+\n+\t/**\n+\t * Represents the sound made when a Villager works.\n+\t * @param workSoundEvent The {@link SoundEvent} to be played.\n+\t * @return this builder.\n+\t */\n+\tVillagerProfessionBuilder workSound(SoundEvent workSoundEvent);", "originalCommit": "2dc1304d5e6909e7908fbcc5be4ad89e51dc206f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5ODQzNQ==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r385998435", "bodyText": "So do you want to freeze the offer when the factory's create method is called or when this wrap method is called? If you freeze on wrap method call, the impl should be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn (entity, random) -> new TradeOffer(offer.toTag());\n          \n          \n            \n            \t\tCompoundTag tag = offer.toTag();\n          \n          \n            \n            \t\treturn (entity, random) -> new TradeOffer(tag);\n          \n      \n    \n    \n  \n\nalso this method, being static, looks weird out of all other instance methods.", "author": "liach", "createdAt": "2020-02-29T03:57:51Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/trading/v1/TradeOfferFactory.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.trading.v1;\n+\n+import net.minecraft.entity.passive.VillagerEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.village.TradeOffer;\n+import net.minecraft.village.TradeOffers;\n+\n+import net.fabricmc.fabric.impl.object.builder.TradeOfferFactoryImpl;\n+\n+/**\n+ * Represents some generic {@link TradeOffers.Factory} implementations since the vanilla factories are package private classes.\n+ *\n+ * <p>The {@link TradeOffers.Factory}s generated are used in generating {@link TradeOffer}s for Villagers and Wandering Traders.\n+ */\n+public interface TradeOfferFactory {\n+\tTradeOfferFactory INSTANCE = new TradeOfferFactoryImpl();\n+\n+\t/**\n+\t * Represents a trade where a villager buys an item and for one emerald, will \"process\" the item.\n+\t *\n+\t * <p>This specific overload of the method only takes one emerald to process the item</p>\n+\t *\n+\t * <p>Examples\n+\t * <ul>\n+\t * <li>6x Emeralds + 8x Raw park -> 8x Cooked pork\n+\t * <li>5x Emeralds + 1x Book -> 1x Enchanted Book (Note this requires further logic)\n+\t * </ul>\n+\t *\n+\t * @param buyItem The item to be processed\n+\t * @param buyCount The required amount of the item being processed.\n+\t * @param sellItem The item which is sold back to the player.\n+\t * @param sellCount The amount of the item sold back to the player.\n+\t * @param maxUses The amount of \"uses\" a trade can take before a villager needs to restock.\n+\t * @param experience The amount of experience the {@link VillagerEntity Villager} will receive.\n+\t * @return A new trade offer factory.\n+\t */\n+\tdefault TradeOffers.Factory createProcessItemFactory(ItemConvertible buyItem, int buyCount, Item sellItem, int sellCount, int maxUses, int experience) {\n+\t\treturn this.createProcessItemFactory(buyItem, buyCount, 1, sellItem, sellCount, maxUses, experience);\n+\t}\n+\n+\t/**\n+\t * Represents a trade where a villager buys an item and for a few emeralds, will \"process\" the item.\n+\t *\n+\t * <p>Examples\n+\t * <ul>\n+\t * <li>6x Emeralds + 8x Raw park -> 8x Cooked pork\n+\t * <li>5x Emeralds + 1x Book -> 1x Enchanted Book (Note this requires further logic for enchanting the book)\n+\t * </ul>\n+\t *\n+\t * @param buyItem The item to be processed.\n+\t * @param buyCount The required amount of the item being processed.\n+\t * @param emeraldPrice The required amount of emeralds.\n+\t * @param sellItem The item which is sold back to the player.\n+\t * @param sellCount The amount of the item sold back to the player.\n+\t * @param maxUses The amount of \"uses\" a trade can take before a villager needs to restock.\n+\t * @param experience The amount of experience the {@link VillagerEntity Villager} will receive.\n+\t * @return A new trade offer factory.\n+\t */\n+\tTradeOffers.Factory createProcessItemFactory(ItemConvertible buyItem, int buyCount, int emeraldPrice, Item sellItem, int sellCount, int maxUses, int experience);\n+\n+\t/**\n+\t * Represents a trade offer where a villager will sell an item or amount of items for some emeralds.\n+\t *\n+\t * <p>Examples\n+\t * <ul>\n+\t * <li>3x Emeralds -> 2x White Banners\n+\t * <li>1x Emeralds -> 6x Cooked Chicken\n+\t * </ul>\n+\t *\n+\t * @param sellItem The item this villager will sell.\n+\t * @param emeraldPrice The amount of emeralds needed to buy this item.\n+\t * @param sellCount The amount of the item sold.\n+\t * @param maxUses The amount of \"uses\" a trade can take before a villager needs to restock.\n+\t * @param experience The amount of experience the {@link VillagerEntity Villager} will receive.\n+\t * @return A new trade offer factory.\n+\t */\n+\tdefault TradeOffers.Factory createSellItemFactory(Item sellItem, int emeraldPrice, int sellCount, int maxUses, int experience) {\n+\t\treturn this.createSellItemFactory(new ItemStack(sellItem), emeraldPrice, sellCount, maxUses, experience);\n+\t}\n+\n+\t/**\n+\t * Represents a trade offer where a villager will sell an item or amount of items for some emeralds.\n+\t *\n+\t * <p>Examples\n+\t * <ul>\n+\t * <li>3x Emeralds -> 2x White Banners\n+\t * <li>1x Emeralds -> 6x Cooked Chicken\n+\t * </ul>\n+\t *\n+\t * @param sellStack The item this villager will sell.\n+\t * @param emeraldPrice The amount of emeralds needed to buy this item.\n+\t * @param sellCount The amount of the item sold.\n+\t * @param maxUses The amount of \"uses\" a trade can take before a villager needs to restock.\n+\t * @param experience The amount of experience the {@link VillagerEntity Villager} will receive.\n+\t * @return A new trade offer factory.\n+\t */\n+\tdefault TradeOffers.Factory createSellItemFactory(ItemStack sellStack, int emeraldPrice, int sellCount, int maxUses, int experience) {\n+\t\treturn this.createSellItemFactory(sellStack, emeraldPrice, sellCount, maxUses, experience, 0.05F);\n+\t}\n+\n+\t/**\n+\t * Represents a trade offer where a villager will sell an item for amount of items for some emeralds.\n+\t *\n+\t * <p>Examples\n+\t * <ul>\n+\t * <li>3x Emeralds -> 2x White Banners\n+\t * <li>1x Emeralds -> 6x Cooked Chicken\n+\t * </ul>\n+\t *\n+\t * @param sellStack The item this villager will sell.\n+\t * @param emeraldPrice The amount of emeralds needed to buy this item.\n+\t * @param sellCount The amount of the item sold.\n+\t * @param maxUses The amount of \"uses\" a trade can take before a villager needs to restock.\n+\t * @param experience The amount of experience the {@link VillagerEntity Villager} will receive.\n+\t * @param multiplier A price multiplier which represents the rate of price growth when this offer is used.\n+\t * @return A new trade offer factory.\n+\t */\n+\tTradeOffers.Factory createSellItemFactory(ItemStack sellStack, int emeraldPrice, int sellCount, int maxUses, int experience, float multiplier);\n+\n+\t/**\n+\t * Represents a trade offer where a villager buys an amount of an item for one emerald.\n+\t *\n+\t * <p>Examples\n+\t * <ul>\n+\t * <li>1x Oak Boat -> 1x Emerald\n+\t * </ul>\n+\t *\n+\t * @param buyItem The type of item the villager is buying.\n+\t * @param buyAmount The amount of items needed to receive one emerald.\n+\t * @param maxUses The amount of \"uses\" a trade can take before a villager needs to restock.\n+\t * @param experience The amount of experience the {@link VillagerEntity Villager} will receive.\n+\t * @return A new trade offer factory.\n+\t */\n+\tTradeOffers.Factory createBuyItemForOneEmeraldFactory(ItemConvertible buyItem, int buyAmount, int maxUses, int experience);\n+\n+\t/**\n+\t * Turns a {@link TradeOffer} into a {@link TradeOffers.Factory}.\n+\t *\n+\t * <p>Since TradeOffers which currently belong to a villager are mutable, we serialize and then create a new offer to be wrapped.\n+\t *\n+\t * @param offer The offer to wrap.\n+\t * @return A new trade offer factory.\n+\t */\n+\tstatic TradeOffers.Factory wrap(TradeOffer offer) {\n+\t\treturn (entity, random) -> new TradeOffer(offer.toTag());", "originalCommit": "fb05bd3b533d3e120af32dc9d5c3fe8d136ae3af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyOTkwMA==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r386029900", "bodyText": "I could make a regular wrap method and rename this one to freezeAndWrap\nBut if you were to just wrap the offer as is, multiple villagers who spawn into the world would share the same offer instance is weird.", "author": "i509VCB", "createdAt": "2020-02-29T13:57:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5ODQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzMjk4OQ==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r386032989", "bodyText": "vacuumWrap and freezeDry = freezeAndWrap", "author": "Sollace", "createdAt": "2020-02-29T14:51:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5ODQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1ODkzNQ==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r386058935", "bodyText": "Decided to take liach's suggestion and freeze before the wrapping process.", "author": "i509VCB", "createdAt": "2020-02-29T22:06:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5ODQzNQ=="}], "type": "inlineReview"}, {"oid": "545ae86b88dfc0ced754eb17d77093c551a6e9b1", "url": "https://github.com/FabricMC/fabric/commit/545ae86b88dfc0ced754eb17d77093c551a6e9b1", "message": "Freeze the wrap offer method a bit better and fix a weird typo in docs.", "committedDate": "2020-03-27T16:34:38Z", "type": "forcePushed"}, {"oid": "dd8867a49010965f5ef8add3b631f4f77ea68643", "url": "https://github.com/FabricMC/fabric/commit/dd8867a49010965f5ef8add3b631f4f77ea68643", "message": "Add Object builders for simplifying the process of creating villager professions and point of interest types.", "committedDate": "2020-05-01T00:20:07Z", "type": "commit"}, {"oid": "dd8867a49010965f5ef8add3b631f4f77ea68643", "url": "https://github.com/FabricMC/fabric/commit/dd8867a49010965f5ef8add3b631f4f77ea68643", "message": "Add Object builders for simplifying the process of creating villager professions and point of interest types.", "committedDate": "2020-05-01T00:20:07Z", "type": "forcePushed"}, {"oid": "5614c4841b19042330a1670ceb063c77adff77c5", "url": "https://github.com/FabricMC/fabric/commit/5614c4841b19042330a1670ceb063c77adff77c5", "message": "Move everything to new object-builders-api", "committedDate": "2020-05-01T00:44:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0NDE0NQ==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r418744145", "bodyText": "This class is rather odd, why does it mix create and register method names for no obvious reason?\nA standalone create sounds like it'd create an instance of the containing class, register is similarly a bit too context-less for my taste.\nThe implementation looks a lot like it deserves a common (private?) method that does the actual registration with the other methods only restructuring the inputs.", "author": "sfPlayer1", "createdAt": "2020-05-01T21:23:48Z", "path": "fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/world/poi/PointOfInterestHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.object.builder.v1.world.poi;\n+\n+import java.util.function.Predicate;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.mixin.object.builder.PointOfInterestTypeAccessor;\n+\n+/**\n+ * This class provides utilities to create a {@link PointOfInterestType}.\n+ */\n+public final class PointOfInterestHelper {", "originalCommit": "5614c4841b19042330a1670ceb063c77adff77c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc2NzQ5NQ==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r418767495", "bodyText": "I could unbind the registration from this class, but the setup calls inside are necessary.\nI'll look into overloading most of the method calls", "author": "i509VCB", "createdAt": "2020-05-01T22:42:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0NDE0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAxNjkzMQ==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r419016931", "bodyText": "Everything is a register method now and called register. I've overloaded most methods down to two", "author": "i509VCB", "createdAt": "2020-05-02T22:39:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0NDE0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0NTYzOA==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r418745638", "bodyText": "I am not convinced it is a good idea to use an interface for the builder, the impl looks simple enough to embed here.", "author": "sfPlayer1", "createdAt": "2020-05-01T21:28:19Z", "path": "fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/villager/VillagerProfessionBuilder.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.object.builder.v1.villager;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.client.render.entity.feature.VillagerResourceMetadata;\n+import net.minecraft.item.Item;\n+import net.minecraft.sound.SoundEvent;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.village.TradeOffers;\n+import net.minecraft.village.VillagerProfession;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.impl.object.builder.VillagerProfessionBuilderImpl;\n+\n+/**\n+ * Allows for the creation of new {@link VillagerProfession}s.\n+ *\n+ * <p>The texture for the villagers are located at <code>assets/IDENTIFIER_NAMESPACE/textures/entity/villager/profession/IDENTIFIER_PATH.png</code>\n+ *\n+ * <p>A corresponding <code>IDENTIFIER_PATH.mcmeta</code> file exits in the same directory to define properties such as the {@link VillagerResourceMetadata.HatType HatType} this profession would use.\n+ *\n+ * <p>Note this does not register any trades to these villagers. To register trades, add a new entry with your profession as the key to {@link TradeOffers#PROFESSION_TO_LEVELED_TRADE}.\n+ */\n+public interface VillagerProfessionBuilder {", "originalCommit": "5614c4841b19042330a1670ceb063c77adff77c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc2NzY0Ng==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r418767646", "bodyText": "Hmm, I think I'll drop the impl half of the builder down to API since it isn't that complex", "author": "i509VCB", "createdAt": "2020-05-01T22:42:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0NTYzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1MDAwNQ==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r418750005", "bodyText": "\"can be present on\" sounds too vague for me", "author": "sfPlayer1", "createdAt": "2020-05-01T21:40:54Z", "path": "fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/world/poi/PointOfInterestHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.object.builder.v1.world.poi;\n+\n+import java.util.function.Predicate;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.mixin.object.builder.PointOfInterestTypeAccessor;\n+\n+/**\n+ * This class provides utilities to create a {@link PointOfInterestType}.\n+ */\n+public final class PointOfInterestHelper {\n+\tprivate PointOfInterestHelper() {\n+\t\tthrow new IllegalStateException(\"You shouldn't be initializing this!\");\n+\t}\n+\n+\t/**\n+\t * Registers and creates a {@link PointOfInterestType}.\n+\t * @param id The id of this {@link PointOfInterestType}.\n+\t * @param ticketCount The amount of tickets.\n+\t * @param searchDistance The search distance.\n+\t * @param workStationBlocks All the blocks this {@link PointOfInterestType} can be present on.", "originalCommit": "5614c4841b19042330a1670ceb063c77adff77c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1MTM1OA==", "url": "https://github.com/FabricMC/fabric/pull/493#discussion_r418751358", "bodyText": "The description could help disambiguate the various overloads by telling what is special about each.\nBlank line after the 1st sentence and/or before the tag area please.", "author": "sfPlayer1", "createdAt": "2020-05-01T21:44:58Z", "path": "fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/world/poi/PointOfInterestHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.object.builder.v1.world.poi;\n+\n+import java.util.function.Predicate;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.world.poi.PointOfInterestType;\n+\n+import net.fabricmc.fabric.mixin.object.builder.PointOfInterestTypeAccessor;\n+\n+/**\n+ * This class provides utilities to create a {@link PointOfInterestType}.\n+ */\n+public final class PointOfInterestHelper {\n+\tprivate PointOfInterestHelper() {\n+\t\tthrow new IllegalStateException(\"You shouldn't be initializing this!\");\n+\t}\n+\n+\t/**\n+\t * Registers and creates a {@link PointOfInterestType}.", "originalCommit": "5614c4841b19042330a1670ceb063c77adff77c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d6fa9d99d84759c8d33f6d681972eea9386cd1a7", "url": "https://github.com/FabricMC/fabric/commit/d6fa9d99d84759c8d33f6d681972eea9386cd1a7", "message": "flatten a bit down", "committedDate": "2020-05-02T22:37:10Z", "type": "commit"}, {"oid": "3c9f6efeefe9014296e0b0aea0d1dd7a71863d22", "url": "https://github.com/FabricMC/fabric/commit/3c9f6efeefe9014296e0b0aea0d1dd7a71863d22", "message": "a few javadoc changes", "committedDate": "2020-05-03T18:18:27Z", "type": "commit"}, {"oid": "6c0e78bcde6e62c5f6044769a979b7e8983e7bff", "url": "https://github.com/FabricMC/fabric/commit/6c0e78bcde6e62c5f6044769a979b7e8983e7bff", "message": "More JD tweaks", "committedDate": "2020-05-08T23:30:29Z", "type": "commit"}]}