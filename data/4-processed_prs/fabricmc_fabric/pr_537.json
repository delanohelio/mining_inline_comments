{"pr_number": 537, "pr_title": "Object builders v0->v1 migration", "pr_createdAt": "2020-03-18T21:27:56Z", "pr_url": "https://github.com/FabricMC/fabric/pull/537", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2ODcxNw==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r394668717", "bodyText": "This here should be a FabricMaterialBuilder (this is the v0 package) but is being handled by #533.\nThis change is already done in the v1 package", "author": "i509VCB", "createdAt": "2020-03-18T22:11:20Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/block/FabricMaterialBuilder.java", "diffHunk": "@@ -34,59 +39,64 @@ public FabricMaterialBuilder(DyeColor color) {\n \n \t@Override\n \tpublic FabricMaterialBuilder burnable() {\n-\t\tsuper.burnable();\n+\t\tthis.delegate.burnable();\n \t\treturn this;\n \t}\n \n \tpublic FabricMaterialBuilder pistonBehavior(PistonBehavior behavior) {\n-\t\t((MaterialBuilderHooks) this).setPistonBehavior(behavior);\n+\t\tthis.delegate.pistonBehavior(behavior);\n \t\treturn this;\n \t}\n \n \tpublic FabricMaterialBuilder lightPassesThrough() {\n-\t\t((MaterialBuilderHooks) this).invokeLightPassesThrough();\n+\t\tthis.delegate.lightPassesThrough();\n \t\treturn this;\n \t}\n \n \t@Override\n \tpublic FabricMaterialBuilder destroyedByPiston() {\n-\t\tsuper.destroyedByPiston();\n+\t\tthis.delegate.destroyedByPiston();\n \t\treturn this;\n \t}\n \n \t@Override\n \tpublic FabricMaterialBuilder blocksPistons() {\n-\t\tsuper.blocksPistons();\n+\t\tthis.delegate.blocksPistons();\n \t\treturn this;\n \t}\n \n \t@Override\n \tpublic FabricMaterialBuilder allowsMovement() {\n-\t\tsuper.allowsMovement();\n+\t\tthis.delegate.allowsMovement();\n \t\treturn this;\n \t}\n \n \t@Override\n \tpublic FabricMaterialBuilder liquid() {\n-\t\tsuper.liquid();\n+\t\tthis.delegate.liquid();\n \t\treturn this;\n \t}\n \n \t@Override\n \tpublic Material.Builder notSolid() {", "originalCommit": "8442b7de177fe72049aba0e3df48538ef24629ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxNTM2Nw==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r399315367", "bodyText": "Please refer to the actual replacement class in these using @link", "author": "sfPlayer1", "createdAt": "2020-03-27T14:43:20Z", "path": "fabric-object-builders-v0/src/main/java/net/fabricmc/fabric/api/block/BlockSettingsExtensions.java", "diffHunk": "@@ -23,65 +23,67 @@\n import net.minecraft.tag.Tag;\n import net.minecraft.util.Identifier;\n \n-import net.fabricmc.fabric.mixin.object.builder.BlockSettingsHooks;\n-\n+/**\n+ * @deprecated Please migrate to v1.", "originalCommit": "8442b7de177fe72049aba0e3df48538ef24629ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxNjY0NA==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r399316644", "bodyText": "adding this is superfluous IMO, it is ok (=optional) for new code, but changing existing code is not necessary.", "author": "sfPlayer1", "createdAt": "2020-03-27T14:45:05Z", "path": "fabric-object-builders-v1/src/main/java/net/fabricmc/fabric/impl/object/builder/FabricEntityType.java", "diffHunk": "@@ -25,35 +25,35 @@\n \tprivate final int maxTrackDistance, trackTickInterval;\n \tprivate final Boolean alwaysUpdateVelocity;\n \n-\tpublic FabricEntityType(EntityType.EntityFactory<T> factory, EntityCategory category, boolean bl, boolean summonable, boolean fireImmune, boolean spawnableFarFromPlayer, int i, int j, EntityDimensions entityDimensions, int maxTrackDistance, int trackTickInterval, Boolean alwaysUpdateVelocity) {\n-\t\tsuper(factory, category, bl, summonable, fireImmune, spawnableFarFromPlayer, i, j, entityDimensions);\n+\tpublic FabricEntityType(EntityType.EntityFactory<T> factory, EntityCategory category, boolean saveable, boolean summonable, boolean fireImmune, boolean spawnableFarFromPlayer, int maxDespawnDistance, int minDespawnDistance, EntityDimensions dimensions, int maxTrackDistance, int trackTickInterval, Boolean alwaysUpdateVelocity) {\n+\t\tsuper(factory, category, saveable, summonable, fireImmune, spawnableFarFromPlayer, maxDespawnDistance, minDespawnDistance, dimensions);\n \t\tthis.maxTrackDistance = maxTrackDistance;\n \t\tthis.trackTickInterval = trackTickInterval;\n \t\tthis.alwaysUpdateVelocity = alwaysUpdateVelocity;\n \t}\n \n \t@Override\n \tpublic int getMaxTrackDistance() {\n-\t\tif (maxTrackDistance != -1) {\n-\t\t\treturn (maxTrackDistance + 15) / 16;\n+\t\tif (this.maxTrackDistance != -1) {", "originalCommit": "8442b7de177fe72049aba0e3df48538ef24629ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMzMDk0Ng==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r399330946", "bodyText": "i509VCB when he uses the Sponge formatter \ud83d\ude1b", "author": "liach", "createdAt": "2020-03-27T15:04:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxNjY0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM5MTA2MA==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r399391060", "bodyText": "I think this change was a style preference for me where I use this religiously when accessing fields which are a part of the class.", "author": "i509VCB", "createdAt": "2020-03-27T16:31:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxNjY0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxNzI0Mw==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r399317243", "bodyText": "the module name should use singular \"builder\"", "author": "sfPlayer1", "createdAt": "2020-03-27T14:45:52Z", "path": "fabric-object-builders-v1/src/main/resources/fabric-object-builders-v1.mixins.json", "diffHunk": "@@ -0,0 +1,14 @@\n+{", "originalCommit": "8442b7de177fe72049aba0e3df48538ef24629ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxODMxMA==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r399318310", "bodyText": "The package doesn't correspond to the requirements outlined at https://github.com/FabricMC/fabric/blob/1.15/checkstyle.xml#L158 - please adjust", "author": "sfPlayer1", "createdAt": "2020-03-27T14:47:19Z", "path": "fabric-object-builders-v1/src/main/java/net/fabricmc/fabric/api/entity/v1/FabricEntityTypeBuilder.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.entity.v1;", "originalCommit": "8442b7de177fe72049aba0e3df48538ef24629ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1decbee0668cd8e0d3738dc54b78c003c8ec554b", "url": "https://github.com/FabricMC/fabric/commit/1decbee0668cd8e0d3738dc54b78c003c8ec554b", "message": "Integreate TheGlitch76's EntityType renames into the v1 types", "committedDate": "2020-03-27T16:07:35Z", "type": "forcePushed"}, {"oid": "220b62487125333f2099a6ea09cf9ef23d8e1418", "url": "https://github.com/FabricMC/fabric/commit/220b62487125333f2099a6ea09cf9ef23d8e1418", "message": "Packages moving II", "committedDate": "2020-04-09T22:04:10Z", "type": "forcePushed"}, {"oid": "b0d6aaa654062f23da418fcb8ed2700b852edd4e", "url": "https://github.com/FabricMC/fabric/commit/b0d6aaa654062f23da418fcb8ed2700b852edd4e", "message": "Begin v0->v1 migration with object builders", "committedDate": "2020-04-09T22:06:23Z", "type": "forcePushed"}, {"oid": "2a44b0ff78b4f88c2e789d76a9c193302660ba77", "url": "https://github.com/FabricMC/fabric/commit/2a44b0ff78b4f88c2e789d76a9c193302660ba77", "message": "Begin v0->v1 migration with object builders", "committedDate": "2020-04-20T00:07:30Z", "type": "forcePushed"}, {"oid": "48d1e8cb51375187a567c9f3c0615813fbc82ce2", "url": "https://github.com/FabricMC/fabric/commit/48d1e8cb51375187a567c9f3c0615813fbc82ce2", "message": "Begin v0->v1 migration with object builders", "committedDate": "2020-04-20T00:19:01Z", "type": "forcePushed"}, {"oid": "dd868876cce04b9a18e4c6e072f2fe64c99edf9c", "url": "https://github.com/FabricMC/fabric/commit/dd868876cce04b9a18e4c6e072f2fe64c99edf9c", "message": "Migrate object builders from v0 -> v1", "committedDate": "2020-04-20T00:23:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTUyMA==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r411125520", "bodyText": "Something should probably be done about these constructors and factory methods, some use static of(), some static create(), some public constructors like this one. Full consistency is IMO not /that/ important, but it should at least be considered and discussed.", "author": "sfPlayer1", "createdAt": "2020-04-20T06:30:50Z", "path": "fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/block/FabricMaterialBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.object.builder.v1.block;\n+\n+import net.minecraft.block.Material;\n+import net.minecraft.block.MaterialColor;\n+import net.minecraft.block.piston.PistonBehavior;\n+import net.minecraft.util.DyeColor;\n+\n+import net.fabricmc.fabric.mixin.object.builder.MaterialBuilderAccessor;\n+\n+public class FabricMaterialBuilder extends Material.Builder {\n+\tpublic FabricMaterialBuilder(MaterialColor color) {", "originalCommit": "1b57108fd53f3fc8961949ebff5d59c0f62a2fe3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NzY5OA==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r411657698", "bodyText": "Hmm I would be fine with using of or create.\nSince this a builder we may want to consider that of or create doesn't make 100% sense", "author": "i509VCB", "createdAt": "2020-04-20T20:08:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5MzAwNA==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r411793004", "bodyText": "how about... builder?", "author": "Prospector", "createdAt": "2020-04-21T01:01:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5MzIxNA==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r411793214", "bodyText": "FabricMaterial.builder() or something", "author": "Prospector", "createdAt": "2020-04-21T01:01:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5OTY5Mw==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r411799693", "bodyText": "I'd personally lean towards builder().\n@sfPlayer1 what do you think of that?", "author": "i509VCB", "createdAt": "2020-04-21T01:21:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgwNDU2MQ==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r411804561", "bodyText": "I don't like it, you use this in the non-builder class, which we don't have.", "author": "sfPlayer1", "createdAt": "2020-04-21T01:35:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgzMDY2MA==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r411830660", "bodyText": "well normally with a builder you either have a builder method in the built class or you use the builder's constructor. IMO the constructor is fine and should be the standard, at least for builders.", "author": "Prospector", "createdAt": "2020-04-21T02:54:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2NTkyNw==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r411965927", "bodyText": "Chose to stick with the ctors since this is relatively simple", "author": "i509VCB", "createdAt": "2020-04-21T08:06:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI2NjU3Mg==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r412266572", "bodyText": "Chose to stick with the ctors since this is relatively simple\n\nNo, there should be consistency for consturcting material builder and block settings. Either make material builder use utility methods or make block settings use constructors.", "author": "liach", "createdAt": "2020-04-21T15:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM3NzA0Mg==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r415377042", "bodyText": "Is it possible to have a simple util method to copy from an existing material", "author": "shedaniel", "createdAt": "2020-04-26T19:00:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM3ODQzMA==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r415378430", "bodyText": "Also really would like to have methods to unset settings, such as unset requires tools", "author": "shedaniel", "createdAt": "2020-04-26T19:07:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTUyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI2NzUxMA==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r412267510", "bodyText": "Why not mixing the field into the block settings class?", "author": "liach", "createdAt": "2020-04-21T15:05:58Z", "path": "fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/impl/object/builder/FabricBlockInternals.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.object.builder;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.item.Item;\n+import net.minecraft.tag.Tag;\n+\n+import net.fabricmc.fabric.impl.mining.level.ToolManager;\n+\n+public final class FabricBlockInternals {\n+\tprivate FabricBlockInternals() {\n+\t}\n+\n+\tpublic static final Map<Block.Settings, ExtraData> EXTRA_DATA = new HashMap<>();", "originalCommit": "1b57108fd53f3fc8961949ebff5d59c0f62a2fe3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI3NjI0MQ==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r412276241", "bodyText": "Makes sense to reduce Map calls, but that will be to @sfPlayer1 to decide since I dont want to reinvent the entire wheel.\nIt's already an improvement this isn't a inner class of an api class anymore", "author": "i509VCB", "createdAt": "2020-04-21T15:16:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI2NzUxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUxMjQxNw==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r412512417", "bodyText": "Block.Settings isn't a builder, this is.", "author": "Prospector", "createdAt": "2020-04-21T21:43:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI2NzUxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUxMjgxMA==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r412512810", "bodyText": "Not sure why this replied to the wrong comment. The mobile app sucks. It should be a reply to liach's comment on the material builder.", "author": "Prospector", "createdAt": "2020-04-21T21:44:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI2NzUxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkwODAwOA==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r412908008", "bodyText": "The field should be a lot safer, this asks for the contents to become stale/never read again", "author": "sfPlayer1", "createdAt": "2020-04-22T11:42:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI2NzUxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM3Nzg4OQ==", "url": "https://github.com/FabricMC/fabric/pull/537#discussion_r415377889", "bodyText": "So to you want me to store the extra data via a mixin in the Block.Settings? In a field", "author": "i509VCB", "createdAt": "2020-04-26T19:04:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI2NzUxMA=="}], "type": "inlineReview"}, {"oid": "197d73d4e798e9198e556d6253f36a03b1370435", "url": "https://github.com/FabricMC/fabric/commit/197d73d4e798e9198e556d6253f36a03b1370435", "message": "Migrate object builders from v0 -> v1", "committedDate": "2020-04-22T16:53:52Z", "type": "forcePushed"}, {"oid": "d231f776da0e6c9e00bc9351a9407c3c9fcb39d6", "url": "https://github.com/FabricMC/fabric/commit/d231f776da0e6c9e00bc9351a9407c3c9fcb39d6", "message": "Migrate object builders from v0 -> v1", "committedDate": "2020-04-22T17:11:31Z", "type": "forcePushed"}, {"oid": "868af7e850c64e013958292c53788d5b8bd93674", "url": "https://github.com/FabricMC/fabric/commit/868af7e850c64e013958292c53788d5b8bd93674", "message": "Migrate object builders from v0 -> v1", "committedDate": "2020-04-28T03:46:32Z", "type": "commit"}, {"oid": "57856ef7041dbe7c4d772a83bf03d89f22c1ccd9", "url": "https://github.com/FabricMC/fabric/commit/57856ef7041dbe7c4d772a83bf03d89f22c1ccd9", "message": "Port entity attribute registry to v1", "committedDate": "2020-04-29T05:58:57Z", "type": "commit"}, {"oid": "57856ef7041dbe7c4d772a83bf03d89f22c1ccd9", "url": "https://github.com/FabricMC/fabric/commit/57856ef7041dbe7c4d772a83bf03d89f22c1ccd9", "message": "Port entity attribute registry to v1", "committedDate": "2020-04-29T05:58:57Z", "type": "forcePushed"}]}