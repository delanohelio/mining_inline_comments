{"pr_number": 1245, "pr_title": "Update networking API to 20w46a+, simplify mixin impl", "pr_createdAt": "2020-12-29T02:27:37Z", "pr_url": "https://github.com/FabricMC/fabric/pull/1245", "timeline": [{"oid": "72c29480066a998fcbc595515ee7ecbbe8239866", "url": "https://github.com/FabricMC/fabric/commit/72c29480066a998fcbc595515ee7ecbbe8239866", "message": "Update networking API to 20w46a+, simplify mixin impl", "committedDate": "2020-12-29T02:26:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0OTEwNw==", "url": "https://github.com/FabricMC/fabric/pull/1245#discussion_r549549107", "bodyText": "Should this be returning an empty set or fail since the entity is not being tracked at all by the server world.", "author": "i509VCB", "createdAt": "2020-12-29T02:51:01Z", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/PlayerLookup.java", "diffHunk": "@@ -111,9 +113,15 @@\n \n \t\tif (manager instanceof ServerChunkManager) {\n \t\t\tThreadedAnvilChunkStorage storage = ((ServerChunkManager) manager).threadedAnvilChunkStorage;\n+\t\t\tEntityTrackerAccessor tracker = ((ThreadedAnvilChunkStorageAccessor) storage).getEntityTrackers().get(entity.getEntityId());\n \n \t\t\t// return an immutable collection to guard against accidental removals.\n-\t\t\treturn Collections.unmodifiableCollection(((ThreadedAnvilChunkStorageTrackingExtensions) storage).fabric_getTrackingPlayers(entity));\n+\t\t\tif (tracker != null) {\n+\t\t\t\treturn Collections.unmodifiableCollection(tracker.getPlayersTracking()\n+\t\t\t\t\t\t.stream().map(class_5629::method_32311).collect(Collectors.toSet()));\n+\t\t\t}\n+\n+\t\t\treturn Collections.emptySet();", "originalCommit": "72c29480066a998fcbc595515ee7ecbbe8239866", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0OTU3Nw==", "url": "https://github.com/FabricMC/fabric/pull/1245#discussion_r549549577", "bodyText": "This is following the semantics of the late ThreadedAnvilChunkStorageMixinfabric_getTrackingPlayers", "author": "ChloeDawn", "createdAt": "2020-12-29T02:53:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0OTEwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0OTcyNw==", "url": "https://github.com/FabricMC/fabric/pull/1245#discussion_r549549727", "bodyText": "Hmm I see.", "author": "i509VCB", "createdAt": "2020-12-29T02:54:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0OTEwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU2NjI4OA==", "url": "https://github.com/FabricMC/fabric/pull/1245#discussion_r549566288", "bodyText": "pre-sized output collection with manual for-each please, the Stream is needless overhead+debugging hazard", "author": "sfPlayer1", "createdAt": "2020-12-29T04:46:30Z", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/PlayerLookup.java", "diffHunk": "@@ -111,9 +113,15 @@\n \n \t\tif (manager instanceof ServerChunkManager) {\n \t\t\tThreadedAnvilChunkStorage storage = ((ServerChunkManager) manager).threadedAnvilChunkStorage;\n+\t\t\tEntityTrackerAccessor tracker = ((ThreadedAnvilChunkStorageAccessor) storage).getEntityTrackers().get(entity.getEntityId());\n \n \t\t\t// return an immutable collection to guard against accidental removals.\n-\t\t\treturn Collections.unmodifiableCollection(((ThreadedAnvilChunkStorageTrackingExtensions) storage).fabric_getTrackingPlayers(entity));\n+\t\t\tif (tracker != null) {\n+\t\t\t\treturn Collections.unmodifiableCollection(tracker.getPlayersTracking()\n+\t\t\t\t\t\t.stream().map(class_5629::method_32311).collect(Collectors.toSet()));", "originalCommit": "72c29480066a998fcbc595515ee7ecbbe8239866", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}