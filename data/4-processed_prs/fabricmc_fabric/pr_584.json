{"pr_number": 584, "pr_title": "Screen handler API", "pr_createdAt": "2020-04-18T13:21:02Z", "pr_url": "https://github.com/FabricMC/fabric/pull/584", "timeline": [{"oid": "8b3fbafbba4b4f80beda535f58a8dc2172db0801", "url": "https://github.com/FabricMC/fabric/commit/8b3fbafbba4b4f80beda535f58a8dc2172db0801", "message": "Add screen handler API", "committedDate": "2020-04-18T13:38:20Z", "type": "commit"}, {"oid": "d2267bb5877f84a3c6c19207575f8f58eed385bc", "url": "https://github.com/FabricMC/fabric/commit/d2267bb5877f84a3c6c19207575f8f58eed385bc", "message": "Use more descriptive letters for FabricHandledScreens generics", "committedDate": "2020-04-18T13:38:20Z", "type": "commit"}, {"oid": "d2267bb5877f84a3c6c19207575f8f58eed385bc", "url": "https://github.com/FabricMC/fabric/commit/d2267bb5877f84a3c6c19207575f8f58eed385bc", "message": "Use more descriptive letters for FabricHandledScreens generics", "committedDate": "2020-04-18T13:38:20Z", "type": "forcePushed"}, {"oid": "879c90a5f743c5f9d0a3b074efee8533d06d65bc", "url": "https://github.com/FabricMC/fabric/commit/879c90a5f743c5f9d0a3b074efee8533d06d65bc", "message": "Add missing Deprecated annotations", "committedDate": "2020-04-18T13:40:29Z", "type": "commit"}, {"oid": "6c1f374d69f97c4f8ca3156787bee0585a2047b8", "url": "https://github.com/FabricMC/fabric/commit/6c1f374d69f97c4f8ca3156787bee0585a2047b8", "message": "Bump fabric-containers-v0 version", "committedDate": "2020-04-18T13:44:19Z", "type": "commit"}, {"oid": "0e077dc5d2fa67d1c79811ba2ee42c7e09e0f868", "url": "https://github.com/FabricMC/fabric/commit/0e077dc5d2fa67d1c79811ba2ee42c7e09e0f868", "message": "Remove unused ServerPlayerEntityAccessor", "committedDate": "2020-04-18T13:53:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgzNTgwMA==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410835800", "bodyText": "I like final things (could you make this method final?)", "author": "i509VCB", "createdAt": "2020-04-19T07:04:00Z", "path": "fabric-screen-handler-api-v1/src/main/java/net/fabricmc/fabric/impl/screenhandler/ExtendedScreenHandlerType.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.screenhandler;\n+\n+import net.minecraft.entity.player.PlayerInventory;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.screen.ScreenHandler;\n+import net.minecraft.screen.ScreenHandlerType;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.screenhandler.v1.ScreenHandlers;\n+\n+public final class ExtendedScreenHandlerType<T extends ScreenHandler> extends ScreenHandlerType<T> {\n+\tprivate final ScreenHandlers.ExtendedFactory<T> factory;\n+\n+\tExtendedScreenHandlerType(ScreenHandlers.ExtendedFactory<T> factory) {\n+\t\tsuper(null);\n+\t\tthis.factory = factory;\n+\t}\n+\n+\t@Environment(EnvType.CLIENT)\n+\t@Override\n+\tpublic T create(int syncId, PlayerInventory inventory) {", "originalCommit": "0e077dc5d2fa67d1c79811ba2ee42c7e09e0f868", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgzNzI0Ng==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410837246", "bodyText": "It doesn't really matter as the class is final.", "author": "Juuxel", "createdAt": "2020-04-19T07:12:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgzNTgwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgzNjM3MQ==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410836371", "bodyText": "Unsure about putting the [Fabric] in the logs directly. I want to get someone else to look at this as a standards question as well.", "author": "i509VCB", "createdAt": "2020-04-19T07:07:49Z", "path": "fabric-screen-handler-api-v1/src/main/java/net/fabricmc/fabric/impl/screenhandler/client/NetworkingClient.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.screenhandler.client;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.screen.ingame.HandledScreens;\n+import net.minecraft.client.gui.screen.ingame.ScreenHandlerProvider;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.screen.ScreenHandlerType;\n+import net.minecraft.text.Text;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ClientModInitializer;\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.network.ClientSidePacketRegistry;\n+import net.fabricmc.fabric.impl.screenhandler.ExtendedScreenHandlerType;\n+import net.fabricmc.fabric.impl.screenhandler.Packets;\n+\n+@Environment(EnvType.CLIENT)\n+public final class NetworkingClient implements ClientModInitializer {\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\n+\t@Override\n+\tpublic void onInitializeClient() {\n+\t\tClientSidePacketRegistry.INSTANCE.register(Packets.OPEN_ID, (ctx, buf) -> openScreen(buf));\n+\t}\n+\n+\t@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+\tprivate void openScreen(PacketByteBuf buf) {\n+\t\tint typeId = buf.readVarInt();\n+\t\tint syncId = buf.readVarInt();\n+\t\tText title = buf.readText();\n+\t\tScreenHandlerType<?> type = Registry.SCREEN_HANDLER.get(typeId);\n+\n+\t\tif (type == null) {\n+\t\t\tLOGGER.warn(\"[Fabric] Unknown screen handler ID: {}\", typeId);", "originalCommit": "0e077dc5d2fa67d1c79811ba2ee42c7e09e0f868", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgzNzY3NQ==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410837675", "bodyText": "Good spotting. The logger name should suffice; this [Fabric] should be removed.", "author": "liach", "createdAt": "2020-04-19T07:15:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgzNjM3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgzNjIxNA==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410836214", "bodyText": "This sounds too much like a utility class... You can just make this a utility class which methods accomplish the functionalities (allows preserving binary compatibility across different implementations/updates as well)", "author": "liach", "createdAt": "2020-04-19T07:06:40Z", "path": "fabric-screen-handler-api-v1/src/main/java/net/fabricmc/fabric/api/screenhandler/v1/ScreenHandlers.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.screenhandler.v1;\n+\n+import net.minecraft.entity.player.PlayerInventory;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.screen.ScreenHandler;\n+import net.minecraft.screen.ScreenHandlerType;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.screenhandler.ScreenHandlersImpl;\n+\n+/**\n+ * An utility for creating screen handler types.\n+ */\n+public interface ScreenHandlers {", "originalCommit": "0e077dc5d2fa67d1c79811ba2ee42c7e09e0f868", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgzNjMxOQ==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410836319", "bodyText": "Class sounds too much like a utility class", "author": "liach", "createdAt": "2020-04-19T07:07:32Z", "path": "fabric-screen-handler-api-v1/src/main/java/net/fabricmc/fabric/api/screenhandler/v1/client/FabricHandledScreens.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.screenhandler.v1.client;\n+\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.screen.ingame.ScreenHandlerProvider;\n+import net.minecraft.entity.player.PlayerInventory;\n+import net.minecraft.screen.ScreenHandler;\n+import net.minecraft.screen.ScreenHandlerType;\n+import net.minecraft.text.Text;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.screenhandler.client.FabricHandledScreensImpl;\n+\n+/**\n+ * An utility for registering screens with screen handlers.\n+ */\n+@Environment(EnvType.CLIENT)\n+public interface FabricHandledScreens {", "originalCommit": "0e077dc5d2fa67d1c79811ba2ee42c7e09e0f868", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgzNzE3Mw==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410837173", "bodyText": "Hmm, is Registry.get safe in netty eventloop", "author": "liach", "createdAt": "2020-04-19T07:12:23Z", "path": "fabric-screen-handler-api-v1/src/main/java/net/fabricmc/fabric/impl/screenhandler/client/NetworkingClient.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.screenhandler.client;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.screen.ingame.HandledScreens;\n+import net.minecraft.client.gui.screen.ingame.ScreenHandlerProvider;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.screen.ScreenHandlerType;\n+import net.minecraft.text.Text;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ClientModInitializer;\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.network.ClientSidePacketRegistry;\n+import net.fabricmc.fabric.impl.screenhandler.ExtendedScreenHandlerType;\n+import net.fabricmc.fabric.impl.screenhandler.Packets;\n+\n+@Environment(EnvType.CLIENT)\n+public final class NetworkingClient implements ClientModInitializer {\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\n+\t@Override\n+\tpublic void onInitializeClient() {\n+\t\tClientSidePacketRegistry.INSTANCE.register(Packets.OPEN_ID, (ctx, buf) -> openScreen(buf));\n+\t}\n+\n+\t@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+\tprivate void openScreen(PacketByteBuf buf) {\n+\t\tint typeId = buf.readVarInt();\n+\t\tint syncId = buf.readVarInt();\n+\t\tText title = buf.readText();\n+\t\tScreenHandlerType<?> type = Registry.SCREEN_HANDLER.get(typeId);", "originalCommit": "0e077dc5d2fa67d1c79811ba2ee42c7e09e0f868", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgzODMyNQ==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410838325", "bodyText": "I think it's also done in vanilla?", "author": "Juuxel", "createdAt": "2020-04-19T07:19:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgzNzE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgzODQ3OA==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410838478", "bodyText": "This one should be fine assuming registry isn't changed when the server/client play is active, not so much for client player though if there is a disconnection etc.", "author": "liach", "createdAt": "2020-04-19T07:20:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgzNzE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MTU0MQ==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410841541", "bodyText": "The type also needs to be there for the deserialization of the extra data in buf.", "author": "Juuxel", "createdAt": "2020-04-19T07:37:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgzNzE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MzQ1Ng==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410843456", "bodyText": "I mean the access to client player below is unsafe.", "author": "liach", "createdAt": "2020-04-19T07:48:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgzNzE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0NTM0Mg==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410845342", "bodyText": "Would this be a solution for the thread issue? (and do I have to manually release the slice or does the GC do its job)", "author": "Juuxel", "createdAt": "2020-04-19T07:58:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgzNzE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0NTY0Mg==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410845642", "bodyText": "You create the retained slice outsdie of the runnable. Otherwise when the handler's method exits the buf is released and by the time you call retainedSlice on buf on main thread, the buf is gone", "author": "liach", "createdAt": "2020-04-19T07:59:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgzNzE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0NTgwOQ==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410845809", "bodyText": "In fact, it seems you can just call buf.retain before you call execute and just pass the buf to openScreen", "author": "liach", "createdAt": "2020-04-19T08:00:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgzNzE3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgzNzMxMg==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410837312", "bodyText": "similar concerns here, some read accesses may be unsafe in event loop", "author": "liach", "createdAt": "2020-04-19T07:13:10Z", "path": "fabric-screen-handler-api-v1/src/main/java/net/fabricmc/fabric/impl/screenhandler/client/NetworkingClient.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.screenhandler.client;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.screen.ingame.HandledScreens;\n+import net.minecraft.client.gui.screen.ingame.ScreenHandlerProvider;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.screen.ScreenHandlerType;\n+import net.minecraft.text.Text;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ClientModInitializer;\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.network.ClientSidePacketRegistry;\n+import net.fabricmc.fabric.impl.screenhandler.ExtendedScreenHandlerType;\n+import net.fabricmc.fabric.impl.screenhandler.Packets;\n+\n+@Environment(EnvType.CLIENT)\n+public final class NetworkingClient implements ClientModInitializer {\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\n+\t@Override\n+\tpublic void onInitializeClient() {\n+\t\tClientSidePacketRegistry.INSTANCE.register(Packets.OPEN_ID, (ctx, buf) -> openScreen(buf));\n+\t}\n+\n+\t@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+\tprivate void openScreen(PacketByteBuf buf) {\n+\t\tint typeId = buf.readVarInt();\n+\t\tint syncId = buf.readVarInt();\n+\t\tText title = buf.readText();\n+\t\tScreenHandlerType<?> type = Registry.SCREEN_HANDLER.get(typeId);\n+\n+\t\tif (type == null) {\n+\t\t\tLOGGER.warn(\"[Fabric] Unknown screen handler ID: {}\", typeId);\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (!(type instanceof ExtendedScreenHandlerType<?>)) {\n+\t\t\tLOGGER.warn(\"[Fabric] Received extended opening packet for non-extended screen handler {}\", Registry.SCREEN_HANDLER.getId(type));\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tHandledScreens.Provider screenFactory = HandledScreens.getProvider(type);\n+\n+\t\tif (screenFactory != null) {\n+\t\t\tMinecraftClient client = MinecraftClient.getInstance();\n+\t\t\tPlayerEntity player = client.player;\n+\n+\t\t\tScreen screen = screenFactory.create(", "originalCommit": "0e077dc5d2fa67d1c79811ba2ee42c7e09e0f868", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a0f7490cf2e2f32d86e3a7760c1ccbad6c47f41d", "url": "https://github.com/FabricMC/fabric/commit/a0f7490cf2e2f32d86e3a7760c1ccbad6c47f41d", "message": "Remove [Fabric] from log messages", "committedDate": "2020-04-19T07:39:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MjI2Mg==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410842262", "bodyText": "Are we going for prefixing the inject methods with fabric and _? I am seeing mostly no prefix on inject, this is an inject so conflicting names shouldn't matter right?", "author": "shedaniel", "createdAt": "2020-04-19T07:41:27Z", "path": "fabric-screen-handler-api-v1/src/main/java/net/fabricmc/fabric/mixin/screenhandler/ServerPlayerEntityMixin.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.screenhandler;\n+\n+import java.util.OptionalInt;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.network.Packet;\n+import net.minecraft.screen.NamedScreenHandlerFactory;\n+import net.minecraft.screen.ScreenHandler;\n+import net.minecraft.server.network.ServerPlayerEntity;\n+import net.minecraft.server.network.ServerPlayNetworkHandler;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.api.screenhandler.v1.ExtendedScreenHandlerFactory;\n+import net.fabricmc.fabric.impl.screenhandler.ExtendedScreenHandlerType;\n+import net.fabricmc.fabric.impl.screenhandler.ScreenHandlersImpl;\n+\n+@Mixin(ServerPlayerEntity.class)\n+public class ServerPlayerEntityMixin {\n+\t@Shadow\n+\tprivate int screenHandlerSyncId;\n+\n+\t@Unique\n+\tprivate final ThreadLocal<ScreenHandler> fabric_openedScreenHandler = new ThreadLocal<>();\n+\n+\t@Inject(method = \"openHandledScreen(Lnet/minecraft/screen/NamedScreenHandlerFactory;)Ljava/util/OptionalInt;\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/server/network/ServerPlayNetworkHandler;sendPacket(Lnet/minecraft/network/Packet;)V\"), locals = LocalCapture.CAPTURE_FAILHARD)\n+\tprivate void fabric_onOpenHandledScreen_cacheScreenHandler(NamedScreenHandlerFactory factory, CallbackInfoReturnable<OptionalInt> info, ScreenHandler handler) {", "originalCommit": "0e077dc5d2fa67d1c79811ba2ee42c7e09e0f868", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MjQwNg==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410842406", "bodyText": "The fabric_ prefix is also for exception stacktraces because VanillaClass.someMethod$onSomeMethod doesn't tell what mod caused the error, unlike fabric_onSomeMethod.", "author": "Juuxel", "createdAt": "2020-04-19T07:42:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MjI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0Mjc0NA==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410842744", "bodyText": "We might want to have a standard in place for this, 99% of mixins have no prefix right now, we might want to refactor all of them if that's what we are going for.", "author": "shedaniel", "createdAt": "2020-04-19T07:43:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MjI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MjgzMA==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410842830", "bodyText": "But that's a topic for another day, let's not bloat this thing", "author": "shedaniel", "createdAt": "2020-04-19T07:44:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MjI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MzE3Ng==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410843176", "bodyText": "That is actually an issue I brought up already #510", "author": "i509VCB", "createdAt": "2020-04-19T07:46:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MjI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MzQ4NQ==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410843485", "bodyText": "Prefixes are not necessary on @Inject methods, since Mixin prepends special signature info onto each method. For MixinAbstractFurnaceBlockEntity's fuelTimeMapHook method, Mixin names it handler$zeh000$fuelTimeMapHook. It's also given a @MixinMerged annotation noting the mixin class that added the injection. If the fabric_ prefix here is because Mixin error handling doesn't expose the cause well enough, then we can just improve error handling on our Mixin fork. This method should just be named cacheScreenHandler.", "author": "LemmaEOF", "createdAt": "2020-04-19T07:48:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MjI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MzU2Mw==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410843563", "bodyText": "we should use prefix, though i personally prefer fabric$ prefix as _ looks too ugly", "author": "liach", "createdAt": "2020-04-19T07:48:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MjI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MzkwNA==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410843904", "bodyText": "We should follow the standard in the rest of Fabric API or create a new PR to enforce the fabric$ prefix standard across the rest of the API. Renaming mixin methods is not breaking, so it can be done safely at any time. Stick with the API convention for now.", "author": "LemmaEOF", "createdAt": "2020-04-19T07:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MjI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0NDY2Nw==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410844667", "bodyText": "There's no API convention, though. Fabric uses all of those different styles that i5 listed in #510.", "author": "Juuxel", "createdAt": "2020-04-19T07:54:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MjI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0NDg3Mg==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410844872", "bodyText": "oh god, really? I could have sworn there was one already", "author": "LemmaEOF", "createdAt": "2020-04-19T07:55:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MjI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0ODQwNA==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410848404", "bodyText": "I searched through some mixins and 99% of them have no prefix, the example in i5's issue for fabric_ is not an inject, most other fabric_ are overrides, the current majority is no prefix.\nI am not saying that no prefix is the best style but mostly injects in fabric API have no prefixes right now, and we should stick to the masses until we have a PR to change this.", "author": "shedaniel", "createdAt": "2020-04-19T08:15:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MjI2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MjQyOA==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410842428", "bodyText": "Since I see the fabric-networking-v0 in the build.gradle, care putting it here as well", "author": "shedaniel", "createdAt": "2020-04-19T07:42:32Z", "path": "fabric-screen-handler-api-v1/src/main/resources/fabric.mod.json", "diffHunk": "@@ -0,0 +1,30 @@\n+{\n+  \"schemaVersion\": 1,\n+  \"id\": \"fabric-screen-handler-api-v1\",\n+  \"name\": \"Fabric Screen Handler API (v1)\",\n+  \"version\": \"${version}\",\n+  \"environment\": \"*\",\n+  \"license\": \"Apache-2.0\",\n+  \"icon\": \"assets/fabric-screen-handler-api-v1/icon.png\",\n+  \"contact\": {\n+    \"homepage\": \"https://fabricmc.net\",\n+    \"irc\": \"irc://irc.esper.net:6667/fabric\",\n+    \"issues\": \"https://github.com/FabricMC/fabric/issues\",\n+    \"sources\": \"https://github.com/FabricMC/fabric\"\n+  },\n+  \"authors\": [\n+    \"FabricMC\"\n+  ],\n+  \"depends\": {\n+    \"fabricloader\": \">=0.8.0\",\n+    \"fabric-api-base\": \"*\"", "originalCommit": "0e077dc5d2fa67d1c79811ba2ee42c7e09e0f868", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MjY5Ng==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410842696", "bodyText": "Done.", "author": "Juuxel", "createdAt": "2020-04-19T07:43:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0MjQyOA=="}], "type": "inlineReview"}, {"oid": "780ae298d3a87bdc76cdc51d7232315960db3a19", "url": "https://github.com/FabricMC/fabric/commit/780ae298d3a87bdc76cdc51d7232315960db3a19", "message": "Convert FabricHandledScreens to a class", "committedDate": "2020-04-19T07:42:43Z", "type": "commit"}, {"oid": "3e2fd87db67536c33339fe3ba5ed29c5ba37a223", "url": "https://github.com/FabricMC/fabric/commit/3e2fd87db67536c33339fe3ba5ed29c5ba37a223", "message": "Add dependency on networking-v0", "committedDate": "2020-04-19T07:43:41Z", "type": "commit"}, {"oid": "7972c228ead82d022d467befa85457f04e831e3c", "url": "https://github.com/FabricMC/fabric/commit/7972c228ead82d022d467befa85457f04e831e3c", "message": "Resolve threading issues with NetworkingClient", "committedDate": "2020-04-19T08:01:35Z", "type": "commit"}, {"oid": "8ab08bece3eb9779ea49584d017e583984bcc1ab", "url": "https://github.com/FabricMC/fabric/commit/8ab08bece3eb9779ea49584d017e583984bcc1ab", "message": "Use Identifiers instead of int IDs, make ScreenHandlers a class\n\nAlso added a private constructor to FabricHandledScreens.", "committedDate": "2020-04-19T08:12:52Z", "type": "commit"}, {"oid": "8055b6815d6fbda79b4676273c0e36c44c63e4df", "url": "https://github.com/FabricMC/fabric/commit/8055b6815d6fbda79b4676273c0e36c44c63e4df", "message": "NetworkingClient -> ClientNetworking", "committedDate": "2020-04-19T08:14:26Z", "type": "commit"}, {"oid": "ae5c1c03458da143da0986c94d41d8a3d016d67f", "url": "https://github.com/FabricMC/fabric/commit/ae5c1c03458da143da0986c94d41d8a3d016d67f", "message": "Use more descriptive names for injections", "committedDate": "2020-04-19T08:16:26Z", "type": "commit"}, {"oid": "72aec10c3b90d42ec1320682fb9375b08db5550c", "url": "https://github.com/FabricMC/fabric/commit/72aec10c3b90d42ec1320682fb9375b08db5550c", "message": "Use ID parameter instead of fetching again", "committedDate": "2020-04-19T08:23:01Z", "type": "commit"}, {"oid": "8c1797230c283779d1e32026db471645443fd39e", "url": "https://github.com/FabricMC/fabric/commit/8c1797230c283779d1e32026db471645443fd39e", "message": "Add clarifying comment", "committedDate": "2020-04-19T08:28:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk5OTE5Ng==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410999196", "bodyText": "Whats the use of a ThreadLocal?", "author": "modmuss50", "createdAt": "2020-04-19T21:49:58Z", "path": "fabric-screen-handler-api-v1/src/main/java/net/fabricmc/fabric/mixin/screenhandler/ServerPlayerEntityMixin.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.screenhandler;\n+\n+import java.util.OptionalInt;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.network.Packet;\n+import net.minecraft.screen.NamedScreenHandlerFactory;\n+import net.minecraft.screen.ScreenHandler;\n+import net.minecraft.server.network.ServerPlayerEntity;\n+import net.minecraft.server.network.ServerPlayNetworkHandler;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.api.screenhandler.v1.ExtendedScreenHandlerFactory;\n+import net.fabricmc.fabric.impl.screenhandler.ExtendedScreenHandlerType;\n+import net.fabricmc.fabric.impl.screenhandler.Networking;\n+\n+@Mixin(ServerPlayerEntity.class)\n+public class ServerPlayerEntityMixin {\n+\t@Shadow\n+\tprivate int screenHandlerSyncId;\n+\n+\t@Unique\n+\tprivate final ThreadLocal<ScreenHandler> fabric_openedScreenHandler = new ThreadLocal<>();", "originalCommit": "8c1797230c283779d1e32026db471645443fd39e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk5OTIzNA==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410999234", "bodyText": "Edit: Oh I see.", "author": "modmuss50", "createdAt": "2020-04-19T21:50:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk5OTE5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk5OTQ4MQ==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r410999481", "bodyText": "Would it be a good idea to set fabric_openedScreenHandler value to null here? Save it hanging around?", "author": "modmuss50", "createdAt": "2020-04-19T21:51:22Z", "path": "fabric-screen-handler-api-v1/src/main/java/net/fabricmc/fabric/mixin/screenhandler/ServerPlayerEntityMixin.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.screenhandler;\n+\n+import java.util.OptionalInt;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.network.Packet;\n+import net.minecraft.screen.NamedScreenHandlerFactory;\n+import net.minecraft.screen.ScreenHandler;\n+import net.minecraft.server.network.ServerPlayerEntity;\n+import net.minecraft.server.network.ServerPlayNetworkHandler;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.api.screenhandler.v1.ExtendedScreenHandlerFactory;\n+import net.fabricmc.fabric.impl.screenhandler.ExtendedScreenHandlerType;\n+import net.fabricmc.fabric.impl.screenhandler.Networking;\n+\n+@Mixin(ServerPlayerEntity.class)\n+public class ServerPlayerEntityMixin {\n+\t@Shadow\n+\tprivate int screenHandlerSyncId;\n+\n+\t@Unique\n+\tprivate final ThreadLocal<ScreenHandler> fabric_openedScreenHandler = new ThreadLocal<>();\n+\n+\t@Inject(method = \"openHandledScreen(Lnet/minecraft/screen/NamedScreenHandlerFactory;)Ljava/util/OptionalInt;\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/server/network/ServerPlayNetworkHandler;sendPacket(Lnet/minecraft/network/Packet;)V\"), locals = LocalCapture.CAPTURE_FAILHARD)\n+\tprivate void fabric_storeOpenedScreenHandler(NamedScreenHandlerFactory factory, CallbackInfoReturnable<OptionalInt> info, ScreenHandler handler) {\n+\t\tif (factory instanceof ExtendedScreenHandlerFactory) {\n+\t\t\tfabric_openedScreenHandler.set(handler);\n+\t\t} else if (handler.getType() instanceof ExtendedScreenHandlerType<?>) {\n+\t\t\tIdentifier id = Registry.SCREEN_HANDLER.getId(handler.getType());\n+\t\t\tthrow new IllegalArgumentException(\"[Fabric] Extended screen handler \" + id + \" must be opened with an ExtendedScreenHandlerFactory!\");\n+\t\t}\n+\t}\n+\n+\t@Redirect(method = \"openHandledScreen(Lnet/minecraft/screen/NamedScreenHandlerFactory;)Ljava/util/OptionalInt;\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/server/network/ServerPlayNetworkHandler;sendPacket(Lnet/minecraft/network/Packet;)V\"))\n+\tprivate void fabric_replaceVanillaScreenPacket(ServerPlayNetworkHandler networkHandler, Packet<?> packet, NamedScreenHandlerFactory factory) {\n+\t\tif (factory instanceof ExtendedScreenHandlerFactory) {\n+\t\t\tScreenHandler handler = fabric_openedScreenHandler.get();", "originalCommit": "8c1797230c283779d1e32026db471645443fd39e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA4NTU0Ng==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r411085546", "bodyText": "It's cleared at RETURN, but I think I can move it there.", "author": "Juuxel", "createdAt": "2020-04-20T04:30:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk5OTQ4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MTM5Mg==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r412881392", "bodyText": "Since the comment says \"screen opening data\", maybe rename to writeScreenOpeningData", "author": "immibis", "createdAt": "2020-04-22T10:57:17Z", "path": "fabric-screen-handler-api-v1/src/main/java/net/fabricmc/fabric/api/screenhandler/v1/ExtendedScreenHandlerFactory.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.screenhandler.v1;\n+\n+import java.util.function.Consumer;\n+\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.entity.player.PlayerInventory;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.screen.NamedScreenHandlerFactory;\n+import net.minecraft.screen.ScreenHandler;\n+import net.minecraft.text.Text;\n+\n+/**\n+ * An extension of {@code NamedScreenHandlerFactory} that can write additional\n+ * networking data to a screen opening packet.\n+ *\n+ * @see ScreenHandlers#extended(ScreenHandlers.ExtendedFactory)\n+ */\n+public interface ExtendedScreenHandlerFactory extends NamedScreenHandlerFactory {\n+\t/**\n+\t * Writes additional server -> client screen opening data to the buffer.\n+\t */\n+\tvoid writeScreenData(PacketByteBuf buf);", "originalCommit": "8c1797230c283779d1e32026db471645443fd39e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MjY4NA==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r412882684", "bodyText": "What is the use case for this function?", "author": "immibis", "createdAt": "2020-04-22T10:59:22Z", "path": "fabric-screen-handler-api-v1/src/main/java/net/fabricmc/fabric/api/screenhandler/v1/ExtendedScreenHandlerFactory.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.screenhandler.v1;\n+\n+import java.util.function.Consumer;\n+\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.entity.player.PlayerInventory;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.screen.NamedScreenHandlerFactory;\n+import net.minecraft.screen.ScreenHandler;\n+import net.minecraft.text.Text;\n+\n+/**\n+ * An extension of {@code NamedScreenHandlerFactory} that can write additional\n+ * networking data to a screen opening packet.\n+ *\n+ * @see ScreenHandlers#extended(ScreenHandlers.ExtendedFactory)\n+ */\n+public interface ExtendedScreenHandlerFactory extends NamedScreenHandlerFactory {\n+\t/**\n+\t * Writes additional server -> client screen opening data to the buffer.\n+\t */\n+\tvoid writeScreenData(PacketByteBuf buf);\n+\n+\t/**\n+\t * Creates a networked screen handler factory from a base factory and a packet writer.\n+\t *\n+\t * <p>All {@link NamedScreenHandlerFactory} operations are delegated to the base factory,\n+\t * and {@link #writeScreenData(PacketByteBuf)} is delegated to the writer.\n+\t *\n+\t * @param factory      the base factory\n+\t * @param packetWriter the packet writer\n+\t * @return the created factory\n+\t */\n+\tstatic ExtendedScreenHandlerFactory of(NamedScreenHandlerFactory factory, Consumer<PacketByteBuf> packetWriter) {", "originalCommit": "8c1797230c283779d1e32026db471645443fd39e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg5MzAyNg==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r412893026", "bodyText": "If you already have a NamedScreenHandlerFactory from vanilla, you can add the extra screen opening data with a lambda. Tbh, I didn't find any use cases for this in the example mod, so I might just remove it.", "author": "Juuxel", "createdAt": "2020-04-22T11:17:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MjY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA3ODQxNg==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r413078416", "bodyText": "Can you think of any case where you might have a NamedScreenHandlerFactory from vanilla but also screen opening data? It seems like you'd write an ExtendedScreenHandlerFactory in that case because the vanilla NSHF is going to be completely useless for your custom screen, because it's going to open a vanilla screen.", "author": "immibis", "createdAt": "2020-04-22T15:22:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MjY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA4MTgwNw==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r413081807", "bodyText": "Mostly when a vanilla named screen handler is used the data needed by the screen is already on client's block entity or so", "author": "liach", "createdAt": "2020-04-22T15:26:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MjY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA4NzQ4MQ==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r413087481", "bodyText": "I already removed it in the FabLabs repo. I'll just have to port all the changes here.", "author": "Juuxel", "createdAt": "2020-04-22T15:33:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MjY4NA=="}], "type": "inlineReview"}, {"oid": "319c19d01de775c2d091324a43b8394109b2e9e1", "url": "https://github.com/FabricMC/fabric/commit/319c19d01de775c2d091324a43b8394109b2e9e1", "message": "Port changes from FabLabs", "committedDate": "2020-04-22T15:46:45Z", "type": "commit"}, {"oid": "a96b17c04eee7347a2da80de26ed4996e4f38490", "url": "https://github.com/FabricMC/fabric/commit/a96b17c04eee7347a2da80de26ed4996e4f38490", "message": "Fix compilation", "committedDate": "2020-04-22T15:53:10Z", "type": "commit"}, {"oid": "17a7fa3eb24e5b364922c2f4633304fc574b99a5", "url": "https://github.com/FabricMC/fabric/commit/17a7fa3eb24e5b364922c2f4633304fc574b99a5", "message": "Replace the content of links in FabricHandledScreens for readability", "committedDate": "2020-04-25T07:43:18Z", "type": "commit"}, {"oid": "54d01094ac4dcfb32c3c04f39e61095549545654", "url": "https://github.com/FabricMC/fabric/commit/54d01094ac4dcfb32c3c04f39e61095549545654", "message": "Merge remote-tracking branch 'upstream/1.16' into patch-8", "committedDate": "2020-05-17T11:14:27Z", "type": "commit"}, {"oid": "1c765f09bfdb53991c73fe122e38e49eb37d6617", "url": "https://github.com/FabricMC/fabric/commit/1c765f09bfdb53991c73fe122e38e49eb37d6617", "message": "Sync with FabLabs", "committedDate": "2020-05-17T11:20:18Z", "type": "commit"}, {"oid": "90e6cc09fd9c5d36f0e4cfc1bc11dcf609f96506", "url": "https://github.com/FabricMC/fabric/commit/90e6cc09fd9c5d36f0e4cfc1bc11dcf609f96506", "message": "Add test mod", "committedDate": "2020-05-17T12:18:38Z", "type": "commit"}, {"oid": "d8291c0905c56b948592f8dcbe9711f52a6d09ad", "url": "https://github.com/FabricMC/fabric/commit/d8291c0905c56b948592f8dcbe9711f52a6d09ad", "message": "I suppose IInv shouldn't have CC0 anymore :eyes:", "committedDate": "2020-05-17T12:27:08Z", "type": "commit"}, {"oid": "6d66171ecf44faf7e3aacd2930143c20dfab58ab", "url": "https://github.com/FabricMC/fabric/commit/6d66171ecf44faf7e3aacd2930143c20dfab58ab", "message": "Improve logging\n\n- Networking now uses a logger instead of an exception\n- The loggers are now suffixed with their side\n- Fixed the client unregistered screen message using the title instead of the ID", "committedDate": "2020-05-22T08:35:00Z", "type": "commit"}, {"oid": "84dfbd9445b445222233f05930055f234fc06a8a", "url": "https://github.com/FabricMC/fabric/commit/84dfbd9445b445222233f05930055f234fc06a8a", "message": "Merge branch '1.16' into patch-8", "committedDate": "2020-05-22T09:01:11Z", "type": "commit"}, {"oid": "b1683eb538cad4da4fa66ac472ce96e9f053d507", "url": "https://github.com/FabricMC/fabric/commit/b1683eb538cad4da4fa66ac472ce96e9f053d507", "message": "Fix test mod on 20w21a", "committedDate": "2020-05-22T09:02:53Z", "type": "commit"}, {"oid": "9ceae812d00411f69fbc9e2c5f648d54c8877254", "url": "https://github.com/FabricMC/fabric/commit/9ceae812d00411f69fbc9e2c5f648d54c8877254", "message": "Fix ExtendedScreenHandlerFactory javadoc referencing old names", "committedDate": "2020-05-22T09:03:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwMDA4MQ==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r429900081", "bodyText": "Are these needed? I dont think we have them anywhere else in api?", "author": "modmuss50", "createdAt": "2020-05-25T12:06:56Z", "path": "fabric-screen-handler-api-v1/src/main/java/net/fabricmc/fabric/api/client/screenhandler/v1/package-info.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * API for working with screen handlers on the client.\n+ */\n+package net.fabricmc.fabric.api.client.screenhandler.v1;", "originalCommit": "9ceae812d00411f69fbc9e2c5f648d54c8877254", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzNDIxNw==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r429934217", "bodyText": "They make the javadoc nicer to browse since you can see a description of the package in addition to the name.", "author": "Juuxel", "createdAt": "2020-05-25T13:26:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwMDA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzNDkyNw==", "url": "https://github.com/FabricMC/fabric/pull/584#discussion_r429934927", "bodyText": "Ok, thats good then.", "author": "modmuss50", "createdAt": "2020-05-25T13:28:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwMDA4MQ=="}], "type": "inlineReview"}, {"oid": "b85e08bc6c73c620203dd6e9aafd3229f309c5a9", "url": "https://github.com/FabricMC/fabric/commit/b85e08bc6c73c620203dd6e9aafd3229f309c5a9", "message": "Merge remote-tracking branch 'upstream/1.16' into patch-8", "committedDate": "2020-06-05T11:48:51Z", "type": "commit"}, {"oid": "6e30b6aa603722f852f80b9f80b542eae66212e4", "url": "https://github.com/FabricMC/fabric/commit/6e30b6aa603722f852f80b9f80b542eae66212e4", "message": "Update test mod to 1.16-pre2\n\nJust a simple mapping update. :)", "committedDate": "2020-06-05T11:58:25Z", "type": "commit"}, {"oid": "592fffc52f55ac87b5fdc6c92938dd16c7940d5f", "url": "https://github.com/FabricMC/fabric/commit/592fffc52f55ac87b5fdc6c92938dd16c7940d5f", "message": "Fix incorrect javadoc references to screen-handler-api in containers-v0", "committedDate": "2020-06-05T12:01:32Z", "type": "commit"}, {"oid": "f03e9b0ec56903ad8b7adafc54061c50d5fc9f71", "url": "https://github.com/FabricMC/fabric/commit/f03e9b0ec56903ad8b7adafc54061c50d5fc9f71", "message": "Remove Minecraft exclusion from build.gradle (thanks to Loom 0.4) + testmod change\n\nResource loader v0 is now testmodRuntimeOnly as it's not needed for compiling.", "committedDate": "2020-06-05T12:11:11Z", "type": "commit"}]}