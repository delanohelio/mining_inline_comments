{"pr_number": 1011, "pr_title": "Resource loader changes and built-in mod resource/data packs API", "pr_createdAt": "2020-08-14T13:28:06Z", "pr_url": "https://github.com/FabricMC/fabric/pull/1011", "timeline": [{"oid": "dab126d2c7889a4ad060890ebc81191eac6898d0", "url": "https://github.com/FabricMC/fabric/commit/dab126d2c7889a4ad060890ebc81191eac6898d0", "message": "WIP built-in resource packs API.", "committedDate": "2020-08-14T11:37:39Z", "type": "commit"}, {"oid": "efba9b2f2eecda3b1e9dd54399b151c36d315c75", "url": "https://github.com/FabricMC/fabric/commit/efba9b2f2eecda3b1e9dd54399b151c36d315c75", "message": "Add built-in resource pack register API and fix old injection methods.", "committedDate": "2020-08-14T13:19:03Z", "type": "commit"}, {"oid": "1799eac35c04945a8694d32dfadcd495f3945afd", "url": "https://github.com/FabricMC/fabric/commit/1799eac35c04945a8694d32dfadcd495f3945afd", "message": "Fix code style.", "committedDate": "2020-08-14T13:23:36Z", "type": "commit"}, {"oid": "9da9815620c0a59ad9f387bd8d071c8f46cf96d1", "url": "https://github.com/FabricMC/fabric/commit/9da9815620c0a59ad9f387bd8d071c8f46cf96d1", "message": "Fix code style.", "committedDate": "2020-08-14T13:41:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNDQ1OA==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r470914458", "bodyText": "I have no idea why I would use this method. Please add some documentation explaining what this does with extra detail and when/why you would use it.", "author": "i509VCB", "createdAt": "2020-08-15T00:30:35Z", "path": "fabric-resource-loader-v0/src/main/java/net/fabricmc/fabric/api/resource/ResourceManagerHelper.java", "diffHunk": "@@ -52,4 +54,16 @@ default void addReloadListener(IdentifiableResourceReloadListener listener) {\n \tstatic ResourceManagerHelper get(ResourceType type) {\n \t\treturn ResourceManagerHelperImpl.get(type);\n \t}\n+\n+\t/**\n+\t * Registers a built-in resource pack.\n+\t *\n+\t * @param id The identifier of the resource pack.\n+\t * @param subPath The sub path in the mod resources.\n+\t * @param container The mod container.\n+\t * @return True if successfully registered the resource pack, else false.\n+\t */\n+\tstatic boolean registerBuiltinResourcePack(Identifier id, String subPath, ModContainer container) {", "originalCommit": "9da9815620c0a59ad9f387bd8d071c8f46cf96d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk1NDUyMQ==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r470954521", "bodyText": "I agree, hopefully the documentation I added is understandable/enough.\nWhen a built-in resource pack is registered, there's a new resource pack which is by default disabled like in the test mod I added for this module:\n\nIt also applies to data packs.\nIt can be very useful for some mods even if it's a bit specific but I prefer it being directly in FAPI than copying the ModNioResourcePack code and all the injections into each mods using built-in resource packs.\nFor example if a mod add \"snowy\" variations to blocks it can just add the snow layer into the integrated mod resource pack so it doesn't break the style when paired with user resource packs, but if the user uses the Default resource pack for example, the mod can provide a built-in resource pack with snowy textures based on the Default textures and limit style issues.\nIt can also be useful for data packs which could provide extra features but for some reasons should be optional.", "author": "LambdAurora", "createdAt": "2020-08-15T08:33:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNDQ1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk3OTU2OA==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r470979568", "bodyText": "Much better description", "author": "i509VCB", "createdAt": "2020-08-15T13:28:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNDQ1OA=="}], "type": "inlineReview"}, {"oid": "485b3996c053cb236c2e0cae98c41f9ffe935280", "url": "https://github.com/FabricMC/fabric/commit/485b3996c053cb236c2e0cae98c41f9ffe935280", "message": "Add documentation.", "committedDate": "2020-08-15T08:27:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk4MTI1NQ==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r470981255", "bodyText": "Drop the else half of the block and just return ModResourcePackUtil call", "author": "i509VCB", "createdAt": "2020-08-15T13:32:02Z", "path": "fabric-resource-loader-v0/src/main/java/net/fabricmc/fabric/impl/resource/loader/ModNioResourcePack.java", "diffHunk": "@@ -227,6 +229,10 @@ public ModMetadata getFabricModMetadata() {\n \n \t@Override\n \tpublic String getName() {\n-\t\treturn ModResourcePackUtil.getName(modInfo);\n+\t\tif (this.name != null) {\n+\t\t\treturn this.name; // Builtin resource pack provided by a mod, the name is overriden.\n+\t\t} else {", "originalCommit": "485b3996c053cb236c2e0cae98c41f9ffe935280", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "617f9b40448cece5903bda8ea404d8ac5e92342f", "url": "https://github.com/FabricMC/fabric/commit/617f9b40448cece5903bda8ea404d8ac5e92342f", "message": "Drop useless else.", "committedDate": "2020-08-15T13:42:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyMTIyNQ==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r471021225", "bodyText": "Is this boolean argument alwaysEnabled or pinned? I recall pack profiles have two boolean params and i forgot which one this is", "author": "liach", "createdAt": "2020-08-15T18:24:43Z", "path": "fabric-resource-loader-v0/src/main/java/net/fabricmc/fabric/impl/resource/loader/ModResourcePackCreator.java", "diffHunk": "@@ -49,12 +51,14 @@ public void register(Consumer<ResourcePackProfile> consumer, ResourcePackProfile\n \t\t\t}\n \n \t\t\tResourcePackProfile resourcePackProfile = ResourcePackProfile.of(\"fabric/\" + ((ModResourcePack) pack).getFabricModMetadata().getId(),\n-\t\t\t\t\tfalse, () -> pack, factory, ResourcePackProfile.InsertionPosition.TOP,\n+\t\t\t\t\ttrue, () -> pack, factory, ResourcePackProfile.InsertionPosition.TOP,", "originalCommit": "617f9b40448cece5903bda8ea404d8ac5e92342f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyMTM0Ng==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r471021346", "bodyText": "This boolean argument is alwaysEnabled, as it's the \"mod\" resource pack it should always be enabled and replace the old PR BoundaryBreaker did to do that.", "author": "LambdAurora", "createdAt": "2020-08-15T18:26:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyMTIyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyMjcxOQ==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r471022719", "bodyText": "Hmm, I wonder how this would hurt as you cannot order scanned mod packs", "author": "liach", "createdAt": "2020-08-15T18:43:06Z", "path": "fabric-resource-loader-v0/src/main/java/net/fabricmc/fabric/mixin/resource/loader/MixinPackScreen.java", "diffHunk": "@@ -28,7 +28,7 @@\n import net.fabricmc.fabric.impl.resource.loader.ModResourcePackCreator;\n \n @Mixin(PackScreen.class)\n-public class MixinAbstractPackScreen {\n+public class MixinPackScreen {\n \t@Inject(method = \"method_29672\", at = @At(\"HEAD\"), cancellable = true)\n \tprivate void addPackEntry(PackListWidget packListWidget, ResourcePackOrganizer.Pack pack, CallbackInfo info) {\n \t\tif (pack.getSource() == ModResourcePackCreator.RESOURCE_PACK_SOURCE) {", "originalCommit": "617f9b40448cece5903bda8ea404d8ac5e92342f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyMzAwOA==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r471023008", "bodyText": "What do you mean?\nThe inability to order mod resource packs was already a thing before this PR.", "author": "LambdAurora", "createdAt": "2020-08-15T18:46:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyMjcxOQ=="}], "type": "inlineReview"}, {"oid": "7fa867876acb0d74886a82c25dfaa51efd227688", "url": "https://github.com/FabricMC/fabric/commit/7fa867876acb0d74886a82c25dfaa51efd227688", "message": "Fix resource packs and data packs isolation issues, and more.", "committedDate": "2020-08-15T23:51:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA2MjQ2Mw==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r471062463", "bodyText": "You can use an actual accessor mixin here, no need to implement a duck manually.", "author": "i509VCB", "createdAt": "2020-08-16T04:09:55Z", "path": "fabric-resource-loader-v0/src/main/java/net/fabricmc/fabric/impl/resource/loader/ResourcePackManagerAccessor.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.resource.loader;\n+\n+import java.util.Set;\n+\n+import net.minecraft.resource.ResourcePackProvider;\n+\n+/**\n+ * Represents an accessor to {@code ResourcePackManager}.\n+ */\n+public interface ResourcePackManagerAccessor {", "originalCommit": "7fa867876acb0d74886a82c25dfaa51efd227688", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA3NzAxMA==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r471077010", "bodyText": "Moved as an actual accessor mixin ;)", "author": "LambdAurora", "createdAt": "2020-08-16T07:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA2MjQ2Mw=="}], "type": "inlineReview"}, {"oid": "f7d028499d058188a9e3be8c6cde851197aed989", "url": "https://github.com/FabricMC/fabric/commit/f7d028499d058188a9e3be8c6cde851197aed989", "message": "Move ResourcePackManagerAccessor to its own accessor mixin.", "committedDate": "2020-08-16T07:19:23Z", "type": "commit"}, {"oid": "bc378ba57468b831e28f191dc35d2b77f0bc48d1", "url": "https://github.com/FabricMC/fabric/commit/bc378ba57468b831e28f191dc35d2b77f0bc48d1", "message": "Make the built-in mod pack test mod work on server too because data pack part.", "committedDate": "2020-08-16T20:52:33Z", "type": "commit"}, {"oid": "a026473a4d71b230e67fe8813e9e5574ce6a03f6", "url": "https://github.com/FabricMC/fabric/commit/a026473a4d71b230e67fe8813e9e5574ce6a03f6", "message": "Add new argument to built-in pack method and make mod data packs always active.", "committedDate": "2020-08-21T19:06:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwMTY5Mg==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r477501692", "bodyText": "This should document that packs added with this overload aren't enabled by default.", "author": "Juuxel", "createdAt": "2020-08-26T18:26:57Z", "path": "fabric-resource-loader-v0/src/main/java/net/fabricmc/fabric/api/resource/ResourceManagerHelper.java", "diffHunk": "@@ -52,4 +54,47 @@ default void addReloadListener(IdentifiableResourceReloadListener listener) {\n \tstatic ResourceManagerHelper get(ResourceType type) {\n \t\treturn ResourceManagerHelperImpl.get(type);\n \t}\n+\n+\t/**\n+\t * Registers a built-in resource pack.", "originalCommit": "a026473a4d71b230e67fe8813e9e5574ce6a03f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwMjk4MQ==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r477502981", "bodyText": "Would Registers a built-in resource pack. That resource pack is not enabled by default. enough/good?", "author": "LambdAurora", "createdAt": "2020-08-26T18:29:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwMTY5Mg=="}], "type": "inlineReview"}, {"oid": "f7b3d4867df39965cf2aa50212c91a86c11cb4db", "url": "https://github.com/FabricMC/fabric/commit/f7b3d4867df39965cf2aa50212c91a86c11cb4db", "message": "Add documentation.", "committedDate": "2020-08-26T20:03:52Z", "type": "commit"}, {"oid": "af95ac19694367124a635997ccc25ef9be9a75ca", "url": "https://github.com/FabricMC/fabric/commit/af95ac19694367124a635997ccc25ef9be9a75ca", "message": "Complete documentation in GameOptions mixin.", "committedDate": "2020-08-26T20:18:44Z", "type": "commit"}, {"oid": "5ae3cb42c4cc4ee37d04fd0d1c0772d2c68d09dd", "url": "https://github.com/FabricMC/fabric/commit/5ae3cb42c4cc4ee37d04fd0d1c0772d2c68d09dd", "message": "Remove register built-in pack overload as Player requested.", "committedDate": "2020-08-26T21:20:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgzMzQyMg==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r480833422", "bodyText": "If this is impossible to achieve, then why is a parameter for it available? What does it actually do?", "author": "Sturmlilie", "createdAt": "2020-09-01T05:30:57Z", "path": "fabric-resource-loader-v0/src/main/java/net/fabricmc/fabric/api/resource/ResourceManagerHelper.java", "diffHunk": "@@ -52,4 +54,27 @@ default void addReloadListener(IdentifiableResourceReloadListener listener) {\n \tstatic ResourceManagerHelper get(ResourceType type) {\n \t\treturn ResourceManagerHelperImpl.get(type);\n \t}\n+\n+\t/**\n+\t * Registers a built-in resource pack.\n+\t *\n+\t * <p>A built-in resource pack is an extra resource pack provided by your mod which is not always active, it's similar to the \"Programmer Art\" resource pack.\n+\t *\n+\t * <p>Why and when to use it? A built-in resource pack should be used to provide extra assets/data that should be optional with your mod but still directly provided by it.\n+\t * For example it could provide textures of your mod in another resolution, or could allow to provide different styles of your assets.\n+\t *\n+\t * <p>The {@code subPath} corresponds to a path in the JAR file which points to the resource pack folder. For example the subPath can be {@code \"resourcepacks/extra\"}.\n+\t *\n+\t * <p>Note about the enabled by default parameter: a resource pack cannot be enabled by default, only data packs can.", "originalCommit": "5ae3cb42c4cc4ee37d04fd0d1c0772d2c68d09dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAzODEwMA==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r481038100", "bodyText": "It says it's for data packs. And note that in resource loader and yarn a \"Resource Pack\" is both potentially a resource pack and a data pack.", "author": "LambdAurora", "createdAt": "2020-09-01T10:29:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgzMzQyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExMTA1Ng==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r481111056", "bodyText": "Oh, okay, I thought this whole PR was about Resource Packs for some reason.", "author": "Sturmlilie", "createdAt": "2020-09-01T12:48:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgzMzQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgzNDM4NA==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r480834384", "bodyText": "How does \"path in the JAR\" relate to the file view I as a developer have over my project structure? Is this relative to src/ ? src/main/resources/? src/main/resources/assets/?\nA minimal usage example would be hugely beneficial here.", "author": "Sturmlilie", "createdAt": "2020-09-01T05:32:30Z", "path": "fabric-resource-loader-v0/src/main/java/net/fabricmc/fabric/api/resource/ResourceManagerHelper.java", "diffHunk": "@@ -52,4 +54,27 @@ default void addReloadListener(IdentifiableResourceReloadListener listener) {\n \tstatic ResourceManagerHelper get(ResourceType type) {\n \t\treturn ResourceManagerHelperImpl.get(type);\n \t}\n+\n+\t/**\n+\t * Registers a built-in resource pack.\n+\t *\n+\t * <p>A built-in resource pack is an extra resource pack provided by your mod which is not always active, it's similar to the \"Programmer Art\" resource pack.\n+\t *\n+\t * <p>Why and when to use it? A built-in resource pack should be used to provide extra assets/data that should be optional with your mod but still directly provided by it.\n+\t * For example it could provide textures of your mod in another resolution, or could allow to provide different styles of your assets.\n+\t *\n+\t * <p>The {@code subPath} corresponds to a path in the JAR file which points to the resource pack folder. For example the subPath can be {@code \"resourcepacks/extra\"}.", "originalCommit": "5ae3cb42c4cc4ee37d04fd0d1c0772d2c68d09dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0MDk4MQ==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r481040981", "bodyText": "\"Path in the JAR\" is already very explicit to me, it's a path relative to the JAR root.\nAnything put in src/main/resources is put in the JAR root.", "author": "LambdAurora", "createdAt": "2020-09-01T10:34:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgzNDM4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExMTYyNA==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r481111624", "bodyText": "I didn't know that, but okay.", "author": "Sturmlilie", "createdAt": "2020-09-01T12:49:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgzNDM4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgzNTg1Nw==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r480835857", "bodyText": "How should this id be namespaced? If I'm just dropping in a zip into my folder, I don't have to specify an id, just the filename identifies it as far as I'm aware. How would I translate that filename to a valid id?", "author": "Sturmlilie", "createdAt": "2020-09-01T05:34:56Z", "path": "fabric-resource-loader-v0/src/main/java/net/fabricmc/fabric/api/resource/ResourceManagerHelper.java", "diffHunk": "@@ -52,4 +54,27 @@ default void addReloadListener(IdentifiableResourceReloadListener listener) {\n \tstatic ResourceManagerHelper get(ResourceType type) {\n \t\treturn ResourceManagerHelperImpl.get(type);\n \t}\n+\n+\t/**\n+\t * Registers a built-in resource pack.\n+\t *\n+\t * <p>A built-in resource pack is an extra resource pack provided by your mod which is not always active, it's similar to the \"Programmer Art\" resource pack.\n+\t *\n+\t * <p>Why and when to use it? A built-in resource pack should be used to provide extra assets/data that should be optional with your mod but still directly provided by it.\n+\t * For example it could provide textures of your mod in another resolution, or could allow to provide different styles of your assets.\n+\t *\n+\t * <p>The {@code subPath} corresponds to a path in the JAR file which points to the resource pack folder. For example the subPath can be {@code \"resourcepacks/extra\"}.\n+\t *\n+\t * <p>Note about the enabled by default parameter: a resource pack cannot be enabled by default, only data packs can.\n+\t * Making this work for resource packs is near impossible without touching how Vanilla handles disabled resource packs.\n+\t *\n+\t * @param id The identifier of the resource pack.", "originalCommit": "5ae3cb42c4cc4ee37d04fd0d1c0772d2c68d09dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAzOTQ3OQ==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r481039479", "bodyText": "ZIP file? in which folder?\nThere's no ZIP file related.\nThe id is visible to the user, the goal of making this namespaced is to avoid any potential conflict.\nThough the id does not influence the path at all.", "author": "LambdAurora", "createdAt": "2020-09-01T10:31:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgzNTg1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExMjcyNA==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r481112724", "bodyText": "My resource packs are all zips (and so are the datapacks which I've created so far). It's great that this is all obvious to you, I'm just giving you my perspective as a newcomer and potential user of this API.", "author": "Sturmlilie", "createdAt": "2020-09-01T12:50:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgzNTg1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE0NTA0Mw==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r481145043", "bodyText": "Mods provides a resource pack which root is the JAR file (which allows MC to read <mod JAR>/assets and <mod JAR>/data\nSo not all resource packs are zips, you can have a folder resource pack, virtual resource pack, etc.", "author": "LambdAurora", "createdAt": "2020-09-01T13:39:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgzNTg1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4NzYyMw==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r481287623", "bodyText": "This is my reference, and all I needed to create and work with resource packs: https://minecraft.gamepedia.com/Resource_Pack\nHence I know about using plain folders, which is okay for testing but you'd never distribute them that way. I'm glad that you're answering my questions, but it would be even more helpful if the documentation had reflected this knowledge in the first place.", "author": "Sturmlilie", "createdAt": "2020-09-01T16:45:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgzNTg1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgzNjQ3Mw==", "url": "https://github.com/FabricMC/fabric/pull/1011#discussion_r480836473", "bodyText": "A small note on how I'd query this would be nice (see \"minimal usage example\").", "author": "Sturmlilie", "createdAt": "2020-09-01T05:35:50Z", "path": "fabric-resource-loader-v0/src/main/java/net/fabricmc/fabric/api/resource/ResourceManagerHelper.java", "diffHunk": "@@ -52,4 +54,27 @@ default void addReloadListener(IdentifiableResourceReloadListener listener) {\n \tstatic ResourceManagerHelper get(ResourceType type) {\n \t\treturn ResourceManagerHelperImpl.get(type);\n \t}\n+\n+\t/**\n+\t * Registers a built-in resource pack.\n+\t *\n+\t * <p>A built-in resource pack is an extra resource pack provided by your mod which is not always active, it's similar to the \"Programmer Art\" resource pack.\n+\t *\n+\t * <p>Why and when to use it? A built-in resource pack should be used to provide extra assets/data that should be optional with your mod but still directly provided by it.\n+\t * For example it could provide textures of your mod in another resolution, or could allow to provide different styles of your assets.\n+\t *\n+\t * <p>The {@code subPath} corresponds to a path in the JAR file which points to the resource pack folder. For example the subPath can be {@code \"resourcepacks/extra\"}.\n+\t *\n+\t * <p>Note about the enabled by default parameter: a resource pack cannot be enabled by default, only data packs can.\n+\t * Making this work for resource packs is near impossible without touching how Vanilla handles disabled resource packs.\n+\t *\n+\t * @param id The identifier of the resource pack.\n+\t * @param subPath The sub path in the mod resources.\n+\t * @param container The mod container.", "originalCommit": "5ae3cb42c4cc4ee37d04fd0d1c0772d2c68d09dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}