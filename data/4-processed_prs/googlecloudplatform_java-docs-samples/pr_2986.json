{"pr_number": 2986, "pr_title": "refactor: use new verify token functionality from google-auth-library", "pr_createdAt": "2020-05-28T22:04:08Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2986", "timeline": [{"oid": "c7a25d6a8b9833f8389e4bc2094c9fe96607ec3a", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/c7a25d6a8b9833f8389e4bc2094c9fe96607ec3a", "message": "refactor: use new verify token functionality from google-auth-library", "committedDate": "2020-05-28T22:03:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2NTA4Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2986#discussion_r432665083", "bodyText": "This is beautiful!", "author": "bshaffer", "createdAt": "2020-05-29T18:32:09Z", "path": "iap/src/main/java/com/example/iap/VerifyIapRequestHeader.java", "diffHunk": "@@ -97,37 +55,15 @@ boolean verifyJwtForComputeEngine(\n   }\n \n   private boolean verifyJwt(String jwtToken, String expectedAudience) throws Exception {\n-\n-    // parse signed token into header / claims\n-    SignedJWT signedJwt = SignedJWT.parse(jwtToken);\n-    JWSHeader jwsHeader = signedJwt.getHeader();\n-\n-    // header must have algorithm(\"alg\") and \"kid\"\n-    Preconditions.checkNotNull(jwsHeader.getAlgorithm());\n-    Preconditions.checkNotNull(jwsHeader.getKeyID());\n-\n-    JWTClaimsSet claims = signedJwt.getJWTClaimsSet();\n-\n-    // claims must have audience, issuer\n-    Preconditions.checkArgument(claims.getAudience().contains(expectedAudience));\n-    Preconditions.checkArgument(claims.getIssuer().equals(IAP_ISSUER_URL));\n-\n-    // claim must have issued at time in the past\n-    Date currentTime = Date.from(Instant.now(clock));\n-    Preconditions.checkArgument(claims.getIssueTime().before(currentTime));\n-    // claim must have expiration time in the future\n-    Preconditions.checkArgument(claims.getExpirationTime().after(currentTime));\n-\n-    // must have subject, email\n-    Preconditions.checkNotNull(claims.getSubject());\n-    Preconditions.checkNotNull(claims.getClaim(\"email\"));\n-\n-    // verify using public key : lookup with key id, algorithm name provided\n-    ECPublicKey publicKey = getKey(jwsHeader.getKeyID(), jwsHeader.getAlgorithm().getName());\n-\n-    Preconditions.checkNotNull(publicKey);\n-    JWSVerifier jwsVerifier = new ECDSAVerifier(publicKey);\n-    return signedJwt.verify(jwsVerifier);\n+    TokenVerifier tokenVerifier = TokenVerifier.newBuilder()\n+        .setAudience(expectedAudience)\n+        .build();\n+    try {\n+      tokenVerifier.verify(jwtToken);\n+      return true;\n+    } catch (TokenVerifier.VerificationException e) {\n+      return false;\n+    }", "originalCommit": "c7a25d6a8b9833f8389e4bc2094c9fe96607ec3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2ODQxMQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2986#discussion_r432668411", "bodyText": "What is the recommended way to verify the claims (e.g. pull the email and sub field from the verified JWT)? It would be good to include this.", "author": "bshaffer", "createdAt": "2020-05-29T18:39:18Z", "path": "iap/src/main/java/com/example/iap/VerifyIapRequestHeader.java", "diffHunk": "@@ -97,37 +55,15 @@ boolean verifyJwtForComputeEngine(\n   }\n \n   private boolean verifyJwt(String jwtToken, String expectedAudience) throws Exception {\n-\n-    // parse signed token into header / claims\n-    SignedJWT signedJwt = SignedJWT.parse(jwtToken);\n-    JWSHeader jwsHeader = signedJwt.getHeader();\n-\n-    // header must have algorithm(\"alg\") and \"kid\"\n-    Preconditions.checkNotNull(jwsHeader.getAlgorithm());\n-    Preconditions.checkNotNull(jwsHeader.getKeyID());\n-\n-    JWTClaimsSet claims = signedJwt.getJWTClaimsSet();\n-\n-    // claims must have audience, issuer\n-    Preconditions.checkArgument(claims.getAudience().contains(expectedAudience));\n-    Preconditions.checkArgument(claims.getIssuer().equals(IAP_ISSUER_URL));\n-\n-    // claim must have issued at time in the past\n-    Date currentTime = Date.from(Instant.now(clock));\n-    Preconditions.checkArgument(claims.getIssueTime().before(currentTime));\n-    // claim must have expiration time in the future\n-    Preconditions.checkArgument(claims.getExpirationTime().after(currentTime));\n-\n-    // must have subject, email\n-    Preconditions.checkNotNull(claims.getSubject());\n-    Preconditions.checkNotNull(claims.getClaim(\"email\"));\n-\n-    // verify using public key : lookup with key id, algorithm name provided\n-    ECPublicKey publicKey = getKey(jwsHeader.getKeyID(), jwsHeader.getAlgorithm().getName());\n-\n-    Preconditions.checkNotNull(publicKey);\n-    JWSVerifier jwsVerifier = new ECDSAVerifier(publicKey);\n-    return signedJwt.verify(jwsVerifier);\n+    TokenVerifier tokenVerifier = TokenVerifier.newBuilder()\n+        .setAudience(expectedAudience)\n+        .build();\n+    try {\n+      tokenVerifier.verify(jwtToken);", "originalCommit": "c7a25d6a8b9833f8389e4bc2094c9fe96607ec3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3MDE1Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2986#discussion_r432670153", "bodyText": "this should also set the issuer https://cloud.google.com/iap so this is verified as well!", "author": "bshaffer", "createdAt": "2020-05-29T18:42:56Z", "path": "iap/src/main/java/com/example/iap/VerifyIapRequestHeader.java", "diffHunk": "@@ -97,37 +55,15 @@ boolean verifyJwtForComputeEngine(\n   }\n \n   private boolean verifyJwt(String jwtToken, String expectedAudience) throws Exception {\n-\n-    // parse signed token into header / claims\n-    SignedJWT signedJwt = SignedJWT.parse(jwtToken);\n-    JWSHeader jwsHeader = signedJwt.getHeader();\n-\n-    // header must have algorithm(\"alg\") and \"kid\"\n-    Preconditions.checkNotNull(jwsHeader.getAlgorithm());\n-    Preconditions.checkNotNull(jwsHeader.getKeyID());\n-\n-    JWTClaimsSet claims = signedJwt.getJWTClaimsSet();\n-\n-    // claims must have audience, issuer\n-    Preconditions.checkArgument(claims.getAudience().contains(expectedAudience));\n-    Preconditions.checkArgument(claims.getIssuer().equals(IAP_ISSUER_URL));\n-\n-    // claim must have issued at time in the past\n-    Date currentTime = Date.from(Instant.now(clock));\n-    Preconditions.checkArgument(claims.getIssueTime().before(currentTime));\n-    // claim must have expiration time in the future\n-    Preconditions.checkArgument(claims.getExpirationTime().after(currentTime));\n-\n-    // must have subject, email\n-    Preconditions.checkNotNull(claims.getSubject());\n-    Preconditions.checkNotNull(claims.getClaim(\"email\"));\n-\n-    // verify using public key : lookup with key id, algorithm name provided\n-    ECPublicKey publicKey = getKey(jwsHeader.getKeyID(), jwsHeader.getAlgorithm().getName());\n-\n-    Preconditions.checkNotNull(publicKey);\n-    JWSVerifier jwsVerifier = new ECDSAVerifier(publicKey);\n-    return signedJwt.verify(jwsVerifier);\n+    TokenVerifier tokenVerifier = TokenVerifier.newBuilder()\n+        .setAudience(expectedAudience)", "originalCommit": "c7a25d6a8b9833f8389e4bc2094c9fe96607ec3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "660c13cb5a368beea79214f9f5082a8360e961b2", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/660c13cb5a368beea79214f9f5082a8360e961b2", "message": "fix: restore check for subject and email", "committedDate": "2020-05-29T19:42:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2NzczMg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2986#discussion_r438367732", "bodyText": "nit: Update comment to be more informative", "author": "averikitsch", "createdAt": "2020-06-10T19:45:53Z", "path": "iap/src/main/java/com/example/iap/VerifyIapRequestHeader.java", "diffHunk": "@@ -96,38 +57,20 @@ boolean verifyJwtForComputeEngine(\n             Long.toUnsignedString(projectNumber), Long.toUnsignedString(backendServiceId)));\n   }\n \n-  private boolean verifyJwt(String jwtToken, String expectedAudience) throws Exception {\n-\n-    // parse signed token into header / claims\n-    SignedJWT signedJwt = SignedJWT.parse(jwtToken);\n-    JWSHeader jwsHeader = signedJwt.getHeader();\n-\n-    // header must have algorithm(\"alg\") and \"kid\"\n-    Preconditions.checkNotNull(jwsHeader.getAlgorithm());\n-    Preconditions.checkNotNull(jwsHeader.getKeyID());\n-\n-    JWTClaimsSet claims = signedJwt.getJWTClaimsSet();\n-\n-    // claims must have audience, issuer\n-    Preconditions.checkArgument(claims.getAudience().contains(expectedAudience));\n-    Preconditions.checkArgument(claims.getIssuer().equals(IAP_ISSUER_URL));\n-\n-    // claim must have issued at time in the past\n-    Date currentTime = Date.from(Instant.now(clock));\n-    Preconditions.checkArgument(claims.getIssueTime().before(currentTime));\n-    // claim must have expiration time in the future\n-    Preconditions.checkArgument(claims.getExpirationTime().after(currentTime));\n-\n-    // must have subject, email\n-    Preconditions.checkNotNull(claims.getSubject());\n-    Preconditions.checkNotNull(claims.getClaim(\"email\"));\n-\n-    // verify using public key : lookup with key id, algorithm name provided\n-    ECPublicKey publicKey = getKey(jwsHeader.getKeyID(), jwsHeader.getAlgorithm().getName());\n-\n-    Preconditions.checkNotNull(publicKey);\n-    JWSVerifier jwsVerifier = new ECDSAVerifier(publicKey);\n-    return signedJwt.verify(jwsVerifier);\n+  private boolean verifyJwt(String jwtToken, String expectedAudience) {\n+    TokenVerifier tokenVerifier = TokenVerifier.newBuilder()\n+        .setAudience(expectedAudience)\n+        .setIssuer(IAP_ISSUER_URL)\n+        .build();\n+    try {\n+      JsonWebToken jsonWebToken = tokenVerifier.verify(jwtToken);\n+\n+      // must have subject, email", "originalCommit": "660c13cb5a368beea79214f9f5082a8360e961b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2NTYyNg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2986#discussion_r445165626", "bodyText": "Updated to clarify this comment", "author": "chingor13", "createdAt": "2020-06-24T20:53:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2NzczMg=="}], "type": "inlineReview"}, {"oid": "12c7574ecddfcc981be54bcec5db3d197c59bf12", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/12c7574ecddfcc981be54bcec5db3d197c59bf12", "message": "Merge branch 'master' into verify-iap-auth-library", "committedDate": "2020-06-24T20:45:14Z", "type": "commit"}, {"oid": "8b8783de903c5dd9b0aa3d1112753567e676b5fd", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/8b8783de903c5dd9b0aa3d1112753567e676b5fd", "message": "docs: clarify comment about subject/email claims", "committedDate": "2020-06-24T20:50:12Z", "type": "commit"}, {"oid": "ebf4587f3961afb23c2be72d6bd9e514f80645d9", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/ebf4587f3961afb23c2be72d6bd9e514f80645d9", "message": "Merge branch 'master' into verify-iap-auth-library", "committedDate": "2020-06-25T16:24:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5NDE3Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2986#discussion_r445694172", "bodyText": "Do we want to print the exception message so the user knows why verification failed?", "author": "bshaffer", "createdAt": "2020-06-25T16:42:01Z", "path": "iap/src/main/java/com/example/iap/VerifyIapRequestHeader.java", "diffHunk": "@@ -96,38 +57,20 @@ boolean verifyJwtForComputeEngine(\n             Long.toUnsignedString(projectNumber), Long.toUnsignedString(backendServiceId)));\n   }\n \n-  private boolean verifyJwt(String jwtToken, String expectedAudience) throws Exception {\n-\n-    // parse signed token into header / claims\n-    SignedJWT signedJwt = SignedJWT.parse(jwtToken);\n-    JWSHeader jwsHeader = signedJwt.getHeader();\n-\n-    // header must have algorithm(\"alg\") and \"kid\"\n-    Preconditions.checkNotNull(jwsHeader.getAlgorithm());\n-    Preconditions.checkNotNull(jwsHeader.getKeyID());\n-\n-    JWTClaimsSet claims = signedJwt.getJWTClaimsSet();\n-\n-    // claims must have audience, issuer\n-    Preconditions.checkArgument(claims.getAudience().contains(expectedAudience));\n-    Preconditions.checkArgument(claims.getIssuer().equals(IAP_ISSUER_URL));\n-\n-    // claim must have issued at time in the past\n-    Date currentTime = Date.from(Instant.now(clock));\n-    Preconditions.checkArgument(claims.getIssueTime().before(currentTime));\n-    // claim must have expiration time in the future\n-    Preconditions.checkArgument(claims.getExpirationTime().after(currentTime));\n-\n-    // must have subject, email\n-    Preconditions.checkNotNull(claims.getSubject());\n-    Preconditions.checkNotNull(claims.getClaim(\"email\"));\n-\n-    // verify using public key : lookup with key id, algorithm name provided\n-    ECPublicKey publicKey = getKey(jwsHeader.getKeyID(), jwsHeader.getAlgorithm().getName());\n-\n-    Preconditions.checkNotNull(publicKey);\n-    JWSVerifier jwsVerifier = new ECDSAVerifier(publicKey);\n-    return signedJwt.verify(jwsVerifier);\n+  private boolean verifyJwt(String jwtToken, String expectedAudience) {\n+    TokenVerifier tokenVerifier = TokenVerifier.newBuilder()\n+        .setAudience(expectedAudience)\n+        .setIssuer(IAP_ISSUER_URL)\n+        .build();\n+    try {\n+      JsonWebToken jsonWebToken = tokenVerifier.verify(jwtToken);\n+\n+      // Verify that the token contain subject and email claims\n+      JsonWebToken.Payload payload = jsonWebToken.getPayload();\n+      return payload.getSubject() != null && payload.get(\"email\") != null;\n+    } catch (TokenVerifier.VerificationException e) {", "originalCommit": "ebf4587f3961afb23c2be72d6bd9e514f80645d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcxMDk3Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2986#discussion_r445710972", "bodyText": "Sure makes sense - updated to print the message to stdout.", "author": "chingor13", "createdAt": "2020-06-25T17:10:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5NDE3Mg=="}], "type": "inlineReview"}, {"oid": "783c5874161b842704b6003a12a361ef546b1b6c", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/783c5874161b842704b6003a12a361ef546b1b6c", "message": "fix: print verification exception message to stdout", "committedDate": "2020-06-25T17:09:33Z", "type": "commit"}]}