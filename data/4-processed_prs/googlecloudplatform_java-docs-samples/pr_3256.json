{"pr_number": 3256, "pr_title": "Add Cloud Run Events Samples", "pr_createdAt": "2020-06-25T19:21:15Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256", "timeline": [{"oid": "698d996fb7a0c05d7e14dd1adbce2dbc6ed3966c", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/698d996fb7a0c05d7e14dd1adbce2dbc6ed3966c", "message": "Add events pubsub sample", "committedDate": "2020-06-25T18:45:35Z", "type": "commit"}, {"oid": "f71c0fb544a17f7de6dad963d0a502d4851add4e", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/f71c0fb544a17f7de6dad963d0a502d4851add4e", "message": "Add events storage sample", "committedDate": "2020-06-25T19:15:20Z", "type": "commit"}, {"oid": "62aed160ebc7766a8c468024a679c19c457ef00c", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/62aed160ebc7766a8c468024a679c19c457ef00c", "message": "Update jib config", "committedDate": "2020-06-25T19:17:29Z", "type": "commit"}, {"oid": "a16fe26a1d823679d8aed261910a144aec001b95", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a16fe26a1d823679d8aed261910a144aec001b95", "message": "Update linting", "committedDate": "2020-06-25T19:20:30Z", "type": "commit"}, {"oid": "d902ce6b9e0b7042a5f79f873a0bd9091a5d37b6", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/d902ce6b9e0b7042a5f79f873a0bd9091a5d37b6", "message": "Update Readme", "committedDate": "2020-06-25T19:29:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5MzkyMQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445793921", "bodyText": "Ok, but in the future, you might consider constructing these w/ JSONObject or GSON.", "author": "lesv", "createdAt": "2020-06-25T19:37:46Z", "path": "run/events-pubsub/src/test/java/com/example/cloudrun/EventControllerTests.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudrun;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+@AutoConfigureMockMvc\n+public class EventControllerTests {\n+\n+  @Autowired private MockMvc mockMvc;\n+\n+  @Test\n+  public void addEmptyBody() throws Exception {\n+    mockMvc.perform(post(\"/\")).andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  public void addNoMessage() throws Exception {\n+    String mockBody = \"{}\";\n+\n+    mockMvc\n+        .perform(post(\"/\").contentType(MediaType.APPLICATION_JSON).content(mockBody))\n+        .andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  public void addInvalidMimetype() throws Exception {\n+    String mockBody = \"{\\\"message\\\":{\\\"data\\\":\\\"dGVzdA==\\\",\"\n+                      + \"\\\"attributes\\\":{},\\\"messageId\\\":\\\"91010751788941\\\"\"\n+                      + \",\\\"publishTime\\\":\\\"2017-09-25T23:16:42.302Z\\\"}}\";", "originalCommit": "d902ce6b9e0b7042a5f79f873a0bd9091a5d37b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgwNjczOQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445806739", "bodyText": "+1. This seems hard to edit. Can we construct the JSON in a different way?", "author": "grant", "createdAt": "2020-06-25T20:03:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5MzkyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg4MjUwNQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445882505", "bodyText": "Updated", "author": "averikitsch", "createdAt": "2020-06-25T22:56:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5MzkyMQ=="}], "type": "inlineReview"}, {"oid": "5d25db3106e6587458d97f8eee0a5542dcf63c28", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/5d25db3106e6587458d97f8eee0a5542dcf63c28", "message": "Update bucket name", "committedDate": "2020-06-25T19:53:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NDY3NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445854675", "bodyText": "nit: no space needed before flag.", "author": "grant", "createdAt": "2020-06-25T21:41:30Z", "path": "run/events-pubsub/README.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Events for Cloud Run - Pub/Sub tutorial\n+\n+This sample shows how to create a service that processes Pub/Sub messages.\n+\n+For more details on how to work with this sample read the [Google Cloud Run Java Samples README](https://github.com/GoogleCloudPlatform/java-docs-samples/tree/master/run).\n+\n+[![Run in Google Cloud][run_img]][run_link]\n+\n+[run_img]: https://storage.googleapis.com/cloudrun/button.svg\n+[run_link]: https://deploy.cloud.run/?git_repo=https://github.com/GoogleCloudPlatform/java-docs-samples&dir=run/events-pubsub\n+\n+\n+## Dependencies\n+\n+* **Spring Boot**: Web server framework.\n+* **Jib**: Container build tool.\n+* **Junit + SpringBootTest**: [development] Test running framework.\n+* **MockMVC**: [development] Integration testing support framework.\n+\n+## Quickstart\n+\n+Create a Cloud Pub/Sub topic:\n+\n+```sh\n+gcloud pubsub topics create my-topic\n+```\n+\n+Use the [Jib Maven Plugin](https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin) to build and push your container image:\n+```sh\n+mvn jib:build -Dimage gcr.io/$(gcloud config get-value project)/cloudrun-events-pubsub\n+```\n+\n+Deploy your Cloud Run service:\n+```sh\n+gcloud run deploy cloudrun-events-pubsub \\\n+ --image gcr.io/$(gcloud config get-value project)/cloudrun-events-pubsub", "originalCommit": "5d25db3106e6587458d97f8eee0a5542dcf63c28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg4MjU0MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445882540", "bodyText": "done", "author": "averikitsch", "createdAt": "2020-06-25T22:56:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NDY3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NDg2NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445854865", "bodyText": "nit: add newline before codeblocks", "author": "grant", "createdAt": "2020-06-25T21:42:00Z", "path": "run/events-pubsub/README.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Events for Cloud Run - Pub/Sub tutorial\n+\n+This sample shows how to create a service that processes Pub/Sub messages.\n+\n+For more details on how to work with this sample read the [Google Cloud Run Java Samples README](https://github.com/GoogleCloudPlatform/java-docs-samples/tree/master/run).\n+\n+[![Run in Google Cloud][run_img]][run_link]\n+\n+[run_img]: https://storage.googleapis.com/cloudrun/button.svg\n+[run_link]: https://deploy.cloud.run/?git_repo=https://github.com/GoogleCloudPlatform/java-docs-samples&dir=run/events-pubsub\n+\n+\n+## Dependencies\n+\n+* **Spring Boot**: Web server framework.\n+* **Jib**: Container build tool.\n+* **Junit + SpringBootTest**: [development] Test running framework.\n+* **MockMVC**: [development] Integration testing support framework.\n+\n+## Quickstart\n+\n+Create a Cloud Pub/Sub topic:\n+\n+```sh\n+gcloud pubsub topics create my-topic\n+```\n+\n+Use the [Jib Maven Plugin](https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin) to build and push your container image:\n+```sh\n+mvn jib:build -Dimage gcr.io/$(gcloud config get-value project)/cloudrun-events-pubsub\n+```\n+\n+Deploy your Cloud Run service:\n+```sh", "originalCommit": "5d25db3106e6587458d97f8eee0a5542dcf63c28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg4MjU2MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445882560", "bodyText": "done", "author": "averikitsch", "createdAt": "2020-06-25T22:56:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NDg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NTk0NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445855944", "bodyText": "Ditto formatting.", "author": "grant", "createdAt": "2020-06-25T21:44:36Z", "path": "run/events-pubsub/src/test/java/com/example/cloudrun/EventControllerTests.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudrun;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+@AutoConfigureMockMvc\n+public class EventControllerTests {\n+\n+  @Autowired private MockMvc mockMvc;\n+\n+  @Test\n+  public void addEmptyBody() throws Exception {\n+    mockMvc.perform(post(\"/\")).andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  public void addNoMessage() throws Exception {\n+    String mockBody = \"{}\";\n+\n+    mockMvc\n+        .perform(post(\"/\").contentType(MediaType.APPLICATION_JSON).content(mockBody))\n+        .andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  public void addInvalidMimetype() throws Exception {\n+    String mockBody = \"{\\\"message\\\":{\\\"data\\\":\\\"dGVzdA==\\\",\"\n+                      + \"\\\"attributes\\\":{},\\\"messageId\\\":\\\"91010751788941\\\"\"\n+                      + \",\\\"publishTime\\\":\\\"2017-09-25T23:16:42.302Z\\\"}}\";\n+\n+    mockMvc\n+        .perform(post(\"/\").contentType(MediaType.TEXT_HTML).content(mockBody))\n+        .andExpect(status().isUnsupportedMediaType());\n+  }\n+\n+  @Test\n+  public void addMinimalBody() throws Exception {\n+    String mockBody = \"{\\\"message\\\":{}}\";\n+\n+    mockMvc\n+        .perform(post(\"/\").contentType(MediaType.APPLICATION_JSON).content(mockBody))\n+        .andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  public void addFullBody() throws Exception {\n+    String mockBody = \"{\\\"message\\\":{\\\"data\\\":\\\"dGVzdA==\\\",\"\n+                      + \"\\\"attributes\\\":{},\\\"messageId\\\":\\\"91010751788941\\\"\"\n+                      + \",\\\"publishTime\\\":\\\"2017-09-25T23:16:42.302Z\\\"}}\";", "originalCommit": "5d25db3106e6587458d97f8eee0a5542dcf63c28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NjQ5Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445856493", "bodyText": "nit: spacing/formatting like above", "author": "grant", "createdAt": "2020-06-25T21:45:44Z", "path": "run/events-storage/README.md", "diffHunk": "@@ -0,0 +1,76 @@\n+# Events for Cloud Run - Cloud Storage tutorial\n+\n+This sample shows how to create a service that processes GCS events.\n+\n+For more details on how to work with this sample read the [Google Cloud Run Java Samples README](https://github.com/GoogleCloudPlatform/java-docs-samples/tree/master/run).\n+\n+[![Run in Google Cloud][run_img]][run_link]\n+\n+[run_img]: https://storage.googleapis.com/cloudrun/button.svg\n+[run_link]: https://deploy.cloud.run/?git_repo=https://github.com/GoogleCloudPlatform/java-docs-samples&dir=run/events-storage\n+\n+\n+## Dependencies\n+\n+* **Spring Boot**: Web server framework.\n+* **Jib**: Container build tool.\n+* **Junit + SpringBootTest**: [development] Test running framework.\n+* **MockMVC**: [development] Integration testing support framework.\n+\n+## Setup\n+\n+Configure environment variables:\n+\n+```sh\n+export MY_RUN_SERVICE=gcs-service\n+export MY_RUN_CONTAINER=gcs-container\n+export MY_GCS_TRIGGER=gcs-trigger\n+export MY_GCS_BUCKET=\"$(gcloud config get-value project)-gcs-bucket\"\n+```\n+\n+## Quickstart\n+\n+Use the [Jib Maven Plugin](https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin) to build and push your container image:\n+```sh\n+mvn jib:build -Dimage gcr.io/$(gcloud config get-value project)/$MY_RUN_CONTAINER\n+```\n+\n+Deploy your Cloud Run service:\n+```sh\n+gcloud run deploy $MY_RUN_SERVICE \\\n+ --image gcr.io/$(gcloud config get-value project)/$MY_RUN_CONTAINER \\\n+ --allow-unauthenticated\n+```", "originalCommit": "5d25db3106e6587458d97f8eee0a5542dcf63c28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg4MjYwMA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445882600", "bodyText": "done", "author": "averikitsch", "createdAt": "2020-06-25T22:56:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NjQ5Mw=="}], "type": "inlineReview"}, {"oid": "76f3476163874a4293ae0467d5aa80da85d6910a", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/76f3476163874a4293ae0467d5aa80da85d6910a", "message": "Update test JSON and README", "committedDate": "2020-06-25T22:55:46Z", "type": "commit"}]}