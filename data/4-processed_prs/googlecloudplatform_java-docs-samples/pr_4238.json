{"pr_number": 4238, "pr_title": "(feat) add Transcoder samples", "pr_createdAt": "2020-11-14T01:56:46Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238", "timeline": [{"oid": "92a273c317d91978e0dcfba0f19a528d8243d431", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/92a273c317d91978e0dcfba0f19a528d8243d431", "message": "(feat) add Transcoder samples", "committedDate": "2020-11-14T00:43:23Z", "type": "commit"}, {"oid": "a7e8f3ab88b4973f0b00e535fc224571752e9472", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a7e8f3ab88b4973f0b00e535fc224571752e9472", "message": "(feat) add Transcoder samples", "committedDate": "2020-11-14T01:25:35Z", "type": "commit"}, {"oid": "1921482b034dda19c70459f3c955bdb9bbc55d0c", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/1921482b034dda19c70459f3c955bdb9bbc55d0c", "message": "(feat) lint fix", "committedDate": "2020-11-14T01:53:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1NjE4OA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r524556188", "bodyText": "nit: do we want to print out the entire payload or just the name?", "author": "ipotuzhnov", "createdAt": "2020-11-16T20:35:56Z", "path": "media/transcoder/src/main/java/com/example/transcoder/ListJobTemplates.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.transcoder;\n+\n+// [START transcoder_list_job_templates]\n+\n+import com.google.cloud.video.transcoder.v1beta1.JobTemplate;\n+import com.google.cloud.video.transcoder.v1beta1.ListJobTemplatesRequest;\n+import com.google.cloud.video.transcoder.v1beta1.LocationName;\n+import com.google.cloud.video.transcoder.v1beta1.TranscoderServiceClient;\n+import java.io.IOException;\n+\n+public class ListJobTemplates {\n+\n+  public static void main(String[] args) throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project-id\";\n+    String location = \"us-central1\";\n+\n+    listJobTemplates(projectId, location);\n+  }\n+\n+  // Lists the job templates for a given location.\n+  public static void listJobTemplates(String projectId, String location) throws IOException {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests.\n+    try (TranscoderServiceClient transcoderServiceClient = TranscoderServiceClient.create()) {\n+\n+      var listJobTemplatesRequest =\n+          ListJobTemplatesRequest.newBuilder()\n+              .setParent(LocationName.of(projectId, location).toString())\n+              .build();\n+\n+      // Send the list job templates request and process the response.\n+      TranscoderServiceClient.ListJobTemplatesPagedResponse response =\n+          transcoderServiceClient.listJobTemplates(listJobTemplatesRequest);\n+      System.out.println(\"Job templates:\");\n+\n+      for (JobTemplate jt : response.iterateAll()) {\n+        System.out.println(jt);", "originalCommit": "1921482b034dda19c70459f3c955bdb9bbc55d0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3OTYzMg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r524679632", "bodyText": "I'd prefer to just list the names here.", "author": "irataxy", "createdAt": "2020-11-16T22:27:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1NjE4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0MTAwOQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r525541009", "bodyText": "Then we should probably do something like this:\nSystem.out.println(jt.getName());", "author": "ipotuzhnov", "createdAt": "2020-11-17T21:37:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1NjE4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0ODkyOQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r525648929", "bodyText": "Done", "author": "irataxy", "createdAt": "2020-11-18T02:10:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1NjE4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1NjMxNw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r524556317", "bodyText": "ditto\nDo we want to print out the entire payload or just the name?", "author": "ipotuzhnov", "createdAt": "2020-11-16T20:36:11Z", "path": "media/transcoder/src/main/java/com/example/transcoder/ListJobs.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.transcoder;\n+\n+// [START transcoder_list_jobs]\n+\n+import com.google.cloud.video.transcoder.v1beta1.Job;\n+import com.google.cloud.video.transcoder.v1beta1.ListJobsRequest;\n+import com.google.cloud.video.transcoder.v1beta1.LocationName;\n+import com.google.cloud.video.transcoder.v1beta1.TranscoderServiceClient;\n+import java.io.IOException;\n+\n+public class ListJobs {\n+\n+  public static void main(String[] args) throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project-id\";\n+    String location = \"us-central1\";\n+\n+    listJobs(projectId, location);\n+  }\n+\n+  // Lists the jobs for a given location.\n+  public static void listJobs(String projectId, String location) throws IOException {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests.\n+    try (TranscoderServiceClient transcoderServiceClient = TranscoderServiceClient.create()) {\n+\n+      var listJobsRequest =\n+          ListJobsRequest.newBuilder()\n+              .setParent(LocationName.of(projectId, location).toString())\n+              .build();\n+\n+      // Send the list jobs request and process the response.\n+      TranscoderServiceClient.ListJobsPagedResponse response =\n+          transcoderServiceClient.listJobs(listJobsRequest);\n+      System.out.println(\"Jobs:\");\n+\n+      for (Job jt : response.iterateAll()) {\n+        System.out.println(jt);", "originalCommit": "1921482b034dda19c70459f3c955bdb9bbc55d0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3OTc3MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r524679770", "bodyText": "I'd prefer to just list the names here.", "author": "irataxy", "createdAt": "2020-11-16T22:27:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0MTA3Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r525541076", "bodyText": "Then we should probably do something like this:\nSystem.out.println(jt.getName());", "author": "ipotuzhnov", "createdAt": "2020-11-17T21:37:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU3MjAxMg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r525572012", "bodyText": "Note for Java, longer names are preferable.  (Unlike Go)", "author": "lesv", "createdAt": "2020-11-17T22:38:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0ODg1Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r525648852", "bodyText": "Done", "author": "irataxy", "createdAt": "2020-11-18T02:10:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1NjMxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1NjY0Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r524556643", "bodyText": "Should be \"j\" or \"job\"", "author": "ipotuzhnov", "createdAt": "2020-11-16T20:36:46Z", "path": "media/transcoder/src/main/java/com/example/transcoder/ListJobs.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.transcoder;\n+\n+// [START transcoder_list_jobs]\n+\n+import com.google.cloud.video.transcoder.v1beta1.Job;\n+import com.google.cloud.video.transcoder.v1beta1.ListJobsRequest;\n+import com.google.cloud.video.transcoder.v1beta1.LocationName;\n+import com.google.cloud.video.transcoder.v1beta1.TranscoderServiceClient;\n+import java.io.IOException;\n+\n+public class ListJobs {\n+\n+  public static void main(String[] args) throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project-id\";\n+    String location = \"us-central1\";\n+\n+    listJobs(projectId, location);\n+  }\n+\n+  // Lists the jobs for a given location.\n+  public static void listJobs(String projectId, String location) throws IOException {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests.\n+    try (TranscoderServiceClient transcoderServiceClient = TranscoderServiceClient.create()) {\n+\n+      var listJobsRequest =\n+          ListJobsRequest.newBuilder()\n+              .setParent(LocationName.of(projectId, location).toString())\n+              .build();\n+\n+      // Send the list jobs request and process the response.\n+      TranscoderServiceClient.ListJobsPagedResponse response =\n+          transcoderServiceClient.listJobs(listJobsRequest);\n+      System.out.println(\"Jobs:\");\n+\n+      for (Job jt : response.iterateAll()) {", "originalCommit": "1921482b034dda19c70459f3c955bdb9bbc55d0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0ODc5OA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r525648798", "bodyText": "Done", "author": "irataxy", "createdAt": "2020-11-18T02:10:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1NjY0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1NzU2OA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r524557568", "bodyText": "Should the error be handled here?", "author": "ipotuzhnov", "createdAt": "2020-11-16T20:38:33Z", "path": "media/transcoder/src/test/java/com/example/transcoder/CreateJobFromAdHocTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.transcoder;\n+\n+import static junit.framework.TestCase.assertNotNull;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import com.google.api.client.googleapis.json.GoogleJsonResponseException;\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.storage.Blob;\n+import com.google.cloud.storage.BlobId;\n+import com.google.cloud.storage.BlobInfo;\n+import com.google.cloud.storage.Bucket;\n+import com.google.cloud.storage.BucketInfo;\n+import com.google.cloud.storage.Storage;\n+import com.google.cloud.storage.StorageClass;\n+import com.google.cloud.storage.StorageOptions;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class CreateJobFromAdHocTest {\n+\n+  private static final String LOCATION = \"us-central1\";\n+  private static final String BUCKET_NAME = \"java-samples-transcoder-test\";\n+  private static final String TEST_FILE_NAME = \"ChromeCast.mp4\";\n+  private static final String TEST_FILE_PATH =\n+      \"src/test/java/com/example/transcoder/testdata/\" + TEST_FILE_NAME;\n+  private static final String INPUT_URI = \"gs://\" + BUCKET_NAME + \"/\" + TEST_FILE_NAME;\n+  private static final String OUTPUT_URI_FOR_AD_HOC = \"gs://\" + BUCKET_NAME + \"/test-output-adhoc/\";\n+  private static String PROJECT_ID;\n+  private static String PROJECT_NUMBER;\n+  private static String JOB_ID;\n+  private final PrintStream originalOut = System.out;\n+  private ByteArrayOutputStream bout;\n+\n+  private static String requireEnvVar(String varName) {\n+    String varValue = System.getenv(varName);\n+    assertNotNull(\n+        String.format(\"Environment variable '%s' is required to perform these tests.\", varName));\n+    return varValue;\n+  }\n+\n+  private static void deleteBucket(String bucketName) {\n+    Storage storage = StorageOptions.newBuilder().setProjectId(PROJECT_ID).build().getService();\n+    Bucket bucket = storage.get(bucketName);\n+    if (bucket != null) {\n+      Page<Blob> blobs = bucket.list();\n+\n+      for (Blob blob : blobs.iterateAll()) {\n+        System.out.println(blob.getName());\n+        storage.delete(bucketName, blob.getName());\n+      }\n+      bucket.delete();\n+    }\n+  }\n+\n+  @BeforeClass\n+  public static void checkRequirements() {\n+    requireEnvVar(\"GOOGLE_APPLICATION_CREDENTIALS\");\n+    PROJECT_ID = requireEnvVar(\"GOOGLE_CLOUD_PROJECT\");\n+    PROJECT_NUMBER = requireEnvVar(\"GOOGLE_CLOUD_PROJECT_NUMBER\");\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    bout = new ByteArrayOutputStream();\n+    System.setOut(new PrintStream(bout));\n+\n+    bout = new ByteArrayOutputStream();\n+    System.setOut(new PrintStream(bout));\n+\n+    deleteBucket(BUCKET_NAME);\n+    Storage storage = StorageOptions.newBuilder().setProjectId(PROJECT_ID).build().getService();\n+    storage.create(\n+        BucketInfo.newBuilder(BUCKET_NAME)\n+            .setStorageClass(StorageClass.STANDARD)\n+            .setLocation(LOCATION)\n+            .build());\n+\n+    BlobId blobId = BlobId.of(BUCKET_NAME, TEST_FILE_NAME);\n+    BlobInfo blobInfo = BlobInfo.newBuilder(blobId).build();\n+    Path path = Paths.get(TEST_FILE_PATH);\n+    storage.create(blobInfo, Files.readAllBytes(path));\n+    bout.reset();\n+  }\n+\n+  @Test\n+  public void test_CreateJobFromAdHoc() throws Exception {\n+    String jobName = String.format(\"projects/%s/locations/%s/jobs/\", PROJECT_NUMBER, LOCATION);\n+    try {\n+      CreateJobFromAdHoc.createJobFromAdHoc(PROJECT_ID, LOCATION, INPUT_URI, OUTPUT_URI_FOR_AD_HOC);\n+    } catch (GoogleJsonResponseException gjre) {\n+      // Handle error", "originalCommit": "1921482b034dda19c70459f3c955bdb9bbc55d0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0ODc0Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r525648746", "bodyText": "Removed try-catch", "author": "irataxy", "createdAt": "2020-11-18T02:10:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1NzU2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY2Nzc2Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r524667766", "bodyText": "Ideally this would be provided by kokoro.  (ie ask devrel to provide it).  Also, does your api support Project Names?  if so, that is preferred.", "author": "lesv", "createdAt": "2020-11-16T22:16:28Z", "path": ".kokoro/tests/run_tests.sh", "diffHunk": "@@ -61,6 +61,8 @@ if [[ \"$SCRIPT_DEBUG\" != \"true\" ]]; then\n     export LOCATION_ID=us-east1\n     # For Datalabeling samples to hit the testing endpoint\n     export DATALABELING_ENDPOINT=\"test-datalabeling.sandbox.googleapis.com:443\"\n+    # For Transcoder samples\n+    export GOOGLE_CLOUD_PROJECT_NUMBER=\"779844219229\"", "originalCommit": "1921482b034dda19c70459f3c955bdb9bbc55d0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDcwOTIxMA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r524709210", "bodyText": "Confirmed that this is the project number for the samples test project.", "author": "irataxy", "createdAt": "2020-11-16T22:55:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY2Nzc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc5MjMwNA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r524792304", "bodyText": "The API supports project numbers and project IDs.\nA project name would be \"projects/<project_number or project_id>\", so I'm guessing you were referring to project IDs.\nhttps://google.aip.dev/cloud/2510#project-identifier-format", "author": "ipotuzhnov", "createdAt": "2020-11-17T00:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY2Nzc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4MjMxMQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r525382311", "bodyText": "There are a few api's that only allow numbers, so I like to know what they are before approving them.  Since GOOGLE_CLOUD_PROJECT is already set in the environment for you, do you really need this?", "author": "lesv", "createdAt": "2020-11-17T18:15:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY2Nzc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0MTk3Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r525541972", "bodyText": "Transcoder API support both project numbers and IDs.", "author": "ipotuzhnov", "createdAt": "2020-11-17T21:39:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY2Nzc2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY2ODc0MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r524668740", "bodyText": "You are making this public, do you really want to do this?  Are customers using this?", "author": "lesv", "createdAt": "2020-11-16T22:17:27Z", "path": ".kokoro/tests/run_tests.sh", "diffHunk": "@@ -61,6 +61,8 @@ if [[ \"$SCRIPT_DEBUG\" != \"true\" ]]; then\n     export LOCATION_ID=us-east1\n     # For Datalabeling samples to hit the testing endpoint\n     export DATALABELING_ENDPOINT=\"test-datalabeling.sandbox.googleapis.com:443\"", "originalCommit": "1921482b034dda19c70459f3c955bdb9bbc55d0c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY2OTc5Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r524669792", "bodyText": "Why do we use both of these?", "author": "lesv", "createdAt": "2020-11-16T22:18:26Z", "path": "media/transcoder/src/test/java/com/example/transcoder/CreateJobFromAdHocTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.transcoder;\n+\n+import static junit.framework.TestCase.assertNotNull;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import com.google.api.client.googleapis.json.GoogleJsonResponseException;\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.storage.Blob;\n+import com.google.cloud.storage.BlobId;\n+import com.google.cloud.storage.BlobInfo;\n+import com.google.cloud.storage.Bucket;\n+import com.google.cloud.storage.BucketInfo;\n+import com.google.cloud.storage.Storage;\n+import com.google.cloud.storage.StorageClass;\n+import com.google.cloud.storage.StorageOptions;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class CreateJobFromAdHocTest {\n+\n+  private static final String LOCATION = \"us-central1\";\n+  private static final String BUCKET_NAME = \"java-samples-transcoder-test\";\n+  private static final String TEST_FILE_NAME = \"ChromeCast.mp4\";\n+  private static final String TEST_FILE_PATH =\n+      \"src/test/java/com/example/transcoder/testdata/\" + TEST_FILE_NAME;\n+  private static final String INPUT_URI = \"gs://\" + BUCKET_NAME + \"/\" + TEST_FILE_NAME;\n+  private static final String OUTPUT_URI_FOR_AD_HOC = \"gs://\" + BUCKET_NAME + \"/test-output-adhoc/\";\n+  private static String PROJECT_ID;\n+  private static String PROJECT_NUMBER;\n+  private static String JOB_ID;\n+  private final PrintStream originalOut = System.out;\n+  private ByteArrayOutputStream bout;\n+\n+  private static String requireEnvVar(String varName) {\n+    String varValue = System.getenv(varName);\n+    assertNotNull(\n+        String.format(\"Environment variable '%s' is required to perform these tests.\", varName));\n+    return varValue;\n+  }\n+\n+  private static void deleteBucket(String bucketName) {\n+    Storage storage = StorageOptions.newBuilder().setProjectId(PROJECT_ID).build().getService();\n+    Bucket bucket = storage.get(bucketName);\n+    if (bucket != null) {\n+      Page<Blob> blobs = bucket.list();\n+\n+      for (Blob blob : blobs.iterateAll()) {\n+        System.out.println(blob.getName());\n+        storage.delete(bucketName, blob.getName());\n+      }\n+      bucket.delete();\n+    }\n+  }\n+\n+  @BeforeClass\n+  public static void checkRequirements() {\n+    requireEnvVar(\"GOOGLE_APPLICATION_CREDENTIALS\");\n+    PROJECT_ID = requireEnvVar(\"GOOGLE_CLOUD_PROJECT\");\n+    PROJECT_NUMBER = requireEnvVar(\"GOOGLE_CLOUD_PROJECT_NUMBER\");\n+  }", "originalCommit": "1921482b034dda19c70459f3c955bdb9bbc55d0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3MzczOQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r524673739", "bodyText": "PROJECT_NUMBER is used to verify the API responses, which translate the project name into a project number", "author": "irataxy", "createdAt": "2020-11-16T22:22:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY2OTc5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3MzEzNg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r524673136", "bodyText": "This seems like overkill and confusing to users.", "author": "lesv", "createdAt": "2020-11-16T22:21:32Z", "path": "media/transcoder/src/test/java/com/example/transcoder/CreateJobFromPresetTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.transcoder;\n+\n+import static junit.framework.TestCase.assertNotNull;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import com.google.api.client.googleapis.json.GoogleJsonResponseException;\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.storage.Blob;\n+import com.google.cloud.storage.BlobId;\n+import com.google.cloud.storage.BlobInfo;\n+import com.google.cloud.storage.Bucket;\n+import com.google.cloud.storage.BucketInfo;\n+import com.google.cloud.storage.Storage;\n+import com.google.cloud.storage.StorageClass;\n+import com.google.cloud.storage.StorageOptions;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class CreateJobFromPresetTest {\n+\n+  private static final String LOCATION = \"us-central1\";\n+  private static final String BUCKET_NAME = \"java-samples-transcoder-test\";\n+  private static final String TEST_FILE_NAME = \"ChromeCast.mp4\";\n+  private static final String TEST_FILE_PATH =\n+      \"src/test/java/com/example/transcoder/testdata/\" + TEST_FILE_NAME;\n+  private static final String INPUT_URI = \"gs://\" + BUCKET_NAME + \"/\" + TEST_FILE_NAME;\n+  private static final String OUTPUT_URI_FOR_PRESET =\n+      \"gs://\" + BUCKET_NAME + \"/test-output-preset/\";\n+  private static final String PRESET = \"preset/web-hd\";\n+  private static String PROJECT_ID;\n+  private static String PROJECT_NUMBER;\n+  private static String JOB_ID;\n+  private final PrintStream originalOut = System.out;\n+  private ByteArrayOutputStream bout;\n+\n+  private static String requireEnvVar(String varName) {\n+    String varValue = System.getenv(varName);\n+    assertNotNull(\n+        String.format(\"Environment variable '%s' is required to perform these tests.\", varName));\n+    return varValue;\n+  }\n+\n+  private static void deleteBucket(String bucketName) {\n+    Storage storage = StorageOptions.newBuilder().setProjectId(PROJECT_ID).build().getService();\n+    Bucket bucket = storage.get(bucketName);\n+    if (bucket != null) {\n+      Page<Blob> blobs = bucket.list();\n+\n+      for (Blob blob : blobs.iterateAll()) {\n+        System.out.println(blob.getName());\n+        storage.delete(bucketName, blob.getName());\n+      }\n+      bucket.delete();\n+    }\n+  }\n+\n+  @BeforeClass\n+  public static void checkRequirements() {\n+    requireEnvVar(\"GOOGLE_APPLICATION_CREDENTIALS\");\n+    PROJECT_ID = requireEnvVar(\"GOOGLE_CLOUD_PROJECT\");\n+    PROJECT_NUMBER = requireEnvVar(\"GOOGLE_CLOUD_PROJECT_NUMBER\");", "originalCommit": "1921482b034dda19c70459f3c955bdb9bbc55d0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDcwODQzOQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r524708439", "bodyText": "This is for the internal test project only.", "author": "irataxy", "createdAt": "2020-11-16T22:55:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3MzEzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3NDA4MQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r524674081", "bodyText": "Why is this using PROJECT_NUMBER?  It's supposed to take both and our samples prefer PROJECT_ID.", "author": "lesv", "createdAt": "2020-11-16T22:22:21Z", "path": "media/transcoder/src/test/java/com/example/transcoder/CreateJobFromPresetTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.transcoder;\n+\n+import static junit.framework.TestCase.assertNotNull;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import com.google.api.client.googleapis.json.GoogleJsonResponseException;\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.storage.Blob;\n+import com.google.cloud.storage.BlobId;\n+import com.google.cloud.storage.BlobInfo;\n+import com.google.cloud.storage.Bucket;\n+import com.google.cloud.storage.BucketInfo;\n+import com.google.cloud.storage.Storage;\n+import com.google.cloud.storage.StorageClass;\n+import com.google.cloud.storage.StorageOptions;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class CreateJobFromPresetTest {\n+\n+  private static final String LOCATION = \"us-central1\";\n+  private static final String BUCKET_NAME = \"java-samples-transcoder-test\";\n+  private static final String TEST_FILE_NAME = \"ChromeCast.mp4\";\n+  private static final String TEST_FILE_PATH =\n+      \"src/test/java/com/example/transcoder/testdata/\" + TEST_FILE_NAME;\n+  private static final String INPUT_URI = \"gs://\" + BUCKET_NAME + \"/\" + TEST_FILE_NAME;\n+  private static final String OUTPUT_URI_FOR_PRESET =\n+      \"gs://\" + BUCKET_NAME + \"/test-output-preset/\";\n+  private static final String PRESET = \"preset/web-hd\";\n+  private static String PROJECT_ID;\n+  private static String PROJECT_NUMBER;\n+  private static String JOB_ID;\n+  private final PrintStream originalOut = System.out;\n+  private ByteArrayOutputStream bout;\n+\n+  private static String requireEnvVar(String varName) {\n+    String varValue = System.getenv(varName);\n+    assertNotNull(\n+        String.format(\"Environment variable '%s' is required to perform these tests.\", varName));\n+    return varValue;\n+  }\n+\n+  private static void deleteBucket(String bucketName) {\n+    Storage storage = StorageOptions.newBuilder().setProjectId(PROJECT_ID).build().getService();\n+    Bucket bucket = storage.get(bucketName);\n+    if (bucket != null) {\n+      Page<Blob> blobs = bucket.list();\n+\n+      for (Blob blob : blobs.iterateAll()) {\n+        System.out.println(blob.getName());\n+        storage.delete(bucketName, blob.getName());\n+      }\n+      bucket.delete();\n+    }\n+  }\n+\n+  @BeforeClass\n+  public static void checkRequirements() {\n+    requireEnvVar(\"GOOGLE_APPLICATION_CREDENTIALS\");\n+    PROJECT_ID = requireEnvVar(\"GOOGLE_CLOUD_PROJECT\");\n+    PROJECT_NUMBER = requireEnvVar(\"GOOGLE_CLOUD_PROJECT_NUMBER\");\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    bout = new ByteArrayOutputStream();\n+    System.setOut(new PrintStream(bout));\n+\n+    bout = new ByteArrayOutputStream();\n+    System.setOut(new PrintStream(bout));\n+\n+    deleteBucket(BUCKET_NAME);\n+    Storage storage = StorageOptions.newBuilder().setProjectId(PROJECT_ID).build().getService();\n+    storage.create(\n+        BucketInfo.newBuilder(BUCKET_NAME)\n+            .setStorageClass(StorageClass.STANDARD)\n+            .setLocation(LOCATION)\n+            .build());\n+\n+    BlobId blobId = BlobId.of(BUCKET_NAME, TEST_FILE_NAME);\n+    BlobInfo blobInfo = BlobInfo.newBuilder(blobId).build();\n+    Path path = Paths.get(TEST_FILE_PATH);\n+    storage.create(blobInfo, Files.readAllBytes(path));\n+    bout.reset();\n+  }\n+\n+  @Test\n+  public void test_CreateJobFromPreset() throws Exception {\n+    String jobName = String.format(\"projects/%s/locations/%s/jobs/\", PROJECT_NUMBER, LOCATION);", "originalCommit": "1921482b034dda19c70459f3c955bdb9bbc55d0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDcwMzMyNA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r524703324", "bodyText": "The API response includes the project number in place of the project id per https://google.aip.dev/cloud/2510.", "author": "irataxy", "createdAt": "2020-11-16T22:50:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3NDA4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY4MTM2NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r524681365", "bodyText": "It's better to do this in the @Before method as it's possible (though unlikely) that someone might change this in another class before this one loads.  (note - feel free to ignore this)\nNote we are adding Junit rules soon that will make doing this moot.", "author": "lesv", "createdAt": "2020-11-16T22:29:11Z", "path": "media/transcoder/src/test/java/com/example/transcoder/CreateJobTemplateTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.transcoder;\n+\n+import static junit.framework.TestCase.assertNotNull;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import com.google.api.client.googleapis.json.GoogleJsonResponseException;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class CreateJobTemplateTest {\n+\n+  private static final String LOCATION = \"us-central1\";\n+  private static final String TEMPLATE_ID = \"my-job-template\";\n+  private static String PROJECT_ID;\n+  private static String PROJECT_NUMBER;\n+  private static String TEMPLATE_NAME;\n+  private final PrintStream originalOut = System.out;", "originalCommit": "1921482b034dda19c70459f3c955bdb9bbc55d0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0ODY4Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r525648686", "bodyText": "Done", "author": "irataxy", "createdAt": "2020-11-18T02:10:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY4MTM2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4NjMyNw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r525386327", "bodyText": "Why are you catching and ignoring?  as above, if you catch, you should do something, if you wish to ignore an exception, please say so.  Typically using the word \"expected\" as the variable name. https://google.github.io/styleguide/javaguide.html#s6.2-caught-exceptions", "author": "lesv", "createdAt": "2020-11-17T18:21:37Z", "path": "media/transcoder/src/test/java/com/example/transcoder/CreateJobFromAdHocTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.transcoder;\n+\n+import static junit.framework.TestCase.assertNotNull;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import com.google.api.client.googleapis.json.GoogleJsonResponseException;\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.storage.Blob;\n+import com.google.cloud.storage.BlobId;\n+import com.google.cloud.storage.BlobInfo;\n+import com.google.cloud.storage.Bucket;\n+import com.google.cloud.storage.BucketInfo;\n+import com.google.cloud.storage.Storage;\n+import com.google.cloud.storage.StorageClass;\n+import com.google.cloud.storage.StorageOptions;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class CreateJobFromAdHocTest {\n+\n+  private static final String LOCATION = \"us-central1\";\n+  private static final String BUCKET_NAME = \"java-samples-transcoder-test\";\n+  private static final String TEST_FILE_NAME = \"ChromeCast.mp4\";\n+  private static final String TEST_FILE_PATH =\n+      \"src/test/java/com/example/transcoder/testdata/\" + TEST_FILE_NAME;\n+  private static final String INPUT_URI = \"gs://\" + BUCKET_NAME + \"/\" + TEST_FILE_NAME;\n+  private static final String OUTPUT_URI_FOR_AD_HOC = \"gs://\" + BUCKET_NAME + \"/test-output-adhoc/\";\n+  private static String PROJECT_ID;\n+  private static String PROJECT_NUMBER;\n+  private static String JOB_ID;\n+  private final PrintStream originalOut = System.out;\n+  private ByteArrayOutputStream bout;\n+\n+  private static String requireEnvVar(String varName) {\n+    String varValue = System.getenv(varName);\n+    assertNotNull(\n+        String.format(\"Environment variable '%s' is required to perform these tests.\", varName));\n+    return varValue;\n+  }\n+\n+  private static void deleteBucket(String bucketName) {\n+    Storage storage = StorageOptions.newBuilder().setProjectId(PROJECT_ID).build().getService();\n+    Bucket bucket = storage.get(bucketName);\n+    if (bucket != null) {\n+      Page<Blob> blobs = bucket.list();\n+\n+      for (Blob blob : blobs.iterateAll()) {\n+        System.out.println(blob.getName());\n+        storage.delete(bucketName, blob.getName());\n+      }\n+      bucket.delete();\n+    }\n+  }\n+\n+  @BeforeClass\n+  public static void checkRequirements() {\n+    requireEnvVar(\"GOOGLE_APPLICATION_CREDENTIALS\");\n+    PROJECT_ID = requireEnvVar(\"GOOGLE_CLOUD_PROJECT\");\n+    PROJECT_NUMBER = requireEnvVar(\"GOOGLE_CLOUD_PROJECT_NUMBER\");\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    bout = new ByteArrayOutputStream();\n+    System.setOut(new PrintStream(bout));\n+\n+    bout = new ByteArrayOutputStream();\n+    System.setOut(new PrintStream(bout));\n+\n+    deleteBucket(BUCKET_NAME);\n+    Storage storage = StorageOptions.newBuilder().setProjectId(PROJECT_ID).build().getService();\n+    storage.create(\n+        BucketInfo.newBuilder(BUCKET_NAME)\n+            .setStorageClass(StorageClass.STANDARD)\n+            .setLocation(LOCATION)\n+            .build());\n+\n+    BlobId blobId = BlobId.of(BUCKET_NAME, TEST_FILE_NAME);\n+    BlobInfo blobInfo = BlobInfo.newBuilder(blobId).build();\n+    Path path = Paths.get(TEST_FILE_PATH);\n+    storage.create(blobInfo, Files.readAllBytes(path));\n+    bout.reset();\n+  }\n+\n+  @Test\n+  public void test_CreateJobFromAdHoc() throws Exception {\n+    String jobName = String.format(\"projects/%s/locations/%s/jobs/\", PROJECT_NUMBER, LOCATION);\n+    try {\n+      CreateJobFromAdHoc.createJobFromAdHoc(PROJECT_ID, LOCATION, INPUT_URI, OUTPUT_URI_FOR_AD_HOC);\n+    } catch (GoogleJsonResponseException gjre) {\n+      // Handle error\n+    }\n+    String output = bout.toString();\n+    assertThat(output, containsString(jobName));\n+    String[] arr = output.split(\"/\");\n+    JOB_ID = arr[arr.length - 1].replace(\"\\n\", \"\");\n+    bout.reset();\n+\n+    Thread.sleep(60000);\n+\n+    try {\n+      GetJobState.getJobState(PROJECT_ID, LOCATION, JOB_ID);\n+    } catch (GoogleJsonResponseException gjre) {\n+      // Handle error\n+    }\n+    output = bout.toString();\n+    assertThat(output, containsString(\"SUCCEEDED\"));\n+    bout.reset();\n+  }\n+\n+  @After\n+  public void tearDown() throws IOException {\n+    try {\n+      DeleteJob.deleteJob(PROJECT_ID, LOCATION, JOB_ID);\n+    } catch (GoogleJsonResponseException gjre) {\n+      // Handle error\n+    }", "originalCommit": "1921482b034dda19c70459f3c955bdb9bbc55d0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0ODY0Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r525648642", "bodyText": "Removed try-catch", "author": "irataxy", "createdAt": "2020-11-18T02:09:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4NjMyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4Njk2Nw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r525386967", "bodyText": "https://google.github.io/styleguide/javaguide.html#s6.2-caught-exceptions", "author": "lesv", "createdAt": "2020-11-17T18:22:35Z", "path": "media/transcoder/src/test/java/com/example/transcoder/CreateJobTemplateTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.transcoder;\n+\n+import static junit.framework.TestCase.assertNotNull;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import com.google.api.client.googleapis.json.GoogleJsonResponseException;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class CreateJobTemplateTest {\n+\n+  private static final String LOCATION = \"us-central1\";\n+  private static final String TEMPLATE_ID = \"my-job-template\";\n+  private static String PROJECT_ID;\n+  private static String PROJECT_NUMBER;\n+  private static String TEMPLATE_NAME;\n+  private final PrintStream originalOut = System.out;\n+  private ByteArrayOutputStream bout;\n+\n+  private static String requireEnvVar(String varName) {\n+    String varValue = System.getenv(varName);\n+    assertNotNull(\n+        String.format(\"Environment variable '%s' is required to perform these tests.\", varName));\n+    return varValue;\n+  }\n+\n+  @BeforeClass\n+  public static void checkRequirements() {\n+    requireEnvVar(\"GOOGLE_APPLICATION_CREDENTIALS\");\n+    PROJECT_ID = requireEnvVar(\"GOOGLE_CLOUD_PROJECT\");\n+    PROJECT_NUMBER = requireEnvVar(\"GOOGLE_CLOUD_PROJECT_NUMBER\");\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    bout = new ByteArrayOutputStream();\n+    System.setOut(new PrintStream(bout));\n+\n+    bout = new ByteArrayOutputStream();\n+    System.setOut(new PrintStream(bout));\n+\n+    TEMPLATE_NAME =\n+        String.format(\n+            \"projects/%s/locations/%s/jobTemplates/%s\", PROJECT_NUMBER, LOCATION, TEMPLATE_ID);\n+    try {\n+      DeleteJobTemplate.deleteJobTemplate(PROJECT_ID, LOCATION, TEMPLATE_ID);\n+    } catch (GoogleJsonResponseException gjre) {\n+      // Handle error\n+    }\n+    bout.reset();\n+  }\n+\n+  @Test\n+  public void test_CreateJobTemplate() throws IOException {\n+    try {\n+      CreateJobTemplate.createJobTemplate(PROJECT_ID, LOCATION, TEMPLATE_ID);\n+    } catch (GoogleJsonResponseException gjre) {\n+      // Handle error\n+    }\n+    String output = bout.toString();\n+    assertThat(output, containsString(TEMPLATE_NAME));\n+    bout.reset();\n+  }\n+\n+  @After\n+  public void tearDown() throws IOException {\n+    try {\n+      DeleteJobTemplate.deleteJobTemplate(PROJECT_ID, LOCATION, TEMPLATE_ID);\n+    } catch (GoogleJsonResponseException gjre) {\n+      // Handle error\n+    }", "originalCommit": "1921482b034dda19c70459f3c955bdb9bbc55d0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0ODU4Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r525648586", "bodyText": "Removed try-catch", "author": "irataxy", "createdAt": "2020-11-18T02:09:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4Njk2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4NzAzNQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r525387035", "bodyText": "https://google.github.io/styleguide/javaguide.html#s6.2-caught-exceptions", "author": "lesv", "createdAt": "2020-11-17T18:22:41Z", "path": "media/transcoder/src/test/java/com/example/transcoder/CreateJobTemplateTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.transcoder;\n+\n+import static junit.framework.TestCase.assertNotNull;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import com.google.api.client.googleapis.json.GoogleJsonResponseException;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class CreateJobTemplateTest {\n+\n+  private static final String LOCATION = \"us-central1\";\n+  private static final String TEMPLATE_ID = \"my-job-template\";\n+  private static String PROJECT_ID;\n+  private static String PROJECT_NUMBER;\n+  private static String TEMPLATE_NAME;\n+  private final PrintStream originalOut = System.out;\n+  private ByteArrayOutputStream bout;\n+\n+  private static String requireEnvVar(String varName) {\n+    String varValue = System.getenv(varName);\n+    assertNotNull(\n+        String.format(\"Environment variable '%s' is required to perform these tests.\", varName));\n+    return varValue;\n+  }\n+\n+  @BeforeClass\n+  public static void checkRequirements() {\n+    requireEnvVar(\"GOOGLE_APPLICATION_CREDENTIALS\");\n+    PROJECT_ID = requireEnvVar(\"GOOGLE_CLOUD_PROJECT\");\n+    PROJECT_NUMBER = requireEnvVar(\"GOOGLE_CLOUD_PROJECT_NUMBER\");\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    bout = new ByteArrayOutputStream();\n+    System.setOut(new PrintStream(bout));\n+\n+    bout = new ByteArrayOutputStream();\n+    System.setOut(new PrintStream(bout));\n+\n+    TEMPLATE_NAME =\n+        String.format(\n+            \"projects/%s/locations/%s/jobTemplates/%s\", PROJECT_NUMBER, LOCATION, TEMPLATE_ID);\n+    try {\n+      DeleteJobTemplate.deleteJobTemplate(PROJECT_ID, LOCATION, TEMPLATE_ID);\n+    } catch (GoogleJsonResponseException gjre) {\n+      // Handle error\n+    }\n+    bout.reset();\n+  }\n+\n+  @Test\n+  public void test_CreateJobTemplate() throws IOException {\n+    try {\n+      CreateJobTemplate.createJobTemplate(PROJECT_ID, LOCATION, TEMPLATE_ID);\n+    } catch (GoogleJsonResponseException gjre) {\n+      // Handle error\n+    }", "originalCommit": "1921482b034dda19c70459f3c955bdb9bbc55d0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0ODU2MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r525648560", "bodyText": "Removed try-catch", "author": "irataxy", "createdAt": "2020-11-18T02:09:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4NzAzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4NzA5OQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r525387099", "bodyText": "https://google.github.io/styleguide/javaguide.html#s6.2-caught-exceptions", "author": "lesv", "createdAt": "2020-11-17T18:22:48Z", "path": "media/transcoder/src/test/java/com/example/transcoder/CreateJobTemplateTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.transcoder;\n+\n+import static junit.framework.TestCase.assertNotNull;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import com.google.api.client.googleapis.json.GoogleJsonResponseException;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class CreateJobTemplateTest {\n+\n+  private static final String LOCATION = \"us-central1\";\n+  private static final String TEMPLATE_ID = \"my-job-template\";\n+  private static String PROJECT_ID;\n+  private static String PROJECT_NUMBER;\n+  private static String TEMPLATE_NAME;\n+  private final PrintStream originalOut = System.out;\n+  private ByteArrayOutputStream bout;\n+\n+  private static String requireEnvVar(String varName) {\n+    String varValue = System.getenv(varName);\n+    assertNotNull(\n+        String.format(\"Environment variable '%s' is required to perform these tests.\", varName));\n+    return varValue;\n+  }\n+\n+  @BeforeClass\n+  public static void checkRequirements() {\n+    requireEnvVar(\"GOOGLE_APPLICATION_CREDENTIALS\");\n+    PROJECT_ID = requireEnvVar(\"GOOGLE_CLOUD_PROJECT\");\n+    PROJECT_NUMBER = requireEnvVar(\"GOOGLE_CLOUD_PROJECT_NUMBER\");\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    bout = new ByteArrayOutputStream();\n+    System.setOut(new PrintStream(bout));\n+\n+    bout = new ByteArrayOutputStream();\n+    System.setOut(new PrintStream(bout));\n+\n+    TEMPLATE_NAME =\n+        String.format(\n+            \"projects/%s/locations/%s/jobTemplates/%s\", PROJECT_NUMBER, LOCATION, TEMPLATE_ID);\n+    try {\n+      DeleteJobTemplate.deleteJobTemplate(PROJECT_ID, LOCATION, TEMPLATE_ID);\n+    } catch (GoogleJsonResponseException gjre) {\n+      // Handle error\n+    }", "originalCommit": "1921482b034dda19c70459f3c955bdb9bbc55d0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0ODQyNA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r525648424", "bodyText": "Removed try-catch", "author": "irataxy", "createdAt": "2020-11-18T02:09:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4NzA5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4NzI1OQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r525387259", "bodyText": "https://google.github.io/styleguide/javaguide.html#s6.2-caught-exceptions", "author": "lesv", "createdAt": "2020-11-17T18:23:04Z", "path": "media/transcoder/src/test/java/com/example/transcoder/DeleteJobTemplateTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.transcoder;\n+\n+import static junit.framework.TestCase.assertNotNull;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import com.google.api.client.googleapis.json.GoogleJsonResponseException;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class DeleteJobTemplateTest {\n+\n+  private static final String LOCATION = \"us-central1\";\n+  private static final String TEMPLATE_ID = \"my-job-template\";\n+  private static String PROJECT_ID;\n+  private static String PROJECT_NUMBER;\n+  private final PrintStream originalOut = System.out;\n+  private ByteArrayOutputStream bout;\n+\n+  private static String requireEnvVar(String varName) {\n+    String varValue = System.getenv(varName);\n+    assertNotNull(\n+        String.format(\"Environment variable '%s' is required to perform these tests.\", varName));\n+    return varValue;\n+  }\n+\n+  @BeforeClass\n+  public static void checkRequirements() {\n+    requireEnvVar(\"GOOGLE_APPLICATION_CREDENTIALS\");\n+    PROJECT_ID = requireEnvVar(\"GOOGLE_CLOUD_PROJECT\");\n+    PROJECT_NUMBER = requireEnvVar(\"GOOGLE_CLOUD_PROJECT_NUMBER\");\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    bout = new ByteArrayOutputStream();\n+    System.setOut(new PrintStream(bout));\n+\n+    bout = new ByteArrayOutputStream();\n+    System.setOut(new PrintStream(bout));\n+\n+    try {\n+      DeleteJobTemplate.deleteJobTemplate(PROJECT_ID, LOCATION, TEMPLATE_ID);\n+    } catch (GoogleJsonResponseException gjre) {\n+      // Handle error\n+    }", "originalCommit": "1921482b034dda19c70459f3c955bdb9bbc55d0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0ODQwNw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r525648407", "bodyText": "Removed try-catch", "author": "irataxy", "createdAt": "2020-11-18T02:09:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4NzI1OQ=="}], "type": "inlineReview"}, {"oid": "1998439b35b5f24283017a38e69d32ccfb05c4d0", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/1998439b35b5f24283017a38e69d32ccfb05c4d0", "message": "Address feedback", "committedDate": "2020-11-18T02:06:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIzODIzMA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r526238230", "bodyText": "Please move just before like 24 <build> tag.", "author": "lesv", "createdAt": "2020-11-18T16:43:51Z", "path": "media/transcoder/pom.xml", "diffHunk": "@@ -0,0 +1,90 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Copyright 2020 Google LLC\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <groupId>com.example</groupId>\n+  <artifactId>transcoder</artifactId>\n+  <version>1.0-SNAPSHOT</version>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <configuration>\n+          <source>11</source>\n+          <target>11</target>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+  <packaging>jar</packaging>\n+  <parent>\n+    <groupId>com.google.cloud.samples</groupId>\n+    <artifactId>shared-configuration</artifactId>\n+    <version>1.0.21</version>\n+  </parent>\n+  <properties>\n+    <maven.compiler.target>1.8</maven.compiler.target>\n+    <maven.compiler.source>1.8</maven.compiler.source>\n+  </properties>", "originalCommit": "1998439b35b5f24283017a38e69d32ccfb05c4d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI0MjAwNg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r526242006", "bodyText": "Actually, this should be ok from what I can tell in run_tests.", "author": "lesv", "createdAt": "2020-11-18T16:48:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIzODIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI0NzI1NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r526247255", "bodyText": "Still fails.  Not sure why.", "author": "lesv", "createdAt": "2020-11-18T16:54:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIzODIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI1Mjk5NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r526252994", "bodyText": "@kurtisvg when I try to use grep -oP '(?<=<maven.compiler.target>).*?(?=</maven.compiler.target>)' pom.xml from .kokoro/tests/run_tests.sh on my Mac using either bash or zsh, it seems quite unhappy.\nusage: grep [-abcDEFGHhIiJLlmnOoqRSsUVvwxZ] [-A num] [-B num] [-C[num]]\n\t[-e pattern] [-f file] [--binary-files=value] [--color=when]\n\t[--context[=num]] [--directories=action] [--label] [--line-buffered]\n\t[--null] [pattern] [file ...]\n\nAny idea what the problem we are dealing with here?", "author": "lesv", "createdAt": "2020-11-18T17:02:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIzODIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI5MDU5Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r526290592", "bodyText": "Grep works fine in kokoro and thinks the sample is java8 compatible. It's not working because of those lines you mentioned above that tell it to use java11 instead. Remove the build section and it should work.\nPlease remember to add the comment to the parent pom as described in the Samples Style Guide as well.", "author": "kurtisvg", "createdAt": "2020-11-18T17:39:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIzODIzMA=="}], "type": "inlineReview"}, {"oid": "ed0534a9fa572170b067f8a58ca1d4131b1bb297", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/ed0534a9fa572170b067f8a58ca1d4131b1bb297", "message": "Add UUIDs to bucket and job template names for tests", "committedDate": "2020-11-18T16:54:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM0MTkyMw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r526341923", "bodyText": "Please remove this.", "author": "lesv", "createdAt": "2020-11-18T18:55:00Z", "path": "media/transcoder/pom.xml", "diffHunk": "@@ -0,0 +1,90 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Copyright 2020 Google LLC\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <groupId>com.example</groupId>\n+  <artifactId>transcoder</artifactId>\n+  <version>1.0-SNAPSHOT</version>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <configuration>\n+          <source>11</source>\n+          <target>11</target>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>", "originalCommit": "ed0534a9fa572170b067f8a58ca1d4131b1bb297", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM0MjgzMQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4238#discussion_r526342831", "bodyText": "Should have\n  <!--\n    The parent pom defines common style checks and testing strategies for our samples.\n    Removing or replacing it should not affect the execution of the samples in anyway.\n  -->", "author": "lesv", "createdAt": "2020-11-18T18:56:26Z", "path": "media/transcoder/pom.xml", "diffHunk": "@@ -0,0 +1,90 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Copyright 2020 Google LLC\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <groupId>com.example</groupId>\n+  <artifactId>transcoder</artifactId>\n+  <version>1.0-SNAPSHOT</version>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <configuration>\n+          <source>11</source>\n+          <target>11</target>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+  <packaging>jar</packaging>\n+  <parent>", "originalCommit": "ed0534a9fa572170b067f8a58ca1d4131b1bb297", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f3ed84c1b9a3f9610b35fecc2322b42246b048ff", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/f3ed84c1b9a3f9610b35fecc2322b42246b048ff", "message": "Update pom file", "committedDate": "2020-11-18T20:20:02Z", "type": "commit"}, {"oid": "c4b06b888358eb08026dc29143c0945f48805af1", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/c4b06b888358eb08026dc29143c0945f48805af1", "message": "Update pom file", "committedDate": "2020-11-18T22:22:50Z", "type": "commit"}]}