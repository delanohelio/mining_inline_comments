{"pr_number": 2630, "pr_title": "GCF: misc. idiomatic fixes", "pr_createdAt": "2020-04-10T23:25:34Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MjA0Nw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r406992047", "bodyText": "nit: This says \"fileWideComputation\", but it's really \"perStartupComputation\". It's not done once per file, it's done once per class initialization.", "author": "kurtisvg", "createdAt": "2020-04-11T00:25:02Z", "path": "functions/concepts/src/main/java/com/example/functions/concepts/LazyFields.java", "diffHunk": "@@ -30,20 +30,26 @@\n   // Always initialized (at cold-start)\n   // Warning: Class variables used in Servlet classes must be thread-safe,\n   // or else might introduce race conditions in your code.\n-  private static final int nonLazyGlobal = fileWideComputation();\n+  private static final int NON_LAZY_GLOBAL = fileWideComputation();", "originalCommit": "53a83cb8f2aa2019d9689c887d55634c829d017f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MzA4Nw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r406993087", "bodyText": "nit: I thought we had settled on logging this over wrapping in RuntimeException (@lesv FYI)", "author": "kurtisvg", "createdAt": "2020-04-11T00:32:58Z", "path": "functions/firebase/src/main/java/com/example/functions/firebase/FirebaseFirestoreReactive.java", "diffHunk": "@@ -70,7 +70,7 @@ public void accept(String json, Context context) throws RuntimeException {\n \n     LOGGER.info(String.format(\"Replacing value: %s --> %s\", currentValue, newValue));\n     try {\n-      firestore.document(affectedDoc).set(newFields, SetOptions.merge()).get();\n+      FIRESTORE.document(affectedDoc).set(newFields, SetOptions.merge()).get();\n     } catch (ExecutionException | InterruptedException e) {\n       throw new RuntimeException(e);", "originalCommit": "53a83cb8f2aa2019d9689c887d55634c829d017f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5NDA0OQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r406994049", "bodyText": "Will fix this more broadly.", "author": "ace-n", "createdAt": "2020-04-11T00:39:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MzA4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MzQ3Nw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r406993477", "bodyText": "This isn't static, or final. (nit: Also I almost always see it called just gson)", "author": "kurtisvg", "createdAt": "2020-04-11T00:35:29Z", "path": "functions/firebase/src/main/java/com/example/functions/firebase/FirebaseFirestoreReactive.java", "diffHunk": "@@ -33,15 +33,15 @@\n public class FirebaseFirestoreReactive implements RawBackgroundFunction {\n \n   // Use GSON (https://github.com/google/gson) to parse JSON content.\n-  private Gson gsonParser = new Gson();\n+  private Gson GSON_PARSER = new Gson();", "originalCommit": "85005251198b123d927dc93be7417b1bab1f6a70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5NDE3OQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r406994179", "bodyText": "Will fix this more broadly.", "author": "ace-n", "createdAt": "2020-04-11T00:40:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MzQ3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUzOTIxNg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407539216", "bodyText": "Consider using a PrintWriter, e.g.,\nPrintWriter writer = new PrintWriter(response.getWriter());\nwriter.println(...)", "author": "saturnism", "createdAt": "2020-04-13T15:29:20Z", "path": "functions/concepts/src/main/java/com/example/functions/concepts/FileSystem.java", "diffHunk": "@@ -34,9 +34,9 @@ public void service(HttpRequest request, HttpResponse response)\n     File currentDirectory = new File(\".\");\n     File[] files = currentDirectory.listFiles();\n     BufferedWriter writer = response.getWriter();", "originalCommit": "66b498aa14c96d184ffe6f84f774a203887f00ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY1NjI1OA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407656258", "bodyText": "response.getWriter() is stubbed in the tests, and expects a BufferedWriter (not a PrintWriter).\n(I tried using new BufferedWriter(printWriter), but those stubs didn't produce any output in the tests.)", "author": "ace-n", "createdAt": "2020-04-13T19:02:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUzOTIxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU0MTIyMw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407541223", "bodyText": "The common idiom is..\nprivate static class LazyGlobalHolder {\n  private LazyGlobalHolder() {} // remove the possibility to instantiate.\n  private static final Integer INSTANCE = ...;\n  private static Integer getInstance();\n}", "author": "saturnism", "createdAt": "2020-04-13T15:33:24Z", "path": "functions/concepts/src/main/java/com/example/functions/concepts/LazyFields.java", "diffHunk": "@@ -30,20 +30,28 @@\n   // Always initialized (at cold-start)\n   // Warning: Class variables used in Servlet classes must be thread-safe,\n   // or else might introduce race conditions in your code.\n-  private static final int nonLazyGlobal = fileWideComputation();\n+  private static final int NON_LAZY_GLOBAL = fileWideComputation();\n+\n   // Declared at cold-start, but only initialized if/when the function executes\n-  private static Integer lazyGlobal = null;\n+  // Uses the \"initialization-on-demand holder\" idiom\n+  // More information: https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom\n+  private static class LazyGlobalHolder {\n+    // This value is initialized only if (and when) the getLazyGlobal() function below is called\n+    private static final Integer LAZY_GLOBAL = functionSpecificComputation();\n+  }\n+\n+  private static Integer getLazyGlobal() {", "originalCommit": "66b498aa14c96d184ffe6f84f774a203887f00ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYzODQ2Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407638463", "bodyText": "Thanks - done.", "author": "ace-n", "createdAt": "2020-04-13T18:30:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU0MTIyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU0MTcxOA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407541718", "bodyText": "this should go into the LazyGlobalHolder class", "author": "saturnism", "createdAt": "2020-04-13T15:34:18Z", "path": "functions/concepts/src/main/java/com/example/functions/concepts/LazyFields.java", "diffHunk": "@@ -30,20 +30,28 @@\n   // Always initialized (at cold-start)\n   // Warning: Class variables used in Servlet classes must be thread-safe,\n   // or else might introduce race conditions in your code.\n-  private static final int nonLazyGlobal = fileWideComputation();\n+  private static final int NON_LAZY_GLOBAL = fileWideComputation();\n+\n   // Declared at cold-start, but only initialized if/when the function executes\n-  private static Integer lazyGlobal = null;\n+  // Uses the \"initialization-on-demand holder\" idiom\n+  // More information: https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom\n+  private static class LazyGlobalHolder {\n+    // This value is initialized only if (and when) the getLazyGlobal() function below is called\n+    private static final Integer LAZY_GLOBAL = functionSpecificComputation();\n+  }\n+\n+  private static Integer getLazyGlobal() {", "originalCommit": "66b498aa14c96d184ffe6f84f774a203887f00ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYzNTg3Nw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407635877", "bodyText": "Thanks - done.", "author": "ace-n", "createdAt": "2020-04-13T18:26:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU0MTcxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU0MTgzNw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407541837", "bodyText": "this should be LazyGlobalHolder.getInstance()", "author": "saturnism", "createdAt": "2020-04-13T15:34:33Z", "path": "functions/concepts/src/main/java/com/example/functions/concepts/LazyFields.java", "diffHunk": "@@ -30,20 +30,28 @@\n   // Always initialized (at cold-start)\n   // Warning: Class variables used in Servlet classes must be thread-safe,\n   // or else might introduce race conditions in your code.\n-  private static final int nonLazyGlobal = fileWideComputation();\n+  private static final int NON_LAZY_GLOBAL = fileWideComputation();\n+\n   // Declared at cold-start, but only initialized if/when the function executes\n-  private static Integer lazyGlobal = null;\n+  // Uses the \"initialization-on-demand holder\" idiom\n+  // More information: https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom\n+  private static class LazyGlobalHolder {\n+    // This value is initialized only if (and when) the getLazyGlobal() function below is called\n+    private static final Integer LAZY_GLOBAL = functionSpecificComputation();\n+  }\n+\n+  private static Integer getLazyGlobal() {\n+    return LazyGlobalHolder.LAZY_GLOBAL;\n+  }\n \n   @Override\n   public void service(HttpRequest request, HttpResponse response)\n       throws IOException {\n-    // This value is initialized only if (and when) the function is called\n-    if (lazyGlobal == null) {\n-      lazyGlobal = functionSpecificComputation();\n-    }\n+    Integer lazyGlobal = getLazyGlobal();", "originalCommit": "66b498aa14c96d184ffe6f84f774a203887f00ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYzNTkzMg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407635932", "bodyText": "Thanks - done.", "author": "ace-n", "createdAt": "2020-04-13T18:26:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU0MTgzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU0Mzg3Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407543872", "bodyText": "what is this used for? in generally we should have no dependency on the servlet api", "author": "saturnism", "createdAt": "2020-04-13T15:38:28Z", "path": "functions/http/pom.xml", "diffHunk": "@@ -61,11 +61,15 @@\n       <artifactId>gson</artifactId>\n       <version>2.8.6</version>\n     </dependency>\n+    <dependency>\n+      <groupId>javax.servlet</groupId>\n+      <artifactId>javax.servlet-api</artifactId>\n+      <version>4.0.1</version>", "originalCommit": "66b498aa14c96d184ffe6f84f774a203887f00ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2MTExMQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407561111", "bodyText": "And it shouldn't be 4.* anyway, unless you are using a 4.* container.", "author": "lesv", "createdAt": "2020-04-13T16:10:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU0Mzg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5MjU4Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407592582", "bodyText": "preferably we don't need this at all. :)", "author": "saturnism", "createdAt": "2020-04-13T17:08:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU0Mzg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYxODYwNg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407618606", "bodyText": "We don't. It's been deleted.", "author": "ace-n", "createdAt": "2020-04-13T17:54:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU0Mzg3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU0NTgwMA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407545800", "bodyText": "good catch!", "author": "saturnism", "createdAt": "2020-04-13T15:42:13Z", "path": "functions/slack/src/main/java/com/example/functions/slack/SlackSlashCommand.java", "diffHunk": "@@ -167,14 +162,14 @@ JsonObject searchKnowledgeGraph(String query) throws IOException {\n   public void service(HttpRequest request, HttpResponse response) throws IOException {\n \n     // Validate request\n-    if (request.getMethod() != \"POST\") {\n+    if (!\"POST\".equals(request.getMethod())) {", "originalCommit": "66b498aa14c96d184ffe6f84f774a203887f00ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYxODc1OQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407618759", "bodyText": "spotbugs \ud83d\ude42", "author": "ace-n", "createdAt": "2020-04-13T17:55:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU0NTgwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NDc4MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407594780", "bodyText": "Can you be more specific?\nIs there a form of mitigation?\nShould you even be catching this?  (rather than providing a warning it might happen and let it propagate)", "author": "lesv", "createdAt": "2020-04-13T17:12:07Z", "path": "functions/imagemagick/src/main/java/com/example/functions/imagemagick/ImageMagick.java", "diffHunk": "@@ -86,7 +92,7 @@ public void accept(GcsEvent gcsEvent, Context context) {\n           LOGGER.info(String.format(\"Detected %s as OK.\", gcsEvent.getName()));\n         }\n       }\n-    } catch (Exception e) {\n+    } catch (IOException e) {\n       LOGGER.info(String.format(\"Error with Vision API: %s\", e.getMessage()));\n     }", "originalCommit": "66b498aa14c96d184ffe6f84f774a203887f00ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMjU1Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407622552", "bodyText": "Switched to a LOGGER.log() format that allows printing the entire exception.\n(\"catching this and letting it propagate\" is probably the right answer, but will not compile without a cast to RuntimeException due to this issue until the release is updated)", "author": "ace-n", "createdAt": "2020-04-13T18:01:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NDc4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NjAwMw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407596003", "bodyText": "This isn't needed and actually makes things difficult for us.", "author": "lesv", "createdAt": "2020-04-13T17:14:22Z", "path": "functions/pom.xml", "diffHunk": "@@ -0,0 +1,49 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "originalCommit": "66b498aa14c96d184ffe6f84f774a203887f00ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5OTMyNA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407599324", "bodyText": "i would keep it. it's really standard.", "author": "saturnism", "createdAt": "2020-04-13T17:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NjAwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYwNjMyNA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407606324", "bodyText": "As @kurtisvg mentioned in the doc, we used to do this everywhere, users got confused and it created problems.  Getting rid of it increased CSAT.", "author": "lesv", "createdAt": "2020-04-13T17:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NjAwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYwNjc3MQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407606771", "bodyText": "Note - I agree that many users use this and it is standard, but for many in our target audience this is very difficult for them to use.", "author": "lesv", "createdAt": "2020-04-13T17:33:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NjAwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyOTYxMA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407629610", "bodyText": "Removed from this + child POMs.", "author": "ace-n", "createdAt": "2020-04-13T18:14:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NjAwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc4OTA2OA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407789068", "bodyText": "it's not all that difficult. this is standard, and mostly autogenerated. xml presents issues w/o this.", "author": "saturnism", "createdAt": "2020-04-14T00:06:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NjAwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5MTE4NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407791184", "bodyText": "i think... this comment was in the context of the <?xml version=\"1.0\" encoding=\"UTF-8\"?> line, which was then removed from the poms.\nhttps://github.com/GoogleCloudPlatform/java-docs-samples/blob/9be4e4d0de95f74a5b237d6de498cb579fc3f762/functions/imagemagick/pom.xml\nto be clear, my comment was to make sure we don't remove the xml header, since it's very standard.", "author": "saturnism", "createdAt": "2020-04-14T00:13:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NjAwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NjIwNA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407596204", "bodyText": "Should also be in README's.", "author": "lesv", "createdAt": "2020-04-13T17:14:44Z", "path": "functions/slack/pom.xml", "diffHunk": "@@ -155,6 +154,20 @@\n \n   <build>\n     <plugins>\n+      <plugin>\n+        <!--\n+          Google Cloud Functions Framework Maven plugin\n+\n+          This plugin allows you to run Cloud Functions Java code\n+          locally. Use the following terminal command to run a\n+          given function locally:\n+\n+          mvn function:run -Drun.functionTarget=your.package.yourFunction", "originalCommit": "66b498aa14c96d184ffe6f84f774a203887f00ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYzNTA2NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407635065", "bodyText": "Added to parent-level README.\n(There are no per-sample \"child\" READMEs - happy to discuss if that's something you think would be useful.)", "author": "ace-n", "createdAt": "2020-04-13T18:24:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NjIwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4OTYzNg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407689636", "bodyText": "N.B: wrong commit name, should be [comments] use proper IDOH pattern", "author": "ace-n", "createdAt": "2020-04-13T20:06:30Z", "path": "functions/concepts/src/main/java/com/example/functions/concepts/LazyFields.java", "diffHunk": "@@ -36,18 +36,21 @@\n   // Uses the \"initialization-on-demand holder\" idiom\n   // More information: https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom\n   private static class LazyGlobalHolder {\n+    // Making the default constructor private prohibits instantiation of this class", "originalCommit": "34e4dd76dab81f2302f4691698acb5b3f1678af7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc3MTk5Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407771992", "bodyText": "@ace-n  I supper appreciate you taking the time to comment these well. These are great.", "author": "kurtisvg", "createdAt": "2020-04-13T23:13:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4OTYzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcxMDUwMg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407710502", "bodyText": "we typically don't need ending newline for log messages.", "author": "saturnism", "createdAt": "2020-04-13T20:45:57Z", "path": "functions/imagemagick/src/main/java/com/example/functions/imagemagick/ImageMagick.java", "diffHunk": "@@ -74,7 +81,7 @@ public void accept(GcsEvent gcsEvent, Context context) {\n       List<AnnotateImageResponse> responses = response.getResponsesList();\n       for (AnnotateImageResponse res : responses) {\n         if (res.hasError()) {\n-          LOGGER.info(String.format(\"Error: %s\\n\", res.getError().getMessage()));\n+          LOGGER.info(String.format(\"Error: %s%n\", res.getError().getMessage()));", "originalCommit": "8dead9fc0677f3b788963f7df1ee173988f31e1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyNjY5Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407726696", "bodyText": "+1", "author": "lesv", "createdAt": "2020-04-13T21:17:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcxMDUwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyNzk0OQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407727949", "bodyText": "Done.", "author": "ace-n", "createdAt": "2020-04-13T21:19:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcxMDUwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcxMDk3NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407710974", "bodyText": "nice use of optional!", "author": "saturnism", "createdAt": "2020-04-13T20:46:51Z", "path": "functions/helloworld/src/main/java/com/example/functions/helloworld/HelloHttp.java", "diffHunk": "@@ -32,21 +32,18 @@\n public class HelloHttp implements HttpFunction {\n   private static final Logger LOGGER = Logger.getLogger(HelloHttp.class.getName());\n \n-  private Gson gsonParser = new Gson();\n+  private static final Gson gson = new Gson();\n \n   @Override\n   public void service(HttpRequest request, HttpResponse response)\n       throws IOException {\n-    String name = \"world\";\n-\n     // Check URL parameters for \"name\" field\n-    if (request.getFirstQueryParameter(\"name\").isPresent()) {\n-      name = request.getFirstQueryParameter(\"name\").get();\n-    }\n+    // \"world\" is the default value\n+    String name = request.getFirstQueryParameter(\"name\").orElse(\"world\");", "originalCommit": "8dead9fc0677f3b788963f7df1ee173988f31e1d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcxMjc4OQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407712789", "bodyText": "maybe track for a future issue. getContentType returns an optional, so contentType may not be present.\nrequest.getContentType().ifPresent(contentType -> {\n});\nor\nString contentType = request.getContentType().orElseThrow(() -> new RuntimeException(\"content type not specified\"));", "author": "saturnism", "createdAt": "2020-04-13T20:50:08Z", "path": "functions/http/src/main/java/com/example/functions/http/ParseContentType.java", "diffHunk": "@@ -26,44 +26,52 @@\n import java.io.BufferedWriter;\n import java.io.IOException;\n import java.net.HttpURLConnection;\n+import java.nio.charset.StandardCharsets;\n import java.util.Base64;\n+import java.util.Optional;\n \n public class ParseContentType implements HttpFunction {\n \n   // Use GSON (https://github.com/google/gson) to parse JSON content.\n-  private Gson gsonParser = new Gson();\n+  private static final Gson gson = new Gson();\n \n   // Responds to an HTTP request using data from the request body parsed according to the\n   // \"content-type\" header.\n   @Override\n   public void service(HttpRequest request, HttpResponse response)\n       throws IOException {\n-    String name = null;\n+    String name;\n     String contentType = request.getContentType().get();", "originalCommit": "8dead9fc0677f3b788963f7df1ee173988f31e1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyMTUxNA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407721514", "bodyText": "Good catch - will refactor.\n(Aside: it looks like Content-Type values are recommended but not required, at least in reponses. So @eamonnmcmanus marking this parameter optional should be fine.)", "author": "ace-n", "createdAt": "2020-04-13T21:06:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcxMjc4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczMDQzMg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407730432", "bodyText": "FYI: specified a default value instead, and included a comment as to why. (null breaks the switch...case, and get on a missing Optional throws a NoSuchElementException)\n// Default values avoid null issues (with switch/case) and exceptions from get() (optionals)\nString contentType = request.getContentType().orElse(\"\");\nLMK if this is too much \"black magic\" to include in a sample.", "author": "ace-n", "createdAt": "2020-04-13T21:24:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcxMjc4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyODgxNg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407728816", "bodyText": "Why do we have this?  How does it help users?", "author": "lesv", "createdAt": "2020-04-13T21:21:24Z", "path": "functions/pom.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<!--\n+  Copyright 2020 Google LLC\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>com.example.cloud.functions</groupId>\n+  <artifactId>functions-snippets</artifactId>\n+  <version>1.0.0-SNAPSHOT</version>\n+\n+  <properties>\n+    <maven.compiler.target>11</maven.compiler.target>\n+    <maven.compiler.source>11</maven.compiler.source>\n+    <kokoro.skipTests>true</kokoro.skipTests> <!-- test children POMs instead -->\n+  </properties>\n+\n+  <!--\n+    List subfolders as separate modules, to enable top-level test runs\n+    This POM should *not* be inherited by the per-function POMs\n+  -->\n+  <packaging>pom</packaging>\n+  <modules>\n+    <module>helloworld</module>\n+    <module>http</module>\n+    <module>imagemagick</module>\n+    <module>slack</module>\n+    <module>concepts</module>\n+    <module>logging</module>\n+    <module>firebase</module>\n+    <module>ocr</module>\n+  </modules>\n+</project>", "originalCommit": "8dead9fc0677f3b788963f7df1ee173988f31e1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczMDg1Nw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407730857", "bodyText": "this helps user to build and test all functions in one shot. it also allows user to open up functions in the IDE in one shot if i need to.  like i mentioned separately, each sub directory/module is still completely independent.\nthe parent in the children pom references a published pom, i feel it's good as long as a comment on it's not needed for user.", "author": "saturnism", "createdAt": "2020-04-13T21:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyODgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczMTA3NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407731075", "bodyText": "@saturnism and I discussed this on Friday - this parent POM lets us run mvn builds across all the samples to verify that all of them work as intended.\n(Otherwise, we'd have to run each one individually.)", "author": "ace-n", "createdAt": "2020-04-13T21:26:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyODgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczMTM1Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407731352", "bodyText": "also discussed in the doc and the call, this causes no harm for the samples. what gets problematic is if the children pom/module refers back to here for configuration, in which case, the children modules can't be built indepedently.", "author": "saturnism", "createdAt": "2020-04-13T21:26:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyODgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc2OTMxOQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407769319", "bodyText": "I'll defer to @lesv for the final decision, but I'm still -1 on this (mostly because I don't like snowflakes).\nMy concerns are largely mitigated since Ace has already adapted the script + left helpful comments in it and Ray made a good point about it being a one way configuration. However, I don't think we really expect users to run all the tests in a single shot, which means this is only really for us. Our CI doesn't use this, which means there is nothing really stopping someone new adding a sample and not putting it here. So I guess I'd still prefer not to have it, but I'll leave it up to @lesv.", "author": "kurtisvg", "createdAt": "2020-04-13T23:04:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyODgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc3MTQ3Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407771472", "bodyText": "Why not do what we do and just put a script that looks for pom.xml files and builds them.  For example, see this one.", "author": "lesv", "createdAt": "2020-04-13T23:11:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyODgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc3NDEyMw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407774123", "bodyText": "I don't really prefer we commit a new script either - parent pom for personal convince makes sense, I just would prefer we didn't commit it in the repo.", "author": "kurtisvg", "createdAt": "2020-04-13T23:19:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyODgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5MTg0OQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407791849", "bodyText": "pls send data on the csat comment. the top level pom.xml doesn't need to be included in the doc.  i'm curious to see where the confusions were and whether it was because of other issues such as children pom inheriting this, which causes build failures. that in itself will be very frustrating.", "author": "saturnism", "createdAt": "2020-04-14T00:15:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyODgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNjA0MQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407806041", "bodyText": "It was over 18m ago.", "author": "lesv", "createdAt": "2020-04-14T01:05:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyODgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0OTc4OA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407849788", "bodyText": "BTW - it's possible to do this in bash, but it's not exactly the most straightforward thing (mainly because of array-vs-string gotchas):\nfind */pom.xml | xargs -I {} echo $(pwd)/{} | xargs -I {} dirname {} | xargs -I {} sh -c \"cd {} && mvn clean verify\"\n\nKurtis / Les - given that we wouldn't expect customers/contributors to figure the above bash out, would you be open to keeping this parent POM if we added a comment to it like this?\nThis pom.xml file is kept for testing/Maven compatibility purposes only.\n\nPlease DO NOT add dependencies and/or common settings here. The child folders inherit from our `shared-configuration` stored on GitHub instead of this file; cross-POM changes should be added there.", "author": "ace-n", "createdAt": "2020-04-14T03:48:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyODgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4MDY0Nw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r408180647", "bodyText": "FWIW I think this is simpler:\nfor pom in $(find * -name pom.xml); do (cd $(dirname $pom) && mvn clean verify); done", "author": "eamonnmcmanus", "createdAt": "2020-04-14T14:28:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyODgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM2MTM1Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r408361352", "bodyText": "@ace-n The problem is we don't expect the engineers who follow / maintain to continue to maintain this.  We used to do it.  We stopped because it got overwhelming as the # of samples increased.", "author": "lesv", "createdAt": "2020-04-14T18:52:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyODgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0ODE0NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r408448144", "bodyText": "Les, thanks for clarifying.\nSince the modules are explicitly specified in this POM, I'm willing to drop this in favor of a programmatic (e.g. bash) solution.", "author": "ace-n", "createdAt": "2020-04-14T21:31:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyODgxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc2OTk3NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407769975", "bodyText": "I don't think you want to remove this.\n@lesv had a comment on a line like this, but I think it was RE: Parent pom and not RE:xml header.", "author": "kurtisvg", "createdAt": "2020-04-13T23:06:50Z", "path": "functions/concepts/pom.xml", "diffHunk": "@@ -1,5 +1,3 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "originalCommit": "9be4e4d0de95f74a5b237d6de498cb579fc3f762", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc4OTMzNw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407789337", "bodyText": "See #2630 (comment)\ni'd say - let's please not remove standard stuff! it's unnecessarily extra work. every pom.xml pretty much has this.", "author": "saturnism", "createdAt": "2020-04-14T00:07:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc2OTk3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNjMzMw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407806333", "bodyText": "We want the pom.xml file removed, not the line.", "author": "lesv", "createdAt": "2020-04-14T01:06:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc2OTk3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyOTc3NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2630#discussion_r407829774", "bodyText": "Got it - reverted this change for all POMs.", "author": "ace-n", "createdAt": "2020-04-14T02:32:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc2OTk3NQ=="}], "type": "inlineReview"}, {"oid": "26ed7a574cc83ab9b8f2d01ea6e05f7810ac29dc", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/26ed7a574cc83ab9b8f2d01ea6e05f7810ac29dc", "message": "[comments 2] add xml lines back to POMs", "committedDate": "2020-04-14T02:32:07Z", "type": "forcePushed"}, {"oid": "59e37e63eef9bac2365572f53808580c306bf634", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/59e37e63eef9bac2365572f53808580c306bf634", "message": "Remove snippets directory", "committedDate": "2020-04-14T21:31:45Z", "type": "commit"}, {"oid": "67e1bfffc225a6a4d6cca832c2ab63e8c2e68f5d", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/67e1bfffc225a6a4d6cca832c2ab63e8c2e68f5d", "message": "Use CONSTANT_CASE for all p-s-f vars", "committedDate": "2020-04-14T21:31:45Z", "type": "commit"}, {"oid": "7e2cefe1b3792ffb5955aec0771fb3ace0649cdf", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/7e2cefe1b3792ffb5955aec0771fb3ace0649cdf", "message": "Remove extraneous <type> param", "committedDate": "2020-04-14T21:31:45Z", "type": "commit"}, {"oid": "ba4c41fdf3fc012d5bb3c8d8bbf9ff71b558623c", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/ba4c41fdf3fc012d5bb3c8d8bbf9ff71b558623c", "message": "Add GCF maven plugin to all pom's", "committedDate": "2020-04-14T21:31:45Z", "type": "commit"}, {"oid": "7e83d8b91126978b1e2091bdeeff5d991ee7c79d", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/7e83d8b91126978b1e2091bdeeff5d991ee7c79d", "message": "Use IODH pattern", "committedDate": "2020-04-14T21:31:45Z", "type": "commit"}, {"oid": "86301e1aa30caac696a91fe9240f98084d6c2785", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/86301e1aa30caac696a91fe9240f98084d6c2785", "message": "Fix test failures", "committedDate": "2020-04-14T21:31:45Z", "type": "commit"}, {"oid": "ecb4d312b75dae1fb57c72dca20f72d12e87f796", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/ecb4d312b75dae1fb57c72dca20f72d12e87f796", "message": "Add top-level pom for testing", "committedDate": "2020-04-14T21:31:45Z", "type": "commit"}, {"oid": "5ad9651d4f35d085dc040871209086c938407bad", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/5ad9651d4f35d085dc040871209086c938407bad", "message": "Fix lint errors raised by top-level POM", "committedDate": "2020-04-14T21:31:45Z", "type": "commit"}, {"oid": "43a70aa6048e698dba770a8be5b5866988f659b7", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/43a70aa6048e698dba770a8be5b5866988f659b7", "message": "[spotbugs] helloworld: swap if-else for get().orElse()", "committedDate": "2020-04-14T21:31:45Z", "type": "commit"}, {"oid": "460fd7ca9291ba4092aa84433a767d48b5a6aa27", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/460fd7ca9291ba4092aa84433a767d48b5a6aa27", "message": "[spotbugs] parseContentType: if-else --> switch-case", "committedDate": "2020-04-14T21:31:45Z", "type": "commit"}, {"oid": "e0e20947e412e475cd9e91f3ef1beabde7427f02", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/e0e20947e412e475cd9e91f3ef1beabde7427f02", "message": "[spotbugs] put back strangely-missing line in imagemagick sample", "committedDate": "2020-04-14T21:31:45Z", "type": "commit"}, {"oid": "d3dfca3769bbb147374ad6e867fa676838ebbf18", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/d3dfca3769bbb147374ad6e867fa676838ebbf18", "message": "[spotbugs] misc imagemagick fixes", "committedDate": "2020-04-14T21:31:45Z", "type": "commit"}, {"oid": "57c0370cab5330db2bf6a7a20dc3c3fb9220f99d", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/57c0370cab5330db2bf6a7a20dc3c3fb9220f99d", "message": "rename InfiniteRetryPubsub to RetryTimeout + fix spotbugs errors", "committedDate": "2020-04-14T21:31:45Z", "type": "commit"}, {"oid": "680f71b1b0b86a970b89ea23e0a1a33a8e7a74a8", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/680f71b1b0b86a970b89ea23e0a1a33a8e7a74a8", "message": "[spotbugs] fix slack errors", "committedDate": "2020-04-14T21:31:45Z", "type": "commit"}, {"oid": "3fe7830559834a6b81ae2a80b3b061aea0a82400", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/3fe7830559834a6b81ae2a80b3b061aea0a82400", "message": "[spotbugs] fix minor errors in logging", "committedDate": "2020-04-14T21:31:45Z", "type": "commit"}, {"oid": "3810a68bd4cef48a9a287502bc7fe82207b05c04", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/3810a68bd4cef48a9a287502bc7fe82207b05c04", "message": "[spotbugs] firebase misc fixes", "committedDate": "2020-04-14T21:31:45Z", "type": "commit"}, {"oid": "f61a5689fe367d9d04543bf81225ad5046aca478", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/f61a5689fe367d9d04543bf81225ad5046aca478", "message": "[spotbugs] ocr misc fixes", "committedDate": "2020-04-14T21:31:45Z", "type": "commit"}, {"oid": "aa88153cf2ec45830889429f5b4176b9e8b989a1", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/aa88153cf2ec45830889429f5b4176b9e8b989a1", "message": "Make gson declaration consistent + remove extra env-var mocking", "committedDate": "2020-04-14T21:31:45Z", "type": "commit"}, {"oid": "c6ddd76cb7c8da62dfea609f73f1703c9dbb5e4e", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/c6ddd76cb7c8da62dfea609f73f1703c9dbb5e4e", "message": "[spotbugs] fix http bugs + checkstyle", "committedDate": "2020-04-14T21:31:45Z", "type": "commit"}, {"oid": "1a0d44e33d5a1eea089d48c93c47ff8d72d56e44", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/1a0d44e33d5a1eea089d48c93c47ff8d72d56e44", "message": "Disable parent pom testing, take 1: remove shared config", "committedDate": "2020-04-14T21:31:46Z", "type": "commit"}, {"oid": "27269e37c4dfd807c76a28b497072bed639be65d", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/27269e37c4dfd807c76a28b497072bed639be65d", "message": "Disable tests, take 2: add kokoro.skipTests POM property", "committedDate": "2020-04-14T21:31:46Z", "type": "commit"}, {"oid": "90e532cc9624c58908cab2f40457aa06f7c07e7a", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/90e532cc9624c58908cab2f40457aa06f7c07e7a", "message": "Make eventpojos fields private", "committedDate": "2020-04-14T21:31:46Z", "type": "commit"}, {"oid": "17d99f2739abeadd837b8e669d9c2ad05f4c2775", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/17d99f2739abeadd837b8e669d9c2ad05f4c2775", "message": "[comments] http: remove excess deps", "committedDate": "2020-04-14T21:31:46Z", "type": "commit"}, {"oid": "c67915fbce35fd5781b62b95fc19de08dd656e31", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/c67915fbce35fd5781b62b95fc19de08dd656e31", "message": "[comments] Remove xml tag from POMs", "committedDate": "2020-04-14T21:31:46Z", "type": "commit"}, {"oid": "3dd530d1f472b8eca588ee7215459cd266303790", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/3dd530d1f472b8eca588ee7215459cd266303790", "message": "[comments] update README", "committedDate": "2020-04-14T21:31:46Z", "type": "commit"}, {"oid": "9fb00874f9e7f96066d40c80e5fe300a7937b4f1", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/9fb00874f9e7f96066d40c80e5fe300a7937b4f1", "message": "[comments] update README", "committedDate": "2020-04-14T21:31:46Z", "type": "commit"}, {"oid": "72be82c11582c2cf0cb41bf4644ad5b13d2cae4e", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/72be82c11582c2cf0cb41bf4644ad5b13d2cae4e", "message": "[comments] use more verbose logging for exceptions", "committedDate": "2020-04-14T21:31:46Z", "type": "commit"}, {"oid": "070d798c0f6857dd3114e5dfea90ac91cedeb6ca", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/070d798c0f6857dd3114e5dfea90ac91cedeb6ca", "message": "Address Ray's comments", "committedDate": "2020-04-14T21:31:46Z", "type": "commit"}, {"oid": "9471b20d1c4e5b15cdd84b31f796acbe23fb5fe8", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/9471b20d1c4e5b15cdd84b31f796acbe23fb5fe8", "message": "[comments 2] add xml lines back to POMs", "committedDate": "2020-04-14T21:31:46Z", "type": "commit"}, {"oid": "87a65b6f40d954c0381909ce759aa8c34cf377cd", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/87a65b6f40d954c0381909ce759aa8c34cf377cd", "message": "Remove parent pom + add bash cmd to run all tests", "committedDate": "2020-04-14T21:31:46Z", "type": "commit"}, {"oid": "87a65b6f40d954c0381909ce759aa8c34cf377cd", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/87a65b6f40d954c0381909ce759aa8c34cf377cd", "message": "Remove parent pom + add bash cmd to run all tests", "committedDate": "2020-04-14T21:31:46Z", "type": "forcePushed"}]}