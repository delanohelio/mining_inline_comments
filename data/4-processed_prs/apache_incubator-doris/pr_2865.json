{"pr_number": 2865, "pr_title": "[Doris on ES] Support escape character", "pr_createdAt": "2020-02-09T03:53:35Z", "pr_url": "https://github.com/apache/incubator-doris/pull/2865", "timeline": [{"oid": "0baf8f892bef2d023e087e6c618d5fd0447fdeee", "url": "https://github.com/apache/incubator-doris/commit/0baf8f892bef2d023e087e6c618d5fd0447fdeee", "message": "support escape character", "committedDate": "2020-02-09T03:46:12Z", "type": "commit"}, {"oid": "32206b615d66a5b1ea1e4a4df4cff4784e4a56c0", "url": "https://github.com/apache/incubator-doris/commit/32206b615d66a5b1ea1e4a4df4cff4784e4a56c0", "message": "add comments", "committedDate": "2020-02-09T03:46:12Z", "type": "commit"}, {"oid": "5097d8c1a5b750aac2fba5147f909d2eabc49461", "url": "https://github.com/apache/incubator-doris/commit/5097d8c1a5b750aac2fba5147f909d2eabc49461", "message": "fix core when es_scanner_node exit", "committedDate": "2020-02-09T03:49:10Z", "type": "commit"}, {"oid": "879af5c3ebc1eb04f0f14b8f27a141afbc3535d7", "url": "https://github.com/apache/incubator-doris/commit/879af5c3ebc1eb04f0f14b8f27a141afbc3535d7", "message": "add comments", "committedDate": "2020-02-09T03:49:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2NDQyMw==", "url": "https://github.com/apache/incubator-doris/pull/2865#discussion_r376764423", "bodyText": "How about abc_123 ?", "author": "wuyunfeng", "createdAt": "2020-02-09T08:23:07Z", "path": "be/src/exec/es/es_query_builder.cpp", "diffHunk": "@@ -110,8 +110,17 @@ void WildCardQueryBuilder::to_json(rapidjson::Document* document, rapidjson::Val\n }\n WildCardQueryBuilder::WildCardQueryBuilder(const ExtLikePredicate& like_predicate) : _field(like_predicate.col.name) {\n     _like_value = like_predicate.value.to_string();\n-    std::replace(_like_value.begin(), _like_value.end(), '_', '?');\n-    std::replace(_like_value.begin(), _like_value.end(), '%', '*');\n+    // example of translation :\n+    //      abc\\_123 ===> abc?123", "originalCommit": "879af5c3ebc1eb04f0f14b8f27a141afbc3535d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2NDQ3OA==", "url": "https://github.com/apache/incubator-doris/pull/2865#discussion_r376764478", "bodyText": "This comment seems not related with this PR?", "author": "wuyunfeng", "createdAt": "2020-02-09T08:24:02Z", "path": "be/src/exec/es_http_scan_node.cpp", "diffHunk": "@@ -166,6 +166,11 @@ Status EsHttpScanNode::start_scanners() {\n }\n \n Status EsHttpScanNode::collect_scanners_status() {\n+    // NOTE. if open() was called, but set_range() was NOT called for some reason.", "originalCommit": "879af5c3ebc1eb04f0f14b8f27a141afbc3535d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg5NjQ1NA==", "url": "https://github.com/apache/incubator-doris/pull/2865#discussion_r376896454", "bodyText": "Yes. it's last pr i commited. it was committed failed at that time", "author": "blackfox1983", "createdAt": "2020-02-10T07:15:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2NDQ3OA=="}], "type": "inlineReview"}, {"oid": "cfbb92135f8af5235e902a4342afbb0e2670861d", "url": "https://github.com/apache/incubator-doris/commit/cfbb92135f8af5235e902a4342afbb0e2670861d", "message": "support escape", "committedDate": "2020-02-10T07:20:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3MTU0MA==", "url": "https://github.com/apache/incubator-doris/pull/2865#discussion_r378071540", "bodyText": "Can we remove #include <boost/algorithm/string/replace.hpp> in this file?", "author": "wuyunfeng", "createdAt": "2020-02-12T07:08:29Z", "path": "be/src/exec/es/es_query_builder.cpp", "diffHunk": "@@ -110,8 +110,19 @@ void WildCardQueryBuilder::to_json(rapidjson::Document* document, rapidjson::Val\n }\n WildCardQueryBuilder::WildCardQueryBuilder(const ExtLikePredicate& like_predicate) : _field(like_predicate.col.name) {\n     _like_value = like_predicate.value.to_string();\n-    std::replace(_like_value.begin(), _like_value.end(), '_', '?');\n-    std::replace(_like_value.begin(), _like_value.end(), '%', '*');\n+    // example of translation :\n+    //      abc_123  ===> abc?123\n+    //      abc%ykz  ===> abc*123\n+    //      abc\\\\_123 ===> abc\\\\_123\n+    //      abc\\\\%123 ===> abc\\\\%123\n+    // NOTE. user must input sql like 'abc\\\\_123' or 'abc\\\\%ykz'\n+    for (int i = 0; i< _like_value.size(); i++) {", "originalCommit": "cfbb92135f8af5235e902a4342afbb0e2670861d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}