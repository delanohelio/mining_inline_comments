{"pr_number": 3806, "pr_title": "Remove order by for subquery in set opertion clause", "pr_createdAt": "2020-06-09T07:26:38Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3806", "timeline": [{"oid": "85bc7f77ce545d5eab06e9bf596334e58f7e00ca", "url": "https://github.com/apache/incubator-doris/commit/85bc7f77ce545d5eab06e9bf596334e58f7e00ca", "message": "xx", "committedDate": "2020-06-10T11:28:30Z", "type": "forcePushed"}, {"oid": "5377c24f3fff7c1f79fe56fd211e15cde59bb694", "url": "https://github.com/apache/incubator-doris/commit/5377c24f3fff7c1f79fe56fd211e15cde59bb694", "message": "xx", "committedDate": "2020-06-16T04:08:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIwOTkyNg==", "url": "https://github.com/apache/incubator-doris/pull/3806#discussion_r442209926", "bodyText": "Update the document for this new variables.", "author": "morningman", "createdAt": "2020-06-18T13:04:55Z", "path": "fe/src/main/java/org/apache/doris/qe/SessionVariable.java", "diffHunk": "@@ -251,6 +253,9 @@\n     private int maxScanKeyNum = -1;\n     @VariableMgr.VarAttr(name = MAX_PUSHDOWN_CONDITIONS_PER_COLUMN)\n     private int maxPushdownConditionsPerColumn = -1;\n+    // TODO(Yangzhengguo) set this default value to true if we support spill data top disk\n+    @VariableMgr.VarAttr(name = ALLOW_IGNORE_ORDER_BY)\n+    private boolean allowIgnoreOrderBy = false;", "originalCommit": "5377c24f3fff7c1f79fe56fd211e15cde59bb694", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIwOTkzNA==", "url": "https://github.com/apache/incubator-doris/pull/3806#discussion_r442209934", "bodyText": "This strBuilder seems useless.", "author": "morningman", "createdAt": "2020-06-18T13:04:56Z", "path": "fe/src/main/java/org/apache/doris/analysis/QueryStmt.java", "diffHunk": "@@ -285,27 +285,29 @@ protected void createSortInfo(Analyzer analyzer) throws AnalysisException {\n         }\n \n         sortInfo = new SortInfo(orderingExprs, isAscOrder, nullsFirstParams);\n-        // order by w/o limit and offset in inline views, union operands and insert statements\n+        // order by w/o limit and offset in inline views, set operands and insert statements\n         // are ignored.\n-        // TODO chenhao, open this when we don't limit rows subquery returns by SortNode.\n-        /*if (!hasLimit() && !hasOffset() && !analyzer.isRootAnalyzer()) {\n-         *   evaluateOrderBy = false;\n-         *   // Return a warning that the order by was ignored.\n-         *   StringBuilder strBuilder = new StringBuilder();\n-         *   strBuilder.append(\"Ignoring ORDER BY clause without LIMIT or OFFSET: \");\n-         *   strBuilder.append(\"ORDER BY \");\n-         *   strBuilder.append(orderByElements.get(0).toSql());\n-         *   for (int i = 1; i < orderByElements.size(); ++i) {\n-         *       strBuilder.append(\", \").append(orderByElements.get(i).toSql());\n-         *   }\n-         *   strBuilder.append(\".\\nAn ORDER BY appearing in a view, subquery, union operand, \");\n-         *   strBuilder.append(\"or an insert/ctas statement has no effect on the query result \");\n-         *   strBuilder.append(\"unless a LIMIT and/or OFFSET is used in conjunction \");\n-         *   strBuilder.append(\"with the ORDER BY.\");\n-         * } else {\n-         */\n-        evaluateOrderBy = true;\n-        //}\n+        boolean allowIgnore = false;\n+        if (ConnectContext.get() != null && ConnectContext.get().getSessionVariable().isAllowIgnoreOrderBy()) {\n+            allowIgnore = true;\n+        }\n+        if (allowIgnore && !hasLimit() && !hasOffset() && !analyzer.isRootAnalyzer()) {\n+            evaluateOrderBy = false;\n+            // Return a warning that the order by was ignored.\n+            StringBuilder strBuilder = new StringBuilder();\n+            strBuilder.append(\"Ignoring ORDER BY clause without LIMIT or OFFSET: \");\n+            strBuilder.append(\"ORDER BY \");\n+            strBuilder.append(orderByElements.get(0).toSql());\n+            for (int i = 1; i < orderByElements.size(); ++i) {\n+                strBuilder.append(\", \").append(orderByElements.get(i).toSql());\n+            }\n+            strBuilder.append(\".\\nAn ORDER BY appearing in a view, subquery, union operand, \");\n+            strBuilder.append(\"or an insert/ctas statement has no effect on the query result \");\n+            strBuilder.append(\"unless a LIMIT and/or OFFSET is used in conjunction \");\n+            strBuilder.append(\"with the ORDER BY.\");", "originalCommit": "5377c24f3fff7c1f79fe56fd211e15cde59bb694", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU4OTM5MA==", "url": "https://github.com/apache/incubator-doris/pull/3806#discussion_r442589390", "bodyText": "strBuilder is mainly used in the for loop, and this code is consistent with impala, in case there is a need for merge mpala code in the future, it is also more convenient", "author": "yangzhg", "createdAt": "2020-06-19T01:51:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIwOTkzNA=="}], "type": "inlineReview"}, {"oid": "d0c6e9d79b2a59ac217e48ae3113672966e9ef0d", "url": "https://github.com/apache/incubator-doris/commit/d0c6e9d79b2a59ac217e48ae3113672966e9ef0d", "message": "add docs", "committedDate": "2020-06-22T05:40:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYxMjg5MA==", "url": "https://github.com/apache/incubator-doris/pull/3806#discussion_r444612890", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // TODO(Yangzhengguo) set this default value to true if we support spill data top disk\n          \n          \n            \n                // TODO set this default value to true if we support spill data top disk", "author": "wuyunfeng", "createdAt": "2020-06-24T02:41:28Z", "path": "fe/src/main/java/org/apache/doris/qe/SessionVariable.java", "diffHunk": "@@ -251,6 +253,9 @@\n     private int maxScanKeyNum = -1;\n     @VariableMgr.VarAttr(name = MAX_PUSHDOWN_CONDITIONS_PER_COLUMN)\n     private int maxPushdownConditionsPerColumn = -1;\n+    // TODO(Yangzhengguo) set this default value to true if we support spill data top disk", "originalCommit": "d0c6e9d79b2a59ac217e48ae3113672966e9ef0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYxNzQ0MQ==", "url": "https://github.com/apache/incubator-doris/pull/3806#discussion_r444617441", "bodyText": "maybe allow_ignore_order_by_in_subquery is more better?\nset, inline view, insert can think contain subquery.", "author": "wutiangan", "createdAt": "2020-06-24T02:59:48Z", "path": "docs/zh-CN/administrator-guide/variables.md", "diffHunk": "@@ -334,3 +334,6 @@ SET forward_to_master = concat('tr', 'u', 'e');\n \n     \u662f\u5426\u5c06 bitmap \u548c hll \u7c7b\u578b\u7684 count distinct \u67e5\u8be2\u91cd\u5199\u4e3a bitmap_union_count \u548c hll_union_agg \u3002\n \n+* `allow_ignore_order_by`", "originalCommit": "d0c6e9d79b2a59ac217e48ae3113672966e9ef0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYyNjE3NQ==", "url": "https://github.com/apache/incubator-doris/pull/3806#discussion_r444626175", "bodyText": "the parameter can remove.\nyou can decide to apply you REMOVE_SORT rule according to if order_by/sort  contain limit or offset.", "author": "wutiangan", "createdAt": "2020-06-24T03:38:04Z", "path": "docs/en/administrator-guide/variables.md", "diffHunk": "@@ -334,3 +334,7 @@ SET forward_to_master = concat('tr', 'u', 'e');\n * `rewrite_count_distinct_to_bitmap_hll`\n \n     Whether to rewrite count distinct queries of bitmap and HLL types as bitmap_union_count and hll_union_agg.\n+\n+* `allow_ignore_order_by`\n+   Used to ignore order by w/o limit and offset in inline views, set operands and insert statements.", "originalCommit": "d0c6e9d79b2a59ac217e48ae3113672966e9ef0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0Nzc4OA==", "url": "https://github.com/apache/incubator-doris/pull/3806#discussion_r444647788", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        strBuilder.append(\".\\nAn ORDER BY appearing in a view, subquery, union operand, \");\n          \n          \n            \n                        strBuilder.append(\".\\nAn ORDER BY appearing in a view, subquery, set operand, \");", "author": "wutiangan", "createdAt": "2020-06-24T05:11:15Z", "path": "fe/src/main/java/org/apache/doris/analysis/QueryStmt.java", "diffHunk": "@@ -285,27 +285,25 @@ protected void createSortInfo(Analyzer analyzer) throws AnalysisException {\n         }\n \n         sortInfo = new SortInfo(orderingExprs, isAscOrder, nullsFirstParams);\n-        // order by w/o limit and offset in inline views, union operands and insert statements\n+        // order by w/o limit and offset in inline views, set operands and insert statements\n         // are ignored.\n-        // TODO chenhao, open this when we don't limit rows subquery returns by SortNode.\n-        /*if (!hasLimit() && !hasOffset() && !analyzer.isRootAnalyzer()) {\n-         *   evaluateOrderBy = false;\n-         *   // Return a warning that the order by was ignored.\n-         *   StringBuilder strBuilder = new StringBuilder();\n-         *   strBuilder.append(\"Ignoring ORDER BY clause without LIMIT or OFFSET: \");\n-         *   strBuilder.append(\"ORDER BY \");\n-         *   strBuilder.append(orderByElements.get(0).toSql());\n-         *   for (int i = 1; i < orderByElements.size(); ++i) {\n-         *       strBuilder.append(\", \").append(orderByElements.get(i).toSql());\n-         *   }\n-         *   strBuilder.append(\".\\nAn ORDER BY appearing in a view, subquery, union operand, \");\n-         *   strBuilder.append(\"or an insert/ctas statement has no effect on the query result \");\n-         *   strBuilder.append(\"unless a LIMIT and/or OFFSET is used in conjunction \");\n-         *   strBuilder.append(\"with the ORDER BY.\");\n-         * } else {\n-         */\n-        evaluateOrderBy = true;\n-        //}\n+        if (!hasLimit() && !hasOffset() && !analyzer.isRootAnalyzer()) {\n+            evaluateOrderBy = false;\n+            // Return a warning that the order by was ignored.\n+            StringBuilder strBuilder = new StringBuilder();\n+            strBuilder.append(\"Ignoring ORDER BY clause without LIMIT or OFFSET: \");\n+            strBuilder.append(\"ORDER BY \");\n+            strBuilder.append(orderByElements.get(0).toSql());\n+            for (int i = 1; i < orderByElements.size(); ++i) {\n+                strBuilder.append(\", \").append(orderByElements.get(i).toSql());\n+            }\n+            strBuilder.append(\".\\nAn ORDER BY appearing in a view, subquery, union operand, \");", "originalCommit": "fc95e755302fbb06be38e53a20dd73ffb550f707", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2bd00de2a9b213502308286c1cd4d2638f4c0fc1", "url": "https://github.com/apache/incubator-doris/commit/2bd00de2a9b213502308286c1cd4d2638f4c0fc1", "message": "xx", "committedDate": "2020-06-28T07:39:25Z", "type": "forcePushed"}, {"oid": "e7d8c27f6c4c1d5056b96f7022948717a6017552", "url": "https://github.com/apache/incubator-doris/commit/e7d8c27f6c4c1d5056b96f7022948717a6017552", "message": "xx", "committedDate": "2020-06-29T06:36:18Z", "type": "forcePushed"}, {"oid": "ddf26f0ad196dbacda7b9806018953cb0ff37c93", "url": "https://github.com/apache/incubator-doris/commit/ddf26f0ad196dbacda7b9806018953cb0ff37c93", "message": "xx", "committedDate": "2020-06-30T01:56:31Z", "type": "forcePushed"}, {"oid": "6785d9a6ae0ab59d2bee64dae26bb509f32b705a", "url": "https://github.com/apache/incubator-doris/commit/6785d9a6ae0ab59d2bee64dae26bb509f32b705a", "message": "order by w/o limit and offset in inline views, set operands and insert statements", "committedDate": "2020-07-01T07:17:14Z", "type": "commit"}, {"oid": "62148664f85c77ff2d76546869d78d4ce2c533e3", "url": "https://github.com/apache/incubator-doris/commit/62148664f85c77ff2d76546869d78d4ce2c533e3", "message": "xx", "committedDate": "2020-07-01T07:17:14Z", "type": "commit"}, {"oid": "5b39c348e071035b4a9eacff6ad14c5ef60ec8c5", "url": "https://github.com/apache/incubator-doris/commit/5b39c348e071035b4a9eacff6ad14c5ef60ec8c5", "message": "add docs", "committedDate": "2020-07-01T07:17:14Z", "type": "commit"}, {"oid": "25cbe16f7a275234bd03caf26cdcce213f4a16da", "url": "https://github.com/apache/incubator-doris/commit/25cbe16f7a275234bd03caf26cdcce213f4a16da", "message": "remvoe session variable", "committedDate": "2020-07-01T07:17:14Z", "type": "commit"}, {"oid": "25cbe16f7a275234bd03caf26cdcce213f4a16da", "url": "https://github.com/apache/incubator-doris/commit/25cbe16f7a275234bd03caf26cdcce213f4a16da", "message": "remvoe session variable", "committedDate": "2020-07-01T07:17:14Z", "type": "forcePushed"}, {"oid": "f2a509a54bb0b437610bceb3965af0b5d961d55e", "url": "https://github.com/apache/incubator-doris/commit/f2a509a54bb0b437610bceb3965af0b5d961d55e", "message": "log warning", "committedDate": "2020-07-01T07:42:16Z", "type": "commit"}, {"oid": "4dc5db4b67bbfcd5aeba87b2b76c74b6f9bd8bdc", "url": "https://github.com/apache/incubator-doris/commit/4dc5db4b67bbfcd5aeba87b2b76c74b6f9bd8bdc", "message": "add_log", "committedDate": "2020-07-01T08:12:02Z", "type": "commit"}]}