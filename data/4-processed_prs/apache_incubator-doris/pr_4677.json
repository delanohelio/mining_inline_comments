{"pr_number": 4677, "pr_title": "Support Bucket Shuffle Join", "pr_createdAt": "2020-09-27T06:49:21Z", "pr_url": "https://github.com/apache/incubator-doris/pull/4677", "timeline": [{"oid": "882998243ad8f1739f41e5b665f05c387e05efa3", "url": "https://github.com/apache/incubator-doris/commit/882998243ad8f1739f41e5b665f05c387e05efa3", "message": "Support Bucket Shuffle Join.\n\nissue:#4394", "committedDate": "2020-09-27T06:43:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NDAyMg==", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495564022", "bodyText": "Why comment is fvn hash but code is crc32 hash?", "author": "kangkaisen", "createdAt": "2020-09-27T11:40:36Z", "path": "be/src/runtime/data_stream_sender.cpp", "diffHunk": "@@ -479,7 +495,30 @@ Status DataStreamSender::send(RuntimeState* state, RowBatch* batch) {\n                 hash_val = RawValue::get_hash_value_fvn(\n                     partition_val, ctx->root()->type(), hash_val);\n             }\n-            RETURN_IF_ERROR(_channels[hash_val % num_channels]->add_row(row));\n+            auto target_channel_id = hash_val % num_channels;\n+            RETURN_IF_ERROR(_channels[target_channel_id]->add_row(row));\n+        }\n+    } else if (_part_type == TPartitionType::BUCKET_SHFFULE_HASH_PARTITIONED) {\n+        // hash-partition batch's rows across channels\n+        int num_channels = _channel_shared_ptrs.size();\n+\n+        for (int i = 0; i < batch->num_rows(); ++i) {\n+            TupleRow* row = batch->get_row(i);\n+            size_t hash_val = 0;\n+\n+            for (auto ctx : _partition_expr_ctxs) {\n+                void* partition_val = ctx->get_value(row);\n+                // We can't use the crc hash function here because it does not result\n+                // in uncorrelated hashes with different seeds.  Instead we must use\n+                // fvn hash.\n+                // TODO: fix crc hash/GetHashValue()\n+                //hash_val = RawValue::get_hash_value_fvn(\n+                //    partition_val, ctx->root()->type(), hash_val);\n+                hash_val = RawValue::zlib_crc32(", "originalCommit": "882998243ad8f1739f41e5b665f05c387e05efa3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NjA5OA==", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495566098", "bodyText": "This comment is not right\uff0c It should be deleted.", "author": "HappenLee", "createdAt": "2020-09-27T12:06:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NDAyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NjUxNg==", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495566516", "bodyText": "This comment is not right\uff0c I will change this part.", "author": "HappenLee", "createdAt": "2020-09-27T12:10:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NDAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NDEwMw==", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495564103", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // If user have a join hint to use proper way of join, can not be colocate join\n          \n          \n            \n                    // If user have a join hint to use proper way of join, can not be bucket shuffle join", "author": "kangkaisen", "createdAt": "2020-09-27T11:41:36Z", "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "diffHunk": "@@ -498,6 +520,72 @@ private boolean canColocateJoin(HashJoinNode node, PlanFragment leftChildFragmen\n         return false;\n     }\n \n+    private boolean canBucketShuffleJoin(HashJoinNode node, PlanFragment leftChildFragment,\n+                                   List<Expr> rhsHashExprs) {\n+        if (!ConnectContext.get().getSessionVariable().isEnableBucketShuffleJoin()) {\n+            return false;\n+        }\n+        // If user have a join hint to use proper way of join, can not be colocate join", "originalCommit": "882998243ad8f1739f41e5b665f05c387e05efa3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NDk2Nw==", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495564967", "bodyText": "If you could abstract the query schedule strategy like Presto and refactor this class, which would be very great.", "author": "kangkaisen", "createdAt": "2020-09-27T11:52:19Z", "path": "fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java", "diffHunk": "@@ -783,13 +784,39 @@ private void computeFragmentExecParams() throws Exception {\n                         params.instanceExecParams.size() + destParams.perExchNumSenders.get(exchId.asInt()));\n             }\n \n-            // add destination host to this fragment's destination\n-            for (int j = 0; j < destParams.instanceExecParams.size(); ++j) {\n-                TPlanFragmentDestination dest = new TPlanFragmentDestination();\n-                dest.fragment_instance_id = destParams.instanceExecParams.get(j).instanceId;\n-                dest.server = toRpcHost(destParams.instanceExecParams.get(j).host);\n-                dest.setBrpcServer(toBrpcHost(destParams.instanceExecParams.get(j).host));\n-                params.destinations.add(dest);\n+            if (bucketShuffleJoinController.isBucketShuffleJoin(destFragment.getFragmentId().asInt())) {", "originalCommit": "882998243ad8f1739f41e5b665f05c387e05efa3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NjQ0OA==", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495566448", "bodyText": "Yes, It is the future work to do. But this part is complex and has a great impact. I think we need to this work gradually", "author": "HappenLee", "createdAt": "2020-09-27T12:10:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NDk2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY4NDMwNA==", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495684304", "bodyText": "OK", "author": "kangkaisen", "createdAt": "2020-09-28T04:34:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NDk2Nw=="}], "type": "inlineReview"}, {"oid": "05d36cc45260b69e38ce8fa9a95c603a1d19dc31", "url": "https://github.com/apache/incubator-doris/commit/05d36cc45260b69e38ce8fa9a95c603a1d19dc31", "message": "change some code comment", "committedDate": "2020-09-27T12:18:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0MTM1Mw==", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495541353", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // bucket shuffle join is better than boradcast and shuffle join\n          \n          \n            \n                    // bucket shuffle join is better than broadcast and shuffle join", "author": "morningman", "createdAt": "2020-09-27T07:38:40Z", "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "diffHunk": "@@ -390,6 +390,28 @@ private PlanFragment createHashJoinFragment(HashJoinNode node, PlanFragment righ\n             node.setColocate(false, reason.get(0));\n         }\n \n+        // bucket shuffle join is better than boradcast and shuffle join", "originalCommit": "882998243ad8f1739f41e5b665f05c387e05efa3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0MTQwNQ==", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495541405", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // If user have a join hint to use proper way of join, can not be colocate join\n          \n          \n            \n                    // If user have a join hint to use proper way of join, can not be bucket join", "author": "morningman", "createdAt": "2020-09-27T07:39:27Z", "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "diffHunk": "@@ -498,6 +520,72 @@ private boolean canColocateJoin(HashJoinNode node, PlanFragment leftChildFragmen\n         return false;\n     }\n \n+    private boolean canBucketShuffleJoin(HashJoinNode node, PlanFragment leftChildFragment,\n+                                   List<Expr> rhsHashExprs) {\n+        if (!ConnectContext.get().getSessionVariable().isEnableBucketShuffleJoin()) {\n+            return false;\n+        }\n+        // If user have a join hint to use proper way of join, can not be colocate join", "originalCommit": "882998243ad8f1739f41e5b665f05c387e05efa3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0MTUyNQ==", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495541525", "bodyText": "And I think if user specify [SHUFFLE] hint, we should try to do bucket shuffle too.", "author": "morningman", "createdAt": "2020-09-27T07:40:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0MTQwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0MzEyMA==", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495543120", "bodyText": "Comment is wrong", "author": "morningman", "createdAt": "2020-09-27T07:58:55Z", "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "diffHunk": "@@ -498,6 +520,72 @@ private boolean canColocateJoin(HashJoinNode node, PlanFragment leftChildFragmen\n         return false;\n     }\n \n+    private boolean canBucketShuffleJoin(HashJoinNode node, PlanFragment leftChildFragment,\n+                                   List<Expr> rhsHashExprs) {\n+        if (!ConnectContext.get().getSessionVariable().isEnableBucketShuffleJoin()) {\n+            return false;\n+        }\n+        // If user have a join hint to use proper way of join, can not be colocate join\n+        if (node.getInnerRef().hasJoinHints()) {\n+            return false;\n+        }\n+\n+        PlanNode leftRoot = leftChildFragment.getPlanRoot();\n+        //leftRoot should be ScanNode or HashJoinNode, rightRoot should be ScanNode", "originalCommit": "882998243ad8f1739f41e5b665f05c387e05efa3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0MzUyNw==", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495543527", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }", "author": "morningman", "createdAt": "2020-09-27T08:03:02Z", "path": "fe/fe-core/src/main/java/org/apache/doris/planner/DistributedPlanner.java", "diffHunk": "@@ -498,6 +520,72 @@ private boolean canColocateJoin(HashJoinNode node, PlanFragment leftChildFragmen\n         return false;\n     }\n \n+    private boolean canBucketShuffleJoin(HashJoinNode node, PlanFragment leftChildFragment,\n+                                   List<Expr> rhsHashExprs) {\n+        if (!ConnectContext.get().getSessionVariable().isEnableBucketShuffleJoin()) {\n+            return false;\n+        }\n+        // If user have a join hint to use proper way of join, can not be colocate join\n+        if (node.getInnerRef().hasJoinHints()) {\n+            return false;\n+        }\n+\n+        PlanNode leftRoot = leftChildFragment.getPlanRoot();\n+        //leftRoot should be ScanNode or HashJoinNode, rightRoot should be ScanNode\n+        if (leftRoot instanceof OlapScanNode) {\n+            return canBucketShuffleJoin(node, leftRoot, rhsHashExprs);\n+        }\n+\n+        return false;\n+    }\n+\n+    //the join expr must contian left table distribute column\n+    private boolean canBucketShuffleJoin(HashJoinNode node, PlanNode leftRoot,\n+                                    List<Expr> rhsJoinExprs) {\n+        OlapScanNode leftScanNode = ((OlapScanNode) leftRoot);\n+\n+        //1 the left table must be only one partition\n+        if (leftScanNode.getSelectedPartitionIds().size() > 1) {\n+            return false;\n+        }\n+\n+        DistributionInfo leftDistribution = leftScanNode.getOlapTable().getDefaultDistributionInfo();\n+\n+        if (leftDistribution instanceof HashDistributionInfo ) {\n+            List<Column> leftDistributeColumns = ((HashDistributionInfo) leftDistribution).getDistributionColumns();\n+\n+            List<Column> leftJoinColumns = new ArrayList<>();\n+            List<Expr> rightExprs = new ArrayList<>();\n+            List<BinaryPredicate> eqJoinConjuncts = node.getEqJoinConjuncts();\n+\n+            for (BinaryPredicate eqJoinPredicate : eqJoinConjuncts) {\n+                Expr lhsJoinExpr = eqJoinPredicate.getChild(0);\n+                Expr rhsJoinExpr = eqJoinPredicate.getChild(1);\n+                if (lhsJoinExpr.unwrapSlotRef() == null || rhsJoinExpr.unwrapSlotRef() == null) {\n+                    continue;\n+                }\n+\n+                SlotDescriptor leftSlot = lhsJoinExpr.unwrapSlotRef().getDesc();\n+\n+                leftJoinColumns.add(leftSlot.getColumn());\n+                rightExprs.add(rhsJoinExpr);\n+            }\n+\n+            //2 the join columns should contains all left table distribute columns to enable bucket shuffle join\n+            for (Column distributeColumn : leftDistributeColumns) {\n+                int loc = leftJoinColumns.indexOf(distributeColumn);\n+                // TODO: now support bucket shuffle join when distribute column type different with\n+                // right expr type\n+                if (loc == -1 || !rightExprs.get(loc).getType().equals(distributeColumn.getType())) {\n+                    return false;\n+                }\n+                rhsJoinExprs.add(rightExprs.get(loc));\n+            }\n+        }", "originalCommit": "882998243ad8f1739f41e5b665f05c387e05efa3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1MDE5Mg==", "url": "https://github.com/apache/incubator-doris/pull/4677#discussion_r495550192", "bodyText": "Add comment for this class", "author": "morningman", "createdAt": "2020-09-27T09:13:13Z", "path": "fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java", "diffHunk": "@@ -1399,6 +1429,175 @@ public boolean isDone() {\n \n     }\n \n+    class BucketShuffleJoinController {", "originalCommit": "882998243ad8f1739f41e5b665f05c387e05efa3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5ac5e79f50d989c40ebeed2d9521cbf3e58c87a0", "url": "https://github.com/apache/incubator-doris/commit/5ac5e79f50d989c40ebeed2d9521cbf3e58c87a0", "message": "Revise some mistake comment and code", "committedDate": "2020-09-28T07:47:26Z", "type": "commit"}]}