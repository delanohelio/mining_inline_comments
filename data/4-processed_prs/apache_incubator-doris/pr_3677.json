{"pr_number": 3677, "pr_title": "Support materialized view load and insert", "pr_createdAt": "2020-05-25T02:02:43Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3677", "timeline": [{"oid": "7846337a4a3e2ea66a282cb4b69dfd6efb9aa3c1", "url": "https://github.com/apache/incubator-doris/commit/7846337a4a3e2ea66a282cb4b69dfd6efb9aa3c1", "message": "support materialized view load", "committedDate": "2020-05-25T02:00:04Z", "type": "commit"}, {"oid": "a94db58e9b69532554ac10f372b268da2be42855", "url": "https://github.com/apache/incubator-doris/commit/a94db58e9b69532554ac10f372b268da2be42855", "message": "Merge branch 'master' of https://github.com/apache/incubator-doris into mv_load", "committedDate": "2020-05-28T06:16:21Z", "type": "commit"}, {"oid": "94bd0a09d6e489f068ca1f1e845e522f26001d36", "url": "https://github.com/apache/incubator-doris/commit/94bd0a09d6e489f068ca1f1e845e522f26001d36", "message": "Merge branch 'master' of https://github.com/apache/incubator-doris into mv_load", "committedDate": "2020-05-28T08:50:41Z", "type": "commit"}, {"oid": "731164f9e4ae446cd89475fbed9c561dd1970bd8", "url": "https://github.com/apache/incubator-doris/commit/731164f9e4ae446cd89475fbed9c561dd1970bd8", "message": "support materialized view insert statement", "committedDate": "2020-05-29T02:06:53Z", "type": "commit"}, {"oid": "65e709c0844be7e32a770dac7a525282ef200bff", "url": "https://github.com/apache/incubator-doris/commit/65e709c0844be7e32a770dac7a525282ef200bff", "message": "support materialized view insert statement", "committedDate": "2020-05-29T11:56:37Z", "type": "commit"}, {"oid": "208adb6cd6e7e1e13e2d7c71a1ea3a4fddf4d1b3", "url": "https://github.com/apache/incubator-doris/commit/208adb6cd6e7e1e13e2d7c71a1ea3a4fddf4d1b3", "message": "Merge branch 'master' of https://github.com/apache/incubator-doris into mv_load", "committedDate": "2020-05-30T12:35:30Z", "type": "commit"}, {"oid": "5a6ae7cbc4ce62e97a44d6a00cd320bbbf35cbb1", "url": "https://github.com/apache/incubator-doris/commit/5a6ae7cbc4ce62e97a44d6a00cd320bbbf35cbb1", "message": "support materialized view insert statement", "committedDate": "2020-05-30T12:41:44Z", "type": "commit"}, {"oid": "0ca77be25fd9816f00fa23d9bc10ccc14f695184", "url": "https://github.com/apache/incubator-doris/commit/0ca77be25fd9816f00fa23d9bc10ccc14f695184", "message": "Merge branch 'mv_load' of github.com:HangyuanLiu/incubator-doris into mv_load", "committedDate": "2020-05-30T12:45:10Z", "type": "commit"}, {"oid": "2052dc4f9c787b52635937df05c6498cd3a3d730", "url": "https://github.com/apache/incubator-doris/commit/2052dc4f9c787b52635937df05c6498cd3a3d730", "message": "fix bug", "committedDate": "2020-06-04T07:27:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2MDY0Mw==", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r435660643", "bodyText": "Comment about what does this code do", "author": "imay", "createdAt": "2020-06-05T02:45:30Z", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -453,6 +453,25 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n             }\n         }\n \n+        Map<Integer, Integer> origColIdxsForMVCols = Maps.newHashMap();", "originalCommit": "2052dc4f9c787b52635937df05c6498cd3a3d730", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2MjU2Ng==", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r435662566", "bodyText": "In general, use to in map's name.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<Integer, Integer> origColIdxsForMVCols = Maps.newHashMap();\n          \n          \n            \n                    Map<Integer, Integer> origColIdx2MvColIdx = Maps.newHashMap();", "author": "imay", "createdAt": "2020-06-05T02:53:41Z", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -453,6 +453,25 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n             }\n         }\n \n+        Map<Integer, Integer> origColIdxsForMVCols = Maps.newHashMap();", "originalCommit": "2052dc4f9c787b52635937df05c6498cd3a3d730", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY5MTkxMA==", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r435691910", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //The extension column of the materialized view is added to the expression evaluation of load\n          \n          \n            \n                    // The extension column of the materialized view is added to the expression evaluation of load", "author": "imay", "createdAt": "2020-06-05T05:05:58Z", "path": "fe/src/main/java/org/apache/doris/load/Load.java", "diffHunk": "@@ -1013,6 +1013,13 @@ public static void initColumns(Table tbl, List<ImportColumnDesc> columnExprs,\n                 slotDescByName.put(realColName, slotDesc);\n             }\n         }\n+        //The extension column of the materialized view is added to the expression evaluation of load", "originalCommit": "2052dc4f9c787b52635937df05c6498cd3a3d730", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ae6fc569859a6509b7720faa128f1f61c231948b", "url": "https://github.com/apache/incubator-doris/commit/ae6fc569859a6509b7720faa128f1f61c231948b", "message": "fix typo and comment", "committedDate": "2020-06-06T09:14:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU3ODE3Mg==", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r436578172", "bodyText": "Please add some example", "author": "EmmyMiao87", "createdAt": "2020-06-08T09:48:07Z", "path": "fe/src/main/java/org/apache/doris/load/Load.java", "diffHunk": "@@ -1013,6 +1013,13 @@ public static void initColumns(Table tbl, List<ImportColumnDesc> columnExprs,\n                 slotDescByName.put(realColName, slotDesc);\n             }\n         }\n+        // The extension column of the materialized view is added to the expression evaluation of load", "originalCommit": "ae6fc569859a6509b7720faa128f1f61c231948b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU4MDQ1OA==", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r436580458", "bodyText": "Are you sure that this is correctcolumn(a, tmp_c) set(b=f(c), c=b)\uff1f", "author": "EmmyMiao87", "createdAt": "2020-06-08T09:52:15Z", "path": "fe/src/main/java/org/apache/doris/load/Load.java", "diffHunk": "@@ -1013,6 +1013,13 @@ public static void initColumns(Table tbl, List<ImportColumnDesc> columnExprs,\n                 slotDescByName.put(realColName, slotDesc);\n             }\n         }\n+        // The extension column of the materialized view is added to the expression evaluation of load\n+        for (Column column : tbl.getFullSchema()) {\n+            if (column.getDefineExpr() != null) {", "originalCommit": "ae6fc569859a6509b7720faa128f1f61c231948b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUxNzY0NQ==", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r438517645", "bodyText": "Are you sure that this is correctcolumn(a, tmp_c) set(b=f(c), c=b)\uff1f\n\nFix done", "author": "HangyuanLiu", "createdAt": "2020-06-11T03:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU4MDQ1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU5MzIzNQ==", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r436593235", "bodyText": "Please abstract function name getRefColumn in Column", "author": "EmmyMiao87", "createdAt": "2020-06-08T10:16:27Z", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -453,6 +453,26 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n             }\n         }\n \n+        //Get the correspondence of this column to the original column through defineExpr\n+        Map<Integer, Integer> origColIdx2MvColIdx = Maps.newHashMap();\n+        for (int mvColumnIdx = 0; mvColumnIdx < targetTable.getFullSchema().size(); ++mvColumnIdx) {\n+            Column column = targetTable.getFullSchema().get(mvColumnIdx);\n+            if (column.isNameWithPrefix(CreateMaterializedViewStmt.MATERIALIZED_VIEW_NAME_PRFIX)) {\n+                List<Expr> slots = new ArrayList<>();\n+                column.getDefineExpr().collect(SlotRef.class, slots);", "originalCommit": "ae6fc569859a6509b7720faa128f1f61c231948b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYwMjM4Nw==", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r436602387", "bodyText": "Do not use the index of origin col. The fullSchema may be rebuilt and the index of origin col may be changed.", "author": "EmmyMiao87", "createdAt": "2020-06-08T10:34:46Z", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -453,6 +453,26 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n             }\n         }\n \n+        //Get the correspondence of this column to the original column through defineExpr\n+        Map<Integer, Integer> origColIdx2MvColIdx = Maps.newHashMap();", "originalCommit": "ae6fc569859a6509b7720faa128f1f61c231948b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYzMDI5Ng==", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r436630296", "bodyText": "mvColumnIdxToOrigColumnIdx?", "author": "EmmyMiao87", "createdAt": "2020-06-08T11:35:06Z", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -453,6 +453,26 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n             }\n         }\n \n+        //Get the correspondence of this column to the original column through defineExpr\n+        Map<Integer, Integer> origColIdx2MvColIdx = Maps.newHashMap();\n+        for (int mvColumnIdx = 0; mvColumnIdx < targetTable.getFullSchema().size(); ++mvColumnIdx) {\n+            Column column = targetTable.getFullSchema().get(mvColumnIdx);\n+            if (column.isNameWithPrefix(CreateMaterializedViewStmt.MATERIALIZED_VIEW_NAME_PRFIX)) {\n+                List<Expr> slots = new ArrayList<>();\n+                column.getDefineExpr().collect(SlotRef.class, slots);\n+                //We only support one children of define expr in materialized view column\n+                Preconditions.checkArgument(slots.size() == 1);\n+                String origName = ((SlotRef) slots.get(0)).getColumnName();\n+                for (int originColumnIdx = 0; originColumnIdx < targetColumns.size(); originColumnIdx++) {\n+                    if (targetColumns.get(originColumnIdx).nameEquals(origName, false)) {\n+                        origColIdx2MvColIdx.put(mvColumnIdx, originColumnIdx);", "originalCommit": "ae6fc569859a6509b7720faa128f1f61c231948b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYzMTk4MA==", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r436631980", "bodyText": "The key of origColIdx2MvColIdx is mvColIdx. The mvColumn has been supplied at the end of result exprs in query stmt. So I think it is not match.", "author": "EmmyMiao87", "createdAt": "2020-06-08T11:38:56Z", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -519,17 +556,23 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n         }\n \n         // expand baseTblResultExprs and colLabels in QueryStmt\n-        if (!origColIdxsForShadowCols.isEmpty()) {\n+        if (!origColIdxsForShadowCols.isEmpty() || !origColIdx2MvColIdx.isEmpty()) {\n             if (queryStmt.getResultExprs().size() != queryStmt.getBaseTblResultExprs().size()) {\n                 for (Integer idx : origColIdxsForShadowCols) {\n                     queryStmt.getBaseTblResultExprs().add(queryStmt.getBaseTblResultExprs().get(idx));\n                 }\n+                for (Integer idx : origColIdx2MvColIdx.keySet()) {", "originalCommit": "ae6fc569859a6509b7720faa128f1f61c231948b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYzOTEyNg==", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r436639126", "bodyText": "Please add example of mv column and schema change column", "author": "EmmyMiao87", "createdAt": "2020-06-08T11:54:59Z", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -453,6 +453,26 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n             }\n         }\n \n+        //Get the correspondence of this column to the original column through defineExpr", "originalCommit": "ae6fc569859a6509b7720faa128f1f61c231948b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6186e6e01cf5ba10551476325f1b43c02f0074b2", "url": "https://github.com/apache/incubator-doris/commit/6186e6e01cf5ba10551476325f1b43c02f0074b2", "message": "fix bug", "committedDate": "2020-06-09T07:58:27Z", "type": "forcePushed"}, {"oid": "22d18bc8ac09dbb3f187cfd728c1cfb9d30a254f", "url": "https://github.com/apache/incubator-doris/commit/22d18bc8ac09dbb3f187cfd728c1cfb9d30a254f", "message": "fix bug", "committedDate": "2020-06-10T13:25:54Z", "type": "commit"}, {"oid": "22d18bc8ac09dbb3f187cfd728c1cfb9d30a254f", "url": "https://github.com/apache/incubator-doris/commit/22d18bc8ac09dbb3f187cfd728c1cfb9d30a254f", "message": "fix bug", "committedDate": "2020-06-10T13:25:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkxNzY3MA==", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r439917670", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * origColIdx2MVColumn has 1 element: \"3, __doris_materialized_view_bitmap_union_C\"\n          \n          \n            \n                     * origColIdx2MVColumn has 1 element: \"2, __doris_materialized_view_bitmap_union_C\"", "author": "EmmyMiao87", "createdAt": "2020-06-15T03:51:15Z", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -453,19 +454,25 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n             }\n         }\n \n-        //Get the correspondence of this column to the original column through defineExpr\n-        Map<Integer, Integer> origColIdx2MvColIdx = Maps.newHashMap();\n-        for (int mvColumnIdx = 0; mvColumnIdx < targetTable.getFullSchema().size(); ++mvColumnIdx) {\n-            Column column = targetTable.getFullSchema().get(mvColumnIdx);\n+        /*\n+         * When table have materialized view, there may be some materialized view columns.\n+         * we should add them to the end of targetColumns.\n+         * eg: origin targetColumns: (A,B,C), shadow column: __doris_materialized_view_bitmap_union_C\n+         * after processing, targetColumns: (A, B, C, __doris_materialized_view_bitmap_union_C), and\n+         * origColIdx2MVColumn has 1 element: \"3, __doris_materialized_view_bitmap_union_C\"", "originalCommit": "22d18bc8ac09dbb3f187cfd728c1cfb9d30a254f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkxNzk1Mg==", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r439917952", "bodyText": "Better  to show which field is error.", "author": "EmmyMiao87", "createdAt": "2020-06-15T03:52:42Z", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -453,19 +454,25 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n             }\n         }\n \n-        //Get the correspondence of this column to the original column through defineExpr\n-        Map<Integer, Integer> origColIdx2MvColIdx = Maps.newHashMap();\n-        for (int mvColumnIdx = 0; mvColumnIdx < targetTable.getFullSchema().size(); ++mvColumnIdx) {\n-            Column column = targetTable.getFullSchema().get(mvColumnIdx);\n+        /*\n+         * When table have materialized view, there may be some materialized view columns.\n+         * we should add them to the end of targetColumns.\n+         * eg: origin targetColumns: (A,B,C), shadow column: __doris_materialized_view_bitmap_union_C\n+         * after processing, targetColumns: (A, B, C, __doris_materialized_view_bitmap_union_C), and\n+         * origColIdx2MVColumn has 1 element: \"3, __doris_materialized_view_bitmap_union_C\"\n+         * will be used in as a mapping from queryStmt.getResultExprs() to targetColumns define expr\n+         */\n+        List<Pair<Integer, Column>>  origColIdx2MVColumn = Lists.newArrayList();\n+        for (Column column : targetTable.getFullSchema()) {\n             if (column.isNameWithPrefix(CreateMaterializedViewStmt.MATERIALIZED_VIEW_NAME_PRFIX)) {\n-                List<Expr> slots = new ArrayList<>();\n-                column.getDefineExpr().collect(SlotRef.class, slots);\n-                //We only support one children of define expr in materialized view column\n-                Preconditions.checkArgument(slots.size() == 1);\n-                String origName = ((SlotRef) slots.get(0)).getColumnName();\n+                SlotRef refColumn = column.getRefColumn();\n+                if (refColumn == null) {\n+                    ErrorReport.reportAnalysisException(ErrorCode.ERR_BAD_FIELD_ERROR);", "originalCommit": "22d18bc8ac09dbb3f187cfd728c1cfb9d30a254f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkyODIxOQ==", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r439928219", "bodyText": "What's different between resultExpr and baseTblResultExpr", "author": "EmmyMiao87", "createdAt": "2020-06-15T04:47:02Z", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -521,22 +530,22 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n                 // extend the result expr by duplicating the related exprs\n                 for (Integer idx : origColIdxsForShadowCols) {\n                     queryStmt.getResultExprs().add(queryStmt.getResultExprs().get(idx));\n+                    queryStmt.getBaseTblResultExprs().add(queryStmt.getResultExprs().get(idx));\n                 }\n             }\n \n-            if (!origColIdx2MvColIdx.isEmpty()) {\n-                origColIdx2MvColIdx.forEach((key, value) -> {\n-                    Column mvColumn = targetTable.getFullSchema().get(key);\n-                    Expr expr = mvColumn.getDefineExpr();\n-                    ArrayList<SlotRef> slots = new ArrayList<>();\n-                    expr.collect(SlotRef.class, slots);\n-\n+            if (!origColIdx2MVColumn.isEmpty()) {\n+                origColIdx2MVColumn.forEach(entry -> {\n+                    Integer origColIdx = entry.first;\n+                    Column mvColumn = entry.second;\n                     //substitute define expr slot with select statement result expr\n                     ExprSubstitutionMap smap = new ExprSubstitutionMap();\n-                    smap.getLhs().add(slots.get(0));\n-                    smap.getRhs().add(queryStmt.getResultExprs().get(value));\n+                    smap.getLhs().add(mvColumn.getRefColumn());\n+                    smap.getRhs().add(queryStmt.getResultExprs().get(origColIdx));\n \n-                    queryStmt.getResultExprs().add(Expr.substituteList(Lists.newArrayList(expr), smap, analyzer, false).get(0));\n+                    Expr e = Expr.substituteList(Lists.newArrayList(mvColumn.getDefineExpr()), smap, analyzer, false).get(0);\n+                    queryStmt.getResultExprs().add(e);\n+                    queryStmt.getBaseTblResultExprs().add(e);", "originalCommit": "22d18bc8ac09dbb3f187cfd728c1cfb9d30a254f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "49e89cc9ee94b889be104ed55dbc3221a91d2449", "url": "https://github.com/apache/incubator-doris/commit/49e89cc9ee94b889be104ed55dbc3221a91d2449", "message": "Merge branch 'mv_load' of github.com:HangyuanLiu/incubator-doris into mv_load", "committedDate": "2020-06-15T06:54:00Z", "type": "commit"}, {"oid": "49d59006279e2eaca9e4b4d74d47d40884d950d0", "url": "https://github.com/apache/incubator-doris/commit/49d59006279e2eaca9e4b4d74d47d40884d950d0", "message": "unify shadow column and mv column", "committedDate": "2020-06-15T07:14:52Z", "type": "commit"}, {"oid": "4b6b589c583fbd3153995a44279b3e4f0fed972e", "url": "https://github.com/apache/incubator-doris/commit/4b6b589c583fbd3153995a44279b3e4f0fed972e", "message": "fix bug : define expr should add cast node", "committedDate": "2020-07-10T13:40:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwNTc4NA==", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r455005784", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * eg: origin targetColumns: (A,B,C), shadow column: __doris_materialized_view_bitmap_union_C\n          \n          \n            \n                     * eg: origin targetColumns: (A,B,C), shadow column: mv_bitmap_union_C", "author": "EmmyMiao87", "createdAt": "2020-07-15T12:15:40Z", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -437,15 +438,36 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n          * Rule A: If the column which the shadow column related to is not mentioned,\n          * then do not add the shadow column to targetColumns. They will be filled by\n          * null or default value when loading.\n+         *\n+         * When table have materialized view, there may be some materialized view columns.\n+         * we should add them to the end of targetColumns.\n+         * eg: origin targetColumns: (A,B,C), shadow column: __doris_materialized_view_bitmap_union_C", "originalCommit": "4b6b589c583fbd3153995a44279b3e4f0fed972e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwNTg5Nw==", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r455005897", "bodyText": "same as above", "author": "EmmyMiao87", "createdAt": "2020-07-15T12:15:50Z", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -437,15 +438,36 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n          * Rule A: If the column which the shadow column related to is not mentioned,\n          * then do not add the shadow column to targetColumns. They will be filled by\n          * null or default value when loading.\n+         *\n+         * When table have materialized view, there may be some materialized view columns.\n+         * we should add them to the end of targetColumns.\n+         * eg: origin targetColumns: (A,B,C), shadow column: __doris_materialized_view_bitmap_union_C\n+         * after processing, targetColumns: (A, B, C, __doris_materialized_view_bitmap_union_C), and", "originalCommit": "4b6b589c583fbd3153995a44279b3e4f0fed972e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwNzg1NQ==", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r455007855", "bodyText": "The shadow cols is not meaningful. Maybe extend ?", "author": "EmmyMiao87", "createdAt": "2020-07-15T12:19:28Z", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -437,15 +438,36 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n          * Rule A: If the column which the shadow column related to is not mentioned,\n          * then do not add the shadow column to targetColumns. They will be filled by\n          * null or default value when loading.\n+         *\n+         * When table have materialized view, there may be some materialized view columns.\n+         * we should add them to the end of targetColumns.\n+         * eg: origin targetColumns: (A,B,C), shadow column: __doris_materialized_view_bitmap_union_C\n+         * after processing, targetColumns: (A, B, C, __doris_materialized_view_bitmap_union_C), and\n+         * origColIdx2MVColumn has 1 element: \"2, __doris_materialized_view_bitmap_union_C\"\n+         * will be used in as a mapping from queryStmt.getResultExprs() to targetColumns define expr\n          */\n-        List<Integer> origColIdxsForShadowCols = Lists.newArrayList();\n+        List<Pair<Integer, Column>> origColIdxsForShadowCols = Lists.newArrayList();", "originalCommit": "4b6b589c583fbd3153995a44279b3e4f0fed972e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxMTE5Mw==", "url": "https://github.com/apache/incubator-doris/pull/3677#discussion_r455011193", "bodyText": "Totally same as the result expr of query stmt?", "author": "EmmyMiao87", "createdAt": "2020-07-15T12:25:31Z", "path": "fe/src/main/java/org/apache/doris/analysis/InsertStmt.java", "diffHunk": "@@ -518,17 +550,26 @@ private void analyzeSubquery(Analyzer analyzer) throws UserException {\n             }\n         }\n \n-        // expand baseTblResultExprs and colLabels in QueryStmt\n+        // expand colLabels in QueryStmt\n         if (!origColIdxsForShadowCols.isEmpty()) {\n             if (queryStmt.getResultExprs().size() != queryStmt.getBaseTblResultExprs().size()) {\n-                for (Integer idx : origColIdxsForShadowCols) {\n-                    queryStmt.getBaseTblResultExprs().add(queryStmt.getBaseTblResultExprs().get(idx));\n+                for (Pair<Integer, Column> entry  : origColIdxsForShadowCols) {", "originalCommit": "4b6b589c583fbd3153995a44279b3e4f0fed972e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "29b8062bff822512312c8eb647e53c921d03184e", "url": "https://github.com/apache/incubator-doris/commit/29b8062bff822512312c8eb647e53c921d03184e", "message": "fix typo", "committedDate": "2020-07-16T03:40:00Z", "type": "commit"}, {"oid": "fd6435ba60cf661d6a49d7e1226e502aa72480e6", "url": "https://github.com/apache/incubator-doris/commit/fd6435ba60cf661d6a49d7e1226e502aa72480e6", "message": "Merge branch 'mv_load' of github.com:HangyuanLiu/incubator-doris into mv_load", "committedDate": "2020-07-16T03:40:51Z", "type": "commit"}, {"oid": "a299b8baa4da26fae16b5c56e358f2bca2043aeb", "url": "https://github.com/apache/incubator-doris/commit/a299b8baa4da26fae16b5c56e358f2bca2043aeb", "message": "Merge branch 'master' of https://github.com/apache/incubator-doris into mv_load", "committedDate": "2020-07-16T06:42:29Z", "type": "commit"}]}