{"pr_number": 5101, "pr_title": "[Feature] Add a http interface for single tablet migration between different disks", "pr_createdAt": "2020-12-17T05:48:07Z", "pr_url": "https://github.com/apache/incubator-doris/pull/5101", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM1Njc3Mg==", "url": "https://github.com/apache/incubator-doris/pull/5101#discussion_r549356772", "bodyText": "\u8fc1\u79fb\u53ef\u80fd\u662f\u4e00\u4e2a\u975e\u5e38\u957f\u7684\u8fc7\u7a0b\uff0c\u5982\u679c\u662f\u540c\u6b65\u63a5\u53e3\u7684\u8bdd\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5ba2\u6237\u7aefhang\u4f4f\u5f88\u957f\u65f6\u95f4\uff1f\n\u662f\u5426\u53ef\u4ee5\u8003\u8651\u505a\u6210\u4e00\u4e2a\u5f02\u6b65\u63a5\u53e3\uff0c\u8c03\u7528\u65b9\u53ea\u662f\u89e6\u53d1\u4e00\u4e2a storage_migration\u7684 task\u653e\u5165\u961f\u5217\u5373\u8fd4\u56de\uff1f\n\u7136\u540e\u53ef\u4ee5\u901a\u8fc7\u63a5\u53e3\u6765\u67e5\u8be2\u8fd9\u4e2a\u4efb\u52a1\u662f\u5426\u5728\u8fd0\u884c\uff1f\u7c7b\u4f3c http/action/compaction_action \u90a3\u6837?", "author": "morningman", "createdAt": "2020-12-28T13:56:57Z", "path": "docs/zh-CN/administrator-guide/http-actions/tablet-migration-action.md", "diffHunk": "@@ -0,0 +1,51 @@\n+---\n+{\n+    \"title\": \"MIGRATE SINGLE TABLET TO A PARTICULAR DISK\",\n+    \"language\": \"zh-CN\"\n+}\n+---\n+\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# MIGRATE SINGLE TABLET TO A PARTICULAR DISK\n+   \n+\u5728BE\u8282\u70b9\u4e0a\u8fc1\u79fb\u5355\u4e2atablet\u5230\u6307\u5b9a\u78c1\u76d8\n+\n+```\n+curl -X GET http://be_host:webserver_port/tablet_migration?tablet_id=xxx&schema_hash=xxx&disk=xxx\n+```\n+\n+\u8fd4\u56de\u503c\u5c31\u662ftablet\u8fc1\u79fb\u7ed3\u679c\uff0c\u8fc1\u79fb\u6210\u529f\u4f1a\u8fd4\u56de\uff1a", "originalCommit": "a6a4a1f625e69f616271f174a1e98ea9c59a53b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4MTIxNg==", "url": "https://github.com/apache/incubator-doris/pull/5101#discussion_r550481216", "bodyText": "Done.", "author": "weizuo93", "createdAt": "2020-12-31T13:16:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM1Njc3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDk3MTI1Mw==", "url": "https://github.com/apache/incubator-doris/pull/5101#discussion_r550971253", "bodyText": "Recommended:  /api/tablet_migration?.....", "author": "morningman", "createdAt": "2021-01-03T07:58:56Z", "path": "docs/en/administrator-guide/http-actions/tablet-migration-action.md", "diffHunk": "@@ -0,0 +1,86 @@\n+---\n+{\n+    \"title\": \"MIGRATE SINGLE TABLET TO A PARTICULAR DISK\",\n+    \"language\": \"en\"\n+}\n+---\n+\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# MIGRATE SINGLE TABLET TO A PARTICULAR DISK\n+   \n+Migrate single tablet to a particular disk.\n+\n+Submit the migration task:\n+\n+```\n+curl -X GET http://be_host:webserver_port/tablet_migration?goal=run&tablet_id=xxx&schema_hash=xxx&disk=xxx", "originalCommit": "4455139ce0aa8ebdb62ae5e82e0b663eefc25791", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwMDMyNQ==", "url": "https://github.com/apache/incubator-doris/pull/5101#discussion_r551000325", "bodyText": "OK.", "author": "weizuo93", "createdAt": "2021-01-03T12:35:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDk3MTI1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDk3MTI4Mg==", "url": "https://github.com/apache/incubator-doris/pull/5101#discussion_r550971282", "bodyText": "Recommended:  /api/tablet_migration?.....\nAnd only tablet_id and schema_hash is needed.\nthe result will return which disk it is moved to.", "author": "morningman", "createdAt": "2021-01-03T07:59:07Z", "path": "docs/en/administrator-guide/http-actions/tablet-migration-action.md", "diffHunk": "@@ -0,0 +1,86 @@\n+---\n+{\n+    \"title\": \"MIGRATE SINGLE TABLET TO A PARTICULAR DISK\",\n+    \"language\": \"en\"\n+}\n+---\n+\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# MIGRATE SINGLE TABLET TO A PARTICULAR DISK\n+   \n+Migrate single tablet to a particular disk.\n+\n+Submit the migration task:\n+\n+```\n+curl -X GET http://be_host:webserver_port/tablet_migration?goal=run&tablet_id=xxx&schema_hash=xxx&disk=xxx\n+```\n+\n+The return is the submission result of the migration task:\n+\n+```\n+    {\n+        status: \"Success\",\n+        msg: \"migration task is successfully submitted.\"\n+    }\n+```\n+\n+or\n+\n+```\n+    {\n+        status: \"Fail\",\n+        msg: \"Migration task submission failed\"\n+    }\n+```\n+\n+Show the status of migration task:\n+\n+```\n+curl -X GET http://be_host:webserver_port/tablet_migration?goal=status&tablet_id=xxx&schema_hash=xxx&disk=xxx", "originalCommit": "4455139ce0aa8ebdb62ae5e82e0b663eefc25791", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwMDM2Ng==", "url": "https://github.com/apache/incubator-doris/pull/5101#discussion_r551000366", "bodyText": "Done.", "author": "weizuo93", "createdAt": "2021-01-03T12:35:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDk3MTI4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg2NDY2NA==", "url": "https://github.com/apache/incubator-doris/pull/5101#discussion_r555864664", "bodyText": "Looks like you can move this block to the above code block, to avoid lock _migration_status_mutex  twice?", "author": "morningman", "createdAt": "2021-01-12T15:34:07Z", "path": "be/src/http/action/tablet_migration_action.cpp", "diffHunk": "@@ -0,0 +1,258 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"http/action/tablet_migration_action.h\"\n+\n+#include <string>\n+\n+#include \"gutil/strings/substitute.h\"\n+#include \"http/http_channel.h\"\n+#include \"http/http_headers.h\"\n+#include \"http/http_request.h\"\n+#include \"http/http_status.h\"\n+#include \"olap/storage_engine.h\"\n+#include \"olap/tablet_manager.h\"\n+#include \"olap/task/engine_storage_migration_task.h\"\n+#include \"util/json_util.h\"\n+\n+namespace doris {\n+\n+const static std::string HEADER_JSON = \"application/json\";\n+\n+TabletMigrationAction::TabletMigrationAction() {\n+    _init_migration_action();\n+}\n+\n+void TabletMigrationAction::_init_migration_action() {\n+    int32_t max_thread_num = config::max_tablet_migration_threads;\n+    int32_t min_thread_num = config::min_tablet_migration_threads;\n+    ThreadPoolBuilder(\"MigrationTaskThreadPool\")\n+            .set_min_threads(min_thread_num)\n+            .set_max_threads(max_thread_num)\n+            .build(&_migration_thread_pool);\n+}\n+\n+void TabletMigrationAction::handle(HttpRequest* req) {\n+    int64_t tablet_id = 0;\n+    int32_t schema_hash = 0;\n+    string dest_disk = \"\";\n+    string goal = \"\";\n+    Status status = _check_param(req, tablet_id, schema_hash, dest_disk, goal);\n+    if (status.ok()) {\n+        if (goal == \"run\") {\n+            MigrationTask current_task(tablet_id, schema_hash, dest_disk);\n+            TabletSharedPtr tablet;\n+            DataDir* dest_store;\n+            Status status =\n+                    _check_migrate_request(tablet_id, schema_hash, dest_disk, tablet, &dest_store);\n+            if (status.ok()) {\n+                do {\n+                    {\n+                        std::unique_lock<std::mutex> lock(_migration_status_mutex);\n+                        std::map<MigrationTask, std::string>::iterator it_task =\n+                                _migration_tasks.begin();\n+                        for (; it_task != _migration_tasks.end(); it_task++) {\n+                            if (tablet_id == (it_task->first)._tablet_id &&\n+                                schema_hash == (it_task->first)._schema_hash) {\n+                                status = Status::AlreadyExist(strings::Substitute(\n+                                        \"There is a migration task for this tablet already exists. \"\n+                                        \"dest_disk is $0 .\",\n+                                        (it_task->first)._dest_disk));\n+                                break;\n+                            }\n+                        }\n+                        if (it_task != _migration_tasks.end()) {\n+                            break;\n+                        }\n+                    }\n+                    {\n+                        std::unique_lock<std::mutex> lock(_migration_status_mutex);", "originalCommit": "5af7585a2179439473b7680854e27f04f7072588", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg2Nzc3MQ==", "url": "https://github.com/apache/incubator-doris/pull/5101#discussion_r555867771", "bodyText": "And the \"submitted\" status seems not necessary? It will be changed to \"running\" very soon. And it it submit failed, it will be removed from _migration_tasks.", "author": "morningman", "createdAt": "2021-01-12T15:38:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg2NDY2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ3NjgxOA==", "url": "https://github.com/apache/incubator-doris/pull/5101#discussion_r556476818", "bodyText": "Looks like you can move this block to the above code block, to avoid lock _migration_status_mutex  twice?\n\nOK.", "author": "weizuo93", "createdAt": "2021-01-13T12:15:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg2NDY2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ3OTYzMg==", "url": "https://github.com/apache/incubator-doris/pull/5101#discussion_r556479632", "bodyText": "And the \"submitted\" status seems not necessary? It will be changed to \"running\" very soon. And it it submit failed, it will be removed from _migration_tasks.\n\nWhen doing tablet rebalance between disks, there may be many migration tasks being submitted and waiting in the queue. So \"submitted\" status may be useful.", "author": "weizuo93", "createdAt": "2021-01-13T12:20:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg2NDY2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg3MDY2NA==", "url": "https://github.com/apache/incubator-doris/pull/5101#discussion_r555870664", "bodyText": "_migration_tasks is a map, so why not just find the task by key?\nYou can refer to https://www.cnblogs.com/xupeidong/p/11976671.html", "author": "morningman", "createdAt": "2021-01-12T15:42:08Z", "path": "be/src/http/action/tablet_migration_action.cpp", "diffHunk": "@@ -0,0 +1,258 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"http/action/tablet_migration_action.h\"\n+\n+#include <string>\n+\n+#include \"gutil/strings/substitute.h\"\n+#include \"http/http_channel.h\"\n+#include \"http/http_headers.h\"\n+#include \"http/http_request.h\"\n+#include \"http/http_status.h\"\n+#include \"olap/storage_engine.h\"\n+#include \"olap/tablet_manager.h\"\n+#include \"olap/task/engine_storage_migration_task.h\"\n+#include \"util/json_util.h\"\n+\n+namespace doris {\n+\n+const static std::string HEADER_JSON = \"application/json\";\n+\n+TabletMigrationAction::TabletMigrationAction() {\n+    _init_migration_action();\n+}\n+\n+void TabletMigrationAction::_init_migration_action() {\n+    int32_t max_thread_num = config::max_tablet_migration_threads;\n+    int32_t min_thread_num = config::min_tablet_migration_threads;\n+    ThreadPoolBuilder(\"MigrationTaskThreadPool\")\n+            .set_min_threads(min_thread_num)\n+            .set_max_threads(max_thread_num)\n+            .build(&_migration_thread_pool);\n+}\n+\n+void TabletMigrationAction::handle(HttpRequest* req) {\n+    int64_t tablet_id = 0;\n+    int32_t schema_hash = 0;\n+    string dest_disk = \"\";\n+    string goal = \"\";\n+    Status status = _check_param(req, tablet_id, schema_hash, dest_disk, goal);\n+    if (status.ok()) {\n+        if (goal == \"run\") {\n+            MigrationTask current_task(tablet_id, schema_hash, dest_disk);\n+            TabletSharedPtr tablet;\n+            DataDir* dest_store;\n+            Status status =\n+                    _check_migrate_request(tablet_id, schema_hash, dest_disk, tablet, &dest_store);\n+            if (status.ok()) {\n+                do {\n+                    {\n+                        std::unique_lock<std::mutex> lock(_migration_status_mutex);\n+                        std::map<MigrationTask, std::string>::iterator it_task =\n+                                _migration_tasks.begin();\n+                        for (; it_task != _migration_tasks.end(); it_task++) {\n+                            if (tablet_id == (it_task->first)._tablet_id &&\n+                                schema_hash == (it_task->first)._schema_hash) {\n+                                status = Status::AlreadyExist(strings::Substitute(\n+                                        \"There is a migration task for this tablet already exists. \"\n+                                        \"dest_disk is $0 .\",\n+                                        (it_task->first)._dest_disk));\n+                                break;\n+                            }\n+                        }\n+                        if (it_task != _migration_tasks.end()) {\n+                            break;\n+                        }\n+                    }\n+                    {\n+                        std::unique_lock<std::mutex> lock(_migration_status_mutex);\n+                        _migration_tasks[current_task] = \"submitted\";\n+                    }\n+                    auto st = _migration_thread_pool->submit_func([&, tablet_id, schema_hash,\n+                                                                   dest_disk, current_task]() {\n+                        {\n+                            std::unique_lock<std::mutex> lock(_migration_status_mutex);\n+                            std::map<MigrationTask, std::string>::iterator it_task =\n+                                    _migration_tasks.find(current_task);\n+                            if (it_task != _migration_tasks.end()) {\n+                                it_task->second = \"running\";\n+                            }\n+                        }\n+                        Status result_status = _execute_tablet_migration(tablet, dest_store);\n+                        {\n+                            std::unique_lock<std::mutex> lock(_migration_status_mutex);\n+                            std::map<MigrationTask, std::string>::iterator it_task =\n+                                    _migration_tasks.find(current_task);\n+                            if (it_task != _migration_tasks.end()) {\n+                                _migration_tasks.erase(it_task);\n+                            }\n+                            std::pair<MigrationTask, Status> finished_task =\n+                                    make_pair(current_task, result_status);\n+                            if (_finished_migration_tasks.size() >=\n+                                config::finished_migration_tasks_size) {\n+                                _finished_migration_tasks.pop_front();\n+                            }\n+                            _finished_migration_tasks.push_back(finished_task);\n+                        }\n+                    });\n+                    if (!st.ok()) {\n+                        status = Status::InternalError(\"Migration task submission failed\");\n+                        std::unique_lock<std::mutex> lock(_migration_status_mutex);\n+                        std::map<MigrationTask, std::string>::iterator it_task =\n+                                _migration_tasks.find(current_task);\n+                        if (it_task != _migration_tasks.end()) {\n+                            _migration_tasks.erase(it_task);\n+                        }\n+                    }\n+                } while (0);\n+            }\n+            std::string status_result;\n+            if (!status.ok()) {\n+                status_result = to_json(status);\n+            } else {\n+                status_result =\n+                        \"{\\\"status\\\": \\\"Success\\\", \\\"msg\\\": \\\"migration task is successfully \"\n+                        \"submitted.\\\"}\";\n+            }\n+            req->add_output_header(HttpHeaders::CONTENT_TYPE, HEADER_JSON.c_str());\n+            HttpChannel::send_reply(req, HttpStatus::OK, status_result);\n+        } else {\n+            DCHECK(goal == \"status\");\n+            std::string status_result;\n+            do {\n+                std::unique_lock<std::mutex> lock(_migration_status_mutex);\n+                std::map<MigrationTask, std::string>::iterator it_task = _migration_tasks.begin();\n+                for (; it_task != _migration_tasks.end(); it_task++) {", "originalCommit": "5af7585a2179439473b7680854e27f04f7072588", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ3OTk2MA==", "url": "https://github.com/apache/incubator-doris/pull/5101#discussion_r556479960", "bodyText": "_migration_tasks is a map, so why not just find the task by key?\nYou can refer to https://www.cnblogs.com/xupeidong/p/11976671.html\n\nOK. Thank you.", "author": "weizuo93", "createdAt": "2021-01-13T12:21:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg3MDY2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg3MjMwNg==", "url": "https://github.com/apache/incubator-doris/pull/5101#discussion_r555872306", "bodyText": "better to add res to the message in status, so that user can known what's wrong", "author": "morningman", "createdAt": "2021-01-12T15:44:19Z", "path": "be/src/http/action/tablet_migration_action.cpp", "diffHunk": "@@ -0,0 +1,258 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"http/action/tablet_migration_action.h\"\n+\n+#include <string>\n+\n+#include \"gutil/strings/substitute.h\"\n+#include \"http/http_channel.h\"\n+#include \"http/http_headers.h\"\n+#include \"http/http_request.h\"\n+#include \"http/http_status.h\"\n+#include \"olap/storage_engine.h\"\n+#include \"olap/tablet_manager.h\"\n+#include \"olap/task/engine_storage_migration_task.h\"\n+#include \"util/json_util.h\"\n+\n+namespace doris {\n+\n+const static std::string HEADER_JSON = \"application/json\";\n+\n+TabletMigrationAction::TabletMigrationAction() {\n+    _init_migration_action();\n+}\n+\n+void TabletMigrationAction::_init_migration_action() {\n+    int32_t max_thread_num = config::max_tablet_migration_threads;\n+    int32_t min_thread_num = config::min_tablet_migration_threads;\n+    ThreadPoolBuilder(\"MigrationTaskThreadPool\")\n+            .set_min_threads(min_thread_num)\n+            .set_max_threads(max_thread_num)\n+            .build(&_migration_thread_pool);\n+}\n+\n+void TabletMigrationAction::handle(HttpRequest* req) {\n+    int64_t tablet_id = 0;\n+    int32_t schema_hash = 0;\n+    string dest_disk = \"\";\n+    string goal = \"\";\n+    Status status = _check_param(req, tablet_id, schema_hash, dest_disk, goal);\n+    if (status.ok()) {\n+        if (goal == \"run\") {\n+            MigrationTask current_task(tablet_id, schema_hash, dest_disk);\n+            TabletSharedPtr tablet;\n+            DataDir* dest_store;\n+            Status status =\n+                    _check_migrate_request(tablet_id, schema_hash, dest_disk, tablet, &dest_store);\n+            if (status.ok()) {\n+                do {\n+                    {\n+                        std::unique_lock<std::mutex> lock(_migration_status_mutex);\n+                        std::map<MigrationTask, std::string>::iterator it_task =\n+                                _migration_tasks.begin();\n+                        for (; it_task != _migration_tasks.end(); it_task++) {\n+                            if (tablet_id == (it_task->first)._tablet_id &&\n+                                schema_hash == (it_task->first)._schema_hash) {\n+                                status = Status::AlreadyExist(strings::Substitute(\n+                                        \"There is a migration task for this tablet already exists. \"\n+                                        \"dest_disk is $0 .\",\n+                                        (it_task->first)._dest_disk));\n+                                break;\n+                            }\n+                        }\n+                        if (it_task != _migration_tasks.end()) {\n+                            break;\n+                        }\n+                    }\n+                    {\n+                        std::unique_lock<std::mutex> lock(_migration_status_mutex);\n+                        _migration_tasks[current_task] = \"submitted\";\n+                    }\n+                    auto st = _migration_thread_pool->submit_func([&, tablet_id, schema_hash,\n+                                                                   dest_disk, current_task]() {\n+                        {\n+                            std::unique_lock<std::mutex> lock(_migration_status_mutex);\n+                            std::map<MigrationTask, std::string>::iterator it_task =\n+                                    _migration_tasks.find(current_task);\n+                            if (it_task != _migration_tasks.end()) {\n+                                it_task->second = \"running\";\n+                            }\n+                        }\n+                        Status result_status = _execute_tablet_migration(tablet, dest_store);\n+                        {\n+                            std::unique_lock<std::mutex> lock(_migration_status_mutex);\n+                            std::map<MigrationTask, std::string>::iterator it_task =\n+                                    _migration_tasks.find(current_task);\n+                            if (it_task != _migration_tasks.end()) {\n+                                _migration_tasks.erase(it_task);\n+                            }\n+                            std::pair<MigrationTask, Status> finished_task =\n+                                    make_pair(current_task, result_status);\n+                            if (_finished_migration_tasks.size() >=\n+                                config::finished_migration_tasks_size) {\n+                                _finished_migration_tasks.pop_front();\n+                            }\n+                            _finished_migration_tasks.push_back(finished_task);\n+                        }\n+                    });\n+                    if (!st.ok()) {\n+                        status = Status::InternalError(\"Migration task submission failed\");\n+                        std::unique_lock<std::mutex> lock(_migration_status_mutex);\n+                        std::map<MigrationTask, std::string>::iterator it_task =\n+                                _migration_tasks.find(current_task);\n+                        if (it_task != _migration_tasks.end()) {\n+                            _migration_tasks.erase(it_task);\n+                        }\n+                    }\n+                } while (0);\n+            }\n+            std::string status_result;\n+            if (!status.ok()) {\n+                status_result = to_json(status);\n+            } else {\n+                status_result =\n+                        \"{\\\"status\\\": \\\"Success\\\", \\\"msg\\\": \\\"migration task is successfully \"\n+                        \"submitted.\\\"}\";\n+            }\n+            req->add_output_header(HttpHeaders::CONTENT_TYPE, HEADER_JSON.c_str());\n+            HttpChannel::send_reply(req, HttpStatus::OK, status_result);\n+        } else {\n+            DCHECK(goal == \"status\");\n+            std::string status_result;\n+            do {\n+                std::unique_lock<std::mutex> lock(_migration_status_mutex);\n+                std::map<MigrationTask, std::string>::iterator it_task = _migration_tasks.begin();\n+                for (; it_task != _migration_tasks.end(); it_task++) {\n+                    if (tablet_id == (it_task->first)._tablet_id &&\n+                        schema_hash == (it_task->first)._schema_hash) {\n+                        status_result = \"{\\\"status\\\": \\\"Success\\\", \\\"msg\\\": \\\"migration task is \" +\n+                                        it_task->second + \"\\\", \\\"dest_disk\\\": \\\"\" +\n+                                        (it_task->first)._dest_disk + \"\\\"}\";\n+                        break;\n+                    }\n+                }\n+                if (it_task != _migration_tasks.end()) {\n+                    break;\n+                }\n+\n+                int i = _finished_migration_tasks.size() - 1;\n+                for (; i >= 0; i--) {\n+                    MigrationTask finished_task = _finished_migration_tasks[i].first;\n+                    if (finished_task._tablet_id == tablet_id &&\n+                        finished_task._schema_hash == schema_hash) {\n+                        status = _finished_migration_tasks[i].second;\n+                        if (status.ok()) {\n+                            status_result =\n+                                    \"{\\\"status\\\": \\\"Success\\\", \\\"msg\\\": \\\"migration task has \"\n+                                    \"finished successfully\\\", \\\"dest_disk\\\": \\\"\" +\n+                                    finished_task._dest_disk + \"\\\"}\";\n+                        }\n+                        break;\n+                    }\n+                }\n+                if (i < 0) {\n+                    status = Status::NotFound(\"Migration task not found\");\n+                }\n+            } while (0);\n+            if (!status.ok()) {\n+                status_result = to_json(status);\n+            }\n+            req->add_output_header(HttpHeaders::CONTENT_TYPE, HEADER_JSON.c_str());\n+            HttpChannel::send_reply(req, HttpStatus::OK, status_result);\n+        }\n+    } else {\n+        std::string status_result = to_json(status);\n+        req->add_output_header(HttpHeaders::CONTENT_TYPE, HEADER_JSON.c_str());\n+        HttpChannel::send_reply(req, HttpStatus::OK, status_result);\n+    }\n+}\n+\n+Status TabletMigrationAction::_check_param(HttpRequest* req, int64_t& tablet_id,\n+                                           int32_t& schema_hash, string& dest_disk, string& goal) {\n+    const std::string& req_tablet_id = req->param(\"tablet_id\");\n+    const std::string& req_schema_hash = req->param(\"schema_hash\");\n+    try {\n+        tablet_id = std::stoull(req_tablet_id);\n+        schema_hash = std::stoul(req_schema_hash);\n+    } catch (const std::exception& e) {\n+        LOG(WARNING) << \"invalid argument.tablet_id:\" << req_tablet_id\n+                     << \", schema_hash:\" << req_schema_hash;\n+        return Status::InternalError(strings::Substitute(\"Convert failed, $0\", e.what()));\n+    }\n+    dest_disk = req->param(\"disk\");\n+    goal = req->param(\"goal\");\n+    if (goal != \"run\" && goal != \"status\") {\n+        return Status::InternalError(strings::Substitute(\"invalid goal argument.\"));\n+    }\n+    return Status::OK();\n+}\n+\n+Status TabletMigrationAction::_check_migrate_request(int64_t tablet_id, int32_t schema_hash,\n+                                                     string dest_disk, TabletSharedPtr& tablet,\n+                                                     DataDir** dest_store) {\n+    tablet = StorageEngine::instance()->tablet_manager()->get_tablet(tablet_id, schema_hash);\n+    if (tablet == nullptr) {\n+        LOG(WARNING) << \"no tablet for tablet_id:\" << tablet_id << \" schema hash:\" << schema_hash;\n+        return Status::NotFound(\"Tablet not found\");\n+    }\n+\n+    // request specify the data dir\n+    *dest_store = StorageEngine::instance()->get_store(dest_disk);\n+    if (*dest_store == nullptr) {\n+        LOG(WARNING) << \"data dir not found: \" << dest_disk;\n+        return Status::NotFound(\"Disk not found\");\n+    }\n+\n+    if (tablet->data_dir() == *dest_store) {\n+        LOG(WARNING) << \"tablet already exist in destine disk: \" << dest_disk;\n+        return Status::AlreadyExist(\"Tablet already exist in destination disk\");\n+    }\n+\n+    // check disk capacity\n+    int64_t tablet_size = tablet->tablet_footprint();\n+    if ((*dest_store)->reach_capacity_limit(tablet_size)) {\n+        LOG(WARNING) << \"reach the capacity limit of path: \" << (*dest_store)->path()\n+                     << \", tablet size: \" << tablet_size;\n+        return Status::InternalError(\"Insufficient disk capacity\");\n+    }\n+\n+    return Status::OK();\n+}\n+\n+Status TabletMigrationAction::_execute_tablet_migration(TabletSharedPtr tablet,\n+                                                        DataDir* dest_store) {\n+    int64_t tablet_id = tablet->tablet_id();\n+    int32_t schema_hash = tablet->schema_hash();\n+    string dest_disk = dest_store->path();\n+    EngineStorageMigrationTask engine_task(tablet, dest_store);\n+    OLAPStatus res = StorageEngine::instance()->execute_task(&engine_task);\n+    Status status = Status::OK();\n+    if (res != OLAP_SUCCESS) {\n+        LOG(WARNING) << \"tablet migrate failed. tablet_id=\" << tablet_id\n+                     << \", schema_hash=\" << schema_hash << \", dest_disk=\" << dest_disk\n+                     << \", status:\" << res;\n+        status = Status::InternalError(\"migration task failed\");", "originalCommit": "5af7585a2179439473b7680854e27f04f7072588", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ4MDU5Mg==", "url": "https://github.com/apache/incubator-doris/pull/5101#discussion_r556480592", "bodyText": "better to add res to the message in status, so that user can known what's wrong\n\nThat sounds reasonable.", "author": "weizuo93", "createdAt": "2021-01-13T12:22:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg3MjMwNg=="}], "type": "inlineReview"}, {"oid": "83d8ba2042c535ce43684023be587672c92e1571", "url": "https://github.com/apache/incubator-doris/commit/83d8ba2042c535ce43684023be587672c92e1571", "message": "add http interface to migrate tablet between disks", "committedDate": "2021-01-15T02:51:45Z", "type": "commit"}, {"oid": "83d8ba2042c535ce43684023be587672c92e1571", "url": "https://github.com/apache/incubator-doris/commit/83d8ba2042c535ce43684023be587672c92e1571", "message": "add http interface to migrate tablet between disks", "committedDate": "2021-01-15T02:51:45Z", "type": "forcePushed"}]}