{"pr_number": 3651, "pr_title": "Support create materialized view with bitmap or hll", "pr_createdAt": "2020-05-21T11:34:02Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3651", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1NzAxNw==", "url": "https://github.com/apache/incubator-doris/pull/3651#discussion_r428657017", "bodyText": "better not using static import", "author": "morningman", "createdAt": "2020-05-21T13:39:39Z", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -79,6 +80,9 @@\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n \n+import static org.apache.doris.catalog.AggregateType.BITMAP_UNION;", "originalCommit": "038d878dcdf1834d9be442f175563930773691be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1NzQwMw==", "url": "https://github.com/apache/incubator-doris/pull/3651#discussion_r428657403", "bodyText": "Change the exception message.", "author": "morningman", "createdAt": "2020-05-21T13:40:19Z", "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "diffHunk": "@@ -167,15 +167,25 @@ private void analyzeSelectClause() throws AnalysisException {\n             } else if (selectListItem.getExpr() instanceof FunctionCallExpr) {\n                 FunctionCallExpr functionCallExpr = (FunctionCallExpr) selectListItem.getExpr();\n                 String functionName = functionCallExpr.getFnName().getFunction();\n+                Expr defineExpr = null;\n                 // TODO(ml): support REPLACE, REPLACE_IF_NOT_NULL only for aggregate table, HLL_UNION, BITMAP_UNION\n                 if (!functionName.equalsIgnoreCase(\"sum\")\n                         && !functionName.equalsIgnoreCase(\"min\")\n-                        && !functionName.equalsIgnoreCase(\"max\")) {\n+                        && !functionName.equalsIgnoreCase(\"max\")\n+                        && !functionName.equalsIgnoreCase(\"bitmap_union\")\n+                        && !functionName.equalsIgnoreCase(\"hll_union\")) {\n                     throw new AnalysisException(\"The materialized view only support the sum, min and max aggregate \"", "originalCommit": "038d878dcdf1834d9be442f175563930773691be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2MDIwMw==", "url": "https://github.com/apache/incubator-doris/pull/3651#discussion_r428660203", "bodyText": "I think we should throw this exception to terminate the process.\nThis should not happen.", "author": "morningman", "createdAt": "2020-05-21T13:44:56Z", "path": "fe/src/main/java/org/apache/doris/catalog/Column.java", "diffHunk": "@@ -310,6 +333,50 @@ public static String removeNamePrefix(String colName) {\n         return colName;\n     }\n \n+    public Expr getDefineExpr() {\n+        return defineExpr;\n+    }\n+\n+    public void setDefineExpr(Expr expr) {\n+        defineExpr = expr;\n+        if (expr != null) {\n+            serializeDefineExpr(expr);\n+        }\n+    }\n+\n+    public void serializeDefineExpr(Expr defineExpr) {\n+        defineExprString = \"COLUMNS (\" + name + \"=\" + defineExpr.toSql() + \")\";\n+    }\n+\n+    public void deserializeDefineExpr(String defineExprString) {\n+        if (defineExprString.equals(\"\")) {\n+            defineExpr = null;\n+        } else {\n+            try {\n+                SqlParser parser = new SqlParser(new SqlScanner(new StringReader(defineExprString)));\n+                ImportColumnsStmt columnsStmt = (ImportColumnsStmt) SqlParserUtils.getFirstStmt(parser);\n+\n+                ConnectContext ctx = new ConnectContext(null);\n+                ctx.setCluster(SystemInfoService.DEFAULT_CLUSTER);\n+                ctx.setCurrentUserIdentity(UserIdentity.ROOT);\n+                ctx.setQualifiedUser(PaloAuth.ROOT_USER);\n+                ctx.setCatalog(Catalog.getCurrentCatalog());\n+                ctx.setThreadLocalInfo();\n+\n+                Analyzer analyzer = new Analyzer(Catalog.getCurrentCatalog(), ctx);\n+                columnsStmt.analyze(analyzer);\n+                defineExpr = columnsStmt.getColumns().get(0).getExpr();\n+            } catch (Exception e) {\n+                e.printStackTrace();", "originalCommit": "038d878dcdf1834d9be442f175563930773691be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2MTY1Mg==", "url": "https://github.com/apache/incubator-doris/pull/3651#discussion_r428661652", "bodyText": "This class Column is already adopt the GSON serialization. So I think it can be completely converted to GSON this time.", "author": "morningman", "createdAt": "2020-05-21T13:47:30Z", "path": "fe/src/main/java/org/apache/doris/catalog/Column.java", "diffHunk": "@@ -416,6 +483,7 @@ public void write(DataOutput out) throws IOException {\n         stats.write(out);\n \n         Text.writeString(out, comment);\n+        Text.writeString(out, defineExprString);", "originalCommit": "038d878dcdf1834d9be442f175563930773691be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyMDYwMw==", "url": "https://github.com/apache/incubator-doris/pull/3651#discussion_r429020603", "bodyText": "The table object also use the writable interface The fullSchema of table also needs to serialized without GSON,", "author": "EmmyMiao87", "createdAt": "2020-05-22T03:10:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2MTY1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY3NDk2Ng==", "url": "https://github.com/apache/incubator-doris/pull/3651#discussion_r428674966", "bodyText": "Actually, toSql() is really not a safe way for serialization. It may be change, or even can not restore the original statement, in case the expr may be much complicate and being rewritten somehow.\nI was thinking maybe a safer way is to save the entire create view statement directly. We shall discuss this later.", "author": "morningman", "createdAt": "2020-05-21T14:09:24Z", "path": "fe/src/main/java/org/apache/doris/catalog/Column.java", "diffHunk": "@@ -310,6 +333,50 @@ public static String removeNamePrefix(String colName) {\n         return colName;\n     }\n \n+    public Expr getDefineExpr() {\n+        return defineExpr;\n+    }\n+\n+    public void setDefineExpr(Expr expr) {\n+        defineExpr = expr;\n+        if (expr != null) {\n+            serializeDefineExpr(expr);\n+        }\n+    }\n+\n+    public void serializeDefineExpr(Expr defineExpr) {\n+        defineExprString = \"COLUMNS (\" + name + \"=\" + defineExpr.toSql() + \")\";", "originalCommit": "038d878dcdf1834d9be442f175563930773691be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyMDE3MQ==", "url": "https://github.com/apache/incubator-doris/pull/3651#discussion_r429020171", "bodyText": "You need to restore the original statement rather then use the toSql function", "author": "EmmyMiao87", "createdAt": "2020-05-22T03:08:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY3NDk2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY3NzAzMA==", "url": "https://github.com/apache/incubator-doris/pull/3651#discussion_r428677030", "bodyText": "I think we need an extensible framework to handle the expression part of the materialized view more elegantly, rather than simply judging a few functions.\nThis can prepare for more complex expressions later.", "author": "morningman", "createdAt": "2020-05-21T14:12:47Z", "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "diffHunk": "@@ -167,15 +167,25 @@ private void analyzeSelectClause() throws AnalysisException {\n             } else if (selectListItem.getExpr() instanceof FunctionCallExpr) {\n                 FunctionCallExpr functionCallExpr = (FunctionCallExpr) selectListItem.getExpr();\n                 String functionName = functionCallExpr.getFnName().getFunction();\n+                Expr defineExpr = null;\n                 // TODO(ml): support REPLACE, REPLACE_IF_NOT_NULL only for aggregate table, HLL_UNION, BITMAP_UNION\n                 if (!functionName.equalsIgnoreCase(\"sum\")\n                         && !functionName.equalsIgnoreCase(\"min\")\n-                        && !functionName.equalsIgnoreCase(\"max\")) {\n+                        && !functionName.equalsIgnoreCase(\"max\")\n+                        && !functionName.equalsIgnoreCase(\"bitmap_union\")\n+                        && !functionName.equalsIgnoreCase(\"hll_union\")) {\n                     throw new AnalysisException(\"The materialized view only support the sum, min and max aggregate \"\n                                                         + \"function. Error function: \" + functionCallExpr.toSqlImpl());\n                 }\n                 Preconditions.checkState(functionCallExpr.getChildren().size() == 1);\n                 Expr functionChild0 = functionCallExpr.getChild(0);\n+\n+                if (functionName.equalsIgnoreCase(\"bitmap_union\") || functionName.equalsIgnoreCase(\"hll_union\")) {", "originalCommit": "038d878dcdf1834d9be442f175563930773691be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2ODYzNA==", "url": "https://github.com/apache/incubator-doris/pull/3651#discussion_r429168634", "bodyText": "I agree with you. But schema change and  expression compute  logical is non-universal. so we can only support few function now.", "author": "HangyuanLiu", "createdAt": "2020-05-22T10:28:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY3NzAzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxODA1NQ==", "url": "https://github.com/apache/incubator-doris/pull/3651#discussion_r429018055", "bodyText": "The isKey has been set.", "author": "EmmyMiao87", "createdAt": "2020-05-22T02:59:38Z", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -457,8 +462,23 @@ private RollupJobV2 createMaterializedViewJob(String mvName, String baseIndexNam\n                                                + \"duplicate table\");\n             }\n             Column newMVColumn = new Column(baseColumn);\n+\n             newMVColumn.setIsKey(mvColumnItem.isKey());\n             newMVColumn.setAggregationType(mvAggregationType, mvColumnItem.isAggregationTypeImplicit());\n+            newMVColumn.setDefineExpr(mvColumnItem.getDefineExpr());\n+            if (mvColumnItem.getDefineExpr() != null) {\n+                if (mvAggregationType.equals(BITMAP_UNION)) {\n+                    newMVColumn.setType(Type.BITMAP);\n+                    newMVColumn.setName(MATERIALIZED_VIEW_NAME_PRFIX + \"bitmap_\" + baseColumn.getName());\n+                } else if (mvAggregationType.equals(HLL_UNION)){\n+                    newMVColumn.setType(Type.HLL);\n+                    newMVColumn.setName(MATERIALIZED_VIEW_NAME_PRFIX + \"hll_\" + baseColumn.getName());\n+                } else {\n+                    throw new DdlException(\"The define expr of column is only support bitmap_union or hll_union\");\n+                }\n+                newMVColumn.setIsKey(false);", "originalCommit": "038d878dcdf1834d9be442f175563930773691be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1NTgxNw==", "url": "https://github.com/apache/incubator-doris/pull/3651#discussion_r429155817", "bodyText": "If the aggregate function is computed for the original column, it should be not key whether  the original column is a key column or a value column", "author": "HangyuanLiu", "createdAt": "2020-05-22T09:58:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxODA1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxODMzMg==", "url": "https://github.com/apache/incubator-doris/pull/3651#discussion_r429018332", "bodyText": "Firstly, check the define expr is forbidden or not. Secondly, set define expr in column", "author": "EmmyMiao87", "createdAt": "2020-05-22T03:00:44Z", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -457,8 +462,23 @@ private RollupJobV2 createMaterializedViewJob(String mvName, String baseIndexNam\n                                                + \"duplicate table\");\n             }\n             Column newMVColumn = new Column(baseColumn);\n+\n             newMVColumn.setIsKey(mvColumnItem.isKey());\n             newMVColumn.setAggregationType(mvAggregationType, mvColumnItem.isAggregationTypeImplicit());\n+            newMVColumn.setDefineExpr(mvColumnItem.getDefineExpr());", "originalCommit": "038d878dcdf1834d9be442f175563930773691be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxODYwNA==", "url": "https://github.com/apache/incubator-doris/pull/3651#discussion_r429018604", "bodyText": "The bitmap_union and hll_union should still be banned.", "author": "EmmyMiao87", "createdAt": "2020-05-22T03:02:00Z", "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "diffHunk": "@@ -167,15 +167,25 @@ private void analyzeSelectClause() throws AnalysisException {\n             } else if (selectListItem.getExpr() instanceof FunctionCallExpr) {\n                 FunctionCallExpr functionCallExpr = (FunctionCallExpr) selectListItem.getExpr();\n                 String functionName = functionCallExpr.getFnName().getFunction();\n+                Expr defineExpr = null;\n                 // TODO(ml): support REPLACE, REPLACE_IF_NOT_NULL only for aggregate table, HLL_UNION, BITMAP_UNION\n                 if (!functionName.equalsIgnoreCase(\"sum\")\n                         && !functionName.equalsIgnoreCase(\"min\")\n-                        && !functionName.equalsIgnoreCase(\"max\")) {\n+                        && !functionName.equalsIgnoreCase(\"max\")\n+                        && !functionName.equalsIgnoreCase(\"bitmap_union\")", "originalCommit": "038d878dcdf1834d9be442f175563930773691be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxOTE3Mw==", "url": "https://github.com/apache/incubator-doris/pull/3651#discussion_r429019173", "bodyText": "The child type of bitmap_union must be bitmap rather then integer.\nAlso the child type of to_bitmap function has been checked in analyzer.", "author": "EmmyMiao87", "createdAt": "2020-05-22T03:04:35Z", "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "diffHunk": "@@ -187,6 +197,14 @@ else if (functionChild0 instanceof CastExpr\n                     throw new AnalysisException(\"The children of aggregate function only support one original column. \"\n                                                         + \"Error function: \" + functionCallExpr.toSqlImpl());\n                 }\n+\n+                if (functionName.equalsIgnoreCase(\"bitmap_union\")) {\n+                    if (!slotRef.type.isIntegerType()) {", "originalCommit": "038d878dcdf1834d9be442f175563930773691be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxOTQ0Mw==", "url": "https://github.com/apache/incubator-doris/pull/3651#discussion_r429019443", "bodyText": "Remove this empty line.", "author": "EmmyMiao87", "createdAt": "2020-05-22T03:05:45Z", "path": "fe/src/main/java/org/apache/doris/catalog/Column.java", "diffHunk": "@@ -66,6 +78,10 @@\n     private String comment;\n     @SerializedName(value = \"stats\")\n     private ColumnStats stats;     // cardinality and selectivity etc.\n+    @SerializedName(value = \"defineExprString\")\n+    private String defineExprString = \"\";\n+", "originalCommit": "038d878dcdf1834d9be442f175563930773691be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyMDgyMA==", "url": "https://github.com/apache/incubator-doris/pull/3651#discussion_r429020820", "bodyText": "The bitmap_union mv should be forbidden now. So the meta version could not be changed.", "author": "EmmyMiao87", "createdAt": "2020-05-22T03:11:56Z", "path": "fe/src/main/java/org/apache/doris/common/FeMetaVersion.java", "diffHunk": "@@ -179,6 +179,8 @@\n     public static final int VERSION_83 = 83;\n     // add storage format in schema change job\n     public static final int VERSION_84 = 84;\n+    // support define expr in materialized view", "originalCommit": "038d878dcdf1834d9be442f175563930773691be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e8f2947f098940fd91921bd7934aa3e8d59d9948", "url": "https://github.com/apache/incubator-doris/commit/e8f2947f098940fd91921bd7934aa3e8d59d9948", "message": "support create materialized view", "committedDate": "2020-05-22T09:51:59Z", "type": "forcePushed"}, {"oid": "14368cb088eea7932e7cbbbc7c8e6ae939dd056b", "url": "https://github.com/apache/incubator-doris/commit/14368cb088eea7932e7cbbbc7c8e6ae939dd056b", "message": "support create materialized view", "committedDate": "2020-05-22T10:00:21Z", "type": "commit"}, {"oid": "14368cb088eea7932e7cbbbc7c8e6ae939dd056b", "url": "https://github.com/apache/incubator-doris/commit/14368cb088eea7932e7cbbbc7c8e6ae939dd056b", "message": "support create materialized view", "committedDate": "2020-05-22T10:00:21Z", "type": "forcePushed"}, {"oid": "9260f1347bc310ef20a80c33cf54728604e19a03", "url": "https://github.com/apache/incubator-doris/commit/9260f1347bc310ef20a80c33cf54728604e19a03", "message": "support create materialized view", "committedDate": "2020-05-25T01:51:53Z", "type": "commit"}]}