{"pr_number": 3508, "pr_title": "[Memory Engine] add core column related classes", "pr_createdAt": "2020-05-07T10:41:19Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3508", "timeline": [{"oid": "99396fb2709e6f6cae4159f6b22068885def657b", "url": "https://github.com/apache/incubator-doris/commit/99396fb2709e6f6cae4159f6b22068885def657b", "message": "[Memory Engine] add core column related classes", "committedDate": "2020-05-07T10:34:44Z", "type": "commit"}, {"oid": "840344cdddad3f024bb06029eb34b3ebca540509", "url": "https://github.com/apache/incubator-doris/commit/840344cdddad3f024bb06029eb34b3ebca540509", "message": "[Memory Engine] add core column related classes: add missing modifications", "committedDate": "2020-05-07T10:43:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5NTkwNA==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r421895904", "bodyText": "unify the indent", "author": "morningman", "createdAt": "2020-05-08T02:07:21Z", "path": "be/src/olap/memory/CMakeLists.txt", "diffHunk": "@@ -22,6 +22,12 @@ set(LIBRARY_OUTPUT_PATH \"${BUILD_DIR}/src/olap/memory\")\n set(EXECUTABLE_OUTPUT_PATH \"${BUILD_DIR}/src/olap/memory\")\n   \n add_library(Memory STATIC\n+\tbuffer.cpp", "originalCommit": "840344cdddad3f024bb06029eb34b3ebca540509", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzODEyNg==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422438126", "bodyText": "fixed", "author": "decster", "createdAt": "2020-05-09T01:34:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5NTkwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5NTk0NA==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r421895944", "bodyText": "Comment for this class", "author": "morningman", "createdAt": "2020-05-08T02:07:31Z", "path": "be/src/olap/memory/buffer.h", "diffHunk": "@@ -0,0 +1,61 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"olap/memory/common.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+class Buffer {", "originalCommit": "840344cdddad3f024bb06029eb34b3ebca540509", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzODA5OA==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422438098", "bodyText": "fixed", "author": "decster", "createdAt": "2020-05-09T01:34:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5NTk0NA=="}], "type": "inlineReview"}, {"oid": "86d2479225d8ac54acfb2d13289739b28c92fdbd", "url": "https://github.com/apache/incubator-doris/commit/86d2479225d8ac54acfb2d13289739b28c92fdbd", "message": "[Memory Engine] add core column related classes: add more comment, fix CMakeLists indent", "committedDate": "2020-05-09T01:32:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE5OTIyMw==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422199223", "bodyText": "What is DLOG(INFO) ? Why not using VLOG?", "author": "morningman", "createdAt": "2020-05-08T15:09:48Z", "path": "be/src/olap/memory/column.cpp", "diffHunk": "@@ -0,0 +1,125 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"olap/memory/column.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+Column::Column(const ColumnSchema& cs, ColumnType storage_type, uint64_t version)\n+        : _cs(cs), _storage_type(storage_type), _base_idx(0) {\n+    _base.reserve(64);\n+    _versions.reserve(64);\n+    _versions.emplace_back(version);\n+    DLOG(INFO) << \"create %s\" << debug_string();", "originalCommit": "840344cdddad3f024bb06029eb34b3ebca540509", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwNzI0Mw==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422507243", "bodyText": "This log is only used in debug mode, like DCHECK, it help show more info when debugging, and it has no effect in release build. I can remove them if it's this project's convention.", "author": "decster", "createdAt": "2020-05-09T15:17:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE5OTIyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIwMTg4OA==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422201888", "bodyText": "Comment", "author": "morningman", "createdAt": "2020-05-08T15:14:46Z", "path": "be/src/olap/memory/column.h", "diffHunk": "@@ -0,0 +1,96 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"olap/memory/column_block.h\"\n+#include \"olap/memory/column_delta.h\"\n+#include \"olap/memory/common.h\"\n+#include \"olap/memory/schema.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+class ColumnReader;\n+class ColumnWriter;\n+\n+// Column store all the data of a column, including base and deltas.\n+// It supports single-writer multi-reader concurrency.\n+// It's properties are all immutable except _base and _versions.\n+// _base and _versions use std::vector, which is basically thread-safe\n+// in-practice for single-writer/multi-reader access, if there isn't\n+// any over-capacity realloc or delta compaction/GC caused data change.\n+// When these situations occur, we do a copy-on-write.\n+//\n+// TODO: add column read&writer\n+class Column : public RefCountedThreadSafe<Column> {\n+public:\n+    static const uint32_t BLOCK_SIZE = 1 << 16;\n+    static const uint32_t BLOCK_MASK = 0xffff;\n+\n+    // create a Column which provided column schema, underlying storage_type and initial version\n+    Column(const ColumnSchema& cs, ColumnType storage_type, uint64_t version);\n+\n+    // copy-on-write a new Column with new capacity\n+    Column(const Column& rhs, size_t new_base_capacity, size_t new_version_capacity);\n+\n+    // get column schema\n+    const ColumnSchema& schema() { return _cs; }\n+\n+    // get memory usage in bytes\n+    size_t memory() const;\n+\n+    string debug_string() const;\n+\n+    // read this Column at a specific version, get a reader for this Column\n+    // support multiple concurrent readers\n+    Status read(uint64_t version, std::unique_ptr<ColumnReader>* reader);\n+\n+    // write this Column, get a writer for this Column\n+    // caller needs to make sure there is only one or no writer exists at any time\n+    Status write(std::unique_ptr<ColumnWriter>* writer);\n+\n+private:\n+    ColumnSchema _cs;\n+    // For some types the storage_type may be different from actual type from schema.\n+    // For example, string stored in dictionary, so column_block store a integer id,\n+    // and the storage type may change as the dictionary grows, e.g. from uint8 to uint16\n+    ColumnType _storage_type;\n+    // base's position at _versions vector\n+    ssize_t _base_idx;\n+    // base data, a vector of ColumnBlocks\n+    vector<scoped_refptr<ColumnBlock>> _base;\n+    struct VersionInfo {\n+        VersionInfo() = default;\n+        explicit VersionInfo(uint64_t version) : version(version) {}\n+        uint64_t version = 0;\n+        // null if it's base\n+        scoped_refptr<ColumnDelta> delta;\n+    };\n+    // version vector\n+    vector<VersionInfo> _versions;\n+\n+    Status capture_version(uint64_t version, vector<ColumnDelta*>* deltas,", "originalCommit": "840344cdddad3f024bb06029eb34b3ebca540509", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxMDA1NA==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422210054", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Return true this index has any rowid belonging to this block\n          \n          \n            \n                // Return true if this index has any rowid belonging to this block", "author": "morningman", "createdAt": "2020-05-08T15:30:13Z", "path": "be/src/olap/memory/delta_index.h", "diffHunk": "@@ -0,0 +1,76 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <vector>\n+\n+#include \"olap/memory/buffer.h\"\n+#include \"olap/memory/common.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+// DeltaIndex store all the updated rows' id(rowids) for a ColumnDelta.\n+// Rowids are sorted and divided into blocks, each 64K rowid space is a\n+// block. Since each block only have 64K id space, it can be store as uint16_t\n+// rather than uint32_t to save memory.\n+class DeltaIndex : public RefCountedThreadSafe<DeltaIndex> {\n+public:\n+    static const uint32_t npos = 0xffffffffu;\n+\n+    DeltaIndex() = default;\n+\n+    // get memory consumption\n+    size_t memory() const;\n+\n+    // find rowid(rid) in the index,\n+    // return index position if found, else return npos\n+    uint32_t find_idx(uint32_t rid);\n+\n+    // get a block's index position range as [start, end)\n+    void block_range(uint32_t bid, uint32_t* start, uint32_t* end) const {\n+        if (bid < _block_ends.size()) {\n+            *start = bid > 0 ? _block_ends[bid - 1] : 0;\n+            *end = _block_ends[bid];\n+        } else {\n+            *start = 0;\n+            *end = 0;\n+        }\n+    }\n+\n+    // Return true this index has any rowid belonging to this block", "originalCommit": "840344cdddad3f024bb06029eb34b3ebca540509", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU4MjgwMQ==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422582801", "bodyText": "fixed", "author": "decster", "createdAt": "2020-05-10T04:30:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxMDA1NA=="}], "type": "inlineReview"}, {"oid": "409ea6e01d293e8dd4ac47fa1e8ab2e2b027d07b", "url": "https://github.com/apache/incubator-doris/commit/409ea6e01d293e8dd4ac47fa1e8ab2e2b027d07b", "message": "[Memory Engine] add core column related classes: add more comment, remove DLOG", "committedDate": "2020-05-10T01:13:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5NjMxMQ==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422596311", "bodyText": "would better naming mutable_data().", "author": "kangkaisen", "createdAt": "2020-05-10T06:38:03Z", "path": "be/src/olap/memory/buffer.h", "diffHunk": "@@ -0,0 +1,74 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"olap/memory/common.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+// A generic buffer holding column base and delta data\n+// It can be considered as an array of any primitive type, but it does not\n+// have compile time type information, user can use utility method as<T> to\n+// get typed array view.\n+class Buffer {\n+public:\n+    Buffer() = default;\n+    ~Buffer();\n+\n+    // allocate memory for this buffer, with buffer byte size of bsize\n+    Status alloc(size_t bsize);\n+\n+    // clear buffer, free memory\n+    void clear();\n+\n+    // set all memory content to zero\n+    void set_zero();\n+\n+    // return true if this buffer is not empty\n+    operator bool() const { return _data != nullptr; }\n+\n+    // returns a direct pointer to the memory array\n+    const uint8_t* data() const { return _data; }\n+\n+    // returns a direct pointer to the memory array\n+    uint8_t* data() { return _data; }", "originalCommit": "409ea6e01d293e8dd4ac47fa1e8ab2e2b027d07b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NTA0Mw==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422755043", "bodyText": "There are already many places use this naming convention, and class in std also use this convention.", "author": "decster", "createdAt": "2020-05-11T03:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5NjMxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEwOTI3OA==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r423109278", "bodyText": "OK", "author": "kangkaisen", "createdAt": "2020-05-11T15:07:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5NjMxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5NzQ1MQ==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422597451", "bodyText": "Why use ssize_t?  _base_idx could be negative?", "author": "kangkaisen", "createdAt": "2020-05-10T06:48:28Z", "path": "be/src/olap/memory/column.h", "diffHunk": "@@ -0,0 +1,101 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"olap/memory/column_block.h\"\n+#include \"olap/memory/column_delta.h\"\n+#include \"olap/memory/common.h\"\n+#include \"olap/memory/schema.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+class ColumnReader;\n+class ColumnWriter;\n+\n+// Column store all the data of a column, including base and deltas.\n+// It supports single-writer multi-reader concurrency.\n+// It's properties are all immutable except _base and _versions.\n+// _base and _versions use std::vector, which is basically thread-safe\n+// in-practice for single-writer/multi-reader access, if there isn't\n+// any over-capacity realloc or delta compaction/GC caused data change.\n+// When these situations occur, we do a copy-on-write.\n+//\n+// TODO: add column read&writer\n+class Column : public RefCountedThreadSafe<Column> {\n+public:\n+    static const uint32_t BLOCK_SIZE = 1 << 16;\n+    static const uint32_t BLOCK_MASK = 0xffff;\n+\n+    // create a Column which provided column schema, underlying storage_type and initial version\n+    Column(const ColumnSchema& cs, ColumnType storage_type, uint64_t version);\n+\n+    // copy-on-write a new Column with new capacity\n+    Column(const Column& rhs, size_t new_base_capacity, size_t new_version_capacity);\n+\n+    // get column schema\n+    const ColumnSchema& schema() { return _cs; }\n+\n+    // get memory usage in bytes\n+    size_t memory() const;\n+\n+    string debug_string() const;\n+\n+    // read this Column at a specific version, get a reader for this Column\n+    // support multiple concurrent readers\n+    Status read(uint64_t version, std::unique_ptr<ColumnReader>* reader);\n+\n+    // write this Column, get a writer for this Column\n+    // caller needs to make sure there is only one or no writer exists at any time\n+    Status write(std::unique_ptr<ColumnWriter>* writer);\n+\n+private:\n+    ColumnSchema _cs;\n+    // For some types the storage_type may be different from actual type from schema.\n+    // For example, string stored in dictionary, so column_block store a integer id,\n+    // and the storage type may change as the dictionary grows, e.g. from uint8 to uint16\n+    ColumnType _storage_type;\n+    // base's position at _versions vector\n+    ssize_t _base_idx;", "originalCommit": "409ea6e01d293e8dd4ac47fa1e8ab2e2b027d07b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NjQ1MQ==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422756451", "bodyText": "This is for usage in Column.cpp, but I guess change code in for loop would be better.\n       for (ssize_t i = static_cast<ssize_t>(_base_idx) - 1; i >= 0; i--) {\nfixed", "author": "decster", "createdAt": "2020-05-11T03:11:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5NzQ1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5NzU1NA==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422597554", "bodyText": "Why is 64 ? Which should be a const value.", "author": "kangkaisen", "createdAt": "2020-05-10T06:49:31Z", "path": "be/src/olap/memory/column.cpp", "diffHunk": "@@ -0,0 +1,124 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"olap/memory/column.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+Column::Column(const ColumnSchema& cs, ColumnType storage_type, uint64_t version)\n+        : _cs(cs), _storage_type(storage_type), _base_idx(0) {\n+    _base.reserve(64);", "originalCommit": "409ea6e01d293e8dd4ac47fa1e8ab2e2b027d07b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NTA3Mw==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422755073", "bodyText": "fixed", "author": "decster", "createdAt": "2020-05-11T03:05:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5NzU1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NzEwOA==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422757108", "bodyText": "It's the step size for base vector and version vector when over capacity and need to grow", "author": "decster", "createdAt": "2020-05-11T03:15:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5NzU1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5Nzc4OQ==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422597789", "bodyText": "esize  means element_size\uff1f would better add a comment for this method.", "author": "kangkaisen", "createdAt": "2020-05-10T06:51:49Z", "path": "be/src/olap/memory/column_block.h", "diffHunk": "@@ -0,0 +1,53 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"olap/memory/buffer.h\"\n+#include \"olap/memory/common.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+// ColumnBlock stores one block of data for a Column\n+class ColumnBlock : public RefCountedThreadSafe<ColumnBlock> {\n+public:\n+    ColumnBlock() = default;\n+\n+    size_t memory() const;\n+\n+    Buffer& data() { return _data; }\n+\n+    Buffer& nulls() { return _nulls; }\n+\n+    Status alloc(size_t size, size_t esize);", "originalCommit": "409ea6e01d293e8dd4ac47fa1e8ab2e2b027d07b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc0ODUzMw==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422748533", "bodyText": "Sure", "author": "decster", "createdAt": "2020-05-11T02:33:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5Nzc4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NTEwMw==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422755103", "bodyText": "fixed", "author": "decster", "createdAt": "2020-05-11T03:05:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5Nzc4OQ=="}], "type": "inlineReview"}, {"oid": "43cef2a73e9eb7dd6fd28507157c6321de4ebd85", "url": "https://github.com/apache/incubator-doris/commit/43cef2a73e9eb7dd6fd28507157c6321de4ebd85", "message": "[Memory Engine] add core column related classes: add more comments, address review comments", "committedDate": "2020-05-11T03:13:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3MjI5OA==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r422972298", "bodyText": "spell error, TabletSchema", "author": "chaoyli", "createdAt": "2020-05-11T11:26:33Z", "path": "be/src/olap/memory/schema.h", "diffHunk": "@@ -0,0 +1,80 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"olap/memory/common.h\"\n+#include \"olap/tablet_schema.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+// This file contains type and schema adaptors\n+// from olap's type and schema to memory engine's type and schema\n+\n+// Memory engine's column type, just use FieldType for now\n+typedef FieldType ColumnType;\n+\n+// Memory engine's column schema, simple wrapper of TabletColumn.\n+// TODO: Add more properties and methods later\n+class ColumnSchema {\n+public:\n+    explicit ColumnSchema(const TabletColumn& tcolumn);\n+    ColumnSchema(uint32_t cid, const string& name, ColumnType type, bool nullable, bool is_key);\n+    inline uint32_t cid() const { return static_cast<uint32_t>(_tcolumn.unique_id()); }\n+    inline std::string name() const { return _tcolumn.name(); }\n+    inline ColumnType type() const { return _tcolumn.type(); }\n+    inline bool is_nullable() const { return _tcolumn.is_nullable(); }\n+    inline bool is_key() const { return _tcolumn.is_key(); }\n+\n+    std::string type_name() const;\n+    std::string debug_string() const;\n+\n+private:\n+    TabletColumn _tcolumn;\n+};\n+\n+// Memory engine's tablet schema, simple wrapper of TabletSchema.\n+// Schema have some differences comparing to original TablteSchema:", "originalCommit": "43cef2a73e9eb7dd6fd28507157c6321de4ebd85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MDA0Mg==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r423450042", "bodyText": "fixed", "author": "decster", "createdAt": "2020-05-12T04:08:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3MjI5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAyMDA5NA==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r423020094", "bodyText": "use lower case to name the method will be better.", "author": "chaoyli", "createdAt": "2020-05-11T12:58:55Z", "path": "be/src/olap/memory/common.h", "diffHunk": "@@ -0,0 +1,44 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"common/logging.h\"\n+#include \"common/status.h\"\n+#include \"gutil/ref_counted.h\"\n+#include \"gutil/stringprintf.h\"\n+#include \"olap/olap_common.h\"\n+#include \"olap/olap_define.h\"\n+#include \"olap/types.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+template <class T, class ST>\n+inline T Padding(T v, ST pad) {", "originalCommit": "43cef2a73e9eb7dd6fd28507157c6321de4ebd85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MDAyOA==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r423450028", "bodyText": "fixed", "author": "decster", "createdAt": "2020-05-12T04:08:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAyMDA5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAyMDIzNA==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r423020234", "bodyText": "The same as the above method.", "author": "chaoyli", "createdAt": "2020-05-11T12:59:12Z", "path": "be/src/olap/memory/common.h", "diffHunk": "@@ -0,0 +1,44 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"common/logging.h\"\n+#include \"common/status.h\"\n+#include \"gutil/ref_counted.h\"\n+#include \"gutil/stringprintf.h\"\n+#include \"olap/olap_common.h\"\n+#include \"olap/olap_define.h\"\n+#include \"olap/types.h\"\n+\n+namespace doris {\n+namespace memory {\n+\n+template <class T, class ST>\n+inline T Padding(T v, ST pad) {\n+    return (v + pad - 1) / pad * pad;\n+}\n+\n+template <class T, class ST>\n+inline size_t NBlock(T v, ST bs) {", "originalCommit": "43cef2a73e9eb7dd6fd28507157c6321de4ebd85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MDAxMg==", "url": "https://github.com/apache/incubator-doris/pull/3508#discussion_r423450012", "bodyText": "fixed", "author": "decster", "createdAt": "2020-05-12T04:08:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAyMDIzNA=="}], "type": "inlineReview"}, {"oid": "4a6d1d652e63023db2b2184cb22cf083434fca72", "url": "https://github.com/apache/incubator-doris/commit/4a6d1d652e63023db2b2184cb22cf083434fca72", "message": "[Memory Engine] add core column related classes: address review issues", "committedDate": "2020-05-12T03:40:44Z", "type": "commit"}, {"oid": "a6fb2f7ff98f2c2be34ff8362dd1f2e9179bf331", "url": "https://github.com/apache/incubator-doris/commit/a6fb2f7ff98f2c2be34ff8362dd1f2e9179bf331", "message": "[Memory Engine] add core column related classes: fix build bug", "committedDate": "2020-05-12T08:13:54Z", "type": "commit"}]}