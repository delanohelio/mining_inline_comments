{"pr_number": 3135, "pr_title": "support subquery in case when statement", "pr_createdAt": "2020-03-17T12:28:59Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3135", "timeline": [{"oid": "8c4e7fdf7723b37151e453cb43d12698625bb76e", "url": "https://github.com/apache/incubator-doris/commit/8c4e7fdf7723b37151e453cb43d12698625bb76e", "message": "support subquery in case when statement", "committedDate": "2020-03-17T12:31:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNjQ4MA==", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r393726480", "bodyText": "Add comment for this member~", "author": "morningman", "createdAt": "2020-03-17T14:36:41Z", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -102,6 +103,8 @@\n     // Set in analyze().\n     protected String sqlString_;\n \n+    private boolean subqueryInCase = false;", "originalCommit": "8c4e7fdf7723b37151e453cb43d12698625bb76e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNzY3NQ==", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r393727675", "bodyText": "Add comments for this method.", "author": "morningman", "createdAt": "2020-03-17T14:38:23Z", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -1244,6 +1213,46 @@ public void rewriteExprs(ExprRewriter rewriter) throws AnalysisException {\n                 orderByElem.setExpr(rewriter.rewrite(orderByElem.getExpr(), analyzer));\n             }\n         }\n+        if (subqueryInCase) {\n+            for (SelectListItem item : selectList.getItems()) {\n+                if (!(item.getExpr() instanceof CaseExpr)) {\n+                    continue;\n+                }\n+                if (!item.getExpr().contains(Predicates.instanceOf(Subquery.class))) {\n+                    continue;\n+                }\n+                item.setExpr(rewriteSubquery(item.getExpr()));\n+            }\n+        }\n+    }\n+\n+\n+    private Expr rewriteSubquery(Expr expr) throws AnalysisException {", "originalCommit": "8c4e7fdf7723b37151e453cb43d12698625bb76e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyOTcyNQ==", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r393729725", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                       expr = new SlotRef(new TableName(null, alias), colAlias);\n          \n          \n            \n                        expr = new SlotRef(new TableName(null, alias), colAlias);", "author": "morningman", "createdAt": "2020-03-17T14:41:09Z", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -1244,6 +1213,46 @@ public void rewriteExprs(ExprRewriter rewriter) throws AnalysisException {\n                 orderByElem.setExpr(rewriter.rewrite(orderByElem.getExpr(), analyzer));\n             }\n         }\n+        if (subqueryInCase) {\n+            for (SelectListItem item : selectList.getItems()) {\n+                if (!(item.getExpr() instanceof CaseExpr)) {\n+                    continue;\n+                }\n+                if (!item.getExpr().contains(Predicates.instanceOf(Subquery.class))) {\n+                    continue;\n+                }\n+                item.setExpr(rewriteSubquery(item.getExpr()));\n+            }\n+        }\n+    }\n+\n+\n+    private Expr rewriteSubquery(Expr expr) throws AnalysisException {\n+        if (expr instanceof Subquery) {\n+            if (!(((Subquery) expr).getStatement() instanceof SelectStmt) ) {\n+                throw new AnalysisException(\"only support select subquery in case statement.\");\n+            }\n+            SelectStmt subquery = (SelectStmt)((Subquery) expr).getStatement();\n+            if (subquery.getSelectList().getItems().size() != 1) {\n+                throw new AnalysisException(\"only support scala select subquery in case statement.\");\n+            }\n+            String alias = getTableAliasGenerator().getNextAlias();\n+            String colAlias = getColumnAliasGenerator().getNextAlias();\n+            InlineViewRef inlineViewRef = new InlineViewRef(alias, subquery, Arrays.asList(colAlias));\n+            try {\n+                inlineViewRef.analyze(analyzer);\n+            } catch (UserException e) {\n+                throw new AnalysisException(e.getMessage());\n+            }\n+            fromClause_.add(inlineViewRef);\n+           expr = new SlotRef(new TableName(null, alias), colAlias);", "originalCommit": "8c4e7fdf7723b37151e453cb43d12698625bb76e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMzMyNQ==", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r393733325", "bodyText": "How do you make sure the subquery is like select sum(k1) from tbl, not select k1 from tbl?", "author": "morningman", "createdAt": "2020-03-17T14:46:18Z", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -1244,6 +1213,46 @@ public void rewriteExprs(ExprRewriter rewriter) throws AnalysisException {\n                 orderByElem.setExpr(rewriter.rewrite(orderByElem.getExpr(), analyzer));\n             }\n         }\n+        if (subqueryInCase) {\n+            for (SelectListItem item : selectList.getItems()) {\n+                if (!(item.getExpr() instanceof CaseExpr)) {\n+                    continue;\n+                }\n+                if (!item.getExpr().contains(Predicates.instanceOf(Subquery.class))) {\n+                    continue;\n+                }\n+                item.setExpr(rewriteSubquery(item.getExpr()));\n+            }\n+        }\n+    }\n+\n+\n+    private Expr rewriteSubquery(Expr expr) throws AnalysisException {\n+        if (expr instanceof Subquery) {\n+            if (!(((Subquery) expr).getStatement() instanceof SelectStmt) ) {\n+                throw new AnalysisException(\"only support select subquery in case statement.\");\n+            }\n+            SelectStmt subquery = (SelectStmt)((Subquery) expr).getStatement();\n+            if (subquery.getSelectList().getItems().size() != 1) {", "originalCommit": "8c4e7fdf7723b37151e453cb43d12698625bb76e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA4NjQ4MQ==", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r394086481", "bodyText": "this expr is validate by the predicate of case when clause", "author": "yangzhg", "createdAt": "2020-03-18T03:23:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMzMyNQ=="}], "type": "inlineReview"}, {"oid": "0d70e001cc07eea5446e142afdb5f5fea1d13039", "url": "https://github.com/apache/incubator-doris/commit/0d70e001cc07eea5446e142afdb5f5fea1d13039", "message": "support subquery in case when statement", "committedDate": "2020-03-18T02:45:56Z", "type": "forcePushed"}, {"oid": "77da1914393aae772a0c07ea96ea72b5e0a8bc6d", "url": "https://github.com/apache/incubator-doris/commit/77da1914393aae772a0c07ea96ea72b5e0a8bc6d", "message": "support subquery in case when statement", "committedDate": "2020-03-18T03:28:58Z", "type": "forcePushed"}, {"oid": "f86db203a09b72be782ed69dd22c03a6d81b45f1", "url": "https://github.com/apache/incubator-doris/commit/f86db203a09b72be782ed69dd22c03a6d81b45f1", "message": "support subquery in case when statement", "committedDate": "2020-03-18T10:22:19Z", "type": "forcePushed"}, {"oid": "14ec1fc12b5b754fb36950d7619b5d287c616b32", "url": "https://github.com/apache/incubator-doris/commit/14ec1fc12b5b754fb36950d7619b5d287c616b32", "message": "support subquery in case when statement", "committedDate": "2020-03-18T11:44:55Z", "type": "forcePushed"}, {"oid": "93074c980c66d9964baade9aafa127c19f78ecb9", "url": "https://github.com/apache/incubator-doris/commit/93074c980c66d9964baade9aafa127c19f78ecb9", "message": "support subquery in case when statement", "committedDate": "2020-03-19T02:01:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3OTAwNA==", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r394779004", "bodyText": "The entire query should be reanalyzed if there is subquery is rewritten. So maybe this method should be move to StmtRewriter.", "author": "EmmyMiao87", "createdAt": "2020-03-19T04:01:21Z", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -1246,6 +1228,68 @@ public void rewriteExprs(ExprRewriter rewriter) throws AnalysisException {\n         }\n     }\n \n+    /** rewrite subquery in case when to an inline view\n+     *  subquery in case when statement like\n+     *\n+     * SELECT CASE\n+     *         WHEN (\n+     *             SELECT COUNT(*) / 2\n+     *             FROM t\n+     *         ) > k4 THEN (\n+     *             SELECT AVG(k4)\n+     *             FROM t\n+     *         )\n+     *         ELSE (\n+     *             SELECT SUM(k4)\n+     *             FROM t\n+     *         )\n+     *     END AS kk4\n+     * FROM t;\n+     * this statement will be rewrite to\n+     *\n+     * SELECT CASE\n+     *         WHEN t1.a > k4 THEN t2.a\n+     *         ELSE t3.a\n+     *     END AS kk4\n+     * FROM t, (\n+     *         SELECT COUNT(*) / 2 AS a\n+     *         FROM t\n+     *     ) t1,  (\n+     *         SELECT AVG(k4) AS a\n+     *         FROM t\n+     *     ) t2,  (\n+     *         SELECT SUM(k4) AS a\n+     *         FROM t\n+     *     ) t3;\n+     */\n+    private Expr rewriteSubquery(Expr expr) throws AnalysisException {", "originalCommit": "93074c980c66d9964baade9aafa127c19f78ecb9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3OTEyNQ==", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r394779125", "bodyText": "The subquery should be reset before it is reanalyzed.", "author": "EmmyMiao87", "createdAt": "2020-03-19T04:02:05Z", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -1246,6 +1228,68 @@ public void rewriteExprs(ExprRewriter rewriter) throws AnalysisException {\n         }\n     }\n \n+    /** rewrite subquery in case when to an inline view\n+     *  subquery in case when statement like\n+     *\n+     * SELECT CASE\n+     *         WHEN (\n+     *             SELECT COUNT(*) / 2\n+     *             FROM t\n+     *         ) > k4 THEN (\n+     *             SELECT AVG(k4)\n+     *             FROM t\n+     *         )\n+     *         ELSE (\n+     *             SELECT SUM(k4)\n+     *             FROM t\n+     *         )\n+     *     END AS kk4\n+     * FROM t;\n+     * this statement will be rewrite to\n+     *\n+     * SELECT CASE\n+     *         WHEN t1.a > k4 THEN t2.a\n+     *         ELSE t3.a\n+     *     END AS kk4\n+     * FROM t, (\n+     *         SELECT COUNT(*) / 2 AS a\n+     *         FROM t\n+     *     ) t1,  (\n+     *         SELECT AVG(k4) AS a\n+     *         FROM t\n+     *     ) t2,  (\n+     *         SELECT SUM(k4) AS a\n+     *         FROM t\n+     *     ) t3;\n+     */\n+    private Expr rewriteSubquery(Expr expr) throws AnalysisException {\n+        if (expr instanceof Subquery) {\n+            if (!(((Subquery) expr).getStatement() instanceof SelectStmt)) {\n+                throw new AnalysisException(\"only support select subquery in case statement.\");\n+            }\n+            SelectStmt subquery = (SelectStmt) ((Subquery) expr).getStatement();\n+            if (subquery.getSelectList().getItems().size() != 1) {\n+                throw new AnalysisException(\"only support scala select subquery in case statement.\");\n+            }\n+            String alias = getTableAliasGenerator().getNextAlias();\n+            String colAlias = getColumnAliasGenerator().getNextAlias();\n+            InlineViewRef inlineViewRef = new InlineViewRef(alias, subquery, Arrays.asList(colAlias));", "originalCommit": "93074c980c66d9964baade9aafa127c19f78ecb9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3OTIwNA==", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r394779204", "bodyText": "How about the case expr in the where predicate?", "author": "EmmyMiao87", "createdAt": "2020-03-19T04:02:32Z", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -341,7 +345,11 @@ public void analyze(Analyzer analyzer) throws AnalysisException, UserException {\n                 // of expr child and depth limits (toColumn() label may call toSql()).\n                 item.getExpr().analyze(analyzer);\n                 if (item.getExpr().contains(Predicates.instanceOf(Subquery.class))) {\n-                    throw new AnalysisException(\"Subquery is not supported in the select list.\");\n+                    if (item.getExpr() instanceof CaseExpr) {", "originalCommit": "93074c980c66d9964baade9aafa127c19f78ecb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgxNzUyNg==", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r394817526", "bodyText": "this is not allowed by in predicate or other predicate", "author": "yangzhg", "createdAt": "2020-03-19T06:40:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3OTIwNA=="}], "type": "inlineReview"}, {"oid": "70a9580ab39819648ed545871198b00645363a8b", "url": "https://github.com/apache/incubator-doris/commit/70a9580ab39819648ed545871198b00645363a8b", "message": "support subquery in case when statement", "committedDate": "2020-03-19T06:37:29Z", "type": "forcePushed"}, {"oid": "744d4531c9b612828aa423fdda00d926658a4bb1", "url": "https://github.com/apache/incubator-doris/commit/744d4531c9b612828aa423fdda00d926658a4bb1", "message": "support subquery in case when statement", "committedDate": "2020-03-19T06:42:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg1ODcwNA==", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r394858704", "bodyText": "Reorder your import order in your IDE:\norg.apache.doris\ncom\norg\njava\njavax", "author": "morningman", "createdAt": "2020-03-19T08:27:16Z", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -17,6 +17,15 @@\n \n package org.apache.doris.analysis;\n \n+import com.google.common.base.Preconditions;", "originalCommit": "744d4531c9b612828aa423fdda00d926658a4bb1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "adfeb6cb2ca8d24c25624789a01b789b7d53b88e", "url": "https://github.com/apache/incubator-doris/commit/adfeb6cb2ca8d24c25624789a01b789b7d53b88e", "message": "support subquery in case when statement", "committedDate": "2020-03-19T11:36:16Z", "type": "commit"}, {"oid": "adfeb6cb2ca8d24c25624789a01b789b7d53b88e", "url": "https://github.com/apache/incubator-doris/commit/adfeb6cb2ca8d24c25624789a01b789b7d53b88e", "message": "support subquery in case when statement", "committedDate": "2020-03-19T11:36:16Z", "type": "forcePushed"}, {"oid": "f65df269a6f0a1ed3db52e60dd3077e1642e2f9d", "url": "https://github.com/apache/incubator-doris/commit/f65df269a6f0a1ed3db52e60dd3077e1642e2f9d", "message": "reorder rewrite", "committedDate": "2020-03-20T02:37:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNjcxNw==", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r395416717", "bodyText": "If the item of select list is '*'", "author": "EmmyMiao87", "createdAt": "2020-03-20T02:41:43Z", "path": "fe/src/main/java/org/apache/doris/analysis/StmtRewriter.java", "diffHunk": "@@ -953,5 +957,81 @@ private static Expr createJoinConjunct(Expr exprWithSubquery, InlineViewRef inli\n         smap.put(subquery, subquerySubstitute);\n         return exprWithSubquery.substitute(smap, analyzer, false);\n     }\n+\n+    /** rewrite subquery in case when to an inline view\n+     *  subquery in case when statement like\n+     *\n+     * SELECT CASE\n+     *         WHEN (\n+     *             SELECT COUNT(*) / 2\n+     *             FROM t\n+     *         ) > k4 THEN (\n+     *             SELECT AVG(k4)\n+     *             FROM t\n+     *         )\n+     *         ELSE (\n+     *             SELECT SUM(k4)\n+     *             FROM t\n+     *         )\n+     *     END AS kk4\n+     * FROM t;\n+     * this statement will be rewrite to\n+     *\n+     * SELECT CASE\n+     *         WHEN t1.a > k4 THEN t2.a\n+     *         ELSE t3.a\n+     *     END AS kk4\n+     * FROM t, (\n+     *         SELECT COUNT(*) / 2 AS a\n+     *         FROM t\n+     *     ) t1,  (\n+     *         SELECT AVG(k4) AS a\n+     *         FROM t\n+     *     ) t2,  (\n+     *         SELECT SUM(k4) AS a\n+     *         FROM t\n+     *     ) t3;\n+     */\n+    private static void rewriteCaseWhenSubqueries(SelectStmt stmt, Analyzer analyzer) throws AnalysisException {\n+        for (SelectListItem item: stmt.getSelectList().getItems()) {\n+            if (!(item.getExpr() instanceof CaseExpr)) {\n+                continue;\n+            }\n+            if (!item.getExpr().contains(Predicates.instanceOf(Subquery.class))) {\n+                continue;\n+            }\n+            item.setExpr(rewriteCaseWhenSubquery(item.getExpr(), stmt, analyzer));\n+        }\n+\n+    }\n+\n+    private static Expr rewriteCaseWhenSubquery(Expr expr, SelectStmt stmt, Analyzer analyzer)\n+            throws AnalysisException {\n+        if (expr instanceof Subquery) {\n+            if (!(((Subquery) expr).getStatement() instanceof SelectStmt)) {\n+                throw new AnalysisException(\"only support select subquery in case statement.\");\n+            }\n+            SelectStmt subquery = (SelectStmt) ((Subquery) expr).getStatement();\n+            if (subquery.getSelectList().getItems().size() != 1) {", "originalCommit": "f65df269a6f0a1ed3db52e60dd3077e1642e2f9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNzE3OQ==", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r395417179", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new AnalysisException(\"only support scala select subquery in case statement.\");\n          \n          \n            \n                            throw new AnalysisException(\"Only support one result column of subquery in case statement.\");", "author": "EmmyMiao87", "createdAt": "2020-03-20T02:43:47Z", "path": "fe/src/main/java/org/apache/doris/analysis/StmtRewriter.java", "diffHunk": "@@ -953,5 +957,81 @@ private static Expr createJoinConjunct(Expr exprWithSubquery, InlineViewRef inli\n         smap.put(subquery, subquerySubstitute);\n         return exprWithSubquery.substitute(smap, analyzer, false);\n     }\n+\n+    /** rewrite subquery in case when to an inline view\n+     *  subquery in case when statement like\n+     *\n+     * SELECT CASE\n+     *         WHEN (\n+     *             SELECT COUNT(*) / 2\n+     *             FROM t\n+     *         ) > k4 THEN (\n+     *             SELECT AVG(k4)\n+     *             FROM t\n+     *         )\n+     *         ELSE (\n+     *             SELECT SUM(k4)\n+     *             FROM t\n+     *         )\n+     *     END AS kk4\n+     * FROM t;\n+     * this statement will be rewrite to\n+     *\n+     * SELECT CASE\n+     *         WHEN t1.a > k4 THEN t2.a\n+     *         ELSE t3.a\n+     *     END AS kk4\n+     * FROM t, (\n+     *         SELECT COUNT(*) / 2 AS a\n+     *         FROM t\n+     *     ) t1,  (\n+     *         SELECT AVG(k4) AS a\n+     *         FROM t\n+     *     ) t2,  (\n+     *         SELECT SUM(k4) AS a\n+     *         FROM t\n+     *     ) t3;\n+     */\n+    private static void rewriteCaseWhenSubqueries(SelectStmt stmt, Analyzer analyzer) throws AnalysisException {\n+        for (SelectListItem item: stmt.getSelectList().getItems()) {\n+            if (!(item.getExpr() instanceof CaseExpr)) {\n+                continue;\n+            }\n+            if (!item.getExpr().contains(Predicates.instanceOf(Subquery.class))) {\n+                continue;\n+            }\n+            item.setExpr(rewriteCaseWhenSubquery(item.getExpr(), stmt, analyzer));\n+        }\n+\n+    }\n+\n+    private static Expr rewriteCaseWhenSubquery(Expr expr, SelectStmt stmt, Analyzer analyzer)\n+            throws AnalysisException {\n+        if (expr instanceof Subquery) {\n+            if (!(((Subquery) expr).getStatement() instanceof SelectStmt)) {\n+                throw new AnalysisException(\"only support select subquery in case statement.\");\n+            }\n+            SelectStmt subquery = (SelectStmt) ((Subquery) expr).getStatement();\n+            if (subquery.getSelectList().getItems().size() != 1) {\n+                throw new AnalysisException(\"only support scala select subquery in case statement.\");", "originalCommit": "f65df269a6f0a1ed3db52e60dd3077e1642e2f9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNzM1MA==", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r395417350", "bodyText": "The correlated subquery should be forbidden.", "author": "EmmyMiao87", "createdAt": "2020-03-20T02:44:53Z", "path": "fe/src/main/java/org/apache/doris/analysis/StmtRewriter.java", "diffHunk": "@@ -953,5 +957,81 @@ private static Expr createJoinConjunct(Expr exprWithSubquery, InlineViewRef inli\n         smap.put(subquery, subquerySubstitute);\n         return exprWithSubquery.substitute(smap, analyzer, false);\n     }\n+\n+    /** rewrite subquery in case when to an inline view\n+     *  subquery in case when statement like\n+     *\n+     * SELECT CASE\n+     *         WHEN (\n+     *             SELECT COUNT(*) / 2\n+     *             FROM t\n+     *         ) > k4 THEN (\n+     *             SELECT AVG(k4)\n+     *             FROM t\n+     *         )\n+     *         ELSE (\n+     *             SELECT SUM(k4)\n+     *             FROM t\n+     *         )\n+     *     END AS kk4\n+     * FROM t;\n+     * this statement will be rewrite to\n+     *\n+     * SELECT CASE\n+     *         WHEN t1.a > k4 THEN t2.a\n+     *         ELSE t3.a\n+     *     END AS kk4\n+     * FROM t, (\n+     *         SELECT COUNT(*) / 2 AS a\n+     *         FROM t\n+     *     ) t1,  (\n+     *         SELECT AVG(k4) AS a\n+     *         FROM t\n+     *     ) t2,  (\n+     *         SELECT SUM(k4) AS a\n+     *         FROM t\n+     *     ) t3;\n+     */\n+    private static void rewriteCaseWhenSubqueries(SelectStmt stmt, Analyzer analyzer) throws AnalysisException {\n+        for (SelectListItem item: stmt.getSelectList().getItems()) {\n+            if (!(item.getExpr() instanceof CaseExpr)) {\n+                continue;\n+            }\n+            if (!item.getExpr().contains(Predicates.instanceOf(Subquery.class))) {\n+                continue;\n+            }\n+            item.setExpr(rewriteCaseWhenSubquery(item.getExpr(), stmt, analyzer));\n+        }\n+\n+    }\n+\n+    private static Expr rewriteCaseWhenSubquery(Expr expr, SelectStmt stmt, Analyzer analyzer)\n+            throws AnalysisException {\n+        if (expr instanceof Subquery) {\n+            if (!(((Subquery) expr).getStatement() instanceof SelectStmt)) {\n+                throw new AnalysisException(\"only support select subquery in case statement.\");\n+            }\n+            SelectStmt subquery = (SelectStmt) ((Subquery) expr).getStatement();\n+            if (subquery.getSelectList().getItems().size() != 1) {", "originalCommit": "f65df269a6f0a1ed3db52e60dd3077e1642e2f9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMxMDc1Nw==", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r396310757", "bodyText": "correlated subquery  is supported", "author": "yangzhg", "createdAt": "2020-03-23T09:25:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNzM1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNzc1Mw==", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r395417753", "bodyText": "The table name could be fetch from inline view ref", "author": "EmmyMiao87", "createdAt": "2020-03-20T02:47:05Z", "path": "fe/src/main/java/org/apache/doris/analysis/StmtRewriter.java", "diffHunk": "@@ -953,5 +957,81 @@ private static Expr createJoinConjunct(Expr exprWithSubquery, InlineViewRef inli\n         smap.put(subquery, subquerySubstitute);\n         return exprWithSubquery.substitute(smap, analyzer, false);\n     }\n+\n+    /** rewrite subquery in case when to an inline view\n+     *  subquery in case when statement like\n+     *\n+     * SELECT CASE\n+     *         WHEN (\n+     *             SELECT COUNT(*) / 2\n+     *             FROM t\n+     *         ) > k4 THEN (\n+     *             SELECT AVG(k4)\n+     *             FROM t\n+     *         )\n+     *         ELSE (\n+     *             SELECT SUM(k4)\n+     *             FROM t\n+     *         )\n+     *     END AS kk4\n+     * FROM t;\n+     * this statement will be rewrite to\n+     *\n+     * SELECT CASE\n+     *         WHEN t1.a > k4 THEN t2.a\n+     *         ELSE t3.a\n+     *     END AS kk4\n+     * FROM t, (\n+     *         SELECT COUNT(*) / 2 AS a\n+     *         FROM t\n+     *     ) t1,  (\n+     *         SELECT AVG(k4) AS a\n+     *         FROM t\n+     *     ) t2,  (\n+     *         SELECT SUM(k4) AS a\n+     *         FROM t\n+     *     ) t3;\n+     */\n+    private static void rewriteCaseWhenSubqueries(SelectStmt stmt, Analyzer analyzer) throws AnalysisException {\n+        for (SelectListItem item: stmt.getSelectList().getItems()) {\n+            if (!(item.getExpr() instanceof CaseExpr)) {\n+                continue;\n+            }\n+            if (!item.getExpr().contains(Predicates.instanceOf(Subquery.class))) {\n+                continue;\n+            }\n+            item.setExpr(rewriteCaseWhenSubquery(item.getExpr(), stmt, analyzer));\n+        }\n+\n+    }\n+\n+    private static Expr rewriteCaseWhenSubquery(Expr expr, SelectStmt stmt, Analyzer analyzer)\n+            throws AnalysisException {\n+        if (expr instanceof Subquery) {\n+            if (!(((Subquery) expr).getStatement() instanceof SelectStmt)) {\n+                throw new AnalysisException(\"only support select subquery in case statement.\");\n+            }\n+            SelectStmt subquery = (SelectStmt) ((Subquery) expr).getStatement();\n+            if (subquery.getSelectList().getItems().size() != 1) {\n+                throw new AnalysisException(\"only support scala select subquery in case statement.\");\n+            }\n+            subquery.reset();\n+            String alias = stmt.getTableAliasGenerator().getNextAlias();\n+            String colAlias = stmt.getColumnAliasGenerator().getNextAlias();\n+            InlineViewRef inlineViewRef = new InlineViewRef(alias, subquery, Arrays.asList(colAlias));\n+            try {\n+                inlineViewRef.analyze(analyzer);\n+            } catch (UserException e) {\n+                throw new AnalysisException(e.getMessage());\n+            }\n+            stmt.fromClause_.add(inlineViewRef);\n+            expr = new SlotRef(new TableName(null, alias), colAlias);", "originalCommit": "f65df269a6f0a1ed3db52e60dd3077e1642e2f9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyMTkyMA==", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r395421920", "bodyText": "first parameter is database name", "author": "yangzhg", "createdAt": "2020-03-20T03:11:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNzc1Mw=="}], "type": "inlineReview"}, {"oid": "73c965b41a9666f52a7be8d49513e225a5d677db", "url": "https://github.com/apache/incubator-doris/commit/73c965b41a9666f52a7be8d49513e225a5d677db", "message": "reorder rewrite", "committedDate": "2020-03-20T03:13:29Z", "type": "commit"}, {"oid": "f0377c4f2d8a13a42ae76b6abad1d6303289ac20", "url": "https://github.com/apache/incubator-doris/commit/f0377c4f2d8a13a42ae76b6abad1d6303289ac20", "message": "use inlineview alias", "committedDate": "2020-03-23T06:32:09Z", "type": "forcePushed"}, {"oid": "a64cda770051514c0c41e83a22c4f80003f856c5", "url": "https://github.com/apache/incubator-doris/commit/a64cda770051514c0c41e83a22c4f80003f856c5", "message": "use inlineview alias", "committedDate": "2020-03-23T09:19:47Z", "type": "forcePushed"}, {"oid": "dcfd0bed0162c897ea1e91b300c73e637db2366e", "url": "https://github.com/apache/incubator-doris/commit/dcfd0bed0162c897ea1e91b300c73e637db2366e", "message": "use inlineview alias", "committedDate": "2020-03-23T09:27:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM3Mzc2Mw==", "url": "https://github.com/apache/incubator-doris/pull/3135#discussion_r396373763", "bodyText": "The meaning of these two lines is not clear\u3002", "author": "wutiangan", "createdAt": "2020-03-23T11:12:35Z", "path": "fe/src/main/java/org/apache/doris/analysis/SelectList.java", "diffHunk": "@@ -83,7 +84,18 @@ public void reset() {\n     public void rewriteExprs(ExprRewriter rewriter, Analyzer analyzer)\n             throws AnalysisException {\n         for (SelectListItem item : items) {\n-            if (item.isStar()) continue;\n+            if (item.isStar()) {\n+                continue;\n+            }\n+            // when select list contain case when, for now subquery is supported in case-when\n+            // (or more subquery is supported in future) so subquery all need to rewrite", "originalCommit": "dcfd0bed0162c897ea1e91b300c73e637db2366e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2ed350fd722bf8ee6917af94397789f21b1d5e43", "url": "https://github.com/apache/incubator-doris/commit/2ed350fd722bf8ee6917af94397789f21b1d5e43", "message": "use inlineview alias", "committedDate": "2020-03-23T13:04:56Z", "type": "forcePushed"}, {"oid": "89a5db691360869df47b7285bb111751b438bab8", "url": "https://github.com/apache/incubator-doris/commit/89a5db691360869df47b7285bb111751b438bab8", "message": "use inlineview alias", "committedDate": "2020-03-24T01:58:13Z", "type": "forcePushed"}, {"oid": "2fee5b1b76e7c7cf59136eced42ab5bc421968e6", "url": "https://github.com/apache/incubator-doris/commit/2fee5b1b76e7c7cf59136eced42ab5bc421968e6", "message": "use inlineview alias", "committedDate": "2020-03-24T07:02:41Z", "type": "forcePushed"}, {"oid": "dcc95d015b50f34c9c8c9fab0435ca9e7bc150a6", "url": "https://github.com/apache/incubator-doris/commit/dcc95d015b50f34c9c8c9fab0435ca9e7bc150a6", "message": "use inlineview alias", "committedDate": "2020-03-24T07:03:53Z", "type": "forcePushed"}, {"oid": "0b78fd8c697f8a2e0f76650253d97b4d0731d8f1", "url": "https://github.com/apache/incubator-doris/commit/0b78fd8c697f8a2e0f76650253d97b4d0731d8f1", "message": "use inlineview alias", "committedDate": "2020-03-24T08:54:25Z", "type": "commit"}, {"oid": "0b78fd8c697f8a2e0f76650253d97b4d0731d8f1", "url": "https://github.com/apache/incubator-doris/commit/0b78fd8c697f8a2e0f76650253d97b4d0731d8f1", "message": "use inlineview alias", "committedDate": "2020-03-24T08:54:25Z", "type": "forcePushed"}]}