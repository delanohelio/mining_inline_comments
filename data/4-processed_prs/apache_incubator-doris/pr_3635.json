{"pr_number": 3635, "pr_title": "[Enhancement] Convert metric to Json format", "pr_createdAt": "2020-05-19T12:23:47Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3635", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5MzQzMA==", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r427293430", "bodyText": "Why not using rapidjson lib to generate the json object?", "author": "morningman", "createdAt": "2020-05-19T13:16:58Z", "path": "be/src/http/action/metrics_action.cpp", "diffHunk": "@@ -143,15 +143,74 @@ void SimpleCoreMetricsVisitor::visit(const std::string& prefix,\n     }\n }\n \n+class JsonMetricsVisitor : public MetricsVisitor {\n+public:\n+    JsonMetricsVisitor() {\n+        _ss << \"[\\n\";\n+    }\n+    virtual ~JsonMetricsVisitor() {}\n+    void visit(const std::string& prefix, const std::string& name,\n+               MetricCollector* collector) override;\n+    std::string to_string() { \n+        std::string json = _ss.str();\n+        json = json.substr(0, json.length() - 2);\n+        json += \"\\n]\\n\";\n+        return json;\n+    }\n+\n+private:\n+    std::stringstream _ss;\n+};\n+\n+void JsonMetricsVisitor::visit(const std::string& prefix,\n+                               const std::string& name,\n+                               MetricCollector* collector) {\n+    if (collector->empty() || name.empty()) {\n+        return;\n+    }\n+    switch (collector->type()) {\n+    case MetricType::COUNTER:\n+    case MetricType::GAUGE:\n+        for (auto& it : collector->metrics()) {\n+            const MetricLabels& labels = it.first;\n+            SimpleMetric* metric = reinterpret_cast<SimpleMetric*>(it.second);\n+            _ss << \"{\\n\\t\\\"tags\\\":\\n\\t{\\n\";", "originalCommit": "07baab5334f6998f687e42bd4ec0140d7eb455ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM3OTI5OA==", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r430379298", "bodyText": "I change it to rapidjson", "author": "chaoyli", "createdAt": "2020-05-26T12:37:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5MzQzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5MzU4NA==", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r427293584", "bodyText": "what is agent mean?", "author": "morningman", "createdAt": "2020-05-19T13:17:12Z", "path": "be/src/http/action/metrics_action.cpp", "diffHunk": "@@ -143,15 +143,74 @@ void SimpleCoreMetricsVisitor::visit(const std::string& prefix,\n     }\n }\n \n+class JsonMetricsVisitor : public MetricsVisitor {\n+public:\n+    JsonMetricsVisitor() {\n+        _ss << \"[\\n\";\n+    }\n+    virtual ~JsonMetricsVisitor() {}\n+    void visit(const std::string& prefix, const std::string& name,\n+               MetricCollector* collector) override;\n+    std::string to_string() { \n+        std::string json = _ss.str();\n+        json = json.substr(0, json.length() - 2);\n+        json += \"\\n]\\n\";\n+        return json;\n+    }\n+\n+private:\n+    std::stringstream _ss;\n+};\n+\n+void JsonMetricsVisitor::visit(const std::string& prefix,\n+                               const std::string& name,\n+                               MetricCollector* collector) {\n+    if (collector->empty() || name.empty()) {\n+        return;\n+    }\n+    switch (collector->type()) {\n+    case MetricType::COUNTER:\n+    case MetricType::GAUGE:\n+        for (auto& it : collector->metrics()) {\n+            const MetricLabels& labels = it.first;\n+            SimpleMetric* metric = reinterpret_cast<SimpleMetric*>(it.second);\n+            _ss << \"{\\n\\t\\\"tags\\\":\\n\\t{\\n\";\n+            _ss << \"\\t\\t\\\"metric\\\":\\\"\" << name << \"\\\"\";\n+            // labels\n+            if (!labels.empty()) {\n+                _ss << \",\\n\";\n+                int i = 0;\n+                for (auto& label : labels.labels) {\n+                    if (i++ > 0) {\n+                        _ss << \",\\n\";\n+                    }\n+                    _ss << \"\\t\\t\\\"\" << label.name << \"\\\":\\\"\" << label.value << \"\\\"\";\n+                }\n+            }\n+            _ss << \"\\n\\t},\\n\";\n+            _ss << \"\\t\\\"unit\\\":\\\"\" << metric->unit() << \"\\\",\\n\";\n+            _ss << \"\\t\\\"value\\\":\" << metric->to_string() << \"\\n\";\n+            _ss << \"},\\n\";\n+        }\n+        break;\n+    default:\n+        break;\n+    }\n+}\n+\n void MetricsAction::handle(HttpRequest* req) {\n     const std::string& type = req->param(\"type\");\n     std::string str;\n-    if (type != \"core\") {\n-        PrometheusMetricsVisitor visitor;\n+    if (type == \"core\") {\n+        SimpleCoreMetricsVisitor visitor;\n+        _metrics->collect(&visitor);\n+        str.assign(visitor.to_string());\n+    } else if (type == \"agent\") {", "originalCommit": "07baab5334f6998f687e42bd4ec0140d7eb455ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyNzkxOQ==", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r428627919", "bodyText": "The request is comes from a agent installed outof doris_be.", "author": "chaoyli", "createdAt": "2020-05-21T12:43:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5MzU4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5ODg0MQ==", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r427298841", "bodyText": "Modify the comment", "author": "morningman", "createdAt": "2020-05-19T13:24:31Z", "path": "fe/src/main/java/org/apache/doris/metric/JsonMetricVisitor.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.metric;\n+\n+import org.apache.doris.monitor.jvm.JvmStats;\n+import com.codahale.metrics.Histogram;\n+import java.util.List;\n+\n+/*\n+ * Like this:\n+ * # HELP doris_fe_job_load_broker_cost_ms doris_fe_job_load_broker_cost_ms \n+ * # TYPE doris_fe_job_load_broker_cost_ms gauge \n+ * doris_fe_job{job=\"load\", type=\"mini\", state=\"pending\"} 0\n+ */", "originalCommit": "07baab5334f6998f687e42bd4ec0140d7eb455ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5OTEzNg==", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r427299136", "bodyText": "Useless", "author": "morningman", "createdAt": "2020-05-19T13:24:57Z", "path": "fe/src/main/java/org/apache/doris/metric/JsonMetricVisitor.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.metric;\n+\n+import org.apache.doris.monitor.jvm.JvmStats;\n+import com.codahale.metrics.Histogram;\n+import java.util.List;\n+\n+/*\n+ * Like this:\n+ * # HELP doris_fe_job_load_broker_cost_ms doris_fe_job_load_broker_cost_ms \n+ * # TYPE doris_fe_job_load_broker_cost_ms gauge \n+ * doris_fe_job{job=\"load\", type=\"mini\", state=\"pending\"} 0\n+ */\n+public class JsonMetricVisitor extends MetricVisitor {\n+    // jvm\n+    private static final String JVM_HEAP_SIZE_BYTES = \"jvm_heap_size_bytes\";\n+    private static final String JVM_NON_HEAP_SIZE_BYTES = \"jvm_non_heap_size_bytes\";\n+    private static final String JVM_YOUNG_SIZE_BYTES = \"jvm_young_size_bytes\";\n+    private static final String JVM_OLD_SIZE_BYTES = \"jvm_old_size_bytes\";\n+    private static final String JVM_DIRECT_BUFFER_POOL_SIZE_BYTES = \"jvm_direct_buffer_pool_size_bytes\";\n+    private static final String JVM_YOUNG_GC = \"jvm_young_gc\";\n+    private static final String JVM_OLD_GC = \"jvm_old_gc\";\n+    private static final String JVM_THREAD = \"jvm_thread\";\n+\n+    private static final String HELP = \"# HELP \";", "originalCommit": "07baab5334f6998f687e42bd4ec0140d7eb455ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5OTQ1MA==", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r427299450", "bodyText": "You can use Gson lib to generate json object", "author": "morningman", "createdAt": "2020-05-19T13:25:24Z", "path": "fe/src/main/java/org/apache/doris/metric/JsonMetricVisitor.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.metric;\n+\n+import org.apache.doris.monitor.jvm.JvmStats;\n+import com.codahale.metrics.Histogram;\n+import java.util.List;\n+\n+/*\n+ * Like this:\n+ * # HELP doris_fe_job_load_broker_cost_ms doris_fe_job_load_broker_cost_ms \n+ * # TYPE doris_fe_job_load_broker_cost_ms gauge \n+ * doris_fe_job{job=\"load\", type=\"mini\", state=\"pending\"} 0\n+ */\n+public class JsonMetricVisitor extends MetricVisitor {\n+    // jvm\n+    private static final String JVM_HEAP_SIZE_BYTES = \"jvm_heap_size_bytes\";\n+    private static final String JVM_NON_HEAP_SIZE_BYTES = \"jvm_non_heap_size_bytes\";\n+    private static final String JVM_YOUNG_SIZE_BYTES = \"jvm_young_size_bytes\";\n+    private static final String JVM_OLD_SIZE_BYTES = \"jvm_old_size_bytes\";\n+    private static final String JVM_DIRECT_BUFFER_POOL_SIZE_BYTES = \"jvm_direct_buffer_pool_size_bytes\";\n+    private static final String JVM_YOUNG_GC = \"jvm_young_gc\";\n+    private static final String JVM_OLD_GC = \"jvm_old_gc\";\n+    private static final String JVM_THREAD = \"jvm_thread\";\n+\n+    private static final String HELP = \"# HELP \";\n+    private static final String TYPE = \"# TYPE \";\n+    private int ordinal = 0;\n+    private int metric_number = 0;\n+\n+    public JsonMetricVisitor(String prefix) {\n+        super(prefix);\n+    }\n+\n+    @Override\n+    public void setMetricNumber(int metric_number) {\n+        this.metric_number = metric_number;\n+    }\n+\n+    @Override\n+    public void visitJvm(StringBuilder sb, JvmStats jvmStats) {\n+        return;\n+    }\n+\n+    @Override\n+    public void visit(StringBuilder sb, @SuppressWarnings(\"rawtypes\") Metric metric) {\n+        if (ordinal++ == 0) {\n+            sb.append(\"[\\n\");\n+        }\n+        sb.append(\"{\\n\\t\\\"tags\\\":\\n\\t{\\n\");\n+        sb.append(\"\\t\\t\\\"metric\\\":\\\"\").append(metric.getName()).append(\"\\\"\");\n+\n+        // name\n+        @SuppressWarnings(\"unchecked\")\n+        List<MetricLabel> labels = metric.getLabels();\n+        if (!labels.isEmpty()) {\n+            sb.append(\",\\n\");\n+            int i = 0;\n+            for (MetricLabel label : labels) {\n+                if (i++ > 0) {\n+                    sb.append(\",\\n\");\n+                }\n+                sb.append(\"\\t\\t\\\"\").append(label.getKey()).append(\"\\\":\\\"\").append(label.getValue()).append(\"\\\"\");\n+            }\n+        }\n+        sb.append(\"\\n\\t},\\n\");\n+        sb.append(\"\\t\\\"unit\\\":\\\"\").append(metric.getUnit().name().toLowerCase()).append( \"\\\",\\n\");\n+\n+        // value\n+        sb.append(\"\\t\\\"value\\\":\").append(metric.getValue().toString()).append(\"\\n}\");", "originalCommit": "07baab5334f6998f687e42bd4ec0140d7eb455ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzODQzNw==", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r428638437", "bodyText": "Gson can convert the object to JSON. But in our MetricLabel, key and value is all defined as variable. If I use Gson to convert to JSON, the result is not what I wanted.", "author": "chaoyli", "createdAt": "2020-05-21T13:05:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5OTQ1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwMDM5Mg==", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r427300392", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private int metric_number = 0;\n          \n          \n            \n                private int metricNumber = 0;", "author": "morningman", "createdAt": "2020-05-19T13:26:46Z", "path": "fe/src/main/java/org/apache/doris/metric/SimpleCoreMetricVisitor.java", "diffHunk": "@@ -56,6 +56,9 @@\n \n     public static final String MAX_TABLET_COMPACTION_SCORE = \"max_tablet_compaction_score\";\n \n+    private int ordinal = 0;\n+    private int metric_number = 0;", "originalCommit": "07baab5334f6998f687e42bd4ec0140d7eb455ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwMDQ5NA==", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r427300494", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void setMetricNumber(int metric_number) {\n          \n          \n            \n                public void setMetricNumber(int metricNumber) {", "author": "morningman", "createdAt": "2020-05-19T13:26:55Z", "path": "fe/src/main/java/org/apache/doris/metric/SimpleCoreMetricVisitor.java", "diffHunk": "@@ -71,6 +74,11 @@ public SimpleCoreMetricVisitor(String prefix) {\n         super(prefix);\n     }\n \n+    @Override\n+    public void setMetricNumber(int metric_number) {", "originalCommit": "07baab5334f6998f687e42bd4ec0140d7eb455ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwMDU3OA==", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r427300578", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private int metric_number = 0;\n          \n          \n            \n                private int metricNumber = 0;", "author": "morningman", "createdAt": "2020-05-19T13:27:02Z", "path": "fe/src/main/java/org/apache/doris/metric/PrometheusMetricVisitor.java", "diffHunk": "@@ -52,10 +52,18 @@\n     private static final String HELP = \"# HELP \";\n     private static final String TYPE = \"# TYPE \";\n \n+    private int ordinal = 0;\n+    private int metric_number = 0;", "originalCommit": "07baab5334f6998f687e42bd4ec0140d7eb455ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwMDcwMQ==", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r427300701", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void setMetricNumber(int metric_number) {\n          \n          \n            \n                public void setMetricNumber(int metricNumber) {", "author": "morningman", "createdAt": "2020-05-19T13:27:12Z", "path": "fe/src/main/java/org/apache/doris/metric/PrometheusMetricVisitor.java", "diffHunk": "@@ -52,10 +52,18 @@\n     private static final String HELP = \"# HELP \";\n     private static final String TYPE = \"# TYPE \";\n \n+    private int ordinal = 0;\n+    private int metric_number = 0;\n+\n     public PrometheusMetricVisitor(String prefix) {\n         super(prefix);\n     }\n \n+    @Override\n+    public void setMetricNumber(int metric_number) {", "originalCommit": "07baab5334f6998f687e42bd4ec0140d7eb455ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwMTA2OA==", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r427301068", "bodyText": "What is the COUNTER_LOAD_FINISHED means? If it means that load is done successfully,\nthis counter should be added after commitAndPublishTransaction()", "author": "morningman", "createdAt": "2020-05-19T13:27:41Z", "path": "fe/src/main/java/org/apache/doris/qe/StmtExecutor.java", "diffHunk": "@@ -683,6 +684,7 @@ private void handleInsertStmt() throws Exception {\n                 return;\n             }\n \n+            MetricRepo.COUNTER_LOAD_FINISHED.increase(1L);", "originalCommit": "07baab5334f6998f687e42bd4ec0140d7eb455ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwMjAxNg==", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r427302016", "bodyText": "after commitAndPublishTransaction()?", "author": "morningman", "createdAt": "2020-05-19T13:28:58Z", "path": "fe/src/main/java/org/apache/doris/service/FrontendServiceImpl.java", "diffHunk": "@@ -757,6 +759,7 @@ private boolean loadTxnCommitImpl(TLoadTxnCommitRequest request) throws UserExce\n             throw new UserException(\"unknown database, database=\" + dbName);\n         }\n \n+        MetricRepo.COUNTER_LOAD_FINISHED.increase(1L);", "originalCommit": "07baab5334f6998f687e42bd4ec0140d7eb455ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1Mjk1NQ==", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r428652955", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static synchronized Multimap<Long, Long> getTabletIdsByDbId(TTaskType type) {\n          \n          \n            \n                public static synchronized Multimap<Long, Long> getTabletIdsByType(TTaskType type) {", "author": "morningman", "createdAt": "2020-05-21T13:32:34Z", "path": "fe/src/main/java/org/apache/doris/task/AgentTaskQueue.java", "diffHunk": "@@ -215,6 +217,20 @@ public static synchronized int getTaskNum() {\n         return taskNum;\n     }\n \n+    public static synchronized Multimap<Long, Long> getTabletIdsByDbId(TTaskType type) {", "originalCommit": "504a6b2fdd24357cd0e5b4c3ee7dd329964bd602", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1MzE5Ng==", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r428653196", "bodyText": "why call clear here?", "author": "morningman", "createdAt": "2020-05-21T13:32:57Z", "path": "fe/src/main/java/org/apache/doris/task/AgentTaskQueue.java", "diffHunk": "@@ -215,6 +217,20 @@ public static synchronized int getTaskNum() {\n         return taskNum;\n     }\n \n+    public static synchronized Multimap<Long, Long> getTabletIdsByDbId(TTaskType type) {\n+        Multimap<Long, Long> tabletIds = HashMultimap.create();\n+        tabletIds.clear();", "originalCommit": "504a6b2fdd24357cd0e5b4c3ee7dd329964bd602", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3OTIwMg==", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r429979202", "bodyText": "public static LongCounterMetric COUNTER_TXN_REJECT;\npublic static LongCounterMetric COUNTER_TXN_BEGIN;\npublic static LongCounterMetric COUNTER_TXN_FAILED;\npublic static LongCounterMetric COUNTER_TXN_SUCCESS;\n\nWe already have 4 metrics to monitor the transaction, is it necessary to add COUNTER_LOAD_FINISHED and COUNTER_LOAD_ADD?", "author": "morningman", "createdAt": "2020-05-25T15:01:08Z", "path": "fe/src/main/java/org/apache/doris/service/FrontendServiceImpl.java", "diffHunk": "@@ -757,10 +759,15 @@ private boolean loadTxnCommitImpl(TLoadTxnCommitRequest request) throws UserExce\n             throw new UserException(\"unknown database, database=\" + dbName);\n         }\n \n-        return Catalog.getCurrentGlobalTransactionMgr().commitAndPublishTransaction(\n-                db, request.getTxnId(),\n-                TabletCommitInfo.fromThrift(request.getCommitInfos()),\n-                5000, TxnCommitAttachment.fromThrift(request.txnCommitAttachment));\n+        boolean ret = Catalog.getCurrentGlobalTransactionMgr().commitAndPublishTransaction(\n+                        db, request.getTxnId(),\n+                        TabletCommitInfo.fromThrift(request.getCommitInfos()),\n+                        5000, TxnCommitAttachment.fromThrift(request.txnCommitAttachment));\n+        if (ret) {\n+            // if commit and publish is success, load can be regarded as success\n+            MetricRepo.COUNTER_LOAD_FINISHED.increase(1L);", "originalCommit": "360af326b339a74478d1c522f39e6788ad4a363c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzNzA0NQ==", "url": "https://github.com/apache/incubator-doris/pull/3635#discussion_r430137045", "bodyText": "I thins COUNTER_TXN_SUCCESS will use for another logic like schema change/rollup/clone in the future. It may be confused.", "author": "chaoyli", "createdAt": "2020-05-26T03:22:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3OTIwMg=="}], "type": "inlineReview"}, {"oid": "8befd9bb86f69bc2e56ae52529378a16f871046e", "url": "https://github.com/apache/incubator-doris/commit/8befd9bb86f69bc2e56ae52529378a16f871046e", "message": "[Feature] Convert metric to Json format\n\nAdd a JSON format for existing metrics like this.\n```\n{\n    \"tags\":\n    {\n        \"metric\":\"thread_pool\",\n        \"name\":\"thrift-server-pool\",\n        \"type\":\"active_thread_num\"\n    },\n    \"unit\":\"number\",\n    \"value\":3\n}\n```\nI add a new JsonMetricVisitor to handle the convertion.\nIt's not to modify existing PrometheusMetricVisitor and SimpleCoreMetricVisitor.\nAlso I add a unit item to indicate the metric better.", "committedDate": "2020-05-26T12:37:22Z", "type": "commit"}, {"oid": "b5d2f75ed103c34db3732d7d98076b627d372de0", "url": "https://github.com/apache/incubator-doris/commit/b5d2f75ed103c34db3732d7d98076b627d372de0", "message": "[Feature] Convert metric to Json format\n\nAdd a JSON format for existing metrics like this.\n```\n{\n    \"tags\":\n    {\n        \"metric\":\"thread_pool\",\n        \"name\":\"thrift-server-pool\",\n        \"type\":\"active_thread_num\"\n    },\n    \"unit\":\"number\",\n    \"value\":3\n}\n```\nI add a new JsonMetricVisitor to handle the convertion.\nIt's not to modify existing PrometheusMetricVisitor and SimpleCoreMetricVisitor.\nAlso I add a unit item to indicate the metric better.\n\nI also add cloning tablet into statistic divided by database.", "committedDate": "2020-05-26T12:37:22Z", "type": "commit"}, {"oid": "f17889477da99f51580d17722593a093d877a3e2", "url": "https://github.com/apache/incubator-doris/commit/f17889477da99f51580d17722593a093d877a3e2", "message": "[Feature] Change some function name to better understanding\nAnd also use white space to replace newline in audit.log", "committedDate": "2020-05-26T12:37:22Z", "type": "commit"}, {"oid": "cf25ffb597d35bbee043c5afedf7344793d7c4c5", "url": "https://github.com/apache/incubator-doris/commit/cf25ffb597d35bbee043c5afedf7344793d7c4c5", "message": "Use rapidjson instead", "committedDate": "2020-05-26T12:37:22Z", "type": "commit"}, {"oid": "e5b02ecc9a04ea40d54c75f82fa0c64c73e92c65", "url": "https://github.com/apache/incubator-doris/commit/e5b02ecc9a04ea40d54c75f82fa0c64c73e92c65", "message": "Fix unit test", "committedDate": "2020-05-26T13:00:25Z", "type": "commit"}]}