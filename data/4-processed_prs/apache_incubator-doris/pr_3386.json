{"pr_number": 3386, "pr_title": "User ThreadPoolManager to create threadPool and add some prothemus metric about pool", "pr_createdAt": "2020-04-23T09:52:01Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3386", "timeline": [{"oid": "26b1a2e65c1cb6d62ded5e41407fab4602d08341", "url": "https://github.com/apache/incubator-doris/commit/26b1a2e65c1cb6d62ded5e41407fab4602d08341", "message": "Support construct thread pool by ThreadPoolManager", "committedDate": "2020-04-22T12:14:11Z", "type": "commit"}, {"oid": "f01192021a6cef5fd5e646670be09a6b7e44e7d8", "url": "https://github.com/apache/incubator-doris/commit/f01192021a6cef5fd5e646670be09a6b7e44e7d8", "message": "Support prometheus metrics for thread-pool", "committedDate": "2020-04-22T14:53:38Z", "type": "commit"}, {"oid": "9360430e20e222f8a5070c102b28b1c6ff625a29", "url": "https://github.com/apache/incubator-doris/commit/9360430e20e222f8a5070c102b28b1c6ff625a29", "message": "Add unittest for ThreadPoolManager", "committedDate": "2020-04-22T15:36:56Z", "type": "commit"}, {"oid": "27520cadb65de6b4fcf30d8947a9d3a20438935e", "url": "https://github.com/apache/incubator-doris/commit/27520cadb65de6b4fcf30d8947a9d3a20438935e", "message": "Add unittest for ThreadPoolManager", "committedDate": "2020-04-22T16:29:57Z", "type": "commit"}, {"oid": "3962ee2814ea06e50346d3fca381f0ae13b1d849", "url": "https://github.com/apache/incubator-doris/commit/3962ee2814ea06e50346d3fca381f0ae13b1d849", "message": "fix regiter metric error", "committedDate": "2020-04-23T08:40:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg0NjA1Mw==", "url": "https://github.com/apache/incubator-doris/pull/3386#discussion_r413846053", "bodyText": "Could add a comment to explain the usage of this class?", "author": "morningman", "createdAt": "2020-04-23T14:30:37Z", "path": "fe/src/main/java/org/apache/doris/common/ThreadPoolManager.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.common;\n+\n+import com.google.common.collect.Maps;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import org.apache.doris.metric.GaugeMetric;\n+import org.apache.doris.metric.MetricLabel;\n+import org.apache.doris.metric.MetricRepo;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.Map;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class ThreadPoolManager {", "originalCommit": "3962ee2814ea06e50346d3fca381f0ae13b1d849", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cb22e27704f2f4f2712aaeedf03e31daa211ccc9", "url": "https://github.com/apache/incubator-doris/commit/cb22e27704f2f4f2712aaeedf03e31daa211ccc9", "message": "Add a comment to explain the usage of ThreadPoolManager class", "committedDate": "2020-04-24T03:14:19Z", "type": "commit"}, {"oid": "b5a7480d3564f2a14b8d1132c493329cd80bbda7", "url": "https://github.com/apache/incubator-doris/commit/b5a7480d3564f2a14b8d1132c493329cd80bbda7", "message": "fix some typo", "committedDate": "2020-04-24T03:19:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg1OTg5OQ==", "url": "https://github.com/apache/incubator-doris/pull/3386#discussion_r413859899", "bodyText": "Better define this 60 as a static field in frontend of the class", "author": "morningman", "createdAt": "2020-04-23T14:46:19Z", "path": "fe/src/main/java/org/apache/doris/common/ThreadPoolManager.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.common;\n+\n+import com.google.common.collect.Maps;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import org.apache.doris.metric.GaugeMetric;\n+import org.apache.doris.metric.MetricLabel;\n+import org.apache.doris.metric.MetricRepo;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.Map;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class ThreadPoolManager {\n+\n+    private static Map<String, ThreadPoolExecutor> nameToThreadPool = Maps.newConcurrentMap();\n+\n+    private static String[] poolMerticTypes = {\"pool_size\", \"active_thread_num\", \"task_in_queue\"};\n+\n+    public static void registerAllThreadPoolMetric() {\n+        for (Map.Entry<String, ThreadPoolExecutor> entry : nameToThreadPool.entrySet()) {\n+            registerThreadPoolMetric(entry.getKey(), entry.getValue());\n+        }\n+    }\n+\n+    public static void registerThreadPoolMetric(String poolName, ThreadPoolExecutor threadPool) {\n+        for (String poolMetricType : poolMerticTypes) {\n+            GaugeMetric<Integer> gauge = new GaugeMetric<Integer>(\"thread_pool\", \"thread_pool statistics\") {\n+                @Override\n+                public Integer getValue() {\n+                    String metricType = this.getLabels().get(1).getValue();\n+                    switch (metricType) {\n+                        case \"pool_size\":\n+                            return threadPool.getPoolSize();\n+                        case \"active_thread_num\":\n+                            return threadPool.getActiveCount();\n+                        case \"task_in_queue\":\n+                            return threadPool.getQueue().size();\n+                        default:\n+                            return 0;\n+                    }\n+                }\n+            };\n+            gauge.addLabel(new MetricLabel(\"name\", poolName))\n+                    .addLabel(new MetricLabel(\"type\", poolMetricType));\n+            MetricRepo.addMetric(gauge);\n+        }\n+    }\n+\n+    public static ThreadPoolExecutor newDaemonCacheThreadPool(int maxNumThread, String poolName) {\n+        return newDaemonThreadPool(0, maxNumThread, 60L, TimeUnit.SECONDS, new SynchronousQueue(), new LogDiscardPolicy(poolName), poolName);", "originalCommit": "3962ee2814ea06e50346d3fca381f0ae13b1d849", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg3MTIxNA==", "url": "https://github.com/apache/incubator-doris/pull/3386#discussion_r413871214", "bodyText": "The origin taskService is not a daemon thread, does not matter?", "author": "morningman", "createdAt": "2020-04-23T14:59:02Z", "path": "fe/src/main/java/org/apache/doris/mysql/nio/NMysqlServer.java", "diffHunk": "@@ -47,7 +46,7 @@\n     private AcceptingChannel<StreamConnection> server;\n \n     // default task service.\n-    private ExecutorService taskService = Executors.newCachedThreadPool((new ThreadFactoryBuilder().setDaemon(false).setNameFormat(\"doris-mysql-nio TASK\").build()));\n+    private ExecutorService taskService = ThreadPoolManager.newDaemonCacheThreadPool(Config.max_mysql_service_task_threads_num, \"doris-mysql-nio-pool\");", "originalCommit": "3962ee2814ea06e50346d3fca381f0ae13b1d849", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY5MzM5MQ==", "url": "https://github.com/apache/incubator-doris/pull/3386#discussion_r414693391", "bodyText": "It doesn't matter, because nio threads \"doris-mysql-nio\" are not daemon. for the whole fe jvm process, only when there are no non-daemon threads will cause jvm process exit", "author": "caiconghui", "createdAt": "2020-04-24T16:09:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg3MTIxNA=="}], "type": "inlineReview"}, {"oid": "d15b8a6f99c85c5ddde5cdd6e0415ba33ce52542", "url": "https://github.com/apache/incubator-doris/commit/d15b8a6f99c85c5ddde5cdd6e0415ba33ce52542", "message": "fix", "committedDate": "2020-04-24T14:32:43Z", "type": "commit"}, {"oid": "fe6bf01b9902624102297e9e7da841b698acfa72", "url": "https://github.com/apache/incubator-doris/commit/fe6bf01b9902624102297e9e7da841b698acfa72", "message": "fix", "committedDate": "2020-04-24T14:33:31Z", "type": "commit"}]}