{"pr_number": 2831, "pr_title": "Refactor `AgentServer` to make it less error-prone and more readable", "pr_createdAt": "2020-02-04T04:51:38Z", "pr_url": "https://github.com/apache/incubator-doris/pull/2831", "timeline": [{"oid": "7f27e037313f68bfa66763a22529e53010f9933e", "url": "https://github.com/apache/incubator-doris/commit/7f27e037313f68bfa66763a22529e53010f9933e", "message": "Refactor `AgentServer` to make it less error-prone and more readable\n\nIn `AgentServer`, each task type needs to be processed separately,\nwhich leads to very long code, hard to read, and not easy to detect\nerrors (for example, some task type processing may be missed,\ncorresponding relationship may be error)\n\nFortunately, the code for each task_type is very similar, so this\nis a good case to use `MACRO`, which can greatly reduce the repeated\ncode and solve above problems.\n\nThis patch also fix two small bugs:\n1. The `_topic_subscriber` member has not been released in dtor\n2. in `submit_tasks()`, the `status_code` is not reset before\n   each task is processed, resulting in wrong judgment.\n\nNo functional changes in this patch.", "committedDate": "2020-02-04T04:43:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU3Njg1OQ==", "url": "https://github.com/apache/incubator-doris/pull/2831#discussion_r374576859", "bodyText": "Is it necessary here?", "author": "morningman", "createdAt": "2020-02-04T10:04:21Z", "path": "be/src/service/doris_main.cpp", "diffHunk": "@@ -50,6 +50,7 @@\n #include \"agent/topic_subscriber.h\"\n #include \"util/doris_metrics.h\"\n #include \"olap/options.h\"\n+#include \"olap/storage_engine.h\"", "originalCommit": "7f27e037313f68bfa66763a22529e53010f9933e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU5MzA3Nw==", "url": "https://github.com/apache/incubator-doris/pull/2831#discussion_r374593077", "bodyText": "Yes. StorageEngine is used in this file.\nPreviously, because of some unneeded header file included in agent_server.h will include storage_engine.h, these unneeded header files were removed from agent_server.h.", "author": "lingbin", "createdAt": "2020-02-04T10:36:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU3Njg1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU3OTk2Mw==", "url": "https://github.com/apache/incubator-doris/pull/2831#discussion_r374579963", "bodyText": "Missing else?", "author": "morningman", "createdAt": "2020-02-04T10:10:32Z", "path": "be/src/agent/agent_server.cpp", "diffHunk": "@@ -67,438 +47,236 @@ AgentServer::AgentServer(ExecEnv* exec_env,\n                 boost::filesystem::remove_all(dpp_download_path);\n             }\n         } catch (...) {\n-            LOG(WARNING) << \"boost exception when remove dpp download path. path=\"\n-                         << path.path;\n+            LOG(WARNING) << \"boost exception when remove dpp download path. path=\" << path.path;\n         }\n     }\n \n-    // init task worker pool\n-    _create_tablet_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::CREATE_TABLE,\n-            _exec_env,\n-            master_info);\n-    _drop_tablet_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::DROP_TABLE,\n-            _exec_env,\n-            master_info);\n-    _push_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::PUSH,\n-            _exec_env,\n-            master_info);\n-    _publish_version_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::PUBLISH_VERSION,\n-            _exec_env,\n-            master_info);\n-    _clear_transaction_task_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::CLEAR_TRANSACTION_TASK,\n-            exec_env,\n-            master_info);\n-    _delete_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::DELETE,\n-            _exec_env,\n-            master_info);\n-    _alter_tablet_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::ALTER_TABLE,\n-            _exec_env,\n-            master_info);\n-    _clone_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::CLONE,\n-            _exec_env,\n-            master_info);\n-    _storage_medium_migrate_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::STORAGE_MEDIUM_MIGRATE,\n-            _exec_env,\n-            master_info);\n-    _check_consistency_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::CHECK_CONSISTENCY,\n-            _exec_env,\n-            master_info);\n-    _report_task_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::REPORT_TASK,\n-            _exec_env,\n-            master_info);\n-    _report_disk_state_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::REPORT_DISK_STATE,\n-            _exec_env,\n-            master_info);\n-    _report_tablet_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::REPORT_OLAP_TABLE,\n-            _exec_env,\n-            master_info);\n-    _upload_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::UPLOAD,\n-            _exec_env,\n-            master_info);\n-    _download_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::DOWNLOAD,\n-            _exec_env,\n-            master_info);\n-    _make_snapshot_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::MAKE_SNAPSHOT,\n-            _exec_env,\n-            master_info);\n-    _release_snapshot_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::RELEASE_SNAPSHOT,\n-            _exec_env,\n-            master_info);\n-    _move_dir_workers= new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::MOVE,\n-            _exec_env,\n-            master_info);\n-    _recover_tablet_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::RECOVER_TABLET,\n-            _exec_env,\n-            master_info);\n-    _update_tablet_meta_info_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::UPDATE_TABLET_META_INFO,\n-            _exec_env,\n-            master_info);\n+    // It is the same code to create workers of each type, so we use a macro\n+    // to make code to be more readable.\n+\n+#ifndef BE_TEST\n+#define CREATE_AND_START_POOL(type, pool_name)         \\\n+    pool_name.reset(new TaskWorkerPool(                \\\n+                TaskWorkerPool::TaskWorkerType::type,  \\\n+                _exec_env,                             \\\n+                master_info));                         \\\n+    pool_name->start();\n+#else\n+#define CREATE_AND_START_POOL(type, pool_name)\n+#endif // BE_TEST\n+\n+    CREATE_AND_START_POOL(CREATE_TABLE, _create_tablet_workers);\n+    CREATE_AND_START_POOL(DROP_TABLE, _drop_tablet_workers);\n+    // Both PUSH and REALTIME_PUSH type use _push_workers\n+    CREATE_AND_START_POOL(PUSH, _push_workers);\n+    CREATE_AND_START_POOL(PUBLISH_VERSION, _publish_version_workers);\n+    CREATE_AND_START_POOL(CLEAR_TRANSACTION_TASK, _clear_transaction_task_workers);\n+    CREATE_AND_START_POOL(DELETE, _delete_workers);\n+    CREATE_AND_START_POOL(ALTER_TABLE, _alter_tablet_workers);\n+    CREATE_AND_START_POOL(CLONE, _clone_workers);\n+    CREATE_AND_START_POOL(STORAGE_MEDIUM_MIGRATE, _storage_medium_migrate_workers);\n+    CREATE_AND_START_POOL(CHECK_CONSISTENCY, _check_consistency_workers);\n+    CREATE_AND_START_POOL(REPORT_TASK, _report_task_workers);\n+    CREATE_AND_START_POOL(REPORT_DISK_STATE, _report_disk_state_workers);\n+    CREATE_AND_START_POOL(REPORT_OLAP_TABLE, _report_tablet_workers);\n+    CREATE_AND_START_POOL(UPLOAD, _upload_workers);\n+    CREATE_AND_START_POOL(DOWNLOAD, _download_workers);\n+    CREATE_AND_START_POOL(MAKE_SNAPSHOT, _make_snapshot_workers);\n+    CREATE_AND_START_POOL(RELEASE_SNAPSHOT, _release_snapshot_workers);\n+    CREATE_AND_START_POOL(MOVE, _move_dir_workers);\n+    CREATE_AND_START_POOL(RECOVER_TABLET, _recover_tablet_workers);\n+    CREATE_AND_START_POOL(UPDATE_TABLET_META_INFO, _update_tablet_meta_info_workers);\n+#undef CREATE_AND_START_POOL\n+\n #ifndef BE_TEST\n-    _create_tablet_workers->start();\n-    _drop_tablet_workers->start();\n-    _push_workers->start();\n-    _publish_version_workers->start();\n-    _clear_transaction_task_workers->start();\n-    _delete_workers->start();\n-    _alter_tablet_workers->start();\n-    _clone_workers->start();\n-    _storage_medium_migrate_workers->start();\n-    _check_consistency_workers->start();\n-    _report_task_workers->start();\n-    _report_disk_state_workers->start();\n-    _report_tablet_workers->start();\n-    _upload_workers->start();\n-    _download_workers->start();\n-    _make_snapshot_workers->start();\n-    _release_snapshot_workers->start();\n-    _move_dir_workers->start();\n-    _recover_tablet_workers->start();\n-    _update_tablet_meta_info_workers->start();\n     // Add subscriber here and register listeners\n     TopicListener* user_resource_listener = new UserResourceListener(exec_env, master_info);\n     LOG(INFO) << \"Register user resource listener\";\n     _topic_subscriber->register_listener(doris::TTopicType::type::RESOURCE, user_resource_listener);\n #endif\n }\n \n-AgentServer::~AgentServer() {\n-    if (_create_tablet_workers != NULL) {\n-        delete _create_tablet_workers;\n-    }\n-    if (_drop_tablet_workers != NULL) {\n-        delete _drop_tablet_workers;\n-    }\n-    if (_push_workers != NULL) {\n-        delete _push_workers;\n-    }\n-    if (_publish_version_workers != NULL) {\n-        delete _publish_version_workers;\n-    }\n-    if (_clear_transaction_task_workers != NULL) {\n-        delete _clear_transaction_task_workers;\n-    }\n-    if (_delete_workers != NULL) {\n-        delete _delete_workers;\n-    }\n-    if (_alter_tablet_workers != NULL) {\n-        delete _alter_tablet_workers;\n-    }\n-    if (_clone_workers != NULL) {\n-        delete _clone_workers;\n-    }\n-    if (_storage_medium_migrate_workers != NULL) {\n-        delete _storage_medium_migrate_workers;\n-    }\n-    if (_check_consistency_workers != NULL) {\n-        delete _check_consistency_workers;\n-    }\n-    if (_report_task_workers != NULL) {\n-        delete _report_task_workers;\n-    }\n-    if (_report_disk_state_workers != NULL) {\n-        delete _report_disk_state_workers;\n-    }\n-    if (_report_tablet_workers != NULL) {\n-        delete _report_tablet_workers;\n-    }\n-    if (_upload_workers != NULL) {\n-        delete _upload_workers;\n-    }\n-    if (_download_workers != NULL) {\n-        delete _download_workers;\n-    }\n-    if (_make_snapshot_workers != NULL) {\n-        delete _make_snapshot_workers;\n-    }\n-    if (_move_dir_workers!= NULL) {\n-        delete _move_dir_workers;\n-    }\n-    if (_recover_tablet_workers != NULL) {\n-        delete _recover_tablet_workers;\n-    }\n-\n-    if (_update_tablet_meta_info_workers != NULL) {\n-        delete _update_tablet_meta_info_workers;\n-    }\n-    if (_release_snapshot_workers != NULL) {\n-        delete _release_snapshot_workers;\n-    }\n-    if (_topic_subscriber !=NULL) {\n-        delete _topic_subscriber;\n-    }\n-}\n-\n-void AgentServer::submit_tasks(\n-        TAgentResult& return_value,\n-        const vector<TAgentTaskRequest>& tasks) {\n+AgentServer::~AgentServer() { }\n \n-    // Set result to dm\n-    vector<string> error_msgs;\n-    TStatusCode::type status_code = TStatusCode::OK;\n+void AgentServer::submit_tasks(TAgentResult& agent_result, const vector<TAgentTaskRequest>& tasks) {\n+    Status ret_st;\n \n-    // TODO check require master same to heartbeat master\n-    if (_master_info.network_address.hostname == \"\"\n-            || _master_info.network_address.port == 0) {\n-        error_msgs.push_back(\"Not get master heartbeat yet.\");\n-        return_value.status.__set_error_msgs(error_msgs);\n-        return_value.status.__set_status_code(TStatusCode::CANCELLED);\n+    // TODO check master_info here if it is the same with that of heartbeat rpc\n+    if (_master_info.network_address.hostname == \"\" || _master_info.network_address.port == 0) {\n+        Status ret_st = Status::Cancelled(\"Have not get FE Master heartbeat yet\");\n+        ret_st.to_thrift(&agent_result.status);\n         return;\n     }\n \n     for (auto task : tasks) {\n+        VLOG_RPC << \"submit one task: \" << apache::thrift::ThriftDebugString(task).c_str();\n         TTaskType::type task_type = task.task_type;\n         int64_t signature = task.signature;\n \n+#define HANDLE_TYPE(t_task_type, work_pool, req_member)                     \\\n+    case t_task_type:                                                       \\\n+        if (task.__isset.req_member) {                                      \\\n+            work_pool->submit_task(task);                                   \\\n+        }                                                                   \\", "originalCommit": "7f27e037313f68bfa66763a22529e53010f9933e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU5NjQzMg==", "url": "https://github.com/apache/incubator-doris/pull/2831#discussion_r374596432", "bodyText": "yes, I will fix it.", "author": "lingbin", "createdAt": "2020-02-04T10:43:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU3OTk2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU4MTAzOA==", "url": "https://github.com/apache/incubator-doris/pull/2831#discussion_r374581038", "bodyText": "break here means some of the tasks are successfully submitted, and rest of them are not?", "author": "morningman", "createdAt": "2020-02-04T10:12:31Z", "path": "be/src/agent/agent_server.cpp", "diffHunk": "@@ -67,438 +47,236 @@ AgentServer::AgentServer(ExecEnv* exec_env,\n                 boost::filesystem::remove_all(dpp_download_path);\n             }\n         } catch (...) {\n-            LOG(WARNING) << \"boost exception when remove dpp download path. path=\"\n-                         << path.path;\n+            LOG(WARNING) << \"boost exception when remove dpp download path. path=\" << path.path;\n         }\n     }\n \n-    // init task worker pool\n-    _create_tablet_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::CREATE_TABLE,\n-            _exec_env,\n-            master_info);\n-    _drop_tablet_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::DROP_TABLE,\n-            _exec_env,\n-            master_info);\n-    _push_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::PUSH,\n-            _exec_env,\n-            master_info);\n-    _publish_version_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::PUBLISH_VERSION,\n-            _exec_env,\n-            master_info);\n-    _clear_transaction_task_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::CLEAR_TRANSACTION_TASK,\n-            exec_env,\n-            master_info);\n-    _delete_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::DELETE,\n-            _exec_env,\n-            master_info);\n-    _alter_tablet_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::ALTER_TABLE,\n-            _exec_env,\n-            master_info);\n-    _clone_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::CLONE,\n-            _exec_env,\n-            master_info);\n-    _storage_medium_migrate_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::STORAGE_MEDIUM_MIGRATE,\n-            _exec_env,\n-            master_info);\n-    _check_consistency_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::CHECK_CONSISTENCY,\n-            _exec_env,\n-            master_info);\n-    _report_task_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::REPORT_TASK,\n-            _exec_env,\n-            master_info);\n-    _report_disk_state_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::REPORT_DISK_STATE,\n-            _exec_env,\n-            master_info);\n-    _report_tablet_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::REPORT_OLAP_TABLE,\n-            _exec_env,\n-            master_info);\n-    _upload_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::UPLOAD,\n-            _exec_env,\n-            master_info);\n-    _download_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::DOWNLOAD,\n-            _exec_env,\n-            master_info);\n-    _make_snapshot_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::MAKE_SNAPSHOT,\n-            _exec_env,\n-            master_info);\n-    _release_snapshot_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::RELEASE_SNAPSHOT,\n-            _exec_env,\n-            master_info);\n-    _move_dir_workers= new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::MOVE,\n-            _exec_env,\n-            master_info);\n-    _recover_tablet_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::RECOVER_TABLET,\n-            _exec_env,\n-            master_info);\n-    _update_tablet_meta_info_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::UPDATE_TABLET_META_INFO,\n-            _exec_env,\n-            master_info);\n+    // It is the same code to create workers of each type, so we use a macro\n+    // to make code to be more readable.\n+\n+#ifndef BE_TEST\n+#define CREATE_AND_START_POOL(type, pool_name)         \\\n+    pool_name.reset(new TaskWorkerPool(                \\\n+                TaskWorkerPool::TaskWorkerType::type,  \\\n+                _exec_env,                             \\\n+                master_info));                         \\\n+    pool_name->start();\n+#else\n+#define CREATE_AND_START_POOL(type, pool_name)\n+#endif // BE_TEST\n+\n+    CREATE_AND_START_POOL(CREATE_TABLE, _create_tablet_workers);\n+    CREATE_AND_START_POOL(DROP_TABLE, _drop_tablet_workers);\n+    // Both PUSH and REALTIME_PUSH type use _push_workers\n+    CREATE_AND_START_POOL(PUSH, _push_workers);\n+    CREATE_AND_START_POOL(PUBLISH_VERSION, _publish_version_workers);\n+    CREATE_AND_START_POOL(CLEAR_TRANSACTION_TASK, _clear_transaction_task_workers);\n+    CREATE_AND_START_POOL(DELETE, _delete_workers);\n+    CREATE_AND_START_POOL(ALTER_TABLE, _alter_tablet_workers);\n+    CREATE_AND_START_POOL(CLONE, _clone_workers);\n+    CREATE_AND_START_POOL(STORAGE_MEDIUM_MIGRATE, _storage_medium_migrate_workers);\n+    CREATE_AND_START_POOL(CHECK_CONSISTENCY, _check_consistency_workers);\n+    CREATE_AND_START_POOL(REPORT_TASK, _report_task_workers);\n+    CREATE_AND_START_POOL(REPORT_DISK_STATE, _report_disk_state_workers);\n+    CREATE_AND_START_POOL(REPORT_OLAP_TABLE, _report_tablet_workers);\n+    CREATE_AND_START_POOL(UPLOAD, _upload_workers);\n+    CREATE_AND_START_POOL(DOWNLOAD, _download_workers);\n+    CREATE_AND_START_POOL(MAKE_SNAPSHOT, _make_snapshot_workers);\n+    CREATE_AND_START_POOL(RELEASE_SNAPSHOT, _release_snapshot_workers);\n+    CREATE_AND_START_POOL(MOVE, _move_dir_workers);\n+    CREATE_AND_START_POOL(RECOVER_TABLET, _recover_tablet_workers);\n+    CREATE_AND_START_POOL(UPDATE_TABLET_META_INFO, _update_tablet_meta_info_workers);\n+#undef CREATE_AND_START_POOL\n+\n #ifndef BE_TEST\n-    _create_tablet_workers->start();\n-    _drop_tablet_workers->start();\n-    _push_workers->start();\n-    _publish_version_workers->start();\n-    _clear_transaction_task_workers->start();\n-    _delete_workers->start();\n-    _alter_tablet_workers->start();\n-    _clone_workers->start();\n-    _storage_medium_migrate_workers->start();\n-    _check_consistency_workers->start();\n-    _report_task_workers->start();\n-    _report_disk_state_workers->start();\n-    _report_tablet_workers->start();\n-    _upload_workers->start();\n-    _download_workers->start();\n-    _make_snapshot_workers->start();\n-    _release_snapshot_workers->start();\n-    _move_dir_workers->start();\n-    _recover_tablet_workers->start();\n-    _update_tablet_meta_info_workers->start();\n     // Add subscriber here and register listeners\n     TopicListener* user_resource_listener = new UserResourceListener(exec_env, master_info);\n     LOG(INFO) << \"Register user resource listener\";\n     _topic_subscriber->register_listener(doris::TTopicType::type::RESOURCE, user_resource_listener);\n #endif\n }\n \n-AgentServer::~AgentServer() {\n-    if (_create_tablet_workers != NULL) {\n-        delete _create_tablet_workers;\n-    }\n-    if (_drop_tablet_workers != NULL) {\n-        delete _drop_tablet_workers;\n-    }\n-    if (_push_workers != NULL) {\n-        delete _push_workers;\n-    }\n-    if (_publish_version_workers != NULL) {\n-        delete _publish_version_workers;\n-    }\n-    if (_clear_transaction_task_workers != NULL) {\n-        delete _clear_transaction_task_workers;\n-    }\n-    if (_delete_workers != NULL) {\n-        delete _delete_workers;\n-    }\n-    if (_alter_tablet_workers != NULL) {\n-        delete _alter_tablet_workers;\n-    }\n-    if (_clone_workers != NULL) {\n-        delete _clone_workers;\n-    }\n-    if (_storage_medium_migrate_workers != NULL) {\n-        delete _storage_medium_migrate_workers;\n-    }\n-    if (_check_consistency_workers != NULL) {\n-        delete _check_consistency_workers;\n-    }\n-    if (_report_task_workers != NULL) {\n-        delete _report_task_workers;\n-    }\n-    if (_report_disk_state_workers != NULL) {\n-        delete _report_disk_state_workers;\n-    }\n-    if (_report_tablet_workers != NULL) {\n-        delete _report_tablet_workers;\n-    }\n-    if (_upload_workers != NULL) {\n-        delete _upload_workers;\n-    }\n-    if (_download_workers != NULL) {\n-        delete _download_workers;\n-    }\n-    if (_make_snapshot_workers != NULL) {\n-        delete _make_snapshot_workers;\n-    }\n-    if (_move_dir_workers!= NULL) {\n-        delete _move_dir_workers;\n-    }\n-    if (_recover_tablet_workers != NULL) {\n-        delete _recover_tablet_workers;\n-    }\n-\n-    if (_update_tablet_meta_info_workers != NULL) {\n-        delete _update_tablet_meta_info_workers;\n-    }\n-    if (_release_snapshot_workers != NULL) {\n-        delete _release_snapshot_workers;\n-    }\n-    if (_topic_subscriber !=NULL) {\n-        delete _topic_subscriber;\n-    }\n-}\n-\n-void AgentServer::submit_tasks(\n-        TAgentResult& return_value,\n-        const vector<TAgentTaskRequest>& tasks) {\n+AgentServer::~AgentServer() { }\n \n-    // Set result to dm\n-    vector<string> error_msgs;\n-    TStatusCode::type status_code = TStatusCode::OK;\n+void AgentServer::submit_tasks(TAgentResult& agent_result, const vector<TAgentTaskRequest>& tasks) {\n+    Status ret_st;\n \n-    // TODO check require master same to heartbeat master\n-    if (_master_info.network_address.hostname == \"\"\n-            || _master_info.network_address.port == 0) {\n-        error_msgs.push_back(\"Not get master heartbeat yet.\");\n-        return_value.status.__set_error_msgs(error_msgs);\n-        return_value.status.__set_status_code(TStatusCode::CANCELLED);\n+    // TODO check master_info here if it is the same with that of heartbeat rpc\n+    if (_master_info.network_address.hostname == \"\" || _master_info.network_address.port == 0) {\n+        Status ret_st = Status::Cancelled(\"Have not get FE Master heartbeat yet\");\n+        ret_st.to_thrift(&agent_result.status);\n         return;\n     }\n \n     for (auto task : tasks) {\n+        VLOG_RPC << \"submit one task: \" << apache::thrift::ThriftDebugString(task).c_str();\n         TTaskType::type task_type = task.task_type;\n         int64_t signature = task.signature;\n \n+#define HANDLE_TYPE(t_task_type, work_pool, req_member)                     \\\n+    case t_task_type:                                                       \\\n+        if (task.__isset.req_member) {                                      \\\n+            work_pool->submit_task(task);                                   \\\n+        }                                                                   \\\n+        ret_st = Status::InvalidArgument(strings::Substitute(               \\\n+                \"task(signature=$0) has wrong request member\", signature)); \\\n+        break;\n+\n+        // TODO(lingbin): divided these task types into several categories\n         switch (task_type) {\n-        case TTaskType::CREATE:\n-            if (task.__isset.create_tablet_req) {\n-               _create_tablet_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::DROP:\n-            if (task.__isset.drop_tablet_req) {\n-                _drop_tablet_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n+        HANDLE_TYPE(TTaskType::CREATE, _create_tablet_workers, create_tablet_req);\n+        HANDLE_TYPE(TTaskType::DROP, _drop_tablet_workers, drop_tablet_req);\n+        HANDLE_TYPE(TTaskType::PUBLISH_VERSION, _publish_version_workers, publish_version_req);\n+        HANDLE_TYPE(TTaskType::CLEAR_TRANSACTION_TASK,\n+                    _clear_transaction_task_workers,\n+                    clear_transaction_task_req);\n+        HANDLE_TYPE(TTaskType::CLONE, _clone_workers, clone_req);\n+        HANDLE_TYPE(TTaskType::STORAGE_MEDIUM_MIGRATE,\n+                    _storage_medium_migrate_workers,\n+                    storage_medium_migrate_req);\n+        HANDLE_TYPE(TTaskType::CHECK_CONSISTENCY,\n+                    _check_consistency_workers,\n+                    check_consistency_req);\n+        HANDLE_TYPE(TTaskType::UPLOAD, _upload_workers, upload_req);\n+        HANDLE_TYPE(TTaskType::DOWNLOAD, _download_workers, download_req);\n+        HANDLE_TYPE(TTaskType::MAKE_SNAPSHOT, _make_snapshot_workers, snapshot_req);\n+        HANDLE_TYPE(TTaskType::RELEASE_SNAPSHOT, _release_snapshot_workers, release_snapshot_req);\n+        HANDLE_TYPE(TTaskType::MOVE, _move_dir_workers, move_dir_req);\n+        HANDLE_TYPE(TTaskType::RECOVER_TABLET, _recover_tablet_workers, recover_tablet_req);\n+        HANDLE_TYPE(TTaskType::UPDATE_TABLET_META_INFO,\n+                    _update_tablet_meta_info_workers,\n+                    update_tablet_meta_info_req);\n+\n         case TTaskType::REALTIME_PUSH:\n         case TTaskType::PUSH:\n-            if (task.__isset.push_req) {\n-                if (task.push_req.push_type == TPushType::LOAD\n-                        || task.push_req.push_type == TPushType::LOAD_DELETE) {\n-                    _push_workers->submit_task(task);\n-                } else if (task.push_req.push_type == TPushType::DELETE) {\n-                    _delete_workers->submit_task(task);\n-                } else {\n-                    status_code = TStatusCode::ANALYSIS_ERROR;\n-                }\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n+            if (!task.__isset.push_req) {\n+                ret_st = Status::InvalidArgument(strings::Substitute(\n+                        \"task(signature=$0) has wrong request member\", signature));\n+                break;\n             }\n-            break;\n-        case TTaskType::PUBLISH_VERSION:\n-            if (task.__isset.publish_version_req) {\n-                _publish_version_workers->submit_task(task);\n+            if (task.push_req.push_type == TPushType::LOAD\n+                    || task.push_req.push_type == TPushType::LOAD_DELETE) {\n+                _push_workers->submit_task(task);\n+            } else if (task.push_req.push_type == TPushType::DELETE) {\n+                _delete_workers->submit_task(task);\n             } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::CLEAR_TRANSACTION_TASK:\n-            if (task.__isset.clear_transaction_task_req) {\n-                _clear_transaction_task_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n+                ret_st = Status::InvalidArgument(strings::Substitute(\n+                        \"task(signature=$0, type=$1, push_type=$2) has wrong push_type\",\n+                        signature, task_type, task.push_req.push_type));\n             }\n             break;\n         case TTaskType::ALTER:\n             if (task.__isset.alter_tablet_req || task.__isset.alter_tablet_req_v2) {\n                 _alter_tablet_workers->submit_task(task);\n             } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::CLONE:\n-            if (task.__isset.clone_req) {\n-                _clone_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::STORAGE_MEDIUM_MIGRATE:\n-            if (task.__isset.storage_medium_migrate_req) {\n-                _storage_medium_migrate_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::CHECK_CONSISTENCY:\n-            if (task.__isset.check_consistency_req) {\n-                _check_consistency_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::UPLOAD:\n-            if (task.__isset.upload_req) {\n-                _upload_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::DOWNLOAD:\n-            if (task.__isset.download_req) {\n-                _download_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::MAKE_SNAPSHOT:\n-            if (task.__isset.snapshot_req) {\n-                _make_snapshot_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::RELEASE_SNAPSHOT:\n-            if (task.__isset.release_snapshot_req) {\n-                _release_snapshot_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::MOVE:\n-            if (task.__isset.move_dir_req) {\n-                _move_dir_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::RECOVER_TABLET:\n-            if (task.__isset.recover_tablet_req) {\n-                _recover_tablet_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::UPDATE_TABLET_META_INFO:\n-            if (task.__isset.update_tablet_meta_info_req) {\n-                _update_tablet_meta_info_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n+                ret_st = Status::InvalidArgument(strings::Substitute(\n+                        \"task(signature=$0) has wrong request member\", signature));\n             }\n             break;\n         default:\n-            status_code = TStatusCode::ANALYSIS_ERROR;\n+            ret_st = Status::InvalidArgument(strings::Substitute(\n+                    \"task(signature=$0, type=$1) has wrong task type\", signature, task_type));\n             break;\n         }\n+#undef HANDLE_TYPE\n \n-        if (status_code == TStatusCode::ANALYSIS_ERROR) {\n-            OLAP_LOG_WARNING(\"task anaysis_error, signature: %ld\", signature);\n-            error_msgs.push_back(\"the task signature is:\" + to_string(signature) + \" has wrong request.\");\n+        if (!ret_st.ok()) {\n+            LOG(WARNING) << \"fail to submit task. reason: \" << ret_st.get_error_msg()\n+                    << \", task: \" << task;\n+            break;", "originalCommit": "7f27e037313f68bfa66763a22529e53010f9933e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYwMDM4OQ==", "url": "https://github.com/apache/incubator-doris/pull/2831#discussion_r374600389", "bodyText": "If something is wrong, Didn't FE resend requests\uff1f\nAn ideal solution should be: each task in a batch has its own status, rather than each batch shares a status, but this is something that can be improved in the future.", "author": "lingbin", "createdAt": "2020-02-04T10:50:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU4MTAzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYxMDA3OA==", "url": "https://github.com/apache/incubator-doris/pull/2831#discussion_r374610078", "bodyText": "incubator-doris/fe/src/main/java/org/apache/doris/task/AgentBatchTask.java\n    \n    \n        Lines 164 to 168\n      in\n      a27e890\n    \n    \n    \n    \n\n        \n          \n           for (AgentTask task : tasks) { \n        \n\n        \n          \n               agentTaskRequests.add(toAgentTaskRequest(task)); \n        \n\n        \n          \n           } \n        \n\n        \n          \n           client.submit_tasks(agentTaskRequests); \n        \n\n        \n          \n           if (LOG.isDebugEnabled()) { \n        \n    \n  \n\n\nOh, at present, Fe does not check the return value of submit_tasks().\nBut there should be no problem here because this is just to check the mapping relationship between task_type and req member, which is almost unmistakable. We can wait until a separate status for each task was added in the future.", "author": "lingbin", "createdAt": "2020-02-04T11:12:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU4MTAzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYyNDM3OA==", "url": "https://github.com/apache/incubator-doris/pull/2831#discussion_r374624378", "bodyText": "Anyway, I removed the break, and add some comments and TODO.", "author": "lingbin", "createdAt": "2020-02-04T11:47:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU4MTAzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU4MzI4Ng==", "url": "https://github.com/apache/incubator-doris/pull/2831#discussion_r374583286", "bodyText": "The following 4 methods are useless now. I think you can just make it return ERROR, and delete them after.\npublish_cluster_state\nsubmit_etl_task\nget_etl_status\ndelete_etl_files", "author": "morningman", "createdAt": "2020-02-04T10:16:45Z", "path": "be/src/agent/agent_server.cpp", "diffHunk": "@@ -67,438 +47,236 @@ AgentServer::AgentServer(ExecEnv* exec_env,\n                 boost::filesystem::remove_all(dpp_download_path);\n             }\n         } catch (...) {\n-            LOG(WARNING) << \"boost exception when remove dpp download path. path=\"\n-                         << path.path;\n+            LOG(WARNING) << \"boost exception when remove dpp download path. path=\" << path.path;\n         }\n     }\n \n-    // init task worker pool\n-    _create_tablet_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::CREATE_TABLE,\n-            _exec_env,\n-            master_info);\n-    _drop_tablet_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::DROP_TABLE,\n-            _exec_env,\n-            master_info);\n-    _push_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::PUSH,\n-            _exec_env,\n-            master_info);\n-    _publish_version_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::PUBLISH_VERSION,\n-            _exec_env,\n-            master_info);\n-    _clear_transaction_task_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::CLEAR_TRANSACTION_TASK,\n-            exec_env,\n-            master_info);\n-    _delete_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::DELETE,\n-            _exec_env,\n-            master_info);\n-    _alter_tablet_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::ALTER_TABLE,\n-            _exec_env,\n-            master_info);\n-    _clone_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::CLONE,\n-            _exec_env,\n-            master_info);\n-    _storage_medium_migrate_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::STORAGE_MEDIUM_MIGRATE,\n-            _exec_env,\n-            master_info);\n-    _check_consistency_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::CHECK_CONSISTENCY,\n-            _exec_env,\n-            master_info);\n-    _report_task_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::REPORT_TASK,\n-            _exec_env,\n-            master_info);\n-    _report_disk_state_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::REPORT_DISK_STATE,\n-            _exec_env,\n-            master_info);\n-    _report_tablet_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::REPORT_OLAP_TABLE,\n-            _exec_env,\n-            master_info);\n-    _upload_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::UPLOAD,\n-            _exec_env,\n-            master_info);\n-    _download_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::DOWNLOAD,\n-            _exec_env,\n-            master_info);\n-    _make_snapshot_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::MAKE_SNAPSHOT,\n-            _exec_env,\n-            master_info);\n-    _release_snapshot_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::RELEASE_SNAPSHOT,\n-            _exec_env,\n-            master_info);\n-    _move_dir_workers= new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::MOVE,\n-            _exec_env,\n-            master_info);\n-    _recover_tablet_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::RECOVER_TABLET,\n-            _exec_env,\n-            master_info);\n-    _update_tablet_meta_info_workers = new TaskWorkerPool(\n-            TaskWorkerPool::TaskWorkerType::UPDATE_TABLET_META_INFO,\n-            _exec_env,\n-            master_info);\n+    // It is the same code to create workers of each type, so we use a macro\n+    // to make code to be more readable.\n+\n+#ifndef BE_TEST\n+#define CREATE_AND_START_POOL(type, pool_name)         \\\n+    pool_name.reset(new TaskWorkerPool(                \\\n+                TaskWorkerPool::TaskWorkerType::type,  \\\n+                _exec_env,                             \\\n+                master_info));                         \\\n+    pool_name->start();\n+#else\n+#define CREATE_AND_START_POOL(type, pool_name)\n+#endif // BE_TEST\n+\n+    CREATE_AND_START_POOL(CREATE_TABLE, _create_tablet_workers);\n+    CREATE_AND_START_POOL(DROP_TABLE, _drop_tablet_workers);\n+    // Both PUSH and REALTIME_PUSH type use _push_workers\n+    CREATE_AND_START_POOL(PUSH, _push_workers);\n+    CREATE_AND_START_POOL(PUBLISH_VERSION, _publish_version_workers);\n+    CREATE_AND_START_POOL(CLEAR_TRANSACTION_TASK, _clear_transaction_task_workers);\n+    CREATE_AND_START_POOL(DELETE, _delete_workers);\n+    CREATE_AND_START_POOL(ALTER_TABLE, _alter_tablet_workers);\n+    CREATE_AND_START_POOL(CLONE, _clone_workers);\n+    CREATE_AND_START_POOL(STORAGE_MEDIUM_MIGRATE, _storage_medium_migrate_workers);\n+    CREATE_AND_START_POOL(CHECK_CONSISTENCY, _check_consistency_workers);\n+    CREATE_AND_START_POOL(REPORT_TASK, _report_task_workers);\n+    CREATE_AND_START_POOL(REPORT_DISK_STATE, _report_disk_state_workers);\n+    CREATE_AND_START_POOL(REPORT_OLAP_TABLE, _report_tablet_workers);\n+    CREATE_AND_START_POOL(UPLOAD, _upload_workers);\n+    CREATE_AND_START_POOL(DOWNLOAD, _download_workers);\n+    CREATE_AND_START_POOL(MAKE_SNAPSHOT, _make_snapshot_workers);\n+    CREATE_AND_START_POOL(RELEASE_SNAPSHOT, _release_snapshot_workers);\n+    CREATE_AND_START_POOL(MOVE, _move_dir_workers);\n+    CREATE_AND_START_POOL(RECOVER_TABLET, _recover_tablet_workers);\n+    CREATE_AND_START_POOL(UPDATE_TABLET_META_INFO, _update_tablet_meta_info_workers);\n+#undef CREATE_AND_START_POOL\n+\n #ifndef BE_TEST\n-    _create_tablet_workers->start();\n-    _drop_tablet_workers->start();\n-    _push_workers->start();\n-    _publish_version_workers->start();\n-    _clear_transaction_task_workers->start();\n-    _delete_workers->start();\n-    _alter_tablet_workers->start();\n-    _clone_workers->start();\n-    _storage_medium_migrate_workers->start();\n-    _check_consistency_workers->start();\n-    _report_task_workers->start();\n-    _report_disk_state_workers->start();\n-    _report_tablet_workers->start();\n-    _upload_workers->start();\n-    _download_workers->start();\n-    _make_snapshot_workers->start();\n-    _release_snapshot_workers->start();\n-    _move_dir_workers->start();\n-    _recover_tablet_workers->start();\n-    _update_tablet_meta_info_workers->start();\n     // Add subscriber here and register listeners\n     TopicListener* user_resource_listener = new UserResourceListener(exec_env, master_info);\n     LOG(INFO) << \"Register user resource listener\";\n     _topic_subscriber->register_listener(doris::TTopicType::type::RESOURCE, user_resource_listener);\n #endif\n }\n \n-AgentServer::~AgentServer() {\n-    if (_create_tablet_workers != NULL) {\n-        delete _create_tablet_workers;\n-    }\n-    if (_drop_tablet_workers != NULL) {\n-        delete _drop_tablet_workers;\n-    }\n-    if (_push_workers != NULL) {\n-        delete _push_workers;\n-    }\n-    if (_publish_version_workers != NULL) {\n-        delete _publish_version_workers;\n-    }\n-    if (_clear_transaction_task_workers != NULL) {\n-        delete _clear_transaction_task_workers;\n-    }\n-    if (_delete_workers != NULL) {\n-        delete _delete_workers;\n-    }\n-    if (_alter_tablet_workers != NULL) {\n-        delete _alter_tablet_workers;\n-    }\n-    if (_clone_workers != NULL) {\n-        delete _clone_workers;\n-    }\n-    if (_storage_medium_migrate_workers != NULL) {\n-        delete _storage_medium_migrate_workers;\n-    }\n-    if (_check_consistency_workers != NULL) {\n-        delete _check_consistency_workers;\n-    }\n-    if (_report_task_workers != NULL) {\n-        delete _report_task_workers;\n-    }\n-    if (_report_disk_state_workers != NULL) {\n-        delete _report_disk_state_workers;\n-    }\n-    if (_report_tablet_workers != NULL) {\n-        delete _report_tablet_workers;\n-    }\n-    if (_upload_workers != NULL) {\n-        delete _upload_workers;\n-    }\n-    if (_download_workers != NULL) {\n-        delete _download_workers;\n-    }\n-    if (_make_snapshot_workers != NULL) {\n-        delete _make_snapshot_workers;\n-    }\n-    if (_move_dir_workers!= NULL) {\n-        delete _move_dir_workers;\n-    }\n-    if (_recover_tablet_workers != NULL) {\n-        delete _recover_tablet_workers;\n-    }\n-\n-    if (_update_tablet_meta_info_workers != NULL) {\n-        delete _update_tablet_meta_info_workers;\n-    }\n-    if (_release_snapshot_workers != NULL) {\n-        delete _release_snapshot_workers;\n-    }\n-    if (_topic_subscriber !=NULL) {\n-        delete _topic_subscriber;\n-    }\n-}\n-\n-void AgentServer::submit_tasks(\n-        TAgentResult& return_value,\n-        const vector<TAgentTaskRequest>& tasks) {\n+AgentServer::~AgentServer() { }\n \n-    // Set result to dm\n-    vector<string> error_msgs;\n-    TStatusCode::type status_code = TStatusCode::OK;\n+void AgentServer::submit_tasks(TAgentResult& agent_result, const vector<TAgentTaskRequest>& tasks) {\n+    Status ret_st;\n \n-    // TODO check require master same to heartbeat master\n-    if (_master_info.network_address.hostname == \"\"\n-            || _master_info.network_address.port == 0) {\n-        error_msgs.push_back(\"Not get master heartbeat yet.\");\n-        return_value.status.__set_error_msgs(error_msgs);\n-        return_value.status.__set_status_code(TStatusCode::CANCELLED);\n+    // TODO check master_info here if it is the same with that of heartbeat rpc\n+    if (_master_info.network_address.hostname == \"\" || _master_info.network_address.port == 0) {\n+        Status ret_st = Status::Cancelled(\"Have not get FE Master heartbeat yet\");\n+        ret_st.to_thrift(&agent_result.status);\n         return;\n     }\n \n     for (auto task : tasks) {\n+        VLOG_RPC << \"submit one task: \" << apache::thrift::ThriftDebugString(task).c_str();\n         TTaskType::type task_type = task.task_type;\n         int64_t signature = task.signature;\n \n+#define HANDLE_TYPE(t_task_type, work_pool, req_member)                     \\\n+    case t_task_type:                                                       \\\n+        if (task.__isset.req_member) {                                      \\\n+            work_pool->submit_task(task);                                   \\\n+        }                                                                   \\\n+        ret_st = Status::InvalidArgument(strings::Substitute(               \\\n+                \"task(signature=$0) has wrong request member\", signature)); \\\n+        break;\n+\n+        // TODO(lingbin): divided these task types into several categories\n         switch (task_type) {\n-        case TTaskType::CREATE:\n-            if (task.__isset.create_tablet_req) {\n-               _create_tablet_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::DROP:\n-            if (task.__isset.drop_tablet_req) {\n-                _drop_tablet_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n+        HANDLE_TYPE(TTaskType::CREATE, _create_tablet_workers, create_tablet_req);\n+        HANDLE_TYPE(TTaskType::DROP, _drop_tablet_workers, drop_tablet_req);\n+        HANDLE_TYPE(TTaskType::PUBLISH_VERSION, _publish_version_workers, publish_version_req);\n+        HANDLE_TYPE(TTaskType::CLEAR_TRANSACTION_TASK,\n+                    _clear_transaction_task_workers,\n+                    clear_transaction_task_req);\n+        HANDLE_TYPE(TTaskType::CLONE, _clone_workers, clone_req);\n+        HANDLE_TYPE(TTaskType::STORAGE_MEDIUM_MIGRATE,\n+                    _storage_medium_migrate_workers,\n+                    storage_medium_migrate_req);\n+        HANDLE_TYPE(TTaskType::CHECK_CONSISTENCY,\n+                    _check_consistency_workers,\n+                    check_consistency_req);\n+        HANDLE_TYPE(TTaskType::UPLOAD, _upload_workers, upload_req);\n+        HANDLE_TYPE(TTaskType::DOWNLOAD, _download_workers, download_req);\n+        HANDLE_TYPE(TTaskType::MAKE_SNAPSHOT, _make_snapshot_workers, snapshot_req);\n+        HANDLE_TYPE(TTaskType::RELEASE_SNAPSHOT, _release_snapshot_workers, release_snapshot_req);\n+        HANDLE_TYPE(TTaskType::MOVE, _move_dir_workers, move_dir_req);\n+        HANDLE_TYPE(TTaskType::RECOVER_TABLET, _recover_tablet_workers, recover_tablet_req);\n+        HANDLE_TYPE(TTaskType::UPDATE_TABLET_META_INFO,\n+                    _update_tablet_meta_info_workers,\n+                    update_tablet_meta_info_req);\n+\n         case TTaskType::REALTIME_PUSH:\n         case TTaskType::PUSH:\n-            if (task.__isset.push_req) {\n-                if (task.push_req.push_type == TPushType::LOAD\n-                        || task.push_req.push_type == TPushType::LOAD_DELETE) {\n-                    _push_workers->submit_task(task);\n-                } else if (task.push_req.push_type == TPushType::DELETE) {\n-                    _delete_workers->submit_task(task);\n-                } else {\n-                    status_code = TStatusCode::ANALYSIS_ERROR;\n-                }\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n+            if (!task.__isset.push_req) {\n+                ret_st = Status::InvalidArgument(strings::Substitute(\n+                        \"task(signature=$0) has wrong request member\", signature));\n+                break;\n             }\n-            break;\n-        case TTaskType::PUBLISH_VERSION:\n-            if (task.__isset.publish_version_req) {\n-                _publish_version_workers->submit_task(task);\n+            if (task.push_req.push_type == TPushType::LOAD\n+                    || task.push_req.push_type == TPushType::LOAD_DELETE) {\n+                _push_workers->submit_task(task);\n+            } else if (task.push_req.push_type == TPushType::DELETE) {\n+                _delete_workers->submit_task(task);\n             } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::CLEAR_TRANSACTION_TASK:\n-            if (task.__isset.clear_transaction_task_req) {\n-                _clear_transaction_task_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n+                ret_st = Status::InvalidArgument(strings::Substitute(\n+                        \"task(signature=$0, type=$1, push_type=$2) has wrong push_type\",\n+                        signature, task_type, task.push_req.push_type));\n             }\n             break;\n         case TTaskType::ALTER:\n             if (task.__isset.alter_tablet_req || task.__isset.alter_tablet_req_v2) {\n                 _alter_tablet_workers->submit_task(task);\n             } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::CLONE:\n-            if (task.__isset.clone_req) {\n-                _clone_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::STORAGE_MEDIUM_MIGRATE:\n-            if (task.__isset.storage_medium_migrate_req) {\n-                _storage_medium_migrate_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::CHECK_CONSISTENCY:\n-            if (task.__isset.check_consistency_req) {\n-                _check_consistency_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::UPLOAD:\n-            if (task.__isset.upload_req) {\n-                _upload_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::DOWNLOAD:\n-            if (task.__isset.download_req) {\n-                _download_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::MAKE_SNAPSHOT:\n-            if (task.__isset.snapshot_req) {\n-                _make_snapshot_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::RELEASE_SNAPSHOT:\n-            if (task.__isset.release_snapshot_req) {\n-                _release_snapshot_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::MOVE:\n-            if (task.__isset.move_dir_req) {\n-                _move_dir_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::RECOVER_TABLET:\n-            if (task.__isset.recover_tablet_req) {\n-                _recover_tablet_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n-            }\n-            break;\n-        case TTaskType::UPDATE_TABLET_META_INFO:\n-            if (task.__isset.update_tablet_meta_info_req) {\n-                _update_tablet_meta_info_workers->submit_task(task);\n-            } else {\n-                status_code = TStatusCode::ANALYSIS_ERROR;\n+                ret_st = Status::InvalidArgument(strings::Substitute(\n+                        \"task(signature=$0) has wrong request member\", signature));\n             }\n             break;\n         default:\n-            status_code = TStatusCode::ANALYSIS_ERROR;\n+            ret_st = Status::InvalidArgument(strings::Substitute(\n+                    \"task(signature=$0, type=$1) has wrong task type\", signature, task_type));\n             break;\n         }\n+#undef HANDLE_TYPE\n \n-        if (status_code == TStatusCode::ANALYSIS_ERROR) {\n-            OLAP_LOG_WARNING(\"task anaysis_error, signature: %ld\", signature);\n-            error_msgs.push_back(\"the task signature is:\" + to_string(signature) + \" has wrong request.\");\n+        if (!ret_st.ok()) {\n+            LOG(WARNING) << \"fail to submit task. reason: \" << ret_st.get_error_msg()\n+                    << \", task: \" << task;\n+            break;\n         }\n     }\n \n-    return_value.status.__set_error_msgs(error_msgs);\n-    return_value.status.__set_status_code(status_code);\n+    ret_st.to_thrift(&agent_result.status);\n }\n \n-void AgentServer::make_snapshot(TAgentResult& return_value,\n-        const TSnapshotRequest& snapshot_request) {\n-    TStatus status;\n-    vector<string> error_msgs;\n-    TStatusCode::type status_code = TStatusCode::OK;\n-    return_value.__set_snapshot_version(snapshot_request.preferred_snapshot_version);\n+void AgentServer::make_snapshot(TAgentResult& t_agent_result,\n+                                const TSnapshotRequest& snapshot_request) {\n+    Status ret_st;\n     string snapshot_path;\n-    OLAPStatus make_snapshot_status =\n+    OLAPStatus err_code =\n             SnapshotManager::instance()->make_snapshot(snapshot_request, &snapshot_path);\n-    if (make_snapshot_status != OLAP_SUCCESS) {\n-        status_code = TStatusCode::RUNTIME_ERROR;\n-        OLAP_LOG_WARNING(\"make_snapshot failed. tablet_id: %ld, schema_hash: %ld, status: %d\",\n-                         snapshot_request.tablet_id, snapshot_request.schema_hash,\n-                         make_snapshot_status);\n-        error_msgs.push_back(\"make_snapshot failed. status: \" +\n-                             boost::lexical_cast<string>(make_snapshot_status));\n+    if (err_code != OLAP_SUCCESS) {\n+        LOG(WARNING) << \"fail to make_snapshot. tablet_id=\" << snapshot_request.tablet_id\n+                     << \", schema_hash=\" << snapshot_request.schema_hash\n+                     << \", error_code=\" << err_code;\n+        ret_st = Status::RuntimeError(strings::Substitute(\n+                    \"fail to make_snapshot. err_code=$0\", err_code));\n     } else {\n-        LOG(INFO) << \"make_snapshot success. tablet_id: \" << snapshot_request.tablet_id\n-                  << \" schema_hash: \" << snapshot_request.schema_hash << \" snapshot_path: \" << snapshot_path;\n-        return_value.__set_snapshot_path(snapshot_path);\n+        LOG(INFO) << \"success to make_snapshot. tablet_id=\" << snapshot_request.tablet_id\n+                  << \", schema_hash=\" << snapshot_request.schema_hash\n+                  << \", snapshot_path: \" << snapshot_path;\n+        t_agent_result.__set_snapshot_path(snapshot_path);\n     }\n \n-    status.__set_error_msgs(error_msgs);\n-    status.__set_status_code(status_code);\n-    return_value.__set_status(status);\n+    ret_st.to_thrift(&t_agent_result.status);\n+    t_agent_result.__set_snapshot_version(snapshot_request.preferred_snapshot_version);\n     if (snapshot_request.__isset.allow_incremental_clone) {\n-        return_value.__set_allow_incremental_clone(snapshot_request.allow_incremental_clone);\n+        t_agent_result.__set_allow_incremental_clone(snapshot_request.allow_incremental_clone);\n     }\n }\n \n-void AgentServer::release_snapshot(TAgentResult& return_value, const std::string& snapshot_path) {\n-    vector<string> error_msgs;\n-    TStatusCode::type status_code = TStatusCode::OK;\n-\n-    OLAPStatus release_snapshot_status =\n-            SnapshotManager::instance()->release_snapshot(snapshot_path);\n-    if (release_snapshot_status != OLAP_SUCCESS) {\n-        status_code = TStatusCode::RUNTIME_ERROR;\n-        LOG(WARNING) << \"release_snapshot failed. snapshot_path: \" << snapshot_path << \", status: \" << release_snapshot_status;\n-        error_msgs.push_back(\"release_snapshot failed. status: \" +\n-                             boost::lexical_cast<string>(release_snapshot_status));\n+void AgentServer::release_snapshot(TAgentResult& t_agent_result, const std::string& snapshot_path) {\n+    Status ret_st;\n+    OLAPStatus err_code = SnapshotManager::instance()->release_snapshot(snapshot_path);\n+    if (err_code != OLAP_SUCCESS) {\n+        LOG(WARNING) << \"failt to release_snapshot. snapshot_path: \" << snapshot_path\n+                     << \", err_code: \" << err_code;\n+        ret_st = Status::RuntimeError(strings::Substitute(\n+                    \"fail to release_snapshot. err_code=$0\", err_code));\n     } else {\n-        LOG(INFO) << \"release_snapshot success. snapshot_path: \" << snapshot_path << \", status: \" << release_snapshot_status;\n+        LOG(INFO) << \"success to release_snapshot. snapshot_path=\" << snapshot_path\n+                  << \", err_code=\" << err_code;\n     }\n-\n-    return_value.status.__set_error_msgs(error_msgs);\n-    return_value.status.__set_status_code(status_code);\n+    ret_st.to_thrift(&t_agent_result.status);\n }\n \n-void AgentServer::publish_cluster_state(TAgentResult& _return, const TAgentPublishRequest& request) {\n-    vector<string> error_msgs;\n+// TODO(lingbin): always return OK?\n+void AgentServer::publish_cluster_state(TAgentResult& t_agent_result,", "originalCommit": "7f27e037313f68bfa66763a22529e53010f9933e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU5NzY0NQ==", "url": "https://github.com/apache/incubator-doris/pull/2831#discussion_r374597645", "bodyText": "Done.", "author": "lingbin", "createdAt": "2020-02-04T10:45:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU4MzI4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMzNDE5MA==", "url": "https://github.com/apache/incubator-doris/pull/2831#discussion_r375334190", "bodyText": "Unfortunately, Multi Load will use these xxx_etl_xxx() methods, so they will be kept.", "author": "lingbin", "createdAt": "2020-02-05T15:41:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU4MzI4Ng=="}], "type": "inlineReview"}, {"oid": "e68dbaa5f0c690f71858fe9eb2df4c95ba9d0846", "url": "https://github.com/apache/incubator-doris/commit/e68dbaa5f0c690f71858fe9eb2df4c95ba9d0846", "message": "Modify according comments", "committedDate": "2020-02-04T11:49:23Z", "type": "commit"}, {"oid": "60e6cb8575702a570bb42c02171ea4bab9e0f654", "url": "https://github.com/apache/incubator-doris/commit/60e6cb8575702a570bb42c02171ea4bab9e0f654", "message": "Revert xxx_etl_xxx() methods\n\n`Multi-Load` task will still use these `xxx_etl_xxx()` methods,\nso they should be kept.", "committedDate": "2020-02-05T16:04:25Z", "type": "commit"}]}