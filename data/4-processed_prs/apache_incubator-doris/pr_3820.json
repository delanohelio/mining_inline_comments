{"pr_number": 3820, "pr_title": "[Spill To Disk] Analytic_Eval_Node Support Spill Disk and Del Some Unless Code", "pr_createdAt": "2020-06-10T10:01:00Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3820", "timeline": [{"oid": "ff6b8f268efa263ed2236cb986b9861c961f713d", "url": "https://github.com/apache/incubator-doris/commit/ff6b8f268efa263ed2236cb986b9861c961f713d", "message": "1. Add enable spilling in query option, support spill disk in Analytic_Eval_Node, FE can open enable spilling by\n\n         set enable_spilling = true;\n\nNow, Sort Node and Analytic_Eval_Node can spill to disk.\n2. Delete merge merge_sorter code we do not use now.\n3. Replace buffered_tuple_stream by buffered_tuple_stream2 in Analytic_Eval_Node and support spill to disk. Delete the useless code of buffered_block_mgr and buffered_tuple_stream.\n4. Add DataStreamRecvr Profile. Move the counter belong to DataStreamRecvr from fragment to DataStreamRecvr Profile to make clear of Running Profile.", "committedDate": "2020-06-10T09:36:06Z", "type": "commit"}, {"oid": "61538fae25de0b1d1ad63173b75bde775cddd196", "url": "https://github.com/apache/incubator-doris/commit/61538fae25de0b1d1ad63173b75bde775cddd196", "message": "change some hint in code", "committedDate": "2020-06-10T09:52:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2OTIxNA==", "url": "https://github.com/apache/incubator-doris/pull/3820#discussion_r438169214", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                profile->add_child(_profile.get(), true, nullptr);\n          \n          \n            \n                _profile->add_child(_profile.get(), true, nullptr);", "author": "wutiangan", "createdAt": "2020-06-10T14:31:56Z", "path": "be/src/runtime/data_stream_recvr.cc", "diffHunk": "@@ -360,9 +360,14 @@ DataStreamRecvr::DataStreamRecvr(\n             _row_desc(row_desc),\n             _is_merging(is_merging),\n             _num_buffered_bytes(0),\n-            _profile(profile),\n             _sub_plan_query_statistics_recvr(sub_plan_query_statistics_recvr) {\n-    _mem_tracker.reset(new MemTracker(-1, \"DataStreamRecvr\", parent_tracker));\n+    _profile.reset(new RuntimeProfile(nullptr, \"DataStreamRecvr\"));\n+    profile->add_child(_profile.get(), true, nullptr);", "originalCommit": "61538fae25de0b1d1ad63173b75bde775cddd196", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxNTAzNw==", "url": "https://github.com/apache/incubator-doris/pull/3820#discussion_r438215037", "bodyText": "@wutiangan Hello,  The profile is the param of the method DataStreamRecvr constructed function. _profile is the unique_ptr of the RunningProile be long to the object DataStreamRecvr.\nSo they are indeed different, the suggest change may cause problem.", "author": "HappenLee", "createdAt": "2020-06-10T15:30:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2OTIxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzODYwOA==", "url": "https://github.com/apache/incubator-doris/pull/3820#discussion_r438238608", "bodyText": "use enable_spill is better which is compatible to fe", "author": "chaoyli", "createdAt": "2020-06-10T16:04:04Z", "path": "be/src/runtime/buffered_block_mgr2.cc", "diffHunk": "@@ -210,8 +210,7 @@ BufferedBlockMgr2::BufferedBlockMgr2(RuntimeState* state, TmpFileMgr* tmp_file_m\n     _max_block_size(block_size),\n     // Keep two writes in flight per scratch disk so the disks can stay busy.\n     _block_write_threshold(tmp_file_mgr->num_active_tmp_devices() * 2),\n-    // _disable_spill(state->query_ctx().disable_spilling),\n-    _disable_spill(false),\n+    _disable_spill(state->disable_spill()),", "originalCommit": "61538fae25de0b1d1ad63173b75bde775cddd196", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUxNTU5Ng==", "url": "https://github.com/apache/incubator-doris/pull/3820#discussion_r438515596", "bodyText": "ok\uff0ci will change the bool var", "author": "HappenLee", "createdAt": "2020-06-11T02:59:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzODYwOA=="}], "type": "inlineReview"}, {"oid": "998b576d5b802a6b740689b3ab08b66725661c79", "url": "https://github.com/apache/incubator-doris/commit/998b576d5b802a6b740689b3ab08b66725661c79", "message": "replace disable_spill with enable_spill which is better compatible to FE", "committedDate": "2020-06-11T03:10:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIwMzA5NQ==", "url": "https://github.com/apache/incubator-doris/pull/3820#discussion_r439203095", "bodyText": "Please add this variable to doc.", "author": "kangkaisen", "createdAt": "2020-06-12T04:41:13Z", "path": "gensrc/thrift/PaloInternalService.thrift", "diffHunk": "@@ -136,6 +136,8 @@ struct TQueryOptions {\n   // see BE config `max_pushdown_conditions_per_column` for details\n   // if set, this will overwrite the BE config.\n   30: optional i32 max_pushdown_conditions_per_column\n+  // whether enable spilling to disk\n+  31: optional bool enable_spilling = false;", "originalCommit": "998b576d5b802a6b740689b3ab08b66725661c79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMxNzM4Mg==", "url": "https://github.com/apache/incubator-doris/pull/3820#discussion_r439317382", "bodyText": "The variable already in the doc\u3002\n\nI will change some detail of the doc.", "author": "HappenLee", "createdAt": "2020-06-12T09:41:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIwMzA5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM1NDA2NQ==", "url": "https://github.com/apache/incubator-doris/pull/3820#discussion_r439354065", "bodyText": "OK", "author": "kangkaisen", "createdAt": "2020-06-12T11:03:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIwMzA5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIwMzcxMA==", "url": "https://github.com/apache/incubator-doris/pull/3820#discussion_r439203710", "bodyText": "What's concrete problem will happen?", "author": "kangkaisen", "createdAt": "2020-06-12T04:43:56Z", "path": "be/src/runtime/data_stream_recvr.cc", "diffHunk": "@@ -360,9 +360,14 @@ DataStreamRecvr::DataStreamRecvr(\n             _row_desc(row_desc),\n             _is_merging(is_merging),\n             _num_buffered_bytes(0),\n-            _profile(profile),\n             _sub_plan_query_statistics_recvr(sub_plan_query_statistics_recvr) {\n-    _mem_tracker.reset(new MemTracker(-1, \"DataStreamRecvr\", parent_tracker));\n+    _profile.reset(new RuntimeProfile(nullptr, \"DataStreamRecvr\"));\n+    profile->add_child(_profile.get(), true, nullptr);\n+\n+    // TODO: Now the parent tracker may cause problem when we need spill to disk, so we", "originalCommit": "998b576d5b802a6b740689b3ab08b66725661c79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzOTY2Mg==", "url": "https://github.com/apache/incubator-doris/pull/3820#discussion_r439339662", "bodyText": "To be honest, the problem is a little tricky. When the data to be spilled to disk which be read from the underlying EXCHANE NODE. The process is asynchronous. There are two different threads involved\n\n\nDataStreamRecv will continuously obtain the batch through RPC call and write it to the local queue. In this process, the memory consumption of the batch will be recorded in MemTracker.\n\n\nWhen we need to spill to disk, BlockMgr will try to use all the memory to speed up the query. It's going to keep calling try_ consume to get memory from MemTracker.\n\n\nOnce try_ consume failed. The SortNode will try to drop the disk. At this time, the memory usage has approached the threshold. (at this time, the memory usage does not exceed the MemTracker limit)\n\n\nIf thread switching occurs at this time, switch from the SortNode to DataStreamRecv. Because the SortNode is performing like sort and other CPU time consuming operations, it does not retrieve the data from the Exchange Node in time. DataStreamRecv writes data to the queue and records memory consumption. (memory usage exceeds MemTracker limit at this time)\n\n\nWhen the thread switches back to SortNode. The check found that MemTracker exceeded the memory limit, and the query failed.\n\n\nAlthough the queue in DataStreamRecv has memory limitation, it only records the size before Protobuffer deserialization. MemTracker records the size after deserialization. Because Protobuffer compresses the data, there is a gap of three times in my test scenario.\nAt present, My idea is to use this part of memory independently and use a running profile to record the memory usage by DataStreamRecv, so as to avoid this problem temporarily. How can we better solve the problem later? I want to have a further discussion in the community", "author": "HappenLee", "createdAt": "2020-06-12T10:32:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIwMzcxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM1NDYwNw==", "url": "https://github.com/apache/incubator-doris/pull/3820#discussion_r439354607", "bodyText": "The very detailed explanation, Thank you!", "author": "kangkaisen", "createdAt": "2020-06-12T11:05:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIwMzcxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIwMzk1OQ==", "url": "https://github.com/apache/incubator-doris/pull/3820#discussion_r439203959", "bodyText": "directly remove it, not comment.", "author": "kangkaisen", "createdAt": "2020-06-12T04:45:03Z", "path": "be/src/exec/exchange_node.cpp", "diffHunk": "@@ -110,7 +110,7 @@ Status ExchangeNode::close(RuntimeState* state) {\n     if (_stream_recvr != NULL) {\n         _stream_recvr->close();\n     }\n-    _stream_recvr.reset();\n+    // _stream_recvr.reset();", "originalCommit": "998b576d5b802a6b740689b3ab08b66725661c79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMyMDg0Mg==", "url": "https://github.com/apache/incubator-doris/pull/3820#discussion_r439320842", "bodyText": "ok, I will remove it", "author": "HappenLee", "createdAt": "2020-06-12T09:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIwMzk1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIwNDA3OA==", "url": "https://github.com/apache/incubator-doris/pull/3820#discussion_r439204078", "bodyText": "would better give a better name.", "author": "kangkaisen", "createdAt": "2020-06-12T04:45:33Z", "path": "be/src/exec/analytic_eval_node.cpp", "diffHunk": "@@ -195,9 +194,19 @@ Status AnalyticEvalNode::open(RuntimeState* state) {\n     RETURN_IF_CANCELLED(state);\n     //RETURN_IF_ERROR(QueryMaintenance(state));\n     RETURN_IF_ERROR(child(0)->open(state));\n-    // RETURN_IF_ERROR(state->block_mgr()->RegisterClient(2, mem_tracker(), state, &client_));\n-    _input_stream.reset(new BufferedTupleStream(state, child(0)->row_desc(), state->block_mgr()));\n-    RETURN_IF_ERROR(_input_stream->init(runtime_profile()));\n+    RETURN_IF_ERROR(state->block_mgr2()->register_client(2, mem_tracker(), state, &client_));\n+    _input_stream.reset(new BufferedTupleStream2(state, child(0)->row_desc(), state->block_mgr2(), client_, false, true));\n+    RETURN_IF_ERROR(_input_stream->init(id(), runtime_profile(), true));\n+\n+    bool got_read_buffer;", "originalCommit": "998b576d5b802a6b740689b3ab08b66725661c79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMyNDczOQ==", "url": "https://github.com/apache/incubator-doris/pull/3820#discussion_r439324739", "bodyText": "@kangkaisen Hello, I could not think of a better variable name. Could you please give me a suggestion. Thank you.", "author": "HappenLee", "createdAt": "2020-06-12T09:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIwNDA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM1NjAwNw==", "url": "https://github.com/apache/incubator-doris/pull/3820#discussion_r439356007", "bodyText": "is_got_buffer or has_got_buffer?", "author": "kangkaisen", "createdAt": "2020-06-12T11:08:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIwNDA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM1NzM2Mw==", "url": "https://github.com/apache/incubator-doris/pull/3820#discussion_r439357363", "bodyText": "ok", "author": "HappenLee", "createdAt": "2020-06-12T11:11:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIwNDA3OA=="}], "type": "inlineReview"}]}