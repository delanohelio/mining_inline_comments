{"pr_number": 3454, "pr_title": "[Doris On ES] Split /_cluster/state to [indexName/_mappings, indexName/_search_shards]", "pr_createdAt": "2020-05-02T16:15:41Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3454", "timeline": [{"oid": "e2d09f57afe35521192485f76dd7b934b4ac0081", "url": "https://github.com/apache/incubator-doris/commit/e2d09f57afe35521192485f76dd7b934b4ac0081", "message": "MOD: fix varchar max error", "committedDate": "2020-05-02T03:31:37Z", "type": "commit"}, {"oid": "b6ff6b2edfaeea1c0f16b2fd69a27728c97e506d", "url": "https://github.com/apache/incubator-doris/commit/b6ff6b2edfaeea1c0f16b2fd69a27728c97e506d", "message": "MOD: Split /_cluster/state to [indexName/_mappings, indexName/_search_shards]", "committedDate": "2020-05-02T16:14:12Z", "type": "commit"}, {"oid": "d858a7415cb584db5a96bea10f4a1844da891cce", "url": "https://github.com/apache/incubator-doris/commit/d858a7415cb584db5a96bea10f4a1844da891cce", "message": "MOD: Mod some details", "committedDate": "2020-05-02T16:21:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4ODk5Nw==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r420588997", "bodyText": "why change 65535 to 65533", "author": "blackfox1983", "createdAt": "2020-05-06T07:18:27Z", "path": "docs/en/sql-reference/sql-statements/Data Types/VARCHAR.md", "diffHunk": "@@ -27,7 +27,7 @@ under the License.\n # VARCHAR\n ## Description\n MARKETING (M)\n-A variable length string, M represents the length of a variable length string. The range of M is 1-65535.\n+A variable length string, M represents the length of a variable length string. The range of M is 1-65533.", "originalCommit": "d858a7415cb584db5a96bea10f4a1844da891cce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwMzAxNw==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r420603017", "bodyText": "\u8fd9\u4e2a\u6298\u884c \uff0c\u6ca1\u770b\u61c2\u903b\u8f91\u3002\n\u5982\u679c\u6298\u884c\uff0c\u53ef\u4ee5\u90fd\u6298\u884c\u3002\u5426\u5219\u6309\u7167\u53d8\u91cf\u7ec4\u6298\u884c\u3002\u907f\u514d\u4ece\u4e2d\u95f4\u6298\u884c", "author": "blackfox1983", "createdAt": "2020-05-06T07:47:18Z", "path": "fe/src/main/java/org/apache/doris/external/EsIndexState.java", "diffHunk": "@@ -166,7 +137,8 @@ public void setPartitionId(long partitionId) {\n \n     @Override\n     public String toString() {\n-        return \"EsIndexState [indexName=\" + indexName + \", partitionDesc=\" + partitionDesc + \", partitionKey=\"\n-                + partitionKey + \"]\";\n+        return \"EsIndexState [indexName=\" + indexName + \", partitionDesc=\" + partitionDesc\n+            + \", partitionKey=\"\n+            + partitionKey + \"]\";", "originalCommit": "d858a7415cb584db5a96bea10f4a1844da891cce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwNDAyNg==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r420604026", "bodyText": "\u6709\u4e9bshard\u7684\u5206\u7247\u662frelocating\u72b6\u6001\u7684\uff0c\u5176\u5b9e\u4e5f\u53ef\u4ee5\u8bfb\u53d6\u3002\u4e0d\u7136\u56e0\u4e3a\u4e00\u4e2a\u4e34\u65f6\u7684\u72b6\u6001\u5c31\u5bfc\u81f4\u6574\u4e2a\u8868\u6ca1\u6cd5\u67e5\u8be2\u4e86\uff0c\u76f4\u63a5\u5c31\u505c\u670d\u4e86\uff0c\u65e0\u6cd5\u63a5\u53d7", "author": "blackfox1983", "createdAt": "2020-05-06T07:49:16Z", "path": "fe/src/main/java/org/apache/doris/external/EsIndexState.java", "diffHunk": "@@ -76,66 +68,45 @@ public TNetworkAddress randomAddress(Map<String, EsNodeInfo> nodesInfo) {\n         EsNodeInfo[] nodeInfos = (EsNodeInfo[]) nodesInfo.values().toArray();\n         return nodeInfos[seed].getPublishAddress();\n     }\n-    \n-    public static EsIndexState parseIndexStateV55(String indexName, JSONObject indicesRoutingMap, \n-            JSONObject nodesMap, \n-            JSONObject indicesMetaMap, PartitionInfo partitionInfo) throws AnalysisException {\n+\n+    public static EsIndexState parseIndexState(String indexName, JSONObject nodesMap,\n+        JSONArray shards) {\n         EsIndexState indexState = new EsIndexState(indexName);\n-        JSONObject shardRoutings = indicesRoutingMap.getJSONObject(indexName).getJSONObject(\"shards\");\n-        for (String shardKey : shardRoutings.keySet()) {\n+        int length = shards.length();\n+        for (int i = 0; i < length; i++) {\n             List<EsShardRouting> singleShardRouting = Lists.newArrayList();\n-            JSONArray shardRouting = shardRoutings.getJSONArray(shardKey);\n-            for (int i = 0; i < shardRouting.length(); ++i) {\n-                JSONObject shard = shardRouting.getJSONObject(i);\n+            JSONArray shardsArray = shards.getJSONArray(i);\n+            int arrayLength = shardsArray.length();\n+            for (int j = 0; j < arrayLength; j++) {\n+                JSONObject shard = shardsArray.getJSONObject(j);\n                 String shardState = shard.getString(\"state\");\n                 if (\"STARTED\".equalsIgnoreCase(shardState)) {", "originalCommit": "d858a7415cb584db5a96bea10f4a1844da891cce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a3d29281ef993706ee654aeb7d0853be74f7e499", "url": "https://github.com/apache/incubator-doris/commit/a3d29281ef993706ee654aeb7d0853be74f7e499", "message": "MOD: Cancel the folding line\uff0cRemove the changes to varchar.md", "committedDate": "2020-05-06T09:02:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwMDk1Nw==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r421200957", "bodyText": "EsIndexState maybe need a better name", "author": "wuyunfeng", "createdAt": "2020-05-07T02:22:57Z", "path": "fe/src/main/java/org/apache/doris/external/EsIndexState.java", "diffHunk": "@@ -76,66 +68,45 @@ public TNetworkAddress randomAddress(Map<String, EsNodeInfo> nodesInfo) {\n         EsNodeInfo[] nodeInfos = (EsNodeInfo[]) nodesInfo.values().toArray();\n         return nodeInfos[seed].getPublishAddress();\n     }\n-    \n-    public static EsIndexState parseIndexStateV55(String indexName, JSONObject indicesRoutingMap, \n-            JSONObject nodesMap, \n-            JSONObject indicesMetaMap, PartitionInfo partitionInfo) throws AnalysisException {\n+\n+    public static EsIndexState parseIndexState(String indexName, JSONObject nodesMap,", "originalCommit": "a3d29281ef993706ee654aeb7d0853be74f7e499", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzOTE5NA==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r426239194", "bodyText": "Renaming EsIndexState causes multiple referenced classes to be modified\uff0cIs it really necessary to rename it\uff1f", "author": "stalary", "createdAt": "2020-05-17T09:34:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwMDk1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwMTE0Ng==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r421201146", "bodyText": "take the relocating state into account maybe as well?", "author": "wuyunfeng", "createdAt": "2020-05-07T02:23:46Z", "path": "fe/src/main/java/org/apache/doris/external/EsIndexState.java", "diffHunk": "@@ -76,66 +68,45 @@ public TNetworkAddress randomAddress(Map<String, EsNodeInfo> nodesInfo) {\n         EsNodeInfo[] nodeInfos = (EsNodeInfo[]) nodesInfo.values().toArray();\n         return nodeInfos[seed].getPublishAddress();\n     }\n-    \n-    public static EsIndexState parseIndexStateV55(String indexName, JSONObject indicesRoutingMap, \n-            JSONObject nodesMap, \n-            JSONObject indicesMetaMap, PartitionInfo partitionInfo) throws AnalysisException {\n+\n+    public static EsIndexState parseIndexState(String indexName, JSONObject nodesMap,\n+        JSONArray shards) {\n         EsIndexState indexState = new EsIndexState(indexName);\n-        JSONObject shardRoutings = indicesRoutingMap.getJSONObject(indexName).getJSONObject(\"shards\");\n-        for (String shardKey : shardRoutings.keySet()) {\n+        int length = shards.length();\n+        for (int i = 0; i < length; i++) {\n             List<EsShardRouting> singleShardRouting = Lists.newArrayList();\n-            JSONArray shardRouting = shardRoutings.getJSONArray(shardKey);\n-            for (int i = 0; i < shardRouting.length(); ++i) {\n-                JSONObject shard = shardRouting.getJSONObject(i);\n+            JSONArray shardsArray = shards.getJSONArray(i);\n+            int arrayLength = shardsArray.length();\n+            for (int j = 0; j < arrayLength; j++) {\n+                JSONObject shard = shardsArray.getJSONObject(j);\n                 String shardState = shard.getString(\"state\");\n                 if (\"STARTED\".equalsIgnoreCase(shardState)) {", "originalCommit": "a3d29281ef993706ee654aeb7d0853be74f7e499", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzOTIxOQ==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r426239219", "bodyText": "Ok, I will modify it", "author": "stalary", "createdAt": "2020-05-17T09:34:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwMTE0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwMjMxNw==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r421202317", "bodyText": "Can you move this parse method into RestClient? such as  getHttpNodes", "author": "wuyunfeng", "createdAt": "2020-05-07T02:28:28Z", "path": "fe/src/main/java/org/apache/doris/external/EsIndexState.java", "diffHunk": "@@ -76,66 +68,45 @@ public TNetworkAddress randomAddress(Map<String, EsNodeInfo> nodesInfo) {\n         EsNodeInfo[] nodeInfos = (EsNodeInfo[]) nodesInfo.values().toArray();\n         return nodeInfos[seed].getPublishAddress();\n     }\n-    \n-    public static EsIndexState parseIndexStateV55(String indexName, JSONObject indicesRoutingMap, \n-            JSONObject nodesMap, \n-            JSONObject indicesMetaMap, PartitionInfo partitionInfo) throws AnalysisException {\n+\n+    public static EsIndexState parseIndexState(String indexName, JSONObject nodesMap,", "originalCommit": "a3d29281ef993706ee654aeb7d0853be74f7e499", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzOTI1Mg==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r426239252", "bodyText": "Ok, I will modify it", "author": "stalary", "createdAt": "2020-05-17T09:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwMjMxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwMjgzNg==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r421202836", "bodyText": "it is better to return the top needed, such as above Map<String, EsNodeInfo> getHttpNodes()", "author": "wuyunfeng", "createdAt": "2020-05-07T02:30:20Z", "path": "fe/src/main/java/org/apache/doris/external/EsRestClient.java", "diffHunk": "@@ -49,48 +49,52 @@\n             .readTimeout(10, TimeUnit.SECONDS)\n             .build();\n \n-    private String basicAuth;\n-\n-    private int nextClient = 0;\n+    private Request.Builder builder;\n     private String[] nodes;\n     private String currentNode;\n+    private int currentNodeIndex = 0;\n \n     public EsRestClient(String[] nodes, String authUser, String authPassword) {\n         this.nodes = nodes;\n+        this.builder = new Request.Builder();\n         if (!Strings.isEmpty(authUser) && !Strings.isEmpty(authPassword)) {\n-            basicAuth = Credentials.basic(authUser, authPassword);\n+            this.builder.addHeader(HttpHeaders.AUTHORIZATION, Credentials.basic(authUser, authPassword));\n         }\n-        selectNextNode();\n+        this.currentNode = nodes[currentNodeIndex];\n     }\n \n-    private boolean selectNextNode() {\n-        if (nextClient >= nodes.length) {\n-            return false;\n+    private void selectNextNode() {\n+        currentNodeIndex++;\n+        // reroute, because the previously failed node may have already been restored\n+        if (currentNodeIndex >= nodes.length) {\n+            currentNodeIndex = 0;\n         }\n-        currentNode = nodes[nextClient++];\n-        return true;\n+        currentNode = nodes[currentNodeIndex];\n     }\n \n     public Map<String, EsNodeInfo> getHttpNodes() throws Exception {\n         Map<String, Map<String, Object>> nodesData = get(\"_nodes/http\", \"nodes\");\n         if (nodesData == null) {\n             return Collections.emptyMap();\n         }\n-        Map<String, EsNodeInfo> nodes = new HashMap<>();\n+        Map<String, EsNodeInfo> nodesMap = new HashMap<>();\n         for (Map.Entry<String, Map<String, Object>> entry : nodesData.entrySet()) {\n             EsNodeInfo node = new EsNodeInfo(entry.getKey(), entry.getValue());\n             if (node.hasHttp()) {\n-                nodes.put(node.getId(), node);\n+                nodesMap.put(node.getId(), node);\n             }\n         }\n-        return nodes;\n+        return nodesMap;\n     }\n \n-    public String getIndexMetaData(String indexName) {\n-        String path = \"_cluster/state?indices=\" + indexName\n-                + \"&metric=routing_table,nodes,metadata&expand_wildcards=open\";\n+    public String getIndexMapping(String indexName) {", "originalCommit": "a3d29281ef993706ee654aeb7d0853be74f7e499", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzOTI2Nw==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r426239267", "bodyText": "Ok, I will modify it", "author": "stalary", "createdAt": "2020-05-17T09:35:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwMjgzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwMjg4NQ==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r421202885", "bodyText": "same above", "author": "wuyunfeng", "createdAt": "2020-05-07T02:30:32Z", "path": "fe/src/main/java/org/apache/doris/external/EsRestClient.java", "diffHunk": "@@ -49,48 +49,52 @@\n             .readTimeout(10, TimeUnit.SECONDS)\n             .build();\n \n-    private String basicAuth;\n-\n-    private int nextClient = 0;\n+    private Request.Builder builder;\n     private String[] nodes;\n     private String currentNode;\n+    private int currentNodeIndex = 0;\n \n     public EsRestClient(String[] nodes, String authUser, String authPassword) {\n         this.nodes = nodes;\n+        this.builder = new Request.Builder();\n         if (!Strings.isEmpty(authUser) && !Strings.isEmpty(authPassword)) {\n-            basicAuth = Credentials.basic(authUser, authPassword);\n+            this.builder.addHeader(HttpHeaders.AUTHORIZATION, Credentials.basic(authUser, authPassword));\n         }\n-        selectNextNode();\n+        this.currentNode = nodes[currentNodeIndex];\n     }\n \n-    private boolean selectNextNode() {\n-        if (nextClient >= nodes.length) {\n-            return false;\n+    private void selectNextNode() {\n+        currentNodeIndex++;\n+        // reroute, because the previously failed node may have already been restored\n+        if (currentNodeIndex >= nodes.length) {\n+            currentNodeIndex = 0;\n         }\n-        currentNode = nodes[nextClient++];\n-        return true;\n+        currentNode = nodes[currentNodeIndex];\n     }\n \n     public Map<String, EsNodeInfo> getHttpNodes() throws Exception {\n         Map<String, Map<String, Object>> nodesData = get(\"_nodes/http\", \"nodes\");\n         if (nodesData == null) {\n             return Collections.emptyMap();\n         }\n-        Map<String, EsNodeInfo> nodes = new HashMap<>();\n+        Map<String, EsNodeInfo> nodesMap = new HashMap<>();\n         for (Map.Entry<String, Map<String, Object>> entry : nodesData.entrySet()) {\n             EsNodeInfo node = new EsNodeInfo(entry.getKey(), entry.getValue());\n             if (node.hasHttp()) {\n-                nodes.put(node.getId(), node);\n+                nodesMap.put(node.getId(), node);\n             }\n         }\n-        return nodes;\n+        return nodesMap;\n     }\n \n-    public String getIndexMetaData(String indexName) {\n-        String path = \"_cluster/state?indices=\" + indexName\n-                + \"&metric=routing_table,nodes,metadata&expand_wildcards=open\";\n+    public String getIndexMapping(String indexName) {\n+        String path = indexName + \"/_mapping\";\n         return execute(path);\n+    }\n \n+    public String getSearchShards(String indexName) {", "originalCommit": "a3d29281ef993706ee654aeb7d0853be74f7e499", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwMzA5Ng==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r421203096", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOG.trace(\"es rest client request URL: {}\", currentNode + \"/\" + path);\n          \n          \n            \n                      if (LOG.isTraceEnabled) {\n          \n          \n            \n                        LOG.trace(\"es rest client request URL: {}\", currentNode + \"/\" + path);\n          \n          \n            \n                        }", "author": "wuyunfeng", "createdAt": "2020-05-07T02:31:19Z", "path": "fe/src/main/java/org/apache/doris/external/EsRestClient.java", "diffHunk": "@@ -137,10 +135,9 @@ private String execute(String path) {\n             if (!(currentNode.startsWith(\"http://\") || currentNode.startsWith(\"https://\"))) {\n                 currentNode = \"http://\" + currentNode;\n             }\n-\n             Request request = builder.get()\n-                    .url(currentNode + \"/\" + path)\n-                    .build();\n+                .url(currentNode + \"/\" + path)\n+                .build();\n             LOG.trace(\"es rest client request URL: {}\", currentNode + \"/\" + path);", "originalCommit": "a3d29281ef993706ee654aeb7d0853be74f7e499", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzOTMxMA==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r426239310", "bodyText": "Ok, I will modify it\uff0cI forgot to judge it here", "author": "stalary", "createdAt": "2020-05-17T09:35:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwMzA5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwMzQ1OA==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r421203458", "bodyText": "maybe we should rename such XXXTableState method name?", "author": "wuyunfeng", "createdAt": "2020-05-07T02:32:49Z", "path": "fe/src/main/java/org/apache/doris/external/EsStateStore.java", "diffHunk": "@@ -81,30 +68,34 @@ public void deRegisterTable(long tableId) {\n         esTables.remove(tableId);\n         LOG.info(\"deregister table [{}] from sync list\", tableId);\n     }\n-    \n+\n     @Override\n     protected void runAfterCatalogReady() {\n         for (EsTable esTable : esTables.values()) {\n             try {\n                 EsRestClient client = new EsRestClient(esTable.getSeeds(),\n-                        esTable.getUserName(), esTable.getPasswd());\n-                // if user not specify the es version, try to get the remote cluster versoin\n-                // in the future, we maybe need this version\n-                String indexMetaData = client.getIndexMetaData(esTable.getIndexName());\n-                if (indexMetaData == null) {\n+                    esTable.getUserName(), esTable.getPasswd());\n+\n+                String indexMapping = client.getIndexMapping(esTable.getIndexName());\n+                if (indexMapping == null) {\n                     continue;\n                 }\n-                EsTableState esTableState = parseClusterState55(indexMetaData, esTable);\n+                loadEsIndexMapping(indexMapping, esTable);\n+\n+                String shardLocation = client.getSearchShards(esTable.getIndexName());\n+                EsTableState esTableState = loadEsSearchShards(shardLocation, esTable);\n                 if (esTableState == null) {\n                     continue;\n                 }\n+\n                 if (EsTable.TRANSPORT_HTTP.equals(esTable.getTransport())) {\n                     Map<String, EsNodeInfo> nodesInfo = client.getHttpNodes();\n                     esTableState.addHttpAddress(nodesInfo);\n                 }\n                 esTable.setEsTableState(esTableState);", "originalCommit": "a3d29281ef993706ee654aeb7d0853be74f7e499", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwMzcwNQ==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r421203705", "bodyText": "Can we move all parse json into one location?", "author": "wuyunfeng", "createdAt": "2020-05-07T02:33:51Z", "path": "fe/src/main/java/org/apache/doris/external/EsStateStore.java", "diffHunk": "@@ -130,74 +121,30 @@ public void loadTableFromCatalog() {\n         }\n     }\n \n-    private EsTableState loadEsIndexMetadataV55(final EsTable esTable) {\n-        OkHttpClient.Builder clientBuilder = new OkHttpClient.Builder();\n-        clientBuilder.authenticator(new Authenticator() {\n-            @Override\n-            public Request authenticate(Route route, Response response) throws IOException {\n-                String credential = Credentials.basic(esTable.getUserName(), esTable.getPasswd());\n-                return response.request().newBuilder().header(\"Authorization\", credential).build();\n-            }\n-        });\n-        String[] seeds = esTable.getSeeds();\n-        for (String seed : seeds) {\n-            String url = seed + \"/_cluster/state?indices=\"\n-                    + esTable.getIndexName()\n-                    + \"&metric=routing_table,nodes,metadata&expand_wildcards=open\";\n-            String basicAuth = \"\";\n-            try {\n-                Request request = new Request.Builder()\n-                        .get()\n-                        .url(url)\n-                        .addHeader(\"Authorization\", basicAuth)\n-                        .build();\n-                Call call = clientBuilder.build().newCall(request);\n-                Response response = call.execute();\n-                String responseStr = response.body().string();\n-                if (response.isSuccessful()) {\n-                    try {\n-                        EsTableState esTableState = parseClusterState55(responseStr, esTable);\n-                        if (esTableState != null) {\n-                            return esTableState;\n-                        }\n-                    } catch (Exception e) {\n-                        LOG.warn(\"errors while parse response msg {}\", responseStr, e);\n-                    }\n-                } else {\n-                    LOG.info(\"errors while call es [{}] to get state info {}\", url, responseStr);\n-                }\n-            } catch (Exception e) {\n-                LOG.warn(\"errors while call es [{}]\", url, e);\n-            }\n-        }\n-        return null;\n-    }\n-\n-    @VisibleForTesting\n-    public EsTableState parseClusterState55(String responseStr, EsTable esTable)\n-            throws DdlException, AnalysisException, ExternalDataSourceException {\n-        JSONObject jsonObject = new JSONObject(responseStr);\n-        String clusterName = jsonObject.getString(\"cluster_name\");\n-        JSONObject nodesMap = jsonObject.getJSONObject(\"nodes\");\n-        // we build the doc value context for fields maybe used for scanning\n-        // \"properties\": {\n-        //      \"city\": {\n-        //        \"type\": \"text\", // text field does not have docvalue\n-        //        \"fields\": {\n-        //          \"raw\": {\n-        //            \"type\":  \"keyword\"\n-        //          }\n-        //        }\n-        //      }\n-        //    }\n-        // then the docvalue context provided the mapping between the select field and real request field :\n-        // {\"city\": \"city.raw\"}\n-        JSONObject indicesMetaMap = jsonObject.getJSONObject(\"metadata\").getJSONObject(\"indices\");\n-        JSONObject indexMetaMap = indicesMetaMap.optJSONObject(esTable.getIndexName());\n-        if (indexMetaMap != null && (esTable.isKeywordSniffEnable() || esTable.isDocValueScanEnable())) {\n-            JSONObject mappings = indexMetaMap.optJSONObject(\"mappings\");\n+    // Configure keyword and doc_values by mapping\n+    public void loadEsIndexMapping(String indexMapping, EsTable esTable) {\n+        JSONObject jsonObject = new JSONObject(indexMapping);", "originalCommit": "a3d29281ef993706ee654aeb7d0853be74f7e499", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0NDc3NA==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r426244774", "bodyText": "ok", "author": "stalary", "createdAt": "2020-05-17T10:34:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwMzcwNQ=="}], "type": "inlineReview"}, {"oid": "558b8ee49b3dc9c198ec7d5c845262a57cea4d06", "url": "https://github.com/apache/incubator-doris/commit/558b8ee49b3dc9c198ec7d5c845262a57cea4d06", "message": "Merge branch 'master' of https://github.com/apache/incubator-doris into stalary_enhancement", "committedDate": "2020-05-18T14:28:32Z", "type": "commit"}, {"oid": "d25b21fbb2287073622f33e5f25c1e4ff407cfc1", "url": "https://github.com/apache/incubator-doris/commit/d25b21fbb2287073622f33e5f25c1e4ff407cfc1", "message": "MOD: Make some changes based on comments", "committedDate": "2020-05-18T14:31:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5ODg1OQ==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r426998859", "bodyText": "why this method modified by 'public' directly return JSONObject", "author": "wuyunfeng", "createdAt": "2020-05-19T02:46:44Z", "path": "fe/src/main/java/org/apache/doris/external/EsRestClient.java", "diffHunk": "@@ -49,48 +54,103 @@\n             .readTimeout(10, TimeUnit.SECONDS)\n             .build();\n \n-    private String basicAuth;\n-\n-    private int nextClient = 0;\n+    private Request.Builder builder;\n     private String[] nodes;\n     private String currentNode;\n+    private int currentNodeIndex = 0;\n \n     public EsRestClient(String[] nodes, String authUser, String authPassword) {\n         this.nodes = nodes;\n+        this.builder = new Request.Builder();\n         if (!Strings.isEmpty(authUser) && !Strings.isEmpty(authPassword)) {\n-            basicAuth = Credentials.basic(authUser, authPassword);\n+            this.builder.addHeader(HttpHeaders.AUTHORIZATION, Credentials.basic(authUser, authPassword));\n         }\n-        selectNextNode();\n+        this.currentNode = nodes[currentNodeIndex];\n     }\n \n-    private boolean selectNextNode() {\n-        if (nextClient >= nodes.length) {\n-            return false;\n+    private void selectNextNode() {\n+        currentNodeIndex++;\n+        // reroute, because the previously failed node may have already been restored\n+        if (currentNodeIndex >= nodes.length) {\n+            currentNodeIndex = 0;\n         }\n-        currentNode = nodes[nextClient++];\n-        return true;\n+        currentNode = nodes[currentNodeIndex];\n     }\n \n     public Map<String, EsNodeInfo> getHttpNodes() throws Exception {\n         Map<String, Map<String, Object>> nodesData = get(\"_nodes/http\", \"nodes\");\n         if (nodesData == null) {\n             return Collections.emptyMap();\n         }\n-        Map<String, EsNodeInfo> nodes = new HashMap<>();\n+        Map<String, EsNodeInfo> nodesMap = new HashMap<>();\n         for (Map.Entry<String, Map<String, Object>> entry : nodesData.entrySet()) {\n             EsNodeInfo node = new EsNodeInfo(entry.getKey(), entry.getValue());\n             if (node.hasHttp()) {\n-                nodes.put(node.getId(), node);\n+                nodesMap.put(node.getId(), node);\n             }\n         }\n-        return nodes;\n+        return nodesMap;\n+    }\n+\n+    public JSONObject getIndexProperties(String indexName, String mappingType) {", "originalCommit": "d25b21fbb2287073622f33e5f25c1e4ff407cfc1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwNTIxMA==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r427005210", "bodyText": "EsStateStore.setEsTableContext need it", "author": "stalary", "createdAt": "2020-05-19T03:12:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5ODg1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5OTM3OA==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r426999378", "bodyText": "Whether can we introduce a  cached map for client to avoid new Client() happens every loop?", "author": "wuyunfeng", "createdAt": "2020-05-19T02:48:38Z", "path": "fe/src/main/java/org/apache/doris/external/EsStateStore.java", "diffHunk": "@@ -74,37 +59,48 @@ public void registerTable(EsTable esTable) {\n             return;\n         }\n         esTables.put(esTable.getId(), esTable);\n-        LOG.info(\"register a new table [{}] to sync list\", esTable.toString());\n+        LOG.info(\"register a new table [{}] to sync list\", esTable);\n     }\n \n     public void deRegisterTable(long tableId) {\n         esTables.remove(tableId);\n         LOG.info(\"deregister table [{}] from sync list\", tableId);\n     }\n-    \n+\n     @Override\n     protected void runAfterCatalogReady() {\n         for (EsTable esTable : esTables.values()) {\n             try {\n-                EsRestClient client = new EsRestClient(esTable.getSeeds(),\n-                        esTable.getUserName(), esTable.getPasswd());\n-                // if user not specify the es version, try to get the remote cluster versoin\n-                // in the future, we maybe need this version\n-                String indexMetaData = client.getIndexMetaData(esTable.getIndexName());\n-                if (indexMetaData == null) {\n+                EsRestClient client = new EsRestClient(esTable.getSeeds(), esTable.getUserName(),", "originalCommit": "d25b21fbb2287073622f33e5f25c1e4ff407cfc1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwNTk2Mw==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r427005963", "bodyText": "I think this is ok, I will modify it later", "author": "stalary", "createdAt": "2020-05-19T03:16:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5OTM3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwMzk1MA==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r427003950", "bodyText": "Can we abstract this processing json to other place such as RestClient?\nIn this way, ESStateStore would be more clearly.", "author": "wuyunfeng", "createdAt": "2020-05-19T03:07:26Z", "path": "fe/src/main/java/org/apache/doris/external/EsStateStore.java", "diffHunk": "@@ -192,77 +141,75 @@ public EsTableState parseClusterState55(String responseStr, EsTable esTable)\n         //    }\n         // then the docvalue context provided the mapping between the select field and real request field :\n         // {\"city\": \"city.raw\"}\n-        JSONObject indicesMetaMap = jsonObject.getJSONObject(\"metadata\").getJSONObject(\"indices\");\n-        JSONObject indexMetaMap = indicesMetaMap.optJSONObject(esTable.getIndexName());\n-        if (indexMetaMap != null && (esTable.isKeywordSniffEnable() || esTable.isDocValueScanEnable())) {\n-            JSONObject mappings = indexMetaMap.optJSONObject(\"mappings\");\n-            JSONObject rootSchema = mappings.optJSONObject(esTable.getMappingType());\n-            JSONObject schema = rootSchema.optJSONObject(\"properties\");\n-            List<Column> colList = esTable.getFullSchema();\n-            for (Column col : colList) {\n-                String colName = col.getName();\n-                if (!schema.has(colName)) {\n-                    continue;\n-                }\n-                JSONObject fieldObject = schema.optJSONObject(colName);\n-                String fieldType = fieldObject.optString(\"type\");\n-                // string-type field used keyword type to generate predicate\n-                if (esTable.isKeywordSniffEnable()) {\n-                    // if text field type seen, we should use the `field` keyword type?\n-                    if (\"text\".equals(fieldType)) {\n-                        JSONObject fieldsObject = fieldObject.optJSONObject(\"fields\");\n-                        if (fieldsObject != null) {\n-                            for (String key : fieldsObject.keySet()) {\n-                                JSONObject innerTypeObject = fieldsObject.optJSONObject(key);\n-                                // just for text type\n-                                if (\"keyword\".equals(innerTypeObject.optString(\"type\"))) {\n-                                    esTable.addFetchField(colName, colName + \".\" + key);\n-                                }\n+        List<Column> colList = esTable.getFullSchema();\n+        for (Column col : colList) {\n+            String colName = col.getName();\n+            if (!properties.has(colName)) {\n+                continue;\n+            }\n+            JSONObject fieldObject = properties.optJSONObject(colName);", "originalCommit": "d25b21fbb2287073622f33e5f25c1e4ff407cfc1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwNTQzMQ==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r427005431", "bodyText": "Ok, I will modify it later", "author": "stalary", "createdAt": "2020-05-19T03:13:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwMzk1MA=="}], "type": "inlineReview"}, {"oid": "407e9131954b456050aad5c2202f2f37a57a3a59", "url": "https://github.com/apache/incubator-doris/commit/407e9131954b456050aad5c2202f2f37a57a3a59", "message": "MOD: make some changes based on the comments", "committedDate": "2020-05-24T04:38:20Z", "type": "commit"}, {"oid": "f06f846b98e9cd3c82a11c6827b3680586a8da8d", "url": "https://github.com/apache/incubator-doris/commit/f06f846b98e9cd3c82a11c6827b3680586a8da8d", "message": "FIX: fix dovValueField bug", "committedDate": "2020-05-24T09:28:25Z", "type": "commit"}, {"oid": "a381b68a0b1c624c56d950f3a3c2aa275a90db47", "url": "https://github.com/apache/incubator-doris/commit/a381b68a0b1c624c56d950f3a3c2aa275a90db47", "message": "MOD: remove useless import", "committedDate": "2020-05-24T09:31:41Z", "type": "commit"}, {"oid": "8400246919090c5257c2ead4323af9ae28bcc6a3", "url": "https://github.com/apache/incubator-doris/commit/8400246919090c5257c2ead4323af9ae28bcc6a3", "message": "MOD", "committedDate": "2020-05-24T09:36:49Z", "type": "commit"}, {"oid": "7b79445f7edead4cac79f87fd3e1b8d4c3854d1d", "url": "https://github.com/apache/incubator-doris/commit/7b79445f7edead4cac79f87fd3e1b8d4c3854d1d", "message": "Merge branch 'master' of https://github.com/apache/incubator-doris into stalary_enhancement", "committedDate": "2020-05-24T09:37:11Z", "type": "commit"}, {"oid": "451b9a60693e3a2f4c415a4c77a81c12830081c9", "url": "https://github.com/apache/incubator-doris/commit/451b9a60693e3a2f4c415a4c77a81c12830081c9", "message": "MOD: Supplement Doris on es documentation", "committedDate": "2020-05-26T02:47:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzNDcxOA==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r428034718", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public EsIndexState parseIndexState(String indexName, String shardLocation) {\n          \n          \n            \n                private EsIndexState parseIndexState(String indexName, String shardLocation) {", "author": "wuyunfeng", "createdAt": "2020-05-20T13:59:13Z", "path": "fe/src/main/java/org/apache/doris/external/EsRestClient.java", "diffHunk": "@@ -49,48 +54,103 @@\n             .readTimeout(10, TimeUnit.SECONDS)\n             .build();\n \n-    private String basicAuth;\n-\n-    private int nextClient = 0;\n+    private Request.Builder builder;\n     private String[] nodes;\n     private String currentNode;\n+    private int currentNodeIndex = 0;\n \n     public EsRestClient(String[] nodes, String authUser, String authPassword) {\n         this.nodes = nodes;\n+        this.builder = new Request.Builder();\n         if (!Strings.isEmpty(authUser) && !Strings.isEmpty(authPassword)) {\n-            basicAuth = Credentials.basic(authUser, authPassword);\n+            this.builder.addHeader(HttpHeaders.AUTHORIZATION, Credentials.basic(authUser, authPassword));\n         }\n-        selectNextNode();\n+        this.currentNode = nodes[currentNodeIndex];\n     }\n \n-    private boolean selectNextNode() {\n-        if (nextClient >= nodes.length) {\n-            return false;\n+    private void selectNextNode() {\n+        currentNodeIndex++;\n+        // reroute, because the previously failed node may have already been restored\n+        if (currentNodeIndex >= nodes.length) {\n+            currentNodeIndex = 0;\n         }\n-        currentNode = nodes[nextClient++];\n-        return true;\n+        currentNode = nodes[currentNodeIndex];\n     }\n \n     public Map<String, EsNodeInfo> getHttpNodes() throws Exception {\n         Map<String, Map<String, Object>> nodesData = get(\"_nodes/http\", \"nodes\");\n         if (nodesData == null) {\n             return Collections.emptyMap();\n         }\n-        Map<String, EsNodeInfo> nodes = new HashMap<>();\n+        Map<String, EsNodeInfo> nodesMap = new HashMap<>();\n         for (Map.Entry<String, Map<String, Object>> entry : nodesData.entrySet()) {\n             EsNodeInfo node = new EsNodeInfo(entry.getKey(), entry.getValue());\n             if (node.hasHttp()) {\n-                nodes.put(node.getId(), node);\n+                nodesMap.put(node.getId(), node);\n             }\n         }\n-        return nodes;\n+        return nodesMap;\n+    }\n+\n+    public JSONObject getIndexProperties(String indexName, String mappingType) {\n+        String path = indexName + \"/_mapping\";\n+        String indexMapping = execute(path);\n+        if (indexMapping == null) {\n+            return null;\n+        }\n+        return parseProperties(indexMapping, mappingType);\n     }\n \n-    public String getIndexMetaData(String indexName) {\n-        String path = \"_cluster/state?indices=\" + indexName\n-                + \"&metric=routing_table,nodes,metadata&expand_wildcards=open\";\n-        return execute(path);\n+    public JSONObject parseProperties(String indexMapping, String mappingType) {\n+        JSONObject jsonObject = new JSONObject(indexMapping);\n+        // the indexName use alias takes the first mapping\n+        Iterator<String> keys = jsonObject.keys();\n+        String docKey = keys.next();\n+        JSONObject docData = jsonObject.optJSONObject(docKey);\n+        JSONObject mappings = docData.optJSONObject(\"mappings\");\n+        JSONObject rootSchema = mappings.optJSONObject(mappingType);\n+        return rootSchema.optJSONObject(\"properties\");\n+    }\n+\n+    public EsIndexState getIndexState(String indexName) {\n+        String path = indexName + \"/_search_shards\";\n+        String shardLocation = execute(path);\n+        if (shardLocation == null) {\n+            return null;\n+        }\n+        return parseIndexState(indexName, shardLocation);\n+    }\n \n+    public EsIndexState parseIndexState(String indexName, String shardLocation) {", "originalCommit": "d25b21fbb2287073622f33e5f25c1e4ff407cfc1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzMzgyMQ==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r430333821", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public JSONObject parseProperties(String indexMapping, String mappingType) {\n          \n          \n            \n                private JSONObject parseProperties(String indexMapping, String mappingType) {", "author": "wuyunfeng", "createdAt": "2020-05-26T11:10:17Z", "path": "fe/src/main/java/org/apache/doris/external/EsRestClient.java", "diffHunk": "@@ -46,55 +52,109 @@\n     }\n \n     private static OkHttpClient networkClient = new OkHttpClient.Builder()\n-            .readTimeout(10, TimeUnit.SECONDS)\n-            .build();\n+        .readTimeout(10, TimeUnit.SECONDS)\n+        .build();\n \n-    private String basicAuth;\n-\n-    private int nextClient = 0;\n+    private Request.Builder builder;\n     private String[] nodes;\n     private String currentNode;\n+    private int currentNodeIndex = 0;\n \n     public EsRestClient(String[] nodes, String authUser, String authPassword) {\n         this.nodes = nodes;\n+        this.builder = new Request.Builder();\n         if (!Strings.isEmpty(authUser) && !Strings.isEmpty(authPassword)) {\n-            basicAuth = Credentials.basic(authUser, authPassword);\n+            this.builder.addHeader(HttpHeaders.AUTHORIZATION, Credentials.basic(authUser, authPassword));\n         }\n-        selectNextNode();\n+        this.currentNode = nodes[currentNodeIndex];\n     }\n \n-    private boolean selectNextNode() {\n-        if (nextClient >= nodes.length) {\n-            return false;\n+    private void selectNextNode() {\n+        currentNodeIndex++;\n+        // reroute, because the previously failed node may have already been restored\n+        if (currentNodeIndex >= nodes.length) {\n+            currentNodeIndex = 0;\n         }\n-        currentNode = nodes[nextClient++];\n-        return true;\n+        currentNode = nodes[currentNodeIndex];\n     }\n \n     public Map<String, EsNodeInfo> getHttpNodes() throws Exception {\n         Map<String, Map<String, Object>> nodesData = get(\"_nodes/http\", \"nodes\");\n         if (nodesData == null) {\n             return Collections.emptyMap();\n         }\n-        Map<String, EsNodeInfo> nodes = new HashMap<>();\n+        Map<String, EsNodeInfo> nodesMap = new HashMap<>();\n         for (Map.Entry<String, Map<String, Object>> entry : nodesData.entrySet()) {\n             EsNodeInfo node = new EsNodeInfo(entry.getKey(), entry.getValue());\n             if (node.hasHttp()) {\n-                nodes.put(node.getId(), node);\n+                nodesMap.put(node.getId(), node);\n             }\n         }\n-        return nodes;\n+        return nodesMap;\n+    }\n+\n+    public JSONObject getIndexProperties(String indexName, String mappingType) {\n+        String path = indexName + \"/_mapping\";\n+        String indexMapping = execute(path);\n+        if (indexMapping == null) {\n+            return null;\n+        }\n+        return parseProperties(indexMapping, mappingType);\n     }\n \n-    public String getIndexMetaData(String indexName) {\n-        String path = \"_cluster/state?indices=\" + indexName\n-                + \"&metric=routing_table,nodes,metadata&expand_wildcards=open\";\n-        return execute(path);\n+    public JSONObject parseProperties(String indexMapping, String mappingType) {", "originalCommit": "451b9a60693e3a2f4c415a4c77a81c12830081c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzNDM5Mg==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r430334392", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return parseProperties(indexMapping, mappingType);\n          \n          \n            \n                    return indexMapping == null ? null : parseProperties(indexMapping, mappingType);", "author": "wuyunfeng", "createdAt": "2020-05-26T11:11:23Z", "path": "fe/src/main/java/org/apache/doris/external/EsRestClient.java", "diffHunk": "@@ -46,55 +52,109 @@\n     }\n \n     private static OkHttpClient networkClient = new OkHttpClient.Builder()\n-            .readTimeout(10, TimeUnit.SECONDS)\n-            .build();\n+        .readTimeout(10, TimeUnit.SECONDS)\n+        .build();\n \n-    private String basicAuth;\n-\n-    private int nextClient = 0;\n+    private Request.Builder builder;\n     private String[] nodes;\n     private String currentNode;\n+    private int currentNodeIndex = 0;\n \n     public EsRestClient(String[] nodes, String authUser, String authPassword) {\n         this.nodes = nodes;\n+        this.builder = new Request.Builder();\n         if (!Strings.isEmpty(authUser) && !Strings.isEmpty(authPassword)) {\n-            basicAuth = Credentials.basic(authUser, authPassword);\n+            this.builder.addHeader(HttpHeaders.AUTHORIZATION, Credentials.basic(authUser, authPassword));\n         }\n-        selectNextNode();\n+        this.currentNode = nodes[currentNodeIndex];\n     }\n \n-    private boolean selectNextNode() {\n-        if (nextClient >= nodes.length) {\n-            return false;\n+    private void selectNextNode() {\n+        currentNodeIndex++;\n+        // reroute, because the previously failed node may have already been restored\n+        if (currentNodeIndex >= nodes.length) {\n+            currentNodeIndex = 0;\n         }\n-        currentNode = nodes[nextClient++];\n-        return true;\n+        currentNode = nodes[currentNodeIndex];\n     }\n \n     public Map<String, EsNodeInfo> getHttpNodes() throws Exception {\n         Map<String, Map<String, Object>> nodesData = get(\"_nodes/http\", \"nodes\");\n         if (nodesData == null) {\n             return Collections.emptyMap();\n         }\n-        Map<String, EsNodeInfo> nodes = new HashMap<>();\n+        Map<String, EsNodeInfo> nodesMap = new HashMap<>();\n         for (Map.Entry<String, Map<String, Object>> entry : nodesData.entrySet()) {\n             EsNodeInfo node = new EsNodeInfo(entry.getKey(), entry.getValue());\n             if (node.hasHttp()) {\n-                nodes.put(node.getId(), node);\n+                nodesMap.put(node.getId(), node);\n             }\n         }\n-        return nodes;\n+        return nodesMap;\n+    }\n+\n+    public JSONObject getIndexProperties(String indexName, String mappingType) {\n+        String path = indexName + \"/_mapping\";\n+        String indexMapping = execute(path);\n+        if (indexMapping == null) {\n+            return null;\n+        }\n+        return parseProperties(indexMapping, mappingType);", "originalCommit": "451b9a60693e3a2f4c415a4c77a81c12830081c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzNDkyOQ==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r430334929", "bodyText": "relocating should also be taken into account.", "author": "wuyunfeng", "createdAt": "2020-05-26T11:12:30Z", "path": "fe/src/main/java/org/apache/doris/external/EsRestClient.java", "diffHunk": "@@ -46,55 +52,109 @@\n     }\n \n     private static OkHttpClient networkClient = new OkHttpClient.Builder()\n-            .readTimeout(10, TimeUnit.SECONDS)\n-            .build();\n+        .readTimeout(10, TimeUnit.SECONDS)\n+        .build();\n \n-    private String basicAuth;\n-\n-    private int nextClient = 0;\n+    private Request.Builder builder;\n     private String[] nodes;\n     private String currentNode;\n+    private int currentNodeIndex = 0;\n \n     public EsRestClient(String[] nodes, String authUser, String authPassword) {\n         this.nodes = nodes;\n+        this.builder = new Request.Builder();\n         if (!Strings.isEmpty(authUser) && !Strings.isEmpty(authPassword)) {\n-            basicAuth = Credentials.basic(authUser, authPassword);\n+            this.builder.addHeader(HttpHeaders.AUTHORIZATION, Credentials.basic(authUser, authPassword));\n         }\n-        selectNextNode();\n+        this.currentNode = nodes[currentNodeIndex];\n     }\n \n-    private boolean selectNextNode() {\n-        if (nextClient >= nodes.length) {\n-            return false;\n+    private void selectNextNode() {\n+        currentNodeIndex++;\n+        // reroute, because the previously failed node may have already been restored\n+        if (currentNodeIndex >= nodes.length) {\n+            currentNodeIndex = 0;\n         }\n-        currentNode = nodes[nextClient++];\n-        return true;\n+        currentNode = nodes[currentNodeIndex];\n     }\n \n     public Map<String, EsNodeInfo> getHttpNodes() throws Exception {\n         Map<String, Map<String, Object>> nodesData = get(\"_nodes/http\", \"nodes\");\n         if (nodesData == null) {\n             return Collections.emptyMap();\n         }\n-        Map<String, EsNodeInfo> nodes = new HashMap<>();\n+        Map<String, EsNodeInfo> nodesMap = new HashMap<>();\n         for (Map.Entry<String, Map<String, Object>> entry : nodesData.entrySet()) {\n             EsNodeInfo node = new EsNodeInfo(entry.getKey(), entry.getValue());\n             if (node.hasHttp()) {\n-                nodes.put(node.getId(), node);\n+                nodesMap.put(node.getId(), node);\n             }\n         }\n-        return nodes;\n+        return nodesMap;\n+    }\n+\n+    public JSONObject getIndexProperties(String indexName, String mappingType) {\n+        String path = indexName + \"/_mapping\";\n+        String indexMapping = execute(path);\n+        if (indexMapping == null) {\n+            return null;\n+        }\n+        return parseProperties(indexMapping, mappingType);\n     }\n \n-    public String getIndexMetaData(String indexName) {\n-        String path = \"_cluster/state?indices=\" + indexName\n-                + \"&metric=routing_table,nodes,metadata&expand_wildcards=open\";\n-        return execute(path);\n+    public JSONObject parseProperties(String indexMapping, String mappingType) {\n+        JSONObject jsonObject = new JSONObject(indexMapping);\n+        // the indexName use alias takes the first mapping\n+        Iterator<String> keys = jsonObject.keys();\n+        String docKey = keys.next();\n+        JSONObject docData = jsonObject.optJSONObject(docKey);\n+        JSONObject mappings = docData.optJSONObject(\"mappings\");\n+        JSONObject rootSchema = mappings.optJSONObject(mappingType);\n+        return rootSchema.optJSONObject(\"properties\");\n+    }\n+\n+    public EsIndexState getIndexState(String indexName) {\n+        String path = indexName + \"/_search_shards\";\n+        String shardLocation = execute(path);\n+        if (shardLocation == null) {\n+            return null;\n+        }\n+        return parseIndexState(indexName, shardLocation);\n+    }\n \n+    public EsIndexState parseIndexState(String indexName, String shardLocation) {\n+        EsIndexState indexState = new EsIndexState(indexName);\n+        JSONObject jsonObject = new JSONObject(shardLocation);\n+        JSONObject nodesMap = jsonObject.getJSONObject(\"nodes\");\n+        JSONArray shards = jsonObject.getJSONArray(\"shards\");\n+        int length = shards.length();\n+        for (int i = 0; i < length; i++) {\n+            List<EsShardRouting> singleShardRouting = Lists.newArrayList();\n+            JSONArray shardsArray = shards.getJSONArray(i);\n+            int arrayLength = shardsArray.length();\n+            for (int j = 0; j < arrayLength; j++) {\n+                JSONObject shard = shardsArray.getJSONObject(j);\n+                String shardState = shard.getString(\"state\");\n+                if (\"STARTED\".equalsIgnoreCase(shardState) || \"RELOCATING\".equalsIgnoreCase(shardState)) {", "originalCommit": "451b9a60693e3a2f4c415a4c77a81c12830081c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzNTQ0Ng==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r430335446", "bodyText": "I think maybe this file should not appear JSONxxxx", "author": "wuyunfeng", "createdAt": "2020-05-26T11:13:39Z", "path": "fe/src/main/java/org/apache/doris/external/EsStateStore.java", "diffHunk": "@@ -17,94 +17,95 @@\n \n package org.apache.doris.external;\n \n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Range;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.doris.catalog.Catalog;\n import org.apache.doris.catalog.Column;\n import org.apache.doris.catalog.Database;\n import org.apache.doris.catalog.EsTable;\n-import org.apache.doris.catalog.PartitionInfo;\n import org.apache.doris.catalog.PartitionKey;\n import org.apache.doris.catalog.RangePartitionInfo;\n import org.apache.doris.catalog.SinglePartitionInfo;\n import org.apache.doris.catalog.Table;\n import org.apache.doris.catalog.Table.TableType;\n-import org.apache.doris.common.AnalysisException;\n import org.apache.doris.common.Config;\n import org.apache.doris.common.DdlException;\n import org.apache.doris.common.util.MasterDaemon;\n-\n-import com.google.common.annotations.VisibleForTesting;\n-import com.google.common.collect.Maps;\n-import com.google.common.collect.Range;\n-\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.json.JSONObject;\n \n-import java.io.IOException;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import okhttp3.Authenticator;\n-import okhttp3.Call;\n-import okhttp3.Credentials;\n-import okhttp3.OkHttpClient;\n-import okhttp3.Request;\n-import okhttp3.Response;\n-import okhttp3.Route;\n-\n \n /**\n  * it is used to call es api to get shard allocation state\n  */\n public class EsStateStore extends MasterDaemon {\n+\n     private static final Logger LOG = LogManager.getLogger(EsStateStore.class);\n \n     private Map<Long, EsTable> esTables;\n \n+    private Map<Long, EsRestClient> esClients;\n+\n     public EsStateStore() {\n         super(\"es state store\", Config.es_state_sync_interval_second * 1000);\n         esTables = Maps.newConcurrentMap();\n+        esClients = Maps.newConcurrentMap();\n     }\n \n     public void registerTable(EsTable esTable) {\n         if (Catalog.isCheckpointThread()) {\n             return;\n         }\n         esTables.put(esTable.getId(), esTable);\n-        LOG.info(\"register a new table [{}] to sync list\", esTable.toString());\n+        esClients.put(esTable.getId(),\n+            new EsRestClient(esTable.getSeeds(), esTable.getUserName(), esTable.getPasswd()));\n+        LOG.info(\"register a new table [{}] to sync list\", esTable);\n     }\n \n     public void deRegisterTable(long tableId) {\n         esTables.remove(tableId);\n+        esClients.remove(tableId);\n         LOG.info(\"deregister table [{}] from sync list\", tableId);\n     }\n-    \n+\n     @Override\n     protected void runAfterCatalogReady() {\n         for (EsTable esTable : esTables.values()) {\n             try {\n-                EsRestClient client = new EsRestClient(esTable.getSeeds(),\n-                        esTable.getUserName(), esTable.getPasswd());\n-                // if user not specify the es version, try to get the remote cluster versoin\n-                // in the future, we maybe need this version\n-                String indexMetaData = client.getIndexMetaData(esTable.getIndexName());\n-                if (indexMetaData == null) {\n+                EsRestClient client = esClients.get(esTable.getId());\n+\n+                if (esTable.isKeywordSniffEnable() || esTable.isDocValueScanEnable()) {\n+                    JSONObject properties = client.getIndexProperties(esTable.getIndexName(), esTable.getMappingType());", "originalCommit": "451b9a60693e3a2f4c415a4c77a81c12830081c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQzMDAyMA==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r430430020", "bodyText": "We don't know the full structure of properties, and not using JSONObject feels like no other good way to do it", "author": "stalary", "createdAt": "2020-05-26T13:54:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzNTQ0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzNTgzNg==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r430335836", "bodyText": "setTableStatePartitionInfo is so long and maybe not reflect the meaning of this func.", "author": "wuyunfeng", "createdAt": "2020-05-26T11:14:34Z", "path": "fe/src/main/java/org/apache/doris/external/EsStateStore.java", "diffHunk": "@@ -17,94 +17,95 @@\n \n package org.apache.doris.external;\n \n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Range;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.doris.catalog.Catalog;\n import org.apache.doris.catalog.Column;\n import org.apache.doris.catalog.Database;\n import org.apache.doris.catalog.EsTable;\n-import org.apache.doris.catalog.PartitionInfo;\n import org.apache.doris.catalog.PartitionKey;\n import org.apache.doris.catalog.RangePartitionInfo;\n import org.apache.doris.catalog.SinglePartitionInfo;\n import org.apache.doris.catalog.Table;\n import org.apache.doris.catalog.Table.TableType;\n-import org.apache.doris.common.AnalysisException;\n import org.apache.doris.common.Config;\n import org.apache.doris.common.DdlException;\n import org.apache.doris.common.util.MasterDaemon;\n-\n-import com.google.common.annotations.VisibleForTesting;\n-import com.google.common.collect.Maps;\n-import com.google.common.collect.Range;\n-\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.json.JSONObject;\n \n-import java.io.IOException;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import okhttp3.Authenticator;\n-import okhttp3.Call;\n-import okhttp3.Credentials;\n-import okhttp3.OkHttpClient;\n-import okhttp3.Request;\n-import okhttp3.Response;\n-import okhttp3.Route;\n-\n \n /**\n  * it is used to call es api to get shard allocation state\n  */\n public class EsStateStore extends MasterDaemon {\n+\n     private static final Logger LOG = LogManager.getLogger(EsStateStore.class);\n \n     private Map<Long, EsTable> esTables;\n \n+    private Map<Long, EsRestClient> esClients;\n+\n     public EsStateStore() {\n         super(\"es state store\", Config.es_state_sync_interval_second * 1000);\n         esTables = Maps.newConcurrentMap();\n+        esClients = Maps.newConcurrentMap();\n     }\n \n     public void registerTable(EsTable esTable) {\n         if (Catalog.isCheckpointThread()) {\n             return;\n         }\n         esTables.put(esTable.getId(), esTable);\n-        LOG.info(\"register a new table [{}] to sync list\", esTable.toString());\n+        esClients.put(esTable.getId(),\n+            new EsRestClient(esTable.getSeeds(), esTable.getUserName(), esTable.getPasswd()));\n+        LOG.info(\"register a new table [{}] to sync list\", esTable);\n     }\n \n     public void deRegisterTable(long tableId) {\n         esTables.remove(tableId);\n+        esClients.remove(tableId);\n         LOG.info(\"deregister table [{}] from sync list\", tableId);\n     }\n-    \n+\n     @Override\n     protected void runAfterCatalogReady() {\n         for (EsTable esTable : esTables.values()) {\n             try {\n-                EsRestClient client = new EsRestClient(esTable.getSeeds(),\n-                        esTable.getUserName(), esTable.getPasswd());\n-                // if user not specify the es version, try to get the remote cluster versoin\n-                // in the future, we maybe need this version\n-                String indexMetaData = client.getIndexMetaData(esTable.getIndexName());\n-                if (indexMetaData == null) {\n+                EsRestClient client = esClients.get(esTable.getId());\n+\n+                if (esTable.isKeywordSniffEnable() || esTable.isDocValueScanEnable()) {\n+                    JSONObject properties = client.getIndexProperties(esTable.getIndexName(), esTable.getMappingType());\n+                    if (properties == null) {\n+                        continue;\n+                    }\n+                    setEsTableContext(properties, esTable);\n+                }\n+\n+                EsIndexState esIndexState = client.getIndexState(esTable.getIndexName());\n+                if (esIndexState == null) {\n                     continue;\n                 }\n-                EsTableState esTableState = parseClusterState55(indexMetaData, esTable);\n+\n+                EsTableState esTableState = setTableStatePartitionInfo(esTable, esIndexState);", "originalCommit": "451b9a60693e3a2f4c415a4c77a81c12830081c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQzMTk5Ng==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r430431996", "bodyText": "This is an old piece of code that I'm not familiar with", "author": "stalary", "createdAt": "2020-05-26T13:56:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzNTgzNg=="}], "type": "inlineReview"}, {"oid": "3e768c8b71abfeb6d74f156407d4f12f349d82ed", "url": "https://github.com/apache/incubator-doris/commit/3e768c8b71abfeb6d74f156407d4f12f349d82ed", "message": "MOD: refactor code", "committedDate": "2020-06-10T09:58:08Z", "type": "commit"}, {"oid": "2ed77b67830c643db1a2e03db0aa71040c3acb1e", "url": "https://github.com/apache/incubator-doris/commit/2ed77b67830c643db1a2e03db0aa71040c3acb1e", "message": "Merge branch 'master' into stalary_enhancement\n\n# Conflicts:\n#\tfe/src/main/java/org/apache/doris/external/elasticsearch/EsRestClient.java\n#\tfe/src/main/java/org/apache/doris/external/elasticsearch/EsStateStore.java\n#\tfe/src/test/java/org/apache/doris/es/EsStateStoreTest.java", "committedDate": "2020-06-10T11:50:03Z", "type": "commit"}, {"oid": "73af7d51f1c58354499834ee8fa8f10d5c353d30", "url": "https://github.com/apache/incubator-doris/commit/73af7d51f1c58354499834ee8fa8f10d5c353d30", "message": "Merge branch 'master' of https://github.com/apache/incubator-doris into stalary_enhancement\n\n# Conflicts:\n#\tfe/src/main/java/org/apache/doris/external/elasticsearch/EsRestClient.java\n#\tfe/src/main/java/org/apache/doris/external/elasticsearch/EsStateStore.java\n#\tfe/src/test/java/org/apache/doris/es/EsStateStoreTest.java", "committedDate": "2020-06-10T12:05:22Z", "type": "commit"}, {"oid": "b975c7a8086099b3498b63b43e92e5d7220fbdc0", "url": "https://github.com/apache/incubator-doris/commit/b975c7a8086099b3498b63b43e92e5d7220fbdc0", "message": "MOD: Adjust import order, resolve conflicts", "committedDate": "2020-06-10T14:08:52Z", "type": "commit"}, {"oid": "3782f4b043182a09870a55ca453ecc80807eb686", "url": "https://github.com/apache/incubator-doris/commit/3782f4b043182a09870a55ca453ecc80807eb686", "message": "MOD: adjust import order", "committedDate": "2020-06-11T09:39:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3NDkyMA==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r439274920", "bodyText": "Add new line for this file", "author": "wuyunfeng", "createdAt": "2020-06-12T08:15:15Z", "path": "fe/src/main/java/org/apache/doris/external/elasticsearch/EsFieldInfo.java", "diffHunk": "@@ -0,0 +1,47 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.external.elasticsearch;\n+\n+import java.util.Map;\n+\n+/**\n+ * EsFieldInfo\n+ *\n+ * @author stalary\n+ * @since 2020/06/10\n+ */\n+public class EsFieldInfo {\n+    \n+    private Map<String, String> fetchFields;\n+    \n+    private Map<String, String> docValueFields;\n+    \n+    public EsFieldInfo(Map<String, String> fetchFields, Map<String, String> docValueFields) {\n+        this.fetchFields = fetchFields;\n+        this.docValueFields = docValueFields;\n+    }\n+    \n+    public Map<String, String> getFetchFields() {\n+        return fetchFields;\n+    }\n+    \n+    public Map<String, String> getDocValueFields() {\n+        return docValueFields;\n+    }\n+    \n+}", "originalCommit": "3782f4b043182a09870a55ca453ecc80807eb686", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3NTY4NQ==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r439275685", "bodyText": "Prefer add  static parseXXX or fromXXXX for this plain object to parse from response", "author": "wuyunfeng", "createdAt": "2020-06-12T08:16:41Z", "path": "fe/src/main/java/org/apache/doris/external/elasticsearch/EsFieldInfo.java", "diffHunk": "@@ -0,0 +1,47 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.external.elasticsearch;\n+\n+import java.util.Map;\n+\n+/**\n+ * EsFieldInfo\n+ *\n+ * @author stalary\n+ * @since 2020/06/10\n+ */\n+public class EsFieldInfo {\n+    \n+    private Map<String, String> fetchFields;\n+    \n+    private Map<String, String> docValueFields;\n+    \n+    public EsFieldInfo(Map<String, String> fetchFields, Map<String, String> docValueFields) {\n+        this.fetchFields = fetchFields;\n+        this.docValueFields = docValueFields;\n+    }\n+    \n+    public Map<String, String> getFetchFields() {\n+        return fetchFields;\n+    }\n+    \n+    public Map<String, String> getDocValueFields() {\n+        return docValueFields;\n+    }\n+    ", "originalCommit": "3782f4b043182a09870a55ca453ecc80807eb686", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3NjQxOQ==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r439276419", "bodyText": "these method can be put into EsFieldInfo", "author": "wuyunfeng", "createdAt": "2020-06-12T08:18:07Z", "path": "fe/src/main/java/org/apache/doris/external/elasticsearch/EsRestClient.java", "diffHunk": "@@ -17,92 +17,183 @@\n \n package org.apache.doris.external.elasticsearch;\n \n+import org.apache.doris.catalog.Column;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.HttpHeaders;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.logging.log4j.util.Strings;\n import org.codehaus.jackson.JsonParser;\n import org.codehaus.jackson.map.DeserializationConfig;\n import org.codehaus.jackson.map.ObjectMapper;\n import org.codehaus.jackson.map.SerializationConfig;\n-\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n import java.io.IOException;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.concurrent.TimeUnit;\n-\n import okhttp3.Credentials;\n import okhttp3.OkHttpClient;\n import okhttp3.Request;\n import okhttp3.Response;\n \n public class EsRestClient {\n+    \n     private static final Logger LOG = LogManager.getLogger(EsRestClient.class);\n     private ObjectMapper mapper;\n-\n+    \n     {\n         mapper = new ObjectMapper();\n         mapper.configure(DeserializationConfig.Feature.USE_ANNOTATIONS, false);\n         mapper.configure(SerializationConfig.Feature.USE_ANNOTATIONS, false);\n     }\n-\n+    \n     private static OkHttpClient networkClient = new OkHttpClient.Builder()\n             .readTimeout(10, TimeUnit.SECONDS)\n             .build();\n-\n-    private String basicAuth;\n-\n-    private int nextClient = 0;\n+    \n+    private Request.Builder builder;\n     private String[] nodes;\n     private String currentNode;\n-\n+    private int currentNodeIndex = 0;\n+    \n     public EsRestClient(String[] nodes, String authUser, String authPassword) {\n         this.nodes = nodes;\n+        this.builder = new Request.Builder();\n         if (!Strings.isEmpty(authUser) && !Strings.isEmpty(authPassword)) {\n-            basicAuth = Credentials.basic(authUser, authPassword);\n+            this.builder.addHeader(HttpHeaders.AUTHORIZATION,\n+                    Credentials.basic(authUser, authPassword));\n         }\n-        selectNextNode();\n+        this.currentNode = nodes[currentNodeIndex];\n     }\n-\n-    private boolean selectNextNode() {\n-        if (nextClient >= nodes.length) {\n-            return false;\n+    \n+    private void selectNextNode() {\n+        currentNodeIndex++;\n+        // reroute, because the previously failed node may have already been restored\n+        if (currentNodeIndex >= nodes.length) {\n+            currentNodeIndex = 0;\n         }\n-        currentNode = nodes[nextClient++];\n-        return true;\n+        currentNode = nodes[currentNodeIndex];\n     }\n-\n+    \n     public Map<String, EsNodeInfo> getHttpNodes() throws Exception {\n         Map<String, Map<String, Object>> nodesData = get(\"_nodes/http\", \"nodes\");\n         if (nodesData == null) {\n             return Collections.emptyMap();\n         }\n-        Map<String, EsNodeInfo> nodes = new HashMap<>();\n+        Map<String, EsNodeInfo> nodesMap = new HashMap<>();\n         for (Map.Entry<String, Map<String, Object>> entry : nodesData.entrySet()) {\n             EsNodeInfo node = new EsNodeInfo(entry.getKey(), entry.getValue());\n             if (node.hasHttp()) {\n-                nodes.put(node.getId(), node);\n+                nodesMap.put(node.getId(), node);\n             }\n         }\n-        return nodes;\n+        return nodesMap;\n     }\n-\n-    public String getIndexMetaData(String indexName) throws Exception {\n-        String path = \"_cluster/state?indices=\" + indexName\n-                + \"&metric=routing_table,nodes,metadata&expand_wildcards=open\";\n-        return execute(path);\n-\n+    \n+    public EsFieldInfo getFieldInfo(String indexName, String mappingType, List<Column> colList) throws Exception {", "originalCommit": "3782f4b043182a09870a55ca453ecc80807eb686", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3NzUzNg==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r439277536", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class EsFieldInfo {\n          \n          \n            \n            public class EsFieldInfos {", "author": "wuyunfeng", "createdAt": "2020-06-12T08:20:26Z", "path": "fe/src/main/java/org/apache/doris/external/elasticsearch/EsFieldInfo.java", "diffHunk": "@@ -0,0 +1,47 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.external.elasticsearch;\n+\n+import java.util.Map;\n+\n+/**\n+ * EsFieldInfo\n+ *\n+ * @author stalary\n+ * @since 2020/06/10\n+ */\n+public class EsFieldInfo {", "originalCommit": "3782f4b043182a09870a55ca453ecc80807eb686", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3Nzc0MA==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r439277740", "bodyText": "This is the keyword fields? prefer rename to fieldsContext", "author": "wuyunfeng", "createdAt": "2020-06-12T08:20:50Z", "path": "fe/src/main/java/org/apache/doris/external/elasticsearch/EsFieldInfo.java", "diffHunk": "@@ -0,0 +1,47 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.external.elasticsearch;\n+\n+import java.util.Map;\n+\n+/**\n+ * EsFieldInfo\n+ *\n+ * @author stalary\n+ * @since 2020/06/10\n+ */\n+public class EsFieldInfo {\n+    \n+    private Map<String, String> fetchFields;", "originalCommit": "3782f4b043182a09870a55ca453ecc80807eb686", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI5MDc0MQ==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r439290741", "bodyText": "ok", "author": "stalary", "createdAt": "2020-06-12T08:46:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3Nzc0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3ODU4NQ==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r439278585", "bodyText": "rootChema maybe null, you should process this", "author": "wuyunfeng", "createdAt": "2020-06-12T08:22:32Z", "path": "fe/src/main/java/org/apache/doris/external/elasticsearch/EsRestClient.java", "diffHunk": "@@ -17,92 +17,183 @@\n \n package org.apache.doris.external.elasticsearch;\n \n+import org.apache.doris.catalog.Column;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.HttpHeaders;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.logging.log4j.util.Strings;\n import org.codehaus.jackson.JsonParser;\n import org.codehaus.jackson.map.DeserializationConfig;\n import org.codehaus.jackson.map.ObjectMapper;\n import org.codehaus.jackson.map.SerializationConfig;\n-\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n import java.io.IOException;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.concurrent.TimeUnit;\n-\n import okhttp3.Credentials;\n import okhttp3.OkHttpClient;\n import okhttp3.Request;\n import okhttp3.Response;\n \n public class EsRestClient {\n+    \n     private static final Logger LOG = LogManager.getLogger(EsRestClient.class);\n     private ObjectMapper mapper;\n-\n+    \n     {\n         mapper = new ObjectMapper();\n         mapper.configure(DeserializationConfig.Feature.USE_ANNOTATIONS, false);\n         mapper.configure(SerializationConfig.Feature.USE_ANNOTATIONS, false);\n     }\n-\n+    \n     private static OkHttpClient networkClient = new OkHttpClient.Builder()\n             .readTimeout(10, TimeUnit.SECONDS)\n             .build();\n-\n-    private String basicAuth;\n-\n-    private int nextClient = 0;\n+    \n+    private Request.Builder builder;\n     private String[] nodes;\n     private String currentNode;\n-\n+    private int currentNodeIndex = 0;\n+    \n     public EsRestClient(String[] nodes, String authUser, String authPassword) {\n         this.nodes = nodes;\n+        this.builder = new Request.Builder();\n         if (!Strings.isEmpty(authUser) && !Strings.isEmpty(authPassword)) {\n-            basicAuth = Credentials.basic(authUser, authPassword);\n+            this.builder.addHeader(HttpHeaders.AUTHORIZATION,\n+                    Credentials.basic(authUser, authPassword));\n         }\n-        selectNextNode();\n+        this.currentNode = nodes[currentNodeIndex];\n     }\n-\n-    private boolean selectNextNode() {\n-        if (nextClient >= nodes.length) {\n-            return false;\n+    \n+    private void selectNextNode() {\n+        currentNodeIndex++;\n+        // reroute, because the previously failed node may have already been restored\n+        if (currentNodeIndex >= nodes.length) {\n+            currentNodeIndex = 0;\n         }\n-        currentNode = nodes[nextClient++];\n-        return true;\n+        currentNode = nodes[currentNodeIndex];\n     }\n-\n+    \n     public Map<String, EsNodeInfo> getHttpNodes() throws Exception {\n         Map<String, Map<String, Object>> nodesData = get(\"_nodes/http\", \"nodes\");\n         if (nodesData == null) {\n             return Collections.emptyMap();\n         }\n-        Map<String, EsNodeInfo> nodes = new HashMap<>();\n+        Map<String, EsNodeInfo> nodesMap = new HashMap<>();\n         for (Map.Entry<String, Map<String, Object>> entry : nodesData.entrySet()) {\n             EsNodeInfo node = new EsNodeInfo(entry.getKey(), entry.getValue());\n             if (node.hasHttp()) {\n-                nodes.put(node.getId(), node);\n+                nodesMap.put(node.getId(), node);\n             }\n         }\n-        return nodes;\n+        return nodesMap;\n     }\n-\n-    public String getIndexMetaData(String indexName) throws Exception {\n-        String path = \"_cluster/state?indices=\" + indexName\n-                + \"&metric=routing_table,nodes,metadata&expand_wildcards=open\";\n-        return execute(path);\n-\n+    \n+    public EsFieldInfo getFieldInfo(String indexName, String mappingType, List<Column> colList) throws Exception {\n+        String path = indexName + \"/_mapping\";\n+        String indexMapping = execute(path);\n+        if (indexMapping == null) {\n+            throw new Exception( \"index[\" + indexName + \"] _mapping not found for the Elasticsearch Cluster\");\n+        }\n+        return getFieldInfo(colList, parseProperties(indexMapping, mappingType));\n     }\n-\n+    \n+    @VisibleForTesting\n+    public EsFieldInfo getFieldInfo(List<Column> colList, JSONObject properties) {\n+        if (properties == null) {\n+            return null;\n+        }\n+        Map<String, String> fetchFieldMap = new HashMap<>();\n+        Map<String, String> docValueFieldMap = new HashMap<>();\n+        for (Column col : colList) {\n+            String colName = col.getName();\n+            if (!properties.has(colName)) {\n+                continue;\n+            }\n+            JSONObject fieldObject = properties.optJSONObject(colName);\n+            String fetchField = EsUtil.getFetchField(fieldObject, colName);\n+            if (StringUtils.isNotEmpty(fetchField)) {\n+                fetchFieldMap.put(colName, fetchField);\n+            }\n+            String docValueField = EsUtil.getDocValueField(fieldObject, colName);\n+            if (StringUtils.isNotEmpty(docValueField)) {\n+                docValueFieldMap.put(colName, docValueField);\n+            }\n+        }\n+        return new EsFieldInfo(fetchFieldMap, docValueFieldMap);\n+    }\n+    \n+    @VisibleForTesting\n+    public JSONObject parseProperties(String indexMapping, String mappingType) {\n+        JSONObject jsonObject = new JSONObject(indexMapping);\n+        // the indexName use alias takes the first mapping\n+        Iterator<String> keys = jsonObject.keys();\n+        String docKey = keys.next();\n+        JSONObject docData = jsonObject.optJSONObject(docKey);\n+        JSONObject mappings = docData.optJSONObject(\"mappings\");\n+        JSONObject rootSchema = mappings.optJSONObject(mappingType);", "originalCommit": "3782f4b043182a09870a55ca453ecc80807eb686", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI5MDY3Nw==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r439290677", "bodyText": "ok\uff0cI forgot about es7", "author": "stalary", "createdAt": "2020-06-12T08:46:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3ODU4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI5Mjg2MA==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r439292860", "bodyText": "emm, if user set the wrong type the index does not exists, this would throw NullPointerException.", "author": "wuyunfeng", "createdAt": "2020-06-12T08:50:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3ODU4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3OTI3Ng==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r439279276", "bodyText": "jsonObject maybe null, by the way the name jsonObject maybe should be renamed to represent concrete meaning", "author": "wuyunfeng", "createdAt": "2020-06-12T08:23:53Z", "path": "fe/src/main/java/org/apache/doris/external/elasticsearch/EsRestClient.java", "diffHunk": "@@ -17,92 +17,183 @@\n \n package org.apache.doris.external.elasticsearch;\n \n+import org.apache.doris.catalog.Column;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.HttpHeaders;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.logging.log4j.util.Strings;\n import org.codehaus.jackson.JsonParser;\n import org.codehaus.jackson.map.DeserializationConfig;\n import org.codehaus.jackson.map.ObjectMapper;\n import org.codehaus.jackson.map.SerializationConfig;\n-\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n import java.io.IOException;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.concurrent.TimeUnit;\n-\n import okhttp3.Credentials;\n import okhttp3.OkHttpClient;\n import okhttp3.Request;\n import okhttp3.Response;\n \n public class EsRestClient {\n+    \n     private static final Logger LOG = LogManager.getLogger(EsRestClient.class);\n     private ObjectMapper mapper;\n-\n+    \n     {\n         mapper = new ObjectMapper();\n         mapper.configure(DeserializationConfig.Feature.USE_ANNOTATIONS, false);\n         mapper.configure(SerializationConfig.Feature.USE_ANNOTATIONS, false);\n     }\n-\n+    \n     private static OkHttpClient networkClient = new OkHttpClient.Builder()\n             .readTimeout(10, TimeUnit.SECONDS)\n             .build();\n-\n-    private String basicAuth;\n-\n-    private int nextClient = 0;\n+    \n+    private Request.Builder builder;\n     private String[] nodes;\n     private String currentNode;\n-\n+    private int currentNodeIndex = 0;\n+    \n     public EsRestClient(String[] nodes, String authUser, String authPassword) {\n         this.nodes = nodes;\n+        this.builder = new Request.Builder();\n         if (!Strings.isEmpty(authUser) && !Strings.isEmpty(authPassword)) {\n-            basicAuth = Credentials.basic(authUser, authPassword);\n+            this.builder.addHeader(HttpHeaders.AUTHORIZATION,\n+                    Credentials.basic(authUser, authPassword));\n         }\n-        selectNextNode();\n+        this.currentNode = nodes[currentNodeIndex];\n     }\n-\n-    private boolean selectNextNode() {\n-        if (nextClient >= nodes.length) {\n-            return false;\n+    \n+    private void selectNextNode() {\n+        currentNodeIndex++;\n+        // reroute, because the previously failed node may have already been restored\n+        if (currentNodeIndex >= nodes.length) {\n+            currentNodeIndex = 0;\n         }\n-        currentNode = nodes[nextClient++];\n-        return true;\n+        currentNode = nodes[currentNodeIndex];\n     }\n-\n+    \n     public Map<String, EsNodeInfo> getHttpNodes() throws Exception {\n         Map<String, Map<String, Object>> nodesData = get(\"_nodes/http\", \"nodes\");\n         if (nodesData == null) {\n             return Collections.emptyMap();\n         }\n-        Map<String, EsNodeInfo> nodes = new HashMap<>();\n+        Map<String, EsNodeInfo> nodesMap = new HashMap<>();\n         for (Map.Entry<String, Map<String, Object>> entry : nodesData.entrySet()) {\n             EsNodeInfo node = new EsNodeInfo(entry.getKey(), entry.getValue());\n             if (node.hasHttp()) {\n-                nodes.put(node.getId(), node);\n+                nodesMap.put(node.getId(), node);\n             }\n         }\n-        return nodes;\n+        return nodesMap;\n     }\n-\n-    public String getIndexMetaData(String indexName) throws Exception {\n-        String path = \"_cluster/state?indices=\" + indexName\n-                + \"&metric=routing_table,nodes,metadata&expand_wildcards=open\";\n-        return execute(path);\n-\n+    \n+    public EsFieldInfo getFieldInfo(String indexName, String mappingType, List<Column> colList) throws Exception {\n+        String path = indexName + \"/_mapping\";\n+        String indexMapping = execute(path);\n+        if (indexMapping == null) {\n+            throw new Exception( \"index[\" + indexName + \"] _mapping not found for the Elasticsearch Cluster\");\n+        }\n+        return getFieldInfo(colList, parseProperties(indexMapping, mappingType));\n     }\n-\n+    \n+    @VisibleForTesting\n+    public EsFieldInfo getFieldInfo(List<Column> colList, JSONObject properties) {\n+        if (properties == null) {\n+            return null;\n+        }\n+        Map<String, String> fetchFieldMap = new HashMap<>();\n+        Map<String, String> docValueFieldMap = new HashMap<>();\n+        for (Column col : colList) {\n+            String colName = col.getName();\n+            if (!properties.has(colName)) {\n+                continue;\n+            }\n+            JSONObject fieldObject = properties.optJSONObject(colName);\n+            String fetchField = EsUtil.getFetchField(fieldObject, colName);\n+            if (StringUtils.isNotEmpty(fetchField)) {\n+                fetchFieldMap.put(colName, fetchField);\n+            }\n+            String docValueField = EsUtil.getDocValueField(fieldObject, colName);\n+            if (StringUtils.isNotEmpty(docValueField)) {\n+                docValueFieldMap.put(colName, docValueField);\n+            }\n+        }\n+        return new EsFieldInfo(fetchFieldMap, docValueFieldMap);\n+    }\n+    \n+    @VisibleForTesting\n+    public JSONObject parseProperties(String indexMapping, String mappingType) {\n+        JSONObject jsonObject = new JSONObject(indexMapping);", "originalCommit": "3782f4b043182a09870a55ca453ecc80807eb686", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4MTg5NQ==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r439281895", "bodyText": "The indexMapping was checked before the method was called", "author": "stalary", "createdAt": "2020-06-12T08:29:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3OTI3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3OTUzOQ==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r439279539", "bodyText": "new line", "author": "wuyunfeng", "createdAt": "2020-06-12T08:24:28Z", "path": "fe/src/main/java/org/apache/doris/external/elasticsearch/EsRestClient.java", "diffHunk": "@@ -182,5 +268,5 @@ private String execute(String path) throws Exception {\n         }\n         return (T) (key != null ? map.get(key) : map);\n     }\n-\n-}\n+    \n+}", "originalCommit": "3782f4b043182a09870a55ca453ecc80807eb686", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "97b2338fb9f4f5bda2628d194d18dfd5ab6015d4", "url": "https://github.com/apache/incubator-doris/commit/97b2338fb9f4f5bda2628d194d18dfd5ab6015d4", "message": "MOD: Abstract code", "committedDate": "2020-06-12T14:17:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4NTk1NA==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r440585954", "bodyText": "should not appear such xxxV55", "author": "wuyunfeng", "createdAt": "2020-06-16T04:56:31Z", "path": "fe/src/main/java/org/apache/doris/external/elasticsearch/EsIndexState.java", "diffHunk": "@@ -44,7 +47,43 @@ public EsIndexState(String indexName) {\n         this.partitionDesc = null;\n         this.partitionKey = null;\n     }\n-\n+    \n+    /**\n+     * Parse shardRoutings from the json\n+     * @param indexName indexName(alias or really name)\n+     * @param shardLocation the return value of _search_shards\n+     * @return shardRoutings is used for searching\n+     */\n+    public static EsIndexState fromShardLocation(String indexName, String shardLocation) {\n+        EsIndexState indexState = new EsIndexState(indexName);\n+        JSONObject jsonObject = new JSONObject(shardLocation);\n+        JSONObject nodesMap = jsonObject.getJSONObject(\"nodes\");\n+        JSONArray shards = jsonObject.getJSONArray(\"shards\");\n+        int length = shards.length();\n+        for (int i = 0; i < length; i++) {\n+            List<EsShardRouting> singleShardRouting = Lists.newArrayList();\n+            JSONArray shardsArray = shards.getJSONArray(i);\n+            int arrayLength = shardsArray.length();\n+            for (int j = 0; j < arrayLength; j++) {\n+                JSONObject shard = shardsArray.getJSONObject(j);\n+                String shardState = shard.getString(\"state\");\n+                if (\"STARTED\".equalsIgnoreCase(shardState) || \"RELOCATING\".equalsIgnoreCase(shardState)) {\n+                    try {\n+                        singleShardRouting.add(EsShardRouting.parseShardRoutingV55(shardState, String.valueOf(i), shard, nodesMap));", "originalCommit": "97b2338fb9f4f5bda2628d194d18dfd5ab6015d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4NjIyNQ==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r440586225", "bodyText": "You should throw this exception, because EsStateStore would store the lastException for displaying error to user", "author": "wuyunfeng", "createdAt": "2020-06-16T04:57:38Z", "path": "fe/src/main/java/org/apache/doris/external/elasticsearch/EsIndexState.java", "diffHunk": "@@ -44,7 +47,43 @@ public EsIndexState(String indexName) {\n         this.partitionDesc = null;\n         this.partitionKey = null;\n     }\n-\n+    \n+    /**\n+     * Parse shardRoutings from the json\n+     * @param indexName indexName(alias or really name)\n+     * @param shardLocation the return value of _search_shards\n+     * @return shardRoutings is used for searching\n+     */\n+    public static EsIndexState fromShardLocation(String indexName, String shardLocation) {\n+        EsIndexState indexState = new EsIndexState(indexName);\n+        JSONObject jsonObject = new JSONObject(shardLocation);\n+        JSONObject nodesMap = jsonObject.getJSONObject(\"nodes\");\n+        JSONArray shards = jsonObject.getJSONArray(\"shards\");\n+        int length = shards.length();\n+        for (int i = 0; i < length; i++) {\n+            List<EsShardRouting> singleShardRouting = Lists.newArrayList();\n+            JSONArray shardsArray = shards.getJSONArray(i);\n+            int arrayLength = shardsArray.length();\n+            for (int j = 0; j < arrayLength; j++) {\n+                JSONObject shard = shardsArray.getJSONObject(j);\n+                String shardState = shard.getString(\"state\");\n+                if (\"STARTED\".equalsIgnoreCase(shardState) || \"RELOCATING\".equalsIgnoreCase(shardState)) {\n+                    try {\n+                        singleShardRouting.add(EsShardRouting.parseShardRoutingV55(shardState, String.valueOf(i), shard, nodesMap));\n+                    } catch (Exception e) {\n+                        LOG.info(", "originalCommit": "97b2338fb9f4f5bda2628d194d18dfd5ab6015d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4NzEyNw==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r440587127", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static EsIndexState fromShardLocation(String indexName, String shardLocation) {\n          \n          \n            \n                public static EsShardPartitions findShardPartitions(String indexName, String shardLocation) {", "author": "wuyunfeng", "createdAt": "2020-06-16T05:01:06Z", "path": "fe/src/main/java/org/apache/doris/external/elasticsearch/EsIndexState.java", "diffHunk": "@@ -44,7 +47,43 @@ public EsIndexState(String indexName) {\n         this.partitionDesc = null;\n         this.partitionKey = null;\n     }\n-\n+    \n+    /**\n+     * Parse shardRoutings from the json\n+     * @param indexName indexName(alias or really name)\n+     * @param shardLocation the return value of _search_shards\n+     * @return shardRoutings is used for searching\n+     */\n+    public static EsIndexState fromShardLocation(String indexName, String shardLocation) {", "originalCommit": "97b2338fb9f4f5bda2628d194d18dfd5ab6015d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4ODQwNw==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r440588407", "bodyText": "Doris On ES maybe would use slice scroll in future,  at this time, we would add findSlicePartitions", "author": "wuyunfeng", "createdAt": "2020-06-16T05:06:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4NzEyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4NzQzNQ==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r440587435", "bodyText": "shardLocation maybe not suitable for this function parameter.", "author": "wuyunfeng", "createdAt": "2020-06-16T05:02:27Z", "path": "fe/src/main/java/org/apache/doris/external/elasticsearch/EsIndexState.java", "diffHunk": "@@ -44,7 +47,43 @@ public EsIndexState(String indexName) {\n         this.partitionDesc = null;\n         this.partitionKey = null;\n     }\n-\n+    \n+    /**\n+     * Parse shardRoutings from the json\n+     * @param indexName indexName(alias or really name)\n+     * @param shardLocation the return value of _search_shards\n+     * @return shardRoutings is used for searching\n+     */\n+    public static EsIndexState fromShardLocation(String indexName, String shardLocation) {", "originalCommit": "97b2338fb9f4f5bda2628d194d18dfd5ab6015d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c2f7925c20c2dae75d0d2f536766013f9dd84afe", "url": "https://github.com/apache/incubator-doris/commit/c2f7925c20c2dae75d0d2f536766013f9dd84afe", "message": "Merge branch 'master' of https://github.com/apache/incubator-doris into stalary_enhancement\n\n# Conflicts:\n#\tdocs/en/extending-doris/doris-on-es.md\n#\tdocs/zh-CN/extending-doris/doris-on-es.md", "committedDate": "2020-06-19T03:02:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3ODI4OQ==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r442678289", "bodyText": "\u63aa\u8f9e\u51c6\u786e\u70b9\u3002\u53bb\u6389\u5efa\u8bae\u8fd9\u7c7b\u7528\u8bcd\u3002\n\u53ef\u4ee5\u652f\u6301alias\u5c31\u662f\u652f\u6301\uff0c\u4e0d\u53ef\u4ee5\u5c31\u662f\u4e0d\u53ef\u4ee5\u3002\u5efa\u8bae\u8868\u793a\u662f\u5565\u6548\u679c\uff1f\u3002\u3002\u3002", "author": "blackfox1983", "createdAt": "2020-06-19T07:29:12Z", "path": "docs/zh-CN/extending-doris/doris-on-es.md", "diffHunk": "@@ -128,7 +128,7 @@ PROPERTIES (\n \u53c2\u6570 | \u8bf4\u660e\n ---|---\n **hosts** | ES\u96c6\u7fa4\u5730\u5740\uff0c\u53ef\u4ee5\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\uff0c\u4e5f\u53ef\u4ee5\u662fES\u524d\u7aef\u7684\u8d1f\u8f7d\u5747\u8861\u5730\u5740\n-**index** | \u5bf9\u5e94\u7684ES\u7684index\u540d\u5b57\n+**index** | \u5bf9\u5e94\u7684ES\u7684index\u540d\u5b57\uff0c\u53ef\u4ee5\u662falias\uff0c\u5982\u679c\u4f7f\u7528doc_value\uff0c\u5efa\u8bae\u4f7f\u7528\u771f\u5b9e\u7684index\u540d\u79f0", "originalCommit": "c2f7925c20c2dae75d0d2f536766013f9dd84afe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3OTUzMg==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r442679532", "bodyText": "\u8fd9\u4e2a\u6587\u4ef6\u540d\u53ef\u5426\u662f ESShardPartitionProc?\n\u56e0\u4e3a\u540e\u9762\u6211\u60f3\u641e\u641e\u591aindex\u7684\u5206\u533a\u3002\u5bb9\u6613\u5728partition\u4e0a\u6df7\u6dc6", "author": "blackfox1983", "createdAt": "2020-06-19T07:31:52Z", "path": "fe/src/main/java/org/apache/doris/common/proc/EsPartitionsProcDir.java", "diffHunk": "@@ -24,7 +24,7 @@\n import org.apache.doris.catalog.RangePartitionInfo;\n import org.apache.doris.catalog.Table.TableType;\n import org.apache.doris.common.AnalysisException;\n-import org.apache.doris.external.elasticsearch.EsIndexState;\n+import org.apache.doris.external.elasticsearch.EsShardPartitions;\n ", "originalCommit": "c2f7925c20c2dae75d0d2f536766013f9dd84afe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5NDI1NA==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r443094254", "bodyText": "EsPartitionsProcDir -> EsShardPartitionProc ? \u53ef\u4ee5\u5728\u540e\u9762\u641e\u591a\u5206\u533a\u7684\u65f6\u5019\u518d\u4fee\u6539\u5427\uff0c\u73b0\u5728\u6539\u4e86\u4e5f\u633a\u5947\u602a\u7684", "author": "stalary", "createdAt": "2020-06-20T02:40:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3OTUzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MDEzMw==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r442680133", "bodyText": "\u65b0\u52a0\u7684\u6bcf\u4e00\u4e2a\u7c7b\u90fd\u6ce8\u91ca\u4e0b\u8fd9\u4e2a\u7c7b\u505a\u4ec0\u4e48\u7684\u3002\u5904\u4e8e\u4ec0\u4e48\u5b9a\u4f4d\uff0c\u8986\u76d6\u90a3\u4e9b\u529f\u80fd", "author": "blackfox1983", "createdAt": "2020-06-19T07:33:15Z", "path": "fe/src/main/java/org/apache/doris/external/elasticsearch/EsFieldInfos.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.external.elasticsearch;\n+\n+import org.apache.doris.catalog.Column;\n+import org.apache.doris.catalog.EsTable;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.json.JSONObject;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class EsFieldInfos {", "originalCommit": "c2f7925c20c2dae75d0d2f536766013f9dd84afe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MTUzOA==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r442681538", "bodyText": "\u8fd9\u4e9b\u590d\u6742\u7ed3\u6784\u52a0\u4e2a\u6ce8\u91ca\u5427\u3002\n\u6700\u5178\u578b\u7684\u662f\u4e3e\u4f8b\u8bf4\u4e0b\u91cc\u9762\u7684\u5185\u5bb9\u662f\u4ec0\u4e48\u6837\u5b50\u7684\u3002\u597d\u770b\u61c2\u3002\n\u6bd4\u5982 \"personName\" => \"personAge\"\u3002\u90fd\u662fstring\uff0c\u5b8c\u5168\u4e0d\u77e5\u9053\u662f\u5565\u4e1c\u897f\n\u4ee5\u53ca\u4e3a\u5565\u8981\u52a0\u8fd9\u4e2a\u6210\u5458", "author": "blackfox1983", "createdAt": "2020-06-19T07:36:26Z", "path": "fe/src/main/java/org/apache/doris/external/elasticsearch/EsFieldInfos.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.external.elasticsearch;\n+\n+import org.apache.doris.catalog.Column;\n+import org.apache.doris.catalog.EsTable;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.json.JSONObject;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class EsFieldInfos {\n+    \n+    private static final Logger LOG = LogManager.getLogger(EsFieldInfos.class);\n+    \n+    private Map<String, String> fieldsContext;", "originalCommit": "c2f7925c20c2dae75d0d2f536766013f9dd84afe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MjI0OA==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r442682248", "bodyText": "mappingType\u5e94\u8be5\u6ca1\u6709\u8fd9\u4e2a\u8bcd\u3002Es\u662fdocType\uff1f", "author": "blackfox1983", "createdAt": "2020-06-19T07:37:55Z", "path": "fe/src/main/java/org/apache/doris/external/elasticsearch/EsFieldInfos.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.external.elasticsearch;\n+\n+import org.apache.doris.catalog.Column;\n+import org.apache.doris.catalog.EsTable;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.json.JSONObject;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class EsFieldInfos {\n+    \n+    private static final Logger LOG = LogManager.getLogger(EsFieldInfos.class);\n+    \n+    private Map<String, String> fieldsContext;\n+    \n+    private Map<String, String> docValueContext;\n+    \n+    public EsFieldInfos(Map<String, String> fieldsContext, Map<String, String> docValueContext) {\n+        this.fieldsContext = fieldsContext;\n+        this.docValueContext = docValueContext;\n+    }\n+    \n+    public Map<String, String> getFieldsContext() {\n+        return fieldsContext;\n+    }\n+    \n+    public Map<String, String> getDocValueContext() {\n+        return docValueContext;\n+    }\n+    \n+    /**\n+     * Parse the required field information from the json\n+     * @param colList table column\n+     * @param indexName indexName(alias or really name)\n+     * @param indexMapping the return value of _mapping\n+     * @param mappingType indexType\n+     * @return fieldsContext and docValueContext\n+     * @throws Exception\n+     */\n+    public static EsFieldInfos fromMapping(List<Column> colList, String indexName, String indexMapping, String mappingType) throws ExternalDataSourceException {", "originalCommit": "c2f7925c20c2dae75d0d2f536766013f9dd84afe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MzgwNg==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r442683806", "bodyText": "\u8fd9\u7c7b\u4ee3\u7801\uff0c\u6ce8\u91ca\u4e0a\u6700\u597d\u5199\u4e0bmapping\u7684\u7ed3\u6784\u4e3e\u4f8b\u3002\n\u6bd4\u5982\u5927\u6982\u662f\u4ec0\u4e48\u6837\u7684json\u683c\u5f0f\n\u56e0\u4e3a\u8fd9\u4e2aparser\u5f3a\u4f9d\u8d56\u5bf9mapping\u7684\u5904\u7406\u3002", "author": "blackfox1983", "createdAt": "2020-06-19T07:41:14Z", "path": "fe/src/main/java/org/apache/doris/external/elasticsearch/EsFieldInfos.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.external.elasticsearch;\n+\n+import org.apache.doris.catalog.Column;\n+import org.apache.doris.catalog.EsTable;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.json.JSONObject;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class EsFieldInfos {\n+    \n+    private static final Logger LOG = LogManager.getLogger(EsFieldInfos.class);\n+    \n+    private Map<String, String> fieldsContext;\n+    \n+    private Map<String, String> docValueContext;\n+    \n+    public EsFieldInfos(Map<String, String> fieldsContext, Map<String, String> docValueContext) {\n+        this.fieldsContext = fieldsContext;\n+        this.docValueContext = docValueContext;\n+    }\n+    \n+    public Map<String, String> getFieldsContext() {\n+        return fieldsContext;\n+    }\n+    \n+    public Map<String, String> getDocValueContext() {\n+        return docValueContext;\n+    }\n+    \n+    /**\n+     * Parse the required field information from the json\n+     * @param colList table column\n+     * @param indexName indexName(alias or really name)\n+     * @param indexMapping the return value of _mapping\n+     * @param mappingType indexType\n+     * @return fieldsContext and docValueContext\n+     * @throws Exception\n+     */\n+    public static EsFieldInfos fromMapping(List<Column> colList, String indexName, String indexMapping, String mappingType) throws ExternalDataSourceException {\n+        JSONObject jsonObject = new JSONObject(indexMapping);\n+        // the indexName use alias takes the first mapping\n+        Iterator<String> keys = jsonObject.keys();\n+        String docKey = keys.next();\n+        JSONObject docData = jsonObject.optJSONObject(docKey);\n+        JSONObject mappings = docData.optJSONObject(\"mappings\");\n+        JSONObject rootSchema = mappings.optJSONObject(mappingType);\n+        JSONObject properties;", "originalCommit": "c2f7925c20c2dae75d0d2f536766013f9dd84afe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3NjE0OQ==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r442676149", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public EsFieldInfos getFieldInfo(String indexName, String mappingType, List<Column> colList) throws Exception {\n          \n          \n            \n                public EsFieldInfos getFieldInfos(String indexName, String mappingType, List<Column> colList) throws Exception {", "author": "wuyunfeng", "createdAt": "2020-06-19T07:24:29Z", "path": "fe/src/main/java/org/apache/doris/external/elasticsearch/EsRestClient.java", "diffHunk": "@@ -17,118 +17,109 @@\n \n package org.apache.doris.external.elasticsearch;\n \n+import org.apache.doris.catalog.Column;\n+import org.apache.http.HttpHeaders;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.logging.log4j.util.Strings;\n import org.codehaus.jackson.JsonParser;\n import org.codehaus.jackson.map.DeserializationConfig;\n import org.codehaus.jackson.map.ObjectMapper;\n import org.codehaus.jackson.map.SerializationConfig;\n-\n import java.io.IOException;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.concurrent.TimeUnit;\n-\n import okhttp3.Credentials;\n import okhttp3.OkHttpClient;\n import okhttp3.Request;\n import okhttp3.Response;\n \n public class EsRestClient {\n+    \n     private static final Logger LOG = LogManager.getLogger(EsRestClient.class);\n     private ObjectMapper mapper;\n-\n+    \n     {\n         mapper = new ObjectMapper();\n         mapper.configure(DeserializationConfig.Feature.USE_ANNOTATIONS, false);\n         mapper.configure(SerializationConfig.Feature.USE_ANNOTATIONS, false);\n     }\n-\n+    \n     private static OkHttpClient networkClient = new OkHttpClient.Builder()\n             .readTimeout(10, TimeUnit.SECONDS)\n             .build();\n-\n-    private String basicAuth;\n-\n-    private int nextClient = 0;\n+    \n+    private Request.Builder builder;\n     private String[] nodes;\n     private String currentNode;\n-\n+    private int currentNodeIndex = 0;\n+    \n     public EsRestClient(String[] nodes, String authUser, String authPassword) {\n         this.nodes = nodes;\n+        this.builder = new Request.Builder();\n         if (!Strings.isEmpty(authUser) && !Strings.isEmpty(authPassword)) {\n-            basicAuth = Credentials.basic(authUser, authPassword);\n+            this.builder.addHeader(HttpHeaders.AUTHORIZATION,\n+                    Credentials.basic(authUser, authPassword));\n         }\n-        selectNextNode();\n+        this.currentNode = nodes[currentNodeIndex];\n     }\n-\n-    private boolean selectNextNode() {\n-        if (nextClient >= nodes.length) {\n-            return false;\n+    \n+    private void selectNextNode() {\n+        currentNodeIndex++;\n+        // reroute, because the previously failed node may have already been restored\n+        if (currentNodeIndex >= nodes.length) {\n+            currentNodeIndex = 0;\n         }\n-        currentNode = nodes[nextClient++];\n-        return true;\n+        currentNode = nodes[currentNodeIndex];\n     }\n-\n+    \n     public Map<String, EsNodeInfo> getHttpNodes() throws Exception {\n         Map<String, Map<String, Object>> nodesData = get(\"_nodes/http\", \"nodes\");\n         if (nodesData == null) {\n             return Collections.emptyMap();\n         }\n-        Map<String, EsNodeInfo> nodes = new HashMap<>();\n+        Map<String, EsNodeInfo> nodesMap = new HashMap<>();\n         for (Map.Entry<String, Map<String, Object>> entry : nodesData.entrySet()) {\n             EsNodeInfo node = new EsNodeInfo(entry.getKey(), entry.getValue());\n             if (node.hasHttp()) {\n-                nodes.put(node.getId(), node);\n+                nodesMap.put(node.getId(), node);\n             }\n         }\n-        return nodes;\n+        return nodesMap;\n     }\n-\n-    public String getIndexMetaData(String indexName) throws Exception {\n-        String path = \"_cluster/state?indices=\" + indexName\n-                + \"&metric=routing_table,nodes,metadata&expand_wildcards=open\";\n-        return execute(path);\n-\n+    \n+    public EsFieldInfos getFieldInfo(String indexName, String mappingType, List<Column> colList) throws Exception {", "originalCommit": "c2f7925c20c2dae75d0d2f536766013f9dd84afe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4ODYxOQ==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r442688619", "bodyText": "this method maybe not needed, if not needed, can you delete this?", "author": "wuyunfeng", "createdAt": "2020-06-19T07:51:11Z", "path": "fe/src/main/java/org/apache/doris/external/elasticsearch/EsShardPartitions.java", "diffHunk": "@@ -76,66 +102,15 @@ public TNetworkAddress randomAddress(Map<String, EsNodeInfo> nodesInfo) {\n         EsNodeInfo[] nodeInfos = (EsNodeInfo[]) nodesInfo.values().toArray();\n         return nodeInfos[seed].getPublishAddress();\n     }\n-    \n-    public static EsIndexState parseIndexStateV55(String indexName, JSONObject indicesRoutingMap, \n-            JSONObject nodesMap, \n-            JSONObject indicesMetaMap, PartitionInfo partitionInfo) throws AnalysisException {\n-        EsIndexState indexState = new EsIndexState(indexName);\n-        JSONObject shardRoutings = indicesRoutingMap.getJSONObject(indexName).getJSONObject(\"shards\");\n-        for (String shardKey : shardRoutings.keySet()) {\n-            List<EsShardRouting> singleShardRouting = Lists.newArrayList();\n-            JSONArray shardRouting = shardRoutings.getJSONArray(shardKey);\n-            for (int i = 0; i < shardRouting.length(); ++i) {\n-                JSONObject shard = shardRouting.getJSONObject(i);\n-                String shardState = shard.getString(\"state\");\n-                if (\"STARTED\".equalsIgnoreCase(shardState)) {\n-                    try {\n-                        singleShardRouting.add(EsShardRouting.parseShardRoutingV55(shardState, \n-                                shardKey, shard, nodesMap));\n-                    } catch (Exception e) {\n-                        LOG.info(\"errors while parse shard routing from json [{}], ignore this shard\", shard.toString(), e);\n-                    }\n-                } \n-            }\n-            if (singleShardRouting.isEmpty()) {\n-                LOG.warn(\"could not find a healthy allocation for [{}][{}]\", indexName, shardKey);\n-            }\n-            indexState.addShardRouting(Integer.valueOf(shardKey), singleShardRouting);\n-        }\n \n-        // get some meta info from es, could be used to prune index when query\n-        // index.bpack.partition.upperbound: stu_age\n-        if (partitionInfo != null && partitionInfo instanceof RangePartitionInfo) {\n-            JSONObject indexMeta = indicesMetaMap.getJSONObject(indexName);\n-            JSONObject partitionSetting = EsUtil.getJsonObject(indexMeta, \"settings.index.bpack.partition\", 0);\n-            LOG.debug(\"index {} range partition setting is {}\", indexName, \n-                    partitionSetting == null ? \"\" : partitionSetting.toString());\n-            if (partitionSetting != null && partitionSetting.has(\"upperbound\")) {\n-                String upperBound = partitionSetting.getString(\"upperbound\");\n-                List<PartitionValue> upperValues = Lists.newArrayList(new PartitionValue(upperBound));\n-                PartitionKeyDesc partitionKeyDesc = new PartitionKeyDesc(upperValues);\n-                // use index name as partition name\n-                SingleRangePartitionDesc desc = new SingleRangePartitionDesc(false, \n-                        indexName, partitionKeyDesc, null);\n-                PartitionKey partitionKey = PartitionKey.createPartitionKey(\n-                        desc.getPartitionKeyDesc().getUpperValues(), \n-                        ((RangePartitionInfo) partitionInfo).getPartitionColumns());\n-                desc.analyze(((RangePartitionInfo) partitionInfo).getPartitionColumns().size(), null);\n-                indexState.setPartitionDesc(desc);\n-                indexState.setPartitionKey(partitionKey);\n-            }\n-        }\n-        return indexState;\n-    }\n-    \n     public void addShardRouting(int shardId, List<EsShardRouting> singleShardRouting) {\n         shardRoutings.put(shardId, singleShardRouting);\n     }\n-    \n+\n     public String getIndexName() {", "originalCommit": "c2f7925c20c2dae75d0d2f536766013f9dd84afe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5MTkzOQ==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r443091939", "bodyText": "getIndexName still in use", "author": "stalary", "createdAt": "2020-06-20T02:00:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4ODYxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY5MTEyNA==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r442691124", "bodyText": "Can we remove or move this setXXX from EsStateStore?", "author": "wuyunfeng", "createdAt": "2020-06-19T07:56:20Z", "path": "fe/src/main/java/org/apache/doris/external/elasticsearch/EsStateStore.java", "diffHunk": "@@ -124,12 +126,9 @@ public void loadTableFromCatalog() {\n             }\n         }\n     }\n-\n-    @VisibleForTesting\n-    public EsTableState getTableState(String responseStr, EsTable esTable)\n-            throws DdlException, AnalysisException, ExternalDataSourceException {\n-        JSONObject jsonObject = new JSONObject(responseStr);\n-        JSONObject nodesMap = jsonObject.getJSONObject(\"nodes\");\n+    \n+    // Configure keyword and doc_values by mapping\n+    public void setEsTableContext(EsFieldInfos fieldInfos, EsTable esTable) {", "originalCommit": "c2f7925c20c2dae75d0d2f536766013f9dd84afe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "95b51173ac8709c1c28704f73a64d597dd2693aa", "url": "https://github.com/apache/incubator-doris/commit/95b51173ac8709c1c28704f73a64d597dd2693aa", "message": "MOD: Refactor some places", "committedDate": "2020-06-20T02:43:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI3OTMyNg==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r443279326", "bodyText": "74 - 90 or 92 - 90 can be abstract to EsTable's method", "author": "wuyunfeng", "createdAt": "2020-06-22T01:25:32Z", "path": "fe/src/main/java/org/apache/doris/external/elasticsearch/EsRepository.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.external.elasticsearch;\n+\n+import org.apache.doris.catalog.Catalog;\n+import org.apache.doris.catalog.Database;\n+import org.apache.doris.catalog.EsTable;\n+import org.apache.doris.catalog.Table;\n+import org.apache.doris.catalog.Table.TableType;\n+import org.apache.doris.common.Config;\n+import org.apache.doris.common.util.MasterDaemon;\n+import com.google.common.collect.Maps;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+/**\n+ * It is used to call es api to get shard allocation state\n+ */\n+public class EsRepository extends MasterDaemon {\n+    \n+    private static final Logger LOG = LogManager.getLogger(EsRepository.class);\n+    \n+    private Map<Long, EsTable> esTables;\n+    \n+    private Map<Long, EsRestClient> esClients;\n+    \n+    public EsRepository() {\n+        super(\"es state store\", Config.es_state_sync_interval_second * 1000);\n+        esTables = Maps.newConcurrentMap();\n+        esClients = Maps.newConcurrentMap();\n+    }\n+    \n+    public void registerTable(EsTable esTable) {\n+        if (Catalog.isCheckpointThread()) {\n+            return;\n+        }\n+        esTables.put(esTable.getId(), esTable);\n+        esClients.put(esTable.getId(),\n+                new EsRestClient(esTable.getSeeds(), esTable.getUserName(), esTable.getPasswd()));\n+        LOG.info(\"register a new table [{}] to sync list\", esTable);\n+    }\n+    \n+    public void deRegisterTable(long tableId) {\n+        esTables.remove(tableId);\n+        esClients.remove(tableId);\n+        LOG.info(\"deregister table [{}] from sync list\", tableId);\n+    }\n+    \n+    @Override\n+    protected void runAfterCatalogReady() {\n+        for (EsTable esTable : esTables.values()) {\n+            try {\n+                EsRestClient client = esClients.get(esTable.getId());\n+                \n+                if (esTable.isKeywordSniffEnable() || esTable.isDocValueScanEnable()) {", "originalCommit": "95b51173ac8709c1c28704f73a64d597dd2693aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI3OTQ5MA==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r443279490", "bodyText": "fieldInfos == null \u903b\u8f91\u4e0a\u4e0d\u5e94\u8be5continue\uff0c\u56e0\u4e3a\u5982\u679c\u6211\u4e00\u4e2a\u8868\u65e2\u6ca1\u6709docvalue \u6709\u6ca1\u6709keyword\uff0c\u96be\u9053\u5c31\u4e0d\u8be5\u8fdb\u884c\u4e0b\u9762\u7684\u903b\u8f91\uff1f", "author": "wuyunfeng", "createdAt": "2020-06-22T01:26:34Z", "path": "fe/src/main/java/org/apache/doris/external/elasticsearch/EsRepository.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.external.elasticsearch;\n+\n+import org.apache.doris.catalog.Catalog;\n+import org.apache.doris.catalog.Database;\n+import org.apache.doris.catalog.EsTable;\n+import org.apache.doris.catalog.Table;\n+import org.apache.doris.catalog.Table.TableType;\n+import org.apache.doris.common.Config;\n+import org.apache.doris.common.util.MasterDaemon;\n+import com.google.common.collect.Maps;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+/**\n+ * It is used to call es api to get shard allocation state\n+ */\n+public class EsRepository extends MasterDaemon {\n+    \n+    private static final Logger LOG = LogManager.getLogger(EsRepository.class);\n+    \n+    private Map<Long, EsTable> esTables;\n+    \n+    private Map<Long, EsRestClient> esClients;\n+    \n+    public EsRepository() {\n+        super(\"es state store\", Config.es_state_sync_interval_second * 1000);\n+        esTables = Maps.newConcurrentMap();\n+        esClients = Maps.newConcurrentMap();\n+    }\n+    \n+    public void registerTable(EsTable esTable) {\n+        if (Catalog.isCheckpointThread()) {\n+            return;\n+        }\n+        esTables.put(esTable.getId(), esTable);\n+        esClients.put(esTable.getId(),\n+                new EsRestClient(esTable.getSeeds(), esTable.getUserName(), esTable.getPasswd()));\n+        LOG.info(\"register a new table [{}] to sync list\", esTable);\n+    }\n+    \n+    public void deRegisterTable(long tableId) {\n+        esTables.remove(tableId);\n+        esClients.remove(tableId);\n+        LOG.info(\"deregister table [{}] from sync list\", tableId);\n+    }\n+    \n+    @Override\n+    protected void runAfterCatalogReady() {\n+        for (EsTable esTable : esTables.values()) {\n+            try {\n+                EsRestClient client = esClients.get(esTable.getId());\n+                \n+                if (esTable.isKeywordSniffEnable() || esTable.isDocValueScanEnable()) {\n+                    EsFieldInfos fieldInfos = client.getFieldInfos(esTable.getIndexName(), esTable.getMappingType(), esTable.getFullSchema());\n+                    if (fieldInfos == null) {\n+                        continue;", "originalCommit": "95b51173ac8709c1c28704f73a64d597dd2693aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5e42b5b4a51fc25f522efbc573cb06f39b32824b", "url": "https://github.com/apache/incubator-doris/commit/5e42b5b4a51fc25f522efbc573cb06f39b32824b", "message": "MOD: EsRepository logic moves to EsTable", "committedDate": "2020-06-22T02:39:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MzE4MQ==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r443973181", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    super(\"es state store\", Config.es_state_sync_interval_second * 1000);\n          \n          \n            \n                    super(\"es repository\", Config.es_state_sync_interval_second * 1000);", "author": "wuyunfeng", "createdAt": "2020-06-23T05:38:25Z", "path": "fe/src/main/java/org/apache/doris/external/elasticsearch/EsRepository.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.external.elasticsearch;\n+\n+import org.apache.doris.catalog.Catalog;\n+import org.apache.doris.catalog.Database;\n+import org.apache.doris.catalog.EsTable;\n+import org.apache.doris.catalog.Table;\n+import org.apache.doris.catalog.Table.TableType;\n+import org.apache.doris.common.Config;\n+import org.apache.doris.common.util.MasterDaemon;\n+import com.google.common.collect.Maps;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+/**\n+ * It is used to call es api to get shard allocation state\n+ */\n+public class EsRepository extends MasterDaemon {\n+\n+    private static final Logger LOG = LogManager.getLogger(EsRepository.class);\n+\n+    private Map<Long, EsTable> esTables;\n+\n+    private Map<Long, EsRestClient> esClients;\n+\n+    public EsRepository() {\n+        super(\"es state store\", Config.es_state_sync_interval_second * 1000);", "originalCommit": "5e42b5b4a51fc25f522efbc573cb06f39b32824b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MzYwMw==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r443973603", "bodyText": "Can you abstract 73-76 into EsTable such as EsTable.load(client)?", "author": "wuyunfeng", "createdAt": "2020-06-23T05:39:53Z", "path": "fe/src/main/java/org/apache/doris/external/elasticsearch/EsRepository.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.external.elasticsearch;\n+\n+import org.apache.doris.catalog.Catalog;\n+import org.apache.doris.catalog.Database;\n+import org.apache.doris.catalog.EsTable;\n+import org.apache.doris.catalog.Table;\n+import org.apache.doris.catalog.Table.TableType;\n+import org.apache.doris.common.Config;\n+import org.apache.doris.common.util.MasterDaemon;\n+import com.google.common.collect.Maps;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+/**\n+ * It is used to call es api to get shard allocation state\n+ */\n+public class EsRepository extends MasterDaemon {\n+\n+    private static final Logger LOG = LogManager.getLogger(EsRepository.class);\n+\n+    private Map<Long, EsTable> esTables;\n+\n+    private Map<Long, EsRestClient> esClients;\n+\n+    public EsRepository() {\n+        super(\"es state store\", Config.es_state_sync_interval_second * 1000);\n+        esTables = Maps.newConcurrentMap();\n+        esClients = Maps.newConcurrentMap();\n+    }\n+\n+    public void registerTable(EsTable esTable) {\n+        if (Catalog.isCheckpointThread()) {\n+            return;\n+        }\n+        esTables.put(esTable.getId(), esTable);\n+        esClients.put(esTable.getId(),\n+                new EsRestClient(esTable.getSeeds(), esTable.getUserName(), esTable.getPasswd()));\n+        LOG.info(\"register a new table [{}] to sync list\", esTable);\n+    }\n+\n+    public void deRegisterTable(long tableId) {\n+        esTables.remove(tableId);\n+        esClients.remove(tableId);\n+        LOG.info(\"deregister table [{}] from sync list\", tableId);\n+    }\n+\n+    @Override\n+    protected void runAfterCatalogReady() {\n+        for (EsTable esTable : esTables.values()) {\n+            try {\n+                EsRestClient client = esClients.get(esTable.getId());\n+                EsFieldInfos fieldInfos = client.getFieldInfos(esTable.getIndexName(), esTable.getMappingType(), esTable.getFullSchema());", "originalCommit": "5e42b5b4a51fc25f522efbc573cb06f39b32824b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e3748ec7a8af18079ab2fe7426b577a494b80bfc", "url": "https://github.com/apache/incubator-doris/commit/e3748ec7a8af18079ab2fe7426b577a494b80bfc", "message": "Merge branch 'master' into stalary_enhancement", "committedDate": "2020-06-23T05:58:52Z", "type": "commit"}, {"oid": "a7ba9d1eb8838a7201a359d400b455ef7dacaa64", "url": "https://github.com/apache/incubator-doris/commit/a7ba9d1eb8838a7201a359d400b455ef7dacaa64", "message": "MOD: Abstract code, change the function name", "committedDate": "2020-06-23T06:00:27Z", "type": "commit"}, {"oid": "303d0a2f9627c0e6b9efe1c3000fd4571a07cab8", "url": "https://github.com/apache/incubator-doris/commit/303d0a2f9627c0e6b9efe1c3000fd4571a07cab8", "message": "MOD: format", "committedDate": "2020-06-23T06:19:12Z", "type": "commit"}, {"oid": "15ba2d390b1d8f7de5f9978a7cc63eeb0f571f2d", "url": "https://github.com/apache/incubator-doris/commit/15ba2d390b1d8f7de5f9978a7cc63eeb0f571f2d", "message": "MOD: mod error info", "committedDate": "2020-06-23T11:53:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczOTMxMg==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r444739312", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Map<String, String> fieldsContext= new HashMap<>();\n          \n          \n            \n                private Map<String, String> fieldsContext = new HashMap<>();", "author": "wutiangan", "createdAt": "2020-06-24T08:43:57Z", "path": "fe/src/main/java/org/apache/doris/catalog/EsTable.java", "diffHunk": "@@ -98,7 +102,7 @@\n     // use select city from table, if enable the docvalue, we will fetch the `city` field value from `city.raw`\n     private Map<String, String> docValueContext = new HashMap<>();\n \n-    private Map<String, String> fieldsContext = new HashMap<>();\n+    private Map<String, String> fieldsContext= new HashMap<>();", "originalCommit": "15ba2d390b1d8f7de5f9978a7cc63eeb0f571f2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc0Njg1MA==", "url": "https://github.com/apache/incubator-doris/pull/3454#discussion_r444746850", "bodyText": "ok", "author": "stalary", "createdAt": "2020-06-24T08:56:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczOTMxMg=="}], "type": "inlineReview"}, {"oid": "5fbae715aa676d0d39f5906e840ca593e3ba1da2", "url": "https://github.com/apache/incubator-doris/commit/5fbae715aa676d0d39f5906e840ca593e3ba1da2", "message": "MOD: format code", "committedDate": "2020-06-24T08:57:43Z", "type": "commit"}]}