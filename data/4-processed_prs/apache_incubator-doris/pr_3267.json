{"pr_number": 3267, "pr_title": "[Bug] Fix some bugs of install/uninstall plugins", "pr_createdAt": "2020-04-06T09:59:36Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3267", "timeline": [{"oid": "eb504a9a3d70cb7237b07e017a789cd52fc81889", "url": "https://github.com/apache/incubator-doris/commit/eb504a9a3d70cb7237b07e017a789cd52fc81889", "message": "[Bug] Fix some bugs of install/uninstall plugins\n\n1. Avoid losing plugin if plugin failed to load when replaying\n    When in replay process, the plugin should always be added to the plugin manager,\n    even if that plugin failed to be loaded.\n\n2. `show plugin` statement should show all plugins, not only the successfully installed plugins.\n\n3. plugin's name should be unique globally and case insensitive.\n\n4. Avoid creating new instances of plugins when doing metadata checkpoint.\n\n5. Add a __builtin_ prefix for builtin plugins.", "committedDate": "2020-04-06T09:14:29Z", "type": "commit"}, {"oid": "c47b7595eb1f252db6863132a9a8198a004fc62e", "url": "https://github.com/apache/incubator-doris/commit/c47b7595eb1f252db6863132a9a8198a004fc62e", "message": "add comment", "committedDate": "2020-04-07T03:40:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzMjIxMw==", "url": "https://github.com/apache/incubator-doris/pull/3267#discussion_r404532213", "bodyText": "Maybe you need ConcurrentSkipListSet? I guess", "author": "Seaven", "createdAt": "2020-04-07T04:46:22Z", "path": "fe/src/main/java/org/apache/doris/plugin/PluginMgr.java", "diffHunk": "@@ -41,17 +43,23 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n+import java.util.Set;\n \n public class PluginMgr implements Writable {\n     private final static Logger LOG = LogManager.getLogger(PluginMgr.class);\n \n+    public final static String BUILTIN_PLUGIN_PREFIX = \"__builtin_\";\n+\n     private final Map<String, PluginLoader>[] plugins;\n+    // all dynamic plugins should have unique names,\n+    private final Set<String> dynamicPluginNames;\n \n     public PluginMgr() {\n-        plugins = new Map[PluginType.MAX_PLUGIN_SIZE];\n-        for (int i = 0; i < PluginType.MAX_PLUGIN_SIZE; i++) {\n-            plugins[i] = Maps.newConcurrentMap();\n+        plugins = new Map[PluginType.MAX_PLUGIN_TYPE_SIZE];\n+        for (int i = 0; i < PluginType.MAX_PLUGIN_TYPE_SIZE; i++) {\n+            plugins[i] = Maps.newTreeMap(String.CASE_INSENSITIVE_ORDER);\n         }\n+        dynamicPluginNames = Sets.newTreeSet(String.CASE_INSENSITIVE_ORDER);", "originalCommit": "eb504a9a3d70cb7237b07e017a789cd52fc81889", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxNzExMg==", "url": "https://github.com/apache/incubator-doris/pull/3267#discussion_r405517112", "bodyText": "No, Concurrent collection only solves the problem of concurrency conflicts, but what I need here is a serializable isolation.", "author": "morningman", "createdAt": "2020-04-08T13:18:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzMjIxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzNDg2NQ==", "url": "https://github.com/apache/incubator-doris/pull/3267#discussion_r404534865", "bodyText": "Using two containers does not avoid concurrency problems", "author": "Seaven", "createdAt": "2020-04-07T04:56:25Z", "path": "fe/src/main/java/org/apache/doris/plugin/PluginMgr.java", "diffHunk": "@@ -86,25 +112,26 @@ public PluginInfo installPlugin(InstallPluginStmt stmt) throws IOException, User\n \n         try {\n             PluginInfo info = pluginLoader.getPluginInfo();\n-\n-            if (plugins[info.getTypeId()].containsKey(info.getName())) {\n+            \n+            if (checkDynamicPluginNameExist(info.getName())) {", "originalCommit": "eb504a9a3d70cb7237b07e017a789cd52fc81889", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxODgyOA==", "url": "https://github.com/apache/incubator-doris/pull/3267#discussion_r405518828", "bodyText": "I think it works.\nI first using checkDynamicPluginNameExist to check if name already exist.\nAnd after installing, I use addDynamicPluginNameIfAbsent() to check-and-add name to the dynamicPluginNames set. check-and-add is an atomic operation.\nAnd plugins[] array is just for saving the plugin, I do not use it to check name existence.", "author": "morningman", "createdAt": "2020-04-08T13:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzNDg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzNTMyMQ==", "url": "https://github.com/apache/incubator-doris/pull/3267#discussion_r404535321", "bodyText": "Can't uninstall in there, will cause uninstall and delete real plugin if install same plugin", "author": "Seaven", "createdAt": "2020-04-07T04:58:10Z", "path": "fe/src/main/java/org/apache/doris/plugin/PluginMgr.java", "diffHunk": "@@ -86,25 +112,26 @@ public PluginInfo installPlugin(InstallPluginStmt stmt) throws IOException, User\n \n         try {\n             PluginInfo info = pluginLoader.getPluginInfo();\n-\n-            if (plugins[info.getTypeId()].containsKey(info.getName())) {\n+            \n+            if (checkDynamicPluginNameExist(info.getName())) {\n                 throw new UserException(\"plugin \" + info.getName() + \" has already been installed.\");\n             }\n             \n             // install plugin\n             pluginLoader.install();\n             pluginLoader.setStatus(PluginStatus.INSTALLED);\n             \n-            if (plugins[info.getTypeId()].putIfAbsent(info.getName(), pluginLoader) != null) {\n-                pluginLoader.uninstall();\n+            if (!addDynamicPluginNameIfAbsent(info.getName())) {\n                 throw new UserException(\"plugin \" + info.getName() + \" has already been installed.\");\n             }\n-\n+            \n+            plugins[info.getTypeId()].put(info.getName(), pluginLoader);\n+            \n             Catalog.getCurrentCatalog().getEditLog().logInstallPlugin(info);\n-            LOG.info(\"install plugin = \" + info.getName());\n+            LOG.info(\"install plugin {}\", info.getName());\n             return info;\n         } catch (IOException | UserException e) {\n-            pluginLoader.setStatus(PluginStatus.ERROR);\n+            pluginLoader.uninstall();", "originalCommit": "eb504a9a3d70cb7237b07e017a789cd52fc81889", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyNDUzMQ==", "url": "https://github.com/apache/incubator-doris/pull/3267#discussion_r405924531", "bodyText": "Ignore, installPath will not exist if it is not installed", "author": "Seaven", "createdAt": "2020-04-09T02:41:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzNTMyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzNzg4NQ==", "url": "https://github.com/apache/incubator-doris/pull/3267#discussion_r404537885", "bodyText": "It is a good idea not to use PluginInfo for persist", "author": "Seaven", "createdAt": "2020-04-07T05:07:51Z", "path": "fe/src/main/java/org/apache/doris/plugin/PluginMgr.java", "diffHunk": "@@ -113,30 +140,47 @@ public PluginInfo installPlugin(InstallPluginStmt stmt) throws IOException, User\n      * Dynamic uninstall plugin\n      */\n     public PluginInfo uninstallPlugin(String name) throws IOException, UserException {\n-        for (int i = 0; i < PluginType.MAX_PLUGIN_SIZE; i++) {\n+        if (!checkDynamicPluginNameExist(name)) {\n+            throw new DdlException(\"Plugin \" + name + \" does not exist\");\n+        }\n+\n+        for (int i = 0; i < PluginType.MAX_PLUGIN_TYPE_SIZE; i++) {\n             if (plugins[i].containsKey(name)) {\n                 PluginLoader loader = plugins[i].get(name);\n+                if (loader == null) {\n+                    // this is not a atomic operation, so even if containsKey() is true,\n+                    // we may still get null object by get() method\n+                    continue;\n+                }\n \n-                if (null != loader && loader.isDynamicPlugin()) {\n-                    loader.pluginUninstallValid();\n-                    loader.setStatus(PluginStatus.UNINSTALLING);\n-                    // uninstall plugin\n-                    loader.uninstall();\n-                    plugins[i].remove(name);\n-\n-                    loader.setStatus(PluginStatus.UNINSTALLED);\n-                    return loader.getPluginInfo();\n+                if (!loader.isDynamicPlugin()) {\n+                    throw new DdlException(\"Only support uninstall dynamic plugins\");\n                 }\n+\n+                loader.pluginUninstallValid();\n+                loader.setStatus(PluginStatus.UNINSTALLING);\n+                // uninstall plugin\n+                loader.uninstall();\n+                plugins[i].remove(name);\n+                loader.setStatus(PluginStatus.UNINSTALLED);\n+                removeDynamicPluginName(name);\n+\n+                // do not get plugin info by calling loader.getPluginInfo(). That method will try to\n+                // reload the plugin properties from source if this plugin is not installed successfully.\n+                // Here we only need the plugin's name for persisting.\n+                // TODO(cmy): This is a bad design to couple the persist info with PluginInfo, but for\n+                // the compatibility, I till use this method.", "originalCommit": "eb504a9a3d70cb7237b07e017a789cd52fc81889", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxOTk3Mg==", "url": "https://github.com/apache/incubator-doris/pull/3267#discussion_r405519972", "bodyText": "Yes, but I don't want to change the meta persistence method in this pull request. Maybe changed later.", "author": "morningman", "createdAt": "2020-04-08T13:22:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzNzg4NQ=="}], "type": "inlineReview"}]}