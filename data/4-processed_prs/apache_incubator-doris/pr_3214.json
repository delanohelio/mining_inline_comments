{"pr_number": 3214, "pr_title": "Fix cast date type return wrong result", "pr_createdAt": "2020-03-27T07:40:54Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3214", "timeline": [{"oid": "8cb26ec529dcf675ea7c010f6c2acad3fbb595e0", "url": "https://github.com/apache/incubator-doris/commit/8cb26ec529dcf675ea7c010f6c2acad3fbb595e0", "message": "fix date type cast", "committedDate": "2020-03-27T07:32:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MzM4MA==", "url": "https://github.com/apache/incubator-doris/pull/3214#discussion_r399163380", "bodyText": "Are you sure only change this point is enough\uff1f\nDo we need to change this point:\nFunctionCallExpr::analyzeImpl\n        Type[] args = fn.getArgs();\n        if (args.length > 0) {\n            // Implicitly cast all the children to match the function if necessary\n            for (int i = 0; i < argTypes.length; ++i) {\n                // For varargs, we must compare with the last type in callArgs.argTypes.\n                int ix = Math.min(args.length - 1, i);\n                if (!argTypes[i].matchesType(args[ix]) && !(\n                        argTypes[i].isDateType() && args[ix].isDateType())) {\n                    uncheckedCastChild(args[ix], i);\n                    //if (argTypes[i] != args[ix]) castChild(args[ix], i);\n                }\n            }\n        }", "author": "kangkaisen", "createdAt": "2020-03-27T10:19:26Z", "path": "fe/src/main/java/org/apache/doris/analysis/DateLiteral.java", "diffHunk": "@@ -319,7 +319,7 @@ protected void toThrift(TExprNode msg) {\n \n     @Override\n     protected Expr uncheckedCastTo(Type targetType) throws AnalysisException {\n-        if (targetType.isDateType()) {\n+        if (targetType.equals(this.type)) {", "originalCommit": "8cb26ec529dcf675ea7c010f6c2acad3fbb595e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2Mzg4NQ==", "url": "https://github.com/apache/incubator-doris/pull/3214#discussion_r399163885", "bodyText": "Would better also add a test to QueryPlanTest.", "author": "kangkaisen", "createdAt": "2020-03-27T10:20:24Z", "path": "fe/src/test/java/org/apache/doris/analysis/DateLiteralTest.java", "diffHunk": "@@ -55,4 +55,23 @@ public void TwoDigitYear() {\n         }\n         Assert.assertFalse(hasException);\n     }\n+\n+    @Test\n+    public void uncheckedCastTo() {", "originalCommit": "8cb26ec529dcf675ea7c010f6c2acad3fbb595e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5MDI0NQ==", "url": "https://github.com/apache/incubator-doris/pull/3214#discussion_r399890245", "bodyText": "Why not return a new DateLiteral when targetType and this.type are different but both dateType.", "author": "imay", "createdAt": "2020-03-30T01:51:02Z", "path": "fe/src/main/java/org/apache/doris/analysis/DateLiteral.java", "diffHunk": "@@ -319,7 +319,7 @@ protected void toThrift(TExprNode msg) {\n \n     @Override\n     protected Expr uncheckedCastTo(Type targetType) throws AnalysisException {\n-        if (targetType.isDateType()) {\n+        if (targetType.equals(this.type)) {", "originalCommit": "8cb26ec529dcf675ea7c010f6c2acad3fbb595e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzODU0Nw==", "url": "https://github.com/apache/incubator-doris/pull/3214#discussion_r401338547", "bodyText": "If isDateType is true. The type could only be DATE and DATETIME.\nSo one if  else if enough?", "author": "kangkaisen", "createdAt": "2020-04-01T03:41:11Z", "path": "fe/src/main/java/org/apache/doris/analysis/DateLiteral.java", "diffHunk": "@@ -319,7 +319,17 @@ protected void toThrift(TExprNode msg) {\n \n     @Override\n     protected Expr uncheckedCastTo(Type targetType) throws AnalysisException {\n-        if (targetType.equals(this.type)) {\n+        if (targetType.isDateType()) {", "originalCommit": "db30dcb68aee28b4904c9bfee122aa322e8042b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e1eb4309f865f5c86703dfb712648b4c43b16aa7", "url": "https://github.com/apache/incubator-doris/commit/e1eb4309f865f5c86703dfb712648b4c43b16aa7", "message": "fix", "committedDate": "2020-04-01T04:41:53Z", "type": "commit"}, {"oid": "e1eb4309f865f5c86703dfb712648b4c43b16aa7", "url": "https://github.com/apache/incubator-doris/commit/e1eb4309f865f5c86703dfb712648b4c43b16aa7", "message": "fix", "committedDate": "2020-04-01T04:41:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1MzM1MQ==", "url": "https://github.com/apache/incubator-doris/pull/3214#discussion_r401553351", "bodyText": "If Date not to convert DateTime, is OK?", "author": "chaoyli", "createdAt": "2020-04-01T11:45:26Z", "path": "fe/src/main/java/org/apache/doris/analysis/DateLiteral.java", "diffHunk": "@@ -320,6 +320,13 @@ protected void toThrift(TExprNode msg) {\n     @Override\n     protected Expr uncheckedCastTo(Type targetType) throws AnalysisException {\n         if (targetType.isDateType()) {\n+            if (targetType.equals(Type.DATE)) {\n+                this.castToDate();                            \n+            } else if (targetType.equals(Type.DATETIME)) {\n+                this.type = Type.DATETIME;                            ", "originalCommit": "e1eb4309f865f5c86703dfb712648b4c43b16aa7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3NzAwMQ==", "url": "https://github.com/apache/incubator-doris/pull/3214#discussion_r401677001", "bodyText": "Yes, is ok\u3002And explicit type conver(cast expr) also go to this line", "author": "HangyuanLiu", "createdAt": "2020-04-01T14:52:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1MzM1MQ=="}], "type": "inlineReview"}]}