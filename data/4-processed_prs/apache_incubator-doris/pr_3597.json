{"pr_number": 3597, "pr_title": "[Bug] fix OrCompoundPredicate predicate fold bug #3596", "pr_createdAt": "2020-05-15T02:37:26Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3597", "timeline": [{"oid": "091940709240c00c78a53bb73e88548704bfc6bb", "url": "https://github.com/apache/incubator-doris/commit/091940709240c00c78a53bb73e88548704bfc6bb", "message": "[Bug] fix OrCompoundPredicate predicate fold bug", "committedDate": "2020-05-15T02:20:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUzODAyMA==", "url": "https://github.com/apache/incubator-doris/pull/3597#discussion_r425538020", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // rebuild CompoundPredicate if found duplicate predicate will build \uff08predcate) and (.. or ..)  predicate in\n          \n          \n            \n                        // rebuild CompoundPredicate if found duplicate predicate will build (predicate) and (.. or ..)  predicate in", "author": "morningman", "createdAt": "2020-05-15T02:54:52Z", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -618,16 +618,33 @@ private Expr processDuplicateOrs(List<List<Expr>> exprs) {\n             temp.add(makeCompound(cloneExprs, CompoundPredicate.Operator.AND));\n         }\n \n+        Expr result;\n+        boolean isReturnCommonFactorExpr = false;\n         for (List<Expr> exprList : clearExprs) {\n             exprList.removeAll(cloneExprs);\n+            if (exprList.size() == 0) {\n+                // For example, the sql is \"where (a = 1) or (a = 1 and B = 2)\"\n+                // if \"(a = 1)\" is extracted as a common factor expression, then the first expression \"(a = 1)\" has no expression\n+                // other than a common factor expression, and the second expression \"(a = 1 and B = 2)\" has an expression of \"(B = 2)\"\n+                //\n+                // In this case, the common factor expression (\"a = 1\") can be directly used to replace the whole CompoundOrPredicate.\n+                // In Fact, the common factor expression is actually the parent set of expression \"(a = 1)\" and expression \"(a = 1 and B = 2)\"\n+                //\n+                // exprList.size() == 0 means one child of CompoundOrPredicate has no expression other than a common factor expression.\n+                isReturnCommonFactorExpr = true;\n+                break;\n+            }\n             temp.add(makeCompound(exprList, CompoundPredicate.Operator.AND));\n         }\n-\n-        // rebuild CompoundPredicate if found duplicate predicate will build \uff08predcate) and (.. or ..)  predicate in\n-        // step 1: will build (.. or ..)\n-        Expr result = CollectionUtils.isNotEmpty(cloneExprs) ? new CompoundPredicate(CompoundPredicate.Operator.AND,\n-                temp.get(0), makeCompound(temp.subList(1, temp.size()), CompoundPredicate.Operator.OR))\n-                : makeCompound(temp, CompoundPredicate.Operator.OR);\n+        if (isReturnCommonFactorExpr) {\n+            result = temp.get(0);\n+        } else {\n+            // rebuild CompoundPredicate if found duplicate predicate will build \uff08predcate) and (.. or ..)  predicate in", "originalCommit": "091940709240c00c78a53bb73e88548704bfc6bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUzOTA5NQ==", "url": "https://github.com/apache/incubator-doris/pull/3597#discussion_r425539095", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOG.debug(\"rewrite ors: \" + result.toSql());\n          \n          \n            \n                 if (LOG.isDebugEnabled) {\n          \n          \n            \n                      LOG.debug(\"rewrite ors: \" + result.toSql());\n          \n          \n            \n                 }", "author": "wuyunfeng", "createdAt": "2020-05-15T02:58:58Z", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -618,16 +618,33 @@ private Expr processDuplicateOrs(List<List<Expr>> exprs) {\n             temp.add(makeCompound(cloneExprs, CompoundPredicate.Operator.AND));\n         }\n \n+        Expr result;\n+        boolean isReturnCommonFactorExpr = false;\n         for (List<Expr> exprList : clearExprs) {\n             exprList.removeAll(cloneExprs);\n+            if (exprList.size() == 0) {\n+                // For example, the sql is \"where (a = 1) or (a = 1 and B = 2)\"\n+                // if \"(a = 1)\" is extracted as a common factor expression, then the first expression \"(a = 1)\" has no expression\n+                // other than a common factor expression, and the second expression \"(a = 1 and B = 2)\" has an expression of \"(B = 2)\"\n+                //\n+                // In this case, the common factor expression (\"a = 1\") can be directly used to replace the whole CompoundOrPredicate.\n+                // In Fact, the common factor expression is actually the parent set of expression \"(a = 1)\" and expression \"(a = 1 and B = 2)\"\n+                //\n+                // exprList.size() == 0 means one child of CompoundOrPredicate has no expression other than a common factor expression.\n+                isReturnCommonFactorExpr = true;\n+                break;\n+            }\n             temp.add(makeCompound(exprList, CompoundPredicate.Operator.AND));\n         }\n-\n-        // rebuild CompoundPredicate if found duplicate predicate will build \uff08predcate) and (.. or ..)  predicate in\n-        // step 1: will build (.. or ..)\n-        Expr result = CollectionUtils.isNotEmpty(cloneExprs) ? new CompoundPredicate(CompoundPredicate.Operator.AND,\n-                temp.get(0), makeCompound(temp.subList(1, temp.size()), CompoundPredicate.Operator.OR))\n-                : makeCompound(temp, CompoundPredicate.Operator.OR);\n+        if (isReturnCommonFactorExpr) {\n+            result = temp.get(0);\n+        } else {\n+            // rebuild CompoundPredicate if found duplicate predicate will build \uff08predcate) and (.. or ..)  predicate in\n+            // step 1: will build (.. or ..)\n+            result = CollectionUtils.isNotEmpty(cloneExprs) ? new CompoundPredicate(CompoundPredicate.Operator.AND,\n+                    temp.get(0), makeCompound(temp.subList(1, temp.size()), CompoundPredicate.Operator.OR))\n+                    : makeCompound(temp, CompoundPredicate.Operator.OR);\n+        }\n         LOG.debug(\"rewrite ors: \" + result.toSql());", "originalCommit": "091940709240c00c78a53bb73e88548704bfc6bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8be10dca05ac43f90ebb5069aa306356127448e8", "url": "https://github.com/apache/incubator-doris/commit/8be10dca05ac43f90ebb5069aa306356127448e8", "message": "fix code style", "committedDate": "2020-05-15T04:10:19Z", "type": "commit"}]}