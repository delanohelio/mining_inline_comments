{"pr_number": 3572, "pr_title": "[trace] Introduce trace util to BE", "pr_createdAt": "2020-05-12T16:18:08Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3572", "timeline": [{"oid": "e066791e47764653e13c0270dfe4c064bec40fc1", "url": "https://github.com/apache/incubator-doris/commit/e066791e47764653e13c0270dfe4c064bec40fc1", "message": "import original files", "committedDate": "2020-05-13T11:03:20Z", "type": "commit"}, {"oid": "c95885c27f0db8e66d8c6ab02eb81fdb0329566a", "url": "https://github.com/apache/incubator-doris/commit/c95885c27f0db8e66d8c6ab02eb81fdb0329566a", "message": "adapt to Doris", "committedDate": "2020-05-13T11:41:55Z", "type": "forcePushed"}, {"oid": "7481d9f1d37300d3b949f7cc6c01f1ecbcc80121", "url": "https://github.com/apache/incubator-doris/commit/7481d9f1d37300d3b949f7cc6c01f1ecbcc80121", "message": "adapt to Doris", "committedDate": "2020-05-13T11:50:19Z", "type": "forcePushed"}, {"oid": "840672391218d6dfe12a82c873404cd4aa57c423", "url": "https://github.com/apache/incubator-doris/commit/840672391218d6dfe12a82c873404cd4aa57c423", "message": "adapt to Doris", "committedDate": "2020-05-13T12:13:47Z", "type": "commit"}, {"oid": "840672391218d6dfe12a82c873404cd4aa57c423", "url": "https://github.com/apache/incubator-doris/commit/840672391218d6dfe12a82c873404cd4aa57c423", "message": "adapt to Doris", "committedDate": "2020-05-13T12:13:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE1MjQ4OA==", "url": "https://github.com/apache/incubator-doris/pull/3572#discussion_r424152488", "bodyText": "You can also change the macro definition.", "author": "chaoyli", "createdAt": "2020-05-13T03:29:02Z", "path": "be/src/util/debug/trace_event_memory.h", "diffHunk": "@@ -0,0 +1,28 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+#ifndef KUDU_DEBUG_TRACE_EVENT_MEMORY_H\n+#define KUDU_DEBUG_TRACE_EVENT_MEMORY_H", "originalCommit": "12d4ca3985fe710ac17ce2cb641d0cfeac810f09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE5MjQ5MA==", "url": "https://github.com/apache/incubator-doris/pull/3572#discussion_r425192490", "bodyText": "This file have been removed from this pr.", "author": "acelyc111", "createdAt": "2020-05-14T14:43:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE1MjQ4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkyNjM2NA==", "url": "https://github.com/apache/incubator-doris/pull/3572#discussion_r424926364", "bodyText": "It's better to change the indentation to make the code style compatible with the existed code.", "author": "chaoyli", "createdAt": "2020-05-14T07:30:23Z", "path": "be/src/util/trace.h", "diffHunk": "@@ -0,0 +1,291 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+#pragma once\n+\n+#include <iosfwd>\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include <rapidjson/writer.h>\n+\n+#include \"gutil/macros.h\"\n+#include \"gutil/strings/stringpiece.h\"\n+#include \"gutil/strings/substitute.h\"\n+#include \"gutil/ref_counted.h\"\n+#include \"gutil/threading/thread_collision_warner.h\"\n+#include \"gutil/walltime.h\"\n+#include \"util/spinlock.h\"\n+#include \"util/trace_metrics.h\"\n+\n+namespace doris {\n+class Trace;\n+}\n+\n+// Adopt a Trace on the current thread for the duration of the current\n+// scope. The old current Trace is restored when the scope is exited.\n+//\n+// 't' should be a Trace* pointer.\n+#define ADOPT_TRACE(t) doris::ScopedAdoptTrace _adopt_trace(t);\n+\n+// Issue a trace message, if tracing is enabled in the current thread.\n+// See Trace::SubstituteAndTrace for arguments.\n+// Example:\n+//  TRACE(\"Acquired timestamp $0\", timestamp);\n+#define TRACE(format, substitutions...) \\", "originalCommit": "840672391218d6dfe12a82c873404cd4aa57c423", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIxMTM3NA==", "url": "https://github.com/apache/incubator-doris/pull/3572#discussion_r425211374", "bodyText": "I've update indentation in logconfig.cpp. But in my opinion, it would be better to leave the other independent files as they are, to avoid much difference with orginal source code, at most do some necessary modifications(e.g. use doris::SpinLock instead of kudu::simple_spinlock which hasn't been imported). Because if some day in the future we want to synchronize with the source code, and the source code has been updated (either bugfix or improvement), it would be easier for us to update the code in Doris.", "author": "acelyc111", "createdAt": "2020-05-14T15:08:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkyNjM2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkyOTA3Nw==", "url": "https://github.com/apache/incubator-doris/pull/3572#discussion_r424929077", "bodyText": "I have a question about this.\nIf I start a child thread during my tracing, what about the behavior will be?", "author": "chaoyli", "createdAt": "2020-05-14T07:35:42Z", "path": "be/src/util/trace.h", "diffHunk": "@@ -0,0 +1,291 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+#pragma once\n+\n+#include <iosfwd>\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include <rapidjson/writer.h>\n+\n+#include \"gutil/macros.h\"\n+#include \"gutil/strings/stringpiece.h\"\n+#include \"gutil/strings/substitute.h\"\n+#include \"gutil/ref_counted.h\"\n+#include \"gutil/threading/thread_collision_warner.h\"\n+#include \"gutil/walltime.h\"\n+#include \"util/spinlock.h\"\n+#include \"util/trace_metrics.h\"\n+\n+namespace doris {\n+class Trace;\n+}\n+\n+// Adopt a Trace on the current thread for the duration of the current\n+// scope. The old current Trace is restored when the scope is exited.\n+//\n+// 't' should be a Trace* pointer.\n+#define ADOPT_TRACE(t) doris::ScopedAdoptTrace _adopt_trace(t);\n+\n+// Issue a trace message, if tracing is enabled in the current thread.\n+// See Trace::SubstituteAndTrace for arguments.\n+// Example:\n+//  TRACE(\"Acquired timestamp $0\", timestamp);\n+#define TRACE(format, substitutions...) \\\n+  do { \\\n+    doris::Trace* _trace = doris::Trace::CurrentTrace(); \\\n+    if (_trace) { \\\n+      _trace->SubstituteAndTrace(__FILE__, __LINE__, (format),  \\\n+        ##substitutions); \\\n+    } \\\n+  } while (0)\n+\n+// Like the above, but takes the trace pointer as an explicit argument.\n+#define TRACE_TO(trace, format, substitutions...) \\\n+  (trace)->SubstituteAndTrace(__FILE__, __LINE__, (format), ##substitutions)\n+\n+// Increment a counter associated with the current trace.\n+//\n+// Each trace contains a map of counters which can be used to keep\n+// request-specific statistics. It is significantly faster to increment\n+// a trace counter compared to logging a message. Additionally, having\n+// slightly more structured information makes it easier to aggregate\n+// and show information back to operators.\n+//\n+// NOTE: the 'counter_name' MUST be a string which stays alive forever.\n+// Typically, this is a compile-time constant. If something other than\n+// a constant is required, use TraceMetric::InternName() in order to\n+// create a string which will last for the process lifetime. Of course,\n+// these strings will never be cleaned up, so it's important to use this\n+// judiciously.\n+//\n+// If no trace is active, this does nothing and does not evaluate its\n+// parameters.\n+#define TRACE_COUNTER_INCREMENT(counter_name, val) \\\n+  do { \\\n+    doris::Trace* _trace = doris::Trace::CurrentTrace(); \\\n+    if (_trace) { \\\n+      _trace->metrics()->Increment(counter_name, val); \\\n+    } \\\n+  } while (0)\n+\n+// Increment a counter for the amount of wall time spent in the current\n+// scope. For example:\n+//\n+//  void DoFoo() {\n+//    TRACE_COUNTER_SCOPE_LATENCY_US(\"foo_us\");\n+//    ... do expensive Foo thing\n+//  }\n+//\n+//  will result in a trace metric indicating the number of microseconds spent\n+//  in invocations of DoFoo().\n+#define TRACE_COUNTER_SCOPE_LATENCY_US(counter_name) \\\n+  ::doris::ScopedTraceLatencyCounter _scoped_latency(counter_name)\n+\n+// Construct a constant C string counter name which acts as a sort of\n+// coarse-grained histogram for trace metrics.\n+#define BUCKETED_COUNTER_NAME(prefix, duration_us)      \\\n+  [=]() {                                               \\\n+    if (duration_us >= 100 * 1000) {                    \\\n+      return prefix \"_gt_100_ms\";                       \\\n+    } else if (duration_us >= 10 * 1000) {              \\\n+      return prefix \"_10-100_ms\";                       \\\n+    } else if (duration_us >= 1000) {                   \\\n+      return prefix \"_1-10_ms\";                         \\\n+    } else {                                            \\\n+      return prefix \"_lt_1ms\";                          \\\n+    }                                                   \\\n+  }()\n+\n+namespace doris {\n+\n+struct TraceEntry;\n+\n+// A trace for a request or other process. This supports collecting trace entries\n+// from a number of threads, and later dumping the results to a stream.\n+//\n+// Callers should generally not add trace messages directly using the public\n+// methods of this class. Rather, the TRACE(...) macros defined above should\n+// be used such that file/line numbers are automatically included, etc.\n+//\n+// This class is thread-safe.\n+class Trace : public RefCountedThreadSafe<Trace> {\n+ public:\n+  Trace();\n+\n+  // Logs a message into the trace buffer.\n+  //\n+  // See strings::Substitute for details.\n+  //\n+  // N.B.: the file path passed here is not copied, so should be a static\n+  // constant (eg __FILE__).\n+  void SubstituteAndTrace(const char* filepath, int line_number,\n+                          StringPiece format,\n+                          const strings::internal::SubstituteArg& arg0 =\n+                            strings::internal::SubstituteArg::NoArg,\n+                          const strings::internal::SubstituteArg& arg1 =\n+                            strings::internal::SubstituteArg::NoArg,\n+                          const strings::internal::SubstituteArg& arg2 =\n+                            strings::internal::SubstituteArg::NoArg,\n+                          const strings::internal::SubstituteArg& arg3 =\n+                            strings::internal::SubstituteArg::NoArg,\n+                          const strings::internal::SubstituteArg& arg4 =\n+                            strings::internal::SubstituteArg::NoArg,\n+                          const strings::internal::SubstituteArg& arg5 =\n+                            strings::internal::SubstituteArg::NoArg,\n+                          const strings::internal::SubstituteArg& arg6 =\n+                            strings::internal::SubstituteArg::NoArg,\n+                          const strings::internal::SubstituteArg& arg7 =\n+                            strings::internal::SubstituteArg::NoArg,\n+                          const strings::internal::SubstituteArg& arg8 =\n+                            strings::internal::SubstituteArg::NoArg,\n+                          const strings::internal::SubstituteArg& arg9 =\n+                            strings::internal::SubstituteArg::NoArg);\n+\n+  // Dump the trace buffer to the given output stream.\n+  //\n+  enum {\n+    NO_FLAGS = 0,\n+\n+    // If set, calculate and print the difference between successive trace messages.\n+    INCLUDE_TIME_DELTAS = 1 << 0,\n+    // If set, include a 'Metrics' line showing any attached trace metrics.\n+    INCLUDE_METRICS =     1 << 1,\n+\n+    INCLUDE_ALL = INCLUDE_TIME_DELTAS | INCLUDE_METRICS\n+  };\n+  void Dump(std::ostream* out, int flags) const;\n+\n+  // Dump the trace buffer as a string.\n+  std::string DumpToString(int flags = INCLUDE_ALL) const;\n+\n+  std::string MetricsAsJSON() const;\n+\n+  // Attaches the given trace which will get appended at the end when Dumping.\n+  //\n+  // The 'label' does not necessarily have to be unique, and is used to identify\n+  // the child trace when dumped. The contents of the StringPiece are copied\n+  // into this trace's arena.\n+  void AddChildTrace(StringPiece label, Trace* child_trace);\n+\n+  // Return a copy of the current set of related \"child\" traces.\n+  std::vector<std::pair<StringPiece, scoped_refptr<Trace>>> ChildTraces() const;\n+\n+  // Return the current trace attached to this thread, if there is one.\n+  static Trace* CurrentTrace() {\n+    return threadlocal_trace_;\n+  }\n+\n+  // Simple function to dump the current trace to stderr, if one is\n+  // available. This is meant for usage when debugging in gdb via\n+  // 'call doris::Trace::DumpCurrentTrace();'.\n+  static void DumpCurrentTrace();\n+\n+  TraceMetrics* metrics() {\n+    return &metrics_;\n+  }\n+  const TraceMetrics& metrics() const {\n+    return metrics_;\n+  }\n+\n+ private:\n+  friend class ScopedAdoptTrace;\n+  friend class RefCountedThreadSafe<Trace>;\n+  ~Trace();\n+\n+  // The current trace for this thread. Threads should only set this using\n+  // using ScopedAdoptTrace, which handles reference counting the underlying\n+  // object.\n+  static __thread Trace* threadlocal_trace_;", "originalCommit": "840672391218d6dfe12a82c873404cd4aa57c423", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0ODAzNQ==", "url": "https://github.com/apache/incubator-doris/pull/3572#discussion_r425248035", "bodyText": "Suppose there is trace t1 in parent thread, because threadlocal_trace_ is a __thread type variable, so child thread can't access t1, the threadlocal_trace_ of child thread is nullptr, TRACE_XXX macros will do nothing. If want to trace in child thread, we can new another Trace t2 in parent thread, and add it as a child of t1 by t1->AddChildTrace(\"child_trace\", t2.get());, and only ADOPT_TRACE t2 in this child thread.\nOr use an independent trace in child thread.", "author": "acelyc111", "createdAt": "2020-05-14T15:57:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkyOTA3Nw=="}], "type": "inlineReview"}, {"oid": "9fc2554e6c2aee01980d86b142597050446ab211", "url": "https://github.com/apache/incubator-doris/commit/9fc2554e6c2aee01980d86b142597050446ab211", "message": "indentation", "committedDate": "2020-05-14T14:45:22Z", "type": "commit"}]}