{"pr_number": 4825, "pr_title": "[Feature] Running Profile OLAP_SCAN_NODE layering and enhance readability", "pr_createdAt": "2020-10-30T03:00:23Z", "pr_url": "https://github.com/apache/incubator-doris/pull/4825", "timeline": [{"oid": "f37758e5e0a11168ac7d96b5d947455a62aed4cf", "url": "https://github.com/apache/incubator-doris/commit/f37758e5e0a11168ac7d96b5d947455a62aed4cf", "message": "[Feature] Running Profile OLAP_SCAN_NODE node layering and enhance readability", "committedDate": "2020-10-29T18:27:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg3NDYyMw==", "url": "https://github.com/apache/incubator-doris/pull/4825#discussion_r514874623", "bodyText": "Where to show this _scanner_profile, it's not added into _runtime_profile", "author": "chaoyli", "createdAt": "2020-10-30T05:20:39Z", "path": "be/src/exec/scan_node.cpp", "diffHunk": "@@ -23,45 +23,37 @@ namespace doris {\n \n const string ScanNode::_s_bytes_read_counter = \"BytesRead\";\n const string ScanNode::_s_rows_read_counter = \"RowsRead\";\n-const string ScanNode::_s_total_read_timer = \"TotalRawReadTime(*)\";\n-const string ScanNode::_s_total_throughput_counter = \"TotalReadThroughput\";\n const string ScanNode::_s_materialize_tuple_timer = \"MaterializeTupleTime(*)\";\n-const string ScanNode::_s_per_read_thread_throughput_counter =\n-    \"PerReadThreadRawHdfsThroughput\";\n const string ScanNode::_s_num_disks_accessed_counter = \"NumDiskAccess\";\n const string ScanNode::_s_scanner_thread_counters_prefix = \"ScannerThreads\";\n const string ScanNode::_s_scanner_thread_total_wallclock_time =\n     \"ScannerThreadsTotalWallClockTime\";\n \n-const string ScanNode::_s_num_scanner_threads_started =\"NumScannerThreadsStarted\";\n-\n Status ScanNode::prepare(RuntimeState* state) {\n+    init_scan_profile();\n     RETURN_IF_ERROR(ExecNode::prepare(state));\n \n-    _scanner_thread_counters =\n-        ADD_THREAD_COUNTERS(runtime_profile(), _s_scanner_thread_counters_prefix);\n     _bytes_read_counter =\n-        ADD_COUNTER(runtime_profile(), _s_bytes_read_counter, TUnit::BYTES);\n+        ADD_COUNTER(_segment_profile, _s_bytes_read_counter, TUnit::BYTES);\n     //TODO: The _rows_read_counter == RowsReturned counter in exec node, there is no need to keep both of them\n     _rows_read_counter =\n-        ADD_COUNTER(runtime_profile(), _s_rows_read_counter, TUnit::UNIT);\n-    _read_timer = ADD_TIMER(runtime_profile(), _s_total_read_timer);\n+        ADD_COUNTER(_scanner_profile, _s_rows_read_counter, TUnit::UNIT);\n #ifndef BE_TEST\n-    _total_throughput_counter = runtime_profile()->add_rate_counter(\n-                                    _s_total_throughput_counter, _bytes_read_counter);\n #endif\n     _materialize_tuple_timer = ADD_CHILD_TIMER(runtime_profile(), _s_materialize_tuple_timer,\n                                _s_scanner_thread_total_wallclock_time);\n-    _per_read_thread_throughput_counter = runtime_profile()->add_derived_counter(\n-            _s_per_read_thread_throughput_counter, TUnit::BYTES_PER_SECOND,\n-            boost::bind<int64_t>(&RuntimeProfile::units_per_second,\n-                                 _bytes_read_counter,\n-                                 _read_timer),\n-            \"\");\n     _num_disks_accessed_counter =\n         ADD_COUNTER(runtime_profile(), _s_num_disks_accessed_counter, TUnit::UNIT);\n \n     return Status::OK();\n }\n \n+void ScanNode::init_scan_profile() {\n+    _scanner_profile.reset(new RuntimeProfile(\"OlapScanner\"));", "originalCommit": "f37758e5e0a11168ac7d96b5d947455a62aed4cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NDk2Ng==", "url": "https://github.com/apache/incubator-doris/pull/4825#discussion_r515754966", "bodyText": "use std::unique_ptr replace boost::scoped_ptr", "author": "HappenLee", "createdAt": "2020-11-02T06:03:01Z", "path": "be/src/exec/scan_node.h", "diffHunk": "@@ -96,49 +96,29 @@ class ScanNode : public ExecNode {\n     RuntimeProfile::Counter* rows_read_counter() const {\n         return _rows_read_counter;\n     }\n-    RuntimeProfile::Counter* read_timer() const {\n-        return _read_timer;\n-    }\n-    RuntimeProfile::Counter* total_throughput_counter() const {\n-        return _total_throughput_counter;\n-    }\n-    RuntimeProfile::Counter* per_read_thread_throughput_counter() const {\n-        return _per_read_thread_throughput_counter;\n-    }\n     RuntimeProfile::Counter* materialize_tuple_timer() const {\n         return _materialize_tuple_timer;\n     }\n-    RuntimeProfile::ThreadCounters* scanner_thread_counters() const {\n-        return _scanner_thread_counters;\n-    }\n+    // OLAP_SCAN_NODE profile layering: OLAP_SCAN_NODE, OlapScanner, and SegmentIterator according to the calling relationship\n+    void init_scan_profile();\n \n     // names of ScanNode common counters\n     static const std::string _s_bytes_read_counter;\n     static const std::string _s_rows_read_counter;\n-    static const std::string _s_total_read_timer;\n-    static const std::string _s_total_throughput_counter;\n-    static const std::string _s_per_read_thread_throughput_counter;\n     static const std::string _s_num_disks_accessed_counter;\n     static const std::string _s_materialize_tuple_timer;\n     static const std::string _s_scanner_thread_counters_prefix;\n     static const std::string _s_scanner_thread_total_wallclock_time;\n-    static const std::string _s_average_io_mgr_queue_capacity;\n-    static const std::string _s_num_scanner_threads_started;\n \n protected:\n     RuntimeProfile::Counter* _bytes_read_counter; // # bytes read from the scanner\n     // # rows/tuples read from the scanner (including those discarded by eval_conjucts())\n     RuntimeProfile::Counter* _rows_read_counter;\n-    RuntimeProfile::Counter* _read_timer; // total read time\n-    // Wall based aggregate read throughput [bytes/sec]\n-    RuntimeProfile::Counter* _total_throughput_counter;\n-    // Per thread read throughput [bytes/sec]\n-    RuntimeProfile::Counter* _per_read_thread_throughput_counter;\n     RuntimeProfile::Counter* _num_disks_accessed_counter;\n     RuntimeProfile::Counter* _materialize_tuple_timer;  // time writing tuple slots\n-    // Aggregated scanner thread counters\n-    RuntimeProfile::ThreadCounters* _scanner_thread_counters;\n-    RuntimeProfile::Counter* _num_scanner_threads_started_counter;\n+\n+    boost::scoped_ptr<RuntimeProfile> _scanner_profile;\n+    boost::scoped_ptr<RuntimeProfile> _segment_profile;", "originalCommit": "f37758e5e0a11168ac7d96b5d947455a62aed4cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NjAyNQ==", "url": "https://github.com/apache/incubator-doris/pull/4825#discussion_r515756025", "bodyText": "should  _segment_profile and scanner_profile be scan_node?\nLike MysqlScanNode is a child of scan_node\uff0c _segment_profile and scanner_profile  is useless in MysqlScanNode", "author": "HappenLee", "createdAt": "2020-11-02T06:07:12Z", "path": "be/src/exec/scan_node.cpp", "diffHunk": "@@ -23,45 +23,37 @@ namespace doris {\n \n const string ScanNode::_s_bytes_read_counter = \"BytesRead\";\n const string ScanNode::_s_rows_read_counter = \"RowsRead\";\n-const string ScanNode::_s_total_read_timer = \"TotalRawReadTime(*)\";\n-const string ScanNode::_s_total_throughput_counter = \"TotalReadThroughput\";\n const string ScanNode::_s_materialize_tuple_timer = \"MaterializeTupleTime(*)\";\n-const string ScanNode::_s_per_read_thread_throughput_counter =\n-    \"PerReadThreadRawHdfsThroughput\";\n const string ScanNode::_s_num_disks_accessed_counter = \"NumDiskAccess\";\n const string ScanNode::_s_scanner_thread_counters_prefix = \"ScannerThreads\";\n const string ScanNode::_s_scanner_thread_total_wallclock_time =\n     \"ScannerThreadsTotalWallClockTime\";\n \n-const string ScanNode::_s_num_scanner_threads_started =\"NumScannerThreadsStarted\";\n-\n Status ScanNode::prepare(RuntimeState* state) {\n+    init_scan_profile();\n     RETURN_IF_ERROR(ExecNode::prepare(state));\n \n-    _scanner_thread_counters =\n-        ADD_THREAD_COUNTERS(runtime_profile(), _s_scanner_thread_counters_prefix);\n     _bytes_read_counter =\n-        ADD_COUNTER(runtime_profile(), _s_bytes_read_counter, TUnit::BYTES);\n+        ADD_COUNTER(_segment_profile, _s_bytes_read_counter, TUnit::BYTES);\n     //TODO: The _rows_read_counter == RowsReturned counter in exec node, there is no need to keep both of them\n     _rows_read_counter =\n-        ADD_COUNTER(runtime_profile(), _s_rows_read_counter, TUnit::UNIT);\n-    _read_timer = ADD_TIMER(runtime_profile(), _s_total_read_timer);\n+        ADD_COUNTER(_scanner_profile, _s_rows_read_counter, TUnit::UNIT);\n #ifndef BE_TEST\n-    _total_throughput_counter = runtime_profile()->add_rate_counter(\n-                                    _s_total_throughput_counter, _bytes_read_counter);\n #endif\n     _materialize_tuple_timer = ADD_CHILD_TIMER(runtime_profile(), _s_materialize_tuple_timer,\n                                _s_scanner_thread_total_wallclock_time);\n-    _per_read_thread_throughput_counter = runtime_profile()->add_derived_counter(\n-            _s_per_read_thread_throughput_counter, TUnit::BYTES_PER_SECOND,\n-            boost::bind<int64_t>(&RuntimeProfile::units_per_second,\n-                                 _bytes_read_counter,\n-                                 _read_timer),\n-            \"\");\n     _num_disks_accessed_counter =\n         ADD_COUNTER(runtime_profile(), _s_num_disks_accessed_counter, TUnit::UNIT);\n \n     return Status::OK();\n }\n \n+void ScanNode::init_scan_profile() {\n+    _scanner_profile.reset(new RuntimeProfile(\"OlapScanner\"));\n+    runtime_profile()->add_child(_scanner_profile.get(), true, NULL);\n+\n+    _segment_profile.reset(new RuntimeProfile(\"SegmentIterator\"));", "originalCommit": "f37758e5e0a11168ac7d96b5d947455a62aed4cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c123704be9cdf9e41cac64e109010155aebc85ab", "url": "https://github.com/apache/incubator-doris/commit/c123704be9cdf9e41cac64e109010155aebc85ab", "message": "_segment_profile and scanner_profile move to scan_node", "committedDate": "2020-11-02T10:33:52Z", "type": "commit"}, {"oid": "dccf155843ab45b0510e83e99265bff8094eff0f", "url": "https://github.com/apache/incubator-doris/commit/dccf155843ab45b0510e83e99265bff8094eff0f", "message": "std::unique_ptr replace boost::scoped_ptr", "committedDate": "2020-11-02T11:01:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwNzYzOA==", "url": "https://github.com/apache/incubator-doris/pull/4825#discussion_r518707638", "bodyText": "NumScanner\u5e94\u8be5\u8868\u793a\u7684\u662f\u63d0\u4ea4\u5230\u7ebf\u7a0b\u6c60Task\u6570\u76ee\uff0c\u5e76\u4e0d\u80fd\u76f4\u63a5\u63a8\u5bfc\u51fa\u4ed6\u7684\u7ebf\u7a0b\u6570", "author": "HappenLee", "createdAt": "2020-11-06T12:01:14Z", "path": "docs/zh-CN/administrator-guide/running-profile.md", "diffHunk": "@@ -147,103 +147,74 @@ BE\u7aef\u6536\u96c6\u7684\u7edf\u8ba1\u4fe1\u606f\u8f83\u591a\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u5404\u4e2a\u53c2\u6570\u7684\u5bf9\u5e94\u542b\u4e49\uff1a\n \n \u67e5\u8be2\u4e2d\u7684\u90e8\u5206\u6216\u5168\u90e8\u8c13\u8bcd\u6761\u4ef6\u4f1a\u63a8\u9001\u7ed9 `OLAP_SCAN_NODE`\u3002\u8fd9\u4e9b\u8c13\u8bcd\u6761\u4ef6\u4e2d\u4e00\u90e8\u5206\u4f1a\u7ee7\u7eed\u4e0b\u63a8\u7ed9\u5b58\u50a8\u5f15\u64ce\uff0c\u4ee5\u4fbf\u5229\u7528\u5b58\u50a8\u5f15\u64ce\u7684\u7d22\u5f15\u8fdb\u884c\u6570\u636e\u8fc7\u6ee4\u3002\u53e6\u4e00\u90e8\u5206\u4f1a\u4fdd\u7559\u5728 `OLAP_SCAN_NODE` \u4e2d\uff0c\u7528\u4e8e\u8fc7\u6ee4\u4ece\u5b58\u50a8\u5f15\u64ce\u4e2d\u8fd4\u56de\u7684\u6570\u636e\u3002\n \n+`OLAP_SCAN_NODE` \u8282\u70b9\u7684 Profile \u901a\u5e38\u7528\u4e8e\u5206\u6790\u6570\u636e\u626b\u63cf\u7684\u6548\u7387\uff0c\u4f9d\u636e\u8c03\u7528\u5173\u7cfb\u5206\u4e3a `OLAP_SCAN_NODE`\u3001`OlapScanner`\u3001`SegmentIterator` \u4e09\u5c42\u3002\n+\n \u4e00\u4e2a\u5178\u578b\u7684 `OLAP_SCAN_NODE` \u8282\u70b9\u7684 Profile \u5982\u4e0b\u3002\u90e8\u5206\u6307\u6807\u4f1a\u56e0\u5b58\u50a8\u683c\u5f0f\u7684\u4e0d\u540c\uff08V1 \u6216 V2\uff09\u800c\u6709\u4e0d\u540c\u542b\u4e49\u3002\n \n ```\n-OLAP_SCAN_NODE (id=0):(Active: 4.050ms, non-child: 35.68%)\n-   - BitmapIndexFilterTimer: 0.000ns    # \u5229\u7528 bitmap \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\u7684\u8017\u65f6\u3002\n-   - BlockConvertTime: 7.433ms  # \u5c06\u5411\u91cf\u5316Block\u8f6c\u6362\u4e3a\u884c\u7ed3\u6784\u7684 RowBlock \u7684\u8017\u65f6\u3002\u5411\u91cf\u5316 Block \u5728 V1 \u4e2d\u4e3a VectorizedRowBatch\uff0cV2\u4e2d\u4e3a RowBlockV2\u3002\n-   - BlockFetchTime: 36.934ms   # Rowset Reader \u83b7\u53d6 Block \u7684\u65f6\u95f4\u3002\n-   - BlockLoadTime: 23.368ms    # SegmentReader(V1) \u6216 SegmentIterator(V2) \u83b7\u53d6 block \u7684\u65f6\u95f4\u3002\n-   - BlockSeekCount: 0  # \u8bfb\u53d6 Segment \u65f6\u8fdb\u884c block seek \u7684\u6b21\u6570\u3002\n-   - BlockSeekTime: 3.062ms # \u8bfb\u53d6 Segment \u65f6\u8fdb\u884c block seek \u7684\u8017\u65f6\u3002\n-   - BlocksLoad: 221    # \u8bfb\u53d6 Block \u7684\u6570\u91cf\n-   - BytesRead: 6.59 MB # \u4ece\u6570\u636e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5230\u7684\u6570\u636e\u91cf\u3002\u5047\u8bbe\u8bfb\u53d6\u5230\u4e86\u662f10\u4e2a32\u4f4d\u6574\u578b\uff0c\u5219\u6570\u636e\u91cf\u4e3a 10 * 4B = 40 Bytes\u3002\u8fd9\u4e2a\u6570\u636e\u4ec5\u8868\u793a\u6570\u636e\u5728\u5185\u5b58\u4e2d\u5168\u5c55\u5f00\u7684\u5927\u5c0f\uff0c\u5e76\u4e0d\u4ee3\u8868\u5b9e\u9645\u7684 IO \u5927\u5c0f\u3002\n-   - CachedPagesNum: 0  # \u4ec5 V2 \u4e2d\uff0c\u5f53\u5f00\u542f PageCache \u540e\uff0c\u547d\u4e2d Cache \u7684 Page \u6570\u91cf\u3002\n-   - CompressedBytesRead: 1.36 MB   # V1 \u4e2d\uff0c\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684\u89e3\u538b\u524d\u7684\u6570\u636e\u5927\u5c0f\u3002V2 \u4e2d\uff0c\u8bfb\u53d6\u5230\u7684\u6ca1\u6709\u547d\u4e2d PageCache \u7684 Page \u7684\u538b\u7f29\u524d\u7684\u5927\u5c0f\u3002\n-   - DecompressorTimer: 4.194ms # \u6570\u636e\u89e3\u538b\u8017\u65f6\u3002\n-   - IOTimer: 1.404ms   # \u5b9e\u9645\u4ece\u64cd\u4f5c\u7cfb\u7edf\u8bfb\u53d6\u6570\u636e\u7684 IO \u65f6\u95f4\u3002\n-   - IndexLoadTime: 1.521ms # \u4ec5 V1 \u4e2d\uff0c\u8bfb\u53d6 Index Stream \u7684\u8017\u65f6\u3002\n-   - NumDiskAccess: 6   # \u8be5 ScanNode \u8282\u70b9\u6d89\u53ca\u5230\u7684\u78c1\u76d8\u6570\u91cf\u3002\n-   - NumScanners: 25    # \u8be5 ScanNode \u751f\u6210\u7684 Scanner \u6570\u91cf\u3002\n-   - NumSegmentFiltered: 4   # \u5728\u751f\u6210 Segment Iterator \u65f6\uff0c\u901a\u8fc7\u5217\u7edf\u8ba1\u4fe1\u606f\u548c\u67e5\u8be2\u6761\u4ef6\uff0c\u5b8c\u5168\u8fc7\u6ee4\u6389\u7684 Segment \u6570\u91cf\u3002\n-   - NumSegmentTotal: 20    # \u67e5\u8be2\u6d89\u53ca\u7684\u6240\u6709 Segment \u6570\u91cf\u3002\n-   - PeakMemoryUsage: 0     # \u65e0\u610f\u4e49\n-   - PerReadThreadRawHdfsThroughput: 0.00 /sec  # \u65e0\u610f\u4e49\n-   - RawRowsRead: 141.71K   # \u5b58\u50a8\u5f15\u64ce\u4e2d\u8bfb\u53d6\u7684\u539f\u59cb\u884c\u6570\u3002\u8be6\u60c5\u89c1\u4e0b\u6587\u3002\n-   - ReaderInitTime: 16.515ms   # OlapScanner \u521d\u59cb\u5316 Reader \u7684\u65f6\u95f4\u3002V1 \u4e2d\u5305\u62ec\u7ec4\u5efa MergeHeap \u7684\u65f6\u95f4\u3002V2 \u4e2d\u5305\u62ec\u751f\u6210\u5404\u7ea7 Iterator \u5e76\u8bfb\u53d6\u7b2c\u4e00\u7ec4Block\u7684\u65f6\u95f4\u3002\n-   - RowsBitmapFiltered: 0  # \u5229\u7528 bitmap \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n-   - RowsBloomFilterFiltered: 0 # \u4ec5 V2 \u4e2d\uff0c\u901a\u8fc7 BloomFilter \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n-   - RowsDelFiltered: 0     # V1 \u4e2d\u8868\u793a\u6839\u636e delete \u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002V2 \u4e2d\u8fd8\u5305\u62ec\u901a\u8fc7 BloomFilter \u548c\u90e8\u5206\u8c13\u8bcd\u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n-   - RowsPushedCondFiltered: 0  # \u6839\u636e\u4f20\u9012\u4e0b\u63a8\u7684\u8c13\u8bcd\u8fc7\u6ee4\u6389\u7684\u6761\u4ef6\uff0c\u6bd4\u5982 Join \u8ba1\u7b97\u4e2d\u4ece BuildTable \u4f20\u9012\u7ed9 ProbeTable \u7684\u6761\u4ef6\u3002\u8be5\u6570\u503c\u4e0d\u51c6\u786e\uff0c\u56e0\u4e3a\u5982\u679c\u8fc7\u6ee4\u6548\u679c\u5dee\uff0c\u5c31\u4e0d\u518d\u8fc7\u6ee4\u4e86\u3002\n-   - RowsRead: 132.78K  # \u4ece\u5b58\u50a8\u5f15\u64ce\u8fd4\u56de\u5230 Scanner \u7684\u884c\u6570\uff0c\u4e0d\u5305\u62ec\u7ecf Scanner \u8fc7\u6ee4\u7684\u884c\u6570\u3002\n-   - RowsReturned: 132.78K  # \u4ece ScanNode \u8fd4\u56de\u7ed9\u4e0a\u5c42\u8282\u70b9\u7684\u884c\u6570\u3002\n-   - RowsReturnedRate: 32.78 M/sec  # RowsReturned/ActiveTime\n-   - RowsStatsFiltered: 0   # V2 \u4e2d\uff0c\u5305\u542b\u8c13\u8bcd\u6761\u4ef6\u6839\u636e Zonemap \u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002V1 \u4e2d\u8fd8\u5305\u542b\u901a\u8fc7 BloomFilter \u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n-   - RowsVectorPredFiltered: 0  # \u901a\u8fc7\u5411\u91cf\u5316\u6761\u4ef6\u8fc7\u6ee4\u64cd\u4f5c\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n-   - ScanTime: 49.239ms\uff1aScanner \u8c03\u7528 get_next() \u65b9\u6cd5\u7684\u8017\u65f6\u7edf\u8ba1\u3002\n-   - ScannerThreadsInvoluntaryContextSwitches: 0    # \u65e0\u610f\u4e49\n-   - ScannerThreadsTotalWallClockTime: 0.000ns  # \u65e0\u610f\u4e49\n-     - MaterializeTupleTime(*): 0.000ns # \u65e0\u610f\u4e49\n-     - ScannerThreadsSysTime: 0.000ns   # \u65e0\u610f\u4e49\n-     - ScannerThreadsUserTime: 0.000ns  # \u65e0\u610f\u4e49\n-   - ScannerThreadsVoluntaryContextSwitches: 0  # \u65e0\u610f\u4e49\n-   - ShowHintsTime: 0.000ns # V2 \u4e2d\u65e0\u610f\u4e49\u3002V1 \u4e2d\u8bfb\u53d6\u90e8\u5206\u6570\u636e\u6765\u8fdb\u884c ScanRange \u7684\u5207\u5206\u3002\n-   - TabletCount : 25   # \u8be5 ScanNode \u6d89\u53ca\u7684 Tablet \u6570\u91cf\u3002\n-   - TotalPagesNum: 0   # \u4ec5 V2 \u4e2d\uff0c\u8bfb\u53d6\u7684\u603b Page \u6570\u91cf\u3002\n-   - TotalRawReadTime(*): 0.000ns   # \u65e0\u610f\u4e49\n-   - TotalReadThroughput: 0.00 /sec # \u65e0\u610f\u4e49\n-   - UncompressedBytesRead: 4.28 MB # V1 \u4e2d\u4e3a\u8bfb\u53d6\u7684\u6570\u636e\u6587\u4ef6\u89e3\u538b\u540e\u7684\u5927\u5c0f\uff08\u5982\u679c\u6587\u4ef6\u65e0\u9700\u89e3\u538b\uff0c\u5219\u76f4\u63a5\u7edf\u8ba1\u6587\u4ef6\u5927\u5c0f\uff09\u3002V2 \u4e2d\uff0c\u4ec5\u7edf\u8ba1\u672a\u547d\u4e2d PageCache \u7684 Page \u89e3\u538b\u540e\u7684\u5927\u5c0f\uff08\u5982\u679cPage\u65e0\u9700\u89e3\u538b\uff0c\u76f4\u63a5\u7edf\u8ba1Page\u5927\u5c0f\uff09\n-   - VectorPredEvalTime: 0.000ns    # \u5411\u91cf\u5316\u6761\u4ef6\u8fc7\u6ee4\u64cd\u4f5c\u7684\u8017\u65f6\u3002\n+OLAP_SCAN_NODE (id=0):(Active: 1.2ms, % non-child: 0.00%)\n+  - BytesRead: 265.00 B                 # \u4ece\u6570\u636e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5230\u7684\u6570\u636e\u91cf\u3002\u5047\u8bbe\u8bfb\u53d6\u5230\u4e86\u662f10\u4e2a32\u4f4d\u6574\u578b\uff0c\u5219\u6570\u636e\u91cf\u4e3a 10 * 4B = 40 Bytes\u3002\u8fd9\u4e2a\u6570\u636e\u4ec5\u8868\u793a\u6570\u636e\u5728\u5185\u5b58\u4e2d\u5168\u5c55\u5f00\u7684\u5927\u5c0f\uff0c\u5e76\u4e0d\u4ee3\u8868\u5b9e\u9645\u7684 IO \u5927\u5c0f\u3002 \n+  - NumDiskAccess: 1                    # \u8be5 ScanNode \u8282\u70b9\u6d89\u53ca\u5230\u7684\u78c1\u76d8\u6570\u91cf\u3002\n+  - NumScanners: 20                     # \u8be5 ScanNode \u751f\u6210\u7684 Scanner \u6570\u91cf\u3002\n+  - PeakMemoryUsage: 0.00               # \u67e5\u8be2\u65f6\u5185\u5b58\u4f7f\u7528\u7684\u5cf0\u503c\uff0c\u6682\u672a\u4f7f\u7528\n+  - RowsRead: 7                         # \u4ece\u5b58\u50a8\u5f15\u64ce\u8fd4\u56de\u5230 Scanner \u7684\u884c\u6570\uff0c\u4e0d\u5305\u62ec\u7ecf Scanner \u8fc7\u6ee4\u7684\u884c\u6570\u3002\n+  - RowsReturned: 7                     # \u4ece ScanNode \u8fd4\u56de\u7ed9\u4e0a\u5c42\u8282\u70b9\u7684\u884c\u6570\u3002\n+  - RowsReturnedRate: 6.979K /sec       # RowsReturned/ActiveTime\n+  - TabletCount : 20                    # \u8be5 ScanNode \u6d89\u53ca\u7684 Tablet \u6570\u91cf\u3002\n+  OlapScanner:\n+    - BlockConvertTime: 8.941us         # \u5c06\u5411\u91cf\u5316Block\u8f6c\u6362\u4e3a\u884c\u7ed3\u6784\u7684 RowBlock \u7684\u8017\u65f6\u3002\u5411\u91cf\u5316 Block \u5728 V1 \u4e2d\u4e3a VectorizedRowBatch\uff0cV2\u4e2d\u4e3a RowBlockV2\u3002\n+    - BlockFetchTime: 468.974us         # Rowset Reader \u83b7\u53d6 Block \u7684\u65f6\u95f4\u3002\n+    - ReaderInitTime: 5.475ms           # OlapScanner \u521d\u59cb\u5316 Reader \u7684\u65f6\u95f4\u3002V1 \u4e2d\u5305\u62ec\u7ec4\u5efa MergeHeap \u7684\u65f6\u95f4\u3002V2 \u4e2d\u5305\u62ec\u751f\u6210\u5404\u7ea7 Iterator \u5e76\u8bfb\u53d6\u7b2c\u4e00\u7ec4Block\u7684\u65f6\u95f4\u3002\n+    - RowsDelFiltered: 0                # \u5305\u62ec\u6839\u636e Tablet \u4e2d\u5b58\u5728\u7684 Delete \u4fe1\u606f\u8fc7\u6ee4\u6389\u7684\u884c\u6570\uff0c\u4ee5\u53ca unique key \u6a21\u578b\u4e0b\u5bf9\u88ab\u6807\u8bb0\u7684\u5220\u9664\u884c\u8fc7\u6ee4\u7684\u884c\u6570\u3002\n+    - RowsPushedCondFiltered: 0         # \u6839\u636e\u4f20\u9012\u4e0b\u63a8\u7684\u8c13\u8bcd\u8fc7\u6ee4\u6389\u7684\u6761\u4ef6\uff0c\u6bd4\u5982 Join \u8ba1\u7b97\u4e2d\u4ece BuildTable \u4f20\u9012\u7ed9 ProbeTable \u7684\u6761\u4ef6\u3002\u8be5\u6570\u503c\u4e0d\u51c6\u786e\uff0c\u56e0\u4e3a\u5982\u679c\u8fc7\u6ee4\u6548\u679c\u5dee\uff0c\u5c31\u4e0d\u518d\u8fc7\u6ee4\u4e86\u3002\n+    - ScanTime: 39.24us                 # \u4ece ScanNode \u8fd4\u56de\u7ed9\u4e0a\u5c42\u8282\u70b9\u7684\u884c\u6570\u3002\n+    - ShowHintsTime_V1: 0ns             # V2 \u4e2d\u65e0\u610f\u4e49\u3002V1 \u4e2d\u8bfb\u53d6\u90e8\u5206\u6570\u636e\u6765\u8fdb\u884c ScanRange \u7684\u5207\u5206\u3002\n+    SegmentIterator:\n+      - BitmapIndexFilterTimer: 779ns   # \u5229\u7528 bitmap \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\u7684\u8017\u65f6\u3002\n+      - BlockLoadTime: 415.925us        # SegmentReader(V1) \u6216 SegmentIterator(V2) \u83b7\u53d6 block \u7684\u65f6\u95f4\u3002\n+      - BlockSeekCount: 12              # \u8bfb\u53d6 Segment \u65f6\u8fdb\u884c block seek \u7684\u6b21\u6570\u3002\n+      - BlockSeekTime: 222.556us        # \u8bfb\u53d6 Segment \u65f6\u8fdb\u884c block seek \u7684\u8017\u65f6\u3002\n+      - BlocksLoad: 6                   # \u8bfb\u53d6 Block \u7684\u6570\u91cf\n+      - CachedPagesNum: 30              # \u4ec5 V2 \u4e2d\uff0c\u5f53\u5f00\u542f PageCache \u540e\uff0c\u547d\u4e2d Cache \u7684 Page \u6570\u91cf\u3002\n+      - CompressedBytesRead: 0.00       # V1 \u4e2d\uff0c\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684\u89e3\u538b\u524d\u7684\u6570\u636e\u5927\u5c0f\u3002V2 \u4e2d\uff0c\u8bfb\u53d6\u5230\u7684\u6ca1\u6709\u547d\u4e2d PageCache \u7684 Page \u7684\u538b\u7f29\u524d\u7684\u5927\u5c0f\u3002\n+      - DecompressorTimer: 0ns          # \u6570\u636e\u89e3\u538b\u8017\u65f6\u3002\n+      - IOTimer: 0ns                    # \u5b9e\u9645\u4ece\u64cd\u4f5c\u7cfb\u7edf\u8bfb\u53d6\u6570\u636e\u7684 IO \u65f6\u95f4\u3002\n+      - IndexLoadTime_V1: 0ns           # \u4ec5 V1 \u4e2d\uff0c\u8bfb\u53d6 Index Stream \u7684\u8017\u65f6\u3002\n+      - NumSegmentFiltered: 0           # \u5728\u751f\u6210 Segment Iterator \u65f6\uff0c\u901a\u8fc7\u5217\u7edf\u8ba1\u4fe1\u606f\u548c\u67e5\u8be2\u6761\u4ef6\uff0c\u5b8c\u5168\u8fc7\u6ee4\u6389\u7684 Segment \u6570\u91cf\u3002\n+      - NumSegmentTotal: 6              # \u67e5\u8be2\u6d89\u53ca\u7684\u6240\u6709 Segment \u6570\u91cf\u3002\n+      - RawRowsRead: 7                  # \u5b58\u50a8\u5f15\u64ce\u4e2d\u8bfb\u53d6\u7684\u539f\u59cb\u884c\u6570\u3002\u8be6\u60c5\u89c1\u4e0b\u6587\u3002\n+      - RowsBitmapIndexFiltered: 0      # \u4ec5 V2 \u4e2d\uff0c\u901a\u8fc7 Bitmap \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+      - RowsBloomFilterFiltered: 0      # \u4ec5 V2 \u4e2d\uff0c\u901a\u8fc7 BloomFilter \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+      - RowsKeyRangeFiltered: 0         # \u4ec5 V2 \u4e2d\uff0c\u901a\u8fc7 SortkeyIndex \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+      - RowsStatsFiltered: 0            # V2 \u4e2d\uff0c\u901a\u8fc7 ZoneMap \u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\uff0c\u5305\u542b\u5220\u9664\u6761\u4ef6\u3002V1 \u4e2d\u8fd8\u5305\u542b\u901a\u8fc7 BloomFilter \u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+      - RowsConditionsFiltered: 0       # \u4ec5 V2 \u4e2d\uff0c\u901a\u8fc7\u5404\u79cd\u5217\u7d22\u5f15\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+      - RowsVectorPredFiltered: 0       # \u901a\u8fc7\u5411\u91cf\u5316\u6761\u4ef6\u8fc7\u6ee4\u64cd\u4f5c\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u3002\n+      - TotalPagesNum: 30               # \u4ec5 V2 \u4e2d\uff0c\u8bfb\u53d6\u7684\u603b Page \u6570\u91cf\u3002\n+      - UncompressedBytesRead: 0.00     # V1 \u4e2d\u4e3a\u8bfb\u53d6\u7684\u6570\u636e\u6587\u4ef6\u89e3\u538b\u540e\u7684\u5927\u5c0f\uff08\u5982\u679c\u6587\u4ef6\u65e0\u9700\u89e3\u538b\uff0c\u5219\u76f4\u63a5\u7edf\u8ba1\u6587\u4ef6\u5927\u5c0f\uff09\u3002V2 \u4e2d\uff0c\u4ec5\u7edf\u8ba1\u672a\u547d\u4e2d PageCache \u7684 Page \u89e3\u538b\u540e\u7684\u5927\u5c0f\uff08\u5982\u679cPage\u65e0\u9700\u89e3\u538b\uff0c\u76f4\u63a5\u7edf\u8ba1Page\u5927\u5c0f\uff09\n+      - VectorPredEvalTime: 0ns         # \u5411\u91cf\u5316\u6761\u4ef6\u8fc7\u6ee4\u64cd\u4f5c\u7684\u8017\u65f6\u3002\n ```\n \n-* Profile \u4e2d\u5173\u4e8e\u884c\u6570\u7684\u4e00\u4e9b\u8bf4\u660e\n-\n-    \u5728 Profile \u4e2d\u548c\u884c\u6570\u76f8\u5173\u7684\u6307\u6807\u6709\uff1a\n-\n-    * NumSegmentFiltered\n-    * NumSegmentTotal\n-\n-    \u901a\u8fc7\u8fd9\u4e24\u4e2a\u6307\u6807\u53ef\u4ee5\u5f97\u5230\u5b9e\u9645\u8bfb\u53d6\u7684 Segment \u6570\u91cf\u3002\n-    \n-    * RowsKeyRangeFiltered\n-    * RowsBitmapIndexFiltered\n-    * RowsBloomFilterFiltered\n-    * RowsStatsFiltered\n-    * RowsDelFiltered\n-    * RawRowsRead\n-    * RowsRead\n-    * RowsReturned\n-\n-    \u4e00\u4e2a\u67e5\u8be2\u4e2d\u7684\u8c13\u8bcd\u6761\u4ef6\u4f1a\u5206\u522b\u5728\u5b58\u50a8\u5f15\u64ce\u548c Scanner \u4e2d\u8fdb\u884c\u8fc7\u6ee4\u3002\u4ee5\u4e0a\u6307\u6807\u4e2d\uff0c`Rows***Filtered` \u8fd9\u7ec4\u6307\u6807\u63cf\u8ff0\u4e86\u5728\u5b58\u50a8\u5f15\u64ce\u4e2d\u88ab\u8fc7\u6ee4\u7684\u884c\u6570\u3002\u540e\u4e09\u4e2a\u6307\u6807\u63cf\u8ff0\u4e86\u5728 Scanner \u4e2d\u88ab\u5904\u7406\u7684\u884c\u6570\u3002\n-\n-    \u4ee5\u4e0b\u4ec5\u9488\u5bf9 Segment V2 \u683c\u5f0f\u6570\u636e\u8bfb\u53d6\u7684\u6d41\u7a0b\u8fdb\u884c\u8bf4\u660e\u3002Segment V1 \u683c\u5f0f\u4e2d\uff0c\u8fd9\u4e9b\u6307\u6807\u7684\u542b\u4e49\u7565\u6709\u4e0d\u540c\u3002\n+\u901a\u8fc7 Profile \u4e2d\u6570\u636e\u884c\u6570\u76f8\u5173\u6307\u6807\u53ef\u4ee5\u63a8\u65ad\u8c13\u8bcd\u6761\u4ef6\u4e0b\u63a8\u548c\u7d22\u5f15\u4f7f\u7528\u60c5\u51b5\u3002\u4ee5\u4e0b\u4ec5\u9488\u5bf9 Segment V2 \u683c\u5f0f\u6570\u636e\u8bfb\u53d6\u6d41\u7a0b\u4e2d\u7684 Profile \u8fdb\u884c\u8bf4\u660e\u3002Segment V1 \u683c\u5f0f\u4e2d\uff0c\u8fd9\u4e9b\u6307\u6807\u7684\u542b\u4e49\u7565\u6709\u4e0d\u540c\u3002\n \n-    \u5f53\u8bfb\u53d6\u4e00\u4e2a V2 \u683c\u5f0f\u7684 Segment \u65f6\uff0c\u9996\u5148\u4f1a\u6839\u636e Key range\uff08\u524d\u7f00key\u7ec4\u6210\u7684\u67e5\u8be2\u8303\u56f4\uff09\u8fdb\u884c\u4e00\u6b21\u8fc7\u6ee4\uff0c\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u8bb0\u5f55\u5728 `RowsKeyRangeFiltered` \u4e2d\u3002\u4e4b\u540e\uff0c\u518d\u5229\u7528 Bitmap \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\uff0c\u8fc7\u6ee4\u6389\u7684\u884c\u6570\u8bb0\u5f55\u5728 `RowsBitmapIndexFiltered` \u4e2d\u3002\u4e4b\u540e\uff0c\u518d\u5229\u7528 BloomFilter \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\uff0c\u8bb0\u5f55\u5728 `RowsBloomFilterFiltered` \u4e2d\u3002`RowsBloomFilterFiltered` \u7684\u503c\u662f Segment \u7684\u603b\u884c\u6570\uff08\u800c\u4e0d\u662fBitmap\u7d22\u5f15\u8fc7\u6ee4\u540e\u7684\u884c\u6570\uff09\u548c\u7ecf\u8fc7 BloomFilter \u8fc7\u6ee4\u540e\u5269\u4f59\u884c\u6570\u7684\u5dee\u503c\uff0c\u56e0\u6b64 BloomFilter \u8fc7\u6ee4\u6389\u7684\u6570\u636e\u53ef\u80fd\u4f1a\u548c Bitmap \u8fc7\u6ee4\u6389\u7684\u6570\u636e\u6709\u91cd\u53e0\u3002\n-\n-    `RowsStatsFiltered` \u4e2d\u8bb0\u5f55\u7684\u662f\u7ecf\u8fc7\u5176\u4ed6\u8c13\u8bcd\u6761\u4ef6\u8fc7\u6ee4\u6389\u7684\u884c\u6570\uff0c\u8fd9\u91cc\u5305\u62ec\u4e0b\u63a8\u5230\u5b58\u50a8\u5f15\u64ce\u7684\u8c13\u8bcd\u6761\u4ef6\uff0c\u4ee5\u53ca\u5b58\u50a8\u5f15\u64ce\u4e2d\u7684 Delete \u6761\u4ef6\u3002\n-    \n-    `RowsDelFiltered` \u4e2d\u5305\u542b\u4e86 `RowsBloomFilterFiltered` \u548c `RowsStatsFiltered` \u8bb0\u5f55\u7684\u8fc7\u6ee4\u884c\u6570\u3002\n-    \n-    `RawRowsRead` \u662f\u7ecf\u8fc7\u4e0a\u8ff0\u8fc7\u6ee4\u540e\uff0c\u6700\u7ec8\u9700\u8981\u8bfb\u53d6\u7684\u884c\u6570\u3002\u800c `RowsRead` \u662f\u6700\u7ec8\u8fd4\u56de\u7ed9 Scanner \u7684\u884c\u6570\u3002`RowsRead` \u901a\u5e38\u5c0f\u4e8e `RawRowsRead`\uff0c\u662f\u56e0\u4e3a\u4ece\u5b58\u50a8\u5f15\u64ce\u8fd4\u56de\u5230 Scanner\uff0c\u53ef\u80fd\u4f1a\u7ecf\u8fc7\u4e00\u6b21\u6570\u636e\u805a\u5408\u3002\n-    \n-    `RowsReturned` \u662f ScanNode \u6700\u7ec8\u8fd4\u56de\u7ed9\u4e0a\u5c42\u8282\u70b9\u7684\u884c\u6570\u3002`RowsReturned` \u901a\u5e38\u4e5f\u4f1a\u5c0f\u4e8e \n-`RowsRead`\u3002\u56e0\u4e3a\u5728 Scanner \u4e0a\u4f1a\u6709\u4e00\u4e9b\u6ca1\u6709\u4e0b\u63a8\u7ed9\u5b58\u50a8\u5f15\u64ce\u7684\u8c13\u8bcd\u6761\u4ef6\uff0c\u4f1a\u8fdb\u884c\u4e00\u6b21\u8fc7\u6ee4\u3002\n-\n-    \u901a\u8fc7\u4ee5\u4e0a\u6307\u6807\uff0c\u53ef\u4ee5\u5927\u81f4\u5206\u6790\u51fa\u5b58\u50a8\u5f15\u64ce\u5904\u7406\u7684\u884c\u6570\u4ee5\u53ca\u6700\u7ec8\u8fc7\u6ee4\u540e\u7684\u7ed3\u679c\u884c\u6570\u5927\u5c0f\u3002\u901a\u8fc7 `Rows***Filtered` \u8fd9\u7ec4\u6307\u6807\uff0c\u4e5f\u53ef\u4ee5\u5206\u6790\u67e5\u8be2\u6761\u4ef6\u662f\u5426\u4e0b\u63a8\u5230\u4e86\u5b58\u50a8\u5f15\u64ce\uff0c\u4ee5\u53ca\u4e0d\u540c\u7d22\u5f15\u7684\u8fc7\u6ee4\u6548\u679c\u3002\n-    \n-    \u5982\u679c `RawRowsRead` \u548c `RowsRead` \u5dee\u8ddd\u8f83\u5927\uff0c\u5219\u8bf4\u660e\u5927\u91cf\u7684\u884c\u88ab\u805a\u5408\uff0c\u800c\u805a\u5408\u53ef\u80fd\u6bd4\u8f83\u8017\u65f6\u3002\u5982\u679c `RowsRead` \u548c `RowsReturned` \u5dee\u8ddd\u8f83\u5927\uff0c\u5219\u8bf4\u660e\u5f88\u591a\u884c\u5728 Scanner \u4e2d\u8fdb\u884c\u4e86\u8fc7\u6ee4\u3002\u8fd9\u8bf4\u660e\u5f88\u591a\u9009\u62e9\u5ea6\u9ad8\u7684\u8c13\u8bcd\u6761\u4ef6\u5e76\u6ca1\u6709\u63a8\u9001\u7ed9\u5b58\u50a8\u5f15\u64ce\u3002\u800c\u5728 Scanner \u4e2d\u7684\u8fc7\u6ee4\u6548\u7387\u4f1a\u6bd4\u5728\u5b58\u50a8\u5f15\u64ce\u4e2d\u8fc7\u6ee4\u6548\u7387\u5dee\u3002\n-    \n-* Scan Node Profile \u7684\u7b80\u5355\u5206\u6790\n+  - \u5f53\u8bfb\u53d6\u4e00\u4e2a V2 \u683c\u5f0f\u7684 Segment \u65f6\uff0c\u82e5\u67e5\u8be2\u5b58\u5728 key_ranges\uff08\u524d\u7f00key\u7ec4\u6210\u7684\u67e5\u8be2\u8303\u56f4\uff09\uff0c\u9996\u5148\u901a\u8fc7 SortkeyIndex \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\uff0c\u8fc7\u6ee4\u7684\u884c\u6570\u8bb0\u5f55\u5728 `RowsKeyRangeFiltered`\u3002\n+  - \u4e4b\u540e\uff0c\u5bf9\u67e5\u8be2\u6761\u4ef6\u4e2d\u542b\u6709 bitmap \u7d22\u5f15\u7684\u5217\uff0c\u4f7f\u7528 Bitmap \u7d22\u5f15\u8fdb\u884c\u7cbe\u786e\u8fc7\u6ee4\uff0c\u8fc7\u6ee4\u7684\u884c\u6570\u8bb0\u5f55\u5728 `RowsBitmapIndexFiltered`\u3002\n+  - \u4e4b\u540e\uff0c\u6309\u67e5\u8be2\u6761\u4ef6\u4e2d\u7684\u7b49\u503c\uff08eq\uff0cin\uff0cis\uff09\u6761\u4ef6\uff0c\u4f7f\u7528BloomFilter\u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\uff0c\u8bb0\u5f55\u5728 `RowsBloomFilterFiltered`\u3002`RowsBloomFilterFiltered` \u7684\u503c\u662f Segment \u7684\u603b\u884c\u6570\uff08\u800c\u4e0d\u662fBitmap\u7d22\u5f15\u8fc7\u6ee4\u540e\u7684\u884c\u6570\uff09\u548c\u7ecf\u8fc7 BloomFilter \u8fc7\u6ee4\u540e\u5269\u4f59\u884c\u6570\u7684\u5dee\u503c\uff0c\u56e0\u6b64 BloomFilter \u8fc7\u6ee4\u7684\u6570\u636e\u53ef\u80fd\u4f1a\u548c Bitmap \u8fc7\u6ee4\u7684\u6570\u636e\u6709\u91cd\u53e0\u3002\n+  - \u4e4b\u540e\uff0c\u6309\u67e5\u8be2\u6761\u4ef6\u548c\u5220\u9664\u6761\u4ef6\uff0c\u4f7f\u7528 ZoneMap \u7d22\u5f15\u8fc7\u6ee4\u6570\u636e\uff0c\u8bb0\u5f55\u5728 `RowsStatsFiltered`\u3002\n+  - `RowsConditionsFiltered` \u662f\u5404\u79cd\u7d22\u5f15\u8fc7\u6ee4\u7684\u884c\u6570\uff0c\u5305\u542b\u4e86 `RowsBloomFilterFiltered` \u548c `RowsStatsFiltered` \u7684\u503c\u3002\n+  - \u81f3\u6b64 Init \u9636\u6bb5\u5b8c\u6210\uff0cNext \u9636\u6bb5\u5220\u9664\u6761\u4ef6\u8fc7\u6ee4\u7684\u884c\u6570\uff0c\u8bb0\u5f55\u5728 `RowsDelFiltered`\u3002\u56e0\u6b64\u5220\u9664\u6761\u4ef6\u5b9e\u9645\u8fc7\u6ee4\u7684\u884c\u6570\uff0c\u5206\u522b\u8bb0\u5f55\u5728 `RowsStatsFiltered` \u548c `RowsDelFiltered` \u4e2d\u3002\n+  - `RawRowsRead` \u662f\u7ecf\u8fc7\u4e0a\u8ff0\u8fc7\u6ee4\u540e\uff0c\u6700\u7ec8\u9700\u8981\u8bfb\u53d6\u7684\u884c\u6570\u3002\n+  - `RowsRead` \u662f\u6700\u7ec8\u8fd4\u56de\u7ed9 Scanner \u7684\u884c\u6570\u3002`RowsRead` \u901a\u5e38\u5c0f\u4e8e `RawRowsRead`\uff0c\u662f\u56e0\u4e3a\u4ece\u5b58\u50a8\u5f15\u64ce\u8fd4\u56de\u5230 Scanner\uff0c\u53ef\u80fd\u4f1a\u7ecf\u8fc7\u4e00\u6b21\u6570\u636e\u805a\u5408\u3002\u5982\u679c `RawRowsRead` \u548c `RowsRead` \u5dee\u8ddd\u8f83\u5927\uff0c\u5219\u8bf4\u660e\u5927\u91cf\u7684\u884c\u88ab\u805a\u5408\uff0c\u800c\u805a\u5408\u53ef\u80fd\u6bd4\u8f83\u8017\u65f6\u3002\n+  - `RowsReturned` \u662f ScanNode \u6700\u7ec8\u8fd4\u56de\u7ed9\u4e0a\u5c42\u8282\u70b9\u7684\u884c\u6570\u3002`RowsReturned` \u901a\u5e38\u4e5f\u4f1a\u5c0f\u4e8e`RowsRead`\u3002\u56e0\u4e3a\u5728 Scanner \u4e0a\u4f1a\u6709\u4e00\u4e9b\u6ca1\u6709\u4e0b\u63a8\u7ed9\u5b58\u50a8\u5f15\u64ce\u7684\u8c13\u8bcd\u6761\u4ef6\uff0c\u4f1a\u8fdb\u884c\u4e00\u6b21\u8fc7\u6ee4\u3002\u5982\u679c `RowsRead` \u548c `RowsReturned` \u5dee\u8ddd\u8f83\u5927\uff0c\u5219\u8bf4\u660e\u5f88\u591a\u884c\u5728 Scanner \u4e2d\u8fdb\u884c\u4e86\u8fc7\u6ee4\u3002\u8fd9\u8bf4\u660e\u5f88\u591a\u9009\u62e9\u5ea6\u9ad8\u7684\u8c13\u8bcd\u6761\u4ef6\u5e76\u6ca1\u6709\u63a8\u9001\u7ed9\u5b58\u50a8\u5f15\u64ce\u3002\u800c\u5728 Scanner \u4e2d\u7684\u8fc7\u6ee4\u6548\u7387\u4f1a\u6bd4\u5728\u5b58\u50a8\u5f15\u64ce\u4e2d\u8fc7\u6ee4\u6548\u7387\u5dee\u3002\n \n-    OlapScanNode \u7684 Profile \u901a\u5e38\u7528\u4e8e\u5206\u6790\u6570\u636e\u626b\u63cf\u7684\u6548\u7387\u3002\u9664\u4e86\u524d\u9762\u4ecb\u7ecd\u7684\u901a\u8fc7\u884c\u6570\u76f8\u5173\u4fe1\u606f\u53ef\u4ee5\u63a8\u65ad\u8c13\u8bcd\u6761\u4ef6\u4e0b\u63a8\u548c\u7d22\u5f15\u4f7f\u7528\u60c5\u51b5\u5916\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\u8fdb\u884c\u7b80\u5355\u7684\u5206\u6790\u3002\n+\u901a\u8fc7\u4ee5\u4e0a\u6307\u6807\uff0c\u53ef\u4ee5\u5927\u81f4\u5206\u6790\u51fa\u5b58\u50a8\u5f15\u64ce\u5904\u7406\u7684\u884c\u6570\u4ee5\u53ca\u6700\u7ec8\u8fc7\u6ee4\u540e\u7684\u7ed3\u679c\u884c\u6570\u5927\u5c0f\u3002\u901a\u8fc7 `Rows***Filtered` \u8fd9\u7ec4\u6307\u6807\uff0c\u4e5f\u53ef\u4ee5\u5206\u6790\u67e5\u8be2\u6761\u4ef6\u662f\u5426\u4e0b\u63a8\u5230\u4e86\u5b58\u50a8\u5f15\u64ce\uff0c\u4ee5\u53ca\u4e0d\u540c\u7d22\u5f15\u7684\u8fc7\u6ee4\u6548\u679c\u3002\u6b64\u5916\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\u8fdb\u884c\u7b80\u5355\u7684\u5206\u6790\u3002\n     \n-    * \u9996\u5148\uff0c\u5f88\u591a\u6307\u6807\uff0c\u5982 `IOTimer`\uff0c`BlockFetchTime` \u7b49\u90fd\u662f\u6240\u6709 Scanner \u7ebf\u7a0b\u6307\u6807\u7684\u7d2f\u52a0\uff0c\u56e0\u6b64\u6570\u503c\u53ef\u80fd\u4f1a\u6bd4\u8f83\u5927\u3002\u5e76\u4e14\u56e0\u4e3a Scanner \u7ebf\u7a0b\u662f\u5f02\u6b65\u8bfb\u53d6\u6570\u636e\u7684\uff0c\u6240\u4ee5\u8fd9\u4e9b\u7d2f\u52a0\u6307\u6807\u53ea\u80fd\u53cd\u6620 Scanner \u7d2f\u52a0\u7684\u5de5\u4f5c\u65f6\u95f4\uff0c\u5e76\u4e0d\u76f4\u63a5\u4ee3\u8868 ScanNode \u7684\u8017\u65f6\u3002ScanNode \u5728\u6574\u4e2a\u67e5\u8be2\u8ba1\u5212\u4e2d\u7684\u8017\u65f6\u5360\u6bd4\u4e3a `Active` \u5b57\u6bb5\u8bb0\u5f55\u7684\u503c\u3002\u6709\u65f6\u4f1a\u51fa\u73b0\u6bd4\u5982 `IOTimer` \u6709\u51e0\u5341\u79d2\uff0c\u800c `Active` \u5b9e\u9645\u53ea\u6709\u51e0\u79d2\u949f\u3002\u8fd9\u79cd\u60c5\u51b5\u901a\u5e38\u56e0\u4e3a\uff1a1. `IOTimer` \u4e3a\u591a\u4e2a Scanner \u7684\u7d2f\u52a0\u65f6\u95f4\uff0c\u800c Scanner \u6570\u91cf\u8f83\u591a\u30022. \u4e0a\u5c42\u8282\u70b9\u6bd4\u8f83\u8017\u65f6\u3002\u6bd4\u5982\u4e0a\u5c42\u8282\u70b9\u8017\u65f6 100\u79d2\uff0c\u800c\u5e95\u5c42 ScanNode \u53ea\u9700 10\u79d2\u3002\u5219\u53cd\u6620\u5728 `Active` \u7684\u5b57\u6bb5\u53ef\u80fd\u53ea\u6709\u51e0\u6beb\u79d2\u3002\u56e0\u4e3a\u5728\u4e0a\u5c42\u5904\u7406\u6570\u636e\u7684\u540c\u65f6\uff0cScanNode \u5df2\u7ecf\u5f02\u6b65\u7684\u8fdb\u884c\u4e86\u6570\u636e\u626b\u63cf\u5e76\u51c6\u5907\u597d\u4e86\u6570\u636e\u3002\u5f53\u4e0a\u5c42\u8282\u70b9\u4ece ScanNode \u83b7\u53d6\u6570\u636e\u65f6\uff0c\u53ef\u4ee5\u83b7\u53d6\u5230\u5df2\u7ecf\u51c6\u5907\u597d\u7684\u6570\u636e\uff0c\u56e0\u6b64 Active \u65f6\u95f4\u5f88\u77ed\u3002\n-    * IOTimer \u662f IO \u65f6\u95f4\uff0c\u80fd\u591f\u76f4\u63a5\u53cd\u6620 IO \u64cd\u4f5c\u8017\u65f6\u3002\u8fd9\u91cc\u662f\u6240\u6709 Scanner \u7ebf\u7a0b\u7d2f\u52a0\u7684 IO \u65f6\u95f4\u3002\n-    * NumScanners \u8868\u793a Scanner \u7ebf\u7a0b\u6570\u3002\u7ebf\u7a0b\u6570\u8fc7\u591a\u6216\u8fc7\u5c11\u90fd\u4f1a\u5f71\u54cd\u67e5\u8be2\u6548\u7387\u3002\u540c\u65f6\u53ef\u4ee5\u7528\u4e00\u4e9b\u6c47\u603b\u6307\u6807\u9664\u4ee5\u7ebf\u7a0b\u6570\u6765\u5927\u81f4\u7684\u4f30\u7b97\u6bcf\u4e2a\u7ebf\u7a0b\u7684\u8017\u65f6\u3002\n-    * TabletCount \u8868\u793a\u9700\u8981\u626b\u63cf\u7684 tablet \u6570\u91cf\u3002\u6570\u91cf\u8fc7\u591a\u53ef\u80fd\u610f\u5473\u7740\u9700\u8981\u5927\u91cf\u7684\u968f\u673a\u8bfb\u53d6\u548c\u6570\u636e\u5408\u5e76\u64cd\u4f5c\u3002\n-    * UncompressedBytesRead \u95f4\u63a5\u53cd\u6620\u4e86\u8bfb\u53d6\u7684\u6570\u636e\u91cf\u3002\u5982\u679c\u8be5\u6570\u503c\u8f83\u5927\uff0c\u8bf4\u660e\u53ef\u80fd\u6709\u5927\u91cf\u7684 IO \u64cd\u4f5c\u3002\n-    * CachedPagesNum \u548c TotalPagesNum\u3002\u5bf9\u4e8e V2 \u683c\u5f0f\uff0c\u53ef\u4ee5\u67e5\u770b\u547d\u4e2d PageCache \u7684\u60c5\u51b5\u3002\u547d\u4e2d\u7387\u8d8a\u9ad8\uff0c\u8bf4\u660e IO \u548c\u89e3\u538b\u64cd\u4f5c\u8017\u65f6\u8d8a\u5c11\u3002\n+  - `OlapScanner` \u4e0b\u7684\u5f88\u591a\u6307\u6807\uff0c\u5982 `IOTimer`\uff0c`BlockFetchTime` \u7b49\u90fd\u662f\u6240\u6709 Scanner \u7ebf\u7a0b\u6307\u6807\u7684\u7d2f\u52a0\uff0c\u56e0\u6b64\u6570\u503c\u53ef\u80fd\u4f1a\u6bd4\u8f83\u5927\u3002\u5e76\u4e14\u56e0\u4e3a Scanner \u7ebf\u7a0b\u662f\u5f02\u6b65\u8bfb\u53d6\u6570\u636e\u7684\uff0c\u6240\u4ee5\u8fd9\u4e9b\u7d2f\u52a0\u6307\u6807\u53ea\u80fd\u53cd\u6620 Scanner \u7d2f\u52a0\u7684\u5de5\u4f5c\u65f6\u95f4\uff0c\u5e76\u4e0d\u76f4\u63a5\u4ee3\u8868 ScanNode \u7684\u8017\u65f6\u3002ScanNode \u5728\u6574\u4e2a\u67e5\u8be2\u8ba1\u5212\u4e2d\u7684\u8017\u65f6\u5360\u6bd4\u4e3a `Active` \u5b57\u6bb5\u8bb0\u5f55\u7684\u503c\u3002\u6709\u65f6\u4f1a\u51fa\u73b0\u6bd4\u5982 `IOTimer` \u6709\u51e0\u5341\u79d2\uff0c\u800c `Active` \u5b9e\u9645\u53ea\u6709\u51e0\u79d2\u949f\u3002\u8fd9\u79cd\u60c5\u51b5\u901a\u5e38\u56e0\u4e3a\uff1a\n+    - `IOTimer` \u4e3a\u591a\u4e2a Scanner \u7684\u7d2f\u52a0\u65f6\u95f4\uff0c\u800c Scanner \u6570\u91cf\u8f83\u591a\u3002\n+    - \u4e0a\u5c42\u8282\u70b9\u6bd4\u8f83\u8017\u65f6\u3002\u6bd4\u5982\u4e0a\u5c42\u8282\u70b9\u8017\u65f6 100\u79d2\uff0c\u800c\u5e95\u5c42 ScanNode \u53ea\u9700 10\u79d2\u3002\u5219\u53cd\u6620\u5728 `Active` \u7684\u5b57\u6bb5\u53ef\u80fd\u53ea\u6709\u51e0\u6beb\u79d2\u3002\u56e0\u4e3a\u5728\u4e0a\u5c42\u5904\u7406\u6570\u636e\u7684\u540c\u65f6\uff0cScanNode \u5df2\u7ecf\u5f02\u6b65\u7684\u8fdb\u884c\u4e86\u6570\u636e\u626b\u63cf\u5e76\u51c6\u5907\u597d\u4e86\u6570\u636e\u3002\u5f53\u4e0a\u5c42\u8282\u70b9\u4ece ScanNode \u83b7\u53d6\u6570\u636e\u65f6\uff0c\u53ef\u4ee5\u83b7\u53d6\u5230\u5df2\u7ecf\u51c6\u5907\u597d\u7684\u6570\u636e\uff0c\u56e0\u6b64 Active \u65f6\u95f4\u5f88\u77ed\u3002\n+  - `NumScanners` \u8868\u793a Scanner \u7ebf\u7a0b\u6570\u3002\u7ebf\u7a0b\u6570\u8fc7\u591a\u6216\u8fc7\u5c11\u90fd\u4f1a\u5f71\u54cd\u67e5\u8be2\u6548\u7387\u3002\u540c\u65f6\u53ef\u4ee5\u7528\u4e00\u4e9b\u6c47\u603b\u6307\u6807\u9664\u4ee5\u7ebf\u7a0b\u6570\u6765\u5927\u81f4\u7684\u4f30\u7b97\u6bcf\u4e2a\u7ebf\u7a0b\u7684\u8017\u65f6\u3002", "originalCommit": "dccf155843ab45b0510e83e99265bff8094eff0f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fdc72d4c5c9d9b95f2e1cad49d79e36015479581", "url": "https://github.com/apache/incubator-doris/commit/fdc72d4c5c9d9b95f2e1cad49d79e36015479581", "message": "recovery TotalReadThroughput counter", "committedDate": "2020-11-09T09:11:19Z", "type": "commit"}]}