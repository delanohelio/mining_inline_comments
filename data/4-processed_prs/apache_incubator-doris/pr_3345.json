{"pr_number": 3345, "pr_title": "[FIX] fix doris string functions not support multibyte string", "pr_createdAt": "2020-04-17T10:25:20Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3345", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE0NDk2Ng==", "url": "https://github.com/apache/incubator-doris/pull/3345#discussion_r410144966", "bodyText": "Is this only valid for UTF8 encode?\nIf it is, better to rename utf8_length.", "author": "imay", "createdAt": "2020-04-17T10:48:27Z", "path": "be/src/exprs/string_functions.cpp", "diffHunk": "@@ -223,6 +259,36 @@ IntVal StringFunctions::length(FunctionContext* context, const StringVal& str) {\n     return IntVal(str.len);\n }\n \n+// Implementation of CHAR_LENGTH\n+//   int char_length(string input)\n+// Returns the length of charactors of input. If input == NULL, returns\n+// NULL per MySQL\n+IntVal StringFunctions::char_length(FunctionContext* context, const StringVal& str) {", "originalCommit": "14e4008b73281195f86e19d623339e135c14d87d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE0Nzg1Mg==", "url": "https://github.com/apache/incubator-doris/pull/3345#discussion_r410147852", "bodyText": "Can you write a function and to reuse it?", "author": "imay", "createdAt": "2020-04-17T10:54:55Z", "path": "be/src/exprs/string_functions.cpp", "diffHunk": "@@ -266,7 +332,25 @@ StringVal StringFunctions::reverse(FunctionContext* context, const StringVal& st\n     if (UNLIKELY(result.is_null)) {\n         return result;\n     }\n-    std::reverse_copy(str.ptr, str.ptr + str.len, result.ptr);\n+\n+    for (size_t i = 0, char_size = 0; i < str.len; i += char_size) {\n+        unsigned char byte = (unsigned)(str.ptr)[i];\n+        if (byte >= 0xFC) {\n+            char_size = 6;\n+        } else if (byte >= 0xF8) {\n+            char_size = 5;\n+        } else if (byte >= 0xF0) {\n+            char_size = 4;\n+        } else if (byte >= 0xE0) {\n+            char_size = 3;\n+        } else if (byte >= 0xC0) {\n+            char_size = 2;\n+        } else {\n+            char_size = 1;\n+        }", "originalCommit": "14e4008b73281195f86e19d623339e135c14d87d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2MTg1NA==", "url": "https://github.com/apache/incubator-doris/pull/3345#discussion_r410261854", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // index save ervery charactor's length\n          \n          \n            \n                // index save every character's length", "author": "morningman", "createdAt": "2020-04-17T14:30:31Z", "path": "be/src/exprs/string_functions.cpp", "diffHunk": "@@ -37,19 +37,55 @@ void StringFunctions::init() {\n //  - supported negative positions (count from the end of the string)\n //  - [optional] len.  No len indicates longest substr possible\n StringVal StringFunctions::substring(\n-        FunctionContext* context, const StringVal& str, \n+        FunctionContext* context, const StringVal& str,\n         const IntVal& pos, const IntVal& len) {\n     if (str.is_null || pos.is_null || len.is_null) {\n         return StringVal::null();\n     }\n+    if (len.val <= 0 || str.len == 0) {\n+        return StringVal();\n+    }\n+\n+    // create index indicate every char start byte\n+    // e.g.  \"hello word \u4f60\u597d\" => [0,1,2,3,4,5,6,7,8,9,10,11,14] \u4f60 and \u597d are 3 bytes\n+    // why use a vector as index? if theres is no negative pos val it is unnecessary,\n+    // but if has pos is negative it is not easy to determin where to start, so need a \n+    // index save ervery charactor's length", "originalCommit": "14e4008b73281195f86e19d623339e135c14d87d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1f03432423f2fa9f8d9961cf185e4366365b7e68", "url": "https://github.com/apache/incubator-doris/commit/1f03432423f2fa9f8d9961cf185e4366365b7e68", "message": "[FIX] fix when string contains some characters that span multiple bytes, cannot be handler correctly", "committedDate": "2020-04-20T06:49:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1NjgwMw==", "url": "https://github.com/apache/incubator-doris/pull/3345#discussion_r412256803", "bodyText": "Can an optimization be done here?\n\nDetermine first, when pos is positive and greater than the length of str, return null directly, without for loop.\nWhen pos is positive, can the for loop terminate after pos + len cycles? Instead of looping until the end of str?", "author": "morningman", "createdAt": "2020-04-21T14:53:50Z", "path": "be/src/exprs/string_functions.cpp", "diffHunk": "@@ -19,37 +19,78 @@\n \n #include <re2/re2.h>\n \n-#include \"exprs/expr.h\"\n #include \"exprs/anyval_util.h\"\n+#include \"exprs/expr.h\"\n+#include \"math_functions.h\"\n #include \"runtime/string_value.hpp\"\n #include \"runtime/tuple_row.h\"\n #include \"util/url_parser.h\"\n-#include \"math_functions.h\"\n \n // NOTE: be careful not to use string::append.  It is not performant.\n namespace doris {\n \n void StringFunctions::init() {\n }\n \n+size_t get_utf8_byte_length(unsigned char byte) {\n+    size_t char_size = 0;\n+    if (byte >= 0xFC) {\n+        char_size = 6;\n+    } else if (byte >= 0xF8) {\n+        char_size = 5;\n+    } else if (byte >= 0xF0) {\n+        char_size = 4;\n+    } else if (byte >= 0xE0) {\n+        char_size = 3;\n+    } else if (byte >= 0xC0) {\n+        char_size = 2;\n+    } else {\n+        char_size = 1;\n+    }\n+    return char_size;\n+}\n+\n // This behaves identically to the mysql implementation, namely:\n //  - 1-indexed positions\n //  - supported negative positions (count from the end of the string)\n //  - [optional] len.  No len indicates longest substr possible\n StringVal StringFunctions::substring(\n-        FunctionContext* context, const StringVal& str, \n+        FunctionContext* context, const StringVal& str,\n         const IntVal& pos, const IntVal& len) {\n     if (str.is_null || pos.is_null || len.is_null) {\n         return StringVal::null();\n     }\n+    if (len.val <= 0 || str.len == 0) {\n+        return StringVal();\n+    }\n+\n+    // create index indicate every char start byte\n+    // e.g.  \"hello word \u4f60\u597d\" => [0,1,2,3,4,5,6,7,8,9,10,11,14] \u4f60 and \u597d are 3 bytes\n+    // why use a vector as index? It is unnecessary if there is no negative pos val,\n+    // but if has pos is negative it is not easy to determin where to start, so need a \n+    // index save every character's length\n+    size_t byte_pos = 0;\n+    std::vector<size_t> index;\n+    for (size_t i = 0, char_size = 0; i < str.len; i += char_size) {", "originalCommit": "5ee1bcae2ec5a8f0f7699f8af3fe6e6f9d07b89e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1ODYwMA==", "url": "https://github.com/apache/incubator-doris/pull/3345#discussion_r412258600", "bodyText": "should it be char_length_utf8", "author": "morningman", "createdAt": "2020-04-21T14:55:54Z", "path": "docs/documentation/cn/sql-reference/sql-functions/string-functions/char_length_utf8.md", "diffHunk": "@@ -0,0 +1,47 @@\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# length", "originalCommit": "5ee1bcae2ec5a8f0f7699f8af3fe6e6f9d07b89e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1ODk0OQ==", "url": "https://github.com/apache/incubator-doris/pull/3345#discussion_r412258949", "bodyText": "Should it be 2?", "author": "morningman", "createdAt": "2020-04-21T14:56:13Z", "path": "docs/documentation/cn/sql-reference/sql-functions/string-functions/char_length_utf8.md", "diffHunk": "@@ -0,0 +1,47 @@\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# length\n+## description\n+### Syntax\n+\n+`INT char_length_utf8(VARCHAR str)`\n+\n+\n+\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u5bf9\u4e8e\u591a\u5b57\u8282\u5b57\u7b26\uff0c\u8fd4\u56de\u7684\u5b57\u7b26\u6570\u3002\n+\n+## example\n+\n+```\n+mysql> select length(\"abc\");\n++---------------+\n+| length('abc') |\n++---------------+\n+|             3 |\n++---------------+\n+\n+mysql> select length(\"\u4e2d\u56fd\");\n++------------------+\n+| length('\u4e2d\u56fd')   |\n++------------------+\n+|                6 |", "originalCommit": "5ee1bcae2ec5a8f0f7699f8af3fe6e6f9d07b89e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI2MDg2Ng==", "url": "https://github.com/apache/incubator-doris/pull/3345#discussion_r412260866", "bodyText": "Why using this type?", "author": "morningman", "createdAt": "2020-04-21T14:58:24Z", "path": "run-ut.sh", "diffHunk": "@@ -24,6 +24,7 @@ ROOT=`cd \"$ROOT\"; pwd`\n export DORIS_HOME=${ROOT}\n \n . ${DORIS_HOME}/env.sh\n+export BUILD_TYPE=DEBUG", "originalCommit": "5ee1bcae2ec5a8f0f7699f8af3fe6e6f9d07b89e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQzODQ2MQ==", "url": "https://github.com/apache/incubator-doris/pull/3345#discussion_r413438461", "bodyText": "when runing unit test we need to enable DECHEK() to found more problems", "author": "yangzhg", "createdAt": "2020-04-23T01:14:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI2MDg2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI4MTYzMw==", "url": "https://github.com/apache/incubator-doris/pull/3345#discussion_r412281633", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u5bf9\u4e8e\u591a\u5b57\u8282\u5b57\u7b26\uff0c\u8fd4\u56de\u7684\u5b57\u7b26\u6570\u3002\n          \n          \n            \n            \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u5bf9\u4e8e\u591a\u5b57\u8282\u5b57\u7b26\uff0c\u8fd4\u56de\u5b57\u7b26\u6570\u3002", "author": "wutiangan", "createdAt": "2020-04-21T15:22:36Z", "path": "docs/documentation/cn/sql-reference/sql-functions/string-functions/char_length_utf8.md", "diffHunk": "@@ -0,0 +1,47 @@\n+<!-- \n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+# length\n+## description\n+### Syntax\n+\n+`INT char_length_utf8(VARCHAR str)`\n+\n+\n+\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u5bf9\u4e8e\u591a\u5b57\u8282\u5b57\u7b26\uff0c\u8fd4\u56de\u7684\u5b57\u7b26\u6570\u3002", "originalCommit": "5ee1bcae2ec5a8f0f7699f8af3fe6e6f9d07b89e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI4MjgyNw==", "url": "https://github.com/apache/incubator-doris/pull/3345#discussion_r412282827", "bodyText": "\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u5b57\u8282\u6570", "author": "wutiangan", "createdAt": "2020-04-21T15:24:02Z", "path": "docs/documentation/cn/sql-reference/sql-functions/string-functions/length.md", "diffHunk": "@@ -24,7 +24,7 @@ under the License.\n `INT length(VARCHAR str)`\n \n \n-\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u5bf9\u4e8e\u591a\u5b57\u8282\u5b57\u7b26\uff0c\u8fd4\u56de\u7684\u5b57\u7b26\u6570\u3002\u6bd4\u59825\u4e2a\u4e24\u5b57\u8282\u5bbd\u5ea6\u5b57\uff0c\u8fd4\u56de\u7684\u957f\u5ea6\u662f10\u3002\n+\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u5b57\u8282\u3002", "originalCommit": "5ee1bcae2ec5a8f0f7699f8af3fe6e6f9d07b89e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI4MzU1Nw==", "url": "https://github.com/apache/incubator-doris/pull/3345#discussion_r412283557", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u5b83\u8fd4\u56de\u5177\u6709\u6307\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u7684\u53f3\u8fb9\u90e8\u5206, \u5ea6\u7684\u5355\u4f4d\u4e3autf8\u5b57\u7b26\n          \n          \n            \n            \u5b83\u8fd4\u56de\u5177\u6709\u6307\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u7684\u53f3\u8fb9\u90e8\u5206, \u957f\u5ea6\u7684\u5355\u4f4d\u4e3autf8\u5b57\u7b26", "author": "wutiangan", "createdAt": "2020-04-21T15:24:53Z", "path": "docs/documentation/cn/sql-reference/sql-functions/string-functions/right.md", "diffHunk": "@@ -24,7 +24,7 @@ under the License.\n `VARCHAR right(VARCHAR str)`\n \n \n-\u5b83\u8fd4\u56de\u5177\u6709\u6307\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u7684\u53f3\u8fb9\u90e8\u5206\n+\u5b83\u8fd4\u56de\u5177\u6709\u6307\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u7684\u53f3\u8fb9\u90e8\u5206, \u5ea6\u7684\u5355\u4f4d\u4e3autf8\u5b57\u7b26", "originalCommit": "5ee1bcae2ec5a8f0f7699f8af3fe6e6f9d07b89e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY3OTE3NQ==", "url": "https://github.com/apache/incubator-doris/pull/3345#discussion_r414679175", "bodyText": "why not utf8_length?", "author": "imay", "createdAt": "2020-04-24T15:48:32Z", "path": "gensrc/script/doris_builtins_functions.py", "diffHunk": "@@ -533,6 +533,8 @@\n             '15FunctionContextERKNS1_9StringValERKNS1_6IntValES6_'],\n     [['length'], 'INT', ['VARCHAR'],\n             '_ZN5doris15StringFunctions6lengthEPN9doris_udf15FunctionContextERKNS1_9StringValE'],\n+    [['char_length_utf8'], 'INT', ['VARCHAR'],", "originalCommit": "236b93be57d3e817b7e18162dafc2e3ab9e24b6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE5ODUwMA==", "url": "https://github.com/apache/incubator-doris/pull/3345#discussion_r415198500", "bodyText": "I think char_length_utf8 is better, it means char length in utf8", "author": "yangzhg", "createdAt": "2020-04-26T02:59:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY3OTE3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMyNzUyNw==", "url": "https://github.com/apache/incubator-doris/pull/3345#discussion_r416327527", "bodyText": "I found that in mysql , it calls char_length(),\nhttps://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_char-length\nSo I think char_length is enough, and this function is unrelated with the encoding\u3002\nchar_length_utf8('\u4e2d\u56fd') and char_length_gbk('\u4e2d\u56fd') should both return 2.\nSo the suffix _utf8 is unnecessary.", "author": "morningman", "createdAt": "2020-04-28T05:00:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY3OTE3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM1NDQ3Mg==", "url": "https://github.com/apache/incubator-doris/pull/3345#discussion_r416354472", "bodyText": "@imay I have changed  to char_length, please review it", "author": "yangzhg", "createdAt": "2020-04-28T06:14:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY3OTE3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM1NTk2OA==", "url": "https://github.com/apache/incubator-doris/pull/3345#discussion_r416355968", "bodyText": "Better to give a synonym CHARACTER_LENGTH, which is also supported in MySQL", "author": "imay", "createdAt": "2020-04-28T06:18:37Z", "path": "gensrc/script/doris_builtins_functions.py", "diffHunk": "@@ -533,6 +533,8 @@\n             '15FunctionContextERKNS1_9StringValERKNS1_6IntValES6_'],\n     [['length'], 'INT', ['VARCHAR'],\n             '_ZN5doris15StringFunctions6lengthEPN9doris_udf15FunctionContextERKNS1_9StringValE'],\n+    [['char_length'], 'INT', ['VARCHAR'],", "originalCommit": "ed6be71856e1dc45005d24ac3e6c4a8427b8143c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NzQ0Mw==", "url": "https://github.com/apache/incubator-doris/pull/3345#discussion_r417097443", "bodyText": "@imay done", "author": "yangzhg", "createdAt": "2020-04-29T06:43:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM1NTk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY4OTgwMw==", "url": "https://github.com/apache/incubator-doris/pull/3345#discussion_r420689803", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                [['char_length'], 'INT', ['VARCHAR'],\n          \n          \n            \n                [['char_length', 'character_length'], 'INT', ['VARCHAR'],\n          \n      \n    \n    \n  \n\nPrefer above type", "author": "imay", "createdAt": "2020-05-06T10:29:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM1NTk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwNTQyMw==", "url": "https://github.com/apache/incubator-doris/pull/3345#discussion_r421205423", "bodyText": "Maybe you forget to add this file", "author": "imay", "createdAt": "2020-05-07T02:40:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM1NTk2OA=="}], "type": "inlineReview"}, {"oid": "7cfc2973644b083d21177057723f958757238380", "url": "https://github.com/apache/incubator-doris/commit/7cfc2973644b083d21177057723f958757238380", "message": "add CHARACTER_LENGTH", "committedDate": "2020-04-29T06:46:50Z", "type": "forcePushed"}, {"oid": "14287c72d2866be1a3a96a5461d352b5ebb4adad", "url": "https://github.com/apache/incubator-doris/commit/14287c72d2866be1a3a96a5461d352b5ebb4adad", "message": "add CHARACTER_LENGTH", "committedDate": "2020-04-29T11:29:09Z", "type": "forcePushed"}, {"oid": "fa0b7b409f84f46d389ecba940c726fa8171af1b", "url": "https://github.com/apache/incubator-doris/commit/fa0b7b409f84f46d389ecba940c726fa8171af1b", "message": "add CHARACTER_LENGTH", "committedDate": "2020-04-30T09:11:35Z", "type": "forcePushed"}, {"oid": "616b52ae947782b27bd113b41e10dd821dd918c2", "url": "https://github.com/apache/incubator-doris/commit/616b52ae947782b27bd113b41e10dd821dd918c2", "message": "fix unit test", "committedDate": "2020-05-06T03:32:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY4OTAxNg==", "url": "https://github.com/apache/incubator-doris/pull/3345#discussion_r420689016", "bodyText": "Should change this document according to current document format.", "author": "imay", "createdAt": "2020-05-06T10:27:46Z", "path": "docs/documentation/cn/sql-reference/sql-functions/string-functions/char_length.md", "diffHunk": "@@ -0,0 +1,47 @@\n+<!-- ", "originalCommit": "616b52ae947782b27bd113b41e10dd821dd918c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY5MjA0Ng==", "url": "https://github.com/apache/incubator-doris/pull/3345#discussion_r420692046", "bodyText": "Should change function reverse documentation", "author": "imay", "createdAt": "2020-05-06T10:33:44Z", "path": "be/src/exprs/string_functions.cpp", "diffHunk": "@@ -260,13 +321,16 @@ StringVal StringFunctions::reverse(FunctionContext* context, const StringVal& st\n         return StringVal::null();\n     }\n \n-    // TODO pengyubing\n-    // StringVal result = StringVal::create_temp_string_val(context, str.len);\n     StringVal result(context, str.len);\n     if (UNLIKELY(result.is_null)) {\n         return result;\n     }\n-    std::reverse_copy(str.ptr, str.ptr + str.len, result.ptr);\n+\n+    for (size_t i = 0, char_size = 0; i < str.len; i += char_size) {", "originalCommit": "616b52ae947782b27bd113b41e10dd821dd918c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3d13ac2053fcaaf92c6333823d1447333501e455", "url": "https://github.com/apache/incubator-doris/commit/3d13ac2053fcaaf92c6333823d1447333501e455", "message": "[FIX] fix when string contains some characters that span multiple bytes, cannot be handler correctly", "committedDate": "2020-05-07T05:07:52Z", "type": "commit"}, {"oid": "ce92f1cd0c6a014bd7e0ec9f95138f3917c57736", "url": "https://github.com/apache/incubator-doris/commit/ce92f1cd0c6a014bd7e0ec9f95138f3917c57736", "message": "fix typo and rename function", "committedDate": "2020-05-07T05:07:52Z", "type": "commit"}, {"oid": "e980152dcf98425aa8be96c4673c2a3e1c43ac7a", "url": "https://github.com/apache/incubator-doris/commit/e980152dcf98425aa8be96c4673c2a3e1c43ac7a", "message": "ADD DOCS", "committedDate": "2020-05-07T05:07:52Z", "type": "commit"}, {"oid": "d168e7002de7dda16174d10ca651520514963d45", "url": "https://github.com/apache/incubator-doris/commit/d168e7002de7dda16174d10ca651520514963d45", "message": "fix typo and optimize code", "committedDate": "2020-05-07T05:07:52Z", "type": "commit"}, {"oid": "5bc0205e8fec976d18b58a644ff983b8740eae68", "url": "https://github.com/apache/incubator-doris/commit/5bc0205e8fec976d18b58a644ff983b8740eae68", "message": "fix typo", "committedDate": "2020-05-07T05:07:52Z", "type": "commit"}, {"oid": "002532012f8cb37d65b0268fb09d7c4b8623e0a8", "url": "https://github.com/apache/incubator-doris/commit/002532012f8cb37d65b0268fb09d7c4b8623e0a8", "message": "remove debug", "committedDate": "2020-05-07T05:07:52Z", "type": "commit"}, {"oid": "418e2f336d15f7fdde74f20c47296dc5e9ff5250", "url": "https://github.com/apache/incubator-doris/commit/418e2f336d15f7fdde74f20c47296dc5e9ff5250", "message": "rename", "committedDate": "2020-05-07T05:07:52Z", "type": "commit"}, {"oid": "12f577c463ca3c6f0a03585ab8b5916bb6c577bc", "url": "https://github.com/apache/incubator-doris/commit/12f577c463ca3c6f0a03585ab8b5916bb6c577bc", "message": "rename", "committedDate": "2020-05-07T05:07:52Z", "type": "commit"}, {"oid": "aeac6be9967048f1bd2b016c3bce77634cafad55", "url": "https://github.com/apache/incubator-doris/commit/aeac6be9967048f1bd2b016c3bce77634cafad55", "message": "rename", "committedDate": "2020-05-07T05:07:52Z", "type": "commit"}, {"oid": "f4b09e67fbd9d587ec22aa2d3df01f735b9b6c81", "url": "https://github.com/apache/incubator-doris/commit/f4b09e67fbd9d587ec22aa2d3df01f735b9b6c81", "message": "change to char_length", "committedDate": "2020-05-07T05:07:52Z", "type": "commit"}, {"oid": "879926bb82fb82790d037d007f5f1b7e0bafb4bd", "url": "https://github.com/apache/incubator-doris/commit/879926bb82fb82790d037d007f5f1b7e0bafb4bd", "message": "add CHARACTER_LENGTH", "committedDate": "2020-05-07T05:07:52Z", "type": "commit"}, {"oid": "25de01bea6de07c8be873f0e3e3ff31c2d80b789", "url": "https://github.com/apache/incubator-doris/commit/25de01bea6de07c8be873f0e3e3ff31c2d80b789", "message": "fix unit test", "committedDate": "2020-05-07T05:07:52Z", "type": "commit"}, {"oid": "0681c9292e1c717616139d35ccd819691beb2c80", "url": "https://github.com/apache/incubator-doris/commit/0681c9292e1c717616139d35ccd819691beb2c80", "message": "fix docs", "committedDate": "2020-05-07T05:07:52Z", "type": "commit"}, {"oid": "2b80d693cc1bd9de3ddc4e3372ea746e8de408d3", "url": "https://github.com/apache/incubator-doris/commit/2b80d693cc1bd9de3ddc4e3372ea746e8de408d3", "message": "fix docs", "committedDate": "2020-05-07T05:07:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NDgxMg==", "url": "https://github.com/apache/incubator-doris/pull/3345#discussion_r421244812", "bodyText": "This can be merged in one line.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                [['char_length'], 'INT', ['VARCHAR'],\n          \n          \n            \n                        '_ZN5doris15StringFunctions16char_utf8_lengthEPN9doris_udf15FunctionContextERKNS1_9StringValE'],\n          \n          \n            \n                [['character_length'], 'INT', ['VARCHAR'],\n          \n          \n            \n                        '_ZN5doris15StringFunctions16char_utf8_lengthEPN9doris_udf15FunctionContextERKNS1_9StringValE'],\n          \n          \n            \n                [['char_length', 'character_length'], 'INT', ['VARCHAR'],\n          \n          \n            \n                        '_ZN5doris15StringFunctions16char_utf8_lengthEPN9doris_udf15FunctionContextERKNS1_9StringValE'],", "author": "imay", "createdAt": "2020-05-07T05:17:52Z", "path": "gensrc/script/doris_builtins_functions.py", "diffHunk": "@@ -533,6 +533,10 @@\n             '15FunctionContextERKNS1_9StringValERKNS1_6IntValES6_'],\n     [['length'], 'INT', ['VARCHAR'],\n             '_ZN5doris15StringFunctions6lengthEPN9doris_udf15FunctionContextERKNS1_9StringValE'],\n+    [['char_length'], 'INT', ['VARCHAR'],\n+            '_ZN5doris15StringFunctions16char_utf8_lengthEPN9doris_udf15FunctionContextERKNS1_9StringValE'],\n+    [['character_length'], 'INT', ['VARCHAR'],\n+            '_ZN5doris15StringFunctions16char_utf8_lengthEPN9doris_udf15FunctionContextERKNS1_9StringValE'],", "originalCommit": "2b80d693cc1bd9de3ddc4e3372ea746e8de408d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMzNTg1NA==", "url": "https://github.com/apache/incubator-doris/pull/3345#discussion_r421335854", "bodyText": "done @imay", "author": "yangzhg", "createdAt": "2020-05-07T08:38:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NDgxMg=="}], "type": "inlineReview"}, {"oid": "0681c9292e1c717616139d35ccd819691beb2c80", "url": "https://github.com/apache/incubator-doris/commit/0681c9292e1c717616139d35ccd819691beb2c80", "message": "fix docs", "committedDate": "2020-05-07T05:07:52Z", "type": "forcePushed"}, {"oid": "f91327dd5041b4c57aef6a2a5b484e59258933db", "url": "https://github.com/apache/incubator-doris/commit/f91327dd5041b4c57aef6a2a5b484e59258933db", "message": "merge functions", "committedDate": "2020-05-07T08:36:49Z", "type": "commit"}]}