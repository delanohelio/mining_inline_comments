{"pr_number": 5033, "pr_title": "[ODBC] Support ODBC Sink for insert into data to ODBC external table", "pr_createdAt": "2020-12-07T04:01:20Z", "pr_url": "https://github.com/apache/incubator-doris/pull/5033", "timeline": [{"oid": "c0fd67ca58a9fa33745ecac1c9c0987d3dd87bc3", "url": "https://github.com/apache/incubator-doris/commit/c0fd67ca58a9fa33745ecac1c9c0987d3dd87bc3", "message": "[ODBC] Support ODBC Sink for insert into data to ODBC external table.\n\nissue:#5031\n\n1. Support ODBC Sink for insert into data to ODBC external table.\n2. Support Transaction for ODBC sink to make sure insert into data is atomicital.\n3. The document about ODBC sink has been modified", "committedDate": "2020-12-07T03:54:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MzY2NQ==", "url": "https://github.com/apache/incubator-doris/pull/5033#discussion_r537253665", "bodyText": "if use mysql statement,  table name better to surrounded by `", "author": "yangzhg", "createdAt": "2020-12-07T06:09:05Z", "path": "be/src/exec/odbc_connecter.cpp", "diffHunk": "@@ -172,7 +180,175 @@ Status ODBCScanner::get_next_row(bool* eos) {\n     return Status::OK();\n }\n \n-Status ODBCScanner::error_status(const std::string& prefix, const std::string& error_msg) {\n+Status ODBCConnecter::init_to_write() {\n+    if (!_is_open) {\n+        return Status::InternalError( \"Init before open.\");\n+    }\n+\n+    // Allocate a statement handle\n+    ODBC_DISPOSE(_dbc, SQL_HANDLE_DBC, SQLAllocHandle(SQL_HANDLE_STMT, _dbc, &_stmt), \"alloc statement\");\n+\n+    return Status::OK();\n+}\n+\n+Status ODBCConnecter::append(const std::string& table_name, RowBatch *batch) {\n+    if (batch == nullptr || batch->num_rows() == 0) {\n+        return Status::OK();\n+    }\n+\n+    int num_rows = batch->num_rows();\n+    for (int i = 0; i < num_rows; ++i) {\n+        RETURN_IF_ERROR(insert_row(table_name, batch->get_row(i)));\n+    }\n+\n+    return Status::OK();\n+}\n+\n+Status ODBCConnecter::insert_row(const std::string& table_name, TupleRow *row) {\n+    std::stringstream ss;\n+\n+    // Construct Insert statement of mysql\n+    ss << \"INSERT INTO \" << table_name << \" VALUES (\";", "originalCommit": "c0fd67ca58a9fa33745ecac1c9c0987d3dd87bc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI5NDY3NQ==", "url": "https://github.com/apache/incubator-doris/pull/5033#discussion_r537294675", "bodyText": "I add the surround in FE", "author": "HappenLee", "createdAt": "2020-12-07T07:51:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MzY2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1NDYyNg==", "url": "https://github.com/apache/incubator-doris/pull/5033#discussion_r537254626", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Translate utf8 string to utf16 to use unicode codeing\n          \n          \n            \n                // Translate utf8 string to utf16 to use unicode encoding", "author": "yangzhg", "createdAt": "2020-12-07T06:11:51Z", "path": "be/src/exec/odbc_connecter.cpp", "diffHunk": "@@ -172,7 +180,175 @@ Status ODBCScanner::get_next_row(bool* eos) {\n     return Status::OK();\n }\n \n-Status ODBCScanner::error_status(const std::string& prefix, const std::string& error_msg) {\n+Status ODBCConnecter::init_to_write() {\n+    if (!_is_open) {\n+        return Status::InternalError( \"Init before open.\");\n+    }\n+\n+    // Allocate a statement handle\n+    ODBC_DISPOSE(_dbc, SQL_HANDLE_DBC, SQLAllocHandle(SQL_HANDLE_STMT, _dbc, &_stmt), \"alloc statement\");\n+\n+    return Status::OK();\n+}\n+\n+Status ODBCConnecter::append(const std::string& table_name, RowBatch *batch) {\n+    if (batch == nullptr || batch->num_rows() == 0) {\n+        return Status::OK();\n+    }\n+\n+    int num_rows = batch->num_rows();\n+    for (int i = 0; i < num_rows; ++i) {\n+        RETURN_IF_ERROR(insert_row(table_name, batch->get_row(i)));\n+    }\n+\n+    return Status::OK();\n+}\n+\n+Status ODBCConnecter::insert_row(const std::string& table_name, TupleRow *row) {\n+    std::stringstream ss;\n+\n+    // Construct Insert statement of mysql\n+    ss << \"INSERT INTO \" << table_name << \" VALUES (\";\n+    int num_columns = _output_expr_ctxs.size();\n+    for (int i = 0; i < num_columns; ++i) {\n+        if (i != 0) {\n+            ss << \", \";\n+        }\n+        void* item = _output_expr_ctxs[i]->get_value(row);\n+        if (item == nullptr) {\n+            ss << \"NULL\";\n+            continue;\n+        }\n+        switch (_output_expr_ctxs[i]->root()->type().type) {\n+            case TYPE_BOOLEAN:\n+            case TYPE_TINYINT:\n+                ss << (int)*static_cast<int8_t*>(item);\n+                break;\n+            case TYPE_SMALLINT:\n+                ss << *static_cast<int16_t*>(item);\n+                break;\n+            case TYPE_INT:\n+                ss << *static_cast<int32_t*>(item);\n+                break;\n+            case TYPE_BIGINT:\n+                ss << *static_cast<int64_t*>(item);\n+                break;\n+            case TYPE_FLOAT:\n+                ss << *static_cast<float*>(item);\n+                break;\n+            case TYPE_DOUBLE:\n+                ss << *static_cast<double*>(item);\n+                break;\n+            case TYPE_DATE:\n+            case TYPE_DATETIME: {\n+                char buf[64];\n+                const DateTimeValue* time_val = (const DateTimeValue*)(item);\n+                time_val->to_string(buf);\n+                ss << \"\\'\" << buf << \"\\'\";\n+                break;\n+            }\n+            case TYPE_VARCHAR:\n+            case TYPE_CHAR: {\n+                const StringValue* string_val = (const StringValue*)(item);\n+\n+                if (string_val->ptr == NULL) {\n+                    if (string_val->len == 0) {\n+                        ss << \"\\'\\'\";\n+                    } else {\n+                        ss << \"NULL\";\n+                    }\n+                } else {\n+                    ss << \"\\'\";\n+                    for (int j = 0; j < string_val->len ; ++j) {\n+                        ss << string_val->ptr[j];\n+                    }\n+                    ss << \"\\'\";\n+                }\n+                break;\n+            }\n+            case TYPE_DECIMAL: {\n+                const DecimalValue* decimal_val = reinterpret_cast<const DecimalValue*>(item);\n+                std::string decimal_str;\n+                int output_scale = _output_expr_ctxs[i]->root()->output_scale();\n+\n+                if (output_scale > 0 && output_scale <= 30) {\n+                    decimal_str = decimal_val->to_string(output_scale);\n+                } else {\n+                    decimal_str = decimal_val->to_string();\n+                }\n+                ss << decimal_str;\n+                break;\n+            }\n+            case TYPE_DECIMALV2: {\n+                const DecimalV2Value decimal_val(reinterpret_cast<const PackedInt128*>(item)->value);\n+                std::string decimal_str;\n+                int output_scale = _output_expr_ctxs[i]->root()->output_scale();\n+\n+                if (output_scale > 0 && output_scale <= 30) {\n+                    decimal_str = decimal_val.to_string(output_scale);\n+                } else {\n+                    decimal_str = decimal_val.to_string();\n+                }\n+                ss << decimal_str;\n+                break;\n+            }\n+\n+            default: {\n+                std::stringstream err_ss;\n+                err_ss << \"can't convert this type to mysql type. type = \" <<\n+                       _output_expr_ctxs[i]->root()->type();\n+                return Status::InternalError(err_ss.str());\n+            }\n+        }\n+    }\n+    ss << \")\";\n+\n+    // Translate utf8 string to utf16 to use unicode codeing", "originalCommit": "c0fd67ca58a9fa33745ecac1c9c0987d3dd87bc3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1NTA5Mw==", "url": "https://github.com/apache/incubator-doris/pull/5033#discussion_r537255093", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            class ODBCConnecter {\n          \n          \n            \n            class ODBCConnector {", "author": "yangzhg", "createdAt": "2020-12-07T06:13:09Z", "path": "be/src/exec/odbc_connecter.h", "diffHunk": "@@ -52,32 +58,46 @@ struct DataBinding : public boost::noncopyable {\n     ~DataBinding() { free(target_value_ptr); }\n };\n \n-// ODBC Scanner for scan data from ODBC\n-class ODBCScanner {\n+// ODBC Connecter for scan data from ODBC\n+class ODBCConnecter {", "originalCommit": "c0fd67ca58a9fa33745ecac1c9c0987d3dd87bc3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1NjIxNA==", "url": "https://github.com/apache/incubator-doris/pull/5033#discussion_r537256214", "bodyText": "maybe use_transaction is better", "author": "yangzhg", "createdAt": "2020-12-07T06:16:28Z", "path": "gensrc/thrift/DataSinks.thrift", "diffHunk": "@@ -82,6 +83,12 @@ struct TMysqlTableSink {\n     6: required string table\n }\n \n+struct TOdbcTableSink {\n+    1: optional string connect_string\n+    2: optional string table\n+    3: optional bool is_transaction", "originalCommit": "c0fd67ca58a9fa33745ecac1c9c0987d3dd87bc3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "40ffc5320dfa3de2726a17b3c419f5634a958c50", "url": "https://github.com/apache/incubator-doris/commit/40ffc5320dfa3de2726a17b3c419f5634a958c50", "message": "change code by comment", "committedDate": "2020-12-07T07:54:16Z", "type": "commit"}, {"oid": "40ffc5320dfa3de2726a17b3c419f5634a958c50", "url": "https://github.com/apache/incubator-doris/commit/40ffc5320dfa3de2726a17b3c419f5634a958c50", "message": "change code by comment", "committedDate": "2020-12-07T07:54:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk0ODkxMg==", "url": "https://github.com/apache/incubator-doris/pull/5033#discussion_r538948912", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ODBCConnector::ODBCConnector(const ODBCConneterParam& param)\n          \n          \n            \n            ODBCConnector::ODBCConnector(const ODBCConnetorParam& param)", "author": "yangzhg", "createdAt": "2020-12-09T02:06:06Z", "path": "be/src/exec/odbc_connector.cpp", "diffHunk": "@@ -48,18 +50,24 @@ static std::u16string utf8_to_wstring(const std::string& str) {\n \n namespace doris {\n \n-ODBCScanner::ODBCScanner(const ODBCScannerParam& param)\n+ODBCConnector::ODBCConnector(const ODBCConneterParam& param)", "originalCommit": "047ba10105c6dddccb1e4841b31e01477ac2ab94", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7e546fbad8d4b6063562b48095944fc838e8839f", "url": "https://github.com/apache/incubator-doris/commit/7e546fbad8d4b6063562b48095944fc838e8839f", "message": "rename connecter to connector", "committedDate": "2020-12-09T03:03:18Z", "type": "commit"}, {"oid": "7e546fbad8d4b6063562b48095944fc838e8839f", "url": "https://github.com/apache/incubator-doris/commit/7e546fbad8d4b6063562b48095944fc838e8839f", "message": "rename connecter to connector", "committedDate": "2020-12-09T03:03:18Z", "type": "forcePushed"}]}