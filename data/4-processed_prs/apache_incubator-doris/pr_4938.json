{"pr_number": 4938, "pr_title": "[Schema change] Support More column type in schema change", "pr_createdAt": "2020-11-23T08:25:19Z", "pr_url": "https://github.com/apache/incubator-doris/pull/4938", "timeline": [{"oid": "08f228b257102470105e97c31888399738efefb0", "url": "https://github.com/apache/incubator-doris/commit/08f228b257102470105e97c31888399738efefb0", "message": "[Schema change] This pr of 2 mainly change\n\n1. Support modify column type CHAR to TINYINT/SMALLINT/INT/BIGINT/LARGEINT/FLOAT/DOUBLE/DATE\nand TINYINT/SMALLINT/INT/BIGINT/LARGEINT/FLOAT/DOUBLE convert to a wider range of numeric types (#4937)\n\n2. Use template to refactor code of types.h and schema_change.cpp to delete redundant code.", "committedDate": "2020-11-23T08:23:35Z", "type": "commit"}, {"oid": "534836046f33a01463d02790847a2c508d1dd88e", "url": "https://github.com/apache/incubator-doris/commit/534836046f33a01463d02790847a2c508d1dd88e", "message": "change indent and remove some code", "committedDate": "2020-11-23T10:38:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE3OTExMA==", "url": "https://github.com/apache/incubator-doris/pull/4938#discussion_r529179110", "bodyText": "There may use traits ?\nOr use if constexpr (std::is_floating_point_v)) to distinguish the two cases.", "author": "chaoyli", "createdAt": "2020-11-24T03:31:10Z", "path": "be/src/olap/types.h", "diffHunk": "@@ -495,12 +496,32 @@ struct BaseFieldtypeTraits : public CppTypeTraits<field_type> {\n     }\n };\n \n+static void prepare_char_before_convert(const void* src) {\n+    Slice* slice = const_cast<Slice*>(reinterpret_cast<const Slice*>(src));\n+    char* buf = slice->data;\n+    auto p = slice->size - 1;\n+    while (p >= 0 && buf[p] == '\\0') {\n+        p--;\n+    }\n+    slice->size = p + 1;\n+}\n+\n template <typename T>\n-OLAPStatus convert_int_from_varchar(void* dest, const void* src) {\n-    using SrcType = typename CppTypeTraits<OLAP_FIELD_TYPE_VARCHAR>::CppType;\n-    auto src_value = reinterpret_cast<const SrcType*>(src);\n+T convert_from_varchar(const Slice* src_value, StringParser::ParseResult& parse_res, std::true_type) {\n+    return StringParser::string_to_int<T>(src_value->get_data(), src_value->get_size(), &parse_res);\n+}\n+\n+template <typename T>", "originalCommit": "534836046f33a01463d02790847a2c508d1dd88e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMzMDkwOA==", "url": "https://github.com/apache/incubator-doris/pull/4938#discussion_r529330908", "bodyText": "Hi, chaoyli.\nif constexpr only support in c++17 and std::is_floating_point_v support in c++14.\nNow, Doris only support C++11, So I use label assignment to distinguish the float and int.", "author": "HappenLee", "createdAt": "2020-11-24T09:17:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE3OTExMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE4MjQ2NQ==", "url": "https://github.com/apache/incubator-doris/pull/4938#discussion_r529182465", "bodyText": "use std::is_signed for what?", "author": "chaoyli", "createdAt": "2020-11-24T03:43:13Z", "path": "be/src/olap/types.h", "diffHunk": "@@ -509,98 +530,55 @@ OLAPStatus convert_int_from_varchar(void* dest, const void* src) {\n }\n \n template <typename T>\n-OLAPStatus convert_float_from_varchar(void* dest, const void* src) {\n-    using SrcType = typename CppTypeTraits<OLAP_FIELD_TYPE_VARCHAR>::CppType;\n-    auto src_value = reinterpret_cast<const SrcType *>(src);\n-    StringParser::ParseResult parse_res;\n-    T result = StringParser::string_to_float<T>(src_value->get_data(), src_value->get_size(), &parse_res);\n-    if (UNLIKELY(parse_res != StringParser::PARSE_SUCCESS)) {\n-        return OLAPStatus::OLAP_ERR_INVALID_SCHEMA;\n-    }\n-    *reinterpret_cast<T*>(dest) = result;\n-    return OLAPStatus::OLAP_SUCCESS;\n+OLAPStatus arithmetic_convert_from_char(void* dest, const void* src) {\n+    prepare_char_before_convert(src);\n+    return arithmetic_convert_from_varchar<T>(dest, src);\n }\n \n-template<FieldType field_type>\n-struct FieldTypeTraits : public BaseFieldtypeTraits<field_type> { };\n+// Using ArithmeTicFieldtypeTraits to Derived code for OLAP_FIELD_TYPE_XXXINT, OLAP_FIELD_TYPE_FLOAT,\n+// OLAP_FIELD_TYPE_DOUBLE, to reduce redundant code\n+template <FieldType fieldType, bool isArithmetic>\n+struct ArithmeTicFieldtypeTraits : public BaseFieldtypeTraits<fieldType> {\n+    using CppType = typename CppTypeTraits<fieldType>::CppType;\n \n-template<>\n-struct FieldTypeTraits<OLAP_FIELD_TYPE_BOOL> : public BaseFieldtypeTraits<OLAP_FIELD_TYPE_BOOL> {\n     static std::string to_string(const void* src) {\n-        char buf[1024] = {'\\0'};\n-        snprintf(buf, sizeof(buf), \"%d\", *reinterpret_cast<const bool*>(src));\n-        return std::string(buf);\n+        return std::to_string(*reinterpret_cast<const CppType*>(src));\n     }\n-    static void set_to_max(void* buf) {\n-        (*(bool*)buf) = true;\n-    }\n-    static void set_to_min(void* buf) {\n-        (*(bool*)buf) = false;\n-    }\n-};\n \n-template<>\n-struct FieldTypeTraits<OLAP_FIELD_TYPE_TINYINT> : public BaseFieldtypeTraits<OLAP_FIELD_TYPE_TINYINT> {\n-    static std::string to_string(const void* src) {\n-        char buf[1024] = {'\\0'};\n-        snprintf(buf, sizeof(buf), \"%d\", *reinterpret_cast<const int8_t*>(src));\n-        return std::string(buf);\n-    }\n     static OLAPStatus convert_from(void* dest, const void* src, const TypeInfo* src_type, MemPool* mem_pool) {\n         if (src_type->type() == OLAP_FIELD_TYPE_VARCHAR) {\n-            return convert_int_from_varchar<CppType>(dest, src);\n+            return arithmetic_convert_from_varchar<CppType>(dest, src);\n+        } else if (src_type->type() == OLAP_FIELD_TYPE_CHAR) {\n+            return arithmetic_convert_from_char<CppType>(dest, src);\n         }\n         return OLAPStatus::OLAP_ERR_INVALID_SCHEMA;\n     }\n };\n \n-template<>\n-struct FieldTypeTraits<OLAP_FIELD_TYPE_SMALLINT> : public BaseFieldtypeTraits<OLAP_FIELD_TYPE_SMALLINT> {\n-    static std::string to_string(const void* src) {\n-        char buf[1024] = {'\\0'};\n-        snprintf(buf, sizeof(buf), \"%d\", *reinterpret_cast<const int16_t*>(src));\n-        return std::string(buf);\n-    }\n-    static OLAPStatus convert_from(void* dest, const void* src, const TypeInfo* src_type, MemPool* mem_pool) {\n-        if (src_type->type() == OLAP_FIELD_TYPE_VARCHAR) {\n-            return convert_int_from_varchar<CppType>(dest, src);\n-        }\n-        return OLAPStatus::OLAP_ERR_INVALID_SCHEMA;\n-    }\n-};\n+template <FieldType fieldType>\n+struct ArithmeTicFieldtypeTraits<fieldType, false> : public BaseFieldtypeTraits<fieldType> {};\n \n-template<>\n-struct FieldTypeTraits<OLAP_FIELD_TYPE_INT> : public BaseFieldtypeTraits<OLAP_FIELD_TYPE_INT> {\n-    static std::string to_string(const void* src) {\n-        char buf[1024] = {'\\0'};\n-        snprintf(buf, sizeof(buf), \"%d\", *reinterpret_cast<const int32_t *>(src));\n-        return std::string(buf);\n-    }\n-    static OLAPStatus convert_from(void* dest, const void* src, const TypeInfo* src_type, MemPool* mem_pool) {\n-        if (src_type->type() == OLAP_FIELD_TYPE_VARCHAR) {\n-            return convert_int_from_varchar<CppType>(dest, src);\n-        }\n-        return OLAPStatus::OLAP_ERR_INVALID_SCHEMA;\n-    }\n-};\n+template <FieldType fieldType>\n+struct FieldTypeTraits : public ArithmeTicFieldtypeTraits<fieldType,\n+        std::is_arithmetic<typename BaseFieldtypeTraits<fieldType>::CppType>::value && std::is_signed<typename BaseFieldtypeTraits<fieldType>::CppType>::value> {};", "originalCommit": "534836046f33a01463d02790847a2c508d1dd88e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE5OTY3Ng==", "url": "https://github.com/apache/incubator-doris/pull/4938#discussion_r529199676", "bodyText": "Now\uff0c ArithmeticField just to keep the small with old code.\nold code only Partial Template Specialization the OLAP_FIELD_TYPE_INT but not OLAP_FIELD_TYPE_UNSIGNED_INT. There is no need to Partial Template Specialization for unsign type, so there check the CppType whether is_signed", "author": "HappenLee", "createdAt": "2020-11-24T04:45:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE4MjQ2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE4Mjk3OQ==", "url": "https://github.com/apache/incubator-doris/pull/4938#discussion_r529182979", "bodyText": "Numeric may be a better name.", "author": "chaoyli", "createdAt": "2020-11-24T03:44:47Z", "path": "be/src/olap/types.h", "diffHunk": "@@ -509,98 +530,55 @@ OLAPStatus convert_int_from_varchar(void* dest, const void* src) {\n }\n \n template <typename T>\n-OLAPStatus convert_float_from_varchar(void* dest, const void* src) {\n-    using SrcType = typename CppTypeTraits<OLAP_FIELD_TYPE_VARCHAR>::CppType;\n-    auto src_value = reinterpret_cast<const SrcType *>(src);\n-    StringParser::ParseResult parse_res;\n-    T result = StringParser::string_to_float<T>(src_value->get_data(), src_value->get_size(), &parse_res);\n-    if (UNLIKELY(parse_res != StringParser::PARSE_SUCCESS)) {\n-        return OLAPStatus::OLAP_ERR_INVALID_SCHEMA;\n-    }\n-    *reinterpret_cast<T*>(dest) = result;\n-    return OLAPStatus::OLAP_SUCCESS;\n+OLAPStatus arithmetic_convert_from_char(void* dest, const void* src) {\n+    prepare_char_before_convert(src);\n+    return arithmetic_convert_from_varchar<T>(dest, src);\n }\n \n-template<FieldType field_type>\n-struct FieldTypeTraits : public BaseFieldtypeTraits<field_type> { };\n+// Using ArithmeTicFieldtypeTraits to Derived code for OLAP_FIELD_TYPE_XXXINT, OLAP_FIELD_TYPE_FLOAT,\n+// OLAP_FIELD_TYPE_DOUBLE, to reduce redundant code\n+template <FieldType fieldType, bool isArithmetic>\n+struct ArithmeTicFieldtypeTraits : public BaseFieldtypeTraits<fieldType> {", "originalCommit": "534836046f33a01463d02790847a2c508d1dd88e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE5ODc0NA==", "url": "https://github.com/apache/incubator-doris/pull/4938#discussion_r529198744", "bodyText": "OK\uff0ci will consider to change the name of it", "author": "HappenLee", "createdAt": "2020-11-24T04:42:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE4Mjk3OQ=="}], "type": "inlineReview"}, {"oid": "5137decbbcb8a201a3e390f87ad770bdcc9693de", "url": "https://github.com/apache/incubator-doris/commit/5137decbbcb8a201a3e390f87ad770bdcc9693de", "message": "change indent and remove some code", "committedDate": "2020-11-24T10:20:43Z", "type": "commit"}, {"oid": "5137decbbcb8a201a3e390f87ad770bdcc9693de", "url": "https://github.com/apache/incubator-doris/commit/5137decbbcb8a201a3e390f87ad770bdcc9693de", "message": "change indent and remove some code", "committedDate": "2020-11-24T10:20:43Z", "type": "forcePushed"}]}