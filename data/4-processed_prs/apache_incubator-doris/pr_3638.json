{"pr_number": 3638, "pr_title": "Support utf-8 encoding in instr, locate, locate_pos, lpad, rpad", "pr_createdAt": "2020-05-20T06:26:07Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3638", "timeline": [{"oid": "47c910d576c1869697b2ba2173db0d3e31dc2f7d", "url": "https://github.com/apache/incubator-doris/commit/47c910d576c1869697b2ba2173db0d3e31dc2f7d", "message": "Supoort utf-8 encoding in `instr`, `locate`, `locate_pos`, `lpad`, `rpad`", "committedDate": "2020-05-20T06:37:33Z", "type": "commit"}, {"oid": "47c910d576c1869697b2ba2173db0d3e31dc2f7d", "url": "https://github.com/apache/incubator-doris/commit/47c910d576c1869697b2ba2173db0d3e31dc2f7d", "message": "Supoort utf-8 encoding in `instr`, `locate`, `locate_pos`, `lpad`, `rpad`", "committedDate": "2020-05-20T06:37:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwMTY2MA==", "url": "https://github.com/apache/incubator-doris/pull/3638#discussion_r428101660", "bodyText": "Should use operator[]", "author": "kangkaisen", "createdAt": "2020-05-20T15:24:22Z", "path": "be/src/exprs/string_functions.cpp", "diffHunk": "@@ -196,28 +196,56 @@ StringVal StringFunctions::lpad(\n     if (str.is_null || len.is_null || pad.is_null || len.val < 0) {\n         return StringVal::null();\n     }\n+\n+    size_t str_char_size = 0;\n+    size_t pad_char_size = 0;\n+    size_t byte_pos = 0;\n+    std::vector<size_t> str_index;\n+    std::vector<size_t> pad_index;\n+    for (size_t i = 0, char_size = 0; i < str.len; i += char_size) {\n+        char_size = get_utf8_byte_length((unsigned)(str.ptr)[i]);\n+        str_index.push_back(byte_pos);\n+        byte_pos += char_size;\n+        ++str_char_size;\n+    }\n+    byte_pos = 0;\n+    for (size_t i = 0, char_size = 0; i < pad.len; i += char_size) {\n+        char_size = get_utf8_byte_length((unsigned)(pad.ptr)[i]);\n+        pad_index.push_back(byte_pos);\n+        byte_pos += char_size;\n+        ++pad_char_size;\n+    }\n+    \n     // Corner cases: Shrink the original string, or leave it alone.\n     // TODO: Hive seems to go into an infinite loop if pad.len == 0,\n     // so we should pay attention to Hive's future solution to be compatible.\n-    if (len.val <= str.len || pad.len == 0) {\n-        return StringVal(str.ptr, len.val);\n+    if (len.val <= str_char_size || pad.len == 0) {\n+        if (len.val >= str_index.size()) {\n+            return StringVal::null();\n+        }\n+        return StringVal(str.ptr, str_index.at(len.val));\n     }\n \n     // TODO pengyubing\n     // StringVal result = StringVal::create_temp_string_val(context, len.val);\n-    StringVal result(context, len.val);\n+    int32_t pad_byte_len = 0;\n+    int32_t pad_times = (len.val - str_char_size) / pad_char_size;\n+    int32_t pad_remainder = (len.val - str_char_size) % pad_char_size;\n+    pad_byte_len = pad_times * pad.len;\n+    pad_byte_len += pad_index.at(pad_remainder);", "originalCommit": "47c910d576c1869697b2ba2173db0d3e31dc2f7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNjgxNQ==", "url": "https://github.com/apache/incubator-doris/pull/3638#discussion_r428406815", "bodyText": "operator[]  isn't bound-checked  if the requested position is out of range , it will hide the problem and make it difficault to find problem when when change the code", "author": "yangzhg", "createdAt": "2020-05-21T02:10:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwMTY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1NDQyNg==", "url": "https://github.com/apache/incubator-doris/pull/3638#discussion_r428454426", "bodyText": "I know operator[] doesn't have bound-checked.\nBut:\n\nHere all code is under your control. couldn't we make sure there is no out of range?\n\n2.If you use at, you should try catch the out of range exception, otherwise, I think no meaning to use at. because operator[] performance is better then at.", "author": "kangkaisen", "createdAt": "2020-05-21T05:37:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwMTY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5NDAzNA==", "url": "https://github.com/apache/incubator-doris/pull/3638#discussion_r428494034", "bodyText": "1 the code is now under my control, but if some modify the code in the future and has index out of range problem, it will not report any error, it will be a risk and make it difficult to solve it.\n2. this code is not the critical point of performence,  and just an if statement   will not cause too much impact on performance.  A wrong access to unexcepted memory is more harmful than this performance loss", "author": "yangzhg", "createdAt": "2020-05-21T07:36:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwMTY2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwMjgzNQ==", "url": "https://github.com/apache/incubator-doris/pull/3638#discussion_r428102835", "bodyText": "Reduplicative code\n    for (size_t i = 0, char_size = 0; i < str.len; i += char_size) {\n        char_size = get_utf8_byte_length((unsigned)(str.ptr)[i]);\n        str_index.push_back(byte_pos);\n        byte_pos += char_size;\n        ++str_char_size;\n    }", "author": "kangkaisen", "createdAt": "2020-05-20T15:25:51Z", "path": "be/src/exprs/string_functions.cpp", "diffHunk": "@@ -196,28 +196,56 @@ StringVal StringFunctions::lpad(\n     if (str.is_null || len.is_null || pad.is_null || len.val < 0) {\n         return StringVal::null();\n     }\n+\n+    size_t str_char_size = 0;\n+    size_t pad_char_size = 0;\n+    size_t byte_pos = 0;\n+    std::vector<size_t> str_index;\n+    std::vector<size_t> pad_index;\n+    for (size_t i = 0, char_size = 0; i < str.len; i += char_size) {", "originalCommit": "47c910d576c1869697b2ba2173db0d3e31dc2f7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d03028c85d52094c0f98ec4466151de35fc0c1d9", "url": "https://github.com/apache/incubator-doris/commit/d03028c85d52094c0f98ec4466151de35fc0c1d9", "message": "fix some bug", "committedDate": "2020-05-21T04:48:52Z", "type": "commit"}, {"oid": "9af2faa176bb244fa94110172fe54e17c92e9ef5", "url": "https://github.com/apache/incubator-doris/commit/9af2faa176bb244fa94110172fe54e17c92e9ef5", "message": " add docs", "committedDate": "2020-05-21T08:05:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU1MTcxMg==", "url": "https://github.com/apache/incubator-doris/pull/3638#discussion_r428551712", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                for (size_t i = 0, char_size = 0; i < str.len; i += char_size) {\n          \n          \n            \n                for (size_t i = 0; i < str.len; i += char_size) {", "author": "kangpinghuang", "createdAt": "2020-05-21T09:43:05Z", "path": "be/src/exprs/string_functions.cpp", "diffHunk": "@@ -49,6 +49,17 @@ size_t get_utf8_byte_length(unsigned char byte) {\n     }\n     return char_size;\n }\n+size_t get_char_len(const StringVal& str, std::vector<size_t>* str_index) {\n+    size_t char_len = 0;\n+    size_t byte_pos = 0;\n+    for (size_t i = 0, char_size = 0; i < str.len; i += char_size) {", "originalCommit": "9af2faa176bb244fa94110172fe54e17c92e9ef5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4MDQwMQ==", "url": "https://github.com/apache/incubator-doris/pull/3638#discussion_r428580401", "bodyText": "char_size = 0 cannot removed", "author": "yangzhg", "createdAt": "2020-05-21T10:49:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU1MTcxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU1MTkyOQ==", "url": "https://github.com/apache/incubator-doris/pull/3638#discussion_r428551929", "bodyText": "just use i to replace byte_pos and remove byte_pos", "author": "kangpinghuang", "createdAt": "2020-05-21T09:43:34Z", "path": "be/src/exprs/string_functions.cpp", "diffHunk": "@@ -49,6 +49,17 @@ size_t get_utf8_byte_length(unsigned char byte) {\n     }\n     return char_size;\n }\n+size_t get_char_len(const StringVal& str, std::vector<size_t>* str_index) {\n+    size_t char_len = 0;\n+    size_t byte_pos = 0;\n+    for (size_t i = 0, char_size = 0; i < str.len; i += char_size) {\n+        char_size = get_utf8_byte_length((unsigned)(str.ptr)[i]);\n+        str_index->push_back(byte_pos);", "originalCommit": "9af2faa176bb244fa94110172fe54e17c92e9ef5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU1MjAzNg==", "url": "https://github.com/apache/incubator-doris/pull/3638#discussion_r428552036", "bodyText": "can remove this variable", "author": "kangpinghuang", "createdAt": "2020-05-21T09:43:48Z", "path": "be/src/exprs/string_functions.cpp", "diffHunk": "@@ -49,6 +49,17 @@ size_t get_utf8_byte_length(unsigned char byte) {\n     }\n     return char_size;\n }\n+size_t get_char_len(const StringVal& str, std::vector<size_t>* str_index) {\n+    size_t char_len = 0;\n+    size_t byte_pos = 0;", "originalCommit": "9af2faa176bb244fa94110172fe54e17c92e9ef5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "207890e4ab8de94d2b0a3f8aec5796d1de8fe364", "url": "https://github.com/apache/incubator-doris/commit/207890e4ab8de94d2b0a3f8aec5796d1de8fe364", "message": "fix comment", "committedDate": "2020-05-21T10:50:21Z", "type": "commit"}]}