{"pr_number": 3947, "pr_title": "[Enhance] Add prepare phase for some timestamp functions", "pr_createdAt": "2020-06-25T08:56:11Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3947", "timeline": [{"oid": "29595bee29f9cfc6d298e7527beec7346a1a9823", "url": "https://github.com/apache/incubator-doris/commit/29595bee29f9cfc6d298e7527beec7346a1a9823", "message": "first", "committedDate": "2020-06-25T09:04:04Z", "type": "commit"}, {"oid": "9fed9d90c17523c2362966cc726097216641c155", "url": "https://github.com/apache/incubator-doris/commit/9fed9d90c17523c2362966cc726097216641c155", "message": "add doc", "committedDate": "2020-06-25T09:04:04Z", "type": "commit"}, {"oid": "cba3a588ce997f5f52009caf5ed650def0f4b235", "url": "https://github.com/apache/incubator-doris/commit/cba3a588ce997f5f52009caf5ed650def0f4b235", "message": "fix build", "committedDate": "2020-06-25T09:56:31Z", "type": "commit"}, {"oid": "b4b0d4674a80053d2e27dd2e95dc6c44eaccd7d4", "url": "https://github.com/apache/incubator-doris/commit/b4b0d4674a80053d2e27dd2e95dc6c44eaccd7d4", "message": "fix ut", "committedDate": "2020-06-25T10:16:25Z", "type": "commit"}, {"oid": "b4b0d4674a80053d2e27dd2e95dc6c44eaccd7d4", "url": "https://github.com/apache/incubator-doris/commit/b4b0d4674a80053d2e27dd2e95dc6c44eaccd7d4", "message": "fix ut", "committedDate": "2020-06-25T10:16:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEwODA5MQ==", "url": "https://github.com/apache/incubator-doris/pull/3947#discussion_r446108091", "bodyText": "why \"+00:00\" modify to \"+0:00\"", "author": "wutiangan", "createdAt": "2020-06-26T10:41:38Z", "path": "be/src/exprs/timestamp_functions.cpp", "diffHunk": "@@ -599,7 +673,7 @@ IntVal TimestampFunctions::to_unix(\n \n DateTimeVal TimestampFunctions::utc_timestamp(FunctionContext* context) {\n     DateTimeValue dtv;\n-    if (!dtv.from_unixtime(context->impl()->state()->timestamp_ms() / 1000, \"+00:00\")) {\n+    if (!dtv.from_unixtime(context->impl()->state()->timestamp_ms() / 1000, \"+0:00\")) {", "originalCommit": "b4b0d4674a80053d2e27dd2e95dc6c44eaccd7d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5NTA5OQ==", "url": "https://github.com/apache/incubator-doris/pull/3947#discussion_r446195099", "bodyText": "My bad, I will change it back.", "author": "morningman", "createdAt": "2020-06-26T13:48:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEwODA5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEwODc5NA==", "url": "https://github.com/apache/incubator-doris/pull/3947#discussion_r446108794", "bodyText": "in old code, first invoke function \"compute_format_len\" , then invoke function \"convert_format\", but your call sequence is the opposite , is it matter?", "author": "wutiangan", "createdAt": "2020-06-26T10:43:27Z", "path": "be/src/exprs/timestamp_functions.cpp", "diffHunk": "@@ -451,20 +451,79 @@ BigIntVal TimestampFunctions::timestamp_diff(FunctionContext* ctx, const DateTim\n     }\n }\n \n+void TimestampFunctions::format_prepare(\n+        doris_udf::FunctionContext* context,\n+        doris_udf::FunctionContext::FunctionStateScope scope) {\n+\n+    if (scope != FunctionContext::FRAGMENT_LOCAL\n+            || context->get_num_args() < 2\n+            || context->get_arg_type(1)->type != doris_udf::FunctionContext::Type::TYPE_VARCHAR\n+            || !context->is_arg_constant(1)) {\n+        VLOG(10) << \"format_prepare returned\";\n+        return;\n+    }\n+\n+    FormatCtx* fc = new FormatCtx();\n+    context->set_function_state(scope, fc);\n+\n+    StringVal* format = reinterpret_cast<StringVal*>(context->get_constant_arg(1));\n+    if (UNLIKELY(format->is_null)) {\n+        fc->is_valid = false;\n+        return;\n+    }\n+\n+    fc->fmt = convert_format(context, *format);\n+    int format_len = DateTimeValue::compute_format_len((const char*) fc->fmt.ptr, fc->fmt.len);\n+    if (UNLIKELY(format_len >= 128)) {\n+        fc->is_valid = false;\n+        return;\n+    }\n+\n+    fc->is_valid = true;\n+    return;\n+}\n+\n+void TimestampFunctions::format_close(\n+        doris_udf::FunctionContext* context,\n+        doris_udf::FunctionContext::FunctionStateScope scope) {\n+    if (scope != FunctionContext::FRAGMENT_LOCAL) {\n+        return;\n+    }\n+\n+    FormatCtx* fc = reinterpret_cast<FormatCtx*>(context->get_function_state(FunctionContext::FRAGMENT_LOCAL));\n+    if (fc != nullptr) {\n+        delete fc;\n+    }\n+}\n+\n StringVal TimestampFunctions::date_format(\n         FunctionContext* ctx, const DateTimeVal& ts_val, const StringVal& format) {\n     if (ts_val.is_null || format.is_null) {\n         return StringVal::null();\n     }\n+\n     DateTimeValue ts_value = DateTimeValue::from_datetime_val(ts_val);\n-    if (ts_value.compute_format_len((const char*)format.ptr, format.len) >= 128) {\n-        return StringVal::null();\n+    FormatCtx* fc = reinterpret_cast<FormatCtx*>(ctx->get_function_state(FunctionContext::FRAGMENT_LOCAL));\n+    if (UNLIKELY(fc == nullptr)) {\n+        // prepare phase failed, calculate at runtime\n+        StringVal new_fmt = convert_format(ctx, format);\n+        if (DateTimeValue::compute_format_len((const char*) new_fmt.ptr, new_fmt.len) >= 128) {", "originalCommit": "b4b0d4674a80053d2e27dd2e95dc6c44eaccd7d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5NDU1MA==", "url": "https://github.com/apache/incubator-doris/pull/3947#discussion_r446194550", "bodyText": "Doesn't matter, the old code's order is incorrect, but it doesn't matter, because compute_format_len will return < 128 in most cases.", "author": "morningman", "createdAt": "2020-06-26T13:47:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEwODc5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEwOTYwNQ==", "url": "https://github.com/apache/incubator-doris/pull/3947#discussion_r446109605", "bodyText": "can ctz put it into cache like 'data foramt' function?", "author": "wutiangan", "createdAt": "2020-06-26T10:45:37Z", "path": "be/src/runtime/datetime_value.cpp", "diffHunk": "@@ -1535,7 +1521,10 @@ bool DateTimeValue::unix_timestamp(int64_t* timestamp, const std::string& timezo\n     if (!find_cctz_time_zone(timezone, ctz)) {", "originalCommit": "b4b0d4674a80053d2e27dd2e95dc6c44eaccd7d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI3OTcwNg==", "url": "https://github.com/apache/incubator-doris/pull/3947#discussion_r446279706", "bodyText": "It needs a thread safe cache.\nSince there is not much calls of find_cctz_time_zone(), I think we can improve it later.", "author": "morningman", "createdAt": "2020-06-26T16:15:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEwOTYwNQ=="}], "type": "inlineReview"}, {"oid": "9ced269a015e30533d332eff1846c3c4d8060dd1", "url": "https://github.com/apache/incubator-doris/commit/9ced269a015e30533d332eff1846c3c4d8060dd1", "message": "add convert_tz", "committedDate": "2020-06-26T16:12:31Z", "type": "commit"}, {"oid": "d411242c7a44f3d0d7f071ac5d8256ca039fbae4", "url": "https://github.com/apache/incubator-doris/commit/d411242c7a44f3d0d7f071ac5d8256ca039fbae4", "message": "add script", "committedDate": "2020-06-27T01:29:26Z", "type": "commit"}, {"oid": "1101414fbba2f9da533f824878264eadbda3aa8e", "url": "https://github.com/apache/incubator-doris/commit/1101414fbba2f9da533f824878264eadbda3aa8e", "message": "remove code", "committedDate": "2020-06-28T11:31:16Z", "type": "commit"}]}