{"pr_number": 2752, "pr_title": "Add be bitmap udf ", "pr_createdAt": "2020-01-14T03:52:18Z", "pr_url": "https://github.com/apache/incubator-doris/pull/2752", "timeline": [{"oid": "ea5b24929f2853ee804e508a36b870ec73b90b85", "url": "https://github.com/apache/incubator-doris/commit/ea5b24929f2853ee804e508a36b870ec73b90b85", "message": "add bitmap udf", "committedDate": "2020-01-14T03:46:10Z", "type": "commit"}, {"oid": "4f1a1db03e1903f6ddcc8f642f620d7492af1635", "url": "https://github.com/apache/incubator-doris/commit/4f1a1db03e1903f6ddcc8f642f620d7492af1635", "message": "add bitmap udf", "committedDate": "2020-01-14T03:47:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MzI3OA==", "url": "https://github.com/apache/incubator-doris/pull/2752#discussion_r366153278", "bodyText": "zero size means the src input is a object pointer", "author": "kangkaisen", "createdAt": "2020-01-14T04:59:43Z", "path": "be/src/exprs/bitmap_function.cpp", "diffHunk": "@@ -465,6 +465,43 @@ StringVal BitmapFunctions::bitmap_from_string(FunctionContext* ctx, const String\n     return result;\n }\n \n+BooleanVal BitmapFunctions::bitmap_contains(FunctionContext *ctx, const StringVal &src, const IntVal &input) {\n+    if (src.is_null || input.is_null) {\n+        return BooleanVal::null();\n+    }\n+\n+    if (src.len == 0) {", "originalCommit": "4f1a1db03e1903f6ddcc8f642f620d7492af1635", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MzMzOA==", "url": "https://github.com/apache/incubator-doris/pull/2752#discussion_r366153338", "bodyText": "zero size means the src input is a object pointer", "author": "kangkaisen", "createdAt": "2020-01-14T05:00:09Z", "path": "be/src/exprs/bitmap_function.cpp", "diffHunk": "@@ -465,6 +465,43 @@ StringVal BitmapFunctions::bitmap_from_string(FunctionContext* ctx, const String\n     return result;\n }\n \n+BooleanVal BitmapFunctions::bitmap_contains(FunctionContext *ctx, const StringVal &src, const IntVal &input) {\n+    if (src.is_null || input.is_null) {\n+        return BooleanVal::null();\n+    }\n+\n+    if (src.len == 0) {\n+        return BooleanVal(false);\n+    }\n+\n+    RoaringBitmap bitmap;\n+    bitmap.update(input.val);\n+    bitmap.intersect(RoaringBitmap((char*)src.ptr));\n+\n+    if (bitmap.cardinality() == 1) {\n+        return BooleanVal(true);\n+    }\n+    return BooleanVal(false);\n+}\n+\n+BooleanVal BitmapFunctions::bitmap_has_any(FunctionContext *ctx, const StringVal &lhs, const StringVal &rhs) {\n+    if (lhs.is_null || rhs.is_null) {\n+        return BooleanVal::null();\n+    }\n+\n+    if (lhs.len == 0 || rhs.len == 0) {", "originalCommit": "4f1a1db03e1903f6ddcc8f642f620d7492af1635", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MjUwMQ==", "url": "https://github.com/apache/incubator-doris/pull/2752#discussion_r366152501", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            BooleanVal BitmapFunctions::bitmap_contains(FunctionContext *ctx, const StringVal &src, const IntVal &input) {\n          \n          \n            \n            BooleanVal BitmapFunctions::bitmap_contains(FunctionContext* ctx, const StringVal& src, const IntVal& input) {", "author": "imay", "createdAt": "2020-01-14T04:55:28Z", "path": "be/src/exprs/bitmap_function.cpp", "diffHunk": "@@ -465,6 +465,43 @@ StringVal BitmapFunctions::bitmap_from_string(FunctionContext* ctx, const String\n     return result;\n }\n \n+BooleanVal BitmapFunctions::bitmap_contains(FunctionContext *ctx, const StringVal &src, const IntVal &input) {", "originalCommit": "4f1a1db03e1903f6ddcc8f642f620d7492af1635", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MjgwMQ==", "url": "https://github.com/apache/incubator-doris/pull/2752#discussion_r366152801", "bodyText": "when src.len == 0, src.ptr points to a bitmap object. we should handle that case", "author": "imay", "createdAt": "2020-01-14T04:57:20Z", "path": "be/src/exprs/bitmap_function.cpp", "diffHunk": "@@ -465,6 +465,43 @@ StringVal BitmapFunctions::bitmap_from_string(FunctionContext* ctx, const String\n     return result;\n }\n \n+BooleanVal BitmapFunctions::bitmap_contains(FunctionContext *ctx, const StringVal &src, const IntVal &input) {\n+    if (src.is_null || input.is_null) {\n+        return BooleanVal::null();\n+    }\n+\n+    if (src.len == 0) {", "originalCommit": "4f1a1db03e1903f6ddcc8f642f620d7492af1635", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MzEyOQ==", "url": "https://github.com/apache/incubator-doris/pull/2752#discussion_r366153129", "bodyText": "RoaringBitmap has already had contains method, you can use it directly", "author": "imay", "createdAt": "2020-01-14T04:58:55Z", "path": "be/src/exprs/bitmap_function.cpp", "diffHunk": "@@ -465,6 +465,43 @@ StringVal BitmapFunctions::bitmap_from_string(FunctionContext* ctx, const String\n     return result;\n }\n \n+BooleanVal BitmapFunctions::bitmap_contains(FunctionContext *ctx, const StringVal &src, const IntVal &input) {\n+    if (src.is_null || input.is_null) {\n+        return BooleanVal::null();\n+    }\n+\n+    if (src.len == 0) {\n+        return BooleanVal(false);\n+    }\n+\n+    RoaringBitmap bitmap;\n+    bitmap.update(input.val);\n+    bitmap.intersect(RoaringBitmap((char*)src.ptr));", "originalCommit": "4f1a1db03e1903f6ddcc8f642f620d7492af1635", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MzM5Nw==", "url": "https://github.com/apache/incubator-doris/pull/2752#discussion_r366153397", "bodyText": "Because we don't have unsigned int, but the bit value can exceede the max int. Better use BigIntValue as bit index", "author": "imay", "createdAt": "2020-01-14T05:00:36Z", "path": "be/src/exprs/bitmap_function.cpp", "diffHunk": "@@ -465,6 +465,43 @@ StringVal BitmapFunctions::bitmap_from_string(FunctionContext* ctx, const String\n     return result;\n }\n \n+BooleanVal BitmapFunctions::bitmap_contains(FunctionContext *ctx, const StringVal &src, const IntVal &input) {", "originalCommit": "4f1a1db03e1903f6ddcc8f642f620d7492af1635", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "da2e36b99e47fac59eee0c6fe575ff531492e5a0", "url": "https://github.com/apache/incubator-doris/commit/da2e36b99e47fac59eee0c6fe575ff531492e5a0", "message": "fix", "committedDate": "2020-01-14T06:56:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1MjU2Ng==", "url": "https://github.com/apache/incubator-doris/pull/2752#discussion_r366652566", "bodyText": "This operation is wasteful.\nIt is efficient to operate with src.ptr.", "author": "imay", "createdAt": "2020-01-15T01:07:19Z", "path": "be/src/exprs/bitmap_function.cpp", "diffHunk": "@@ -465,6 +465,44 @@ StringVal BitmapFunctions::bitmap_from_string(FunctionContext* ctx, const String\n     return result;\n }\n \n+BooleanVal BitmapFunctions::bitmap_contains(FunctionContext* ctx, const StringVal& src, const BigIntVal& input) {\n+    if (src.is_null || input.is_null) {\n+        return BooleanVal::null();\n+    }\n+\n+    RoaringBitmap bitmap;\n+    if (src.len == 0) {\n+        bitmap.merge(*reinterpret_cast<RoaringBitmap*>(src.ptr));", "originalCommit": "da2e36b99e47fac59eee0c6fe575ff531492e5a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY3NjEwNA==", "url": "https://github.com/apache/incubator-doris/pull/2752#discussion_r366676104", "bodyText": "ok", "author": "DanyBin", "createdAt": "2020-01-15T02:58:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1MjU2Ng=="}], "type": "inlineReview"}, {"oid": "f40b4432f2ad3fc9b538ec3bb9a8c8525f180b69", "url": "https://github.com/apache/incubator-doris/commit/f40b4432f2ad3fc9b538ec3bb9a8c8525f180b69", "message": "fix bitmap udf", "committedDate": "2020-01-15T04:04:41Z", "type": "commit"}]}