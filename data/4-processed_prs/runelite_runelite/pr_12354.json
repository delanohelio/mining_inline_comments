{"pr_number": 12354, "pr_title": "Add alpha channel to relevant color config options", "pr_createdAt": "2020-08-16T22:37:22Z", "pr_url": "https://github.com/runelite/runelite/pull/12354", "timeline": [{"oid": "f15432b0615ce33f9a71a7b28e306645f01e61af", "url": "https://github.com/runelite/runelite/commit/f15432b0615ce33f9a71a7b28e306645f01e61af", "message": "Remove color alpha for minimap and player indicators\n\nThese could be abused to obtain an advantage in crowded areas by\nreducing clutter and only highlighting enemies.", "committedDate": "2020-08-19T17:59:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxMjkwNQ==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r477612905", "bodyText": "Leave the definitions in this file as-is.", "author": "Nightfirecat", "createdAt": "2020-08-26T21:58:14Z", "path": "runelite-client/src/main/java/net/runelite/client/config/ChatColorConfig.java", "diffHunk": "@@ -64,7 +64,7 @@\n \t)\n \tdefault Color opaquePublicChatHighlight()\n \t{\n-\t\treturn Color.decode(\"#000000\");\n+\t\treturn Color.BLACK;", "originalCommit": "7f9ae4b278ea8d0639438d272f2571dd58c6b0c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxMzI3NA==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r477613274", "bodyText": "This should at least be in a separate commit", "author": "Nightfirecat", "createdAt": "2020-08-26T21:59:05Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/itemstats/ItemStatConfig.java", "diffHunk": "@@ -130,21 +132,22 @@ default boolean alwaysShowBaseStats()\n \t)\n \tdefault Color colorBetterUncapped()\n \t{\n-\t\treturn new Color(0x33EE33);\n+\t\treturn new Color(51, 238, 51, 255);\n \t}\n \n+\t@Alpha\n \t@ConfigItem(\n \t\tkeyName = \"colorBetterSomecapped\",\n \t\tname = \"Better (Some capped)\",\n-\t\tdescription = \"Color to show when some stat changes are capped, but some ar not\",\n+\t\tdescription = \"Color to show when some stat changes are capped, but some are not\",", "originalCommit": "7f9ae4b278ea8d0639438d272f2571dd58c6b0c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxNDE3MQ==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r477614171", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\thighlightColor.getBlue(), highlightColor.getAlpha() / 50));\n          \n          \n            \n            \t\t\t\t\thighlightColor.getBlue(), highlightColor.getAlpha() / 5));", "author": "Nightfirecat", "createdAt": "2020-08-26T22:01:18Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java", "diffHunk": "@@ -158,7 +158,7 @@ public Dimension render(Graphics2D graphics)\n \n \t\t\t\tgraphics.draw(objectClickbox);\n \t\t\t\tgraphics.setColor(new Color(highlightColor.getRed(), highlightColor.getGreen(),\n-\t\t\t\t\thighlightColor.getBlue(), 50));\n+\t\t\t\t\thighlightColor.getBlue(), highlightColor.getAlpha() / 50));", "originalCommit": "7f9ae4b278ea8d0639438d272f2571dd58c6b0c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxNDUwMg==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r477614502", "bodyText": "This code should be moved to some common public class and referenced in both spots instead of copied.", "author": "Nightfirecat", "createdAt": "2020-08-26T22:02:13Z", "path": "runelite-client/src/main/java/net/runelite/client/ui/components/ColorJButton.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2020, Martin H <pilino@posteo.de>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.ui.components;\n+\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import javax.swing.JButton;\n+import lombok.Getter;\n+\n+public class ColorJButton extends JButton\n+{\n+\tprivate static final int CHECKER_SIZE = 10;\n+\tprivate static final int ALPHA_TEXT_CUTOFF = 120;\n+\n+\t@Getter\n+\tprivate Color color;\n+\n+\tpublic ColorJButton(String text)\n+\t{\n+\t\tsuper(text);\n+\n+\t\t// Tell ButtonUI to not paint the background, we do it ourselves.\n+\t\tthis.setContentAreaFilled(false);\n+\t}\n+\n+\tpublic void setColor(Color color)\n+\t{\n+\t\tthis.color = color;\n+\n+\t\t// Calculate perceptive luminance of new color to choose a readable font color\n+\t\t// Based on https://stackoverflow.com/a/1855903\n+\t\tdouble lum = (0.299 * color.getRed() + 0.587 * color.getGreen() + 0.114 * color.getBlue()) / 255;\n+\n+\t\tColor textColor = Color.WHITE;\n+\n+\t\tif (lum > 0.5)\n+\t\t{\n+\t\t\ttextColor = Color.BLACK;\n+\t\t}\n+\t\telse if (color.getAlpha() < ALPHA_TEXT_CUTOFF)\n+\t\t{\n+\t\t\ttextColor = Color.BLACK;\n+\t\t}\n+\n+\t\tthis.setForeground(textColor);\n+\t}\n+\n+\t@Override\n+\tpublic void paint(Graphics g)\n+\t{\n+\t\t// Checkerboard drawing from PreviewPanel.java", "originalCommit": "7f9ae4b278ea8d0639438d272f2571dd58c6b0c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c0d8577bcd0e02592d3196a1395618f8b33c3dcf", "url": "https://github.com/runelite/runelite/commit/c0d8577bcd0e02592d3196a1395618f8b33c3dcf", "message": "Revert default color changes", "committedDate": "2020-08-28T09:46:09Z", "type": "forcePushed"}, {"oid": "7e48ff285ce204e39360f8371913838227e2173f", "url": "https://github.com/runelite/runelite/commit/7e48ff285ce204e39360f8371913838227e2173f", "message": "Revert default color changes", "committedDate": "2020-08-28T09:49:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5NTE4Mg==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r479795182", "bodyText": "Why is this not just colorPickerBtn = new ColorJButton(existing);?", "author": "Adam-", "createdAt": "2020-08-30T17:29:42Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/config/ConfigPanel.java", "diffHunk": "@@ -410,36 +411,51 @@ public void focusLost(FocusEvent e)\n \t\t\t\tString existing = configManager.getConfiguration(cd.getGroup().value(), cid.getItem().keyName());\n \n \t\t\t\tColor existingColor;\n-\t\t\t\tJButton colorPickerBtn;\n+\t\t\t\tColorJButton colorPickerBtn;\n+\n+\t\t\t\tboolean alphaHidden = cid.getAlpha() == null;\n \n \t\t\t\tif (existing == null)\n \t\t\t\t{\n \t\t\t\t\texistingColor = Color.BLACK;\n-\t\t\t\t\tcolorPickerBtn = new JButton(\"Pick a color\");\n+\t\t\t\t\tcolorPickerBtn = new ColorJButton(\"Pick a color\");\n \t\t\t\t}\n \t\t\t\telse\n \t\t\t\t{\n \t\t\t\t\texistingColor = ColorUtil.fromString(existing);\n-\t\t\t\t\tcolorPickerBtn = new JButton(ColorUtil.toHexColor(existingColor).toUpperCase());\n+\t\t\t\t\tString colorHex = ColorUtil.toHexColor(existingColor).toUpperCase();\n+\t\t\t\t\tif (!alphaHidden)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tcolorHex = ColorUtil.toAlphaHexColor(existingColor).toUpperCase();\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tcolorPickerBtn = new ColorJButton(colorHex);", "originalCommit": "7e48ff285ce204e39360f8371913838227e2173f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMzgyNA==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r479813824", "bodyText": "existing seems to be an int representing the colour (like -16711936 for colour #ff00ff00), but the button text that the constructor expects is a hex-encoded color like #ff00ff00. Do you mean to move the ColorUtil.to[Alpha]HexColor(\u2026) calls and surrounding logic to the constructor and let it take an int color parameter instead?", "author": "pilino1234", "createdAt": "2020-08-30T20:46:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5NTE4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNDMwNg==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r479814306", "bodyText": "It just seems strange due to the string -> int -> string conversion. But I see it is to get the hex-encoded value of the integer. Maybe you can just change this to Color existing = configManager.getConfiguration(cd.getGroup().value(), cid.getItem().keyName(), Color.class); and then do the conversion from that to a hex string which would look better.", "author": "Adam-", "createdAt": "2020-08-30T20:51:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5NTE4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNjY4MQ==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r479816681", "bodyText": "That overloaded getConfiguration is nifty, I'll use that \ud83d\udc4d", "author": "pilino1234", "createdAt": "2020-08-30T21:17:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5NTE4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5NjAxOA==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r479796018", "bodyText": "Internally all of the config Colors always have alpha=0xff, even when the picker doesn't have alpha enabled, so I think this can just be colorPickerBtn.setText(ColorUtil.toAlphaHexColor(c).toUpperCase());", "author": "Adam-", "createdAt": "2020-08-30T17:37:29Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/config/ConfigPanel.java", "diffHunk": "@@ -410,36 +411,51 @@ public void focusLost(FocusEvent e)\n \t\t\t\tString existing = configManager.getConfiguration(cd.getGroup().value(), cid.getItem().keyName());\n \n \t\t\t\tColor existingColor;\n-\t\t\t\tJButton colorPickerBtn;\n+\t\t\t\tColorJButton colorPickerBtn;\n+\n+\t\t\t\tboolean alphaHidden = cid.getAlpha() == null;\n \n \t\t\t\tif (existing == null)\n \t\t\t\t{\n \t\t\t\t\texistingColor = Color.BLACK;\n-\t\t\t\t\tcolorPickerBtn = new JButton(\"Pick a color\");\n+\t\t\t\t\tcolorPickerBtn = new ColorJButton(\"Pick a color\");\n \t\t\t\t}\n \t\t\t\telse\n \t\t\t\t{\n \t\t\t\t\texistingColor = ColorUtil.fromString(existing);\n-\t\t\t\t\tcolorPickerBtn = new JButton(ColorUtil.toHexColor(existingColor).toUpperCase());\n+\t\t\t\t\tString colorHex = ColorUtil.toHexColor(existingColor).toUpperCase();\n+\t\t\t\t\tif (!alphaHidden)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tcolorHex = ColorUtil.toAlphaHexColor(existingColor).toUpperCase();\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tcolorPickerBtn = new ColorJButton(colorHex);\n \t\t\t\t}\n \n \t\t\t\tcolorPickerBtn.setFocusable(false);\n-\t\t\t\tcolorPickerBtn.setBackground(existingColor);\n+\t\t\t\tcolorPickerBtn.setColor(existingColor);\n \t\t\t\tcolorPickerBtn.addMouseListener(new MouseAdapter()\n \t\t\t\t{\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void mouseClicked(MouseEvent e)\n \t\t\t\t\t{\n \t\t\t\t\t\tRuneliteColorPicker colorPicker = colorPickerManager.create(\n \t\t\t\t\t\t\tSwingUtilities.windowForComponent(ConfigPanel.this),\n-\t\t\t\t\t\t\tcolorPickerBtn.getBackground(),\n+\t\t\t\t\t\t\tcolorPickerBtn.getColor(),\n \t\t\t\t\t\t\tcid.getItem().name(),\n-\t\t\t\t\t\t\tcid.getAlpha() == null);\n+\t\t\t\t\t\t\talphaHidden);\n \t\t\t\t\t\tcolorPicker.setLocation(getLocationOnScreen());\n \t\t\t\t\t\tcolorPicker.setOnColorChange(c ->\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\tcolorPickerBtn.setBackground(c);\n-\t\t\t\t\t\t\tcolorPickerBtn.setText(ColorUtil.toHexColor(c).toUpperCase());\n+\t\t\t\t\t\t\tcolorPickerBtn.setColor(c);\n+\t\t\t\t\t\t\tif (alphaHidden)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tcolorPickerBtn.setText(ColorUtil.toHexColor(c).toUpperCase());\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\telse\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tcolorPickerBtn.setText(ColorUtil.toAlphaHexColor(c).toUpperCase());", "originalCommit": "7e48ff285ce204e39360f8371913838227e2173f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNDQ2Mg==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r479814462", "bodyText": "Currently I built the logic to only show the 8-digit hex codes (#aarrggbb) on config options that actually support opacity, the other ones keep the 6-digit version (#rrggbb). Using only .toAlphaHexColor here would cause those buttons to also have the long hex codes after they have been changed, which would be quite confusing IMO.", "author": "pilino1234", "createdAt": "2020-08-30T20:53:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5NjAxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5NjgzNw==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r479796837", "bodyText": "This seems like it is in an odd place since it is also used outside of the colorpicker but I'm not sure where a better place would be? Maybe just duplicate it both places?", "author": "Adam-", "createdAt": "2020-08-30T17:45:58Z", "path": "runelite-client/src/main/java/net/runelite/client/ui/components/colorpicker/CheckerboardBackground.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) 2020, Martin H <pilino@posteo.de>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.ui.components.colorpicker;\n+\n+import java.awt.Color;\n+import java.awt.Graphics;\n+\n+public class CheckerboardBackground\n+{\n+\tprivate static final int CHECKER_SIZE = 10;\n+\n+\tpublic static void paintCheckerboard(Graphics g, int width, int height)", "originalCommit": "7e48ff285ce204e39360f8371913838227e2173f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNTI0Mw==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r479815243", "bodyText": "@Nightfirecat asked me to unify the duplicate code into a single public class: #12354 (comment)\nI was also not sure about where to place the file, but it is somewhat related to the colorpicker so that's where I put it.", "author": "pilino1234", "createdAt": "2020-08-30T21:01:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5NjgzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIwMzA2Mg==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519203062", "bodyText": "I'd probably rather have it duplicated since it is so small than have the backwards dep of ui components -> colorpicker", "author": "Adam-", "createdAt": "2020-11-07T18:12:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5NjgzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5NzUxOQ==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r479797519", "bodyText": "I don't think this works because it looks like the Widgets don't support alpha text colors? Does it work for you?", "author": "Adam-", "createdAt": "2020-08-30T17:53:09Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/experiencedrop/XpDropConfig.java", "diffHunk": "@@ -44,6 +45,7 @@ default boolean hideSkillIcons()\n \t\treturn false;\n \t}\n \n+\t@Alpha", "originalCommit": "7e48ff285ce204e39360f8371913838227e2173f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5Nzc3Ng==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r479797776", "bodyText": "This is also applied to widget text.", "author": "Adam-", "createdAt": "2020-08-30T17:55:32Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/friendschat/FriendsChatConfig.java", "diffHunk": "@@ -172,6 +173,7 @@ default boolean showIgnores()\n \t\treturn true;\n \t}\n \n+\t@Alpha", "originalCommit": "7e48ff285ce204e39360f8371913838227e2173f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5ODMxNw==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r479798317", "bodyText": "None of this has any effect due to the overlay hardcoding an alpha value of 100.", "author": "Adam-", "createdAt": "2020-08-30T18:00:27Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/hunter/HunterConfig.java", "diffHunk": "@@ -25,13 +25,15 @@\n package net.runelite.client.plugins.hunter;\n \n import java.awt.Color;\n+import net.runelite.client.config.Alpha;\n import net.runelite.client.config.Config;\n import net.runelite.client.config.ConfigGroup;\n import net.runelite.client.config.ConfigItem;\n \n @ConfigGroup(\"hunterplugin\")\n public interface HunterConfig extends Config\n {\n+\t@Alpha", "originalCommit": "7e48ff285ce204e39360f8371913838227e2173f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5ODY3MA==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r479798670", "bodyText": "Does this work? Even if it does, the menu colors can't be alpha either so it would look weird when configuring ingame.", "author": "Adam-", "createdAt": "2020-08-30T18:04:03Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/inventorytags/InventoryTagsConfig.java", "diffHunk": "@@ -34,6 +35,7 @@\n {\n \tString GROUP = \"inventorytags\";\n \n+\t@Alpha", "originalCommit": "7e48ff285ce204e39360f8371913838227e2173f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7d3921c45d7d6b66066302cce48e31af6c4e276a", "url": "https://github.com/runelite/runelite/commit/7d3921c45d7d6b66066302cce48e31af6c4e276a", "message": "Remove alpha from places it shouldn't have been added to", "committedDate": "2020-10-12T14:44:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MjA0NA==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r503572044", "bodyText": "This shouldn't be removed?", "author": "Nightfirecat", "createdAt": "2020-10-12T22:49:43Z", "path": "runelite-client/src/main/java/net/runelite/client/config/RuneLiteConfig.java", "diffHunk": "@@ -374,7 +375,6 @@ default boolean infoBoxTextOutline()\n \t\tposition = 44,\n \t\tsection = overlaySettings\n \t)\n-\t@Alpha", "originalCommit": "963d276d30a6f6208f235d71ca1046febea586fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMDg1MA==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r503720850", "bodyText": "This isn't removed, just moved to https://github.com/runelite/runelite/pull/12354/files#r503572409 to make things consistent.", "author": "pilino1234", "createdAt": "2020-10-13T07:21:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MjA0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MjQwOQ==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r503572409", "bodyText": "?", "author": "Nightfirecat", "createdAt": "2020-10-12T22:50:46Z", "path": "runelite-client/src/main/java/net/runelite/client/config/RuneLiteConfig.java", "diffHunk": "@@ -355,6 +355,7 @@ default int infoBoxSize()\n \t\treturn 35;\n \t}\n \n+\t@Alpha", "originalCommit": "963d276d30a6f6208f235d71ca1046febea586fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMDA3Mg==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r503720072", "bodyText": "I moved the annotation in front of the @ConfigItem to make it consistent with all the other places. It's what was removed at https://github.com/runelite/runelite/pull/12354/files#r503572044", "author": "pilino1234", "createdAt": "2020-10-13T07:19:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MjQwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ2MTc3Ng==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519461776", "bodyText": "That is not what happened here. You've added @Alpha to infoBoxTextOutline() (which isn't even a Color config), and removed it from overlayBackgroundColor().", "author": "Nightfirecat", "createdAt": "2020-11-08T18:42:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MjQwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NDczNA==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r503574734", "bodyText": "This should have some test cases added to ensure it works as expected.", "author": "Nightfirecat", "createdAt": "2020-10-12T22:56:59Z", "path": "runelite-client/src/main/java/net/runelite/client/util/ColorUtil.java", "diffHunk": "@@ -85,6 +85,17 @@ public static String toHexColor(final Color color)\n \t\treturn \"#\" + colorToHexCode(color);\n \t}\n \n+\t/**\n+\t * Converts a given color with alpha to its hexadecimal equivalent.\n+\t *\n+\t * @param color Color to get hexadecimal string from.\n+\t * @return      Hexadecimal string representing the given color, in the form \"#aarrggbb\".\n+\t */\n+\tpublic static String toAlphaHexColor(final Color color)", "originalCommit": "963d276d30a6f6208f235d71ca1046febea586fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NjAyOA==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r503576028", "bodyText": "We'd honestly be better off making some kind of ColorUtil function along the lines of Color colorOfAlpha(Color color, int alpha), as this can be used in many other places as well.", "author": "Nightfirecat", "createdAt": "2020-10-12T23:01:06Z", "path": "runelite-client/src/main/java/net/runelite/client/ui/overlay/OverlayUtil.java", "diffHunk": "@@ -92,7 +92,7 @@ public static void renderTextLocation(Graphics2D graphics, Point txtLoc, String\n \t\tgraphics.setColor(Color.BLACK);\n \t\tgraphics.drawString(text, x + 1, y + 1);\n \n-\t\tgraphics.setColor(color);\n+\t\tgraphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue()));", "originalCommit": "963d276d30a6f6208f235d71ca1046febea586fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMzcwNg==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r503723706", "bodyText": "I was thinking about something similar, just a Color opaque(Color col) that would remove alpha from a color. But specifying the actual alpha is more flexible \ud83d\udc4d", "author": "pilino1234", "createdAt": "2020-10-13T07:26:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NjAyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NzIyNA==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r503577224", "bodyText": "final Color textColor;\n\nif (lum > 0.5 || color.getAlpha() < ALPHA_TEXT_CUTOFF)\n{\n\ttextColor = Color.BLACK;\n}\nelse\n{\n\ttextColor = Color.WHITE;\n}", "author": "Nightfirecat", "createdAt": "2020-10-12T23:05:27Z", "path": "runelite-client/src/main/java/net/runelite/client/ui/components/ColorJButton.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2020, Martin H <pilino@posteo.de>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.ui.components;\n+\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import javax.swing.JButton;\n+import lombok.Getter;\n+import net.runelite.client.ui.components.colorpicker.CheckerboardBackground;\n+\n+public class ColorJButton extends JButton\n+{\n+\tprivate static final int ALPHA_TEXT_CUTOFF = 120;\n+\n+\t@Getter\n+\tprivate Color color;\n+\n+\tpublic ColorJButton(String text)\n+\t{\n+\t\tsuper(text);\n+\n+\t\t// Tell ButtonUI to not paint the background, we do it ourselves.\n+\t\tthis.setContentAreaFilled(false);\n+\t}\n+\n+\tpublic void setColor(Color color)\n+\t{\n+\t\tthis.color = color;\n+\n+\t\t// Calculate perceptive luminance of new color to choose a readable font color\n+\t\t// Based on https://stackoverflow.com/a/1855903\n+\t\tdouble lum = (0.299 * color.getRed() + 0.587 * color.getGreen() + 0.114 * color.getBlue()) / 255;\n+\n+\t\tColor textColor = Color.WHITE;\n+\n+\t\tif (lum > 0.5)\n+\t\t{\n+\t\t\ttextColor = Color.BLACK;\n+\t\t}\n+\t\telse if (color.getAlpha() < ALPHA_TEXT_CUTOFF)\n+\t\t{\n+\t\t\ttextColor = Color.BLACK;\n+\t\t}", "originalCommit": "963d276d30a6f6208f235d71ca1046febea586fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NzM0NQ==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r503577345", "bodyText": "A luminance calculation function would also be a good candidate for a ColorUtil function.", "author": "Nightfirecat", "createdAt": "2020-10-12T23:05:53Z", "path": "runelite-client/src/main/java/net/runelite/client/ui/components/ColorJButton.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2020, Martin H <pilino@posteo.de>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.ui.components;\n+\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import javax.swing.JButton;\n+import lombok.Getter;\n+import net.runelite.client.ui.components.colorpicker.CheckerboardBackground;\n+\n+public class ColorJButton extends JButton\n+{\n+\tprivate static final int ALPHA_TEXT_CUTOFF = 120;\n+\n+\t@Getter\n+\tprivate Color color;\n+\n+\tpublic ColorJButton(String text)\n+\t{\n+\t\tsuper(text);\n+\n+\t\t// Tell ButtonUI to not paint the background, we do it ourselves.\n+\t\tthis.setContentAreaFilled(false);\n+\t}\n+\n+\tpublic void setColor(Color color)\n+\t{\n+\t\tthis.color = color;\n+\n+\t\t// Calculate perceptive luminance of new color to choose a readable font color\n+\t\t// Based on https://stackoverflow.com/a/1855903\n+\t\tdouble lum = (0.299 * color.getRed() + 0.587 * color.getGreen() + 0.114 * color.getBlue()) / 255;", "originalCommit": "963d276d30a6f6208f235d71ca1046febea586fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3ODI2Mw==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r503578263", "bodyText": "It seems to me the color of this class should be provided on creation instead of only allowing it to be set via setter.", "author": "Nightfirecat", "createdAt": "2020-10-12T23:09:08Z", "path": "runelite-client/src/main/java/net/runelite/client/ui/components/ColorJButton.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2020, Martin H <pilino@posteo.de>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.ui.components;\n+\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import javax.swing.JButton;\n+import lombok.Getter;\n+import net.runelite.client.ui.components.colorpicker.CheckerboardBackground;\n+\n+public class ColorJButton extends JButton\n+{\n+\tprivate static final int ALPHA_TEXT_CUTOFF = 120;\n+\n+\t@Getter\n+\tprivate Color color;\n+\n+\tpublic ColorJButton(String text)", "originalCommit": "963d276d30a6f6208f235d71ca1046febea586fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3ODcxNQ==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r503578715", "bodyText": "This can be wrapped in a check for the color's alpha value (if (color.getAlpha() != 255)) since it is more expensive to do a double-draw on the background.", "author": "Nightfirecat", "createdAt": "2020-10-12T23:10:34Z", "path": "runelite-client/src/main/java/net/runelite/client/ui/components/ColorJButton.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2020, Martin H <pilino@posteo.de>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.ui.components;\n+\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import javax.swing.JButton;\n+import lombok.Getter;\n+import net.runelite.client.ui.components.colorpicker.CheckerboardBackground;\n+\n+public class ColorJButton extends JButton\n+{\n+\tprivate static final int ALPHA_TEXT_CUTOFF = 120;\n+\n+\t@Getter\n+\tprivate Color color;\n+\n+\tpublic ColorJButton(String text)\n+\t{\n+\t\tsuper(text);\n+\n+\t\t// Tell ButtonUI to not paint the background, we do it ourselves.\n+\t\tthis.setContentAreaFilled(false);\n+\t}\n+\n+\tpublic void setColor(Color color)\n+\t{\n+\t\tthis.color = color;\n+\n+\t\t// Calculate perceptive luminance of new color to choose a readable font color\n+\t\t// Based on https://stackoverflow.com/a/1855903\n+\t\tdouble lum = (0.299 * color.getRed() + 0.587 * color.getGreen() + 0.114 * color.getBlue()) / 255;\n+\n+\t\tColor textColor = Color.WHITE;\n+\n+\t\tif (lum > 0.5)\n+\t\t{\n+\t\t\ttextColor = Color.BLACK;\n+\t\t}\n+\t\telse if (color.getAlpha() < ALPHA_TEXT_CUTOFF)\n+\t\t{\n+\t\t\ttextColor = Color.BLACK;\n+\t\t}\n+\n+\t\tthis.setForeground(textColor);\n+\t}\n+\n+\t@Override\n+\tpublic void paint(Graphics g)\n+\t{\n+\t\tCheckerboardBackground.paintCheckerboard(g, getWidth(), getHeight());", "originalCommit": "963d276d30a6f6208f235d71ca1046febea586fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3OTg2OQ==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r503579869", "bodyText": "I'm not sure we want to draw transparent text on the tooltip since that could look very odd.", "author": "Nightfirecat", "createdAt": "2020-10-12T23:14:56Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/itemstats/ItemStatConfig.java", "diffHunk": "@@ -122,6 +123,7 @@ default boolean alwaysShowBaseStats()\n \t\treturn false;\n \t}\n \n+\t@Alpha", "originalCommit": "963d276d30a6f6208f235d71ca1046febea586fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMTk3MQ==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r503721971", "bodyText": "Agreed. I'm going through all places where I added alpha to check if the colors are also used for text, haven't gotten to this one just yet though \ud83d\ude09", "author": "pilino1234", "createdAt": "2020-10-13T07:23:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3OTg2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5ODk1MA==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519198950", "bodyText": "(alphaHidden ? ColorUtil.toHexColor(existing) : ColorUtil.toAlphaHexColor(existing)).toUpperCase()", "author": "Adam-", "createdAt": "2020-11-07T17:26:34Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/config/ConfigPanel.java", "diffHunk": "@@ -407,39 +408,50 @@ public void focusLost(FocusEvent e)\n \n \t\t\tif (cid.getType() == Color.class)\n \t\t\t{\n-\t\t\t\tString existing = configManager.getConfiguration(cd.getGroup().value(), cid.getItem().keyName());\n+\t\t\t\tColor existing = configManager.getConfiguration(cd.getGroup().value(), cid.getItem().keyName(), Color.class);\n \n-\t\t\t\tColor existingColor;\n-\t\t\t\tJButton colorPickerBtn;\n+\t\t\t\tColorJButton colorPickerBtn;\n+\n+\t\t\t\tboolean alphaHidden = cid.getAlpha() == null;\n \n \t\t\t\tif (existing == null)\n \t\t\t\t{\n-\t\t\t\t\texistingColor = Color.BLACK;\n-\t\t\t\t\tcolorPickerBtn = new JButton(\"Pick a color\");\n+\t\t\t\t\tcolorPickerBtn = new ColorJButton(\"Pick a color\", Color.BLACK);\n \t\t\t\t}\n \t\t\t\telse\n \t\t\t\t{\n-\t\t\t\t\texistingColor = ColorUtil.fromString(existing);\n-\t\t\t\t\tcolorPickerBtn = new JButton(ColorUtil.toHexColor(existingColor).toUpperCase());\n+\t\t\t\t\tString colorHex = ColorUtil.toHexColor(existing).toUpperCase();", "originalCommit": "26c0beb3f702c3777b25ca50180b05084cb159a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5OTA0OA==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519199048", "bodyText": "This can also be an inline if", "author": "Adam-", "createdAt": "2020-11-07T17:27:45Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/config/ConfigPanel.java", "diffHunk": "@@ -407,39 +408,50 @@ public void focusLost(FocusEvent e)\n \n \t\t\tif (cid.getType() == Color.class)\n \t\t\t{\n-\t\t\t\tString existing = configManager.getConfiguration(cd.getGroup().value(), cid.getItem().keyName());\n+\t\t\t\tColor existing = configManager.getConfiguration(cd.getGroup().value(), cid.getItem().keyName(), Color.class);\n \n-\t\t\t\tColor existingColor;\n-\t\t\t\tJButton colorPickerBtn;\n+\t\t\t\tColorJButton colorPickerBtn;\n+\n+\t\t\t\tboolean alphaHidden = cid.getAlpha() == null;\n \n \t\t\t\tif (existing == null)\n \t\t\t\t{\n-\t\t\t\t\texistingColor = Color.BLACK;\n-\t\t\t\t\tcolorPickerBtn = new JButton(\"Pick a color\");\n+\t\t\t\t\tcolorPickerBtn = new ColorJButton(\"Pick a color\", Color.BLACK);\n \t\t\t\t}\n \t\t\t\telse\n \t\t\t\t{\n-\t\t\t\t\texistingColor = ColorUtil.fromString(existing);\n-\t\t\t\t\tcolorPickerBtn = new JButton(ColorUtil.toHexColor(existingColor).toUpperCase());\n+\t\t\t\t\tString colorHex = ColorUtil.toHexColor(existing).toUpperCase();\n+\t\t\t\t\tif (!alphaHidden)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tcolorHex = ColorUtil.toAlphaHexColor(existing).toUpperCase();\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tcolorPickerBtn = new ColorJButton(colorHex, existing);\n \t\t\t\t}\n \n \t\t\t\tcolorPickerBtn.setFocusable(false);\n-\t\t\t\tcolorPickerBtn.setBackground(existingColor);\n \t\t\t\tcolorPickerBtn.addMouseListener(new MouseAdapter()\n \t\t\t\t{\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void mouseClicked(MouseEvent e)\n \t\t\t\t\t{\n \t\t\t\t\t\tRuneliteColorPicker colorPicker = colorPickerManager.create(\n \t\t\t\t\t\t\tSwingUtilities.windowForComponent(ConfigPanel.this),\n-\t\t\t\t\t\t\tcolorPickerBtn.getBackground(),\n+\t\t\t\t\t\t\tcolorPickerBtn.getColor(),\n \t\t\t\t\t\t\tcid.getItem().name(),\n-\t\t\t\t\t\t\tcid.getAlpha() == null);\n+\t\t\t\t\t\t\talphaHidden);\n \t\t\t\t\t\tcolorPicker.setLocation(getLocationOnScreen());\n \t\t\t\t\t\tcolorPicker.setOnColorChange(c ->\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\tcolorPickerBtn.setBackground(c);\n-\t\t\t\t\t\t\tcolorPickerBtn.setText(ColorUtil.toHexColor(c).toUpperCase());\n+\t\t\t\t\t\t\tcolorPickerBtn.setColor(c);\n+\t\t\t\t\t\t\tif (alphaHidden)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tcolorPickerBtn.setText(ColorUtil.toHexColor(c).toUpperCase());", "originalCommit": "26c0beb3f702c3777b25ca50180b05084cb159a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIwMTQ3NA==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519201474", "bodyText": "I've noticed you seem to be intermixing this and colorOfAlpha?", "author": "Adam-", "createdAt": "2020-11-07T17:54:51Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/blastmine/BlastMineRockOverlay.java", "diffHunk": "@@ -202,7 +202,7 @@ private void drawAreaWarning(Graphics2D graphics, BlastMineRock rock, Color colo\n \n \t\t\t\t\tif (poly != null)\n \t\t\t\t\t{\n-\t\t\t\t\t\tgraphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), 100));\n+\t\t\t\t\t\tgraphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), (int) (color.getAlpha() / 2.5)));", "originalCommit": "26c0beb3f702c3777b25ca50180b05084cb159a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIwMjkzNA==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519202934", "bodyText": "This can probably just be in the colorjbutton", "author": "Adam-", "createdAt": "2020-11-07T18:10:56Z", "path": "runelite-client/src/main/java/net/runelite/client/util/ColorUtil.java", "diffHunk": "@@ -131,6 +142,31 @@ public static String colorToAlphaHexCode(final Color color)\n \t\treturn String.format(\"%08x\", color.getRGB());\n \t}\n \n+\t/**\n+\t * Gets the same RGB color with the specified alpha value.\n+\t *\n+\t * @param color The RGB color to use.\n+\t * @param alpha The alpha value to use (0-255).\n+\t * @return      A new Color with the given RGB and alpha.\n+\t */\n+\tpublic static Color colorOfAlpha(final Color color, int alpha)\n+\t{\n+\t\talpha = constrainValue(alpha);\n+\t\treturn new Color((color.getRGB() & 0x00ffffff ) | (alpha << 24), true);\n+\t}\n+\n+\t/**\n+\t * Calculate perceptive luminance of a color.\n+\t * Based on https://stackoverflow.com/a/1855903\n+\t *\n+\t * @param color The to calculate luminance of.\n+\t * @return      Perceptive luminance of the color.\n+\t */\n+\tpublic static double luminance(Color color)", "originalCommit": "26c0beb3f702c3777b25ca50180b05084cb159a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIwMzQwNg==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519203406", "bodyText": "+if (color.getAlpha() == alpha) return color;", "author": "Adam-", "createdAt": "2020-11-07T18:15:50Z", "path": "runelite-client/src/main/java/net/runelite/client/util/ColorUtil.java", "diffHunk": "@@ -131,6 +142,31 @@ public static String colorToAlphaHexCode(final Color color)\n \t\treturn String.format(\"%08x\", color.getRGB());\n \t}\n \n+\t/**\n+\t * Gets the same RGB color with the specified alpha value.\n+\t *\n+\t * @param color The RGB color to use.\n+\t * @param alpha The alpha value to use (0-255).\n+\t * @return      A new Color with the given RGB and alpha.\n+\t */\n+\tpublic static Color colorOfAlpha(final Color color, int alpha)\n+\t{", "originalCommit": "26c0beb3f702c3777b25ca50180b05084cb159a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIwMzkyNg==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519203926", "bodyText": "use ImmutableMap.of", "author": "Adam-", "createdAt": "2020-11-07T18:21:36Z", "path": "runelite-client/src/test/java/net/runelite/client/util/ColorUtilTest.java", "diffHunk": "@@ -44,6 +44,12 @@\n \t\tput(Color.WHITE, \"ffffff\");\n \t}};\n \n+\tprivate static final Map<Color, String> COLOR_ALPHA_HEXSTRING_MAP = new HashMap<Color, String>()", "originalCommit": "26c0beb3f702c3777b25ca50180b05084cb159a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIxMTk4Mg==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519211982", "bodyText": "Should I update the COLOR_HEXSTRING_MAP above too while I'm at it?", "author": "pilino1234", "createdAt": "2020-11-07T19:50:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIwMzkyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ2MTE5NQ==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519461195", "bodyText": "We've strayed away from 1-line if statements in the rest of the client, so this should be expanded to its full block form.\nif (color.getAlpha() == alpha)\n{\n\treturn alpha;\n}", "author": "Nightfirecat", "createdAt": "2020-11-08T18:36:26Z", "path": "runelite-client/src/main/java/net/runelite/client/util/ColorUtil.java", "diffHunk": "@@ -147,10 +147,11 @@ public static String colorToAlphaHexCode(final Color color)\n \t *\n \t * @param color The RGB color to use.\n \t * @param alpha The alpha value to use (0-255).\n-\t * @return      A new Color with the given RGB and alpha.\n+\t * @return      A Color with the given RGB and alpha.\n \t */\n \tpublic static Color colorOfAlpha(final Color color, int alpha)\n \t{\n+\t\tif (color.getAlpha() == alpha) return color;", "originalCommit": "1d825c3dcaee3c8d44297590d3b16cabded11ede", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3MTI0NQ==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519471245", "bodyText": "Fixed, I thought it might be fine since Checkstyle didn't complain about it \ud83d\udc4d", "author": "pilino1234", "createdAt": "2020-11-08T20:11:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ2MTE5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3MjU4Ng==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519472586", "bodyText": "newline above", "author": "abextm", "createdAt": "2020-11-08T20:23:52Z", "path": "runelite-client/src/main/java/net/runelite/client/util/ColorUtil.java", "diffHunk": "@@ -131,6 +142,23 @@ public static String colorToAlphaHexCode(final Color color)\n \t\treturn String.format(\"%08x\", color.getRGB());\n \t}\n \n+\t/**\n+\t * Gets the same RGB color with the specified alpha value.\n+\t *\n+\t * @param color The RGB color to use.\n+\t * @param alpha The alpha value to use (0-255).\n+\t * @return      A Color with the given RGB and alpha.\n+\t */\n+\tpublic static Color colorOfAlpha(final Color color, int alpha)\n+\t{\n+\t\tif (color.getAlpha() == alpha)\n+\t\t{\n+\t\t\treturn color;\n+\t\t}\n+\t\talpha = constrainValue(alpha);", "originalCommit": "53bf9c1d72181b647c1e1acbe08dc7b21d508995", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3MjcxMQ==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519472711", "bodyText": "This should be named withAlpha. The color of an alpha value will always be gray.", "author": "abextm", "createdAt": "2020-11-08T20:24:56Z", "path": "runelite-client/src/main/java/net/runelite/client/util/ColorUtil.java", "diffHunk": "@@ -131,6 +142,23 @@ public static String colorToAlphaHexCode(final Color color)\n \t\treturn String.format(\"%08x\", color.getRGB());\n \t}\n \n+\t/**\n+\t * Gets the same RGB color with the specified alpha value.\n+\t *\n+\t * @param color The RGB color to use.\n+\t * @param alpha The alpha value to use (0-255).\n+\t * @return      A Color with the given RGB and alpha.\n+\t */\n+\tpublic static Color colorOfAlpha(final Color color, int alpha)", "originalCommit": "53bf9c1d72181b647c1e1acbe08dc7b21d508995", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3Mjc5NQ==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519472795", "bodyText": "this method name is easily confused with colorToAlphaHexCode and probably should just not exist at all.", "author": "abextm", "createdAt": "2020-11-08T20:25:39Z", "path": "runelite-client/src/main/java/net/runelite/client/util/ColorUtil.java", "diffHunk": "@@ -85,6 +85,17 @@ public static String toHexColor(final Color color)\n \t\treturn \"#\" + colorToHexCode(color);\n \t}\n \n+\t/**\n+\t * Converts a given color with alpha to its hexadecimal equivalent.\n+\t *\n+\t * @param color Color to get hexadecimal string from.\n+\t * @return      Hexadecimal string representing the given color, in the form \"#aarrggbb\".\n+\t */\n+\tpublic static String toAlphaHexColor(final Color color)", "originalCommit": "53bf9c1d72181b647c1e1acbe08dc7b21d508995", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3NTI0Mw==", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519475243", "bodyText": "I suppose I can remove it (the naming was done for consistency with existing methods, so renaming would also add confusion). It's only used in two places in ConfigPanel.java, although those uses are within ternaries that are approaching questionable line lengths. Is there a preferred way to add line breaks to ternaries to make them more readable?\nConfigPanel.java:423 for example\n- String colorHex = (alphaHidden ? ColorUtil.toHexColor(existing) : ColorUtil.toAlphaHexColor(existing)).toUpperCase();\n+ String colorHex = (alphaHidden ? ColorUtil.toHexColor(existing) : \"#\" + ColorUtil.colorToAlphaHexCode(existing)).toUpperCase();", "author": "pilino1234", "createdAt": "2020-11-08T20:48:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3Mjc5NQ=="}], "type": "inlineReview"}, {"oid": "4d1a77c3f102ca9bca5fd8d2d230cebeb84b7243", "url": "https://github.com/runelite/runelite/commit/4d1a77c3f102ca9bca5fd8d2d230cebeb84b7243", "message": "ColorUtil: Nuke toAlphaHexColor", "committedDate": "2020-11-08T21:01:19Z", "type": "forcePushed"}, {"oid": "8276ceffa2b585ba0ac51627621db2f99e060a5b", "url": "https://github.com/runelite/runelite/commit/8276ceffa2b585ba0ac51627621db2f99e060a5b", "message": "Add alpha channel to color config options where applicable", "committedDate": "2020-12-20T04:51:17Z", "type": "commit"}, {"oid": "8276ceffa2b585ba0ac51627621db2f99e060a5b", "url": "https://github.com/runelite/runelite/commit/8276ceffa2b585ba0ac51627621db2f99e060a5b", "message": "Add alpha channel to color config options where applicable", "committedDate": "2020-12-20T04:51:17Z", "type": "forcePushed"}]}