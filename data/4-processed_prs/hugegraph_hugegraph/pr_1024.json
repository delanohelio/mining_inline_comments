{"pr_number": 1024, "pr_title": "add copy-schema support", "pr_createdAt": "2020-06-08T13:40:40Z", "pr_url": "https://github.com/hugegraph/hugegraph/pull/1024", "timeline": [{"oid": "c4b353e3f50c65c62f11da5fd03e253118a86847", "url": "https://github.com/hugegraph/hugegraph/commit/c4b353e3f50c65c62f11da5fd03e253118a86847", "message": "add copy-schema support\n\nChange-Id: I1b1393c589d8a928b3cb1805a6dc264563d14dc1", "committedDate": "2020-06-08T08:19:01Z", "type": "commit"}, {"oid": "a18c62d8f7d879042d4bd5d5afcbb3649783c3f3", "url": "https://github.com/hugegraph/hugegraph/commit/a18c62d8f7d879042d4bd5d5afcbb3649783c3f3", "message": "copy schema that removed the graph and id fields\n\nChange-Id: Ie8111979840449fa331ad13af48276514e8654f3", "committedDate": "2020-06-08T13:44:27Z", "type": "forcePushed"}, {"oid": "213e7476d229bd9c59db6b1acb31f0e23a8362c0", "url": "https://github.com/hugegraph/hugegraph/commit/213e7476d229bd9c59db6b1acb31f0e23a8362c0", "message": "copy schema that removed the graph and id fields\n\nChange-Id: Ie8111979840449fa331ad13af48276514e8654f3", "committedDate": "2020-06-08T13:48:26Z", "type": "forcePushed"}, {"oid": "a1e0b27c3746b66d7ad4b1c7d266903d39e5acd9", "url": "https://github.com/hugegraph/hugegraph/commit/a1e0b27c3746b66d7ad4b1c7d266903d39e5acd9", "message": "copy schema that removed the graph and id fields\n\nChange-Id: Ie8111979840449fa331ad13af48276514e8654f3", "committedDate": "2020-06-08T14:03:02Z", "type": "commit"}, {"oid": "a1e0b27c3746b66d7ad4b1c7d266903d39e5acd9", "url": "https://github.com/hugegraph/hugegraph/commit/a1e0b27c3746b66d7ad4b1c7d266903d39e5acd9", "message": "copy schema that removed the graph and id fields\n\nChange-Id: Ie8111979840449fa331ad13af48276514e8654f3", "committedDate": "2020-06-08T14:03:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMzMTEzNw==", "url": "https://github.com/hugegraph/hugegraph/pull/1024#discussion_r437331137", "bodyText": "add space between \"city\" and \"weight\"", "author": "Linary", "createdAt": "2020-06-09T11:17:09Z", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/MultiGraphsTest.java", "diffHunk": "@@ -55,6 +61,150 @@ public void testCreateMultiGraphs() {\n         destoryGraphs(graphs);\n     }\n \n+    @Test\n+    public void testCopySchemaWithMultiGraphs() {\n+        List<HugeGraph> graphs = openGraphs(\"schema_g1\", \"schema_g2\");\n+        for (HugeGraph graph : graphs) {\n+            graph.initBackend();\n+        }\n+        HugeGraph g1 = graphs.get(0);\n+        HugeGraph g2 = graphs.get(1);\n+\n+        SchemaManager schema = g1.schema();\n+\n+        schema.propertyKey(\"id\").asInt().create();\n+        schema.propertyKey(\"name\").asText().create();\n+        schema.propertyKey(\"age\").asInt().valueSingle().create();\n+        schema.propertyKey(\"city\").asText().create();\n+        schema.propertyKey(\"weight\").asDouble().valueList().create();\n+        schema.propertyKey(\"born\").asDate().ifNotExist().create();\n+        schema.propertyKey(\"time\").asDate().ifNotExist().create();\n+\n+        schema.vertexLabel(\"person\")\n+              .properties(\"id\", \"name\", \"age\", \"city\",\"weight\", \"born\")", "originalCommit": "a1e0b27c3746b66d7ad4b1c7d266903d39e5acd9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMzMjUxNg==", "url": "https://github.com/hugegraph/hugegraph/pull/1024#discussion_r437332516", "bodyText": "rename pk -> copied, expected -> origin", "author": "Linary", "createdAt": "2020-06-09T11:19:55Z", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/MultiGraphsTest.java", "diffHunk": "@@ -55,6 +61,150 @@ public void testCreateMultiGraphs() {\n         destoryGraphs(graphs);\n     }\n \n+    @Test\n+    public void testCopySchemaWithMultiGraphs() {\n+        List<HugeGraph> graphs = openGraphs(\"schema_g1\", \"schema_g2\");\n+        for (HugeGraph graph : graphs) {\n+            graph.initBackend();\n+        }\n+        HugeGraph g1 = graphs.get(0);\n+        HugeGraph g2 = graphs.get(1);\n+\n+        SchemaManager schema = g1.schema();\n+\n+        schema.propertyKey(\"id\").asInt().create();\n+        schema.propertyKey(\"name\").asText().create();\n+        schema.propertyKey(\"age\").asInt().valueSingle().create();\n+        schema.propertyKey(\"city\").asText().create();\n+        schema.propertyKey(\"weight\").asDouble().valueList().create();\n+        schema.propertyKey(\"born\").asDate().ifNotExist().create();\n+        schema.propertyKey(\"time\").asDate().ifNotExist().create();\n+\n+        schema.vertexLabel(\"person\")\n+              .properties(\"id\", \"name\", \"age\", \"city\",\"weight\", \"born\")\n+              .primaryKeys(\"id\").create();\n+        schema.vertexLabel(\"person2\")\n+              .properties(\"id\", \"name\", \"age\", \"city\")\n+              .primaryKeys(\"id\").create();\n+        schema.edgeLabel(\"friend\").sourceLabel(\"person\").targetLabel(\"person\")\n+              .properties(\"time\").create();\n+\n+        schema.indexLabel(\"personByName\").onV(\"person\").secondary()\n+              .by(\"name\").create();\n+        schema.indexLabel(\"personByCity\").onV(\"person\").search()\n+              .by(\"city\").create();\n+        schema.indexLabel(\"personByAge\").onV(\"person\").range()\n+              .by(\"age\").create();\n+        schema.indexLabel(\"friendByTime\").onE(\"friend\").range()\n+              .by(\"time\").create();\n+\n+        Assert.assertFalse(g2.existsPropertyKey(\"id\"));\n+        Assert.assertFalse(g2.existsPropertyKey(\"name\"));\n+        Assert.assertFalse(g2.existsPropertyKey(\"age\"));\n+        Assert.assertFalse(g2.existsPropertyKey(\"city\"));\n+        Assert.assertFalse(g2.existsPropertyKey(\"weight\"));\n+        Assert.assertFalse(g2.existsPropertyKey(\"born\"));\n+        Assert.assertFalse(g2.existsPropertyKey(\"time\"));\n+\n+        Assert.assertFalse(g2.existsVertexLabel(\"person\"));\n+        Assert.assertFalse(g2.existsVertexLabel(\"person2\"));\n+        Assert.assertFalse(g2.existsEdgeLabel(\"friend\"));\n+\n+        Assert.assertFalse(g2.existsIndexLabel(\"personByName\"));\n+        Assert.assertFalse(g2.existsIndexLabel(\"personByCity\"));\n+        Assert.assertFalse(g2.existsIndexLabel(\"personByAge\"));\n+        Assert.assertFalse(g2.existsIndexLabel(\"friendByTime\"));\n+\n+        // Copy schema from g1 to g2\n+        g2.schema().copyFrom(g1.schema());\n+\n+        Assert.assertTrue(g2.existsPropertyKey(\"id\"));\n+        Assert.assertTrue(g2.existsPropertyKey(\"name\"));\n+        Assert.assertTrue(g2.existsPropertyKey(\"age\"));\n+        Assert.assertTrue(g2.existsPropertyKey(\"city\"));\n+        Assert.assertTrue(g2.existsPropertyKey(\"weight\"));\n+        Assert.assertTrue(g2.existsPropertyKey(\"born\"));\n+        Assert.assertTrue(g2.existsPropertyKey(\"time\"));\n+\n+        Assert.assertTrue(g2.existsVertexLabel(\"person\"));\n+        Assert.assertTrue(g2.existsVertexLabel(\"person2\"));\n+        Assert.assertTrue(g2.existsEdgeLabel(\"friend\"));\n+\n+        Assert.assertTrue(g2.existsIndexLabel(\"personByName\"));\n+        Assert.assertTrue(g2.existsIndexLabel(\"personByCity\"));\n+        Assert.assertTrue(g2.existsIndexLabel(\"personByAge\"));\n+        Assert.assertTrue(g2.existsIndexLabel(\"friendByTime\"));\n+\n+        for (PropertyKey pk : g2.schema().getPropertyKeys()) {", "originalCommit": "a1e0b27c3746b66d7ad4b1c7d266903d39e5acd9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b4c767b0dda7f9a68afede0b03105c39ba631a7b", "url": "https://github.com/hugegraph/hugegraph/commit/b4c767b0dda7f9a68afede0b03105c39ba631a7b", "message": "improve test var names\n\nChange-Id: I90e78b63b7eab76266ee8f10dca36e82787f4519", "committedDate": "2020-06-09T11:53:00Z", "type": "commit"}]}