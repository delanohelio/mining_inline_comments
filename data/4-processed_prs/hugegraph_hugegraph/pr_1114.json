{"pr_number": 1114, "pr_title": "add entrance for pagerank and wcc", "pr_createdAt": "2020-07-27T13:02:11Z", "pr_url": "https://github.com/hugegraph/hugegraph/pull/1114", "timeline": [{"oid": "77a100b9355d54ca1a00cbfec4325136eaeb4956", "url": "https://github.com/hugegraph/hugegraph/commit/77a100b9355d54ca1a00cbfec4325136eaeb4956", "message": "add entrance for pagerank and wcc\n\nChange-Id: I9d0a35ac8ea2cd7f1c9b6cf86a62a06e68d6498d", "committedDate": "2020-07-27T13:01:08Z", "type": "commit"}, {"oid": "54ef4bf1da8a14e09834cbea5ef9443ead1d69c5", "url": "https://github.com/hugegraph/hugegraph/commit/54ef4bf1da8a14e09834cbea5ef9443ead1d69c5", "message": "improve\n\nChange-Id: I5dcd536180e34d25a72b84b0160b198f2429f70b", "committedDate": "2020-07-27T13:15:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwMDI4OQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1114#discussion_r460900289", "bodyText": "remove space in \"threshold (\"", "author": "javeme", "createdAt": "2020-07-27T13:45:13Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/job/compute/WeakConnectedComponentCompute.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.job.compute;\n+\n+import java.util.Map;\n+\n+import com.baidu.hugegraph.util.E;\n+\n+public class WeakConnectedComponentCompute extends AbstractCompute {\n+\n+    public static final String WCC = \"weak_connected_component\";\n+\n+    public static final String PRECISION = \"precision\";\n+    public static final double DEFAULT_PRECISION = 0.0001D;\n+\n+    @Override\n+    public String name() {\n+        return WCC;\n+    }\n+\n+    @Override\n+    public String category() {\n+        return CATEGORY_COMM;\n+    }\n+\n+    @Override\n+    public void checkParameters(Map<String, Object> parameters) {\n+        this.userDefinedParameters.put(MAX_STEPS, maxSteps(parameters));\n+        this.userDefinedParameters.put(PRECISION, threshold(parameters));\n+    }\n+\n+    private static double threshold (Map<String, Object> parameters) {", "originalCommit": "77a100b9355d54ca1a00cbfec4325136eaeb4956", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwNjgyNg==", "url": "https://github.com/hugegraph/hugegraph/pull/1114#discussion_r460906826", "bodyText": "add ParameterUtil class and move these methods to it", "author": "javeme", "createdAt": "2020-07-27T13:54:34Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/job/compute/AbstractCompute.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.job.compute;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.configuration.tree.ConfigurationNode;\n+import org.apache.tinkerpop.gremlin.util.config.YamlConfiguration;\n+\n+import com.baidu.hugegraph.HugeException;\n+import com.baidu.hugegraph.config.CoreOptions;\n+import com.baidu.hugegraph.job.ComputeJob;\n+import com.baidu.hugegraph.job.Job;\n+import com.baidu.hugegraph.util.E;\n+\n+public abstract class AbstractCompute implements Compute {\n+\n+    private static final String COMMAND_PREFIX =\n+            \"cd $COMPUTER_HOME;\" +\n+            \"hadoop jar hugegraph-computer.jar com.baidu.hugegraph.Computer \" +\n+            \"-D libjars=./hugegraph-computer-core.jar\";\n+\n+    private static final String COMMON = \"common\";\n+    private static final String EXTRA_ARGS = \"extra_args\";\n+    private static final String MINUS = \"-\";\n+    private static final String EQUAL = \"=\";\n+    private static final String EMPTY = \" \";\n+\n+    public static final String MAX_STEPS = \"max_steps\";\n+    public static final int DEFAULT_MAX_STEPS = 5;\n+\n+    protected static final String CATEGORY_RANK = \"rank\";\n+    protected static final String CATEGORY_COMM = \"community\";\n+\n+    private YamlConfiguration config;\n+    private Map<String, Object> commonConfig = new HashMap<>();\n+    protected Map<String, Object> userDefinedParameters = new HashMap<>();\n+\n+    @Override\n+    public void checkParameters(Map<String, Object> parameters) {\n+        E.checkArgument(parameters.isEmpty(),\n+                        \"Unnecessary parameters: %s\", parameters);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public Object call(Job<Object> job, Map<String, Object> parameters) {\n+        // Read configuration\n+        try {\n+            this.initializeConfig((ComputeJob) job);\n+        } catch (Exception e) {\n+            throw new HugeException(\n+                      \"Failed to initialize computer config file\", e);\n+        }\n+\n+        // Set current compute job's specified parameters\n+        this.setComputeSpecifiedParameters();\n+\n+        // Construct shell command for compute job\n+        String command = constructShellCommands(this.commonConfig);\n+\n+        // Execute current compute\n+        int exitCode;\n+        try {\n+            Process process = Runtime.getRuntime().exec(command);\n+            exitCode = process.waitFor();\n+        } catch (Exception e) {\n+            throw new HugeException(\"Failed to execute compute job\", e);\n+        }\n+\n+        return exitCode;\n+    }\n+\n+    private void initializeConfig(ComputeJob job) throws Exception {\n+        // Load computer config file\n+        String configPath = job.config().get(CoreOptions.COMPUTER_CONFIG);\n+        E.checkArgument(configPath.endsWith(\".yaml\"),\n+                        \"Expect a yaml config file.\");\n+\n+        this.config = new YamlConfiguration();\n+        this.config.load(configPath);\n+\n+        // Read common and compute specified parameters\n+        this.commonConfig = this.readCommonConfig();\n+    }\n+\n+    private Map<String, Object> readCommonConfig() {\n+        return readSubConfig(COMMON);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Map<String, Object> readSubConfig(String sub) {\n+        List<ConfigurationNode> nodes = this.config.getRootNode()\n+                                                   .getChildren(sub);\n+        E.checkArgument(nodes.size() == 1,\n+                        \"Must contain one '%s' node in config file '%s'\",\n+                        sub, this.config.getFileName());\n+\n+        List<ConfigurationNode> subConfigs = nodes.get(0).getChildren();\n+        Map<String, Object> results = new HashMap<>(subConfigs.size());\n+        for (ConfigurationNode node : subConfigs) {\n+            if (!node.getName().equals(EXTRA_ARGS)) {\n+                results.put(node.getName(), node.getValue());\n+                continue;\n+            }\n+            assert node.getName().equals(EXTRA_ARGS);\n+            List<ConfigurationNode> extraNodes = node.getChildren();\n+            Map<String, Object> extras = new HashMap<>(extraNodes.size());\n+            for (ConfigurationNode n : extraNodes) {\n+                String key = ((Map.Entry<String, Object>)\n+                             n.getReference()).getKey();\n+                extras.put(key, n.getValue());\n+            }\n+            results.put(node.getName(), extras);\n+        }\n+\n+        return results;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void setComputeSpecifiedParameters() {\n+        ((Map<String, Object>) this.commonConfig.get(EXTRA_ARGS))\n+                               .putAll(this.userDefinedParameters);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private String constructShellCommands(Map<String, Object> configs) {\n+        StringBuilder builder = new StringBuilder(1024);\n+        builder.append(COMMAND_PREFIX).append(EMPTY)\n+               .append(this.name()).append(EMPTY);\n+        for (Map.Entry<String, Object> entry : configs.entrySet()) {\n+            if (!entry.getKey().equals(EXTRA_ARGS)) {\n+                builder.append(MINUS).append(entry.getKey()).append(EMPTY)\n+                       .append(entry.getValue()).append(EMPTY);\n+                continue;\n+            }\n+            Map<String, Object> extras = (Map<String, Object>) entry.getValue();\n+            for (Map.Entry<String, Object> extra : extras.entrySet()) {\n+                builder.append(MINUS).append(EXTRA_ARGS).append(EMPTY)\n+                       .append(extra.getKey()).append(EQUAL)\n+                       .append(extra.getValue()).append(EMPTY);\n+            }\n+        }\n+        return builder.toString();\n+    }\n+\n+    protected static int maxSteps(Map<String, Object> parameters) {\n+        if (!parameters.containsKey(MAX_STEPS)) {\n+            return DEFAULT_MAX_STEPS;\n+        }\n+        int maxSteps = parameterInt(parameters, MAX_STEPS);\n+        E.checkArgument(maxSteps > 0,\n+                        \"The value of %s must be > 0, but got %s\",\n+                        MAX_STEPS, maxSteps);\n+        return maxSteps;\n+    }\n+\n+    public static Object parameter(Map<String, Object> parameters, String key) {\n+        Object value = parameters.get(key);\n+        E.checkArgument(value != null,\n+                        \"Expect '%s' in parameters: %s\",\n+                        key, parameters);\n+        return value;\n+    }\n+\n+    public static String parameterString(Map<String, Object> parameters,", "originalCommit": "77a100b9355d54ca1a00cbfec4325136eaeb4956", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwODQ3MQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1114#discussion_r460908471", "bodyText": "this.readSubConfig", "author": "javeme", "createdAt": "2020-07-27T13:56:46Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/job/compute/AbstractCompute.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.job.compute;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.configuration.tree.ConfigurationNode;\n+import org.apache.tinkerpop.gremlin.util.config.YamlConfiguration;\n+\n+import com.baidu.hugegraph.HugeException;\n+import com.baidu.hugegraph.config.CoreOptions;\n+import com.baidu.hugegraph.job.ComputeJob;\n+import com.baidu.hugegraph.job.Job;\n+import com.baidu.hugegraph.util.E;\n+\n+public abstract class AbstractCompute implements Compute {\n+\n+    private static final String COMMAND_PREFIX =\n+            \"cd $COMPUTER_HOME;\" +\n+            \"hadoop jar hugegraph-computer.jar com.baidu.hugegraph.Computer \" +\n+            \"-D libjars=./hugegraph-computer-core.jar\";\n+\n+    private static final String COMMON = \"common\";\n+    private static final String EXTRA_ARGS = \"extra_args\";\n+    private static final String MINUS = \"-\";\n+    private static final String EQUAL = \"=\";\n+    private static final String EMPTY = \" \";\n+\n+    public static final String MAX_STEPS = \"max_steps\";\n+    public static final int DEFAULT_MAX_STEPS = 5;\n+\n+    protected static final String CATEGORY_RANK = \"rank\";\n+    protected static final String CATEGORY_COMM = \"community\";\n+\n+    private YamlConfiguration config;\n+    private Map<String, Object> commonConfig = new HashMap<>();\n+    protected Map<String, Object> userDefinedParameters = new HashMap<>();\n+\n+    @Override\n+    public void checkParameters(Map<String, Object> parameters) {\n+        E.checkArgument(parameters.isEmpty(),\n+                        \"Unnecessary parameters: %s\", parameters);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public Object call(Job<Object> job, Map<String, Object> parameters) {\n+        // Read configuration\n+        try {\n+            this.initializeConfig((ComputeJob) job);\n+        } catch (Exception e) {\n+            throw new HugeException(\n+                      \"Failed to initialize computer config file\", e);\n+        }\n+\n+        // Set current compute job's specified parameters\n+        this.setComputeSpecifiedParameters();\n+\n+        // Construct shell command for compute job\n+        String command = constructShellCommands(this.commonConfig);\n+\n+        // Execute current compute\n+        int exitCode;\n+        try {\n+            Process process = Runtime.getRuntime().exec(command);\n+            exitCode = process.waitFor();\n+        } catch (Exception e) {\n+            throw new HugeException(\"Failed to execute compute job\", e);\n+        }\n+\n+        return exitCode;\n+    }\n+\n+    private void initializeConfig(ComputeJob job) throws Exception {\n+        // Load computer config file\n+        String configPath = job.config().get(CoreOptions.COMPUTER_CONFIG);\n+        E.checkArgument(configPath.endsWith(\".yaml\"),\n+                        \"Expect a yaml config file.\");\n+\n+        this.config = new YamlConfiguration();\n+        this.config.load(configPath);\n+\n+        // Read common and compute specified parameters\n+        this.commonConfig = this.readCommonConfig();\n+    }\n+\n+    private Map<String, Object> readCommonConfig() {\n+        return readSubConfig(COMMON);", "originalCommit": "77a100b9355d54ca1a00cbfec4325136eaeb4956", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwOTc3OA==", "url": "https://github.com/hugegraph/hugegraph/pull/1114#discussion_r460909778", "bodyText": "There is no compute method named", "author": "javeme", "createdAt": "2020-07-27T13:58:29Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/job/ComputeJob.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.job;\n+\n+import java.util.Map;\n+\n+import com.baidu.hugegraph.config.HugeConfig;\n+import com.baidu.hugegraph.job.compute.Compute;\n+import com.baidu.hugegraph.job.compute.ComputePool;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.JsonUtil;\n+\n+public class ComputeJob extends SysJob<Object> {\n+\n+    public static final String COMPUTE = \"compute\";\n+\n+    public static boolean check(String name, Map<String, Object> parameters) {\n+        Compute algorithm = ComputePool.instance().find(name);\n+        if (algorithm == null) {\n+            return false;\n+        }\n+        algorithm.checkParameters(parameters);\n+        return true;\n+    }\n+\n+    public HugeConfig config() {\n+        return this.params().configuration();\n+    }\n+\n+    @Override\n+    public String type() {\n+        return COMPUTE;\n+    }\n+\n+    @Override\n+    public Object execute() throws Exception {\n+        String input = this.task().input();\n+        E.checkArgumentNotNull(input, \"The input can't be null\");\n+        @SuppressWarnings(\"unchecked\")\n+        Map<String, Object> map = JsonUtil.fromJson(input, Map.class);\n+\n+        Object value = map.get(\"compute\");\n+        E.checkArgument(value instanceof String,\n+                        \"Invalid compute name '%s'\", value);\n+        String name = (String) value;\n+\n+        value = map.get(\"parameters\");\n+        E.checkArgument(value instanceof Map,\n+                        \"Invalid compute parameters '%s'\", value);\n+        @SuppressWarnings(\"unchecked\")\n+        Map<String, Object> parameters = (Map<String, Object>) value;\n+\n+        ComputePool pool = ComputePool.instance();\n+        Compute compute = pool.find(name);\n+        E.checkArgument(compute != null,\n+                        \"There is no compute named '%s'\", name);", "originalCommit": "77a100b9355d54ca1a00cbfec4325136eaeb4956", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "592ec66c0eeb60a8180194952c68797c103f62f4", "url": "https://github.com/hugegraph/hugegraph/commit/592ec66c0eeb60a8180194952c68797c103f62f4", "message": "improve\n\nChange-Id: I7ddfa6ee3959739ed81529bcc7ae078a537fd699", "committedDate": "2020-07-28T03:59:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM0OTg3NA==", "url": "https://github.com/hugegraph/hugegraph/pull/1114#discussion_r461349874", "bodyText": "define var for builder.schedule()", "author": "javeme", "createdAt": "2020-07-28T06:34:59Z", "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/api/job/ComputeAPI.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.api.job;\n+\n+import java.util.Map;\n+\n+import javax.inject.Singleton;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.NotFoundException;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+\n+import org.slf4j.Logger;\n+\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.api.API;\n+import com.baidu.hugegraph.api.filter.StatusFilter.Status;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.core.GraphManager;\n+import com.baidu.hugegraph.job.ComputeJob;\n+import com.baidu.hugegraph.job.JobBuilder;\n+import com.baidu.hugegraph.server.RestServer;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.JsonUtil;\n+import com.baidu.hugegraph.util.Log;\n+import com.codahale.metrics.annotation.Timed;\n+import com.google.common.collect.ImmutableMap;\n+\n+@Path(\"graphs/{graph}/jobs/compute\")\n+@Singleton\n+public class ComputeAPI extends API {\n+\n+    private static final Logger LOG = Log.logger(RestServer.class);\n+\n+    @POST\n+    @Timed\n+    @Path(\"/{name}\")\n+    @Status(Status.CREATED)\n+    @Consumes(APPLICATION_JSON)\n+    @Produces(APPLICATION_JSON_WITH_CHARSET)\n+    public Map<String, Id> post(@Context GraphManager manager,\n+                                @PathParam(\"graph\") String graph,\n+                                @PathParam(\"name\") String compute,\n+                                Map<String, Object> parameters) {\n+        LOG.debug(\"Graph [{}] schedule compute job: {}\", graph, parameters);\n+        E.checkArgument(compute != null && !compute.isEmpty(),\n+                        \"The compute name can't be empty\");\n+        if (parameters == null) {\n+            parameters = ImmutableMap.of();\n+        }\n+        if (!ComputeJob.check(compute, parameters)) {\n+            throw new NotFoundException(\"Not found compute: \" + compute);\n+        }\n+\n+        HugeGraph g = graph(manager, graph);\n+        Map<String, Object> input = ImmutableMap.of(\"compute\", compute,\n+                                                    \"parameters\", parameters);\n+        JobBuilder<Object> builder = JobBuilder.of(g);\n+        builder.name(\"compute:\" + compute)\n+               .input(JsonUtil.toJson(input))\n+               .job(new ComputeJob());\n+        return ImmutableMap.of(\"task_id\", builder.schedule().id());", "originalCommit": "592ec66c0eeb60a8180194952c68797c103f62f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1MDM1MQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1114#discussion_r461350351", "bodyText": "compute/computer unify into one", "author": "javeme", "createdAt": "2020-07-28T06:36:13Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/config/CoreOptions.java", "diffHunk": "@@ -379,4 +379,12 @@ public static synchronized CoreOptions instance() {\n                     disallowEmpty(),\n                     \"smart\"\n             );\n+\n+    public static final ConfigOption<String> COMPUTER_CONFIG =\n+            new ConfigOption<>(\n+                    \"computer.config\",", "originalCommit": "592ec66c0eeb60a8180194952c68797c103f62f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1MDQ1NA==", "url": "https://github.com/hugegraph/hugegraph/pull/1114#discussion_r461350454", "bodyText": "rename", "author": "javeme", "createdAt": "2020-07-28T06:36:30Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/job/ComputeJob.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.job;\n+\n+import java.util.Map;\n+\n+import com.baidu.hugegraph.config.HugeConfig;\n+import com.baidu.hugegraph.job.compute.Compute;\n+import com.baidu.hugegraph.job.compute.ComputePool;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.JsonUtil;\n+\n+public class ComputeJob extends SysJob<Object> {\n+\n+    public static final String COMPUTE = \"compute\";\n+\n+    public static boolean check(String name, Map<String, Object> parameters) {\n+        Compute algorithm = ComputePool.instance().find(name);", "originalCommit": "592ec66c0eeb60a8180194952c68797c103f62f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1MjUyOQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1114#discussion_r461352529", "bodyText": "use task.compute() != this.role.computer()", "author": "javeme", "createdAt": "2020-07-28T06:41:31Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeServerInfo.java", "diffHunk": "@@ -212,6 +212,10 @@ public static HugeServerInfo fromVertex(Vertex vertex) {\n     }\n \n     public <V> boolean suitableFor(HugeTask<V> task, long now) {\n+        if (task.compute() && !this.role.computer() ||\n+            !task.compute() && this.role.computer()) {", "originalCommit": "592ec66c0eeb60a8180194952c68797c103f62f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1MzA3Nw==", "url": "https://github.com/hugegraph/hugegraph/pull/1114#discussion_r461353077", "bodyText": "rename to precision", "author": "javeme", "createdAt": "2020-07-28T06:42:57Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/job/compute/WeakConnectedComponentCompute.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.job.compute;\n+\n+import java.util.Map;\n+\n+import com.baidu.hugegraph.util.E;\n+\n+public class WeakConnectedComponentCompute extends AbstractCompute {\n+\n+    public static final String WCC = \"weak_connected_component\";\n+\n+    public static final String PRECISION = \"precision\";\n+    public static final double DEFAULT_PRECISION = 0.0001D;\n+\n+    @Override\n+    public String name() {\n+        return WCC;\n+    }\n+\n+    @Override\n+    public String category() {\n+        return CATEGORY_COMM;\n+    }\n+\n+    @Override\n+    public void checkParameters(Map<String, Object> parameters) {\n+        this.userDefinedParameters.put(MAX_STEPS, maxSteps(parameters));\n+        this.userDefinedParameters.put(PRECISION, threshold(parameters));\n+    }\n+\n+    private static double threshold(Map<String, Object> parameters) {", "originalCommit": "592ec66c0eeb60a8180194952c68797c103f62f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1NTE3Mw==", "url": "https://github.com/hugegraph/hugegraph/pull/1114#discussion_r461355173", "bodyText": "align with \".\"", "author": "javeme", "createdAt": "2020-07-28T06:47:26Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/job/compute/AbstractCompute.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.job.compute;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.configuration.tree.ConfigurationNode;\n+import org.apache.tinkerpop.gremlin.util.config.YamlConfiguration;\n+\n+import com.baidu.hugegraph.HugeException;\n+import com.baidu.hugegraph.config.CoreOptions;\n+import com.baidu.hugegraph.job.ComputeJob;\n+import com.baidu.hugegraph.job.Job;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.ParameterUtil;\n+\n+public abstract class AbstractCompute implements Compute {\n+\n+    private static final String COMMAND_PREFIX =\n+            \"cd $COMPUTER_HOME;\" +\n+            \"hadoop jar hugegraph-computer.jar com.baidu.hugegraph.Computer \" +\n+            \"-D libjars=./hugegraph-computer-core.jar\";\n+\n+    private static final String COMMON = \"common\";\n+    private static final String EXTRA_ARGS = \"extra_args\";\n+    private static final String EXTRA_ARG_SYMBOL = \"C\";\n+    private static final String MINUS = \"-\";\n+    private static final String EQUAL = \"=\";\n+    private static final String EMPTY = \" \";\n+\n+    public static final String MAX_STEPS = \"max_steps\";\n+    public static final int DEFAULT_MAX_STEPS = 5;\n+\n+    protected static final String CATEGORY_RANK = \"rank\";\n+    protected static final String CATEGORY_COMM = \"community\";\n+\n+    private YamlConfiguration config;\n+    private Map<String, Object> commonConfig = new HashMap<>();\n+    protected Map<String, Object> userDefinedParameters = new HashMap<>();\n+\n+    @Override\n+    public void checkParameters(Map<String, Object> parameters) {\n+        E.checkArgument(parameters.isEmpty(),\n+                        \"Unnecessary parameters: %s\", parameters);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public Object call(Job<Object> job, Map<String, Object> parameters) {\n+        // Read configuration\n+        try {\n+            this.initializeConfig((ComputeJob) job);\n+        } catch (Exception e) {\n+            throw new HugeException(\n+                      \"Failed to initialize computer config file\", e);\n+        }\n+\n+        // Set current compute job's specified parameters\n+        this.setComputeSpecifiedParameters();\n+\n+        // Construct shell command for compute job\n+        String command = constructShellCommands(this.commonConfig);\n+\n+        // Execute current compute\n+        int exitCode;\n+        try {\n+            Process process = Runtime.getRuntime().exec(command);\n+            exitCode = process.waitFor();\n+        } catch (Exception e) {\n+            throw new HugeException(\"Failed to execute compute job\", e);\n+        }\n+\n+        return exitCode;\n+    }\n+\n+    private void initializeConfig(ComputeJob job) throws Exception {\n+        // Load computer config file\n+        String configPath = job.config().get(CoreOptions.COMPUTER_CONFIG);\n+        E.checkArgument(configPath.endsWith(\".yaml\"),\n+                        \"Expect a yaml config file.\");\n+\n+        this.config = new YamlConfiguration();\n+        this.config.load(configPath);\n+\n+        // Read common and compute specified parameters\n+        this.commonConfig = this.readCommonConfig();\n+    }\n+\n+    private Map<String, Object> readCommonConfig() {\n+        return this.readSubConfig(COMMON);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Map<String, Object> readSubConfig(String sub) {\n+        List<ConfigurationNode> nodes = this.config.getRootNode()\n+                                                   .getChildren(sub);\n+        E.checkArgument(nodes.size() == 1,\n+                        \"Must contain one '%s' node in config file '%s'\",\n+                        sub, this.config.getFileName());\n+\n+        List<ConfigurationNode> subConfigs = nodes.get(0).getChildren();\n+        Map<String, Object> results = new HashMap<>(subConfigs.size());\n+        for (ConfigurationNode node : subConfigs) {\n+            if (!node.getName().equals(EXTRA_ARGS)) {\n+                results.put(node.getName(), node.getValue());\n+                continue;\n+            }\n+            assert node.getName().equals(EXTRA_ARGS);\n+            List<ConfigurationNode> extraNodes = node.getChildren();\n+            Map<String, Object> extras = new HashMap<>(extraNodes.size());\n+            for (ConfigurationNode n : extraNodes) {\n+                String key = ((Map.Entry<String, Object>)\n+                             n.getReference()).getKey();\n+                extras.put(key, n.getValue());\n+            }\n+            results.put(node.getName(), extras);\n+        }\n+\n+        return results;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void setComputeSpecifiedParameters() {\n+        ((Map<String, Object>) this.commonConfig.get(EXTRA_ARGS))\n+                               .putAll(this.userDefinedParameters);", "originalCommit": "592ec66c0eeb60a8180194952c68797c103f62f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1NjQ5Ng==", "url": "https://github.com/hugegraph/hugegraph/pull/1114#discussion_r461356496", "bodyText": "add precision", "author": "javeme", "createdAt": "2020-07-28T06:50:16Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/job/compute/PageRankCompute.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.job.compute;\n+\n+import java.util.Map;\n+\n+import com.baidu.hugegraph.util.E;\n+\n+public class PageRankCompute extends AbstractCompute {\n+\n+    public static final String PAGE_RANK = \"page_rank\";\n+\n+    public static final String ALPHA = \"alpha\";\n+    public static final double DEFAULT_ALPHA = 0.15D;\n+\n+    @Override\n+    public String name() {\n+        return PAGE_RANK;\n+    }\n+\n+    @Override\n+    public String category() {\n+        return CATEGORY_RANK;\n+    }\n+\n+    @Override\n+    public void checkParameters(Map<String, Object> parameters) {\n+        this.userDefinedParameters.put(MAX_STEPS, maxSteps(parameters));\n+        this.userDefinedParameters.put(ALPHA, alpha(parameters));", "originalCommit": "592ec66c0eeb60a8180194952c68797c103f62f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1OTI3MA==", "url": "https://github.com/hugegraph/hugegraph/pull/1114#discussion_r461359270", "bodyText": "move into call  and rename checkParameters to checkAndCollectParameters", "author": "javeme", "createdAt": "2020-07-28T06:56:41Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/job/ComputeJob.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.job;\n+\n+import java.util.Map;\n+\n+import com.baidu.hugegraph.config.HugeConfig;\n+import com.baidu.hugegraph.job.compute.Compute;\n+import com.baidu.hugegraph.job.compute.ComputePool;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.JsonUtil;\n+\n+public class ComputeJob extends SysJob<Object> {\n+\n+    public static final String COMPUTE = \"compute\";\n+\n+    public static boolean check(String name, Map<String, Object> parameters) {\n+        Compute algorithm = ComputePool.instance().find(name);\n+        if (algorithm == null) {\n+            return false;\n+        }\n+        algorithm.checkParameters(parameters);\n+        return true;\n+    }\n+\n+    public HugeConfig config() {\n+        return this.params().configuration();\n+    }\n+\n+    @Override\n+    public String type() {\n+        return COMPUTE;\n+    }\n+\n+    @Override\n+    public Object execute() throws Exception {\n+        String input = this.task().input();\n+        E.checkArgumentNotNull(input, \"The input can't be null\");\n+        @SuppressWarnings(\"unchecked\")\n+        Map<String, Object> map = JsonUtil.fromJson(input, Map.class);\n+\n+        Object value = map.get(\"compute\");\n+        E.checkArgument(value instanceof String,\n+                        \"Invalid compute name '%s'\", value);\n+        String name = (String) value;\n+\n+        value = map.get(\"parameters\");\n+        E.checkArgument(value instanceof Map,\n+                        \"Invalid compute parameters '%s'\", value);\n+        @SuppressWarnings(\"unchecked\")\n+        Map<String, Object> parameters = (Map<String, Object>) value;\n+\n+        ComputePool pool = ComputePool.instance();\n+        Compute compute = pool.find(name);\n+        E.checkArgument(compute != null,\n+                        \"There is no compute method named '%s'\", name);\n+        compute.checkParameters(parameters);", "originalCommit": "592ec66c0eeb60a8180194952c68797c103f62f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1OTQyNA==", "url": "https://github.com/hugegraph/hugegraph/pull/1114#discussion_r461359424", "bodyText": "don't define as field", "author": "javeme", "createdAt": "2020-07-28T06:57:02Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/job/compute/AbstractCompute.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.job.compute;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.configuration.tree.ConfigurationNode;\n+import org.apache.tinkerpop.gremlin.util.config.YamlConfiguration;\n+\n+import com.baidu.hugegraph.HugeException;\n+import com.baidu.hugegraph.config.CoreOptions;\n+import com.baidu.hugegraph.job.ComputeJob;\n+import com.baidu.hugegraph.job.Job;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.ParameterUtil;\n+\n+public abstract class AbstractCompute implements Compute {\n+\n+    private static final String COMMAND_PREFIX =\n+            \"cd $COMPUTER_HOME;\" +\n+            \"hadoop jar hugegraph-computer.jar com.baidu.hugegraph.Computer \" +\n+            \"-D libjars=./hugegraph-computer-core.jar\";\n+\n+    private static final String COMMON = \"common\";\n+    private static final String EXTRA_ARGS = \"extra_args\";\n+    private static final String EXTRA_ARG_SYMBOL = \"C\";\n+    private static final String MINUS = \"-\";\n+    private static final String EQUAL = \"=\";\n+    private static final String EMPTY = \" \";\n+\n+    public static final String MAX_STEPS = \"max_steps\";\n+    public static final int DEFAULT_MAX_STEPS = 5;\n+\n+    protected static final String CATEGORY_RANK = \"rank\";\n+    protected static final String CATEGORY_COMM = \"community\";\n+\n+    private YamlConfiguration config;\n+    private Map<String, Object> commonConfig = new HashMap<>();\n+    protected Map<String, Object> userDefinedParameters = new HashMap<>();", "originalCommit": "592ec66c0eeb60a8180194952c68797c103f62f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "80df0a6bf41b15f81f38dd587f160ae8f5c248bd", "url": "https://github.com/hugegraph/hugegraph/commit/80df0a6bf41b15f81f38dd587f160ae8f5c248bd", "message": "format all args to \"-C key=value\"\n\nChange-Id: I6038bd61f5ca9a664acabb4f2036efbda912e62a", "committedDate": "2020-07-28T09:20:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ0NzA4NA==", "url": "https://github.com/hugegraph/hugegraph/pull/1114#discussion_r461447084", "bodyText": "don't update commonConfig", "author": "javeme", "createdAt": "2020-07-28T09:29:30Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/job/computer/AbstractComputer.java", "diffHunk": "@@ -66,33 +66,35 @@ public void checkParameters(Map<String, Object> parameters) {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public Object call(Job<Object> job, Map<String, Object> parameters) {\n+\n+        this.checkAndCollectParameters(parameters);\n         // Read configuration\n         try {\n-            this.initializeConfig((ComputeJob) job);\n+            this.initializeConfig((ComputerJob) job);\n         } catch (Exception e) {\n             throw new HugeException(\n                       \"Failed to initialize computer config file\", e);\n         }\n \n-        // Set current compute job's specified parameters\n-        this.setComputeSpecifiedParameters();\n+        // Set current computer job's specified parameters\n+        this.commonConfig.putAll(this.checkAndCollectParameters(parameters));", "originalCommit": "80df0a6bf41b15f81f38dd587f160ae8f5c248bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ0NzMxOA==", "url": "https://github.com/hugegraph/hugegraph/pull/1114#discussion_r461447318", "bodyText": "this.constructShellCommands", "author": "javeme", "createdAt": "2020-07-28T09:29:52Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/job/computer/AbstractComputer.java", "diffHunk": "@@ -66,33 +66,35 @@ public void checkParameters(Map<String, Object> parameters) {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public Object call(Job<Object> job, Map<String, Object> parameters) {\n+\n+        this.checkAndCollectParameters(parameters);\n         // Read configuration\n         try {\n-            this.initializeConfig((ComputeJob) job);\n+            this.initializeConfig((ComputerJob) job);\n         } catch (Exception e) {\n             throw new HugeException(\n                       \"Failed to initialize computer config file\", e);\n         }\n \n-        // Set current compute job's specified parameters\n-        this.setComputeSpecifiedParameters();\n+        // Set current computer job's specified parameters\n+        this.commonConfig.putAll(this.checkAndCollectParameters(parameters));\n \n-        // Construct shell command for compute job\n+        // Construct shell command for computer job", "originalCommit": "80df0a6bf41b15f81f38dd587f160ae8f5c248bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ0OTA0OQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1114#discussion_r461449049", "bodyText": "extends UserJob", "author": "javeme", "createdAt": "2020-07-28T09:32:40Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/job/ComputerJob.java", "diffHunk": "@@ -22,21 +22,21 @@\n import java.util.Map;\n \n import com.baidu.hugegraph.config.HugeConfig;\n-import com.baidu.hugegraph.job.compute.Compute;\n-import com.baidu.hugegraph.job.compute.ComputePool;\n+import com.baidu.hugegraph.job.computer.Computer;\n+import com.baidu.hugegraph.job.computer.ComputerPool;\n import com.baidu.hugegraph.util.E;\n import com.baidu.hugegraph.util.JsonUtil;\n \n-public class ComputeJob extends SysJob<Object> {\n+public class ComputerJob extends SysJob<Object> {", "originalCommit": "80df0a6bf41b15f81f38dd587f160ae8f5c248bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMTg3MA==", "url": "https://github.com/hugegraph/hugegraph/pull/1114#discussion_r461521870", "bodyText": "need get computer conf from SysJob's params", "author": "zhoney", "createdAt": "2020-07-28T11:53:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ0OTA0OQ=="}], "type": "inlineReview"}, {"oid": "2a4ed24bcd6ee614899b1d7fc59239cbf02b2a7a", "url": "https://github.com/hugegraph/hugegraph/commit/2a4ed24bcd6ee614899b1d7fc59239cbf02b2a7a", "message": "improve\n\nChange-Id: I869d0d895917839269293a97b26ace4b7269b7ac", "committedDate": "2020-07-28T11:54:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0NDExMg==", "url": "https://github.com/hugegraph/hugegraph/pull/1114#discussion_r461544112", "bodyText": "do not expose HugeConfig  to the outside", "author": "javeme", "createdAt": "2020-07-28T12:34:50Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/job/ComputerJob.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.job;\n+\n+import java.util.Map;\n+\n+import com.baidu.hugegraph.config.HugeConfig;\n+import com.baidu.hugegraph.job.computer.Computer;\n+import com.baidu.hugegraph.job.computer.ComputerPool;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.JsonUtil;\n+\n+public class ComputerJob extends SysJob<Object> {\n+\n+    public static final String COMPUTER = \"computer\";\n+\n+    public static boolean check(String name, Map<String, Object> parameters) {\n+        Computer computer = ComputerPool.instance().find(name);\n+        if (computer == null) {\n+            return false;\n+        }\n+        computer.checkParameters(parameters);\n+        return true;\n+    }\n+\n+    public HugeConfig config() {", "originalCommit": "2a4ed24bcd6ee614899b1d7fc59239cbf02b2a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0NDc0Mw==", "url": "https://github.com/hugegraph/hugegraph/pull/1114#discussion_r461544743", "bodyText": "SPACE", "author": "javeme", "createdAt": "2020-07-28T12:35:53Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/job/computer/AbstractComputer.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.job.computer;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.configuration.tree.ConfigurationNode;\n+import org.apache.tinkerpop.gremlin.util.config.YamlConfiguration;\n+\n+import com.baidu.hugegraph.HugeException;\n+import com.baidu.hugegraph.config.CoreOptions;\n+import com.baidu.hugegraph.job.ComputerJob;\n+import com.baidu.hugegraph.job.Job;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.ParameterUtil;\n+\n+public abstract class AbstractComputer implements Computer {\n+\n+    private static final String COMMAND_PREFIX =\n+            \"cd $COMPUTER_HOME;\" +\n+            \"hadoop jar hugegraph-computer.jar com.baidu.hugegraph.Computer \" +\n+            \"-D libjars=./hugegraph-computer-core.jar\";\n+\n+    private static final String COMMON = \"common\";\n+    private static final String ARG_SYMBOL = \"C\";\n+    private static final String MINUS = \"-\";\n+    private static final String EQUAL = \"=\";\n+    private static final String EMPTY = \" \";", "originalCommit": "2a4ed24bcd6ee614899b1d7fc59239cbf02b2a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0NDk3Ng==", "url": "https://github.com/hugegraph/hugegraph/pull/1114#discussion_r461544976", "bodyText": "cache throwable", "author": "javeme", "createdAt": "2020-07-28T12:36:21Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/job/computer/AbstractComputer.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.job.computer;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.configuration.tree.ConfigurationNode;\n+import org.apache.tinkerpop.gremlin.util.config.YamlConfiguration;\n+\n+import com.baidu.hugegraph.HugeException;\n+import com.baidu.hugegraph.config.CoreOptions;\n+import com.baidu.hugegraph.job.ComputerJob;\n+import com.baidu.hugegraph.job.Job;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.ParameterUtil;\n+\n+public abstract class AbstractComputer implements Computer {\n+\n+    private static final String COMMAND_PREFIX =\n+            \"cd $COMPUTER_HOME;\" +\n+            \"hadoop jar hugegraph-computer.jar com.baidu.hugegraph.Computer \" +\n+            \"-D libjars=./hugegraph-computer-core.jar\";\n+\n+    private static final String COMMON = \"common\";\n+    private static final String ARG_SYMBOL = \"C\";\n+    private static final String MINUS = \"-\";\n+    private static final String EQUAL = \"=\";\n+    private static final String EMPTY = \" \";\n+\n+    public static final String MAX_STEPS = \"max_steps\";\n+    public static final int DEFAULT_MAX_STEPS = 5;\n+    public static final String PRECISION = \"precision\";\n+    public static final double DEFAULT_PRECISION = 0.0001D;\n+\n+    protected static final String CATEGORY_RANK = \"rank\";\n+    protected static final String CATEGORY_COMM = \"community\";\n+\n+    private YamlConfiguration config;\n+    private Map<String, Object> commonConfig = new HashMap<>();\n+\n+    @Override\n+    public void checkParameters(Map<String, Object> parameters) {\n+        E.checkArgument(parameters.isEmpty(),\n+                        \"Unnecessary parameters: %s\", parameters);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public Object call(Job<Object> job, Map<String, Object> parameters) {\n+\n+        this.checkAndCollectParameters(parameters);\n+        // Read configuration\n+        try {\n+            this.initializeConfig((ComputerJob) job);\n+        } catch (Exception e) {\n+            throw new HugeException(\n+                      \"Failed to initialize computer config file\", e);\n+        }\n+\n+        // Set current computer job's specified parameters\n+        Map<String, Object> configs = new HashMap<>();\n+        configs.putAll(this.commonConfig);\n+        configs.putAll(this.checkAndCollectParameters(parameters));\n+\n+        // Construct shell command for computer job\n+        String command = this.constructShellCommands(configs);\n+\n+        // Execute current computer\n+        int exitCode;\n+        try {\n+            Process process = Runtime.getRuntime().exec(command);\n+            exitCode = process.waitFor();\n+        } catch (Exception e) {", "originalCommit": "2a4ed24bcd6ee614899b1d7fc59239cbf02b2a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0NTY1NA==", "url": "https://github.com/hugegraph/hugegraph/pull/1114#discussion_r461545654", "bodyText": "change to 0.0 1.0", "author": "javeme", "createdAt": "2020-07-28T12:37:26Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/job/computer/AbstractComputer.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.job.computer;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.configuration.tree.ConfigurationNode;\n+import org.apache.tinkerpop.gremlin.util.config.YamlConfiguration;\n+\n+import com.baidu.hugegraph.HugeException;\n+import com.baidu.hugegraph.config.CoreOptions;\n+import com.baidu.hugegraph.job.ComputerJob;\n+import com.baidu.hugegraph.job.Job;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.ParameterUtil;\n+\n+public abstract class AbstractComputer implements Computer {\n+\n+    private static final String COMMAND_PREFIX =\n+            \"cd $COMPUTER_HOME;\" +\n+            \"hadoop jar hugegraph-computer.jar com.baidu.hugegraph.Computer \" +\n+            \"-D libjars=./hugegraph-computer-core.jar\";\n+\n+    private static final String COMMON = \"common\";\n+    private static final String ARG_SYMBOL = \"C\";\n+    private static final String MINUS = \"-\";\n+    private static final String EQUAL = \"=\";\n+    private static final String EMPTY = \" \";\n+\n+    public static final String MAX_STEPS = \"max_steps\";\n+    public static final int DEFAULT_MAX_STEPS = 5;\n+    public static final String PRECISION = \"precision\";\n+    public static final double DEFAULT_PRECISION = 0.0001D;\n+\n+    protected static final String CATEGORY_RANK = \"rank\";\n+    protected static final String CATEGORY_COMM = \"community\";\n+\n+    private YamlConfiguration config;\n+    private Map<String, Object> commonConfig = new HashMap<>();\n+\n+    @Override\n+    public void checkParameters(Map<String, Object> parameters) {\n+        E.checkArgument(parameters.isEmpty(),\n+                        \"Unnecessary parameters: %s\", parameters);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public Object call(Job<Object> job, Map<String, Object> parameters) {\n+\n+        this.checkAndCollectParameters(parameters);\n+        // Read configuration\n+        try {\n+            this.initializeConfig((ComputerJob) job);\n+        } catch (Exception e) {\n+            throw new HugeException(\n+                      \"Failed to initialize computer config file\", e);\n+        }\n+\n+        // Set current computer job's specified parameters\n+        Map<String, Object> configs = new HashMap<>();\n+        configs.putAll(this.commonConfig);\n+        configs.putAll(this.checkAndCollectParameters(parameters));\n+\n+        // Construct shell command for computer job\n+        String command = this.constructShellCommands(configs);\n+\n+        // Execute current computer\n+        int exitCode;\n+        try {\n+            Process process = Runtime.getRuntime().exec(command);\n+            exitCode = process.waitFor();\n+        } catch (Exception e) {\n+            throw new HugeException(\"Failed to execute computer job\", e);\n+        }\n+\n+        return exitCode;\n+    }\n+\n+    private void initializeConfig(ComputerJob job) throws Exception {\n+        // Load computer config file\n+        String configPath = job.config().get(CoreOptions.COMPUTER_CONFIG);\n+        E.checkArgument(configPath.endsWith(\".yaml\"),\n+                        \"Expect a yaml config file.\");\n+\n+        this.config = new YamlConfiguration();\n+        this.config.load(configPath);\n+\n+        // Read common and computer specified parameters\n+        this.commonConfig = this.readCommonConfig();\n+    }\n+\n+    private Map<String, Object> readCommonConfig() {\n+        return this.readSubConfig(COMMON);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Map<String, Object> readSubConfig(String sub) {\n+        List<ConfigurationNode> nodes = this.config.getRootNode()\n+                                                   .getChildren(sub);\n+        E.checkArgument(nodes.size() == 1,\n+                        \"Must contain one '%s' node in config file '%s'\",\n+                        sub, this.config.getFileName());\n+\n+        List<ConfigurationNode> subConfigs = nodes.get(0).getChildren();\n+        Map<String, Object> results = new HashMap<>(subConfigs.size());\n+        for (ConfigurationNode node : subConfigs) {\n+            results.put(node.getName(), node.getValue());\n+        }\n+\n+        return results;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private String constructShellCommands(Map<String, Object> configs) {\n+        StringBuilder builder = new StringBuilder(1024);\n+        builder.append(COMMAND_PREFIX).append(EMPTY)\n+               .append(this.name()).append(EMPTY);\n+        for (Map.Entry<String, Object> entry : configs.entrySet()) {\n+            builder.append(MINUS).append(ARG_SYMBOL).append(EMPTY)\n+                   .append(entry.getKey()).append(EQUAL)\n+                   .append(entry.getValue()).append(EMPTY);\n+        }\n+        return builder.toString();\n+    }\n+\n+    public abstract Map<String, Object> checkAndCollectParameters(\n+                                        Map<String, Object> parameters);\n+\n+    protected static int maxSteps(Map<String, Object> parameters) {\n+        if (!parameters.containsKey(MAX_STEPS)) {\n+            return DEFAULT_MAX_STEPS;\n+        }\n+        int maxSteps = ParameterUtil.parameterInt(parameters, MAX_STEPS);\n+        E.checkArgument(maxSteps > 0,\n+                        \"The value of %s must be > 0, but got %s\",\n+                        MAX_STEPS, maxSteps);\n+        return maxSteps;\n+    }\n+\n+    protected static double precision(Map<String, Object> parameters) {\n+        if (!parameters.containsKey(PRECISION)) {\n+            return DEFAULT_PRECISION;\n+        }\n+        double precision = ParameterUtil.parameterDouble(parameters, PRECISION);\n+        E.checkArgument(precision > 0 && precision < 1,", "originalCommit": "2a4ed24bcd6ee614899b1d7fc59239cbf02b2a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0NzE0OA==", "url": "https://github.com/hugegraph/hugegraph/pull/1114#discussion_r461547148", "bodyText": "127.0", "author": "javeme", "createdAt": "2020-07-28T12:39:58Z", "path": "hugegraph-dist/src/assembly/static/conf/computer.yaml", "diffHunk": "@@ -0,0 +1,16 @@\n+# common parameters\n+common : {\n+  worker_heap: 10000,\n+  vertex_input_dir: /data/data_wdc_600/arc,\n+  workers: 51,\n+  zookeeper_list: \"10.157.11.170:2181\",", "originalCommit": "2a4ed24bcd6ee614899b1d7fc59239cbf02b2a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fabce45b8493bdea6d32c54eac336a3c436fa624", "url": "https://github.com/hugegraph/hugegraph/commit/fabce45b8493bdea6d32c54eac336a3c436fa624", "message": "improve\n\nChange-Id: I731fc6374992b834f22403be0734ca9288b21b34", "committedDate": "2020-07-28T12:50:39Z", "type": "commit"}]}