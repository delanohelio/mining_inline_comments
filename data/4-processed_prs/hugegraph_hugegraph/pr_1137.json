{"pr_number": 1137, "pr_title": "Support raft node control", "pr_createdAt": "2020-08-10T16:39:06Z", "pr_url": "https://github.com/hugegraph/hugegraph/pull/1137", "timeline": [{"oid": "1b34c9b0104f3cb0a37c789ceb159cf2eee106fd", "url": "https://github.com/hugegraph/hugegraph/commit/1b34c9b0104f3cb0a37c789ceb159cf2eee106fd", "message": "add peer manage methods\n\nChange-Id: Iff7c36603035f97ffdf11d337e08cd8890fabfcd", "committedDate": "2020-08-24T15:34:54Z", "type": "forcePushed"}, {"oid": "601a6961882359658b05255079c59016c275dfd8", "url": "https://github.com/hugegraph/hugegraph/commit/601a6961882359658b05255079c59016c275dfd8", "message": "add peer manage methods\n\nChange-Id: Iff7c36603035f97ffdf11d337e08cd8890fabfcd", "committedDate": "2020-09-21T09:04:14Z", "type": "forcePushed"}, {"oid": "71064b525be73cde0d5cd7d594903f47559f23db", "url": "https://github.com/hugegraph/hugegraph/commit/71064b525be73cde0d5cd7d594903f47559f23db", "message": "Support raft node control\n\nChange-Id: I90e2bc97d3aaa1f78208d07fb71dbfcdef991c93", "committedDate": "2020-09-22T06:55:37Z", "type": "forcePushed"}, {"oid": "24d9cbc4d6b53966af16f13571a5f8f14d4d99b1", "url": "https://github.com/hugegraph/hugegraph/commit/24d9cbc4d6b53966af16f13571a5f8f14d4d99b1", "message": "Support raft node control\n\nChange-Id: I90e2bc97d3aaa1f78208d07fb71dbfcdef991c93", "committedDate": "2020-09-22T08:24:43Z", "type": "forcePushed"}, {"oid": "f98773f6e71b86c29f789b028debe6d489340f6a", "url": "https://github.com/hugegraph/hugegraph/commit/f98773f6e71b86c29f789b028debe6d489340f6a", "message": "Support raft node control\n\nChange-Id: I90e2bc97d3aaa1f78208d07fb71dbfcdef991c93", "committedDate": "2020-09-22T08:30:10Z", "type": "forcePushed"}, {"oid": "f056760e86a90f22faa6122157962aa8dcad2dd3", "url": "https://github.com/hugegraph/hugegraph/commit/f056760e86a90f22faa6122157962aa8dcad2dd3", "message": "Support raft node control\n\nChange-Id: I90e2bc97d3aaa1f78208d07fb71dbfcdef991c93", "committedDate": "2020-09-22T08:31:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIzMzcyMw==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r493233723", "bodyText": "log warn", "author": "javeme", "createdAt": "2020-09-23T06:43:53Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java", "diffHunk": "@@ -171,8 +229,12 @@ public void notifyCache(HugeType type, Id id) {\n         } else {\n             return;\n         }\n-        // How to avoid update cache from server info\n-        eventHub.notify(Events.CACHE, \"invalid\", type, id);\n+        try {\n+            // How to avoid update cache from server info\n+            eventHub.notify(Events.CACHE, \"invalid\", type, id);\n+        } catch (RejectedExecutionException e) {\n+            // pass", "originalCommit": "f056760e86a90f22faa6122157962aa8dcad2dd3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIzNTA0NA==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r493235044", "bodyText": "add a method this.storeProvider(g)", "author": "javeme", "createdAt": "2020-09-23T06:46:43Z", "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/api/raft/RaftAPI.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.api.raft;\n+\n+import java.util.Map;\n+\n+import javax.annotation.security.RolesAllowed;\n+import javax.inject.Singleton;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+\n+import org.slf4j.Logger;\n+\n+import com.baidu.hugegraph.HugeException;\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.api.API;\n+import com.baidu.hugegraph.api.filter.StatusFilter.Status;\n+import com.baidu.hugegraph.backend.store.raft.RaftBackendStoreProvider;\n+import com.baidu.hugegraph.core.GraphManager;\n+import com.baidu.hugegraph.util.Log;\n+import com.codahale.metrics.annotation.Timed;\n+import com.google.common.collect.ImmutableMap;\n+\n+@Path(\"graphs/{graph}/raft\")\n+@Singleton\n+public class RaftAPI extends API {\n+\n+    private static final Logger LOG = Log.logger(RaftAPI.class);\n+\n+    @GET\n+    @Timed\n+    @Path(\"leader\")\n+    @Consumes(APPLICATION_JSON)\n+    @Produces(APPLICATION_JSON_WITH_CHARSET)\n+    @RolesAllowed({\"admin\", \"$owner=$graph\"})\n+    public Map<String, String> getLeader(@Context GraphManager manager,\n+                                         @PathParam(\"graph\") String graph) {\n+        LOG.debug(\"Graph [{}] prepare to get leader\", graph);\n+\n+        HugeGraph g = graph(manager, graph);\n+        if (!(g.storeProvider() instanceof RaftBackendStoreProvider)) {\n+            throw new HugeException(\"Only work on raft mode can get leader\");\n+        }\n+        RaftBackendStoreProvider provider = (RaftBackendStoreProvider)\n+                                            g.storeProvider();\n+        return provider.getLeader();\n+    }\n+\n+    @POST\n+    @Timed\n+    @Status(Status.OK)\n+    @Path(\"transfer-leader\")\n+    @Consumes(APPLICATION_JSON)\n+    @Produces(APPLICATION_JSON_WITH_CHARSET)\n+    @RolesAllowed({\"admin\", \"$owner=$graph\"})\n+    public Map<String, String> transferLeader(\n+                               @Context GraphManager manager,\n+                               @PathParam(\"graph\") String graph,\n+                               @QueryParam(\"endpoint\") String endpoint) {\n+        LOG.debug(\"Graph [{}] prepare to transfer leader to: {}\",\n+                  graph, endpoint);\n+\n+        HugeGraph g = graph(manager, graph);\n+        if (!(g.storeProvider() instanceof RaftBackendStoreProvider)) {\n+            throw new HugeException(\"Only work on raft mode can transfer \" +\n+                                    \"leader\");\n+        }\n+        RaftBackendStoreProvider provider = (RaftBackendStoreProvider)\n+                                            g.storeProvider();", "originalCommit": "f056760e86a90f22faa6122157962aa8dcad2dd3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIzODQwMg==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r493238402", "bodyText": "get-leader", "author": "javeme", "createdAt": "2020-09-23T06:53:47Z", "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/api/raft/RaftAPI.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.api.raft;\n+\n+import java.util.Map;\n+\n+import javax.annotation.security.RolesAllowed;\n+import javax.inject.Singleton;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+\n+import org.slf4j.Logger;\n+\n+import com.baidu.hugegraph.HugeException;\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.api.API;\n+import com.baidu.hugegraph.api.filter.StatusFilter.Status;\n+import com.baidu.hugegraph.backend.store.raft.RaftBackendStoreProvider;\n+import com.baidu.hugegraph.core.GraphManager;\n+import com.baidu.hugegraph.util.Log;\n+import com.codahale.metrics.annotation.Timed;\n+import com.google.common.collect.ImmutableMap;\n+\n+@Path(\"graphs/{graph}/raft\")\n+@Singleton\n+public class RaftAPI extends API {\n+\n+    private static final Logger LOG = Log.logger(RaftAPI.class);\n+\n+    @GET\n+    @Timed\n+    @Path(\"leader\")", "originalCommit": "f056760e86a90f22faa6122157962aa8dcad2dd3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b09b1ba819544e3c66a2962e8946ac8a08422d1f", "url": "https://github.com/hugegraph/hugegraph/commit/b09b1ba819544e3c66a2962e8946ac8a08422d1f", "message": "Support raft node control\n\nChange-Id: I90e2bc97d3aaa1f78208d07fb71dbfcdef991c93", "committedDate": "2020-10-19T06:59:51Z", "type": "commit"}, {"oid": "0abb0f69f6fa119c76ea299a4c9d29f4206ae635", "url": "https://github.com/hugegraph/hugegraph/commit/0abb0f69f6fa119c76ea299a4c9d29f4206ae635", "message": "tiny improve\n\nChange-Id: I4f1ce11c7178b6e24ca33b2bfb29e3dfe45ba407", "committedDate": "2020-10-19T07:07:32Z", "type": "commit"}, {"oid": "0abb0f69f6fa119c76ea299a4c9d29f4206ae635", "url": "https://github.com/hugegraph/hugegraph/commit/0abb0f69f6fa119c76ea299a4c9d29f4206ae635", "message": "tiny improve\n\nChange-Id: I4f1ce11c7178b6e24ca33b2bfb29e3dfe45ba407", "committedDate": "2020-10-19T07:07:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMwODkxNw==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r508308917", "bodyText": "keep admin", "author": "javeme", "createdAt": "2020-10-20T08:29:28Z", "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/api/raft/RaftAPI.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.api.raft;\n+\n+import java.util.Map;\n+\n+import javax.annotation.security.RolesAllowed;\n+import javax.inject.Singleton;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+\n+import org.slf4j.Logger;\n+\n+import com.baidu.hugegraph.HugeException;\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.api.API;\n+import com.baidu.hugegraph.api.filter.StatusFilter.Status;\n+import com.baidu.hugegraph.backend.store.raft.RaftBackendStoreProvider;\n+import com.baidu.hugegraph.core.GraphManager;\n+import com.baidu.hugegraph.util.Log;\n+import com.codahale.metrics.annotation.Timed;\n+import com.google.common.collect.ImmutableMap;\n+\n+@Path(\"graphs/{graph}/raft\")\n+@Singleton\n+public class RaftAPI extends API {\n+\n+    private static final Logger LOG = Log.logger(RaftAPI.class);\n+\n+    @GET\n+    @Timed\n+    @Path(\"get-leader\")\n+    @Consumes(APPLICATION_JSON)\n+    @Produces(APPLICATION_JSON_WITH_CHARSET)\n+    @RolesAllowed({\"admin\", \"$owner=$graph\"})\n+    public Map<String, String> getLeader(@Context GraphManager manager,\n+                                         @PathParam(\"graph\") String graph) {\n+        LOG.debug(\"Graph [{}] prepare to get leader\", graph);\n+\n+        HugeGraph g = graph(manager, graph);\n+        if (!(g.storeProvider() instanceof RaftBackendStoreProvider)) {\n+            throw new HugeException(\"Only work on raft mode can get leader\");\n+        }\n+        RaftBackendStoreProvider provider = this.storeProvider(g);\n+        return provider.getLeader();\n+    }\n+\n+    @POST\n+    @Timed\n+    @Status(Status.OK)\n+    @Path(\"transfer-leader\")\n+    @Consumes(APPLICATION_JSON)\n+    @Produces(APPLICATION_JSON_WITH_CHARSET)\n+    @RolesAllowed({\"admin\", \"$owner=$graph\"})\n+    public Map<String, String> transferLeader(\n+                               @Context GraphManager manager,\n+                               @PathParam(\"graph\") String graph,\n+                               @QueryParam(\"endpoint\") String endpoint) {\n+        LOG.debug(\"Graph [{}] prepare to transfer leader to: {}\",\n+                  graph, endpoint);\n+\n+        HugeGraph g = graph(manager, graph);\n+        if (!(g.storeProvider() instanceof RaftBackendStoreProvider)) {\n+            throw new HugeException(\"Only work on raft mode can transfer \" +\n+                                    \"leader\");\n+        }\n+        RaftBackendStoreProvider provider = this.storeProvider(g);\n+        provider.transferLeaderTo(endpoint);\n+        return ImmutableMap.of(\"leader\", endpoint);\n+    }\n+\n+    @POST\n+    @Timed\n+    @Status(Status.OK)\n+    @Path(\"set-leader\")\n+    @Consumes(APPLICATION_JSON)\n+    @Produces(APPLICATION_JSON_WITH_CHARSET)\n+    @RolesAllowed({\"admin\", \"$owner=$graph\"})\n+    public Map<String, String> setLeader(\n+                               @Context GraphManager manager,\n+                               @PathParam(\"graph\") String graph,\n+                               @QueryParam(\"endpoint\") String endpoint) {\n+        LOG.debug(\"Graph [{}] prepare to set leader to: {}\",\n+                  graph, endpoint);\n+\n+        HugeGraph g = graph(manager, graph);\n+        if (!(g.storeProvider() instanceof RaftBackendStoreProvider)) {\n+            throw new HugeException(\"Only work on raft mode can set leader\");\n+        }\n+        RaftBackendStoreProvider provider = this.storeProvider(g);\n+        provider.setLeader(endpoint);\n+        return ImmutableMap.of(\"leader\", endpoint);\n+    }\n+\n+    @POST\n+    @Timed\n+    @Status(Status.OK)\n+    @Path(\"add-peer\")\n+    @Consumes(APPLICATION_JSON)\n+    @Produces(APPLICATION_JSON_WITH_CHARSET)\n+    @RolesAllowed({\"admin\", \"$owner=$graph\"})\n+    public Map<String, String> addPeer(@Context GraphManager manager,\n+                                       @PathParam(\"graph\") String graph,\n+                                       @QueryParam(\"endpoint\") String endpoint) {\n+        LOG.debug(\"Graph [{}] prepare to add peer: {}\", graph, endpoint);\n+\n+        HugeGraph g = graph(manager, graph);\n+        if (!(g.storeProvider() instanceof RaftBackendStoreProvider)) {\n+            throw new HugeException(\"Only work on raft mode can add peer\");\n+        }\n+        RaftBackendStoreProvider provider = this.storeProvider(g);\n+        provider.addPeer(endpoint);\n+        return ImmutableMap.of(\"endpoint\", endpoint);\n+    }\n+\n+    @POST\n+    @Timed\n+    @Status(Status.OK)\n+    @Path(\"remove-peer\")\n+    @Consumes(APPLICATION_JSON)\n+    @Produces(APPLICATION_JSON_WITH_CHARSET)\n+    @RolesAllowed({\"admin\", \"$owner=$graph\"})", "originalCommit": "0abb0f69f6fa119c76ea299a4c9d29f4206ae635", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxMTYyMQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r508311621", "bodyText": "add RaftManager interface", "author": "javeme", "createdAt": "2020-10-20T08:33:14Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStoreProvider.java", "diffHunk": "@@ -77,6 +80,30 @@ private void checkOpened() {\n                      \"The RaftBackendStoreProvider has not been opened\");\n     }\n \n+    public Map<String, String> getLeader() {\n+        RaftNode node = this.context.node();\n+        PeerId leaderId = node.leaderId();\n+        E.checkState(leaderId != null, \"There is no leader for group %s\",\n+                     this.context.group());\n+        return ImmutableMap.of(this.context.group(), leaderId.toString());\n+    }\n+\n+    public void transferLeaderTo(String endpoint) {\n+        this.context.node().transferLeaderTo(PeerId.parsePeer(endpoint));\n+    }\n+\n+    public void setLeader(String endpoint) {\n+        this.context.node().setLeader(PeerId.parsePeer(endpoint));\n+    }\n+\n+    public void addPeer(String endpoint) {\n+        this.context.node().addPeer(PeerId.parsePeer(endpoint));\n+    }\n+\n+    public void removePeer(String endpoint) {\n+        this.context.node().removePeer(PeerId.parsePeer(endpoint));\n+    }\n+", "originalCommit": "0abb0f69f6fa119c76ea299a4c9d29f4206ae635", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxMjM5MA==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r508312390", "bodyText": "also use AtomicBoolean", "author": "javeme", "createdAt": "2020-10-20T08:34:24Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -63,8 +65,6 @@\n     private final StoreStateMachine stateMachine;\n     private final AtomicLong leaderTerm;\n \n-    private final Object electedLock;\n-    private volatile boolean elected;\n     private volatile boolean started;", "originalCommit": "0abb0f69f6fa119c76ea299a4c9d29f4206ae635", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxMzI4Mw==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r508313283", "bodyText": "Waiting for raft group '%s' election is interrupted", "author": "javeme", "createdAt": "2020-10-20T08:35:37Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -166,40 +223,28 @@ public Object submitAndWait(StoreCommand command, StoreClosure future) {\n         }\n     }\n \n-    public void onElected(boolean value) {\n-        synchronized(this.electedLock) {\n-            this.elected = value;\n-            this.electedLock.notify();\n-        }\n-    }\n-\n     protected void waitLeaderElected(int timeout) {\n         String group = this.context.group();\n         if (this.node.getLeaderId() != null) {\n             return;\n         }\n         long beginTime = System.currentTimeMillis();\n-        synchronized(this.electedLock) {\n-            while (!this.elected) {\n-                try {\n-                    this.electedLock.wait(RaftSharedContext.POLL_INTERVAL);\n-                } catch (InterruptedException e) {\n-                    throw new BackendException(\n-                              \"Interrupted while waiting raft group '%s' \" +\n-                              \"election\", e, group);\n-                }\n-                if (this.elected) {\n-                    break;\n-                }\n-                long consumedTime = System.currentTimeMillis() - beginTime;\n-                if (timeout > 0 && consumedTime >= timeout) {\n-                    throw new BackendException(\n-                              \"Wait raft group '{}' election timeout({}ms)\",\n-                              group, consumedTime);\n-                }\n-                LOG.warn(\"Waiting raft group '{}' election cost {}s\",\n-                         group, consumedTime / 1000.0);\n+        while (this.node.getLeaderId() == null) {\n+            try {\n+                Thread.sleep(RaftSharedContext.POLL_INTERVAL);\n+            } catch (InterruptedException e) {\n+                throw new BackendException(\n+                          \"Wait raft group '%s' election error\",", "originalCommit": "0abb0f69f6fa119c76ea299a4c9d29f4206ae635", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxMzc3Mg==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r508313772", "bodyText": "improve", "author": "javeme", "createdAt": "2020-10-20T08:36:19Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -112,6 +110,65 @@ public void shutdown() {\n         this.node.shutdown();\n     }\n \n+    public void transferLeaderTo(PeerId peerId) {\n+        Status status = this.node.transferLeadershipTo(peerId);\n+        if (!status.isOk()) {\n+            throw new BackendException(\"Failed to transafer leader to '%s', \" +\n+                                       \"raft error : %s\",", "originalCommit": "0abb0f69f6fa119c76ea299a4c9d29f4206ae635", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNDA4NQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r508314085", "bodyText": "rename to e", "author": "javeme", "createdAt": "2020-10-20T08:36:46Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -112,6 +110,65 @@ public void shutdown() {\n         this.node.shutdown();\n     }\n \n+    public void transferLeaderTo(PeerId peerId) {\n+        Status status = this.node.transferLeadershipTo(peerId);\n+        if (!status.isOk()) {\n+            throw new BackendException(\"Failed to transafer leader to '%s', \" +\n+                                       \"raft error : %s\",\n+                                       peerId, status.getErrorMsg());\n+        }\n+    }\n+\n+    public void setLeader(PeerId newLeaderId) {\n+        // No need to re-elect if already is new leader\n+        if (this.node.getLeaderId().equals(newLeaderId)) {\n+            return;\n+        }\n+        if (this.isRaftLeader()) {\n+            // If current node is the leader, transfer directly\n+            this.transferLeaderTo(newLeaderId);\n+        } else {\n+            // If current node is not leader, forward request to leader\n+            String endpoint = newLeaderId.toString();\n+            SetLeaderRequest request = SetLeaderRequest.newBuilder()\n+                                                       .setEndpoint(endpoint)\n+                                                       .build();\n+            RaftClosure future = new RaftClosure();\n+            this.forwardToLeader(request, future);\n+            try {\n+                future.waitFinished();\n+            } catch (RuntimeException e) {\n+                throw e;\n+            } catch (Throwable t) {\n+                throw new BackendException(t);\n+            }\n+        }\n+    }\n+\n+    public void addPeer(PeerId peerId) {\n+        RaftClosure future = new RaftClosure();\n+        this.node.addPeer(peerId, future);\n+        try {\n+            future.waitFinished();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Throwable t) {", "originalCommit": "0abb0f69f6fa119c76ea299a4c9d29f4206ae635", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNDIwMw==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r508314203", "bodyText": "improve message", "author": "javeme", "createdAt": "2020-10-20T08:36:57Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -112,6 +110,65 @@ public void shutdown() {\n         this.node.shutdown();\n     }\n \n+    public void transferLeaderTo(PeerId peerId) {\n+        Status status = this.node.transferLeadershipTo(peerId);\n+        if (!status.isOk()) {\n+            throw new BackendException(\"Failed to transafer leader to '%s', \" +\n+                                       \"raft error : %s\",\n+                                       peerId, status.getErrorMsg());\n+        }\n+    }\n+\n+    public void setLeader(PeerId newLeaderId) {\n+        // No need to re-elect if already is new leader\n+        if (this.node.getLeaderId().equals(newLeaderId)) {\n+            return;\n+        }\n+        if (this.isRaftLeader()) {\n+            // If current node is the leader, transfer directly\n+            this.transferLeaderTo(newLeaderId);\n+        } else {\n+            // If current node is not leader, forward request to leader\n+            String endpoint = newLeaderId.toString();\n+            SetLeaderRequest request = SetLeaderRequest.newBuilder()\n+                                                       .setEndpoint(endpoint)\n+                                                       .build();\n+            RaftClosure future = new RaftClosure();\n+            this.forwardToLeader(request, future);\n+            try {\n+                future.waitFinished();\n+            } catch (RuntimeException e) {\n+                throw e;\n+            } catch (Throwable t) {\n+                throw new BackendException(t);\n+            }\n+        }\n+    }\n+\n+    public void addPeer(PeerId peerId) {\n+        RaftClosure future = new RaftClosure();\n+        this.node.addPeer(peerId, future);\n+        try {\n+            future.waitFinished();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Throwable t) {\n+            throw new BackendException(t);", "originalCommit": "0abb0f69f6fa119c76ea299a4c9d29f4206ae635", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNDMzMw==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r508314333", "bodyText": "ditto", "author": "javeme", "createdAt": "2020-10-20T08:37:10Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -112,6 +110,65 @@ public void shutdown() {\n         this.node.shutdown();\n     }\n \n+    public void transferLeaderTo(PeerId peerId) {\n+        Status status = this.node.transferLeadershipTo(peerId);\n+        if (!status.isOk()) {\n+            throw new BackendException(\"Failed to transafer leader to '%s', \" +\n+                                       \"raft error : %s\",\n+                                       peerId, status.getErrorMsg());\n+        }\n+    }\n+\n+    public void setLeader(PeerId newLeaderId) {\n+        // No need to re-elect if already is new leader\n+        if (this.node.getLeaderId().equals(newLeaderId)) {\n+            return;\n+        }\n+        if (this.isRaftLeader()) {\n+            // If current node is the leader, transfer directly\n+            this.transferLeaderTo(newLeaderId);\n+        } else {\n+            // If current node is not leader, forward request to leader\n+            String endpoint = newLeaderId.toString();\n+            SetLeaderRequest request = SetLeaderRequest.newBuilder()\n+                                                       .setEndpoint(endpoint)\n+                                                       .build();\n+            RaftClosure future = new RaftClosure();\n+            this.forwardToLeader(request, future);\n+            try {\n+                future.waitFinished();\n+            } catch (RuntimeException e) {\n+                throw e;\n+            } catch (Throwable t) {\n+                throw new BackendException(t);\n+            }\n+        }\n+    }\n+\n+    public void addPeer(PeerId peerId) {\n+        RaftClosure future = new RaftClosure();\n+        this.node.addPeer(peerId, future);\n+        try {\n+            future.waitFinished();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Throwable t) {\n+            throw new BackendException(t);\n+        }\n+    }\n+\n+    public void removePeer(PeerId peerId) {\n+        RaftClosure future = new RaftClosure();\n+        this.node.removePeer(peerId, future);\n+        try {\n+            future.waitFinished();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Throwable t) {\n+            throw new BackendException(t);", "originalCommit": "0abb0f69f6fa119c76ea299a4c9d29f4206ae635", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNDQyOQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r508314429", "bodyText": "ditto", "author": "javeme", "createdAt": "2020-10-20T08:37:18Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -166,40 +223,28 @@ public Object submitAndWait(StoreCommand command, StoreClosure future) {\n         }\n     }\n \n-    public void onElected(boolean value) {\n-        synchronized(this.electedLock) {\n-            this.elected = value;\n-            this.electedLock.notify();\n-        }\n-    }\n-\n     protected void waitLeaderElected(int timeout) {\n         String group = this.context.group();\n         if (this.node.getLeaderId() != null) {\n             return;\n         }\n         long beginTime = System.currentTimeMillis();\n-        synchronized(this.electedLock) {\n-            while (!this.elected) {\n-                try {\n-                    this.electedLock.wait(RaftSharedContext.POLL_INTERVAL);\n-                } catch (InterruptedException e) {\n-                    throw new BackendException(\n-                              \"Interrupted while waiting raft group '%s' \" +\n-                              \"election\", e, group);\n-                }\n-                if (this.elected) {\n-                    break;\n-                }\n-                long consumedTime = System.currentTimeMillis() - beginTime;\n-                if (timeout > 0 && consumedTime >= timeout) {\n-                    throw new BackendException(\n-                              \"Wait raft group '{}' election timeout({}ms)\",\n-                              group, consumedTime);\n-                }\n-                LOG.warn(\"Waiting raft group '{}' election cost {}s\",\n-                         group, consumedTime / 1000.0);\n+        while (this.node.getLeaderId() == null) {\n+            try {\n+                Thread.sleep(RaftSharedContext.POLL_INTERVAL);\n+            } catch (InterruptedException e) {\n+                throw new BackendException(\n+                          \"Wait raft group '%s' election error\",\n+                          e, group, \"election\");\n+            }\n+            long consumedTime = System.currentTimeMillis() - beginTime;\n+            if (timeout > 0 && consumedTime >= timeout) {\n+                throw new BackendException(\n+                          \"Wait raft group '{}' election timeout({}ms)\",\n+                          group, \"\", consumedTime);\n             }\n+            LOG.warn(\"Waiting raft group '{}' election cost {}s\",", "originalCommit": "0abb0f69f6fa119c76ea299a4c9d29f4206ae635", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "15f2b3d7a0e7e7e7bbba04e82b808bd26d56bcbe", "url": "https://github.com/hugegraph/hugegraph/commit/15f2b3d7a0e7e7e7bbba04e82b808bd26d56bcbe", "message": "expose RaftNodeManager instead of StoreProvider\n\nChange-Id: I650b3888d6f19dbfdab30a0f1ed84d7a698f31bb", "committedDate": "2020-10-20T09:42:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQxMzczMw==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r508413733", "bodyText": "move to other line", "author": "javeme", "createdAt": "2020-10-20T11:11:44Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/HugeGraph.java", "diffHunk": "@@ -127,7 +127,7 @@\n     public Number queryNumber(Query query);\n \n     public String name();\n-    public BackendStoreProvider storeProvider();\n+    public RaftNodeManager raftNodeManager();", "originalCommit": "15f2b3d7a0e7e7e7bbba04e82b808bd26d56bcbe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQxNjYzNw==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r508416637", "bodyText": "ditto", "author": "javeme", "createdAt": "2020-10-20T11:16:33Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/StandardHugeGraph.java", "diffHunk": "@@ -188,8 +190,11 @@ public String name() {\n     }\n \n     @Override\n-    public BackendStoreProvider storeProvider() {\n-        return this.storeProvider;\n+    public RaftNodeManager raftNodeManager() {", "originalCommit": "15f2b3d7a0e7e7e7bbba04e82b808bd26d56bcbe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQxNjkwNw==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r508416907", "bodyText": "add some error message", "author": "javeme", "createdAt": "2020-10-20T11:17:01Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -216,10 +158,8 @@ public Object submitAndWait(StoreCommand command, StoreClosure future) {\n              * in forwardToLeader, written like this to simplify the code\n              */\n             return future.waitFinished();\n-        } catch (RuntimeException e) {\n-            throw e;\n-        } catch (Throwable t) {\n-            throw new BackendException(t);\n+        } catch (Throwable e) {\n+            throw new BackendException(e);", "originalCommit": "15f2b3d7a0e7e7e7bbba04e82b808bd26d56bcbe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "af92c889478d0b39cb033b245aeb729165a3026b", "url": "https://github.com/hugegraph/hugegraph/commit/af92c889478d0b39cb033b245aeb729165a3026b", "message": "tiny improve\n\nChange-Id: I91ab77b4d78a3ad3539018dc2bff67e43278d600", "committedDate": "2020-10-20T11:25:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQzMjExNw==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r508432117", "bodyText": "use string format if just for debug, or else use string builder with capacity", "author": "javeme", "createdAt": "2020-10-20T11:44:32Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java", "diffHunk": "@@ -72,4 +72,10 @@ public static StoreCommand fromBytes(byte[] bytes) {\n         StoreAction action = StoreAction.valueOf(bytes[1]);\n         return new StoreCommand(type, action, bytes);\n     }\n+\n+    @Override\n+    public String toString() {\n+        return \"StoreCommand{type=\" + type.name() + \", \" +\n+               \"action=\" + action.name() + \"}\";", "originalCommit": "af92c889478d0b39cb033b245aeb729165a3026b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "35f34467ff7bdf68e1c369a779c0f0ec4c0f9642", "url": "https://github.com/hugegraph/hugegraph/commit/35f34467ff7bdf68e1c369a779c0f0ec4c0f9642", "message": "tiny improve\n\nChange-Id: Iaa2ea4071e053a522b8de5dabed2f6e8664fef79", "committedDate": "2020-10-26T06:39:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MjAxOQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r511752019", "bodyText": "remove unused arg \"election\"", "author": "javeme", "createdAt": "2020-10-26T07:06:44Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -179,27 +170,22 @@ protected void waitLeaderElected(int timeout) {\n             return;\n         }\n         long beginTime = System.currentTimeMillis();\n-        synchronized(this.electedLock) {\n-            while (!this.elected) {\n-                try {\n-                    this.electedLock.wait(RaftSharedContext.POLL_INTERVAL);\n-                } catch (InterruptedException e) {\n-                    throw new BackendException(\n-                              \"Interrupted while waiting raft group '%s' \" +\n-                              \"election\", e, group);\n-                }\n-                if (this.elected) {\n-                    break;\n-                }\n-                long consumedTime = System.currentTimeMillis() - beginTime;\n-                if (timeout > 0 && consumedTime >= timeout) {\n-                    throw new BackendException(\n-                              \"Wait raft group '{}' election timeout({}ms)\",\n-                              group, consumedTime);\n-                }\n-                LOG.warn(\"Waiting raft group '{}' election cost {}s\",\n-                         group, consumedTime / 1000.0);\n+        while (this.node.getLeaderId() == null) {\n+            try {\n+                Thread.sleep(RaftSharedContext.POLL_INTERVAL);\n+            } catch (InterruptedException e) {\n+                throw new BackendException(\n+                          \"Waiting for raft group '%s' election is interrupted\",\n+                          e, group, \"election\");", "originalCommit": "35f34467ff7bdf68e1c369a779c0f0ec4c0f9642", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MjI5NQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r511752295", "bodyText": "remove unused arg \"\"", "author": "javeme", "createdAt": "2020-10-26T07:07:38Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -179,27 +170,22 @@ protected void waitLeaderElected(int timeout) {\n             return;\n         }\n         long beginTime = System.currentTimeMillis();\n-        synchronized(this.electedLock) {\n-            while (!this.elected) {\n-                try {\n-                    this.electedLock.wait(RaftSharedContext.POLL_INTERVAL);\n-                } catch (InterruptedException e) {\n-                    throw new BackendException(\n-                              \"Interrupted while waiting raft group '%s' \" +\n-                              \"election\", e, group);\n-                }\n-                if (this.elected) {\n-                    break;\n-                }\n-                long consumedTime = System.currentTimeMillis() - beginTime;\n-                if (timeout > 0 && consumedTime >= timeout) {\n-                    throw new BackendException(\n-                              \"Wait raft group '{}' election timeout({}ms)\",\n-                              group, consumedTime);\n-                }\n-                LOG.warn(\"Waiting raft group '{}' election cost {}s\",\n-                         group, consumedTime / 1000.0);\n+        while (this.node.getLeaderId() == null) {\n+            try {\n+                Thread.sleep(RaftSharedContext.POLL_INTERVAL);\n+            } catch (InterruptedException e) {\n+                throw new BackendException(\n+                          \"Waiting for raft group '%s' election is interrupted\",\n+                          e, group, \"election\");\n             }\n+            long consumedTime = System.currentTimeMillis() - beginTime;\n+            if (timeout > 0 && consumedTime >= timeout) {\n+                throw new BackendException(\n+                          \"Waiting for raft group '{}' election timeout({}ms)\",\n+                          group, \"\", consumedTime);", "originalCommit": "35f34467ff7bdf68e1c369a779c0f0ec4c0f9642", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MzYzMw==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r511753633", "bodyText": "wrap line before the message", "author": "javeme", "createdAt": "2020-10-26T07:11:34Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNodeManagerImpl.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft;\n+\n+import java.util.Map;\n+\n+import com.alipay.sofa.jraft.Node;\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.baidu.hugegraph.backend.BackendException;\n+import com.baidu.hugegraph.backend.store.raft.RaftRequests.SetLeaderRequest;\n+import com.baidu.hugegraph.util.E;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class RaftNodeManagerImpl implements RaftNodeManager {\n+\n+    private final String group;\n+    private final RaftNode raftNode;\n+\n+    public RaftNodeManagerImpl(String group, RaftNode raftNode) {\n+        this.group = group;\n+        this.raftNode = raftNode;\n+    }\n+\n+    @Override\n+    public Map<String, String> getLeader() {\n+        PeerId leaderId = this.raftNode.leaderId();\n+        E.checkState(leaderId != null, \"There is no leader for raft group %s\",", "originalCommit": "35f34467ff7bdf68e1c369a779c0f0ec4c0f9642", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MzgxMg==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r511753812", "bodyText": "remove space from \"error :\"", "author": "javeme", "createdAt": "2020-10-26T07:12:15Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNodeManagerImpl.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft;\n+\n+import java.util.Map;\n+\n+import com.alipay.sofa.jraft.Node;\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.baidu.hugegraph.backend.BackendException;\n+import com.baidu.hugegraph.backend.store.raft.RaftRequests.SetLeaderRequest;\n+import com.baidu.hugegraph.util.E;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class RaftNodeManagerImpl implements RaftNodeManager {\n+\n+    private final String group;\n+    private final RaftNode raftNode;\n+\n+    public RaftNodeManagerImpl(String group, RaftNode raftNode) {\n+        this.group = group;\n+        this.raftNode = raftNode;\n+    }\n+\n+    @Override\n+    public Map<String, String> getLeader() {\n+        PeerId leaderId = this.raftNode.leaderId();\n+        E.checkState(leaderId != null, \"There is no leader for raft group %s\",\n+                     this.group);\n+        return ImmutableMap.of(this.group, leaderId.toString());\n+    }\n+\n+    @Override\n+    public void transferLeaderTo(String endpoint) {\n+        PeerId peerId = PeerId.parsePeer(endpoint);\n+        Status status = this.raftNode.node().transferLeadershipTo(peerId);\n+        if (!status.isOk()) {\n+            throw new BackendException(\n+                      \"Failed to transafer leader to '%s', raft error : %s\",", "originalCommit": "35f34467ff7bdf68e1c369a779c0f0ec4c0f9642", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1NDU5MQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r511754591", "bodyText": "should pass future?", "author": "javeme", "createdAt": "2020-10-26T07:14:43Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNodeManagerImpl.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft;\n+\n+import java.util.Map;\n+\n+import com.alipay.sofa.jraft.Node;\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.baidu.hugegraph.backend.BackendException;\n+import com.baidu.hugegraph.backend.store.raft.RaftRequests.SetLeaderRequest;\n+import com.baidu.hugegraph.util.E;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class RaftNodeManagerImpl implements RaftNodeManager {\n+\n+    private final String group;\n+    private final RaftNode raftNode;\n+\n+    public RaftNodeManagerImpl(String group, RaftNode raftNode) {\n+        this.group = group;\n+        this.raftNode = raftNode;\n+    }\n+\n+    @Override\n+    public Map<String, String> getLeader() {\n+        PeerId leaderId = this.raftNode.leaderId();\n+        E.checkState(leaderId != null, \"There is no leader for raft group %s\",\n+                     this.group);\n+        return ImmutableMap.of(this.group, leaderId.toString());\n+    }\n+\n+    @Override\n+    public void transferLeaderTo(String endpoint) {\n+        PeerId peerId = PeerId.parsePeer(endpoint);\n+        Status status = this.raftNode.node().transferLeadershipTo(peerId);", "originalCommit": "35f34467ff7bdf68e1c369a779c0f0ec4c0f9642", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2MjE3NQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r511762175", "bodyText": "no need", "author": "Linary", "createdAt": "2020-10-26T07:35:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1NDU5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1NDg2Mg==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r511754862", "bodyText": "remove space", "author": "javeme", "createdAt": "2020-10-26T07:15:26Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java", "diffHunk": "@@ -72,4 +72,10 @@ public static StoreCommand fromBytes(byte[] bytes) {\n         StoreAction action = StoreAction.valueOf(bytes[1]);\n         return new StoreCommand(type, action, bytes);\n     }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"StoreCommand{type = %s, action = %s\",", "originalCommit": "35f34467ff7bdf68e1c369a779c0f0ec4c0f9642", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "04c4f7a1365246243fc58ea1b6d9530ef29cdd5d", "url": "https://github.com/hugegraph/hugegraph/commit/04c4f7a1365246243fc58ea1b6d9530ef29cdd5d", "message": "manage leader info by ourselves\n\nChange-Id: Ifda87eb1388e2f969bcf928a3e81a3ae52b6b8dc", "committedDate": "2020-10-28T03:29:52Z", "type": "commit"}, {"oid": "04c4f7a1365246243fc58ea1b6d9530ef29cdd5d", "url": "https://github.com/hugegraph/hugegraph/commit/04c4f7a1365246243fc58ea1b6d9530ef29cdd5d", "message": "manage leader info by ourselves\n\nChange-Id: Ifda87eb1388e2f969bcf928a3e81a3ae52b6b8dc", "committedDate": "2020-10-28T03:29:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE5NzA5MQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r513197091", "bodyText": "align with this", "author": "javeme", "createdAt": "2020-10-28T05:56:38Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -128,10 +128,11 @@ private Node initRaftNode() throws IOException {\n \n     private void submitCommand(StoreCommand command, StoreClosure closure) {\n         // Wait leader elected\n-        this.waitLeaderElected(RaftSharedContext.NO_TIMEOUT);\n+        LeaderInfo leaderInfo = this.waitLeaderElected(\n+                                     RaftSharedContext.NO_TIMEOUT);", "originalCommit": "04c4f7a1365246243fc58ea1b6d9530ef29cdd5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE5ODY2Mg==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r513198662", "bodyText": "rename to leaderId", "author": "javeme", "createdAt": "2020-10-28T06:01:48Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -96,15 +95,16 @@ public PeerId nodeId() {\n     }\n \n     public PeerId leaderId() {\n-        return this.node.getLeaderId();\n+        return this.leaderInfo.get().leaderId;\n     }\n \n-    public boolean isRaftLeader() {\n-        return this.leaderTerm.get() > 0;\n+    public boolean selfIsLeader() {\n+        return this.leaderInfo.get().isLeader;\n     }\n \n-    public void leaderTerm(long term) {\n-        this.leaderTerm.set(term);\n+    public void onLeaderInfoChange(PeerId peerId, boolean isLeader) {", "originalCommit": "04c4f7a1365246243fc58ea1b6d9530ef29cdd5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE5ODg1NQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r513198855", "bodyText": "rename to selfIsLeader", "author": "javeme", "createdAt": "2020-10-28T06:02:23Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -379,4 +388,21 @@ public void onDestroyed(PeerId peer) {\n             LOG.warn(\"Replicator {} prepare to offline\", peer);\n         }\n     }\n+\n+    /**\n+     * Jraft Node.getLeaderId() and Node.isLeader() is not always consistent,\n+     * We define this class to manage leader info by ourselves\n+     */\n+    private static class LeaderInfo {\n+\n+        private static final LeaderInfo NO_LEADER = new LeaderInfo(null, false);\n+\n+        private final PeerId leaderId;\n+        private final boolean isLeader;", "originalCommit": "04c4f7a1365246243fc58ea1b6d9530ef29cdd5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7af4467d86c13a51a2494174f7ee7a70edca40ba", "url": "https://github.com/hugegraph/hugegraph/commit/7af4467d86c13a51a2494174f7ee7a70edca40ba", "message": "tiny improve\n\nChange-Id: I4621b13eef2870059ed4dd44a59ae2180d17ab98", "committedDate": "2020-10-28T06:09:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyNzc4Ng==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r513227786", "bodyText": "-a", "author": "zhoney", "createdAt": "2020-10-28T07:27:44Z", "path": "hugegraph-dist/src/assembly/static/bin/raft-tools.sh", "diffHunk": "@@ -0,0 +1,117 @@\n+#!/bin/bash\n+\n+export LANG=zh_CN.UTF-8\n+set -e\n+\n+HOME_PATH=`dirname $0`\n+HOME_PATH=`cd ${HOME_PATH}/.. && pwd`\n+cd ${HOME_PATH}\n+\n+BIN_PATH=${HOME_PATH}/bin\n+CONF_PATH=${HOME_PATH}/conf\n+LIB_PATH=${HOME_PATH}/lib\n+LOG_PATH=${HOME_PATH}/logs\n+\n+. ${BIN_PATH}/util.sh\n+\n+function print_usage() {\n+    echo \"  usage: raft-tools.sh [options]\"\n+    echo \"  options: \"\n+    echo \"  -g,--get-leader \\${graph}                     get the leader endpoint for graph\"\n+    echo \"  -s,--set-leader \\${graph} \\${endpoint}         set the leader endpoint for graph, can be used on leader or follower node\"\n+    echo \"  -t,--transfer-leader \\${graph} \\${endpoint}    transfer leader to specified endpoint for graph, can be used on leader node\"\n+    echo \"  -a,--add-peer \\${graph} \\${endpoint}        add peer for graph, can be used on leader node\"\n+    echo \"  -r,--remove-peer \\${graph} \\${endpoint}        remove peer for graph, can be used on leader node\"\n+    echo \"  -h,--help                                    display help information\"\n+}\n+\n+GRAPH=\"hugegraph\"\n+ENDPOINT=\"\"\n+\n+if [[ $# -lt 2 ]]; then\n+    print_usage\n+    exit 0\n+fi\n+\n+function get_leader() {\n+    local graph=$1\n+    local rest_server_url=`read_property ${CONF_PATH}/rest-server.properties restserver.url`\n+    local url=${rest_server_url}/graphs/${graph}/raft/get-leader\n+\n+    curl ${url}\n+}\n+\n+function set_leader() {\n+    local graph=$1\n+    local endpoint=$2\n+    local rest_server_url=`read_property ${CONF_PATH}/rest-server.properties restserver.url`\n+    local url=${rest_server_url}/graphs/${graph}/raft/set-leader?endpoint=${endpoint}\n+\n+    curl -X POST ${url}\n+}\n+\n+function transfer_leader() {\n+    local graph=$1\n+    local endpoint=$2\n+    local rest_server_url=`read_property ${CONF_PATH}/rest-server.properties restserver.url`\n+    local url=${rest_server_url}/graphs/${graph}/raft/transfer-leader?endpoint=${endpoint}\n+\n+    curl -X POST ${url}\n+}\n+\n+function add_peer() {\n+    local graph=$1\n+    local endpoint=$2\n+    local rest_server_url=`read_property ${CONF_PATH}/rest-server.properties restserver.url`\n+    local url=${rest_server_url}/graphs/${graph}/raft/add-peer?endpoint=${endpoint}\n+\n+    curl -X POST ${url}\n+}\n+\n+function remove_peer() {\n+    local graph=$1\n+    local endpoint=$2\n+    local rest_server_url=`read_property ${CONF_PATH}/rest-server.properties restserver.url`\n+    local url=${rest_server_url}/graphs/${graph}/raft/remove-peer?endpoint=${endpoint}\n+\n+    curl -X POST ${url}\n+}\n+\n+while [[ $# -gt 0 ]]; do\n+    case $1 in\n+        # help\n+        --help|-h)\n+        print_usage\n+        shift\n+        ;;\n+        # get-leader\n+        --get-leader|-g)\n+        get_leader $2\n+        shift 2\n+        ;;\n+        # set-leader\n+        --set-leader|-s)\n+        set_leader $2 $3\n+        shift 3\n+        ;;\n+        # transfer-leader\n+        --transfer-leader|-t)\n+        transfer_leader $2 $3\n+        shift 3\n+        ;;\n+        # add-peer\n+        --add-peer|-r)", "originalCommit": "7af4467d86c13a51a2494174f7ee7a70edca40ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyOTA1Mg==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r513229052", "bodyText": "keep consistency\uff0cadd \u201ccan be used on leader or follower node\u201d", "author": "zhoney", "createdAt": "2020-10-28T07:30:54Z", "path": "hugegraph-dist/src/assembly/static/bin/raft-tools.sh", "diffHunk": "@@ -0,0 +1,117 @@\n+#!/bin/bash\n+\n+export LANG=zh_CN.UTF-8\n+set -e\n+\n+HOME_PATH=`dirname $0`\n+HOME_PATH=`cd ${HOME_PATH}/.. && pwd`\n+cd ${HOME_PATH}\n+\n+BIN_PATH=${HOME_PATH}/bin\n+CONF_PATH=${HOME_PATH}/conf\n+LIB_PATH=${HOME_PATH}/lib\n+LOG_PATH=${HOME_PATH}/logs\n+\n+. ${BIN_PATH}/util.sh\n+\n+function print_usage() {\n+    echo \"  usage: raft-tools.sh [options]\"\n+    echo \"  options: \"\n+    echo \"  -g,--get-leader \\${graph}                     get the leader endpoint for graph\"", "originalCommit": "7af4467d86c13a51a2494174f7ee7a70edca40ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI2MzEwMQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r513263101", "bodyText": "use \u201cendpoint\u201d for exception output", "author": "zhoney", "createdAt": "2020-10-28T08:37:23Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNodeManagerImpl.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft;\n+\n+import java.util.Map;\n+\n+import com.alipay.sofa.jraft.Node;\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.baidu.hugegraph.backend.BackendException;\n+import com.baidu.hugegraph.backend.store.raft.RaftRequests.SetLeaderRequest;\n+import com.baidu.hugegraph.util.E;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class RaftNodeManagerImpl implements RaftNodeManager {\n+\n+    private final String group;\n+    private final RaftNode raftNode;\n+\n+    public RaftNodeManagerImpl(String group, RaftNode raftNode) {\n+        this.group = group;\n+        this.raftNode = raftNode;\n+    }\n+\n+    @Override\n+    public Map<String, String> getLeader() {\n+        PeerId leaderId = this.raftNode.leaderId();\n+        E.checkState(leaderId != null,\n+                     \"There is no leader for raft group %s\", this.group);\n+        return ImmutableMap.of(this.group, leaderId.toString());\n+    }\n+\n+    @Override\n+    public void transferLeaderTo(String endpoint) {\n+        PeerId peerId = PeerId.parsePeer(endpoint);\n+        Status status = this.raftNode.node().transferLeadershipTo(peerId);\n+        if (!status.isOk()) {\n+            throw new BackendException(\n+                      \"Failed to transafer leader to '%s', raft error: %s\",\n+                      peerId, status.getErrorMsg());", "originalCommit": "7af4467d86c13a51a2494174f7ee7a70edca40ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2f4da2001778e204876853fd15c2897edd0e5b0d", "url": "https://github.com/hugegraph/hugegraph/commit/2f4da2001778e204876853fd15c2897edd0e5b0d", "message": "some improve\n\nChange-Id: I128274d0d543c8510a06f2be42b28570b3a0873d", "committedDate": "2020-10-28T10:58:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2MzgwNw==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r513363807", "bodyText": "add list-peer", "author": "javeme", "createdAt": "2020-10-28T11:18:56Z", "path": "hugegraph-dist/src/assembly/static/bin/raft-tools.sh", "diffHunk": "@@ -17,7 +17,7 @@ LOG_PATH=${HOME_PATH}/logs\n function print_usage() {\n     echo \"  usage: raft-tools.sh [options]\"\n     echo \"  options: \"\n-    echo \"  -g,--get-leader \\${graph}                     get the leader endpoint for graph\"\n+    echo \"  -g,--get-leader \\${graph}                     get the leader endpoint for graph, can be used on leader or follower node\"", "originalCommit": "2f4da2001778e204876853fd15c2897edd0e5b0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "69cc50f3334f2b839934fbf24399c35805424f22", "url": "https://github.com/hugegraph/hugegraph/commit/69cc50f3334f2b839934fbf24399c35805424f22", "message": "add list peers API\n\nChange-Id: I7b18711df4423c8255cf91bf747c80a573b89c25", "committedDate": "2020-10-29T03:02:05Z", "type": "commit"}, {"oid": "69cc50f3334f2b839934fbf24399c35805424f22", "url": "https://github.com/hugegraph/hugegraph/commit/69cc50f3334f2b839934fbf24399c35805424f22", "message": "add list peers API\n\nChange-Id: I7b18711df4423c8255cf91bf747c80a573b89c25", "committedDate": "2020-10-29T03:02:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAxNzIwNw==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r514017207", "bodyText": "merge two processors", "author": "javeme", "createdAt": "2020-10-29T06:28:40Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStoreProvider.java", "diffHunk": "@@ -71,6 +71,8 @@ private void registerRpcRequestProcessors() {\n         RpcServer rpcServer = this.context.rpcServer();\n         rpcServer.registerProcessor(new StoreCommandRequestProcessor(\n                                     this.context));\n+        rpcServer.registerProcessor(new SetLeaderRequestProcessor(this.context));\n+        rpcServer.registerProcessor(new ListPeersRequestProcessor(this.context));", "originalCommit": "69cc50f3334f2b839934fbf24399c35805424f22", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ea6c6b653f074647b808c8a4910cb3ba2792e43e", "url": "https://github.com/hugegraph/hugegraph/commit/ea6c6b653f074647b808c8a4910cb3ba2792e43e", "message": "define rpcForwarder to handle forward request\n\nChange-Id: Ia34c3f8d40bc86dff144d51c80feaf50b16d7231", "committedDate": "2020-10-29T08:33:56Z", "type": "commit"}, {"oid": "ea6c6b653f074647b808c8a4910cb3ba2792e43e", "url": "https://github.com/hugegraph/hugegraph/commit/ea6c6b653f074647b808c8a4910cb3ba2792e43e", "message": "define rpcForwarder to handle forward request\n\nChange-Id: Ia34c3f8d40bc86dff144d51c80feaf50b16d7231", "committedDate": "2020-10-29T08:33:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5MTAyMQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r514091021", "bodyText": "unused?", "author": "javeme", "createdAt": "2020-10-29T08:46:18Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/rpc/ListPeersProcessor.java", "diffHunk": "@@ -17,27 +17,30 @@\n  * under the License.\n  */\n \n-package com.baidu.hugegraph.backend.store.raft;\n+package com.baidu.hugegraph.backend.store.raft.rpc;\n \n import org.slf4j.Logger;\n \n import com.alipay.sofa.jraft.rpc.RpcRequestClosure;\n import com.alipay.sofa.jraft.rpc.RpcRequestProcessor;\n-import com.baidu.hugegraph.backend.store.raft.RaftRequests.ListPeersRequest;\n-import com.baidu.hugegraph.backend.store.raft.RaftRequests.ListPeersResponse;\n+import com.baidu.hugegraph.backend.store.raft.RaftNodeManager;\n+import com.baidu.hugegraph.backend.store.raft.RaftSharedContext;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.CommonResponse;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.ListPeersRequest;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.ListPeersResponse;\n import com.baidu.hugegraph.util.Log;\n import com.google.common.collect.ImmutableList;\n import com.google.protobuf.Message;\n \n-public class ListPeersRequestProcessor\n+public class ListPeersProcessor\n        extends RpcRequestProcessor<ListPeersRequest> {\n \n-    private static final Logger LOG = Log.logger(ListPeersRequestProcessor.class);\n+    private static final Logger LOG = Log.logger(ListPeersProcessor.class);", "originalCommit": "ea6c6b653f074647b808c8a4910cb3ba2792e43e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5MTgyMw==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r514091823", "bodyText": "align", "author": "javeme", "createdAt": "2020-10-29T08:47:35Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/rpc/RpcForwarder.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft.rpc;\n+\n+import static com.baidu.hugegraph.backend.store.raft.RaftSharedContext.WAIT_RPC_TIMEOUT;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import org.slf4j.Logger;\n+\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.core.NodeImpl;\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.alipay.sofa.jraft.error.RaftError;\n+import com.alipay.sofa.jraft.rpc.RaftClientService;\n+import com.alipay.sofa.jraft.rpc.RpcResponseClosure;\n+import com.alipay.sofa.jraft.util.Endpoint;\n+import com.baidu.hugegraph.backend.BackendException;\n+import com.baidu.hugegraph.backend.store.raft.RaftClosure;\n+import com.baidu.hugegraph.backend.store.raft.RaftNode;\n+import com.baidu.hugegraph.backend.store.raft.StoreClosure;\n+import com.baidu.hugegraph.backend.store.raft.StoreCommand;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.CommonResponse;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.StoreCommandRequest;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.StoreCommandResponse;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.Log;\n+import com.google.protobuf.Descriptors.FieldDescriptor;\n+import com.google.protobuf.Message;\n+import com.google.protobuf.ZeroByteStringHelper;\n+\n+public class RpcForwarder {\n+\n+    private static final Logger LOG = Log.logger(RpcForwarder.class);\n+\n+    private final PeerId nodeId;\n+    private final RaftClientService rpcClient;\n+\n+    public RpcForwarder(RaftNode node) {\n+        this.nodeId = node.node().getNodeId().getPeerId();\n+        this.rpcClient = ((NodeImpl) node.node()).getRpcService();\n+        E.checkNotNull(this.rpcClient, \"rpc client\");\n+    }\n+\n+    public void forwardToLeader(PeerId leaderId, StoreCommand command,\n+                                StoreClosure closure) {\n+        E.checkNotNull(leaderId, \"leader id\");\n+        E.checkState(!leaderId.equals(this.nodeId),\n+                     \"Invalid state: current node is the leader, there is \" +\n+                             \"no need to forward the request\");\n+        LOG.debug(\"The node {} forward request to leader {}\",\n+                  this.nodeId, leaderId);\n+\n+        StoreCommandRequest.Builder builder = StoreCommandRequest.newBuilder();\n+        builder.setType(command.type());\n+        builder.setAction(command.action());\n+        builder.setData(ZeroByteStringHelper.wrap(command.data()));\n+        StoreCommandRequest request = builder.build();\n+\n+        RpcResponseClosure<StoreCommandResponse> responseClosure;\n+        responseClosure = new RpcResponseClosure<StoreCommandResponse>() {\n+            @Override\n+            public void setResponse(StoreCommandResponse resp) {\n+                if (resp.getStatus()) {\n+                    LOG.debug(\"StoreCommandResponse status ok\");\n+                    closure.complete(Status.OK(), () -> null);\n+                } else {\n+                    LOG.debug(\"StoreCommandResponse status error\");\n+                    Status status = new Status(RaftError.UNKNOWN,\n+                                               \"fowared request failed\");\n+                    closure.failure(status, new BackendException(\n+                            \"Current node isn't leader, leader is \" +", "originalCommit": "ea6c6b653f074647b808c8a4910cb3ba2792e43e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5MzUzNA==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r514093534", "bodyText": "define a var for BackendException", "author": "javeme", "createdAt": "2020-10-29T08:50:29Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/rpc/RpcForwarder.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft.rpc;\n+\n+import static com.baidu.hugegraph.backend.store.raft.RaftSharedContext.WAIT_RPC_TIMEOUT;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import org.slf4j.Logger;\n+\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.core.NodeImpl;\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.alipay.sofa.jraft.error.RaftError;\n+import com.alipay.sofa.jraft.rpc.RaftClientService;\n+import com.alipay.sofa.jraft.rpc.RpcResponseClosure;\n+import com.alipay.sofa.jraft.util.Endpoint;\n+import com.baidu.hugegraph.backend.BackendException;\n+import com.baidu.hugegraph.backend.store.raft.RaftClosure;\n+import com.baidu.hugegraph.backend.store.raft.RaftNode;\n+import com.baidu.hugegraph.backend.store.raft.StoreClosure;\n+import com.baidu.hugegraph.backend.store.raft.StoreCommand;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.CommonResponse;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.StoreCommandRequest;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.StoreCommandResponse;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.Log;\n+import com.google.protobuf.Descriptors.FieldDescriptor;\n+import com.google.protobuf.Message;\n+import com.google.protobuf.ZeroByteStringHelper;\n+\n+public class RpcForwarder {\n+\n+    private static final Logger LOG = Log.logger(RpcForwarder.class);\n+\n+    private final PeerId nodeId;\n+    private final RaftClientService rpcClient;\n+\n+    public RpcForwarder(RaftNode node) {\n+        this.nodeId = node.node().getNodeId().getPeerId();\n+        this.rpcClient = ((NodeImpl) node.node()).getRpcService();\n+        E.checkNotNull(this.rpcClient, \"rpc client\");\n+    }\n+\n+    public void forwardToLeader(PeerId leaderId, StoreCommand command,\n+                                StoreClosure closure) {\n+        E.checkNotNull(leaderId, \"leader id\");\n+        E.checkState(!leaderId.equals(this.nodeId),\n+                     \"Invalid state: current node is the leader, there is \" +\n+                             \"no need to forward the request\");\n+        LOG.debug(\"The node {} forward request to leader {}\",\n+                  this.nodeId, leaderId);\n+\n+        StoreCommandRequest.Builder builder = StoreCommandRequest.newBuilder();\n+        builder.setType(command.type());\n+        builder.setAction(command.action());\n+        builder.setData(ZeroByteStringHelper.wrap(command.data()));\n+        StoreCommandRequest request = builder.build();\n+\n+        RpcResponseClosure<StoreCommandResponse> responseClosure;\n+        responseClosure = new RpcResponseClosure<StoreCommandResponse>() {\n+            @Override\n+            public void setResponse(StoreCommandResponse resp) {\n+                if (resp.getStatus()) {\n+                    LOG.debug(\"StoreCommandResponse status ok\");\n+                    closure.complete(Status.OK(), () -> null);\n+                } else {\n+                    LOG.debug(\"StoreCommandResponse status error\");\n+                    Status status = new Status(RaftError.UNKNOWN,\n+                                               \"fowared request failed\");\n+                    closure.failure(status, new BackendException(", "originalCommit": "ea6c6b653f074647b808c8a4910cb3ba2792e43e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5MzY0Nw==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r514093647", "bodyText": "define a var for BackendException", "author": "javeme", "createdAt": "2020-10-29T08:50:38Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/rpc/RpcForwarder.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft.rpc;\n+\n+import static com.baidu.hugegraph.backend.store.raft.RaftSharedContext.WAIT_RPC_TIMEOUT;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import org.slf4j.Logger;\n+\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.core.NodeImpl;\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.alipay.sofa.jraft.error.RaftError;\n+import com.alipay.sofa.jraft.rpc.RaftClientService;\n+import com.alipay.sofa.jraft.rpc.RpcResponseClosure;\n+import com.alipay.sofa.jraft.util.Endpoint;\n+import com.baidu.hugegraph.backend.BackendException;\n+import com.baidu.hugegraph.backend.store.raft.RaftClosure;\n+import com.baidu.hugegraph.backend.store.raft.RaftNode;\n+import com.baidu.hugegraph.backend.store.raft.StoreClosure;\n+import com.baidu.hugegraph.backend.store.raft.StoreCommand;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.CommonResponse;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.StoreCommandRequest;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.StoreCommandResponse;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.Log;\n+import com.google.protobuf.Descriptors.FieldDescriptor;\n+import com.google.protobuf.Message;\n+import com.google.protobuf.ZeroByteStringHelper;\n+\n+public class RpcForwarder {\n+\n+    private static final Logger LOG = Log.logger(RpcForwarder.class);\n+\n+    private final PeerId nodeId;\n+    private final RaftClientService rpcClient;\n+\n+    public RpcForwarder(RaftNode node) {\n+        this.nodeId = node.node().getNodeId().getPeerId();\n+        this.rpcClient = ((NodeImpl) node.node()).getRpcService();\n+        E.checkNotNull(this.rpcClient, \"rpc client\");\n+    }\n+\n+    public void forwardToLeader(PeerId leaderId, StoreCommand command,\n+                                StoreClosure closure) {\n+        E.checkNotNull(leaderId, \"leader id\");\n+        E.checkState(!leaderId.equals(this.nodeId),\n+                     \"Invalid state: current node is the leader, there is \" +\n+                             \"no need to forward the request\");\n+        LOG.debug(\"The node {} forward request to leader {}\",\n+                  this.nodeId, leaderId);\n+\n+        StoreCommandRequest.Builder builder = StoreCommandRequest.newBuilder();\n+        builder.setType(command.type());\n+        builder.setAction(command.action());\n+        builder.setData(ZeroByteStringHelper.wrap(command.data()));\n+        StoreCommandRequest request = builder.build();\n+\n+        RpcResponseClosure<StoreCommandResponse> responseClosure;\n+        responseClosure = new RpcResponseClosure<StoreCommandResponse>() {\n+            @Override\n+            public void setResponse(StoreCommandResponse resp) {\n+                if (resp.getStatus()) {\n+                    LOG.debug(\"StoreCommandResponse status ok\");\n+                    closure.complete(Status.OK(), () -> null);\n+                } else {\n+                    LOG.debug(\"StoreCommandResponse status error\");\n+                    Status status = new Status(RaftError.UNKNOWN,\n+                                               \"fowared request failed\");\n+                    closure.failure(status, new BackendException(\n+                            \"Current node isn't leader, leader is \" +\n+                                    \"[%s], failed to forward request to \" +\n+                                    \"leader: %s\", leaderId, resp.getMessage()));\n+                }\n+            }\n+\n+            @Override\n+            public void run(Status status) {\n+                closure.run(status);\n+            }\n+        };\n+        this.waitRpc(leaderId.getEndpoint(), request, responseClosure);\n+    }\n+\n+    public <T extends Message> RaftClosure<T> forwardToLeader(PeerId leaderId,\n+                                                              Message request) {\n+        E.checkNotNull(leaderId, \"leader id\");\n+        E.checkState(!leaderId.equals(this.nodeId),\n+                     \"Invalid state: current node is the leader, there is \" +\n+                     \"no need to forward the request\");\n+        LOG.debug(\"The node {} forward request to leader {}\",\n+                  this.nodeId, leaderId);\n+\n+        RaftClosure<T> future = new RaftClosure<>();\n+        RpcResponseClosure<T> responseClosure;\n+        responseClosure = new RpcResponseClosure<T>() {\n+            @Override\n+            public void setResponse(T response) {\n+                FieldDescriptor fd = response.getDescriptorForType()\n+                                             .findFieldByName(\"common\");\n+                Object object = response.getField(fd);\n+                E.checkState(object instanceof CommonResponse,\n+                             \"The common field must be instance of \" +\n+                             \"CommonResponse, actual is '%s'\",\n+                             object != null ? object.getClass() : null);\n+                CommonResponse commonResponse = (CommonResponse) object;\n+                if (commonResponse.getStatus()) {\n+                    future.complete(Status.OK(), () -> response);\n+                } else {\n+                    Status status = new Status(RaftError.UNKNOWN,\n+                                               \"fowared request failed\");\n+                    future.failure(status, new BackendException(", "originalCommit": "ea6c6b653f074647b808c8a4910cb3ba2792e43e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5Mzk4Ng==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r514093986", "bodyText": "ditto", "author": "javeme", "createdAt": "2020-10-29T08:51:17Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/rpc/SetLeaderProcessor.java", "diffHunk": "@@ -17,26 +17,29 @@\n  * under the License.\n  */\n \n-package com.baidu.hugegraph.backend.store.raft;\n+package com.baidu.hugegraph.backend.store.raft.rpc;\n \n import org.slf4j.Logger;\n \n import com.alipay.sofa.jraft.rpc.RpcRequestClosure;\n import com.alipay.sofa.jraft.rpc.RpcRequestProcessor;\n-import com.baidu.hugegraph.backend.store.raft.RaftRequests.SetLeaderRequest;\n-import com.baidu.hugegraph.backend.store.raft.RaftRequests.SetLeaderResponse;\n+import com.baidu.hugegraph.backend.store.raft.RaftNodeManager;\n+import com.baidu.hugegraph.backend.store.raft.RaftSharedContext;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.CommonResponse;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.SetLeaderRequest;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.SetLeaderResponse;\n import com.baidu.hugegraph.util.Log;\n import com.google.protobuf.Message;\n \n-public class SetLeaderRequestProcessor\n+public class SetLeaderProcessor\n        extends RpcRequestProcessor<SetLeaderRequest> {\n \n-    private static final Logger LOG = Log.logger(SetLeaderRequestProcessor.class);\n+    private static final Logger LOG = Log.logger(SetLeaderProcessor.class);", "originalCommit": "ea6c6b653f074647b808c8a4910cb3ba2792e43e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5NDA3NQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r514094075", "bodyText": "ditto", "author": "javeme", "createdAt": "2020-10-29T08:51:27Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/rpc/StoreCommandProcessor.java", "diffHunk": "@@ -17,28 +17,33 @@\n  * under the License.\n  */\n \n-package com.baidu.hugegraph.backend.store.raft;\n+package com.baidu.hugegraph.backend.store.raft.rpc;\n \n import org.slf4j.Logger;\n \n import com.alipay.sofa.jraft.rpc.RpcRequestClosure;\n import com.alipay.sofa.jraft.rpc.RpcRequestProcessor;\n-import com.baidu.hugegraph.backend.store.raft.RaftRequests.StoreAction;\n-import com.baidu.hugegraph.backend.store.raft.RaftRequests.StoreCommandRequest;\n-import com.baidu.hugegraph.backend.store.raft.RaftRequests.StoreCommandResponse;\n-import com.baidu.hugegraph.backend.store.raft.RaftRequests.StoreType;\n+import com.baidu.hugegraph.backend.store.raft.RaftNode;\n+import com.baidu.hugegraph.backend.store.raft.RaftSharedContext;\n+import com.baidu.hugegraph.backend.store.raft.StoreClosure;\n+import com.baidu.hugegraph.backend.store.raft.StoreCommand;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.StoreAction;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.StoreCommandRequest;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.StoreCommandResponse;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.StoreType;\n import com.baidu.hugegraph.util.Log;\n import com.google.protobuf.Message;\n \n-public class StoreCommandRequestProcessor\n+public class StoreCommandProcessor\n        extends RpcRequestProcessor<StoreCommandRequest> {\n \n-    private static final Logger LOG = Log.logger(StoreCommandRequestProcessor.class);\n+    private static final Logger LOG = Log.logger(\n+                                      StoreCommandProcessor.class);", "originalCommit": "ea6c6b653f074647b808c8a4910cb3ba2792e43e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c50e92773ae7e764f897cfe155b3ccf5a7c91144", "url": "https://github.com/hugegraph/hugegraph/commit/c50e92773ae7e764f897cfe155b3ccf5a7c91144", "message": "tiny improve\n\nChange-Id: Ib2d4dcf0683b6816edbd8fa4da106ba1afceb277", "committedDate": "2020-10-29T09:02:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIyMjQxMg==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r514222412", "bodyText": "prefer align\nBackendException e = new BackendException(\n                     \"Current node...", "author": "javeme", "createdAt": "2020-10-29T12:33:14Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/rpc/RpcForwarder.java", "diffHunk": "@@ -85,10 +85,12 @@ public void setResponse(StoreCommandResponse resp) {\n                     LOG.debug(\"StoreCommandResponse status error\");\n                     Status status = new Status(RaftError.UNKNOWN,\n                                                \"fowared request failed\");\n-                    closure.failure(status, new BackendException(\n-                            \"Current node isn't leader, leader is \" +\n-                                    \"[%s], failed to forward request to \" +\n-                                    \"leader: %s\", leaderId, resp.getMessage()));\n+                    BackendException e;\n+                    e = new BackendException(\n+                            \"Current node isn't leader, leader is [%s], \" +\n+                            \"failed to forward request to leader: %s\",\n+                            leaderId, resp.getMessage());", "originalCommit": "c50e92773ae7e764f897cfe155b3ccf5a7c91144", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIyMzY0Ng==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r514223646", "bodyText": "Allowed list-peers operation when working on raft mode", "author": "javeme", "createdAt": "2020-10-29T12:35:15Z", "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/api/raft/RaftAPI.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.api.raft;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.security.RolesAllowed;\n+import javax.inject.Singleton;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+\n+import org.slf4j.Logger;\n+\n+import com.baidu.hugegraph.HugeException;\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.api.API;\n+import com.baidu.hugegraph.api.filter.StatusFilter.Status;\n+import com.baidu.hugegraph.backend.store.raft.RaftNodeManager;\n+import com.baidu.hugegraph.core.GraphManager;\n+import com.baidu.hugegraph.util.Log;\n+import com.codahale.metrics.annotation.Timed;\n+import com.google.common.collect.ImmutableMap;\n+\n+@Path(\"graphs/{graph}/raft\")\n+@Singleton\n+public class RaftAPI extends API {\n+\n+    private static final Logger LOG = Log.logger(RaftAPI.class);\n+\n+    @GET\n+    @Timed\n+    @Path(\"list-peers\")\n+    @Consumes(APPLICATION_JSON)\n+    @Produces(APPLICATION_JSON_WITH_CHARSET)\n+    @RolesAllowed({\"admin\"})\n+    public List<String> listPeers(@Context GraphManager manager,\n+                                  @PathParam(\"graph\") String graph) {\n+        LOG.debug(\"Graph [{}] prepare to get leader\", graph);\n+\n+        HugeGraph g = graph(manager, graph);\n+        RaftNodeManager raftNodeManager = g.raftNodeManager();\n+        if (raftNodeManager == null) {\n+            throw new HugeException(\"Only work on raft mode can list peers\");", "originalCommit": "c50e92773ae7e764f897cfe155b3ccf5a7c91144", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIyNzAxMA==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r514227010", "bodyText": "move to line 150", "author": "javeme", "createdAt": "2020-10-29T12:40:59Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNodeManagerImpl.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.alipay.sofa.jraft.Node;\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.baidu.hugegraph.backend.BackendException;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.ListPeersRequest;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.ListPeersResponse;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.SetLeaderRequest;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.SetLeaderResponse;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RpcForwarder;\n+import com.baidu.hugegraph.util.E;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.protobuf.Message;\n+\n+public class RaftNodeManagerImpl implements RaftNodeManager {\n+\n+    private final String group;\n+    private final RaftNode raftNode;\n+    private final RpcForwarder rpcForwarder;\n+\n+    public RaftNodeManagerImpl(String group, RaftNode raftNode,\n+                               RpcForwarder rpcForwarder) {\n+        this.group = group;\n+        this.raftNode = raftNode;\n+        this.rpcForwarder = rpcForwarder;\n+    }\n+\n+    private <T extends Message> RaftClosure<T> forwardToLeader(Message request) {\n+        PeerId leaderId = this.raftNode.leaderId();\n+        return this.rpcForwarder.forwardToLeader(leaderId, request);\n+    }", "originalCommit": "c50e92773ae7e764f897cfe155b3ccf5a7c91144", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIyODM2Nw==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r514228367", "bodyText": "improve \"if expected endpoint has already been raft leader\"", "author": "javeme", "createdAt": "2020-10-29T12:43:20Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNodeManagerImpl.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.alipay.sofa.jraft.Node;\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.baidu.hugegraph.backend.BackendException;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.ListPeersRequest;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.ListPeersResponse;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.SetLeaderRequest;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.SetLeaderResponse;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RpcForwarder;\n+import com.baidu.hugegraph.util.E;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.protobuf.Message;\n+\n+public class RaftNodeManagerImpl implements RaftNodeManager {\n+\n+    private final String group;\n+    private final RaftNode raftNode;\n+    private final RpcForwarder rpcForwarder;\n+\n+    public RaftNodeManagerImpl(String group, RaftNode raftNode,\n+                               RpcForwarder rpcForwarder) {\n+        this.group = group;\n+        this.raftNode = raftNode;\n+        this.rpcForwarder = rpcForwarder;\n+    }\n+\n+    private <T extends Message> RaftClosure<T> forwardToLeader(Message request) {\n+        PeerId leaderId = this.raftNode.leaderId();\n+        return this.rpcForwarder.forwardToLeader(leaderId, request);\n+    }\n+\n+    @Override\n+    public List<String> listPeers() {\n+        if (this.raftNode.selfIsLeader()) {\n+            List<PeerId> peerIds = this.raftNode.node().listPeers();\n+            return peerIds.stream().map(PeerId::toString)\n+                          .collect(Collectors.toList());\n+        }\n+        // If current node is not leader, forward request to leader\n+        ListPeersRequest request = ListPeersRequest.getDefaultInstance();\n+        try {\n+            RaftClosure<ListPeersResponse> future;\n+            future = this.forwardToLeader(request);\n+            ListPeersResponse response = future.waitFinished();\n+            return response.getEndpointsList();\n+        } catch (Throwable e) {\n+            throw new BackendException(\"Failed to list peers\", e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, String> getLeader() {\n+        PeerId leaderId = this.raftNode.leaderId();\n+        E.checkState(leaderId != null,\n+                     \"There is no leader for raft group %s\", this.group);\n+        return ImmutableMap.of(this.group, leaderId.toString());\n+    }\n+\n+    @Override\n+    public void transferLeaderTo(String endpoint) {\n+        PeerId peerId = PeerId.parsePeer(endpoint);\n+        Status status = this.raftNode.node().transferLeadershipTo(peerId);\n+        if (!status.isOk()) {\n+            throw new BackendException(\n+                      \"Failed to transafer leader to '%s', raft error: %s\",\n+                      endpoint, status.getErrorMsg());\n+        }\n+    }\n+\n+    @Override\n+    public void setLeader(String endpoint) {\n+        PeerId newLeaderId = PeerId.parsePeer(endpoint);\n+        Node node = this.raftNode.node();\n+        // No need to re-elect if already is new leader", "originalCommit": "c50e92773ae7e764f897cfe155b3ccf5a7c91144", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIyOTk2Ng==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r514229966", "bodyText": "if getLeader() returns group, seems other APIs are also needed", "author": "javeme", "createdAt": "2020-10-29T12:45:58Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNodeManagerImpl.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.alipay.sofa.jraft.Node;\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.baidu.hugegraph.backend.BackendException;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.ListPeersRequest;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.ListPeersResponse;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.SetLeaderRequest;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.SetLeaderResponse;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RpcForwarder;\n+import com.baidu.hugegraph.util.E;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.protobuf.Message;\n+\n+public class RaftNodeManagerImpl implements RaftNodeManager {\n+\n+    private final String group;\n+    private final RaftNode raftNode;\n+    private final RpcForwarder rpcForwarder;\n+\n+    public RaftNodeManagerImpl(String group, RaftNode raftNode,\n+                               RpcForwarder rpcForwarder) {\n+        this.group = group;\n+        this.raftNode = raftNode;\n+        this.rpcForwarder = rpcForwarder;\n+    }\n+\n+    private <T extends Message> RaftClosure<T> forwardToLeader(Message request) {\n+        PeerId leaderId = this.raftNode.leaderId();\n+        return this.rpcForwarder.forwardToLeader(leaderId, request);\n+    }\n+\n+    @Override\n+    public List<String> listPeers() {\n+        if (this.raftNode.selfIsLeader()) {\n+            List<PeerId> peerIds = this.raftNode.node().listPeers();\n+            return peerIds.stream().map(PeerId::toString)\n+                          .collect(Collectors.toList());\n+        }\n+        // If current node is not leader, forward request to leader\n+        ListPeersRequest request = ListPeersRequest.getDefaultInstance();\n+        try {\n+            RaftClosure<ListPeersResponse> future;\n+            future = this.forwardToLeader(request);\n+            ListPeersResponse response = future.waitFinished();\n+            return response.getEndpointsList();\n+        } catch (Throwable e) {\n+            throw new BackendException(\"Failed to list peers\", e);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, String> getLeader() {\n+        PeerId leaderId = this.raftNode.leaderId();\n+        E.checkState(leaderId != null,\n+                     \"There is no leader for raft group %s\", this.group);\n+        return ImmutableMap.of(this.group, leaderId.toString());", "originalCommit": "c50e92773ae7e764f897cfe155b3ccf5a7c91144", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIzMTc1OA==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r514231758", "bodyText": "replace <StoreCommandResponse> with <>", "author": "javeme", "createdAt": "2020-10-29T12:49:01Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/rpc/RpcForwarder.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft.rpc;\n+\n+import static com.baidu.hugegraph.backend.store.raft.RaftSharedContext.WAIT_RPC_TIMEOUT;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import org.slf4j.Logger;\n+\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.core.NodeImpl;\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.alipay.sofa.jraft.error.RaftError;\n+import com.alipay.sofa.jraft.rpc.RaftClientService;\n+import com.alipay.sofa.jraft.rpc.RpcResponseClosure;\n+import com.alipay.sofa.jraft.util.Endpoint;\n+import com.baidu.hugegraph.backend.BackendException;\n+import com.baidu.hugegraph.backend.store.raft.RaftClosure;\n+import com.baidu.hugegraph.backend.store.raft.RaftNode;\n+import com.baidu.hugegraph.backend.store.raft.StoreClosure;\n+import com.baidu.hugegraph.backend.store.raft.StoreCommand;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.CommonResponse;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.StoreCommandRequest;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.StoreCommandResponse;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.Log;\n+import com.google.protobuf.Descriptors.FieldDescriptor;\n+import com.google.protobuf.Message;\n+import com.google.protobuf.ZeroByteStringHelper;\n+\n+public class RpcForwarder {\n+\n+    private static final Logger LOG = Log.logger(RpcForwarder.class);\n+\n+    private final PeerId nodeId;\n+    private final RaftClientService rpcClient;\n+\n+    public RpcForwarder(RaftNode node) {\n+        this.nodeId = node.node().getNodeId().getPeerId();\n+        this.rpcClient = ((NodeImpl) node.node()).getRpcService();\n+        E.checkNotNull(this.rpcClient, \"rpc client\");\n+    }\n+\n+    public void forwardToLeader(PeerId leaderId, StoreCommand command,\n+                                StoreClosure closure) {\n+        E.checkNotNull(leaderId, \"leader id\");\n+        E.checkState(!leaderId.equals(this.nodeId),\n+                     \"Invalid state: current node is the leader, there is \" +\n+                             \"no need to forward the request\");\n+        LOG.debug(\"The node {} forward request to leader {}\",\n+                  this.nodeId, leaderId);\n+\n+        StoreCommandRequest.Builder builder = StoreCommandRequest.newBuilder();\n+        builder.setType(command.type());\n+        builder.setAction(command.action());\n+        builder.setData(ZeroByteStringHelper.wrap(command.data()));\n+        StoreCommandRequest request = builder.build();\n+\n+        RpcResponseClosure<StoreCommandResponse> responseClosure;\n+        responseClosure = new RpcResponseClosure<StoreCommandResponse>() {", "originalCommit": "c50e92773ae7e764f897cfe155b3ccf5a7c91144", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDc0NjgwNw==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r514746807", "bodyText": "it will compile failed", "author": "Linary", "createdAt": "2020-10-30T02:54:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIzMTc1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIzMjIzNw==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r514232237", "bodyText": "add '{}'", "author": "javeme", "createdAt": "2020-10-29T12:49:44Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/rpc/RpcForwarder.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft.rpc;\n+\n+import static com.baidu.hugegraph.backend.store.raft.RaftSharedContext.WAIT_RPC_TIMEOUT;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import org.slf4j.Logger;\n+\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.core.NodeImpl;\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.alipay.sofa.jraft.error.RaftError;\n+import com.alipay.sofa.jraft.rpc.RaftClientService;\n+import com.alipay.sofa.jraft.rpc.RpcResponseClosure;\n+import com.alipay.sofa.jraft.util.Endpoint;\n+import com.baidu.hugegraph.backend.BackendException;\n+import com.baidu.hugegraph.backend.store.raft.RaftClosure;\n+import com.baidu.hugegraph.backend.store.raft.RaftNode;\n+import com.baidu.hugegraph.backend.store.raft.StoreClosure;\n+import com.baidu.hugegraph.backend.store.raft.StoreCommand;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.CommonResponse;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.StoreCommandRequest;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.StoreCommandResponse;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.Log;\n+import com.google.protobuf.Descriptors.FieldDescriptor;\n+import com.google.protobuf.Message;\n+import com.google.protobuf.ZeroByteStringHelper;\n+\n+public class RpcForwarder {\n+\n+    private static final Logger LOG = Log.logger(RpcForwarder.class);\n+\n+    private final PeerId nodeId;\n+    private final RaftClientService rpcClient;\n+\n+    public RpcForwarder(RaftNode node) {\n+        this.nodeId = node.node().getNodeId().getPeerId();\n+        this.rpcClient = ((NodeImpl) node.node()).getRpcService();\n+        E.checkNotNull(this.rpcClient, \"rpc client\");\n+    }\n+\n+    public void forwardToLeader(PeerId leaderId, StoreCommand command,\n+                                StoreClosure closure) {\n+        E.checkNotNull(leaderId, \"leader id\");\n+        E.checkState(!leaderId.equals(this.nodeId),\n+                     \"Invalid state: current node is the leader, there is \" +\n+                             \"no need to forward the request\");\n+        LOG.debug(\"The node {} forward request to leader {}\",\n+                  this.nodeId, leaderId);\n+\n+        StoreCommandRequest.Builder builder = StoreCommandRequest.newBuilder();\n+        builder.setType(command.type());\n+        builder.setAction(command.action());\n+        builder.setData(ZeroByteStringHelper.wrap(command.data()));\n+        StoreCommandRequest request = builder.build();\n+\n+        RpcResponseClosure<StoreCommandResponse> responseClosure;\n+        responseClosure = new RpcResponseClosure<StoreCommandResponse>() {\n+            @Override\n+            public void setResponse(StoreCommandResponse resp) {\n+                if (resp.getStatus()) {\n+                    LOG.debug(\"StoreCommandResponse status ok\");\n+                    closure.complete(Status.OK(), () -> null);\n+                } else {\n+                    LOG.debug(\"StoreCommandResponse status error\");\n+                    Status status = new Status(RaftError.UNKNOWN,\n+                                               \"fowared request failed\");\n+                    BackendException e;\n+                    e = new BackendException(\n+                            \"Current node isn't leader, leader is [%s], \" +\n+                            \"failed to forward request to leader: %s\",\n+                            leaderId, resp.getMessage());\n+                    closure.failure(status, e);\n+                }\n+            }\n+\n+            @Override\n+            public void run(Status status) {\n+                closure.run(status);\n+            }\n+        };\n+        this.waitRpc(leaderId.getEndpoint(), request, responseClosure);\n+    }\n+\n+    public <T extends Message> RaftClosure<T> forwardToLeader(PeerId leaderId,\n+                                                              Message request) {\n+        E.checkNotNull(leaderId, \"leader id\");\n+        E.checkState(!leaderId.equals(this.nodeId),\n+                     \"Invalid state: current node is the leader, there is \" +\n+                     \"no need to forward the request\");\n+        LOG.debug(\"The node {} forward request to leader {}\",", "originalCommit": "c50e92773ae7e764f897cfe155b3ccf5a7c91144", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIzMjQ4Mw==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r514232483", "bodyText": "seems one line is ok, and remove <T>", "author": "javeme", "createdAt": "2020-10-29T12:50:08Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/rpc/RpcForwarder.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft.rpc;\n+\n+import static com.baidu.hugegraph.backend.store.raft.RaftSharedContext.WAIT_RPC_TIMEOUT;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import org.slf4j.Logger;\n+\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.core.NodeImpl;\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.alipay.sofa.jraft.error.RaftError;\n+import com.alipay.sofa.jraft.rpc.RaftClientService;\n+import com.alipay.sofa.jraft.rpc.RpcResponseClosure;\n+import com.alipay.sofa.jraft.util.Endpoint;\n+import com.baidu.hugegraph.backend.BackendException;\n+import com.baidu.hugegraph.backend.store.raft.RaftClosure;\n+import com.baidu.hugegraph.backend.store.raft.RaftNode;\n+import com.baidu.hugegraph.backend.store.raft.StoreClosure;\n+import com.baidu.hugegraph.backend.store.raft.StoreCommand;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.CommonResponse;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.StoreCommandRequest;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.StoreCommandResponse;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.Log;\n+import com.google.protobuf.Descriptors.FieldDescriptor;\n+import com.google.protobuf.Message;\n+import com.google.protobuf.ZeroByteStringHelper;\n+\n+public class RpcForwarder {\n+\n+    private static final Logger LOG = Log.logger(RpcForwarder.class);\n+\n+    private final PeerId nodeId;\n+    private final RaftClientService rpcClient;\n+\n+    public RpcForwarder(RaftNode node) {\n+        this.nodeId = node.node().getNodeId().getPeerId();\n+        this.rpcClient = ((NodeImpl) node.node()).getRpcService();\n+        E.checkNotNull(this.rpcClient, \"rpc client\");\n+    }\n+\n+    public void forwardToLeader(PeerId leaderId, StoreCommand command,\n+                                StoreClosure closure) {\n+        E.checkNotNull(leaderId, \"leader id\");\n+        E.checkState(!leaderId.equals(this.nodeId),\n+                     \"Invalid state: current node is the leader, there is \" +\n+                             \"no need to forward the request\");\n+        LOG.debug(\"The node {} forward request to leader {}\",\n+                  this.nodeId, leaderId);\n+\n+        StoreCommandRequest.Builder builder = StoreCommandRequest.newBuilder();\n+        builder.setType(command.type());\n+        builder.setAction(command.action());\n+        builder.setData(ZeroByteStringHelper.wrap(command.data()));\n+        StoreCommandRequest request = builder.build();\n+\n+        RpcResponseClosure<StoreCommandResponse> responseClosure;\n+        responseClosure = new RpcResponseClosure<StoreCommandResponse>() {\n+            @Override\n+            public void setResponse(StoreCommandResponse resp) {\n+                if (resp.getStatus()) {\n+                    LOG.debug(\"StoreCommandResponse status ok\");\n+                    closure.complete(Status.OK(), () -> null);\n+                } else {\n+                    LOG.debug(\"StoreCommandResponse status error\");\n+                    Status status = new Status(RaftError.UNKNOWN,\n+                                               \"fowared request failed\");\n+                    BackendException e;\n+                    e = new BackendException(\n+                            \"Current node isn't leader, leader is [%s], \" +\n+                            \"failed to forward request to leader: %s\",\n+                            leaderId, resp.getMessage());\n+                    closure.failure(status, e);\n+                }\n+            }\n+\n+            @Override\n+            public void run(Status status) {\n+                closure.run(status);\n+            }\n+        };\n+        this.waitRpc(leaderId.getEndpoint(), request, responseClosure);\n+    }\n+\n+    public <T extends Message> RaftClosure<T> forwardToLeader(PeerId leaderId,\n+                                                              Message request) {\n+        E.checkNotNull(leaderId, \"leader id\");\n+        E.checkState(!leaderId.equals(this.nodeId),\n+                     \"Invalid state: current node is the leader, there is \" +\n+                     \"no need to forward the request\");\n+        LOG.debug(\"The node {} forward request to leader {}\",\n+                  this.nodeId, leaderId);\n+\n+        RaftClosure<T> future = new RaftClosure<>();\n+        RpcResponseClosure<T> responseClosure;\n+        responseClosure = new RpcResponseClosure<T>() {", "originalCommit": "c50e92773ae7e764f897cfe155b3ccf5a7c91144", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDc0NjkyMg==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r514746922", "bodyText": "it will compile failed", "author": "Linary", "createdAt": "2020-10-30T02:54:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIzMjQ4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIzMjgzMA==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r514232830", "bodyText": "ditto", "author": "javeme", "createdAt": "2020-10-29T12:50:43Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/rpc/RpcForwarder.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft.rpc;\n+\n+import static com.baidu.hugegraph.backend.store.raft.RaftSharedContext.WAIT_RPC_TIMEOUT;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import org.slf4j.Logger;\n+\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.core.NodeImpl;\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.alipay.sofa.jraft.error.RaftError;\n+import com.alipay.sofa.jraft.rpc.RaftClientService;\n+import com.alipay.sofa.jraft.rpc.RpcResponseClosure;\n+import com.alipay.sofa.jraft.util.Endpoint;\n+import com.baidu.hugegraph.backend.BackendException;\n+import com.baidu.hugegraph.backend.store.raft.RaftClosure;\n+import com.baidu.hugegraph.backend.store.raft.RaftNode;\n+import com.baidu.hugegraph.backend.store.raft.StoreClosure;\n+import com.baidu.hugegraph.backend.store.raft.StoreCommand;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.CommonResponse;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.StoreCommandRequest;\n+import com.baidu.hugegraph.backend.store.raft.rpc.RaftRequests.StoreCommandResponse;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.Log;\n+import com.google.protobuf.Descriptors.FieldDescriptor;\n+import com.google.protobuf.Message;\n+import com.google.protobuf.ZeroByteStringHelper;\n+\n+public class RpcForwarder {\n+\n+    private static final Logger LOG = Log.logger(RpcForwarder.class);\n+\n+    private final PeerId nodeId;\n+    private final RaftClientService rpcClient;\n+\n+    public RpcForwarder(RaftNode node) {\n+        this.nodeId = node.node().getNodeId().getPeerId();\n+        this.rpcClient = ((NodeImpl) node.node()).getRpcService();\n+        E.checkNotNull(this.rpcClient, \"rpc client\");\n+    }\n+\n+    public void forwardToLeader(PeerId leaderId, StoreCommand command,\n+                                StoreClosure closure) {\n+        E.checkNotNull(leaderId, \"leader id\");\n+        E.checkState(!leaderId.equals(this.nodeId),\n+                     \"Invalid state: current node is the leader, there is \" +\n+                             \"no need to forward the request\");\n+        LOG.debug(\"The node {} forward request to leader {}\",\n+                  this.nodeId, leaderId);\n+\n+        StoreCommandRequest.Builder builder = StoreCommandRequest.newBuilder();\n+        builder.setType(command.type());\n+        builder.setAction(command.action());\n+        builder.setData(ZeroByteStringHelper.wrap(command.data()));\n+        StoreCommandRequest request = builder.build();\n+\n+        RpcResponseClosure<StoreCommandResponse> responseClosure;\n+        responseClosure = new RpcResponseClosure<StoreCommandResponse>() {\n+            @Override\n+            public void setResponse(StoreCommandResponse resp) {\n+                if (resp.getStatus()) {\n+                    LOG.debug(\"StoreCommandResponse status ok\");\n+                    closure.complete(Status.OK(), () -> null);\n+                } else {\n+                    LOG.debug(\"StoreCommandResponse status error\");\n+                    Status status = new Status(RaftError.UNKNOWN,\n+                                               \"fowared request failed\");\n+                    BackendException e;\n+                    e = new BackendException(\n+                            \"Current node isn't leader, leader is [%s], \" +\n+                            \"failed to forward request to leader: %s\",\n+                            leaderId, resp.getMessage());\n+                    closure.failure(status, e);\n+                }\n+            }\n+\n+            @Override\n+            public void run(Status status) {\n+                closure.run(status);\n+            }\n+        };\n+        this.waitRpc(leaderId.getEndpoint(), request, responseClosure);\n+    }\n+\n+    public <T extends Message> RaftClosure<T> forwardToLeader(PeerId leaderId,\n+                                                              Message request) {\n+        E.checkNotNull(leaderId, \"leader id\");\n+        E.checkState(!leaderId.equals(this.nodeId),\n+                     \"Invalid state: current node is the leader, there is \" +\n+                     \"no need to forward the request\");\n+        LOG.debug(\"The node {} forward request to leader {}\",\n+                  this.nodeId, leaderId);\n+\n+        RaftClosure<T> future = new RaftClosure<>();\n+        RpcResponseClosure<T> responseClosure;\n+        responseClosure = new RpcResponseClosure<T>() {\n+            @Override\n+            public void setResponse(T response) {\n+                FieldDescriptor fd = response.getDescriptorForType()\n+                                             .findFieldByName(\"common\");\n+                Object object = response.getField(fd);\n+                E.checkState(object instanceof CommonResponse,\n+                             \"The common field must be instance of \" +\n+                             \"CommonResponse, actual is '%s'\",\n+                             object != null ? object.getClass() : null);\n+                CommonResponse commonResponse = (CommonResponse) object;\n+                if (commonResponse.getStatus()) {\n+                    future.complete(Status.OK(), () -> response);\n+                } else {\n+                    Status status = new Status(RaftError.UNKNOWN,\n+                                               \"fowared request failed\");\n+                    BackendException e;\n+                    e = new BackendException(\n+                            \"Current node isn't leader, leader is [%s], \" +", "originalCommit": "c50e92773ae7e764f897cfe155b3ccf5a7c91144", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d8fbc55bf3aaed94f73c50a69e31b5b3cc1f50f7", "url": "https://github.com/hugegraph/hugegraph/commit/d8fbc55bf3aaed94f73c50a69e31b5b3cc1f50f7", "message": "Let raft api return with group\n\nChange-Id: I3784211036b622afcb2a410d2255773f51d40eb4", "committedDate": "2020-10-30T03:58:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4NTU0OQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r514885549", "bodyText": "align", "author": "javeme", "createdAt": "2020-10-30T05:54:15Z", "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/api/raft/RaftAPI.java", "diffHunk": "@@ -118,20 +121,20 @@\n     @Consumes(APPLICATION_JSON)\n     @Produces(APPLICATION_JSON_WITH_CHARSET)\n     @RolesAllowed({\"admin\"})\n-    public Map<String, String> setLeader(\n-                               @Context GraphManager manager,\n-                               @PathParam(\"graph\") String graph,\n-                               @QueryParam(\"endpoint\") String endpoint) {\n+    public Map<String, String> setLeader(@Context GraphManager manager,\n+                            @PathParam(\"graph\") String graph,", "originalCommit": "d8fbc55bf3aaed94f73c50a69e31b5b3cc1f50f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg5MjU5NA==", "url": "https://github.com/hugegraph/hugegraph/pull/1137#discussion_r514892594", "bodyText": "add group parameter", "author": "javeme", "createdAt": "2020-10-30T06:20:21Z", "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/api/raft/RaftAPI.java", "diffHunk": "@@ -94,21 +98,20 @@\n     @Consumes(APPLICATION_JSON)\n     @Produces(APPLICATION_JSON_WITH_CHARSET)\n     @RolesAllowed({\"admin\"})\n-    public Map<String, String> transferLeader(\n-                               @Context GraphManager manager,\n-                               @PathParam(\"graph\") String graph,\n-                               @QueryParam(\"endpoint\") String endpoint) {\n+    public Map<String, String> transferLeader(@Context GraphManager manager,\n+                                              @PathParam(\"graph\") String graph,", "originalCommit": "d8fbc55bf3aaed94f73c50a69e31b5b3cc1f50f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "836e24313b52ebc499c901e54f354d8ad57ff04b", "url": "https://github.com/hugegraph/hugegraph/commit/836e24313b52ebc499c901e54f354d8ad57ff04b", "message": "add group paramter in RaftAPI\n\nChange-Id: Ie7736a8867b0b0f4e47747debb5ca1026190c29e", "committedDate": "2020-10-30T07:16:36Z", "type": "commit"}, {"oid": "836e24313b52ebc499c901e54f354d8ad57ff04b", "url": "https://github.com/hugegraph/hugegraph/commit/836e24313b52ebc499c901e54f354d8ad57ff04b", "message": "add group paramter in RaftAPI\n\nChange-Id: Ie7736a8867b0b0f4e47747debb5ca1026190c29e", "committedDate": "2020-10-30T07:16:36Z", "type": "forcePushed"}]}