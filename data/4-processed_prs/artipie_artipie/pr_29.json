{"pr_number": 29, "pr_title": "Documentation for artipie system", "pr_createdAt": "2020-02-14T10:34:25Z", "pr_url": "https://github.com/artipie/artipie/pull/29", "timeline": [{"oid": "ebb2dee99a39857de79967f722bcd037de0a0708", "url": "https://github.com/artipie/artipie/commit/ebb2dee99a39857de79967f722bcd037de0a0708", "message": "#12 - documentation for artipie system", "committedDate": "2020-02-14T10:29:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY5NjU3MQ==", "url": "https://github.com/artipie/artipie/pull/29#discussion_r379696571", "bodyText": "@g4s8 should this be maven instead?", "author": "carlosmiranda", "createdAt": "2020-02-15T00:07:29Z", "path": "README.md", "diffHunk": "@@ -32,6 +32,82 @@ knows repo type (e.g. `maven` or `docker`) and storage settings for repo\n After reading repo config it constructs new `Slice` for config\n and proxies current request to this slice.\n \n+### Artipie architecture\n+\n+Main components of Artipie software are:\n+ - Adapter: this component works with single binary artifact format, e.g.\n+ Maven-adapter or Docker-adapter. Adapter usually consist of two logical parts:\n+ front-end and back-end. The back-end of adapter works with binary artifacts\n+ and its metadata. It can be used independently as a library to store artifacts\n+ and generate metadata. It uses `Storage` from `artipie/asto` as a storage.\n+ Front-end of adapter implements `Slice` interface from `artipie/http` module.\n+ It handles incoming HTTP requests, process it using back-end objects, and\n+ generate HTTP responses.\n+ - Storage: Artipie uses abstract key-value storage `artipie/asto` in all modules.\n+ Storage support atomic transactional operations and it's thread safe.\n+ Artipie has multiple storage implementations: in-memory storage,\n+ file-system storage, AWS S3 storage. Storage can be used to store binary artifacts\n+ or for configuration files.\n+ - Artipie: configured assebmly of adapters. Artipie can be configured to read\n+ repository configuration files from the storage. Artipie can find configuration\n+ file by repository as a key name. Artipie implements `Slice` interface and can\n+ handle HTTP requests. It reads repository name from request URI path,\n+ finds configuration for adapter, constructs appropriate storage for adapter,\n+ and redirects the request to adapter.\n+ - Web server: any `Slice` implementation (Artipie or single module) can be used\n+ as a back-end for web server. We require the server to be reactive and to support\n+ non-blocking network IO operations. One of possible implementations is\n+ [vertx-server](https://github.com/artipie/vertx-server/).\n+\n+Here is cross-module dependency diagram:\n+\n+![diagram](/_docs/artipie-classes.png)\n+\n+### Configuration\n+\n+Artipie should be configured before startup.\n+Main meta configuration `yaml` file should contains storage config,\n+where adapter configuration files are located:\n+```yaml\n+meta:\n+  # configuration storage\n+  storage:\n+    # storage type\n+    type: fs\n+    path: /artipie/storage\n+```\n+\n+Meta storage contains adapters configuration, where key is a repository name,\n+and value is adapter config `yaml` file:\n+```text\n+config storage\n+\u251c\u2500\u2500 maven1", "originalCommit": "ebb2dee99a39857de79967f722bcd037de0a0708", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY5Njc4MQ==", "url": "https://github.com/artipie/artipie/pull/29#discussion_r379696781", "bodyText": "@g4s8 it's not clear what the names for the supported storage types should be, we should specify it somewhere.", "author": "carlosmiranda", "createdAt": "2020-02-15T00:08:40Z", "path": "README.md", "diffHunk": "@@ -32,6 +32,82 @@ knows repo type (e.g. `maven` or `docker`) and storage settings for repo\n After reading repo config it constructs new `Slice` for config\n and proxies current request to this slice.\n \n+### Artipie architecture\n+\n+Main components of Artipie software are:\n+ - Adapter: this component works with single binary artifact format, e.g.\n+ Maven-adapter or Docker-adapter. Adapter usually consist of two logical parts:\n+ front-end and back-end. The back-end of adapter works with binary artifacts\n+ and its metadata. It can be used independently as a library to store artifacts\n+ and generate metadata. It uses `Storage` from `artipie/asto` as a storage.\n+ Front-end of adapter implements `Slice` interface from `artipie/http` module.\n+ It handles incoming HTTP requests, process it using back-end objects, and\n+ generate HTTP responses.\n+ - Storage: Artipie uses abstract key-value storage `artipie/asto` in all modules.\n+ Storage support atomic transactional operations and it's thread safe.\n+ Artipie has multiple storage implementations: in-memory storage,\n+ file-system storage, AWS S3 storage. Storage can be used to store binary artifacts\n+ or for configuration files.\n+ - Artipie: configured assebmly of adapters. Artipie can be configured to read\n+ repository configuration files from the storage. Artipie can find configuration\n+ file by repository as a key name. Artipie implements `Slice` interface and can\n+ handle HTTP requests. It reads repository name from request URI path,\n+ finds configuration for adapter, constructs appropriate storage for adapter,\n+ and redirects the request to adapter.\n+ - Web server: any `Slice` implementation (Artipie or single module) can be used\n+ as a back-end for web server. We require the server to be reactive and to support\n+ non-blocking network IO operations. One of possible implementations is\n+ [vertx-server](https://github.com/artipie/vertx-server/).\n+\n+Here is cross-module dependency diagram:\n+\n+![diagram](/_docs/artipie-classes.png)\n+\n+### Configuration\n+\n+Artipie should be configured before startup.\n+Main meta configuration `yaml` file should contains storage config,\n+where adapter configuration files are located:\n+```yaml\n+meta:\n+  # configuration storage\n+  storage:\n+    # storage type\n+    type: fs", "originalCommit": "ebb2dee99a39857de79967f722bcd037de0a0708", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY5Njg5NQ==", "url": "https://github.com/artipie/artipie/pull/29#discussion_r379696895", "bodyText": "@g4s8 Misspelling here, and slight reword suggestion.\n\nIt's recommen_d_ed that S3 storage be used...", "author": "carlosmiranda", "createdAt": "2020-02-15T00:09:22Z", "path": "README.md", "diffHunk": "@@ -32,6 +32,82 @@ knows repo type (e.g. `maven` or `docker`) and storage settings for repo\n After reading repo config it constructs new `Slice` for config\n and proxies current request to this slice.\n \n+### Artipie architecture\n+\n+Main components of Artipie software are:\n+ - Adapter: this component works with single binary artifact format, e.g.\n+ Maven-adapter or Docker-adapter. Adapter usually consist of two logical parts:\n+ front-end and back-end. The back-end of adapter works with binary artifacts\n+ and its metadata. It can be used independently as a library to store artifacts\n+ and generate metadata. It uses `Storage` from `artipie/asto` as a storage.\n+ Front-end of adapter implements `Slice` interface from `artipie/http` module.\n+ It handles incoming HTTP requests, process it using back-end objects, and\n+ generate HTTP responses.\n+ - Storage: Artipie uses abstract key-value storage `artipie/asto` in all modules.\n+ Storage support atomic transactional operations and it's thread safe.\n+ Artipie has multiple storage implementations: in-memory storage,\n+ file-system storage, AWS S3 storage. Storage can be used to store binary artifacts\n+ or for configuration files.\n+ - Artipie: configured assebmly of adapters. Artipie can be configured to read\n+ repository configuration files from the storage. Artipie can find configuration\n+ file by repository as a key name. Artipie implements `Slice` interface and can\n+ handle HTTP requests. It reads repository name from request URI path,\n+ finds configuration for adapter, constructs appropriate storage for adapter,\n+ and redirects the request to adapter.\n+ - Web server: any `Slice` implementation (Artipie or single module) can be used\n+ as a back-end for web server. We require the server to be reactive and to support\n+ non-blocking network IO operations. One of possible implementations is\n+ [vertx-server](https://github.com/artipie/vertx-server/).\n+\n+Here is cross-module dependency diagram:\n+\n+![diagram](/_docs/artipie-classes.png)\n+\n+### Configuration\n+\n+Artipie should be configured before startup.\n+Main meta configuration `yaml` file should contains storage config,\n+where adapter configuration files are located:\n+```yaml\n+meta:\n+  # configuration storage\n+  storage:\n+    # storage type\n+    type: fs\n+    path: /artipie/storage\n+```\n+\n+Meta storage contains adapters configuration, where key is a repository name,\n+and value is adapter config `yaml` file:\n+```text\n+config storage\n+\u251c\u2500\u2500 maven1\n+\u251c\u2500\u2500 docker-one\n+\u251c\u2500\u2500 hello-npm\n+\u2514\u2500\u2500 rpm\n+```\n+Each configuration file should specify what is the type of repository should be used\n+(adapter), and storage configuration (each repository may reference to different storage).\n+```yaml\n+repo:\n+  type:\n+    maven\n+  storage:\n+    type: s3\n+    url: s3://acme.com/snapshot\n+    username: admin\n+    password: 123qwe\n+```\n+\n+### Deployment\n+\n+Artipie web server can be started as standalone Java application, or\n+started in a cluster with multiple instance behind load balancer.\n+If Artipie was started in a cluster, all instances should receive\n+single meta configuration for Artipie module. It's recommented to", "originalCommit": "ebb2dee99a39857de79967f722bcd037de0a0708", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "abf47d8be9f3f76df18c66504460e481b2c79360", "url": "https://github.com/artipie/artipie/commit/abf47d8be9f3f76df18c66504460e481b2c79360", "message": "#29 - review fixes", "committedDate": "2020-02-17T08:51:08Z", "type": "commit"}]}