{"pr_number": 550, "pr_title": "Ubuntu single upload visualization", "pr_createdAt": "2020-09-04T14:12:59Z", "pr_url": "https://github.com/artipie/artipie/pull/550", "timeline": [{"oid": "04127bd70fe8b85dda166c13af2e002c83b7fa05", "url": "https://github.com/artipie/artipie/commit/04127bd70fe8b85dda166c13af2e002c83b7fa05", "message": "#431 - draw ubuntu single upload", "committedDate": "2020-09-04T14:02:44Z", "type": "commit"}, {"oid": "39658d026eb51fc43a321ab8fc5bab4d69075acb", "url": "https://github.com/artipie/artipie/commit/39658d026eb51fc43a321ab8fc5bab4d69075acb", "message": "#431 - draw ubuntu single upload", "committedDate": "2020-09-04T14:12:30Z", "type": "commit"}, {"oid": "1f86a4105077d2f92665046b171614eb8a65c584", "url": "https://github.com/artipie/artipie/commit/1f86a4105077d2f92665046b171614eb8a65c584", "message": "#431 - polishing", "committedDate": "2020-09-04T14:16:05Z", "type": "commit"}, {"oid": "e85d5a4dfa312d7a9e1bab939e91cf7243e4e8c2", "url": "https://github.com/artipie/artipie/commit/e85d5a4dfa312d7a9e1bab939e91cf7243e4e8c2", "message": "#431 - change repo and branch to artipie/gh-pages", "committedDate": "2020-09-04T14:24:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQwODY3Nw==", "url": "https://github.com/artipie/artipie/pull/550#discussion_r484408677", "bodyText": "@Sammers21 I don't think we need to hard-code Docker benchmarks in code, how we will switch between benchmarks when we have many of them?", "author": "g4s8", "createdAt": "2020-09-07T12:41:30Z", "path": "benchmarks/index.html", "diffHunk": "@@ -1,21 +1,103 @@\n <!DOCTYPE html>\n <html>\n-  <body>\n-    <script>\n-      (async () => {\n-        const response = await fetch('https://api.github.com/repos/artipie/artipie/contents/benchmarks?ref=gh-pages');\n-        const data = await response.json();\n-        let htmlString = '<h1>Performance tests</h1><ul>';\n-        for (let file of data) {\n-          if (file.type === 'dir') {\n-            htmlString += `<li>${file.name}</li><ul>`;\n-            htmlString += `<li><a href=\"${file.name}/files/upload/index.html\">Files upload</a></li>`;\n-            htmlString += '</ul>';\n-          }\n+<body>\n+<script src=\"https://cdn.jsdelivr.net/npm/chart.js@2.8.0\"></script>\n+<div class=\"chart-container\" style=\"position: relative; height:30vh; width:80vw\">\n+    <canvas id=\"docker_single_upload\"></canvas>\n+</div>\n+<script>\n+    /**\n+     * Compare strings with numeric versions\n+     * @param one The one string\n+     * @param another The another string\n+     * @returns {number} The result of comparison\n+     */\n+    function compareDottedString(one, another) {\n+        let a1 = one.split('.');\n+        let b1 = another.split('.');\n+        let len = Math.max(a1.length, b1.length);\n+        for (var i = 0; i < len; i++) {\n+            let _a = +a1[i] || 0;\n+            let _b = +b1[i] || 0;\n+            if (_a === _b) continue;\n+            else return _a > _b ? 1 : -1\n         }\n-        htmlString += '</ul>';\n-        document.getElementsByTagName('body')[0].innerHTML = htmlString;\n-      })()\n-    </script>\n-  </body>\n+        return 0;\n+    }\n+\n+    (async () => {\n+        let repository = 'artipie/artipie';\n+        let branch = 'gh-pages';\n+        const response = await fetch(`https://api.github.com/repos/${repository}/contents/benchmarks?ref=${branch}`);\n+        const data = await response.json()\n+\n+        // array of benchmarks results and versions\n+        let results = (await Promise.all(\n+                data.filter(el => el.type === 'dir')\n+                    .map(el => {\n+                        let version = el.name;\n+                        return fetch(\n+                            `https://raw.githubusercontent.com/${repository}/${branch}/benchmarks/${version}/benchmark-results.json`\n+                        ).then(response => {\n+                            if (!response.ok) {\n+                                throw new Error(`Can't find results for version ${version}`)\n+                            }\n+                            return response.json()\n+                        }).then(json => {\n+                            return {\n+                                \"version\": version,\n+                                \"results\": json\n+                            }\n+                        }).catch(er => {\n+                        })\n+                    })\n+            )\n+        ).filter(el => el !== undefined)\n+            .sort((one, another) => compareDottedString(one.version, another.version))\n+\n+\n+        // Draw Chart\n+        let labels = results.map(json => json.version)\n+        let dt = results.map(json => json.results.docker[\"single-upload\"].artipie.images[0].ubuntu)\n+        let ctx = document.getElementById('docker_single_upload').getContext('2d');", "originalCommit": "e85d5a4dfa312d7a9e1bab939e91cf7243e4e8c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQwOTU0Mg==", "url": "https://github.com/artipie/artipie/pull/550#discussion_r484409542", "bodyText": "@g4s8, it is the first step. Anything else will come later", "author": "Sammers21", "createdAt": "2020-09-07T12:43:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQwODY3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQwODg2OA==", "url": "https://github.com/artipie/artipie/pull/550#discussion_r484408868", "bodyText": "@Sammers21 and same here: \"Docker...\" hardcoded", "author": "g4s8", "createdAt": "2020-09-07T12:41:53Z", "path": "benchmarks/index.html", "diffHunk": "@@ -1,21 +1,103 @@\n <!DOCTYPE html>\n <html>\n-  <body>\n-    <script>\n-      (async () => {\n-        const response = await fetch('https://api.github.com/repos/artipie/artipie/contents/benchmarks?ref=gh-pages');\n-        const data = await response.json();\n-        let htmlString = '<h1>Performance tests</h1><ul>';\n-        for (let file of data) {\n-          if (file.type === 'dir') {\n-            htmlString += `<li>${file.name}</li><ul>`;\n-            htmlString += `<li><a href=\"${file.name}/files/upload/index.html\">Files upload</a></li>`;\n-            htmlString += '</ul>';\n-          }\n+<body>\n+<script src=\"https://cdn.jsdelivr.net/npm/chart.js@2.8.0\"></script>\n+<div class=\"chart-container\" style=\"position: relative; height:30vh; width:80vw\">\n+    <canvas id=\"docker_single_upload\"></canvas>\n+</div>\n+<script>\n+    /**\n+     * Compare strings with numeric versions\n+     * @param one The one string\n+     * @param another The another string\n+     * @returns {number} The result of comparison\n+     */\n+    function compareDottedString(one, another) {\n+        let a1 = one.split('.');\n+        let b1 = another.split('.');\n+        let len = Math.max(a1.length, b1.length);\n+        for (var i = 0; i < len; i++) {\n+            let _a = +a1[i] || 0;\n+            let _b = +b1[i] || 0;\n+            if (_a === _b) continue;\n+            else return _a > _b ? 1 : -1\n         }\n-        htmlString += '</ul>';\n-        document.getElementsByTagName('body')[0].innerHTML = htmlString;\n-      })()\n-    </script>\n-  </body>\n+        return 0;\n+    }\n+\n+    (async () => {\n+        let repository = 'artipie/artipie';\n+        let branch = 'gh-pages';\n+        const response = await fetch(`https://api.github.com/repos/${repository}/contents/benchmarks?ref=${branch}`);\n+        const data = await response.json()\n+\n+        // array of benchmarks results and versions\n+        let results = (await Promise.all(\n+                data.filter(el => el.type === 'dir')\n+                    .map(el => {\n+                        let version = el.name;\n+                        return fetch(\n+                            `https://raw.githubusercontent.com/${repository}/${branch}/benchmarks/${version}/benchmark-results.json`\n+                        ).then(response => {\n+                            if (!response.ok) {\n+                                throw new Error(`Can't find results for version ${version}`)\n+                            }\n+                            return response.json()\n+                        }).then(json => {\n+                            return {\n+                                \"version\": version,\n+                                \"results\": json\n+                            }\n+                        }).catch(er => {\n+                        })\n+                    })\n+            )\n+        ).filter(el => el !== undefined)\n+            .sort((one, another) => compareDottedString(one.version, another.version))\n+\n+\n+        // Draw Chart\n+        let labels = results.map(json => json.version)\n+        let dt = results.map(json => json.results.docker[\"single-upload\"].artipie.images[0].ubuntu)\n+        let ctx = document.getElementById('docker_single_upload').getContext('2d');\n+        new Chart(ctx, {\n+            type: 'bar',\n+            data: {\n+                labels: labels,\n+                datasets: [{\n+                    label: 'Docker single upload time',", "originalCommit": "e85d5a4dfa312d7a9e1bab939e91cf7243e4e8c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQwOTY1MA==", "url": "https://github.com/artipie/artipie/pull/550#discussion_r484409650", "bodyText": "@g4s8, it is the first step. Anything else will come later", "author": "Sammers21", "createdAt": "2020-09-07T12:43:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQwODg2OA=="}], "type": "inlineReview"}]}