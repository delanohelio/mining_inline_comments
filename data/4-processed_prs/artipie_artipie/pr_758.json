{"pr_number": 758, "pr_title": "#606 - Verify push and install for Gem", "pr_createdAt": "2020-11-17T22:03:44Z", "pr_url": "https://github.com/artipie/artipie/pull/758", "timeline": [{"oid": "ac928ef484e126511d3cfc8d0bc14aa00a5eb28e", "url": "https://github.com/artipie/artipie/commit/ac928ef484e126511d3cfc8d0bc14aa00a5eb28e", "message": "#606 - Verify push and install for gem", "committedDate": "2020-11-17T22:01:51Z", "type": "commit"}, {"oid": "adf905c284a3380483859d05837e9810d779e410", "url": "https://github.com/artipie/artipie/commit/adf905c284a3380483859d05837e9810d779e410", "message": "#606 - Fix typo", "committedDate": "2020-11-17T22:05:18Z", "type": "commit"}, {"oid": "3c1d47252776fe1c0e48f0ddc6cc63157e81f78f", "url": "https://github.com/artipie/artipie/commit/3c1d47252776fe1c0e48f0ddc6cc63157e81f78f", "message": "#606 - Fix pdd", "committedDate": "2020-11-17T22:06:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2Njc4Ng==", "url": "https://github.com/artipie/artipie/pull/758#discussion_r525866786", "bodyText": "@genryxy I think it's better to say that we are testing Gem repository rather then gem-adapter related classes", "author": "olegmoz", "createdAt": "2020-11-18T07:34:00Z", "path": "src/test/java/com/artipie/gem/package-info.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+/**\n+ * Tests for gem-adapter related classes.", "originalCommit": "3c1d47252776fe1c0e48f0ddc6cc63157e81f78f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2ODAyMA==", "url": "https://github.com/artipie/artipie/pull/758#discussion_r525868020", "bodyText": "@genryxy could you please explain how key is used? We build it from arbitrary data, but I do not see how this data is translated into user on server. Does the test fails if auth is enabled on server, but the key is not provided on push?", "author": "olegmoz", "createdAt": "2020-11-18T07:36:54Z", "path": "src/test/java/com/artipie/gem/GemITCase.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.gem;\n+\n+import com.artipie.ArtipieServer;\n+import com.artipie.RepoConfigYaml;\n+import com.artipie.RepoPerms;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.artipie.test.RepositoryUrl;\n+import com.artipie.test.TestContainer;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import org.cactoos.text.Base64Encoded;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.hamcrest.core.StringContains;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+/**\n+ * Integration tests for Gem repository.\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ * @since 0.13\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+@EnabledOnOs({OS.LINUX, OS.MAC})\n+final class GemITCase {\n+\n+    /**\n+     * Repo.\n+     */\n+    private static final String REPO = \"my-gem\";\n+\n+    /**\n+     * Rails gem.\n+     */\n+    private static final String RAILS = \"rails-6.0.2.2.gem\";\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Tested Artipie server.\n+     */\n+    private ArtipieServer server;\n+\n+    /**\n+     * Container.\n+     */\n+    private TestContainer cntn;\n+\n+    /**\n+     * Repository url.\n+     */\n+    private RepositoryUrl url;\n+\n+    /**\n+     * Storage.\n+     */\n+    private Storage storage;\n+\n+    @Test\n+    public void gemPushWorks() throws Exception {\n+        final boolean anonymous = true;\n+        this.init(anonymous);\n+        this.push(anonymous);\n+        MatcherAssert.assertThat(\n+            this.storage.exists(\n+                new Key.From(\"repos\", GemITCase.REPO, \"gems\", GemITCase.RAILS)\n+            ).toCompletableFuture().join(),\n+            new IsEqual<>(true)\n+        );\n+    }\n+\n+    @Test\n+    void gemInstallPushedGemWorks() throws Exception {\n+        final boolean anonymous = true;\n+        this.init(anonymous);\n+        this.push(anonymous);\n+        MatcherAssert.assertThat(\n+            this.cntn.execStdout(\"gem\", \"install\", GemITCase.RAILS, \"--ignore-dependencies\"),\n+            new StringContains(\"Successfully installed rails-6.0.2.21\")\n+        );\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        this.server.stop();\n+        this.cntn.close();\n+    }\n+\n+    private void push(final boolean anonymous) throws Exception {\n+        final String key = new Base64Encoded(\"usr:pwd\").asString();", "originalCommit": "3c1d47252776fe1c0e48f0ddc6cc63157e81f78f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0MTExMQ==", "url": "https://github.com/artipie/artipie/pull/758#discussion_r526641111", "bodyText": "@olegmoz yes, it fails because the gem push expects that the gem server always requires credentials. Please, see https://stackoverflow.com/questions/61384113/how-to-push-a-gem-without-auth I'll replace usr:pwd with any:any to make it little clearer.", "author": "genryxy", "createdAt": "2020-11-19T07:18:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2ODAyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2OTQ4Ng==", "url": "https://github.com/artipie/artipie/pull/758#discussion_r525869486", "bodyText": "@genryxy the name does not make much sense, why URL is with slash? Maybe urlwithuser or just url would be better?", "author": "olegmoz", "createdAt": "2020-11-18T07:40:06Z", "path": "src/test/java/com/artipie/gem/GemITCase.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.gem;\n+\n+import com.artipie.ArtipieServer;\n+import com.artipie.RepoConfigYaml;\n+import com.artipie.RepoPerms;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.artipie.test.RepositoryUrl;\n+import com.artipie.test.TestContainer;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import org.cactoos.text.Base64Encoded;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.hamcrest.core.StringContains;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+/**\n+ * Integration tests for Gem repository.\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ * @since 0.13\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+@EnabledOnOs({OS.LINUX, OS.MAC})\n+final class GemITCase {\n+\n+    /**\n+     * Repo.\n+     */\n+    private static final String REPO = \"my-gem\";\n+\n+    /**\n+     * Rails gem.\n+     */\n+    private static final String RAILS = \"rails-6.0.2.2.gem\";\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Tested Artipie server.\n+     */\n+    private ArtipieServer server;\n+\n+    /**\n+     * Container.\n+     */\n+    private TestContainer cntn;\n+\n+    /**\n+     * Repository url.\n+     */\n+    private RepositoryUrl url;\n+\n+    /**\n+     * Storage.\n+     */\n+    private Storage storage;\n+\n+    @Test\n+    public void gemPushWorks() throws Exception {\n+        final boolean anonymous = true;\n+        this.init(anonymous);\n+        this.push(anonymous);\n+        MatcherAssert.assertThat(\n+            this.storage.exists(\n+                new Key.From(\"repos\", GemITCase.REPO, \"gems\", GemITCase.RAILS)\n+            ).toCompletableFuture().join(),\n+            new IsEqual<>(true)\n+        );\n+    }\n+\n+    @Test\n+    void gemInstallPushedGemWorks() throws Exception {\n+        final boolean anonymous = true;\n+        this.init(anonymous);\n+        this.push(anonymous);\n+        MatcherAssert.assertThat(\n+            this.cntn.execStdout(\"gem\", \"install\", GemITCase.RAILS, \"--ignore-dependencies\"),\n+            new StringContains(\"Successfully installed rails-6.0.2.21\")\n+        );\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        this.server.stop();\n+        this.cntn.close();\n+    }\n+\n+    private void push(final boolean anonymous) throws Exception {\n+        final String key = new Base64Encoded(\"usr:pwd\").asString();\n+        new TestResource(String.format(\"gem/%s\", GemITCase.RAILS))\n+            .saveTo(this.storage, new Key.From(GemITCase.RAILS));\n+        final String urlwithslash = this.url.string(anonymous);", "originalCommit": "3c1d47252776fe1c0e48f0ddc6cc63157e81f78f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0MDAzNQ==", "url": "https://github.com/artipie/artipie/pull/758#discussion_r526640035", "bodyText": "@olegmoz in this case I want to show that this.url.string(anonymous) returns url with slash and request looks like POST /my-gem//api/v1/gems HTTP_1_1. So, I take substring of urlwithslash", "author": "genryxy", "createdAt": "2020-11-19T07:16:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2OTQ4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0Njc5Ng==", "url": "https://github.com/artipie/artipie/pull/758#discussion_r526646796", "bodyText": "@genryxy but this.url contains these slashes. How calling string method on this.url transforms it into URL with slashes (adds slashes)?", "author": "olegmoz", "createdAt": "2020-11-19T07:32:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2OTQ4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY1MDc2NA==", "url": "https://github.com/artipie/artipie/pull/758#discussion_r526650764", "bodyText": "@olegmoz string method does not add slash at the end. It just concatenates as String.format(\"http://%s\", this.hostportrepo). hostportrepo is initialized in the constructor\npublic RepositoryUrl(final int port, final String reponame) {\n    this.hostportrepo = String.format(\"host.testcontainers.internal:%d/%s/\", port, reponame);\n}", "author": "genryxy", "createdAt": "2020-11-19T07:41:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2OTQ4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY2MDg1Ng==", "url": "https://github.com/artipie/artipie/pull/758#discussion_r526660856", "bodyText": "@genryxy exactly my point, it does not add slashes. Then why code reads \"apply method string to this.url with parameter anonymous and get URL with slashes as result`, does it make sense?", "author": "olegmoz", "createdAt": "2020-11-19T08:01:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2OTQ4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY3NjE2Nw==", "url": "https://github.com/artipie/artipie/pull/758#discussion_r526676167", "bodyText": "@olegmoz thanks, renamed variable", "author": "genryxy", "createdAt": "2020-11-19T08:30:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2OTQ4Ng=="}], "type": "inlineReview"}, {"oid": "ce9556f923471aa980bf093ded74eb0c587444b3", "url": "https://github.com/artipie/artipie/commit/ce9556f923471aa980bf093ded74eb0c587444b3", "message": "#606 - Changes by review", "committedDate": "2020-11-19T07:21:56Z", "type": "commit"}, {"oid": "f3aa28fb385cf896e75cd41912f02f9942ba3e8f", "url": "https://github.com/artipie/artipie/commit/f3aa28fb385cf896e75cd41912f02f9942ba3e8f", "message": "#606 - Rename variable", "committedDate": "2020-11-19T08:27:23Z", "type": "commit"}, {"oid": "9061ccdef0fabba42a0fd160040e6c111654ef14", "url": "https://github.com/artipie/artipie/commit/9061ccdef0fabba42a0fd160040e6c111654ef14", "message": "Merge remote-tracking branch 'upstream/master' into 606-pushInstallGem", "committedDate": "2020-11-19T08:29:11Z", "type": "commit"}, {"oid": "3f62bdd9cd5cd8fa0ca935f73016d3e272a6f903", "url": "https://github.com/artipie/artipie/commit/3f62bdd9cd5cd8fa0ca935f73016d3e272a6f903", "message": "Merge branch 'master' into 606-pushInstallGem", "committedDate": "2020-11-19T14:02:18Z", "type": "commit"}]}