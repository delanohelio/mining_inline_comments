{"pr_number": 1023, "pr_title": "Add support for oauth client credentials flow", "pr_createdAt": "2020-11-23T09:40:45Z", "pr_url": "https://github.com/Apicurio/apicurio-registry/pull/1023", "timeline": [{"oid": "fd03963929bef371cf4e0ea4332cf43e874f7497", "url": "https://github.com/Apicurio/apicurio-registry/commit/fd03963929bef371cf4e0ea4332cf43e874f7497", "message": "Add support for oauth client credentials flow", "committedDate": "2020-11-23T09:38:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODczMzY0Nw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/1023#discussion_r528733647", "bodyText": "This means that if the URL's username/password takes precedence over the inclusion of an Auth.  I'm OK with it if that was your intention.  But I could see an argument that an Auth is more explicit, programmatically, and that it should take precedent over any user/pass info in the URL.  Thoughts?", "author": "EricWittmann", "createdAt": "2020-11-23T14:17:24Z", "path": "rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java", "diffHunk": "@@ -138,6 +140,8 @@ private static OkHttpClient createHttpClientWithConfig(String baseUrl, Map<Strin\n             if (user != null && !user.isEmpty()) {\n                 String credentials = Credentials.basic(user, pwd);\n                 requestHeaders.put(\"Authorization\", credentials);\n+            } else if (auth != null) {\n+                okHttpClientBuilder.addInterceptor(new AuthInterceptor(auth));", "originalCommit": "fd03963929bef371cf4e0ea4332cf43e874f7497", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODczNTY3NA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/1023#discussion_r528735674", "bodyText": "Also what do you think about implementing a BasicAuth class to use.  So the code could change like this:\nif (auth == null && user != null && !user.isEmpty()) {\n    auth = new BasicAuth(user, pwd);\n}\nif (auth != null) {\n    okHttpClientBuilder.addInterceptor(new AuthInterceptor(auth));\n}\nIt also allows users to directly use the convenient BasicAuth class to provide basic credentials if they prefer to do that instead of the URL method.", "author": "EricWittmann", "createdAt": "2020-11-23T14:20:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODczMzY0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODczNzM4OQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/1023#discussion_r528737389", "bodyText": "Let's have another variant of the create() method that takes the Auth instance instead of changing the existing one.  That way you don't have to pass null when you don't have an Auth.", "author": "EricWittmann", "createdAt": "2020-11-23T14:22:47Z", "path": "rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientFactory.java", "diffHunk": "@@ -20,34 +20,23 @@\n import io.apicurio.registry.auth.Auth;\n import okhttp3.OkHttpClient;\n \n-import java.util.HashMap;\n import java.util.Map;\n \n-import static io.apicurio.registry.client.request.RestClientConfig.REGISTRY_REQUEST_HEADER_AUTHORIZATION;\n-\n \n /**\n  * @author eric.wittmann@gmail.com\n  */\n public class RegistryRestClientFactory {\n \n-\n     public static RegistryRestClient create(String baseUrl) {\n         return new RegistryRestClientImpl(baseUrl);\n     }\n \n-    public static RegistryRestClient create(String baseUrl, Auth auth) {\n-        final Map<String, Object> config = new HashMap<>();\n-        //TODO carnalca for now we only support bearer auth here\n-        config.put(REGISTRY_REQUEST_HEADER_AUTHORIZATION, auth.getAuthStrategy().getToken());\n-        return new RegistryRestClientImpl(baseUrl, config);\n-    }\n-\n     public static RegistryRestClient create(String baseUrl, OkHttpClient okHttpClient) {\n         return new RegistryRestClientImpl(baseUrl, okHttpClient);\n     }\n \n-    public static RegistryRestClient create(String baseUrl, Map<String, Object> configs) {\n-        return new RegistryRestClientImpl(baseUrl, configs);\n+    public static RegistryRestClient create(String baseUrl, Map<String, Object> configs, Auth auth) {\n+        return new RegistryRestClientImpl(baseUrl, configs, auth);", "originalCommit": "fd03963929bef371cf4e0ea4332cf43e874f7497", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7587fed15191db4dd791a575693bddc6d643a7c9", "url": "https://github.com/Apicurio/apicurio-registry/commit/7587fed15191db4dd791a575693bddc6d643a7c9", "message": "Add basic auth strategy", "committedDate": "2020-11-24T13:30:18Z", "type": "commit"}, {"oid": "13a0f036c089090e28cd62217fc60595fe89e0aa", "url": "https://github.com/Apicurio/apicurio-registry/commit/13a0f036c089090e28cd62217fc60595fe89e0aa", "message": "Update AbstractKafkaSerDe.java", "committedDate": "2020-11-24T13:42:21Z", "type": "commit"}]}