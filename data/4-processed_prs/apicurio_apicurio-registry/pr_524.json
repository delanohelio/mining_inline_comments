{"pr_number": 524, "pr_title": "tests - add env var to be able to manage tests invocation", "pr_createdAt": "2020-05-24T18:35:43Z", "pr_url": "https://github.com/Apicurio/apicurio-registry/pull/524", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzNjMzNg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/524#discussion_r429936336", "bodyText": "Can you make \"all\" one of the java constants along with \"create\" and \"cached\"?", "author": "EricWittmann", "createdAt": "2020-05-25T13:31:07Z", "path": "utils/tests/src/main/java/io/apicurio/registry/utils/tests/RegistryServiceExtension.java", "diffHunk": "@@ -89,21 +93,34 @@ public boolean supportsTestTemplate(ExtensionContext context) {\n         String registryUrl = TestUtils.getRegistryUrl(rst);\n \n         ExtensionContext.Store store = context.getStore(ExtensionContext.Namespace.GLOBAL);\n-        RegistryServiceWrapper plain = store.getOrComputeIfAbsent(\n-            \"plain_client\",\n-            k -> new RegistryServiceWrapper(k, \"create\", registryUrl),\n-            RegistryServiceWrapper.class\n-        );\n-        RegistryServiceWrapper cached = store.getOrComputeIfAbsent(\n-            \"cached_client\",\n-            k -> new RegistryServiceWrapper(k, \"cached\", registryUrl),\n-            RegistryServiceWrapper.class\n-        );\n-\n-        return Stream.of(\n-            new RegistryServiceTestTemplateInvocationContext(plain),\n-            new RegistryServiceTestTemplateInvocationContext(cached)\n-        );\n+\n+        List<TestTemplateInvocationContext> invocationCtxts = new ArrayList<>();\n+\n+        if (testRegistryClient(REGISTRY_CLIENT_CREATE)) {\n+            RegistryServiceWrapper plain = store.getOrComputeIfAbsent(\n+                    \"plain_client\",\n+                    k -> new RegistryServiceWrapper(k, REGISTRY_CLIENT_CREATE, registryUrl),\n+                    RegistryServiceWrapper.class\n+                );\n+            invocationCtxts.add(new RegistryServiceTestTemplateInvocationContext(plain));\n+        }\n+\n+        if (testRegistryClient(REGISTRY_CLIENT_CACHED)) {\n+            RegistryServiceWrapper cached = store.getOrComputeIfAbsent(\n+                    \"cached_client\",\n+                    k -> new RegistryServiceWrapper(k, REGISTRY_CLIENT_CACHED, registryUrl),\n+                    RegistryServiceWrapper.class\n+                );\n+            invocationCtxts.add(new RegistryServiceTestTemplateInvocationContext(cached));\n+        }\n+\n+        return invocationCtxts.stream();\n+    }\n+\n+    private boolean testRegistryClient(String clientType) {\n+        String testRegistryClients = TestUtils.getTestRegistryClients();\n+        return testRegistryClients == null || testRegistryClients.equalsIgnoreCase(\"all\")\n+                || testRegistryClients.equalsIgnoreCase(clientType);", "originalCommit": "913490eb484fe6db67d0d7f246dec9556d0a3e8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzODQ2Ng==", "url": "https://github.com/Apicurio/apicurio-registry/pull/524#discussion_r429938466", "bodyText": "done :)", "author": "famartinrh", "createdAt": "2020-05-25T13:35:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzNjMzNg=="}], "type": "inlineReview"}, {"oid": "c7361c1cd78c82838e728e204a3bb4467e5937f3", "url": "https://github.com/Apicurio/apicurio-registry/commit/c7361c1cd78c82838e728e204a3bb4467e5937f3", "message": "tests - add env var to be able to manage tests invocation", "committedDate": "2020-05-25T13:35:22Z", "type": "commit"}, {"oid": "cef2dd06dbfbd9638df6bd49dbece5af57bfa9c8", "url": "https://github.com/Apicurio/apicurio-registry/commit/cef2dd06dbfbd9638df6bd49dbece5af57bfa9c8", "message": "add all to constants", "committedDate": "2020-05-25T13:35:22Z", "type": "commit"}, {"oid": "cef2dd06dbfbd9638df6bd49dbece5af57bfa9c8", "url": "https://github.com/Apicurio/apicurio-registry/commit/cef2dd06dbfbd9638df6bd49dbece5af57bfa9c8", "message": "add all to constants", "committedDate": "2020-05-25T13:35:22Z", "type": "forcePushed"}]}