{"pr_number": 1326, "pr_title": "Mergingview vl adapter", "pr_createdAt": "2020-05-27T07:48:28Z", "pr_url": "https://github.com/powsybl/powsybl-core/pull/1326", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcxNjc4NA==", "url": "https://github.com/powsybl/powsybl-core/pull/1326#discussion_r433716784", "bodyText": "Hi @mathbagu ! I have tried to resolve this fixme and it is fix with this #1316\nI just have now to validate the PR #1316 with @zamarrenolm and @geofjamg for bus definition and the consequences.", "author": "annetill", "createdAt": "2020-06-02T08:44:12Z", "path": "iidm/iidm-mergingview/src/test/java/com/powsybl/iidm/mergingview/TopologyTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+\n+package com.powsybl.iidm.mergingview;\n+\n+import com.powsybl.iidm.network.Line;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.iidm.network.VoltageLevel;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * @author Mathieu Bague <mathieu.bague@rte-france.com>\n+ */\n+public class TopologyTest {\n+\n+    @Test\n+    public void test() {\n+        MergingView cgm = MergingViewFactory.createCGM(null);\n+        Network n1 = cgm.getNetwork(\"n1\");\n+        Network n2 = cgm.getNetwork(\"n2\");\n+        assertNotNull(n1);\n+        assertNotNull(n2);\n+\n+        Line mergedLine = cgm.getLine(\"DL1 + DL2\");\n+        assertNotNull(mergedLine);\n+        assertNotNull(mergedLine.getTerminal1().getBusView().getBus());\n+        // FIXME(mathbagu) assertNotNull(mergedLine.getTerminal2().getBusView().getBus());", "originalCommit": "5a730036ae986ed7b42d9f53bc4ec259fc67b2de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYwNjQ1MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1326#discussion_r436606451", "bodyText": "Indeed, now the PR that resolves this test is #1340", "author": "annetill", "createdAt": "2020-06-08T10:42:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcxNjc4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyNDU1OQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1326#discussion_r431724559", "bodyText": "If the dangling line is merged (and is considered as a line), should it return null or fail the cast? It seems that when we try getConnectable(b, A.class) if b is not an instance of A, there is an exception during the cast, not a returned null? I don't know if it can be easily done though.", "author": "MioRtia", "createdAt": "2020-05-28T10:06:11Z", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/AbstractVoltageLevelAdapter.java", "diffHunk": "@@ -0,0 +1,390 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+\n+package com.powsybl.iidm.mergingview;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.common.primitives.Ints;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.util.ShortIdDictionary;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.io.Writer;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * @author Mathieu Bague <mathieu.bague@rte-france.com>\n+ */\n+abstract class AbstractVoltageLevelAdapter extends AbstractIdentifiableAdapter<VoltageLevel> implements VoltageLevelAdapter {\n+\n+    static class BusCache<T> extends AbstractAdapter<T> {\n+\n+        private final Map<Bus, BusAdapter> busCache = new HashMap<>();\n+\n+        public BusCache(T delegate, MergingViewIndex index) {\n+            super(delegate, index);\n+        }\n+\n+        void invalidateCache() {\n+            busCache.clear();\n+        }\n+\n+        public Bus getBus(Bus bus) {\n+            return bus == null ? null : busCache.computeIfAbsent(bus, key -> new BusAdapter(key, getIndex()));\n+        }\n+\n+        public int size() {\n+            return busCache.size();\n+        }\n+    }\n+\n+    AbstractVoltageLevelAdapter(final VoltageLevel delegate, final MergingViewIndex index) {\n+        super(delegate, index);\n+    }\n+\n+    @Override\n+    public ContainerType getContainerType() {\n+        return getDelegate().getContainerType();\n+    }\n+\n+    @Override\n+    public Substation getSubstation() {\n+        return getIndex().getSubstation(getDelegate().getSubstation());\n+    }\n+\n+    @Override\n+    public double getNominalV() {\n+        return getDelegate().getNominalV();\n+    }\n+\n+    @Override\n+    public VoltageLevel setNominalV(double nominalV) {\n+        getDelegate().setNominalV(nominalV);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getLowVoltageLimit() {\n+        return getDelegate().getLowVoltageLimit();\n+    }\n+\n+    @Override\n+    public VoltageLevel setLowVoltageLimit(double lowVoltageLimit) {\n+        getDelegate().setLowVoltageLimit(lowVoltageLimit);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getHighVoltageLimit() {\n+        return getDelegate().getHighVoltageLimit();\n+    }\n+\n+    @Override\n+    public VoltageLevel setHighVoltageLimit(double highVoltageLimit) {\n+        getDelegate().setHighVoltageLimit(highVoltageLimit);\n+        return this;\n+    }\n+\n+    @Override\n+    public <T extends Connectable> T getConnectable(String id, Class<T> clazz) {\n+        T connectable = getDelegate().getConnectable(id, clazz);\n+        if (clazz == DanglingLine.class) {\n+            DanglingLine dl = (DanglingLine) connectable;\n+            return dl == null || getIndex().isMerged(dl) ? null : clazz.cast(getIndex().getDanglingLine(dl));", "originalCommit": "5a730036ae986ed7b42d9f53bc4ec259fc67b2de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk1MjA1MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1326#discussion_r435952051", "bodyText": "In the merging view, the dangling line doesn't exists anymore. So, if you get a DanglingLine from the delegate, and it's merged, you should ignore it (the mergedLine has its own ID).\nBut, you right, I should change the end of this method if the connectable is not null, to have the same error than in the iidm-impl", "author": "mathbagu", "createdAt": "2020-06-05T14:16:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyNDU1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwNjk2Mg==", "url": "https://github.com/powsybl/powsybl-core/pull/1326#discussion_r434406962", "bodyText": "Is this System.out.println voluntary?", "author": "MioRtia", "createdAt": "2020-06-03T08:45:21Z", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/BusBreakerVoltageLevelAdapter.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+\n+package com.powsybl.iidm.mergingview;\n+\n+import com.google.common.collect.Iterables;\n+import com.powsybl.iidm.network.Bus;\n+import com.powsybl.iidm.network.BusAdder;\n+import com.powsybl.iidm.network.Switch;\n+import com.powsybl.iidm.network.VoltageLevel;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * @author Mathieu Bague <mathieu.bague@rte-france.com>\n+ */\n+class BusBreakerVoltageLevelAdapter extends AbstractVoltageLevelAdapter {\n+\n+    class BusBreakerViewAdapter extends AbstractAdapter<BusBreakerView> implements BusBreakerViewExt {\n+\n+        final class SwitchAdderAdapter extends AbstractIdentifiableAdderAdapter<SwitchAdder> implements SwitchAdder {\n+\n+            SwitchAdderAdapter(final SwitchAdder delegate, final MergingViewIndex index) {\n+                super(delegate, index);\n+            }\n+\n+            @Override\n+            public Switch add() {\n+                checkAndSetUniqueId();\n+                return getIndex().getSwitch(getDelegate().add());\n+            }\n+\n+            @Override\n+            public VoltageLevel.BusBreakerView.SwitchAdder setBus1(String bus1) {\n+                getDelegate().setBus1(bus1);\n+                return this;\n+            }\n+\n+            @Override\n+            public VoltageLevel.BusBreakerView.SwitchAdder setBus2(String bus2) {\n+                getDelegate().setBus2(bus2);\n+                return this;\n+            }\n+\n+            @Override\n+            public VoltageLevel.BusBreakerView.SwitchAdder setOpen(final boolean open) {\n+                getDelegate().setOpen(open);\n+                return this;\n+            }\n+\n+            @Override\n+            public VoltageLevel.BusBreakerView.SwitchAdder setFictitious(final boolean fictitious) {\n+                getDelegate().setFictitious(fictitious);\n+                return this;\n+            }\n+        }\n+\n+        BusBreakerViewAdapter(BusBreakerView delegate, MergingViewIndex index) {\n+            super(delegate, index);\n+        }\n+\n+        @Override\n+        public Iterable<Bus> getBuses() {\n+            return Iterables.transform(getDelegate().getBuses(), this::getBus);\n+        }\n+\n+        @Override\n+        public Stream<Bus> getBusStream() {\n+            return getDelegate().getBusStream()\n+                    .map(this::getBus);\n+        }\n+\n+        @Override\n+        public Bus getBus(String id) {\n+            return getBus(getDelegate().getBus(id));\n+        }\n+\n+        @Override\n+        public BusAdder newBus() {\n+            return new BusAdderAdapter(getDelegate().newBus(), getIndex());\n+        }\n+\n+        @Override\n+        public void removeBus(String busId) {\n+            // TODO(mathbagu)\n+            throw MergingView.createNotImplementedException();\n+        }\n+\n+        @Override\n+        public void removeAllBuses() {\n+            // TODO(mathbagu)\n+            throw MergingView.createNotImplementedException();\n+        }\n+\n+        @Override\n+        public Iterable<Switch> getSwitches() {\n+            return Iterables.transform(getDelegate().getSwitches(), getIndex()::getSwitch);\n+        }\n+\n+        @Override\n+        public Stream<Switch> getSwitchStream() {\n+            return getDelegate().getSwitchStream()\n+                    .map(getIndex()::getSwitch);\n+        }\n+\n+        @Override\n+        public int getSwitchCount() {\n+            return getDelegate().getSwitchCount();\n+        }\n+\n+        @Override\n+        public void removeSwitch(String switchId) {\n+            // TODO(mathbagu)\n+            throw MergingView.createNotImplementedException();\n+        }\n+\n+        @Override\n+        public void removeAllSwitches() {\n+            // TODO(mathbagu)\n+            throw MergingView.createNotImplementedException();\n+        }\n+\n+        @Override\n+        public Bus getBus1(String switchId) {\n+            return getBus(getDelegate().getBus1(switchId));\n+        }\n+\n+        @Override\n+        public Bus getBus2(String switchId) {\n+            return getBus(getDelegate().getBus2(switchId));\n+        }\n+\n+        @Override\n+        public Switch getSwitch(String switchId) {\n+            return getIndex().getSwitch(getDelegate().getSwitch(switchId));\n+        }\n+\n+        @Override\n+        public SwitchAdder newSwitch() {\n+            return new SwitchAdderAdapter(getDelegate().newSwitch(), getIndex());\n+        }\n+\n+        @Override\n+        public Bus getBus(Bus bus) {\n+            return getIndex().getBus(bus);\n+        }\n+    }\n+\n+    static class BusViewAdapter extends BusCache<BusView> implements BusViewExt {\n+\n+        BusViewAdapter(BusView delegate, MergingViewIndex index) {\n+            super(delegate, index);\n+        }\n+\n+        @Override\n+        public Iterable<Bus> getBuses() {\n+            return Iterables.transform(getDelegate().getBuses(), this::getBus);\n+        }\n+\n+        @Override\n+        public Stream<Bus> getBusStream() {\n+            return getDelegate().getBusStream().map(this::getBus);\n+        }\n+\n+        @Override\n+        public Bus getBus(String id) {\n+            return getBus(getDelegate().getBus(id));\n+        }\n+\n+        @Override\n+        public Bus getMergedBus(String configuredBusId) {\n+            return getBus(getDelegate().getMergedBus(configuredBusId));\n+        }\n+    }\n+\n+    private final BusBreakerViewAdapter busBreakerView;\n+\n+    private final BusViewAdapter busView;\n+\n+    BusBreakerVoltageLevelAdapter(final VoltageLevel delegate, final MergingViewIndex index) {\n+        super(delegate, index);\n+        busBreakerView = new BusBreakerViewAdapter(delegate.getBusBreakerView(), index);\n+        busView = new BusViewAdapter(delegate.getBusView(), index);\n+    }\n+\n+    @Override\n+    public NodeBreakerView getNodeBreakerView() {\n+        // The delegate is a BusBreakerVoltageLevel, so we can return its Node/Breaker view that throws exception for all the methods.\n+        return getDelegate().getNodeBreakerView();\n+    }\n+\n+    @Override\n+    public BusBreakerViewExt getBusBreakerView() {\n+        return busBreakerView;\n+    }\n+\n+    @Override\n+    public BusViewExt getBusView() {\n+        return busView;\n+    }\n+\n+    @Override\n+    public void invalidateCache() {\n+        busView.invalidateCache();\n+        System.out.println(\"BBKVLA::invalidate\");", "originalCommit": "5a730036ae986ed7b42d9f53bc4ec259fc67b2de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk1MjMzNw==", "url": "https://github.com/powsybl/powsybl-core/pull/1326#discussion_r435952337", "bodyText": "Just to debug, but you right, I have to remove it", "author": "mathbagu", "createdAt": "2020-06-05T14:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwNjk2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQxMDcyMA==", "url": "https://github.com/powsybl/powsybl-core/pull/1326#discussion_r434410720", "bodyText": "Same remark as before. Shouldn't a logger be used?", "author": "MioRtia", "createdAt": "2020-06-03T08:51:42Z", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/NodeBreakerVoltageLevelAdapter.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+\n+package com.powsybl.iidm.mergingview;\n+\n+import com.google.common.collect.Iterables;\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+/**\n+ * @author Mathieu Bague <mathieu.bague@rte-france.com>\n+ */\n+class NodeBreakerVoltageLevelAdapter extends AbstractVoltageLevelAdapter {\n+\n+    class NodeBreakerViewAdapter extends AbstractAdapter<NodeBreakerView> implements NodeBreakerView {\n+\n+        final class SwitchAdderAdapter extends AbstractIdentifiableAdderAdapter<SwitchAdder> implements SwitchAdder {\n+\n+            SwitchAdderAdapter(final SwitchAdder delegate, final MergingViewIndex index) {\n+                super(delegate, index);\n+            }\n+\n+            @Override\n+            public Switch add() {\n+                checkAndSetUniqueId();\n+                return getIndex().getSwitch(getDelegate().add());\n+            }\n+\n+            @Override\n+            public VoltageLevel.NodeBreakerView.SwitchAdder setNode1(final int node1) {\n+                getDelegate().setNode1(node1);\n+                return this;\n+            }\n+\n+            @Override\n+            public VoltageLevel.NodeBreakerView.SwitchAdder setNode2(final int node2) {\n+                getDelegate().setNode2(node2);\n+                return this;\n+            }\n+\n+            @Override\n+            public VoltageLevel.NodeBreakerView.SwitchAdder setKind(final SwitchKind kind) {\n+                getDelegate().setKind(kind);\n+                return this;\n+            }\n+\n+            @Override\n+            public VoltageLevel.NodeBreakerView.SwitchAdder setKind(final String kind) {\n+                getDelegate().setKind(kind);\n+                return this;\n+            }\n+\n+            @Override\n+            public VoltageLevel.NodeBreakerView.SwitchAdder setOpen(final boolean open) {\n+                getDelegate().setOpen(open);\n+                return this;\n+            }\n+\n+            @Override\n+            public VoltageLevel.NodeBreakerView.SwitchAdder setRetained(final boolean retained) {\n+                getDelegate().setRetained(retained);\n+                return this;\n+            }\n+\n+            @Override\n+            public VoltageLevel.NodeBreakerView.SwitchAdder setFictitious(final boolean fictitious) {\n+                getDelegate().setFictitious(fictitious);\n+                return this;\n+            }\n+        }\n+\n+        final class InternalConnectionAdderAdapter implements InternalConnectionAdder {\n+\n+            private final InternalConnectionAdder delegate;\n+\n+            InternalConnectionAdderAdapter(final InternalConnectionAdder delegate) {\n+                this.delegate = Objects.requireNonNull(delegate);\n+            }\n+\n+            @Override\n+            public InternalConnectionAdder setNode1(int node1) {\n+                delegate.setNode1(node1);\n+                return this;\n+            }\n+\n+            @Override\n+            public InternalConnectionAdder setNode2(int node2) {\n+                delegate.setNode2(node2);\n+                return this;\n+            }\n+\n+            @Override\n+            public void add() {\n+                delegate.add();\n+            }\n+        }\n+\n+        NodeBreakerViewAdapter(NodeBreakerView delegate, MergingViewIndex index) {\n+            super(delegate, index);\n+        }\n+\n+        @Override\n+        public int getMaximumNodeIndex() {\n+            return getDelegate().getMaximumNodeIndex();\n+        }\n+\n+        @Override\n+        public int[] getNodes() {\n+            return getDelegate().getNodes();\n+        }\n+\n+        @Override\n+        public SwitchAdder newSwitch() {\n+            return new SwitchAdderAdapter(getDelegate().newSwitch(), getIndex());\n+        }\n+\n+        @Override\n+        public InternalConnectionAdder newInternalConnection() {\n+            return new InternalConnectionAdderAdapter(getDelegate().newInternalConnection());\n+        }\n+\n+        @Override\n+        public int getInternalConnectionCount() {\n+            return getDelegate().getInternalConnectionCount();\n+        }\n+\n+        @Override\n+        public Iterable<InternalConnection> getInternalConnections() {\n+            return getDelegate().getInternalConnections();\n+        }\n+\n+        @Override\n+        public Stream<InternalConnection> getInternalConnectionStream() {\n+            return getDelegate().getInternalConnectionStream();\n+        }\n+\n+        @Override\n+        public void removeInternalConnections(int node1, int node2) {\n+            // TODO(mathbagu)\n+            throw MergingView.createNotImplementedException();\n+        }\n+\n+        @Override\n+        public SwitchAdder newBreaker() {\n+            return new SwitchAdderAdapter(getDelegate().newBreaker(), getIndex());\n+        }\n+\n+        @Override\n+        public SwitchAdder newDisconnector() {\n+            return new SwitchAdderAdapter(getDelegate().newDisconnector(), getIndex());\n+        }\n+\n+        @Override\n+        public int getNode1(String switchId) {\n+            return getDelegate().getNode1(switchId);\n+        }\n+\n+        @Override\n+        public int getNode2(String switchId) {\n+            return getDelegate().getNode2(switchId);\n+        }\n+\n+        @Override\n+        public Terminal getTerminal(int node) {\n+            return getIndex().getTerminal(getDelegate().getTerminal(node));\n+        }\n+\n+        @Override\n+        public Optional<Terminal> getOptionalTerminal(int node) {\n+            return Optional.ofNullable(getTerminal(node));\n+        }\n+\n+        @Override\n+        public boolean hasAttachedEquipment(int node) {\n+            return getDelegate().hasAttachedEquipment(node);\n+        }\n+\n+        @Override\n+        public Terminal getTerminal1(String switchId) {\n+            return getIndex().getTerminal(getDelegate().getTerminal1(switchId));\n+        }\n+\n+        @Override\n+        public Terminal getTerminal2(String switchId) {\n+            return getIndex().getTerminal(getDelegate().getTerminal2(switchId));\n+        }\n+\n+        @Override\n+        public Switch getSwitch(String switchId) {\n+            return getIndex().getSwitch(getDelegate().getSwitch(switchId));\n+        }\n+\n+        @Override\n+        public Iterable<Switch> getSwitches() {\n+            return Iterables.transform(getDelegate().getSwitches(),\n+                    getIndex()::getSwitch);\n+        }\n+\n+        @Override\n+        public Stream<Switch> getSwitchStream() {\n+            return getDelegate().getSwitchStream()\n+                    .map(getIndex()::getSwitch);\n+        }\n+\n+        @Override\n+        public int getSwitchCount() {\n+            return getDelegate().getSwitchCount();\n+        }\n+\n+        @Override\n+        public void removeSwitch(String switchId) {\n+            // TODO(mathbagu)\n+            throw MergingView.createNotImplementedException();\n+        }\n+\n+        @Override\n+        public BusbarSectionAdder newBusbarSection() {\n+            return new BusbarSectionAdderAdapter(getDelegate().newBusbarSection(), getIndex());\n+        }\n+\n+        @Override\n+        public Iterable<BusbarSection> getBusbarSections() {\n+            return Iterables.transform(getDelegate().getBusbarSections(),\n+                    getIndex()::getBusbarSection);\n+        }\n+\n+        @Override\n+        public Stream<BusbarSection> getBusbarSectionStream() {\n+            return getDelegate().getBusbarSectionStream()\n+                    .map(getIndex()::getBusbarSection);\n+        }\n+\n+        @Override\n+        public int getBusbarSectionCount() {\n+            return getDelegate().getBusbarSectionCount();\n+        }\n+\n+        @Override\n+        public BusbarSection getBusbarSection(String id) {\n+            return getIndex().getBusbarSection(getDelegate().getBusbarSection(id));\n+        }\n+\n+        @Override\n+        public void traverse(int node, Traverser traverser) {\n+            // TODO(mathbagu)\n+            throw MergingView.createNotImplementedException();\n+        }\n+    }\n+\n+    static class BusBreakerViewAdapter extends BusCache<BusBreakerView> implements BusBreakerViewExt {\n+\n+        BusBreakerViewAdapter(BusBreakerView delegate, MergingViewIndex index) {\n+            super(delegate, index);\n+        }\n+\n+        @Override\n+        public Iterable<Bus> getBuses() {\n+            return Iterables.transform(getDelegate().getBuses(), this::getBus);\n+        }\n+\n+        @Override\n+        public Stream<Bus> getBusStream() {\n+            return getDelegate().getBusStream().map(this::getBus);\n+        }\n+\n+        @Override\n+        public Bus getBus(String id) {\n+            return getBus(getDelegate().getBus(id));\n+        }\n+\n+        @Override\n+        public BusAdder newBus() {\n+            throw createNotSupportedNodeBreakerTopologyException();\n+        }\n+\n+        @Override\n+        public void removeBus(String busId) {\n+            throw createNotSupportedNodeBreakerTopologyException();\n+        }\n+\n+        @Override\n+        public void removeAllBuses() {\n+            throw createNotSupportedNodeBreakerTopologyException();\n+        }\n+\n+        @Override\n+        public Iterable<Switch> getSwitches() {\n+            return Iterables.transform(getDelegate().getSwitches(),\n+                    getIndex()::getSwitch);\n+        }\n+\n+        @Override\n+        public Stream<Switch> getSwitchStream() {\n+            return getDelegate().getSwitchStream()\n+                    .map(getIndex()::getSwitch);\n+        }\n+\n+        @Override\n+        public int getSwitchCount() {\n+            return getDelegate().getSwitchCount();\n+        }\n+\n+        @Override\n+        public void removeSwitch(String switchId) {\n+            throw createNotSupportedNodeBreakerTopologyException();\n+        }\n+\n+        @Override\n+        public void removeAllSwitches() {\n+            throw createNotSupportedNodeBreakerTopologyException();\n+        }\n+\n+        @Override\n+        public Bus getBus1(String switchId) {\n+            return getBus(getDelegate().getBus1(switchId));\n+        }\n+\n+        @Override\n+        public Bus getBus2(String switchId) {\n+            return getBus(getDelegate().getBus2(switchId));\n+        }\n+\n+        @Override\n+        public Switch getSwitch(String switchId) {\n+            return getIndex().getSwitch(getDelegate().getSwitch(switchId));\n+        }\n+\n+        @Override\n+        public SwitchAdder newSwitch() {\n+            throw createNotSupportedNodeBreakerTopologyException();\n+        }\n+\n+        private PowsyblException createNotSupportedNodeBreakerTopologyException() {\n+            return new PowsyblException(\"Not supported in a node/breaker topology\");\n+        }\n+    }\n+\n+    static class BusViewAdapter extends BusCache<BusView> implements BusViewExt {\n+\n+        BusViewAdapter(BusView delegate, MergingViewIndex index) {\n+            super(delegate, index);\n+        }\n+\n+        @Override\n+        public Iterable<Bus> getBuses() {\n+            return Iterables.transform(getDelegate().getBuses(), this::getBus);\n+        }\n+\n+        @Override\n+        public Stream<Bus> getBusStream() {\n+            return getDelegate().getBusStream().map(this::getBus);\n+        }\n+\n+        @Override\n+        public Bus getBus(String id) {\n+            return getBus(getDelegate().getBus(id));\n+        }\n+\n+        @Override\n+        public Bus getMergedBus(String configuredBusId) {\n+            return getBus(getDelegate().getMergedBus(configuredBusId));\n+        }\n+    }\n+\n+    private final NodeBreakerViewAdapter nodeBreakerView;\n+\n+    private final BusBreakerViewAdapter busBreakerView;\n+\n+    private final BusViewAdapter busView;\n+\n+    NodeBreakerVoltageLevelAdapter(final VoltageLevel delegate, final MergingViewIndex index) {\n+        super(delegate, index);\n+        nodeBreakerView = new NodeBreakerViewAdapter(delegate.getNodeBreakerView(), index);\n+        busBreakerView = new BusBreakerViewAdapter(delegate.getBusBreakerView(), index);\n+        busView = new BusViewAdapter(delegate.getBusView(), index);\n+    }\n+\n+    @Override\n+    public NodeBreakerView getNodeBreakerView() {\n+        return nodeBreakerView;\n+    }\n+\n+    @Override\n+    public BusBreakerViewExt getBusBreakerView() {\n+        return busBreakerView;\n+    }\n+\n+    @Override\n+    public BusViewExt getBusView() {\n+        return busView;\n+    }\n+\n+    @Override\n+    public void invalidateCache() {\n+        busBreakerView.invalidateCache();\n+        busView.invalidateCache();\n+        System.out.println(\"INVALIDATE\");", "originalCommit": "5a730036ae986ed7b42d9f53bc4ec259fc67b2de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk1MjU1Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1326#discussion_r435952556", "bodyText": "Same answer, just for the debug", "author": "mathbagu", "createdAt": "2020-06-05T14:17:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQxMDcyMA=="}], "type": "inlineReview"}, {"oid": "9718ea9267b54dc33163e2b98d7ceabd1214ad11", "url": "https://github.com/powsybl/powsybl-core/commit/9718ea9267b54dc33163e2b98d7ceabd1214ad11", "message": "Fix VoltageLevelAdapter implementation\n- Have a specific adapter for each kind of voltage levels\n- The CalculatedBus are cached in the voltage levels instead of in the MergingView\n- The CalculatedBus instance are the same in the three views holder\n\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>", "committedDate": "2020-06-16T08:51:39Z", "type": "commit"}, {"oid": "8e614d311617667df7af5f9a41aaae14a658ce53", "url": "https://github.com/powsybl/powsybl-core/commit/8e614d311617667df7af5f9a41aaae14a658ce53", "message": "TopologyListener (to be cleaned)\n\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>", "committedDate": "2020-06-16T08:51:39Z", "type": "commit"}, {"oid": "f2ce3180a6fda374282b10429cbd6da0eed9ffdb", "url": "https://github.com/powsybl/powsybl-core/commit/f2ce3180a6fda374282b10429cbd6da0eed9ffdb", "message": "Add fixme as reminders\n\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>", "committedDate": "2020-06-16T08:51:39Z", "type": "commit"}, {"oid": "7f66f99f55122e766d7ff11df69e1f56439bf3ae", "url": "https://github.com/powsybl/powsybl-core/commit/7f66f99f55122e766d7ff11df69e1f56439bf3ae", "message": "Move components management in the API\n\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>", "committedDate": "2020-06-16T08:51:39Z", "type": "commit"}, {"oid": "ec4db6abef1093614a6a60788be3d9c84d0305a8", "url": "https://github.com/powsybl/powsybl-core/commit/ec4db6abef1093614a6a60788be3d9c84d0305a8", "message": "Implement components management in the merging view\n\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>", "committedDate": "2020-06-16T09:06:09Z", "type": "commit"}, {"oid": "deb2449af89dd1bc7041ce93ec72262068ac9004", "url": "https://github.com/powsybl/powsybl-core/commit/deb2449af89dd1bc7041ce93ec72262068ac9004", "message": "MergedLine implements TieLine instead of Line\nHalfLineAdapter adapt a DanglingLine to a HalfLine\n\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>", "committedDate": "2020-06-16T09:06:09Z", "type": "commit"}, {"oid": "e95b5dbdff5099eae23a3191b24790ab1c403b8e", "url": "https://github.com/powsybl/powsybl-core/commit/e95b5dbdff5099eae23a3191b24790ab1c403b8e", "message": "Minor correction (rebasing + not using getName())\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>", "committedDate": "2020-06-16T09:46:00Z", "type": "commit"}, {"oid": "e95b5dbdff5099eae23a3191b24790ab1c403b8e", "url": "https://github.com/powsybl/powsybl-core/commit/e95b5dbdff5099eae23a3191b24790ab1c403b8e", "message": "Minor correction (rebasing + not using getName())\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>", "committedDate": "2020-06-16T09:46:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxOTU3MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1326#discussion_r440719570", "bodyText": "Just for me, could you explain why you commented the throwing of exception here? Was it only to test?", "author": "MioRtia", "createdAt": "2020-06-16T09:37:10Z", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "diffHunk": "@@ -493,12 +497,14 @@ public void remove() {\n \n     @Override\n     public <E extends Extension<Line>> E getExtension(final Class<? super E> type) {\n-        throw MergingView.createNotImplementedException();\n+        return null;\n+        // throw MergingView.createNotImplementedException();", "originalCommit": "a7f3ef326cd296ab0b2542882667aa2e936511d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwNDM0OQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1326#discussion_r440804349", "bodyText": "I put two TODOs in these methods to explain why I prefer returning null or an empty list instead of throwing an exception.", "author": "mathbagu", "createdAt": "2020-06-16T12:17:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxOTU3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxOTYzNA==", "url": "https://github.com/powsybl/powsybl-core/pull/1326#discussion_r440719634", "bodyText": "Same question", "author": "MioRtia", "createdAt": "2020-06-16T09:37:16Z", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "diffHunk": "@@ -493,12 +497,14 @@ public void remove() {\n \n     @Override\n     public <E extends Extension<Line>> E getExtension(final Class<? super E> type) {\n-        throw MergingView.createNotImplementedException();\n+        return null;\n+        // throw MergingView.createNotImplementedException();\n     }\n \n     @Override\n     public <E extends Extension<Line>> E getExtensionByName(final String name) {\n-        throw MergingView.createNotImplementedException();\n+        return null;\n+        // throw MergingView.createNotImplementedException();", "originalCommit": "a7f3ef326cd296ab0b2542882667aa2e936511d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxOTc0OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1326#discussion_r440719748", "bodyText": "Same question", "author": "MioRtia", "createdAt": "2020-06-16T09:37:27Z", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "diffHunk": "@@ -508,7 +514,8 @@ public void remove() {\n \n     @Override\n     public <E extends Extension<Line>> Collection<E> getExtensions() {\n-        throw MergingView.createNotImplementedException();\n+        return Collections.emptyList();\n+        // throw MergingView.createNotImplementedException();", "originalCommit": "a7f3ef326cd296ab0b2542882667aa2e936511d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6a0b2db6f6dea0d9f8a5a4f594412a4643ae788d", "url": "https://github.com/powsybl/powsybl-core/commit/6a0b2db6f6dea0d9f8a5a4f594412a4643ae788d", "message": "fix checkstyle\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>", "committedDate": "2020-06-16T11:11:14Z", "type": "commit"}, {"oid": "024b5b2aa2a365d05c38d316b2d8bcd99d8f97ee", "url": "https://github.com/powsybl/powsybl-core/commit/024b5b2aa2a365d05c38d316b2d8bcd99d8f97ee", "message": "Cleanup\n\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>", "committedDate": "2020-06-16T12:55:17Z", "type": "commit"}]}