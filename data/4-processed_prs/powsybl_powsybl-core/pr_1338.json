{"pr_number": 1338, "pr_title": "Psse converter for 14 buses testcase", "pr_createdAt": "2020-06-05T16:07:23Z", "pr_url": "https://github.com/powsybl/powsybl-core/pull/1338", "timeline": [{"oid": "694879622893895126449ffd5584edcb7222d21d", "url": "https://github.com/powsybl/powsybl-core/commit/694879622893895126449ffd5584edcb7222d21d", "message": "first version of PSS/E importer", "committedDate": "2020-06-05T12:15:16Z", "type": "commit"}, {"oid": "5a1e8f9a2b2e3cf553220dd58d49a7b80323b8c3", "url": "https://github.com/powsybl/powsybl-core/commit/5a1e8f9a2b2e3cf553220dd58d49a7b80323b8c3", "message": "first version of PSS/E importer", "committedDate": "2020-06-05T12:15:50Z", "type": "commit"}, {"oid": "f60c63f99a38726eae129d62ce038fa0dacef32c", "url": "https://github.com/powsybl/powsybl-core/commit/f60c63f99a38726eae129d62ce038fa0dacef32c", "message": "Share containers mapping between IEEE and PSS/E importer", "committedDate": "2020-06-05T20:43:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1ODY4NQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436158685", "bodyText": "Missing license header", "author": "geofjamg", "createdAt": "2020-06-05T20:51:59Z", "path": "psse/psse-converter/pom.xml", "diffHunk": "@@ -0,0 +1,103 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "originalCommit": "f60c63f99a38726eae129d62ce038fa0dacef32c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM5NTUzNg==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436395536", "bodyText": "OK", "author": "JB-H", "createdAt": "2020-06-07T19:45:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1ODY4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1ODg0OQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436158849", "bodyText": "Do we need this dependency?", "author": "geofjamg", "createdAt": "2020-06-05T20:52:22Z", "path": "psse/psse-converter/pom.xml", "diffHunk": "@@ -0,0 +1,103 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>powsybl-psse</artifactId>\n+        <groupId>com.powsybl</groupId>\n+        <version>3.4.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>powsybl-psse-converter</artifactId>\n+    <name>PSSE converter</name>\n+    <description>PSSE  Data Format to IIDM converter</description>\n+\n+    <dependencies>\n+        <!-- Compile dependencies -->\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>powsybl-commons</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>powsybl-iidm-converter-api</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>powsybl-iidm-util</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>powsybl-psse-model</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>", "originalCommit": "f60c63f99a38726eae129d62ce038fa0dacef32c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1ODk2Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436158963", "bodyText": "Do we need this dependency?", "author": "geofjamg", "createdAt": "2020-06-05T20:52:38Z", "path": "psse/psse-converter/pom.xml", "diffHunk": "@@ -0,0 +1,103 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>powsybl-psse</artifactId>\n+        <groupId>com.powsybl</groupId>\n+        <version>3.4.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>powsybl-psse-converter</artifactId>\n+    <name>PSSE converter</name>\n+    <description>PSSE  Data Format to IIDM converter</description>\n+\n+    <dependencies>\n+        <!-- Compile dependencies -->\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>powsybl-commons</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>powsybl-iidm-converter-api</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>powsybl-iidm-util</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>powsybl-psse-model</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.univocity</groupId>\n+            <artifactId>univocity-parsers</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-api</artifactId>\n+        </dependency>\n+\n+        <!-- Test dependencies -->\n+        <dependency>\n+            <groupId>com.google.jimfs</groupId>\n+            <artifactId>jimfs</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-simple</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>powsybl-commons</artifactId>\n+            <version>${project.version}</version>\n+            <type>test-jar</type>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>powsybl-config-test</artifactId>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>powsybl-iidm-impl</artifactId>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>powsybl-iidm-xml-converter</artifactId>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>", "originalCommit": "f60c63f99a38726eae129d62ce038fa0dacef32c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1OTAyNQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436159025", "bodyText": "Do we need this dependency?", "author": "geofjamg", "createdAt": "2020-06-05T20:52:47Z", "path": "psse/psse-converter/pom.xml", "diffHunk": "@@ -0,0 +1,103 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>powsybl-psse</artifactId>\n+        <groupId>com.powsybl</groupId>\n+        <version>3.4.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>powsybl-psse-converter</artifactId>\n+    <name>PSSE converter</name>\n+    <description>PSSE  Data Format to IIDM converter</description>\n+\n+    <dependencies>\n+        <!-- Compile dependencies -->\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>powsybl-commons</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>powsybl-iidm-converter-api</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>powsybl-iidm-util</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>powsybl-psse-model</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.univocity</groupId>\n+            <artifactId>univocity-parsers</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-api</artifactId>\n+        </dependency>\n+\n+        <!-- Test dependencies -->\n+        <dependency>\n+            <groupId>com.google.jimfs</groupId>\n+            <artifactId>jimfs</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-simple</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>powsybl-commons</artifactId>\n+            <version>${project.version}</version>\n+            <type>test-jar</type>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>powsybl-config-test</artifactId>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>powsybl-iidm-impl</artifactId>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>powsybl-iidm-xml-converter</artifactId>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>powsybl-loadflow-results-completion</artifactId>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>", "originalCommit": "f60c63f99a38726eae129d62ce038fa0dacef32c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1OTIzNg==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436159236", "bodyText": "2020", "author": "geofjamg", "createdAt": "2020-06-05T20:53:19Z", "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/**\n+ * Copyright (c) 2019, RTE (http://www.rte-france.com)", "originalCommit": "f60c63f99a38726eae129d62ce038fa0dacef32c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM5NTU3OQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436395579", "bodyText": "ok", "author": "JB-H", "createdAt": "2020-06-07T19:45:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1OTIzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1OTU0Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436159543", "bodyText": "Do we really need this option with PSS/E. It was relevant with IEEE CDF data but is it the case here?", "author": "geofjamg", "createdAt": "2020-06-05T20:54:11Z", "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/**\n+ * Copyright (c) 2019, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.converter;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.ByteStreams;\n+import com.powsybl.commons.datasource.DataSource;\n+import com.powsybl.commons.datasource.ReadOnlyDataSource;\n+import com.powsybl.iidm.ConversionParameters;\n+import com.powsybl.iidm.import_.Importer;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.util.ContainersMapping;\n+import com.powsybl.iidm.parameters.Parameter;\n+import com.powsybl.iidm.parameters.ParameterDefaultValueConfig;\n+import com.powsybl.iidm.parameters.ParameterType;\n+import com.powsybl.psse.model.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.*;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.function.Predicate;\n+import java.util.function.ToDoubleFunction;\n+import java.util.function.ToIntFunction;\n+\n+/**\n+ * @author JB Heyberger <jean-baptiste.heyberger at rte-france.com>\n+ */\n+@AutoService(Importer.class)\n+public class PsseImporter implements Importer {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PsseImporter.class);\n+\n+    private static final String FORMAT = \"PSS/E\";\n+\n+    private static final String EXT = \"raw\"; //TO DO: support both RAW and raw extensions\n+\n+    private static final Parameter IGNORE_BASE_VOLTAGE_PARAMETER = new Parameter(\"ignore-base-voltage\",\n+            ParameterType.BOOLEAN,\n+            \"Ignore base voltage specified in the file\",", "originalCommit": "f60c63f99a38726eae129d62ce038fa0dacef32c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM5NTU4Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436395583", "bodyText": "For testing purposes it might be interesting as results might be expressed in voltage perunit. If not relevant, I suggest to remove it in another PR", "author": "JB-H", "createdAt": "2020-06-07T19:46:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1OTU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5Njg4MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436496881", "bodyText": "Ok", "author": "geofjamg", "createdAt": "2020-06-08T07:13:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1OTU0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MDI0Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436160247", "bodyText": "Maybe for another PR but we should find a more robust way to detect valid raw files.", "author": "geofjamg", "createdAt": "2020-06-05T20:55:49Z", "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/**\n+ * Copyright (c) 2019, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.converter;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.ByteStreams;\n+import com.powsybl.commons.datasource.DataSource;\n+import com.powsybl.commons.datasource.ReadOnlyDataSource;\n+import com.powsybl.iidm.ConversionParameters;\n+import com.powsybl.iidm.import_.Importer;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.util.ContainersMapping;\n+import com.powsybl.iidm.parameters.Parameter;\n+import com.powsybl.iidm.parameters.ParameterDefaultValueConfig;\n+import com.powsybl.iidm.parameters.ParameterType;\n+import com.powsybl.psse.model.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.*;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.function.Predicate;\n+import java.util.function.ToDoubleFunction;\n+import java.util.function.ToIntFunction;\n+\n+/**\n+ * @author JB Heyberger <jean-baptiste.heyberger at rte-france.com>\n+ */\n+@AutoService(Importer.class)\n+public class PsseImporter implements Importer {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PsseImporter.class);\n+\n+    private static final String FORMAT = \"PSS/E\";\n+\n+    private static final String EXT = \"raw\"; //TO DO: support both RAW and raw extensions\n+\n+    private static final Parameter IGNORE_BASE_VOLTAGE_PARAMETER = new Parameter(\"ignore-base-voltage\",\n+            ParameterType.BOOLEAN,\n+            \"Ignore base voltage specified in the file\",\n+            Boolean.TRUE);\n+\n+    private static final double DEFAULT_ACTIVE_POWER_LIMIT = 9999d;\n+\n+    @Override\n+    public String getFormat() {\n+        return FORMAT;\n+    }\n+\n+    @Override\n+    public List<Parameter> getParameters() {\n+        return Collections.singletonList(IGNORE_BASE_VOLTAGE_PARAMETER);\n+    }\n+\n+    @Override\n+    public String getComment() {\n+        return \"PSS/E Format to IIDM converter\";\n+    }\n+\n+    @Override\n+    public boolean exists(ReadOnlyDataSource dataSource) {\n+        try {\n+            if (dataSource.exists(null, EXT)) {\n+                try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, EXT)))) {\n+                    String titleLine = reader.readLine();\n+                    if (titleLine != null) {\n+                        return titleLine.length() >= 38\n+                                && titleLine.charAt(37) == '/';", "originalCommit": "f60c63f99a38726eae129d62ce038fa0dacef32c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM5NTU5OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436395598", "bodyText": "Agreed, need to be more robust.", "author": "JB-H", "createdAt": "2020-06-07T19:46:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MDI0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MDc1Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436160756", "bodyText": "See previous comment about the relevancy of this option with raw data.", "author": "geofjamg", "createdAt": "2020-06-05T20:57:00Z", "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/**\n+ * Copyright (c) 2019, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.converter;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.ByteStreams;\n+import com.powsybl.commons.datasource.DataSource;\n+import com.powsybl.commons.datasource.ReadOnlyDataSource;\n+import com.powsybl.iidm.ConversionParameters;\n+import com.powsybl.iidm.import_.Importer;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.util.ContainersMapping;\n+import com.powsybl.iidm.parameters.Parameter;\n+import com.powsybl.iidm.parameters.ParameterDefaultValueConfig;\n+import com.powsybl.iidm.parameters.ParameterType;\n+import com.powsybl.psse.model.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.*;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.function.Predicate;\n+import java.util.function.ToDoubleFunction;\n+import java.util.function.ToIntFunction;\n+\n+/**\n+ * @author JB Heyberger <jean-baptiste.heyberger at rte-france.com>\n+ */\n+@AutoService(Importer.class)\n+public class PsseImporter implements Importer {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PsseImporter.class);\n+\n+    private static final String FORMAT = \"PSS/E\";\n+\n+    private static final String EXT = \"raw\"; //TO DO: support both RAW and raw extensions\n+\n+    private static final Parameter IGNORE_BASE_VOLTAGE_PARAMETER = new Parameter(\"ignore-base-voltage\",\n+            ParameterType.BOOLEAN,\n+            \"Ignore base voltage specified in the file\",\n+            Boolean.TRUE);\n+\n+    private static final double DEFAULT_ACTIVE_POWER_LIMIT = 9999d;\n+\n+    @Override\n+    public String getFormat() {\n+        return FORMAT;\n+    }\n+\n+    @Override\n+    public List<Parameter> getParameters() {\n+        return Collections.singletonList(IGNORE_BASE_VOLTAGE_PARAMETER);\n+    }\n+\n+    @Override\n+    public String getComment() {\n+        return \"PSS/E Format to IIDM converter\";\n+    }\n+\n+    @Override\n+    public boolean exists(ReadOnlyDataSource dataSource) {\n+        try {\n+            if (dataSource.exists(null, EXT)) {\n+                try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, EXT)))) {\n+                    String titleLine = reader.readLine();\n+                    if (titleLine != null) {\n+                        return titleLine.length() >= 38\n+                                && titleLine.charAt(37) == '/';\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public void copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource) {\n+        Objects.requireNonNull(fromDataSource);\n+        Objects.requireNonNull(toDataSource);\n+        try {\n+            try (InputStream is = fromDataSource.newInputStream(null, EXT);\n+                 OutputStream os = toDataSource.newOutputStream(null, EXT, false)) {\n+                ByteStreams.copy(is, os);\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    private static final class PerUnitContext {\n+\n+        private final double sb; // base apparent power\n+\n+        private final boolean ignoreBaseVoltage;\n+\n+        private PerUnitContext(double sb, boolean ignoreBaseVoltage) {\n+            this.sb = sb;\n+            this.ignoreBaseVoltage = ignoreBaseVoltage;\n+        }\n+\n+        private double getSb() {\n+            return sb;\n+        }\n+\n+        public boolean isIgnoreBaseVoltage() {\n+            return ignoreBaseVoltage;\n+        }\n+    }\n+\n+    private static String getBusId(int busNum) {\n+        return \"B\" + busNum;\n+    }\n+\n+    private static Bus createBus(PsseBus psseBus, VoltageLevel voltageLevel) {\n+        String busId = getBusId(psseBus.getI());\n+        Bus bus = voltageLevel.getBusBreakerView().newBus()\n+                .setId(busId)\n+                .setName(psseBus.getName())\n+                .add();\n+        bus.setV(psseBus.getVm() * voltageLevel.getNominalV())\n+                .setAngle(psseBus.getVa());\n+\n+        return bus;\n+    }\n+\n+    private static Substation createSubstation(Network network, String substationId) {\n+        Substation substation = network.getSubstation(substationId);\n+        if (substation == null) {\n+            substation = network.newSubstation()\n+                    .setId(substationId)\n+                    .add();\n+        }\n+        return substation;\n+    }\n+\n+    private static VoltageLevel createVoltageLevel(PsseBus psseBus, PerUnitContext perUnitContext,\n+                                                   String voltageLevelId, Substation substation, Network network) {\n+        double nominalV = perUnitContext.isIgnoreBaseVoltage() || psseBus.getBaskv() == 0 ? 1 : psseBus.getBaskv();", "originalCommit": "f60c63f99a38726eae129d62ce038fa0dacef32c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM5NTYxMw==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436395613", "bodyText": "If OK , I will check it in a next pull request", "author": "JB-H", "createdAt": "2020-06-07T19:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MDc1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MTAwNQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436161005", "bodyText": "To remove if not used.", "author": "geofjamg", "createdAt": "2020-06-05T20:57:36Z", "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/**\n+ * Copyright (c) 2019, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.converter;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.ByteStreams;\n+import com.powsybl.commons.datasource.DataSource;\n+import com.powsybl.commons.datasource.ReadOnlyDataSource;\n+import com.powsybl.iidm.ConversionParameters;\n+import com.powsybl.iidm.import_.Importer;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.util.ContainersMapping;\n+import com.powsybl.iidm.parameters.Parameter;\n+import com.powsybl.iidm.parameters.ParameterDefaultValueConfig;\n+import com.powsybl.iidm.parameters.ParameterType;\n+import com.powsybl.psse.model.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.*;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.function.Predicate;\n+import java.util.function.ToDoubleFunction;\n+import java.util.function.ToIntFunction;\n+\n+/**\n+ * @author JB Heyberger <jean-baptiste.heyberger at rte-france.com>\n+ */\n+@AutoService(Importer.class)\n+public class PsseImporter implements Importer {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PsseImporter.class);\n+\n+    private static final String FORMAT = \"PSS/E\";\n+\n+    private static final String EXT = \"raw\"; //TO DO: support both RAW and raw extensions\n+\n+    private static final Parameter IGNORE_BASE_VOLTAGE_PARAMETER = new Parameter(\"ignore-base-voltage\",\n+            ParameterType.BOOLEAN,\n+            \"Ignore base voltage specified in the file\",\n+            Boolean.TRUE);\n+\n+    private static final double DEFAULT_ACTIVE_POWER_LIMIT = 9999d;\n+\n+    @Override\n+    public String getFormat() {\n+        return FORMAT;\n+    }\n+\n+    @Override\n+    public List<Parameter> getParameters() {\n+        return Collections.singletonList(IGNORE_BASE_VOLTAGE_PARAMETER);\n+    }\n+\n+    @Override\n+    public String getComment() {\n+        return \"PSS/E Format to IIDM converter\";\n+    }\n+\n+    @Override\n+    public boolean exists(ReadOnlyDataSource dataSource) {\n+        try {\n+            if (dataSource.exists(null, EXT)) {\n+                try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, EXT)))) {\n+                    String titleLine = reader.readLine();\n+                    if (titleLine != null) {\n+                        return titleLine.length() >= 38\n+                                && titleLine.charAt(37) == '/';\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public void copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource) {\n+        Objects.requireNonNull(fromDataSource);\n+        Objects.requireNonNull(toDataSource);\n+        try {\n+            try (InputStream is = fromDataSource.newInputStream(null, EXT);\n+                 OutputStream os = toDataSource.newOutputStream(null, EXT, false)) {\n+                ByteStreams.copy(is, os);\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    private static final class PerUnitContext {\n+\n+        private final double sb; // base apparent power\n+\n+        private final boolean ignoreBaseVoltage;\n+\n+        private PerUnitContext(double sb, boolean ignoreBaseVoltage) {\n+            this.sb = sb;\n+            this.ignoreBaseVoltage = ignoreBaseVoltage;\n+        }\n+\n+        private double getSb() {\n+            return sb;\n+        }\n+\n+        public boolean isIgnoreBaseVoltage() {\n+            return ignoreBaseVoltage;\n+        }\n+    }\n+\n+    private static String getBusId(int busNum) {\n+        return \"B\" + busNum;\n+    }\n+\n+    private static Bus createBus(PsseBus psseBus, VoltageLevel voltageLevel) {\n+        String busId = getBusId(psseBus.getI());\n+        Bus bus = voltageLevel.getBusBreakerView().newBus()\n+                .setId(busId)\n+                .setName(psseBus.getName())\n+                .add();\n+        bus.setV(psseBus.getVm() * voltageLevel.getNominalV())\n+                .setAngle(psseBus.getVa());\n+\n+        return bus;\n+    }\n+\n+    private static Substation createSubstation(Network network, String substationId) {\n+        Substation substation = network.getSubstation(substationId);\n+        if (substation == null) {\n+            substation = network.newSubstation()\n+                    .setId(substationId)\n+                    .add();\n+        }\n+        return substation;\n+    }\n+\n+    private static VoltageLevel createVoltageLevel(PsseBus psseBus, PerUnitContext perUnitContext,\n+                                                   String voltageLevelId, Substation substation, Network network) {\n+        double nominalV = perUnitContext.isIgnoreBaseVoltage() || psseBus.getBaskv() == 0 ? 1 : psseBus.getBaskv();\n+        VoltageLevel voltageLevel = network.getVoltageLevel(voltageLevelId);\n+        if (voltageLevel == null) {\n+            voltageLevel = substation.newVoltageLevel()\n+                    .setId(voltageLevelId)\n+                    .setNominalV(nominalV)\n+                    .setTopologyKind(TopologyKind.BUS_BREAKER)\n+                    .add();\n+        }\n+        return voltageLevel;\n+    }\n+\n+    private static void createLoad(PsseLoad psseLoad, VoltageLevel voltageLevel) {\n+        String busId = getBusId(psseLoad.getI());\n+        voltageLevel.newLoad()\n+                .setId(busId + \"-L\" + psseLoad.getId())\n+                .setConnectableBus(busId)\n+                .setBus(busId)\n+                .setP0(psseLoad.getPl()) //TO DO: take into account Ip, Yp\n+                .setQ0(psseLoad.getQl()) //TO DO: take into account Iq, Yq\n+                .add();\n+\n+    }\n+\n+    private static void createShuntCompensator(PsseFixedShunt psseShunt, PerUnitContext perUnitContext, VoltageLevel voltageLevel) {\n+        String busId = getBusId(psseShunt.getI());\n+        double zb = Math.pow(voltageLevel.getNominalV(), 2) / perUnitContext.getSb();", "originalCommit": "f60c63f99a38726eae129d62ce038fa0dacef32c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM5NTYxNw==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436395617", "bodyText": "OK", "author": "JB-H", "createdAt": "2020-06-07T19:46:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MTAwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MTM2Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436161366", "bodyText": "Are you sure we don't need to handle per unit? bPerSection in IIDM is in S.", "author": "geofjamg", "createdAt": "2020-06-05T20:58:30Z", "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/**\n+ * Copyright (c) 2019, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.converter;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.ByteStreams;\n+import com.powsybl.commons.datasource.DataSource;\n+import com.powsybl.commons.datasource.ReadOnlyDataSource;\n+import com.powsybl.iidm.ConversionParameters;\n+import com.powsybl.iidm.import_.Importer;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.util.ContainersMapping;\n+import com.powsybl.iidm.parameters.Parameter;\n+import com.powsybl.iidm.parameters.ParameterDefaultValueConfig;\n+import com.powsybl.iidm.parameters.ParameterType;\n+import com.powsybl.psse.model.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.*;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.function.Predicate;\n+import java.util.function.ToDoubleFunction;\n+import java.util.function.ToIntFunction;\n+\n+/**\n+ * @author JB Heyberger <jean-baptiste.heyberger at rte-france.com>\n+ */\n+@AutoService(Importer.class)\n+public class PsseImporter implements Importer {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PsseImporter.class);\n+\n+    private static final String FORMAT = \"PSS/E\";\n+\n+    private static final String EXT = \"raw\"; //TO DO: support both RAW and raw extensions\n+\n+    private static final Parameter IGNORE_BASE_VOLTAGE_PARAMETER = new Parameter(\"ignore-base-voltage\",\n+            ParameterType.BOOLEAN,\n+            \"Ignore base voltage specified in the file\",\n+            Boolean.TRUE);\n+\n+    private static final double DEFAULT_ACTIVE_POWER_LIMIT = 9999d;\n+\n+    @Override\n+    public String getFormat() {\n+        return FORMAT;\n+    }\n+\n+    @Override\n+    public List<Parameter> getParameters() {\n+        return Collections.singletonList(IGNORE_BASE_VOLTAGE_PARAMETER);\n+    }\n+\n+    @Override\n+    public String getComment() {\n+        return \"PSS/E Format to IIDM converter\";\n+    }\n+\n+    @Override\n+    public boolean exists(ReadOnlyDataSource dataSource) {\n+        try {\n+            if (dataSource.exists(null, EXT)) {\n+                try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, EXT)))) {\n+                    String titleLine = reader.readLine();\n+                    if (titleLine != null) {\n+                        return titleLine.length() >= 38\n+                                && titleLine.charAt(37) == '/';\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public void copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource) {\n+        Objects.requireNonNull(fromDataSource);\n+        Objects.requireNonNull(toDataSource);\n+        try {\n+            try (InputStream is = fromDataSource.newInputStream(null, EXT);\n+                 OutputStream os = toDataSource.newOutputStream(null, EXT, false)) {\n+                ByteStreams.copy(is, os);\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    private static final class PerUnitContext {\n+\n+        private final double sb; // base apparent power\n+\n+        private final boolean ignoreBaseVoltage;\n+\n+        private PerUnitContext(double sb, boolean ignoreBaseVoltage) {\n+            this.sb = sb;\n+            this.ignoreBaseVoltage = ignoreBaseVoltage;\n+        }\n+\n+        private double getSb() {\n+            return sb;\n+        }\n+\n+        public boolean isIgnoreBaseVoltage() {\n+            return ignoreBaseVoltage;\n+        }\n+    }\n+\n+    private static String getBusId(int busNum) {\n+        return \"B\" + busNum;\n+    }\n+\n+    private static Bus createBus(PsseBus psseBus, VoltageLevel voltageLevel) {\n+        String busId = getBusId(psseBus.getI());\n+        Bus bus = voltageLevel.getBusBreakerView().newBus()\n+                .setId(busId)\n+                .setName(psseBus.getName())\n+                .add();\n+        bus.setV(psseBus.getVm() * voltageLevel.getNominalV())\n+                .setAngle(psseBus.getVa());\n+\n+        return bus;\n+    }\n+\n+    private static Substation createSubstation(Network network, String substationId) {\n+        Substation substation = network.getSubstation(substationId);\n+        if (substation == null) {\n+            substation = network.newSubstation()\n+                    .setId(substationId)\n+                    .add();\n+        }\n+        return substation;\n+    }\n+\n+    private static VoltageLevel createVoltageLevel(PsseBus psseBus, PerUnitContext perUnitContext,\n+                                                   String voltageLevelId, Substation substation, Network network) {\n+        double nominalV = perUnitContext.isIgnoreBaseVoltage() || psseBus.getBaskv() == 0 ? 1 : psseBus.getBaskv();\n+        VoltageLevel voltageLevel = network.getVoltageLevel(voltageLevelId);\n+        if (voltageLevel == null) {\n+            voltageLevel = substation.newVoltageLevel()\n+                    .setId(voltageLevelId)\n+                    .setNominalV(nominalV)\n+                    .setTopologyKind(TopologyKind.BUS_BREAKER)\n+                    .add();\n+        }\n+        return voltageLevel;\n+    }\n+\n+    private static void createLoad(PsseLoad psseLoad, VoltageLevel voltageLevel) {\n+        String busId = getBusId(psseLoad.getI());\n+        voltageLevel.newLoad()\n+                .setId(busId + \"-L\" + psseLoad.getId())\n+                .setConnectableBus(busId)\n+                .setBus(busId)\n+                .setP0(psseLoad.getPl()) //TO DO: take into account Ip, Yp\n+                .setQ0(psseLoad.getQl()) //TO DO: take into account Iq, Yq\n+                .add();\n+\n+    }\n+\n+    private static void createShuntCompensator(PsseFixedShunt psseShunt, PerUnitContext perUnitContext, VoltageLevel voltageLevel) {\n+        String busId = getBusId(psseShunt.getI());\n+        double zb = Math.pow(voltageLevel.getNominalV(), 2) / perUnitContext.getSb();\n+        voltageLevel.newShuntCompensator()\n+                .setId(busId + \"-SH\" + psseShunt.getId())\n+                .setConnectableBus(busId)\n+                .setBus(busId)\n+                .setbPerSection(psseShunt.getBl())//TO DO: take into account gl", "originalCommit": "f60c63f99a38726eae129d62ce038fa0dacef32c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI1MzM2Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436253367", "bodyText": "No otherwise the load flow on the IEEE 14 example converges to a bad state.", "author": "JB-H", "createdAt": "2020-06-06T09:17:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MTM2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI1MzQwOA==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436253408", "bodyText": "the IEEE 14 does contain a shunt, so this has been tested", "author": "JB-H", "createdAt": "2020-06-06T09:18:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MTM2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2NDAyMA==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436164020", "bodyText": "I would pass the network and containerMapping to createShuntCompensator and get the voltage level inside.", "author": "geofjamg", "createdAt": "2020-06-05T21:05:27Z", "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/**\n+ * Copyright (c) 2019, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.converter;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.ByteStreams;\n+import com.powsybl.commons.datasource.DataSource;\n+import com.powsybl.commons.datasource.ReadOnlyDataSource;\n+import com.powsybl.iidm.ConversionParameters;\n+import com.powsybl.iidm.import_.Importer;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.util.ContainersMapping;\n+import com.powsybl.iidm.parameters.Parameter;\n+import com.powsybl.iidm.parameters.ParameterDefaultValueConfig;\n+import com.powsybl.iidm.parameters.ParameterType;\n+import com.powsybl.psse.model.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.*;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.function.Predicate;\n+import java.util.function.ToDoubleFunction;\n+import java.util.function.ToIntFunction;\n+\n+/**\n+ * @author JB Heyberger <jean-baptiste.heyberger at rte-france.com>\n+ */\n+@AutoService(Importer.class)\n+public class PsseImporter implements Importer {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PsseImporter.class);\n+\n+    private static final String FORMAT = \"PSS/E\";\n+\n+    private static final String EXT = \"raw\"; //TO DO: support both RAW and raw extensions\n+\n+    private static final Parameter IGNORE_BASE_VOLTAGE_PARAMETER = new Parameter(\"ignore-base-voltage\",\n+            ParameterType.BOOLEAN,\n+            \"Ignore base voltage specified in the file\",\n+            Boolean.TRUE);\n+\n+    private static final double DEFAULT_ACTIVE_POWER_LIMIT = 9999d;\n+\n+    @Override\n+    public String getFormat() {\n+        return FORMAT;\n+    }\n+\n+    @Override\n+    public List<Parameter> getParameters() {\n+        return Collections.singletonList(IGNORE_BASE_VOLTAGE_PARAMETER);\n+    }\n+\n+    @Override\n+    public String getComment() {\n+        return \"PSS/E Format to IIDM converter\";\n+    }\n+\n+    @Override\n+    public boolean exists(ReadOnlyDataSource dataSource) {\n+        try {\n+            if (dataSource.exists(null, EXT)) {\n+                try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, EXT)))) {\n+                    String titleLine = reader.readLine();\n+                    if (titleLine != null) {\n+                        return titleLine.length() >= 38\n+                                && titleLine.charAt(37) == '/';\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public void copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource) {\n+        Objects.requireNonNull(fromDataSource);\n+        Objects.requireNonNull(toDataSource);\n+        try {\n+            try (InputStream is = fromDataSource.newInputStream(null, EXT);\n+                 OutputStream os = toDataSource.newOutputStream(null, EXT, false)) {\n+                ByteStreams.copy(is, os);\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    private static final class PerUnitContext {\n+\n+        private final double sb; // base apparent power\n+\n+        private final boolean ignoreBaseVoltage;\n+\n+        private PerUnitContext(double sb, boolean ignoreBaseVoltage) {\n+            this.sb = sb;\n+            this.ignoreBaseVoltage = ignoreBaseVoltage;\n+        }\n+\n+        private double getSb() {\n+            return sb;\n+        }\n+\n+        public boolean isIgnoreBaseVoltage() {\n+            return ignoreBaseVoltage;\n+        }\n+    }\n+\n+    private static String getBusId(int busNum) {\n+        return \"B\" + busNum;\n+    }\n+\n+    private static Bus createBus(PsseBus psseBus, VoltageLevel voltageLevel) {\n+        String busId = getBusId(psseBus.getI());\n+        Bus bus = voltageLevel.getBusBreakerView().newBus()\n+                .setId(busId)\n+                .setName(psseBus.getName())\n+                .add();\n+        bus.setV(psseBus.getVm() * voltageLevel.getNominalV())\n+                .setAngle(psseBus.getVa());\n+\n+        return bus;\n+    }\n+\n+    private static Substation createSubstation(Network network, String substationId) {\n+        Substation substation = network.getSubstation(substationId);\n+        if (substation == null) {\n+            substation = network.newSubstation()\n+                    .setId(substationId)\n+                    .add();\n+        }\n+        return substation;\n+    }\n+\n+    private static VoltageLevel createVoltageLevel(PsseBus psseBus, PerUnitContext perUnitContext,\n+                                                   String voltageLevelId, Substation substation, Network network) {\n+        double nominalV = perUnitContext.isIgnoreBaseVoltage() || psseBus.getBaskv() == 0 ? 1 : psseBus.getBaskv();\n+        VoltageLevel voltageLevel = network.getVoltageLevel(voltageLevelId);\n+        if (voltageLevel == null) {\n+            voltageLevel = substation.newVoltageLevel()\n+                    .setId(voltageLevelId)\n+                    .setNominalV(nominalV)\n+                    .setTopologyKind(TopologyKind.BUS_BREAKER)\n+                    .add();\n+        }\n+        return voltageLevel;\n+    }\n+\n+    private static void createLoad(PsseLoad psseLoad, VoltageLevel voltageLevel) {\n+        String busId = getBusId(psseLoad.getI());\n+        voltageLevel.newLoad()\n+                .setId(busId + \"-L\" + psseLoad.getId())\n+                .setConnectableBus(busId)\n+                .setBus(busId)\n+                .setP0(psseLoad.getPl()) //TO DO: take into account Ip, Yp\n+                .setQ0(psseLoad.getQl()) //TO DO: take into account Iq, Yq\n+                .add();\n+\n+    }\n+\n+    private static void createShuntCompensator(PsseFixedShunt psseShunt, PerUnitContext perUnitContext, VoltageLevel voltageLevel) {\n+        String busId = getBusId(psseShunt.getI());\n+        double zb = Math.pow(voltageLevel.getNominalV(), 2) / perUnitContext.getSb();\n+        voltageLevel.newShuntCompensator()\n+                .setId(busId + \"-SH\" + psseShunt.getId())\n+                .setConnectableBus(busId)\n+                .setBus(busId)\n+                .setbPerSection(psseShunt.getBl())//TO DO: take into account gl\n+                .setCurrentSectionCount(1)\n+                .setMaximumSectionCount(1)\n+                .add();\n+\n+        if (psseShunt.getGl() != 0) {\n+            LOGGER.warn(\"Shunt Gl not supported ({})\", psseShunt.getI());\n+        }\n+    }\n+\n+    private static void createGenerator(PsseGenerator psseGen, VoltageLevel voltageLevel) {\n+        String busId = getBusId(psseGen.getI());\n+        Generator generator =  voltageLevel.newGenerator()\n+                .setId(busId + \"-G\" + psseGen.getId())\n+                .setConnectableBus(busId)\n+                .setBus(busId)\n+                .setTargetP(psseGen.getPg())\n+                .setMaxP(DEFAULT_ACTIVE_POWER_LIMIT)\n+                .setMinP(-DEFAULT_ACTIVE_POWER_LIMIT)\n+                .setVoltageRegulatorOn(false)\n+                .setTargetQ(psseGen.getQg())\n+                .add();\n+\n+        if (psseGen.getVs() > 0) {\n+            if (psseGen.getIreg() == 0) {\n+                //PV group\n+                generator.setTargetV(psseGen.getVs() * voltageLevel.getNominalV());\n+                generator.setVoltageRegulatorOn(true);\n+            } else {\n+                //TO DO : implement remote voltage control regulation\n+                LOGGER.warn(\"Remote Voltage control not supported ({})\", generator.getId());\n+            }\n+        }\n+        //TO DO: take into account zr zx Mbase...\n+    }\n+\n+    private static void createBuses(PsseRawModel psseModel, ContainersMapping containerMapping, PerUnitContext perUnitContext,\n+                                    Network network) {\n+        for (PsseBus psseBus : psseModel.getBuses()) {\n+            String voltageLevelId = containerMapping.getVoltageLevelId(psseBus.getI());\n+            String substationId = containerMapping.getSubstationId(voltageLevelId);\n+\n+            // create substation\n+            Substation substation = createSubstation(network, substationId);\n+\n+            // create voltage level\n+            VoltageLevel voltageLevel = createVoltageLevel(psseBus, perUnitContext, voltageLevelId, substation, network);\n+\n+            // create bus\n+            createBus(psseBus, voltageLevel);\n+\n+        }\n+    }\n+\n+    private static void createLine(PsseNonTransformerBranch psseLine, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network) {\n+        String id = \"L-\" + psseLine.getI() + \"-\" + psseLine.getJ() + \"-\" + psseLine.getCkt();\n+        String bus1Id = getBusId(psseLine.getI());\n+        String bus2Id = getBusId(psseLine.getJ());\n+        String voltageLevel1Id = containerMapping.getVoltageLevelId(psseLine.getI());\n+        String voltageLevel2Id = containerMapping.getVoltageLevelId(psseLine.getJ());\n+        VoltageLevel voltageLevel2 = network.getVoltageLevel(voltageLevel2Id);\n+        double zb = Math.pow(voltageLevel2.getNominalV(), 2) / perUnitContext.getSb();\n+        network.newLine()\n+                .setId(id)\n+                .setBus1(bus1Id)\n+                .setConnectableBus1(bus1Id)\n+                .setVoltageLevel1(voltageLevel1Id)\n+                .setBus2(bus2Id)\n+                .setConnectableBus2(bus2Id)\n+                .setVoltageLevel2(voltageLevel2Id)\n+                .setR(psseLine.getR() * zb)\n+                .setX(psseLine.getX() * zb)\n+                .setG1(0) //TO DO\n+                .setB1(psseLine.getB() / zb / 2)\n+                .setG2(0) //TO DO\n+                .setB2(psseLine.getB() / zb / 2)\n+                .add();\n+\n+        if (psseLine.getGi() != 0 || psseLine.getGj() != 0) {\n+            LOGGER.warn(\"Branch G not supported ({})\", psseLine.getI());\n+        }\n+    }\n+\n+    private static void createTransformer(PsseTransformer psseTfo, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network) {\n+        String id = \"T-\" + psseTfo.getFirstRecord().getI() + \"-\" + psseTfo.getFirstRecord().getJ() + \"-\" + psseTfo.getFirstRecord().getCkt();\n+        String bus1Id = getBusId(psseTfo.getFirstRecord().getI());\n+        String bus2Id = getBusId(psseTfo.getFirstRecord().getJ());\n+        String voltageLevel1Id = containerMapping.getVoltageLevelId(psseTfo.getFirstRecord().getI());\n+        String voltageLevel2Id = containerMapping.getVoltageLevelId(psseTfo.getFirstRecord().getJ());\n+        VoltageLevel voltageLevel1 = network.getVoltageLevel(voltageLevel1Id);\n+        VoltageLevel voltageLevel2 = network.getVoltageLevel(voltageLevel2Id);\n+        double zb = Math.pow(voltageLevel2.getNominalV(), 2) / perUnitContext.getSb();\n+\n+        if (psseTfo.getFirstRecord().getNmetr() == 2) {\n+            voltageLevel2.getSubstation().newTwoWindingsTransformer()\n+                    .setId(id)\n+                    .setBus1(bus1Id)\n+                    .setConnectableBus1(bus1Id)\n+                    .setVoltageLevel1(voltageLevel1Id)\n+                    .setBus2(bus2Id)\n+                    .setConnectableBus2(bus2Id)\n+                    .setVoltageLevel2(voltageLevel2Id)\n+                    .setRatedU1(voltageLevel1.getNominalV() * psseTfo.getThirdRecord1().getWindv())\n+                    .setRatedU2(voltageLevel2.getNominalV())\n+                    .setR(psseTfo.getSecondRecord().getR12() * zb)\n+                    .setX(psseTfo.getSecondRecord().getX12() * zb)\n+                    .setG(0) //TO DO\n+                    .setB(0) //TO DO\n+                    .add();\n+\n+        } else {\n+            LOGGER.warn(\"Non-2-windings transformers not supported ({})\", id);\n+        }\n+    }\n+\n+    @Override\n+    public Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters) {\n+        Objects.requireNonNull(dataSource);\n+        Objects.requireNonNull(networkFactory);\n+\n+        Network network = networkFactory.createNetwork(dataSource.getBaseName(), FORMAT);\n+\n+        try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, EXT)))) {\n+\n+            // parse file\n+            PsseRawModel psseModel = new PsseRawReader().read(reader);\n+\n+            // set date and time\n+            // TO DO\n+\n+            // build container to fit IIDM requirements\n+            List<Object> branches = ImmutableList.builder()\n+                    .addAll(psseModel.getNonTransformerBranches())\n+                    .addAll(psseModel.getTransformers())\n+                    .build();\n+            ToIntFunction<Object> branchToNum1 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getI() : ((PsseTransformer) branch).getFirstRecord().getI();\n+            ToIntFunction<Object> branchToNum2 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getJ() : ((PsseTransformer) branch).getFirstRecord().getJ();\n+            ToDoubleFunction<Object> branchToResistance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getR() : ((PsseTransformer) branch).getSecondRecord().getR12();\n+            ToDoubleFunction<Object> branchToReactance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getX() : ((PsseTransformer) branch).getSecondRecord().getX12();\n+            Predicate<Object> branchToIsTransformer = branch -> branch instanceof PsseTransformer;\n+            ContainersMapping containerMapping = ContainersMapping.create(psseModel.getBuses(), branches, PsseBus::getI, branchToNum1,\n+                                                                          branchToNum2, branchToResistance, branchToReactance, branchToIsTransformer);\n+\n+            boolean ignoreBaseVoltage = ConversionParameters.readBooleanParameter(FORMAT, parameters, IGNORE_BASE_VOLTAGE_PARAMETER,\n+                    ParameterDefaultValueConfig.INSTANCE);\n+            PerUnitContext perUnitContext = new PerUnitContext(psseModel.getCaseIdentification().getSbase(), ignoreBaseVoltage);\n+\n+            // create buses\n+            createBuses(psseModel, containerMapping, perUnitContext, network);\n+\n+            //Create loads\n+            for (PsseLoad psseLoad : psseModel.getLoads()) {\n+                createLoad(psseLoad, network.getVoltageLevel(containerMapping.getVoltageLevelId(psseLoad.getI())));\n+            }\n+\n+            //Create shunts\n+            for (PsseFixedShunt psseShunt : psseModel.getFixedShunts()) {\n+                createShuntCompensator(psseShunt, perUnitContext, network.getVoltageLevel(containerMapping.getVoltageLevelId(psseShunt.getI())));", "originalCommit": "f60c63f99a38726eae129d62ce038fa0dacef32c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2NDA3MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436164070", "bodyText": "Same", "author": "geofjamg", "createdAt": "2020-06-05T21:05:35Z", "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/**\n+ * Copyright (c) 2019, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.converter;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.ByteStreams;\n+import com.powsybl.commons.datasource.DataSource;\n+import com.powsybl.commons.datasource.ReadOnlyDataSource;\n+import com.powsybl.iidm.ConversionParameters;\n+import com.powsybl.iidm.import_.Importer;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.util.ContainersMapping;\n+import com.powsybl.iidm.parameters.Parameter;\n+import com.powsybl.iidm.parameters.ParameterDefaultValueConfig;\n+import com.powsybl.iidm.parameters.ParameterType;\n+import com.powsybl.psse.model.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.*;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.function.Predicate;\n+import java.util.function.ToDoubleFunction;\n+import java.util.function.ToIntFunction;\n+\n+/**\n+ * @author JB Heyberger <jean-baptiste.heyberger at rte-france.com>\n+ */\n+@AutoService(Importer.class)\n+public class PsseImporter implements Importer {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PsseImporter.class);\n+\n+    private static final String FORMAT = \"PSS/E\";\n+\n+    private static final String EXT = \"raw\"; //TO DO: support both RAW and raw extensions\n+\n+    private static final Parameter IGNORE_BASE_VOLTAGE_PARAMETER = new Parameter(\"ignore-base-voltage\",\n+            ParameterType.BOOLEAN,\n+            \"Ignore base voltage specified in the file\",\n+            Boolean.TRUE);\n+\n+    private static final double DEFAULT_ACTIVE_POWER_LIMIT = 9999d;\n+\n+    @Override\n+    public String getFormat() {\n+        return FORMAT;\n+    }\n+\n+    @Override\n+    public List<Parameter> getParameters() {\n+        return Collections.singletonList(IGNORE_BASE_VOLTAGE_PARAMETER);\n+    }\n+\n+    @Override\n+    public String getComment() {\n+        return \"PSS/E Format to IIDM converter\";\n+    }\n+\n+    @Override\n+    public boolean exists(ReadOnlyDataSource dataSource) {\n+        try {\n+            if (dataSource.exists(null, EXT)) {\n+                try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, EXT)))) {\n+                    String titleLine = reader.readLine();\n+                    if (titleLine != null) {\n+                        return titleLine.length() >= 38\n+                                && titleLine.charAt(37) == '/';\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public void copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource) {\n+        Objects.requireNonNull(fromDataSource);\n+        Objects.requireNonNull(toDataSource);\n+        try {\n+            try (InputStream is = fromDataSource.newInputStream(null, EXT);\n+                 OutputStream os = toDataSource.newOutputStream(null, EXT, false)) {\n+                ByteStreams.copy(is, os);\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    private static final class PerUnitContext {\n+\n+        private final double sb; // base apparent power\n+\n+        private final boolean ignoreBaseVoltage;\n+\n+        private PerUnitContext(double sb, boolean ignoreBaseVoltage) {\n+            this.sb = sb;\n+            this.ignoreBaseVoltage = ignoreBaseVoltage;\n+        }\n+\n+        private double getSb() {\n+            return sb;\n+        }\n+\n+        public boolean isIgnoreBaseVoltage() {\n+            return ignoreBaseVoltage;\n+        }\n+    }\n+\n+    private static String getBusId(int busNum) {\n+        return \"B\" + busNum;\n+    }\n+\n+    private static Bus createBus(PsseBus psseBus, VoltageLevel voltageLevel) {\n+        String busId = getBusId(psseBus.getI());\n+        Bus bus = voltageLevel.getBusBreakerView().newBus()\n+                .setId(busId)\n+                .setName(psseBus.getName())\n+                .add();\n+        bus.setV(psseBus.getVm() * voltageLevel.getNominalV())\n+                .setAngle(psseBus.getVa());\n+\n+        return bus;\n+    }\n+\n+    private static Substation createSubstation(Network network, String substationId) {\n+        Substation substation = network.getSubstation(substationId);\n+        if (substation == null) {\n+            substation = network.newSubstation()\n+                    .setId(substationId)\n+                    .add();\n+        }\n+        return substation;\n+    }\n+\n+    private static VoltageLevel createVoltageLevel(PsseBus psseBus, PerUnitContext perUnitContext,\n+                                                   String voltageLevelId, Substation substation, Network network) {\n+        double nominalV = perUnitContext.isIgnoreBaseVoltage() || psseBus.getBaskv() == 0 ? 1 : psseBus.getBaskv();\n+        VoltageLevel voltageLevel = network.getVoltageLevel(voltageLevelId);\n+        if (voltageLevel == null) {\n+            voltageLevel = substation.newVoltageLevel()\n+                    .setId(voltageLevelId)\n+                    .setNominalV(nominalV)\n+                    .setTopologyKind(TopologyKind.BUS_BREAKER)\n+                    .add();\n+        }\n+        return voltageLevel;\n+    }\n+\n+    private static void createLoad(PsseLoad psseLoad, VoltageLevel voltageLevel) {\n+        String busId = getBusId(psseLoad.getI());\n+        voltageLevel.newLoad()\n+                .setId(busId + \"-L\" + psseLoad.getId())\n+                .setConnectableBus(busId)\n+                .setBus(busId)\n+                .setP0(psseLoad.getPl()) //TO DO: take into account Ip, Yp\n+                .setQ0(psseLoad.getQl()) //TO DO: take into account Iq, Yq\n+                .add();\n+\n+    }\n+\n+    private static void createShuntCompensator(PsseFixedShunt psseShunt, PerUnitContext perUnitContext, VoltageLevel voltageLevel) {\n+        String busId = getBusId(psseShunt.getI());\n+        double zb = Math.pow(voltageLevel.getNominalV(), 2) / perUnitContext.getSb();\n+        voltageLevel.newShuntCompensator()\n+                .setId(busId + \"-SH\" + psseShunt.getId())\n+                .setConnectableBus(busId)\n+                .setBus(busId)\n+                .setbPerSection(psseShunt.getBl())//TO DO: take into account gl\n+                .setCurrentSectionCount(1)\n+                .setMaximumSectionCount(1)\n+                .add();\n+\n+        if (psseShunt.getGl() != 0) {\n+            LOGGER.warn(\"Shunt Gl not supported ({})\", psseShunt.getI());\n+        }\n+    }\n+\n+    private static void createGenerator(PsseGenerator psseGen, VoltageLevel voltageLevel) {\n+        String busId = getBusId(psseGen.getI());\n+        Generator generator =  voltageLevel.newGenerator()\n+                .setId(busId + \"-G\" + psseGen.getId())\n+                .setConnectableBus(busId)\n+                .setBus(busId)\n+                .setTargetP(psseGen.getPg())\n+                .setMaxP(DEFAULT_ACTIVE_POWER_LIMIT)\n+                .setMinP(-DEFAULT_ACTIVE_POWER_LIMIT)\n+                .setVoltageRegulatorOn(false)\n+                .setTargetQ(psseGen.getQg())\n+                .add();\n+\n+        if (psseGen.getVs() > 0) {\n+            if (psseGen.getIreg() == 0) {\n+                //PV group\n+                generator.setTargetV(psseGen.getVs() * voltageLevel.getNominalV());\n+                generator.setVoltageRegulatorOn(true);\n+            } else {\n+                //TO DO : implement remote voltage control regulation\n+                LOGGER.warn(\"Remote Voltage control not supported ({})\", generator.getId());\n+            }\n+        }\n+        //TO DO: take into account zr zx Mbase...\n+    }\n+\n+    private static void createBuses(PsseRawModel psseModel, ContainersMapping containerMapping, PerUnitContext perUnitContext,\n+                                    Network network) {\n+        for (PsseBus psseBus : psseModel.getBuses()) {\n+            String voltageLevelId = containerMapping.getVoltageLevelId(psseBus.getI());\n+            String substationId = containerMapping.getSubstationId(voltageLevelId);\n+\n+            // create substation\n+            Substation substation = createSubstation(network, substationId);\n+\n+            // create voltage level\n+            VoltageLevel voltageLevel = createVoltageLevel(psseBus, perUnitContext, voltageLevelId, substation, network);\n+\n+            // create bus\n+            createBus(psseBus, voltageLevel);\n+\n+        }\n+    }\n+\n+    private static void createLine(PsseNonTransformerBranch psseLine, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network) {\n+        String id = \"L-\" + psseLine.getI() + \"-\" + psseLine.getJ() + \"-\" + psseLine.getCkt();\n+        String bus1Id = getBusId(psseLine.getI());\n+        String bus2Id = getBusId(psseLine.getJ());\n+        String voltageLevel1Id = containerMapping.getVoltageLevelId(psseLine.getI());\n+        String voltageLevel2Id = containerMapping.getVoltageLevelId(psseLine.getJ());\n+        VoltageLevel voltageLevel2 = network.getVoltageLevel(voltageLevel2Id);\n+        double zb = Math.pow(voltageLevel2.getNominalV(), 2) / perUnitContext.getSb();\n+        network.newLine()\n+                .setId(id)\n+                .setBus1(bus1Id)\n+                .setConnectableBus1(bus1Id)\n+                .setVoltageLevel1(voltageLevel1Id)\n+                .setBus2(bus2Id)\n+                .setConnectableBus2(bus2Id)\n+                .setVoltageLevel2(voltageLevel2Id)\n+                .setR(psseLine.getR() * zb)\n+                .setX(psseLine.getX() * zb)\n+                .setG1(0) //TO DO\n+                .setB1(psseLine.getB() / zb / 2)\n+                .setG2(0) //TO DO\n+                .setB2(psseLine.getB() / zb / 2)\n+                .add();\n+\n+        if (psseLine.getGi() != 0 || psseLine.getGj() != 0) {\n+            LOGGER.warn(\"Branch G not supported ({})\", psseLine.getI());\n+        }\n+    }\n+\n+    private static void createTransformer(PsseTransformer psseTfo, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network) {\n+        String id = \"T-\" + psseTfo.getFirstRecord().getI() + \"-\" + psseTfo.getFirstRecord().getJ() + \"-\" + psseTfo.getFirstRecord().getCkt();\n+        String bus1Id = getBusId(psseTfo.getFirstRecord().getI());\n+        String bus2Id = getBusId(psseTfo.getFirstRecord().getJ());\n+        String voltageLevel1Id = containerMapping.getVoltageLevelId(psseTfo.getFirstRecord().getI());\n+        String voltageLevel2Id = containerMapping.getVoltageLevelId(psseTfo.getFirstRecord().getJ());\n+        VoltageLevel voltageLevel1 = network.getVoltageLevel(voltageLevel1Id);\n+        VoltageLevel voltageLevel2 = network.getVoltageLevel(voltageLevel2Id);\n+        double zb = Math.pow(voltageLevel2.getNominalV(), 2) / perUnitContext.getSb();\n+\n+        if (psseTfo.getFirstRecord().getNmetr() == 2) {\n+            voltageLevel2.getSubstation().newTwoWindingsTransformer()\n+                    .setId(id)\n+                    .setBus1(bus1Id)\n+                    .setConnectableBus1(bus1Id)\n+                    .setVoltageLevel1(voltageLevel1Id)\n+                    .setBus2(bus2Id)\n+                    .setConnectableBus2(bus2Id)\n+                    .setVoltageLevel2(voltageLevel2Id)\n+                    .setRatedU1(voltageLevel1.getNominalV() * psseTfo.getThirdRecord1().getWindv())\n+                    .setRatedU2(voltageLevel2.getNominalV())\n+                    .setR(psseTfo.getSecondRecord().getR12() * zb)\n+                    .setX(psseTfo.getSecondRecord().getX12() * zb)\n+                    .setG(0) //TO DO\n+                    .setB(0) //TO DO\n+                    .add();\n+\n+        } else {\n+            LOGGER.warn(\"Non-2-windings transformers not supported ({})\", id);\n+        }\n+    }\n+\n+    @Override\n+    public Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters) {\n+        Objects.requireNonNull(dataSource);\n+        Objects.requireNonNull(networkFactory);\n+\n+        Network network = networkFactory.createNetwork(dataSource.getBaseName(), FORMAT);\n+\n+        try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, EXT)))) {\n+\n+            // parse file\n+            PsseRawModel psseModel = new PsseRawReader().read(reader);\n+\n+            // set date and time\n+            // TO DO\n+\n+            // build container to fit IIDM requirements\n+            List<Object> branches = ImmutableList.builder()\n+                    .addAll(psseModel.getNonTransformerBranches())\n+                    .addAll(psseModel.getTransformers())\n+                    .build();\n+            ToIntFunction<Object> branchToNum1 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getI() : ((PsseTransformer) branch).getFirstRecord().getI();\n+            ToIntFunction<Object> branchToNum2 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getJ() : ((PsseTransformer) branch).getFirstRecord().getJ();\n+            ToDoubleFunction<Object> branchToResistance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getR() : ((PsseTransformer) branch).getSecondRecord().getR12();\n+            ToDoubleFunction<Object> branchToReactance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getX() : ((PsseTransformer) branch).getSecondRecord().getX12();\n+            Predicate<Object> branchToIsTransformer = branch -> branch instanceof PsseTransformer;\n+            ContainersMapping containerMapping = ContainersMapping.create(psseModel.getBuses(), branches, PsseBus::getI, branchToNum1,\n+                                                                          branchToNum2, branchToResistance, branchToReactance, branchToIsTransformer);\n+\n+            boolean ignoreBaseVoltage = ConversionParameters.readBooleanParameter(FORMAT, parameters, IGNORE_BASE_VOLTAGE_PARAMETER,\n+                    ParameterDefaultValueConfig.INSTANCE);\n+            PerUnitContext perUnitContext = new PerUnitContext(psseModel.getCaseIdentification().getSbase(), ignoreBaseVoltage);\n+\n+            // create buses\n+            createBuses(psseModel, containerMapping, perUnitContext, network);\n+\n+            //Create loads\n+            for (PsseLoad psseLoad : psseModel.getLoads()) {\n+                createLoad(psseLoad, network.getVoltageLevel(containerMapping.getVoltageLevelId(psseLoad.getI())));\n+            }\n+\n+            //Create shunts\n+            for (PsseFixedShunt psseShunt : psseModel.getFixedShunts()) {\n+                createShuntCompensator(psseShunt, perUnitContext, network.getVoltageLevel(containerMapping.getVoltageLevelId(psseShunt.getI())));\n+            }\n+\n+            for (PsseGenerator psseGen : psseModel.getGenerators()) {\n+                createGenerator(psseGen, network.getVoltageLevel(containerMapping.getVoltageLevelId(psseGen.getI())));", "originalCommit": "f60c63f99a38726eae129d62ce038fa0dacef32c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2NDc5Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436164797", "bodyText": "Licence header should be before the package declaration\nyear is wrong", "author": "geofjamg", "createdAt": "2020-06-05T21:07:39Z", "path": "psse/psse-converter/src/test/java/com/powsybl/psse/converter/PsseImporterTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.powsybl.psse.converter;\n+\n+/**\n+ * Copyright (c) 2019, RTE (http://www.rte-france.com)", "originalCommit": "f60c63f99a38726eae129d62ce038fa0dacef32c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM5NjM1Mg==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436396352", "bodyText": "ok", "author": "JB-H", "createdAt": "2020-06-07T19:55:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2NDc5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2NTEzOQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1338#discussion_r436165139", "bodyText": "Like in IEEE importer you should export the imported network to xiidm and then compare to a reference xiidm stored in resources.", "author": "geofjamg", "createdAt": "2020-06-05T21:08:46Z", "path": "psse/psse-converter/src/test/java/com/powsybl/psse/converter/PsseImporterTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.powsybl.psse.converter;\n+\n+/**\n+ * Copyright (c) 2019, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.powsybl.commons.datasource.ReadOnlyDataSource;\n+import org.junit.Test;\n+\n+import com.powsybl.commons.AbstractConverterTest;\n+import com.powsybl.commons.datasource.ResourceDataSource;\n+import com.powsybl.commons.datasource.ResourceSet;\n+import com.powsybl.iidm.import_.Importer;\n+import com.powsybl.iidm.network.*;\n+\n+/**\n+ * @author JB Heyberger <jean-baptiste.heyberger at rte-france.com>\n+ */\n+public class PsseImporterTest extends AbstractConverterTest {\n+\n+    @Test\n+    public void baseTest() {\n+        Importer importer = new PsseImporter();\n+        assertEquals(\"PSS/E\", importer.getFormat());\n+        assertEquals(\"PSS/E Format to IIDM converter\", importer.getComment());\n+        assertEquals(1, importer.getParameters().size());\n+        assertEquals(\"ignore-base-voltage\", importer.getParameters().get(0).getName());\n+    }\n+\n+    @Test\n+    public void importTest() {\n+        ReadOnlyDataSource dataSource = new ResourceDataSource(\"IEEE_14_bus\", new ResourceSet(\"/\", \"IEEE_14_bus.raw\"));\n+        Network network = new PsseImporter().importData(dataSource, null);\n+        assertEquals(\"IEEE_14_bus\", network.getId());", "originalCommit": "f60c63f99a38726eae129d62ce038fa0dacef32c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "af48e3abd59ec72d8772fc9d0c27c12378d59b04", "url": "https://github.com/powsybl/powsybl-core/commit/af48e3abd59ec72d8772fc9d0c27c12378d59b04", "message": "Merge branch 'master' into psse-converter", "committedDate": "2020-06-05T21:09:44Z", "type": "commit"}, {"oid": "f894b72ff88e3df3888a0f1aff7751b6c37763e2", "url": "https://github.com/powsybl/powsybl-core/commit/f894b72ff88e3df3888a0f1aff7751b6c37763e2", "message": "Merge branch 'master' into psse-converter\n\n# Conflicts:\n#\tieee-cdf/ieee-cdf-converter/src/main/java/com/powsybl/ieeecdf/converter/IeeeCdfImporter.java\n#\tiidm/iidm-util/src/main/java/com/powsybl/iidm/network/util/ContainersMapping.java", "committedDate": "2020-06-07T20:16:55Z", "type": "commit"}, {"oid": "f28ff2cf1e0d7a3d86cca9b3836fd294ac252836", "url": "https://github.com/powsybl/powsybl-core/commit/f28ff2cf1e0d7a3d86cca9b3836fd294ac252836", "message": "Merge ContainersMapping\n\nSigned-off-by: Geoffroy Jamgotchian <geoffroy.jamgotchian@rte-france.com>", "committedDate": "2020-06-07T20:21:58Z", "type": "commit"}, {"oid": "9ae4d7d42488a6f7d0db068b3d85daa66c281c8f", "url": "https://github.com/powsybl/powsybl-core/commit/9ae4d7d42488a6f7d0db068b3d85daa66c281c8f", "message": "Merge remote-tracking branch 'origin/psse-converter' into psse-converter", "committedDate": "2020-06-07T20:22:19Z", "type": "commit"}, {"oid": "e1451ee2acff587e99c99a949f074eaac26a9203", "url": "https://github.com/powsybl/powsybl-core/commit/e1451ee2acff587e99c99a949f074eaac26a9203", "message": "new version of psse-converter after feedbacks from code reviewer", "committedDate": "2020-06-07T22:51:44Z", "type": "commit"}, {"oid": "90b767ceca44478d29d7ee8cdea5a4d08685f37f", "url": "https://github.com/powsybl/powsybl-core/commit/90b767ceca44478d29d7ee8cdea5a4d08685f37f", "message": "Fix code coverage and raw file test duplication\n\nSigned-off-by: Geoffroy Jamgotchian <geoffroy.jamgotchian@rte-france.com>", "committedDate": "2020-06-08T07:10:39Z", "type": "commit"}, {"oid": "4bbc397f168db9c30c9db645d151eb3cbb9d719c", "url": "https://github.com/powsybl/powsybl-core/commit/4bbc397f168db9c30c9db645d151eb3cbb9d719c", "message": "Merge branch 'master' into psse-converter", "committedDate": "2020-06-08T07:28:51Z", "type": "commit"}, {"oid": "480d8144132ab4211caa10d0198b36e6d0a406bf", "url": "https://github.com/powsybl/powsybl-core/commit/480d8144132ab4211caa10d0198b36e6d0a406bf", "message": "Merge branch 'master' into psse-converter", "committedDate": "2020-06-08T20:04:21Z", "type": "commit"}]}