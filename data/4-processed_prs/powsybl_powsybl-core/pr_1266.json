{"pr_number": 1266, "pr_title": "[PERF] Context logs : postpone String building and check log level", "pr_createdAt": "2020-04-08T07:27:40Z", "pr_url": "https://github.com/powsybl/powsybl-core/pull/1266", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM0OTczNQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405349735", "bodyText": "In that specific case, a simple concatenation should be more efficient. What do you think?", "author": "mathbagu", "createdAt": "2020-04-08T08:31:24Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java", "diffHunk": "@@ -336,8 +337,8 @@ private void newConvertTransformers(Context context) {\n             } else if (ends.size() == 3) {\n                 c = new NewThreeWindingsTransformerConversion(ends, context);\n             } else {\n-                String what = String.format(\"PowerTransformer %s\", t);\n-                String reason = String.format(\"Has %d ends. Only 2 or 3 ends are supported\", ends.size());\n+                Supplier<String> what = () -> String.format(\"PowerTransformer %s\", t);", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM0OTgzMw==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405349833", "bodyText": "Same question here", "author": "mathbagu", "createdAt": "2020-04-08T08:31:35Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java", "diffHunk": "@@ -365,8 +366,8 @@ private void convertTransformers(Context context) {\n                     } else if (ends.size() == 3) {\n                         c = new ThreeWindingsTransformerConversion(ends, context);\n                     } else {\n-                        String what = String.format(\"PowerTransformer %s\", t);\n-                        String reason = String.format(\"Has %d ends. Only 2 or 3 ends are supported\",\n+                        Supplier<String> what = () -> String.format(\"PowerTransformer %s\", t);", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MDI2Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405350263", "bodyText": "Same question here.", "author": "mathbagu", "createdAt": "2020-04-08T08:32:15Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CurrentLimitsMapping.java", "diffHunk": "@@ -32,7 +32,7 @@ public CurrentLimitsAdder getCurrentLimitsAdder(String id, Supplier<CurrentLimit\n     void addAll() {\n         for (Map.Entry<String, CurrentLimitsAdder> entry : adders.entrySet()) {\n             if (Double.isNaN(entry.getValue().getPermanentLimit())) {\n-                context.ignored(String.format(\"Operational Limit Set of %s\", entry.getKey()), \"An operational limit set must at least contain one value for permanent limit.\");\n+                context.ignored(() -> String.format(\"Operational Limit Set of %s\", entry.getKey()), () -> \"An operational limit set must at least contain one value for permanent limit.\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MDk2Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405350966", "bodyText": "Introduce a version without supplier: there is no reason to create a supplier here, a simple String is OK as there is no parameters", "author": "mathbagu", "createdAt": "2020-04-08T08:33:19Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForGenerators.java", "diffHunk": "@@ -96,7 +96,7 @@ private boolean setRegulatingControlVoltage(String controlId,\n         if (control.targetValue <= 0.0 || Double.isNaN(control.targetValue)) {\n             targetV = terminal.getVoltageLevel().getNominalV();\n             terminal = gen.getTerminal();\n-            context.fixed(controlId, \"Invalid value for regulating target value. Regulation considered as local.\", control.targetValue, targetV);\n+            context.fixed(controlId, () -> \"Invalid value for regulating target value. Regulation considered as local.\", control.targetValue, targetV);", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MTQzNQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405351435", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:34:04Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForTransformers.java", "diffHunk": "@@ -277,7 +277,7 @@ private void setPhaseTapChangerControl(boolean regulating, CgmesRegulatingContro\n         } else if (control.mode.endsWith(\"activepower\")) {\n             okSet = setPtcRegulatingControlActivePower(regulating, rc.ltcFlag, control, ptc, context);\n         } else if (!control.mode.endsWith(\"fixed\")) {\n-            context.fixed(control.mode, \"Unsupported regulating mode for Phase tap changer. Considered as FIXED_TAP\");\n+            context.fixed(control.mode, () -> \"Unsupported regulating mode for Phase tap changer. Considered as FIXED_TAP\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MTYwMw==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405351603", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:34:21Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AbstractBranchConversion.java", "diffHunk": "@@ -31,11 +31,11 @@ public boolean valid() {\n         String node2 = nodeId(2);\n         if (context.boundary().containsNode(node1)\n                 || context.boundary().containsNode(node2)) {\n-            invalid(\"Has \" + nodeIdPropertyName() + \" on boundary\");\n+            invalid(() -> \"Has \" + nodeIdPropertyName() + \" on boundary\");\n             return false;\n         }\n         if (!p.containsKey(\"r\") || !p.containsKey(\"x\")) {\n-            invalid(\"No r,x attributes\");\n+            invalid(() -> \"No r,x attributes\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MTcyMQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405351721", "bodyText": "A simple concatenation seems ok", "author": "mathbagu", "createdAt": "2020-04-08T08:34:36Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AbstractObjectConversion.java", "diffHunk": "@@ -62,46 +63,46 @@ public static int fromContinuous(double value) {\n \n     public boolean presentMandatoryProperty(String pname) {\n         if (!p.containsKey(pname)) {\n-            invalid(String.format(\"Missing property %s\", pname));\n+            invalid(() -> String.format(\"Missing property %s\", pname));", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MTkzMQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405351931", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:34:58Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AbstractReactiveLimitsOwnerConversion.java", "diffHunk": "@@ -78,7 +79,7 @@ protected void convertReactiveLimits(Generator g) {\n                 }\n                 rcca.add();\n             } else if (qRanges.size() == 1) {\n-                fixed(\"reactive capability curve\", \"only one point\");\n+                fixed(\"reactive capability curve\", () -> \"only one point\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MjAxMg==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405352012", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:35:07Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AcDcConverterConversion.java", "diffHunk": "@@ -32,7 +32,7 @@ public boolean valid() {\n             return false;\n         }\n         if (converterType == null) {\n-            invalid(String.format(\"Type %s\", p.getLocal(\"type\")));\n+            invalid(() -> String.format(\"Type %s\", p.getLocal(\"type\")));", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MjExOA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405352118", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:35:18Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/DcLineSegmentConversion.java", "diffHunk": "@@ -213,7 +213,7 @@ private double r() {\n         double r = p.asDouble(\"r\", 0);\n         if (r < 0) {\n             double r1 = 0.1;\n-            fixed(\"resistance\", \"was negative\", r, r1);\n+            fixed(\"resistance\", () -> \"was negative\", r, r1);", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MjE3OQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405352179", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:35:23Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/EquivalentBranchConversion.java", "diffHunk": "@@ -38,7 +38,7 @@ public void convert() {\n             // then EquivalentBranch.r21 is assumed equal to EquivalentBranch.r.\n             // Usage rule:\n             // EquivalentBranch is a result of network reduction prior to the data exchange.\n-            invalid(\"Impedance 21 different of impedance 12 not supported\");\n+            invalid(() -> \"Impedance 21 different of impedance 12 not supported\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MjIyNg==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405352226", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:35:29Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/EquivalentInjectionConversion.java", "diffHunk": "@@ -50,7 +50,7 @@ public void convert() {\n         if (terminalConnected() && regulationStatus) {\n             targetV = p.asDouble(REGULATION_TARGET);\n             if (targetV == 0) {\n-                fixed(REGULATION_TARGET, \"Target voltage value can not be zero\", targetV,\n+                fixed(REGULATION_TARGET, () -> \"Target voltage value can not be zero\", targetV,", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MjYzNQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405352635", "bodyText": "I don't understand why you change this.", "author": "mathbagu", "createdAt": "2020-04-08T08:36:09Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/NodeConversion.java", "diffHunk": "@@ -163,15 +164,13 @@ public void setVoltageAngleNodeBreaker() {\n         VoltageLevel.NodeBreakerView topo = vl.getNodeBreakerView();\n         String connectivityNode = id;\n         int iidmNode = context.nodeMapping().iidmNodeForConnectivityNode(connectivityNode, vl);\n-        if (!topo.hasAttachedEquipment(iidmNode)) {\n-            LOG.error(\"ConnectivityNode {} with voltage and angle is not valid in IIDM\", connectivityNode);\n-            return;\n-        }\n         // To obtain a bus for which we want to set voltage:\n         // If there no Terminal at this IIDM node,\n         // then find from it the first connected node with a Terminal\n-        Terminal t = topo.getOptionalTerminal(iidmNode)\n-                .orElseGet(() -> new FirstTerminalTraverser(topo, iidmNode).firstTerminal());\n+        Terminal t = topo.getTerminal(iidmNode);\n+        if (t == null) {\n+            t = new FirstTerminalTraverser(topo, iidmNode).firstTerminal();\n+        }", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5MjEzMA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405592130", "bodyText": "@lcosson: any feedback?", "author": "mathbagu", "createdAt": "2020-04-08T15:00:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MjYzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNTQ3Mg==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r406025472", "bodyText": "Very sorry about that, it looks like I miss-merged this file. Thank God for PR's!\nCorrecting...", "author": "lcosson", "createdAt": "2020-04-09T08:02:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MjYzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1Mjc5Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405352797", "bodyText": "Why do you remove this log?", "author": "mathbagu", "createdAt": "2020-04-08T08:36:27Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/NodeConversion.java", "diffHunk": "@@ -163,15 +164,13 @@ public void setVoltageAngleNodeBreaker() {\n         VoltageLevel.NodeBreakerView topo = vl.getNodeBreakerView();\n         String connectivityNode = id;\n         int iidmNode = context.nodeMapping().iidmNodeForConnectivityNode(connectivityNode, vl);\n-        if (!topo.hasAttachedEquipment(iidmNode)) {\n-            LOG.error(\"ConnectivityNode {} with voltage and angle is not valid in IIDM\", connectivityNode);\n-            return;\n-        }", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5MTk3OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405591978", "bodyText": "@lcosson: any feedback?", "author": "mathbagu", "createdAt": "2020-04-08T15:00:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1Mjc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNTM0OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r406025348", "bodyText": "Very sorry about that, it looks like I miss-merged this file. Thank God for PR's!\nCorrecting...", "author": "lcosson", "createdAt": "2020-04-09T08:02:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1Mjc5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1Mjk2OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405352968", "bodyText": "Same question?", "author": "mathbagu", "createdAt": "2020-04-08T08:36:43Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/NodeConversion.java", "diffHunk": "@@ -184,8 +183,8 @@ public void setVoltageAngleNodeBreaker() {\n                 return;\n             }\n             LOG.warn(\n-                \"Can't find a bus from the Bus View to set Voltage and Angle, we use the bus {} from the Bus/Breaker view. Connectivity node {}\",\n-                bus, id);\n+                    \"Can't find a calculated Bus to set Voltage, Angle, but found a configured Bus {}. Connectivity node {}\",\n+                    bus, id);", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5MjI1Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405592256", "bodyText": "@lcosson: any feedback", "author": "mathbagu", "createdAt": "2020-04-08T15:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1Mjk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNTQxMw==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r406025413", "bodyText": "Very sorry about that, it looks like I miss-merged this file. Thank God for PR's!\nCorrecting...", "author": "lcosson", "createdAt": "2020-04-09T08:02:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1Mjk2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MzEzNA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405353134", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:36:57Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/OperationalLimitConversion.java", "diffHunk": "@@ -72,7 +74,7 @@ private void createCurrentLimitsAdder(int terminalNumber, Identifiable<?> identi\n         } else if (identifiable instanceof TwoWindingsTransformer) {\n             Branch<?> b = (Branch<?>) identifiable;\n             if (terminalNumber == -1) {\n-                context.ignored(CURRENT_LIMIT, \"Defined for Equipment TwoWindingsTransformer. Should be defined for one Terminal of Two\");\n+                context.ignored(CURRENT_LIMIT, () -> \"Defined for Equipment TwoWindingsTransformer. Should be defined for one Terminal of Two\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MzE3Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405353177", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:37:02Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/OperationalLimitConversion.java", "diffHunk": "@@ -101,7 +103,7 @@ public boolean valid() {\n     public void convert() {\n         double value = p.asDouble(\"value\");\n         if (value <= 0) {\n-            context.ignored(OPERATIONAL_LIMIT, \"value is <= 0\");\n+            context.ignored(OPERATIONAL_LIMIT, () -> \"value is <= 0\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MzM5NQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405353395", "bodyText": "A simple concatenation seems ok", "author": "mathbagu", "createdAt": "2020-04-08T08:37:26Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/PhaseTapChangerConversion.java", "diffHunk": "@@ -98,7 +99,7 @@ public boolean valid() {\n             return false;\n         }\n         if (!validType()) {\n-            invalid(String.format(\"Unexpected phaseTapChangerType %s\", ptcType));\n+            invalid(() -> String.format(\"Unexpected phaseTapChangerType %s\", ptcType));", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MzQ5OQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405353499", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:37:37Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/PhaseTapChangerConversion.java", "diffHunk": "@@ -192,8 +193,8 @@ private double fixing(PropertyBag point, String attr, double defaultValue, Strin\n         double value = point.asDouble(attr, defaultValue);\n         if (Double.isNaN(value)) {\n             fixed(\n-                    \"PhaseTapChangerTablePoint \" + attr + \" for step \" + step + \" in table \" + tableId,\n-                    \"invalid value \" + point.get(attr));\n+                \"PhaseTapChangerTablePoint \" + attr + \" for step \" + step + \" in table \" + tableId,\n+                () -> \"invalid value \" + point.get(attr));", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5Mjk0MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405592940", "bodyText": "@lcosson: I think there is no reason to use a supplier here.", "author": "mathbagu", "createdAt": "2020-04-08T15:02:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MzQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyMDUyMA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r406020520", "bodyText": "My bad, correcting this...", "author": "lcosson", "createdAt": "2020-04-09T07:53:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MzQ5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1Mzc0MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405353741", "bodyText": "I don't understand this refactoring", "author": "mathbagu", "createdAt": "2020-04-08T08:38:00Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/PhaseTapChangerConversion.java", "diffHunk": "@@ -425,9 +426,11 @@ private boolean gatherxStepMinMax(double[] xs) {\n         boolean xStepRangeIsConsistent = true;\n         if (xStepMin < 0 || xStepMax <= 0 || xStepMin > xStepMax) {\n             xStepRangeIsConsistent = false;\n-            String reason = String.format(\"Inconsistent xStepMin, xStepMax [%f, %f]\",\n-                    xStepMin,\n-                    xStepMax);\n+            final double xStepMinParam = xStepMin;\n+            final double xStepMaxParam = xStepMax;\n+            Supplier<String> reason = () -> String.format(\"Inconsistent xStepMin, xStepMax [%f, %f]\",\n+                    xStepMinParam,\n+                    xStepMaxParam);", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU3MDA4MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405570080", "bodyText": "I think it may be because lambda only allows final constants. Maybe with double[]? Not sure if it is equivalent, performance wise.", "author": "miovd", "createdAt": "2020-04-08T14:31:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1Mzc0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5MzUwOQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405593509", "bodyText": "I miss something during my first review.", "author": "mathbagu", "createdAt": "2020-04-08T15:02:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1Mzc0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MzgzNQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405353835", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:38:08Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/PhaseTapChangerConversion.java", "diffHunk": "@@ -224,7 +225,7 @@ private double du() {\n             du = voltageStepIncrement / 100;\n         } else {\n             double defaultValue = 1;\n-            String reason = \"Not present or not valid value for voltageStepIncrementOutOfPhase or voltageStepIncrement\";\n+            Supplier<String> reason = () -> \"Not present or not valid value for voltageStepIncrementOutOfPhase or voltageStepIncrement\";", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1Mzg5MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405353891", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:38:13Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java", "diffHunk": "@@ -45,7 +46,7 @@ public RatioTapChangerConversion(PropertyBag rtc, Context context) {\n     @Override\n     public boolean valid() {\n         if (tx2 == null && tx3 == null) {\n-            invalid(\"Missing transformer\");\n+            invalid(() -> \"Missing transformer\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1Mzk0Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405353943", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:38:19Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java", "diffHunk": "@@ -59,9 +60,9 @@ public boolean valid() {\n                 // Check if the step is at neutral and regulating control is disabled\n                 boolean regulating = p.asBoolean(\"regulatingControlEnabled\", false);\n                 if (position == neutralStep && !regulating) {\n-                    ignored(reason0 + \", but is at neutralStep and regulating control disabled\");\n+                    ignored(() -> reason0 + \", but is at neutralStep and regulating control disabled\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDAwMQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354001", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:38:26Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java", "diffHunk": "@@ -79,7 +80,7 @@ public boolean valid() {\n     public void convert() {\n         RatioTapChangerAdder rtca = adder();\n         if (rtca == null) {\n-            invalid(\"Could not create ratio tap changer adder\");\n+            invalid(() -> \"Could not create ratio tap changer adder\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDA2MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354061", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:38:33Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java", "diffHunk": "@@ -170,8 +171,8 @@ private double fixing(PropertyBag point, String attr, double defaultValue, Strin\n         double value = point.asDouble(attr, defaultValue);\n         if (Double.isNaN(value)) {\n             fixed(\n-                    \"RatioTapChangerTablePoint \" + attr + \" for step \" + step + \" in table \" + tableId,\n-                    \"invalid value \" + point.get(attr));\n+                \"RatioTapChangerTablePoint \" + attr + \" for step \" + step + \" in table \" + tableId,\n+                () -> \"invalid value \" + point.get(attr));", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5Mzg2MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405593861", "bodyText": "@lcosson: I think there is no reason to use a supplier here.", "author": "mathbagu", "createdAt": "2020-04-08T15:03:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyMDkxNg==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r406020916", "bodyText": "My bad, correcting this...", "author": "lcosson", "createdAt": "2020-04-09T07:53:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDA2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDE0MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354141", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:38:39Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java", "diffHunk": "@@ -60,7 +60,7 @@ public void convert() {\n         }\n         if (bPerSection == 0) {\n             float bPerSectionFixed = Float.MIN_VALUE;\n-            fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n+            fixed(CgmesNames.B_PER_SECTION, () -> \"Can not be zero\", bPerSection, bPerSectionFixed);", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDIxMQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354211", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:38:44Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/StaticVarCompensatorConversion.java", "diffHunk": "@@ -25,7 +25,7 @@ public StaticVarCompensatorConversion(PropertyBag svc, Context context) {\n     @Override\n     public void convert() {\n         double slope = p.asDouble(\"slope\", 0.0);\n-        ignored(String.format(\"Slope %f\", slope));\n+        ignored(() -> String.format(\"Slope %f\", slope));", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDM1Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354353", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:38:56Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SwitchConversion.java", "diffHunk": "@@ -33,7 +35,7 @@ public boolean valid() {\n             return false;\n         }\n         if (busId(1).equals(busId(2))) {\n-            ignored(String.format(\"end buses are the same bus %s\", busId(1)));\n+            ignored(() -> String.format(\"end buses are the same bus %s\", busId(1)));", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDM5OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354398", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:39:02Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ThreeWindingsTransformerConversion.java", "diffHunk": "@@ -38,7 +38,7 @@ public boolean valid() {\n         if (context.boundary().containsNode(nodeId(1))\n             || context.boundary().containsNode(nodeId(2))\n             || context.boundary().containsNode(nodeId(3))) {\n-            invalid(\"3 windings transformer end point at boundary is not supported\");\n+            invalid(() -> \"3 windings transformer end point at boundary is not supported\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDUxNg==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354516", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:39:11Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/TwoWindingsTransformerConversion.java", "diffHunk": "@@ -36,7 +38,7 @@ public boolean valid() {\n         }\n         if (context.boundary().containsNode(nodeId(1))\n                 || context.boundary().containsNode(nodeId(2))) {\n-            invalid(\"2 windings transformer end point at boundary is not supported\");\n+            invalid(() -> \"2 windings transformer end point at boundary is not supported\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDU4Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354583", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:39:17Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/TwoWindingsTransformerConversion.java", "diffHunk": "@@ -121,7 +123,7 @@ private void addTapChangers(TwoWindingsTransformer tx) {\n         int rtcSide = 0;\n         if (rtc1 != null) {\n             if (rtc2 != null) {\n-                String reason = \"Unsupported modelling: two winding transformer with two ratio tap changers\";\n+                Supplier<String> reason = () -> \"Unsupported modelling: two winding transformer with two ratio tap changers\";", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDY1Mg==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354652", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:39:23Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/TwoWindingsTransformerConversion.java", "diffHunk": "@@ -139,7 +141,7 @@ private void addTapChangers(TwoWindingsTransformer tx) {\n         int ptcSide = 0;\n         if (ptc1 != null) {\n             if (ptc2 != null) {\n-                String reason = \"Unsupported modelling: transformer with two phase tap changers\";\n+                Supplier<String> reason = () -> \"Unsupported modelling: transformer with two phase tap changers\";", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDgwOQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354809", "bodyText": "Same question about the refactoring", "author": "mathbagu", "createdAt": "2020-04-08T08:39:36Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/TwoWindingsTransformerConversion.java", "diffHunk": "@@ -154,10 +156,12 @@ private void addTapChangers(TwoWindingsTransformer tx) {\n             context.tapChangerTransformers().add(ptc, tx, \"ptc\", ptcSide);\n         }\n         if (rtcSide > 0 && ptcSide > 0 && rtcSide != ptcSide) {\n-            String reason = String.format(\n+            final String rtcParam = rtc;\n+            final String ptcParam = ptc;\n+            Supplier<String> reason = () -> String.format(\n                     \"Unsupported modelling: transformer with ratio and tap changer not on the same winding, rtc: %s, ptc: %s\",\n-                    rtc,\n-                    ptc);\n+                    rtcParam,\n+                    ptcParam);", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDkyMQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354921", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:39:46Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/CgmesPhaseTapChangerBuilder.java", "diffHunk": "@@ -33,7 +33,7 @@\n     public TapChanger build() {\n         if (!validType()) {\n             String type = p.getLocal(CgmesNames.PHASE_TAP_CHANGER_TYPE).toLowerCase();\n-            context.invalid(CgmesNames.PHASE_TAP_CHANGER_TYPE, String.format(\"Unexpected type %s\", type));\n+            context.invalid(CgmesNames.PHASE_TAP_CHANGER_TYPE, () -> String.format(\"Unexpected type %s\", type));", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDk2OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354968", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:39:50Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/NewTwoWindingsTransformerConversion.java", "diffHunk": "@@ -66,7 +66,7 @@ public boolean valid() {\n         }\n         if (context.boundary().containsNode(nodeId(1))\n             || context.boundary().containsNode(nodeId(2))) {\n-            invalid(\"2 windings transformer end point at boundary is not supported\");\n+            invalid(() -> \"2 windings transformer end point at boundary is not supported\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NTA2MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405355061", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:39:58Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/TapChangerConversion.java", "diffHunk": "@@ -135,7 +135,7 @@ private static TapChanger combineTapChanger(TapChanger tc1, TapChanger tc2) {\n     */\n     private TapChanger tapChangerFixPosition(TapChanger tc) {\n         if (tc.getLowTapPosition() != tc.getHighTapPosition()) {\n-            context.fixed(String.format(\"TapChanger Id %s fixed tap at position %d \", tc.getId(), tc.getTapPosition()), \"\");\n+            context.fixed(String.format(\"TapChanger Id %s fixed tap at position %d \", tc.getId(), tc.getTapPosition()), () -> \"\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5NDUzNA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405594534", "bodyText": "@lcosson I think there is no reason to create a Supplier here", "author": "mathbagu", "createdAt": "2020-04-08T15:04:07Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractCgmesTapChangerBuilder.java", "diffHunk": "@@ -79,8 +79,8 @@ protected TapChanger build() {\n         double value = point.asDouble(attr, defaultValue);\n         if (Double.isNaN(value)) {\n             context.fixed(\n-                    \"RatioTapChangerTablePoint \" + attr + \" for step \" + step + \" in table \" + tableId,\n-                    \"invalid value \" + point.get(attr));\n+                \"RatioTapChangerTablePoint \" + attr + \" for step \" + step + \" in table \" + tableId,\n+                () -> \"invalid value \" + point.get(attr));", "originalCommit": "70e7c7afc166ba8b44059e4603991db410050c78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyMTM1NA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r406021354", "bodyText": "My bad, correcting this...", "author": "lcosson", "createdAt": "2020-04-09T07:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5NDUzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3NTc3Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r406775777", "bodyText": "Are you sure they are public?", "author": "mathbagu", "createdAt": "2020-04-10T14:13:38Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Context.java", "diffHunk": "@@ -29,6 +30,12 @@\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n  */\n public class Context {\n+\n+    // Log messages\n+    public static final String FIXED_REASON = \"Fixed {}. Reason: {}\";\n+    public static final String INVALID_REASON = \"Invalid {}. Reason: {}\";\n+    public static final String IGNORED_REASON = \"Ignored {}. Reason: {}\";", "originalCommit": "95722ecdf6072e756a04be902f28ad0251a6a363", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2ODE4Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r407168186", "bodyText": "I think adding a check for log level enabled before a call with string constants does not offer performance improvement, the log library will do the same check in the implementation (https://stackoverflow.com/questions/8788096/log-info-using-log-isinfoenabled). Personally I prefer removing the check for such one-line calls, to improve readability.", "author": "zamarrenolm", "createdAt": "2020-04-12T08:53:38Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Context.java", "diffHunk": "@@ -215,39 +222,85 @@ public void anotherLineConversion(ACLineSegmentConversion c) {\n     }\n \n     public void endLinesConversion() {\n-        String enough = countLinesWithSvPowerFlowsAtEnds < countLines ? \"FEW\" : \"ENOUGH\";\n-        LOG.info(\"{} lines with SvPowerFlow values at ends: {} / {}\",\n-                enough,\n-                countLinesWithSvPowerFlowsAtEnds,\n-                countLines);\n+        if (LOG.isInfoEnabled()) {\n+            String enough = countLinesWithSvPowerFlowsAtEnds < countLines ? \"FEW\" : \"ENOUGH\";\n+            LOG.info(\"{} lines with SvPowerFlow values at ends: {} / {}\",\n+                    enough,\n+                    countLinesWithSvPowerFlowsAtEnds,\n+                    countLines);\n+        }\n     }\n \n     public void invalid(String what, String reason) {\n-        LOG.warn(\"Invalid {}. Reason: {}\", what, reason);\n+        if (LOG.isWarnEnabled()) {\n+            LOG.warn(INVALID_REASON, what, reason);", "originalCommit": "848be50060c8273821f610b57db274b392cf03c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxMjYxNQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r407912615", "bodyText": "I see your point, but then it's like for the partial use of Suppliers with @mathbagu : what's the policy ? Should we say \"prefer doing stuff that way in general\" or \"work on a case by case basis\" ?", "author": "lcosson", "createdAt": "2020-04-14T07:10:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2ODE4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1MTczOQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r407951739", "bodyText": "Looking to the code of logback, the log methods use a chain of filter to define to decide if a LogEvent has to be created. There are two different implementation of LogFilter, and in that case, the TurboFilter are used. These filters have to be really fast. So I think, we can follow Luma's advice.", "author": "mathbagu", "createdAt": "2020-04-14T08:19:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2ODE4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2ODU1MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r407168551", "bodyText": "Only impact on raising the error level for test is that we may reduce the coverage of some code.", "author": "zamarrenolm", "createdAt": "2020-04-12T08:57:21Z", "path": "cgmes/cgmes-conversion/src/test/resources/logback-test.xml", "diffHunk": "@@ -14,7 +14,7 @@\n             <pattern>%-5p %-20C{1} | %m%n</pattern>\n         </encoder>\n     </appender>\n-    <root level=\"info\">\n+    <root level=\"error\">", "originalCommit": "848be50060c8273821f610b57db274b392cf03c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "url": "https://github.com/powsybl/powsybl-core/commit/3362184f8c0782e58ac6a121096a2f4b5724a87a", "message": "Improve context logging performance, using suppliers and checking log level\n\nSigned-off-by: Laurent Cosson <lcosson@silicom.fr>\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>", "committedDate": "2020-04-16T16:15:20Z", "type": "commit"}, {"oid": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "url": "https://github.com/powsybl/powsybl-core/commit/3362184f8c0782e58ac6a121096a2f4b5724a87a", "message": "Improve context logging performance, using suppliers and checking log level\n\nSigned-off-by: Laurent Cosson <lcosson@silicom.fr>\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>", "committedDate": "2020-04-16T16:15:20Z", "type": "forcePushed"}]}