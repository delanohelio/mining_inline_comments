{"pr_number": 3808, "pr_title": "Add functional test for #3807", "pr_createdAt": "2020-10-26T17:01:50Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3808", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0NTY5Nw==", "url": "https://github.com/telstra/open-kilda/pull/3808#discussion_r512445697", "bodyText": "flowsDeleted -> areFlowsDeleted?", "author": "andriidovhan", "createdAt": "2020-10-27T06:36:34Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowDiversityV2Spec.groovy", "diffHunk": "@@ -73,8 +76,27 @@ class FlowDiversityV2Spec extends HealthCheckSpecification {\n         }\n         allInvolvedIsls.unique(false) == allInvolvedIsls\n \n-        cleanup: \"Delete flows\"\n+        and: \"Flows' histories contain 'groupId' information\"\n+        [flow2, flow3].each {//flow1 had no diversity at the time of creation\n+            assert northbound.getFlowHistory(it.flowId).find { it.action == CREATE_ACTION }.dumps\n+                    .find { it.type == \"stateAfter\" }?.groupId\n+        }\n+\n+        when: \"Delete flows\"\n         [flow1, flow2, flow3].each { flowHelperV2.deleteFlow(it.flowId) }\n+        def flowsDeleted = true", "originalCommit": "23bdcc61705e645576d755b4f2f02486ab153bfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYwODE4NQ==", "url": "https://github.com/telstra/open-kilda/pull/3808#discussion_r512608185", "bodyText": "renamed to flowsAreDeleted", "author": "rtretyak", "createdAt": "2020-10-27T11:19:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0NTY5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2NjA5Mw==", "url": "https://github.com/telstra/open-kilda/pull/3808#discussion_r512466093", "bodyText": "in case flow has no diversity, then groupId is missed\nam I right?", "author": "andriidovhan", "createdAt": "2020-10-27T07:30:31Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowDiversityV2Spec.groovy", "diffHunk": "@@ -73,8 +76,27 @@ class FlowDiversityV2Spec extends HealthCheckSpecification {\n         }\n         allInvolvedIsls.unique(false) == allInvolvedIsls\n \n-        cleanup: \"Delete flows\"\n+        and: \"Flows' histories contain 'groupId' information\"\n+        [flow2, flow3].each {//flow1 had no diversity at the time of creation", "originalCommit": "23bdcc61705e645576d755b4f2f02486ab153bfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ4OTEwMA==", "url": "https://github.com/telstra/open-kilda/pull/3808#discussion_r512489100", "bodyText": "It is not missed, it just does not exist", "author": "rtretyak", "createdAt": "2020-10-27T08:15:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2NjA5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2NjI0Mw==", "url": "https://github.com/telstra/open-kilda/pull/3808#discussion_r512466243", "bodyText": "empty line", "author": "andriidovhan", "createdAt": "2020-10-27T07:30:55Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowDiversityV2Spec.groovy", "diffHunk": "@@ -73,8 +76,27 @@ class FlowDiversityV2Spec extends HealthCheckSpecification {\n         }\n         allInvolvedIsls.unique(false) == allInvolvedIsls\n \n-        cleanup: \"Delete flows\"\n+        and: \"Flows' histories contain 'groupId' information\"\n+        [flow2, flow3].each {//flow1 had no diversity at the time of creation\n+            assert northbound.getFlowHistory(it.flowId).find { it.action == CREATE_ACTION }.dumps\n+                    .find { it.type == \"stateAfter\" }?.groupId\n+        }\n+\n+        when: \"Delete flows\"\n         [flow1, flow2, flow3].each { flowHelperV2.deleteFlow(it.flowId) }\n+        def flowsDeleted = true\n+\n+        then: \"Flows' histories contain 'groupId' information in 'delete' operation\"\n+        [flow1, flow2, flow3].each {\n+            verifyAll(northbound.getFlowHistory(it.flowId).find { it.action == DELETE_ACTION }.dumps) {\n+                it.find { it.type == \"stateBefore\" }?.groupId\n+                !it.find { it.type == \"stateAfter\" }?.groupId\n+            }\n+        }\n+\n+        cleanup:\n+        !flowsDeleted && [flow1, flow2, flow3].each { flowHelperV2.deleteFlow(it.flowId) }\n+", "originalCommit": "23bdcc61705e645576d755b4f2f02486ab153bfb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2OTY4Mw==", "url": "https://github.com/telstra/open-kilda/pull/3808#discussion_r512469683", "bodyText": "it can fail in future\nfor example: when the system was able to delete the first two flow and wasn't able to delete the third flow\nTo tell the truth I have no idea how to handle it and at the same do not add extra complexity", "author": "andriidovhan", "createdAt": "2020-10-27T07:38:28Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowDiversityV2Spec.groovy", "diffHunk": "@@ -73,8 +76,27 @@ class FlowDiversityV2Spec extends HealthCheckSpecification {\n         }\n         allInvolvedIsls.unique(false) == allInvolvedIsls\n \n-        cleanup: \"Delete flows\"\n+        and: \"Flows' histories contain 'groupId' information\"\n+        [flow2, flow3].each {//flow1 had no diversity at the time of creation\n+            assert northbound.getFlowHistory(it.flowId).find { it.action == CREATE_ACTION }.dumps\n+                    .find { it.type == \"stateAfter\" }?.groupId\n+        }\n+\n+        when: \"Delete flows\"\n         [flow1, flow2, flow3].each { flowHelperV2.deleteFlow(it.flowId) }\n+        def flowsDeleted = true\n+\n+        then: \"Flows' histories contain 'groupId' information in 'delete' operation\"\n+        [flow1, flow2, flow3].each {\n+            verifyAll(northbound.getFlowHistory(it.flowId).find { it.action == DELETE_ACTION }.dumps) {\n+                it.find { it.type == \"stateBefore\" }?.groupId\n+                !it.find { it.type == \"stateAfter\" }?.groupId\n+            }\n+        }\n+\n+        cleanup:\n+        !flowsDeleted && [flow1, flow2, flow3].each { flowHelperV2.deleteFlow(it.flowId) }", "originalCommit": "23bdcc61705e645576d755b4f2f02486ab153bfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5MTk5NQ==", "url": "https://github.com/telstra/open-kilda/pull/3808#discussion_r512491995", "bodyText": "You can apply the question 'what if system wasn't able to delete a flow' to literally any test in our framework. Not sure what you expect to see. We assume that test deletion is working properly and also test it in separate flowcrud tests", "author": "rtretyak", "createdAt": "2020-10-27T08:20:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2OTY4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUxMjEyNw==", "url": "https://github.com/telstra/open-kilda/pull/3808#discussion_r512512127", "bodyText": "I meant that a flow wasn't deleted because it was in the in_progress state(rare case).\nI agree, we should assume that the 'delete' operation works fine", "author": "andriidovhan", "createdAt": "2020-10-27T08:53:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2OTY4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYxMDc3MQ==", "url": "https://github.com/telstra/open-kilda/pull/3808#discussion_r512610771", "bodyText": "This mostly appears in tests where we cause flows to reroute without precisely tracking their reroute status (brought down controller or changed isls state etc.). In this particular test we only do flow create via flowHelper, which ensures no 'in-progress' state.So I think this test is the least possible test to have in-progress problems out of most of our tests.", "author": "rtretyak", "createdAt": "2020-10-27T11:24:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2OTY4Mw=="}], "type": "inlineReview"}, {"oid": "8763c72b6ac4845db3b3335fb1f9b4908a03b6e3", "url": "https://github.com/telstra/open-kilda/commit/8763c72b6ac4845db3b3335fb1f9b4908a03b6e3", "message": "Add functional test for #3807", "committedDate": "2020-10-27T11:25:40Z", "type": "commit"}, {"oid": "8763c72b6ac4845db3b3335fb1f9b4908a03b6e3", "url": "https://github.com/telstra/open-kilda/commit/8763c72b6ac4845db3b3335fb1f9b4908a03b6e3", "message": "Add functional test for #3807", "committedDate": "2020-10-27T11:25:40Z", "type": "forcePushed"}]}