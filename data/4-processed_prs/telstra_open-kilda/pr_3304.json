{"pr_number": 3304, "pr_title": "Multiple updates to EnduranceV2Spec", "pr_createdAt": "2020-03-17T15:03:48Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3304", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwMDgxMA==", "url": "https://github.com/telstra/open-kilda/pull/3304#discussion_r394900810", "bodyText": "I guess the use.multitable option should be true by default", "author": "andriidovhan", "createdAt": "2020-03-19T09:44:07Z", "path": "src-java/testing/performance-tests/kilda.properties.example", "diffHunk": "@@ -14,42 +14,62 @@ floodlight.regions=1,2\n floodlight.alive.timeout=10\n floodlight.alive.interval=2\n \n-grpc.endpoint=http://localhost:8091\n-grpc.username=kilda\n-grpc.password=kilda\n-grpc.remote.log.server.ip=1.1.1.1\n-grpc.remote.log.server.port=321\n-\n-elasticsearch.endpoint = http://localhost:9200\n-elasticsearch.username = kilda\n-elasticsearch.password = kilda\n-\n-kafka.bootstrap.server = kafka.pendev:9092\n-kafka.topic.topo.disco=kilda.topo.disco\n-\n-lockkeeper.endpoint=http://localhost:5001\n neo.uri=bolt://localhost:7687\n neo.user=\n neo.password=\n+\n+elasticsearch.endpoint=http://localhost:9200\n+elasticsearch.username=kilda\n+elasticsearch.password=kilda\n+elasticsearch.index=kilda-*\n+\n+environment.naming.prefix=\n+kafka.bootstrap.server=kafka.pendev:9092\n+kafka.topic.topo.disco=kilda.topo.disco.storm\n+\n lab-api.endpoint=http://localhost:8288\n+lockkeeper.port=5001\n \n opentsdb.endpoint=http://localhost:4242\n opentsdb.metric.prefix=kilda.\n \n spring.profiles.active=virtual\n-mode.topology.single=true\n \n-reroute.delay=3\n-reroute.hardtimeout=15\n+reroute.delay=2\n+reroute.hardtimeout=8\n+\n discovery.interval=3\n-discovery.timeout = 15\n+discovery.timeout=15\n+\n antiflap.min=1\n-antiflap.warmup=5\n-antiflap.cooldown=10\n-burst.coefficient=1.05\n-pce.isl.cost.when.under.maintenance=10000\n+antiflap.warmup=3\n+antiflap.cooldown=7\n+\n pce.isl.cost.when.unstable=10000\n+pce.isl.cost.when.under.maintenance=10000\n+\n+isl.unstable.timeout.sec=15\n+\n+burst.coefficient=1.05\n+\n bfd.offset=200\n+\n+env.hardware.cleanup=false\n+\n+diversity.isl.cost=10000\n+diversity.switch.cost=1000\n+\n+grpc.endpoint=http://localhost:8091\n+grpc.username=kilda\n+grpc.password=kilda\n+#please use the correct ip address and port for the remote log server\n+grpc.remote.log.server.ip=1.1.1.1\n+grpc.remote.log.server.port=321\n+\n use.hs=true\n+use.multitable=false", "originalCommit": "489871dc2ce530b3420a8369709159450cd16195", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0ODY5OA==", "url": "https://github.com/telstra/open-kilda/pull/3304#discussion_r395548698", "bodyText": "ye, thx. fixed", "author": "rtretyak", "createdAt": "2020-03-20T10:27:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwMDgxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkxMTM2NA==", "url": "https://github.com/telstra/open-kilda/pull/3304#discussion_r394911364", "bodyText": "How about checking that flow is pingable?", "author": "andriidovhan", "createdAt": "2020-03-19T10:01:34Z", "path": "src-java/testing/performance-tests/src/test/groovy/org/openkilda/performancetests/spec/EnduranceV2Spec.groovy", "diffHunk": "@@ -92,22 +100,17 @@ idle, mass manual reroute, isl break. Step repeats pre-defined number of times\"\n         }\n \n         and: \"Wait for blinking isls to get UP and flows to finish rerouting\"\n-        Wrappers.wait(WAIT_OFFSET + flows.size() * 0.5) {\n+        Wrappers.wait(WAIT_OFFSET + flows.size() * 0.8) {\n             def isls = northbound.getAllLinks()\n             (topology.isls - brokenIsls).each {\n                 assert islUtils.getIslInfo(isls, it).get().state == IslChangeType.DISCOVERED\n             }\n             assert northbound.getAllFlows().findAll { it.status == FlowState.IN_PROGRESS.toString() }.empty\n         }\n \n-        then: \"All flows are writting stats\"\n+        then: \"All Up flows are pingable\"\n         def allFlows = northbound.getAllFlows()\n         def assertions = new SoftAssertions()\n-        assertions.checkSucceeds {\n-            statsHelper.verifyFlowsWriteStats(allFlows.findAll { it.status == FlowState.UP.toString() }*.id)\n-        } ?: true\n-\n-        and: \"All Up flows are pingable\"\n         def pingVerifications = new SoftAssertions()\n         allFlows.findAll { it.status == FlowState.UP.toString() }.forEach { flow ->\n             pingVerifications.checkSucceeds {", "originalCommit": "489871dc2ce530b3420a8369709159450cd16195", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0MjM1OA==", "url": "https://github.com/telstra/open-kilda/pull/3304#discussion_r395542358", "bodyText": "Can be added, but doesn't really make profit since we always use virtual switches in this test, it is not designed to be run elsewhere. Even if run on existing env it will only use virtual switches that were created as precondition", "author": "rtretyak", "createdAt": "2020-03-20T10:14:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkxMTM2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkxNDQ4OA==", "url": "https://github.com/telstra/open-kilda/pull/3304#discussion_r394914488", "bodyText": "Could you explain or leave a comment about magic numbers(60, 0.8, WAIT_OFFSET * 3) ?\nHow did you find them?", "author": "andriidovhan", "createdAt": "2020-03-19T10:06:49Z", "path": "src-java/testing/performance-tests/src/test/groovy/org/openkilda/performancetests/spec/EnduranceV2Spec.groovy", "diffHunk": "@@ -175,18 +178,127 @@ idle, mass manual reroute, isl break. Step repeats pre-defined number of times\"\n         //define payload generating method that will be called each time flow creation is issued\n         makeFlowPayload = {\n             def flow = flowHelperV2.randomFlow(*topoHelper.getRandomSwitchPair(), false, flows)\n-            flow.maximumBandwidth = 100000\n+            flow.maximumBandwidth = 200000\n             return flow\n         }\n         //'dice' below defines events and their chances to appear\n         dice = new Dice([\n-                new Face(name: \"delete flow\", chance: 10, event: { deleteFlow() }),\n-                new Face(name: \"update flow\", chance: 20, event: { updateFlow() }),\n-                new Face(name: \"create flow\", chance: 10, event: { createFlow(makeFlowPayload(), true) }),\n-                new Face(name: \"blink isl\", chance: 25, event: { blinkIsl() }),\n+                new Face(name: \"delete flow\", chance: 19, event: { deleteFlow() }),\n+                new Face(name: \"update flow\", chance: 0, event: { updateFlow() }),\n+                new Face(name: \"create flow\", chance: 19, event: { createFlow(makeFlowPayload(), true) }),\n+                new Face(name: \"blink isl\", chance: 32, event: { blinkIsl() }),\n                 new Face(name: \"idle\", chance: 0, event: { TimeUnit.SECONDS.sleep(3) }),\n-                new Face(name: \"manual reroute 5% of flows\", chance: 10, event: { massReroute() }),\n-                new Face(name: \"break isl\", chance: 25, event: { breakIsl() })\n+                new Face(name: \"manual reroute 5% of flows\", chance: 0, event: { massReroute() }),\n+                new Face(name: \"break isl\", chance: 30, event: { breakIsl() })\n+        ])\n+        debugText = preset.debug ? \" (debug mode)\" : \"\"\n+    }\n+\n+    @Unroll\n+    def \"Random events appear on existing env for certain period of time\"() {\n+        Assume.assumeThat(preset.debug, equalTo(debug))\n+\n+        given: \"A live env with certain topology deployed and existing flows\"\n+        setTopologies(topoHelper.readCurrentTopology())\n+        flows.addAll(northbound.getAllFlows().collect { flowHelperV2.toV2(it) })\n+\n+        when: \"With certain probability one of the following events occurs: flow creation, flow deletion, isl blink, \\\n+idle, mass manual reroute, isl break. Step repeats for pre-defined amount of time\"\n+        Wrappers.timedLoop(preset.durationMinutes * 60) {\n+            log.debug(\"running event #$it\")\n+            dice.roll()\n+            TimeUnit.SECONDS.sleep(preset.pauseBetweenEvents)\n+        }\n+\n+        and: \"Wait for any blinking isls to get UP and flows to finish rerouting\"\n+        Wrappers.wait(antiflap.getAntiflapCooldown() + discoveryInterval + WAIT_OFFSET * 3) {\n+            def isls = northbound.getAllLinks()\n+            (topology.isls - brokenIsls).each {\n+                assert islUtils.getIslInfo(isls, it).get().state == IslChangeType.DISCOVERED\n+            }\n+        }\n+        Wrappers.wait(WAIT_OFFSET + flows.size() * 0.8) {", "originalCommit": "489871dc2ce530b3420a8369709159450cd16195", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0OTMwNA==", "url": "https://github.com/telstra/open-kilda/pull/3304#discussion_r395549304", "bodyText": "Added a comment. Tbh it is just a big wait which somehow depends on flows amount. Nobody knows the real formula)", "author": "rtretyak", "createdAt": "2020-03-20T10:29:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkxNDQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU1MjAxOQ==", "url": "https://github.com/telstra/open-kilda/pull/3304#discussion_r395552019", "bodyText": "'60' is for converting minutes to seconds. do we really need a comment there?", "author": "rtretyak", "createdAt": "2020-03-20T10:34:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkxNDQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY1OTEyMg==", "url": "https://github.com/telstra/open-kilda/pull/3304#discussion_r395659122", "bodyText": "I just wondered", "author": "andriidovhan", "createdAt": "2020-03-20T14:06:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkxNDQ4OA=="}], "type": "inlineReview"}, {"oid": "c81a5a06055ae230767262bf0a050ee4ac24235a", "url": "https://github.com/telstra/open-kilda/commit/c81a5a06055ae230767262bf0a050ee4ac24235a", "message": "Multiple updates to EnduranceV2Spec", "committedDate": "2020-03-20T10:29:46Z", "type": "forcePushed"}, {"oid": "4a94e060b0f76f8e7e649a5199b165e01b40a444", "url": "https://github.com/telstra/open-kilda/commit/4a94e060b0f76f8e7e649a5199b165e01b40a444", "message": "Multiple updates to EnduranceV2Spec", "committedDate": "2020-03-20T10:33:22Z", "type": "forcePushed"}, {"oid": "bb0703723e6786f2cb4025aee04b0c1e6a6b5ce8", "url": "https://github.com/telstra/open-kilda/commit/bb0703723e6786f2cb4025aee04b0c1e6a6b5ce8", "message": "Multiple updates to EnduranceV2Spec", "committedDate": "2020-03-20T12:58:24Z", "type": "commit"}, {"oid": "bb0703723e6786f2cb4025aee04b0c1e6a6b5ce8", "url": "https://github.com/telstra/open-kilda/commit/bb0703723e6786f2cb4025aee04b0c1e6a6b5ce8", "message": "Multiple updates to EnduranceV2Spec", "committedDate": "2020-03-20T12:58:24Z", "type": "forcePushed"}]}