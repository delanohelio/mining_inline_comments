{"pr_number": 3867, "pr_title": "tests for rtl ISL and portDiscovery", "pr_createdAt": "2020-11-19T13:12:10Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3867", "timeline": [{"oid": "b6f0fe6c4ae4dc510a30ddd4d614d91390754938", "url": "https://github.com/telstra/open-kilda/commit/b6f0fe6c4ae4dc510a30ddd4d614d91390754938", "message": "test for rtl and portDiscovery", "committedDate": "2020-11-27T15:10:12Z", "type": "forcePushed"}, {"oid": "2035eb7bc2ff8141e859558a4046bb8c940b6c4b", "url": "https://github.com/telstra/open-kilda/commit/2035eb7bc2ff8141e859558a4046bb8c940b6c4b", "message": "test for rtl and portDiscovery", "committedDate": "2020-11-27T15:14:25Z", "type": "forcePushed"}, {"oid": "01b5335413875ec0c1c2e7d31b6113ef89ba8644", "url": "https://github.com/telstra/open-kilda/commit/01b5335413875ec0c1c2e7d31b6113ef89ba8644", "message": "tests for rtl and portDiscovery", "committedDate": "2020-11-27T16:24:28Z", "type": "forcePushed"}, {"oid": "8f09de22936183bcf12c115853cc4a9fc350d00a", "url": "https://github.com/telstra/open-kilda/commit/8f09de22936183bcf12c115853cc4a9fc350d00a", "message": "tests for rtl and portDiscovery", "committedDate": "2020-11-30T08:10:42Z", "type": "forcePushed"}, {"oid": "9cb3e0f1203a2713b29ab189418f8e546a394f9b", "url": "https://github.com/telstra/open-kilda/commit/9cb3e0f1203a2713b29ab189418f8e546a394f9b", "message": "tests for rtl and portDiscovery", "committedDate": "2020-11-30T09:10:32Z", "type": "forcePushed"}, {"oid": "a9d5f6e18cf0051e8be74f0aff3fe75d5c54618a", "url": "https://github.com/telstra/open-kilda/commit/a9d5f6e18cf0051e8be74f0aff3fe75d5c54618a", "message": "tests for rtl and portDiscovery", "committedDate": "2020-11-30T09:14:33Z", "type": "forcePushed"}, {"oid": "c5c962632b02e9fa155d8e44987936bc32d76044", "url": "https://github.com/telstra/open-kilda/commit/c5c962632b02e9fa155d8e44987936bc32d76044", "message": "tests for rtl and portDiscovery", "committedDate": "2020-12-07T12:10:38Z", "type": "forcePushed"}, {"oid": "b619862bcfd362db25c69354297498f443276a76", "url": "https://github.com/telstra/open-kilda/commit/b619862bcfd362db25c69354297498f443276a76", "message": "tests for rtl and portDiscovery", "committedDate": "2020-12-09T13:09:17Z", "type": "forcePushed"}, {"oid": "67bb27302e30fd6047d507bb8f580e2df5f348bd", "url": "https://github.com/telstra/open-kilda/commit/67bb27302e30fd6047d507bb8f580e2df5f348bd", "message": "tests for rtl and portDiscovery", "committedDate": "2020-12-10T10:46:15Z", "type": "forcePushed"}, {"oid": "5dd6878c6d81dbfe5a40271b73e17c25f99b64cc", "url": "https://github.com/telstra/open-kilda/commit/5dd6878c6d81dbfe5a40271b73e17c25f99b64cc", "message": "tests for rtl and portDiscovery", "committedDate": "2020-12-18T10:13:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3MzY2NA==", "url": "https://github.com/telstra/open-kilda/pull/3867#discussion_r546773664", "bodyText": "Maybe enable one by one? To see what happens if only 1-way traffic starts to flow", "author": "rtretyak", "createdAt": "2020-12-21T15:36:25Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/RoundTripIslSpec.groovy", "diffHunk": "@@ -288,4 +289,156 @@ round trip latency rule is removed on the dst switch\"() {\n             }\n         }\n     }\n+\n+    @Tidy\n+    @Tags([SMOKE_SWITCHES])\n+    def \"A round trip latency ISL goes down when portDiscovery property is disabled on the src/dst ports\"() {\n+        given: \"A round trip latency ISL\"\n+        Isl roundTripIsl = topology.islsForActiveSwitches.find {\n+            it.srcSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD) &&\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+        } ?: assumeTrue(\"Wasn't able to find a suitable link\", false)\n+\n+        when: \"Disable portDiscovery on the srcPort\"\n+        northboundV2.updatePortProperties(roundTripIsl.srcSwitch.dpId, roundTripIsl.srcPort,\n+                new PortPropertiesDto(discoveryEnabled: false))\n+        def portDiscoveryIsEnabledOnSrcPort = false\n+\n+        then: \"Isl is still DISCOVERED\"\n+        Wrappers.wait(WAIT_OFFSET) {\n+            def links = northbound.getAllLinks()\n+            def islInfoForward = islUtils.getIslInfo(links, roundTripIsl,).get()\n+            def islInfoReverse = islUtils.getIslInfo(links, roundTripIsl.reversed).get()\n+            assert islInfoForward.state == DISCOVERED\n+            assert islInfoForward.actualState == FAILED\n+            assert islInfoReverse.state == DISCOVERED\n+            assert islInfoReverse.actualState == DISCOVERED\n+        }\n+\n+        when: \"Disable portDiscovery property on the dstPort\"\n+        northboundV2.updatePortProperties(roundTripIsl.dstSwitch.dpId, roundTripIsl.dstPort,\n+                new PortPropertiesDto(discoveryEnabled: false))\n+        def portDiscoveryIsEnabledOnDstPort = false\n+\n+        then: \"Status of the link is changed to FAILED\"\n+        //don't need to wait discoveryTimeout, disablePortDiscovery(on src/dst sides) == portDown\n+        Wrappers.wait(WAIT_OFFSET) {\n+            def allLinks = northbound.getAllLinks()\n+            def islInfoForward = islUtils.getIslInfo(allLinks, roundTripIsl).get()\n+            def islInfoReverse = islUtils.getIslInfo(allLinks, roundTripIsl.reversed).get()\n+            assert islInfoForward.state == FAILED\n+            assert islInfoForward.actualState == FAILED\n+            assert islInfoReverse.state == FAILED\n+            assert islInfoReverse.actualState == FAILED\n+        }\n+\n+        when: \"Enable portDiscovery on the src/dst ports\"", "originalCommit": "5dd6878c6d81dbfe5a40271b73e17c25f99b64cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc4MzE0Nw==", "url": "https://github.com/telstra/open-kilda/pull/3867#discussion_r546783147", "bodyText": "I don't think so. It will be the same as on L325.\nI mean a link will be discovered in one direction only.", "author": "andriidovhan", "createdAt": "2020-12-21T15:52:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3MzY2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3NTAxMw==", "url": "https://github.com/telstra/open-kilda/pull/3867#discussion_r546775013", "bodyText": "If the assumption fails on L371, this code will still try to run. Need a better solution here and below", "author": "rtretyak", "createdAt": "2020-12-21T15:38:51Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/links/RoundTripIslSpec.groovy", "diffHunk": "@@ -288,4 +289,156 @@ round trip latency rule is removed on the dst switch\"() {\n             }\n         }\n     }\n+\n+    @Tidy\n+    @Tags([SMOKE_SWITCHES])\n+    def \"A round trip latency ISL goes down when portDiscovery property is disabled on the src/dst ports\"() {\n+        given: \"A round trip latency ISL\"\n+        Isl roundTripIsl = topology.islsForActiveSwitches.find {\n+            it.srcSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD) &&\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+        } ?: assumeTrue(\"Wasn't able to find a suitable link\", false)\n+\n+        when: \"Disable portDiscovery on the srcPort\"\n+        northboundV2.updatePortProperties(roundTripIsl.srcSwitch.dpId, roundTripIsl.srcPort,\n+                new PortPropertiesDto(discoveryEnabled: false))\n+        def portDiscoveryIsEnabledOnSrcPort = false\n+\n+        then: \"Isl is still DISCOVERED\"\n+        Wrappers.wait(WAIT_OFFSET) {\n+            def links = northbound.getAllLinks()\n+            def islInfoForward = islUtils.getIslInfo(links, roundTripIsl,).get()\n+            def islInfoReverse = islUtils.getIslInfo(links, roundTripIsl.reversed).get()\n+            assert islInfoForward.state == DISCOVERED\n+            assert islInfoForward.actualState == FAILED\n+            assert islInfoReverse.state == DISCOVERED\n+            assert islInfoReverse.actualState == DISCOVERED\n+        }\n+\n+        when: \"Disable portDiscovery property on the dstPort\"\n+        northboundV2.updatePortProperties(roundTripIsl.dstSwitch.dpId, roundTripIsl.dstPort,\n+                new PortPropertiesDto(discoveryEnabled: false))\n+        def portDiscoveryIsEnabledOnDstPort = false\n+\n+        then: \"Status of the link is changed to FAILED\"\n+        //don't need to wait discoveryTimeout, disablePortDiscovery(on src/dst sides) == portDown\n+        Wrappers.wait(WAIT_OFFSET) {\n+            def allLinks = northbound.getAllLinks()\n+            def islInfoForward = islUtils.getIslInfo(allLinks, roundTripIsl).get()\n+            def islInfoReverse = islUtils.getIslInfo(allLinks, roundTripIsl.reversed).get()\n+            assert islInfoForward.state == FAILED\n+            assert islInfoForward.actualState == FAILED\n+            assert islInfoReverse.state == FAILED\n+            assert islInfoReverse.actualState == FAILED\n+        }\n+\n+        when: \"Enable portDiscovery on the src/dst ports\"\n+        northboundV2.updatePortProperties(roundTripIsl.srcSwitch.dpId, roundTripIsl.srcPort,\n+                new PortPropertiesDto(discoveryEnabled: true))\n+        northboundV2.updatePortProperties(roundTripIsl.dstSwitch.dpId, roundTripIsl.dstPort,\n+                new PortPropertiesDto(discoveryEnabled: true))\n+        portDiscoveryIsEnabledOnSrcPort = true\n+        portDiscoveryIsEnabledOnDstPort = true\n+\n+        then: \"ISL is rediscovered\"\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            def links = northbound.getAllLinks()\n+            def islInfoForward = islUtils.getIslInfo(links, roundTripIsl).get()\n+            def islInfoReverse = islUtils.getIslInfo(links, roundTripIsl.reversed).get()\n+            assert islInfoForward.state == DISCOVERED\n+            assert islInfoForward.actualState == DISCOVERED\n+            assert islInfoReverse.state == DISCOVERED\n+            assert islInfoReverse.actualState == DISCOVERED\n+        }\n+\n+        cleanup:\n+        !portDiscoveryIsEnabledOnSrcPort && northboundV2.updatePortProperties(roundTripIsl.srcSwitch.dpId,\n+                roundTripIsl.srcPort, new PortPropertiesDto(discoveryEnabled: true))\n+        !portDiscoveryIsEnabledOnDstPort && northboundV2.updatePortProperties(roundTripIsl.dstSwitch.dpId,\n+                roundTripIsl.dstPort, new PortPropertiesDto(discoveryEnabled: true))\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert islUtils.getIslInfo(roundTripIsl).get().state == DISCOVERED\n+            assert islUtils.getIslInfo(roundTripIsl.reversed).get().state == DISCOVERED\n+        }\n+    }\n+\n+    @Tidy\n+    def \"Able to delete failed ISL without force if it was discovered with disabled portDiscovery on a switch\"() {\n+        given: \"A deleted round trip latency ISL\"\n+        Isl roundTripIsl = topology.islsForActiveSwitches.find {\n+            it.srcSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD) &&\n+                    it.dstSwitch.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD)\n+        } ?: assumeTrue(\"Wasn't able to find a suitable link\", false)\n+\n+        antiflap.portDown(roundTripIsl.srcSwitch.dpId, roundTripIsl.srcPort)\n+        Wrappers.wait(WAIT_OFFSET) {\n+            def links = northbound.getAllLinks()\n+            assert islUtils.getIslInfo(links, roundTripIsl).get().state == FAILED\n+            assert islUtils.getIslInfo(links, roundTripIsl.reversed).get().state == FAILED\n+        }\n+        def portIsUp = false\n+        northbound.deleteLink(islUtils.toLinkParameters(roundTripIsl))\n+        Wrappers.wait(WAIT_OFFSET) {\n+            def links = northbound.getAllLinks()\n+            assert !islUtils.getIslInfo(links, roundTripIsl).present\n+        }\n+\n+        when: \"Disable portDiscovery on the srcPort\"\n+        northboundV2.updatePortProperties(roundTripIsl.srcSwitch.dpId, roundTripIsl.srcPort,\n+                new PortPropertiesDto(discoveryEnabled: false))\n+        def portDiscoveryIsEnabledOnSrcPort = false\n+\n+        and: \"Revive the ISL back (bring switch port up)\"\n+        antiflap.portUp(roundTripIsl.srcSwitch.dpId, roundTripIsl.srcPort)\n+        portIsUp = true\n+\n+        then: \"The ISL is rediscovered\"\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            def links = northbound.getAllLinks()\n+            assert islUtils.getIslInfo(links, roundTripIsl).get().state == DISCOVERED\n+            assert islUtils.getIslInfo(links, roundTripIsl.reversed).get().state == DISCOVERED\n+        }\n+\n+        and: \"The src/dst switches are valid\"\n+        //https://github.com/telstra/open-kilda/issues/3906\n+//        [roundTripIsl.srcSwitch, roundTripIsl.dstSwitch].each {\n+//            def validateInfo = northbound.validateSwitch(it.dpId).rules\n+//            assert validateInfo.missing.empty\n+//            assert validateInfo.excess.empty\n+//            assert validateInfo.misconfigured.empty\n+//        }\n+\n+        when: \"Disable portDiscovery on the dstPort\"\n+        northboundV2.updatePortProperties(roundTripIsl.dstSwitch.dpId, roundTripIsl.dstPort,\n+                new PortPropertiesDto(discoveryEnabled: false))\n+        def portDiscoveryIsEnabledOnDstPort = false\n+\n+        then: \"The ISL is failed\"\n+        Wrappers.wait(WAIT_OFFSET) {\n+            def links = northbound.getAllLinks()\n+            assert islUtils.getIslInfo(links, roundTripIsl).get().state == FAILED\n+            assert islUtils.getIslInfo(links, roundTripIsl.reversed).get().state == FAILED\n+        }\n+\n+        when: \"Delete the ISL without the 'force' option\"\n+        northbound.deleteLink(islUtils.toLinkParameters(roundTripIsl))\n+\n+        then: \"The ISL is deleted\"\n+        Wrappers.wait(WAIT_OFFSET) {\n+            def links = northbound.getAllLinks()\n+            assert !islUtils.getIslInfo(links, roundTripIsl).present\n+        }\n+\n+        cleanup:\n+        !portDiscoveryIsEnabledOnSrcPort && northboundV2.updatePortProperties(roundTripIsl.srcSwitch.dpId,", "originalCommit": "5dd6878c6d81dbfe5a40271b73e17c25f99b64cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc4ODA4Ng==", "url": "https://github.com/telstra/open-kilda/pull/3867#discussion_r546788086", "bodyText": "fixed", "author": "andriidovhan", "createdAt": "2020-12-21T16:01:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3NTAxMw=="}], "type": "inlineReview"}, {"oid": "b5e71234c9ae1c39d42b5bdf7099145ba4d14932", "url": "https://github.com/telstra/open-kilda/commit/b5e71234c9ae1c39d42b5bdf7099145ba4d14932", "message": "tests for rtl and portDiscovery", "committedDate": "2020-12-21T16:00:20Z", "type": "forcePushed"}, {"oid": "311defc4a040540d42c8d5d25aebaeb95a1ead9d", "url": "https://github.com/telstra/open-kilda/commit/311defc4a040540d42c8d5d25aebaeb95a1ead9d", "message": "tests for rtl and portDiscovery", "committedDate": "2020-12-30T08:26:10Z", "type": "commit"}, {"oid": "311defc4a040540d42c8d5d25aebaeb95a1ead9d", "url": "https://github.com/telstra/open-kilda/commit/311defc4a040540d42c8d5d25aebaeb95a1ead9d", "message": "tests for rtl and portDiscovery", "committedDate": "2020-12-30T08:26:10Z", "type": "forcePushed"}]}