{"pr_number": 3380, "pr_title": "Test/path swap to hs", "pr_createdAt": "2020-04-10T11:05:05Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3380", "timeline": [{"oid": "6a9bb94635c3c5c225af3f977fa7fe1f7aadec51", "url": "https://github.com/telstra/open-kilda/commit/6a9bb94635c3c5c225af3f977fa7fe1f7aadec51", "message": "draft test", "committedDate": "2020-04-16T07:36:52Z", "type": "forcePushed"}, {"oid": "74014b3bfef856a3f44ce2dbe27f1041ded153bf", "url": "https://github.com/telstra/open-kilda/commit/74014b3bfef856a3f44ce2dbe27f1041ded153bf", "message": "add tests for update/swapPath retry", "committedDate": "2020-04-17T13:42:32Z", "type": "forcePushed"}, {"oid": "bb9f021d41c0f8e6474ae862e60322ace0c5ab56", "url": "https://github.com/telstra/open-kilda/commit/bb9f021d41c0f8e6474ae862e60322ace0c5ab56", "message": "add tests for update/swapPath retry", "committedDate": "2020-04-17T13:47:41Z", "type": "forcePushed"}, {"oid": "8408600462d92302a3f65521564258c41e04e528", "url": "https://github.com/telstra/open-kilda/commit/8408600462d92302a3f65521564258c41e04e528", "message": "add tests for update/swapPath retry", "committedDate": "2020-04-21T05:36:50Z", "type": "forcePushed"}, {"oid": "1a05edd7932b991b081f8ab556c418540edc5b9a", "url": "https://github.com/telstra/open-kilda/commit/1a05edd7932b991b081f8ab556c418540edc5b9a", "message": "add tests for update/swapPath retry", "committedDate": "2020-04-21T07:23:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3MzYwOQ==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412773609", "bodyText": "'two switches' or 'switch pair'", "author": "rtretyak", "createdAt": "2020-04-22T08:20:05Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/RollbacksSpec.groovy", "diffHunk": "@@ -112,4 +117,140 @@ and at least 1 path must remain safe\"\n         northbound.deleteLinkProps(northbound.getAllLinkProps())\n         database.resetCosts()\n     }\n+\n+    @Tidy\n+    @Unroll\n+    def \"System tries to retry #data.description if previous one is failed\"(){\n+        given: \"Two active neighboring switch pair with two diverse paths at least\"", "originalCommit": "1a05edd7932b991b081f8ab556c418540edc5b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg0MDc3OA==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412840778", "bodyText": "two switches", "author": "andriidovhan", "createdAt": "2020-04-22T09:53:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3MzYwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4MzIxOQ==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412783219", "bodyText": "it will be good to have one more check for this when searching a swPair. Otherwise you can pick 2 switches with parallel isls and no 2+ switch paths", "author": "rtretyak", "createdAt": "2020-04-22T08:33:07Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/RollbacksSpec.groovy", "diffHunk": "@@ -112,4 +117,140 @@ and at least 1 path must remain safe\"\n         northbound.deleteLinkProps(northbound.getAllLinkProps())\n         database.resetCosts()\n     }\n+\n+    @Tidy\n+    @Unroll\n+    def \"System tries to retry #data.description if previous one is failed\"(){\n+        given: \"Two active neighboring switch pair with two diverse paths at least\"\n+        def allPaths\n+        def swPair = topologyHelper.getAllNeighboringSwitchPairs().find {\n+            allPaths = it.paths\n+            allPaths.unique(false) { a, b -> a.intersect(b) == [] ? 1 : 0 }.size() >= 2\n+        }\n+\n+        List<PathNode> mainPath = allPaths.min { it.size() }\n+        //find path with more than two switches\n+        List<PathNode> protectedPath = allPaths.findAll { it != mainPath && it.size() != 2 }.min { it.size() }", "originalCommit": "1a05edd7932b991b081f8ab556c418540edc5b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkzMTAzNg==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412931036", "bodyText": "assumeTrue was added\n\nOtherwise you can pick 2 switches with parallel isls\n\nI guess it is not possible due to it.size() != 2", "author": "andriidovhan", "createdAt": "2020-04-22T12:18:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4MzIxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkzNTY2Nw==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412935667", "bodyText": "allPaths between your two switches are not guaranteed to have a path longer than 2. In this case your findAll will become an empty list. It is the case when two switches have 2 parallel isls and one of the switches don't have other isls.", "author": "rtretyak", "createdAt": "2020-04-22T12:25:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4MzIxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1NzY4MQ==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412957681", "bodyText": "fixed completely", "author": "andriidovhan", "createdAt": "2020-04-22T12:56:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4MzIxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5MDY3OA==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412790678", "bodyText": "line above is not adding anything to broughtDownPorts. Moreover, all this is very obfuscated, to be honest I cannot really picture what is happening on lines 137-143. Must be simplified. Work with involvedIsls instead:\ndef otherIsls = allPaths.findAll { it != mainPath && it != protectedPath }.collect { pathHelper.getInvolvedIsls(it).first() }.unique { a, b -> a == b || a == b.reversed ? 0 : 1 }\notherIsls.each { antiflap.portDown(it.srcSwitch, it.srcPort) }\n\nsimple, readable, more compact, better result (break all paths, not only alternative ports on src switch)", "author": "rtretyak", "createdAt": "2020-04-22T08:43:30Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/RollbacksSpec.groovy", "diffHunk": "@@ -112,4 +117,140 @@ and at least 1 path must remain safe\"\n         northbound.deleteLinkProps(northbound.getAllLinkProps())\n         database.resetCosts()\n     }\n+\n+    @Tidy\n+    @Unroll\n+    def \"System tries to retry #data.description if previous one is failed\"(){\n+        given: \"Two active neighboring switch pair with two diverse paths at least\"\n+        def allPaths\n+        def swPair = topologyHelper.getAllNeighboringSwitchPairs().find {\n+            allPaths = it.paths\n+            allPaths.unique(false) { a, b -> a.intersect(b) == [] ? 1 : 0 }.size() >= 2\n+        }\n+\n+        List<PathNode> mainPath = allPaths.min { it.size() }\n+        //find path with more than two switches\n+        List<PathNode> protectedPath = allPaths.findAll { it != mainPath && it.size() != 2 }.min { it.size() }\n+\n+        and: \"All alternative paths unavailable (bring ports down on the source switch)\"\n+        List<PathNode> broughtDownPorts = []\n+        allPaths.findAll {\n+            it != mainPath && it != protectedPath && it.first() != protectedPath.first()\n+        }*.first().unique()\n+        // it.size() != 2 -> avoid paths with one link, these links are already added to broughtDownPorts in line above", "originalCommit": "1a05edd7932b991b081f8ab556c418540edc5b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4ODM2Mg==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412888362", "bodyText": "refactored\ndef broughtDownPorts = []\ndef otherIsls = []\ndef involvedIsls = (pathHelper.getInvolvedIsls(mainPath) + pathHelper.getInvolvedIsls(protectedPath)).unique()\nallPaths.findAll { it != mainPath && it != protectedPath }.each {\n     pathHelper.getInvolvedIsls(it).findAll { !(it in involvedIsls || it.reversed in involvedIsls) }.each {\n         otherIsls.add(it)\n     }\n}\nbroughtDownPorts = otherIsls.unique { a, b -> a == b || a == b.reversed ? 0 : 1 }\nbroughtDownPorts.every { antiflap.portDown(it.srcSwitch.dpId, it.srcPort) }", "author": "andriidovhan", "createdAt": "2020-04-22T11:09:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5MDY3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5NTE3NA==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412795174", "bodyText": "dst switch", "author": "rtretyak", "createdAt": "2020-04-22T08:49:27Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/RollbacksSpec.groovy", "diffHunk": "@@ -112,4 +117,140 @@ and at least 1 path must remain safe\"\n         northbound.deleteLinkProps(northbound.getAllLinkProps())\n         database.resetCosts()\n     }\n+\n+    @Tidy\n+    @Unroll\n+    def \"System tries to retry #data.description if previous one is failed\"(){\n+        given: \"Two active neighboring switch pair with two diverse paths at least\"\n+        def allPaths\n+        def swPair = topologyHelper.getAllNeighboringSwitchPairs().find {\n+            allPaths = it.paths\n+            allPaths.unique(false) { a, b -> a.intersect(b) == [] ? 1 : 0 }.size() >= 2\n+        }\n+\n+        List<PathNode> mainPath = allPaths.min { it.size() }\n+        //find path with more than two switches\n+        List<PathNode> protectedPath = allPaths.findAll { it != mainPath && it.size() != 2 }.min { it.size() }\n+\n+        and: \"All alternative paths unavailable (bring ports down on the source switch)\"\n+        List<PathNode> broughtDownPorts = []\n+        allPaths.findAll {\n+            it != mainPath && it != protectedPath && it.first() != protectedPath.first()\n+        }*.first().unique()\n+        // it.size() != 2 -> avoid paths with one link, these links are already added to broughtDownPorts in line above\n+        allPaths.findAll {\n+            it != mainPath && it != protectedPath  && it.last() != protectedPath.last() && it.size() != 2\n+        }*.last().unique().each { broughtDownPorts.add(it) }\n+        broughtDownPorts.each { antiflap.portDown(it.switchId, it.portNo) }\n+        Wrappers.wait(WAIT_OFFSET) {\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.FAILED\n+            }.size() == broughtDownPorts.size() * 2\n+        }\n+\n+        and: \"A protected flow\"\n+        /** At this point we have the following topology:\n+         *\n+         *   srcSwitch - - - - - dstSwitch <- swToManipulate\n+         *          \\              /\n+         *           \\           /\n+         *           transitSwitch\n+         *\n+         **/\n+        def flow = flowHelperV2.randomFlow(swPair)\n+        flow.allocateProtectedPath = true\n+        flowHelperV2.addFlow(flow)\n+        def flowPathInfo = northbound.getFlowPath(flow.flowId)\n+        assert pathHelper.convert(flowPathInfo) == mainPath\n+        assert pathHelper.convert(flowPathInfo.protectedPath) == protectedPath\n+\n+        and: \"Disconnect dst switch transit switch on protected path\"", "originalCommit": "1a05edd7932b991b081f8ab556c418540edc5b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg0MzExNQ==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412843115", "bodyText": "my bad(", "author": "andriidovhan", "createdAt": "2020-04-22T09:57:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5NTE3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5NTU4Mg==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412795582", "bodyText": "remove", "author": "rtretyak", "createdAt": "2020-04-22T08:50:02Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/RollbacksSpec.groovy", "diffHunk": "@@ -112,4 +117,140 @@ and at least 1 path must remain safe\"\n         northbound.deleteLinkProps(northbound.getAllLinkProps())\n         database.resetCosts()\n     }\n+\n+    @Tidy\n+    @Unroll\n+    def \"System tries to retry #data.description if previous one is failed\"(){\n+        given: \"Two active neighboring switch pair with two diverse paths at least\"\n+        def allPaths\n+        def swPair = topologyHelper.getAllNeighboringSwitchPairs().find {\n+            allPaths = it.paths\n+            allPaths.unique(false) { a, b -> a.intersect(b) == [] ? 1 : 0 }.size() >= 2\n+        }\n+\n+        List<PathNode> mainPath = allPaths.min { it.size() }\n+        //find path with more than two switches\n+        List<PathNode> protectedPath = allPaths.findAll { it != mainPath && it.size() != 2 }.min { it.size() }\n+\n+        and: \"All alternative paths unavailable (bring ports down on the source switch)\"\n+        List<PathNode> broughtDownPorts = []\n+        allPaths.findAll {\n+            it != mainPath && it != protectedPath && it.first() != protectedPath.first()\n+        }*.first().unique()\n+        // it.size() != 2 -> avoid paths with one link, these links are already added to broughtDownPorts in line above\n+        allPaths.findAll {\n+            it != mainPath && it != protectedPath  && it.last() != protectedPath.last() && it.size() != 2\n+        }*.last().unique().each { broughtDownPorts.add(it) }\n+        broughtDownPorts.each { antiflap.portDown(it.switchId, it.portNo) }\n+        Wrappers.wait(WAIT_OFFSET) {\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.FAILED\n+            }.size() == broughtDownPorts.size() * 2\n+        }\n+\n+        and: \"A protected flow\"\n+        /** At this point we have the following topology:\n+         *\n+         *   srcSwitch - - - - - dstSwitch <- swToManipulate\n+         *          \\              /\n+         *           \\           /\n+         *           transitSwitch\n+         *\n+         **/\n+        def flow = flowHelperV2.randomFlow(swPair)\n+        flow.allocateProtectedPath = true\n+        flowHelperV2.addFlow(flow)\n+        def flowPathInfo = northbound.getFlowPath(flow.flowId)\n+        assert pathHelper.convert(flowPathInfo) == mainPath\n+        assert pathHelper.convert(flowPathInfo.protectedPath) == protectedPath\n+\n+        and: \"Disconnect dst switch transit switch on protected path\"\n+        def swToManipulate = swPair.dst\n+        def blockData = switchHelper.knockoutSwitch(swToManipulate, mgmtFlManager)\n+        def isSwitchActivated = false\n+\n+        when: \"Mark the transit switch as ACTIVE in db\"\n+        database.setSwitchStatus(swToManipulate.dpId, SwitchStatus.ACTIVE)\n+\n+        and: \"Init flow #data.description\"\n+        data.action(flow)\n+\n+        then: \"System retried to #data.description\"\n+        Wrappers.wait(WAIT_OFFSET) {\n+            assert northbound.getFlowHistory(flow.flowId).findAll {\n+                it.action == data.historyAction\n+            }.last().histories*.details.findAll{ it =~ /.+ Retrying/}.size() == data.historySize\n+            println(data.historySize)", "originalCommit": "1a05edd7932b991b081f8ab556c418540edc5b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg0NzI1Mg==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412847252", "bodyText": "what a shame, my fault", "author": "andriidovhan", "createdAt": "2020-04-22T10:03:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5NTU4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5NzU0OA==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412797548", "bodyText": "I just don't feel that 'Disconnect dst switch' is 'given', and 'Mark the transit switch as ACTIVE in db' is 'when'. Whether make them both 'when' or make them both 'given' or just combine them into 1 step. Not sure why you decide to separate them that much", "author": "rtretyak", "createdAt": "2020-04-22T08:52:39Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/RollbacksSpec.groovy", "diffHunk": "@@ -112,4 +117,140 @@ and at least 1 path must remain safe\"\n         northbound.deleteLinkProps(northbound.getAllLinkProps())\n         database.resetCosts()\n     }\n+\n+    @Tidy\n+    @Unroll\n+    def \"System tries to retry #data.description if previous one is failed\"(){\n+        given: \"Two active neighboring switch pair with two diverse paths at least\"\n+        def allPaths\n+        def swPair = topologyHelper.getAllNeighboringSwitchPairs().find {\n+            allPaths = it.paths\n+            allPaths.unique(false) { a, b -> a.intersect(b) == [] ? 1 : 0 }.size() >= 2\n+        }\n+\n+        List<PathNode> mainPath = allPaths.min { it.size() }\n+        //find path with more than two switches\n+        List<PathNode> protectedPath = allPaths.findAll { it != mainPath && it.size() != 2 }.min { it.size() }\n+\n+        and: \"All alternative paths unavailable (bring ports down on the source switch)\"\n+        List<PathNode> broughtDownPorts = []\n+        allPaths.findAll {\n+            it != mainPath && it != protectedPath && it.first() != protectedPath.first()\n+        }*.first().unique()\n+        // it.size() != 2 -> avoid paths with one link, these links are already added to broughtDownPorts in line above\n+        allPaths.findAll {\n+            it != mainPath && it != protectedPath  && it.last() != protectedPath.last() && it.size() != 2\n+        }*.last().unique().each { broughtDownPorts.add(it) }\n+        broughtDownPorts.each { antiflap.portDown(it.switchId, it.portNo) }\n+        Wrappers.wait(WAIT_OFFSET) {\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.FAILED\n+            }.size() == broughtDownPorts.size() * 2\n+        }\n+\n+        and: \"A protected flow\"\n+        /** At this point we have the following topology:\n+         *\n+         *   srcSwitch - - - - - dstSwitch <- swToManipulate\n+         *          \\              /\n+         *           \\           /\n+         *           transitSwitch\n+         *\n+         **/\n+        def flow = flowHelperV2.randomFlow(swPair)\n+        flow.allocateProtectedPath = true\n+        flowHelperV2.addFlow(flow)\n+        def flowPathInfo = northbound.getFlowPath(flow.flowId)\n+        assert pathHelper.convert(flowPathInfo) == mainPath\n+        assert pathHelper.convert(flowPathInfo.protectedPath) == protectedPath\n+\n+        and: \"Disconnect dst switch transit switch on protected path\"\n+        def swToManipulate = swPair.dst\n+        def blockData = switchHelper.knockoutSwitch(swToManipulate, mgmtFlManager)\n+        def isSwitchActivated = false\n+\n+        when: \"Mark the transit switch as ACTIVE in db\"", "originalCommit": "1a05edd7932b991b081f8ab556c418540edc5b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg0NjAxMw==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412846013", "bodyText": "fixed", "author": "andriidovhan", "createdAt": "2020-04-22T10:01:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5NzU0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5ODgwMA==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412798800", "bodyText": "retriesAmount?", "author": "rtretyak", "createdAt": "2020-04-22T08:54:23Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/RollbacksSpec.groovy", "diffHunk": "@@ -112,4 +117,140 @@ and at least 1 path must remain safe\"\n         northbound.deleteLinkProps(northbound.getAllLinkProps())\n         database.resetCosts()\n     }\n+\n+    @Tidy\n+    @Unroll\n+    def \"System tries to retry #data.description if previous one is failed\"(){\n+        given: \"Two active neighboring switch pair with two diverse paths at least\"\n+        def allPaths\n+        def swPair = topologyHelper.getAllNeighboringSwitchPairs().find {\n+            allPaths = it.paths\n+            allPaths.unique(false) { a, b -> a.intersect(b) == [] ? 1 : 0 }.size() >= 2\n+        }\n+\n+        List<PathNode> mainPath = allPaths.min { it.size() }\n+        //find path with more than two switches\n+        List<PathNode> protectedPath = allPaths.findAll { it != mainPath && it.size() != 2 }.min { it.size() }\n+\n+        and: \"All alternative paths unavailable (bring ports down on the source switch)\"\n+        List<PathNode> broughtDownPorts = []\n+        allPaths.findAll {\n+            it != mainPath && it != protectedPath && it.first() != protectedPath.first()\n+        }*.first().unique()\n+        // it.size() != 2 -> avoid paths with one link, these links are already added to broughtDownPorts in line above\n+        allPaths.findAll {\n+            it != mainPath && it != protectedPath  && it.last() != protectedPath.last() && it.size() != 2\n+        }*.last().unique().each { broughtDownPorts.add(it) }\n+        broughtDownPorts.each { antiflap.portDown(it.switchId, it.portNo) }\n+        Wrappers.wait(WAIT_OFFSET) {\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.FAILED\n+            }.size() == broughtDownPorts.size() * 2\n+        }\n+\n+        and: \"A protected flow\"\n+        /** At this point we have the following topology:\n+         *\n+         *   srcSwitch - - - - - dstSwitch <- swToManipulate\n+         *          \\              /\n+         *           \\           /\n+         *           transitSwitch\n+         *\n+         **/\n+        def flow = flowHelperV2.randomFlow(swPair)\n+        flow.allocateProtectedPath = true\n+        flowHelperV2.addFlow(flow)\n+        def flowPathInfo = northbound.getFlowPath(flow.flowId)\n+        assert pathHelper.convert(flowPathInfo) == mainPath\n+        assert pathHelper.convert(flowPathInfo.protectedPath) == protectedPath\n+\n+        and: \"Disconnect dst switch transit switch on protected path\"\n+        def swToManipulate = swPair.dst\n+        def blockData = switchHelper.knockoutSwitch(swToManipulate, mgmtFlManager)\n+        def isSwitchActivated = false\n+\n+        when: \"Mark the transit switch as ACTIVE in db\"\n+        database.setSwitchStatus(swToManipulate.dpId, SwitchStatus.ACTIVE)\n+\n+        and: \"Init flow #data.description\"\n+        data.action(flow)\n+\n+        then: \"System retried to #data.description\"\n+        Wrappers.wait(WAIT_OFFSET) {\n+            assert northbound.getFlowHistory(flow.flowId).findAll {\n+                it.action == data.historyAction\n+            }.last().histories*.details.findAll{ it =~ /.+ Retrying/}.size() == data.historySize\n+            println(data.historySize)\n+        }\n+\n+        then: \"Flows are not rerouted\"\n+        def flowPathInfoAfterSwap = northbound.getFlowPath(flow.flowId)\n+        assert pathHelper.convert(flowPathInfoAfterSwap) == mainPath\n+        assert pathHelper.convert(flowPathInfoAfterSwap.protectedPath) == protectedPath\n+\n+        and: \"Flow is DOWN\"\n+        Wrappers.wait(WAIT_OFFSET * 2) { // delete 'wait' when 3237 is merged\n+            assert northboundV2.getFlowStatus(flow.flowId).status == FlowState.DOWN\n+        }\n+\n+        and: \"All involved switches pass switch validation(except dst switch)\"\n+        def involvedSwitchIds = pathHelper.getInvolvedSwitches(protectedPath)[0..-2]*.dpId\n+        Wrappers.wait(WAIT_OFFSET / 2) {\n+            involvedSwitchIds.each { swId ->\n+                with(northbound.validateSwitch(swId)) { validation ->\n+                    validation.verifyRuleSectionsAreEmpty([\"missing\", \"excess\", \"misconfigured\"])\n+                    validation.verifyMeterSectionsAreEmpty([\"missing\", \"excess\", \"misconfigured\"])\n+                }\n+            }\n+        }\n+\n+        when: \"Connect dst switch back to the controller\"\n+        database.setSwitchStatus(swToManipulate.dpId, SwitchStatus.INACTIVE) //set real status\n+        switchHelper.reviveSwitch(swPair.dst, blockData)\n+        isSwitchActivated = true\n+\n+        then: \"Flow is UP\"\n+        Wrappers.wait(discoveryInterval + rerouteDelay) {\n+            northboundV2.getFlowStatus(flow.flowId).status == FlowState.UP\n+        }\n+\n+        and: \"Flow is valid and pingable\"\n+        northbound.validateFlow(flow.flowId).each { direction -> assert direction.asExpected }\n+        with(northbound.pingFlow(flow.flowId, new PingInput())) {\n+            it.forward.pingSuccess\n+            it.reverse.pingSuccess\n+        }\n+\n+        cleanup:\n+        flow && flowHelperV2.deleteFlow(flow.flowId)\n+        if (!isSwitchActivated && blockData) {\n+            database.setSwitchStatus(swToManipulate.dpId, SwitchStatus.INACTIVE)\n+            switchHelper.reviveSwitch(swToManipulate, blockData)\n+        }\n+        !broughtDownPorts.empty && broughtDownPorts.every { antiflap.portUp(it.switchId, it.portNo) }\n+        Wrappers.wait(discoveryInterval + WAIT_OFFSET) {\n+            assert northbound.getActiveLinks().size() == topology.islsForActiveSwitches.size() * 2\n+        }\n+        database.resetCosts()\n+\n+        where:\n+        data << [\n+                [\n+                        description: \"update\",\n+                        historyAction: UPDATE_ACTION,\n+                        historySize: 15, //", "originalCommit": "1a05edd7932b991b081f8ab556c418540edc5b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg1MDkxMQ==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412850911", "bodyText": "ok, let it be", "author": "andriidovhan", "createdAt": "2020-04-22T10:08:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5ODgwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5OTY3NA==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412799674", "bodyText": "flow", "author": "rtretyak", "createdAt": "2020-04-22T08:55:28Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/RollbacksSpec.groovy", "diffHunk": "@@ -112,4 +117,140 @@ and at least 1 path must remain safe\"\n         northbound.deleteLinkProps(northbound.getAllLinkProps())\n         database.resetCosts()\n     }\n+\n+    @Tidy\n+    @Unroll\n+    def \"System tries to retry #data.description if previous one is failed\"(){\n+        given: \"Two active neighboring switch pair with two diverse paths at least\"\n+        def allPaths\n+        def swPair = topologyHelper.getAllNeighboringSwitchPairs().find {\n+            allPaths = it.paths\n+            allPaths.unique(false) { a, b -> a.intersect(b) == [] ? 1 : 0 }.size() >= 2\n+        }\n+\n+        List<PathNode> mainPath = allPaths.min { it.size() }\n+        //find path with more than two switches\n+        List<PathNode> protectedPath = allPaths.findAll { it != mainPath && it.size() != 2 }.min { it.size() }\n+\n+        and: \"All alternative paths unavailable (bring ports down on the source switch)\"\n+        List<PathNode> broughtDownPorts = []\n+        allPaths.findAll {\n+            it != mainPath && it != protectedPath && it.first() != protectedPath.first()\n+        }*.first().unique()\n+        // it.size() != 2 -> avoid paths with one link, these links are already added to broughtDownPorts in line above\n+        allPaths.findAll {\n+            it != mainPath && it != protectedPath  && it.last() != protectedPath.last() && it.size() != 2\n+        }*.last().unique().each { broughtDownPorts.add(it) }\n+        broughtDownPorts.each { antiflap.portDown(it.switchId, it.portNo) }\n+        Wrappers.wait(WAIT_OFFSET) {\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.FAILED\n+            }.size() == broughtDownPorts.size() * 2\n+        }\n+\n+        and: \"A protected flow\"\n+        /** At this point we have the following topology:\n+         *\n+         *   srcSwitch - - - - - dstSwitch <- swToManipulate\n+         *          \\              /\n+         *           \\           /\n+         *           transitSwitch\n+         *\n+         **/\n+        def flow = flowHelperV2.randomFlow(swPair)\n+        flow.allocateProtectedPath = true\n+        flowHelperV2.addFlow(flow)\n+        def flowPathInfo = northbound.getFlowPath(flow.flowId)\n+        assert pathHelper.convert(flowPathInfo) == mainPath\n+        assert pathHelper.convert(flowPathInfo.protectedPath) == protectedPath\n+\n+        and: \"Disconnect dst switch transit switch on protected path\"\n+        def swToManipulate = swPair.dst\n+        def blockData = switchHelper.knockoutSwitch(swToManipulate, mgmtFlManager)\n+        def isSwitchActivated = false\n+\n+        when: \"Mark the transit switch as ACTIVE in db\"\n+        database.setSwitchStatus(swToManipulate.dpId, SwitchStatus.ACTIVE)\n+\n+        and: \"Init flow #data.description\"\n+        data.action(flow)\n+\n+        then: \"System retried to #data.description\"\n+        Wrappers.wait(WAIT_OFFSET) {\n+            assert northbound.getFlowHistory(flow.flowId).findAll {\n+                it.action == data.historyAction\n+            }.last().histories*.details.findAll{ it =~ /.+ Retrying/}.size() == data.historySize\n+            println(data.historySize)\n+        }\n+\n+        then: \"Flows are not rerouted\"", "originalCommit": "1a05edd7932b991b081f8ab556c418540edc5b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg0NzM5Ng==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412847396", "bodyText": "fixed", "author": "andriidovhan", "createdAt": "2020-04-22T10:03:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5OTY3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgwMTM3OA==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412801378", "bodyText": "I feel like this verification must come before you verify flow paths. Because now you are verifying paths on a flow which is basically still 'in progress', so those path verifications are not quite legal", "author": "rtretyak", "createdAt": "2020-04-22T08:57:48Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/RollbacksSpec.groovy", "diffHunk": "@@ -112,4 +117,140 @@ and at least 1 path must remain safe\"\n         northbound.deleteLinkProps(northbound.getAllLinkProps())\n         database.resetCosts()\n     }\n+\n+    @Tidy\n+    @Unroll\n+    def \"System tries to retry #data.description if previous one is failed\"(){\n+        given: \"Two active neighboring switch pair with two diverse paths at least\"\n+        def allPaths\n+        def swPair = topologyHelper.getAllNeighboringSwitchPairs().find {\n+            allPaths = it.paths\n+            allPaths.unique(false) { a, b -> a.intersect(b) == [] ? 1 : 0 }.size() >= 2\n+        }\n+\n+        List<PathNode> mainPath = allPaths.min { it.size() }\n+        //find path with more than two switches\n+        List<PathNode> protectedPath = allPaths.findAll { it != mainPath && it.size() != 2 }.min { it.size() }\n+\n+        and: \"All alternative paths unavailable (bring ports down on the source switch)\"\n+        List<PathNode> broughtDownPorts = []\n+        allPaths.findAll {\n+            it != mainPath && it != protectedPath && it.first() != protectedPath.first()\n+        }*.first().unique()\n+        // it.size() != 2 -> avoid paths with one link, these links are already added to broughtDownPorts in line above\n+        allPaths.findAll {\n+            it != mainPath && it != protectedPath  && it.last() != protectedPath.last() && it.size() != 2\n+        }*.last().unique().each { broughtDownPorts.add(it) }\n+        broughtDownPorts.each { antiflap.portDown(it.switchId, it.portNo) }\n+        Wrappers.wait(WAIT_OFFSET) {\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.FAILED\n+            }.size() == broughtDownPorts.size() * 2\n+        }\n+\n+        and: \"A protected flow\"\n+        /** At this point we have the following topology:\n+         *\n+         *   srcSwitch - - - - - dstSwitch <- swToManipulate\n+         *          \\              /\n+         *           \\           /\n+         *           transitSwitch\n+         *\n+         **/\n+        def flow = flowHelperV2.randomFlow(swPair)\n+        flow.allocateProtectedPath = true\n+        flowHelperV2.addFlow(flow)\n+        def flowPathInfo = northbound.getFlowPath(flow.flowId)\n+        assert pathHelper.convert(flowPathInfo) == mainPath\n+        assert pathHelper.convert(flowPathInfo.protectedPath) == protectedPath\n+\n+        and: \"Disconnect dst switch transit switch on protected path\"\n+        def swToManipulate = swPair.dst\n+        def blockData = switchHelper.knockoutSwitch(swToManipulate, mgmtFlManager)\n+        def isSwitchActivated = false\n+\n+        when: \"Mark the transit switch as ACTIVE in db\"\n+        database.setSwitchStatus(swToManipulate.dpId, SwitchStatus.ACTIVE)\n+\n+        and: \"Init flow #data.description\"\n+        data.action(flow)\n+\n+        then: \"System retried to #data.description\"\n+        Wrappers.wait(WAIT_OFFSET) {\n+            assert northbound.getFlowHistory(flow.flowId).findAll {\n+                it.action == data.historyAction\n+            }.last().histories*.details.findAll{ it =~ /.+ Retrying/}.size() == data.historySize\n+            println(data.historySize)\n+        }\n+\n+        then: \"Flows are not rerouted\"\n+        def flowPathInfoAfterSwap = northbound.getFlowPath(flow.flowId)\n+        assert pathHelper.convert(flowPathInfoAfterSwap) == mainPath\n+        assert pathHelper.convert(flowPathInfoAfterSwap.protectedPath) == protectedPath\n+\n+        and: \"Flow is DOWN\"", "originalCommit": "1a05edd7932b991b081f8ab556c418540edc5b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg1MDQyNQ==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412850425", "bodyText": "agree", "author": "andriidovhan", "createdAt": "2020-04-22T10:07:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgwMTM3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgwMzA2Mw==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412803063", "bodyText": "pretty tight timeout with no room for actual reroute operations. May be unstable", "author": "rtretyak", "createdAt": "2020-04-22T09:00:10Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/RollbacksSpec.groovy", "diffHunk": "@@ -112,4 +117,140 @@ and at least 1 path must remain safe\"\n         northbound.deleteLinkProps(northbound.getAllLinkProps())\n         database.resetCosts()\n     }\n+\n+    @Tidy\n+    @Unroll\n+    def \"System tries to retry #data.description if previous one is failed\"(){\n+        given: \"Two active neighboring switch pair with two diverse paths at least\"\n+        def allPaths\n+        def swPair = topologyHelper.getAllNeighboringSwitchPairs().find {\n+            allPaths = it.paths\n+            allPaths.unique(false) { a, b -> a.intersect(b) == [] ? 1 : 0 }.size() >= 2\n+        }\n+\n+        List<PathNode> mainPath = allPaths.min { it.size() }\n+        //find path with more than two switches\n+        List<PathNode> protectedPath = allPaths.findAll { it != mainPath && it.size() != 2 }.min { it.size() }\n+\n+        and: \"All alternative paths unavailable (bring ports down on the source switch)\"\n+        List<PathNode> broughtDownPorts = []\n+        allPaths.findAll {\n+            it != mainPath && it != protectedPath && it.first() != protectedPath.first()\n+        }*.first().unique()\n+        // it.size() != 2 -> avoid paths with one link, these links are already added to broughtDownPorts in line above\n+        allPaths.findAll {\n+            it != mainPath && it != protectedPath  && it.last() != protectedPath.last() && it.size() != 2\n+        }*.last().unique().each { broughtDownPorts.add(it) }\n+        broughtDownPorts.each { antiflap.portDown(it.switchId, it.portNo) }\n+        Wrappers.wait(WAIT_OFFSET) {\n+            assert northbound.getAllLinks().findAll {\n+                it.state == IslChangeType.FAILED\n+            }.size() == broughtDownPorts.size() * 2\n+        }\n+\n+        and: \"A protected flow\"\n+        /** At this point we have the following topology:\n+         *\n+         *   srcSwitch - - - - - dstSwitch <- swToManipulate\n+         *          \\              /\n+         *           \\           /\n+         *           transitSwitch\n+         *\n+         **/\n+        def flow = flowHelperV2.randomFlow(swPair)\n+        flow.allocateProtectedPath = true\n+        flowHelperV2.addFlow(flow)\n+        def flowPathInfo = northbound.getFlowPath(flow.flowId)\n+        assert pathHelper.convert(flowPathInfo) == mainPath\n+        assert pathHelper.convert(flowPathInfo.protectedPath) == protectedPath\n+\n+        and: \"Disconnect dst switch transit switch on protected path\"\n+        def swToManipulate = swPair.dst\n+        def blockData = switchHelper.knockoutSwitch(swToManipulate, mgmtFlManager)\n+        def isSwitchActivated = false\n+\n+        when: \"Mark the transit switch as ACTIVE in db\"\n+        database.setSwitchStatus(swToManipulate.dpId, SwitchStatus.ACTIVE)\n+\n+        and: \"Init flow #data.description\"\n+        data.action(flow)\n+\n+        then: \"System retried to #data.description\"\n+        Wrappers.wait(WAIT_OFFSET) {\n+            assert northbound.getFlowHistory(flow.flowId).findAll {\n+                it.action == data.historyAction\n+            }.last().histories*.details.findAll{ it =~ /.+ Retrying/}.size() == data.historySize\n+            println(data.historySize)\n+        }\n+\n+        then: \"Flows are not rerouted\"\n+        def flowPathInfoAfterSwap = northbound.getFlowPath(flow.flowId)\n+        assert pathHelper.convert(flowPathInfoAfterSwap) == mainPath\n+        assert pathHelper.convert(flowPathInfoAfterSwap.protectedPath) == protectedPath\n+\n+        and: \"Flow is DOWN\"\n+        Wrappers.wait(WAIT_OFFSET * 2) { // delete 'wait' when 3237 is merged\n+            assert northboundV2.getFlowStatus(flow.flowId).status == FlowState.DOWN\n+        }\n+\n+        and: \"All involved switches pass switch validation(except dst switch)\"\n+        def involvedSwitchIds = pathHelper.getInvolvedSwitches(protectedPath)[0..-2]*.dpId\n+        Wrappers.wait(WAIT_OFFSET / 2) {\n+            involvedSwitchIds.each { swId ->\n+                with(northbound.validateSwitch(swId)) { validation ->\n+                    validation.verifyRuleSectionsAreEmpty([\"missing\", \"excess\", \"misconfigured\"])\n+                    validation.verifyMeterSectionsAreEmpty([\"missing\", \"excess\", \"misconfigured\"])\n+                }\n+            }\n+        }\n+\n+        when: \"Connect dst switch back to the controller\"\n+        database.setSwitchStatus(swToManipulate.dpId, SwitchStatus.INACTIVE) //set real status\n+        switchHelper.reviveSwitch(swPair.dst, blockData)\n+        isSwitchActivated = true\n+\n+        then: \"Flow is UP\"\n+        Wrappers.wait(discoveryInterval + rerouteDelay) {", "originalCommit": "1a05edd7932b991b081f8ab556c418540edc5b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg1MDY2Nw==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412850667", "bodyText": "agree", "author": "andriidovhan", "createdAt": "2020-04-22T10:08:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgwMzA2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgyMjE5MA==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412822190", "bodyText": "to be more specific, we retry rule installation during update/swap", "author": "rtretyak", "createdAt": "2020-04-22T09:27:10Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/RollbacksSpec.groovy", "diffHunk": "@@ -112,4 +117,140 @@ and at least 1 path must remain safe\"\n         northbound.deleteLinkProps(northbound.getAllLinkProps())\n         database.resetCosts()\n     }\n+\n+    @Tidy\n+    @Unroll\n+    def \"System tries to retry #data.description if previous one is failed\"(){", "originalCommit": "1a05edd7932b991b081f8ab556c418540edc5b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg0MDgyMA==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412840820", "bodyText": "done", "author": "andriidovhan", "createdAt": "2020-04-22T09:54:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgyMjE5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgyMjg4OA==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412822888", "bodyText": "remove", "author": "rtretyak", "createdAt": "2020-04-22T09:28:10Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/RollbacksSpec.groovy", "diffHunk": "@@ -1,5 +1,8 @@\n package org.openkilda.functionaltests.spec.resilience\n \n+import static org.openkilda.functionaltests.helpers.SwitchHelper.getNorthbound", "originalCommit": "1a05edd7932b991b081f8ab556c418540edc5b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg0MTI5Nw==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412841297", "bodyText": "I forgot that it is already defined in BaseSpecification", "author": "andriidovhan", "createdAt": "2020-04-22T09:54:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgyMjg4OA=="}], "type": "inlineReview"}, {"oid": "85fd33511ec2f9d11368fb92c2911d43f0550501", "url": "https://github.com/telstra/open-kilda/commit/85fd33511ec2f9d11368fb92c2911d43f0550501", "message": "add tests for update/swapPath retry", "committedDate": "2020-04-22T11:59:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkzMTU5Mw==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412931593", "bodyText": "how 'isls' transform into 'ports' by just reducing the isls list? It is still 'brokenIsls' or 'broughtDownIsls' whatever but not 'ports'", "author": "rtretyak", "createdAt": "2020-04-22T12:19:43Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/RollbacksSpec.groovy", "diffHunk": "@@ -112,4 +118,141 @@ and at least 1 path must remain safe\"\n         northbound.deleteLinkProps(northbound.getAllLinkProps())\n         database.resetCosts()\n     }\n+\n+    @Tidy\n+    @Unroll\n+    def \"System tries to retry rule installation during #data.description if previous one is failed\"(){\n+        given: \"Two active neighboring switches with two diverse paths at least\"\n+        def allPaths\n+        def swPair = topologyHelper.getAllNeighboringSwitchPairs().find {\n+            allPaths = it.paths\n+            allPaths.unique(false) { a, b -> a.intersect(b) == [] ? 1 : 0 }.size() >= 2\n+        }\n+\n+        List<PathNode> mainPath = allPaths.min { it.size() }\n+        //find path with more than two switches\n+        List<PathNode> protectedPath = allPaths.findAll { it != mainPath && it.size() != 2 }.min { it.size() }\n+        assumeTrue(\"Unable to find a  required protectedPath\", protectedPath as boolean)\n+\n+        and: \"All alternative paths unavailable (bring ports down)\"\n+        def broughtDownPorts = []\n+        def otherIsls = []\n+        def involvedIsls = (pathHelper.getInvolvedIsls(mainPath) + pathHelper.getInvolvedIsls(protectedPath)).unique()\n+        allPaths.findAll { it != mainPath && it != protectedPath }.each {\n+            pathHelper.getInvolvedIsls(it).findAll { !(it in involvedIsls || it.reversed in involvedIsls) }.each {\n+                otherIsls.add(it)\n+            }\n+        }\n+        broughtDownPorts = otherIsls.unique { a, b -> a == b || a == b.reversed ? 0 : 1 }", "originalCommit": "85fd33511ec2f9d11368fb92c2911d43f0550501", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkzNjU1Mw==", "url": "https://github.com/telstra/open-kilda/pull/3380#discussion_r412936553", "bodyText": "fixed", "author": "andriidovhan", "createdAt": "2020-04-22T12:27:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkzMTU5Mw=="}], "type": "inlineReview"}, {"oid": "0da52d185b30f8d066601025c3777ccedcbb3fda", "url": "https://github.com/telstra/open-kilda/commit/0da52d185b30f8d066601025c3777ccedcbb3fda", "message": "add tests for update/swapPath retry", "committedDate": "2020-04-22T12:55:04Z", "type": "forcePushed"}, {"oid": "d9b03f9ecd7a0529b6bd7fa477f5e4a8eef5007c", "url": "https://github.com/telstra/open-kilda/commit/d9b03f9ecd7a0529b6bd7fa477f5e4a8eef5007c", "message": "add tests for update/swapPath retry", "committedDate": "2020-04-22T14:18:49Z", "type": "forcePushed"}, {"oid": "8aa73bea3c8f14773ad2752534972ac1fe67ccaa", "url": "https://github.com/telstra/open-kilda/commit/8aa73bea3c8f14773ad2752534972ac1fe67ccaa", "message": "add tests for update/swapPath retry", "committedDate": "2020-04-22T15:18:47Z", "type": "forcePushed"}, {"oid": "484edd75b6a4540afa9fb5f5099867878ec583ce", "url": "https://github.com/telstra/open-kilda/commit/484edd75b6a4540afa9fb5f5099867878ec583ce", "message": "add tests for update/swapPath retry", "committedDate": "2020-04-23T07:43:37Z", "type": "commit"}, {"oid": "484edd75b6a4540afa9fb5f5099867878ec583ce", "url": "https://github.com/telstra/open-kilda/commit/484edd75b6a4540afa9fb5f5099867878ec583ce", "message": "add tests for update/swapPath retry", "committedDate": "2020-04-23T07:43:37Z", "type": "forcePushed"}]}