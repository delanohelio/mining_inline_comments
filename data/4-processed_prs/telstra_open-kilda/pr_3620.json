{"pr_number": 3620, "pr_title": "fix \"System does not create flow when reverse path has different bandwidth than forward path on the second link\"", "pr_createdAt": "2020-07-10T06:57:41Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3620", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0MTYyNw==", "url": "https://github.com/telstra/open-kilda/pull/3620#discussion_r452741627", "bodyText": "Can we do this trick instead?\n        //All alternative paths for both flows are unavailable\n        def untouchableIsls = pathHelper.getInvolvedIsls(flowPath).collectMany { [it, it.reversed] }\n        def altPaths = switchPair.paths.findAll { [it, it.reverse()].every { it != flowPath }}\n        def islsToBreak = altPaths.collectMany { pathHelper.getInvolvedIsls(it) }\n                .collectMany { [it, it.reversed] }.unique()\n                .findAll { !untouchableIsls.contains(it) }.unique { [it, it.reversed].sort() }\n        withPool { islsToBreak.eachParallel { Isl isl -> antiflap.portDown(isl.srcSwitch.dpId, isl.srcPort) } }\n        Wrappers.wait(WAIT_OFFSET) {\n            assert northbound.getAllLinks().findAll { it.state == FAILED }.size() == islsToBreak.size() * 2\n        }", "author": "rtretyak", "createdAt": "2020-07-10T09:47:26Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/FlowCrudSpec.groovy", "diffHunk": "@@ -896,35 +895,36 @@ class FlowCrudSpec extends HealthCheckSpecification {\n \n         and: \"Select path for further manipulation with it\"\n         def selectedPath = switchPair.paths.max { it.size() }\n-        def altPaths = switchPair.paths.findAll { it != selectedPath }\n-\n-        and: \"Make all alternative paths unavailable (bring ports down on the src/intermediate switches)\"\n-        List<PathNode> broughtDownPortsSrcSwitch = []\n-        altPaths.findAll { it.first().portNo != selectedPath.first().portNo }.unique { it.first() }.each { path ->\n-            def src = path.first()\n-            broughtDownPortsSrcSwitch.add(src)\n-            antiflap.portDown(src.switchId, src.portNo)\n-        }\n \n-        List<PathNode> broughtDownPortsIntermSwitch = []\n-        altPaths.findAll { it.first().portNo == selectedPath.first().portNo &&\n-                it[2].portNo != selectedPath[2].portNo && it[2].switchId == selectedPath[2].switchId\n-        }.unique { it[2] }.each { path ->\n-            def src = path[2]\n-            broughtDownPortsIntermSwitch.add(src)\n-            antiflap.portDown(src.switchId, src.portNo)\n+        and: \"Make all alternative paths unavailable (bring links down on the src/intermediate switches)\"\n+        List<Isl> broughtDownIsls = []\n+        def involvedIsl = pathHelper.getInvolvedIsls(selectedPath)\n+        //link to src switch\n+        topology.islsForActiveSwitches.findAll {\n+            (it.srcSwitch.dpId == selectedPath[0].switchId || it.dstSwitch.dpId == selectedPath[0].switchId) &&\n+                    (it != involvedIsl[0])\n+        }.each { isl ->\n+            broughtDownIsls.add(isl)\n+        }\n+        //link to intermediate switch\n+        topology.islsForActiveSwitches.findAll {\n+            (it.srcSwitch.dpId == selectedPath[2].switchId || it.dstSwitch.dpId == selectedPath[2].switchId) &&\n+                    !(it in involvedIsl[0..1])\n+        }.each { isl ->\n+            broughtDownIsls.add(isl)\n         }\n+        broughtDownIsls.each { antiflap.portDown(it.srcSwitch.dpId, it.srcPort) }", "originalCommit": "0952d98b1f3dcd7d351b609733fe7863b16d678d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMjIwMQ==", "url": "https://github.com/telstra/open-kilda/pull/3620#discussion_r452822201", "bodyText": "done", "author": "andriidovhan", "createdAt": "2020-07-10T12:50:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0MTYyNw=="}], "type": "inlineReview"}, {"oid": "4efbbfd00c362ea91dbedd1ef443571e936d450f", "url": "https://github.com/telstra/open-kilda/commit/4efbbfd00c362ea91dbedd1ef443571e936d450f", "message": "fix \"System does not create flow when reverse path has different bandwidth than forward path on the second link\"", "committedDate": "2020-07-10T12:43:52Z", "type": "forcePushed"}, {"oid": "3ef8d46e6c17be51dea6821a2cf1326657b273f5", "url": "https://github.com/telstra/open-kilda/commit/3ef8d46e6c17be51dea6821a2cf1326657b273f5", "message": "fix \"System does not create flow when reverse path has different bandwidth than forward path on the second link\"", "committedDate": "2020-07-10T12:53:53Z", "type": "commit"}, {"oid": "3ef8d46e6c17be51dea6821a2cf1326657b273f5", "url": "https://github.com/telstra/open-kilda/commit/3ef8d46e6c17be51dea6821a2cf1326657b273f5", "message": "fix \"System does not create flow when reverse path has different bandwidth than forward path on the second link\"", "committedDate": "2020-07-10T12:53:53Z", "type": "forcePushed"}]}