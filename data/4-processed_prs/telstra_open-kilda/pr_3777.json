{"pr_number": 3777, "pr_title": "OrientDB schema migration toolset", "pr_createdAt": "2020-10-12T13:05:29Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3777", "timeline": [{"oid": "daad12bc81923d11cfc93ee1f5387668f3e3b899", "url": "https://github.com/telstra/open-kilda/commit/daad12bc81923d11cfc93ee1f5387668f3e3b899", "message": "OrientDB schema migration toolset\n\nNew docker container `db_migration` responsible for applying DB\nmigration for devel and for prod environments.", "committedDate": "2020-10-12T15:05:23Z", "type": "forcePushed"}, {"oid": "188c33588919fad8bc977cdab27bd2c7503174ca", "url": "https://github.com/telstra/open-kilda/commit/188c33588919fad8bc977cdab27bd2c7503174ca", "message": "OrientDB schema migration toolset\n\nNew docker container `db_migration` responsible for applying DB\nmigration for devel and for prod environments.", "committedDate": "2020-10-12T19:39:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxOTE0MA==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r504019140", "bodyText": "A typo?", "author": "sergii-iakovenko", "createdAt": "2020-10-13T14:53:40Z", "path": "src-java/build.gradle", "diffHunk": "@@ -223,6 +223,8 @@ task buildAndCopyArtifacts(type: Copy) {\n     dependsOn floodlightBuild.task(':build')\n }\n \n+task buildAnd", "originalCommit": "188c33588919fad8bc977cdab27bd2c7503174ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTczNzY3Ng==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r505737676", "bodyText": "It should be here at all, I have changed the approach I use to download dependencies so I have dropped all added artifacts from our gradle files.", "author": "surabujin", "createdAt": "2020-10-15T18:03:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxOTE0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA5NzIwNg==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r505097206", "bodyText": "2017? :)", "author": "sergii-iakovenko", "createdAt": "2020-10-15T00:33:58Z", "path": "docker/db-migration/Dockerfile", "diffHunk": "@@ -0,0 +1,78 @@\n+# Copyright 2017 Telstra Open Source", "originalCommit": "188c33588919fad8bc977cdab27bd2c7503174ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc0MDA3Ng==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r505740076", "bodyText": "A long time ago this idea instance was installed. :) Have no idea how to configure the header for Dockerfile in it.", "author": "surabujin", "createdAt": "2020-10-15T18:08:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA5NzIwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEwMDM5MA==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r505100390", "bodyText": "Not clear why we need liquibase-orientdb. From what I see (you propose to use yaml instead of XML and pure SQL instead of custom \"change\"), we don't need it.\nHere's the list of custom \"change\" introduced by the lib, do you think we will use them? https://github.com/unbroken-dome/liquibase-orientdb/tree/master/src/main/java/liquibase/change/ext", "author": "sergii-iakovenko", "createdAt": "2020-10-15T00:45:31Z", "path": "docker/db-migration/Dockerfile", "diffHunk": "@@ -0,0 +1,78 @@\n+# Copyright 2017 Telstra Open Source\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+#\n+\n+# Can't use official lisquibase image, because it's minimal version is 3.10.x, while\n+# liquebase-orientdb(https://github.com/unbroken-dome/liquibase-orientdb) plugin\n+# can work up to version 3.5.3\n+\n+FROM openjdk:11-jre-slim-buster\n+\n+# Install GPG for package vefification\n+RUN apt-get update \\\n+    && apt-get -y install gnupg wget curl\n+\n+# Add the liquibase user and step in the directory\n+RUN addgroup --gid 1001 liquibase\n+RUN adduser --disabled-password --uid 1001 --ingroup liquibase liquibase\n+\n+# Make /liquibase directory and change owner to liquibase\n+RUN mkdir /liquibase && chown liquibase /liquibase\n+WORKDIR /liquibase\n+\n+# Change to the liquibase user\n+USER liquibase\n+\n+# Latest Liquibase Release Version\n+ARG LIQUIBASE_VERSION=3.5.5\n+\n+# Download, verify, extract\n+ARG LB_SHA256=da0df7f6ea7694fb62b1448c3c734644d8d49795ff9bb7417db18bb1da5ff2c6\n+RUN set -x \\\n+  && wget -O liquibase-${LIQUIBASE_VERSION}.tar.gz \"https://github.com/liquibase/liquibase/releases/download/liquibase-parent-${LIQUIBASE_VERSION}/liquibase-${LIQUIBASE_VERSION}-bin.tar.gz\" \\\n+  && echo \"$LB_SHA256  liquibase-${LIQUIBASE_VERSION}.tar.gz\" | sha256sum -c - \\\n+  && tar -xzf liquibase-${LIQUIBASE_VERSION}.tar.gz\n+\n+# Setup GPG\n+RUN GNUPGHOME=\"$(mktemp -d)\"\n+\n+# Download JDBC libraries and plugins\n+\n+RUN wget -O /liquibase/lib/orientdb-jdbc-3.0.34-all.jar https://repo1.maven.org/maven2/com/orientechnologies/orientdb-jdbc/3.0.34/orientdb-jdbc-3.0.34-all.jar\n+RUN wget -O /liquibase/lib/liquibase-orientdb-0.3.0.jar https://dl.bintray.com/till-krullmann/tools/org/unbroken-dome/liquibase-orientdb/liquibase-orientdb/0.3.0/liquibase-orientdb-0.3.0.jar", "originalCommit": "188c33588919fad8bc977cdab27bd2c7503174ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc0MTcyNA==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r505741724", "bodyText": "LiquiBase does not work without this plugin at all. It can't even create its own tables to track applied migrations. Plus I do not insist on using sql only changesets.", "author": "surabujin", "createdAt": "2020-10-15T18:10:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEwMDM5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEwNDE5MQ==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r505104191", "bodyText": "I'd propose to distinct migration for development / production envs with separate changelog roots (e.g. migrations/root.yaml and migrations/root-develop-env.yaml).", "author": "sergii-iakovenko", "createdAt": "2020-10-15T01:00:16Z", "path": "docker/db-migration/migrate-develop.sh", "diffHunk": "@@ -0,0 +1,16 @@\n+#!/bin/sh", "originalCommit": "188c33588919fad8bc977cdab27bd2c7503174ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc0Mjk4Mg==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r505742982", "bodyText": "Didn't get. How we will \"move\" devel migrations into prod migrations in this schema?", "author": "surabujin", "createdAt": "2020-10-15T18:12:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEwNDE5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzMDA1OA==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r509830058", "bodyText": "We will have 2 root changesets:\n\nroot.yaml is for prod migrations only, and includes schema upgrades / downgrades.\nroot-develop-env.yaml for dev and all-in-one. It includes initial-access-management.yaml, prehistory.yaml and root.yaml.\n\nPlease, check this out - https://github.com/liquibase/liquibase/blob/master/liquibase-core/src/test/resources/liquibase/parser/core/yaml/nestedChangeLog.yaml", "author": "sergii-iakovenko", "createdAt": "2020-10-22T01:42:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEwNDE5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDczMTM3Mw==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r510731373", "bodyText": "There is an issue with devel migrations set. Some subset of queries must be executed from root user (to create required user and roles). If I will merge all devel migrations in one set, I had to run them from root user. I would like not to do it and keep grants for devel user and prod user the same, so we can detect lack of access on PR level and not on RC or even prod level.", "author": "surabujin", "createdAt": "2020-10-23T08:46:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEwNDE5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEwNDc4OA==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r505104788", "bodyText": "I'd recommend to use descriptive ids for changesets.", "author": "sergii-iakovenko", "createdAt": "2020-10-15T01:02:42Z", "path": "docker/db-migration/migrations/initial-access-management.yaml", "diffHunk": "@@ -0,0 +1,13 @@\n+---\n+databaseChangeLog:\n+  - changeSet:\n+      id: 1", "originalCommit": "188c33588919fad8bc977cdab27bd2c7503174ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc0MzkwNw==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r505743907", "bodyText": "done, maybe.", "author": "surabujin", "createdAt": "2020-10-15T18:13:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEwNDc4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEwNTE5Mw==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r505105193", "bodyText": "I'd recommend to stick to the \"one change per changeset\" rule. https://www.liquibase.org/get-started/best-practices", "author": "sergii-iakovenko", "createdAt": "2020-10-15T01:04:20Z", "path": "docker/db-migration/migrations/initial-access-management.yaml", "diffHunk": "@@ -0,0 +1,13 @@\n+---\n+databaseChangeLog:\n+  - changeSet:\n+      id: 1\n+      author: surabujin\n+      changes:\n+        - sql: \"INSERT INTO ORole SET name = 'kilda-role', mode = 0, inheritedRole = (SELECT FROM ORole WHERE name = 'writer')\"", "originalCommit": "188c33588919fad8bc977cdab27bd2c7503174ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc0NTEzNw==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r505745137", "bodyText": "I would like to keep meaningful transactions i.e. all required in one transaction should go in one changeset.", "author": "surabujin", "createdAt": "2020-10-15T18:14:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEwNTE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzMTA5NQ==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r509831095", "bodyText": "Ok. But this may complicate writing of rollback scripts.", "author": "sergii-iakovenko", "createdAt": "2020-10-22T01:46:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEwNTE5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEwOTA2OA==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r505109068", "bodyText": "Let's consider tagging as the rollback strategy. See https://docs.liquibase.com/change-types/community/tag-database.html", "author": "sergii-iakovenko", "createdAt": "2020-10-15T01:19:41Z", "path": "docker/db-migration/migrate.sh", "diffHunk": "@@ -0,0 +1,15 @@\n+#!/bin/sh\n+\n+set -e\n+\n+cd /liquibase\n+\n+DB_NAME=\"${KILDA_ORIENTDB_DB_NAME:-kilda}\"\n+DB_HOST=\"${KILDA_ORIENTDB_HOST:-odb3.pendev}\"\n+\n+echo \"Apply main migrations set (root.yaml)\"\n+./liquibase --username=\"${KILDA_ORIENTDB_USER:-kilda}\" --password=\"${KILDA_ORIENTDB_PASSWORD:-kilda}\" \\\n+  --url=jdbc:orient:remote:\"${DB_HOST}/${DB_NAME}\" \\\n+  --driver=com.orientechnologies.orient.jdbc.OrientJdbcDriver --changeLogFile=migrations/root.yaml update", "originalCommit": "188c33588919fad8bc977cdab27bd2c7503174ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc0NjI5Mg==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r505746292", "bodyText": "ok. There is no actual migration here, so I will try to describe it in README.", "author": "surabujin", "createdAt": "2020-10-15T18:15:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEwOTA2OA=="}], "type": "inlineReview"}, {"oid": "ef969667d73522f3e79589dc3a58c60257c07a25", "url": "https://github.com/telstra/open-kilda/commit/ef969667d73522f3e79589dc3a58c60257c07a25", "message": "OrientDB schema migration toolset\n\nNew docker container `db_migration` responsible for applying DB\nmigration for devel and for prod environments.", "committedDate": "2020-10-15T18:44:05Z", "type": "forcePushed"}, {"oid": "2f4198c08ccc667ed8f4fd20af2787baf809f64c", "url": "https://github.com/telstra/open-kilda/commit/2f4198c08ccc667ed8f4fd20af2787baf809f64c", "message": "OrientDB schema migration toolset\n\nNew docker container `db_migration` responsible for applying DB\nmigration for devel and for prod environments.", "committedDate": "2020-10-16T07:03:12Z", "type": "forcePushed"}, {"oid": "f0c59667dc91a02e58b536045e1e09b6397ae70c", "url": "https://github.com/telstra/open-kilda/commit/f0c59667dc91a02e58b536045e1e09b6397ae70c", "message": "OrientDB schema migration toolset\n\nNew docker container `db_migration` responsible for applying DB\nmigration for devel and for prod environments.", "committedDate": "2020-10-18T17:58:40Z", "type": "forcePushed"}, {"oid": "5c607288333cdc485668af846dfe892eaeac7336", "url": "https://github.com/telstra/open-kilda/commit/5c607288333cdc485668af846dfe892eaeac7336", "message": "OrientDB schema migration toolset\n\nNew docker container `db_migration` responsible for applying DB\nmigration for devel and for prod environments.", "committedDate": "2020-10-19T17:31:23Z", "type": "forcePushed"}, {"oid": "2c61d2cf813255707bee5629832b76c14e63648f", "url": "https://github.com/telstra/open-kilda/commit/2c61d2cf813255707bee5629832b76c14e63648f", "message": "OrientDB schema migration toolset\n\nNew docker container `db_migration` responsible for applying DB\nmigration for devel and for prod environments.", "committedDate": "2020-10-20T12:12:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzODM1Nw==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r509138357", "bodyText": "why do we need resolve conf in a container?", "author": "timofei-durakov", "createdAt": "2020-10-21T09:41:54Z", "path": "docker/db-migration/migrations/README.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# OrientDB migrations\n+\n+## Migration sets:\n+* `initial-access-management.yaml` - create required roles and users, executed from `root` user, applied only on dev \n+  environment.\n+* `prehixtory.yaml` - migration steps already applied to the prod DB on the moment when this migration toolset created, \n+  applied to the dev environment \n+* `root.yaml` - main migration set, applied on all environments.\n+\n+## migrations concepts\n+* use `yaml` format\n+* do not include `changeSet` entries directly into `root.yaml` - create a separate migration file for each migration and \n+  include it into `root.yaml`\n+* put all request that must be applied as one transaction inside one `changeSet`\n+* filename + changeSet id + author together represents a unique identifier for changeSet, used by `liquibase` to track\n+  the history of migration, so you `id` records must be unique for the migration file\n+* name migration files as `NNN-human-readable-description.yaml`, where `NNN` is a decimal digit with leading zeros (for\n+  natural alphanumeric file name sorting)\n+* add `tagDatabase` changeSet at the start of your migration change sets list, it will be used as pointer for rollback\n+  operations\n+\n+## Examples\n+\n+migration file `001-feature-ABC.yaml`\n+```yaml\n+databaseChangeLog:\n+  - changeSet:\n+      id: some-id\n+      author: UNKNOWN\n+      changes:\n+        - sql: \"INSERT ...\"\n+      rollback:\n+        - sql: \"DELETE ...\"\n+```\n+\n+chunk into `root.yaml`\n+```yaml\n+  - include:\n+      relativeToChangelogFile: true\n+      file: 001-feature-ABC.yaml\n+```\n+\n+Tag for rollback operation (during rollback everithing that was applied after this tag will be rolled back)\n+```yaml\n+changeSet:\n+  id: tag-for-some-migration\n+  author: UNKNOWN\n+  changes:\n+  - tagDatabase:\n+      tag: 000-migration\n+```\n+\n+To start DB update by hands you need to build migration container\n+```shell script\n+docker-compose build db_migration\n+```\n+\n+And execute following command (for DB on some foreign host):\n+```shell script\n+docker run \\\n+  --volume /etc/resolv.conf:/etc/resolv.conf --rm --network host \\", "originalCommit": "2c61d2cf813255707bee5629832b76c14e63648f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE0MDU1Ng==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r509140556", "bodyText": "To use the host's system DNS resolver - without it, the container will not be able to resolve private(accesses only via VPN) hostnames. If DB host defined as IP address, we can avoid /etc/resolv.conf injection.", "author": "surabujin", "createdAt": "2020-10-21T09:45:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzODM1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzNTgxNA==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r509835814", "bodyText": "I was thinking about tags as a solution for automatic rollback procedure, not manual.\nTags can be aligned to docker images, so the database update procedure  performs upgrade/downgrade in one action using the same docker image.\nHere's the scenario how the migration pipeline may look like:\n\ndb-migration images for RC1 and RC2 are built using the git commit hash as the tag.\nDuring RC1 deployment, the database is upgraded and tagged with the RC1 hash.\nDuring RC2 deployment, the database is upgraded and tagged with the RC2 hash.\nDuring RC1 deployment, the database is downgraded with rolling back to the RC1 hash.", "author": "sergii-iakovenko", "createdAt": "2020-10-22T02:04:46Z", "path": "docker/db-migration/migrations/root.yaml", "diffHunk": "@@ -0,0 +1,8 @@\n+---\n+databaseChangeLog:\n+  - changeSet:\n+      id: root-tag\n+      author: surabujin\n+      changes:\n+        - tagDatabase:\n+            tag: history-starting-point", "originalCommit": "2c61d2cf813255707bee5629832b76c14e63648f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDczNzc1OA==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r510737758", "bodyText": "It is good idea, but there is no simple way to implement it. There is at least 2 big challenge:\n\nto perform rollback we need migrations set used during corresponding update, because rollback instructions stored inside migration's set (i.e if we make update using hash H1 we need same container/code with hash H1 to do rollback)\nwe need to find a common root for releases to make rollback (i.e. we have deployed RC1 and we are going to deploy RC2, we don't know how many tags we should rollback in RC1 before starting update to RC2).\n\nOr we can choose another way for rollbacks - use rollback-sql generation during updates, and keep it as artifacts somewhere... and use them, somehow to rollback. There is a lot of challenge here too. :)", "author": "surabujin", "createdAt": "2020-10-23T08:56:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzNTgxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk0OTIxNA==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r510949214", "bodyText": "Ok, let's continue rollback / tagging development as a separate task.", "author": "sergii-iakovenko", "createdAt": "2020-10-23T15:05:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzNTgxNA=="}], "type": "inlineReview"}, {"oid": "ebc67d041721a3525111ea8717a06829f8bdd1a2", "url": "https://github.com/telstra/open-kilda/commit/ebc67d041721a3525111ea8717a06829f8bdd1a2", "message": "OrientDB schema migration toolset\n\nNew docker container `db_migration` responsible for applying DB\nmigration for devel and for prod environments.", "committedDate": "2020-10-22T17:32:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg1Nzk0MA==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r510857940", "bodyText": "odb3 ?", "author": "sirmax123", "createdAt": "2020-10-23T12:45:17Z", "path": "docker/db-migration/apply-prehistory-migrations.sh", "diffHunk": "@@ -0,0 +1,38 @@\n+#!/bin/sh\n+#\n+# Copyright 2020 Telstra Open Source\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+#\n+\n+DB_NAME=\"${KILDA_ORIENTDB_DB_NAME:-kilda}\"\n+DB_HOST=\"${KILDA_ORIENTDB_HOST:-odb3.pendev}\"", "originalCommit": "ebc67d041721a3525111ea8717a06829f8bdd1a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkxMTUwMg==", "url": "https://github.com/telstra/open-kilda/pull/3777#discussion_r510911502", "bodyText": "hm... forgot to replace :(", "author": "surabujin", "createdAt": "2020-10-23T14:10:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg1Nzk0MA=="}], "type": "inlineReview"}, {"oid": "3835cbf7747acfc7bac69552f512d8444eb5393c", "url": "https://github.com/telstra/open-kilda/commit/3835cbf7747acfc7bac69552f512d8444eb5393c", "message": "OrientDB schema migration toolset\n\nNew docker container `db_migration` responsible for applying DB\nmigration for devel and for prod environments.", "committedDate": "2020-10-23T14:11:57Z", "type": "commit"}, {"oid": "3835cbf7747acfc7bac69552f512d8444eb5393c", "url": "https://github.com/telstra/open-kilda/commit/3835cbf7747acfc7bac69552f512d8444eb5393c", "message": "OrientDB schema migration toolset\n\nNew docker container `db_migration` responsible for applying DB\nmigration for devel and for prod environments.", "committedDate": "2020-10-23T14:11:57Z", "type": "forcePushed"}]}