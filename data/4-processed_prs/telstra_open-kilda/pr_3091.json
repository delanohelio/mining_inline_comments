{"pr_number": 3091, "pr_title": "Now verify cleanup per feature rather than per spec", "pr_createdAt": "2020-01-02T11:53:32Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3091", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcwMTIyOA==", "url": "https://github.com/telstra/open-kilda/pull/3091#discussion_r365701228", "bodyText": "I guess we should check that meter is supported by a switch (.description.contains(\"OF_12\") )", "author": "andriidovhan", "createdAt": "2020-01-13T09:18:57Z", "path": "services/src/functional-tests/src/main/groovy/org/openkilda/functionaltests/extension/fixture/CleanupVerifierExtension.groovy", "diffHunk": "@@ -32,23 +33,25 @@ class CleanupVerifierExtension extends ContextAwareGlobalExtension {\n         if (!enabled) {\n             return\n         }\n-        spec.addListener(new AbstractRunListener() {\n-            @Override\n-            void afterSpec(SpecInfo runningSpec) {\n-                log.info(\"Running cleanup verifier for '$runningSpec.name'\")\n-                assert northbound.getAllFlows().empty\n-                northbound.getAllSwitches().each {\n-                    def validation = northbound.validateSwitch(it.switchId)\n-                    validation.verifyRuleSectionsAreEmpty()\n-                    validation.verifyMeterSectionsAreEmpty()\n+        spec.features.each {\n+            it.addInterceptor(new IMethodInterceptor() {\n+                @Override\n+                void intercept(IMethodInvocation invocation) throws Throwable {\n+                    invocation.proceed()\n+                    log.info(\"Running cleanup verifier for '$invocation.feature.name'\")\n+                    assert northbound.getAllFlows().empty\n+                    northbound.getAllSwitches().each {\n+                        def validation = northbound.validateSwitch(it.switchId)\n+                        validation.verifyRuleSectionsAreEmpty()\n+                        validation.verifyMeterSectionsAreEmpty()", "originalCommit": "14ddb7e9480248bba870074d8cbbddae5285354f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwMDc2Mw==", "url": "https://github.com/telstra/open-kilda/pull/3091#discussion_r366300763", "bodyText": "verifyMeterSectionsAreEmpty inside verifies that the 'meters' section is present in the validation response. So it's already safe", "author": "rtretyak", "createdAt": "2020-01-14T12:03:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcwMTIyOA=="}], "type": "inlineReview"}, {"oid": "075a0800c4868b9a95b17fbb54c2474f7e57217a", "url": "https://github.com/telstra/open-kilda/commit/075a0800c4868b9a95b17fbb54c2474f7e57217a", "message": "Now verify cleanup per feature rather than per spec", "committedDate": "2020-02-14T15:35:24Z", "type": "forcePushed"}, {"oid": "bbff2d775860d6b9d5ba28b378b9ef3ca836c697", "url": "https://github.com/telstra/open-kilda/commit/bbff2d775860d6b9d5ba28b378b9ef3ca836c697", "message": "Now verify cleanup per feature rather than per spec", "committedDate": "2020-02-19T11:02:16Z", "type": "commit"}, {"oid": "bbff2d775860d6b9d5ba28b378b9ef3ca836c697", "url": "https://github.com/telstra/open-kilda/commit/bbff2d775860d6b9d5ba28b378b9ef3ca836c697", "message": "Now verify cleanup per feature rather than per spec", "committedDate": "2020-02-19T11:02:16Z", "type": "forcePushed"}]}