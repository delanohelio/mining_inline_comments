{"pr_number": 3517, "pr_title": "Add mirror group validation", "pr_createdAt": "2020-06-01T10:25:52Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3517", "timeline": [{"oid": "0cd7e930f9e08466722f4986219f2c64eba1a0c0", "url": "https://github.com/telstra/open-kilda/commit/0cd7e930f9e08466722f4986219f2c64eba1a0c0", "message": "Add mirror group validation", "committedDate": "2020-06-01T10:29:09Z", "type": "forcePushed"}, {"oid": "424d78bf8b63856fd216fd4d541f9e568d9516a8", "url": "https://github.com/telstra/open-kilda/commit/424d78bf8b63856fd216fd4d541f9e568d9516a8", "message": "Add mirror group validation", "committedDate": "2020-06-01T13:49:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMwMjk1MA==", "url": "https://github.com/telstra/open-kilda/pull/3517#discussion_r433302950", "bodyText": "should we check that getWatchPort() is not null?\nThe watch_port and watch_group fields are only required for fast failover groups, and may be optionally\nimplemented for other group types.", "author": "niksv", "createdAt": "2020-06-01T15:27:18Z", "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/converter/OfFlowStatsMapper.java", "diffHunk": "@@ -179,6 +183,38 @@ public FlowInstructions toFlowInstructions(final List<OFInstruction> instruction\n                 .build();\n     }\n \n+    /**\n+     * Convert {@link OFGroupDescStatsEntry} to {@link GroupEntry}.\n+     * @param ofGroupDescStatsEntry group description.\n+     * @return result of transformation {@link GroupEntry}.\n+     */\n+    public GroupEntry toFlowGroupEntry(OFGroupDescStatsEntry ofGroupDescStatsEntry) {\n+        if (ofGroupDescStatsEntry == null) {\n+            return null;\n+        }\n+        return GroupEntry.builder()\n+                .groupType(ofGroupDescStatsEntry.getGroupType().toString())\n+                .groupId(ofGroupDescStatsEntry.getGroup().getGroupNumber())\n+                .buckets(ofGroupDescStatsEntry.getBuckets().stream()\n+                    .map(this::toGroupBucket)\n+                    .collect(toList()))\n+                .build();\n+    }\n+\n+    /**\n+     * Convert {@link OFBucket} to {@link GroupBucket}.\n+     * @param ofBucket group bucket.\n+     * @return result of transformation {@link GroupEntry}.\n+     */\n+    public GroupBucket toGroupBucket(OFBucket ofBucket) {\n+        if (ofBucket == null) {\n+            return null;\n+        }\n+\n+        return new GroupBucket(ofBucket.getWatchPort().getPortNumber(),", "originalCommit": "424d78bf8b63856fd216fd4d541f9e568d9516a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMwNjAyNw==", "url": "https://github.com/telstra/open-kilda/pull/3517#discussion_r433306027", "bodyText": "please move 1 to constant", "author": "niksv", "createdAt": "2020-06-01T15:30:40Z", "path": "src-java/swmanager-topology/swmanager-storm-topology/src/main/java/org/openkilda/wfm/topology/switchmanager/service/impl/ValidationServiceImpl.java", "diffHunk": "@@ -114,6 +121,50 @@ public ValidateRulesResult validateRules(SwitchId switchId, List<FlowEntry> pres\n         return new HashSet<>();\n     }\n \n+    @Override\n+    public ValidateGroupsResult validateGroups(SwitchId switchId, List<GroupEntry> presentGroups) {\n+        Collection<MirrorGroup> expected = mirrorGroupRepository.findBySwitchId(switchId);\n+        Set<Integer> expectedGroups = expected\n+                .stream()\n+                .map(group -> (int) group.getGroupId().getValue()).collect(Collectors.toSet());\n+\n+        Set<Integer> presentGroupsIds = presentGroups.stream()\n+                .map(GroupEntry::getGroupId)\n+                .filter(group -> 1 != group) // NOTE(tdurakov): exclude default group", "originalCommit": "424d78bf8b63856fd216fd4d541f9e568d9516a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMxMDcyOA==", "url": "https://github.com/telstra/open-kilda/pull/3517#discussion_r433310728", "bodyText": "I think here must be new HashSet<>(presentGroupsIds)\nbecause\nSet<Integer> properGroups = new HashSet<>(expectedGroups);\nproperGroups.retainAll(expectedGroups);\n\ncreates set of expected groups and retain same expected groups", "author": "niksv", "createdAt": "2020-06-01T15:35:29Z", "path": "src-java/swmanager-topology/swmanager-storm-topology/src/main/java/org/openkilda/wfm/topology/switchmanager/service/impl/ValidationServiceImpl.java", "diffHunk": "@@ -114,6 +121,50 @@ public ValidateRulesResult validateRules(SwitchId switchId, List<FlowEntry> pres\n         return new HashSet<>();\n     }\n \n+    @Override\n+    public ValidateGroupsResult validateGroups(SwitchId switchId, List<GroupEntry> presentGroups) {\n+        Collection<MirrorGroup> expected = mirrorGroupRepository.findBySwitchId(switchId);\n+        Set<Integer> expectedGroups = expected\n+                .stream()\n+                .map(group -> (int) group.getGroupId().getValue()).collect(Collectors.toSet());\n+\n+        Set<Integer> presentGroupsIds = presentGroups.stream()\n+                .map(GroupEntry::getGroupId)\n+                .filter(group -> 1 != group) // NOTE(tdurakov): exclude default group\n+                .collect(Collectors.toSet());\n+        Set<Integer> missingGroups = new HashSet<>(expectedGroups);\n+        missingGroups.removeAll(presentGroupsIds);\n+        if (!missingGroups.isEmpty() && log.isErrorEnabled()) {\n+            log.error(\"On switch {} the following groups are missed: {}\", switchId,\n+                    missingGroups.stream().map(x -> Integer.toString(x))\n+                            .collect(Collectors.joining(\", \", \"[\", \"]\")));\n+        }\n+        Set<Integer> properGroups = new HashSet<>(expectedGroups);", "originalCommit": "424d78bf8b63856fd216fd4d541f9e568d9516a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9d1ac44a593a438c31ecc9ccac540bd557745e42", "url": "https://github.com/telstra/open-kilda/commit/9d1ac44a593a438c31ecc9ccac540bd557745e42", "message": "Add mirror group validation", "committedDate": "2020-06-01T17:15:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk5OTY5Ng==", "url": "https://github.com/telstra/open-kilda/pull/3517#discussion_r433999696", "bodyText": "4 lists of ints... what can be better...", "author": "surabujin", "createdAt": "2020-06-02T16:08:25Z", "path": "src-java/swmanager-topology/swmanager-storm-topology/src/main/java/org/openkilda/wfm/topology/switchmanager/model/ValidateGroupsResult.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+\n+package org.openkilda.wfm.topology.switchmanager.model;\n+\n+import lombok.Value;\n+\n+import java.util.List;\n+\n+@Value\n+public class ValidateGroupsResult {", "originalCommit": "9d1ac44a593a438c31ecc9ccac540bd557745e42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwOTY0NA==", "url": "https://github.com/telstra/open-kilda/pull/3517#discussion_r434009644", "bodyText": "Do not represent a finite and short set of available values so generic. It must be enum or keep numeric representation, same as in OF spec and translate it into enum somewhere outside the transport layer.", "author": "surabujin", "createdAt": "2020-06-02T16:23:37Z", "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/info/rule/GroupEntry.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.info.rule;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.PropertyNamingStrategy.SnakeCaseStrategy;\n+import com.fasterxml.jackson.databind.annotation.JsonNaming;\n+import lombok.Builder;\n+import lombok.EqualsAndHashCode;\n+import lombok.Value;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+@Value\n+@Builder\n+@EqualsAndHashCode(callSuper = false)\n+@JsonNaming(value = SnakeCaseStrategy.class)\n+public class GroupEntry  implements Serializable {\n+    private int groupId;\n+    private String groupType;", "originalCommit": "9d1ac44a593a438c31ecc9ccac540bd557745e42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxMjY4OQ==", "url": "https://github.com/telstra/open-kilda/pull/3517#discussion_r434012689", "bodyText": "Can you stop using this approach for \"new\" code? I suppose to use SpeakerCommand API for \"new\" code.\nThe worst part of this approach - this request will block one of FL thread up to 10 seconds.Not worse but still bad - it uses not reliable \"channel\" in communication to the switch.", "author": "surabujin", "createdAt": "2020-06-02T16:28:43Z", "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/kafka/RecordHandler.java", "diffHunk": "@@ -1412,6 +1418,38 @@ private void doGetExpectedDefaultMetersRequest(CommandMessage message) {\n         }\n     }\n \n+    private void doDumpGroupsRequest(final CommandMessage message) {", "originalCommit": "9d1ac44a593a438c31ecc9ccac540bd557745e42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b2a62f933db0bf7ea00bcf4467e5cb09f434ff3f", "url": "https://github.com/telstra/open-kilda/commit/b2a62f933db0bf7ea00bcf4467e5cb09f434ff3f", "message": "Add mirror group validation", "committedDate": "2020-06-05T11:22:06Z", "type": "commit"}, {"oid": "b2a62f933db0bf7ea00bcf4467e5cb09f434ff3f", "url": "https://github.com/telstra/open-kilda/commit/b2a62f933db0bf7ea00bcf4467e5cb09f434ff3f", "message": "Add mirror group validation", "committedDate": "2020-06-05T11:22:06Z", "type": "forcePushed"}]}