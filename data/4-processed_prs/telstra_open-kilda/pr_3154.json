{"pr_number": 3154, "pr_title": "add tests for pop and protected path", "pr_createdAt": "2020-01-30T14:31:08Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3154", "timeline": [{"oid": "6b249c112e4dd9cfbdf4513557a97c2a9d542680", "url": "https://github.com/telstra/open-kilda/commit/6b249c112e4dd9cfbdf4513557a97c2a9d542680", "message": "add test for pop and protected path", "committedDate": "2020-01-31T10:13:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ0Mzc4NA==", "url": "https://github.com/telstra/open-kilda/pull/3154#discussion_r373443784", "bodyText": "This line is impossible to fire. Also, you can save all paths during swPair search in order to not repeat the same reduction here", "author": "rtretyak", "createdAt": "2020-01-31T11:52:53Z", "path": "services/src/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/ProtectedPathV2Spec.groovy", "diffHunk": "@@ -1183,6 +1184,68 @@ class ProtectedPathV2Spec extends HealthCheckSpecification {\n         northbound.deleteLinkProps(northbound.getAllLinkProps())\n     }\n \n+    @Tidy\n+    def \"Protected path is created in different POP even if this path is not preferable\"(){\n+        given: \"Not neighboring switch pair with three diverse paths at least\"\n+        def swPair = topologyHelper.getAllNotNeighboringSwitchPairs().find { swPair ->\n+            swPair.paths.findAll { pathHelper.getInvolvedSwitches(it).size() == 3 }.unique(false) { a, b ->\n+                def p1 = pathHelper.getInvolvedSwitches(a)[1..-2]*.dpId\n+                def p2 = pathHelper.getInvolvedSwitches(b)[1..-2]*.dpId\n+                p1.intersect(p2) == [] ? 1 : 0\n+            }.size() >= 3\n+        } ?: assumeTrue(\"No suiting switches found\", false)\n+\n+        //find out all paths with 3 switches\n+        def allPaths = swPair.paths.findAll { pathHelper.getInvolvedSwitches(it).size() == 3 }\n+        def allPathCandidates = allPaths.unique(false) { a, b ->\n+            a.intersect(b) == [] ? 1 : 0\n+        }\n+        assumeTrue(\"Not enough amount of diverse paths\", allPathCandidates.size() >= 3)", "originalCommit": "6b249c112e4dd9cfbdf4513557a97c2a9d542680", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3OTAyNw==", "url": "https://github.com/telstra/open-kilda/pull/3154#discussion_r373479027", "bodyText": "it was refactored", "author": "andriidovhan", "createdAt": "2020-01-31T13:30:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ0Mzc4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ0NDYwMQ==", "url": "https://github.com/telstra/open-kilda/pull/3154#discussion_r373444601", "bodyText": "tr3 is for transit switch protected, right?", "author": "rtretyak", "createdAt": "2020-01-31T11:55:08Z", "path": "services/src/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/ProtectedPathV2Spec.groovy", "diffHunk": "@@ -1183,6 +1184,68 @@ class ProtectedPathV2Spec extends HealthCheckSpecification {\n         northbound.deleteLinkProps(northbound.getAllLinkProps())\n     }\n \n+    @Tidy\n+    def \"Protected path is created in different POP even if this path is not preferable\"(){\n+        given: \"Not neighboring switch pair with three diverse paths at least\"\n+        def swPair = topologyHelper.getAllNotNeighboringSwitchPairs().find { swPair ->\n+            swPair.paths.findAll { pathHelper.getInvolvedSwitches(it).size() == 3 }.unique(false) { a, b ->\n+                def p1 = pathHelper.getInvolvedSwitches(a)[1..-2]*.dpId\n+                def p2 = pathHelper.getInvolvedSwitches(b)[1..-2]*.dpId\n+                p1.intersect(p2) == [] ? 1 : 0\n+            }.size() >= 3\n+        } ?: assumeTrue(\"No suiting switches found\", false)\n+\n+        //find out all paths with 3 switches\n+        def allPaths = swPair.paths.findAll { pathHelper.getInvolvedSwitches(it).size() == 3 }\n+        def allPathCandidates = allPaths.unique(false) { a, b ->\n+            a.intersect(b) == [] ? 1 : 0\n+        }\n+        assumeTrue(\"Not enough amount of diverse paths\", allPathCandidates.size() >= 3)\n+        //select paths for further manipulations\n+        def mainPath1 = allPathCandidates.first()\n+        def mainPath2 = allPathCandidates.find { it != mainPath1 }\n+        def protectedPath = allPathCandidates.find { it != mainPath1 && it != mainPath2}\n+        def involvedSwP1 = pathHelper.getInvolvedSwitches(mainPath1)*.dpId\n+        def involvedSwP2 = pathHelper.getInvolvedSwitches(mainPath2)*.dpId\n+        def involvedSwProtected = pathHelper.getInvolvedSwitches(protectedPath)*.dpId\n+\n+        and: \"Src, dst and transit switches belongs to different POPs(src:1, dst:4, tr1/tr2:2, tr3:3)\"", "originalCommit": "6b249c112e4dd9cfbdf4513557a97c2a9d542680", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3MTk5Ng==", "url": "https://github.com/telstra/open-kilda/pull/3154#discussion_r373471996", "bodyText": "you are right", "author": "andriidovhan", "createdAt": "2020-01-31T13:12:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ0NDYwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ0NTA2MQ==", "url": "https://github.com/telstra/open-kilda/pull/3154#discussion_r373445061", "bodyText": "This does not correspond to your comment above. You should have dst in '4' and protected transit in '3'", "author": "rtretyak", "createdAt": "2020-01-31T11:56:30Z", "path": "services/src/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/ProtectedPathV2Spec.groovy", "diffHunk": "@@ -1183,6 +1184,68 @@ class ProtectedPathV2Spec extends HealthCheckSpecification {\n         northbound.deleteLinkProps(northbound.getAllLinkProps())\n     }\n \n+    @Tidy\n+    def \"Protected path is created in different POP even if this path is not preferable\"(){\n+        given: \"Not neighboring switch pair with three diverse paths at least\"\n+        def swPair = topologyHelper.getAllNotNeighboringSwitchPairs().find { swPair ->\n+            swPair.paths.findAll { pathHelper.getInvolvedSwitches(it).size() == 3 }.unique(false) { a, b ->\n+                def p1 = pathHelper.getInvolvedSwitches(a)[1..-2]*.dpId\n+                def p2 = pathHelper.getInvolvedSwitches(b)[1..-2]*.dpId\n+                p1.intersect(p2) == [] ? 1 : 0\n+            }.size() >= 3\n+        } ?: assumeTrue(\"No suiting switches found\", false)\n+\n+        //find out all paths with 3 switches\n+        def allPaths = swPair.paths.findAll { pathHelper.getInvolvedSwitches(it).size() == 3 }\n+        def allPathCandidates = allPaths.unique(false) { a, b ->\n+            a.intersect(b) == [] ? 1 : 0\n+        }\n+        assumeTrue(\"Not enough amount of diverse paths\", allPathCandidates.size() >= 3)\n+        //select paths for further manipulations\n+        def mainPath1 = allPathCandidates.first()\n+        def mainPath2 = allPathCandidates.find { it != mainPath1 }\n+        def protectedPath = allPathCandidates.find { it != mainPath1 && it != mainPath2}\n+        def involvedSwP1 = pathHelper.getInvolvedSwitches(mainPath1)*.dpId\n+        def involvedSwP2 = pathHelper.getInvolvedSwitches(mainPath2)*.dpId\n+        def involvedSwProtected = pathHelper.getInvolvedSwitches(protectedPath)*.dpId\n+\n+        and: \"Src, dst and transit switches belongs to different POPs(src:1, dst:4, tr1/tr2:2, tr3:3)\"\n+        database.setSwitchPop(swPair.src.dpId, \"1\")\n+        [involvedSwP1[1], involvedSwP2[1]].each { swId -> database.setSwitchPop(swId, \"2\") }\n+        database.setSwitchPop(swPair.dst.dpId, \"3\")", "originalCommit": "6b249c112e4dd9cfbdf4513557a97c2a9d542680", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1NzUyNQ==", "url": "https://github.com/telstra/open-kilda/pull/3154#discussion_r373457525", "bodyText": "fixed", "author": "andriidovhan", "createdAt": "2020-01-31T12:32:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ0NTA2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ0NTg2MQ==", "url": "https://github.com/telstra/open-kilda/pull/3154#discussion_r373445861", "bodyText": "Can we use pathHelper.makePathNotPreferable(protectedPath)? May look much more readable", "author": "rtretyak", "createdAt": "2020-01-31T11:58:51Z", "path": "services/src/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/ProtectedPathV2Spec.groovy", "diffHunk": "@@ -1183,6 +1184,68 @@ class ProtectedPathV2Spec extends HealthCheckSpecification {\n         northbound.deleteLinkProps(northbound.getAllLinkProps())\n     }\n \n+    @Tidy\n+    def \"Protected path is created in different POP even if this path is not preferable\"(){\n+        given: \"Not neighboring switch pair with three diverse paths at least\"\n+        def swPair = topologyHelper.getAllNotNeighboringSwitchPairs().find { swPair ->\n+            swPair.paths.findAll { pathHelper.getInvolvedSwitches(it).size() == 3 }.unique(false) { a, b ->\n+                def p1 = pathHelper.getInvolvedSwitches(a)[1..-2]*.dpId\n+                def p2 = pathHelper.getInvolvedSwitches(b)[1..-2]*.dpId\n+                p1.intersect(p2) == [] ? 1 : 0\n+            }.size() >= 3\n+        } ?: assumeTrue(\"No suiting switches found\", false)\n+\n+        //find out all paths with 3 switches\n+        def allPaths = swPair.paths.findAll { pathHelper.getInvolvedSwitches(it).size() == 3 }\n+        def allPathCandidates = allPaths.unique(false) { a, b ->\n+            a.intersect(b) == [] ? 1 : 0\n+        }\n+        assumeTrue(\"Not enough amount of diverse paths\", allPathCandidates.size() >= 3)\n+        //select paths for further manipulations\n+        def mainPath1 = allPathCandidates.first()\n+        def mainPath2 = allPathCandidates.find { it != mainPath1 }\n+        def protectedPath = allPathCandidates.find { it != mainPath1 && it != mainPath2}\n+        def involvedSwP1 = pathHelper.getInvolvedSwitches(mainPath1)*.dpId\n+        def involvedSwP2 = pathHelper.getInvolvedSwitches(mainPath2)*.dpId\n+        def involvedSwProtected = pathHelper.getInvolvedSwitches(protectedPath)*.dpId\n+\n+        and: \"Src, dst and transit switches belongs to different POPs(src:1, dst:4, tr1/tr2:2, tr3:3)\"\n+        database.setSwitchPop(swPair.src.dpId, \"1\")\n+        [involvedSwP1[1], involvedSwP2[1]].each { swId -> database.setSwitchPop(swId, \"2\") }\n+        database.setSwitchPop(swPair.dst.dpId, \"3\")\n+        database.setSwitchPop(involvedSwProtected[1], \"4\")\n+\n+        and: \"Path which contains tr3 is non preferable\"\n+        allPaths.findAll { involvedSwProtected[1] in pathHelper.getInvolvedSwitches(it)*.dpId }.each {\n+            pathHelper.getInvolvedIsls(it).each {\n+                northbound.updateLinkProps([islUtils.toLinkProps(it,\n+                        [\"cost\": (database.getIslCost(it) + 10).toString()])])\n+            }\n+        }", "originalCommit": "6b249c112e4dd9cfbdf4513557a97c2a9d542680", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2MjQ2MA==", "url": "https://github.com/telstra/open-kilda/pull/3154#discussion_r373462460", "bodyText": "We can't do it.\nActually makePathNotPreferable sets too high value NOT_PREFERABLE_COST * 3, then as a result the test is going to fail.\nDifference  between totalCostOfNonPreferablePath and totalCostOfPreferablePath shouldn't be too big.\nI can't definitely say the value which is the border(especially for this test the border value is 3300 (it was found experimentally)).", "author": "andriidovhan", "createdAt": "2020-01-31T12:46:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ0NTg2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ4NjY1NA==", "url": "https://github.com/telstra/open-kilda/pull/3154#discussion_r373486654", "bodyText": "why? I mean how do you understand this is not a defect?", "author": "rtretyak", "createdAt": "2020-01-31T13:48:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ0NTg2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMDY5Mw==", "url": "https://github.com/telstra/open-kilda/pull/3154#discussion_r399100693", "bodyText": "fixed, it should be clear now", "author": "andriidovhan", "createdAt": "2020-03-27T08:24:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ0NTg2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ0OTQwNg==", "url": "https://github.com/telstra/open-kilda/pull/3154#discussion_r373449406", "bodyText": "can you elaborate here please? I mean the reason why it picked 'tr3' path. It is really hard to follow all this pop logic without any pictures before eyes and with very brief comments. I mean I get it right now, but it will take me too much time to refresh the memory in a month or two. And the test must be a good helper here", "author": "rtretyak", "createdAt": "2020-01-31T12:09:09Z", "path": "services/src/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/ProtectedPathV2Spec.groovy", "diffHunk": "@@ -1183,6 +1184,68 @@ class ProtectedPathV2Spec extends HealthCheckSpecification {\n         northbound.deleteLinkProps(northbound.getAllLinkProps())\n     }\n \n+    @Tidy\n+    def \"Protected path is created in different POP even if this path is not preferable\"(){\n+        given: \"Not neighboring switch pair with three diverse paths at least\"\n+        def swPair = topologyHelper.getAllNotNeighboringSwitchPairs().find { swPair ->\n+            swPair.paths.findAll { pathHelper.getInvolvedSwitches(it).size() == 3 }.unique(false) { a, b ->\n+                def p1 = pathHelper.getInvolvedSwitches(a)[1..-2]*.dpId\n+                def p2 = pathHelper.getInvolvedSwitches(b)[1..-2]*.dpId\n+                p1.intersect(p2) == [] ? 1 : 0\n+            }.size() >= 3\n+        } ?: assumeTrue(\"No suiting switches found\", false)\n+\n+        //find out all paths with 3 switches\n+        def allPaths = swPair.paths.findAll { pathHelper.getInvolvedSwitches(it).size() == 3 }\n+        def allPathCandidates = allPaths.unique(false) { a, b ->\n+            a.intersect(b) == [] ? 1 : 0\n+        }\n+        assumeTrue(\"Not enough amount of diverse paths\", allPathCandidates.size() >= 3)\n+        //select paths for further manipulations\n+        def mainPath1 = allPathCandidates.first()\n+        def mainPath2 = allPathCandidates.find { it != mainPath1 }\n+        def protectedPath = allPathCandidates.find { it != mainPath1 && it != mainPath2}\n+        def involvedSwP1 = pathHelper.getInvolvedSwitches(mainPath1)*.dpId\n+        def involvedSwP2 = pathHelper.getInvolvedSwitches(mainPath2)*.dpId\n+        def involvedSwProtected = pathHelper.getInvolvedSwitches(protectedPath)*.dpId\n+\n+        and: \"Src, dst and transit switches belongs to different POPs(src:1, dst:4, tr1/tr2:2, tr3:3)\"\n+        database.setSwitchPop(swPair.src.dpId, \"1\")\n+        [involvedSwP1[1], involvedSwP2[1]].each { swId -> database.setSwitchPop(swId, \"2\") }\n+        database.setSwitchPop(swPair.dst.dpId, \"3\")\n+        database.setSwitchPop(involvedSwProtected[1], \"4\")\n+\n+        and: \"Path which contains tr3 is non preferable\"\n+        allPaths.findAll { involvedSwProtected[1] in pathHelper.getInvolvedSwitches(it)*.dpId }.each {\n+            pathHelper.getInvolvedIsls(it).each {\n+                northbound.updateLinkProps([islUtils.toLinkProps(it,\n+                        [\"cost\": (database.getIslCost(it) + 10).toString()])])\n+            }\n+        }\n+\n+        when: \"Create a protected flow\"\n+        def flow = flowHelperV2.randomFlow(swPair)\n+        flow.allocateProtectedPath = true\n+        flowHelperV2.addFlow(flow)\n+\n+        then: \"Main path is built through the preferable path(tr1 or tr2)\"\n+        def flowPaths = northbound.getFlowPath(flow.flowId)\n+        def realFlowPathInvolvedSwitches = pathHelper.getInvolvedSwitches(pathHelper.convert(flowPaths))*.dpId\n+        realFlowPathInvolvedSwitches == involvedSwP1 || realFlowPathInvolvedSwitches == involvedSwP2\n+\n+        and: \"Protected path is built through the non preferable path(tr3)\"", "originalCommit": "6b249c112e4dd9cfbdf4513557a97c2a9d542680", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2OTc0NQ==", "url": "https://github.com/telstra/open-kilda/pull/3154#discussion_r373469745", "bodyText": "left the comment", "author": "andriidovhan", "createdAt": "2020-01-31T13:06:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ0OTQwNg=="}], "type": "inlineReview"}, {"oid": "a22adef637794a3d010ff7e09e4e81f0d2c0da5a", "url": "https://github.com/telstra/open-kilda/commit/a22adef637794a3d010ff7e09e4e81f0d2c0da5a", "message": "add test for pop and protected path", "committedDate": "2020-01-31T13:29:02Z", "type": "forcePushed"}, {"oid": "89371bfdd9b62881fe9be055fe40ff79aafa848d", "url": "https://github.com/telstra/open-kilda/commit/89371bfdd9b62881fe9be055fe40ff79aafa848d", "message": "add test for pop and protected path", "committedDate": "2020-01-31T13:41:31Z", "type": "forcePushed"}, {"oid": "936f1d99fd151cf352b5d49bfd47f366b5b5e4d5", "url": "https://github.com/telstra/open-kilda/commit/936f1d99fd151cf352b5d49bfd47f366b5b5e4d5", "message": "add test for pop and protected path", "committedDate": "2020-03-23T08:54:02Z", "type": "forcePushed"}, {"oid": "ed4d7d01376f644450fba7643d8d6dbce7a559e3", "url": "https://github.com/telstra/open-kilda/commit/ed4d7d01376f644450fba7643d8d6dbce7a559e3", "message": "add test for pop and protected path", "committedDate": "2020-03-25T12:17:28Z", "type": "forcePushed"}, {"oid": "03ca9ddb133aaabaccaae27af3494305f633691e", "url": "https://github.com/telstra/open-kilda/commit/03ca9ddb133aaabaccaae27af3494305f633691e", "message": "add test for pop and protected path", "committedDate": "2020-03-26T15:24:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA2OTAyMQ==", "url": "https://github.com/telstra/open-kilda/pull/3154#discussion_r400069021", "bodyText": "replace 700 with named constant.\nyou can assume all ISLs are at the default cost at the start of the test and don't call northbound.getLink", "author": "rtretyak", "createdAt": "2020-03-30T09:59:07Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/ProtectedPathV2Spec.groovy", "diffHunk": "@@ -1303,6 +1304,106 @@ class ProtectedPathV2Spec extends HealthCheckSpecification {\n         northbound.deleteLinkProps(northbound.getAllLinkProps())\n     }\n \n+    @Tidy\n+    def \"Protected path is created in different POP even if this path is not preferable\"(){\n+        given: \"Not neighboring switch pair with three diverse paths at least\"\n+        def allPaths //all possible paths with 3 involved switches\n+        def allPathCandidates // 3 diverse paths at least\n+        def swPair = topologyHelper.getAllNotNeighboringSwitchPairs().find { swP ->\n+            allPaths = swP.paths.findAll { pathHelper.getInvolvedSwitches(it).size() == 3 }\n+            allPathCandidates = allPaths.unique(false) { a, b ->\n+                a.intersect(b) == [] ? 1 : 0\n+            } // just to avoid parallel links\n+            allPaths.unique(false) { a, b ->\n+                def p1 = pathHelper.getInvolvedSwitches(a)[1..-2]*.dpId\n+                def p2 = pathHelper.getInvolvedSwitches(b)[1..-2]*.dpId\n+                p1.intersect(p2) == [] ? 1 : 0\n+            }.size() >= 3\n+        } ?: assumeTrue(\"No suiting switches found\", false)\n+\n+        //select paths for further manipulations\n+        def mainPath1 = allPathCandidates.first()\n+        def mainPath2 = allPathCandidates.find { it != mainPath1 }\n+        def protectedPath = allPathCandidates.find { it != mainPath1 && it != mainPath2}\n+        def involvedSwP1 = pathHelper.getInvolvedSwitches(mainPath1)*.dpId\n+        def involvedSwP2 = pathHelper.getInvolvedSwitches(mainPath2)*.dpId\n+        def involvedSwProtected = pathHelper.getInvolvedSwitches(protectedPath)*.dpId\n+\n+        and: \"Src, dst and transit switches belongs to different POPs(src:1, dst:4, tr1/tr2:2, tr3:3)\"\n+        // tr1/tr2 for the main path and tr3 for the protected path\n+        database.setSwitchPop(swPair.src.dpId, \"1\")\n+        [involvedSwP1[1], involvedSwP2[1]].each { swId -> database.setSwitchPop(swId, \"2\") }\n+        database.setSwitchPop(swPair.dst.dpId, \"4\")\n+        database.setSwitchPop(involvedSwProtected[1], \"3\")\n+\n+        and: \"Path which contains tr3 is non preferable\"\n+        /** There is not possibility to use the 'makePathNotPreferable' method,\n+         * because it sets too high value for protectedPath.\n+         *\n+         *  totalCostOFProtectedPath should be the following:\n+         *  totalCostOfMainPath + (amountOfInvolvedIsls * diversity.pop.isl.cost * diversityGroupPerPopUseCounter) - 1,\n+         *  where:\n+         *  diversity.pop.isl.cost = 1000\n+         *  diversityGroupPerPopUseCounter = amount of switches in the same POP\n+         *  (in this test there are two switches in the same POP) */\n+        List<Isl> islsToUpdate = []\n+        allPaths.findAll { involvedSwProtected[1] in pathHelper.getInvolvedSwitches(it)*.dpId }.each {\n+            pathHelper.getInvolvedIsls(it).each {\n+                islsToUpdate << it\n+            }\n+        }\n+        def involvedIslsOfMainPath = pathHelper.getInvolvedIsls(mainPath1)\n+        def totalCostOfMainPath = involvedIslsOfMainPath.sum { northbound.getLink(it).cost ?: 700 }", "originalCommit": "03ca9ddb133aaabaccaae27af3494305f633691e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExMzExNA==", "url": "https://github.com/telstra/open-kilda/pull/3154#discussion_r400113114", "bodyText": "done\nI would like to avoid assume in the test. Actually there are only two requests(northbound.getLink), so I guess it is not critical to leave it as is.", "author": "andriidovhan", "createdAt": "2020-03-30T11:17:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA2OTAyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA3MDYzMw==", "url": "https://github.com/telstra/open-kilda/pull/3154#discussion_r400070633", "bodyText": "the comment explains 2000, but I think it still makes sense to extract it into variables and make a clean self-explaining code totalCostOfMainPath + (amountOfInvolvedIsls * diversity.pop.isl.cost * diversityGroupPerPopUseCounter) - 1", "author": "rtretyak", "createdAt": "2020-03-30T10:01:40Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/ProtectedPathV2Spec.groovy", "diffHunk": "@@ -1303,6 +1304,106 @@ class ProtectedPathV2Spec extends HealthCheckSpecification {\n         northbound.deleteLinkProps(northbound.getAllLinkProps())\n     }\n \n+    @Tidy\n+    def \"Protected path is created in different POP even if this path is not preferable\"(){\n+        given: \"Not neighboring switch pair with three diverse paths at least\"\n+        def allPaths //all possible paths with 3 involved switches\n+        def allPathCandidates // 3 diverse paths at least\n+        def swPair = topologyHelper.getAllNotNeighboringSwitchPairs().find { swP ->\n+            allPaths = swP.paths.findAll { pathHelper.getInvolvedSwitches(it).size() == 3 }\n+            allPathCandidates = allPaths.unique(false) { a, b ->\n+                a.intersect(b) == [] ? 1 : 0\n+            } // just to avoid parallel links\n+            allPaths.unique(false) { a, b ->\n+                def p1 = pathHelper.getInvolvedSwitches(a)[1..-2]*.dpId\n+                def p2 = pathHelper.getInvolvedSwitches(b)[1..-2]*.dpId\n+                p1.intersect(p2) == [] ? 1 : 0\n+            }.size() >= 3\n+        } ?: assumeTrue(\"No suiting switches found\", false)\n+\n+        //select paths for further manipulations\n+        def mainPath1 = allPathCandidates.first()\n+        def mainPath2 = allPathCandidates.find { it != mainPath1 }\n+        def protectedPath = allPathCandidates.find { it != mainPath1 && it != mainPath2}\n+        def involvedSwP1 = pathHelper.getInvolvedSwitches(mainPath1)*.dpId\n+        def involvedSwP2 = pathHelper.getInvolvedSwitches(mainPath2)*.dpId\n+        def involvedSwProtected = pathHelper.getInvolvedSwitches(protectedPath)*.dpId\n+\n+        and: \"Src, dst and transit switches belongs to different POPs(src:1, dst:4, tr1/tr2:2, tr3:3)\"\n+        // tr1/tr2 for the main path and tr3 for the protected path\n+        database.setSwitchPop(swPair.src.dpId, \"1\")\n+        [involvedSwP1[1], involvedSwP2[1]].each { swId -> database.setSwitchPop(swId, \"2\") }\n+        database.setSwitchPop(swPair.dst.dpId, \"4\")\n+        database.setSwitchPop(involvedSwProtected[1], \"3\")\n+\n+        and: \"Path which contains tr3 is non preferable\"\n+        /** There is not possibility to use the 'makePathNotPreferable' method,\n+         * because it sets too high value for protectedPath.\n+         *\n+         *  totalCostOFProtectedPath should be the following:\n+         *  totalCostOfMainPath + (amountOfInvolvedIsls * diversity.pop.isl.cost * diversityGroupPerPopUseCounter) - 1,\n+         *  where:\n+         *  diversity.pop.isl.cost = 1000\n+         *  diversityGroupPerPopUseCounter = amount of switches in the same POP\n+         *  (in this test there are two switches in the same POP) */\n+        List<Isl> islsToUpdate = []\n+        allPaths.findAll { involvedSwProtected[1] in pathHelper.getInvolvedSwitches(it)*.dpId }.each {\n+            pathHelper.getInvolvedIsls(it).each {\n+                islsToUpdate << it\n+            }\n+        }\n+        def involvedIslsOfMainPath = pathHelper.getInvolvedIsls(mainPath1)\n+        def totalCostOfMainPath = involvedIslsOfMainPath.sum { northbound.getLink(it).cost ?: 700 }\n+        def amountOfIlslsOnMainPath = involvedIslsOfMainPath.size()\n+        Integer newIslCost = ((totalCostOfMainPath + (amountOfIlslsOnMainPath * 2000) - 1) /", "originalCommit": "03ca9ddb133aaabaccaae27af3494305f633691e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExNjYwMg==", "url": "https://github.com/telstra/open-kilda/pull/3154#discussion_r400116602", "bodyText": "it makes sense to me.\ndone.", "author": "andriidovhan", "createdAt": "2020-03-30T11:24:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA3MDYzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA3MDg4Mg==", "url": "https://github.com/telstra/open-kilda/pull/3154#discussion_r400070882", "bodyText": "\ud83d\udc4d", "author": "rtretyak", "createdAt": "2020-03-30T10:02:07Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/flows/ProtectedPathV2Spec.groovy", "diffHunk": "@@ -1303,6 +1304,106 @@ class ProtectedPathV2Spec extends HealthCheckSpecification {\n         northbound.deleteLinkProps(northbound.getAllLinkProps())\n     }\n \n+    @Tidy\n+    def \"Protected path is created in different POP even if this path is not preferable\"(){\n+        given: \"Not neighboring switch pair with three diverse paths at least\"\n+        def allPaths //all possible paths with 3 involved switches\n+        def allPathCandidates // 3 diverse paths at least\n+        def swPair = topologyHelper.getAllNotNeighboringSwitchPairs().find { swP ->\n+            allPaths = swP.paths.findAll { pathHelper.getInvolvedSwitches(it).size() == 3 }\n+            allPathCandidates = allPaths.unique(false) { a, b ->\n+                a.intersect(b) == [] ? 1 : 0\n+            } // just to avoid parallel links\n+            allPaths.unique(false) { a, b ->\n+                def p1 = pathHelper.getInvolvedSwitches(a)[1..-2]*.dpId\n+                def p2 = pathHelper.getInvolvedSwitches(b)[1..-2]*.dpId\n+                p1.intersect(p2) == [] ? 1 : 0\n+            }.size() >= 3\n+        } ?: assumeTrue(\"No suiting switches found\", false)\n+\n+        //select paths for further manipulations\n+        def mainPath1 = allPathCandidates.first()\n+        def mainPath2 = allPathCandidates.find { it != mainPath1 }\n+        def protectedPath = allPathCandidates.find { it != mainPath1 && it != mainPath2}\n+        def involvedSwP1 = pathHelper.getInvolvedSwitches(mainPath1)*.dpId\n+        def involvedSwP2 = pathHelper.getInvolvedSwitches(mainPath2)*.dpId\n+        def involvedSwProtected = pathHelper.getInvolvedSwitches(protectedPath)*.dpId\n+\n+        and: \"Src, dst and transit switches belongs to different POPs(src:1, dst:4, tr1/tr2:2, tr3:3)\"\n+        // tr1/tr2 for the main path and tr3 for the protected path\n+        database.setSwitchPop(swPair.src.dpId, \"1\")\n+        [involvedSwP1[1], involvedSwP2[1]].each { swId -> database.setSwitchPop(swId, \"2\") }\n+        database.setSwitchPop(swPair.dst.dpId, \"4\")\n+        database.setSwitchPop(involvedSwProtected[1], \"3\")\n+\n+        and: \"Path which contains tr3 is non preferable\"\n+        /** There is not possibility to use the 'makePathNotPreferable' method,\n+         * because it sets too high value for protectedPath.\n+         *\n+         *  totalCostOFProtectedPath should be the following:\n+         *  totalCostOfMainPath + (amountOfInvolvedIsls * diversity.pop.isl.cost * diversityGroupPerPopUseCounter) - 1,\n+         *  where:\n+         *  diversity.pop.isl.cost = 1000\n+         *  diversityGroupPerPopUseCounter = amount of switches in the same POP\n+         *  (in this test there are two switches in the same POP) */\n+        List<Isl> islsToUpdate = []\n+        allPaths.findAll { involvedSwProtected[1] in pathHelper.getInvolvedSwitches(it)*.dpId }.each {\n+            pathHelper.getInvolvedIsls(it).each {\n+                islsToUpdate << it\n+            }\n+        }\n+        def involvedIslsOfMainPath = pathHelper.getInvolvedIsls(mainPath1)\n+        def totalCostOfMainPath = involvedIslsOfMainPath.sum { northbound.getLink(it).cost ?: 700 }\n+        def amountOfIlslsOnMainPath = involvedIslsOfMainPath.size()\n+        Integer newIslCost = ((totalCostOfMainPath + (amountOfIlslsOnMainPath * 2000) - 1) /\n+                pathHelper.getInvolvedIsls(protectedPath).size()).toInteger()\n+        log.debug(\"newCost: $newIslCost\")\n+\n+        islsToUpdate.unique().each { isl ->\n+            northbound.updateLinkProps([islUtils.toLinkProps(isl, [\"cost\": newIslCost.toString()])])\n+        }\n+\n+        when: \"Create a protected flow\"\n+        /** At this point we have the following topology:\n+         *\n+         *             srcSwitch_POP_1\n+         *             /       |       \\\n+         *            / 700    | 700    \\ newIslCost\n+         *           /         |         \\\n+         *   trSw1_POP_2   trSw2_POP_2   trSw3_POP_3\n+         *          \\          |         /\n+         *           \\ 700     | 700    / newIslCost\n+         *            \\        |       /\n+         *             dstSwitch_POP_4", "originalCommit": "03ca9ddb133aaabaccaae27af3494305f633691e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "612c07992d80e49c8ec9192ff4d7cac2fb3f8a91", "url": "https://github.com/telstra/open-kilda/commit/612c07992d80e49c8ec9192ff4d7cac2fb3f8a91", "message": "add test for pop and protected path", "committedDate": "2020-03-30T11:54:34Z", "type": "forcePushed"}, {"oid": "f398e43d3773ec8ad8f732c5941f40e5df1b62e1", "url": "https://github.com/telstra/open-kilda/commit/f398e43d3773ec8ad8f732c5941f40e5df1b62e1", "message": "add test for pop and protected path", "committedDate": "2020-03-30T15:32:33Z", "type": "forcePushed"}, {"oid": "ed54b51d06f42968ae50b6d2266e440ef9b7c601", "url": "https://github.com/telstra/open-kilda/commit/ed54b51d06f42968ae50b6d2266e440ef9b7c601", "message": "add test for pop and protected path", "committedDate": "2020-04-03T12:15:32Z", "type": "forcePushed"}, {"oid": "bceaa8419f3e9e0eb04f276a7033707b61d4defe", "url": "https://github.com/telstra/open-kilda/commit/bceaa8419f3e9e0eb04f276a7033707b61d4defe", "message": "add test for pop and protected path", "committedDate": "2020-04-06T07:45:30Z", "type": "commit"}, {"oid": "bceaa8419f3e9e0eb04f276a7033707b61d4defe", "url": "https://github.com/telstra/open-kilda/commit/bceaa8419f3e9e0eb04f276a7033707b61d4defe", "message": "add test for pop and protected path", "committedDate": "2020-04-06T07:45:30Z", "type": "forcePushed"}]}