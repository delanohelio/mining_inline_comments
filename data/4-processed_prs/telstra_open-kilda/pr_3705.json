{"pr_number": 3705, "pr_title": "Add design for flow loop feature", "pr_createdAt": "2020-08-31T12:54:48Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3705", "timeline": [{"oid": "94d58890ca7f5ed8032112389f7e3631de4aa0ff", "url": "https://github.com/telstra/open-kilda/commit/94d58890ca7f5ed8032112389f7e3631de4aa0ff", "message": "Add design for flow loop feature", "committedDate": "2020-09-02T13:16:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3Nzk2OQ==", "url": "https://github.com/telstra/open-kilda/pull/3705#discussion_r482777969", "bodyText": "if one switch flows are supported, you need at least port to this api, also, consider one-switch one-port flows as well, maybe it's worth having vlan_vid too", "author": "timofei-durakov", "createdAt": "2020-09-03T07:50:30Z", "path": "docs/design/flow-loop/flow-loop.md", "diffHunk": "@@ -0,0 +1,44 @@\n+# Flow loop feature\n+\n+## Overview\n+\n+Flow loop feature designed for flow path testing. Loop provides additional flow rules on one of the terminating switch so any flow traffic is returned to switch-port where it was received. \n+Such flow has `looped=true` flag and support all flow operations. When loop removed system should restore original flow rules.\n+\n+![Flow-loop](flow-loop.png \"Flow loop\")\n+\n+## API\n+\n+* Get existing flow loops `GET /v2/flows/loop` with optional params `flow_id` and `switch_id`. Response example:\n+\n+~~~\n+[ \n+    {\n+        \"switch_id\": \"00:00:11:22:33:44:55:66\",\n+        \"flow_id\": \"string\"", "originalCommit": "94d58890ca7f5ed8032112389f7e3631de4aa0ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgwMjYwMw==", "url": "https://github.com/telstra/open-kilda/pull/3705#discussion_r482802603", "bodyText": "All one-switch and one-port flows will have different flow_id and the same switch_id so we can separate them. Why do we need extra fields like port or vlan? This API should support filtration by switch, flow and both of them.", "author": "rozdy", "createdAt": "2020-09-03T08:30:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3Nzk2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4NzQzNQ==", "url": "https://github.com/telstra/open-kilda/pull/3705#discussion_r482887435", "bodyText": "ok, i have one switch flow on sw 1 how I enable loop only for src endpoint of this flow since the switch id is exactly the same?", "author": "timofei-durakov", "createdAt": "2020-09-03T10:52:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3Nzk2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3ODUyMw==", "url": "https://github.com/telstra/open-kilda/pull/3705#discussion_r482778523", "bodyText": "where you going to store this flag from db perspective, please describe", "author": "timofei-durakov", "createdAt": "2020-09-03T07:51:21Z", "path": "docs/design/flow-loop/flow-loop.md", "diffHunk": "@@ -0,0 +1,44 @@\n+# Flow loop feature\n+\n+## Overview\n+\n+Flow loop feature designed for flow path testing. Loop provides additional flow rules on one of the terminating switch so any flow traffic is returned to switch-port where it was received. \n+Such flow has `looped=true` flag and support all flow operations. When loop removed system should restore original flow rules.", "originalCommit": "94d58890ca7f5ed8032112389f7e3631de4aa0ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgwMjg0MQ==", "url": "https://github.com/telstra/open-kilda/pull/3705#discussion_r482802841", "bodyText": "It's described in Details section.", "author": "rozdy", "createdAt": "2020-09-03T08:31:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3ODUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4ODIxNg==", "url": "https://github.com/telstra/open-kilda/pull/3705#discussion_r482888216", "bodyText": "no details, which attributes will this looped on should include?", "author": "timofei-durakov", "createdAt": "2020-09-03T10:53:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3ODUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzcwNTE5OQ==", "url": "https://github.com/telstra/open-kilda/pull/3705#discussion_r483705199", "bodyText": "Reworked from relation to additional properties to flow node.", "author": "rozdy", "createdAt": "2020-09-04T15:45:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3ODUyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4MDYxOQ==", "url": "https://github.com/telstra/open-kilda/pull/3705#discussion_r482780619", "bodyText": "it may affect our sync/validate for the rules, since the diff could be invisible for validation procedure", "author": "timofei-durakov", "createdAt": "2020-09-03T07:54:48Z", "path": "docs/design/flow-loop/flow-loop.md", "diffHunk": "@@ -0,0 +1,44 @@\n+# Flow loop feature\n+\n+## Overview\n+\n+Flow loop feature designed for flow path testing. Loop provides additional flow rules on one of the terminating switch so any flow traffic is returned to switch-port where it was received. \n+Such flow has `looped=true` flag and support all flow operations. When loop removed system should restore original flow rules.\n+\n+![Flow-loop](flow-loop.png \"Flow loop\")\n+\n+## API\n+\n+* Get existing flow loops `GET /v2/flows/loop` with optional params `flow_id` and `switch_id`. Response example:\n+\n+~~~\n+[ \n+    {\n+        \"switch_id\": \"00:00:11:22:33:44:55:66\",\n+        \"flow_id\": \"string\"\n+    },\n+...\n+]\n+~~~\n+\n+* Create flow loop on chosen switch `POST /v2/flows/loop/{flow_id}/{switch_id}`. Flow may have only one loop.\n+\n+* Delete flow loop and restore regular flow rules `DELETE /v2/flows/loop/{flow_id}/{switch_id}`. \n+\n+## Details\n+\n+From persistence perspective flow loop stored as a relation from flow to switch with type `looped on`.\n+\n+Flow loop create and delete operations implemented using H&S approach as a separate hubs in `flow-hs` topology. All H&S flow operations use single point of rule generation based on flow parameters. In current implementation it is `SpeakerFlowSegmentRequestBuilder` class. It should be modified to support flow loop flag and reused in flow loop operations.\n+\n+Additional loop rules has the same cookie as all other flow rules but higher priority. Only these rules are installed or deleted during flow loop operations.", "originalCommit": "94d58890ca7f5ed8032112389f7e3631de4aa0ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgxMjI1NQ==", "url": "https://github.com/telstra/open-kilda/pull/3705#discussion_r482812255", "bodyText": "As it mentioned in Additional changes section flow validation should be changed to expect such loop rules. Flow sync now is a reroute with force flag so it will use the same single point of rule generation. And switch validation is check only expected cookie presence so it should work fine. Separately we need to rework switch validation to check actual flow rules.", "author": "rozdy", "createdAt": "2020-09-03T08:46:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4MDYxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4NjgzOQ==", "url": "https://github.com/telstra/open-kilda/pull/3705#discussion_r482886839", "bodyText": "usecase: disabling loop stucked, due to some other issues. How operator should be confident that the flows, installed on a switch are correct? since the cookies are the same, it would be much more harder to figure out and sync in case of any issues.", "author": "timofei-durakov", "createdAt": "2020-09-03T10:51:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4MDYxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzcwNTUxNw==", "url": "https://github.com/telstra/open-kilda/pull/3705#discussion_r483705517", "bodyText": "Reworked to use separate cookie type.", "author": "rozdy", "createdAt": "2020-09-04T15:45:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4MDYxOQ=="}], "type": "inlineReview"}, {"oid": "3034b7a91a01b34e861aa32fc4ae344b06b8a0db", "url": "https://github.com/telstra/open-kilda/commit/3034b7a91a01b34e861aa32fc4ae344b06b8a0db", "message": "Add design for flow loop feature", "committedDate": "2020-09-03T09:35:41Z", "type": "forcePushed"}, {"oid": "40aaa05b58319ab597effa5a0540798570f0e336", "url": "https://github.com/telstra/open-kilda/commit/40aaa05b58319ab597effa5a0540798570f0e336", "message": "Add design for flow loop feature", "committedDate": "2020-09-03T12:45:34Z", "type": "forcePushed"}, {"oid": "e262ebbdae517a1339afe6b0ac6c5121bbf40b7a", "url": "https://github.com/telstra/open-kilda/commit/e262ebbdae517a1339afe6b0ac6c5121bbf40b7a", "message": "Add design for flow loop feature", "committedDate": "2020-09-04T15:43:13Z", "type": "forcePushed"}, {"oid": "29811c2d04860a9435e0e90e2ddd9e0243a6e042", "url": "https://github.com/telstra/open-kilda/commit/29811c2d04860a9435e0e90e2ddd9e0243a6e042", "message": "Add design for flow loop feature", "committedDate": "2020-09-04T15:44:38Z", "type": "forcePushed"}, {"oid": "96679d721e5e51ca5a6f45428949657c1b6ab516", "url": "https://github.com/telstra/open-kilda/commit/96679d721e5e51ca5a6f45428949657c1b6ab516", "message": "Add design for flow loop feature", "committedDate": "2020-09-11T11:52:51Z", "type": "forcePushed"}, {"oid": "cdf3861cea1e86684047301f1084b790030a0cc1", "url": "https://github.com/telstra/open-kilda/commit/cdf3861cea1e86684047301f1084b790030a0cc1", "message": "Add design for flow loop feature", "committedDate": "2020-09-24T12:58:42Z", "type": "commit"}, {"oid": "cdf3861cea1e86684047301f1084b790030a0cc1", "url": "https://github.com/telstra/open-kilda/commit/cdf3861cea1e86684047301f1084b790030a0cc1", "message": "Add design for flow loop feature", "committedDate": "2020-09-24T12:58:42Z", "type": "forcePushed"}]}