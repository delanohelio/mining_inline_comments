{"pr_number": 3645, "pr_title": "Update test framework to allow 2+ management floodlights for switch", "pr_createdAt": "2020-07-20T15:41:45Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3645", "timeline": [{"oid": "08ce9bbaf1779e99b9314943f90647e42593944e", "url": "https://github.com/telstra/open-kilda/commit/08ce9bbaf1779e99b9314943f90647e42593944e", "message": "Update test framework to allow 2+ management floodlights for switch", "committedDate": "2020-07-21T08:16:14Z", "type": "forcePushed"}, {"oid": "556deaf511e60f68dba8bd43f33a1aa69371423d", "url": "https://github.com/telstra/open-kilda/commit/556deaf511e60f68dba8bd43f33a1aa69371423d", "message": "Update test framework to allow 2+ management floodlights for switch", "committedDate": "2020-07-23T11:26:45Z", "type": "forcePushed"}, {"oid": "b9a26316dc72e1670e19ad4e94cefd6423bad38b", "url": "https://github.com/telstra/open-kilda/commit/b9a26316dc72e1670e19ad4e94cefd6423bad38b", "message": "Update test framework to allow 2+ management floodlights for switch", "committedDate": "2020-07-24T09:30:09Z", "type": "forcePushed"}, {"oid": "376668280f04fafeb186c3357c1ed525df22b567", "url": "https://github.com/telstra/open-kilda/commit/376668280f04fafeb186c3357c1ed525df22b567", "message": "Update test framework to allow 2+ management floodlights for switch", "committedDate": "2020-07-27T12:27:54Z", "type": "forcePushed"}, {"oid": "16a9eb1a1bc2b4d20a77baf57d9fc215c70e1587", "url": "https://github.com/telstra/open-kilda/commit/16a9eb1a1bc2b4d20a77baf57d9fc215c70e1587", "message": "Update test framework to allow 2+ management floodlights for switch", "committedDate": "2020-07-27T13:15:39Z", "type": "forcePushed"}, {"oid": "e93e3c14414d85dc8d7dd8da8687fc5da810be62", "url": "https://github.com/telstra/open-kilda/commit/e93e3c14414d85dc8d7dd8da8687fc5da810be62", "message": "Update test framework to allow 2+ management floodlights for switch", "committedDate": "2020-07-28T13:39:08Z", "type": "forcePushed"}, {"oid": "bbac873030404624c62352632b5e7fe209570977", "url": "https://github.com/telstra/open-kilda/commit/bbac873030404624c62352632b5e7fe209570977", "message": "Update test framework to allow 2+ management floodlights for switch", "committedDate": "2020-08-04T15:16:20Z", "type": "forcePushed"}, {"oid": "c8e68b2e0e47a4734c5012f3ace0936aa60e3ff3", "url": "https://github.com/telstra/open-kilda/commit/c8e68b2e0e47a4734c5012f3ace0936aa60e3ff3", "message": "Update test framework to allow 2+ management floodlights for switch", "committedDate": "2020-08-06T09:24:20Z", "type": "forcePushed"}, {"oid": "35ed52bef8b96a0c8b33a39341a25b1cd641bfaa", "url": "https://github.com/telstra/open-kilda/commit/35ed52bef8b96a0c8b33a39341a25b1cd641bfaa", "message": "Update test framework to allow 2+ management floodlights for switch", "committedDate": "2020-08-07T11:43:22Z", "type": "forcePushed"}, {"oid": "96ca12b9ccec76cd114082389d53a7e09eb64c57", "url": "https://github.com/telstra/open-kilda/commit/96ca12b9ccec76cd114082389d53a7e09eb64c57", "message": "Update test framework to allow 2+ management floodlights for switch", "committedDate": "2020-08-07T14:31:06Z", "type": "forcePushed"}, {"oid": "8fd7e2c903dfbcd38e3f4bb5eca1b332e3146168", "url": "https://github.com/telstra/open-kilda/commit/8fd7e2c903dfbcd38e3f4bb5eca1b332e3146168", "message": "Update test framework to allow 2+ management floodlights for switch", "committedDate": "2020-08-08T16:22:44Z", "type": "forcePushed"}, {"oid": "985622c91545826dbf31e19ed1c347f2683a42db", "url": "https://github.com/telstra/open-kilda/commit/985622c91545826dbf31e19ed1c347f2683a42db", "message": "Update test framework to allow 2+ management floodlights for switch", "committedDate": "2020-08-10T15:24:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2NzQ5Nw==", "url": "https://github.com/telstra/open-kilda/pull/3645#discussion_r464367497", "bodyText": "should it be commented out?", "author": "andriidovhan", "createdAt": "2020-08-03T11:58:21Z", "path": "confd/templates/base-storm-topology/topology.properties.tmpl", "diffHunk": "@@ -90,6 +90,7 @@ floodlight.alive.timeout = {{ getv \"/kilda_floodlight_alive_timeout\" }}\n floodlight.alive.interval = {{ getv \"/kilda_floodlight_alive_interval\" }}\n message.blacklist.timeout = {{ getv \"/kilda_message_blacklist_timeout\" }}\n floodlight.regions = {{ getv \"/kilda_floodlight_regions\" }}\n+# floodlight.switch.mapping.remove.delay.seconds = 900", "originalCommit": "e93e3c14414d85dc8d7dd8da8687fc5da810be62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIxNTgyNQ==", "url": "https://github.com/telstra/open-kilda/pull/3645#discussion_r469215825", "bodyText": "this was some rebase/conflict glitch. Fixed itself after rebase", "author": "rtretyak", "createdAt": "2020-08-12T12:20:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2NzQ5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ4ODY2Nw==", "url": "https://github.com/telstra/open-kilda/pull/3645#discussion_r468488667", "bodyText": "looks like it is removed from confd/vars/main.yml", "author": "andriidovhan", "createdAt": "2020-08-11T10:43:43Z", "path": "src-java/testing/atdd-staging/src/main/java/org/openkilda/atdd/staging/config/TopologyConfig.java", "diffHunk": "@@ -35,7 +35,7 @@\n     @Value(\"file:${topology.definition.file:topology.yaml}\")\n     private Resource topologyDefinitionFile;\n \n-    @Value(\"#{'${floodlight.controllers.management.openflow}'.split(',').get(0)}\")\n+    @Value(\"#{'${floodlight.openflow}'.split(',').get(0)}\")\n     private String managementController;\n \n     @Value(\"#{'${floodlight.controllers.stat.openflow}'.split(',').get(0)}\")", "originalCommit": "985622c91545826dbf31e19ed1c347f2683a42db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ5MTQwNQ==", "url": "https://github.com/telstra/open-kilda/pull/3645#discussion_r468491405", "bodyText": "you can also remove List<String> controllerHosts", "author": "andriidovhan", "createdAt": "2020-08-11T10:49:15Z", "path": "src-java/testing/atdd-staging/src/main/java/org/openkilda/atdd/staging/config/TopologyConfig.java", "diffHunk": "@@ -55,7 +55,6 @@ public TopologyDefinition topologyDefinition() throws IOException {\n         List<String> controllerHosts = Arrays.asList(managementController, statController);", "originalCommit": "985622c91545826dbf31e19ed1c347f2683a42db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUyNDMxOQ==", "url": "https://github.com/telstra/open-kilda/pull/3645#discussion_r468524319", "bodyText": "probably would be better to call this variable as  swAddress ?", "author": "andriidovhan", "createdAt": "2020-08-11T11:56:03Z", "path": "src-java/testing/test-library/src/main/java/org/openkilda/testing/service/lockkeeper/LockKeeperVirtualImpl.java", "diffHunk": "@@ -184,41 +194,52 @@ public void unblockFloodlightAccess(String region, FloodlightResourceAddress add\n     @Override\n     public void shapeSwitchesTraffic(List<Switch> switches, TrafficControlData tcData) {\n         log.debug(\"Add traffic control rules for switches {}\",\n-                switches.stream().map(Switch::getDpId).collect(Collectors.toList()));\n+                switches.stream().map(Switch::getDpId).collect(toList()));\n         List<FloodlightResourceAddress> swResources = switches.stream()\n-                .map(sw -> LockKeeperService.toFlResource(sw, mgmtManager)).collect(Collectors.toList());\n+                .flatMap(sw -> sw.getRegions().stream().map(region -> {\n+                    Floodlight fl = flHelper.getFlByRegion(region);\n+                    String swInfo = fl.getFloodlightService().getSwitches().stream().filter(s ->", "originalCommit": "985622c91545826dbf31e19ed1c347f2683a42db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUzNjIzNg==", "url": "https://github.com/telstra/open-kilda/pull/3645#discussion_r468536236", "bodyText": "@Tidy?", "author": "andriidovhan", "createdAt": "2020-08-11T12:18:08Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/FloodlightKafkaConnectionSpec.groovy", "diffHunk": "@@ -25,12 +27,26 @@ class FloodlightKafkaConnectionSpec extends HealthCheckSpecification {\n     @Value('${antiflap.cooldown}')\n     int antiflapCooldown\n \n-    def \"System survives temporary connection outage between Floodlight and Kafka\"() {\n-        setup: \"Pick a region to break, find which isls are between regions\"\n-        assumeTrue(\"This test requires at least 2 floodlight regions\", mgmtFlManager.regions.size() > 1)\n-        def regionToBreak = mgmtFlManager.regions.first()\n+    def \"System properly handles ISL statuses during connection problems between Floodlights and Kafka\"() {", "originalCommit": "985622c91545826dbf31e19ed1c347f2683a42db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUzODM3NQ==", "url": "https://github.com/telstra/open-kilda/pull/3645#discussion_r468538375", "bodyText": "please remove println or use log.debug(\"\")", "author": "andriidovhan", "createdAt": "2020-08-11T12:22:05Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/FloodlightKafkaConnectionSpec.groovy", "diffHunk": "@@ -41,9 +57,10 @@ class FloodlightKafkaConnectionSpec extends HealthCheckSpecification {\n         def nonRtlTransitIsls = islsBetweenRegions.findAll { isl ->\n             [isl.srcSwitch, isl.dstSwitch].any { !it.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD) }\n         }\n-        def asyncWait = task {\n+        println nonRtlTransitIsls", "originalCommit": "985622c91545826dbf31e19ed1c347f2683a42db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU0MjIzOQ==", "url": "https://github.com/telstra/open-kilda/pull/3645#discussion_r468542239", "bodyText": "Why do you need forEach there?", "author": "andriidovhan", "createdAt": "2020-08-11T12:29:24Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/resilience/FloodlightKafkaConnectionSpec.groovy", "diffHunk": "@@ -41,9 +57,10 @@ class FloodlightKafkaConnectionSpec extends HealthCheckSpecification {\n         def nonRtlTransitIsls = islsBetweenRegions.findAll { isl ->\n             [isl.srcSwitch, isl.dstSwitch].any { !it.features.contains(SwitchFeature.NOVIFLOW_COPY_FIELD) }\n         }\n-        def asyncWait = task {\n+        println nonRtlTransitIsls\n+        def nonRtlShouldFail = task {\n             wait(WAIT_OFFSET + discoveryTimeout) {\n-                nonRtlTransitIsls.each { assert northbound.getLink(it).state == IslChangeType.FAILED }\n+                nonRtlTransitIsls.forEach { assert northbound.getLink(it).state == IslChangeType.FAILED }", "originalCommit": "985622c91545826dbf31e19ed1c347f2683a42db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIxMjMyNA==", "url": "https://github.com/telstra/open-kilda/pull/3645#discussion_r469212324", "bodyText": "nonRtlTransitIsls can be an empty list, in this case each will return an empty list, which will be considered as 'groovy false'. forEach is always void", "author": "rtretyak", "createdAt": "2020-08-12T12:14:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU0MjIzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU0OTUxNA==", "url": "https://github.com/telstra/open-kilda/pull/3645#discussion_r468549514", "bodyText": "1 -> first?\nthen it will be in the same style as\nfirst RW switch available\nsecond RW switch available\nsecond RO switch available", "author": "andriidovhan", "createdAt": "2020-08-11T12:42:16Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/stats/MflStatSpec.groovy", "diffHunk": "@@ -238,4 +241,105 @@ class MflStatSpec extends HealthCheckSpecification {\n             flowHelperV2.deleteFlow(flow.flowId)\n         }\n     }\n+\n+    @Tags([TOPOLOGY_DEPENDENT])\n+    def \"System is able to collect stats if at least 1 stats or management controller is available\"() {\n+        given: \"A flow, src switch is connected to 2 RW and 2 RO floodlights\"\n+        assumeTrue(\"Require at least 2 switches with connected traffgen\", topology.activeTraffGens.size() > 1)\n+        def srcSwitch = topology.activeTraffGens*.switchConnected.find { flHelper.filterRegionsByMode(it.regions, RW).size() == 2 &&\n+            flHelper.filterRegionsByMode(it.regions, RO).size() == 2 }\n+        assumeTrue(\"This test requires a tg switch in 2 RW regions and 2 RO regions\", srcSwitch != null)\n+        def dstSwitch = topology.activeTraffGens*.switchConnected.find { it.dpId != srcSwitch.dpId }\n+        def flow = flowHelperV2.randomFlow(srcSwitch, dstSwitch)\n+        flow.maximumBandwidth = 100\n+        flowHelperV2.addFlow(flow)\n+\n+        when: \"Src switch is only left with 1 management controller (no stats controllers)\"\n+        def regionToStay = srcSwitch.regions.find { flHelper.getFlByRegion(it).mode == RW }\n+        def blockData = lockKeeper.knockoutSwitch(srcSwitch, srcSwitch.regions - regionToStay)\n+\n+        and: \"Generate traffic on the given flow\"\n+        Date startTime = new Date()\n+        def traffExam = traffExamProvider.get()\n+        def exam = new FlowTrafficExamBuilder(topology, traffExam)\n+                .buildExam(flowHelperV2.toV1(flow), (int) flow.maximumBandwidth, 5)\n+        exam.setResources(traffExam.startExam(exam, true))\n+        assert traffExam.waitExam(exam).hasTraffic()\n+\n+        then: \"Stat on the src switch should be collected (first RW switch available)\"\n+        def metric = metricPrefix + \"flow.raw.bytes\"\n+        def tags = [switchid: srcSwitch.dpId.toOtsdFormat(), flowid: flow.flowId]\n+        def waitInterval = 10\n+        def initStats\n+        //first 60 seconds - trying to retrieve stats from management controller, next 60 seconds from stat controller\n+        Wrappers.wait(statsRouterInterval * 2 + WAIT_OFFSET, waitInterval) {\n+            initStats = otsdb.query(startTime, metric, tags).dps\n+            assert initStats.size() >= 1\n+        }\n+\n+        when: \"Src switch is only left with the other management controller (no stats controllers)\"\n+        lockKeeper.reviveSwitch(srcSwitch, blockData)\n+        regionToStay = srcSwitch.regions.find { flHelper.getFlByRegion(it).mode == RW && it != regionToStay }\n+        blockData = lockKeeper.knockoutSwitch(srcSwitch, srcSwitch.regions - regionToStay)\n+\n+        and: \"Generate traffic on the given flow\"\n+        exam.setResources(traffExam.startExam(exam, true))\n+        assert traffExam.waitExam(exam).hasTraffic()\n+\n+        then: \"Stat on the src switch should be collected (second RW switch available)\"\n+        def newStats\n+        //first 60 seconds - trying to retrieve stats from management controller, next 60 seconds from stat controller\n+        Wrappers.wait(statsRouterInterval * 2 + WAIT_OFFSET, waitInterval) {\n+            newStats = otsdb.query(startTime, metric, tags).dps\n+            assert newStats.size() > initStats.size()\n+            assert newStats.entrySet()[-2].value < newStats.entrySet()[-1].value\n+        }\n+\n+        when: \"Set only 1 statistic controller on the src switch and disconnect from management\"\n+        initStats = newStats\n+        lockKeeper.reviveSwitch(srcSwitch, blockData)\n+        regionToStay = srcSwitch.regions.find { flHelper.getFlByRegion(it).mode == RO }\n+        blockData = lockKeeper.knockoutSwitch(srcSwitch, srcSwitch.regions - regionToStay)\n+\n+        and: \"Generate traffic on the given flow\"\n+        exam.setResources(traffExam.startExam(exam, true))\n+        assert traffExam.waitExam(exam).hasTraffic()\n+\n+        then: \"Stat on the src switch should be collected (1 RO switch available)\"", "originalCommit": "985622c91545826dbf31e19ed1c347f2683a42db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1MDMxMg==", "url": "https://github.com/telstra/open-kilda/pull/3645#discussion_r468550312", "bodyText": "@Tidy?", "author": "andriidovhan", "createdAt": "2020-08-11T12:43:46Z", "path": "src-java/testing/functional-tests/src/test/groovy/org/openkilda/functionaltests/spec/stats/MflStatSpec.groovy", "diffHunk": "@@ -238,4 +241,105 @@ class MflStatSpec extends HealthCheckSpecification {\n             flowHelperV2.deleteFlow(flow.flowId)\n         }\n     }\n+\n+    @Tags([TOPOLOGY_DEPENDENT])\n+    def \"System is able to collect stats if at least 1 stats or management controller is available\"() {", "originalCommit": "985622c91545826dbf31e19ed1c347f2683a42db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1NDU3Mw==", "url": "https://github.com/telstra/open-kilda/pull/3645#discussion_r468554573", "bodyText": "floodlght.modes is missed", "author": "andriidovhan", "createdAt": "2020-08-11T12:51:02Z", "path": "src-java/testing/test-library/src/main/java/org/openkilda/testing/config/DefaultServiceConfig.java", "diffHunk": "@@ -85,30 +87,34 @@ public RestTemplate traffExamRestTemplate() {\n     public Map<String, RestTemplate> lockKeeperRestTemplates(\n             @Value(\"${lockkeeper.port}\") Integer lockKeeperPort,\n             @Value(\"#{'${floodlight.regions}'.split(',')}\") List<String> regions,\n-            @Value(\"#{'${floodlight.controllers.management.endpoints}'.split(',')}\") List<String> mgmtFloodlights) {\n+            @Value(\"#{'${floodlight.endpoints}'.split(',')}\") List<String> flEndpoints) {\n         Map<String, RestTemplate> result = new HashMap<>();\n-        for (int i = 0; i < mgmtFloodlights.size(); i++) {\n-            String lockKeeperEndpoint = mgmtFloodlights.get(i)\n+        for (int i = 0; i < flEndpoints.size(); i++) {\n+            String lockKeeperEndpoint = flEndpoints.get(i)\n                     .replaceFirst(\"(.*):\\\\d+\", \"$1:\" + lockKeeperPort);\n             result.put(regions.get(i), buildLoggingRestTemplate(lockKeeperEndpoint));\n         }\n         return result;\n     }\n \n-    @Bean(name = \"managementFloodlights\")\n-    public List<FloodlightService> managementFloodlights(\n-            @Value(\"#{'${floodlight.controllers.management.endpoints}'.split(',')}\") List<String> mgmtFloodlights) {\n-        List<FloodlightService> services = new ArrayList<>();\n-        mgmtFloodlights.forEach(f -> services.add(new FloodlightServiceImpl(f)));\n-        return services;\n-    }\n-\n-    @Bean(name = \"statsFloodlights\")\n-    public List<FloodlightService> statsFloodlights(\n-            @Value(\"#{'${floodlight.controllers.stat.endpoints}'.split(',')}\") List<String> mgmtFloodlights) {\n-        List<FloodlightService> services = new ArrayList<>();\n-        mgmtFloodlights.forEach(f -> services.add(new FloodlightServiceImpl(f)));\n-        return services;\n+    @Bean\n+    public List<Floodlight> floodlights(@Value(\"#{'${floodlight.openflows}'.split(',')}\") List<String> openflows,\n+                                        @Value(\"#{'${floodlight.endpoints}'.split(',')}\") List<String> endpoints,\n+                                        @Value(\"#{'${floodlight.containers}'.split(',')}\") List<String> containers,\n+                                        @Value(\"#{'${floodlight.regions}'.split(',')}\") List<String> regions,\n+                                        @Value(\"#{'${floodlight.modes}'.split(',')}\") List<String> modes) {\n+        if (openflows.size() != endpoints.size() || openflows.size() != containers.size()\n+                || openflows.size() != regions.size()) {", "originalCommit": "985622c91545826dbf31e19ed1c347f2683a42db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cef52fad231aa1f8bf9fd5c935c2569b4ae4373f", "url": "https://github.com/telstra/open-kilda/commit/cef52fad231aa1f8bf9fd5c935c2569b4ae4373f", "message": "Update test framework to allow 2+ floodlights for switch", "committedDate": "2020-08-12T12:19:35Z", "type": "forcePushed"}, {"oid": "badbb3c9d4ea574dbf94c0a94c1ba1b05f24a094", "url": "https://github.com/telstra/open-kilda/commit/badbb3c9d4ea574dbf94c0a94c1ba1b05f24a094", "message": "Update test framework to allow 2+ floodlights for switch", "committedDate": "2020-08-12T12:36:53Z", "type": "forcePushed"}, {"oid": "981b6fd14c277adb8b715e4a7b92a7c546457cf3", "url": "https://github.com/telstra/open-kilda/commit/981b6fd14c277adb8b715e4a7b92a7c546457cf3", "message": "Update test framework to allow 2+ floodlights for switch", "committedDate": "2020-08-13T10:09:14Z", "type": "commit"}, {"oid": "981b6fd14c277adb8b715e4a7b92a7c546457cf3", "url": "https://github.com/telstra/open-kilda/commit/981b6fd14c277adb8b715e4a7b92a7c546457cf3", "message": "Update test framework to allow 2+ floodlights for switch", "committedDate": "2020-08-13T10:09:14Z", "type": "forcePushed"}]}