{"pr_number": 3129, "pr_title": "Added LLDP shared rule V2 removing and installation", "pr_createdAt": "2020-01-21T07:00:56Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3129", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMwMzgwNg==", "url": "https://github.com/telstra/open-kilda/pull/3129#discussion_r371303806", "bodyText": "I'd recommend to encapsulate such flags into a separate structure and re-use it in corresponding requests/factories/commands. This will simplify future changes - affecting the only structure, not dozens of classes.", "author": "sergii-iakovenko", "createdAt": "2020-01-27T15:23:41Z", "path": "services/src/floodlight-service/floodlight-api/src/main/java/org/openkilda/floodlight/api/request/IngressFlowSegmentBase.java", "diffHunk": "@@ -45,14 +45,19 @@\n     @JsonProperty(\"remove_customer_port_shared_catch_rule\")\n     protected final boolean removeCustomerPortSharedCatchRule;\n \n+    @JsonProperty(\"remove_customer_port_shared_lldp_catch_rule\")\n+    protected final boolean removeCustomerPortSharedLldpCatchRule;\n+\n     IngressFlowSegmentBase(\n             MessageContext context, UUID commandId, FlowSegmentMetadata metadata, @NonNull FlowEndpoint endpoint,\n-            MeterConfig meterConfig, @NonNull SwitchId egressSwitchId, boolean removeCustomerPortSharedCatchRule) {\n+            MeterConfig meterConfig, @NonNull SwitchId egressSwitchId, boolean removeCustomerPortSharedCatchRule,\n+            boolean removeCustomerPortSharedLldpCatchRule) {", "originalCommit": "b3c10c4b84f0f1d9dcef7f35c495fe84838aee8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2OTE4MA==", "url": "https://github.com/telstra/open-kilda/pull/3129#discussion_r371669180", "bodyText": "fixed", "author": "niksv", "createdAt": "2020-01-28T08:47:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMwMzgwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMxNjkyMw==", "url": "https://github.com/telstra/open-kilda/pull/3129#discussion_r371316923", "bodyText": "Are you sure that we won't have duplicates by tableId? The previous implementation handles it using Hashmap.", "author": "sergii-iakovenko", "createdAt": "2020-01-27T15:44:37Z", "path": "services/src/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/OfFlowDumpProducer.java", "diffHunk": "@@ -48,16 +47,17 @@\n     public OfFlowDumpProducer(MessageContext context, IOFSwitch sw, List<OFFlowMod> expectedFlows) {\n         swId = sw.getId();\n \n-        HashMap<TableId, DumpSelector> targetTables = new HashMap<>();\n+        List<DumpSelector> dumpSelectors = new ArrayList<>();\n         for (OFFlowMod entry : expectedFlows) {\n             TableId tableId = entry.getTableId();  // can be null", "originalCommit": "b3c10c4b84f0f1d9dcef7f35c495fe84838aee8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY3NTcxMg==", "url": "https://github.com/telstra/open-kilda/pull/3129#discussion_r371675712", "bodyText": "Let me describe the problem.\nDump selector has 2 fields: cookie and table id. So during getting rules from switch we will get only 1 rule. So in generally we are getting 1 rule from each table.\npreviously it was OK. But now we installing 2+ rules to one table. (for example shared LLDP rule and shared customer rule will be installed in table_0).\nSo now we have 2 dumpselectors:\n\nDumpSelector(table_0, customer_cookie)\nDumpSelector(table_0, lldp_cookie)\n\nthe second one will rewrite the first in hash map.\nThat is why I need a list.", "author": "niksv", "createdAt": "2020-01-28T09:01:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMxNjkyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMyMTg3MA==", "url": "https://github.com/telstra/open-kilda/pull/3129#discussion_r371321870", "bodyText": "Why do you require OFInstructionGotoTable as an argument if only the tableId is used in the method?", "author": "sergii-iakovenko", "createdAt": "2020-01-27T15:52:22Z", "path": "services/src/floodlight-service/floodlight-modules/src/test/java/org/openkilda/floodlight/command/flow/ingress/of/IngressFlowModFactoryTest.java", "diffHunk": "@@ -111,7 +112,7 @@ public void makeCustomerPortSharedCatchInstallMessage() {\n \n     // --- verify methods\n \n-    protected void verifyGoToTableInstruction(OFFlowMod message, TableId tableId) {\n+    protected void verifyGoToTableInstruction(Optional<OFInstructionGotoTable> expected, OFFlowMod message) {", "originalCommit": "b3c10c4b84f0f1d9dcef7f35c495fe84838aee8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY3NjY5Mw==", "url": "https://github.com/telstra/open-kilda/pull/3129#discussion_r371676693", "bodyText": "Because also I used expected.isPresent() to understand do we expect goTableInstraction or it should not be presented in instruction list", "author": "niksv", "createdAt": "2020-01-28T09:03:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMyMTg3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ1OTAyOA==", "url": "https://github.com/telstra/open-kilda/pull/3129#discussion_r372459028", "bodyText": "fixed", "author": "niksv", "createdAt": "2020-01-29T15:39:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMyMTg3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMzMTY4MQ==", "url": "https://github.com/telstra/open-kilda/pull/3129#discussion_r371331681", "bodyText": "I don't think this method is appropriate for such a generic action class. Please, consider introducing another base action class.", "author": "sergii-iakovenko", "createdAt": "2020-01-27T16:07:48Z", "path": "services/wfm/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/actions/FlowProcessingAction.java", "diffHunk": "@@ -101,4 +106,26 @@ protected boolean isRemoveCustomerPortSharedCatchRule(String flowId,\n \n         return flowIds.size() == 1 && flowIds.iterator().next().equals(flowId);\n     }\n+\n+    protected boolean isRemoveCustomerPortSharedLldpCatchRule(", "originalCommit": "b3c10c4b84f0f1d9dcef7f35c495fe84838aee8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc2NDM4Nw==", "url": "https://github.com/telstra/open-kilda/pull/3129#discussion_r371764387", "bodyText": "fixed", "author": "niksv", "createdAt": "2020-01-28T12:09:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMzMTY4MQ=="}], "type": "inlineReview"}, {"oid": "a7085985d01bc530f2a1ad30a02a27a992968a84", "url": "https://github.com/telstra/open-kilda/commit/a7085985d01bc530f2a1ad30a02a27a992968a84", "message": "LLDP v2 shared rules", "committedDate": "2020-01-28T12:10:05Z", "type": "forcePushed"}, {"oid": "5477d6ca3487494af82ec10f8c1ef714b11ba54d", "url": "https://github.com/telstra/open-kilda/commit/5477d6ca3487494af82ec10f8c1ef714b11ba54d", "message": "LLDP v2 shared rules", "committedDate": "2020-01-28T12:11:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQwNzg0Mw==", "url": "https://github.com/telstra/open-kilda/pull/3129#discussion_r372407843", "bodyText": "Is it a copy of the method in RemoveOldRulesAction?", "author": "sergii-iakovenko", "createdAt": "2020-01-29T14:19:27Z", "path": "services/wfm/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/update/actions/RevertNewRulesAction.java", "diffHunk": "@@ -92,4 +94,21 @@ protected void perform(State from, State to, Event event, FlowUpdateContext cont\n         stateMachine.saveActionToHistory(\n                 \"Commands for removing new rules and re-installing original ingress rule have been sent\");\n     }\n+\n+    private SpeakerRequestBuildContext getSpeakerRequestBuildContext(FlowUpdateFsm stateMachine) {", "originalCommit": "5477d6ca3487494af82ec10f8c1ef714b11ba54d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0OTgwMQ==", "url": "https://github.com/telstra/open-kilda/pull/3129#discussion_r375649801", "bodyText": "moved to common method", "author": "niksv", "createdAt": "2020-02-06T05:43:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQwNzg0Mw=="}], "type": "inlineReview"}, {"oid": "41136fbf4feac6767d2885bceb8a96d2add8e346", "url": "https://github.com/telstra/open-kilda/commit/41136fbf4feac6767d2885bceb8a96d2add8e346", "message": "LLDP v2 shared rules", "committedDate": "2020-01-29T15:51:28Z", "type": "forcePushed"}, {"oid": "650bab680ec9d6522b965a667df5bcffbd7efa10", "url": "https://github.com/telstra/open-kilda/commit/650bab680ec9d6522b965a667df5bcffbd7efa10", "message": "LLDP v2 shared rules", "committedDate": "2020-02-05T06:48:45Z", "type": "forcePushed"}, {"oid": "48d87cba864ba2f621feda68b56904fb347df2a5", "url": "https://github.com/telstra/open-kilda/commit/48d87cba864ba2f621feda68b56904fb347df2a5", "message": "LLDP v2 shared rules", "committedDate": "2020-02-05T08:40:58Z", "type": "forcePushed"}, {"oid": "97b1bc77e155f55340137e6990e0500d1d05843b", "url": "https://github.com/telstra/open-kilda/commit/97b1bc77e155f55340137e6990e0500d1d05843b", "message": "LLDP v2 shared rules", "committedDate": "2020-02-10T08:25:07Z", "type": "forcePushed"}, {"oid": "e7c30550ca0b3434d25aea4bcca68ca179322e54", "url": "https://github.com/telstra/open-kilda/commit/e7c30550ca0b3434d25aea4bcca68ca179322e54", "message": "LLDP v2 shared rules", "committedDate": "2020-02-10T11:39:32Z", "type": "forcePushed"}, {"oid": "57aac5ff4458f718acba56aeee09e91e51e5d2f9", "url": "https://github.com/telstra/open-kilda/commit/57aac5ff4458f718acba56aeee09e91e51e5d2f9", "message": "LLDP v2 shared rules", "committedDate": "2020-02-11T09:13:10Z", "type": "forcePushed"}, {"oid": "69fd29124439f8cf2981c580b97195c78c96385a", "url": "https://github.com/telstra/open-kilda/commit/69fd29124439f8cf2981c580b97195c78c96385a", "message": "LLDP v2 shared rules", "committedDate": "2020-02-17T08:28:17Z", "type": "forcePushed"}, {"oid": "778f9b9cafcbc67e4eed0dbc7de8e83b19820342", "url": "https://github.com/telstra/open-kilda/commit/778f9b9cafcbc67e4eed0dbc7de8e83b19820342", "message": "LLDP v2 shared rules", "committedDate": "2020-02-18T17:48:52Z", "type": "forcePushed"}, {"oid": "88a42b63078d04389a5d130a5838019a3fc19044", "url": "https://github.com/telstra/open-kilda/commit/88a42b63078d04389a5d130a5838019a3fc19044", "message": "LLDP v2 shared rules", "committedDate": "2020-02-19T11:59:21Z", "type": "forcePushed"}, {"oid": "bb51028b79ceaec442c0d383f7c711a2b08db751", "url": "https://github.com/telstra/open-kilda/commit/bb51028b79ceaec442c0d383f7c711a2b08db751", "message": "LLDP v2 shared rules", "committedDate": "2020-03-02T11:28:41Z", "type": "forcePushed"}, {"oid": "ad4e7342ee5ade3d066822dca649264999ff861b", "url": "https://github.com/telstra/open-kilda/commit/ad4e7342ee5ade3d066822dca649264999ff861b", "message": "LLDP v2 shared rules", "committedDate": "2020-03-02T12:42:28Z", "type": "commit"}, {"oid": "ad4e7342ee5ade3d066822dca649264999ff861b", "url": "https://github.com/telstra/open-kilda/commit/ad4e7342ee5ade3d066822dca649264999ff861b", "message": "LLDP v2 shared rules", "committedDate": "2020-03-02T12:42:28Z", "type": "forcePushed"}]}