{"pr_number": 914, "pr_title": "Fixes #482: Test failure in RankIndexTest::repeatedRankQuery", "pr_createdAt": "2020-04-21T01:07:33Z", "pr_url": "https://github.com/FoundationDB/fdb-record-layer/pull/914", "timeline": [{"oid": "1269d61cdb63c37e0d8a57e427f51c55cbedc255", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/1269d61cdb63c37e0d8a57e427f51c55cbedc255", "message": "Fixes #482: Test failure in RankIndexTest::repeatedRankQuery\n\nThis looks like it was a real concurrency bug (one that can lead to the data being corrupt). Essentially, the ranked set does not allow concurrent updates to the same subspace in the same transaction. This is a known issue, and there are real ways to fix it (like implementing some kind of locking abstraction), but it is hard to get right in a way that also does not result in blocking in async threads. The patch here fixes the text index maintainer so that it issues its updates to the same subspace serially, though it can still update unrelated subspaces in parallel.", "committedDate": "2020-04-21T01:16:12Z", "type": "commit"}, {"oid": "1269d61cdb63c37e0d8a57e427f51c55cbedc255", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/1269d61cdb63c37e0d8a57e427f51c55cbedc255", "message": "Fixes #482: Test failure in RankIndexTest::repeatedRankQuery\n\nThis looks like it was a real concurrency bug (one that can lead to the data being corrupt). Essentially, the ranked set does not allow concurrent updates to the same subspace in the same transaction. This is a known issue, and there are real ways to fix it (like implementing some kind of locking abstraction), but it is hard to get right in a way that also does not result in blocking in async threads. The patch here fixes the text index maintainer so that it issues its updates to the same subspace serially, though it can still update unrelated subspaces in parallel.", "committedDate": "2020-04-21T01:16:12Z", "type": "forcePushed"}, {"oid": "825b8d90175bb4c471b89cb1dc4217600917f38b", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/825b8d90175bb4c471b89cb1dc4217600917f38b", "message": "A repro for #482\n\nThese seem to reliably get the wrong results, although, I definitely\nfeel like the test could be cleaner", "committedDate": "2020-04-22T21:30:35Z", "type": "commit"}, {"oid": "11c436ebfdf76e567b15678dbef48017039a163f", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/11c436ebfdf76e567b15678dbef48017039a163f", "message": "some tweaks to the repeated ranks tests to make the asserts work", "committedDate": "2020-04-22T21:36:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwNjg2OA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/914#discussion_r413906868", "bodyText": "Does this mean that it is unsafe to write two records concurrently, if they both touch the same rank index?", "author": "ScottDugas", "createdAt": "2020-04-23T15:41:14Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankIndexMaintainer.java", "diffHunk": "@@ -127,10 +129,19 @@ public RankIndexMaintainer(IndexMaintainerState state) {\n                 rankSubspace = extraSubspace;\n                 scoreKey = indexEntry.getKey();\n             }\n-            futures.add(RankedSetIndexHelper.updateRankedSet(state, rankSubspace, config, indexEntry.getKey(),\n-                    scoreKey, remove));\n+            // It is unsafe to have two concurrent updates to the same ranked set, so ensure that at most", "originalCommit": "11c436ebfdf76e567b15678dbef48017039a163f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NzI5MA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/914#discussion_r413997290", "bodyText": "Yeah, that's right. I'm, um, not sure we document this in all of the right places, but it is true. At one point, I had a, like, almost solution, that used a rather complicated (and not quite tested) locking mechanism, but we didn't merge that for a few different reasons.", "author": "alecgrieser", "createdAt": "2020-04-23T17:44:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwNjg2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwODk5Mg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/914#discussion_r413908992", "bodyText": "Just checking on my understanding, this means that if you have an ungrouped rank, the record updates will be done serially, if you have a grouped rank index, each group will be done in parallel, but the updates within a group will be done serially, correct?", "author": "ScottDugas", "createdAt": "2020-04-23T15:43:54Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/RankIndexMaintainer.java", "diffHunk": "@@ -127,10 +129,19 @@ public RankIndexMaintainer(IndexMaintainerState state) {\n                 rankSubspace = extraSubspace;\n                 scoreKey = indexEntry.getKey();\n             }\n-            futures.add(RankedSetIndexHelper.updateRankedSet(state, rankSubspace, config, indexEntry.getKey(),\n-                    scoreKey, remove));\n+            // It is unsafe to have two concurrent updates to the same ranked set, so ensure that at most\n+            // one update per grouping key is ongoing at any given time\n+            final Function<Void, CompletableFuture<Void>> futureSupplier = vignore -> RankedSetIndexHelper.updateRankedSet(\n+                    state, rankSubspace, config, indexEntry.getKey(), scoreKey, remove\n+            );\n+            CompletableFuture<Void> existingFuture = futures.get(rankSubspace);", "originalCommit": "11c436ebfdf76e567b15678dbef48017039a163f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NzkzMg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/914#discussion_r413997932", "bodyText": "Yeah, each group will be done in parallel, but if you have a single group (or are ungrouped), then updates happen serially. I think that's the best we can do with the way the RankedSet is at the moment.", "author": "alecgrieser", "createdAt": "2020-04-23T17:45:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwODk5Mg=="}], "type": "inlineReview"}]}