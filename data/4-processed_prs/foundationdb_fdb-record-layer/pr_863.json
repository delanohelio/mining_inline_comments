{"pr_number": 863, "pr_title": "Quick and dirty index field resolution.", "pr_createdAt": "2020-03-20T01:27:44Z", "pr_url": "https://github.com/FoundationDB/fdb-record-layer/pull/863", "timeline": [{"oid": "320f1ae4e411369d69e8099d1650ca1e6475900c", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/320f1ae4e411369d69e8099d1650ca1e6475900c", "message": "Quick and dirty index field resolution.\nNeeds to be moved into IndexMaintainerFactory, but good enough for most types now.", "committedDate": "2020-03-20T00:58:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwNDcwNA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/863#discussion_r395404704", "bodyText": "I'm not opposed to trying, but as #854 points out, this might be more clear as something the new planner develops.", "author": "MMcM", "createdAt": "2020-03-20T01:36:02Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/clientlog/KeySpaceCountTree.java", "diffHunk": "@@ -503,23 +509,42 @@ protected TupleKeyCountTree newPrefixChild(@Nonnull Object prefix) {\n             }\n         }\n         if (recordTypeKeyspace != null) {\n-            KeyExpression primaryKey = recordTypeKeyspace.getRecordType().getPrimaryKey();\n-            if (distance + 1 < primaryKey.getColumnSize()) {\n-                return resolvePrimaryKeyField(context, resolvedParent, object, primaryKey, distance + 1);\n+            List<KeyExpression> storedPrimaryKeys = recordTypeKeyspace.getRecordType().getPrimaryKey().normalizeKeyForPositions();\n+            if (distance + 1 < storedPrimaryKeys.size()) {\n+                return resolvePrimaryKeyField(context, resolvedParent, object, storedPrimaryKeys.get(distance + 1), distance + 1);\n             }\n         }\n         if (indexKeyspace != null &&\n                 indexKeyspace.getParent() instanceof ResolvedRecordStoreKeyspace &&\n                 ((ResolvedRecordStoreKeyspace)indexKeyspace.getParent()).getRecordStoreKeyspace() == FDBRecordStoreKeyspace.INDEX) {\n             Index index = indexKeyspace.getIndex();\n-            KeyExpression indexExpression = index.getRootExpression();\n-            if (distance < indexExpression.getColumnSize()) {\n-                return resolveIndexField(context, resolvedParent, object, index, indexExpression, distance);\n+            List<KeyExpression> storedKeys = indexStoredKeys(index);\n+            if (distance < storedKeys.size()) {\n+                return resolveIndexField(context, resolvedParent, object, index, storedKeys.get(distance), distance);\n             }\n         }\n         return UNRESOLVED;\n     }\n \n+    // TODO: Get this from the IndexMaintainerFactory via some new interface (the IndexMaintainer needs a RecordStore).", "originalCommit": "320f1ae4e411369d69e8099d1650ca1e6475900c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwNTcyOQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/863#discussion_r395405729", "bodyText": "I actually think we don't want to add this to the index maintainer yet, given (a) the new planner might change things/make things better and (b) this API is still experimental, so adding to the index maintainer factories now seems maybe a little premature.\nI could see an argument, though, this method should be protected in case someone wants to provide an implementation for a custom index of their own devising by overriding this method.", "author": "alecgrieser", "createdAt": "2020-03-20T01:41:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwNDcwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwNjU0MA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/863#discussion_r395406540", "bodyText": "Yeah, that seems like a reasonable compromise. Changed.", "author": "MMcM", "createdAt": "2020-03-20T01:45:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwNDcwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwNTkyNg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/863#discussion_r395405926", "bodyText": "It looks like fieldIndex can be removed as a parameter from both this and resolveIndexField.", "author": "alecgrieser", "createdAt": "2020-03-20T01:42:44Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/clientlog/KeySpaceCountTree.java", "diffHunk": "@@ -548,24 +573,23 @@ protected boolean isRecordStoreLeaf(@Nonnull FDBRecordContext context, @Nonnull\n     }\n \n     protected CompletableFuture<Resolved> resolvePrimaryKeyField(@Nonnull FDBRecordContext context, @Nonnull Resolved resolvedParent, @Nullable Object object,\n-                                                                 @Nonnull KeyExpression primaryKey, int index) {\n-        List<KeyExpression> keys = primaryKey.normalizeKeyForPositions();\n-        if (index < keys.size()) {\n-            KeyExpression key = keys.get(index);\n-            while (key instanceof NestingKeyExpression) {\n-                key = ((NestingKeyExpression)key).getChild();\n-            }\n-            if (key instanceof FieldKeyExpression) {\n-                return CompletableFuture.completedFuture(new ResolvedPrimaryKeyField(resolvedParent, ((FieldKeyExpression)key).getFieldName(), object, object));\n-            }\n-        }\n-        return UNRESOLVED;\n+                                                                 @Nonnull KeyExpression fieldKey, int fieldIndex) {", "originalCommit": "320f1ae4e411369d69e8099d1650ca1e6475900c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwNjc5NQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/863#discussion_r395406795", "bodyText": "I was thinking an overriding method might understand that the zeroth field of the primary key is special, for example. But there are probably other ways it could accomplish such a check.", "author": "MMcM", "createdAt": "2020-03-20T01:47:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwNTkyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwODYwOQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/863#discussion_r395408609", "bodyText": "Okay, I see. Well, it probably doesn't hurt to leave it like that. I'll approve, and if you want to leave it as is, then I guess feel free to merge.", "author": "alecgrieser", "createdAt": "2020-03-20T01:56:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwNTkyNg=="}], "type": "inlineReview"}, {"oid": "4953f6a223d96ab590fb9691cca7725345a8d732", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/4953f6a223d96ab590fb9691cca7725345a8d732", "message": "Allow subclass to override index to keys method", "committedDate": "2020-03-20T01:47:37Z", "type": "commit"}]}