{"pr_number": 1055, "pr_title": "Fixes #1054: \"make unbuilt index readable\" exception blocks opening a record store", "pr_createdAt": "2020-10-28T02:21:48Z", "pr_url": "https://github.com/FoundationDB/fdb-record-layer/pull/1055", "timeline": [{"oid": "142ffdc14cf7c5a5cfe5d94ce80dbca1c3516049", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/142ffdc14cf7c5a5cfe5d94ce80dbca1c3516049", "message": "Fixes #1054: \"make unbuilt index readable\" exception blocks opening a record store", "committedDate": "2020-10-28T02:34:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5MjI4Ng==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1055#discussion_r514592286", "bodyText": "Hm, it seems like this should probably take a CompletableFuture<V> instead of a Supplier<CompletableFuture<V>>, which is generally what these methods take, but then I suppose you don't get the behavior that the same handler gets used constructing or executing the future, so I suppose it's probably fine.", "author": "alecgrieser", "createdAt": "2020-10-29T21:59:15Z", "path": "fdb-extensions/src/main/java/com/apple/foundationdb/async/MoreAsyncUtil.java", "diffHunk": "@@ -913,6 +913,32 @@ public static void closeIterator(@Nonnull Iterator<?> iterator) {\n         });\n     }\n \n+    /**\n+     * Handle when <code>futureSupplier</code> has exception when supplying a future, or the future is completed\n+     * exceptionally. Unlike the \"handle\" in CompletableFuture, <code>handlerOnException</code> is not executed if\n+     * the future is successful.\n+     * @param futureSupplier the supplier of future which need to be handled\n+     * @param handlerOnException the hanlder when the future has\n+     * @param <V> the result type of the future\n+     * @return future that completes exceptionally if the handler has exception\n+     */\n+    public static <V> CompletableFuture<V> handleOnException(Supplier<CompletableFuture<V>> futureSupplier,", "originalCommit": "142ffdc14cf7c5a5cfe5d94ce80dbca1c3516049", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5MjY4NQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1055#discussion_r514592685", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Handle when <code>futureSupplier</code> has exception when supplying a future, or the future is completed\n          \n          \n            \n                 * Handle when <code>futureSupplier</code> encounters an exception when supplying a future, or the future is completed", "author": "alecgrieser", "createdAt": "2020-10-29T22:00:08Z", "path": "fdb-extensions/src/main/java/com/apple/foundationdb/async/MoreAsyncUtil.java", "diffHunk": "@@ -913,6 +913,32 @@ public static void closeIterator(@Nonnull Iterator<?> iterator) {\n         });\n     }\n \n+    /**\n+     * Handle when <code>futureSupplier</code> has exception when supplying a future, or the future is completed", "originalCommit": "142ffdc14cf7c5a5cfe5d94ce80dbca1c3516049", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI2MzI3MQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1055#discussion_r516263271", "bodyText": "Fixed.", "author": "nblintao", "createdAt": "2020-11-02T21:26:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5MjY4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5Mjg3NA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1055#discussion_r514592874", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param futureSupplier the supplier of future which need to be handled\n          \n          \n            \n                 * @param futureSupplier the supplier of future which needs to be handled", "author": "alecgrieser", "createdAt": "2020-10-29T22:00:36Z", "path": "fdb-extensions/src/main/java/com/apple/foundationdb/async/MoreAsyncUtil.java", "diffHunk": "@@ -913,6 +913,32 @@ public static void closeIterator(@Nonnull Iterator<?> iterator) {\n         });\n     }\n \n+    /**\n+     * Handle when <code>futureSupplier</code> has exception when supplying a future, or the future is completed\n+     * exceptionally. Unlike the \"handle\" in CompletableFuture, <code>handlerOnException</code> is not executed if\n+     * the future is successful.\n+     * @param futureSupplier the supplier of future which need to be handled", "originalCommit": "142ffdc14cf7c5a5cfe5d94ce80dbca1c3516049", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI2MzM2NQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1055#discussion_r516263365", "bodyText": "Fixed.", "author": "nblintao", "createdAt": "2020-11-02T21:26:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5Mjg3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5Mjk3NA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1055#discussion_r514592974", "bodyText": "Looks like this sentence drops off half way", "author": "alecgrieser", "createdAt": "2020-10-29T22:00:50Z", "path": "fdb-extensions/src/main/java/com/apple/foundationdb/async/MoreAsyncUtil.java", "diffHunk": "@@ -913,6 +913,32 @@ public static void closeIterator(@Nonnull Iterator<?> iterator) {\n         });\n     }\n \n+    /**\n+     * Handle when <code>futureSupplier</code> has exception when supplying a future, or the future is completed\n+     * exceptionally. Unlike the \"handle\" in CompletableFuture, <code>handlerOnException</code> is not executed if\n+     * the future is successful.\n+     * @param futureSupplier the supplier of future which need to be handled\n+     * @param handlerOnException the hanlder when the future has", "originalCommit": "142ffdc14cf7c5a5cfe5d94ce80dbca1c3516049", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI2Mzg2OQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1055#discussion_r516263869", "bodyText": "Fixed.", "author": "nblintao", "createdAt": "2020-11-02T21:27:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5Mjk3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5NDY0Nw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1055#discussion_r514594647", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            logExceptionAsWarn(\"unable build index\", exception);\n          \n          \n            \n                                            logExceptionAsWarn(\"unable to build index\", exception);\n          \n      \n    \n    \n  \n\nIt also seems like we might want to include things like the index name as a log key. Maybe logExceptionAsWarn should take a KeyValueLogMessage (and handle adding the log keys from the exception as well)?", "author": "alecgrieser", "createdAt": "2020-10-29T22:05:05Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.java", "diffHunk": "@@ -3055,7 +3090,14 @@ public boolean isIndexDisabled(@Nonnull String indexName) {\n                     Index index = indexItem.getKey();\n                     List<RecordType> recordTypes = indexItem.getValue();\n                     IndexState indexState = newStates.getOrDefault(index, IndexState.READABLE);\n-                    work.add(rebuildOrMarkIndex(index, indexState, recordTypes, reason, oldMetaDataVersion));\n+                    final CompletableFuture<Void> rebuildOrMarkIndexSafely = MoreAsyncUtil.handleOnException(\n+                            () -> rebuildOrMarkIndex(index, indexState, recordTypes, reason, oldMetaDataVersion),\n+                            exception -> {\n+                                // If there is anything issue, simply mark the index as disabled without blocking checkVersion\n+                                logExceptionAsWarn(\"unable build index\", exception);", "originalCommit": "142ffdc14cf7c5a5cfe5d94ce80dbca1c3516049", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI2ODgwOQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1055#discussion_r516268809", "bodyText": "Added index name to log key.\nlogExceptionAsWarn already handles adding the log keys from the exception if it's a LoggableException", "author": "nblintao", "createdAt": "2020-11-02T21:37:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5NDY0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxMjg1OQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1055#discussion_r514612859", "bodyText": "There's something about having this catch and then ignore the error that feels a little strange....\nGiven that we're going to ignore the results of doing the validation, it almost seems like we should call uncheckedMarkIndexReadable. I could see alternative arguments that we could, like, check there are no uniqueness violations or data in the index subspace or something and then mark it as READABLE (perhaps only in the error case) (and maybe it also should add the \\x00 to \\xff range to the build space?).\nI could also see an argument that if it encounters an error, it should mark the index as DISABLED and wait for a rebuild. Then we don't get the index right away (sad) but we also no longer block checkVersion.\nSomething about the extra flag to force marking it as readable doesn't quite seem right.", "author": "alecgrieser", "createdAt": "2020-10-29T22:53:44Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.java", "diffHunk": "@@ -3117,7 +3159,10 @@ private boolean areAllRecordTypesSince(@Nullable Collection<RecordType> recordTy\n             }\n         }\n \n-        return markIndexReadable(index).thenApply(b -> null);\n+        // The index states is supposed to be empty (i.e. readable) because this is a new index. But unfortunately, the\n+        // index state is keyed by index name which can be reused. So we need to mark the index readable. In such case,\n+        // the built range is unlikely to be full so we should force it.\n+        return markIndexReadable(index, true).thenApply(b -> null);", "originalCommit": "142ffdc14cf7c5a5cfe5d94ce80dbca1c3516049", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI4MTI2MA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1055#discussion_r516281260", "bodyText": "I didn't use uncheckedMarkIndexReadable mainly because I'd like it check and log exceptions even if not throw an exception.\nI think \" mark the index as DISABLED and wait for a (manual, force) rebuild\" is an option. I just need to remove all my changes in markIndexReadable it will work like that. But that depends on how we see such error. If we think consider it as expected (even though not pleasant) as a side effect of reusing index name, I think it should better be working without manual intervention.", "author": "nblintao", "createdAt": "2020-11-02T22:03:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxMjg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5NTQyOQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1055#discussion_r516395429", "bodyText": "Force build is not necessary. Just manual. So I think I'm fine with not marking index as readable, especially considering there may be underlying bugs that we need to be aware of.", "author": "nblintao", "createdAt": "2020-11-03T02:20:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxMjg1OQ=="}], "type": "inlineReview"}, {"oid": "8713a5d7ba4f5df9f0b84874c3706dd964cbc284", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/8713a5d7ba4f5df9f0b84874c3706dd964cbc284", "message": "Not force marking index readable & and test", "committedDate": "2020-11-03T02:41:08Z", "type": "forcePushed"}, {"oid": "dd5920abf47853df009be84945db9202b55fadf7", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/dd5920abf47853df009be84945db9202b55fadf7", "message": "Fixes #1054: \"make unbuilt index readable\" exception blocks opening a record store", "committedDate": "2020-11-04T20:02:38Z", "type": "commit"}, {"oid": "c87d19952d0b2c790c44a24bb85b8a8e813d10a9", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/c87d19952d0b2c790c44a24bb85b8a8e813d10a9", "message": "Not force marking index readable & and test", "committedDate": "2020-11-04T20:02:38Z", "type": "forcePushed"}, {"oid": "e9505d73e0ecf9ffff5b1b0ee547352e94af1495", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/e9505d73e0ecf9ffff5b1b0ee547352e94af1495", "message": "Not force marking index readable & and test", "committedDate": "2020-11-04T21:46:26Z", "type": "commit"}, {"oid": "e9505d73e0ecf9ffff5b1b0ee547352e94af1495", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/e9505d73e0ecf9ffff5b1b0ee547352e94af1495", "message": "Not force marking index readable & and test", "committedDate": "2020-11-04T21:46:26Z", "type": "forcePushed"}]}