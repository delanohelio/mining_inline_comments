{"pr_number": 2725, "pr_title": "GH-2724 Add more tests to validate behaviour of QueryBindingSet.", "pr_createdAt": "2020-12-16T14:48:21Z", "pr_url": "https://github.com/eclipse/rdf4j/pull/2725", "timeline": [{"oid": "3ef7862ac734a6ceadd1a31fb76e46ae4e3cdb9a", "url": "https://github.com/eclipse/rdf4j/commit/3ef7862ac734a6ceadd1a31fb76e46ae4e3cdb9a", "message": "GH-2724 Add more tests to validate behaviour of QueryBindingSet.\n\nSigned-off-by: Jerven bolleman <jerven.bolleman@sib.swiss>", "committedDate": "2020-12-16T14:37:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzMTUzMg==", "url": "https://github.com/eclipse/rdf4j/pull/2725#discussion_r544831532", "bodyText": "I think catching AssertionErrors is not a good pattern, even in test code. All this is really testing here is that the assertions work. Assertions are themselves a debugging tool, I don't think we need to codify them in our test suite.", "author": "jeenbroekstra", "createdAt": "2020-12-17T05:56:15Z", "path": "core/queryalgebra/evaluation/src/test/java/org/eclipse/rdf4j/query/algebra/evaluation/QueryBindingSetTest.java", "diffHunk": "@@ -46,6 +54,136 @@ public void testEqualsMapBindingSet() {\n \t\tassertEquals(qbs, mbs);\n \t}\n \n+\t@Test\n+\tpublic void testAddAll() {\n+\t\t{\n+\t\t\tQueryBindingSet bs = new QueryBindingSet();\n+\t\t\tbs.addAll(new QueryBindingSet());\n+\t\t\tassertEquals(0, bs.size());\n+\t\t}\n+\t\t{\n+\t\t\tQueryBindingSet bs = new QueryBindingSet();\n+\t\t\tbs.addBinding(\"foo\", vf.createIRI(\"urn:foo\"));\n+\t\t\tbs.addAll(new QueryBindingSet());\n+\t\t\tassertEquals(1, bs.size());\n+\t\t}\n+\t\t{\n+\t\t\tQueryBindingSet bs = new QueryBindingSet();\n+\t\t\tbs.addBinding(\"foo\", vf.createIRI(\"urn:foo\"));\n+\t\t\tfinal QueryBindingSet bs2 = new QueryBindingSet();\n+\t\t\tbs2.addBinding(\"foo\", vf.createIRI(\"urn:foo\"));\n+\t\t\tbs.addAll(bs2);\n+\t\t\tassertEquals(1, bs.size());\n+\t\t}\n+\t\t{\n+\t\t\tQueryBindingSet bs = new QueryBindingSet();\n+\t\t\tbs.addBinding(\"foo\", vf.createIRI(\"urn:foo\"));\n+\t\t\tfinal QueryBindingSet bs2 = new QueryBindingSet();\n+\t\t\tbs2.addBinding(\"foo\", vf.createIRI(\"urn:foo\"));\n+\t\t\tbs2.addBinding(\"bar\", vf.createIRI(\"urn:bar\"));\n+\t\t\tbs.addAll(bs2);\n+\t\t\tassertEquals(2, bs.size());\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testAdd() {\n+\t\ttry {\n+\t\t\tQueryBindingSet bs = new QueryBindingSet();\n+\t\t\tbs.addBinding(\"foo\", vf.createIRI(\"urn:foo\"));\n+\t\t\tbs.addBinding(\"foo\", vf.createIRI(\"urn:foo\"));\n+\t\t\tfail();\n+\t\t} catch (AssertionError e) {", "originalCommit": "3ef7862ac734a6ceadd1a31fb76e46ae4e3cdb9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg3MjM4OQ==", "url": "https://github.com/eclipse/rdf4j/pull/2725#discussion_r544872389", "bodyText": "I don't have a good solution here. I want to test the method and the method does give this behaviour.", "author": "JervenBolleman", "createdAt": "2020-12-17T07:39:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzMTUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkxNjk2NA==", "url": "https://github.com/eclipse/rdf4j/pull/2725#discussion_r544916964", "bodyText": "My point is that the expectation that the method isn't called with the same binding twice is not an enforced requirement (even if it is stated as an expectation in the javadoc). In production (where typically you don't have assertions enabled), doing this is merely discouraged and we make no guarantees about what happens, but it doesn't necessarily result in an error. So a test to check that it throws an AssertionError doesn't really add anything useful in terms of production behavior.\nPut another way: a test shouldn't break purely because of the absense of assertions. This will.\nI mean it's no really big deal, if you prefer keeping it in I have no massive objections to that either.", "author": "jeenbroekstra", "createdAt": "2020-12-17T08:57:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzMTUzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzNDAzNA==", "url": "https://github.com/eclipse/rdf4j/pull/2725#discussion_r544834034", "bodyText": "Rather than testing this through reflection, we could test this through public methods by adding a new binding to bs, after using it to initialize bs2, and then checking that bs2 does not also contain that new binding.", "author": "jeenbroekstra", "createdAt": "2020-12-17T06:03:28Z", "path": "core/queryalgebra/evaluation/src/test/java/org/eclipse/rdf4j/query/algebra/evaluation/QueryBindingSetTest.java", "diffHunk": "@@ -46,6 +54,136 @@ public void testEqualsMapBindingSet() {\n \t\tassertEquals(qbs, mbs);\n \t}\n \n+\t@Test\n+\tpublic void testAddAll() {\n+\t\t{\n+\t\t\tQueryBindingSet bs = new QueryBindingSet();\n+\t\t\tbs.addAll(new QueryBindingSet());\n+\t\t\tassertEquals(0, bs.size());\n+\t\t}\n+\t\t{\n+\t\t\tQueryBindingSet bs = new QueryBindingSet();\n+\t\t\tbs.addBinding(\"foo\", vf.createIRI(\"urn:foo\"));\n+\t\t\tbs.addAll(new QueryBindingSet());\n+\t\t\tassertEquals(1, bs.size());\n+\t\t}\n+\t\t{\n+\t\t\tQueryBindingSet bs = new QueryBindingSet();\n+\t\t\tbs.addBinding(\"foo\", vf.createIRI(\"urn:foo\"));\n+\t\t\tfinal QueryBindingSet bs2 = new QueryBindingSet();\n+\t\t\tbs2.addBinding(\"foo\", vf.createIRI(\"urn:foo\"));\n+\t\t\tbs.addAll(bs2);\n+\t\t\tassertEquals(1, bs.size());\n+\t\t}\n+\t\t{\n+\t\t\tQueryBindingSet bs = new QueryBindingSet();\n+\t\t\tbs.addBinding(\"foo\", vf.createIRI(\"urn:foo\"));\n+\t\t\tfinal QueryBindingSet bs2 = new QueryBindingSet();\n+\t\t\tbs2.addBinding(\"foo\", vf.createIRI(\"urn:foo\"));\n+\t\t\tbs2.addBinding(\"bar\", vf.createIRI(\"urn:bar\"));\n+\t\t\tbs.addAll(bs2);\n+\t\t\tassertEquals(2, bs.size());\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testAdd() {\n+\t\ttry {\n+\t\t\tQueryBindingSet bs = new QueryBindingSet();\n+\t\t\tbs.addBinding(\"foo\", vf.createIRI(\"urn:foo\"));\n+\t\t\tbs.addBinding(\"foo\", vf.createIRI(\"urn:foo\"));\n+\t\t\tfail();\n+\t\t} catch (AssertionError e) {\n+\t\t\treturn;\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testNonSharedBackingMap()\n+\t\t\tthrows NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n+\t\tQueryBindingSet bs = new QueryBindingSet();\n+\t\tbs.addBinding(\"foo\", vf.createIRI(\"urn:foo\"));\n+\t\tbs.addBinding(\"bar\", vf.createIRI(\"urn:bar\"));\n+\t\tQueryBindingSet bs2 = new QueryBindingSet(bs);\n+\t\tfinal Field declaredField = QueryBindingSet.class.getDeclaredField(\"bindings\");\n+\t\tdeclaredField.setAccessible(true);\n+\t\tassertTrue(declaredField.get(bs) != declaredField.get(bs2));", "originalCommit": "3ef7862ac734a6ceadd1a31fb76e46ae4e3cdb9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3fc1b00d3e9ceea5e17d27bfdb9f2a1eaac7c9fa", "url": "https://github.com/eclipse/rdf4j/commit/3fc1b00d3e9ceea5e17d27bfdb9f2a1eaac7c9fa", "message": "GH-2724 QueryBindingSets constructed from others may not share their backing store. Also comment the reason for the addBinding test.\n\nSigned-off-by: Jerven bolleman <jerven.bolleman@sib.swiss>", "committedDate": "2020-12-18T22:36:37Z", "type": "commit"}, {"oid": "3fc1b00d3e9ceea5e17d27bfdb9f2a1eaac7c9fa", "url": "https://github.com/eclipse/rdf4j/commit/3fc1b00d3e9ceea5e17d27bfdb9f2a1eaac7c9fa", "message": "GH-2724 QueryBindingSets constructed from others may not share their backing store. Also comment the reason for the addBinding test.\n\nSigned-off-by: Jerven bolleman <jerven.bolleman@sib.swiss>", "committedDate": "2020-12-18T22:36:37Z", "type": "forcePushed"}]}