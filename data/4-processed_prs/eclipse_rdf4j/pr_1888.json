{"pr_number": 1888, "pr_title": "GH-1882: optimization for property paths with an exclusive endpoint", "pr_createdAt": "2020-01-30T16:23:42Z", "pr_url": "https://github.com/eclipse/rdf4j/pull/1888", "timeline": [{"oid": "9f8eaadffdb8a33590e82316e26cde38fb361858", "url": "https://github.com/eclipse/rdf4j/commit/9f8eaadffdb8a33590e82316e26cde38fb361858", "message": "GH-1882: optimization for property paths with an exclusive endpoint\n\nThis change provides an optimization for property path expressions that\nyield results at a single endpoint. Similarly to the concept of\nExclusiveStatement we now use a marker for them.\n\nWe introduce the interface ExclusiveTuplExpr which can now be used to\ndeclare any exclusive TupleExpr. Note that the existing\nExclusiveStatement and ExclusiveGroup nodes have also become instances\nof ExclusiveTupleExpr.\n\nFor rendering such nodes in sub-queries the ExclusiveTupleExprRenderer\ninterface is defined. Additionally, some rendering logic is introduced\nin the Query utility classes.\n\nNote that ExclusiveGroups are now generalized such that they can contain\nany ExclusiveTupleExpr (and not only ExclusiveStatements).\n\nNotes:\n\n* the if/else branches in StatementGroupAndJoinOptimizer were shuffled\naround such that the instanceOf check is working correctly\n(ExclusiveGroup is now an instanceof ExclusiveTuplExpr)", "committedDate": "2020-01-30T16:08:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0OTA0OQ==", "url": "https://github.com/eclipse/rdf4j/pull/1888#discussion_r373249049", "bodyText": "I like this mechanism - simple but effective, although potentially brittle against future changes in the string representation of the query plan (it was never really designed to be a stable format, more for informing hoomans).", "author": "jeenbroekstra", "createdAt": "2020-01-30T23:29:31Z", "path": "tools/federation/src/test/java/org/eclipse/rdf4j/federated/PropertyPathTests.java", "diffHunk": "@@ -85,6 +87,67 @@ public void testPropertyPath_Alternatives() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testPropertyPath_ExclusiveGroup() throws Exception {\n+\n+\t\tprepareTest(Arrays.asList(\"/tests/propertypath/data1.ttl\", \"/tests/propertypath/data2.ttl\"));\n+\n+\t\tString query = \"SELECT * WHERE { ?concept a skos:Concept . ?concept skos:broader+ :mammals . ?concept rdfs:label ?label}\";\n+\n+\t\tString actualQueryPlan = federationContext().getQueryManager().getQueryPlan(query);\n+\t\tassertQueryPlanEquals(readResourceAsString(\"/tests/propertypath/query_path_exclusiveGroup.qp\"),", "originalCommit": "9f8eaadffdb8a33590e82316e26cde38fb361858", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}