{"pr_number": 717, "pr_title": "Throw if rewind to last checkpoint fails in AbstractKafkaBasedConnectorTask", "pr_createdAt": "2020-05-29T01:20:46Z", "pr_url": "https://github.com/linkedin/brooklin/pull/717", "timeline": [{"oid": "8a510d3185d37fcba3b882a11277d4144cd7b5aa", "url": "https://github.com/linkedin/brooklin/commit/8a510d3185d37fcba3b882a11277d4144cd7b5aa", "message": "Throw if rewind to last checkpoint fails in AbstractKafkaBasedConnectorTask", "committedDate": "2020-05-29T01:06:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyMDgzNw==", "url": "https://github.com/linkedin/brooklin/pull/717#discussion_r434020837", "bodyText": "nit: wondering if the setter can take true/false to allow for stop failing send failures also.", "author": "DEEPTHIKORAT", "createdAt": "2020-06-02T16:41:26Z", "path": "datastream-kafka-connector/src/test/java/com/linkedin/datastream/connectors/kafka/mirrormaker/TestKafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -344,12 +345,24 @@ protected void postShutdownHook() {\n       try {\n         super.postShutdownHook();\n       } catch (Exception e) {\n-        postShutdownHookExceptionCaught = true;\n+        _postShutdownHookExceptionCaught = true;\n       }\n     }\n \n+    @Override\n+    protected void seekToLastCheckpoint(Set<TopicPartition> topicPartitions) {\n+      if (_failOnSeekToLastCheckpoint) {\n+        throw new KafkaException(\"KafkaException: failed to seek\");\n+      }\n+      super.seekToLastCheckpoint(topicPartitions);\n+    }\n+\n+    void setFailOnSeekToLastCheckpoint() {", "originalCommit": "8a510d3185d37fcba3b882a11277d4144cd7b5aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0ODQzOQ==", "url": "https://github.com/linkedin/brooklin/pull/717#discussion_r434148439", "bodyText": "done", "author": "somandal", "createdAt": "2020-06-02T20:12:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyMDgzNw=="}], "type": "inlineReview"}, {"oid": "4b1e1f19c1eeabedc25a5a17c8a97a91de7cc88d", "url": "https://github.com/linkedin/brooklin/commit/4b1e1f19c1eeabedc25a5a17c8a97a91de7cc88d", "message": "Address review comments", "committedDate": "2020-06-02T17:10:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5Nzg0MQ==", "url": "https://github.com/linkedin/brooklin/pull/717#discussion_r434097841", "bodyText": "nit: do you need both ',' and 'and'", "author": "vmaheshw", "createdAt": "2020-06-02T18:38:19Z", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaBasedConnectorTask.java", "diffHunk": "@@ -282,15 +284,21 @@ protected void rewindAndPausePartitionOnException(TopicPartition srcTopicPartiti\n   }\n \n   protected void rewindAndPausePartitionsOnSendException() {\n-    // For all topic partitions which have seen send exceptions, attempt to rewind them to the last checkpoint\n+    // For all topic partitions which have seen send exceptions, attempt to rewind them to the last checkpoint.\n+    // The outcome of the rewind can fall into three categories:\n+    // 1) The rewind is successful and the Exception returned by the SendCallback is transient. This TopicPartition is\n+    //    not added to the auto-pause list.\n+    // 2) The rewind is successful and the Exception returned by the SendCallback is non-transient. This TopicPartition\n+    //    is added to the auto-pause list with SEND_ERROR as the reason.\n+    // 3) The rewind itself failed. An exception is thrown, and the connector task is brought down to avoid wrongfully", "originalCommit": "4b1e1f19c1eeabedc25a5a17c8a97a91de7cc88d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5ODczMA==", "url": "https://github.com/linkedin/brooklin/pull/717#discussion_r434098730", "bodyText": "also, can you rephrase this comment may be: the connector task is brought down to avoid committing wrong checkpoints.", "author": "vmaheshw", "createdAt": "2020-06-02T18:40:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5Nzg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0NDkwOA==", "url": "https://github.com/linkedin/brooklin/pull/717#discussion_r434144908", "bodyText": "done", "author": "somandal", "createdAt": "2020-06-02T20:05:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5Nzg0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5OTcwNw==", "url": "https://github.com/linkedin/brooklin/pull/717#discussion_r434099707", "bodyText": "nit, can you merge the two lines", "author": "vmaheshw", "createdAt": "2020-06-02T18:41:53Z", "path": "datastream-kafka-connector/src/test/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTestUtils.java", "diffHunk": "@@ -132,9 +132,15 @@ static KafkaMirrorMakerConnectorTask createFlushlessKafkaMirrorMakerConnectorTas\n \n   static Thread runKafkaMirrorMakerConnectorTask(KafkaMirrorMakerConnectorTask connectorTask)\n       throws InterruptedException {\n+    return runKafkaMirrorMakerConnectorTask(connectorTask, (t, e) -> Assert.fail(\"connector thread died\", e));\n+  }\n+\n+  static Thread runKafkaMirrorMakerConnectorTask(KafkaMirrorMakerConnectorTask connectorTask,\n+      Thread.UncaughtExceptionHandler exceptionHandler)\n+      throws InterruptedException {", "originalCommit": "4b1e1f19c1eeabedc25a5a17c8a97a91de7cc88d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0NDk0NQ==", "url": "https://github.com/linkedin/brooklin/pull/717#discussion_r434144945", "bodyText": "done", "author": "somandal", "createdAt": "2020-06-02T20:05:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5OTcwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwMDY0OQ==", "url": "https://github.com/linkedin/brooklin/pull/717#discussion_r434100649", "bodyText": "typo zkAdatper", "author": "vmaheshw", "createdAt": "2020-06-02T18:43:34Z", "path": "datastream-kafka-connector/src/test/java/com/linkedin/datastream/connectors/kafka/mirrormaker/TestKafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -821,6 +834,56 @@ public void testAutoPauseAndResumeOnSendFailure() throws Exception {\n         \"did not shut down on time\");\n   }\n \n+  @Test\n+  public void testValidateTaskDiesOnRewindFailure() throws InterruptedException {\n+    String yummyTopic = \"YummyPizza\";\n+    createTopic(_zkUtils, yummyTopic);\n+\n+    // create a datastream to consume from topics ending in \"Pizza\"\n+    Datastream datastream = KafkaMirrorMakerConnectorTestUtils.createDatastream(\"pizzaStream\", _broker, \"\\\\w+Pizza\");\n+\n+    DatastreamTaskImpl task = new DatastreamTaskImpl(Collections.singletonList(datastream));\n+    // create event producer that fails on 3rd event (of 5)\n+    MockDatastreamEventProducer datastreamProducer =\n+        new MockDatastreamEventProducer((r) -> new String((byte[]) r.getEvents().get(0).key().get()).equals(\"key-2\"));\n+    task.setEventProducer(datastreamProducer);\n+\n+    ZkAdapter zkAdatper = new ZkAdapter(_kafkaCluster.getZkConnection(), \"testCluster\", null,", "originalCommit": "4b1e1f19c1eeabedc25a5a17c8a97a91de7cc88d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0NDk4MA==", "url": "https://github.com/linkedin/brooklin/pull/717#discussion_r434144980", "bodyText": "done", "author": "somandal", "createdAt": "2020-06-02T20:05:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwMDY0OQ=="}], "type": "inlineReview"}, {"oid": "06a98ce5aa3424d3d624bd5014510dd106128c05", "url": "https://github.com/linkedin/brooklin/commit/06a98ce5aa3424d3d624bd5014510dd106128c05", "message": "Address review comments", "committedDate": "2020-06-02T20:11:33Z", "type": "commit"}, {"oid": "b2a939410f552f78bfe149b3c02487a9262825e2", "url": "https://github.com/linkedin/brooklin/commit/b2a939410f552f78bfe149b3c02487a9262825e2", "message": "Fix all typos", "committedDate": "2020-06-02T20:14:47Z", "type": "commit"}]}