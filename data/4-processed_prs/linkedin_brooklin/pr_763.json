{"pr_number": 763, "pr_title": "Add metrics to track event processing time and time spent between polls", "pr_createdAt": "2020-10-08T20:47:27Z", "pr_url": "https://github.com/linkedin/brooklin/pull/763", "timeline": [{"oid": "91bc0a82603ae999179d4ed383b1d215be6efb6c", "url": "https://github.com/linkedin/brooklin/commit/91bc0a82603ae999179d4ed383b1d215be6efb6c", "message": "Add metrics to track event processing time and time spent between polls", "committedDate": "2020-10-08T20:04:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzMzQ2NA==", "url": "https://github.com/linkedin/brooklin/pull/763#discussion_r502033464", "bodyText": "can you make this name generic and avoid using Histogram?", "author": "vmaheshw", "createdAt": "2020-10-08T21:52:24Z", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaBasedConnectorTask.java", "diffHunk": "@@ -102,7 +103,7 @@\n   protected final boolean _pausePartitionOnError;\n   protected final Duration _pauseErrorPartitionDuration;\n   protected final long _processingDelayLogThresholdMillis;\n-  protected final boolean _enablePollDurationMillisMetric;\n+  protected final boolean _enableAdditionalHistogramMetrics;", "originalCommit": "91bc0a82603ae999179d4ed383b1d215be6efb6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzNzM2MQ==", "url": "https://github.com/linkedin/brooklin/pull/763#discussion_r502037361", "bodyText": "done", "author": "somandal", "createdAt": "2020-10-08T22:01:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzMzQ2NA=="}], "type": "inlineReview"}, {"oid": "79462b656e981aa4fe436e77a08f3d604f17a665", "url": "https://github.com/linkedin/brooklin/commit/79462b656e981aa4fe436e77a08f3d604f17a665", "message": "Address review comments", "committedDate": "2020-10-08T22:01:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzNzc0MQ==", "url": "https://github.com/linkedin/brooklin/pull/763#discussion_r502037741", "bodyText": "The name is slightly misleading. should there be a total somewhere in the name to be clear that it is not per event Processing time, but the total processing time of all the events received in one poll? One more suggestion, should we average here and add (total time/ total events), so it will give clear idea how much time we are spending to process per record. There is one more metric that might be needed how much time the producer send call took even though we know it is asynchronous. We can add that in future, if we see eventProcessingTime to be the culprint.", "author": "vmaheshw", "createdAt": "2020-10-08T22:02:49Z", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/KafkaBasedConnectorTaskMetrics.java", "diffHunk": "@@ -40,6 +40,10 @@\n   public static final String NUM_TOPICS = \"numTopics\";\n   // keeps track of how long it takes to return from poll()\n   public static final String POLL_DURATION_MS = \"pollDurationMs\";\n+  // keeps track of how long processing takes between polls\n+  public static final String TIME_SPENT_BETWEEN_POLLS_MS = \"timeSpentBetweenPollsMs\";\n+  // keeps track of how long processing and sending all events received on poll takes\n+  public static final String EVENT_PROCESSING_TIME_MS = \"eventProcessingTimeMs\";", "originalCommit": "91bc0a82603ae999179d4ed383b1d215be6efb6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0NzMyMg==", "url": "https://github.com/linkedin/brooklin/pull/763#discussion_r502047322", "bodyText": "done, converted it to perEventProcessingTimeMs. For producer send, we already track time since send() completes and the send callback completes in the send latency metrics (EventProducer). This processing time only includes a) time taken to translate the record and b) time blocked on send() (we can block if the producer buffer is full or if we're waiting on metadata update)", "author": "somandal", "createdAt": "2020-10-08T22:28:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzNzc0MQ=="}], "type": "inlineReview"}, {"oid": "a86deda0ae4e296854af13d8b3fa44d2bd9a607f", "url": "https://github.com/linkedin/brooklin/commit/a86deda0ae4e296854af13d8b3fa44d2bd9a607f", "message": "Address review comments", "committedDate": "2020-10-08T22:26:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4OTE3NA==", "url": "https://github.com/linkedin/brooklin/pull/763#discussion_r503489174", "bodyText": "I dont think we will encounter a case where records count is 0 cause processRecords is called if records is not empty. Saying that its a good check to have.", "author": "vishwajith-s", "createdAt": "2020-10-12T19:24:49Z", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaBasedConnectorTask.java", "diffHunk": "@@ -515,9 +520,14 @@ protected void processRecords(ConsumerRecords<?, ?> records, Instant readTime) {\n     // send the batch out the other end\n     translateAndSendBatch(records, readTime);\n \n-    if (System.currentTimeMillis() - readTime.toEpochMilli() > _processingDelayLogThresholdMillis) {\n+    long processingTimeMillis = System.currentTimeMillis() - readTime.toEpochMilli();\n+    if (processingTimeMillis > _processingDelayLogThresholdMillis) {\n       _consumerMetrics.updateProcessingAboveThreshold(1);\n     }\n+\n+    if (_enableAdditionalMetrics) {\n+      _consumerMetrics.updatePerEventProcessingTimeMs(records.count() == 0 ? 0 : processingTimeMillis / records.count());", "originalCommit": "a86deda0ae4e296854af13d8b3fa44d2bd9a607f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5MDk5OA==", "url": "https://github.com/linkedin/brooklin/pull/763#discussion_r503490998", "bodyText": "Yeah I did notice that, but just added the check to be extra careful. Will leave this as is for now. Thanks!", "author": "somandal", "createdAt": "2020-10-12T19:29:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4OTE3NA=="}], "type": "inlineReview"}]}