{"pr_number": 3280, "pr_title": "feature: add support for parallel processor", "pr_createdAt": "2020-02-28T16:24:22Z", "pr_url": "https://github.com/INRIA/spoon/pull/3280", "timeline": [{"oid": "b6c9c9f18e466d684cda172574363902ce8f26fd", "url": "https://github.com/INRIA/spoon/commit/b6c9c9f18e466d684cda172574363902ce8f26fd", "message": "add first try for parallel processor", "committedDate": "2020-02-28T16:16:56Z", "type": "commit"}, {"oid": "87fc7bc585274d9a3073b0ac7dcd7e00f531b4f4", "url": "https://github.com/INRIA/spoon/commit/87fc7bc585274d9a3073b0ac7dcd7e00f531b4f4", "message": "change add to put", "committedDate": "2020-02-28T16:51:47Z", "type": "commit"}, {"oid": "16e8db1b1ac0cbba9e175fe7826e41c4adfdae15", "url": "https://github.com/INRIA/spoon/commit/16e8db1b1ac0cbba9e175fe7826e41c4adfdae15", "message": "change test", "committedDate": "2020-02-28T17:22:00Z", "type": "commit"}, {"oid": "600806248f3c6d93a3705a47e4804ab732375a0f", "url": "https://github.com/INRIA/spoon/commit/600806248f3c6d93a3705a47e4804ab732375a0f", "message": "add new constructor accepting a consumer and a number", "committedDate": "2020-02-28T18:31:41Z", "type": "commit"}, {"oid": "6584fc15faf35e03a0004b174e226b94cd23045e", "url": "https://github.com/INRIA/spoon/commit/6584fc15faf35e03a0004b174e226b94cd23045e", "message": "add check if some processors are same", "committedDate": "2020-03-01T12:21:15Z", "type": "commit"}, {"oid": "d8a46483b547d640fad58a84f118ece0982d6bad", "url": "https://github.com/INRIA/spoon/commit/d8a46483b547d640fad58a84f118ece0982d6bad", "message": "add processorfactory and new constructor. removed distinct check, because it relays on hashcode", "committedDate": "2020-03-02T17:08:34Z", "type": "commit"}, {"oid": "29a14c57a5c30281dac0ddfd4aada4d6c19a52b8", "url": "https://github.com/INRIA/spoon/commit/29a14c57a5c30281dac0ddfd4aada4d6c19a52b8", "message": " refactor code and tests. add doc", "committedDate": "2020-03-03T18:06:02Z", "type": "commit"}, {"oid": "ce1e4f60829f260a0500a65d1cb0e20946d20272", "url": "https://github.com/INRIA/spoon/commit/ce1e4f60829f260a0500a65d1cb0e20946d20272", "message": " fix header", "committedDate": "2020-03-03T18:23:55Z", "type": "commit"}, {"oid": "d2a1f48dea87ee2d5c814648ae0974b93702df4d", "url": "https://github.com/INRIA/spoon/commit/d2a1f48dea87ee2d5c814648ae0974b93702df4d", "message": " fix doc", "committedDate": "2020-03-03T18:38:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwMjgyOA==", "url": "https://github.com/INRIA/spoon/pull/3280#discussion_r389102828", "bodyText": "neat API!", "author": "monperrus", "createdAt": "2020-03-06T19:38:31Z", "path": "src/main/java/spoon/processing/AbstractParallelProcessor.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Copyright (C) 2006-2019 INRIA and contributors\n+ *\n+ * Spoon is available either under the terms of the MIT License (see LICENSE-MIT.txt) of the Cecill-C License (see LICENSE-CECILL-C.txt). You as the user are entitled to choose the terms under which to adopt Spoon.\n+ */\n+package spoon.processing;\n+\n+import java.util.Iterator;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.function.Consumer;\n+import java.util.stream.StreamSupport;\n+\n+import spoon.SpoonException;\n+import spoon.reflect.declaration.CtElement;\n+\n+/**\n+ * AbstractParallelProcessor allows using multiple threads for concurrent\n+ * processing with {@link AbstractProcessor}.\n+ *\n+ * <b> This class should only be used if all processors do the same.</b>\n+ * Otherwise the result may vary from the expected result. All processors <b>\n+ * must </b> synchronize shared fields like Collections by themselves. Multiple\n+ * constructors exist for different approaches creating this. You can create\n+ * this processor with either a Iterable of processors or a Consumer.\n+ *\n+ * For creating and managing threads a {@link Executors#newFixedThreadPool()} is\n+ * used. Creating more threads then cores can harm the performance. Using a\n+ * different thread pool could increase the performance, but this class should\n+ * be general usage. If you need better performance you may want to use an own\n+ * class with different parallel approach.\n+ */\n+public abstract class AbstractParallelProcessor<E extends CtElement> extends AbstractProcessor<E> {\n+\n+\tprivate ExecutorService service;\n+\tprivate ArrayBlockingQueue<Processor<E>> processorQueue;\n+\n+\t/**\n+\t * Creates a new AbstractParallelProcessor from given iterable. The iterable is\n+\t * fully consumed. Giving an endless iterable of processors will result in\n+\t * errors. The processors must follow the guidelines given in the class\n+\t * description.\n+\t *\n+\t * @param processors iterable of processors.\n+\t * @throws IllegalArgumentException if size of iterable is less than 1.\n+\t *\n+\t */\n+\tpublic AbstractParallelProcessor(Iterable<Processor<E>> processors) {\n+\t\t// added cast because constructors need int\n+\t\tint processorNumber = (int) StreamSupport.stream(processors.spliterator(), false).count();\n+\t\tprocessorQueue = new ArrayBlockingQueue<>(processorNumber);\n+\t\tprocessors.forEach(processorQueue::add);\n+\t\tservice = Executors.newFixedThreadPool(processorNumber);\n+\t}\n+\n+\t/**\n+\t * Creates a new AbstractParallelProcessor from given iterable. The processors\n+\t * must follow the guidelines given in the class description.\n+\t *\n+\t * @param processors         iterable of processors.\n+\t * @param numberOfProcessors number consumed from the iterable added to the\n+\t *                           active processors.\n+\t * @throws SpoonException           if iterable has less values then\n+\t *                                  numberOfProcessors.\n+\t * @throws IllegalArgumentException if numberOfProcessors is less than 1.\n+\t *\n+\t */\n+\tpublic AbstractParallelProcessor(Iterable<Processor<E>> processors, int numberOfProcessors) {\n+\t\tprocessorQueue = new ArrayBlockingQueue<>(numberOfProcessors);\n+\t\tservice = Executors.newFixedThreadPool(numberOfProcessors);\n+\t\tIterator<Processor<E>> it = processors.iterator();\n+\t\tfor (int i = 0; i < numberOfProcessors; i++) {\n+\t\t\tif (!it.hasNext()) {\n+\t\t\t\tthrow new SpoonException(\"not enough elements provided, iterable is already empty\");\n+\t\t\t}\n+\t\t\tprocessorQueue.add(it.next());\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Creates a new AbstractParallelProcessor from given consumer. The processors\n+\t * must follow the guidelines given in the class description.\n+\t *\n+\t * @param processFunction    Represents an operation that accepts a single\n+\t *                           element E and returns no result.\n+\t * @param numberOfProcessors number of concurrent running processors.\n+\t * @throws IllegalArgumentException if numberOfProcessors is less than 1.\n+\t */\n+\tpublic AbstractParallelProcessor(Consumer<E> processFunction, int numberOfProcessors) {", "originalCommit": "d2a1f48dea87ee2d5c814648ae0974b93702df4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1ODI5Nw==", "url": "https://github.com/INRIA/spoon/pull/3280#discussion_r389158297", "bodyText": "thanks", "author": "MartinWitt", "createdAt": "2020-03-06T21:41:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwMjgyOA=="}], "type": "inlineReview"}, {"oid": "a64dfb402ab9efe6870d51353e0069c3a574536d", "url": "https://github.com/INRIA/spoon/commit/a64dfb402ab9efe6870d51353e0069c3a574536d", "message": "add contracts to test cases", "committedDate": "2020-03-06T20:57:36Z", "type": "commit"}, {"oid": "922444e578786123c68d79132dd0c73e43e34b16", "url": "https://github.com/INRIA/spoon/commit/922444e578786123c68d79132dd0c73e43e34b16", "message": "add documentation", "committedDate": "2020-03-06T21:24:59Z", "type": "commit"}]}