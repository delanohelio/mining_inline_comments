{"pr_number": 3545, "pr_title": "test: add test for UndefinedParameterException", "pr_createdAt": "2020-08-25T09:51:27Z", "pr_url": "https://github.com/INRIA/spoon/pull/3545", "timeline": [{"oid": "d983645f3d5b95c2c7b2282545d7622d74d3c0ab", "url": "https://github.com/INRIA/spoon/commit/d983645f3d5b95c2c7b2282545d7622d74d3c0ab", "message": "test: add test for UndefinedParameterException", "committedDate": "2020-08-25T09:50:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3MzUyMw==", "url": "https://github.com/INRIA/spoon/pull/3545#discussion_r476373523", "bodyText": "How about doing it in a modern style with assertThrows?\nassertThrows(UndefinedParameterException.class, () ->Parameters.getValue(template, \"oops\", 3));", "author": "MartinWitt", "createdAt": "2020-08-25T11:25:27Z", "path": "src/test/java/spoon/test/template/TemplateInvocationSubstitutionTest.java", "diffHunk": "@@ -78,7 +83,17 @@ public void testSubstitutionByExpression() {\n \t\tFactory factory = spoon.getFactory();\r\n \r\n \t\tCtClass<?> resultKlass = factory.Class().create(\"Result\");\r\n-\t\tCtBlock<?> result = new SubstitutionByExpressionTemplate(factory.createLiteral(\"abc\")).apply(resultKlass);\r\n+\t\tBlockTemplate template = new SubstitutionByExpressionTemplate(factory.createLiteral(\"abc\"));\r\n+\t\tCtBlock<?> result = template.apply(resultKlass);\r\n \t\tassertEquals(\"java.lang.System.out.println(\\\"abc\\\".substring(1))\", result.getStatement(0).toString());\r\n+\r\n+\t\t// contract: the template code sends UndefinedParameterException\r\n+\t\ttry {\r\n+\t\t\tParameters.getValue(template, \"oops\", 3);\r\n+\t\t\tfail();\r\n+\t\t} catch (UndefinedParameterException expected) {\r\n+\t\t\t// everything OK\r\n+\t\t}\r", "originalCommit": "d983645f3d5b95c2c7b2282545d7622d74d3c0ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}