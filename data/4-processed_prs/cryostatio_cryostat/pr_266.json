{"pr_number": 266, "pr_title": "Add HTTP API Documentation", "pr_createdAt": "2020-09-16T19:52:14Z", "pr_url": "https://github.com/cryostatio/cryostat/pull/266", "timeline": [{"oid": "4ad88f63f9c5bcc265b45d15e0cb0ef691a55141", "url": "https://github.com/cryostatio/cryostat/commit/4ad88f63f9c5bcc265b45d15e0cb0ef691a55141", "message": "Create skeleton", "committedDate": "2020-09-16T19:44:59Z", "type": "commit"}, {"oid": "1f502b29fd2b51fed1ab39d47b10c6a0027cf928", "url": "https://github.com/cryostatio/cryostat/commit/1f502b29fd2b51fed1ab39d47b10c6a0027cf928", "message": "Add HTTP API documentation", "committedDate": "2020-09-16T19:48:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2NDg3OA==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r489764878", "bodyText": "typo: authenticaiton", "author": "andrewazores", "createdAt": "2020-09-16T21:28:21Z", "path": "HTTP_API.md", "diffHunk": "@@ -0,0 +1,952 @@\n+# HTTP API\n+\n+## V1 API\n+\n+### Quick Reference\n+\n+| What you want to do                                                       | Which handler you should use                                            |\n+| ------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n+| **Miscellaneous**                                                         |                                                                         |\n+| Get a URL you can use to access Container JFR's WebSocket command channel | [`ClientUrlGetHandler`](#ClientUrlGetHandler)                           |\n+| Scan for and get a list of target JVMs visible to Container JFR           | [`TargetsGetHandler`](#TargetsGetHandler)                               |\n+| Get a static asset from the web client                                    | [`StaticAssetsGetHandler`](#StaticAssetsGetHandler)                     |\n+| Send a `GET` request to a path not supported by this API                  | [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler)               |\n+| Test user authentication                                                  | [`AuthPostHandler`](#AuthPostHandler)                                   |\n+| Get the URL of Container JFR's Grafana dashboard                          | [`GrafanaDashboardUrlGetHandler`](#GrafanaDashboardUrlGetHandler)       |\n+| Get the URL of Container JFR's Grafana datasource                         | [`GrafanaDatasourceUrlGetHandler`](#GrafanaDatasourceUrlGetHandler)     |\n+| Check the status of Container JFR's Grafana datasource and dashboard      | [`HealthGetHandler`](#HealthGetHandler)                                 |\n+| **Events and event templates**                                            |                                                                         |\n+| Get a list of event types that can be produced by a target JVM            | [`TargetEventsGetHandler`](#TargetEventsGetHandler)                     |\n+| Get a list of event templates known to a target JVM                       | [`TargetTemplatesGetHandler`](#TargetTemplatesGetHandler)               |\n+| Download a template from a target JVM                                     | [`TargetTemplateGetHandler`](#TargetTemplateGetHandler)                 |\n+| Upload an event template to Container JFR                                 | [`TemplatesPostHandler`](#TemplatesPostHandler)                         |\n+| Delete an event template that was uploaded to Container JFR               | [`TemplateDeleteHandler`](#TemplateDeleteHandler)                       |\n+| **Recordings in target JVMs**                                             |                                                                         |\n+| Get a list of recordings in a target JVM                                  | [`TargetRecordingsGetHandler`](#TargetRecordingsGetHandler)             |\n+| Create a snapshot recording in a target JVM                               | [`TargetSnapshotPostHandler`](#TargetSnapshotPostHandler)               |\n+| Start a recording in a target JVM                                         | [`TargetRecordingsPostHandler`](#TargetRecordingsPostHandler)           |\n+| Stop a recording in a target JVM                                          | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Delete a recording in a target JVM                                        | [`TargetRecordingDeleteHandler`](#TargetRecordingDeleteHandler)         |\n+| Download a recording in a target JVM                                      | [`TargetRecordingGetHandler`](#TargetRecordingGetHandler)               |\n+| Download a report of a recording in a target JVM                          | [`TargetReportGetHandler`](#TargetReportGetHandler)                     |\n+| Save a recording in a target JVM to persistent storage                    | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Upload a recording from a target JVM to the Grafana datasource            | [`TargetRecordingUploadPostHandler`](#TargetRecordingUploadPostHandler) |\n+| **Recordings in persistent storage**                                      |                                                                         |\n+| Get a list of recordings in persistent storage                            | [`RecordingsGetHandler`](#RecordingsGetHandler)                         |\n+| Upload a recording to persistent storage                                  | [`RecordingsPostHandler`](#RecordingsPostHandler)                       |\n+| Delete a recording from persistent storage                                | [`RecordingDeleteHandler`](#RecordingDeleteHandler)                     |\n+| Download a recording in persistent storage                                | [`RecordingGetHandler`](#RecordingGetHandler)                           |\n+| Download a report of a recording in persistent storage                    | [`ReportGetHandler`](#ReportGetHandler)                                 |\n+| Upload a recording from persistent storage to the Grafana datasource      | [`RecordingUploadPostHandler`](#RecordingUploadPostHandler)             |\n+\n+\n+### Core\n+\n+* #### `AuthPostHandler`\n+\n+    ###### synopsis\n+    Attempts user authenticaiton;", "originalCommit": "1f502b29fd2b51fed1ab39d47b10c6a0027cf928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2NTUwNw==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r489765507", "bodyText": "Should this explain the format of the Authorization header, ex. Basic vs Bearer? I think it's also worth including a short explanation of how the different AuthManagers influence the interpretation of this header - README.md goes into some detail on it already so the text here can be shorter, or even just refer back to the README.", "author": "andrewazores", "createdAt": "2020-09-16T21:29:46Z", "path": "HTTP_API.md", "diffHunk": "@@ -0,0 +1,952 @@\n+# HTTP API\n+\n+## V1 API\n+\n+### Quick Reference\n+\n+| What you want to do                                                       | Which handler you should use                                            |\n+| ------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n+| **Miscellaneous**                                                         |                                                                         |\n+| Get a URL you can use to access Container JFR's WebSocket command channel | [`ClientUrlGetHandler`](#ClientUrlGetHandler)                           |\n+| Scan for and get a list of target JVMs visible to Container JFR           | [`TargetsGetHandler`](#TargetsGetHandler)                               |\n+| Get a static asset from the web client                                    | [`StaticAssetsGetHandler`](#StaticAssetsGetHandler)                     |\n+| Send a `GET` request to a path not supported by this API                  | [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler)               |\n+| Test user authentication                                                  | [`AuthPostHandler`](#AuthPostHandler)                                   |\n+| Get the URL of Container JFR's Grafana dashboard                          | [`GrafanaDashboardUrlGetHandler`](#GrafanaDashboardUrlGetHandler)       |\n+| Get the URL of Container JFR's Grafana datasource                         | [`GrafanaDatasourceUrlGetHandler`](#GrafanaDatasourceUrlGetHandler)     |\n+| Check the status of Container JFR's Grafana datasource and dashboard      | [`HealthGetHandler`](#HealthGetHandler)                                 |\n+| **Events and event templates**                                            |                                                                         |\n+| Get a list of event types that can be produced by a target JVM            | [`TargetEventsGetHandler`](#TargetEventsGetHandler)                     |\n+| Get a list of event templates known to a target JVM                       | [`TargetTemplatesGetHandler`](#TargetTemplatesGetHandler)               |\n+| Download a template from a target JVM                                     | [`TargetTemplateGetHandler`](#TargetTemplateGetHandler)                 |\n+| Upload an event template to Container JFR                                 | [`TemplatesPostHandler`](#TemplatesPostHandler)                         |\n+| Delete an event template that was uploaded to Container JFR               | [`TemplateDeleteHandler`](#TemplateDeleteHandler)                       |\n+| **Recordings in target JVMs**                                             |                                                                         |\n+| Get a list of recordings in a target JVM                                  | [`TargetRecordingsGetHandler`](#TargetRecordingsGetHandler)             |\n+| Create a snapshot recording in a target JVM                               | [`TargetSnapshotPostHandler`](#TargetSnapshotPostHandler)               |\n+| Start a recording in a target JVM                                         | [`TargetRecordingsPostHandler`](#TargetRecordingsPostHandler)           |\n+| Stop a recording in a target JVM                                          | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Delete a recording in a target JVM                                        | [`TargetRecordingDeleteHandler`](#TargetRecordingDeleteHandler)         |\n+| Download a recording in a target JVM                                      | [`TargetRecordingGetHandler`](#TargetRecordingGetHandler)               |\n+| Download a report of a recording in a target JVM                          | [`TargetReportGetHandler`](#TargetReportGetHandler)                     |\n+| Save a recording in a target JVM to persistent storage                    | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Upload a recording from a target JVM to the Grafana datasource            | [`TargetRecordingUploadPostHandler`](#TargetRecordingUploadPostHandler) |\n+| **Recordings in persistent storage**                                      |                                                                         |\n+| Get a list of recordings in persistent storage                            | [`RecordingsGetHandler`](#RecordingsGetHandler)                         |\n+| Upload a recording to persistent storage                                  | [`RecordingsPostHandler`](#RecordingsPostHandler)                       |\n+| Delete a recording from persistent storage                                | [`RecordingDeleteHandler`](#RecordingDeleteHandler)                     |\n+| Download a recording in persistent storage                                | [`RecordingGetHandler`](#RecordingGetHandler)                           |\n+| Download a report of a recording in persistent storage                    | [`ReportGetHandler`](#ReportGetHandler)                                 |\n+| Upload a recording from persistent storage to the Grafana datasource      | [`RecordingUploadPostHandler`](#RecordingUploadPostHandler)             |\n+\n+\n+### Core\n+\n+* #### `AuthPostHandler`\n+\n+    ###### synopsis\n+    Attempts user authenticaiton;\n+    used as a simple way to check a user authentication header.\n+\n+    ###### request\n+    `POST /api/v1/auth`\n+\n+    The request should include an `Authorization` header to be checked.", "originalCommit": "1f502b29fd2b51fed1ab39d47b10c6a0027cf928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2NTc5NA==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r489765794", "bodyText": "that the header is valid and that the user has been successfully authenticated, maybe?", "author": "andrewazores", "createdAt": "2020-09-16T21:30:21Z", "path": "HTTP_API.md", "diffHunk": "@@ -0,0 +1,952 @@\n+# HTTP API\n+\n+## V1 API\n+\n+### Quick Reference\n+\n+| What you want to do                                                       | Which handler you should use                                            |\n+| ------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n+| **Miscellaneous**                                                         |                                                                         |\n+| Get a URL you can use to access Container JFR's WebSocket command channel | [`ClientUrlGetHandler`](#ClientUrlGetHandler)                           |\n+| Scan for and get a list of target JVMs visible to Container JFR           | [`TargetsGetHandler`](#TargetsGetHandler)                               |\n+| Get a static asset from the web client                                    | [`StaticAssetsGetHandler`](#StaticAssetsGetHandler)                     |\n+| Send a `GET` request to a path not supported by this API                  | [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler)               |\n+| Test user authentication                                                  | [`AuthPostHandler`](#AuthPostHandler)                                   |\n+| Get the URL of Container JFR's Grafana dashboard                          | [`GrafanaDashboardUrlGetHandler`](#GrafanaDashboardUrlGetHandler)       |\n+| Get the URL of Container JFR's Grafana datasource                         | [`GrafanaDatasourceUrlGetHandler`](#GrafanaDatasourceUrlGetHandler)     |\n+| Check the status of Container JFR's Grafana datasource and dashboard      | [`HealthGetHandler`](#HealthGetHandler)                                 |\n+| **Events and event templates**                                            |                                                                         |\n+| Get a list of event types that can be produced by a target JVM            | [`TargetEventsGetHandler`](#TargetEventsGetHandler)                     |\n+| Get a list of event templates known to a target JVM                       | [`TargetTemplatesGetHandler`](#TargetTemplatesGetHandler)               |\n+| Download a template from a target JVM                                     | [`TargetTemplateGetHandler`](#TargetTemplateGetHandler)                 |\n+| Upload an event template to Container JFR                                 | [`TemplatesPostHandler`](#TemplatesPostHandler)                         |\n+| Delete an event template that was uploaded to Container JFR               | [`TemplateDeleteHandler`](#TemplateDeleteHandler)                       |\n+| **Recordings in target JVMs**                                             |                                                                         |\n+| Get a list of recordings in a target JVM                                  | [`TargetRecordingsGetHandler`](#TargetRecordingsGetHandler)             |\n+| Create a snapshot recording in a target JVM                               | [`TargetSnapshotPostHandler`](#TargetSnapshotPostHandler)               |\n+| Start a recording in a target JVM                                         | [`TargetRecordingsPostHandler`](#TargetRecordingsPostHandler)           |\n+| Stop a recording in a target JVM                                          | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Delete a recording in a target JVM                                        | [`TargetRecordingDeleteHandler`](#TargetRecordingDeleteHandler)         |\n+| Download a recording in a target JVM                                      | [`TargetRecordingGetHandler`](#TargetRecordingGetHandler)               |\n+| Download a report of a recording in a target JVM                          | [`TargetReportGetHandler`](#TargetReportGetHandler)                     |\n+| Save a recording in a target JVM to persistent storage                    | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Upload a recording from a target JVM to the Grafana datasource            | [`TargetRecordingUploadPostHandler`](#TargetRecordingUploadPostHandler) |\n+| **Recordings in persistent storage**                                      |                                                                         |\n+| Get a list of recordings in persistent storage                            | [`RecordingsGetHandler`](#RecordingsGetHandler)                         |\n+| Upload a recording to persistent storage                                  | [`RecordingsPostHandler`](#RecordingsPostHandler)                       |\n+| Delete a recording from persistent storage                                | [`RecordingDeleteHandler`](#RecordingDeleteHandler)                     |\n+| Download a recording in persistent storage                                | [`RecordingGetHandler`](#RecordingGetHandler)                           |\n+| Download a report of a recording in persistent storage                    | [`ReportGetHandler`](#ReportGetHandler)                                 |\n+| Upload a recording from persistent storage to the Grafana datasource      | [`RecordingUploadPostHandler`](#RecordingUploadPostHandler)             |\n+\n+\n+### Core\n+\n+* #### `AuthPostHandler`\n+\n+    ###### synopsis\n+    Attempts user authenticaiton;\n+    used as a simple way to check a user authentication header.\n+\n+    ###### request\n+    `POST /api/v1/auth`\n+\n+    The request should include an `Authorization` header to be checked.\n+\n+    ###### response\n+    `200` - No body. Getting this response means that the header is valid.", "originalCommit": "1f502b29fd2b51fed1ab39d47b10c6a0027cf928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2NTk1Mw==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r489765953", "bodyText": "the header has an invalid format or the user has not been successfully authenticated?", "author": "andrewazores", "createdAt": "2020-09-16T21:30:41Z", "path": "HTTP_API.md", "diffHunk": "@@ -0,0 +1,952 @@\n+# HTTP API\n+\n+## V1 API\n+\n+### Quick Reference\n+\n+| What you want to do                                                       | Which handler you should use                                            |\n+| ------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n+| **Miscellaneous**                                                         |                                                                         |\n+| Get a URL you can use to access Container JFR's WebSocket command channel | [`ClientUrlGetHandler`](#ClientUrlGetHandler)                           |\n+| Scan for and get a list of target JVMs visible to Container JFR           | [`TargetsGetHandler`](#TargetsGetHandler)                               |\n+| Get a static asset from the web client                                    | [`StaticAssetsGetHandler`](#StaticAssetsGetHandler)                     |\n+| Send a `GET` request to a path not supported by this API                  | [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler)               |\n+| Test user authentication                                                  | [`AuthPostHandler`](#AuthPostHandler)                                   |\n+| Get the URL of Container JFR's Grafana dashboard                          | [`GrafanaDashboardUrlGetHandler`](#GrafanaDashboardUrlGetHandler)       |\n+| Get the URL of Container JFR's Grafana datasource                         | [`GrafanaDatasourceUrlGetHandler`](#GrafanaDatasourceUrlGetHandler)     |\n+| Check the status of Container JFR's Grafana datasource and dashboard      | [`HealthGetHandler`](#HealthGetHandler)                                 |\n+| **Events and event templates**                                            |                                                                         |\n+| Get a list of event types that can be produced by a target JVM            | [`TargetEventsGetHandler`](#TargetEventsGetHandler)                     |\n+| Get a list of event templates known to a target JVM                       | [`TargetTemplatesGetHandler`](#TargetTemplatesGetHandler)               |\n+| Download a template from a target JVM                                     | [`TargetTemplateGetHandler`](#TargetTemplateGetHandler)                 |\n+| Upload an event template to Container JFR                                 | [`TemplatesPostHandler`](#TemplatesPostHandler)                         |\n+| Delete an event template that was uploaded to Container JFR               | [`TemplateDeleteHandler`](#TemplateDeleteHandler)                       |\n+| **Recordings in target JVMs**                                             |                                                                         |\n+| Get a list of recordings in a target JVM                                  | [`TargetRecordingsGetHandler`](#TargetRecordingsGetHandler)             |\n+| Create a snapshot recording in a target JVM                               | [`TargetSnapshotPostHandler`](#TargetSnapshotPostHandler)               |\n+| Start a recording in a target JVM                                         | [`TargetRecordingsPostHandler`](#TargetRecordingsPostHandler)           |\n+| Stop a recording in a target JVM                                          | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Delete a recording in a target JVM                                        | [`TargetRecordingDeleteHandler`](#TargetRecordingDeleteHandler)         |\n+| Download a recording in a target JVM                                      | [`TargetRecordingGetHandler`](#TargetRecordingGetHandler)               |\n+| Download a report of a recording in a target JVM                          | [`TargetReportGetHandler`](#TargetReportGetHandler)                     |\n+| Save a recording in a target JVM to persistent storage                    | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Upload a recording from a target JVM to the Grafana datasource            | [`TargetRecordingUploadPostHandler`](#TargetRecordingUploadPostHandler) |\n+| **Recordings in persistent storage**                                      |                                                                         |\n+| Get a list of recordings in persistent storage                            | [`RecordingsGetHandler`](#RecordingsGetHandler)                         |\n+| Upload a recording to persistent storage                                  | [`RecordingsPostHandler`](#RecordingsPostHandler)                       |\n+| Delete a recording from persistent storage                                | [`RecordingDeleteHandler`](#RecordingDeleteHandler)                     |\n+| Download a recording in persistent storage                                | [`RecordingGetHandler`](#RecordingGetHandler)                           |\n+| Download a report of a recording in persistent storage                    | [`ReportGetHandler`](#ReportGetHandler)                                 |\n+| Upload a recording from persistent storage to the Grafana datasource      | [`RecordingUploadPostHandler`](#RecordingUploadPostHandler)             |\n+\n+\n+### Core\n+\n+* #### `AuthPostHandler`\n+\n+    ###### synopsis\n+    Attempts user authenticaiton;\n+    used as a simple way to check a user authentication header.\n+\n+    ###### request\n+    `POST /api/v1/auth`\n+\n+    The request should include an `Authorization` header to be checked.\n+\n+    ###### response\n+    `200` - No body. Getting this response means that the header is valid.\n+\n+    `401` - User authentication failed. The body is an error message.\n+    Getting this response means that the header is invalid.", "originalCommit": "1f502b29fd2b51fed1ab39d47b10c6a0027cf928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2NjcxNw==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r489766717", "bodyText": "It also implicitly tells the client whether ContainerJFR itself is running properly, if a response is received vs if it times out or otherwise fails.", "author": "andrewazores", "createdAt": "2020-09-16T21:32:27Z", "path": "HTTP_API.md", "diffHunk": "@@ -0,0 +1,952 @@\n+# HTTP API\n+\n+## V1 API\n+\n+### Quick Reference\n+\n+| What you want to do                                                       | Which handler you should use                                            |\n+| ------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n+| **Miscellaneous**                                                         |                                                                         |\n+| Get a URL you can use to access Container JFR's WebSocket command channel | [`ClientUrlGetHandler`](#ClientUrlGetHandler)                           |\n+| Scan for and get a list of target JVMs visible to Container JFR           | [`TargetsGetHandler`](#TargetsGetHandler)                               |\n+| Get a static asset from the web client                                    | [`StaticAssetsGetHandler`](#StaticAssetsGetHandler)                     |\n+| Send a `GET` request to a path not supported by this API                  | [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler)               |\n+| Test user authentication                                                  | [`AuthPostHandler`](#AuthPostHandler)                                   |\n+| Get the URL of Container JFR's Grafana dashboard                          | [`GrafanaDashboardUrlGetHandler`](#GrafanaDashboardUrlGetHandler)       |\n+| Get the URL of Container JFR's Grafana datasource                         | [`GrafanaDatasourceUrlGetHandler`](#GrafanaDatasourceUrlGetHandler)     |\n+| Check the status of Container JFR's Grafana datasource and dashboard      | [`HealthGetHandler`](#HealthGetHandler)                                 |\n+| **Events and event templates**                                            |                                                                         |\n+| Get a list of event types that can be produced by a target JVM            | [`TargetEventsGetHandler`](#TargetEventsGetHandler)                     |\n+| Get a list of event templates known to a target JVM                       | [`TargetTemplatesGetHandler`](#TargetTemplatesGetHandler)               |\n+| Download a template from a target JVM                                     | [`TargetTemplateGetHandler`](#TargetTemplateGetHandler)                 |\n+| Upload an event template to Container JFR                                 | [`TemplatesPostHandler`](#TemplatesPostHandler)                         |\n+| Delete an event template that was uploaded to Container JFR               | [`TemplateDeleteHandler`](#TemplateDeleteHandler)                       |\n+| **Recordings in target JVMs**                                             |                                                                         |\n+| Get a list of recordings in a target JVM                                  | [`TargetRecordingsGetHandler`](#TargetRecordingsGetHandler)             |\n+| Create a snapshot recording in a target JVM                               | [`TargetSnapshotPostHandler`](#TargetSnapshotPostHandler)               |\n+| Start a recording in a target JVM                                         | [`TargetRecordingsPostHandler`](#TargetRecordingsPostHandler)           |\n+| Stop a recording in a target JVM                                          | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Delete a recording in a target JVM                                        | [`TargetRecordingDeleteHandler`](#TargetRecordingDeleteHandler)         |\n+| Download a recording in a target JVM                                      | [`TargetRecordingGetHandler`](#TargetRecordingGetHandler)               |\n+| Download a report of a recording in a target JVM                          | [`TargetReportGetHandler`](#TargetReportGetHandler)                     |\n+| Save a recording in a target JVM to persistent storage                    | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Upload a recording from a target JVM to the Grafana datasource            | [`TargetRecordingUploadPostHandler`](#TargetRecordingUploadPostHandler) |\n+| **Recordings in persistent storage**                                      |                                                                         |\n+| Get a list of recordings in persistent storage                            | [`RecordingsGetHandler`](#RecordingsGetHandler)                         |\n+| Upload a recording to persistent storage                                  | [`RecordingsPostHandler`](#RecordingsPostHandler)                       |\n+| Delete a recording from persistent storage                                | [`RecordingDeleteHandler`](#RecordingDeleteHandler)                     |\n+| Download a recording in persistent storage                                | [`RecordingGetHandler`](#RecordingGetHandler)                           |\n+| Download a report of a recording in persistent storage                    | [`ReportGetHandler`](#ReportGetHandler)                                 |\n+| Upload a recording from persistent storage to the Grafana datasource      | [`RecordingUploadPostHandler`](#RecordingUploadPostHandler)             |\n+\n+\n+### Core\n+\n+* #### `AuthPostHandler`\n+\n+    ###### synopsis\n+    Attempts user authenticaiton;\n+    used as a simple way to check a user authentication header.\n+\n+    ###### request\n+    `POST /api/v1/auth`\n+\n+    The request should include an `Authorization` header to be checked.\n+\n+    ###### response\n+    `200` - No body. Getting this response means that the header is valid.\n+\n+    `401` - User authentication failed. The body is an error message.\n+    Getting this response means that the header is invalid.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST --header \"Authorization: Basic dXNlcjpwYXNzCg==\" localhost:8181/api/v1/auth\n+    ```\n+\n+\n+* #### `ClientUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns a URL that a client can connect to, to access Container JFR's\n+    WebSocket command channel (see [COMMANDS.md](COMMANDS.md)).\n+\n+    ###### request\n+    `GET /api/v1/clienturl`\n+\n+    ###### response\n+    `200` - The body is `{\"clientUrl\":\"$URL\"}`.\n+\n+    `500` - The URL could not be constructed due to an error with the socket\n+    or the host. Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/clienturl\n+    {\"clientUrl\":\"ws://0.0.0.0:8181/api/v1/command\"}\n+    ```\n+\n+\n+* #### `GrafanaDashboardUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana dashboard that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DASHBOARD_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_dashboard_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDashboardUrl\":\"$URL\"}`.\n+\n+    `500` - Container JFR is not configured with a Grafana dashboard.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_dashboard_url\n+    {\"grafanaDashboardUrl\":\"http://localhost:3000/d/CazTnbSMz/\"}\n+    ```\n+\n+\n+* #### `GrafanaDatasourceUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana datasource that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_datasource_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDatasourceUrl\":\"$URL\"}`\n+\n+    `500` - Container JFR is not configured with a Grafana datasource.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_datasource_url\n+    {\"grafanaDatasourceUrl\":\"http://localhost:8080\"}\n+    ```\n+\n+\n+* #### `HealthGetHandler`\n+\n+    ###### synopsis\n+    Returns whether or not the Grafana datasource and Grafana dashbaord\n+    that Container JFR is configured with are running properly.", "originalCommit": "1f502b29fd2b51fed1ab39d47b10c6a0027cf928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0NzAyNg==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r491147026", "bodyText": "Mm so what you mean by this is that if the handler returns a 500 or if it times out (would timing out also give a 500?), then something is probably wrong with cjfr because it would mean that cjfr isn't sending/receiving HTTP messages properly?", "author": "vic-ma", "createdAt": "2020-09-18T19:22:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2NjcxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MDYzNg==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r491150636", "bodyText": "No, if the requesting client gets no response by the end of the timeout period, there would be no response status at all, so no 500 code to interpret. My point here is that if the client gets no response or gets some kind of HTTP(S) request failure, they can also discover information about the status or reachability of ContainerJFR - maybe it is not actually running, or the container is up but somehow the Java process has died or is not responding, or there is a network misconfiguration, etc.", "author": "andrewazores", "createdAt": "2020-09-18T19:31:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2NjcxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MTQ5Mg==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r491151492", "bodyText": "Of course, the same conclusions can also be reached if the client sees such failure modes on any path, not just /health, but /health in particular is a good candidate for this kind of \"liveness probe\" (https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#when-should-you-use-a-liveness-probe) for clients to check if the container is running properly.", "author": "andrewazores", "createdAt": "2020-09-18T19:32:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2NjcxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2NzUyNg==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r489767526", "bodyText": "This comma-separated list of targets, enclosed in square brackets can be more concisely described as a JSON array of target objects", "author": "andrewazores", "createdAt": "2020-09-16T21:34:19Z", "path": "HTTP_API.md", "diffHunk": "@@ -0,0 +1,952 @@\n+# HTTP API\n+\n+## V1 API\n+\n+### Quick Reference\n+\n+| What you want to do                                                       | Which handler you should use                                            |\n+| ------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n+| **Miscellaneous**                                                         |                                                                         |\n+| Get a URL you can use to access Container JFR's WebSocket command channel | [`ClientUrlGetHandler`](#ClientUrlGetHandler)                           |\n+| Scan for and get a list of target JVMs visible to Container JFR           | [`TargetsGetHandler`](#TargetsGetHandler)                               |\n+| Get a static asset from the web client                                    | [`StaticAssetsGetHandler`](#StaticAssetsGetHandler)                     |\n+| Send a `GET` request to a path not supported by this API                  | [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler)               |\n+| Test user authentication                                                  | [`AuthPostHandler`](#AuthPostHandler)                                   |\n+| Get the URL of Container JFR's Grafana dashboard                          | [`GrafanaDashboardUrlGetHandler`](#GrafanaDashboardUrlGetHandler)       |\n+| Get the URL of Container JFR's Grafana datasource                         | [`GrafanaDatasourceUrlGetHandler`](#GrafanaDatasourceUrlGetHandler)     |\n+| Check the status of Container JFR's Grafana datasource and dashboard      | [`HealthGetHandler`](#HealthGetHandler)                                 |\n+| **Events and event templates**                                            |                                                                         |\n+| Get a list of event types that can be produced by a target JVM            | [`TargetEventsGetHandler`](#TargetEventsGetHandler)                     |\n+| Get a list of event templates known to a target JVM                       | [`TargetTemplatesGetHandler`](#TargetTemplatesGetHandler)               |\n+| Download a template from a target JVM                                     | [`TargetTemplateGetHandler`](#TargetTemplateGetHandler)                 |\n+| Upload an event template to Container JFR                                 | [`TemplatesPostHandler`](#TemplatesPostHandler)                         |\n+| Delete an event template that was uploaded to Container JFR               | [`TemplateDeleteHandler`](#TemplateDeleteHandler)                       |\n+| **Recordings in target JVMs**                                             |                                                                         |\n+| Get a list of recordings in a target JVM                                  | [`TargetRecordingsGetHandler`](#TargetRecordingsGetHandler)             |\n+| Create a snapshot recording in a target JVM                               | [`TargetSnapshotPostHandler`](#TargetSnapshotPostHandler)               |\n+| Start a recording in a target JVM                                         | [`TargetRecordingsPostHandler`](#TargetRecordingsPostHandler)           |\n+| Stop a recording in a target JVM                                          | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Delete a recording in a target JVM                                        | [`TargetRecordingDeleteHandler`](#TargetRecordingDeleteHandler)         |\n+| Download a recording in a target JVM                                      | [`TargetRecordingGetHandler`](#TargetRecordingGetHandler)               |\n+| Download a report of a recording in a target JVM                          | [`TargetReportGetHandler`](#TargetReportGetHandler)                     |\n+| Save a recording in a target JVM to persistent storage                    | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Upload a recording from a target JVM to the Grafana datasource            | [`TargetRecordingUploadPostHandler`](#TargetRecordingUploadPostHandler) |\n+| **Recordings in persistent storage**                                      |                                                                         |\n+| Get a list of recordings in persistent storage                            | [`RecordingsGetHandler`](#RecordingsGetHandler)                         |\n+| Upload a recording to persistent storage                                  | [`RecordingsPostHandler`](#RecordingsPostHandler)                       |\n+| Delete a recording from persistent storage                                | [`RecordingDeleteHandler`](#RecordingDeleteHandler)                     |\n+| Download a recording in persistent storage                                | [`RecordingGetHandler`](#RecordingGetHandler)                           |\n+| Download a report of a recording in persistent storage                    | [`ReportGetHandler`](#ReportGetHandler)                                 |\n+| Upload a recording from persistent storage to the Grafana datasource      | [`RecordingUploadPostHandler`](#RecordingUploadPostHandler)             |\n+\n+\n+### Core\n+\n+* #### `AuthPostHandler`\n+\n+    ###### synopsis\n+    Attempts user authenticaiton;\n+    used as a simple way to check a user authentication header.\n+\n+    ###### request\n+    `POST /api/v1/auth`\n+\n+    The request should include an `Authorization` header to be checked.\n+\n+    ###### response\n+    `200` - No body. Getting this response means that the header is valid.\n+\n+    `401` - User authentication failed. The body is an error message.\n+    Getting this response means that the header is invalid.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST --header \"Authorization: Basic dXNlcjpwYXNzCg==\" localhost:8181/api/v1/auth\n+    ```\n+\n+\n+* #### `ClientUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns a URL that a client can connect to, to access Container JFR's\n+    WebSocket command channel (see [COMMANDS.md](COMMANDS.md)).\n+\n+    ###### request\n+    `GET /api/v1/clienturl`\n+\n+    ###### response\n+    `200` - The body is `{\"clientUrl\":\"$URL\"}`.\n+\n+    `500` - The URL could not be constructed due to an error with the socket\n+    or the host. Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/clienturl\n+    {\"clientUrl\":\"ws://0.0.0.0:8181/api/v1/command\"}\n+    ```\n+\n+\n+* #### `GrafanaDashboardUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana dashboard that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DASHBOARD_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_dashboard_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDashboardUrl\":\"$URL\"}`.\n+\n+    `500` - Container JFR is not configured with a Grafana dashboard.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_dashboard_url\n+    {\"grafanaDashboardUrl\":\"http://localhost:3000/d/CazTnbSMz/\"}\n+    ```\n+\n+\n+* #### `GrafanaDatasourceUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana datasource that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_datasource_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDatasourceUrl\":\"$URL\"}`\n+\n+    `500` - Container JFR is not configured with a Grafana datasource.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_datasource_url\n+    {\"grafanaDatasourceUrl\":\"http://localhost:8080\"}\n+    ```\n+\n+\n+* #### `HealthGetHandler`\n+\n+    ###### synopsis\n+    Returns whether or not the Grafana datasource and Grafana dashbaord\n+    that Container JFR is configured with are running properly.\n+\n+    ###### request\n+    `GET /health`\n+\n+    ###### response\n+    `200` - The body is\n+    `{\"datasourceAvailable\":$DATASOURCE_AVAILABLE,\"dashboardAvailable\":$DASHBOARD_AVAILABLE}`.\n+\n+    `$DATASOURCE_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana datasource and that datasource responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `$DASHBOARD_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana dashboard and that dashboard responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/health\n+    {\"dashboardAvailable\":false,\"datasourceAvailable\":false}\n+    ```\n+\n+\n+* #### `StaticAssetsGetHandler`\n+\n+    ###### synopsis\n+    Returns a static asset of the Container JFR web client.\n+\n+    ###### request\n+    `GET /*`\n+\n+    The path should be the directory path of the desired asset,\n+    assuming a root of\n+    `target/assets/app/resources/com/redhat/rhjmc/containerjfr/net/web/`.\n+\n+    ###### response\n+\n+    `200` - The body is the requested asset. Note that if the requested asset\n+    does not exist or the path is invalid, the request will not be handled here\n+    and instead  will be routed to\n+    [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler).\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/images/pfbg_992@2x.jpg --output pfbg_992@2x.jpg\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  574k  100  574k    0     0  43.1M      0 --:--:-- --:--:-- --:--:-- 43.1M\n+    ```\n+\n+\n+* #### `TargetsGetHandler`\n+\n+    ###### synopsis\n+    Scans for and returns discoverable target JVMs.\n+\n+    ###### request\n+    `GET /api/v1/targets`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of targets,\n+    enclosed in square brackets.", "originalCommit": "1f502b29fd2b51fed1ab39d47b10c6a0027cf928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2ODYyMg==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r489768622", "bodyText": "We use the term \"archive\" in some other places, particularly in the web-client, so perhaps it should also be included here alongside the more technical \"persistent storage\"?", "author": "andrewazores", "createdAt": "2020-09-16T21:36:48Z", "path": "HTTP_API.md", "diffHunk": "@@ -0,0 +1,952 @@\n+# HTTP API\n+\n+## V1 API\n+\n+### Quick Reference\n+\n+| What you want to do                                                       | Which handler you should use                                            |\n+| ------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n+| **Miscellaneous**                                                         |                                                                         |\n+| Get a URL you can use to access Container JFR's WebSocket command channel | [`ClientUrlGetHandler`](#ClientUrlGetHandler)                           |\n+| Scan for and get a list of target JVMs visible to Container JFR           | [`TargetsGetHandler`](#TargetsGetHandler)                               |\n+| Get a static asset from the web client                                    | [`StaticAssetsGetHandler`](#StaticAssetsGetHandler)                     |\n+| Send a `GET` request to a path not supported by this API                  | [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler)               |\n+| Test user authentication                                                  | [`AuthPostHandler`](#AuthPostHandler)                                   |\n+| Get the URL of Container JFR's Grafana dashboard                          | [`GrafanaDashboardUrlGetHandler`](#GrafanaDashboardUrlGetHandler)       |\n+| Get the URL of Container JFR's Grafana datasource                         | [`GrafanaDatasourceUrlGetHandler`](#GrafanaDatasourceUrlGetHandler)     |\n+| Check the status of Container JFR's Grafana datasource and dashboard      | [`HealthGetHandler`](#HealthGetHandler)                                 |\n+| **Events and event templates**                                            |                                                                         |\n+| Get a list of event types that can be produced by a target JVM            | [`TargetEventsGetHandler`](#TargetEventsGetHandler)                     |\n+| Get a list of event templates known to a target JVM                       | [`TargetTemplatesGetHandler`](#TargetTemplatesGetHandler)               |\n+| Download a template from a target JVM                                     | [`TargetTemplateGetHandler`](#TargetTemplateGetHandler)                 |\n+| Upload an event template to Container JFR                                 | [`TemplatesPostHandler`](#TemplatesPostHandler)                         |\n+| Delete an event template that was uploaded to Container JFR               | [`TemplateDeleteHandler`](#TemplateDeleteHandler)                       |\n+| **Recordings in target JVMs**                                             |                                                                         |\n+| Get a list of recordings in a target JVM                                  | [`TargetRecordingsGetHandler`](#TargetRecordingsGetHandler)             |\n+| Create a snapshot recording in a target JVM                               | [`TargetSnapshotPostHandler`](#TargetSnapshotPostHandler)               |\n+| Start a recording in a target JVM                                         | [`TargetRecordingsPostHandler`](#TargetRecordingsPostHandler)           |\n+| Stop a recording in a target JVM                                          | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Delete a recording in a target JVM                                        | [`TargetRecordingDeleteHandler`](#TargetRecordingDeleteHandler)         |\n+| Download a recording in a target JVM                                      | [`TargetRecordingGetHandler`](#TargetRecordingGetHandler)               |\n+| Download a report of a recording in a target JVM                          | [`TargetReportGetHandler`](#TargetReportGetHandler)                     |\n+| Save a recording in a target JVM to persistent storage                    | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Upload a recording from a target JVM to the Grafana datasource            | [`TargetRecordingUploadPostHandler`](#TargetRecordingUploadPostHandler) |\n+| **Recordings in persistent storage**                                      |                                                                         |\n+| Get a list of recordings in persistent storage                            | [`RecordingsGetHandler`](#RecordingsGetHandler)                         |\n+| Upload a recording to persistent storage                                  | [`RecordingsPostHandler`](#RecordingsPostHandler)                       |\n+| Delete a recording from persistent storage                                | [`RecordingDeleteHandler`](#RecordingDeleteHandler)                     |\n+| Download a recording in persistent storage                                | [`RecordingGetHandler`](#RecordingGetHandler)                           |\n+| Download a report of a recording in persistent storage                    | [`ReportGetHandler`](#ReportGetHandler)                                 |\n+| Upload a recording from persistent storage to the Grafana datasource      | [`RecordingUploadPostHandler`](#RecordingUploadPostHandler)             |\n+\n+\n+### Core\n+\n+* #### `AuthPostHandler`\n+\n+    ###### synopsis\n+    Attempts user authenticaiton;\n+    used as a simple way to check a user authentication header.\n+\n+    ###### request\n+    `POST /api/v1/auth`\n+\n+    The request should include an `Authorization` header to be checked.\n+\n+    ###### response\n+    `200` - No body. Getting this response means that the header is valid.\n+\n+    `401` - User authentication failed. The body is an error message.\n+    Getting this response means that the header is invalid.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST --header \"Authorization: Basic dXNlcjpwYXNzCg==\" localhost:8181/api/v1/auth\n+    ```\n+\n+\n+* #### `ClientUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns a URL that a client can connect to, to access Container JFR's\n+    WebSocket command channel (see [COMMANDS.md](COMMANDS.md)).\n+\n+    ###### request\n+    `GET /api/v1/clienturl`\n+\n+    ###### response\n+    `200` - The body is `{\"clientUrl\":\"$URL\"}`.\n+\n+    `500` - The URL could not be constructed due to an error with the socket\n+    or the host. Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/clienturl\n+    {\"clientUrl\":\"ws://0.0.0.0:8181/api/v1/command\"}\n+    ```\n+\n+\n+* #### `GrafanaDashboardUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana dashboard that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DASHBOARD_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_dashboard_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDashboardUrl\":\"$URL\"}`.\n+\n+    `500` - Container JFR is not configured with a Grafana dashboard.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_dashboard_url\n+    {\"grafanaDashboardUrl\":\"http://localhost:3000/d/CazTnbSMz/\"}\n+    ```\n+\n+\n+* #### `GrafanaDatasourceUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana datasource that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_datasource_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDatasourceUrl\":\"$URL\"}`\n+\n+    `500` - Container JFR is not configured with a Grafana datasource.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_datasource_url\n+    {\"grafanaDatasourceUrl\":\"http://localhost:8080\"}\n+    ```\n+\n+\n+* #### `HealthGetHandler`\n+\n+    ###### synopsis\n+    Returns whether or not the Grafana datasource and Grafana dashbaord\n+    that Container JFR is configured with are running properly.\n+\n+    ###### request\n+    `GET /health`\n+\n+    ###### response\n+    `200` - The body is\n+    `{\"datasourceAvailable\":$DATASOURCE_AVAILABLE,\"dashboardAvailable\":$DASHBOARD_AVAILABLE}`.\n+\n+    `$DATASOURCE_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana datasource and that datasource responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `$DASHBOARD_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana dashboard and that dashboard responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/health\n+    {\"dashboardAvailable\":false,\"datasourceAvailable\":false}\n+    ```\n+\n+\n+* #### `StaticAssetsGetHandler`\n+\n+    ###### synopsis\n+    Returns a static asset of the Container JFR web client.\n+\n+    ###### request\n+    `GET /*`\n+\n+    The path should be the directory path of the desired asset,\n+    assuming a root of\n+    `target/assets/app/resources/com/redhat/rhjmc/containerjfr/net/web/`.\n+\n+    ###### response\n+\n+    `200` - The body is the requested asset. Note that if the requested asset\n+    does not exist or the path is invalid, the request will not be handled here\n+    and instead  will be routed to\n+    [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler).\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/images/pfbg_992@2x.jpg --output pfbg_992@2x.jpg\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  574k  100  574k    0     0  43.1M      0 --:--:-- --:--:-- --:--:-- 43.1M\n+    ```\n+\n+\n+* #### `TargetsGetHandler`\n+\n+    ###### synopsis\n+    Scans for and returns discoverable target JVMs.\n+\n+    ###### request\n+    `GET /api/v1/targets`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of targets,\n+    enclosed in square brackets.\n+\n+    The format for a target is\n+    `{\"connectUrl\":\"$CONNECT_URL\",\"alias\":\"$ALIAS\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets\n+    [{\"connectUrl\":\"service:jmx:rmi:///jndi/rmi://container-jfr:9091/jmxrmi\",\"alias\":\"com.redhat.rhjmc.containerjfr.ContainerJfr\"}]\n+    ```\n+\n+\n+* #### `WebClientAssetsGetHandler`\n+\n+    ###### synopsis\n+    Handles all `GET` requests to paths not covered by another handler;\n+    returns a simple `index.html`.\n+\n+    ###### request\n+    `GET /*`\n+\n+    ###### response\n+    `200` - The body is the Container JFR web client's\n+    `index.html` HTML document.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/foo\n+    <!doctype html><html lang=\"en-US\"><head><meta charset=\"utf-8\"><title>ContainerJFR</title><meta id=\"appName\" name=\"application-name\" content=\"ContainerJFR\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><link rel=\"icon\" type=\"image/png\" href=\"https://www.patternfly.org/components/patternfly/dist/img/favicon.ico\"><base href=\"/\"><link href=\"app.css\" rel=\"stylesheet\"></head><body><noscript>Enabling JavaScript is required to run this app.</noscript><div id=\"root\"></div><script src=\"app.bundle.js\"></script></body></html>\n+    ```\n+\n+\n+### Flight Recorder\n+\n+* #### `RecordingDeleteHandler`\n+\n+    ###### synopsis\n+    Deletes a recording that was saved to persistent storage.", "originalCommit": "1f502b29fd2b51fed1ab39d47b10c6a0027cf928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0NzA2Mw==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r491147063", "bodyText": "Yeah I wasn't really sure which to use, since I saw \"persistent storage\" in COMMANDS.md but \"archive\" elsewhere.\nBut on second thought, I see that \"archive\" is the word that's used in the README as well, so maybe we should just skip \"persistent storage\" altogether? Since anyone wondering about \"archive\" would be able to find what it is easily that way, and keeping the language consistent with the README is probably best.", "author": "vic-ma", "createdAt": "2020-09-18T19:23:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2ODYyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MTc4MQ==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r491151781", "bodyText": "Sure, using only \"archive\" sounds fine too.", "author": "andrewazores", "createdAt": "2020-09-18T19:33:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2ODYyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2OTY4NA==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r489769684", "bodyText": "I'm adding this note here but it applies to all 407s, or maybe this needs a separate explanation. When a 407 is sent, the response will also include an X-JMX-Authenticate header, currently always with the value Basic but in the future this could also be Bearer or other authentication schemes. This indicates to the client the form of authentication that is expected/accepted.", "author": "andrewazores", "createdAt": "2020-09-16T21:39:14Z", "path": "HTTP_API.md", "diffHunk": "@@ -0,0 +1,952 @@\n+# HTTP API\n+\n+## V1 API\n+\n+### Quick Reference\n+\n+| What you want to do                                                       | Which handler you should use                                            |\n+| ------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n+| **Miscellaneous**                                                         |                                                                         |\n+| Get a URL you can use to access Container JFR's WebSocket command channel | [`ClientUrlGetHandler`](#ClientUrlGetHandler)                           |\n+| Scan for and get a list of target JVMs visible to Container JFR           | [`TargetsGetHandler`](#TargetsGetHandler)                               |\n+| Get a static asset from the web client                                    | [`StaticAssetsGetHandler`](#StaticAssetsGetHandler)                     |\n+| Send a `GET` request to a path not supported by this API                  | [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler)               |\n+| Test user authentication                                                  | [`AuthPostHandler`](#AuthPostHandler)                                   |\n+| Get the URL of Container JFR's Grafana dashboard                          | [`GrafanaDashboardUrlGetHandler`](#GrafanaDashboardUrlGetHandler)       |\n+| Get the URL of Container JFR's Grafana datasource                         | [`GrafanaDatasourceUrlGetHandler`](#GrafanaDatasourceUrlGetHandler)     |\n+| Check the status of Container JFR's Grafana datasource and dashboard      | [`HealthGetHandler`](#HealthGetHandler)                                 |\n+| **Events and event templates**                                            |                                                                         |\n+| Get a list of event types that can be produced by a target JVM            | [`TargetEventsGetHandler`](#TargetEventsGetHandler)                     |\n+| Get a list of event templates known to a target JVM                       | [`TargetTemplatesGetHandler`](#TargetTemplatesGetHandler)               |\n+| Download a template from a target JVM                                     | [`TargetTemplateGetHandler`](#TargetTemplateGetHandler)                 |\n+| Upload an event template to Container JFR                                 | [`TemplatesPostHandler`](#TemplatesPostHandler)                         |\n+| Delete an event template that was uploaded to Container JFR               | [`TemplateDeleteHandler`](#TemplateDeleteHandler)                       |\n+| **Recordings in target JVMs**                                             |                                                                         |\n+| Get a list of recordings in a target JVM                                  | [`TargetRecordingsGetHandler`](#TargetRecordingsGetHandler)             |\n+| Create a snapshot recording in a target JVM                               | [`TargetSnapshotPostHandler`](#TargetSnapshotPostHandler)               |\n+| Start a recording in a target JVM                                         | [`TargetRecordingsPostHandler`](#TargetRecordingsPostHandler)           |\n+| Stop a recording in a target JVM                                          | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Delete a recording in a target JVM                                        | [`TargetRecordingDeleteHandler`](#TargetRecordingDeleteHandler)         |\n+| Download a recording in a target JVM                                      | [`TargetRecordingGetHandler`](#TargetRecordingGetHandler)               |\n+| Download a report of a recording in a target JVM                          | [`TargetReportGetHandler`](#TargetReportGetHandler)                     |\n+| Save a recording in a target JVM to persistent storage                    | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Upload a recording from a target JVM to the Grafana datasource            | [`TargetRecordingUploadPostHandler`](#TargetRecordingUploadPostHandler) |\n+| **Recordings in persistent storage**                                      |                                                                         |\n+| Get a list of recordings in persistent storage                            | [`RecordingsGetHandler`](#RecordingsGetHandler)                         |\n+| Upload a recording to persistent storage                                  | [`RecordingsPostHandler`](#RecordingsPostHandler)                       |\n+| Delete a recording from persistent storage                                | [`RecordingDeleteHandler`](#RecordingDeleteHandler)                     |\n+| Download a recording in persistent storage                                | [`RecordingGetHandler`](#RecordingGetHandler)                           |\n+| Download a report of a recording in persistent storage                    | [`ReportGetHandler`](#ReportGetHandler)                                 |\n+| Upload a recording from persistent storage to the Grafana datasource      | [`RecordingUploadPostHandler`](#RecordingUploadPostHandler)             |\n+\n+\n+### Core\n+\n+* #### `AuthPostHandler`\n+\n+    ###### synopsis\n+    Attempts user authenticaiton;\n+    used as a simple way to check a user authentication header.\n+\n+    ###### request\n+    `POST /api/v1/auth`\n+\n+    The request should include an `Authorization` header to be checked.\n+\n+    ###### response\n+    `200` - No body. Getting this response means that the header is valid.\n+\n+    `401` - User authentication failed. The body is an error message.\n+    Getting this response means that the header is invalid.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST --header \"Authorization: Basic dXNlcjpwYXNzCg==\" localhost:8181/api/v1/auth\n+    ```\n+\n+\n+* #### `ClientUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns a URL that a client can connect to, to access Container JFR's\n+    WebSocket command channel (see [COMMANDS.md](COMMANDS.md)).\n+\n+    ###### request\n+    `GET /api/v1/clienturl`\n+\n+    ###### response\n+    `200` - The body is `{\"clientUrl\":\"$URL\"}`.\n+\n+    `500` - The URL could not be constructed due to an error with the socket\n+    or the host. Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/clienturl\n+    {\"clientUrl\":\"ws://0.0.0.0:8181/api/v1/command\"}\n+    ```\n+\n+\n+* #### `GrafanaDashboardUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana dashboard that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DASHBOARD_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_dashboard_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDashboardUrl\":\"$URL\"}`.\n+\n+    `500` - Container JFR is not configured with a Grafana dashboard.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_dashboard_url\n+    {\"grafanaDashboardUrl\":\"http://localhost:3000/d/CazTnbSMz/\"}\n+    ```\n+\n+\n+* #### `GrafanaDatasourceUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana datasource that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_datasource_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDatasourceUrl\":\"$URL\"}`\n+\n+    `500` - Container JFR is not configured with a Grafana datasource.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_datasource_url\n+    {\"grafanaDatasourceUrl\":\"http://localhost:8080\"}\n+    ```\n+\n+\n+* #### `HealthGetHandler`\n+\n+    ###### synopsis\n+    Returns whether or not the Grafana datasource and Grafana dashbaord\n+    that Container JFR is configured with are running properly.\n+\n+    ###### request\n+    `GET /health`\n+\n+    ###### response\n+    `200` - The body is\n+    `{\"datasourceAvailable\":$DATASOURCE_AVAILABLE,\"dashboardAvailable\":$DASHBOARD_AVAILABLE}`.\n+\n+    `$DATASOURCE_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana datasource and that datasource responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `$DASHBOARD_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana dashboard and that dashboard responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/health\n+    {\"dashboardAvailable\":false,\"datasourceAvailable\":false}\n+    ```\n+\n+\n+* #### `StaticAssetsGetHandler`\n+\n+    ###### synopsis\n+    Returns a static asset of the Container JFR web client.\n+\n+    ###### request\n+    `GET /*`\n+\n+    The path should be the directory path of the desired asset,\n+    assuming a root of\n+    `target/assets/app/resources/com/redhat/rhjmc/containerjfr/net/web/`.\n+\n+    ###### response\n+\n+    `200` - The body is the requested asset. Note that if the requested asset\n+    does not exist or the path is invalid, the request will not be handled here\n+    and instead  will be routed to\n+    [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler).\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/images/pfbg_992@2x.jpg --output pfbg_992@2x.jpg\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  574k  100  574k    0     0  43.1M      0 --:--:-- --:--:-- --:--:-- 43.1M\n+    ```\n+\n+\n+* #### `TargetsGetHandler`\n+\n+    ###### synopsis\n+    Scans for and returns discoverable target JVMs.\n+\n+    ###### request\n+    `GET /api/v1/targets`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of targets,\n+    enclosed in square brackets.\n+\n+    The format for a target is\n+    `{\"connectUrl\":\"$CONNECT_URL\",\"alias\":\"$ALIAS\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.", "originalCommit": "1f502b29fd2b51fed1ab39d47b10c6a0027cf928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0NzA3Ng==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r491147076", "bodyText": "Do the 401 need a similar note, or is it only because this is a custom header?", "author": "vic-ma", "createdAt": "2020-09-18T19:23:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2OTY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NTM1NQ==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r491155355", "bodyText": "Yea, this is a custom header so it needs additional documentation. There is a similar dynamic with the 401 / Authenticate / Authorization which I guess we should also document, since we use a custom X-WWW-Authenticate instead of the standard WWW-Authenticate.", "author": "andrewazores", "createdAt": "2020-09-18T19:42:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2OTY4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3MTUxMg==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r489771512", "bodyText": "Same re: archive", "author": "andrewazores", "createdAt": "2020-09-16T21:43:26Z", "path": "HTTP_API.md", "diffHunk": "@@ -0,0 +1,952 @@\n+# HTTP API\n+\n+## V1 API\n+\n+### Quick Reference\n+\n+| What you want to do                                                       | Which handler you should use                                            |\n+| ------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n+| **Miscellaneous**                                                         |                                                                         |\n+| Get a URL you can use to access Container JFR's WebSocket command channel | [`ClientUrlGetHandler`](#ClientUrlGetHandler)                           |\n+| Scan for and get a list of target JVMs visible to Container JFR           | [`TargetsGetHandler`](#TargetsGetHandler)                               |\n+| Get a static asset from the web client                                    | [`StaticAssetsGetHandler`](#StaticAssetsGetHandler)                     |\n+| Send a `GET` request to a path not supported by this API                  | [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler)               |\n+| Test user authentication                                                  | [`AuthPostHandler`](#AuthPostHandler)                                   |\n+| Get the URL of Container JFR's Grafana dashboard                          | [`GrafanaDashboardUrlGetHandler`](#GrafanaDashboardUrlGetHandler)       |\n+| Get the URL of Container JFR's Grafana datasource                         | [`GrafanaDatasourceUrlGetHandler`](#GrafanaDatasourceUrlGetHandler)     |\n+| Check the status of Container JFR's Grafana datasource and dashboard      | [`HealthGetHandler`](#HealthGetHandler)                                 |\n+| **Events and event templates**                                            |                                                                         |\n+| Get a list of event types that can be produced by a target JVM            | [`TargetEventsGetHandler`](#TargetEventsGetHandler)                     |\n+| Get a list of event templates known to a target JVM                       | [`TargetTemplatesGetHandler`](#TargetTemplatesGetHandler)               |\n+| Download a template from a target JVM                                     | [`TargetTemplateGetHandler`](#TargetTemplateGetHandler)                 |\n+| Upload an event template to Container JFR                                 | [`TemplatesPostHandler`](#TemplatesPostHandler)                         |\n+| Delete an event template that was uploaded to Container JFR               | [`TemplateDeleteHandler`](#TemplateDeleteHandler)                       |\n+| **Recordings in target JVMs**                                             |                                                                         |\n+| Get a list of recordings in a target JVM                                  | [`TargetRecordingsGetHandler`](#TargetRecordingsGetHandler)             |\n+| Create a snapshot recording in a target JVM                               | [`TargetSnapshotPostHandler`](#TargetSnapshotPostHandler)               |\n+| Start a recording in a target JVM                                         | [`TargetRecordingsPostHandler`](#TargetRecordingsPostHandler)           |\n+| Stop a recording in a target JVM                                          | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Delete a recording in a target JVM                                        | [`TargetRecordingDeleteHandler`](#TargetRecordingDeleteHandler)         |\n+| Download a recording in a target JVM                                      | [`TargetRecordingGetHandler`](#TargetRecordingGetHandler)               |\n+| Download a report of a recording in a target JVM                          | [`TargetReportGetHandler`](#TargetReportGetHandler)                     |\n+| Save a recording in a target JVM to persistent storage                    | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Upload a recording from a target JVM to the Grafana datasource            | [`TargetRecordingUploadPostHandler`](#TargetRecordingUploadPostHandler) |\n+| **Recordings in persistent storage**                                      |                                                                         |\n+| Get a list of recordings in persistent storage                            | [`RecordingsGetHandler`](#RecordingsGetHandler)                         |\n+| Upload a recording to persistent storage                                  | [`RecordingsPostHandler`](#RecordingsPostHandler)                       |\n+| Delete a recording from persistent storage                                | [`RecordingDeleteHandler`](#RecordingDeleteHandler)                     |\n+| Download a recording in persistent storage                                | [`RecordingGetHandler`](#RecordingGetHandler)                           |\n+| Download a report of a recording in persistent storage                    | [`ReportGetHandler`](#ReportGetHandler)                                 |\n+| Upload a recording from persistent storage to the Grafana datasource      | [`RecordingUploadPostHandler`](#RecordingUploadPostHandler)             |\n+\n+\n+### Core\n+\n+* #### `AuthPostHandler`\n+\n+    ###### synopsis\n+    Attempts user authenticaiton;\n+    used as a simple way to check a user authentication header.\n+\n+    ###### request\n+    `POST /api/v1/auth`\n+\n+    The request should include an `Authorization` header to be checked.\n+\n+    ###### response\n+    `200` - No body. Getting this response means that the header is valid.\n+\n+    `401` - User authentication failed. The body is an error message.\n+    Getting this response means that the header is invalid.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST --header \"Authorization: Basic dXNlcjpwYXNzCg==\" localhost:8181/api/v1/auth\n+    ```\n+\n+\n+* #### `ClientUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns a URL that a client can connect to, to access Container JFR's\n+    WebSocket command channel (see [COMMANDS.md](COMMANDS.md)).\n+\n+    ###### request\n+    `GET /api/v1/clienturl`\n+\n+    ###### response\n+    `200` - The body is `{\"clientUrl\":\"$URL\"}`.\n+\n+    `500` - The URL could not be constructed due to an error with the socket\n+    or the host. Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/clienturl\n+    {\"clientUrl\":\"ws://0.0.0.0:8181/api/v1/command\"}\n+    ```\n+\n+\n+* #### `GrafanaDashboardUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana dashboard that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DASHBOARD_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_dashboard_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDashboardUrl\":\"$URL\"}`.\n+\n+    `500` - Container JFR is not configured with a Grafana dashboard.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_dashboard_url\n+    {\"grafanaDashboardUrl\":\"http://localhost:3000/d/CazTnbSMz/\"}\n+    ```\n+\n+\n+* #### `GrafanaDatasourceUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana datasource that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_datasource_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDatasourceUrl\":\"$URL\"}`\n+\n+    `500` - Container JFR is not configured with a Grafana datasource.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_datasource_url\n+    {\"grafanaDatasourceUrl\":\"http://localhost:8080\"}\n+    ```\n+\n+\n+* #### `HealthGetHandler`\n+\n+    ###### synopsis\n+    Returns whether or not the Grafana datasource and Grafana dashbaord\n+    that Container JFR is configured with are running properly.\n+\n+    ###### request\n+    `GET /health`\n+\n+    ###### response\n+    `200` - The body is\n+    `{\"datasourceAvailable\":$DATASOURCE_AVAILABLE,\"dashboardAvailable\":$DASHBOARD_AVAILABLE}`.\n+\n+    `$DATASOURCE_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana datasource and that datasource responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `$DASHBOARD_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana dashboard and that dashboard responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/health\n+    {\"dashboardAvailable\":false,\"datasourceAvailable\":false}\n+    ```\n+\n+\n+* #### `StaticAssetsGetHandler`\n+\n+    ###### synopsis\n+    Returns a static asset of the Container JFR web client.\n+\n+    ###### request\n+    `GET /*`\n+\n+    The path should be the directory path of the desired asset,\n+    assuming a root of\n+    `target/assets/app/resources/com/redhat/rhjmc/containerjfr/net/web/`.\n+\n+    ###### response\n+\n+    `200` - The body is the requested asset. Note that if the requested asset\n+    does not exist or the path is invalid, the request will not be handled here\n+    and instead  will be routed to\n+    [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler).\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/images/pfbg_992@2x.jpg --output pfbg_992@2x.jpg\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  574k  100  574k    0     0  43.1M      0 --:--:-- --:--:-- --:--:-- 43.1M\n+    ```\n+\n+\n+* #### `TargetsGetHandler`\n+\n+    ###### synopsis\n+    Scans for and returns discoverable target JVMs.\n+\n+    ###### request\n+    `GET /api/v1/targets`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of targets,\n+    enclosed in square brackets.\n+\n+    The format for a target is\n+    `{\"connectUrl\":\"$CONNECT_URL\",\"alias\":\"$ALIAS\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets\n+    [{\"connectUrl\":\"service:jmx:rmi:///jndi/rmi://container-jfr:9091/jmxrmi\",\"alias\":\"com.redhat.rhjmc.containerjfr.ContainerJfr\"}]\n+    ```\n+\n+\n+* #### `WebClientAssetsGetHandler`\n+\n+    ###### synopsis\n+    Handles all `GET` requests to paths not covered by another handler;\n+    returns a simple `index.html`.\n+\n+    ###### request\n+    `GET /*`\n+\n+    ###### response\n+    `200` - The body is the Container JFR web client's\n+    `index.html` HTML document.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/foo\n+    <!doctype html><html lang=\"en-US\"><head><meta charset=\"utf-8\"><title>ContainerJFR</title><meta id=\"appName\" name=\"application-name\" content=\"ContainerJFR\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><link rel=\"icon\" type=\"image/png\" href=\"https://www.patternfly.org/components/patternfly/dist/img/favicon.ico\"><base href=\"/\"><link href=\"app.css\" rel=\"stylesheet\"></head><body><noscript>Enabling JavaScript is required to run this app.</noscript><div id=\"root\"></div><script src=\"app.bundle.js\"></script></body></html>\n+    ```\n+\n+\n+### Flight Recorder\n+\n+* #### `RecordingDeleteHandler`\n+\n+    ###### synopsis\n+    Deletes a recording that was saved to persistent storage.\n+    This does not affect any recordings in any target JVM's JFR buffer.\n+\n+    ###### request\n+    `DELETE /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to delete.\n+\n+    ###### response\n+    `200` - No body.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be deleted.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X DELETE localhost:8181/api/v1/recordings/localhost_foo_20200910T213341Z.jfr\n+    ```\n+\n+\n+* #### `RecordingGetHandler`\n+\n+    ###### synopsis\n+    Returns a recording that was saved to persistent storage,\n+    as an octet stream.\n+\n+    ###### request\n+    `GET /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to get.\n+\n+    ###### response\n+    `200` - The body is an octet stream consisting of the requested recording.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be written to the response.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings/localhost_foo_20200910T214559Z.jfr --output foo.jfr\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  942k  100  942k    0     0  61.3M      0 --:--:-- --:--:-- --:--:-- 61.3M\n+    ```\n+\n+\n+* #### `RecordingsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of the recordings that are saved in persistent storage.", "originalCommit": "1f502b29fd2b51fed1ab39d47b10c6a0027cf928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3MTYwNg==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r489771606", "bodyText": "Same re: JSON array", "author": "andrewazores", "createdAt": "2020-09-16T21:43:39Z", "path": "HTTP_API.md", "diffHunk": "@@ -0,0 +1,952 @@\n+# HTTP API\n+\n+## V1 API\n+\n+### Quick Reference\n+\n+| What you want to do                                                       | Which handler you should use                                            |\n+| ------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n+| **Miscellaneous**                                                         |                                                                         |\n+| Get a URL you can use to access Container JFR's WebSocket command channel | [`ClientUrlGetHandler`](#ClientUrlGetHandler)                           |\n+| Scan for and get a list of target JVMs visible to Container JFR           | [`TargetsGetHandler`](#TargetsGetHandler)                               |\n+| Get a static asset from the web client                                    | [`StaticAssetsGetHandler`](#StaticAssetsGetHandler)                     |\n+| Send a `GET` request to a path not supported by this API                  | [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler)               |\n+| Test user authentication                                                  | [`AuthPostHandler`](#AuthPostHandler)                                   |\n+| Get the URL of Container JFR's Grafana dashboard                          | [`GrafanaDashboardUrlGetHandler`](#GrafanaDashboardUrlGetHandler)       |\n+| Get the URL of Container JFR's Grafana datasource                         | [`GrafanaDatasourceUrlGetHandler`](#GrafanaDatasourceUrlGetHandler)     |\n+| Check the status of Container JFR's Grafana datasource and dashboard      | [`HealthGetHandler`](#HealthGetHandler)                                 |\n+| **Events and event templates**                                            |                                                                         |\n+| Get a list of event types that can be produced by a target JVM            | [`TargetEventsGetHandler`](#TargetEventsGetHandler)                     |\n+| Get a list of event templates known to a target JVM                       | [`TargetTemplatesGetHandler`](#TargetTemplatesGetHandler)               |\n+| Download a template from a target JVM                                     | [`TargetTemplateGetHandler`](#TargetTemplateGetHandler)                 |\n+| Upload an event template to Container JFR                                 | [`TemplatesPostHandler`](#TemplatesPostHandler)                         |\n+| Delete an event template that was uploaded to Container JFR               | [`TemplateDeleteHandler`](#TemplateDeleteHandler)                       |\n+| **Recordings in target JVMs**                                             |                                                                         |\n+| Get a list of recordings in a target JVM                                  | [`TargetRecordingsGetHandler`](#TargetRecordingsGetHandler)             |\n+| Create a snapshot recording in a target JVM                               | [`TargetSnapshotPostHandler`](#TargetSnapshotPostHandler)               |\n+| Start a recording in a target JVM                                         | [`TargetRecordingsPostHandler`](#TargetRecordingsPostHandler)           |\n+| Stop a recording in a target JVM                                          | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Delete a recording in a target JVM                                        | [`TargetRecordingDeleteHandler`](#TargetRecordingDeleteHandler)         |\n+| Download a recording in a target JVM                                      | [`TargetRecordingGetHandler`](#TargetRecordingGetHandler)               |\n+| Download a report of a recording in a target JVM                          | [`TargetReportGetHandler`](#TargetReportGetHandler)                     |\n+| Save a recording in a target JVM to persistent storage                    | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Upload a recording from a target JVM to the Grafana datasource            | [`TargetRecordingUploadPostHandler`](#TargetRecordingUploadPostHandler) |\n+| **Recordings in persistent storage**                                      |                                                                         |\n+| Get a list of recordings in persistent storage                            | [`RecordingsGetHandler`](#RecordingsGetHandler)                         |\n+| Upload a recording to persistent storage                                  | [`RecordingsPostHandler`](#RecordingsPostHandler)                       |\n+| Delete a recording from persistent storage                                | [`RecordingDeleteHandler`](#RecordingDeleteHandler)                     |\n+| Download a recording in persistent storage                                | [`RecordingGetHandler`](#RecordingGetHandler)                           |\n+| Download a report of a recording in persistent storage                    | [`ReportGetHandler`](#ReportGetHandler)                                 |\n+| Upload a recording from persistent storage to the Grafana datasource      | [`RecordingUploadPostHandler`](#RecordingUploadPostHandler)             |\n+\n+\n+### Core\n+\n+* #### `AuthPostHandler`\n+\n+    ###### synopsis\n+    Attempts user authenticaiton;\n+    used as a simple way to check a user authentication header.\n+\n+    ###### request\n+    `POST /api/v1/auth`\n+\n+    The request should include an `Authorization` header to be checked.\n+\n+    ###### response\n+    `200` - No body. Getting this response means that the header is valid.\n+\n+    `401` - User authentication failed. The body is an error message.\n+    Getting this response means that the header is invalid.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST --header \"Authorization: Basic dXNlcjpwYXNzCg==\" localhost:8181/api/v1/auth\n+    ```\n+\n+\n+* #### `ClientUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns a URL that a client can connect to, to access Container JFR's\n+    WebSocket command channel (see [COMMANDS.md](COMMANDS.md)).\n+\n+    ###### request\n+    `GET /api/v1/clienturl`\n+\n+    ###### response\n+    `200` - The body is `{\"clientUrl\":\"$URL\"}`.\n+\n+    `500` - The URL could not be constructed due to an error with the socket\n+    or the host. Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/clienturl\n+    {\"clientUrl\":\"ws://0.0.0.0:8181/api/v1/command\"}\n+    ```\n+\n+\n+* #### `GrafanaDashboardUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana dashboard that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DASHBOARD_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_dashboard_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDashboardUrl\":\"$URL\"}`.\n+\n+    `500` - Container JFR is not configured with a Grafana dashboard.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_dashboard_url\n+    {\"grafanaDashboardUrl\":\"http://localhost:3000/d/CazTnbSMz/\"}\n+    ```\n+\n+\n+* #### `GrafanaDatasourceUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana datasource that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_datasource_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDatasourceUrl\":\"$URL\"}`\n+\n+    `500` - Container JFR is not configured with a Grafana datasource.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_datasource_url\n+    {\"grafanaDatasourceUrl\":\"http://localhost:8080\"}\n+    ```\n+\n+\n+* #### `HealthGetHandler`\n+\n+    ###### synopsis\n+    Returns whether or not the Grafana datasource and Grafana dashbaord\n+    that Container JFR is configured with are running properly.\n+\n+    ###### request\n+    `GET /health`\n+\n+    ###### response\n+    `200` - The body is\n+    `{\"datasourceAvailable\":$DATASOURCE_AVAILABLE,\"dashboardAvailable\":$DASHBOARD_AVAILABLE}`.\n+\n+    `$DATASOURCE_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana datasource and that datasource responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `$DASHBOARD_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana dashboard and that dashboard responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/health\n+    {\"dashboardAvailable\":false,\"datasourceAvailable\":false}\n+    ```\n+\n+\n+* #### `StaticAssetsGetHandler`\n+\n+    ###### synopsis\n+    Returns a static asset of the Container JFR web client.\n+\n+    ###### request\n+    `GET /*`\n+\n+    The path should be the directory path of the desired asset,\n+    assuming a root of\n+    `target/assets/app/resources/com/redhat/rhjmc/containerjfr/net/web/`.\n+\n+    ###### response\n+\n+    `200` - The body is the requested asset. Note that if the requested asset\n+    does not exist or the path is invalid, the request will not be handled here\n+    and instead  will be routed to\n+    [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler).\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/images/pfbg_992@2x.jpg --output pfbg_992@2x.jpg\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  574k  100  574k    0     0  43.1M      0 --:--:-- --:--:-- --:--:-- 43.1M\n+    ```\n+\n+\n+* #### `TargetsGetHandler`\n+\n+    ###### synopsis\n+    Scans for and returns discoverable target JVMs.\n+\n+    ###### request\n+    `GET /api/v1/targets`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of targets,\n+    enclosed in square brackets.\n+\n+    The format for a target is\n+    `{\"connectUrl\":\"$CONNECT_URL\",\"alias\":\"$ALIAS\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets\n+    [{\"connectUrl\":\"service:jmx:rmi:///jndi/rmi://container-jfr:9091/jmxrmi\",\"alias\":\"com.redhat.rhjmc.containerjfr.ContainerJfr\"}]\n+    ```\n+\n+\n+* #### `WebClientAssetsGetHandler`\n+\n+    ###### synopsis\n+    Handles all `GET` requests to paths not covered by another handler;\n+    returns a simple `index.html`.\n+\n+    ###### request\n+    `GET /*`\n+\n+    ###### response\n+    `200` - The body is the Container JFR web client's\n+    `index.html` HTML document.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/foo\n+    <!doctype html><html lang=\"en-US\"><head><meta charset=\"utf-8\"><title>ContainerJFR</title><meta id=\"appName\" name=\"application-name\" content=\"ContainerJFR\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><link rel=\"icon\" type=\"image/png\" href=\"https://www.patternfly.org/components/patternfly/dist/img/favicon.ico\"><base href=\"/\"><link href=\"app.css\" rel=\"stylesheet\"></head><body><noscript>Enabling JavaScript is required to run this app.</noscript><div id=\"root\"></div><script src=\"app.bundle.js\"></script></body></html>\n+    ```\n+\n+\n+### Flight Recorder\n+\n+* #### `RecordingDeleteHandler`\n+\n+    ###### synopsis\n+    Deletes a recording that was saved to persistent storage.\n+    This does not affect any recordings in any target JVM's JFR buffer.\n+\n+    ###### request\n+    `DELETE /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to delete.\n+\n+    ###### response\n+    `200` - No body.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be deleted.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X DELETE localhost:8181/api/v1/recordings/localhost_foo_20200910T213341Z.jfr\n+    ```\n+\n+\n+* #### `RecordingGetHandler`\n+\n+    ###### synopsis\n+    Returns a recording that was saved to persistent storage,\n+    as an octet stream.\n+\n+    ###### request\n+    `GET /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to get.\n+\n+    ###### response\n+    `200` - The body is an octet stream consisting of the requested recording.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be written to the response.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings/localhost_foo_20200910T214559Z.jfr --output foo.jfr\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  942k  100  942k    0     0  61.3M      0 --:--:-- --:--:-- --:--:-- 61.3M\n+    ```\n+\n+\n+* #### `RecordingsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of the recordings that are saved in persistent storage.\n+\n+    ###### request\n+    `GET /api/v1/recordings`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of recordings,\n+    enclosed in square brackets.", "originalCommit": "1f502b29fd2b51fed1ab39d47b10c6a0027cf928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3MTcwNw==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r489771707", "bodyText": "Same re: archive", "author": "andrewazores", "createdAt": "2020-09-16T21:43:52Z", "path": "HTTP_API.md", "diffHunk": "@@ -0,0 +1,952 @@\n+# HTTP API\n+\n+## V1 API\n+\n+### Quick Reference\n+\n+| What you want to do                                                       | Which handler you should use                                            |\n+| ------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n+| **Miscellaneous**                                                         |                                                                         |\n+| Get a URL you can use to access Container JFR's WebSocket command channel | [`ClientUrlGetHandler`](#ClientUrlGetHandler)                           |\n+| Scan for and get a list of target JVMs visible to Container JFR           | [`TargetsGetHandler`](#TargetsGetHandler)                               |\n+| Get a static asset from the web client                                    | [`StaticAssetsGetHandler`](#StaticAssetsGetHandler)                     |\n+| Send a `GET` request to a path not supported by this API                  | [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler)               |\n+| Test user authentication                                                  | [`AuthPostHandler`](#AuthPostHandler)                                   |\n+| Get the URL of Container JFR's Grafana dashboard                          | [`GrafanaDashboardUrlGetHandler`](#GrafanaDashboardUrlGetHandler)       |\n+| Get the URL of Container JFR's Grafana datasource                         | [`GrafanaDatasourceUrlGetHandler`](#GrafanaDatasourceUrlGetHandler)     |\n+| Check the status of Container JFR's Grafana datasource and dashboard      | [`HealthGetHandler`](#HealthGetHandler)                                 |\n+| **Events and event templates**                                            |                                                                         |\n+| Get a list of event types that can be produced by a target JVM            | [`TargetEventsGetHandler`](#TargetEventsGetHandler)                     |\n+| Get a list of event templates known to a target JVM                       | [`TargetTemplatesGetHandler`](#TargetTemplatesGetHandler)               |\n+| Download a template from a target JVM                                     | [`TargetTemplateGetHandler`](#TargetTemplateGetHandler)                 |\n+| Upload an event template to Container JFR                                 | [`TemplatesPostHandler`](#TemplatesPostHandler)                         |\n+| Delete an event template that was uploaded to Container JFR               | [`TemplateDeleteHandler`](#TemplateDeleteHandler)                       |\n+| **Recordings in target JVMs**                                             |                                                                         |\n+| Get a list of recordings in a target JVM                                  | [`TargetRecordingsGetHandler`](#TargetRecordingsGetHandler)             |\n+| Create a snapshot recording in a target JVM                               | [`TargetSnapshotPostHandler`](#TargetSnapshotPostHandler)               |\n+| Start a recording in a target JVM                                         | [`TargetRecordingsPostHandler`](#TargetRecordingsPostHandler)           |\n+| Stop a recording in a target JVM                                          | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Delete a recording in a target JVM                                        | [`TargetRecordingDeleteHandler`](#TargetRecordingDeleteHandler)         |\n+| Download a recording in a target JVM                                      | [`TargetRecordingGetHandler`](#TargetRecordingGetHandler)               |\n+| Download a report of a recording in a target JVM                          | [`TargetReportGetHandler`](#TargetReportGetHandler)                     |\n+| Save a recording in a target JVM to persistent storage                    | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Upload a recording from a target JVM to the Grafana datasource            | [`TargetRecordingUploadPostHandler`](#TargetRecordingUploadPostHandler) |\n+| **Recordings in persistent storage**                                      |                                                                         |\n+| Get a list of recordings in persistent storage                            | [`RecordingsGetHandler`](#RecordingsGetHandler)                         |\n+| Upload a recording to persistent storage                                  | [`RecordingsPostHandler`](#RecordingsPostHandler)                       |\n+| Delete a recording from persistent storage                                | [`RecordingDeleteHandler`](#RecordingDeleteHandler)                     |\n+| Download a recording in persistent storage                                | [`RecordingGetHandler`](#RecordingGetHandler)                           |\n+| Download a report of a recording in persistent storage                    | [`ReportGetHandler`](#ReportGetHandler)                                 |\n+| Upload a recording from persistent storage to the Grafana datasource      | [`RecordingUploadPostHandler`](#RecordingUploadPostHandler)             |\n+\n+\n+### Core\n+\n+* #### `AuthPostHandler`\n+\n+    ###### synopsis\n+    Attempts user authenticaiton;\n+    used as a simple way to check a user authentication header.\n+\n+    ###### request\n+    `POST /api/v1/auth`\n+\n+    The request should include an `Authorization` header to be checked.\n+\n+    ###### response\n+    `200` - No body. Getting this response means that the header is valid.\n+\n+    `401` - User authentication failed. The body is an error message.\n+    Getting this response means that the header is invalid.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST --header \"Authorization: Basic dXNlcjpwYXNzCg==\" localhost:8181/api/v1/auth\n+    ```\n+\n+\n+* #### `ClientUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns a URL that a client can connect to, to access Container JFR's\n+    WebSocket command channel (see [COMMANDS.md](COMMANDS.md)).\n+\n+    ###### request\n+    `GET /api/v1/clienturl`\n+\n+    ###### response\n+    `200` - The body is `{\"clientUrl\":\"$URL\"}`.\n+\n+    `500` - The URL could not be constructed due to an error with the socket\n+    or the host. Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/clienturl\n+    {\"clientUrl\":\"ws://0.0.0.0:8181/api/v1/command\"}\n+    ```\n+\n+\n+* #### `GrafanaDashboardUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana dashboard that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DASHBOARD_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_dashboard_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDashboardUrl\":\"$URL\"}`.\n+\n+    `500` - Container JFR is not configured with a Grafana dashboard.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_dashboard_url\n+    {\"grafanaDashboardUrl\":\"http://localhost:3000/d/CazTnbSMz/\"}\n+    ```\n+\n+\n+* #### `GrafanaDatasourceUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana datasource that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_datasource_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDatasourceUrl\":\"$URL\"}`\n+\n+    `500` - Container JFR is not configured with a Grafana datasource.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_datasource_url\n+    {\"grafanaDatasourceUrl\":\"http://localhost:8080\"}\n+    ```\n+\n+\n+* #### `HealthGetHandler`\n+\n+    ###### synopsis\n+    Returns whether or not the Grafana datasource and Grafana dashbaord\n+    that Container JFR is configured with are running properly.\n+\n+    ###### request\n+    `GET /health`\n+\n+    ###### response\n+    `200` - The body is\n+    `{\"datasourceAvailable\":$DATASOURCE_AVAILABLE,\"dashboardAvailable\":$DASHBOARD_AVAILABLE}`.\n+\n+    `$DATASOURCE_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana datasource and that datasource responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `$DASHBOARD_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana dashboard and that dashboard responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/health\n+    {\"dashboardAvailable\":false,\"datasourceAvailable\":false}\n+    ```\n+\n+\n+* #### `StaticAssetsGetHandler`\n+\n+    ###### synopsis\n+    Returns a static asset of the Container JFR web client.\n+\n+    ###### request\n+    `GET /*`\n+\n+    The path should be the directory path of the desired asset,\n+    assuming a root of\n+    `target/assets/app/resources/com/redhat/rhjmc/containerjfr/net/web/`.\n+\n+    ###### response\n+\n+    `200` - The body is the requested asset. Note that if the requested asset\n+    does not exist or the path is invalid, the request will not be handled here\n+    and instead  will be routed to\n+    [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler).\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/images/pfbg_992@2x.jpg --output pfbg_992@2x.jpg\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  574k  100  574k    0     0  43.1M      0 --:--:-- --:--:-- --:--:-- 43.1M\n+    ```\n+\n+\n+* #### `TargetsGetHandler`\n+\n+    ###### synopsis\n+    Scans for and returns discoverable target JVMs.\n+\n+    ###### request\n+    `GET /api/v1/targets`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of targets,\n+    enclosed in square brackets.\n+\n+    The format for a target is\n+    `{\"connectUrl\":\"$CONNECT_URL\",\"alias\":\"$ALIAS\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets\n+    [{\"connectUrl\":\"service:jmx:rmi:///jndi/rmi://container-jfr:9091/jmxrmi\",\"alias\":\"com.redhat.rhjmc.containerjfr.ContainerJfr\"}]\n+    ```\n+\n+\n+* #### `WebClientAssetsGetHandler`\n+\n+    ###### synopsis\n+    Handles all `GET` requests to paths not covered by another handler;\n+    returns a simple `index.html`.\n+\n+    ###### request\n+    `GET /*`\n+\n+    ###### response\n+    `200` - The body is the Container JFR web client's\n+    `index.html` HTML document.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/foo\n+    <!doctype html><html lang=\"en-US\"><head><meta charset=\"utf-8\"><title>ContainerJFR</title><meta id=\"appName\" name=\"application-name\" content=\"ContainerJFR\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><link rel=\"icon\" type=\"image/png\" href=\"https://www.patternfly.org/components/patternfly/dist/img/favicon.ico\"><base href=\"/\"><link href=\"app.css\" rel=\"stylesheet\"></head><body><noscript>Enabling JavaScript is required to run this app.</noscript><div id=\"root\"></div><script src=\"app.bundle.js\"></script></body></html>\n+    ```\n+\n+\n+### Flight Recorder\n+\n+* #### `RecordingDeleteHandler`\n+\n+    ###### synopsis\n+    Deletes a recording that was saved to persistent storage.\n+    This does not affect any recordings in any target JVM's JFR buffer.\n+\n+    ###### request\n+    `DELETE /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to delete.\n+\n+    ###### response\n+    `200` - No body.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be deleted.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X DELETE localhost:8181/api/v1/recordings/localhost_foo_20200910T213341Z.jfr\n+    ```\n+\n+\n+* #### `RecordingGetHandler`\n+\n+    ###### synopsis\n+    Returns a recording that was saved to persistent storage,\n+    as an octet stream.\n+\n+    ###### request\n+    `GET /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to get.\n+\n+    ###### response\n+    `200` - The body is an octet stream consisting of the requested recording.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be written to the response.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings/localhost_foo_20200910T214559Z.jfr --output foo.jfr\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  942k  100  942k    0     0  61.3M      0 --:--:-- --:--:-- --:--:-- 61.3M\n+    ```\n+\n+\n+* #### `RecordingsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of the recordings that are saved in persistent storage.\n+\n+    ###### request\n+    `GET /api/v1/recordings`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of recordings,\n+    enclosed in square brackets.\n+\n+    The format for a recording is\n+    `{\"downloadUrl\":\"$DOWNLOAD_URL\",\"name\":\"$NAME\",\"reportUrl\":\"$REPORT_URL\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `501` - The archive path where recordings are saved could not be accessed.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings\n+    [{\"downloadUrl\":\"http://192.168.0.109:8181/api/v1/recordings/localhost_foo_20200903T202547Z.jfr\",\"name\":\"localhost_foo_20200903T202547Z.jfr\",\"reportUrl\":\"http://192.168.0.109:8181/api/v1/reports/localhost_foo_20200903T202547Z.jfr\"}]\n+    ```\n+\n+\n+* #### `RecordingsPostHandler`\n+\n+    ###### synopsis\n+    Uploads a recording from the client to Container JFR's persistent storage.", "originalCommit": "1f502b29fd2b51fed1ab39d47b10c6a0027cf928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3MjM2Mg==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r489772362", "bodyText": "I think the format deserves a brief explanation here - for an inexperienced user, the example filename localhost_foo_20200903T202547Z.jfr may be non-obvious.", "author": "andrewazores", "createdAt": "2020-09-16T21:45:20Z", "path": "HTTP_API.md", "diffHunk": "@@ -0,0 +1,952 @@\n+# HTTP API\n+\n+## V1 API\n+\n+### Quick Reference\n+\n+| What you want to do                                                       | Which handler you should use                                            |\n+| ------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n+| **Miscellaneous**                                                         |                                                                         |\n+| Get a URL you can use to access Container JFR's WebSocket command channel | [`ClientUrlGetHandler`](#ClientUrlGetHandler)                           |\n+| Scan for and get a list of target JVMs visible to Container JFR           | [`TargetsGetHandler`](#TargetsGetHandler)                               |\n+| Get a static asset from the web client                                    | [`StaticAssetsGetHandler`](#StaticAssetsGetHandler)                     |\n+| Send a `GET` request to a path not supported by this API                  | [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler)               |\n+| Test user authentication                                                  | [`AuthPostHandler`](#AuthPostHandler)                                   |\n+| Get the URL of Container JFR's Grafana dashboard                          | [`GrafanaDashboardUrlGetHandler`](#GrafanaDashboardUrlGetHandler)       |\n+| Get the URL of Container JFR's Grafana datasource                         | [`GrafanaDatasourceUrlGetHandler`](#GrafanaDatasourceUrlGetHandler)     |\n+| Check the status of Container JFR's Grafana datasource and dashboard      | [`HealthGetHandler`](#HealthGetHandler)                                 |\n+| **Events and event templates**                                            |                                                                         |\n+| Get a list of event types that can be produced by a target JVM            | [`TargetEventsGetHandler`](#TargetEventsGetHandler)                     |\n+| Get a list of event templates known to a target JVM                       | [`TargetTemplatesGetHandler`](#TargetTemplatesGetHandler)               |\n+| Download a template from a target JVM                                     | [`TargetTemplateGetHandler`](#TargetTemplateGetHandler)                 |\n+| Upload an event template to Container JFR                                 | [`TemplatesPostHandler`](#TemplatesPostHandler)                         |\n+| Delete an event template that was uploaded to Container JFR               | [`TemplateDeleteHandler`](#TemplateDeleteHandler)                       |\n+| **Recordings in target JVMs**                                             |                                                                         |\n+| Get a list of recordings in a target JVM                                  | [`TargetRecordingsGetHandler`](#TargetRecordingsGetHandler)             |\n+| Create a snapshot recording in a target JVM                               | [`TargetSnapshotPostHandler`](#TargetSnapshotPostHandler)               |\n+| Start a recording in a target JVM                                         | [`TargetRecordingsPostHandler`](#TargetRecordingsPostHandler)           |\n+| Stop a recording in a target JVM                                          | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Delete a recording in a target JVM                                        | [`TargetRecordingDeleteHandler`](#TargetRecordingDeleteHandler)         |\n+| Download a recording in a target JVM                                      | [`TargetRecordingGetHandler`](#TargetRecordingGetHandler)               |\n+| Download a report of a recording in a target JVM                          | [`TargetReportGetHandler`](#TargetReportGetHandler)                     |\n+| Save a recording in a target JVM to persistent storage                    | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Upload a recording from a target JVM to the Grafana datasource            | [`TargetRecordingUploadPostHandler`](#TargetRecordingUploadPostHandler) |\n+| **Recordings in persistent storage**                                      |                                                                         |\n+| Get a list of recordings in persistent storage                            | [`RecordingsGetHandler`](#RecordingsGetHandler)                         |\n+| Upload a recording to persistent storage                                  | [`RecordingsPostHandler`](#RecordingsPostHandler)                       |\n+| Delete a recording from persistent storage                                | [`RecordingDeleteHandler`](#RecordingDeleteHandler)                     |\n+| Download a recording in persistent storage                                | [`RecordingGetHandler`](#RecordingGetHandler)                           |\n+| Download a report of a recording in persistent storage                    | [`ReportGetHandler`](#ReportGetHandler)                                 |\n+| Upload a recording from persistent storage to the Grafana datasource      | [`RecordingUploadPostHandler`](#RecordingUploadPostHandler)             |\n+\n+\n+### Core\n+\n+* #### `AuthPostHandler`\n+\n+    ###### synopsis\n+    Attempts user authenticaiton;\n+    used as a simple way to check a user authentication header.\n+\n+    ###### request\n+    `POST /api/v1/auth`\n+\n+    The request should include an `Authorization` header to be checked.\n+\n+    ###### response\n+    `200` - No body. Getting this response means that the header is valid.\n+\n+    `401` - User authentication failed. The body is an error message.\n+    Getting this response means that the header is invalid.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST --header \"Authorization: Basic dXNlcjpwYXNzCg==\" localhost:8181/api/v1/auth\n+    ```\n+\n+\n+* #### `ClientUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns a URL that a client can connect to, to access Container JFR's\n+    WebSocket command channel (see [COMMANDS.md](COMMANDS.md)).\n+\n+    ###### request\n+    `GET /api/v1/clienturl`\n+\n+    ###### response\n+    `200` - The body is `{\"clientUrl\":\"$URL\"}`.\n+\n+    `500` - The URL could not be constructed due to an error with the socket\n+    or the host. Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/clienturl\n+    {\"clientUrl\":\"ws://0.0.0.0:8181/api/v1/command\"}\n+    ```\n+\n+\n+* #### `GrafanaDashboardUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana dashboard that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DASHBOARD_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_dashboard_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDashboardUrl\":\"$URL\"}`.\n+\n+    `500` - Container JFR is not configured with a Grafana dashboard.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_dashboard_url\n+    {\"grafanaDashboardUrl\":\"http://localhost:3000/d/CazTnbSMz/\"}\n+    ```\n+\n+\n+* #### `GrafanaDatasourceUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana datasource that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_datasource_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDatasourceUrl\":\"$URL\"}`\n+\n+    `500` - Container JFR is not configured with a Grafana datasource.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_datasource_url\n+    {\"grafanaDatasourceUrl\":\"http://localhost:8080\"}\n+    ```\n+\n+\n+* #### `HealthGetHandler`\n+\n+    ###### synopsis\n+    Returns whether or not the Grafana datasource and Grafana dashbaord\n+    that Container JFR is configured with are running properly.\n+\n+    ###### request\n+    `GET /health`\n+\n+    ###### response\n+    `200` - The body is\n+    `{\"datasourceAvailable\":$DATASOURCE_AVAILABLE,\"dashboardAvailable\":$DASHBOARD_AVAILABLE}`.\n+\n+    `$DATASOURCE_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana datasource and that datasource responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `$DASHBOARD_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana dashboard and that dashboard responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/health\n+    {\"dashboardAvailable\":false,\"datasourceAvailable\":false}\n+    ```\n+\n+\n+* #### `StaticAssetsGetHandler`\n+\n+    ###### synopsis\n+    Returns a static asset of the Container JFR web client.\n+\n+    ###### request\n+    `GET /*`\n+\n+    The path should be the directory path of the desired asset,\n+    assuming a root of\n+    `target/assets/app/resources/com/redhat/rhjmc/containerjfr/net/web/`.\n+\n+    ###### response\n+\n+    `200` - The body is the requested asset. Note that if the requested asset\n+    does not exist or the path is invalid, the request will not be handled here\n+    and instead  will be routed to\n+    [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler).\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/images/pfbg_992@2x.jpg --output pfbg_992@2x.jpg\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  574k  100  574k    0     0  43.1M      0 --:--:-- --:--:-- --:--:-- 43.1M\n+    ```\n+\n+\n+* #### `TargetsGetHandler`\n+\n+    ###### synopsis\n+    Scans for and returns discoverable target JVMs.\n+\n+    ###### request\n+    `GET /api/v1/targets`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of targets,\n+    enclosed in square brackets.\n+\n+    The format for a target is\n+    `{\"connectUrl\":\"$CONNECT_URL\",\"alias\":\"$ALIAS\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets\n+    [{\"connectUrl\":\"service:jmx:rmi:///jndi/rmi://container-jfr:9091/jmxrmi\",\"alias\":\"com.redhat.rhjmc.containerjfr.ContainerJfr\"}]\n+    ```\n+\n+\n+* #### `WebClientAssetsGetHandler`\n+\n+    ###### synopsis\n+    Handles all `GET` requests to paths not covered by another handler;\n+    returns a simple `index.html`.\n+\n+    ###### request\n+    `GET /*`\n+\n+    ###### response\n+    `200` - The body is the Container JFR web client's\n+    `index.html` HTML document.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/foo\n+    <!doctype html><html lang=\"en-US\"><head><meta charset=\"utf-8\"><title>ContainerJFR</title><meta id=\"appName\" name=\"application-name\" content=\"ContainerJFR\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><link rel=\"icon\" type=\"image/png\" href=\"https://www.patternfly.org/components/patternfly/dist/img/favicon.ico\"><base href=\"/\"><link href=\"app.css\" rel=\"stylesheet\"></head><body><noscript>Enabling JavaScript is required to run this app.</noscript><div id=\"root\"></div><script src=\"app.bundle.js\"></script></body></html>\n+    ```\n+\n+\n+### Flight Recorder\n+\n+* #### `RecordingDeleteHandler`\n+\n+    ###### synopsis\n+    Deletes a recording that was saved to persistent storage.\n+    This does not affect any recordings in any target JVM's JFR buffer.\n+\n+    ###### request\n+    `DELETE /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to delete.\n+\n+    ###### response\n+    `200` - No body.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be deleted.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X DELETE localhost:8181/api/v1/recordings/localhost_foo_20200910T213341Z.jfr\n+    ```\n+\n+\n+* #### `RecordingGetHandler`\n+\n+    ###### synopsis\n+    Returns a recording that was saved to persistent storage,\n+    as an octet stream.\n+\n+    ###### request\n+    `GET /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to get.\n+\n+    ###### response\n+    `200` - The body is an octet stream consisting of the requested recording.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be written to the response.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings/localhost_foo_20200910T214559Z.jfr --output foo.jfr\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  942k  100  942k    0     0  61.3M      0 --:--:-- --:--:-- --:--:-- 61.3M\n+    ```\n+\n+\n+* #### `RecordingsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of the recordings that are saved in persistent storage.\n+\n+    ###### request\n+    `GET /api/v1/recordings`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of recordings,\n+    enclosed in square brackets.\n+\n+    The format for a recording is\n+    `{\"downloadUrl\":\"$DOWNLOAD_URL\",\"name\":\"$NAME\",\"reportUrl\":\"$REPORT_URL\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `501` - The archive path where recordings are saved could not be accessed.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings\n+    [{\"downloadUrl\":\"http://192.168.0.109:8181/api/v1/recordings/localhost_foo_20200903T202547Z.jfr\",\"name\":\"localhost_foo_20200903T202547Z.jfr\",\"reportUrl\":\"http://192.168.0.109:8181/api/v1/reports/localhost_foo_20200903T202547Z.jfr\"}]\n+    ```\n+\n+\n+* #### `RecordingsPostHandler`\n+\n+    ###### synopsis\n+    Uploads a recording from the client to Container JFR's persistent storage.\n+\n+    ###### request\n+    `POST /api/v1/recordings`\n+\n+    The recording should be uploaded in a form with the name `recording`.\n+    The filename of the recording must follow the format that Container JFR\n+    uses for recordings it saves itself", "originalCommit": "1f502b29fd2b51fed1ab39d47b10c6a0027cf928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3MjU3MA==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r489772570", "bodyText": "Please specify how the filename is mutated when this collision-avoidance is performed. It's included in the example again, but I think it deserves to be written out here", "author": "andrewazores", "createdAt": "2020-09-16T21:45:46Z", "path": "HTTP_API.md", "diffHunk": "@@ -0,0 +1,952 @@\n+# HTTP API\n+\n+## V1 API\n+\n+### Quick Reference\n+\n+| What you want to do                                                       | Which handler you should use                                            |\n+| ------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n+| **Miscellaneous**                                                         |                                                                         |\n+| Get a URL you can use to access Container JFR's WebSocket command channel | [`ClientUrlGetHandler`](#ClientUrlGetHandler)                           |\n+| Scan for and get a list of target JVMs visible to Container JFR           | [`TargetsGetHandler`](#TargetsGetHandler)                               |\n+| Get a static asset from the web client                                    | [`StaticAssetsGetHandler`](#StaticAssetsGetHandler)                     |\n+| Send a `GET` request to a path not supported by this API                  | [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler)               |\n+| Test user authentication                                                  | [`AuthPostHandler`](#AuthPostHandler)                                   |\n+| Get the URL of Container JFR's Grafana dashboard                          | [`GrafanaDashboardUrlGetHandler`](#GrafanaDashboardUrlGetHandler)       |\n+| Get the URL of Container JFR's Grafana datasource                         | [`GrafanaDatasourceUrlGetHandler`](#GrafanaDatasourceUrlGetHandler)     |\n+| Check the status of Container JFR's Grafana datasource and dashboard      | [`HealthGetHandler`](#HealthGetHandler)                                 |\n+| **Events and event templates**                                            |                                                                         |\n+| Get a list of event types that can be produced by a target JVM            | [`TargetEventsGetHandler`](#TargetEventsGetHandler)                     |\n+| Get a list of event templates known to a target JVM                       | [`TargetTemplatesGetHandler`](#TargetTemplatesGetHandler)               |\n+| Download a template from a target JVM                                     | [`TargetTemplateGetHandler`](#TargetTemplateGetHandler)                 |\n+| Upload an event template to Container JFR                                 | [`TemplatesPostHandler`](#TemplatesPostHandler)                         |\n+| Delete an event template that was uploaded to Container JFR               | [`TemplateDeleteHandler`](#TemplateDeleteHandler)                       |\n+| **Recordings in target JVMs**                                             |                                                                         |\n+| Get a list of recordings in a target JVM                                  | [`TargetRecordingsGetHandler`](#TargetRecordingsGetHandler)             |\n+| Create a snapshot recording in a target JVM                               | [`TargetSnapshotPostHandler`](#TargetSnapshotPostHandler)               |\n+| Start a recording in a target JVM                                         | [`TargetRecordingsPostHandler`](#TargetRecordingsPostHandler)           |\n+| Stop a recording in a target JVM                                          | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Delete a recording in a target JVM                                        | [`TargetRecordingDeleteHandler`](#TargetRecordingDeleteHandler)         |\n+| Download a recording in a target JVM                                      | [`TargetRecordingGetHandler`](#TargetRecordingGetHandler)               |\n+| Download a report of a recording in a target JVM                          | [`TargetReportGetHandler`](#TargetReportGetHandler)                     |\n+| Save a recording in a target JVM to persistent storage                    | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Upload a recording from a target JVM to the Grafana datasource            | [`TargetRecordingUploadPostHandler`](#TargetRecordingUploadPostHandler) |\n+| **Recordings in persistent storage**                                      |                                                                         |\n+| Get a list of recordings in persistent storage                            | [`RecordingsGetHandler`](#RecordingsGetHandler)                         |\n+| Upload a recording to persistent storage                                  | [`RecordingsPostHandler`](#RecordingsPostHandler)                       |\n+| Delete a recording from persistent storage                                | [`RecordingDeleteHandler`](#RecordingDeleteHandler)                     |\n+| Download a recording in persistent storage                                | [`RecordingGetHandler`](#RecordingGetHandler)                           |\n+| Download a report of a recording in persistent storage                    | [`ReportGetHandler`](#ReportGetHandler)                                 |\n+| Upload a recording from persistent storage to the Grafana datasource      | [`RecordingUploadPostHandler`](#RecordingUploadPostHandler)             |\n+\n+\n+### Core\n+\n+* #### `AuthPostHandler`\n+\n+    ###### synopsis\n+    Attempts user authenticaiton;\n+    used as a simple way to check a user authentication header.\n+\n+    ###### request\n+    `POST /api/v1/auth`\n+\n+    The request should include an `Authorization` header to be checked.\n+\n+    ###### response\n+    `200` - No body. Getting this response means that the header is valid.\n+\n+    `401` - User authentication failed. The body is an error message.\n+    Getting this response means that the header is invalid.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST --header \"Authorization: Basic dXNlcjpwYXNzCg==\" localhost:8181/api/v1/auth\n+    ```\n+\n+\n+* #### `ClientUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns a URL that a client can connect to, to access Container JFR's\n+    WebSocket command channel (see [COMMANDS.md](COMMANDS.md)).\n+\n+    ###### request\n+    `GET /api/v1/clienturl`\n+\n+    ###### response\n+    `200` - The body is `{\"clientUrl\":\"$URL\"}`.\n+\n+    `500` - The URL could not be constructed due to an error with the socket\n+    or the host. Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/clienturl\n+    {\"clientUrl\":\"ws://0.0.0.0:8181/api/v1/command\"}\n+    ```\n+\n+\n+* #### `GrafanaDashboardUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana dashboard that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DASHBOARD_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_dashboard_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDashboardUrl\":\"$URL\"}`.\n+\n+    `500` - Container JFR is not configured with a Grafana dashboard.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_dashboard_url\n+    {\"grafanaDashboardUrl\":\"http://localhost:3000/d/CazTnbSMz/\"}\n+    ```\n+\n+\n+* #### `GrafanaDatasourceUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana datasource that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_datasource_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDatasourceUrl\":\"$URL\"}`\n+\n+    `500` - Container JFR is not configured with a Grafana datasource.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_datasource_url\n+    {\"grafanaDatasourceUrl\":\"http://localhost:8080\"}\n+    ```\n+\n+\n+* #### `HealthGetHandler`\n+\n+    ###### synopsis\n+    Returns whether or not the Grafana datasource and Grafana dashbaord\n+    that Container JFR is configured with are running properly.\n+\n+    ###### request\n+    `GET /health`\n+\n+    ###### response\n+    `200` - The body is\n+    `{\"datasourceAvailable\":$DATASOURCE_AVAILABLE,\"dashboardAvailable\":$DASHBOARD_AVAILABLE}`.\n+\n+    `$DATASOURCE_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana datasource and that datasource responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `$DASHBOARD_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana dashboard and that dashboard responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/health\n+    {\"dashboardAvailable\":false,\"datasourceAvailable\":false}\n+    ```\n+\n+\n+* #### `StaticAssetsGetHandler`\n+\n+    ###### synopsis\n+    Returns a static asset of the Container JFR web client.\n+\n+    ###### request\n+    `GET /*`\n+\n+    The path should be the directory path of the desired asset,\n+    assuming a root of\n+    `target/assets/app/resources/com/redhat/rhjmc/containerjfr/net/web/`.\n+\n+    ###### response\n+\n+    `200` - The body is the requested asset. Note that if the requested asset\n+    does not exist or the path is invalid, the request will not be handled here\n+    and instead  will be routed to\n+    [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler).\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/images/pfbg_992@2x.jpg --output pfbg_992@2x.jpg\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  574k  100  574k    0     0  43.1M      0 --:--:-- --:--:-- --:--:-- 43.1M\n+    ```\n+\n+\n+* #### `TargetsGetHandler`\n+\n+    ###### synopsis\n+    Scans for and returns discoverable target JVMs.\n+\n+    ###### request\n+    `GET /api/v1/targets`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of targets,\n+    enclosed in square brackets.\n+\n+    The format for a target is\n+    `{\"connectUrl\":\"$CONNECT_URL\",\"alias\":\"$ALIAS\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets\n+    [{\"connectUrl\":\"service:jmx:rmi:///jndi/rmi://container-jfr:9091/jmxrmi\",\"alias\":\"com.redhat.rhjmc.containerjfr.ContainerJfr\"}]\n+    ```\n+\n+\n+* #### `WebClientAssetsGetHandler`\n+\n+    ###### synopsis\n+    Handles all `GET` requests to paths not covered by another handler;\n+    returns a simple `index.html`.\n+\n+    ###### request\n+    `GET /*`\n+\n+    ###### response\n+    `200` - The body is the Container JFR web client's\n+    `index.html` HTML document.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/foo\n+    <!doctype html><html lang=\"en-US\"><head><meta charset=\"utf-8\"><title>ContainerJFR</title><meta id=\"appName\" name=\"application-name\" content=\"ContainerJFR\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><link rel=\"icon\" type=\"image/png\" href=\"https://www.patternfly.org/components/patternfly/dist/img/favicon.ico\"><base href=\"/\"><link href=\"app.css\" rel=\"stylesheet\"></head><body><noscript>Enabling JavaScript is required to run this app.</noscript><div id=\"root\"></div><script src=\"app.bundle.js\"></script></body></html>\n+    ```\n+\n+\n+### Flight Recorder\n+\n+* #### `RecordingDeleteHandler`\n+\n+    ###### synopsis\n+    Deletes a recording that was saved to persistent storage.\n+    This does not affect any recordings in any target JVM's JFR buffer.\n+\n+    ###### request\n+    `DELETE /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to delete.\n+\n+    ###### response\n+    `200` - No body.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be deleted.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X DELETE localhost:8181/api/v1/recordings/localhost_foo_20200910T213341Z.jfr\n+    ```\n+\n+\n+* #### `RecordingGetHandler`\n+\n+    ###### synopsis\n+    Returns a recording that was saved to persistent storage,\n+    as an octet stream.\n+\n+    ###### request\n+    `GET /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to get.\n+\n+    ###### response\n+    `200` - The body is an octet stream consisting of the requested recording.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be written to the response.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings/localhost_foo_20200910T214559Z.jfr --output foo.jfr\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  942k  100  942k    0     0  61.3M      0 --:--:-- --:--:-- --:--:-- 61.3M\n+    ```\n+\n+\n+* #### `RecordingsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of the recordings that are saved in persistent storage.\n+\n+    ###### request\n+    `GET /api/v1/recordings`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of recordings,\n+    enclosed in square brackets.\n+\n+    The format for a recording is\n+    `{\"downloadUrl\":\"$DOWNLOAD_URL\",\"name\":\"$NAME\",\"reportUrl\":\"$REPORT_URL\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `501` - The archive path where recordings are saved could not be accessed.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings\n+    [{\"downloadUrl\":\"http://192.168.0.109:8181/api/v1/recordings/localhost_foo_20200903T202547Z.jfr\",\"name\":\"localhost_foo_20200903T202547Z.jfr\",\"reportUrl\":\"http://192.168.0.109:8181/api/v1/reports/localhost_foo_20200903T202547Z.jfr\"}]\n+    ```\n+\n+\n+* #### `RecordingsPostHandler`\n+\n+    ###### synopsis\n+    Uploads a recording from the client to Container JFR's persistent storage.\n+\n+    ###### request\n+    `POST /api/v1/recordings`\n+\n+    The recording should be uploaded in a form with the name `recording`.\n+    The filename of the recording must follow the format that Container JFR\n+    uses for recordings it saves itself\n+    (with [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)).\n+\n+    ###### response\n+    `200` - The body is `{\"name\":\"$NAME\"}`, where `$NAME` is the name of the\n+    recording that is now saved in persistent storage.\n+    This name will be different from the uploaded recording's filename\n+    if another recording with the same name already existed.", "originalCommit": "1f502b29fd2b51fed1ab39d47b10c6a0027cf928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3MzQ3Nw==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r489773477", "bodyText": "Same re: JSON array", "author": "andrewazores", "createdAt": "2020-09-16T21:47:49Z", "path": "HTTP_API.md", "diffHunk": "@@ -0,0 +1,952 @@\n+# HTTP API\n+\n+## V1 API\n+\n+### Quick Reference\n+\n+| What you want to do                                                       | Which handler you should use                                            |\n+| ------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n+| **Miscellaneous**                                                         |                                                                         |\n+| Get a URL you can use to access Container JFR's WebSocket command channel | [`ClientUrlGetHandler`](#ClientUrlGetHandler)                           |\n+| Scan for and get a list of target JVMs visible to Container JFR           | [`TargetsGetHandler`](#TargetsGetHandler)                               |\n+| Get a static asset from the web client                                    | [`StaticAssetsGetHandler`](#StaticAssetsGetHandler)                     |\n+| Send a `GET` request to a path not supported by this API                  | [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler)               |\n+| Test user authentication                                                  | [`AuthPostHandler`](#AuthPostHandler)                                   |\n+| Get the URL of Container JFR's Grafana dashboard                          | [`GrafanaDashboardUrlGetHandler`](#GrafanaDashboardUrlGetHandler)       |\n+| Get the URL of Container JFR's Grafana datasource                         | [`GrafanaDatasourceUrlGetHandler`](#GrafanaDatasourceUrlGetHandler)     |\n+| Check the status of Container JFR's Grafana datasource and dashboard      | [`HealthGetHandler`](#HealthGetHandler)                                 |\n+| **Events and event templates**                                            |                                                                         |\n+| Get a list of event types that can be produced by a target JVM            | [`TargetEventsGetHandler`](#TargetEventsGetHandler)                     |\n+| Get a list of event templates known to a target JVM                       | [`TargetTemplatesGetHandler`](#TargetTemplatesGetHandler)               |\n+| Download a template from a target JVM                                     | [`TargetTemplateGetHandler`](#TargetTemplateGetHandler)                 |\n+| Upload an event template to Container JFR                                 | [`TemplatesPostHandler`](#TemplatesPostHandler)                         |\n+| Delete an event template that was uploaded to Container JFR               | [`TemplateDeleteHandler`](#TemplateDeleteHandler)                       |\n+| **Recordings in target JVMs**                                             |                                                                         |\n+| Get a list of recordings in a target JVM                                  | [`TargetRecordingsGetHandler`](#TargetRecordingsGetHandler)             |\n+| Create a snapshot recording in a target JVM                               | [`TargetSnapshotPostHandler`](#TargetSnapshotPostHandler)               |\n+| Start a recording in a target JVM                                         | [`TargetRecordingsPostHandler`](#TargetRecordingsPostHandler)           |\n+| Stop a recording in a target JVM                                          | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Delete a recording in a target JVM                                        | [`TargetRecordingDeleteHandler`](#TargetRecordingDeleteHandler)         |\n+| Download a recording in a target JVM                                      | [`TargetRecordingGetHandler`](#TargetRecordingGetHandler)               |\n+| Download a report of a recording in a target JVM                          | [`TargetReportGetHandler`](#TargetReportGetHandler)                     |\n+| Save a recording in a target JVM to persistent storage                    | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Upload a recording from a target JVM to the Grafana datasource            | [`TargetRecordingUploadPostHandler`](#TargetRecordingUploadPostHandler) |\n+| **Recordings in persistent storage**                                      |                                                                         |\n+| Get a list of recordings in persistent storage                            | [`RecordingsGetHandler`](#RecordingsGetHandler)                         |\n+| Upload a recording to persistent storage                                  | [`RecordingsPostHandler`](#RecordingsPostHandler)                       |\n+| Delete a recording from persistent storage                                | [`RecordingDeleteHandler`](#RecordingDeleteHandler)                     |\n+| Download a recording in persistent storage                                | [`RecordingGetHandler`](#RecordingGetHandler)                           |\n+| Download a report of a recording in persistent storage                    | [`ReportGetHandler`](#ReportGetHandler)                                 |\n+| Upload a recording from persistent storage to the Grafana datasource      | [`RecordingUploadPostHandler`](#RecordingUploadPostHandler)             |\n+\n+\n+### Core\n+\n+* #### `AuthPostHandler`\n+\n+    ###### synopsis\n+    Attempts user authenticaiton;\n+    used as a simple way to check a user authentication header.\n+\n+    ###### request\n+    `POST /api/v1/auth`\n+\n+    The request should include an `Authorization` header to be checked.\n+\n+    ###### response\n+    `200` - No body. Getting this response means that the header is valid.\n+\n+    `401` - User authentication failed. The body is an error message.\n+    Getting this response means that the header is invalid.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST --header \"Authorization: Basic dXNlcjpwYXNzCg==\" localhost:8181/api/v1/auth\n+    ```\n+\n+\n+* #### `ClientUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns a URL that a client can connect to, to access Container JFR's\n+    WebSocket command channel (see [COMMANDS.md](COMMANDS.md)).\n+\n+    ###### request\n+    `GET /api/v1/clienturl`\n+\n+    ###### response\n+    `200` - The body is `{\"clientUrl\":\"$URL\"}`.\n+\n+    `500` - The URL could not be constructed due to an error with the socket\n+    or the host. Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/clienturl\n+    {\"clientUrl\":\"ws://0.0.0.0:8181/api/v1/command\"}\n+    ```\n+\n+\n+* #### `GrafanaDashboardUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana dashboard that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DASHBOARD_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_dashboard_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDashboardUrl\":\"$URL\"}`.\n+\n+    `500` - Container JFR is not configured with a Grafana dashboard.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_dashboard_url\n+    {\"grafanaDashboardUrl\":\"http://localhost:3000/d/CazTnbSMz/\"}\n+    ```\n+\n+\n+* #### `GrafanaDatasourceUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana datasource that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_datasource_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDatasourceUrl\":\"$URL\"}`\n+\n+    `500` - Container JFR is not configured with a Grafana datasource.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_datasource_url\n+    {\"grafanaDatasourceUrl\":\"http://localhost:8080\"}\n+    ```\n+\n+\n+* #### `HealthGetHandler`\n+\n+    ###### synopsis\n+    Returns whether or not the Grafana datasource and Grafana dashbaord\n+    that Container JFR is configured with are running properly.\n+\n+    ###### request\n+    `GET /health`\n+\n+    ###### response\n+    `200` - The body is\n+    `{\"datasourceAvailable\":$DATASOURCE_AVAILABLE,\"dashboardAvailable\":$DASHBOARD_AVAILABLE}`.\n+\n+    `$DATASOURCE_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana datasource and that datasource responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `$DASHBOARD_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana dashboard and that dashboard responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/health\n+    {\"dashboardAvailable\":false,\"datasourceAvailable\":false}\n+    ```\n+\n+\n+* #### `StaticAssetsGetHandler`\n+\n+    ###### synopsis\n+    Returns a static asset of the Container JFR web client.\n+\n+    ###### request\n+    `GET /*`\n+\n+    The path should be the directory path of the desired asset,\n+    assuming a root of\n+    `target/assets/app/resources/com/redhat/rhjmc/containerjfr/net/web/`.\n+\n+    ###### response\n+\n+    `200` - The body is the requested asset. Note that if the requested asset\n+    does not exist or the path is invalid, the request will not be handled here\n+    and instead  will be routed to\n+    [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler).\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/images/pfbg_992@2x.jpg --output pfbg_992@2x.jpg\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  574k  100  574k    0     0  43.1M      0 --:--:-- --:--:-- --:--:-- 43.1M\n+    ```\n+\n+\n+* #### `TargetsGetHandler`\n+\n+    ###### synopsis\n+    Scans for and returns discoverable target JVMs.\n+\n+    ###### request\n+    `GET /api/v1/targets`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of targets,\n+    enclosed in square brackets.\n+\n+    The format for a target is\n+    `{\"connectUrl\":\"$CONNECT_URL\",\"alias\":\"$ALIAS\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets\n+    [{\"connectUrl\":\"service:jmx:rmi:///jndi/rmi://container-jfr:9091/jmxrmi\",\"alias\":\"com.redhat.rhjmc.containerjfr.ContainerJfr\"}]\n+    ```\n+\n+\n+* #### `WebClientAssetsGetHandler`\n+\n+    ###### synopsis\n+    Handles all `GET` requests to paths not covered by another handler;\n+    returns a simple `index.html`.\n+\n+    ###### request\n+    `GET /*`\n+\n+    ###### response\n+    `200` - The body is the Container JFR web client's\n+    `index.html` HTML document.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/foo\n+    <!doctype html><html lang=\"en-US\"><head><meta charset=\"utf-8\"><title>ContainerJFR</title><meta id=\"appName\" name=\"application-name\" content=\"ContainerJFR\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><link rel=\"icon\" type=\"image/png\" href=\"https://www.patternfly.org/components/patternfly/dist/img/favicon.ico\"><base href=\"/\"><link href=\"app.css\" rel=\"stylesheet\"></head><body><noscript>Enabling JavaScript is required to run this app.</noscript><div id=\"root\"></div><script src=\"app.bundle.js\"></script></body></html>\n+    ```\n+\n+\n+### Flight Recorder\n+\n+* #### `RecordingDeleteHandler`\n+\n+    ###### synopsis\n+    Deletes a recording that was saved to persistent storage.\n+    This does not affect any recordings in any target JVM's JFR buffer.\n+\n+    ###### request\n+    `DELETE /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to delete.\n+\n+    ###### response\n+    `200` - No body.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be deleted.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X DELETE localhost:8181/api/v1/recordings/localhost_foo_20200910T213341Z.jfr\n+    ```\n+\n+\n+* #### `RecordingGetHandler`\n+\n+    ###### synopsis\n+    Returns a recording that was saved to persistent storage,\n+    as an octet stream.\n+\n+    ###### request\n+    `GET /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to get.\n+\n+    ###### response\n+    `200` - The body is an octet stream consisting of the requested recording.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be written to the response.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings/localhost_foo_20200910T214559Z.jfr --output foo.jfr\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  942k  100  942k    0     0  61.3M      0 --:--:-- --:--:-- --:--:-- 61.3M\n+    ```\n+\n+\n+* #### `RecordingsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of the recordings that are saved in persistent storage.\n+\n+    ###### request\n+    `GET /api/v1/recordings`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of recordings,\n+    enclosed in square brackets.\n+\n+    The format for a recording is\n+    `{\"downloadUrl\":\"$DOWNLOAD_URL\",\"name\":\"$NAME\",\"reportUrl\":\"$REPORT_URL\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `501` - The archive path where recordings are saved could not be accessed.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings\n+    [{\"downloadUrl\":\"http://192.168.0.109:8181/api/v1/recordings/localhost_foo_20200903T202547Z.jfr\",\"name\":\"localhost_foo_20200903T202547Z.jfr\",\"reportUrl\":\"http://192.168.0.109:8181/api/v1/reports/localhost_foo_20200903T202547Z.jfr\"}]\n+    ```\n+\n+\n+* #### `RecordingsPostHandler`\n+\n+    ###### synopsis\n+    Uploads a recording from the client to Container JFR's persistent storage.\n+\n+    ###### request\n+    `POST /api/v1/recordings`\n+\n+    The recording should be uploaded in a form with the name `recording`.\n+    The filename of the recording must follow the format that Container JFR\n+    uses for recordings it saves itself\n+    (with [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)).\n+\n+    ###### response\n+    `200` - The body is `{\"name\":\"$NAME\"}`, where `$NAME` is the name of the\n+    recording that is now saved in persistent storage.\n+    This name will be different from the uploaded recording's filename\n+    if another recording with the same name already existed.\n+\n+    `400` - The recording submission is invalid. The body is an error\n+    message.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `503` - `CONTAINER_JFR_ARCHIVE_PATH` is an invalid directory.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl --form \"recording=@localhost_foo_20200903T202547Z.jfr\" localhost:8181/api/v1/recordings\n+    {\"name\":\"localhost_foo_20200903T202547Z.2.jfr\"}\n+    ```\n+\n+\n+* #### `RecordingUploadPostHandler`\n+\n+    ###### synopsis\n+    Uploads a recording that was saved to persistent storage to\n+    the Grafana datasource that Container JFR is configured with\n+    (determined by the environment variable `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `POST /api/v1/recordings/:recordingName/upload`\n+\n+    `recordingName` - The name of the saved recording to upload.\n+\n+    ###### response\n+    `200` - The body is the body of the response that Container JFR got\n+    after sending the upload request to the Grafana datasource server.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `501` - The Grafana datasource URL is malformed.\n+    The body is an error message.\n+\n+    `502` - Container JFR received an invalid response from the\n+    Grafana datasource server after sending the upload request.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST localhost:8181/api/v1/recordings/localhost_foo_20200911T144545Z.jfr/upload\n+    Uploaded: file-uploads/555f4dab-240b-486b-b336-2d0e5f43e7cd\n+    Loaded: file-uploads/555f4dab-240b-486b-b336-2d0e5f43e7cd\n+    ```\n+\n+\n+* #### `ReportGetHandler`\n+\n+    ###### synopsis\n+    Returns the report of a recording that was saved to persistent storage.\n+\n+    ###### request\n+    `GET /api/v1/reports/:recordingName`\n+\n+    `recordingName` - The name of the recording to get the report for.\n+\n+    ###### response\n+    `200` - The body is the requested report.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The report could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/reports/localhost_foo_20200911T144545Z.jfr --output report.html\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  116k  100  116k    0     0   134k      0 --:--:-- --:--:-- --:--:--  134k\n+    ```\n+\n+\n+* #### `TargetEventsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of event types that can be produced by a target JVM.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/events`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of event types,\n+    enclosed in square brackets.", "originalCommit": "1f502b29fd2b51fed1ab39d47b10c6a0027cf928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3NDI3OA==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r489774278", "bodyText": "This applies to all paths with :targetId and :recordingName - just to be safe, perhaps we should specify that these path components should be URI-encoded? Otherwise the resulting string-interpolated URL may be invalid or may be interpreted differently than the client intended.", "author": "andrewazores", "createdAt": "2020-09-16T21:49:48Z", "path": "HTTP_API.md", "diffHunk": "@@ -0,0 +1,952 @@\n+# HTTP API\n+\n+## V1 API\n+\n+### Quick Reference\n+\n+| What you want to do                                                       | Which handler you should use                                            |\n+| ------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n+| **Miscellaneous**                                                         |                                                                         |\n+| Get a URL you can use to access Container JFR's WebSocket command channel | [`ClientUrlGetHandler`](#ClientUrlGetHandler)                           |\n+| Scan for and get a list of target JVMs visible to Container JFR           | [`TargetsGetHandler`](#TargetsGetHandler)                               |\n+| Get a static asset from the web client                                    | [`StaticAssetsGetHandler`](#StaticAssetsGetHandler)                     |\n+| Send a `GET` request to a path not supported by this API                  | [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler)               |\n+| Test user authentication                                                  | [`AuthPostHandler`](#AuthPostHandler)                                   |\n+| Get the URL of Container JFR's Grafana dashboard                          | [`GrafanaDashboardUrlGetHandler`](#GrafanaDashboardUrlGetHandler)       |\n+| Get the URL of Container JFR's Grafana datasource                         | [`GrafanaDatasourceUrlGetHandler`](#GrafanaDatasourceUrlGetHandler)     |\n+| Check the status of Container JFR's Grafana datasource and dashboard      | [`HealthGetHandler`](#HealthGetHandler)                                 |\n+| **Events and event templates**                                            |                                                                         |\n+| Get a list of event types that can be produced by a target JVM            | [`TargetEventsGetHandler`](#TargetEventsGetHandler)                     |\n+| Get a list of event templates known to a target JVM                       | [`TargetTemplatesGetHandler`](#TargetTemplatesGetHandler)               |\n+| Download a template from a target JVM                                     | [`TargetTemplateGetHandler`](#TargetTemplateGetHandler)                 |\n+| Upload an event template to Container JFR                                 | [`TemplatesPostHandler`](#TemplatesPostHandler)                         |\n+| Delete an event template that was uploaded to Container JFR               | [`TemplateDeleteHandler`](#TemplateDeleteHandler)                       |\n+| **Recordings in target JVMs**                                             |                                                                         |\n+| Get a list of recordings in a target JVM                                  | [`TargetRecordingsGetHandler`](#TargetRecordingsGetHandler)             |\n+| Create a snapshot recording in a target JVM                               | [`TargetSnapshotPostHandler`](#TargetSnapshotPostHandler)               |\n+| Start a recording in a target JVM                                         | [`TargetRecordingsPostHandler`](#TargetRecordingsPostHandler)           |\n+| Stop a recording in a target JVM                                          | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Delete a recording in a target JVM                                        | [`TargetRecordingDeleteHandler`](#TargetRecordingDeleteHandler)         |\n+| Download a recording in a target JVM                                      | [`TargetRecordingGetHandler`](#TargetRecordingGetHandler)               |\n+| Download a report of a recording in a target JVM                          | [`TargetReportGetHandler`](#TargetReportGetHandler)                     |\n+| Save a recording in a target JVM to persistent storage                    | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Upload a recording from a target JVM to the Grafana datasource            | [`TargetRecordingUploadPostHandler`](#TargetRecordingUploadPostHandler) |\n+| **Recordings in persistent storage**                                      |                                                                         |\n+| Get a list of recordings in persistent storage                            | [`RecordingsGetHandler`](#RecordingsGetHandler)                         |\n+| Upload a recording to persistent storage                                  | [`RecordingsPostHandler`](#RecordingsPostHandler)                       |\n+| Delete a recording from persistent storage                                | [`RecordingDeleteHandler`](#RecordingDeleteHandler)                     |\n+| Download a recording in persistent storage                                | [`RecordingGetHandler`](#RecordingGetHandler)                           |\n+| Download a report of a recording in persistent storage                    | [`ReportGetHandler`](#ReportGetHandler)                                 |\n+| Upload a recording from persistent storage to the Grafana datasource      | [`RecordingUploadPostHandler`](#RecordingUploadPostHandler)             |\n+\n+\n+### Core\n+\n+* #### `AuthPostHandler`\n+\n+    ###### synopsis\n+    Attempts user authenticaiton;\n+    used as a simple way to check a user authentication header.\n+\n+    ###### request\n+    `POST /api/v1/auth`\n+\n+    The request should include an `Authorization` header to be checked.\n+\n+    ###### response\n+    `200` - No body. Getting this response means that the header is valid.\n+\n+    `401` - User authentication failed. The body is an error message.\n+    Getting this response means that the header is invalid.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST --header \"Authorization: Basic dXNlcjpwYXNzCg==\" localhost:8181/api/v1/auth\n+    ```\n+\n+\n+* #### `ClientUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns a URL that a client can connect to, to access Container JFR's\n+    WebSocket command channel (see [COMMANDS.md](COMMANDS.md)).\n+\n+    ###### request\n+    `GET /api/v1/clienturl`\n+\n+    ###### response\n+    `200` - The body is `{\"clientUrl\":\"$URL\"}`.\n+\n+    `500` - The URL could not be constructed due to an error with the socket\n+    or the host. Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/clienturl\n+    {\"clientUrl\":\"ws://0.0.0.0:8181/api/v1/command\"}\n+    ```\n+\n+\n+* #### `GrafanaDashboardUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana dashboard that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DASHBOARD_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_dashboard_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDashboardUrl\":\"$URL\"}`.\n+\n+    `500` - Container JFR is not configured with a Grafana dashboard.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_dashboard_url\n+    {\"grafanaDashboardUrl\":\"http://localhost:3000/d/CazTnbSMz/\"}\n+    ```\n+\n+\n+* #### `GrafanaDatasourceUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana datasource that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_datasource_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDatasourceUrl\":\"$URL\"}`\n+\n+    `500` - Container JFR is not configured with a Grafana datasource.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_datasource_url\n+    {\"grafanaDatasourceUrl\":\"http://localhost:8080\"}\n+    ```\n+\n+\n+* #### `HealthGetHandler`\n+\n+    ###### synopsis\n+    Returns whether or not the Grafana datasource and Grafana dashbaord\n+    that Container JFR is configured with are running properly.\n+\n+    ###### request\n+    `GET /health`\n+\n+    ###### response\n+    `200` - The body is\n+    `{\"datasourceAvailable\":$DATASOURCE_AVAILABLE,\"dashboardAvailable\":$DASHBOARD_AVAILABLE}`.\n+\n+    `$DATASOURCE_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana datasource and that datasource responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `$DASHBOARD_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana dashboard and that dashboard responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/health\n+    {\"dashboardAvailable\":false,\"datasourceAvailable\":false}\n+    ```\n+\n+\n+* #### `StaticAssetsGetHandler`\n+\n+    ###### synopsis\n+    Returns a static asset of the Container JFR web client.\n+\n+    ###### request\n+    `GET /*`\n+\n+    The path should be the directory path of the desired asset,\n+    assuming a root of\n+    `target/assets/app/resources/com/redhat/rhjmc/containerjfr/net/web/`.\n+\n+    ###### response\n+\n+    `200` - The body is the requested asset. Note that if the requested asset\n+    does not exist or the path is invalid, the request will not be handled here\n+    and instead  will be routed to\n+    [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler).\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/images/pfbg_992@2x.jpg --output pfbg_992@2x.jpg\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  574k  100  574k    0     0  43.1M      0 --:--:-- --:--:-- --:--:-- 43.1M\n+    ```\n+\n+\n+* #### `TargetsGetHandler`\n+\n+    ###### synopsis\n+    Scans for and returns discoverable target JVMs.\n+\n+    ###### request\n+    `GET /api/v1/targets`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of targets,\n+    enclosed in square brackets.\n+\n+    The format for a target is\n+    `{\"connectUrl\":\"$CONNECT_URL\",\"alias\":\"$ALIAS\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets\n+    [{\"connectUrl\":\"service:jmx:rmi:///jndi/rmi://container-jfr:9091/jmxrmi\",\"alias\":\"com.redhat.rhjmc.containerjfr.ContainerJfr\"}]\n+    ```\n+\n+\n+* #### `WebClientAssetsGetHandler`\n+\n+    ###### synopsis\n+    Handles all `GET` requests to paths not covered by another handler;\n+    returns a simple `index.html`.\n+\n+    ###### request\n+    `GET /*`\n+\n+    ###### response\n+    `200` - The body is the Container JFR web client's\n+    `index.html` HTML document.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/foo\n+    <!doctype html><html lang=\"en-US\"><head><meta charset=\"utf-8\"><title>ContainerJFR</title><meta id=\"appName\" name=\"application-name\" content=\"ContainerJFR\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><link rel=\"icon\" type=\"image/png\" href=\"https://www.patternfly.org/components/patternfly/dist/img/favicon.ico\"><base href=\"/\"><link href=\"app.css\" rel=\"stylesheet\"></head><body><noscript>Enabling JavaScript is required to run this app.</noscript><div id=\"root\"></div><script src=\"app.bundle.js\"></script></body></html>\n+    ```\n+\n+\n+### Flight Recorder\n+\n+* #### `RecordingDeleteHandler`\n+\n+    ###### synopsis\n+    Deletes a recording that was saved to persistent storage.\n+    This does not affect any recordings in any target JVM's JFR buffer.\n+\n+    ###### request\n+    `DELETE /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to delete.\n+\n+    ###### response\n+    `200` - No body.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be deleted.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X DELETE localhost:8181/api/v1/recordings/localhost_foo_20200910T213341Z.jfr\n+    ```\n+\n+\n+* #### `RecordingGetHandler`\n+\n+    ###### synopsis\n+    Returns a recording that was saved to persistent storage,\n+    as an octet stream.\n+\n+    ###### request\n+    `GET /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to get.\n+\n+    ###### response\n+    `200` - The body is an octet stream consisting of the requested recording.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be written to the response.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings/localhost_foo_20200910T214559Z.jfr --output foo.jfr\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  942k  100  942k    0     0  61.3M      0 --:--:-- --:--:-- --:--:-- 61.3M\n+    ```\n+\n+\n+* #### `RecordingsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of the recordings that are saved in persistent storage.\n+\n+    ###### request\n+    `GET /api/v1/recordings`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of recordings,\n+    enclosed in square brackets.\n+\n+    The format for a recording is\n+    `{\"downloadUrl\":\"$DOWNLOAD_URL\",\"name\":\"$NAME\",\"reportUrl\":\"$REPORT_URL\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `501` - The archive path where recordings are saved could not be accessed.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings\n+    [{\"downloadUrl\":\"http://192.168.0.109:8181/api/v1/recordings/localhost_foo_20200903T202547Z.jfr\",\"name\":\"localhost_foo_20200903T202547Z.jfr\",\"reportUrl\":\"http://192.168.0.109:8181/api/v1/reports/localhost_foo_20200903T202547Z.jfr\"}]\n+    ```\n+\n+\n+* #### `RecordingsPostHandler`\n+\n+    ###### synopsis\n+    Uploads a recording from the client to Container JFR's persistent storage.\n+\n+    ###### request\n+    `POST /api/v1/recordings`\n+\n+    The recording should be uploaded in a form with the name `recording`.\n+    The filename of the recording must follow the format that Container JFR\n+    uses for recordings it saves itself\n+    (with [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)).\n+\n+    ###### response\n+    `200` - The body is `{\"name\":\"$NAME\"}`, where `$NAME` is the name of the\n+    recording that is now saved in persistent storage.\n+    This name will be different from the uploaded recording's filename\n+    if another recording with the same name already existed.\n+\n+    `400` - The recording submission is invalid. The body is an error\n+    message.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `503` - `CONTAINER_JFR_ARCHIVE_PATH` is an invalid directory.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl --form \"recording=@localhost_foo_20200903T202547Z.jfr\" localhost:8181/api/v1/recordings\n+    {\"name\":\"localhost_foo_20200903T202547Z.2.jfr\"}\n+    ```\n+\n+\n+* #### `RecordingUploadPostHandler`\n+\n+    ###### synopsis\n+    Uploads a recording that was saved to persistent storage to\n+    the Grafana datasource that Container JFR is configured with\n+    (determined by the environment variable `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `POST /api/v1/recordings/:recordingName/upload`\n+\n+    `recordingName` - The name of the saved recording to upload.\n+\n+    ###### response\n+    `200` - The body is the body of the response that Container JFR got\n+    after sending the upload request to the Grafana datasource server.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `501` - The Grafana datasource URL is malformed.\n+    The body is an error message.\n+\n+    `502` - Container JFR received an invalid response from the\n+    Grafana datasource server after sending the upload request.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST localhost:8181/api/v1/recordings/localhost_foo_20200911T144545Z.jfr/upload\n+    Uploaded: file-uploads/555f4dab-240b-486b-b336-2d0e5f43e7cd\n+    Loaded: file-uploads/555f4dab-240b-486b-b336-2d0e5f43e7cd\n+    ```\n+\n+\n+* #### `ReportGetHandler`\n+\n+    ###### synopsis\n+    Returns the report of a recording that was saved to persistent storage.\n+\n+    ###### request\n+    `GET /api/v1/reports/:recordingName`\n+\n+    `recordingName` - The name of the recording to get the report for.\n+\n+    ###### response\n+    `200` - The body is the requested report.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The report could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/reports/localhost_foo_20200911T144545Z.jfr --output report.html\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  116k  100  116k    0     0   134k      0 --:--:-- --:--:-- --:--:--  134k\n+    ```\n+\n+\n+* #### `TargetEventsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of event types that can be produced by a target JVM.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/events`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of event types,\n+    enclosed in square brackets.\n+\n+    The format for an event type is\n+    `{\"name\":\"$NAME\",\"typeId\":\"$TYPE_ID\",\"description\":\"$DESCRIPTION\",\n+    \"category\":[$CATEGORIES],\"options\":{$OPTIONS}}`\n+\n+    So a list with no events looks like `[]`,\n+    a list with one event looks like `[{...}]`,\n+    and a list with two events looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets/localhost/events --output events\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100 47013  100 47013    0     0   866k      0 --:--:-- --:--:-- --:--:--  866k\n+    ```\n+\n+\n+* #### `TargetRecordingDeleteHandler`\n+\n+    ###### synopsis\n+    Deletes a recording from a target JVM, removing it from the target JVM\n+    and freeing the buffer memory used. The recording will be stopped if\n+    it is running at the time of deletion.\n+\n+    ###### request\n+    `DELETE /api/v1/targets/:targetId/recordings/:recordingName`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.", "originalCommit": "1f502b29fd2b51fed1ab39d47b10c6a0027cf928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0NzA5OA==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r491147098", "bodyText": "Could you explain a bit what URI-encoded means? I wasn't able to look that up.", "author": "vic-ma", "createdAt": "2020-09-18T19:23:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3NDI3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MjAzOQ==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r491152039", "bodyText": "https://www.w3schools.com/tags/ref_urlencode.ASP / https://en.wikipedia.org/wiki/Percent-encoding", "author": "andrewazores", "createdAt": "2020-09-18T19:34:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3NDI3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MjkxMw==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r491152913", "bodyText": "ie clients should not try to request ex. DELETE /api/v1/targets/service:jmx:rmi:///jndi/rmi://container-jfr:9091/jmxrmi/recordings/foo, but rather DELETE /api/v1/targets/service%3Ajmx%3Armi%3A%2F%2F%2Fjndi%2Frmi%3A%2F%2Fcontainer-jfr%3A9091%2Fjmxrmi%2Frecordings%2Ffoo/recordings/foo", "author": "andrewazores", "createdAt": "2020-09-18T19:36:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3NDI3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3NTIyNA==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r489775224", "bodyText": "Same re: JSON array", "author": "andrewazores", "createdAt": "2020-09-16T21:51:58Z", "path": "HTTP_API.md", "diffHunk": "@@ -0,0 +1,952 @@\n+# HTTP API\n+\n+## V1 API\n+\n+### Quick Reference\n+\n+| What you want to do                                                       | Which handler you should use                                            |\n+| ------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n+| **Miscellaneous**                                                         |                                                                         |\n+| Get a URL you can use to access Container JFR's WebSocket command channel | [`ClientUrlGetHandler`](#ClientUrlGetHandler)                           |\n+| Scan for and get a list of target JVMs visible to Container JFR           | [`TargetsGetHandler`](#TargetsGetHandler)                               |\n+| Get a static asset from the web client                                    | [`StaticAssetsGetHandler`](#StaticAssetsGetHandler)                     |\n+| Send a `GET` request to a path not supported by this API                  | [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler)               |\n+| Test user authentication                                                  | [`AuthPostHandler`](#AuthPostHandler)                                   |\n+| Get the URL of Container JFR's Grafana dashboard                          | [`GrafanaDashboardUrlGetHandler`](#GrafanaDashboardUrlGetHandler)       |\n+| Get the URL of Container JFR's Grafana datasource                         | [`GrafanaDatasourceUrlGetHandler`](#GrafanaDatasourceUrlGetHandler)     |\n+| Check the status of Container JFR's Grafana datasource and dashboard      | [`HealthGetHandler`](#HealthGetHandler)                                 |\n+| **Events and event templates**                                            |                                                                         |\n+| Get a list of event types that can be produced by a target JVM            | [`TargetEventsGetHandler`](#TargetEventsGetHandler)                     |\n+| Get a list of event templates known to a target JVM                       | [`TargetTemplatesGetHandler`](#TargetTemplatesGetHandler)               |\n+| Download a template from a target JVM                                     | [`TargetTemplateGetHandler`](#TargetTemplateGetHandler)                 |\n+| Upload an event template to Container JFR                                 | [`TemplatesPostHandler`](#TemplatesPostHandler)                         |\n+| Delete an event template that was uploaded to Container JFR               | [`TemplateDeleteHandler`](#TemplateDeleteHandler)                       |\n+| **Recordings in target JVMs**                                             |                                                                         |\n+| Get a list of recordings in a target JVM                                  | [`TargetRecordingsGetHandler`](#TargetRecordingsGetHandler)             |\n+| Create a snapshot recording in a target JVM                               | [`TargetSnapshotPostHandler`](#TargetSnapshotPostHandler)               |\n+| Start a recording in a target JVM                                         | [`TargetRecordingsPostHandler`](#TargetRecordingsPostHandler)           |\n+| Stop a recording in a target JVM                                          | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Delete a recording in a target JVM                                        | [`TargetRecordingDeleteHandler`](#TargetRecordingDeleteHandler)         |\n+| Download a recording in a target JVM                                      | [`TargetRecordingGetHandler`](#TargetRecordingGetHandler)               |\n+| Download a report of a recording in a target JVM                          | [`TargetReportGetHandler`](#TargetReportGetHandler)                     |\n+| Save a recording in a target JVM to persistent storage                    | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Upload a recording from a target JVM to the Grafana datasource            | [`TargetRecordingUploadPostHandler`](#TargetRecordingUploadPostHandler) |\n+| **Recordings in persistent storage**                                      |                                                                         |\n+| Get a list of recordings in persistent storage                            | [`RecordingsGetHandler`](#RecordingsGetHandler)                         |\n+| Upload a recording to persistent storage                                  | [`RecordingsPostHandler`](#RecordingsPostHandler)                       |\n+| Delete a recording from persistent storage                                | [`RecordingDeleteHandler`](#RecordingDeleteHandler)                     |\n+| Download a recording in persistent storage                                | [`RecordingGetHandler`](#RecordingGetHandler)                           |\n+| Download a report of a recording in persistent storage                    | [`ReportGetHandler`](#ReportGetHandler)                                 |\n+| Upload a recording from persistent storage to the Grafana datasource      | [`RecordingUploadPostHandler`](#RecordingUploadPostHandler)             |\n+\n+\n+### Core\n+\n+* #### `AuthPostHandler`\n+\n+    ###### synopsis\n+    Attempts user authenticaiton;\n+    used as a simple way to check a user authentication header.\n+\n+    ###### request\n+    `POST /api/v1/auth`\n+\n+    The request should include an `Authorization` header to be checked.\n+\n+    ###### response\n+    `200` - No body. Getting this response means that the header is valid.\n+\n+    `401` - User authentication failed. The body is an error message.\n+    Getting this response means that the header is invalid.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST --header \"Authorization: Basic dXNlcjpwYXNzCg==\" localhost:8181/api/v1/auth\n+    ```\n+\n+\n+* #### `ClientUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns a URL that a client can connect to, to access Container JFR's\n+    WebSocket command channel (see [COMMANDS.md](COMMANDS.md)).\n+\n+    ###### request\n+    `GET /api/v1/clienturl`\n+\n+    ###### response\n+    `200` - The body is `{\"clientUrl\":\"$URL\"}`.\n+\n+    `500` - The URL could not be constructed due to an error with the socket\n+    or the host. Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/clienturl\n+    {\"clientUrl\":\"ws://0.0.0.0:8181/api/v1/command\"}\n+    ```\n+\n+\n+* #### `GrafanaDashboardUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana dashboard that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DASHBOARD_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_dashboard_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDashboardUrl\":\"$URL\"}`.\n+\n+    `500` - Container JFR is not configured with a Grafana dashboard.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_dashboard_url\n+    {\"grafanaDashboardUrl\":\"http://localhost:3000/d/CazTnbSMz/\"}\n+    ```\n+\n+\n+* #### `GrafanaDatasourceUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana datasource that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_datasource_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDatasourceUrl\":\"$URL\"}`\n+\n+    `500` - Container JFR is not configured with a Grafana datasource.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_datasource_url\n+    {\"grafanaDatasourceUrl\":\"http://localhost:8080\"}\n+    ```\n+\n+\n+* #### `HealthGetHandler`\n+\n+    ###### synopsis\n+    Returns whether or not the Grafana datasource and Grafana dashbaord\n+    that Container JFR is configured with are running properly.\n+\n+    ###### request\n+    `GET /health`\n+\n+    ###### response\n+    `200` - The body is\n+    `{\"datasourceAvailable\":$DATASOURCE_AVAILABLE,\"dashboardAvailable\":$DASHBOARD_AVAILABLE}`.\n+\n+    `$DATASOURCE_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana datasource and that datasource responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `$DASHBOARD_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana dashboard and that dashboard responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/health\n+    {\"dashboardAvailable\":false,\"datasourceAvailable\":false}\n+    ```\n+\n+\n+* #### `StaticAssetsGetHandler`\n+\n+    ###### synopsis\n+    Returns a static asset of the Container JFR web client.\n+\n+    ###### request\n+    `GET /*`\n+\n+    The path should be the directory path of the desired asset,\n+    assuming a root of\n+    `target/assets/app/resources/com/redhat/rhjmc/containerjfr/net/web/`.\n+\n+    ###### response\n+\n+    `200` - The body is the requested asset. Note that if the requested asset\n+    does not exist or the path is invalid, the request will not be handled here\n+    and instead  will be routed to\n+    [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler).\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/images/pfbg_992@2x.jpg --output pfbg_992@2x.jpg\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  574k  100  574k    0     0  43.1M      0 --:--:-- --:--:-- --:--:-- 43.1M\n+    ```\n+\n+\n+* #### `TargetsGetHandler`\n+\n+    ###### synopsis\n+    Scans for and returns discoverable target JVMs.\n+\n+    ###### request\n+    `GET /api/v1/targets`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of targets,\n+    enclosed in square brackets.\n+\n+    The format for a target is\n+    `{\"connectUrl\":\"$CONNECT_URL\",\"alias\":\"$ALIAS\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets\n+    [{\"connectUrl\":\"service:jmx:rmi:///jndi/rmi://container-jfr:9091/jmxrmi\",\"alias\":\"com.redhat.rhjmc.containerjfr.ContainerJfr\"}]\n+    ```\n+\n+\n+* #### `WebClientAssetsGetHandler`\n+\n+    ###### synopsis\n+    Handles all `GET` requests to paths not covered by another handler;\n+    returns a simple `index.html`.\n+\n+    ###### request\n+    `GET /*`\n+\n+    ###### response\n+    `200` - The body is the Container JFR web client's\n+    `index.html` HTML document.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/foo\n+    <!doctype html><html lang=\"en-US\"><head><meta charset=\"utf-8\"><title>ContainerJFR</title><meta id=\"appName\" name=\"application-name\" content=\"ContainerJFR\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><link rel=\"icon\" type=\"image/png\" href=\"https://www.patternfly.org/components/patternfly/dist/img/favicon.ico\"><base href=\"/\"><link href=\"app.css\" rel=\"stylesheet\"></head><body><noscript>Enabling JavaScript is required to run this app.</noscript><div id=\"root\"></div><script src=\"app.bundle.js\"></script></body></html>\n+    ```\n+\n+\n+### Flight Recorder\n+\n+* #### `RecordingDeleteHandler`\n+\n+    ###### synopsis\n+    Deletes a recording that was saved to persistent storage.\n+    This does not affect any recordings in any target JVM's JFR buffer.\n+\n+    ###### request\n+    `DELETE /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to delete.\n+\n+    ###### response\n+    `200` - No body.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be deleted.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X DELETE localhost:8181/api/v1/recordings/localhost_foo_20200910T213341Z.jfr\n+    ```\n+\n+\n+* #### `RecordingGetHandler`\n+\n+    ###### synopsis\n+    Returns a recording that was saved to persistent storage,\n+    as an octet stream.\n+\n+    ###### request\n+    `GET /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to get.\n+\n+    ###### response\n+    `200` - The body is an octet stream consisting of the requested recording.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be written to the response.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings/localhost_foo_20200910T214559Z.jfr --output foo.jfr\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  942k  100  942k    0     0  61.3M      0 --:--:-- --:--:-- --:--:-- 61.3M\n+    ```\n+\n+\n+* #### `RecordingsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of the recordings that are saved in persistent storage.\n+\n+    ###### request\n+    `GET /api/v1/recordings`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of recordings,\n+    enclosed in square brackets.\n+\n+    The format for a recording is\n+    `{\"downloadUrl\":\"$DOWNLOAD_URL\",\"name\":\"$NAME\",\"reportUrl\":\"$REPORT_URL\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `501` - The archive path where recordings are saved could not be accessed.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings\n+    [{\"downloadUrl\":\"http://192.168.0.109:8181/api/v1/recordings/localhost_foo_20200903T202547Z.jfr\",\"name\":\"localhost_foo_20200903T202547Z.jfr\",\"reportUrl\":\"http://192.168.0.109:8181/api/v1/reports/localhost_foo_20200903T202547Z.jfr\"}]\n+    ```\n+\n+\n+* #### `RecordingsPostHandler`\n+\n+    ###### synopsis\n+    Uploads a recording from the client to Container JFR's persistent storage.\n+\n+    ###### request\n+    `POST /api/v1/recordings`\n+\n+    The recording should be uploaded in a form with the name `recording`.\n+    The filename of the recording must follow the format that Container JFR\n+    uses for recordings it saves itself\n+    (with [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)).\n+\n+    ###### response\n+    `200` - The body is `{\"name\":\"$NAME\"}`, where `$NAME` is the name of the\n+    recording that is now saved in persistent storage.\n+    This name will be different from the uploaded recording's filename\n+    if another recording with the same name already existed.\n+\n+    `400` - The recording submission is invalid. The body is an error\n+    message.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `503` - `CONTAINER_JFR_ARCHIVE_PATH` is an invalid directory.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl --form \"recording=@localhost_foo_20200903T202547Z.jfr\" localhost:8181/api/v1/recordings\n+    {\"name\":\"localhost_foo_20200903T202547Z.2.jfr\"}\n+    ```\n+\n+\n+* #### `RecordingUploadPostHandler`\n+\n+    ###### synopsis\n+    Uploads a recording that was saved to persistent storage to\n+    the Grafana datasource that Container JFR is configured with\n+    (determined by the environment variable `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `POST /api/v1/recordings/:recordingName/upload`\n+\n+    `recordingName` - The name of the saved recording to upload.\n+\n+    ###### response\n+    `200` - The body is the body of the response that Container JFR got\n+    after sending the upload request to the Grafana datasource server.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `501` - The Grafana datasource URL is malformed.\n+    The body is an error message.\n+\n+    `502` - Container JFR received an invalid response from the\n+    Grafana datasource server after sending the upload request.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST localhost:8181/api/v1/recordings/localhost_foo_20200911T144545Z.jfr/upload\n+    Uploaded: file-uploads/555f4dab-240b-486b-b336-2d0e5f43e7cd\n+    Loaded: file-uploads/555f4dab-240b-486b-b336-2d0e5f43e7cd\n+    ```\n+\n+\n+* #### `ReportGetHandler`\n+\n+    ###### synopsis\n+    Returns the report of a recording that was saved to persistent storage.\n+\n+    ###### request\n+    `GET /api/v1/reports/:recordingName`\n+\n+    `recordingName` - The name of the recording to get the report for.\n+\n+    ###### response\n+    `200` - The body is the requested report.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The report could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/reports/localhost_foo_20200911T144545Z.jfr --output report.html\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  116k  100  116k    0     0   134k      0 --:--:-- --:--:-- --:--:--  134k\n+    ```\n+\n+\n+* #### `TargetEventsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of event types that can be produced by a target JVM.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/events`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of event types,\n+    enclosed in square brackets.\n+\n+    The format for an event type is\n+    `{\"name\":\"$NAME\",\"typeId\":\"$TYPE_ID\",\"description\":\"$DESCRIPTION\",\n+    \"category\":[$CATEGORIES],\"options\":{$OPTIONS}}`\n+\n+    So a list with no events looks like `[]`,\n+    a list with one event looks like `[{...}]`,\n+    and a list with two events looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets/localhost/events --output events\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100 47013  100 47013    0     0   866k      0 --:--:-- --:--:-- --:--:--  866k\n+    ```\n+\n+\n+* #### `TargetRecordingDeleteHandler`\n+\n+    ###### synopsis\n+    Deletes a recording from a target JVM, removing it from the target JVM\n+    and freeing the buffer memory used. The recording will be stopped if\n+    it is running at the time of deletion.\n+\n+    ###### request\n+    `DELETE /api/v1/targets/:targetId/recordings/:recordingName`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to delete.\n+\n+    ###### response\n+    `200` - No body.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target or the recording could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X DELETE localhost:8181/api/v1/targets/localhost/recordings/foo\n+    ```\n+\n+\n+* #### `TargetRecordingGetHandler`\n+\n+    ###### synopsis\n+    Returns a recording of a target JVM, as an octet stream.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/recordings/:recordingName`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to get.\n+\n+    ###### response\n+    `200` - The body is an octet stream consisting of the requested recording.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target or the recording could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be written to the\n+    response. Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets/localhost/recordings/foo --output foo.jfr\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  530k    0  530k    0     0  9303k      0 --:--:-- --:--:-- --:--:-- 9303k\n+    ```\n+\n+* #### `TargetRecordingPatchHandler`\n+\n+    ###### synopsis\n+    **STOP**\n+\n+    Stops a recording in a target JVM.\n+\n+    **SAVE**\n+\n+    Saves a recording in a target JVM to persistent storage.\n+    The default directory used is `/flghtrecordings`, but the environment\n+    variable `CONTAINER_JFR_ARCHIVE_PATH` can be used to specify a different\n+    path.\n+\n+    ###### request\n+    `PATCH /api/v1/targets/:targetId/recordings/:recordingName`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to patch.\n+\n+    The body must be either `STOP`, to stop the recording,\n+    or `SAVE`, to save the recording (case insensitive).\n+\n+    ###### response\n+    **General**\n+\n+    `400` - The operation is unsupported. The body is an error message.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target or the recording could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    **STOP**\n+\n+    `200` - No body.\n+\n+    `500` - The recording could not be stopped. The body is an error message.\n+\n+    **SAVE**\n+\n+    `200` - The body is the name of the recording that was saved.\n+    Note that this name will be different from the recording's original name,\n+    to add metadata.\n+\n+    ###### example\n+    ```\n+    $ curl -X PATCH --data \"STOP\" localhost:8181/api/v1/targets/localhost/recordings/foo\n+\n+    $ curl -X PATCH --data \"SAVE\" http://localhost:8181/api/v1/targets/localhost/recordings/foo\n+    localhost_foo_20200911T155146Z.jfr\n+    ```\n+\n+\n+* #### `TargetRecordingsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of all the recordings in a target JVM.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/recordings`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of recordings,\n+    enclosed in square brackets.", "originalCommit": "1f502b29fd2b51fed1ab39d47b10c6a0027cf928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3NTY1MQ==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r489775651", "bodyText": "I think this should include all of the attributes of a recording, so including state, startTime, duration, etc., no?", "author": "andrewazores", "createdAt": "2020-09-16T21:53:00Z", "path": "HTTP_API.md", "diffHunk": "@@ -0,0 +1,952 @@\n+# HTTP API\n+\n+## V1 API\n+\n+### Quick Reference\n+\n+| What you want to do                                                       | Which handler you should use                                            |\n+| ------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n+| **Miscellaneous**                                                         |                                                                         |\n+| Get a URL you can use to access Container JFR's WebSocket command channel | [`ClientUrlGetHandler`](#ClientUrlGetHandler)                           |\n+| Scan for and get a list of target JVMs visible to Container JFR           | [`TargetsGetHandler`](#TargetsGetHandler)                               |\n+| Get a static asset from the web client                                    | [`StaticAssetsGetHandler`](#StaticAssetsGetHandler)                     |\n+| Send a `GET` request to a path not supported by this API                  | [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler)               |\n+| Test user authentication                                                  | [`AuthPostHandler`](#AuthPostHandler)                                   |\n+| Get the URL of Container JFR's Grafana dashboard                          | [`GrafanaDashboardUrlGetHandler`](#GrafanaDashboardUrlGetHandler)       |\n+| Get the URL of Container JFR's Grafana datasource                         | [`GrafanaDatasourceUrlGetHandler`](#GrafanaDatasourceUrlGetHandler)     |\n+| Check the status of Container JFR's Grafana datasource and dashboard      | [`HealthGetHandler`](#HealthGetHandler)                                 |\n+| **Events and event templates**                                            |                                                                         |\n+| Get a list of event types that can be produced by a target JVM            | [`TargetEventsGetHandler`](#TargetEventsGetHandler)                     |\n+| Get a list of event templates known to a target JVM                       | [`TargetTemplatesGetHandler`](#TargetTemplatesGetHandler)               |\n+| Download a template from a target JVM                                     | [`TargetTemplateGetHandler`](#TargetTemplateGetHandler)                 |\n+| Upload an event template to Container JFR                                 | [`TemplatesPostHandler`](#TemplatesPostHandler)                         |\n+| Delete an event template that was uploaded to Container JFR               | [`TemplateDeleteHandler`](#TemplateDeleteHandler)                       |\n+| **Recordings in target JVMs**                                             |                                                                         |\n+| Get a list of recordings in a target JVM                                  | [`TargetRecordingsGetHandler`](#TargetRecordingsGetHandler)             |\n+| Create a snapshot recording in a target JVM                               | [`TargetSnapshotPostHandler`](#TargetSnapshotPostHandler)               |\n+| Start a recording in a target JVM                                         | [`TargetRecordingsPostHandler`](#TargetRecordingsPostHandler)           |\n+| Stop a recording in a target JVM                                          | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Delete a recording in a target JVM                                        | [`TargetRecordingDeleteHandler`](#TargetRecordingDeleteHandler)         |\n+| Download a recording in a target JVM                                      | [`TargetRecordingGetHandler`](#TargetRecordingGetHandler)               |\n+| Download a report of a recording in a target JVM                          | [`TargetReportGetHandler`](#TargetReportGetHandler)                     |\n+| Save a recording in a target JVM to persistent storage                    | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Upload a recording from a target JVM to the Grafana datasource            | [`TargetRecordingUploadPostHandler`](#TargetRecordingUploadPostHandler) |\n+| **Recordings in persistent storage**                                      |                                                                         |\n+| Get a list of recordings in persistent storage                            | [`RecordingsGetHandler`](#RecordingsGetHandler)                         |\n+| Upload a recording to persistent storage                                  | [`RecordingsPostHandler`](#RecordingsPostHandler)                       |\n+| Delete a recording from persistent storage                                | [`RecordingDeleteHandler`](#RecordingDeleteHandler)                     |\n+| Download a recording in persistent storage                                | [`RecordingGetHandler`](#RecordingGetHandler)                           |\n+| Download a report of a recording in persistent storage                    | [`ReportGetHandler`](#ReportGetHandler)                                 |\n+| Upload a recording from persistent storage to the Grafana datasource      | [`RecordingUploadPostHandler`](#RecordingUploadPostHandler)             |\n+\n+\n+### Core\n+\n+* #### `AuthPostHandler`\n+\n+    ###### synopsis\n+    Attempts user authenticaiton;\n+    used as a simple way to check a user authentication header.\n+\n+    ###### request\n+    `POST /api/v1/auth`\n+\n+    The request should include an `Authorization` header to be checked.\n+\n+    ###### response\n+    `200` - No body. Getting this response means that the header is valid.\n+\n+    `401` - User authentication failed. The body is an error message.\n+    Getting this response means that the header is invalid.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST --header \"Authorization: Basic dXNlcjpwYXNzCg==\" localhost:8181/api/v1/auth\n+    ```\n+\n+\n+* #### `ClientUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns a URL that a client can connect to, to access Container JFR's\n+    WebSocket command channel (see [COMMANDS.md](COMMANDS.md)).\n+\n+    ###### request\n+    `GET /api/v1/clienturl`\n+\n+    ###### response\n+    `200` - The body is `{\"clientUrl\":\"$URL\"}`.\n+\n+    `500` - The URL could not be constructed due to an error with the socket\n+    or the host. Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/clienturl\n+    {\"clientUrl\":\"ws://0.0.0.0:8181/api/v1/command\"}\n+    ```\n+\n+\n+* #### `GrafanaDashboardUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana dashboard that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DASHBOARD_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_dashboard_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDashboardUrl\":\"$URL\"}`.\n+\n+    `500` - Container JFR is not configured with a Grafana dashboard.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_dashboard_url\n+    {\"grafanaDashboardUrl\":\"http://localhost:3000/d/CazTnbSMz/\"}\n+    ```\n+\n+\n+* #### `GrafanaDatasourceUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana datasource that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_datasource_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDatasourceUrl\":\"$URL\"}`\n+\n+    `500` - Container JFR is not configured with a Grafana datasource.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_datasource_url\n+    {\"grafanaDatasourceUrl\":\"http://localhost:8080\"}\n+    ```\n+\n+\n+* #### `HealthGetHandler`\n+\n+    ###### synopsis\n+    Returns whether or not the Grafana datasource and Grafana dashbaord\n+    that Container JFR is configured with are running properly.\n+\n+    ###### request\n+    `GET /health`\n+\n+    ###### response\n+    `200` - The body is\n+    `{\"datasourceAvailable\":$DATASOURCE_AVAILABLE,\"dashboardAvailable\":$DASHBOARD_AVAILABLE}`.\n+\n+    `$DATASOURCE_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana datasource and that datasource responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `$DASHBOARD_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana dashboard and that dashboard responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/health\n+    {\"dashboardAvailable\":false,\"datasourceAvailable\":false}\n+    ```\n+\n+\n+* #### `StaticAssetsGetHandler`\n+\n+    ###### synopsis\n+    Returns a static asset of the Container JFR web client.\n+\n+    ###### request\n+    `GET /*`\n+\n+    The path should be the directory path of the desired asset,\n+    assuming a root of\n+    `target/assets/app/resources/com/redhat/rhjmc/containerjfr/net/web/`.\n+\n+    ###### response\n+\n+    `200` - The body is the requested asset. Note that if the requested asset\n+    does not exist or the path is invalid, the request will not be handled here\n+    and instead  will be routed to\n+    [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler).\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/images/pfbg_992@2x.jpg --output pfbg_992@2x.jpg\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  574k  100  574k    0     0  43.1M      0 --:--:-- --:--:-- --:--:-- 43.1M\n+    ```\n+\n+\n+* #### `TargetsGetHandler`\n+\n+    ###### synopsis\n+    Scans for and returns discoverable target JVMs.\n+\n+    ###### request\n+    `GET /api/v1/targets`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of targets,\n+    enclosed in square brackets.\n+\n+    The format for a target is\n+    `{\"connectUrl\":\"$CONNECT_URL\",\"alias\":\"$ALIAS\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets\n+    [{\"connectUrl\":\"service:jmx:rmi:///jndi/rmi://container-jfr:9091/jmxrmi\",\"alias\":\"com.redhat.rhjmc.containerjfr.ContainerJfr\"}]\n+    ```\n+\n+\n+* #### `WebClientAssetsGetHandler`\n+\n+    ###### synopsis\n+    Handles all `GET` requests to paths not covered by another handler;\n+    returns a simple `index.html`.\n+\n+    ###### request\n+    `GET /*`\n+\n+    ###### response\n+    `200` - The body is the Container JFR web client's\n+    `index.html` HTML document.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/foo\n+    <!doctype html><html lang=\"en-US\"><head><meta charset=\"utf-8\"><title>ContainerJFR</title><meta id=\"appName\" name=\"application-name\" content=\"ContainerJFR\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><link rel=\"icon\" type=\"image/png\" href=\"https://www.patternfly.org/components/patternfly/dist/img/favicon.ico\"><base href=\"/\"><link href=\"app.css\" rel=\"stylesheet\"></head><body><noscript>Enabling JavaScript is required to run this app.</noscript><div id=\"root\"></div><script src=\"app.bundle.js\"></script></body></html>\n+    ```\n+\n+\n+### Flight Recorder\n+\n+* #### `RecordingDeleteHandler`\n+\n+    ###### synopsis\n+    Deletes a recording that was saved to persistent storage.\n+    This does not affect any recordings in any target JVM's JFR buffer.\n+\n+    ###### request\n+    `DELETE /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to delete.\n+\n+    ###### response\n+    `200` - No body.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be deleted.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X DELETE localhost:8181/api/v1/recordings/localhost_foo_20200910T213341Z.jfr\n+    ```\n+\n+\n+* #### `RecordingGetHandler`\n+\n+    ###### synopsis\n+    Returns a recording that was saved to persistent storage,\n+    as an octet stream.\n+\n+    ###### request\n+    `GET /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to get.\n+\n+    ###### response\n+    `200` - The body is an octet stream consisting of the requested recording.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be written to the response.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings/localhost_foo_20200910T214559Z.jfr --output foo.jfr\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  942k  100  942k    0     0  61.3M      0 --:--:-- --:--:-- --:--:-- 61.3M\n+    ```\n+\n+\n+* #### `RecordingsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of the recordings that are saved in persistent storage.\n+\n+    ###### request\n+    `GET /api/v1/recordings`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of recordings,\n+    enclosed in square brackets.\n+\n+    The format for a recording is\n+    `{\"downloadUrl\":\"$DOWNLOAD_URL\",\"name\":\"$NAME\",\"reportUrl\":\"$REPORT_URL\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `501` - The archive path where recordings are saved could not be accessed.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings\n+    [{\"downloadUrl\":\"http://192.168.0.109:8181/api/v1/recordings/localhost_foo_20200903T202547Z.jfr\",\"name\":\"localhost_foo_20200903T202547Z.jfr\",\"reportUrl\":\"http://192.168.0.109:8181/api/v1/reports/localhost_foo_20200903T202547Z.jfr\"}]\n+    ```\n+\n+\n+* #### `RecordingsPostHandler`\n+\n+    ###### synopsis\n+    Uploads a recording from the client to Container JFR's persistent storage.\n+\n+    ###### request\n+    `POST /api/v1/recordings`\n+\n+    The recording should be uploaded in a form with the name `recording`.\n+    The filename of the recording must follow the format that Container JFR\n+    uses for recordings it saves itself\n+    (with [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)).\n+\n+    ###### response\n+    `200` - The body is `{\"name\":\"$NAME\"}`, where `$NAME` is the name of the\n+    recording that is now saved in persistent storage.\n+    This name will be different from the uploaded recording's filename\n+    if another recording with the same name already existed.\n+\n+    `400` - The recording submission is invalid. The body is an error\n+    message.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `503` - `CONTAINER_JFR_ARCHIVE_PATH` is an invalid directory.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl --form \"recording=@localhost_foo_20200903T202547Z.jfr\" localhost:8181/api/v1/recordings\n+    {\"name\":\"localhost_foo_20200903T202547Z.2.jfr\"}\n+    ```\n+\n+\n+* #### `RecordingUploadPostHandler`\n+\n+    ###### synopsis\n+    Uploads a recording that was saved to persistent storage to\n+    the Grafana datasource that Container JFR is configured with\n+    (determined by the environment variable `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `POST /api/v1/recordings/:recordingName/upload`\n+\n+    `recordingName` - The name of the saved recording to upload.\n+\n+    ###### response\n+    `200` - The body is the body of the response that Container JFR got\n+    after sending the upload request to the Grafana datasource server.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `501` - The Grafana datasource URL is malformed.\n+    The body is an error message.\n+\n+    `502` - Container JFR received an invalid response from the\n+    Grafana datasource server after sending the upload request.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST localhost:8181/api/v1/recordings/localhost_foo_20200911T144545Z.jfr/upload\n+    Uploaded: file-uploads/555f4dab-240b-486b-b336-2d0e5f43e7cd\n+    Loaded: file-uploads/555f4dab-240b-486b-b336-2d0e5f43e7cd\n+    ```\n+\n+\n+* #### `ReportGetHandler`\n+\n+    ###### synopsis\n+    Returns the report of a recording that was saved to persistent storage.\n+\n+    ###### request\n+    `GET /api/v1/reports/:recordingName`\n+\n+    `recordingName` - The name of the recording to get the report for.\n+\n+    ###### response\n+    `200` - The body is the requested report.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The report could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/reports/localhost_foo_20200911T144545Z.jfr --output report.html\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  116k  100  116k    0     0   134k      0 --:--:-- --:--:-- --:--:--  134k\n+    ```\n+\n+\n+* #### `TargetEventsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of event types that can be produced by a target JVM.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/events`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of event types,\n+    enclosed in square brackets.\n+\n+    The format for an event type is\n+    `{\"name\":\"$NAME\",\"typeId\":\"$TYPE_ID\",\"description\":\"$DESCRIPTION\",\n+    \"category\":[$CATEGORIES],\"options\":{$OPTIONS}}`\n+\n+    So a list with no events looks like `[]`,\n+    a list with one event looks like `[{...}]`,\n+    and a list with two events looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets/localhost/events --output events\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100 47013  100 47013    0     0   866k      0 --:--:-- --:--:-- --:--:--  866k\n+    ```\n+\n+\n+* #### `TargetRecordingDeleteHandler`\n+\n+    ###### synopsis\n+    Deletes a recording from a target JVM, removing it from the target JVM\n+    and freeing the buffer memory used. The recording will be stopped if\n+    it is running at the time of deletion.\n+\n+    ###### request\n+    `DELETE /api/v1/targets/:targetId/recordings/:recordingName`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to delete.\n+\n+    ###### response\n+    `200` - No body.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target or the recording could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X DELETE localhost:8181/api/v1/targets/localhost/recordings/foo\n+    ```\n+\n+\n+* #### `TargetRecordingGetHandler`\n+\n+    ###### synopsis\n+    Returns a recording of a target JVM, as an octet stream.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/recordings/:recordingName`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to get.\n+\n+    ###### response\n+    `200` - The body is an octet stream consisting of the requested recording.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target or the recording could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be written to the\n+    response. Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets/localhost/recordings/foo --output foo.jfr\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  530k    0  530k    0     0  9303k      0 --:--:-- --:--:-- --:--:-- 9303k\n+    ```\n+\n+* #### `TargetRecordingPatchHandler`\n+\n+    ###### synopsis\n+    **STOP**\n+\n+    Stops a recording in a target JVM.\n+\n+    **SAVE**\n+\n+    Saves a recording in a target JVM to persistent storage.\n+    The default directory used is `/flghtrecordings`, but the environment\n+    variable `CONTAINER_JFR_ARCHIVE_PATH` can be used to specify a different\n+    path.\n+\n+    ###### request\n+    `PATCH /api/v1/targets/:targetId/recordings/:recordingName`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to patch.\n+\n+    The body must be either `STOP`, to stop the recording,\n+    or `SAVE`, to save the recording (case insensitive).\n+\n+    ###### response\n+    **General**\n+\n+    `400` - The operation is unsupported. The body is an error message.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target or the recording could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    **STOP**\n+\n+    `200` - No body.\n+\n+    `500` - The recording could not be stopped. The body is an error message.\n+\n+    **SAVE**\n+\n+    `200` - The body is the name of the recording that was saved.\n+    Note that this name will be different from the recording's original name,\n+    to add metadata.\n+\n+    ###### example\n+    ```\n+    $ curl -X PATCH --data \"STOP\" localhost:8181/api/v1/targets/localhost/recordings/foo\n+\n+    $ curl -X PATCH --data \"SAVE\" http://localhost:8181/api/v1/targets/localhost/recordings/foo\n+    localhost_foo_20200911T155146Z.jfr\n+    ```\n+\n+\n+* #### `TargetRecordingsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of all the recordings in a target JVM.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/recordings`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of recordings,\n+    enclosed in square brackets.\n+\n+    The format for a recording is\n+    `{\"downloadUrl\":\"$DOWNLOAD_URL\",\"name\":\"$NAME\",\"reportUrl\":\"$REPORT_URL\"}`.", "originalCommit": "1f502b29fd2b51fed1ab39d47b10c6a0027cf928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0NzEwOQ==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r491147109", "bodyText": "Yeah I think I just copied it from the non-targeted version not realizing it's different.", "author": "vic-ma", "createdAt": "2020-09-18T19:23:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3NTY1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3NzU4Mg==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r489777582", "bodyText": "I think the shell prompt stuff here [vma@victor-work ~] should be removed for consistency with the rest of the document", "author": "andrewazores", "createdAt": "2020-09-16T21:57:31Z", "path": "HTTP_API.md", "diffHunk": "@@ -0,0 +1,952 @@\n+# HTTP API\n+\n+## V1 API\n+\n+### Quick Reference\n+\n+| What you want to do                                                       | Which handler you should use                                            |\n+| ------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n+| **Miscellaneous**                                                         |                                                                         |\n+| Get a URL you can use to access Container JFR's WebSocket command channel | [`ClientUrlGetHandler`](#ClientUrlGetHandler)                           |\n+| Scan for and get a list of target JVMs visible to Container JFR           | [`TargetsGetHandler`](#TargetsGetHandler)                               |\n+| Get a static asset from the web client                                    | [`StaticAssetsGetHandler`](#StaticAssetsGetHandler)                     |\n+| Send a `GET` request to a path not supported by this API                  | [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler)               |\n+| Test user authentication                                                  | [`AuthPostHandler`](#AuthPostHandler)                                   |\n+| Get the URL of Container JFR's Grafana dashboard                          | [`GrafanaDashboardUrlGetHandler`](#GrafanaDashboardUrlGetHandler)       |\n+| Get the URL of Container JFR's Grafana datasource                         | [`GrafanaDatasourceUrlGetHandler`](#GrafanaDatasourceUrlGetHandler)     |\n+| Check the status of Container JFR's Grafana datasource and dashboard      | [`HealthGetHandler`](#HealthGetHandler)                                 |\n+| **Events and event templates**                                            |                                                                         |\n+| Get a list of event types that can be produced by a target JVM            | [`TargetEventsGetHandler`](#TargetEventsGetHandler)                     |\n+| Get a list of event templates known to a target JVM                       | [`TargetTemplatesGetHandler`](#TargetTemplatesGetHandler)               |\n+| Download a template from a target JVM                                     | [`TargetTemplateGetHandler`](#TargetTemplateGetHandler)                 |\n+| Upload an event template to Container JFR                                 | [`TemplatesPostHandler`](#TemplatesPostHandler)                         |\n+| Delete an event template that was uploaded to Container JFR               | [`TemplateDeleteHandler`](#TemplateDeleteHandler)                       |\n+| **Recordings in target JVMs**                                             |                                                                         |\n+| Get a list of recordings in a target JVM                                  | [`TargetRecordingsGetHandler`](#TargetRecordingsGetHandler)             |\n+| Create a snapshot recording in a target JVM                               | [`TargetSnapshotPostHandler`](#TargetSnapshotPostHandler)               |\n+| Start a recording in a target JVM                                         | [`TargetRecordingsPostHandler`](#TargetRecordingsPostHandler)           |\n+| Stop a recording in a target JVM                                          | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Delete a recording in a target JVM                                        | [`TargetRecordingDeleteHandler`](#TargetRecordingDeleteHandler)         |\n+| Download a recording in a target JVM                                      | [`TargetRecordingGetHandler`](#TargetRecordingGetHandler)               |\n+| Download a report of a recording in a target JVM                          | [`TargetReportGetHandler`](#TargetReportGetHandler)                     |\n+| Save a recording in a target JVM to persistent storage                    | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Upload a recording from a target JVM to the Grafana datasource            | [`TargetRecordingUploadPostHandler`](#TargetRecordingUploadPostHandler) |\n+| **Recordings in persistent storage**                                      |                                                                         |\n+| Get a list of recordings in persistent storage                            | [`RecordingsGetHandler`](#RecordingsGetHandler)                         |\n+| Upload a recording to persistent storage                                  | [`RecordingsPostHandler`](#RecordingsPostHandler)                       |\n+| Delete a recording from persistent storage                                | [`RecordingDeleteHandler`](#RecordingDeleteHandler)                     |\n+| Download a recording in persistent storage                                | [`RecordingGetHandler`](#RecordingGetHandler)                           |\n+| Download a report of a recording in persistent storage                    | [`ReportGetHandler`](#ReportGetHandler)                                 |\n+| Upload a recording from persistent storage to the Grafana datasource      | [`RecordingUploadPostHandler`](#RecordingUploadPostHandler)             |\n+\n+\n+### Core\n+\n+* #### `AuthPostHandler`\n+\n+    ###### synopsis\n+    Attempts user authenticaiton;\n+    used as a simple way to check a user authentication header.\n+\n+    ###### request\n+    `POST /api/v1/auth`\n+\n+    The request should include an `Authorization` header to be checked.\n+\n+    ###### response\n+    `200` - No body. Getting this response means that the header is valid.\n+\n+    `401` - User authentication failed. The body is an error message.\n+    Getting this response means that the header is invalid.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST --header \"Authorization: Basic dXNlcjpwYXNzCg==\" localhost:8181/api/v1/auth\n+    ```\n+\n+\n+* #### `ClientUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns a URL that a client can connect to, to access Container JFR's\n+    WebSocket command channel (see [COMMANDS.md](COMMANDS.md)).\n+\n+    ###### request\n+    `GET /api/v1/clienturl`\n+\n+    ###### response\n+    `200` - The body is `{\"clientUrl\":\"$URL\"}`.\n+\n+    `500` - The URL could not be constructed due to an error with the socket\n+    or the host. Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/clienturl\n+    {\"clientUrl\":\"ws://0.0.0.0:8181/api/v1/command\"}\n+    ```\n+\n+\n+* #### `GrafanaDashboardUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana dashboard that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DASHBOARD_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_dashboard_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDashboardUrl\":\"$URL\"}`.\n+\n+    `500` - Container JFR is not configured with a Grafana dashboard.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_dashboard_url\n+    {\"grafanaDashboardUrl\":\"http://localhost:3000/d/CazTnbSMz/\"}\n+    ```\n+\n+\n+* #### `GrafanaDatasourceUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana datasource that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_datasource_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDatasourceUrl\":\"$URL\"}`\n+\n+    `500` - Container JFR is not configured with a Grafana datasource.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_datasource_url\n+    {\"grafanaDatasourceUrl\":\"http://localhost:8080\"}\n+    ```\n+\n+\n+* #### `HealthGetHandler`\n+\n+    ###### synopsis\n+    Returns whether or not the Grafana datasource and Grafana dashbaord\n+    that Container JFR is configured with are running properly.\n+\n+    ###### request\n+    `GET /health`\n+\n+    ###### response\n+    `200` - The body is\n+    `{\"datasourceAvailable\":$DATASOURCE_AVAILABLE,\"dashboardAvailable\":$DASHBOARD_AVAILABLE}`.\n+\n+    `$DATASOURCE_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana datasource and that datasource responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `$DASHBOARD_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana dashboard and that dashboard responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/health\n+    {\"dashboardAvailable\":false,\"datasourceAvailable\":false}\n+    ```\n+\n+\n+* #### `StaticAssetsGetHandler`\n+\n+    ###### synopsis\n+    Returns a static asset of the Container JFR web client.\n+\n+    ###### request\n+    `GET /*`\n+\n+    The path should be the directory path of the desired asset,\n+    assuming a root of\n+    `target/assets/app/resources/com/redhat/rhjmc/containerjfr/net/web/`.\n+\n+    ###### response\n+\n+    `200` - The body is the requested asset. Note that if the requested asset\n+    does not exist or the path is invalid, the request will not be handled here\n+    and instead  will be routed to\n+    [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler).\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/images/pfbg_992@2x.jpg --output pfbg_992@2x.jpg\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  574k  100  574k    0     0  43.1M      0 --:--:-- --:--:-- --:--:-- 43.1M\n+    ```\n+\n+\n+* #### `TargetsGetHandler`\n+\n+    ###### synopsis\n+    Scans for and returns discoverable target JVMs.\n+\n+    ###### request\n+    `GET /api/v1/targets`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of targets,\n+    enclosed in square brackets.\n+\n+    The format for a target is\n+    `{\"connectUrl\":\"$CONNECT_URL\",\"alias\":\"$ALIAS\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets\n+    [{\"connectUrl\":\"service:jmx:rmi:///jndi/rmi://container-jfr:9091/jmxrmi\",\"alias\":\"com.redhat.rhjmc.containerjfr.ContainerJfr\"}]\n+    ```\n+\n+\n+* #### `WebClientAssetsGetHandler`\n+\n+    ###### synopsis\n+    Handles all `GET` requests to paths not covered by another handler;\n+    returns a simple `index.html`.\n+\n+    ###### request\n+    `GET /*`\n+\n+    ###### response\n+    `200` - The body is the Container JFR web client's\n+    `index.html` HTML document.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/foo\n+    <!doctype html><html lang=\"en-US\"><head><meta charset=\"utf-8\"><title>ContainerJFR</title><meta id=\"appName\" name=\"application-name\" content=\"ContainerJFR\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><link rel=\"icon\" type=\"image/png\" href=\"https://www.patternfly.org/components/patternfly/dist/img/favicon.ico\"><base href=\"/\"><link href=\"app.css\" rel=\"stylesheet\"></head><body><noscript>Enabling JavaScript is required to run this app.</noscript><div id=\"root\"></div><script src=\"app.bundle.js\"></script></body></html>\n+    ```\n+\n+\n+### Flight Recorder\n+\n+* #### `RecordingDeleteHandler`\n+\n+    ###### synopsis\n+    Deletes a recording that was saved to persistent storage.\n+    This does not affect any recordings in any target JVM's JFR buffer.\n+\n+    ###### request\n+    `DELETE /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to delete.\n+\n+    ###### response\n+    `200` - No body.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be deleted.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X DELETE localhost:8181/api/v1/recordings/localhost_foo_20200910T213341Z.jfr\n+    ```\n+\n+\n+* #### `RecordingGetHandler`\n+\n+    ###### synopsis\n+    Returns a recording that was saved to persistent storage,\n+    as an octet stream.\n+\n+    ###### request\n+    `GET /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to get.\n+\n+    ###### response\n+    `200` - The body is an octet stream consisting of the requested recording.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be written to the response.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings/localhost_foo_20200910T214559Z.jfr --output foo.jfr\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  942k  100  942k    0     0  61.3M      0 --:--:-- --:--:-- --:--:-- 61.3M\n+    ```\n+\n+\n+* #### `RecordingsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of the recordings that are saved in persistent storage.\n+\n+    ###### request\n+    `GET /api/v1/recordings`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of recordings,\n+    enclosed in square brackets.\n+\n+    The format for a recording is\n+    `{\"downloadUrl\":\"$DOWNLOAD_URL\",\"name\":\"$NAME\",\"reportUrl\":\"$REPORT_URL\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `501` - The archive path where recordings are saved could not be accessed.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings\n+    [{\"downloadUrl\":\"http://192.168.0.109:8181/api/v1/recordings/localhost_foo_20200903T202547Z.jfr\",\"name\":\"localhost_foo_20200903T202547Z.jfr\",\"reportUrl\":\"http://192.168.0.109:8181/api/v1/reports/localhost_foo_20200903T202547Z.jfr\"}]\n+    ```\n+\n+\n+* #### `RecordingsPostHandler`\n+\n+    ###### synopsis\n+    Uploads a recording from the client to Container JFR's persistent storage.\n+\n+    ###### request\n+    `POST /api/v1/recordings`\n+\n+    The recording should be uploaded in a form with the name `recording`.\n+    The filename of the recording must follow the format that Container JFR\n+    uses for recordings it saves itself\n+    (with [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)).\n+\n+    ###### response\n+    `200` - The body is `{\"name\":\"$NAME\"}`, where `$NAME` is the name of the\n+    recording that is now saved in persistent storage.\n+    This name will be different from the uploaded recording's filename\n+    if another recording with the same name already existed.\n+\n+    `400` - The recording submission is invalid. The body is an error\n+    message.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `503` - `CONTAINER_JFR_ARCHIVE_PATH` is an invalid directory.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl --form \"recording=@localhost_foo_20200903T202547Z.jfr\" localhost:8181/api/v1/recordings\n+    {\"name\":\"localhost_foo_20200903T202547Z.2.jfr\"}\n+    ```\n+\n+\n+* #### `RecordingUploadPostHandler`\n+\n+    ###### synopsis\n+    Uploads a recording that was saved to persistent storage to\n+    the Grafana datasource that Container JFR is configured with\n+    (determined by the environment variable `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `POST /api/v1/recordings/:recordingName/upload`\n+\n+    `recordingName` - The name of the saved recording to upload.\n+\n+    ###### response\n+    `200` - The body is the body of the response that Container JFR got\n+    after sending the upload request to the Grafana datasource server.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `501` - The Grafana datasource URL is malformed.\n+    The body is an error message.\n+\n+    `502` - Container JFR received an invalid response from the\n+    Grafana datasource server after sending the upload request.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST localhost:8181/api/v1/recordings/localhost_foo_20200911T144545Z.jfr/upload\n+    Uploaded: file-uploads/555f4dab-240b-486b-b336-2d0e5f43e7cd\n+    Loaded: file-uploads/555f4dab-240b-486b-b336-2d0e5f43e7cd\n+    ```\n+\n+\n+* #### `ReportGetHandler`\n+\n+    ###### synopsis\n+    Returns the report of a recording that was saved to persistent storage.\n+\n+    ###### request\n+    `GET /api/v1/reports/:recordingName`\n+\n+    `recordingName` - The name of the recording to get the report for.\n+\n+    ###### response\n+    `200` - The body is the requested report.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The report could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/reports/localhost_foo_20200911T144545Z.jfr --output report.html\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  116k  100  116k    0     0   134k      0 --:--:-- --:--:-- --:--:--  134k\n+    ```\n+\n+\n+* #### `TargetEventsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of event types that can be produced by a target JVM.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/events`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of event types,\n+    enclosed in square brackets.\n+\n+    The format for an event type is\n+    `{\"name\":\"$NAME\",\"typeId\":\"$TYPE_ID\",\"description\":\"$DESCRIPTION\",\n+    \"category\":[$CATEGORIES],\"options\":{$OPTIONS}}`\n+\n+    So a list with no events looks like `[]`,\n+    a list with one event looks like `[{...}]`,\n+    and a list with two events looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets/localhost/events --output events\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100 47013  100 47013    0     0   866k      0 --:--:-- --:--:-- --:--:--  866k\n+    ```\n+\n+\n+* #### `TargetRecordingDeleteHandler`\n+\n+    ###### synopsis\n+    Deletes a recording from a target JVM, removing it from the target JVM\n+    and freeing the buffer memory used. The recording will be stopped if\n+    it is running at the time of deletion.\n+\n+    ###### request\n+    `DELETE /api/v1/targets/:targetId/recordings/:recordingName`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to delete.\n+\n+    ###### response\n+    `200` - No body.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target or the recording could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X DELETE localhost:8181/api/v1/targets/localhost/recordings/foo\n+    ```\n+\n+\n+* #### `TargetRecordingGetHandler`\n+\n+    ###### synopsis\n+    Returns a recording of a target JVM, as an octet stream.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/recordings/:recordingName`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to get.\n+\n+    ###### response\n+    `200` - The body is an octet stream consisting of the requested recording.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target or the recording could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be written to the\n+    response. Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets/localhost/recordings/foo --output foo.jfr\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  530k    0  530k    0     0  9303k      0 --:--:-- --:--:-- --:--:-- 9303k\n+    ```\n+\n+* #### `TargetRecordingPatchHandler`\n+\n+    ###### synopsis\n+    **STOP**\n+\n+    Stops a recording in a target JVM.\n+\n+    **SAVE**\n+\n+    Saves a recording in a target JVM to persistent storage.\n+    The default directory used is `/flghtrecordings`, but the environment\n+    variable `CONTAINER_JFR_ARCHIVE_PATH` can be used to specify a different\n+    path.\n+\n+    ###### request\n+    `PATCH /api/v1/targets/:targetId/recordings/:recordingName`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to patch.\n+\n+    The body must be either `STOP`, to stop the recording,\n+    or `SAVE`, to save the recording (case insensitive).\n+\n+    ###### response\n+    **General**\n+\n+    `400` - The operation is unsupported. The body is an error message.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target or the recording could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    **STOP**\n+\n+    `200` - No body.\n+\n+    `500` - The recording could not be stopped. The body is an error message.\n+\n+    **SAVE**\n+\n+    `200` - The body is the name of the recording that was saved.\n+    Note that this name will be different from the recording's original name,\n+    to add metadata.\n+\n+    ###### example\n+    ```\n+    $ curl -X PATCH --data \"STOP\" localhost:8181/api/v1/targets/localhost/recordings/foo\n+\n+    $ curl -X PATCH --data \"SAVE\" http://localhost:8181/api/v1/targets/localhost/recordings/foo\n+    localhost_foo_20200911T155146Z.jfr\n+    ```\n+\n+\n+* #### `TargetRecordingsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of all the recordings in a target JVM.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/recordings`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of recordings,\n+    enclosed in square brackets.\n+\n+    The format for a recording is\n+    `{\"downloadUrl\":\"$DOWNLOAD_URL\",\"name\":\"$NAME\",\"reportUrl\":\"$REPORT_URL\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets/localhost/recordings\n+    [{\"downloadUrl\":\"http://0.0.0.0:8181/api/v1/targets/service:jmx:rmi:%2F%2F%2Fjndi%2Frmi:%2F%2Flocalhost:9091%2Fjmxrmi/recordings/foo\",\"reportUrl\":\"http://0.0.0.0:8181/api/v1/targets/service:jmx:rmi:%2F%2F%2Fjndi%2Frmi:%2F%2Flocalhost:9091%2Fjmxrmi/reports/foo\",\"id\":3,\"name\":\"foo\",\"state\":\"STOPPED\",\"startTime\":1599839450919,\"duration\":5000,\"continuous\":false,\"toDisk\":true,\"maxSize\":0,\"maxAge\":0}]\n+    ```\n+\n+\n+* #### `TargetRecordingsPostHandler`\n+\n+    ###### synopsis\n+    Starts a recording in a target JVM.\n+\n+    ###### request\n+    `/api/v1/targets/:targetId/recordings`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    **The request must include the following fields:**\n+\n+    `recordingName` - The name of the recording to create.\n+\n+    `events` - The events configuration for the recording.\n+    This can be a comma-seperated list of events, with each event having the\n+    form `$EVENT_ID:$OPTION=$VALUE`; or it can be a template, using the form\n+    `template=$TEMPLATE`.\n+\n+    **The request may include the following fields:**\n+\n+    `duration` - The duration of the recording, in seconds.\n+    If this field is not set, or if it is set to zero,\n+    the recording will be continuous,\n+    meaning it will run until it is manually stopped, for example with\n+    [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler).\n+\n+    ###### response\n+    `201` - The body is a descriptor of the newly started recording, in the form\n+    `{\"downloadUrl\":\"$DOWNLOAD_URL\",\"reportUrl\":\"$REPORT_URL\",\"id\":$ID,\"name\":\"$NAME\",\"state\":\"$STATE\",\"startTime\":$START_TIME,\"duration\":$DURATION,\"continuous\":$CONTINUOUS,\"toDisk\":$TO_DISK,\"maxSize\":$MAX_SIZE,\"maxAge\":$MAX_AGE}`.\n+\n+    `400` - An argument was invalid. The body is an error message.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl --data \"recordingName=foo&duration=5&events=template=ALL\" localhost:8181/api/v1/targets/localhost/recordings\n+    {\"downloadUrl\":\"http://0.0.0.0:8181/api/v1/targets/service:jmx:rmi:%2F%2F%2Fjndi%2Frmi:%2F%2Flocalhost:9091%2Fjmxrmi/recordings/foo\",\"reportUrl\":\"http://0.0.0.0:8181/api/v1/targets/service:jmx:rmi:%2F%2F%2Fjndi%2Frmi:%2F%2Flocalhost:9091%2Fjmxrmi/reports/foo\",\"id\":1,\"name\":\"foo\",\"state\":\"RUNNING\",\"startTime\":1599847667483,\"duration\":5000,\"continuous\":false,\"toDisk\":true,\"maxSize\":0,\"maxAge\":0}\n+    ```\n+\n+\n+* #### `TargetRecordingUploadPostHandler`\n+\n+    ###### synopsis\n+    Uploads a recording of a target JVM to the Grafana datasource\n+    that Container JFR is configured with\n+    (determined by the environment variable `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `POST /api/v1/targets/:targetId/recordings/:recordingName/upload`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to upload.\n+\n+    ###### response\n+    `200` - The body is the body from the response that Container JFR got\n+    after sending the upload request to the Grafana datasource.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target or the recording could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `501` - The Grafana datasource URL is malformed.\n+    The body is an error message.\n+\n+    `502` - Container JFR received an invalid response from the\n+    Grafana datasource after sending the upload request.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST localhost:8181/api/v1/targets/localhost/recordings/foo/upload\n+    Uploaded: file-uploads/72ee43b8-c858-4aef-ae7e-4bcf7d93ec7c\n+    Loaded: file-uploads/72ee43b8-c858-4aef-ae7e-4bcf7d93ec7c\n+    ```\n+\n+\n+* #### `TargetReportGetHandler`\n+\n+    ###### synopsis\n+    Returns a report of a recording of a target JVM.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/reports/:recordingName`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to get the report for.\n+\n+    ###### response\n+    `200` - The body is the requested report.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The report could not be found, or the target could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    [vma@victor-work ~]$ curl localhost:8181/api/v1/targets/localhost/reports/foo --output report.html", "originalCommit": "1f502b29fd2b51fed1ab39d47b10c6a0027cf928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0NzEyNA==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r491147124", "bodyText": "Whoops, yeah that should've been removed. I actually found another one hidden at the end of the example for TargetTemplatesGetHandler!", "author": "vic-ma", "createdAt": "2020-09-18T19:23:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3NzU4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3NzgyOQ==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r489777829", "bodyText": "as an HTML document", "author": "andrewazores", "createdAt": "2020-09-16T21:58:10Z", "path": "HTTP_API.md", "diffHunk": "@@ -0,0 +1,952 @@\n+# HTTP API\n+\n+## V1 API\n+\n+### Quick Reference\n+\n+| What you want to do                                                       | Which handler you should use                                            |\n+| ------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n+| **Miscellaneous**                                                         |                                                                         |\n+| Get a URL you can use to access Container JFR's WebSocket command channel | [`ClientUrlGetHandler`](#ClientUrlGetHandler)                           |\n+| Scan for and get a list of target JVMs visible to Container JFR           | [`TargetsGetHandler`](#TargetsGetHandler)                               |\n+| Get a static asset from the web client                                    | [`StaticAssetsGetHandler`](#StaticAssetsGetHandler)                     |\n+| Send a `GET` request to a path not supported by this API                  | [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler)               |\n+| Test user authentication                                                  | [`AuthPostHandler`](#AuthPostHandler)                                   |\n+| Get the URL of Container JFR's Grafana dashboard                          | [`GrafanaDashboardUrlGetHandler`](#GrafanaDashboardUrlGetHandler)       |\n+| Get the URL of Container JFR's Grafana datasource                         | [`GrafanaDatasourceUrlGetHandler`](#GrafanaDatasourceUrlGetHandler)     |\n+| Check the status of Container JFR's Grafana datasource and dashboard      | [`HealthGetHandler`](#HealthGetHandler)                                 |\n+| **Events and event templates**                                            |                                                                         |\n+| Get a list of event types that can be produced by a target JVM            | [`TargetEventsGetHandler`](#TargetEventsGetHandler)                     |\n+| Get a list of event templates known to a target JVM                       | [`TargetTemplatesGetHandler`](#TargetTemplatesGetHandler)               |\n+| Download a template from a target JVM                                     | [`TargetTemplateGetHandler`](#TargetTemplateGetHandler)                 |\n+| Upload an event template to Container JFR                                 | [`TemplatesPostHandler`](#TemplatesPostHandler)                         |\n+| Delete an event template that was uploaded to Container JFR               | [`TemplateDeleteHandler`](#TemplateDeleteHandler)                       |\n+| **Recordings in target JVMs**                                             |                                                                         |\n+| Get a list of recordings in a target JVM                                  | [`TargetRecordingsGetHandler`](#TargetRecordingsGetHandler)             |\n+| Create a snapshot recording in a target JVM                               | [`TargetSnapshotPostHandler`](#TargetSnapshotPostHandler)               |\n+| Start a recording in a target JVM                                         | [`TargetRecordingsPostHandler`](#TargetRecordingsPostHandler)           |\n+| Stop a recording in a target JVM                                          | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Delete a recording in a target JVM                                        | [`TargetRecordingDeleteHandler`](#TargetRecordingDeleteHandler)         |\n+| Download a recording in a target JVM                                      | [`TargetRecordingGetHandler`](#TargetRecordingGetHandler)               |\n+| Download a report of a recording in a target JVM                          | [`TargetReportGetHandler`](#TargetReportGetHandler)                     |\n+| Save a recording in a target JVM to persistent storage                    | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Upload a recording from a target JVM to the Grafana datasource            | [`TargetRecordingUploadPostHandler`](#TargetRecordingUploadPostHandler) |\n+| **Recordings in persistent storage**                                      |                                                                         |\n+| Get a list of recordings in persistent storage                            | [`RecordingsGetHandler`](#RecordingsGetHandler)                         |\n+| Upload a recording to persistent storage                                  | [`RecordingsPostHandler`](#RecordingsPostHandler)                       |\n+| Delete a recording from persistent storage                                | [`RecordingDeleteHandler`](#RecordingDeleteHandler)                     |\n+| Download a recording in persistent storage                                | [`RecordingGetHandler`](#RecordingGetHandler)                           |\n+| Download a report of a recording in persistent storage                    | [`ReportGetHandler`](#ReportGetHandler)                                 |\n+| Upload a recording from persistent storage to the Grafana datasource      | [`RecordingUploadPostHandler`](#RecordingUploadPostHandler)             |\n+\n+\n+### Core\n+\n+* #### `AuthPostHandler`\n+\n+    ###### synopsis\n+    Attempts user authenticaiton;\n+    used as a simple way to check a user authentication header.\n+\n+    ###### request\n+    `POST /api/v1/auth`\n+\n+    The request should include an `Authorization` header to be checked.\n+\n+    ###### response\n+    `200` - No body. Getting this response means that the header is valid.\n+\n+    `401` - User authentication failed. The body is an error message.\n+    Getting this response means that the header is invalid.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST --header \"Authorization: Basic dXNlcjpwYXNzCg==\" localhost:8181/api/v1/auth\n+    ```\n+\n+\n+* #### `ClientUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns a URL that a client can connect to, to access Container JFR's\n+    WebSocket command channel (see [COMMANDS.md](COMMANDS.md)).\n+\n+    ###### request\n+    `GET /api/v1/clienturl`\n+\n+    ###### response\n+    `200` - The body is `{\"clientUrl\":\"$URL\"}`.\n+\n+    `500` - The URL could not be constructed due to an error with the socket\n+    or the host. Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/clienturl\n+    {\"clientUrl\":\"ws://0.0.0.0:8181/api/v1/command\"}\n+    ```\n+\n+\n+* #### `GrafanaDashboardUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana dashboard that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DASHBOARD_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_dashboard_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDashboardUrl\":\"$URL\"}`.\n+\n+    `500` - Container JFR is not configured with a Grafana dashboard.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_dashboard_url\n+    {\"grafanaDashboardUrl\":\"http://localhost:3000/d/CazTnbSMz/\"}\n+    ```\n+\n+\n+* #### `GrafanaDatasourceUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana datasource that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_datasource_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDatasourceUrl\":\"$URL\"}`\n+\n+    `500` - Container JFR is not configured with a Grafana datasource.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_datasource_url\n+    {\"grafanaDatasourceUrl\":\"http://localhost:8080\"}\n+    ```\n+\n+\n+* #### `HealthGetHandler`\n+\n+    ###### synopsis\n+    Returns whether or not the Grafana datasource and Grafana dashbaord\n+    that Container JFR is configured with are running properly.\n+\n+    ###### request\n+    `GET /health`\n+\n+    ###### response\n+    `200` - The body is\n+    `{\"datasourceAvailable\":$DATASOURCE_AVAILABLE,\"dashboardAvailable\":$DASHBOARD_AVAILABLE}`.\n+\n+    `$DATASOURCE_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana datasource and that datasource responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `$DASHBOARD_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana dashboard and that dashboard responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/health\n+    {\"dashboardAvailable\":false,\"datasourceAvailable\":false}\n+    ```\n+\n+\n+* #### `StaticAssetsGetHandler`\n+\n+    ###### synopsis\n+    Returns a static asset of the Container JFR web client.\n+\n+    ###### request\n+    `GET /*`\n+\n+    The path should be the directory path of the desired asset,\n+    assuming a root of\n+    `target/assets/app/resources/com/redhat/rhjmc/containerjfr/net/web/`.\n+\n+    ###### response\n+\n+    `200` - The body is the requested asset. Note that if the requested asset\n+    does not exist or the path is invalid, the request will not be handled here\n+    and instead  will be routed to\n+    [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler).\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/images/pfbg_992@2x.jpg --output pfbg_992@2x.jpg\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  574k  100  574k    0     0  43.1M      0 --:--:-- --:--:-- --:--:-- 43.1M\n+    ```\n+\n+\n+* #### `TargetsGetHandler`\n+\n+    ###### synopsis\n+    Scans for and returns discoverable target JVMs.\n+\n+    ###### request\n+    `GET /api/v1/targets`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of targets,\n+    enclosed in square brackets.\n+\n+    The format for a target is\n+    `{\"connectUrl\":\"$CONNECT_URL\",\"alias\":\"$ALIAS\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets\n+    [{\"connectUrl\":\"service:jmx:rmi:///jndi/rmi://container-jfr:9091/jmxrmi\",\"alias\":\"com.redhat.rhjmc.containerjfr.ContainerJfr\"}]\n+    ```\n+\n+\n+* #### `WebClientAssetsGetHandler`\n+\n+    ###### synopsis\n+    Handles all `GET` requests to paths not covered by another handler;\n+    returns a simple `index.html`.\n+\n+    ###### request\n+    `GET /*`\n+\n+    ###### response\n+    `200` - The body is the Container JFR web client's\n+    `index.html` HTML document.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/foo\n+    <!doctype html><html lang=\"en-US\"><head><meta charset=\"utf-8\"><title>ContainerJFR</title><meta id=\"appName\" name=\"application-name\" content=\"ContainerJFR\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><link rel=\"icon\" type=\"image/png\" href=\"https://www.patternfly.org/components/patternfly/dist/img/favicon.ico\"><base href=\"/\"><link href=\"app.css\" rel=\"stylesheet\"></head><body><noscript>Enabling JavaScript is required to run this app.</noscript><div id=\"root\"></div><script src=\"app.bundle.js\"></script></body></html>\n+    ```\n+\n+\n+### Flight Recorder\n+\n+* #### `RecordingDeleteHandler`\n+\n+    ###### synopsis\n+    Deletes a recording that was saved to persistent storage.\n+    This does not affect any recordings in any target JVM's JFR buffer.\n+\n+    ###### request\n+    `DELETE /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to delete.\n+\n+    ###### response\n+    `200` - No body.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be deleted.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X DELETE localhost:8181/api/v1/recordings/localhost_foo_20200910T213341Z.jfr\n+    ```\n+\n+\n+* #### `RecordingGetHandler`\n+\n+    ###### synopsis\n+    Returns a recording that was saved to persistent storage,\n+    as an octet stream.\n+\n+    ###### request\n+    `GET /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to get.\n+\n+    ###### response\n+    `200` - The body is an octet stream consisting of the requested recording.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be written to the response.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings/localhost_foo_20200910T214559Z.jfr --output foo.jfr\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  942k  100  942k    0     0  61.3M      0 --:--:-- --:--:-- --:--:-- 61.3M\n+    ```\n+\n+\n+* #### `RecordingsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of the recordings that are saved in persistent storage.\n+\n+    ###### request\n+    `GET /api/v1/recordings`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of recordings,\n+    enclosed in square brackets.\n+\n+    The format for a recording is\n+    `{\"downloadUrl\":\"$DOWNLOAD_URL\",\"name\":\"$NAME\",\"reportUrl\":\"$REPORT_URL\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `501` - The archive path where recordings are saved could not be accessed.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings\n+    [{\"downloadUrl\":\"http://192.168.0.109:8181/api/v1/recordings/localhost_foo_20200903T202547Z.jfr\",\"name\":\"localhost_foo_20200903T202547Z.jfr\",\"reportUrl\":\"http://192.168.0.109:8181/api/v1/reports/localhost_foo_20200903T202547Z.jfr\"}]\n+    ```\n+\n+\n+* #### `RecordingsPostHandler`\n+\n+    ###### synopsis\n+    Uploads a recording from the client to Container JFR's persistent storage.\n+\n+    ###### request\n+    `POST /api/v1/recordings`\n+\n+    The recording should be uploaded in a form with the name `recording`.\n+    The filename of the recording must follow the format that Container JFR\n+    uses for recordings it saves itself\n+    (with [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)).\n+\n+    ###### response\n+    `200` - The body is `{\"name\":\"$NAME\"}`, where `$NAME` is the name of the\n+    recording that is now saved in persistent storage.\n+    This name will be different from the uploaded recording's filename\n+    if another recording with the same name already existed.\n+\n+    `400` - The recording submission is invalid. The body is an error\n+    message.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `503` - `CONTAINER_JFR_ARCHIVE_PATH` is an invalid directory.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl --form \"recording=@localhost_foo_20200903T202547Z.jfr\" localhost:8181/api/v1/recordings\n+    {\"name\":\"localhost_foo_20200903T202547Z.2.jfr\"}\n+    ```\n+\n+\n+* #### `RecordingUploadPostHandler`\n+\n+    ###### synopsis\n+    Uploads a recording that was saved to persistent storage to\n+    the Grafana datasource that Container JFR is configured with\n+    (determined by the environment variable `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `POST /api/v1/recordings/:recordingName/upload`\n+\n+    `recordingName` - The name of the saved recording to upload.\n+\n+    ###### response\n+    `200` - The body is the body of the response that Container JFR got\n+    after sending the upload request to the Grafana datasource server.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `501` - The Grafana datasource URL is malformed.\n+    The body is an error message.\n+\n+    `502` - Container JFR received an invalid response from the\n+    Grafana datasource server after sending the upload request.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST localhost:8181/api/v1/recordings/localhost_foo_20200911T144545Z.jfr/upload\n+    Uploaded: file-uploads/555f4dab-240b-486b-b336-2d0e5f43e7cd\n+    Loaded: file-uploads/555f4dab-240b-486b-b336-2d0e5f43e7cd\n+    ```\n+\n+\n+* #### `ReportGetHandler`\n+\n+    ###### synopsis\n+    Returns the report of a recording that was saved to persistent storage.\n+\n+    ###### request\n+    `GET /api/v1/reports/:recordingName`\n+\n+    `recordingName` - The name of the recording to get the report for.\n+\n+    ###### response\n+    `200` - The body is the requested report.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The report could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/reports/localhost_foo_20200911T144545Z.jfr --output report.html\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  116k  100  116k    0     0   134k      0 --:--:-- --:--:-- --:--:--  134k\n+    ```\n+\n+\n+* #### `TargetEventsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of event types that can be produced by a target JVM.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/events`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of event types,\n+    enclosed in square brackets.\n+\n+    The format for an event type is\n+    `{\"name\":\"$NAME\",\"typeId\":\"$TYPE_ID\",\"description\":\"$DESCRIPTION\",\n+    \"category\":[$CATEGORIES],\"options\":{$OPTIONS}}`\n+\n+    So a list with no events looks like `[]`,\n+    a list with one event looks like `[{...}]`,\n+    and a list with two events looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets/localhost/events --output events\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100 47013  100 47013    0     0   866k      0 --:--:-- --:--:-- --:--:--  866k\n+    ```\n+\n+\n+* #### `TargetRecordingDeleteHandler`\n+\n+    ###### synopsis\n+    Deletes a recording from a target JVM, removing it from the target JVM\n+    and freeing the buffer memory used. The recording will be stopped if\n+    it is running at the time of deletion.\n+\n+    ###### request\n+    `DELETE /api/v1/targets/:targetId/recordings/:recordingName`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to delete.\n+\n+    ###### response\n+    `200` - No body.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target or the recording could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X DELETE localhost:8181/api/v1/targets/localhost/recordings/foo\n+    ```\n+\n+\n+* #### `TargetRecordingGetHandler`\n+\n+    ###### synopsis\n+    Returns a recording of a target JVM, as an octet stream.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/recordings/:recordingName`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to get.\n+\n+    ###### response\n+    `200` - The body is an octet stream consisting of the requested recording.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target or the recording could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be written to the\n+    response. Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets/localhost/recordings/foo --output foo.jfr\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  530k    0  530k    0     0  9303k      0 --:--:-- --:--:-- --:--:-- 9303k\n+    ```\n+\n+* #### `TargetRecordingPatchHandler`\n+\n+    ###### synopsis\n+    **STOP**\n+\n+    Stops a recording in a target JVM.\n+\n+    **SAVE**\n+\n+    Saves a recording in a target JVM to persistent storage.\n+    The default directory used is `/flghtrecordings`, but the environment\n+    variable `CONTAINER_JFR_ARCHIVE_PATH` can be used to specify a different\n+    path.\n+\n+    ###### request\n+    `PATCH /api/v1/targets/:targetId/recordings/:recordingName`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to patch.\n+\n+    The body must be either `STOP`, to stop the recording,\n+    or `SAVE`, to save the recording (case insensitive).\n+\n+    ###### response\n+    **General**\n+\n+    `400` - The operation is unsupported. The body is an error message.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target or the recording could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    **STOP**\n+\n+    `200` - No body.\n+\n+    `500` - The recording could not be stopped. The body is an error message.\n+\n+    **SAVE**\n+\n+    `200` - The body is the name of the recording that was saved.\n+    Note that this name will be different from the recording's original name,\n+    to add metadata.\n+\n+    ###### example\n+    ```\n+    $ curl -X PATCH --data \"STOP\" localhost:8181/api/v1/targets/localhost/recordings/foo\n+\n+    $ curl -X PATCH --data \"SAVE\" http://localhost:8181/api/v1/targets/localhost/recordings/foo\n+    localhost_foo_20200911T155146Z.jfr\n+    ```\n+\n+\n+* #### `TargetRecordingsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of all the recordings in a target JVM.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/recordings`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of recordings,\n+    enclosed in square brackets.\n+\n+    The format for a recording is\n+    `{\"downloadUrl\":\"$DOWNLOAD_URL\",\"name\":\"$NAME\",\"reportUrl\":\"$REPORT_URL\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets/localhost/recordings\n+    [{\"downloadUrl\":\"http://0.0.0.0:8181/api/v1/targets/service:jmx:rmi:%2F%2F%2Fjndi%2Frmi:%2F%2Flocalhost:9091%2Fjmxrmi/recordings/foo\",\"reportUrl\":\"http://0.0.0.0:8181/api/v1/targets/service:jmx:rmi:%2F%2F%2Fjndi%2Frmi:%2F%2Flocalhost:9091%2Fjmxrmi/reports/foo\",\"id\":3,\"name\":\"foo\",\"state\":\"STOPPED\",\"startTime\":1599839450919,\"duration\":5000,\"continuous\":false,\"toDisk\":true,\"maxSize\":0,\"maxAge\":0}]\n+    ```\n+\n+\n+* #### `TargetRecordingsPostHandler`\n+\n+    ###### synopsis\n+    Starts a recording in a target JVM.\n+\n+    ###### request\n+    `/api/v1/targets/:targetId/recordings`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    **The request must include the following fields:**\n+\n+    `recordingName` - The name of the recording to create.\n+\n+    `events` - The events configuration for the recording.\n+    This can be a comma-seperated list of events, with each event having the\n+    form `$EVENT_ID:$OPTION=$VALUE`; or it can be a template, using the form\n+    `template=$TEMPLATE`.\n+\n+    **The request may include the following fields:**\n+\n+    `duration` - The duration of the recording, in seconds.\n+    If this field is not set, or if it is set to zero,\n+    the recording will be continuous,\n+    meaning it will run until it is manually stopped, for example with\n+    [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler).\n+\n+    ###### response\n+    `201` - The body is a descriptor of the newly started recording, in the form\n+    `{\"downloadUrl\":\"$DOWNLOAD_URL\",\"reportUrl\":\"$REPORT_URL\",\"id\":$ID,\"name\":\"$NAME\",\"state\":\"$STATE\",\"startTime\":$START_TIME,\"duration\":$DURATION,\"continuous\":$CONTINUOUS,\"toDisk\":$TO_DISK,\"maxSize\":$MAX_SIZE,\"maxAge\":$MAX_AGE}`.\n+\n+    `400` - An argument was invalid. The body is an error message.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl --data \"recordingName=foo&duration=5&events=template=ALL\" localhost:8181/api/v1/targets/localhost/recordings\n+    {\"downloadUrl\":\"http://0.0.0.0:8181/api/v1/targets/service:jmx:rmi:%2F%2F%2Fjndi%2Frmi:%2F%2Flocalhost:9091%2Fjmxrmi/recordings/foo\",\"reportUrl\":\"http://0.0.0.0:8181/api/v1/targets/service:jmx:rmi:%2F%2F%2Fjndi%2Frmi:%2F%2Flocalhost:9091%2Fjmxrmi/reports/foo\",\"id\":1,\"name\":\"foo\",\"state\":\"RUNNING\",\"startTime\":1599847667483,\"duration\":5000,\"continuous\":false,\"toDisk\":true,\"maxSize\":0,\"maxAge\":0}\n+    ```\n+\n+\n+* #### `TargetRecordingUploadPostHandler`\n+\n+    ###### synopsis\n+    Uploads a recording of a target JVM to the Grafana datasource\n+    that Container JFR is configured with\n+    (determined by the environment variable `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `POST /api/v1/targets/:targetId/recordings/:recordingName/upload`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to upload.\n+\n+    ###### response\n+    `200` - The body is the body from the response that Container JFR got\n+    after sending the upload request to the Grafana datasource.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target or the recording could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `501` - The Grafana datasource URL is malformed.\n+    The body is an error message.\n+\n+    `502` - Container JFR received an invalid response from the\n+    Grafana datasource after sending the upload request.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST localhost:8181/api/v1/targets/localhost/recordings/foo/upload\n+    Uploaded: file-uploads/72ee43b8-c858-4aef-ae7e-4bcf7d93ec7c\n+    Loaded: file-uploads/72ee43b8-c858-4aef-ae7e-4bcf7d93ec7c\n+    ```\n+\n+\n+* #### `TargetReportGetHandler`\n+\n+    ###### synopsis\n+    Returns a report of a recording of a target JVM.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/reports/:recordingName`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to get the report for.\n+\n+    ###### response\n+    `200` - The body is the requested report.", "originalCommit": "1f502b29fd2b51fed1ab39d47b10c6a0027cf928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3OTEzNQ==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r489779135", "bodyText": "as an XML document", "author": "andrewazores", "createdAt": "2020-09-16T22:01:33Z", "path": "HTTP_API.md", "diffHunk": "@@ -0,0 +1,952 @@\n+# HTTP API\n+\n+## V1 API\n+\n+### Quick Reference\n+\n+| What you want to do                                                       | Which handler you should use                                            |\n+| ------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n+| **Miscellaneous**                                                         |                                                                         |\n+| Get a URL you can use to access Container JFR's WebSocket command channel | [`ClientUrlGetHandler`](#ClientUrlGetHandler)                           |\n+| Scan for and get a list of target JVMs visible to Container JFR           | [`TargetsGetHandler`](#TargetsGetHandler)                               |\n+| Get a static asset from the web client                                    | [`StaticAssetsGetHandler`](#StaticAssetsGetHandler)                     |\n+| Send a `GET` request to a path not supported by this API                  | [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler)               |\n+| Test user authentication                                                  | [`AuthPostHandler`](#AuthPostHandler)                                   |\n+| Get the URL of Container JFR's Grafana dashboard                          | [`GrafanaDashboardUrlGetHandler`](#GrafanaDashboardUrlGetHandler)       |\n+| Get the URL of Container JFR's Grafana datasource                         | [`GrafanaDatasourceUrlGetHandler`](#GrafanaDatasourceUrlGetHandler)     |\n+| Check the status of Container JFR's Grafana datasource and dashboard      | [`HealthGetHandler`](#HealthGetHandler)                                 |\n+| **Events and event templates**                                            |                                                                         |\n+| Get a list of event types that can be produced by a target JVM            | [`TargetEventsGetHandler`](#TargetEventsGetHandler)                     |\n+| Get a list of event templates known to a target JVM                       | [`TargetTemplatesGetHandler`](#TargetTemplatesGetHandler)               |\n+| Download a template from a target JVM                                     | [`TargetTemplateGetHandler`](#TargetTemplateGetHandler)                 |\n+| Upload an event template to Container JFR                                 | [`TemplatesPostHandler`](#TemplatesPostHandler)                         |\n+| Delete an event template that was uploaded to Container JFR               | [`TemplateDeleteHandler`](#TemplateDeleteHandler)                       |\n+| **Recordings in target JVMs**                                             |                                                                         |\n+| Get a list of recordings in a target JVM                                  | [`TargetRecordingsGetHandler`](#TargetRecordingsGetHandler)             |\n+| Create a snapshot recording in a target JVM                               | [`TargetSnapshotPostHandler`](#TargetSnapshotPostHandler)               |\n+| Start a recording in a target JVM                                         | [`TargetRecordingsPostHandler`](#TargetRecordingsPostHandler)           |\n+| Stop a recording in a target JVM                                          | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Delete a recording in a target JVM                                        | [`TargetRecordingDeleteHandler`](#TargetRecordingDeleteHandler)         |\n+| Download a recording in a target JVM                                      | [`TargetRecordingGetHandler`](#TargetRecordingGetHandler)               |\n+| Download a report of a recording in a target JVM                          | [`TargetReportGetHandler`](#TargetReportGetHandler)                     |\n+| Save a recording in a target JVM to persistent storage                    | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Upload a recording from a target JVM to the Grafana datasource            | [`TargetRecordingUploadPostHandler`](#TargetRecordingUploadPostHandler) |\n+| **Recordings in persistent storage**                                      |                                                                         |\n+| Get a list of recordings in persistent storage                            | [`RecordingsGetHandler`](#RecordingsGetHandler)                         |\n+| Upload a recording to persistent storage                                  | [`RecordingsPostHandler`](#RecordingsPostHandler)                       |\n+| Delete a recording from persistent storage                                | [`RecordingDeleteHandler`](#RecordingDeleteHandler)                     |\n+| Download a recording in persistent storage                                | [`RecordingGetHandler`](#RecordingGetHandler)                           |\n+| Download a report of a recording in persistent storage                    | [`ReportGetHandler`](#ReportGetHandler)                                 |\n+| Upload a recording from persistent storage to the Grafana datasource      | [`RecordingUploadPostHandler`](#RecordingUploadPostHandler)             |\n+\n+\n+### Core\n+\n+* #### `AuthPostHandler`\n+\n+    ###### synopsis\n+    Attempts user authenticaiton;\n+    used as a simple way to check a user authentication header.\n+\n+    ###### request\n+    `POST /api/v1/auth`\n+\n+    The request should include an `Authorization` header to be checked.\n+\n+    ###### response\n+    `200` - No body. Getting this response means that the header is valid.\n+\n+    `401` - User authentication failed. The body is an error message.\n+    Getting this response means that the header is invalid.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST --header \"Authorization: Basic dXNlcjpwYXNzCg==\" localhost:8181/api/v1/auth\n+    ```\n+\n+\n+* #### `ClientUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns a URL that a client can connect to, to access Container JFR's\n+    WebSocket command channel (see [COMMANDS.md](COMMANDS.md)).\n+\n+    ###### request\n+    `GET /api/v1/clienturl`\n+\n+    ###### response\n+    `200` - The body is `{\"clientUrl\":\"$URL\"}`.\n+\n+    `500` - The URL could not be constructed due to an error with the socket\n+    or the host. Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/clienturl\n+    {\"clientUrl\":\"ws://0.0.0.0:8181/api/v1/command\"}\n+    ```\n+\n+\n+* #### `GrafanaDashboardUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana dashboard that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DASHBOARD_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_dashboard_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDashboardUrl\":\"$URL\"}`.\n+\n+    `500` - Container JFR is not configured with a Grafana dashboard.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_dashboard_url\n+    {\"grafanaDashboardUrl\":\"http://localhost:3000/d/CazTnbSMz/\"}\n+    ```\n+\n+\n+* #### `GrafanaDatasourceUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana datasource that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_datasource_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDatasourceUrl\":\"$URL\"}`\n+\n+    `500` - Container JFR is not configured with a Grafana datasource.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_datasource_url\n+    {\"grafanaDatasourceUrl\":\"http://localhost:8080\"}\n+    ```\n+\n+\n+* #### `HealthGetHandler`\n+\n+    ###### synopsis\n+    Returns whether or not the Grafana datasource and Grafana dashbaord\n+    that Container JFR is configured with are running properly.\n+\n+    ###### request\n+    `GET /health`\n+\n+    ###### response\n+    `200` - The body is\n+    `{\"datasourceAvailable\":$DATASOURCE_AVAILABLE,\"dashboardAvailable\":$DASHBOARD_AVAILABLE}`.\n+\n+    `$DATASOURCE_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana datasource and that datasource responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `$DASHBOARD_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana dashboard and that dashboard responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/health\n+    {\"dashboardAvailable\":false,\"datasourceAvailable\":false}\n+    ```\n+\n+\n+* #### `StaticAssetsGetHandler`\n+\n+    ###### synopsis\n+    Returns a static asset of the Container JFR web client.\n+\n+    ###### request\n+    `GET /*`\n+\n+    The path should be the directory path of the desired asset,\n+    assuming a root of\n+    `target/assets/app/resources/com/redhat/rhjmc/containerjfr/net/web/`.\n+\n+    ###### response\n+\n+    `200` - The body is the requested asset. Note that if the requested asset\n+    does not exist or the path is invalid, the request will not be handled here\n+    and instead  will be routed to\n+    [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler).\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/images/pfbg_992@2x.jpg --output pfbg_992@2x.jpg\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  574k  100  574k    0     0  43.1M      0 --:--:-- --:--:-- --:--:-- 43.1M\n+    ```\n+\n+\n+* #### `TargetsGetHandler`\n+\n+    ###### synopsis\n+    Scans for and returns discoverable target JVMs.\n+\n+    ###### request\n+    `GET /api/v1/targets`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of targets,\n+    enclosed in square brackets.\n+\n+    The format for a target is\n+    `{\"connectUrl\":\"$CONNECT_URL\",\"alias\":\"$ALIAS\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets\n+    [{\"connectUrl\":\"service:jmx:rmi:///jndi/rmi://container-jfr:9091/jmxrmi\",\"alias\":\"com.redhat.rhjmc.containerjfr.ContainerJfr\"}]\n+    ```\n+\n+\n+* #### `WebClientAssetsGetHandler`\n+\n+    ###### synopsis\n+    Handles all `GET` requests to paths not covered by another handler;\n+    returns a simple `index.html`.\n+\n+    ###### request\n+    `GET /*`\n+\n+    ###### response\n+    `200` - The body is the Container JFR web client's\n+    `index.html` HTML document.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/foo\n+    <!doctype html><html lang=\"en-US\"><head><meta charset=\"utf-8\"><title>ContainerJFR</title><meta id=\"appName\" name=\"application-name\" content=\"ContainerJFR\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><link rel=\"icon\" type=\"image/png\" href=\"https://www.patternfly.org/components/patternfly/dist/img/favicon.ico\"><base href=\"/\"><link href=\"app.css\" rel=\"stylesheet\"></head><body><noscript>Enabling JavaScript is required to run this app.</noscript><div id=\"root\"></div><script src=\"app.bundle.js\"></script></body></html>\n+    ```\n+\n+\n+### Flight Recorder\n+\n+* #### `RecordingDeleteHandler`\n+\n+    ###### synopsis\n+    Deletes a recording that was saved to persistent storage.\n+    This does not affect any recordings in any target JVM's JFR buffer.\n+\n+    ###### request\n+    `DELETE /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to delete.\n+\n+    ###### response\n+    `200` - No body.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be deleted.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X DELETE localhost:8181/api/v1/recordings/localhost_foo_20200910T213341Z.jfr\n+    ```\n+\n+\n+* #### `RecordingGetHandler`\n+\n+    ###### synopsis\n+    Returns a recording that was saved to persistent storage,\n+    as an octet stream.\n+\n+    ###### request\n+    `GET /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to get.\n+\n+    ###### response\n+    `200` - The body is an octet stream consisting of the requested recording.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be written to the response.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings/localhost_foo_20200910T214559Z.jfr --output foo.jfr\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  942k  100  942k    0     0  61.3M      0 --:--:-- --:--:-- --:--:-- 61.3M\n+    ```\n+\n+\n+* #### `RecordingsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of the recordings that are saved in persistent storage.\n+\n+    ###### request\n+    `GET /api/v1/recordings`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of recordings,\n+    enclosed in square brackets.\n+\n+    The format for a recording is\n+    `{\"downloadUrl\":\"$DOWNLOAD_URL\",\"name\":\"$NAME\",\"reportUrl\":\"$REPORT_URL\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `501` - The archive path where recordings are saved could not be accessed.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings\n+    [{\"downloadUrl\":\"http://192.168.0.109:8181/api/v1/recordings/localhost_foo_20200903T202547Z.jfr\",\"name\":\"localhost_foo_20200903T202547Z.jfr\",\"reportUrl\":\"http://192.168.0.109:8181/api/v1/reports/localhost_foo_20200903T202547Z.jfr\"}]\n+    ```\n+\n+\n+* #### `RecordingsPostHandler`\n+\n+    ###### synopsis\n+    Uploads a recording from the client to Container JFR's persistent storage.\n+\n+    ###### request\n+    `POST /api/v1/recordings`\n+\n+    The recording should be uploaded in a form with the name `recording`.\n+    The filename of the recording must follow the format that Container JFR\n+    uses for recordings it saves itself\n+    (with [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)).\n+\n+    ###### response\n+    `200` - The body is `{\"name\":\"$NAME\"}`, where `$NAME` is the name of the\n+    recording that is now saved in persistent storage.\n+    This name will be different from the uploaded recording's filename\n+    if another recording with the same name already existed.\n+\n+    `400` - The recording submission is invalid. The body is an error\n+    message.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `503` - `CONTAINER_JFR_ARCHIVE_PATH` is an invalid directory.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl --form \"recording=@localhost_foo_20200903T202547Z.jfr\" localhost:8181/api/v1/recordings\n+    {\"name\":\"localhost_foo_20200903T202547Z.2.jfr\"}\n+    ```\n+\n+\n+* #### `RecordingUploadPostHandler`\n+\n+    ###### synopsis\n+    Uploads a recording that was saved to persistent storage to\n+    the Grafana datasource that Container JFR is configured with\n+    (determined by the environment variable `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `POST /api/v1/recordings/:recordingName/upload`\n+\n+    `recordingName` - The name of the saved recording to upload.\n+\n+    ###### response\n+    `200` - The body is the body of the response that Container JFR got\n+    after sending the upload request to the Grafana datasource server.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `501` - The Grafana datasource URL is malformed.\n+    The body is an error message.\n+\n+    `502` - Container JFR received an invalid response from the\n+    Grafana datasource server after sending the upload request.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST localhost:8181/api/v1/recordings/localhost_foo_20200911T144545Z.jfr/upload\n+    Uploaded: file-uploads/555f4dab-240b-486b-b336-2d0e5f43e7cd\n+    Loaded: file-uploads/555f4dab-240b-486b-b336-2d0e5f43e7cd\n+    ```\n+\n+\n+* #### `ReportGetHandler`\n+\n+    ###### synopsis\n+    Returns the report of a recording that was saved to persistent storage.\n+\n+    ###### request\n+    `GET /api/v1/reports/:recordingName`\n+\n+    `recordingName` - The name of the recording to get the report for.\n+\n+    ###### response\n+    `200` - The body is the requested report.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The report could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/reports/localhost_foo_20200911T144545Z.jfr --output report.html\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  116k  100  116k    0     0   134k      0 --:--:-- --:--:-- --:--:--  134k\n+    ```\n+\n+\n+* #### `TargetEventsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of event types that can be produced by a target JVM.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/events`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of event types,\n+    enclosed in square brackets.\n+\n+    The format for an event type is\n+    `{\"name\":\"$NAME\",\"typeId\":\"$TYPE_ID\",\"description\":\"$DESCRIPTION\",\n+    \"category\":[$CATEGORIES],\"options\":{$OPTIONS}}`\n+\n+    So a list with no events looks like `[]`,\n+    a list with one event looks like `[{...}]`,\n+    and a list with two events looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets/localhost/events --output events\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100 47013  100 47013    0     0   866k      0 --:--:-- --:--:-- --:--:--  866k\n+    ```\n+\n+\n+* #### `TargetRecordingDeleteHandler`\n+\n+    ###### synopsis\n+    Deletes a recording from a target JVM, removing it from the target JVM\n+    and freeing the buffer memory used. The recording will be stopped if\n+    it is running at the time of deletion.\n+\n+    ###### request\n+    `DELETE /api/v1/targets/:targetId/recordings/:recordingName`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to delete.\n+\n+    ###### response\n+    `200` - No body.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target or the recording could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X DELETE localhost:8181/api/v1/targets/localhost/recordings/foo\n+    ```\n+\n+\n+* #### `TargetRecordingGetHandler`\n+\n+    ###### synopsis\n+    Returns a recording of a target JVM, as an octet stream.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/recordings/:recordingName`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to get.\n+\n+    ###### response\n+    `200` - The body is an octet stream consisting of the requested recording.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target or the recording could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be written to the\n+    response. Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets/localhost/recordings/foo --output foo.jfr\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  530k    0  530k    0     0  9303k      0 --:--:-- --:--:-- --:--:-- 9303k\n+    ```\n+\n+* #### `TargetRecordingPatchHandler`\n+\n+    ###### synopsis\n+    **STOP**\n+\n+    Stops a recording in a target JVM.\n+\n+    **SAVE**\n+\n+    Saves a recording in a target JVM to persistent storage.\n+    The default directory used is `/flghtrecordings`, but the environment\n+    variable `CONTAINER_JFR_ARCHIVE_PATH` can be used to specify a different\n+    path.\n+\n+    ###### request\n+    `PATCH /api/v1/targets/:targetId/recordings/:recordingName`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to patch.\n+\n+    The body must be either `STOP`, to stop the recording,\n+    or `SAVE`, to save the recording (case insensitive).\n+\n+    ###### response\n+    **General**\n+\n+    `400` - The operation is unsupported. The body is an error message.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target or the recording could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    **STOP**\n+\n+    `200` - No body.\n+\n+    `500` - The recording could not be stopped. The body is an error message.\n+\n+    **SAVE**\n+\n+    `200` - The body is the name of the recording that was saved.\n+    Note that this name will be different from the recording's original name,\n+    to add metadata.\n+\n+    ###### example\n+    ```\n+    $ curl -X PATCH --data \"STOP\" localhost:8181/api/v1/targets/localhost/recordings/foo\n+\n+    $ curl -X PATCH --data \"SAVE\" http://localhost:8181/api/v1/targets/localhost/recordings/foo\n+    localhost_foo_20200911T155146Z.jfr\n+    ```\n+\n+\n+* #### `TargetRecordingsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of all the recordings in a target JVM.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/recordings`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of recordings,\n+    enclosed in square brackets.\n+\n+    The format for a recording is\n+    `{\"downloadUrl\":\"$DOWNLOAD_URL\",\"name\":\"$NAME\",\"reportUrl\":\"$REPORT_URL\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets/localhost/recordings\n+    [{\"downloadUrl\":\"http://0.0.0.0:8181/api/v1/targets/service:jmx:rmi:%2F%2F%2Fjndi%2Frmi:%2F%2Flocalhost:9091%2Fjmxrmi/recordings/foo\",\"reportUrl\":\"http://0.0.0.0:8181/api/v1/targets/service:jmx:rmi:%2F%2F%2Fjndi%2Frmi:%2F%2Flocalhost:9091%2Fjmxrmi/reports/foo\",\"id\":3,\"name\":\"foo\",\"state\":\"STOPPED\",\"startTime\":1599839450919,\"duration\":5000,\"continuous\":false,\"toDisk\":true,\"maxSize\":0,\"maxAge\":0}]\n+    ```\n+\n+\n+* #### `TargetRecordingsPostHandler`\n+\n+    ###### synopsis\n+    Starts a recording in a target JVM.\n+\n+    ###### request\n+    `/api/v1/targets/:targetId/recordings`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    **The request must include the following fields:**\n+\n+    `recordingName` - The name of the recording to create.\n+\n+    `events` - The events configuration for the recording.\n+    This can be a comma-seperated list of events, with each event having the\n+    form `$EVENT_ID:$OPTION=$VALUE`; or it can be a template, using the form\n+    `template=$TEMPLATE`.\n+\n+    **The request may include the following fields:**\n+\n+    `duration` - The duration of the recording, in seconds.\n+    If this field is not set, or if it is set to zero,\n+    the recording will be continuous,\n+    meaning it will run until it is manually stopped, for example with\n+    [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler).\n+\n+    ###### response\n+    `201` - The body is a descriptor of the newly started recording, in the form\n+    `{\"downloadUrl\":\"$DOWNLOAD_URL\",\"reportUrl\":\"$REPORT_URL\",\"id\":$ID,\"name\":\"$NAME\",\"state\":\"$STATE\",\"startTime\":$START_TIME,\"duration\":$DURATION,\"continuous\":$CONTINUOUS,\"toDisk\":$TO_DISK,\"maxSize\":$MAX_SIZE,\"maxAge\":$MAX_AGE}`.\n+\n+    `400` - An argument was invalid. The body is an error message.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl --data \"recordingName=foo&duration=5&events=template=ALL\" localhost:8181/api/v1/targets/localhost/recordings\n+    {\"downloadUrl\":\"http://0.0.0.0:8181/api/v1/targets/service:jmx:rmi:%2F%2F%2Fjndi%2Frmi:%2F%2Flocalhost:9091%2Fjmxrmi/recordings/foo\",\"reportUrl\":\"http://0.0.0.0:8181/api/v1/targets/service:jmx:rmi:%2F%2F%2Fjndi%2Frmi:%2F%2Flocalhost:9091%2Fjmxrmi/reports/foo\",\"id\":1,\"name\":\"foo\",\"state\":\"RUNNING\",\"startTime\":1599847667483,\"duration\":5000,\"continuous\":false,\"toDisk\":true,\"maxSize\":0,\"maxAge\":0}\n+    ```\n+\n+\n+* #### `TargetRecordingUploadPostHandler`\n+\n+    ###### synopsis\n+    Uploads a recording of a target JVM to the Grafana datasource\n+    that Container JFR is configured with\n+    (determined by the environment variable `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `POST /api/v1/targets/:targetId/recordings/:recordingName/upload`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to upload.\n+\n+    ###### response\n+    `200` - The body is the body from the response that Container JFR got\n+    after sending the upload request to the Grafana datasource.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target or the recording could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `501` - The Grafana datasource URL is malformed.\n+    The body is an error message.\n+\n+    `502` - Container JFR received an invalid response from the\n+    Grafana datasource after sending the upload request.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST localhost:8181/api/v1/targets/localhost/recordings/foo/upload\n+    Uploaded: file-uploads/72ee43b8-c858-4aef-ae7e-4bcf7d93ec7c\n+    Loaded: file-uploads/72ee43b8-c858-4aef-ae7e-4bcf7d93ec7c\n+    ```\n+\n+\n+* #### `TargetReportGetHandler`\n+\n+    ###### synopsis\n+    Returns a report of a recording of a target JVM.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/reports/:recordingName`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to get the report for.\n+\n+    ###### response\n+    `200` - The body is the requested report.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The report could not be found, or the target could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    [vma@victor-work ~]$ curl localhost:8181/api/v1/targets/localhost/reports/foo --output report.html\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  118k  100  118k    0     0   109k      0  0:00:01  0:00:01 --:--:--  109k\n+    ```\n+\n+\n+* #### `TargetSnapshotPostHandler`\n+\n+    ###### synopsis\n+    Creates a recording named `snapshot-n`, where `n` is a sequentially\n+    assigned ID, which contains information about all events recorded\n+    across all active recordings at the time of invocation.\n+\n+    ###### request\n+    `POST /api/v1/targets/:targetId/snapshot`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    ###### response\n+    `200` - The body is the name of the recording.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST localhost:8181/api/v1/targets/localhost/snapshot\n+    snapshot-2\n+    ```\n+\n+\n+* #### `TargetTemplateGetHandler`\n+\n+    ###### synopsis\n+    Returns an event template from a target JVM.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/templates/:templateName/type/:templateType`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `templateName` - The name of the template to get.\n+\n+    `templateType` - The type of the template to get.\n+\n+    ###### response\n+    `200` - The body is the requested event template.", "originalCommit": "1f502b29fd2b51fed1ab39d47b10c6a0027cf928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3OTQ0Ng==", "url": "https://github.com/cryostatio/cryostat/pull/266#discussion_r489779446", "bodyText": "Same re: JSON array", "author": "andrewazores", "createdAt": "2020-09-16T22:02:17Z", "path": "HTTP_API.md", "diffHunk": "@@ -0,0 +1,952 @@\n+# HTTP API\n+\n+## V1 API\n+\n+### Quick Reference\n+\n+| What you want to do                                                       | Which handler you should use                                            |\n+| ------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n+| **Miscellaneous**                                                         |                                                                         |\n+| Get a URL you can use to access Container JFR's WebSocket command channel | [`ClientUrlGetHandler`](#ClientUrlGetHandler)                           |\n+| Scan for and get a list of target JVMs visible to Container JFR           | [`TargetsGetHandler`](#TargetsGetHandler)                               |\n+| Get a static asset from the web client                                    | [`StaticAssetsGetHandler`](#StaticAssetsGetHandler)                     |\n+| Send a `GET` request to a path not supported by this API                  | [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler)               |\n+| Test user authentication                                                  | [`AuthPostHandler`](#AuthPostHandler)                                   |\n+| Get the URL of Container JFR's Grafana dashboard                          | [`GrafanaDashboardUrlGetHandler`](#GrafanaDashboardUrlGetHandler)       |\n+| Get the URL of Container JFR's Grafana datasource                         | [`GrafanaDatasourceUrlGetHandler`](#GrafanaDatasourceUrlGetHandler)     |\n+| Check the status of Container JFR's Grafana datasource and dashboard      | [`HealthGetHandler`](#HealthGetHandler)                                 |\n+| **Events and event templates**                                            |                                                                         |\n+| Get a list of event types that can be produced by a target JVM            | [`TargetEventsGetHandler`](#TargetEventsGetHandler)                     |\n+| Get a list of event templates known to a target JVM                       | [`TargetTemplatesGetHandler`](#TargetTemplatesGetHandler)               |\n+| Download a template from a target JVM                                     | [`TargetTemplateGetHandler`](#TargetTemplateGetHandler)                 |\n+| Upload an event template to Container JFR                                 | [`TemplatesPostHandler`](#TemplatesPostHandler)                         |\n+| Delete an event template that was uploaded to Container JFR               | [`TemplateDeleteHandler`](#TemplateDeleteHandler)                       |\n+| **Recordings in target JVMs**                                             |                                                                         |\n+| Get a list of recordings in a target JVM                                  | [`TargetRecordingsGetHandler`](#TargetRecordingsGetHandler)             |\n+| Create a snapshot recording in a target JVM                               | [`TargetSnapshotPostHandler`](#TargetSnapshotPostHandler)               |\n+| Start a recording in a target JVM                                         | [`TargetRecordingsPostHandler`](#TargetRecordingsPostHandler)           |\n+| Stop a recording in a target JVM                                          | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Delete a recording in a target JVM                                        | [`TargetRecordingDeleteHandler`](#TargetRecordingDeleteHandler)         |\n+| Download a recording in a target JVM                                      | [`TargetRecordingGetHandler`](#TargetRecordingGetHandler)               |\n+| Download a report of a recording in a target JVM                          | [`TargetReportGetHandler`](#TargetReportGetHandler)                     |\n+| Save a recording in a target JVM to persistent storage                    | [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)           |\n+| Upload a recording from a target JVM to the Grafana datasource            | [`TargetRecordingUploadPostHandler`](#TargetRecordingUploadPostHandler) |\n+| **Recordings in persistent storage**                                      |                                                                         |\n+| Get a list of recordings in persistent storage                            | [`RecordingsGetHandler`](#RecordingsGetHandler)                         |\n+| Upload a recording to persistent storage                                  | [`RecordingsPostHandler`](#RecordingsPostHandler)                       |\n+| Delete a recording from persistent storage                                | [`RecordingDeleteHandler`](#RecordingDeleteHandler)                     |\n+| Download a recording in persistent storage                                | [`RecordingGetHandler`](#RecordingGetHandler)                           |\n+| Download a report of a recording in persistent storage                    | [`ReportGetHandler`](#ReportGetHandler)                                 |\n+| Upload a recording from persistent storage to the Grafana datasource      | [`RecordingUploadPostHandler`](#RecordingUploadPostHandler)             |\n+\n+\n+### Core\n+\n+* #### `AuthPostHandler`\n+\n+    ###### synopsis\n+    Attempts user authenticaiton;\n+    used as a simple way to check a user authentication header.\n+\n+    ###### request\n+    `POST /api/v1/auth`\n+\n+    The request should include an `Authorization` header to be checked.\n+\n+    ###### response\n+    `200` - No body. Getting this response means that the header is valid.\n+\n+    `401` - User authentication failed. The body is an error message.\n+    Getting this response means that the header is invalid.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST --header \"Authorization: Basic dXNlcjpwYXNzCg==\" localhost:8181/api/v1/auth\n+    ```\n+\n+\n+* #### `ClientUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns a URL that a client can connect to, to access Container JFR's\n+    WebSocket command channel (see [COMMANDS.md](COMMANDS.md)).\n+\n+    ###### request\n+    `GET /api/v1/clienturl`\n+\n+    ###### response\n+    `200` - The body is `{\"clientUrl\":\"$URL\"}`.\n+\n+    `500` - The URL could not be constructed due to an error with the socket\n+    or the host. Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/clienturl\n+    {\"clientUrl\":\"ws://0.0.0.0:8181/api/v1/command\"}\n+    ```\n+\n+\n+* #### `GrafanaDashboardUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana dashboard that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DASHBOARD_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_dashboard_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDashboardUrl\":\"$URL\"}`.\n+\n+    `500` - Container JFR is not configured with a Grafana dashboard.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_dashboard_url\n+    {\"grafanaDashboardUrl\":\"http://localhost:3000/d/CazTnbSMz/\"}\n+    ```\n+\n+\n+* #### `GrafanaDatasourceUrlGetHandler`\n+\n+    ###### synopsis\n+    Returns the URL of the Grafana datasource that Container JFR\n+    is configured with (determined by the environment variable\n+    `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `GET /api/v1/grafana_datasource_url`\n+\n+    ###### response\n+    `200` - The body is `{\"grafanaDatasourceUrl\":\"$URL\"}`\n+\n+    `500` - Container JFR is not configured with a Grafana datasource.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/grafana_datasource_url\n+    {\"grafanaDatasourceUrl\":\"http://localhost:8080\"}\n+    ```\n+\n+\n+* #### `HealthGetHandler`\n+\n+    ###### synopsis\n+    Returns whether or not the Grafana datasource and Grafana dashbaord\n+    that Container JFR is configured with are running properly.\n+\n+    ###### request\n+    `GET /health`\n+\n+    ###### response\n+    `200` - The body is\n+    `{\"datasourceAvailable\":$DATASOURCE_AVAILABLE,\"dashboardAvailable\":$DASHBOARD_AVAILABLE}`.\n+\n+    `$DATASOURCE_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana datasource and that datasource responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `$DASHBOARD_AVAILABLE` is `true` if  Container JFR is configured with a\n+    Grafana dashboard and that dashboard responds to a `GET` request\n+    with a `200`, and it is `false` otherwise.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/health\n+    {\"dashboardAvailable\":false,\"datasourceAvailable\":false}\n+    ```\n+\n+\n+* #### `StaticAssetsGetHandler`\n+\n+    ###### synopsis\n+    Returns a static asset of the Container JFR web client.\n+\n+    ###### request\n+    `GET /*`\n+\n+    The path should be the directory path of the desired asset,\n+    assuming a root of\n+    `target/assets/app/resources/com/redhat/rhjmc/containerjfr/net/web/`.\n+\n+    ###### response\n+\n+    `200` - The body is the requested asset. Note that if the requested asset\n+    does not exist or the path is invalid, the request will not be handled here\n+    and instead  will be routed to\n+    [`WebClientAssetsGetHandler`](#WebClientAssetsGetHandler).\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/images/pfbg_992@2x.jpg --output pfbg_992@2x.jpg\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  574k  100  574k    0     0  43.1M      0 --:--:-- --:--:-- --:--:-- 43.1M\n+    ```\n+\n+\n+* #### `TargetsGetHandler`\n+\n+    ###### synopsis\n+    Scans for and returns discoverable target JVMs.\n+\n+    ###### request\n+    `GET /api/v1/targets`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of targets,\n+    enclosed in square brackets.\n+\n+    The format for a target is\n+    `{\"connectUrl\":\"$CONNECT_URL\",\"alias\":\"$ALIAS\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets\n+    [{\"connectUrl\":\"service:jmx:rmi:///jndi/rmi://container-jfr:9091/jmxrmi\",\"alias\":\"com.redhat.rhjmc.containerjfr.ContainerJfr\"}]\n+    ```\n+\n+\n+* #### `WebClientAssetsGetHandler`\n+\n+    ###### synopsis\n+    Handles all `GET` requests to paths not covered by another handler;\n+    returns a simple `index.html`.\n+\n+    ###### request\n+    `GET /*`\n+\n+    ###### response\n+    `200` - The body is the Container JFR web client's\n+    `index.html` HTML document.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/foo\n+    <!doctype html><html lang=\"en-US\"><head><meta charset=\"utf-8\"><title>ContainerJFR</title><meta id=\"appName\" name=\"application-name\" content=\"ContainerJFR\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><link rel=\"icon\" type=\"image/png\" href=\"https://www.patternfly.org/components/patternfly/dist/img/favicon.ico\"><base href=\"/\"><link href=\"app.css\" rel=\"stylesheet\"></head><body><noscript>Enabling JavaScript is required to run this app.</noscript><div id=\"root\"></div><script src=\"app.bundle.js\"></script></body></html>\n+    ```\n+\n+\n+### Flight Recorder\n+\n+* #### `RecordingDeleteHandler`\n+\n+    ###### synopsis\n+    Deletes a recording that was saved to persistent storage.\n+    This does not affect any recordings in any target JVM's JFR buffer.\n+\n+    ###### request\n+    `DELETE /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to delete.\n+\n+    ###### response\n+    `200` - No body.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be deleted.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X DELETE localhost:8181/api/v1/recordings/localhost_foo_20200910T213341Z.jfr\n+    ```\n+\n+\n+* #### `RecordingGetHandler`\n+\n+    ###### synopsis\n+    Returns a recording that was saved to persistent storage,\n+    as an octet stream.\n+\n+    ###### request\n+    `GET /api/v1/recordings/:recordingName`\n+\n+    `recordingName` - The name of the saved recording to get.\n+\n+    ###### response\n+    `200` - The body is an octet stream consisting of the requested recording.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be written to the response.\n+    Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings/localhost_foo_20200910T214559Z.jfr --output foo.jfr\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  942k  100  942k    0     0  61.3M      0 --:--:-- --:--:-- --:--:-- 61.3M\n+    ```\n+\n+\n+* #### `RecordingsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of the recordings that are saved in persistent storage.\n+\n+    ###### request\n+    `GET /api/v1/recordings`\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of recordings,\n+    enclosed in square brackets.\n+\n+    The format for a recording is\n+    `{\"downloadUrl\":\"$DOWNLOAD_URL\",\"name\":\"$NAME\",\"reportUrl\":\"$REPORT_URL\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `501` - The archive path where recordings are saved could not be accessed.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/recordings\n+    [{\"downloadUrl\":\"http://192.168.0.109:8181/api/v1/recordings/localhost_foo_20200903T202547Z.jfr\",\"name\":\"localhost_foo_20200903T202547Z.jfr\",\"reportUrl\":\"http://192.168.0.109:8181/api/v1/reports/localhost_foo_20200903T202547Z.jfr\"}]\n+    ```\n+\n+\n+* #### `RecordingsPostHandler`\n+\n+    ###### synopsis\n+    Uploads a recording from the client to Container JFR's persistent storage.\n+\n+    ###### request\n+    `POST /api/v1/recordings`\n+\n+    The recording should be uploaded in a form with the name `recording`.\n+    The filename of the recording must follow the format that Container JFR\n+    uses for recordings it saves itself\n+    (with [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler)).\n+\n+    ###### response\n+    `200` - The body is `{\"name\":\"$NAME\"}`, where `$NAME` is the name of the\n+    recording that is now saved in persistent storage.\n+    This name will be different from the uploaded recording's filename\n+    if another recording with the same name already existed.\n+\n+    `400` - The recording submission is invalid. The body is an error\n+    message.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `503` - `CONTAINER_JFR_ARCHIVE_PATH` is an invalid directory.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl --form \"recording=@localhost_foo_20200903T202547Z.jfr\" localhost:8181/api/v1/recordings\n+    {\"name\":\"localhost_foo_20200903T202547Z.2.jfr\"}\n+    ```\n+\n+\n+* #### `RecordingUploadPostHandler`\n+\n+    ###### synopsis\n+    Uploads a recording that was saved to persistent storage to\n+    the Grafana datasource that Container JFR is configured with\n+    (determined by the environment variable `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `POST /api/v1/recordings/:recordingName/upload`\n+\n+    `recordingName` - The name of the saved recording to upload.\n+\n+    ###### response\n+    `200` - The body is the body of the response that Container JFR got\n+    after sending the upload request to the Grafana datasource server.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The recording could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `501` - The Grafana datasource URL is malformed.\n+    The body is an error message.\n+\n+    `502` - Container JFR received an invalid response from the\n+    Grafana datasource server after sending the upload request.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST localhost:8181/api/v1/recordings/localhost_foo_20200911T144545Z.jfr/upload\n+    Uploaded: file-uploads/555f4dab-240b-486b-b336-2d0e5f43e7cd\n+    Loaded: file-uploads/555f4dab-240b-486b-b336-2d0e5f43e7cd\n+    ```\n+\n+\n+* #### `ReportGetHandler`\n+\n+    ###### synopsis\n+    Returns the report of a recording that was saved to persistent storage.\n+\n+    ###### request\n+    `GET /api/v1/reports/:recordingName`\n+\n+    `recordingName` - The name of the recording to get the report for.\n+\n+    ###### response\n+    `200` - The body is the requested report.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The report could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/reports/localhost_foo_20200911T144545Z.jfr --output report.html\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  116k  100  116k    0     0   134k      0 --:--:-- --:--:-- --:--:--  134k\n+    ```\n+\n+\n+* #### `TargetEventsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of event types that can be produced by a target JVM.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/events`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of event types,\n+    enclosed in square brackets.\n+\n+    The format for an event type is\n+    `{\"name\":\"$NAME\",\"typeId\":\"$TYPE_ID\",\"description\":\"$DESCRIPTION\",\n+    \"category\":[$CATEGORIES],\"options\":{$OPTIONS}}`\n+\n+    So a list with no events looks like `[]`,\n+    a list with one event looks like `[{...}]`,\n+    and a list with two events looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets/localhost/events --output events\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100 47013  100 47013    0     0   866k      0 --:--:-- --:--:-- --:--:--  866k\n+    ```\n+\n+\n+* #### `TargetRecordingDeleteHandler`\n+\n+    ###### synopsis\n+    Deletes a recording from a target JVM, removing it from the target JVM\n+    and freeing the buffer memory used. The recording will be stopped if\n+    it is running at the time of deletion.\n+\n+    ###### request\n+    `DELETE /api/v1/targets/:targetId/recordings/:recordingName`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to delete.\n+\n+    ###### response\n+    `200` - No body.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target or the recording could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X DELETE localhost:8181/api/v1/targets/localhost/recordings/foo\n+    ```\n+\n+\n+* #### `TargetRecordingGetHandler`\n+\n+    ###### synopsis\n+    Returns a recording of a target JVM, as an octet stream.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/recordings/:recordingName`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to get.\n+\n+    ###### response\n+    `200` - The body is an octet stream consisting of the requested recording.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target or the recording could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - The recording was found but it could not be written to the\n+    response. Or there was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets/localhost/recordings/foo --output foo.jfr\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  530k    0  530k    0     0  9303k      0 --:--:-- --:--:-- --:--:-- 9303k\n+    ```\n+\n+* #### `TargetRecordingPatchHandler`\n+\n+    ###### synopsis\n+    **STOP**\n+\n+    Stops a recording in a target JVM.\n+\n+    **SAVE**\n+\n+    Saves a recording in a target JVM to persistent storage.\n+    The default directory used is `/flghtrecordings`, but the environment\n+    variable `CONTAINER_JFR_ARCHIVE_PATH` can be used to specify a different\n+    path.\n+\n+    ###### request\n+    `PATCH /api/v1/targets/:targetId/recordings/:recordingName`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to patch.\n+\n+    The body must be either `STOP`, to stop the recording,\n+    or `SAVE`, to save the recording (case insensitive).\n+\n+    ###### response\n+    **General**\n+\n+    `400` - The operation is unsupported. The body is an error message.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target or the recording could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    **STOP**\n+\n+    `200` - No body.\n+\n+    `500` - The recording could not be stopped. The body is an error message.\n+\n+    **SAVE**\n+\n+    `200` - The body is the name of the recording that was saved.\n+    Note that this name will be different from the recording's original name,\n+    to add metadata.\n+\n+    ###### example\n+    ```\n+    $ curl -X PATCH --data \"STOP\" localhost:8181/api/v1/targets/localhost/recordings/foo\n+\n+    $ curl -X PATCH --data \"SAVE\" http://localhost:8181/api/v1/targets/localhost/recordings/foo\n+    localhost_foo_20200911T155146Z.jfr\n+    ```\n+\n+\n+* #### `TargetRecordingsGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of all the recordings in a target JVM.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/recordings`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of recordings,\n+    enclosed in square brackets.\n+\n+    The format for a recording is\n+    `{\"downloadUrl\":\"$DOWNLOAD_URL\",\"name\":\"$NAME\",\"reportUrl\":\"$REPORT_URL\"}`.\n+\n+    So a list with no recordings looks like `[]`,\n+    a list with one recording looks like `[{...}]`,\n+    and a list with two recordings looks like `[{...},{...}]`.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets/localhost/recordings\n+    [{\"downloadUrl\":\"http://0.0.0.0:8181/api/v1/targets/service:jmx:rmi:%2F%2F%2Fjndi%2Frmi:%2F%2Flocalhost:9091%2Fjmxrmi/recordings/foo\",\"reportUrl\":\"http://0.0.0.0:8181/api/v1/targets/service:jmx:rmi:%2F%2F%2Fjndi%2Frmi:%2F%2Flocalhost:9091%2Fjmxrmi/reports/foo\",\"id\":3,\"name\":\"foo\",\"state\":\"STOPPED\",\"startTime\":1599839450919,\"duration\":5000,\"continuous\":false,\"toDisk\":true,\"maxSize\":0,\"maxAge\":0}]\n+    ```\n+\n+\n+* #### `TargetRecordingsPostHandler`\n+\n+    ###### synopsis\n+    Starts a recording in a target JVM.\n+\n+    ###### request\n+    `/api/v1/targets/:targetId/recordings`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    **The request must include the following fields:**\n+\n+    `recordingName` - The name of the recording to create.\n+\n+    `events` - The events configuration for the recording.\n+    This can be a comma-seperated list of events, with each event having the\n+    form `$EVENT_ID:$OPTION=$VALUE`; or it can be a template, using the form\n+    `template=$TEMPLATE`.\n+\n+    **The request may include the following fields:**\n+\n+    `duration` - The duration of the recording, in seconds.\n+    If this field is not set, or if it is set to zero,\n+    the recording will be continuous,\n+    meaning it will run until it is manually stopped, for example with\n+    [`TargetRecordingPatchHandler`](#TargetRecordingPatchHandler).\n+\n+    ###### response\n+    `201` - The body is a descriptor of the newly started recording, in the form\n+    `{\"downloadUrl\":\"$DOWNLOAD_URL\",\"reportUrl\":\"$REPORT_URL\",\"id\":$ID,\"name\":\"$NAME\",\"state\":\"$STATE\",\"startTime\":$START_TIME,\"duration\":$DURATION,\"continuous\":$CONTINUOUS,\"toDisk\":$TO_DISK,\"maxSize\":$MAX_SIZE,\"maxAge\":$MAX_AGE}`.\n+\n+    `400` - An argument was invalid. The body is an error message.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl --data \"recordingName=foo&duration=5&events=template=ALL\" localhost:8181/api/v1/targets/localhost/recordings\n+    {\"downloadUrl\":\"http://0.0.0.0:8181/api/v1/targets/service:jmx:rmi:%2F%2F%2Fjndi%2Frmi:%2F%2Flocalhost:9091%2Fjmxrmi/recordings/foo\",\"reportUrl\":\"http://0.0.0.0:8181/api/v1/targets/service:jmx:rmi:%2F%2F%2Fjndi%2Frmi:%2F%2Flocalhost:9091%2Fjmxrmi/reports/foo\",\"id\":1,\"name\":\"foo\",\"state\":\"RUNNING\",\"startTime\":1599847667483,\"duration\":5000,\"continuous\":false,\"toDisk\":true,\"maxSize\":0,\"maxAge\":0}\n+    ```\n+\n+\n+* #### `TargetRecordingUploadPostHandler`\n+\n+    ###### synopsis\n+    Uploads a recording of a target JVM to the Grafana datasource\n+    that Container JFR is configured with\n+    (determined by the environment variable `GRAFANA_DATASOURCE_URL`).\n+\n+    ###### request\n+    `POST /api/v1/targets/:targetId/recordings/:recordingName/upload`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to upload.\n+\n+    ###### response\n+    `200` - The body is the body from the response that Container JFR got\n+    after sending the upload request to the Grafana datasource.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target or the recording could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    `501` - The Grafana datasource URL is malformed.\n+    The body is an error message.\n+\n+    `502` - Container JFR received an invalid response from the\n+    Grafana datasource after sending the upload request.\n+    The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST localhost:8181/api/v1/targets/localhost/recordings/foo/upload\n+    Uploaded: file-uploads/72ee43b8-c858-4aef-ae7e-4bcf7d93ec7c\n+    Loaded: file-uploads/72ee43b8-c858-4aef-ae7e-4bcf7d93ec7c\n+    ```\n+\n+\n+* #### `TargetReportGetHandler`\n+\n+    ###### synopsis\n+    Returns a report of a recording of a target JVM.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/reports/:recordingName`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `recordingName` - The name of the recording to get the report for.\n+\n+    ###### response\n+    `200` - The body is the requested report.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The report could not be found, or the target could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    [vma@victor-work ~]$ curl localhost:8181/api/v1/targets/localhost/reports/foo --output report.html\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100  118k  100  118k    0     0   109k      0  0:00:01  0:00:01 --:--:--  109k\n+    ```\n+\n+\n+* #### `TargetSnapshotPostHandler`\n+\n+    ###### synopsis\n+    Creates a recording named `snapshot-n`, where `n` is a sequentially\n+    assigned ID, which contains information about all events recorded\n+    across all active recordings at the time of invocation.\n+\n+    ###### request\n+    `POST /api/v1/targets/:targetId/snapshot`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    ###### response\n+    `200` - The body is the name of the recording.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target could not be found. The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl -X POST localhost:8181/api/v1/targets/localhost/snapshot\n+    snapshot-2\n+    ```\n+\n+\n+* #### `TargetTemplateGetHandler`\n+\n+    ###### synopsis\n+    Returns an event template from a target JVM.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/templates/:templateName/type/:templateType`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    `templateName` - The name of the template to get.\n+\n+    `templateType` - The type of the template to get.\n+\n+    ###### response\n+    `200` - The body is the requested event template.\n+\n+    `401` - User authentication failed. The body is an error message.\n+\n+    `404` - The target or the template or the template type could not be found.\n+    The body is an error message.\n+\n+    `407` - JMX authentication failed. The body is an error message.\n+\n+    `500` - There was an unexpected error. The body is an error message.\n+\n+    ###### example\n+    ```\n+    $ curl localhost:8181/api/v1/targets/localhost/templates/Profiling/type/TARGET --output Continuous.jfc\n+      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n+                                     Dload  Upload   Total   Spent    Left  Speed\n+    100 30133  100 30133    0     0   239k      0 --:--:-- --:--:-- --:--:--  239k\n+    ```\n+\n+\n+* #### `TargetTemplatesGetHandler`\n+\n+    ###### synopsis\n+    Returns a list of event templates known to a target JVM.\n+\n+    ###### request\n+    `GET /api/v1/targets/:targetId/templates`\n+\n+    `targetId` - The location of the target JVM to connect to,\n+    in the form of a `service:rmi:jmx://` JMX Service URL, or `hostname:port`.\n+\n+    ###### response\n+    `200` - The body consists of a comma-seperated list of templates,\n+    enclosed in square brackets.", "originalCommit": "1f502b29fd2b51fed1ab39d47b10c6a0027cf928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4b9cd9b69b3cac63b4de884a697698aa8b7554b6", "url": "https://github.com/cryostatio/cryostat/commit/4b9cd9b69b3cac63b4de884a697698aa8b7554b6", "message": "Fix typos", "committedDate": "2020-09-17T15:24:15Z", "type": "commit"}, {"oid": "8ef89cfc939aac54f5b796ecaa591160fcfb4164", "url": "https://github.com/cryostatio/cryostat/commit/8ef89cfc939aac54f5b796ecaa591160fcfb4164", "message": "Make changes to AuthPostHandler section", "committedDate": "2020-09-17T15:53:11Z", "type": "commit"}, {"oid": "a89e43d02f9371c94ba4f121c266e0bc6f87394c", "url": "https://github.com/cryostatio/cryostat/commit/a89e43d02f9371c94ba4f121c266e0bc6f87394c", "message": "Add info about X-JMX-Authenticate header", "committedDate": "2020-09-17T16:42:50Z", "type": "commit"}, {"oid": "4f49e1046350e79e113664755b02fcf29b030a6b", "url": "https://github.com/cryostatio/cryostat/commit/4f49e1046350e79e113664755b02fcf29b030a6b", "message": "Change \"comma-separated\" to \"JSON array\"", "committedDate": "2020-09-17T16:57:34Z", "type": "commit"}, {"oid": "36445cd24d72bba65acc9f59af1b7d2283bba777", "url": "https://github.com/cryostatio/cryostat/commit/36445cd24d72bba65acc9f59af1b7d2283bba777", "message": "Add more details about RecordingsPostHandler's file names\n\nAlso fixed a small bug in the regex; the dot before the counter\nneeded a double backslash.", "committedDate": "2020-09-18T18:29:04Z", "type": "commit"}, {"oid": "bd1105c3ae1769b5e419de583a3bcead99b36e0f", "url": "https://github.com/cryostatio/cryostat/commit/bd1105c3ae1769b5e419de583a3bcead99b36e0f", "message": "Change `407` to `427`\n\nhttps://github.com/rh-jmc-team/container-jfr/pull/271", "committedDate": "2020-09-18T18:31:49Z", "type": "commit"}, {"oid": "903a9ae4823fe3f961624a14d0dc9e8306311893", "url": "https://github.com/cryostatio/cryostat/commit/903a9ae4823fe3f961624a14d0dc9e8306311893", "message": "Specify return body file types", "committedDate": "2020-09-18T18:46:01Z", "type": "commit"}, {"oid": "12155fa6fa73d3e2fccfa548ad9c4a5ecf7dc4f3", "url": "https://github.com/cryostatio/cryostat/commit/12155fa6fa73d3e2fccfa548ad9c4a5ecf7dc4f3", "message": "Fix `TargetRecordingsGetHandler` recording format", "committedDate": "2020-09-18T19:05:34Z", "type": "commit"}, {"oid": "597a09de215b4adffa9d943221f5a7cba78fd3ea", "url": "https://github.com/cryostatio/cryostat/commit/597a09de215b4adffa9d943221f5a7cba78fd3ea", "message": "Remove accidental shell prompts", "committedDate": "2020-09-18T19:07:52Z", "type": "commit"}, {"oid": "5aa80c40a3cdf1bf4929999cf7a47e556a7dba17", "url": "https://github.com/cryostatio/cryostat/commit/5aa80c40a3cdf1bf4929999cf7a47e556a7dba17", "message": "Change \"persistent storage\" to \"archive\"", "committedDate": "2020-09-18T20:45:43Z", "type": "commit"}, {"oid": "e57472dad5b3485c61396973db7d9431ee5b065e", "url": "https://github.com/cryostatio/cryostat/commit/e57472dad5b3485c61396973db7d9431ee5b065e", "message": "Add note about Health handler being useful for checking general CJFR health", "committedDate": "2020-09-18T20:56:49Z", "type": "commit"}, {"oid": "012c295da3dc0c5c89c84eba61291538955a7c79", "url": "https://github.com/cryostatio/cryostat/commit/012c295da3dc0c5c89c84eba61291538955a7c79", "message": "Add info about `X-WWW-Authenticate` header", "committedDate": "2020-09-21T15:45:56Z", "type": "commit"}, {"oid": "5f6ed84dddb97f79a72f4d08e51b12a92517e61e", "url": "https://github.com/cryostatio/cryostat/commit/5f6ed84dddb97f79a72f4d08e51b12a92517e61e", "message": "Add note about using percent-encoding", "committedDate": "2020-09-21T15:55:19Z", "type": "commit"}, {"oid": "9d0b9041a962ae32dd1bf0ee037efc99b187c7d1", "url": "https://github.com/cryostatio/cryostat/commit/9d0b9041a962ae32dd1bf0ee037efc99b187c7d1", "message": "Add recordingOptions handlers; add new recording options", "committedDate": "2020-09-21T19:14:18Z", "type": "commit"}]}