{"pr_number": 491, "pr_title": "Update readmes to match common design (Symbology category) 1/2", "pr_createdAt": "2020-04-22T09:25:20Z", "pr_url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/491", "timeline": [{"oid": "d8fc498c6cfc322cb0f78d3453254078df0c4a56", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/d8fc498c6cfc322cb0f78d3453254078df0c4a56", "message": "update readmes to match common design", "committedDate": "2020-04-22T09:18:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk2NDkzOQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/491#discussion_r413964939", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. Create a `SymbolDicitonary` from a dictionary (stylx) file.\n          \n          \n            \n            1. Create a `SymbolDictionary` from a dictionary (stylx) file.", "author": "Rachael-E", "createdAt": "2020-04-23T16:57:10Z", "path": "symbology/graphics-overlay-dictionary-renderer-3D/README.md", "diffHunk": "@@ -2,15 +2,19 @@\n \n Display MIL-STD-2525. military symbology in 3D.\n \n-The dictionary renderer creates these graphics using a local mil2525d style file included in the SDK's resources/symbols directory plus an XML file with key-value attributes for each graphic.\n+![Image of graphics overlay dictionary renderer 3D](GraphicsOverlayDictionaryRenderer3D.png)\n \n-![](GraphicsOverlayDictionaryRenderer3D.png)\n+## Use case\n \n-## How it works\n+Use a dictionary renderer on a graphics overlay to display more transient data, such as military messages coming through a local tactical network.\n+\n+## How to use the sample\n+\n+When launched, this sample displays a scene with a dictionary renderer. Pan and zoom to explore the scene.\n \n-To apply a `DictionaryRenderer` and display mil2525d graphics in 3D:\n+## How it works\n \n-1. Create a `SymbolDicitonary` with the \"mil2525d\" specification type: `SymbolDictionary(\"mil2525d\")`.\n+1. Create a `SymbolDicitonary` from a dictionary (stylx) file.", "originalCommit": "d8fc498c6cfc322cb0f78d3453254078df0c4a56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk2NTgyNQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/491#discussion_r413965825", "bodyText": "some excess spaces here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            *   PictureMarkerSymbol\n          \n          \n            \n            * PictureMarkerSymbol", "author": "Rachael-E", "createdAt": "2020-04-23T16:58:28Z", "path": "symbology/picture-marker-symbol/README.md", "diffHunk": "@@ -1,32 +1,33 @@\n-# Picture Marker Symbol\n+# Picture marker symbol\n \n Use pictures for markers.\n \n-![](PictureMarkerSymbol.png)\n+![Image of picture marker symbol](PictureMarkerSymbol.png)\n+\n+## Use case\n+\n+When marking geoelements on a map, using custom, unique symbols can be helpful for highlighting and differentiating between locations. For example, a tourism office may use pictures of landmarks as symbols on an online map or app, to help prospective visitors to orient themselves more easily around a city.\n \n ## How to use the sample\n \n-The picture marker symbols that you see in the app are all constructed from different types of resources:\n-  - campsite, constructed from a URL\n-  - blue pin with a star, stored in the resource folder that comes with the application\n-  - orange pin, created from a file path on disk (which is written to disk when the app starts and cleaned up when the app closes)\n+When launched, this sample displays a map with three picture marker symbols. Pan and zoom to explore the map.\n \n ## How it works\n \n-To display a `PictureMarkerSymbol`:\n-\n-1. Create the `ArcGISMap`'s with `Basemap`.\n-2. Create the `GraphicsOverlay` and add it to the `MapView` using `MapView.getGraphicsOverlays().add()`.\n-3. Add the map to the view, `MapView.setMap()`.\n-4. Use the constructor `PictureMarkerSymbol(String uri)` to create a symbol from a specified URI (URL, a web page, or from an absolute path to a file that is stored locally).\n-5. Use the constructor `PictureMarkerSymbol(Image)` to create a symbol from a local image.\n-6. Lastly once a symbol is created it will need to be added to a `Graphic`. Set the graphic to the graphics overlay using the `GraphicsOverlay.getGraphics().add()` method indicating the location `Point`.\n+1. Create a `PictureMarkerSymbol` using the URI to an online or local image.\n+2. Create a `Graphic` and set its symbol to the `PictureMarkerSymbol`.\n \n ## Relevant API\n \n-* ArcGISMap\n-* Graphic\n-* GraphicsOverlay\n-* MapView\n-* PictureMarkerSymbol\n-* Point\n+*   PictureMarkerSymbol", "originalCommit": "d8fc498c6cfc322cb0f78d3453254078df0c4a56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk2NjY4Nw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/491#discussion_r413966687", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Blue pin with a star stored in the resource folder that comes with the application\n          \n          \n            \n             * Blue pin with a star and orange pin stored in the resources folder that comes with the application", "author": "Rachael-E", "createdAt": "2020-04-23T16:59:40Z", "path": "symbology/picture-marker-symbol/README.md", "diffHunk": "@@ -1,32 +1,33 @@\n-# Picture Marker Symbol\n+# Picture marker symbol\n \n Use pictures for markers.\n \n-![](PictureMarkerSymbol.png)\n+![Image of picture marker symbol](PictureMarkerSymbol.png)\n+\n+## Use case\n+\n+When marking geoelements on a map, using custom, unique symbols can be helpful for highlighting and differentiating between locations. For example, a tourism office may use pictures of landmarks as symbols on an online map or app, to help prospective visitors to orient themselves more easily around a city.\n \n ## How to use the sample\n \n-The picture marker symbols that you see in the app are all constructed from different types of resources:\n-  - campsite, constructed from a URL\n-  - blue pin with a star, stored in the resource folder that comes with the application\n-  - orange pin, created from a file path on disk (which is written to disk when the app starts and cleaned up when the app closes)\n+When launched, this sample displays a map with three picture marker symbols. Pan and zoom to explore the map.\n \n ## How it works\n \n-To display a `PictureMarkerSymbol`:\n-\n-1. Create the `ArcGISMap`'s with `Basemap`.\n-2. Create the `GraphicsOverlay` and add it to the `MapView` using `MapView.getGraphicsOverlays().add()`.\n-3. Add the map to the view, `MapView.setMap()`.\n-4. Use the constructor `PictureMarkerSymbol(String uri)` to create a symbol from a specified URI (URL, a web page, or from an absolute path to a file that is stored locally).\n-5. Use the constructor `PictureMarkerSymbol(Image)` to create a symbol from a local image.\n-6. Lastly once a symbol is created it will need to be added to a `Graphic`. Set the graphic to the graphics overlay using the `GraphicsOverlay.getGraphics().add()` method indicating the location `Point`.\n+1. Create a `PictureMarkerSymbol` using the URI to an online or local image.\n+2. Create a `Graphic` and set its symbol to the `PictureMarkerSymbol`.\n \n ## Relevant API\n \n-* ArcGISMap\n-* Graphic\n-* GraphicsOverlay\n-* MapView\n-* PictureMarkerSymbol\n-* Point\n+*   PictureMarkerSymbol\n+\n+## About the data\n+\n+The picture marker symbols in this sample are all constructed from different types of resources:\n+ * [Campsite symbol constructed from a URL](http://sampleserver6.arcgisonline.com/arcgis/rest/services/Recreation/FeatureServer/0/images/e82f744ebb069bb35b234b3fea46deae)\n+ * Blue pin with a star stored in the resource folder that comes with the application", "originalCommit": "d8fc498c6cfc322cb0f78d3453254078df0c4a56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk2Njk4Nw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/491#discussion_r413966987", "bodyText": "can delete this part as we don't do this with Java", "author": "Rachael-E", "createdAt": "2020-04-23T17:00:06Z", "path": "symbology/picture-marker-symbol/README.md", "diffHunk": "@@ -1,32 +1,33 @@\n-# Picture Marker Symbol\n+# Picture marker symbol\n \n Use pictures for markers.\n \n-![](PictureMarkerSymbol.png)\n+![Image of picture marker symbol](PictureMarkerSymbol.png)\n+\n+## Use case\n+\n+When marking geoelements on a map, using custom, unique symbols can be helpful for highlighting and differentiating between locations. For example, a tourism office may use pictures of landmarks as symbols on an online map or app, to help prospective visitors to orient themselves more easily around a city.\n \n ## How to use the sample\n \n-The picture marker symbols that you see in the app are all constructed from different types of resources:\n-  - campsite, constructed from a URL\n-  - blue pin with a star, stored in the resource folder that comes with the application\n-  - orange pin, created from a file path on disk (which is written to disk when the app starts and cleaned up when the app closes)\n+When launched, this sample displays a map with three picture marker symbols. Pan and zoom to explore the map.\n \n ## How it works\n \n-To display a `PictureMarkerSymbol`:\n-\n-1. Create the `ArcGISMap`'s with `Basemap`.\n-2. Create the `GraphicsOverlay` and add it to the `MapView` using `MapView.getGraphicsOverlays().add()`.\n-3. Add the map to the view, `MapView.setMap()`.\n-4. Use the constructor `PictureMarkerSymbol(String uri)` to create a symbol from a specified URI (URL, a web page, or from an absolute path to a file that is stored locally).\n-5. Use the constructor `PictureMarkerSymbol(Image)` to create a symbol from a local image.\n-6. Lastly once a symbol is created it will need to be added to a `Graphic`. Set the graphic to the graphics overlay using the `GraphicsOverlay.getGraphics().add()` method indicating the location `Point`.\n+1. Create a `PictureMarkerSymbol` using the URI to an online or local image.\n+2. Create a `Graphic` and set its symbol to the `PictureMarkerSymbol`.\n \n ## Relevant API\n \n-* ArcGISMap\n-* Graphic\n-* GraphicsOverlay\n-* MapView\n-* PictureMarkerSymbol\n-* Point\n+*   PictureMarkerSymbol\n+\n+## About the data\n+\n+The picture marker symbols in this sample are all constructed from different types of resources:\n+ * [Campsite symbol constructed from a URL](http://sampleserver6.arcgisonline.com/arcgis/rest/services/Recreation/FeatureServer/0/images/e82f744ebb069bb35b234b3fea46deae)\n+ * Blue pin with a star stored in the resource folder that comes with the application\n+ * Orange pin created from a file path on disk (which is written to disk when the app starts and cleaned up when the app closes).", "originalCommit": "d8fc498c6cfc322cb0f78d3453254078df0c4a56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk2OTMyMw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/491#discussion_r413969323", "bodyText": "strictly speaking, the symbol is applied to a Graphic's fill colour etc. The graphic is built using the polygon: and therefore a graphic with a polygon geometry is styled.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Change a polygon's fill color, outline color, and fill style properties.\n          \n          \n            \n            Change a graphic's fill color, outline color, and fill style properties.", "author": "Rachael-E", "createdAt": "2020-04-23T17:03:25Z", "path": "symbology/simple-fill-symbol/README.md", "diffHunk": "@@ -1,37 +1,38 @@\n-# Simple Fill Symbol\n+# Simple fill symbol\n \n-Change a graphic's fill color, outline, and style properties.\n+Change a polygon's fill color, outline color, and fill style properties.", "originalCommit": "d8fc498c6cfc322cb0f78d3453254078df0c4a56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk2OTQ0OA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/491#discussion_r413969448", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Customize the appearance of a polygon with a color and style scheme suitable for the data. For example, a polygon with a brown 'forward-diagonal' fill style could represent an area of artificial ground mapped on a geological map.  \n          \n          \n            \n            Customize the appearance of a graphic with a color and style scheme suitable for the data. For example, a polygon with a brown 'forward-diagonal' fill style could represent an area of artificial ground mapped on a geological map.", "author": "Rachael-E", "createdAt": "2020-04-23T17:03:39Z", "path": "symbology/simple-fill-symbol/README.md", "diffHunk": "@@ -1,37 +1,38 @@\n-# Simple Fill Symbol\n+# Simple fill symbol\n \n-Change a graphic's fill color, outline, and style properties.\n+Change a polygon's fill color, outline color, and fill style properties.\n \n-![](SimpleFillSymbol.png)\n+![Image of simple fill symbol](SimpleFillSymbol.png)\n+\n+## Use case\n+\n+Customize the appearance of a polygon with a color and style scheme suitable for the data. For example, a polygon with a brown 'forward-diagonal' fill style could represent an area of artificial ground mapped on a geological map.  ", "originalCommit": "d8fc498c6cfc322cb0f78d3453254078df0c4a56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk3MDMwNw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/491#discussion_r413970307", "bodyText": "removing extra spaces\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            *   Graphic\n          \n          \n            \n            *   GraphicsOverlay\n          \n          \n            \n            *   PointCollection\n          \n          \n            \n            *   Polygon\n          \n          \n            \n            *   SimpleFillSymbol\n          \n          \n            \n            *   SimpleLineSymbol\n          \n          \n            \n            * Graphic\n          \n          \n            \n            * GraphicsOverlay\n          \n          \n            \n            * PointCollection\n          \n          \n            \n            * Polygon\n          \n          \n            \n            * SimpleFillSymbol\n          \n          \n            \n            * SimpleLineSymbol", "author": "Rachael-E", "createdAt": "2020-04-23T17:04:49Z", "path": "symbology/simple-fill-symbol/README.md", "diffHunk": "@@ -1,37 +1,38 @@\n-# Simple Fill Symbol\n+# Simple fill symbol\n \n-Change a graphic's fill color, outline, and style properties.\n+Change a polygon's fill color, outline color, and fill style properties.\n \n-![](SimpleFillSymbol.png)\n+![Image of simple fill symbol](SimpleFillSymbol.png)\n+\n+## Use case\n+\n+Customize the appearance of a polygon with a color and style scheme suitable for the data. For example, a polygon with a brown 'forward-diagonal' fill style could represent an area of artificial ground mapped on a geological map.  \n \n ## How to use the sample\n \n-Change Fill color: - change the color that makes up the area of the polygon\n-Change Outline Color: - adds a border color to the polygon\n-Change Fill Style: - changes the pattern that makes up the area of the polygon\n+Use the drop down menus in the control panel to change the fill color, outline color and fill style of the polygon.\n \n ## How it works\n \n-To create a `SimpleFillSymbol`:\n-\n-1. Create the `ArcGISMap`'s with `Basemap`.\n-2. Create the `GraphicsOverlay` and add it to the `MapView`, `MapView.getGraphicsOverlays().add()`.\n-3. Add the map to the `MapView`, `MapView.setMap()`.\n-4. Create a `Polygon` using a `PointCollection` to indicate the boundaries of the `Graphic`.\n-5. Create a `SimpleFillSymbol(SimpleMarkerSymbol.Style, color, outline)`.\n-    * style, pattern that makes up the area of the geometry\n-    * color, color the symbol will be displayed\n-    * outline, `SimpleLineSymbol` that make up the border of the symbol\n-6. Lately, create a `Graphic(Geometry, Symbol)` and add it to the graphics overlay.\n+1.  Create a `Polygon` using a `PointCollection` to define its boundaries. \n+2.  Create a `SimpleLineSymbol(SimpleLineSymbol.Style, color, width)`.\n+3.  Create a `SimpleFillSymbol(SimpleFillSymbol.Style, color, outline)`.\n+4.  Set the color, outline and style of the simple fill symbol object with:\n+\t* `setColor()`;\n+\t* `setOutline(simpleLineSymbol)`;\n+\t* `setStyle()`;\n+5.  Create a new `Graphic` object, passing in the polygon and simple fill symbol as parameters, and add the graphic to the graphics overlay with `graphicsOverlay.getGraphics().add(new Graphic(polygon, fillSymbol))`.\n \n ## Relevant API\n \n-* ArcGISMap\n-* Graphic\n-* GraphicsOverlay\n-* MapView\n-* Polygon\n-* PointCollection\n-* SimpleFillSymbol\n-* SimpleFillSymbol.Style\n-* SimpleLineSymbol\n+*   Graphic\n+*   GraphicsOverlay\n+*   PointCollection\n+*   Polygon\n+*   SimpleFillSymbol\n+*   SimpleLineSymbol", "originalCommit": "d8fc498c6cfc322cb0f78d3453254078df0c4a56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk3MDg0OA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/491#discussion_r413970848", "bodyText": "removing excess spaces\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            *   Graphic\n          \n          \n            \n            *   GraphicsOverlay\n          \n          \n            \n            *   PointCollection\n          \n          \n            \n            *   Polyline\n          \n          \n            \n            *   SimpleLineSymbol\n          \n          \n            \n            * Graphic\n          \n          \n            \n            * GraphicsOverlay\n          \n          \n            \n            * PointCollection\n          \n          \n            \n            * Polyline\n          \n          \n            \n            * SimpleLineSymbol", "author": "Rachael-E", "createdAt": "2020-04-23T17:05:36Z", "path": "symbology/simple-line-symbol/README.md", "diffHunk": "@@ -1,36 +1,36 @@\n-# Simple Line Symbol\n+# Simple line symbol\n \n-Change a line graphic's color and style.\n+Change a line graphic's color, width and style.\n \n-![](SimpleLineSymbol.png)\n+![Image of simple line symbol](SimpleLineSymbol.png)\n+\n+## Use case\n+\n+Customize the appearance of a line with a color, width and style scheme suitable for the data. For example, a red line with a dashed style could represent a geological fault mapped on a geological map. \n \n ## How to use the sample\n \n-Change Line Color: - changes the color of the line symbol\n-Change Line Width: - change the width of the line symbol\n-Change Line Style: - changes the pattern of the line symbol\n+Use the drop down menus in the control panel to change the line color, width and style.\n \n ## How it works\n \n-To display a `SimpleLineSymbol`:\n-\n-1. Create a `ArcGISMap`'s with `Basemap`.\n-2. Create a `GraphicsOverlay` and add it to the `MapView`, `MapView.getGraphicsOverlays().add()`.\n-3. Add the map to the view, `MapView.setMap()`.\n-4. Create a `Polyline` using a `PointCollection` to indicate the boundaries of the `Graphic`.\n-5. Create a `SimpleLineSymbol(SimpleLineSymbol.Style, color, width)`.\n-    * style, pattern that makes up this symbol\n-    * color, color to display this symbol as\n-    * width, size of this symbol\n-6. Lately, create a `Graphic(Geometry, Symbol)` and add it to the graphics overlay.\n+1.  Create a `Polyline` using a `PointCollection` to define its geometry.\n+2.  Create a `SimpleLineSymbol(SimpleLineSymbol.Style, color, width)`.\n+3.  Set the color, width and style of the simple line symbol object with:\n+\t* `setColor()`;\n+\t* `setWidth()`;\n+\t* `setStyle()`;  \n+4.  Create a `Graphic` passing in the polyline and simple line symbol as parameters. \n+5.  Add the graphic to the graphics overlay with `graphicsOverlay.getGraphics().add(new Graphic(line, simpleLineSymbol))`.\n \n ## Relevant API\n \n-* ArcGISMap\n-* Graphic\n-* GraphicsOverlay\n-* MapView\n-* Polyline\n-* PointCollection\n-* SimpleLineSymbol\n-* SimpleLineSymbol.Style\n+*   Graphic\n+*   GraphicsOverlay\n+*   PointCollection\n+*   Polyline\n+*   SimpleLineSymbol", "originalCommit": "d8fc498c6cfc322cb0f78d3453254078df0c4a56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "34f345940917fb6c69540687565d70021bd67ef4", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/34f345940917fb6c69540687565d70021bd67ef4", "message": "Apply suggestions from code review\n\nCo-Authored-By: Rachael Ellen <36415565+Rachael-E@users.noreply.github.com>", "committedDate": "2020-04-24T07:31:57Z", "type": "commit"}, {"oid": "0afa4eb6bd1a03e32e748d5e34c2ce81da5c30ef", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/0afa4eb6bd1a03e32e748d5e34c2ce81da5c30ef", "message": "Update README.md", "committedDate": "2020-04-24T07:32:23Z", "type": "commit"}]}