{"pr_number": 1118, "pr_title": "improve circuit breaker test reliability", "pr_createdAt": "2020-04-02T10:02:12Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1118", "timeline": [{"oid": "f90d3369a358e2d6b71f192a5225f7ddfe1824b5", "url": "https://github.com/elastic/apm-agent-java/commit/f90d3369a358e2d6b71f192a5225f7ddfe1824b5", "message": "improve test reliability", "committedDate": "2020-04-02T09:34:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE5OTM2NA==", "url": "https://github.com/elastic/apm-agent-java/pull/1118#discussion_r402199364", "bodyText": "\ud83d\ude3b", "author": "eyalkoren", "createdAt": "2020-04-02T10:07:29Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerTest.java", "diffHunk": "@@ -74,104 +97,237 @@ public void tearDown() {\n \n     @Test\n     void testStressSimulation() {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        // see that the tracer remains inactive for another couple of polls\n-        pollCount = monitor.getPollCount();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        monitor.simulateStressRelieved();\n+        awaitRunning();\n     }\n \n     @Test\n     void testTwoMonitors() {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n \n         TestStressMonitor secondMonitor = new TestStressMonitor(tracer);\n         circuitBreaker.registerStressMonitor(secondMonitor);\n \n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertRunning();\n+\n+        // adding stress from a single monitor should pause tracer\n+\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        // adding stress from a second monitor should not resume tracer\n+        secondMonitor.simulateStress();\n \n-        pollCount = secondMonitor.simulateStress();\n-        secondMonitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n         // tracer should still be in PAUSED mode\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertPaused();\n+\n+        simulateReliefAndWaitPoll(monitor);\n \n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n         // tracer should still be in PAUSED mode, until ALL monitors allow resuming\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertPaused();\n \n-        pollCount = secondMonitor.simulateStressRelieved();\n-        secondMonitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        simulateReliefAndWaitPoll(secondMonitor);\n+\n+        assertRunning();\n \n         circuitBreaker.unregisterStressMonitor(secondMonitor);\n     }\n \n+    private static void simulateReliefAndWaitPoll(TestStressMonitor monitor){\n+        awaitHasBeenPolled(monitor, monitor.simulateStressRelieved());\n+    }\n+\n+    private static void awaitHasBeenPolled(TestStressMonitor monitor, final int pollCount) {\n+        awaitAssert(() -> assertThat(monitor.getPollCount()).isGreaterThan(pollCount + 1));\n+    }\n+\n+\n     @Test\n-    void testStressReliefThenReactivate() throws IOException {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+    void testPauseThroughConfigUnderStressThenResumeThroughConfig() throws IOException, InterruptedException {\n+        // stress pauses when recording enabled\n+        // timeline   1  2  3  4  5\n+        // stress     ---sssssss-----\n+        // recording  xxxxxx------xxx\n+        // state      rrr---------rrr\n+\n+        // 1\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        // 2\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        // 3 recording = false under stress should not change state\n         TracerInternalApiUtils.setRecordingConfig(config, false, TEST_CONFIG_SOURCE_NAME);\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        // should still be PAUSED as the state is inactive\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertState(this::assertPaused);\n+\n+        // 4 stress ends, should still be paused due to recording = false\n+        monitor.simulateStressRelieved();\n+        assertState(this::assertPaused);\n+\n+        // 5\n+        // configuration recording = true should make it run again\n         TracerInternalApiUtils.setRecordingConfig(config, true, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        awaitRunning();\n     }\n \n     @Test\n-    void testReactivateThenStressRelief() throws IOException {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+    void testPauseThroughConfigThenResumeOnlyWhenStressRelieved() throws IOException, InterruptedException {\n+        // enable recording while under stress does not trigger runnable state\n+        // timeline   1  2  3  4  5\n+        // stress     ------ssssss----\n+        // recording  xxx------xxxxxx\n+        // state      rrr---------rrr\n+\n+        // 1\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        // 2 recording = false should pause\n         TracerInternalApiUtils.setRecordingConfig(config, false, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        awaitPaused();\n+\n+        // 3 stress should keep it paused\n         monitor.simulateStress();\n+        assertState(this::assertPaused);\n+\n+        // 4 should not resume tracer as we are under stress\n         TracerInternalApiUtils.setRecordingConfig(config, true, TEST_CONFIG_SOURCE_NAME);\n-        // check that reactivation now has no effect even after waiting for the next resume poll\n-        int pollCount = monitor.getPollCount();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        // check that stress relief now reactivates\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        assertState(this::assertPaused);\n+\n+        // 5 stress relief now resumes tracer\n+        monitor.simulateStressRelieved();\n+        awaitRunning();\n     }\n \n+\n     @Test\n     void testCircuitBreakerDisabled() throws IOException, InterruptedException {\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        assertThat(circuitBreakerConfiguration.isCircuitBreakerEnabled()).isFalse();\n+\n+        assertRunning();\n+\n         monitor.simulateStress();\n-        Thread.sleep(50);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        assertState(this::assertRunning);\n+\n         TracerInternalApiUtils.setRecordingConfig(config, false, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertPaused();\n         TracerInternalApiUtils.setRecordingConfig(config, true, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        assertRunning();\n     }\n \n     @Test\n-    void testResumeWhenDisabledUnderStress() throws InterruptedException {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n+    void testResumeWhenDisabledUnderStress() {\n+\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(false);\n+        awaitRunning();\n+    }\n+\n+    private void awaitPaused() {\n+        awaitAssert(this::assertPaused);\n+    }\n+\n+    private void assertRunning() {\n         assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n+    }\n+\n+    private void awaitRunning() {\n+        awaitAssert(this::assertRunning);\n+    }\n+\n+    private void assertPaused() {\n         assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        doReturn(false).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        Thread.sleep(50);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+    }\n+\n+    private void assertState(Runnable assertion) throws InterruptedException {\n+        for (long i = 0; i < 10; i++) {\n+            assertion.run();\n+            Thread.sleep(1);\n+        }\n+        assertion.run();\n+    }\n+\n+    private static void awaitAssert(ThrowingRunnable assertion) {\n+        doAwait().untilAsserted(assertion);\n+    }\n+\n+    private static ConditionFactory doAwait() {\n+        return await()\n+            .pollInterval(1, TimeUnit.MILLISECONDS)\n+            .timeout(50, TimeUnit.MILLISECONDS);\n+\n+    }\n+\n+\n+    /**\n+     * We have to use a thread-safe wrapper because sharing mocked/stubbed classes\n+     */\n+    private static class ConfigThreadSafeWrapper extends CircuitBreakerConfiguration {", "originalCommit": "f90d3369a358e2d6b71f192a5225f7ddfe1824b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxMDQzMw==", "url": "https://github.com/elastic/apm-agent-java/pull/1118#discussion_r402210433", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    monitor.simulateStress();\n          \n          \n            \n                    monitor. simulateStressAndWaitPoll();", "author": "eyalkoren", "createdAt": "2020-04-02T10:27:44Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerTest.java", "diffHunk": "@@ -74,104 +97,237 @@ public void tearDown() {\n \n     @Test\n     void testStressSimulation() {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        // see that the tracer remains inactive for another couple of polls\n-        pollCount = monitor.getPollCount();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        monitor.simulateStressRelieved();\n+        awaitRunning();\n     }\n \n     @Test\n     void testTwoMonitors() {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n \n         TestStressMonitor secondMonitor = new TestStressMonitor(tracer);\n         circuitBreaker.registerStressMonitor(secondMonitor);\n \n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertRunning();\n+\n+        // adding stress from a single monitor should pause tracer\n+\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        // adding stress from a second monitor should not resume tracer\n+        secondMonitor.simulateStress();\n \n-        pollCount = secondMonitor.simulateStress();\n-        secondMonitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n         // tracer should still be in PAUSED mode\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertPaused();\n+\n+        simulateReliefAndWaitPoll(monitor);\n \n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n         // tracer should still be in PAUSED mode, until ALL monitors allow resuming\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertPaused();\n \n-        pollCount = secondMonitor.simulateStressRelieved();\n-        secondMonitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        simulateReliefAndWaitPoll(secondMonitor);\n+\n+        assertRunning();\n \n         circuitBreaker.unregisterStressMonitor(secondMonitor);\n     }\n \n+    private static void simulateReliefAndWaitPoll(TestStressMonitor monitor){\n+        awaitHasBeenPolled(monitor, monitor.simulateStressRelieved());\n+    }\n+\n+    private static void awaitHasBeenPolled(TestStressMonitor monitor, final int pollCount) {\n+        awaitAssert(() -> assertThat(monitor.getPollCount()).isGreaterThan(pollCount + 1));\n+    }\n+\n+\n     @Test\n-    void testStressReliefThenReactivate() throws IOException {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+    void testPauseThroughConfigUnderStressThenResumeThroughConfig() throws IOException, InterruptedException {\n+        // stress pauses when recording enabled\n+        // timeline   1  2  3  4  5\n+        // stress     ---sssssss-----\n+        // recording  xxxxxx------xxx\n+        // state      rrr---------rrr\n+\n+        // 1\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        // 2\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        // 3 recording = false under stress should not change state\n         TracerInternalApiUtils.setRecordingConfig(config, false, TEST_CONFIG_SOURCE_NAME);\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        // should still be PAUSED as the state is inactive\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertState(this::assertPaused);\n+\n+        // 4 stress ends, should still be paused due to recording = false\n+        monitor.simulateStressRelieved();\n+        assertState(this::assertPaused);\n+\n+        // 5\n+        // configuration recording = true should make it run again\n         TracerInternalApiUtils.setRecordingConfig(config, true, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        awaitRunning();\n     }\n \n     @Test\n-    void testReactivateThenStressRelief() throws IOException {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+    void testPauseThroughConfigThenResumeOnlyWhenStressRelieved() throws IOException, InterruptedException {\n+        // enable recording while under stress does not trigger runnable state\n+        // timeline   1  2  3  4  5\n+        // stress     ------ssssss----\n+        // recording  xxx------xxxxxx\n+        // state      rrr---------rrr\n+\n+        // 1\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        // 2 recording = false should pause\n         TracerInternalApiUtils.setRecordingConfig(config, false, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        awaitPaused();\n+\n+        // 3 stress should keep it paused\n         monitor.simulateStress();", "originalCommit": "f90d3369a358e2d6b71f192a5225f7ddfe1824b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxMTI3Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1118#discussion_r402211277", "bodyText": "You need to awaitPoll somehow. It doesn't make sense to assert that the state remained the same without that.", "author": "eyalkoren", "createdAt": "2020-04-02T10:29:20Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerTest.java", "diffHunk": "@@ -74,104 +97,237 @@ public void tearDown() {\n \n     @Test\n     void testStressSimulation() {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        // see that the tracer remains inactive for another couple of polls\n-        pollCount = monitor.getPollCount();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        monitor.simulateStressRelieved();\n+        awaitRunning();\n     }\n \n     @Test\n     void testTwoMonitors() {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n \n         TestStressMonitor secondMonitor = new TestStressMonitor(tracer);\n         circuitBreaker.registerStressMonitor(secondMonitor);\n \n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertRunning();\n+\n+        // adding stress from a single monitor should pause tracer\n+\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        // adding stress from a second monitor should not resume tracer\n+        secondMonitor.simulateStress();\n \n-        pollCount = secondMonitor.simulateStress();\n-        secondMonitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n         // tracer should still be in PAUSED mode\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertPaused();\n+\n+        simulateReliefAndWaitPoll(monitor);\n \n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n         // tracer should still be in PAUSED mode, until ALL monitors allow resuming\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertPaused();\n \n-        pollCount = secondMonitor.simulateStressRelieved();\n-        secondMonitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        simulateReliefAndWaitPoll(secondMonitor);\n+\n+        assertRunning();\n \n         circuitBreaker.unregisterStressMonitor(secondMonitor);\n     }\n \n+    private static void simulateReliefAndWaitPoll(TestStressMonitor monitor){\n+        awaitHasBeenPolled(monitor, monitor.simulateStressRelieved());\n+    }\n+\n+    private static void awaitHasBeenPolled(TestStressMonitor monitor, final int pollCount) {\n+        awaitAssert(() -> assertThat(monitor.getPollCount()).isGreaterThan(pollCount + 1));\n+    }\n+\n+\n     @Test\n-    void testStressReliefThenReactivate() throws IOException {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+    void testPauseThroughConfigUnderStressThenResumeThroughConfig() throws IOException, InterruptedException {\n+        // stress pauses when recording enabled\n+        // timeline   1  2  3  4  5\n+        // stress     ---sssssss-----\n+        // recording  xxxxxx------xxx\n+        // state      rrr---------rrr\n+\n+        // 1\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        // 2\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        // 3 recording = false under stress should not change state\n         TracerInternalApiUtils.setRecordingConfig(config, false, TEST_CONFIG_SOURCE_NAME);\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        // should still be PAUSED as the state is inactive\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertState(this::assertPaused);\n+\n+        // 4 stress ends, should still be paused due to recording = false\n+        monitor.simulateStressRelieved();\n+        assertState(this::assertPaused);\n+\n+        // 5\n+        // configuration recording = true should make it run again\n         TracerInternalApiUtils.setRecordingConfig(config, true, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        awaitRunning();\n     }\n \n     @Test\n-    void testReactivateThenStressRelief() throws IOException {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+    void testPauseThroughConfigThenResumeOnlyWhenStressRelieved() throws IOException, InterruptedException {\n+        // enable recording while under stress does not trigger runnable state\n+        // timeline   1  2  3  4  5\n+        // stress     ------ssssss----\n+        // recording  xxx------xxxxxx\n+        // state      rrr---------rrr\n+\n+        // 1\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        // 2 recording = false should pause\n         TracerInternalApiUtils.setRecordingConfig(config, false, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        awaitPaused();\n+\n+        // 3 stress should keep it paused\n         monitor.simulateStress();\n+        assertState(this::assertPaused);\n+\n+        // 4 should not resume tracer as we are under stress\n         TracerInternalApiUtils.setRecordingConfig(config, true, TEST_CONFIG_SOURCE_NAME);\n-        // check that reactivation now has no effect even after waiting for the next resume poll\n-        int pollCount = monitor.getPollCount();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        // check that stress relief now reactivates\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        assertState(this::assertPaused);", "originalCommit": "f90d3369a358e2d6b71f192a5225f7ddfe1824b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxMTY1NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1118#discussion_r402211655", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertState(this::assertRunning);\n          \n          \n            \n                    assertRunning();", "author": "eyalkoren", "createdAt": "2020-04-02T10:30:01Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerTest.java", "diffHunk": "@@ -74,104 +97,237 @@ public void tearDown() {\n \n     @Test\n     void testStressSimulation() {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        // see that the tracer remains inactive for another couple of polls\n-        pollCount = monitor.getPollCount();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        monitor.simulateStressRelieved();\n+        awaitRunning();\n     }\n \n     @Test\n     void testTwoMonitors() {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n \n         TestStressMonitor secondMonitor = new TestStressMonitor(tracer);\n         circuitBreaker.registerStressMonitor(secondMonitor);\n \n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertRunning();\n+\n+        // adding stress from a single monitor should pause tracer\n+\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        // adding stress from a second monitor should not resume tracer\n+        secondMonitor.simulateStress();\n \n-        pollCount = secondMonitor.simulateStress();\n-        secondMonitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n         // tracer should still be in PAUSED mode\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertPaused();\n+\n+        simulateReliefAndWaitPoll(monitor);\n \n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n         // tracer should still be in PAUSED mode, until ALL monitors allow resuming\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertPaused();\n \n-        pollCount = secondMonitor.simulateStressRelieved();\n-        secondMonitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        simulateReliefAndWaitPoll(secondMonitor);\n+\n+        assertRunning();\n \n         circuitBreaker.unregisterStressMonitor(secondMonitor);\n     }\n \n+    private static void simulateReliefAndWaitPoll(TestStressMonitor monitor){\n+        awaitHasBeenPolled(monitor, monitor.simulateStressRelieved());\n+    }\n+\n+    private static void awaitHasBeenPolled(TestStressMonitor monitor, final int pollCount) {\n+        awaitAssert(() -> assertThat(monitor.getPollCount()).isGreaterThan(pollCount + 1));\n+    }\n+\n+\n     @Test\n-    void testStressReliefThenReactivate() throws IOException {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+    void testPauseThroughConfigUnderStressThenResumeThroughConfig() throws IOException, InterruptedException {\n+        // stress pauses when recording enabled\n+        // timeline   1  2  3  4  5\n+        // stress     ---sssssss-----\n+        // recording  xxxxxx------xxx\n+        // state      rrr---------rrr\n+\n+        // 1\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        // 2\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        // 3 recording = false under stress should not change state\n         TracerInternalApiUtils.setRecordingConfig(config, false, TEST_CONFIG_SOURCE_NAME);\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        // should still be PAUSED as the state is inactive\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertState(this::assertPaused);\n+\n+        // 4 stress ends, should still be paused due to recording = false\n+        monitor.simulateStressRelieved();\n+        assertState(this::assertPaused);\n+\n+        // 5\n+        // configuration recording = true should make it run again\n         TracerInternalApiUtils.setRecordingConfig(config, true, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        awaitRunning();\n     }\n \n     @Test\n-    void testReactivateThenStressRelief() throws IOException {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+    void testPauseThroughConfigThenResumeOnlyWhenStressRelieved() throws IOException, InterruptedException {\n+        // enable recording while under stress does not trigger runnable state\n+        // timeline   1  2  3  4  5\n+        // stress     ------ssssss----\n+        // recording  xxx------xxxxxx\n+        // state      rrr---------rrr\n+\n+        // 1\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        // 2 recording = false should pause\n         TracerInternalApiUtils.setRecordingConfig(config, false, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        awaitPaused();\n+\n+        // 3 stress should keep it paused\n         monitor.simulateStress();\n+        assertState(this::assertPaused);\n+\n+        // 4 should not resume tracer as we are under stress\n         TracerInternalApiUtils.setRecordingConfig(config, true, TEST_CONFIG_SOURCE_NAME);\n-        // check that reactivation now has no effect even after waiting for the next resume poll\n-        int pollCount = monitor.getPollCount();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        // check that stress relief now reactivates\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        assertState(this::assertPaused);\n+\n+        // 5 stress relief now resumes tracer\n+        monitor.simulateStressRelieved();\n+        awaitRunning();\n     }\n \n+\n     @Test\n     void testCircuitBreakerDisabled() throws IOException, InterruptedException {\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        assertThat(circuitBreakerConfiguration.isCircuitBreakerEnabled()).isFalse();\n+\n+        assertRunning();\n+\n         monitor.simulateStress();\n-        Thread.sleep(50);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        assertState(this::assertRunning);", "originalCommit": "f90d3369a358e2d6b71f192a5225f7ddfe1824b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxMTgyOQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1118#discussion_r402211829", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    monitor.simulateStress();\n          \n          \n            \n                    monitor.simulateStressAndWaitPoll();", "author": "eyalkoren", "createdAt": "2020-04-02T10:30:19Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/circuitbreaker/CircuitBreakerTest.java", "diffHunk": "@@ -74,104 +97,237 @@ public void tearDown() {\n \n     @Test\n     void testStressSimulation() {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        // see that the tracer remains inactive for another couple of polls\n-        pollCount = monitor.getPollCount();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        monitor.simulateStressRelieved();\n+        awaitRunning();\n     }\n \n     @Test\n     void testTwoMonitors() {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n \n         TestStressMonitor secondMonitor = new TestStressMonitor(tracer);\n         circuitBreaker.registerStressMonitor(secondMonitor);\n \n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertRunning();\n+\n+        // adding stress from a single monitor should pause tracer\n+\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        // adding stress from a second monitor should not resume tracer\n+        secondMonitor.simulateStress();\n \n-        pollCount = secondMonitor.simulateStress();\n-        secondMonitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n         // tracer should still be in PAUSED mode\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertPaused();\n+\n+        simulateReliefAndWaitPoll(monitor);\n \n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n         // tracer should still be in PAUSED mode, until ALL monitors allow resuming\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertPaused();\n \n-        pollCount = secondMonitor.simulateStressRelieved();\n-        secondMonitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        simulateReliefAndWaitPoll(secondMonitor);\n+\n+        assertRunning();\n \n         circuitBreaker.unregisterStressMonitor(secondMonitor);\n     }\n \n+    private static void simulateReliefAndWaitPoll(TestStressMonitor monitor){\n+        awaitHasBeenPolled(monitor, monitor.simulateStressRelieved());\n+    }\n+\n+    private static void awaitHasBeenPolled(TestStressMonitor monitor, final int pollCount) {\n+        awaitAssert(() -> assertThat(monitor.getPollCount()).isGreaterThan(pollCount + 1));\n+    }\n+\n+\n     @Test\n-    void testStressReliefThenReactivate() throws IOException {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n-        int pollCount = monitor.simulateStress();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+    void testPauseThroughConfigUnderStressThenResumeThroughConfig() throws IOException, InterruptedException {\n+        // stress pauses when recording enabled\n+        // timeline   1  2  3  4  5\n+        // stress     ---sssssss-----\n+        // recording  xxxxxx------xxx\n+        // state      rrr---------rrr\n+\n+        // 1\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        // 2\n+        monitor.simulateStress();\n+        awaitPaused();\n+\n+        // 3 recording = false under stress should not change state\n         TracerInternalApiUtils.setRecordingConfig(config, false, TEST_CONFIG_SOURCE_NAME);\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        // should still be PAUSED as the state is inactive\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        assertState(this::assertPaused);\n+\n+        // 4 stress ends, should still be paused due to recording = false\n+        monitor.simulateStressRelieved();\n+        assertState(this::assertPaused);\n+\n+        // 5\n+        // configuration recording = true should make it run again\n         TracerInternalApiUtils.setRecordingConfig(config, true, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        awaitRunning();\n     }\n \n     @Test\n-    void testReactivateThenStressRelief() throws IOException {\n-        doReturn(true).when(circuitBreakerConfiguration).isCircuitBreakerEnabled();\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+    void testPauseThroughConfigThenResumeOnlyWhenStressRelieved() throws IOException, InterruptedException {\n+        // enable recording while under stress does not trigger runnable state\n+        // timeline   1  2  3  4  5\n+        // stress     ------ssssss----\n+        // recording  xxx------xxxxxx\n+        // state      rrr---------rrr\n+\n+        // 1\n+        circuitBreakerConfiguration.circuitBreakerEnabled.set(true);\n+        assertRunning();\n+\n+        // 2 recording = false should pause\n         TracerInternalApiUtils.setRecordingConfig(config, false, TEST_CONFIG_SOURCE_NAME);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n+        awaitPaused();\n+\n+        // 3 stress should keep it paused\n         monitor.simulateStress();\n+        assertState(this::assertPaused);\n+\n+        // 4 should not resume tracer as we are under stress\n         TracerInternalApiUtils.setRecordingConfig(config, true, TEST_CONFIG_SOURCE_NAME);\n-        // check that reactivation now has no effect even after waiting for the next resume poll\n-        int pollCount = monitor.getPollCount();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(PAUSED);\n-        // check that stress relief now reactivates\n-        pollCount = monitor.simulateStressRelieved();\n-        monitor.waitUntilPollCounterIsGreaterThan(pollCount + 1);\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        assertState(this::assertPaused);\n+\n+        // 5 stress relief now resumes tracer\n+        monitor.simulateStressRelieved();\n+        awaitRunning();\n     }\n \n+\n     @Test\n     void testCircuitBreakerDisabled() throws IOException, InterruptedException {\n-        assertThat(tracer.getState()).isEqualTo(RUNNING);\n+        assertThat(circuitBreakerConfiguration.isCircuitBreakerEnabled()).isFalse();\n+\n+        assertRunning();\n+\n         monitor.simulateStress();", "originalCommit": "f90d3369a358e2d6b71f192a5225f7ddfe1824b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1574e1513e271cb1e3581f8e55642e43ffddd80d", "url": "https://github.com/elastic/apm-agent-java/commit/1574e1513e271cb1e3581f8e55642e43ffddd80d", "message": "post-review changes", "committedDate": "2020-04-02T14:23:33Z", "type": "commit"}]}