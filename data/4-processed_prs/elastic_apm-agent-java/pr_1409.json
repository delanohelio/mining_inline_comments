{"pr_number": 1409, "pr_title": "lazy-load jdbc helper", "pr_createdAt": "2020-09-18T14:07:10Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1409", "timeline": [{"oid": "efc3362deeae37726f2a50e3d7ab6906c75d3500", "url": "https://github.com/elastic/apm-agent-java/commit/efc3362deeae37726f2a50e3d7ab6906c75d3500", "message": "try to lazy-load jdbc helper", "committedDate": "2020-09-18T14:04:31Z", "type": "commit"}, {"oid": "31bee805b5ef8da25a6788ebcca4ea3bd2ed85dc", "url": "https://github.com/elastic/apm-agent-java/commit/31bee805b5ef8da25a6788ebcca4ea3bd2ed85dc", "message": "add comment on classloader check", "committedDate": "2020-09-18T14:06:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0MzgzOA==", "url": "https://github.com/elastic/apm-agent-java/pull/1409#discussion_r492443838", "bodyText": "Does this contradict the actual fix of the lazy loading?\nMeaning - the lazy loading assumes that java.sql classes should be available to JDBC code when it is invoked and the problem is that they are not yet in the classpath when the instrumented class is loaded. If that's the case, the tested class loader will be excluded, even though it shouldn't be,", "author": "eyalkoren", "createdAt": "2020-09-22T02:28:01Z", "path": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/agent/jdbc/JdbcInstrumentation.java", "diffHunk": "@@ -26,18 +26,37 @@\n \n import co.elastic.apm.agent.bci.TracerAwareInstrumentation;\n import co.elastic.apm.agent.jdbc.helper.JdbcHelper;\n+import net.bytebuddy.matcher.ElementMatcher;\n \n+import javax.annotation.Nullable;\n import java.util.Collection;\n import java.util.Collections;\n \n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.classLoaderCanLoadClass;\n+\n public abstract class JdbcInstrumentation extends TracerAwareInstrumentation {\n \n     private static final Collection<String> JDBC_GROUPS = Collections.singleton(\"jdbc\");\n \n-    protected static JdbcHelper jdbcHelper = new JdbcHelper();\n+    @Nullable\n+    private static JdbcHelper jdbcHelper;\n+\n+    @Override\n+    public ElementMatcher.Junction<ClassLoader> getClassLoaderMatcher() {\n+        return classLoaderCanLoadClass(\"java.sql.Statement\"); // in case java.sql module is not there\n+    }", "originalCommit": "31bee805b5ef8da25a6788ebcca4ea3bd2ed85dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUyNDU1Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1409#discussion_r492524552", "bodyText": "That's a fair point, I added this one when I expected there was an issue with java modules, but those weren't in use.\nThe issue was that the static call to new JdbcHelper() triggered loading JDBC classes in the wrong classloader, which I wasn't able to reproduce, even when using the same JVM.", "author": "SylvainJuge", "createdAt": "2020-09-22T07:26:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0MzgzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2ODYzNw==", "url": "https://github.com/elastic/apm-agent-java/pull/1409#discussion_r495968637", "bodyText": "This extra check has been removed, and the fix is still working. Thus I've removed it in a later commit.", "author": "SylvainJuge", "createdAt": "2020-09-28T14:09:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0MzgzOA=="}], "type": "inlineReview"}, {"oid": "4686e8d66e70941b82a720b4117e768b702468f6", "url": "https://github.com/elastic/apm-agent-java/commit/4686e8d66e70941b82a720b4117e768b702468f6", "message": "remove useless check on available class", "committedDate": "2020-09-23T07:06:12Z", "type": "commit"}, {"oid": "43165c971a0ef7d708e6f2d435b744b7c270e80d", "url": "https://github.com/elastic/apm-agent-java/commit/43165c971a0ef7d708e6f2d435b744b7c270e80d", "message": "Merge branch 'master' into try-lazy-load-jdbchelper", "committedDate": "2020-09-28T14:08:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAzMDQxMA==", "url": "https://github.com/elastic/apm-agent-java/pull/1409#discussion_r496030410", "bodyText": "Is that an indication that we should more strictly separate advices from element matches?", "author": "felixbarny", "createdAt": "2020-09-28T15:17:58Z", "path": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/agent/jdbc/JdbcInstrumentation.java", "diffHunk": "@@ -26,18 +26,32 @@\n \n import co.elastic.apm.agent.bci.TracerAwareInstrumentation;\n import co.elastic.apm.agent.jdbc.helper.JdbcHelper;\n+import net.bytebuddy.matcher.ElementMatcher;\n \n+import javax.annotation.Nullable;\n import java.util.Collection;\n import java.util.Collections;\n \n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.classLoaderCanLoadClass;\n+\n public abstract class JdbcInstrumentation extends TracerAwareInstrumentation {\n \n     private static final Collection<String> JDBC_GROUPS = Collections.singleton(\"jdbc\");\n \n-    protected static JdbcHelper jdbcHelper = new JdbcHelper();\n+    @Nullable\n+    private static JdbcHelper jdbcHelper;\n \n     @Override\n     public final Collection<String> getInstrumentationGroupNames() {\n         return JDBC_GROUPS;\n     }\n+\n+    protected synchronized static JdbcHelper getJdbcHelper() {\n+        // lazily initialize helper to prevent trying to load classes in java.sql package with the bootstrap classloader", "originalCommit": "43165c971a0ef7d708e6f2d435b744b7c270e80d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE3ODc0MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1409#discussion_r496178741", "bodyText": "I would say yes, separation would be better. In the same category, there is getAdviceClass() method that returns the advice class loaded from agent/bootstrap classloader when in practice we only use class name and then load it in child-first plugin classloader. We already discussed that a bit with @eyalkoren last week.", "author": "SylvainJuge", "createdAt": "2020-09-28T19:21:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAzMDQxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAzMTMzNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1409#discussion_r496031334", "bodyText": "Use the double-checked locking pattern to avoid the synchronized overhead", "author": "felixbarny", "createdAt": "2020-09-28T15:18:46Z", "path": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/agent/jdbc/JdbcInstrumentation.java", "diffHunk": "@@ -26,18 +26,32 @@\n \n import co.elastic.apm.agent.bci.TracerAwareInstrumentation;\n import co.elastic.apm.agent.jdbc.helper.JdbcHelper;\n+import net.bytebuddy.matcher.ElementMatcher;\n \n+import javax.annotation.Nullable;\n import java.util.Collection;\n import java.util.Collections;\n \n+import static co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers.classLoaderCanLoadClass;\n+\n public abstract class JdbcInstrumentation extends TracerAwareInstrumentation {\n \n     private static final Collection<String> JDBC_GROUPS = Collections.singleton(\"jdbc\");\n \n-    protected static JdbcHelper jdbcHelper = new JdbcHelper();\n+    @Nullable\n+    private static JdbcHelper jdbcHelper;\n \n     @Override\n     public final Collection<String> getInstrumentationGroupNames() {\n         return JDBC_GROUPS;\n     }\n+\n+    protected synchronized static JdbcHelper getJdbcHelper() {", "originalCommit": "43165c971a0ef7d708e6f2d435b744b7c270e80d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4NjM5NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1409#discussion_r496186395", "bodyText": "fixed in last commit.", "author": "SylvainJuge", "createdAt": "2020-09-28T19:36:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAzMTMzNA=="}], "type": "inlineReview"}, {"oid": "c046ac2b54126d20ebc6e4eae9a7fc8c291d22ad", "url": "https://github.com/elastic/apm-agent-java/commit/c046ac2b54126d20ebc6e4eae9a7fc8c291d22ad", "message": "use double-checked for faster access to jdbc helper", "committedDate": "2020-09-28T19:35:11Z", "type": "commit"}, {"oid": "4adf19a44ff2761161f728d5b64ce458964dd9e1", "url": "https://github.com/elastic/apm-agent-java/commit/4adf19a44ff2761161f728d5b64ce458964dd9e1", "message": "Merge branch 'master' into try-lazy-load-jdbchelper", "committedDate": "2020-09-29T14:39:01Z", "type": "commit"}, {"oid": "a320294d483c3d12554f402c886c0d7095797eee", "url": "https://github.com/elastic/apm-agent-java/commit/a320294d483c3d12554f402c886c0d7095797eee", "message": "update changelog", "committedDate": "2020-09-29T14:40:55Z", "type": "commit"}]}