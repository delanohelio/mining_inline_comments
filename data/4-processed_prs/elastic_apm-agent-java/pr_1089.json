{"pr_number": 1089, "pr_title": "Make instrumentation tests more robust", "pr_createdAt": "2020-03-19T17:53:07Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1089", "timeline": [{"oid": "81a3b2d7ac31c0623e7afd3251e171d48dbeaed6", "url": "https://github.com/elastic/apm-agent-java/commit/81a3b2d7ac31c0623e7afd3251e171d48dbeaed6", "message": "Using same tracer instance across tests", "committedDate": "2020-03-19T15:26:48Z", "type": "commit"}, {"oid": "77d4cd901713efa55432258c7c02780b99c27581", "url": "https://github.com/elastic/apm-agent-java/commit/77d4cd901713efa55432258c7c02780b99c27581", "message": "Merge remote-tracking branch 'upstream/master' into make-instrumentation-tests-more-robust", "committedDate": "2020-03-19T17:49:05Z", "type": "commit"}, {"oid": "3d1a33d4976a741b9e79d61ebd71ea5cfe98b052", "url": "https://github.com/elastic/apm-agent-java/commit/3d1a33d4976a741b9e79d61ebd71ea5cfe98b052", "message": "Upgrading Mockito version", "committedDate": "2020-03-22T10:48:37Z", "type": "commit"}, {"oid": "ba80fb2b8b3dfb21781cfcba124b90979e73e8d0", "url": "https://github.com/elastic/apm-agent-java/commit/ba80fb2b8b3dfb21781cfcba124b90979e73e8d0", "message": "Disabling gRPC tests for analysis", "committedDate": "2020-03-22T13:31:23Z", "type": "forcePushed"}, {"oid": "bd17c123708596cd5b67cda54256dfef0e99b039", "url": "https://github.com/elastic/apm-agent-java/commit/bd17c123708596cd5b67cda54256dfef0e99b039", "message": "Disabling gRPC tests for analysis", "committedDate": "2020-03-22T15:06:21Z", "type": "forcePushed"}, {"oid": "250bdb65c4f84b77db90e6172bf74539a3c0ae91", "url": "https://github.com/elastic/apm-agent-java/commit/250bdb65c4f84b77db90e6172bf74539a3c0ae91", "message": "Disabling gRPC tests for analysis", "committedDate": "2020-03-22T15:33:58Z", "type": "commit"}, {"oid": "250bdb65c4f84b77db90e6172bf74539a3c0ae91", "url": "https://github.com/elastic/apm-agent-java/commit/250bdb65c4f84b77db90e6172bf74539a3c0ae91", "message": "Disabling gRPC tests for analysis", "committedDate": "2020-03-22T15:33:58Z", "type": "forcePushed"}, {"oid": "886421bdddb98fa24bb9196722963e9c24a4cdaa", "url": "https://github.com/elastic/apm-agent-java/commit/886421bdddb98fa24bb9196722963e9c24a4cdaa", "message": "Replace Tracer when closed", "committedDate": "2020-03-22T15:58:35Z", "type": "commit"}, {"oid": "e30950bed436f52293a2901698b55095f7ee415d", "url": "https://github.com/elastic/apm-agent-java/commit/e30950bed436f52293a2901698b55095f7ee415d", "message": "Restore gRPC tests", "committedDate": "2020-03-22T16:00:00Z", "type": "commit"}, {"oid": "74a4b0dfbedbcb2d1e328e90f8dec377d4b5871f", "url": "https://github.com/elastic/apm-agent-java/commit/74a4b0dfbedbcb2d1e328e90f8dec377d4b5871f", "message": "Using same tracer in Spring Boot tests", "committedDate": "2020-03-22T16:55:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMwMTg5Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1089#discussion_r396301893", "bodyText": "What about using 'are assertions enabled' heuristic and throw an exception if this code is used in production ?", "author": "SylvainJuge", "createdAt": "2020-03-23T09:10:00Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java", "diffHunk": "@@ -369,11 +369,15 @@ private static void logClassLoaderHierarchy(@Nullable ClassLoader classLoader, L\n     /**\n      * Reverts instrumentation of classes and re-transforms them to their state without the agent.\n      * <p>\n-     * This is only to be used for unit tests\n+     * NOTE: THIS IS ONLY TO BE USED FOR UNIT TESTS", "originalCommit": "77d4cd901713efa55432258c7c02780b99c27581", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ2NzU0Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1089#discussion_r396467543", "bodyText": "Do you see a problem with using this method to detach the agent in the future?", "author": "felixbarny", "createdAt": "2020-03-23T13:54:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMwMTg5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc2NDI0Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1089#discussion_r399764243", "bodyText": "Do you see a problem with using this method to detach the agent in the future?\n\nNo, just thought of emphasizing this note \ud83d\ude42 . However, before using that we should probably disable the tracer and make sure everything stops using it, because this may happen in bulks, so some code may be instrumented while other is not (a strange undefined state).\n\nWhat about using 'are assertions enabled' heuristic and throw an exception if this code is used in production ?\n\nBased on the above, we may DO start using it.", "author": "eyalkoren", "createdAt": "2020-03-29T08:25:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMwMTg5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMwMjg3Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1089#discussion_r396302872", "bodyText": "[minor] behavior probably worth adding to method javadoc, but not really important since it's not supposed to be used outside tests.", "author": "SylvainJuge", "createdAt": "2020-03-23T09:11:47Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java", "diffHunk": "@@ -369,11 +369,15 @@ private static void logClassLoaderHierarchy(@Nullable ClassLoader classLoader, L\n     /**\n      * Reverts instrumentation of classes and re-transforms them to their state without the agent.\n      * <p>\n-     * This is only to be used for unit tests\n+     * NOTE: THIS IS ONLY TO BE USED FOR UNIT TESTS\n      * </p>\n      */\n     public static synchronized void reset() {\n-        if (resettableClassFileTransformer == null || instrumentation == null) {\n+        if (instrumentation == null) {\n+            return;\n+        }\n+\n+        if (resettableClassFileTransformer == null) {", "originalCommit": "77d4cd901713efa55432258c7c02780b99c27581", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc2NDQwMA==", "url": "https://github.com/elastic/apm-agent-java/pull/1089#discussion_r399764400", "bodyText": "I will add", "author": "eyalkoren", "createdAt": "2020-03-29T08:26:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMwMjg3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMzOTkyNg==", "url": "https://github.com/elastic/apm-agent-java/pull/1089#discussion_r396339926", "bodyText": "[minor] maybe provide getters for consistency, we don't have much direct field access in our codebase, and this part will be reused extensively into plugin tests.", "author": "SylvainJuge", "createdAt": "2020-03-23T10:13:32Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/MockTracer.java", "diffHunk": "@@ -102,4 +146,18 @@ public static ElasticApmTracer create(ConfigurationRegistry configurationRegistr\n         when(tracer.getConfig(any())).thenAnswer(invocation -> configurationRegistry.getConfig(invocation.getArgument(0)));\n         return tracer;\n     }\n+\n+    public static class MockInstrumentationSetup {\n+        public final ElasticApmTracer tracer;\n+        public final MockReporter reporter;\n+        public final ConfigurationRegistry config;\n+        public final TestObjectPoolFactory objectPoolFactory;", "originalCommit": "74a4b0dfbedbcb2d1e328e90f8dec377d4b5871f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM0MTY4MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1089#discussion_r396341681", "bodyText": "why does a stopped tracer should trigger creating a new one ? Is that triggered for example if a test leaves the tracer in a stopped state ? Couldn't we just resume it when it's the case ?\nWhat is a bit confusing here is that we have a call to TracerInternalApiUtils.resumeTracer(tracer); in the else block.", "author": "SylvainJuge", "createdAt": "2020-03-23T10:16:40Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/MockTracer.java", "diffHunk": "@@ -81,6 +84,47 @@ public static ElasticApmTracer createRealTracer(Reporter reporter, Configuration\n             .build();\n     }\n \n+    /**\n+     * If an instrumentation has already been initialized by some other test, returns the static\n+     * {@link co.elastic.apm.agent.bci.ElasticApmInstrumentation#tracer}.\n+     * Otherwise, Creates a real tracer with a {@link MockReporter} and a mock configuration which returns default\n+     * values that can be customized by mocking the configuration.\n+     */\n+    public static synchronized MockInstrumentationSetup getOrCreateInstrumentationTracer() {\n+\n+        ElasticApmTracer tracer = ElasticApmInstrumentation.tracer;\n+        if (tracer == null || tracer.getState() == ElasticApmTracer.TracerState.STOPPED) {", "originalCommit": "74a4b0dfbedbcb2d1e328e90f8dec377d4b5871f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc2NTAzMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1089#discussion_r399765031", "bodyText": "This is according to the way we defined the STOPPED state as irreversible.\n\nIs that triggered for example if a test leaves the tracer in a stopped state ?\n\nYes, for example - this one.", "author": "eyalkoren", "createdAt": "2020-03-29T08:33:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM0MTY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM0NDYxNw==", "url": "https://github.com/elastic/apm-agent-java/pull/1089#discussion_r396344617", "bodyText": "This null-check if statement is \ud83d\ude0d", "author": "SylvainJuge", "createdAt": "2020-03-23T10:21:42Z", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/AsyncInstrumentation.java", "diffHunk": "@@ -71,15 +71,12 @@\n \n     public AsyncInstrumentation(ElasticApmTracer tracer) {\n         synchronized (AsyncInstrumentation.class) {\n-            // adding a null-check before setting helper manager reference breaks test execution, which prevents having\n-            // the same code construct we have for other HelperClassManager usages.\n-            //\n-            // This should probably be changed when upgrading this plugin to use HelperClassManager for all helper\n-            // classes.\n-            asyncHelperManager = HelperClassManager.ForSingleClassLoader.of(tracer,\n-                \"co.elastic.apm.agent.servlet.helper.AsyncContextAdviceHelperImpl\",\n-                \"co.elastic.apm.agent.servlet.helper.AsyncContextAdviceHelperImpl$ApmAsyncListenerAllocator\",\n-                \"co.elastic.apm.agent.servlet.helper.ApmAsyncListener\");\n+            if (asyncHelperManager == null) {\n+                asyncHelperManager = HelperClassManager.ForSingleClassLoader.of(tracer,\n+                    \"co.elastic.apm.agent.servlet.helper.AsyncContextAdviceHelperImpl\",\n+                    \"co.elastic.apm.agent.servlet.helper.AsyncContextAdviceHelperImpl$ApmAsyncListenerAllocator\",\n+                    \"co.elastic.apm.agent.servlet.helper.ApmAsyncListener\");\n+            }", "originalCommit": "74a4b0dfbedbcb2d1e328e90f8dec377d4b5871f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NjczNw==", "url": "https://github.com/elastic/apm-agent-java/pull/1089#discussion_r396476737", "bodyText": "Why do we allow tests to leak the tracer? It may be configured to only use certain instrumentations.\nWe could keep a stack trace of where the tracer initialized. That way we can find out which test has leaked the tracer and fix it instead of re-using a tracer that is in an unknown state.", "author": "felixbarny", "createdAt": "2020-03-23T14:07:49Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/MockTracer.java", "diffHunk": "@@ -81,6 +84,47 @@ public static ElasticApmTracer createRealTracer(Reporter reporter, Configuration\n             .build();\n     }\n \n+    /**\n+     * If an instrumentation has already been initialized by some other test, returns the static", "originalCommit": "74a4b0dfbedbcb2d1e328e90f8dec377d4b5871f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc2NjEyMA==", "url": "https://github.com/elastic/apm-agent-java/pull/1089#discussion_r399766120", "bodyText": "The basic problem is the way we spread around tracer's references, so it is held as a field in many places (all Instrumentations, numerous helpers etc.), which means it leaks by design whenever multiple instrumentation tests are executed on the same JVM. Currently this is only a problem in tests, but it may become a real issue when we implement detach/re-attach.\nI think the proper solution is to refactor the tracer to be a singleton, then we can easily control all accesses centrally.", "author": "eyalkoren", "createdAt": "2020-03-29T08:44:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NjczNw=="}], "type": "inlineReview"}, {"oid": "39d9f56210086ad06401dfa3086a06637dba6228", "url": "https://github.com/elastic/apm-agent-java/commit/39d9f56210086ad06401dfa3086a06637dba6228", "message": "Merge remote-tracking branch 'upstream/master' into make-instrumentation-tests-more-robust", "committedDate": "2020-03-30T14:43:54Z", "type": "commit"}, {"oid": "24d4a141211ff59207b85afc82c8f04272436d54", "url": "https://github.com/elastic/apm-agent-java/commit/24d4a141211ff59207b85afc82c8f04272436d54", "message": "Applying review suggestions", "committedDate": "2020-03-30T15:08:07Z", "type": "commit"}]}