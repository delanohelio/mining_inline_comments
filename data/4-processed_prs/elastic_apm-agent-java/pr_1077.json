{"pr_number": 1077, "pr_title": "Simple bypass for servlet spec < 3.x", "pr_createdAt": "2020-03-06T18:32:09Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1077", "timeline": [{"oid": "d7aa309953896fa5bd2aa8086d3514cbd104444c", "url": "https://github.com/elastic/apm-agent-java/commit/d7aa309953896fa5bd2aa8086d3514cbd104444c", "message": "Simple bypass for servlet spec < 3.x", "committedDate": "2020-03-06T18:20:49Z", "type": "commit"}, {"oid": "82143cfdf359846b8658ff34b90d57dc44bb61de", "url": "https://github.com/elastic/apm-agent-java/commit/82143cfdf359846b8658ff34b90d57dc44bb61de", "message": "update changelog", "committedDate": "2020-03-06T18:46:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0Mjc5NA==", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r389342794", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                AbstractServletInstrumentation(ElasticApmTracer tracer){\n          \n          \n            \n                protected AbstractServletInstrumentation(ElasticApmTracer tracer){\n          \n      \n    \n    \n  \n\nProvides a more accurate access and works also if the actual instrumentation is loaded by a different class loader than the one loading this abstract parent", "author": "eyalkoren", "createdAt": "2020-03-08T07:22:10Z", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/AbstractServletInstrumentation.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+\n+public abstract class AbstractServletInstrumentation extends ElasticApmInstrumentation {\n+\n+    AbstractServletInstrumentation(ElasticApmTracer tracer){", "originalCommit": "82143cfdf359846b8658ff34b90d57dc44bb61de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0Mjk1OA==", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r389342958", "bodyText": "This shouldn't be done here, as it is not required for all subclasses. Adds a non-required dependency between AsyncInstrumentation and ServletApiAdvice.", "author": "eyalkoren", "createdAt": "2020-03-08T07:25:16Z", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/AbstractServletInstrumentation.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.bytebuddy.CustomElementMatchers;\n+import co.elastic.apm.agent.impl.ElasticApmTracer;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+\n+public abstract class AbstractServletInstrumentation extends ElasticApmInstrumentation {\n+\n+    AbstractServletInstrumentation(ElasticApmTracer tracer){\n+        ServletApiAdvice.init(tracer);", "originalCommit": "82143cfdf359846b8658ff34b90d57dc44bb61de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc4MjY0OQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r389782649", "bodyText": "fixed in the last commit", "author": "SylvainJuge", "createdAt": "2020-03-09T15:51:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0Mjk1OA=="}], "type": "inlineReview"}, {"oid": "70e9f8ba3acdee51cf815277bf5443055b52695e", "url": "https://github.com/elastic/apm-agent-java/commit/70e9f8ba3acdee51cf815277bf5443055b52695e", "message": "Update apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/AbstractServletInstrumentation.java\n\nCo-Authored-By: eyalkoren <41850454+eyalkoren@users.noreply.github.com>", "committedDate": "2020-03-09T09:29:04Z", "type": "commit"}, {"oid": "24045fd87b2ee65445d5a93977e4ed44178c5f89", "url": "https://github.com/elastic/apm-agent-java/commit/24045fd87b2ee65445d5a93977e4ed44178c5f89", "message": "post-review changes + attempt to fix on payara", "committedDate": "2020-03-09T15:47:42Z", "type": "commit"}, {"oid": "4205376b0b03a52b95b6aa89f06cd8f8cd3daeb7", "url": "https://github.com/elastic/apm-agent-java/commit/4205376b0b03a52b95b6aa89f06cd8f8cd3daeb7", "message": "warn only once", "committedDate": "2020-03-10T08:35:08Z", "type": "commit"}, {"oid": "6ce246f7c5eb9da67b223b735ad58db97e1f9b36", "url": "https://github.com/elastic/apm-agent-java/commit/6ce246f7c5eb9da67b223b735ad58db97e1f9b36", "message": "Merge branch 'master' into do-not-instrument-old-servlet", "committedDate": "2020-03-10T08:41:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2MzA3OQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r390163079", "bodyText": "Also instrument Servlet#doService, as all servlets might already be initialized once the agent attaches.", "author": "felixbarny", "createdAt": "2020-03-10T08:45:50Z", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletInitInstrumentation.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletContext;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContainsIgnoreCase;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * Instruments {@link javax.servlet.Servlet#init(ServletConfig)} to provide a warning when an unsupported Servlet version is used", "originalCommit": "6ce246f7c5eb9da67b223b735ad58db97e1f9b36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIxODY1OA==", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r390218658", "bodyText": "done in the last commit", "author": "SylvainJuge", "createdAt": "2020-03-10T10:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2MzA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2MzU4Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r390163587", "bodyText": "As we're ok with logging twice, it's fine to make this non-volatile\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static volatile boolean doCheckAndWarn = true;\n          \n          \n            \n                public static boolean doCheckAndWarn = true;", "author": "felixbarny", "createdAt": "2020-03-10T08:46:55Z", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletInitInstrumentation.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletContext;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContainsIgnoreCase;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * Instruments {@link javax.servlet.Servlet#init(ServletConfig)} to provide a warning when an unsupported Servlet version is used\n+ */\n+public class ServletInitInstrumentation extends ElasticApmInstrumentation {\n+\n+    @VisibleForAdvice\n+    public static final Logger logger = LoggerFactory.getLogger(ServletTransactionHelper.class);\n+\n+    /**\n+     * Allows to perform check only once with loose concurrency requirements. Thus there might be multiple warning\n+     * messages, but most of the time there won't.\n+     */\n+    @VisibleForAdvice\n+    public static volatile boolean doCheckAndWarn = true;", "originalCommit": "6ce246f7c5eb9da67b223b735ad58db97e1f9b36", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2Njk0NA==", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r390166944", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            doCheckAndWarn = false;", "author": "felixbarny", "createdAt": "2020-03-10T08:53:31Z", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletInitInstrumentation.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletContext;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContainsIgnoreCase;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * Instruments {@link javax.servlet.Servlet#init(ServletConfig)} to provide a warning when an unsupported Servlet version is used\n+ */\n+public class ServletInitInstrumentation extends ElasticApmInstrumentation {\n+\n+    @VisibleForAdvice\n+    public static final Logger logger = LoggerFactory.getLogger(ServletTransactionHelper.class);\n+\n+    /**\n+     * Allows to perform check only once with loose concurrency requirements. Thus there might be multiple warning\n+     * messages, but most of the time there won't.\n+     */\n+    @VisibleForAdvice\n+    public static volatile boolean doCheckAndWarn = true;\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameContains(\"Servlet\").or(nameContainsIgnoreCase(\"jsp\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return not(isInterface())\n+            .and(hasSuperType(named(\"javax.servlet.Servlet\")));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"init\")\n+            .and(takesArgument(0, named(\"javax.servlet.ServletConfig\")));\n+    }\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        return Collections.singleton(SERVLET_API);\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    private static void onEnter(@Advice.Argument(0) @Nullable ServletConfig servletConfig) {\n+\n+        if (!doCheckAndWarn) {\n+            return;\n+        }\n+", "originalCommit": "6ce246f7c5eb9da67b223b735ad58db97e1f9b36", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2NzEzOA==", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r390167138", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    doCheckAndWarn = false;", "author": "felixbarny", "createdAt": "2020-03-10T08:53:51Z", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletInitInstrumentation.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletContext;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContainsIgnoreCase;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * Instruments {@link javax.servlet.Servlet#init(ServletConfig)} to provide a warning when an unsupported Servlet version is used\n+ */\n+public class ServletInitInstrumentation extends ElasticApmInstrumentation {\n+\n+    @VisibleForAdvice\n+    public static final Logger logger = LoggerFactory.getLogger(ServletTransactionHelper.class);\n+\n+    /**\n+     * Allows to perform check only once with loose concurrency requirements. Thus there might be multiple warning\n+     * messages, but most of the time there won't.\n+     */\n+    @VisibleForAdvice\n+    public static volatile boolean doCheckAndWarn = true;\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameContains(\"Servlet\").or(nameContainsIgnoreCase(\"jsp\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return not(isInterface())\n+            .and(hasSuperType(named(\"javax.servlet.Servlet\")));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"init\")\n+            .and(takesArgument(0, named(\"javax.servlet.ServletConfig\")));\n+    }\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        return Collections.singleton(SERVLET_API);\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    private static void onEnter(@Advice.Argument(0) @Nullable ServletConfig servletConfig) {\n+\n+        if (!doCheckAndWarn) {\n+            return;\n+        }\n+\n+        int majorVersion = -1;\n+        int minorVersion = -1;\n+        if (servletConfig != null) {\n+            ServletContext servletContext = servletConfig.getServletContext();\n+            if (null != servletContext) {\n+                majorVersion = servletContext.getMajorVersion();\n+                minorVersion = servletContext.getMinorVersion();\n+            }\n+        }\n+\n+        if (majorVersion < 3) {\n+            logger.warn(\"Unsupported servlet version detected: {}.{}, no Servlet transaction will be created\", majorVersion, minorVersion);\n+        }\n+\n+        doCheckAndWarn = false;", "originalCommit": "6ce246f7c5eb9da67b223b735ad58db97e1f9b36", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODM0Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r390168342", "bodyText": "Kill two birds with one stone and also log the servlet info. That will be really useful to avoid back-and-forth in support requests.\nlogger.info(servletConfig.getServletContext().getServerInfo());", "author": "felixbarny", "createdAt": "2020-03-10T08:56:04Z", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletInitInstrumentation.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletContext;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContainsIgnoreCase;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * Instruments {@link javax.servlet.Servlet#init(ServletConfig)} to provide a warning when an unsupported Servlet version is used\n+ */\n+public class ServletInitInstrumentation extends ElasticApmInstrumentation {\n+\n+    @VisibleForAdvice\n+    public static final Logger logger = LoggerFactory.getLogger(ServletTransactionHelper.class);\n+\n+    /**\n+     * Allows to perform check only once with loose concurrency requirements. Thus there might be multiple warning\n+     * messages, but most of the time there won't.\n+     */\n+    @VisibleForAdvice\n+    public static volatile boolean doCheckAndWarn = true;\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameContains(\"Servlet\").or(nameContainsIgnoreCase(\"jsp\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return not(isInterface())\n+            .and(hasSuperType(named(\"javax.servlet.Servlet\")));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(\"init\")\n+            .and(takesArgument(0, named(\"javax.servlet.ServletConfig\")));\n+    }\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        return Collections.singleton(SERVLET_API);\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    private static void onEnter(@Advice.Argument(0) @Nullable ServletConfig servletConfig) {\n+\n+        if (!doCheckAndWarn) {\n+            return;\n+        }\n+\n+        int majorVersion = -1;\n+        int minorVersion = -1;\n+        if (servletConfig != null) {\n+            ServletContext servletContext = servletConfig.getServletContext();\n+            if (null != servletContext) {\n+                majorVersion = servletContext.getMajorVersion();\n+                minorVersion = servletContext.getMinorVersion();\n+            }\n+        }\n+", "originalCommit": "6ce246f7c5eb9da67b223b735ad58db97e1f9b36", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "90b42c6ea1186647de946b2b101e6e875ad7af28", "url": "https://github.com/elastic/apm-agent-java/commit/90b42c6ea1186647de946b2b101e6e875ad7af28", "message": "use atomic boolean + instrument service method", "committedDate": "2020-03-10T10:13:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MjY4Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r390242682", "bodyText": "To avoid a CAS on every invocation\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (!doLogAndWarn.getAndSet(false)) {\n          \n          \n            \n                        if (!doLogAndWarn.get() || !doLogAndWarn.getAndSet(false)) {\n          \n      \n    \n    \n  \n\nmaybe rename doLogAndWarn to alreadyLogged to get rid of the negations which are a bit harder to parse?", "author": "felixbarny", "createdAt": "2020-03-10T11:12:21Z", "path": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletVersionInstrumentation.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.servlet;\n+\n+import co.elastic.apm.agent.bci.ElasticApmInstrumentation;\n+import co.elastic.apm.agent.bci.VisibleForAdvice;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.NamedElement;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static co.elastic.apm.agent.servlet.ServletInstrumentation.SERVLET_API;\n+import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContains;\n+import static net.bytebuddy.matcher.ElementMatchers.nameContainsIgnoreCase;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * Instruments {@link javax.servlet.Servlet} to log Servlet container details and warns about unsupported version.\n+ * <p>\n+ * Does not inherit from {@link AbstractServletInstrumentation} in order to still instrument when servlet version is not\n+ * supported.\n+ */\n+public abstract class ServletVersionInstrumentation extends ElasticApmInstrumentation {\n+\n+    @VisibleForAdvice\n+    public static final Logger logger = LoggerFactory.getLogger(ServletVersionInstrumentation.class);\n+\n+    @VisibleForAdvice\n+    public static AtomicBoolean doLogAndWarn = new AtomicBoolean(true);\n+\n+    @Override\n+    public ElementMatcher<? super NamedElement> getTypeMatcherPreFilter() {\n+        return nameContains(\"Servlet\").or(nameContainsIgnoreCase(\"jsp\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return not(isInterface())\n+            .and(hasSuperType(named(\"javax.servlet.Servlet\")));\n+    }\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        return Collections.singleton(SERVLET_API);\n+    }\n+\n+    /**\n+     * Instruments {@link javax.servlet.Servlet#init(ServletConfig)}\n+     */\n+    public static class Init extends ServletVersionInstrumentation {\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"init\")\n+                .and(takesArgument(0, named(\"javax.servlet.ServletConfig\")));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class)\n+        @SuppressWarnings(\"Duplicates\") // duplication is fine here as it allows to inline code\n+        private static void onEnter(@Advice.Argument(0) @Nullable ServletConfig servletConfig) {\n+            if (!doLogAndWarn.getAndSet(false)) {\n+                return;\n+            }\n+\n+            int majorVersion = -1;\n+            int minorVersion = -1;\n+            String serverInfo = null;\n+            if (servletConfig != null) {\n+                ServletContext servletContext = servletConfig.getServletContext();\n+                if (null != servletContext) {\n+                    majorVersion = servletContext.getMajorVersion();\n+                    minorVersion = servletContext.getMinorVersion();\n+                    serverInfo = servletContext.getServerInfo();\n+                }\n+            }\n+\n+            logger.info(\"Servlet container info = {}\", serverInfo);\n+            if (majorVersion < 3) {\n+                logger.warn(\"Unsupported servlet version detected: {}.{}, no Servlet transaction will be created\", majorVersion, minorVersion);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Instruments {@link javax.servlet.Servlet#service(ServletRequest, ServletResponse)}\n+     */\n+    public static class Service extends ServletVersionInstrumentation {\n+\n+        @Override\n+        public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+            return named(\"service\")\n+                .and(takesArgument(0, named(\"javax.servlet.ServletRequest\")))\n+                .and(takesArgument(1, named(\"javax.servlet.ServletResponse\")));\n+        }\n+\n+        @Advice.OnMethodEnter(suppress = Throwable.class)\n+        @SuppressWarnings(\"Duplicates\") // duplication is fine here as it allows to inline code\n+        private static void onEnter(@Advice.This Servlet servlet) {\n+            if (!doLogAndWarn.getAndSet(false)) {", "originalCommit": "90b42c6ea1186647de946b2b101e6e875ad7af28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMyMTg3Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1077#discussion_r390321872", "bodyText": "definitely agree on having less negations, however doing a double check here seems a bit overkill. I think it's fine to replace this AtomicBoolean with a simple volatile boolean as AtomicBoolean.get does makes a volatile read, thus it won't be more efficient.", "author": "SylvainJuge", "createdAt": "2020-03-10T13:44:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MjY4Mg=="}], "type": "inlineReview"}, {"oid": "016e0d9279f7b85830c28fa87129a279aa1afd4a", "url": "https://github.com/elastic/apm-agent-java/commit/016e0d9279f7b85830c28fa87129a279aa1afd4a", "message": "avoid double negations and use a simple volatile", "committedDate": "2020-03-10T13:45:08Z", "type": "commit"}]}