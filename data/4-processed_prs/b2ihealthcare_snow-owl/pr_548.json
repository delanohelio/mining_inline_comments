{"pr_number": 548, "pr_title": "[docs] update security realm guide and configurations", "pr_createdAt": "2020-04-28T19:31:07Z", "pr_url": "https://github.com/b2ihealthcare/snow-owl/pull/548", "timeline": [{"oid": "31469709609bca9e1f7243ace8e011902c4cf70b", "url": "https://github.com/b2ihealthcare/snow-owl/commit/31469709609bca9e1f7243ace8e011902c4cf70b", "message": "[docs] update security realm guide and configurations\n\nUpdate File realm configuration.\nUpdate LDAP realm configuration.", "committedDate": "2020-04-28T19:30:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk1MDYwMw==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/548#discussion_r416950603", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The value should be a user/pass pair in case of using `Basic` authentication or a [JWT](https://jwt.io/) token generated by the Snow Owl if using the `Bearer` method.\n          \n          \n            \n            The value should be a user/pass pair in case of using `Basic` authentication or a [JWT](https://jwt.io/) token generated by Snow Owl if using the `Bearer` method.", "author": "apeteri", "createdAt": "2020-04-28T22:01:50Z", "path": "docs/setup/security/index.md", "diffHunk": "@@ -1,9 +1,77 @@\n # Configuring security in Snow Owl\n \n-Snow Owl security features enables you to easily secure your terminology server. You can password-protect your data as well as implement more advanced security measures such as role-based access control and auditing.\n+Snow Owl security features enable you to easily secure your terminology server. You can password-protect your data as well as implement more advanced security measures such as role-based access control and auditing.\n \n-You can choose the following security realms/identity providers to authenticate your users:\n+## Realms\n+\n+By default Snow Owl comes without any security features enabled and all read and write operations are unprotected.\n+To configure a security realm, you can choose from the following built-in identity providers:\n \n * [Configure a file realm](./file.md)\n * [Configure an LDAP realm](./ldap.md)\n \n+## Authentication\n+\n+After configuring at least one security realm, Snow Owl will authenticate all incoming requests to ensure that the sender of the request is allowed to access the terminology server and its contents.\n+To authenticate a request, the client must send an HTTP `Basic` or `Bearer` Authorization header with the request.\n+The value should be a user/pass pair in case of using `Basic` authentication or a [JWT](https://jwt.io/) token generated by the Snow Owl if using the `Bearer` method.", "originalCommit": "31469709609bca9e1f7243ace8e011902c4cf70b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk1NTI0MA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/548#discussion_r416955240", "bodyText": "I think this needs the singular form:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: It is recommended in production environments that all communications between a client and Snow Owl is performed through a secure connection. \n          \n          \n            \n            NOTE: It is recommended in production environments that all communication between a client and Snow Owl is performed through a secure connection.", "author": "apeteri", "createdAt": "2020-04-28T22:11:51Z", "path": "docs/setup/security/index.md", "diffHunk": "@@ -1,9 +1,77 @@\n # Configuring security in Snow Owl\n \n-Snow Owl security features enables you to easily secure your terminology server. You can password-protect your data as well as implement more advanced security measures such as role-based access control and auditing.\n+Snow Owl security features enable you to easily secure your terminology server. You can password-protect your data as well as implement more advanced security measures such as role-based access control and auditing.\n \n-You can choose the following security realms/identity providers to authenticate your users:\n+## Realms\n+\n+By default Snow Owl comes without any security features enabled and all read and write operations are unprotected.\n+To configure a security realm, you can choose from the following built-in identity providers:\n \n * [Configure a file realm](./file.md)\n * [Configure an LDAP realm](./ldap.md)\n \n+## Authentication\n+\n+After configuring at least one security realm, Snow Owl will authenticate all incoming requests to ensure that the sender of the request is allowed to access the terminology server and its contents.\n+To authenticate a request, the client must send an HTTP `Basic` or `Bearer` Authorization header with the request.\n+The value should be a user/pass pair in case of using `Basic` authentication or a [JWT](https://jwt.io/) token generated by the Snow Owl if using the `Bearer` method.\n+\n+{% hint style=\"info\" %}\n+NOTE: It is recommended in production environments that all communications between a client and Snow Owl is performed through a secure connection. ", "originalCommit": "31469709609bca9e1f7243ace8e011902c4cf70b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk1NTU5Nw==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/548#discussion_r416955597", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Snow Owl responds back with an `HTTP 401 Unauthorized` response if the request needs to be authenticated.\n          \n          \n            \n            Snow Owl sends an `HTTP 401 Unauthorized` response if a request needs to be authenticated.", "author": "apeteri", "createdAt": "2020-04-28T22:12:45Z", "path": "docs/setup/security/index.md", "diffHunk": "@@ -1,9 +1,77 @@\n # Configuring security in Snow Owl\n \n-Snow Owl security features enables you to easily secure your terminology server. You can password-protect your data as well as implement more advanced security measures such as role-based access control and auditing.\n+Snow Owl security features enable you to easily secure your terminology server. You can password-protect your data as well as implement more advanced security measures such as role-based access control and auditing.\n \n-You can choose the following security realms/identity providers to authenticate your users:\n+## Realms\n+\n+By default Snow Owl comes without any security features enabled and all read and write operations are unprotected.\n+To configure a security realm, you can choose from the following built-in identity providers:\n \n * [Configure a file realm](./file.md)\n * [Configure an LDAP realm](./ldap.md)\n \n+## Authentication\n+\n+After configuring at least one security realm, Snow Owl will authenticate all incoming requests to ensure that the sender of the request is allowed to access the terminology server and its contents.\n+To authenticate a request, the client must send an HTTP `Basic` or `Bearer` Authorization header with the request.\n+The value should be a user/pass pair in case of using `Basic` authentication or a [JWT](https://jwt.io/) token generated by the Snow Owl if using the `Bearer` method.\n+\n+{% hint style=\"info\" %}\n+NOTE: It is recommended in production environments that all communications between a client and Snow Owl is performed through a secure connection. \n+{% endhint %}\n+\n+Snow Owl responds back with an `HTTP 401 Unauthorized` response if the request needs to be authenticated.", "originalCommit": "31469709609bca9e1f7243ace8e011902c4cf70b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk1OTgzNA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/548#discussion_r416959834", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            After successful authentication and if supported by the selected security realm, Snow Owl will check whether the user can access the resource based on the roles and permissions set in the current security realms.\n          \n          \n            \n            If supported by the security realm, Snow Owl will also check whether an authenticated user is permitted to perform the requested action on a given resource.", "author": "apeteri", "createdAt": "2020-04-28T22:22:54Z", "path": "docs/setup/security/index.md", "diffHunk": "@@ -1,9 +1,77 @@\n # Configuring security in Snow Owl\n \n-Snow Owl security features enables you to easily secure your terminology server. You can password-protect your data as well as implement more advanced security measures such as role-based access control and auditing.\n+Snow Owl security features enable you to easily secure your terminology server. You can password-protect your data as well as implement more advanced security measures such as role-based access control and auditing.\n \n-You can choose the following security realms/identity providers to authenticate your users:\n+## Realms\n+\n+By default Snow Owl comes without any security features enabled and all read and write operations are unprotected.\n+To configure a security realm, you can choose from the following built-in identity providers:\n \n * [Configure a file realm](./file.md)\n * [Configure an LDAP realm](./ldap.md)\n \n+## Authentication\n+\n+After configuring at least one security realm, Snow Owl will authenticate all incoming requests to ensure that the sender of the request is allowed to access the terminology server and its contents.\n+To authenticate a request, the client must send an HTTP `Basic` or `Bearer` Authorization header with the request.\n+The value should be a user/pass pair in case of using `Basic` authentication or a [JWT](https://jwt.io/) token generated by the Snow Owl if using the `Bearer` method.\n+\n+{% hint style=\"info\" %}\n+NOTE: It is recommended in production environments that all communications between a client and Snow Owl is performed through a secure connection. \n+{% endhint %}\n+\n+Snow Owl responds back with an `HTTP 401 Unauthorized` response if the request needs to be authenticated.\n+\n+## Authorization\n+\n+After successful authentication and if supported by the selected security realm, Snow Owl will check whether the user can access the resource based on the roles and permissions set in the current security realms.", "originalCommit": "31469709609bca9e1f7243ace8e011902c4cf70b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk2MTQ0OA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/548#discussion_r416961448", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Role assignment: A subject can exercise a permission only if the subject has selected or been assigned a role.\n          \n          \n            \n            Permission authorization: A subject can exercise a permission only if the permission is authorized for the subject's active role. With rules 1 and 2, this rule ensures that users can exercise only permissions for which they are authorized.\n          \n          \n            \n            1. Role assignment: A subject can exercise a permission only if the subject has selected or been assigned a role.\n          \n          \n            \n            2. Permission authorization: A subject can exercise a permission only if the permission is authorized for the subject's active role.\n          \n          \n            \n            \n          \n          \n            \n            With rules 1 and 2, it is ensured that users can exercise only permissions for which they are authorized.", "author": "apeteri", "createdAt": "2020-04-28T22:27:01Z", "path": "docs/setup/security/index.md", "diffHunk": "@@ -1,9 +1,77 @@\n # Configuring security in Snow Owl\n \n-Snow Owl security features enables you to easily secure your terminology server. You can password-protect your data as well as implement more advanced security measures such as role-based access control and auditing.\n+Snow Owl security features enable you to easily secure your terminology server. You can password-protect your data as well as implement more advanced security measures such as role-based access control and auditing.\n \n-You can choose the following security realms/identity providers to authenticate your users:\n+## Realms\n+\n+By default Snow Owl comes without any security features enabled and all read and write operations are unprotected.\n+To configure a security realm, you can choose from the following built-in identity providers:\n \n * [Configure a file realm](./file.md)\n * [Configure an LDAP realm](./ldap.md)\n \n+## Authentication\n+\n+After configuring at least one security realm, Snow Owl will authenticate all incoming requests to ensure that the sender of the request is allowed to access the terminology server and its contents.\n+To authenticate a request, the client must send an HTTP `Basic` or `Bearer` Authorization header with the request.\n+The value should be a user/pass pair in case of using `Basic` authentication or a [JWT](https://jwt.io/) token generated by the Snow Owl if using the `Bearer` method.\n+\n+{% hint style=\"info\" %}\n+NOTE: It is recommended in production environments that all communications between a client and Snow Owl is performed through a secure connection. \n+{% endhint %}\n+\n+Snow Owl responds back with an `HTTP 401 Unauthorized` response if the request needs to be authenticated.\n+\n+## Authorization\n+\n+After successful authentication and if supported by the selected security realm, Snow Owl will check whether the user can access the resource based on the roles and permissions set in the current security realms.\n+\n+Within an organization, roles are created for various job functions. The permissions to perform certain operations are assigned to specific roles. Members or staff (or other system users) are assigned particular roles, and through those role assignments acquire the permissions needed to perform particular system functions. Since users are not assigned permissions directly, but only acquire them through their role (or roles), management of individual user rights becomes a matter of simply assigning appropriate roles to the user's account; this simplifies common operations, such as adding a user, or changing a user's department.\n+\n+### Rules\n+\n+Role assignment: A subject can exercise a permission only if the subject has selected or been assigned a role.\n+Permission authorization: A subject can exercise a permission only if the permission is authorized for the subject's active role. With rules 1 and 2, this rule ensures that users can exercise only permissions for which they are authorized.", "originalCommit": "31469709609bca9e1f7243ace8e011902c4cf70b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk2MTg5NA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/548#discussion_r416961894", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In Snow Owl a permission is a single value that represents both the operation of the user would like to perform and the resource that is being accessed.\n          \n          \n            \n            In Snow Owl a permission is a single value that represents both the operation the user would like to perform and the resource that is being accessed.", "author": "apeteri", "createdAt": "2020-04-28T22:28:11Z", "path": "docs/setup/security/index.md", "diffHunk": "@@ -1,9 +1,77 @@\n # Configuring security in Snow Owl\n \n-Snow Owl security features enables you to easily secure your terminology server. You can password-protect your data as well as implement more advanced security measures such as role-based access control and auditing.\n+Snow Owl security features enable you to easily secure your terminology server. You can password-protect your data as well as implement more advanced security measures such as role-based access control and auditing.\n \n-You can choose the following security realms/identity providers to authenticate your users:\n+## Realms\n+\n+By default Snow Owl comes without any security features enabled and all read and write operations are unprotected.\n+To configure a security realm, you can choose from the following built-in identity providers:\n \n * [Configure a file realm](./file.md)\n * [Configure an LDAP realm](./ldap.md)\n \n+## Authentication\n+\n+After configuring at least one security realm, Snow Owl will authenticate all incoming requests to ensure that the sender of the request is allowed to access the terminology server and its contents.\n+To authenticate a request, the client must send an HTTP `Basic` or `Bearer` Authorization header with the request.\n+The value should be a user/pass pair in case of using `Basic` authentication or a [JWT](https://jwt.io/) token generated by the Snow Owl if using the `Bearer` method.\n+\n+{% hint style=\"info\" %}\n+NOTE: It is recommended in production environments that all communications between a client and Snow Owl is performed through a secure connection. \n+{% endhint %}\n+\n+Snow Owl responds back with an `HTTP 401 Unauthorized` response if the request needs to be authenticated.\n+\n+## Authorization\n+\n+After successful authentication and if supported by the selected security realm, Snow Owl will check whether the user can access the resource based on the roles and permissions set in the current security realms.\n+\n+Within an organization, roles are created for various job functions. The permissions to perform certain operations are assigned to specific roles. Members or staff (or other system users) are assigned particular roles, and through those role assignments acquire the permissions needed to perform particular system functions. Since users are not assigned permissions directly, but only acquire them through their role (or roles), management of individual user rights becomes a matter of simply assigning appropriate roles to the user's account; this simplifies common operations, such as adding a user, or changing a user's department.\n+\n+### Rules\n+\n+Role assignment: A subject can exercise a permission only if the subject has selected or been assigned a role.\n+Permission authorization: A subject can exercise a permission only if the permission is authorized for the subject's active role. With rules 1 and 2, this rule ensures that users can exercise only permissions for which they are authorized.\n+\n+S = Subject = A person or automated agent\n+R = Role = Job function or title which defines an authority level\n+P = Permissions = An approval of a mode of access to a resource\n+\n+### Permissions\n+\n+In Snow Owl a permission is a single value that represents both the operation of the user would like to perform and the resource that is being accessed.", "originalCommit": "31469709609bca9e1f7243ace8e011902c4cf70b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk2MzY3OQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/548#discussion_r416963679", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If either the search for the user or the authentication fail for any reason, the user is not allowed to access the terminology server's content and the server will respond with an `HTTP 401 Unauthorized` response.\n          \n          \n            \n            If either the search for the user or the authentication fail for any reason, the user is not allowed to access the terminology server's content and the server will respond with `HTTP 401 Unauthorized`.", "author": "apeteri", "createdAt": "2020-04-28T22:32:46Z", "path": "docs/setup/security/ldap.md", "diffHunk": "@@ -10,10 +12,77 @@ identity:\n         baseDn: dc=snowowl,dc=b2international,dc=com\n         rootDn: cn=admin,dc=snowowl,dc=b2international,dc=com\n         rootDnPassword: <adminpwd>\n+        userObjectClass: inetOrgPerson\n+        roleObjectClass: groupOfUniqueNames\n         userIdProperty: uid\n+        permissionProperty: description\n+        memberProperty: uniqueMember\n         usePool: false\n ```\n \n-At a minimum, you must set the realm type to `ldap`, specify the `url` of the LDAP server and set the `rootDnPassword` in the `snowowl.yml` configuration file. \n-Your users should be available under the specified `baseDn` entry, and also there should be an `cn=admin` entry to allow access for Snow Owl to read user data.\n-By default Snow Owl expects that the username of a user is present in the `uid` property. You can change this in the `userIdProperty` setting.\n\\ No newline at end of file\n+## Configuration\n+\n+The following configuration settings are supported:\n+\n+| Configuration |      Description      |\n+|---------------|-----------------------|\n+| uri |  The LDAP URI that points to the LDAP/AD server to connect to |\n+| baseDn | The base directory where all entries in the entire subtree will be considered as potential matches for all searches |\n+| rootDn | The user's DN who has access to the entire `baseDn` and read content from it |\n+| rootDnPassword | The password of the `rootDn` user |\n+| userObjectClass | The user object's class to look for when searching for user entries. Defaults to `inetOrgPerson` class. |\n+| roleObjectClass | The role object's class to look for when searching for role entries. Defaults to `groupOfUniqueNames` class. |\n+| userIdProperty | The userId property to access and read for the user's unique identifier. Usually their username or email address. Defaults to `uid` property. |\n+| permissionProperty | A multi-valued property that is used to store permission information on a role. Defaults to the `description` property.  |\n+| memberProperty | A multi-valued property that is used to store and retrieve user `dn`s that belong to a given role. Defaults to the `uniqueMember` property. |\n+\n+The default configuration values are selected to support both OpenLDAP and Active Directory without needing to customize the default schema that comes with their default installation.\n+\n+## Configure Authentication\n+\n+When users send their username and password with their request in the Authorization header, the LDAP security realm uses the provided username and password to first search for the user in the configured LDAP instance to get the user's `DN` and then user the received `DN` and the provided password to authenticate with the LDAP instance. \n+If either the search for the user or the authentication fail for any reason, the user is not allowed to access the terminology server's content and the server will respond with an `HTTP 401 Unauthorized` response.", "originalCommit": "31469709609bca9e1f7243ace8e011902c4cf70b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5b790a9be89d437605e13277217c9b606620ef8b", "url": "https://github.com/b2ihealthcare/snow-owl/commit/5b790a9be89d437605e13277217c9b606620ef8b", "message": "Update docs/setup/security/index.md\n\nCo-Authored-By: Andr\u00e1s P\u00e9teri <apeteri@b2international.com>", "committedDate": "2020-04-29T07:13:35Z", "type": "commit"}, {"oid": "ad4407e8a65a826f5c1b9db9aae3cfcb72c8956b", "url": "https://github.com/b2ihealthcare/snow-owl/commit/ad4407e8a65a826f5c1b9db9aae3cfcb72c8956b", "message": "Update docs/setup/security/index.md\n\nCo-Authored-By: Andr\u00e1s P\u00e9teri <apeteri@b2international.com>", "committedDate": "2020-04-29T07:13:42Z", "type": "commit"}, {"oid": "512ae68268b5866bd45cbe3e4d2d997554a3e014", "url": "https://github.com/b2ihealthcare/snow-owl/commit/512ae68268b5866bd45cbe3e4d2d997554a3e014", "message": "Update docs/setup/security/index.md\n\nCo-Authored-By: Andr\u00e1s P\u00e9teri <apeteri@b2international.com>", "committedDate": "2020-04-29T07:13:50Z", "type": "commit"}, {"oid": "e4b55fbca247eb727364b3e3cefa72ee76f1da27", "url": "https://github.com/b2ihealthcare/snow-owl/commit/e4b55fbca247eb727364b3e3cefa72ee76f1da27", "message": "Update docs/setup/security/index.md\n\nCo-Authored-By: Andr\u00e1s P\u00e9teri <apeteri@b2international.com>", "committedDate": "2020-04-29T07:13:59Z", "type": "commit"}, {"oid": "5e3f60e2ead52f9709f86e9d28d7a7c16338bded", "url": "https://github.com/b2ihealthcare/snow-owl/commit/5e3f60e2ead52f9709f86e9d28d7a7c16338bded", "message": "Update docs/setup/security/index.md\n\nCo-Authored-By: Andr\u00e1s P\u00e9teri <apeteri@b2international.com>", "committedDate": "2020-04-29T07:14:17Z", "type": "commit"}, {"oid": "bed75e9103c6b27321574082e9c50fd416409c9e", "url": "https://github.com/b2ihealthcare/snow-owl/commit/bed75e9103c6b27321574082e9c50fd416409c9e", "message": "Update docs/setup/security/index.md\n\nCo-Authored-By: Andr\u00e1s P\u00e9teri <apeteri@b2international.com>", "committedDate": "2020-04-29T07:14:25Z", "type": "commit"}, {"oid": "a8878d7af097e6036f95a789ecb16cafbbd79da7", "url": "https://github.com/b2ihealthcare/snow-owl/commit/a8878d7af097e6036f95a789ecb16cafbbd79da7", "message": "Update docs/setup/security/ldap.md\n\nCo-Authored-By: Andr\u00e1s P\u00e9teri <apeteri@b2international.com>", "committedDate": "2020-04-29T07:15:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0ODgwMA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/548#discussion_r417248800", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When users send their username and password with their request in the Authorization header, the LDAP security realm uses the provided username and password to first search for the user in the configured LDAP instance to get the user's `DN` and then user the received `DN` and the provided password to authenticate with the LDAP instance. \n          \n          \n            \n            When users send their username and password with their request in the Authorization header, the LDAP security realm uses the provided username and password to first search for the user in the configured LDAP instance to get the user's `DN` and then use the received `DN` and the provided password to authenticate with the LDAP instance.", "author": "nagyo", "createdAt": "2020-04-29T11:36:48Z", "path": "docs/setup/security/ldap.md", "diffHunk": "@@ -10,10 +12,77 @@ identity:\n         baseDn: dc=snowowl,dc=b2international,dc=com\n         rootDn: cn=admin,dc=snowowl,dc=b2international,dc=com\n         rootDnPassword: <adminpwd>\n+        userObjectClass: inetOrgPerson\n+        roleObjectClass: groupOfUniqueNames\n         userIdProperty: uid\n+        permissionProperty: description\n+        memberProperty: uniqueMember\n         usePool: false\n ```\n \n-At a minimum, you must set the realm type to `ldap`, specify the `url` of the LDAP server and set the `rootDnPassword` in the `snowowl.yml` configuration file. \n-Your users should be available under the specified `baseDn` entry, and also there should be an `cn=admin` entry to allow access for Snow Owl to read user data.\n-By default Snow Owl expects that the username of a user is present in the `uid` property. You can change this in the `userIdProperty` setting.\n\\ No newline at end of file\n+## Configuration\n+\n+The following configuration settings are supported:\n+\n+| Configuration |      Description      |\n+|---------------|-----------------------|\n+| uri |  The LDAP URI that points to the LDAP/AD server to connect to |\n+| baseDn | The base directory where all entries in the entire subtree will be considered as potential matches for all searches |\n+| rootDn | The user's DN who has access to the entire `baseDn` and read content from it |\n+| rootDnPassword | The password of the `rootDn` user |\n+| userObjectClass | The user object's class to look for when searching for user entries. Defaults to `inetOrgPerson` class. |\n+| roleObjectClass | The role object's class to look for when searching for role entries. Defaults to `groupOfUniqueNames` class. |\n+| userIdProperty | The userId property to access and read for the user's unique identifier. Usually their username or email address. Defaults to `uid` property. |\n+| permissionProperty | A multi-valued property that is used to store permission information on a role. Defaults to the `description` property.  |\n+| memberProperty | A multi-valued property that is used to store and retrieve user `dn`s that belong to a given role. Defaults to the `uniqueMember` property. |\n+\n+The default configuration values are selected to support both OpenLDAP and Active Directory without needing to customize the default schema that comes with their default installation.\n+\n+## Configure Authentication\n+\n+When users send their username and password with their request in the Authorization header, the LDAP security realm uses the provided username and password to first search for the user in the configured LDAP instance to get the user's `DN` and then user the received `DN` and the provided password to authenticate with the LDAP instance. ", "originalCommit": "a8878d7af097e6036f95a789ecb16cafbbd79da7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0OTA0MA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/548#discussion_r417249040", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If either the search for the user or the authentication fail for any reason, the user is not allowed to access the terminology server's content and the server will respond with `HTTP 401 Unauthorized`.\n          \n          \n            \n            If either the search for the user or the authentication fails for any reason, the user is not allowed to access the terminology server's content and the server will respond with `HTTP 401 Unauthorized`.", "author": "nagyo", "createdAt": "2020-04-29T11:37:21Z", "path": "docs/setup/security/ldap.md", "diffHunk": "@@ -10,10 +12,77 @@ identity:\n         baseDn: dc=snowowl,dc=b2international,dc=com\n         rootDn: cn=admin,dc=snowowl,dc=b2international,dc=com\n         rootDnPassword: <adminpwd>\n+        userObjectClass: inetOrgPerson\n+        roleObjectClass: groupOfUniqueNames\n         userIdProperty: uid\n+        permissionProperty: description\n+        memberProperty: uniqueMember\n         usePool: false\n ```\n \n-At a minimum, you must set the realm type to `ldap`, specify the `url` of the LDAP server and set the `rootDnPassword` in the `snowowl.yml` configuration file. \n-Your users should be available under the specified `baseDn` entry, and also there should be an `cn=admin` entry to allow access for Snow Owl to read user data.\n-By default Snow Owl expects that the username of a user is present in the `uid` property. You can change this in the `userIdProperty` setting.\n\\ No newline at end of file\n+## Configuration\n+\n+The following configuration settings are supported:\n+\n+| Configuration |      Description      |\n+|---------------|-----------------------|\n+| uri |  The LDAP URI that points to the LDAP/AD server to connect to |\n+| baseDn | The base directory where all entries in the entire subtree will be considered as potential matches for all searches |\n+| rootDn | The user's DN who has access to the entire `baseDn` and read content from it |\n+| rootDnPassword | The password of the `rootDn` user |\n+| userObjectClass | The user object's class to look for when searching for user entries. Defaults to `inetOrgPerson` class. |\n+| roleObjectClass | The role object's class to look for when searching for role entries. Defaults to `groupOfUniqueNames` class. |\n+| userIdProperty | The userId property to access and read for the user's unique identifier. Usually their username or email address. Defaults to `uid` property. |\n+| permissionProperty | A multi-valued property that is used to store permission information on a role. Defaults to the `description` property.  |\n+| memberProperty | A multi-valued property that is used to store and retrieve user `dn`s that belong to a given role. Defaults to the `uniqueMember` property. |\n+\n+The default configuration values are selected to support both OpenLDAP and Active Directory without needing to customize the default schema that comes with their default installation.\n+\n+## Configure Authentication\n+\n+When users send their username and password with their request in the Authorization header, the LDAP security realm uses the provided username and password to first search for the user in the configured LDAP instance to get the user's `DN` and then user the received `DN` and the provided password to authenticate with the LDAP instance. \n+If either the search for the user or the authentication fail for any reason, the user is not allowed to access the terminology server's content and the server will respond with `HTTP 401 Unauthorized`.", "originalCommit": "a8878d7af097e6036f95a789ecb16cafbbd79da7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI1MDU0Nw==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/548#discussion_r417250547", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Within an organization, roles are created for various job functions. The permissions to perform certain operations are assigned to specific roles. Members or staff (or other system users) are assigned particular roles, and through those role assignments acquire the permissions needed to perform particular system functions. Since users are not assigned permissions directly, but only acquire them through their role (or roles), management of individual user rights becomes a matter of simply assigning appropriate roles to the user's account; this simplifies common operations, such as adding a user, or changing a user's department.\n          \n          \n            \n            Within an organization, roles are created for various job functions. The permissions to perform certain operations are assigned to specific roles. Members, staff or other system users are assigned particular roles, and through those role assignments acquire the permissions needed to perform particular system functions. Since users are not assigned permissions directly, but only acquire them through their role (or roles), management of individual user rights becomes a matter of simply assigning appropriate roles to the user's account; this simplifies common operations, such as adding a user, or changing a user's department.", "author": "nagyo", "createdAt": "2020-04-29T11:40:19Z", "path": "docs/setup/security/index.md", "diffHunk": "@@ -1,9 +1,79 @@\n # Configuring security in Snow Owl\n \n-Snow Owl security features enables you to easily secure your terminology server. You can password-protect your data as well as implement more advanced security measures such as role-based access control and auditing.\n+Snow Owl security features enable you to easily secure your terminology server. You can password-protect your data as well as implement more advanced security measures such as role-based access control and auditing.\n \n-You can choose the following security realms/identity providers to authenticate your users:\n+## Realms\n+\n+By default Snow Owl comes without any security features enabled and all read and write operations are unprotected.\n+To configure a security realm, you can choose from the following built-in identity providers:\n \n * [Configure a file realm](./file.md)\n * [Configure an LDAP realm](./ldap.md)\n \n+## Authentication\n+\n+After configuring at least one security realm, Snow Owl will authenticate all incoming requests to ensure that the sender of the request is allowed to access the terminology server and its contents.\n+To authenticate a request, the client must send an HTTP `Basic` or `Bearer` Authorization header with the request.\n+The value should be a user/pass pair in case of using `Basic` authentication or a [JWT](https://jwt.io/) token generated by Snow Owl if using the `Bearer` method.\n+\n+{% hint style=\"info\" %}\n+NOTE: It is recommended in production environments that all communication between a client and Snow Owl is performed through a secure connection. \n+{% endhint %}\n+\n+Snow Owl sends an `HTTP 401 Unauthorized` response if a request needs to be authenticated.\n+\n+## Authorization\n+\n+If supported by the security realm, Snow Owl will also check whether an authenticated user is permitted to perform the requested action on a given resource.\n+\n+Within an organization, roles are created for various job functions. The permissions to perform certain operations are assigned to specific roles. Members or staff (or other system users) are assigned particular roles, and through those role assignments acquire the permissions needed to perform particular system functions. Since users are not assigned permissions directly, but only acquire them through their role (or roles), management of individual user rights becomes a matter of simply assigning appropriate roles to the user's account; this simplifies common operations, such as adding a user, or changing a user's department.", "originalCommit": "a8878d7af097e6036f95a789ecb16cafbbd79da7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI1MTA4Nw==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/548#discussion_r417251087", "bodyText": "This part changed only: Members or staff (or other system users)", "author": "nagyo", "createdAt": "2020-04-29T11:41:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI1MDU0Nw=="}], "type": "inlineReview"}, {"oid": "1184d88f53c21d0c6c5ae60a42ea121ea9d46218", "url": "https://github.com/b2ihealthcare/snow-owl/commit/1184d88f53c21d0c6c5ae60a42ea121ea9d46218", "message": "Update docs/setup/security/index.md\n\nCo-Authored-By: G\u00e1bor Nagy <gnagy@b2international.com>", "committedDate": "2020-04-29T12:18:47Z", "type": "commit"}, {"oid": "e73a32efeef0700bb6a8cc979463aa8e74e6e9a0", "url": "https://github.com/b2ihealthcare/snow-owl/commit/e73a32efeef0700bb6a8cc979463aa8e74e6e9a0", "message": "Update docs/setup/security/ldap.md\n\nCo-Authored-By: G\u00e1bor Nagy <gnagy@b2international.com>", "committedDate": "2020-04-29T12:18:55Z", "type": "commit"}, {"oid": "cb40c53bc3fc59af3069d233992823c0c21deeba", "url": "https://github.com/b2ihealthcare/snow-owl/commit/cb40c53bc3fc59af3069d233992823c0c21deeba", "message": "Update docs/setup/security/ldap.md\n\nCo-Authored-By: G\u00e1bor Nagy <gnagy@b2international.com>", "committedDate": "2020-04-29T12:45:46Z", "type": "commit"}, {"oid": "04212c82cb5cf18ab69bd95915b19c632028bf58", "url": "https://github.com/b2ihealthcare/snow-owl/commit/04212c82cb5cf18ab69bd95915b19c632028bf58", "message": "[docs] update ldap.md Authentication section", "committedDate": "2020-04-29T12:53:00Z", "type": "commit"}]}