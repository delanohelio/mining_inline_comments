{"pr_number": 1216, "pr_title": "Issue #1214: When used together, waitDurationInOpenState and waitIntervalFunctionInOpenStat waitDurationInOpenState will be overridden", "pr_createdAt": "2020-10-19T12:20:17Z", "pr_url": "https://github.com/resilience4j/resilience4j/pull/1216", "timeline": [{"oid": "9a2d24d1ccabd79e787ac2eab2051cf5e97f0bb9", "url": "https://github.com/resilience4j/resilience4j/commit/9a2d24d1ccabd79e787ac2eab2051cf5e97f0bb9", "message": "When used together, waitDurationInOpenState and waitIntervalFunctionInOpenStat waitDurationInOpenState will be overridden", "committedDate": "2020-10-18T13:25:28Z", "type": "commit"}, {"oid": "0dda8c34f7b4db28c552798b7814c63f3f1712c4", "url": "https://github.com/resilience4j/resilience4j/commit/0dda8c34f7b4db28c552798b7814c63f3f1712c4", "message": "When used together, waitDurationInOpenState and waitIntervalFunctionInOpenStat waitDurationInOpenState will be overridden", "committedDate": "2020-10-18T13:58:39Z", "type": "commit"}, {"oid": "254151451d51d90337754815757de76b9486d5e5", "url": "https://github.com/resilience4j/resilience4j/commit/254151451d51d90337754815757de76b9486d5e5", "message": "When used together, waitDurationInOpenState and waitIntervalFunctionInOpenStat waitDurationInOpenState will be overridden\n\n-forgot to delete javadoc", "committedDate": "2020-10-18T15:43:28Z", "type": "commit"}, {"oid": "e3d72f062ae3cb46db9d06dea2d238c363319166", "url": "https://github.com/resilience4j/resilience4j/commit/e3d72f062ae3cb46db9d06dea2d238c363319166", "message": "Merge branch 'bugfix/override-waitDurationInOpenState' into origin/issue-1214", "committedDate": "2020-10-19T10:45:44Z", "type": "commit"}, {"oid": "a0a145e2d9a56816dd9c6b989d6edd70d393704d", "url": "https://github.com/resilience4j/resilience4j/commit/a0a145e2d9a56816dd9c6b989d6edd70d393704d", "message": "When used together, waitDurationInOpenState and waitIntervalFunctionInOpenStat waitDurationInOpenState will be overridden", "committedDate": "2020-10-19T12:16:28Z", "type": "commit"}, {"oid": "c9179f54a37fc8d61ddbfb51b49b0226c740c0c7", "url": "https://github.com/resilience4j/resilience4j/commit/c9179f54a37fc8d61ddbfb51b49b0226c740c0c7", "message": "When used together, waitDurationInOpenState and waitIntervalFunctionInOpenStat waitDurationInOpenState will be overridden\n\n-fix test", "committedDate": "2020-10-19T13:07:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1MjAwNg==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r507752006", "bodyText": "If I set config like below, doesn't it throw exception?\n    CircuitBreakerConfig.custom()\n            .waitDurationInOpenState(Duration.ofMillis(3333))\n            .build();", "author": "dlsrb6342", "createdAt": "2020-10-19T13:36:57Z", "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -749,5 +760,13 @@ public CircuitBreakerConfig build() {\n                 .orElseGet(() -> recordExceptionPredicate != null ? recordExceptionPredicate\n                     : DEFAULT_RECORD_EXCEPTION_PREDICATE);\n         }\n+\n+        private IntervalFunction validateWaitIntervalFunctionInOpenState() {\n+            if (waitIntervalFunctionInOpenStateAlreadySet) {", "originalCommit": "c9179f54a37fc8d61ddbfb51b49b0226c740c0c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1MzA3NQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r507753075", "bodyText": "give me time i will fix it today", "author": "likhoman", "createdAt": "2020-10-19T13:38:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1MjAwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgwNDUxNQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r507804515", "bodyText": "This ATTENTION!!! is too strong :)\nI would remove it or replace with more formal \"Be aware that ...\"", "author": "hexmind", "createdAt": "2020-10-19T14:35:55Z", "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -342,6 +343,10 @@ public Builder writableStackTraceEnabled(boolean writableStackTraceEnabled) {\n          * Configures an interval function with a fixed wait duration which controls how long the\n          * CircuitBreaker should stay open, before it switches to half open. Default value is 60\n          * seconds.\n+         * <p>\n+         * <b>ATTENTION!!!</b> Do not use with {@link #waitIntervalFunctionInOpenState(IntervalFunction)}!", "originalCommit": "c9179f54a37fc8d61ddbfb51b49b0226c740c0c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e763a519c664d58063da1b4027c55e77ebc633e4", "url": "https://github.com/resilience4j/resilience4j/commit/e763a519c664d58063da1b4027c55e77ebc633e4", "message": "When used together, waitDurationInOpenState and waitIntervalFunctionInOpenStat waitDurationInOpenState will be overridden\n\n-fix test", "committedDate": "2020-10-19T15:06:13Z", "type": "commit"}, {"oid": "d861f8c3882dc027e69fb4c0c5e60c1b6ce1fcff", "url": "https://github.com/resilience4j/resilience4j/commit/d861f8c3882dc027e69fb4c0c5e60c1b6ce1fcff", "message": "When used together, waitDurationInOpenState and waitIntervalFunctionInOpenStat waitDurationInOpenState will be overridden\n\n-fix javadoc", "committedDate": "2020-10-19T15:11:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzNDkxNg==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r508234916", "bodyText": "Could you please change the message to:\n\"The waitIntervalFunction was configured twice which could result in an undesired state. Please use either waitIntervalFunctionInOpenState or  waitDurationInOpenState.\"", "author": "RobWin", "createdAt": "2020-10-20T06:17:55Z", "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -749,5 +761,13 @@ public CircuitBreakerConfig build() {\n                 .orElseGet(() -> recordExceptionPredicate != null ? recordExceptionPredicate\n                     : DEFAULT_RECORD_EXCEPTION_PREDICATE);\n         }\n+\n+        private IntervalFunction validateWaitIntervalFunctionInOpenState() {\n+            if (setWaitInOpenStateCounter > 1) {\n+                throw new IllegalStateException(\"You have already the durationInOpenState value from the waitDurationInOpenState method.\" +", "originalCommit": "d861f8c3882dc027e69fb4c0c5e60c1b6ce1fcff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "948b884e5b6f2164be41d3848a90762caa33fa44", "url": "https://github.com/resilience4j/resilience4j/commit/948b884e5b6f2164be41d3848a90762caa33fa44", "message": "When used together, waitDurationInOpenState and waitIntervalFunctionInOpenStat waitDurationInOpenState will be overridden\n\n-the error message has been edited", "committedDate": "2020-10-20T13:28:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r509087459", "bodyText": "How about use Duration waitDurationInOpenState field and check like if (waitDurationInOpenState != null && waitIntervalFunctionInOpenState != null) at build()?", "author": "dlsrb6342", "createdAt": "2020-10-21T08:28:03Z", "path": "resilience4j-circuitbreaker/src/main/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfig.java", "diffHunk": "@@ -251,6 +251,7 @@ public String toString() {\n             .ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD);\n         private Duration maxWaitDurationInHalfOpenState = Duration\n             .ofSeconds(DEFAULT_WAIT_DURATION_IN_HALF_OPEN_STATE);\n+        private byte setWaitInOpenStateCounter = 0;", "originalCommit": "948b884e5b6f2164be41d3848a90762caa33fa44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExOTE4Ng==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r509119186", "bodyText": "Maybe i  can move the initialization  of waitIntervalFunctionInOpenState in builder() and rename validateWaitIntervalFunctionInOpenState to createWaitIntervalFunctionInOpenState?\n private IntervalFunction createWaitIntervalFunctionInOpenState() {\n            if (waitDurationInOpenState != null && waitIntervalFunctionInOpenState != null ) {\n                throw new IllegalStateException(\"The waitIntervalFunction was configured twice which could result in an undesired state. \" +\n                    \"Please use either waitIntervalFunctionInOpenState or waitDurationInOpenState.\");\n            }\n            return waitDurationInOpenState != null ? IntervalFunction.of(waitDurationInOpenState.toMillis()) : waitIntervalFunctionInOpenState;\n        }", "author": "likhoman", "createdAt": "2020-10-21T09:13:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEyNTM3NQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r509125375", "bodyText": "Yes, seems fine to me.", "author": "RobWin", "createdAt": "2020-10-21T09:22:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEyNTg4Ng==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r509125886", "bodyText": "Yes exactly.", "author": "dlsrb6342", "createdAt": "2020-10-21T09:23:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE0MTYzNQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r509141635", "bodyText": "Sorry, i have to clarify one more solution\nI want use  private long waitDurationInMillis = -1L; instead of Duration waitDurationInOpenState.\nWhat would will not calculate waitDurationInOpenState.toMillis() twice.\nBecause in public Builder waitDurationInOpenState(Duration waitDurationInOpenState)  need validation waitDurationInMillis < 1 what would rise throw developer can saw where method throw exception  in stack trace.\nprivate IntervalFunction createWaitIntervalFunctionInOpenState() {\n            final boolean wasItSetToWaitDurationInMillis = waitDurationInMillis > 0;\n            if (wasItSetToWaitDurationInMillis && waitIntervalFunctionInOpenState != null ) {\n                throw new IllegalStateException(\"The waitIntervalFunction was configured twice which could result in an undesired state. \" +\n                    \"Please use either waitIntervalFunctionInOpenState or waitDurationInOpenState.\");\n            }\n            return wasItSetToWaitDurationInMillis ? IntervalFunction.of(waitDurationInMillis) : waitIntervalFunctionInOpenState;\n        }", "author": "likhoman", "createdAt": "2020-10-21T09:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE1NTM2MA==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r509155360", "bodyText": "I think this optimization is not needed. Shouldn't be performance critical.\nYour prev. snippet is fine for me", "author": "RobWin", "createdAt": "2020-10-21T10:08:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIxMzQ4Ng==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r509213486", "bodyText": "Agree with Robert.", "author": "dlsrb6342", "createdAt": "2020-10-21T11:51:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI4NDA2Nw==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r509284067", "bodyText": "one more clarification, again) sorry\nCould remind you that waitIntervalFunctionInOpenState has default value.\nAnd if we use if (wasItSetToWaitDurationInMillis && waitIntervalFunctionInOpenState != null )  we should remove default value for waitIntervalFunctionInOpenState.\nMy attempt\n        private IntervalFunction createWaitIntervalFunctionInOpenState() {\n            if (waitDurationInOpenState != null && waitIntervalFunctionInOpenState != null) {\n                throw new IllegalStateException(\"The waitIntervalFunction was configured twice which could result in an undesired state. \" +\n                    \"Please use either waitIntervalFunctionInOpenState or waitDurationInOpenState.\");\n            }\n\n            if (waitDurationInOpenState != null) {\n                return IntervalFunction.of(waitDurationInOpenState.toMillis());\n            }\n\n            return waitIntervalFunctionInOpenState == null\n                ? IntervalFunction.of(Duration.ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD))\n                : waitIntervalFunctionInOpenState;\n        }\nBut, when we use CircuitBreakerConfig.from(CircuitBreakerConfig config)\n        CircuitBreakerConfig baseConfig = custom()\n            .waitDurationInOpenState(Duration.ofSeconds(100))\n            .slidingWindowSize(1000)\n            .permittedNumberOfCallsInHalfOpenState(100)\n            .writableStackTraceEnabled(false)\n            .automaticTransitionFromOpenToHalfOpenEnabled(true)\n            .failureRateThreshold(20f).build();\n\n        CircuitBreakerConfig extendedConfig = from(baseConfig)\n            .waitDurationInOpenState(Duration.ofSeconds(20))\n            .build();\nWe get Fail. If we remove default value for waitIntervalFunctionInOpenState we can loose backwards-compatibility.\nI could try something else for the proposed solution... What you think?", "author": "likhoman", "createdAt": "2020-10-21T13:30:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMzOTg3Ng==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r509339876", "bodyText": "Yes, we must not loose  backwards-compatibility", "author": "RobWin", "createdAt": "2020-10-21T14:32:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk4NzA3Mg==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r509987072", "bodyText": "Maybe we just go back and use an int counter. If the counter == 2, then the user has used both methods.", "author": "RobWin", "createdAt": "2020-10-22T08:46:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk5NzUzNw==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r509997537", "bodyText": "How about two boolean values like isWaitDurationInOpenStateSet and isWaitIntervalFunctionInOpenStateSet?", "author": "dlsrb6342", "createdAt": "2020-10-22T09:01:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAwNDkxMg==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510004912", "bodyText": "Counter seems simpler to me :)", "author": "RobWin", "createdAt": "2020-10-22T09:12:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAwNzEzNg==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510007136", "bodyText": "Maybe we add a waitIntervalBiFunction in the future as well, comparable to Retry.", "author": "RobWin", "createdAt": "2020-10-22T09:15:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAwNzE5Nw==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510007197", "bodyText": "I just worried about set same value twice like following. This is not a normal case.\nCircuitBreakerConfig.custom()\n    .waitDurationInOpenState(Duration.ofSeconds(100))\n    .waitDurationInOpenState(Duration.ofSeconds(200))\n    .build()\n\nIf it is ok, counter is also fine to me.", "author": "dlsrb6342", "createdAt": "2020-10-22T09:15:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAwODEwMw==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510008103", "bodyText": "Ok, I think we should not check this, because this could be done on any config property. If he overrides the same property, it's the fault of the user ;)\nOtherwise it would mean that we have to add a check for this on any config property.", "author": "RobWin", "createdAt": "2020-10-22T09:17:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEzNTY0Ng==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510135646", "bodyText": "Please could you consider combining the two solutions together:\n  private IntervalFunction createWaitIntervalFunctionInOpenState() {\n            if (setWaitInOpenStateCounter > 1) {\n                if (waitDurationInOpenState != null && waitIntervalFunctionInOpenState != null) {\n                    throw new IllegalStateException(\"The waitIntervalFunction was configured twice which could result in an undesired state. \" +\n                        \"Please use either waitIntervalFunctionInOpenState or waitDurationInOpenState.\");\n                }\n            }\n            if (waitDurationInOpenState != null) {\n                return IntervalFunction.of(waitDurationInOpenState.toMillis());\n            }\n\n            return waitIntervalFunctionInOpenState == null\n                ? IntervalFunction.of(Duration.ofSeconds(DEFAULT_SLOW_CALL_DURATION_THRESHOLD))\n                : waitIntervalFunctionInOpenState;\n        }\nFirst setWaitInOpenStateCounter > 1 avoid overridden Second waitDurationInOpenState != null && waitIntervalFunctionInOpenState != null avoid case which described @dlsrb6342", "author": "likhoman", "createdAt": "2020-10-22T12:53:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE0MjY1NA==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510142654", "bodyText": "oh, my bad(", "author": "likhoman", "createdAt": "2020-10-22T13:02:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE0NDE3Mg==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510144172", "bodyText": "Let's keep it simple.\nwaitIntervalFunctionInOpenState has a default value.\nIt can be overwritten, but we check a counter and if counter > 1, then throw an exception in the build method.\nWe don't have to handle @dlsrb6342 case.", "author": "RobWin", "createdAt": "2020-10-22T13:04:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE0NTg4OA==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510145888", "bodyText": "@RobWin let's focus on the solution with counter, equal 2 or greater than 1?", "author": "likhoman", "createdAt": "2020-10-22T13:07:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE0NzM4Nw==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510147387", "bodyText": "Greater than 1 is fine.\nWe can change it to The waitIntervalFunction was configured multime times which could result in an undesired state. Please verify that waitIntervalFunctionInOpenState and waitDurationInOpenState are not used together.", "author": "RobWin", "createdAt": "2020-10-22T13:09:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1MTc3Mg==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510151772", "bodyText": "@RobWin what did you mean multime? Maybe you mean multiple?", "author": "likhoman", "createdAt": "2020-10-22T13:15:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1MjA3NA==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510152074", "bodyText": "Yes, sorry ;)\n\ud83e\udde0  --> \u2615", "author": "RobWin", "createdAt": "2020-10-22T13:16:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1MjQ2Mg==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r510152462", "bodyText": "Thanks", "author": "likhoman", "createdAt": "2020-10-22T13:16:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4NzQ1OQ=="}], "type": "inlineReview"}, {"oid": "61124dde6833c253f8f124112685e7cb332870bc", "url": "https://github.com/resilience4j/resilience4j/commit/61124dde6833c253f8f124112685e7cb332870bc", "message": "When used together, waitDurationInOpenState and waitIntervalFunctionInOpenStat waitDurationInOpenState will be overridden\n\n-the error message has been edited", "committedDate": "2020-10-22T13:18:37Z", "type": "commit"}, {"oid": "1e9c46ff5ea6245b5b7ec7f73cb1f90af4f1820a", "url": "https://github.com/resilience4j/resilience4j/commit/1e9c46ff5ea6245b5b7ec7f73cb1f90af4f1820a", "message": "When used together, waitDurationInOpenState and waitIntervalFunctionInOpenStat waitDurationInOpenState will be overridden\n\n-rename counter name", "committedDate": "2020-10-22T14:57:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MzU4Mw==", "url": "https://github.com/resilience4j/resilience4j/pull/1216#discussion_r511753583", "bodyText": "Could you please rename or delete this test?", "author": "RobWin", "createdAt": "2020-10-26T07:11:29Z", "path": "resilience4j-circuitbreaker/src/test/java/io/github/resilience4j/circuitbreaker/CircuitBreakerConfigTest.java", "diffHunk": "@@ -443,6 +443,39 @@ public void testToString() {\n         assertThat(result).endsWith(\"}\");\n     }\n \n+    @Test(expected = IllegalStateException.class)\n+    public void shouldNotUseWitIntervalFunctionInOpenStateAndWaitDurationInOpenStateTogether() {\n+        custom()\n+            .waitDurationInOpenState(Duration.ofMillis(3333))\n+            .waitIntervalFunctionInOpenState(IntervalFunction.of(Duration.ofMillis(1234)))\n+            .build();\n+    }\n+\n+    @Test\n+    public void test2() {", "originalCommit": "1e9c46ff5ea6245b5b7ec7f73cb1f90af4f1820a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3a0feb7d16700a7e00de508a333dfb6c8c757555", "url": "https://github.com/resilience4j/resilience4j/commit/3a0feb7d16700a7e00de508a333dfb6c8c757555", "message": "Issue #1214: When used together, waitDurationInOpenState and waitIntervalFunctionInOpenStat waitDurationInOpenState will be overridden\n\n-rename test", "committedDate": "2020-10-27T04:11:46Z", "type": "commit"}]}