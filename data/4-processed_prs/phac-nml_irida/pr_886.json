{"pr_number": 886, "pr_title": "Object store/ connection check on startup", "pr_createdAt": "2020-12-08T20:53:42Z", "pr_url": "https://github.com/phac-nml/irida/pull/886", "timeline": [{"oid": "ed6ba575a18a85dc27abce2c4b546dfc91efbc3f", "url": "https://github.com/phac-nml/irida/commit/ed6ba575a18a85dc27abce2c4b546dfc91efbc3f", "message": "Added logic to check if a connection to a cloud provider is successful or not and added logic to check if the local filesystem is writeable. If these fail then we exit and log the exception", "committedDate": "2020-12-08T20:39:12Z", "type": "commit"}, {"oid": "b805294ce1c10d4d5b2e8146ae907cba10d21053", "url": "https://github.com/phac-nml/irida/commit/b805294ce1c10d4d5b2e8146ae907cba10d21053", "message": "Merge branch 'object-store' into object_store/_connection-check-on-startup", "committedDate": "2020-12-08T20:41:26Z", "type": "commit"}, {"oid": "470fda92c3c20dc51cb416978b610f2ad969aebf", "url": "https://github.com/phac-nml/irida/commit/470fda92c3c20dc51cb416978b610f2ad969aebf", "message": "Added javadoc", "committedDate": "2020-12-08T21:06:56Z", "type": "commit"}, {"oid": "77c58e4baf797ae9c2d94cc147909646aae51a56", "url": "https://github.com/phac-nml/irida/commit/77c58e4baf797ae9c2d94cc147909646aae51a56", "message": "Merge branch 'object-store' into object_store/_connection-check-on-startup", "committedDate": "2020-12-08T22:14:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYyNjY2NQ==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r539626665", "bodyText": "Rather than doing string comparisons see if the storageType can be instantiated as the StorageType enum.  That way you can just do regular equals instead of the string comparison.", "author": "tom114", "createdAt": "2020-12-09T20:33:47Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/config/repository/IridaApiFilesystemRepositoryConfig.java", "diffHunk": "@@ -91,15 +98,37 @@ public Path assemblyFileBaseDirectory() throws IOException {\n \t\treturn getExistingPathOrThrow(assemblyFileBaseDirectory);\n \t}\n \n-\t//FIXME Update the code to check if the connection to a cloud provider\n-\t// is successful or not as well as check if path is writeable for local file storage\n \tprivate Path getExistingPathOrThrow(String directory) {\n \t\tPath baseDirectory = Paths.get(directory);\n-\t\tif (!Files.exists(baseDirectory) && storageType.equals(\"local\")) {\n+\t\tif (!Files.exists(baseDirectory) && storageType.equalsIgnoreCase(StorageType.LOCAL.toString())) {", "originalCommit": "77c58e4baf797ae9c2d94cc147909646aae51a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4ODY5MQ==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r539688691", "bodyText": "Removed in ad89bd2 as we just call the method in iridafilestorageutility", "author": "deepsidhu85", "createdAt": "2020-12-09T22:15:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYyNjY2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzNzE4NQ==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r539637185", "bodyText": "Same here with the enum comparison if possible instead of string comparison.", "author": "tom114", "createdAt": "2020-12-09T20:49:23Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/config/services/IridaApiServicesConfig.java", "diffHunk": "@@ -321,14 +322,23 @@ private String getClasspathResourceBasename(Pattern pattern, Resource x) {\n \t@Bean(name = \"iridaFileStorageUtility\")\n \tpublic IridaFileStorageUtility iridaFileStorageService() {\n \t\tIridaFileStorageUtility iridaFileStorageUtility;\n-\t\tif (storageType.equalsIgnoreCase(\"aws\")) {\n+\t\tif (storageType.equalsIgnoreCase(StorageType.AWS.toString())) {\n \t\t\tiridaFileStorageUtility = new IridaFileStorageAwsUtilityImpl(awsBucketName, awsBucketRegion, awsAccessKey,\n \t\t\t\t\tawsSecretKey);\n-\t\t} else if(storageType.equalsIgnoreCase(\"azure\")) {\n+\t\t} else if (storageType.equalsIgnoreCase(StorageType.AZURE.toString())) {", "originalCommit": "77c58e4baf797ae9c2d94cc147909646aae51a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4ODgzOQ==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r539688839", "bodyText": "By the looks of it we can't instantiate an enum as it is just static values. I added a fromString method which we can use to retrieve the storagetype before doing a comparison. Update in ad89bd2", "author": "deepsidhu85", "createdAt": "2020-12-09T22:16:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzNzE4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzODQxMw==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r539638413", "bodyText": "Any way all this stuff can be tied into the local version of checkConnectivity?  That would put some of this local filesystem specific stuff in the class that's generally required to manage it (IridaFileStorageLocalUtilityImpl).", "author": "tom114", "createdAt": "2020-12-09T20:51:31Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/config/repository/IridaApiFilesystemRepositoryConfig.java", "diffHunk": "@@ -91,15 +98,37 @@ public Path assemblyFileBaseDirectory() throws IOException {\n \t\treturn getExistingPathOrThrow(assemblyFileBaseDirectory);\n \t}\n \n-\t//FIXME Update the code to check if the connection to a cloud provider\n-\t// is successful or not as well as check if path is writeable for local file storage\n \tprivate Path getExistingPathOrThrow(String directory) {\n \t\tPath baseDirectory = Paths.get(directory);\n-\t\tif (!Files.exists(baseDirectory) && storageType.equals(\"local\")) {\n+\t\tif (!Files.exists(baseDirectory) && storageType.equalsIgnoreCase(StorageType.LOCAL.toString())) {\n \t\t\tthrow new IllegalStateException(\n \t\t\t\t\tString.format(\"Cannot continue startup; base directory [%s] does not exist!\",\n \t\t\t\t\t\t\tbaseDirectory.toString()));\n \t\t} else {\n+\t\t\tif(storageType.equalsIgnoreCase(StorageType.LOCAL.toString())) {\n+\t\t\t\ttry {\n+\t\t\t\t\t// Check if basedirectory path is writeable by creating a temp file and then removing it\n+\t\t\t\t\tPath tempFile = Files.createTempFile(baseDirectory, \"\", \"\");\n+\t\t\t\t\t// Check if directory is writeable\n+\t\t\t\t\tboolean directoryWriteable = Files.isWritable(tempFile);\n+\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t// Cleanup the temp file created in the directory\n+\t\t\t\t\t\tFiles.delete(tempFile);\n+\t\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\t\tlogger.error(\"An I/O error occurred while attempting to remove temp file \", e);\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif(!directoryWriteable) {\n+\t\t\t\t\t\t// Log the error and exit so startup does not continue\n+\t\t\t\t\t\tlogger.error(\"Cannot continue startup; base directory \" + baseDirectory + \" does not have write access! Please check directory permissions.\");\n+\t\t\t\t\t\tSystem.exit(1);\n+\t\t\t\t\t}\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\tlogger.error(\"Unable to create temporary file. Please check directory permissions\", e);\n+\t\t\t\t\tSystem.exit(1);\n+\t\t\t\t}\n+\t\t\t}", "originalCommit": "77c58e4baf797ae9c2d94cc147909646aae51a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4OTY1MA==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r539689650", "bodyText": "Putting it in the checkConnectivity method wouldn't work as we use it to check the connection to the cloud providers and didn't take in a directory path. I created a new method in iridafilestorageutility to check for write access. Added in ad89bd2", "author": "deepsidhu85", "createdAt": "2020-12-09T22:17:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzODQxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzODkzNw==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r539638937", "bodyText": "I like having this enum.  thanks.", "author": "tom114", "createdAt": "2020-12-09T20:52:21Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/model/enums/StorageType.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package ca.corefacility.bioinformatics.irida.model.enums;\n+\n+/**\n+ * Defines a set of storage types.\n+ *\n+ */\n+\n+public enum StorageType {", "originalCommit": "77c58e4baf797ae9c2d94cc147909646aae51a56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MDY0NA==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r539640644", "bodyText": "Rather than using IllegalStateException lets create an exception subtype for this.  I'd suggest it should extend Exceptoin instead of RuntimeException so that it must be checked and handled in the application code.  IllegalStateException kinda fits, but it might be better to have something specific for us in this case.", "author": "tom114", "createdAt": "2020-12-09T20:55:08Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/IridaFileStorageUtility.java", "diffHunk": "@@ -123,4 +123,14 @@\n \t * @return the bytes for the file\n \t */\n \tpublic byte[] readAllBytes(Path file);\n+\n+\t/**\n+\t * Check the connectivity to the file storage\n+\t * mechanism. For cloud services we must make an\n+\t * api call to check if containers/buckets exist.\n+\t *\n+\t * @return Connection valid or not\n+\t * @throws IllegalStateException if connection failed\n+\t */\n+\tpublic boolean checkConnectivity() throws IllegalStateException;", "originalCommit": "77c58e4baf797ae9c2d94cc147909646aae51a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MDgwMA==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r539640800", "bodyText": "Or honestly you could likely use StorageException since we already have that for some of these cases.", "author": "tom114", "createdAt": "2020-12-09T20:55:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MDY0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4OTgyMQ==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r539689821", "bodyText": "Updated to use StorageException in ad89bd2", "author": "deepsidhu85", "createdAt": "2020-12-09T22:17:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MDY0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MTA2Nw==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r539641067", "bodyText": "Yeah I think it would make more sense here if we had the checking for whether the base directories exist and whether we can read/write/whatever.", "author": "tom114", "createdAt": "2020-12-09T20:55:52Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/IridaFileStorageLocalUtilityImpl.java", "diffHunk": "@@ -220,4 +220,11 @@ public String getFileExtension(List<? extends SequencingObject> sequencingObject\n \t\t}\n \t\treturn bytes;\n \t}\n+\n+\t@Override\n+\tpublic boolean checkConnectivity() {\n+\t\t// Since it's the local filesystem we just return true\n+\t\treturn true;", "originalCommit": "77c58e4baf797ae9c2d94cc147909646aae51a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ0MTk1Mw==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r544441953", "bodyText": "Now that we have the checkWriteAccess methods up (and especially if we beef them up on the cloud platforms) this method is pretty much a duplicate.  Do we want to refactor this method out and just have the checkWriteAccess methods handle things?", "author": "tom114", "createdAt": "2020-12-16T16:30:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MTA2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNjQwNw==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r545406407", "bodyText": "Yup good idea. Removed the checkConnectivity method and updated checkWriteAccess method to check for read/write access for cloud storage in b47ef80", "author": "deepsidhu85", "createdAt": "2020-12-17T21:11:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MTA2Nw=="}], "type": "inlineReview"}, {"oid": "ad89bd2c21696c879bec53167ab4412a78fa5003", "url": "https://github.com/phac-nml/irida/commit/ad89bd2c21696c879bec53167ab4412a78fa5003", "message": "Updated to use storageexception rather than illegalstateexception. Updated to use enum comparison. Moved checking if basedirectory exists on the local file system and if it is writable into the iridafilestorageutility", "committedDate": "2020-12-09T22:14:53Z", "type": "commit"}, {"oid": "660e094f2fa6031b76103846c1ed177080af446a", "url": "https://github.com/phac-nml/irida/commit/660e094f2fa6031b76103846c1ed177080af446a", "message": "Changed illegalstateexception to storageexception as thats what the iridafilestorageutility throws if a connection is not made to a bucket/container", "committedDate": "2020-12-10T15:12:48Z", "type": "commit"}, {"oid": "e61f9320a65fa6b71803b841ee38cab2370d1d64", "url": "https://github.com/phac-nml/irida/commit/e61f9320a65fa6b71803b841ee38cab2370d1d64", "message": "Added bean for storageType so we can use it wherever a storage type check is required. Updated azure file storage utility class to check if we can list blobs in a container instead of getting properties as the token is scoped", "committedDate": "2020-12-10T17:16:09Z", "type": "commit"}, {"oid": "97d24e6e32d561b8e78c9cef3a8161074168d7eb", "url": "https://github.com/phac-nml/irida/commit/97d24e6e32d561b8e78c9cef3a8161074168d7eb", "message": "Removed class variable not required. Updated logging statements", "committedDate": "2020-12-10T19:10:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0NzE0MA==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r543547140", "bodyText": "Since you have the bean now, inject it into this dependency instead of doing the fromString thing here please.", "author": "tom114", "createdAt": "2020-12-15T17:35:49Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/config/services/IridaApiServicesConfig.java", "diffHunk": "@@ -321,18 +323,33 @@ private String getClasspathResourceBasename(Pattern pattern, Resource x) {\n \t@Bean(name = \"iridaFileStorageUtility\")\n \tpublic IridaFileStorageUtility iridaFileStorageService() {\n \t\tIridaFileStorageUtility iridaFileStorageUtility;\n-\t\tif (storageType.equalsIgnoreCase(\"aws\")) {\n+\t\tStorageType st = StorageType.fromString(storageType);", "originalCommit": "97d24e6e32d561b8e78c9cef3a8161074168d7eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNTAwNQ==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r545405005", "bodyText": "Injected in b47ef80", "author": "deepsidhu85", "createdAt": "2020-12-17T21:09:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0NzE0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0NzMwMg==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r543547302", "bodyText": "Looks like this file needs formatted.", "author": "tom114", "createdAt": "2020-12-15T17:36:03Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/config/services/IridaApiServicesConfig.java", "diffHunk": "@@ -321,18 +323,33 @@ private String getClasspathResourceBasename(Pattern pattern, Resource x) {\n \t@Bean(name = \"iridaFileStorageUtility\")\n \tpublic IridaFileStorageUtility iridaFileStorageService() {\n \t\tIridaFileStorageUtility iridaFileStorageUtility;\n-\t\tif (storageType.equalsIgnoreCase(\"aws\")) {\n+\t\tStorageType st = StorageType.fromString(storageType);\n+\t\tif (st.equals(StorageType.AWS)) {\n \t\t\tiridaFileStorageUtility = new IridaFileStorageAwsUtilityImpl(awsBucketName, awsBucketRegion, awsAccessKey,\n \t\t\t\t\tawsSecretKey);\n-\t\t} else if(storageType.equalsIgnoreCase(\"azure\")) {\n+\t\t} else if (st.equals(StorageType.AZURE)) {\n \t\t\tiridaFileStorageUtility = new IridaFileStorageAzureUtilityImpl(containerUrl, sasToken, containerName);\n \t\t} else {\n \t\t\tiridaFileStorageUtility = new IridaFileStorageLocalUtilityImpl();\n \t\t}\n+\n+\t\t// Check if connection is valid to local file system or cloud provider\n+\t\ttry {\n+\t\t\tiridaFileStorageUtility.checkConnectivity();\n+\t\t} catch (StorageException e) {\n+\t\t\t// Log the error and exit so startup does not continue\n+\t\t\tlogger.error(\"Unable to start up IRIDA! \", e);\n+\t\t\tSystem.exit(1);\n+\t\t}\n \t\tIridaFiles.setIridaFileStorageUtility(iridaFileStorageUtility);\n \t\treturn iridaFileStorageUtility;\n \t}\n \n+\t@Bean(name= \"storageType\")", "originalCommit": "97d24e6e32d561b8e78c9cef3a8161074168d7eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNTA1Ng==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r545405056", "bodyText": "Fixed in b47ef80", "author": "deepsidhu85", "createdAt": "2020-12-17T21:09:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0NzMwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU1MDE0NQ==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r543550145", "bodyText": "Is there a way with the api that you can check if its writable instead of just returning true?  Looks like you can do something with it like this? https://stackoverflow.com/a/62145940", "author": "tom114", "createdAt": "2020-12-15T17:39:46Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/IridaFileStorageAwsUtilityImpl.java", "diffHunk": "@@ -308,4 +308,25 @@ public String getFileExtension(List<? extends SequencingObject> sequencingObject\n \t\t}\n \t\treturn bytes;\n \t}\n+\n+\t@Override\n+\tpublic boolean checkConnectivity() throws StorageException {\n+\t\ttry {\n+\t\t\tif (s3.doesBucketExistV2(bucketName)) {\n+\t\t\t\tlogger.debug(\"Successfully connected to aws s3 bucket \" + bucketName);\n+\t\t\t\treturn true;\n+\t\t\t} else {\n+\t\t\t\tthrow new StorageException(\n+\t\t\t\t\t\t\"Unable to connect to aws s3 bucket. Please check that your credentials are valid and that the bucket \" + bucketName + \" exists.\");\n+\t\t\t}\n+\t\t} catch (AmazonServiceException e) {\n+\t\t\tthrow new StorageException(\n+\t\t\t\t\t\"Unable to connect to aws s3 bucket. Please check that your credentials are valid and that the bucket \" + bucketName + \" exists.\");\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean checkWriteAccess(Path baseDirectory) {\n+\t\treturn true;", "originalCommit": "97d24e6e32d561b8e78c9cef3a8161074168d7eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNTMwNA==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r545405304", "bodyText": "That looks like the way to do it. Until we get access to aws I can't really test it. Updated in b47ef80", "author": "deepsidhu85", "createdAt": "2020-12-17T21:09:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU1MDE0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM2NzcyNQ==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r544367725", "bodyText": "Same deal here with azure.  Check if there's something easy in the API we can use to verify write access please.", "author": "tom114", "createdAt": "2020-12-16T14:59:44Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/IridaFileStorageAzureUtilityImpl.java", "diffHunk": "@@ -305,4 +305,29 @@ private String getAzureFileAbsolutePath(Path file) {\n \t\t}\n \t\treturn absolutePath;\n \t}\n+\n+\t@Override\n+\tpublic boolean checkConnectivity() throws StorageException {\n+\t\tString containerName = containerClient.getBlobContainerName();\n+\t\ttry {\n+\t\t\t// Make an api request to check if we can list the blobs in the container\n+\t\t\tcontainerClient.listBlobs().forEach(blob ->\n+\t\t\t\t\tblob.getName());\n+\t\t\tlogger.debug(\"Successfully connected to azure container \" + containerName);\n+\t\t\treturn true;\n+\n+\t\t} catch (BlobStorageException e) {\n+\t\t\t/*\n+\t\t\t\tThrow an exception which is caught at startup advising the user that the\n+\t\t\t\tconnection was not successful to the azure container\n+\t\t\t */\n+\t\t\tthrow new StorageException(\n+\t\t\t\t\t\"Unable to connect to azure container. Please check that your credentials are valid and that the container \" + containerName + \" exists.\");\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean checkWriteAccess(Path baseDirectory) {\n+\t\treturn true;", "originalCommit": "97d24e6e32d561b8e78c9cef3a8161074168d7eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNTYyMQ==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r545405621", "bodyText": "Updated in b47ef80. We ended up having to create a temp file, upload it to azure, and delete it. This ensures we have both read and write access.", "author": "deepsidhu85", "createdAt": "2020-12-17T21:10:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM2NzcyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ0NDA3NA==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r544444074", "bodyText": "This is probably not an error we just want to swallow.  This should prevent the server from starting.", "author": "tom114", "createdAt": "2020-12-16T16:32:54Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/IridaFileStorageLocalUtilityImpl.java", "diffHunk": "@@ -220,4 +220,48 @@ public String getFileExtension(List<? extends SequencingObject> sequencingObject\n \t\t}\n \t\treturn bytes;\n \t}\n+\n+\t@Override\n+\tpublic boolean checkConnectivity() {\n+\t\t// Since it's the local filesystem we just return true\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean checkWriteAccess(Path baseDirectory) {\n+\t\tif (!Files.exists(baseDirectory)) {\n+\t\t\tlogger.error(\"Cannot continue startup; base directory \" + baseDirectory + \" does not exist!\");\n+\t\t\tSystem.exit(1);\n+\t\t} else {\n+\t\t\ttry {\n+\t\t\t\t// Check if basedirectory path is writeable by creating a temp file and then removing it\n+\t\t\t\tPath tempFile = Files.createTempFile(baseDirectory, \"\", \"\");\n+\t\t\t\t// Check if directory is writeable\n+\t\t\t\tboolean directoryWriteable = Files.isWritable(tempFile);\n+\n+\t\t\t\ttry {\n+\t\t\t\t\t// Cleanup the temp file created in the directory\n+\t\t\t\t\tFiles.delete(tempFile);\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\tlogger.error(\"An I/O error occurred while attempting to remove temp file \", e);", "originalCommit": "97d24e6e32d561b8e78c9cef3a8161074168d7eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNTc4OQ==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r545405789", "bodyText": "Updated to throw exception in b47ef80", "author": "deepsidhu85", "createdAt": "2020-12-17T21:10:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ0NDA3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ0NTY1MQ==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r544445651", "bodyText": "I don't think we want to directly call system.exit in any of the cases in here.  It should more likely throw an exception that doesn't get caught.  That way the servlet container (tomcat) decides how to handle things.  Can the System.exit lines get refactored out in all the cases and just replaced with a throw (maybe StorageException).", "author": "tom114", "createdAt": "2020-12-16T16:34:52Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/IridaFileStorageLocalUtilityImpl.java", "diffHunk": "@@ -220,4 +220,48 @@ public String getFileExtension(List<? extends SequencingObject> sequencingObject\n \t\t}\n \t\treturn bytes;\n \t}\n+\n+\t@Override\n+\tpublic boolean checkConnectivity() {\n+\t\t// Since it's the local filesystem we just return true\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean checkWriteAccess(Path baseDirectory) {\n+\t\tif (!Files.exists(baseDirectory)) {\n+\t\t\tlogger.error(\"Cannot continue startup; base directory \" + baseDirectory + \" does not exist!\");\n+\t\t\tSystem.exit(1);\n+\t\t} else {\n+\t\t\ttry {\n+\t\t\t\t// Check if basedirectory path is writeable by creating a temp file and then removing it\n+\t\t\t\tPath tempFile = Files.createTempFile(baseDirectory, \"\", \"\");\n+\t\t\t\t// Check if directory is writeable\n+\t\t\t\tboolean directoryWriteable = Files.isWritable(tempFile);\n+\n+\t\t\t\ttry {\n+\t\t\t\t\t// Cleanup the temp file created in the directory\n+\t\t\t\t\tFiles.delete(tempFile);\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\tlogger.error(\"An I/O error occurred while attempting to remove temp file \", e);\n+\t\t\t\t}\n+\n+\t\t\t\tif (!directoryWriteable) {\n+\t\t\t\t\t// Log the error and exit so startup does not continue\n+\t\t\t\t\tlogger.error(\"Cannot continue startup; base directory \" + baseDirectory\n+\t\t\t\t\t\t\t+ \" does not have write access! Please check directory permissions.\");\n+\t\t\t\t\tSystem.exit(1);", "originalCommit": "97d24e6e32d561b8e78c9cef3a8161074168d7eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNTkzMg==", "url": "https://github.com/phac-nml/irida/pull/886#discussion_r545405932", "bodyText": "Refactored to use StorageException in b47ef80", "author": "deepsidhu85", "createdAt": "2020-12-17T21:10:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ0NTY1MQ=="}], "type": "inlineReview"}, {"oid": "b47ef804ace2d29d02bac15593fc7f7e5129e205", "url": "https://github.com/phac-nml/irida/commit/b47ef804ace2d29d02bac15593fc7f7e5129e205", "message": "Fixed formatting. Updated azure and aws file storage utilities to check for read/write access. Removed checkconnectivity method and refactored into checkwriteaccess. Injected storageType bean into iridaFileStorageUtility bean. Rempved system.exit(1) calls and replaced with uncaught storageexceptions which will allow the server software to deal with it as it sees fit", "committedDate": "2020-12-17T21:08:26Z", "type": "commit"}, {"oid": "90dd0c0e88e1c79d052903e76e3a2377c5317a58", "url": "https://github.com/phac-nml/irida/commit/90dd0c0e88e1c79d052903e76e3a2377c5317a58", "message": "Removed unused imports", "committedDate": "2020-12-17T21:42:25Z", "type": "commit"}, {"oid": "f2418e1e787ad6be06a581c590fbbd487eb27a2e", "url": "https://github.com/phac-nml/irida/commit/f2418e1e787ad6be06a581c590fbbd487eb27a2e", "message": "Merge branch 'object-store' into object_store/_connection-check-on-startup", "committedDate": "2020-12-21T02:52:49Z", "type": "commit"}, {"oid": "15eb523767328be8d1778275c766e1e4c354f8ce", "url": "https://github.com/phac-nml/irida/commit/15eb523767328be8d1778275c766e1e4c354f8ce", "message": "Merge branch 'object-store' into object_store/_connection-check-on-startup", "committedDate": "2020-12-24T20:34:53Z", "type": "commit"}, {"oid": "2cb72005aa7dd7ba902d4371083537c84e0b9437", "url": "https://github.com/phac-nml/irida/commit/2cb72005aa7dd7ba902d4371083537c84e0b9437", "message": "Merge branch 'object-store' into object_store/_connection-check-on-startup", "committedDate": "2021-01-06T19:31:10Z", "type": "commit"}, {"oid": "e512cef635f589d954b4e22bb3e88c8a957db4a9", "url": "https://github.com/phac-nml/irida/commit/e512cef635f589d954b4e22bb3e88c8a957db4a9", "message": "Merge branch 'object-store' into object_store/_connection-check-on-startup", "committedDate": "2021-01-12T19:22:53Z", "type": "commit"}, {"oid": "6df71e0b42bf12ec0c136da0d36cb3785e231848", "url": "https://github.com/phac-nml/irida/commit/6df71e0b42bf12ec0c136da0d36cb3785e231848", "message": "Merge branch 'object-store' into object_store/_connection-check-on-startup", "committedDate": "2021-01-15T21:25:26Z", "type": "commit"}]}