{"pr_number": 503, "pr_title": "Initial version of reactive DB2 SQL client", "pr_createdAt": "2020-01-14T16:35:59Z", "pr_url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503", "timeline": [{"oid": "e7ae8597a73963108805d0b77fc7eda700e9397c", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/e7ae8597a73963108805d0b77fc7eda700e9397c", "message": "Initial version of DB2 module", "committedDate": "2020-01-14T15:19:54Z", "type": "commit"}, {"oid": "7e857caa458b2d78e337c08b24f16efd477076b2", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/7e857caa458b2d78e337c08b24f16efd477076b2", "message": "Implement standard queries", "committedDate": "2020-01-14T15:19:54Z", "type": "commit"}, {"oid": "ce72b3417962ee68e10ca0e8f5afad4f5d461aaa", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/ce72b3417962ee68e10ca0e8f5afad4f5d461aaa", "message": "Add DRDA code ported from Apache Derby", "committedDate": "2020-01-14T15:19:54Z", "type": "commit"}, {"oid": "c6e18e22f00dbf7cb3fbe79027436b03ac9ff0c2", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/c6e18e22f00dbf7cb3fbe79027436b03ac9ff0c2", "message": "Implement prepeard statements", "committedDate": "2020-01-14T15:19:54Z", "type": "commit"}, {"oid": "c66455bf6cbb38d86c3df3b4a8288b9eb8529b28", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/c66455bf6cbb38d86c3df3b4a8288b9eb8529b28", "message": "Add all TCK tests with only passing tests enabled for now", "committedDate": "2020-01-14T15:19:54Z", "type": "commit"}, {"oid": "16e0e7e17681bcb7ab6ff106a1460d82b94449fc", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/16e0e7e17681bcb7ab6ff106a1460d82b94449fc", "message": "Rebase work on 4.0", "committedDate": "2020-01-14T15:19:54Z", "type": "commit"}, {"oid": "df6f63ac362937585e87081a9724784ede1ddc9f", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/df6f63ac362937585e87081a9724784ede1ddc9f", "message": "Update README with information on how to test", "committedDate": "2020-01-14T15:19:54Z", "type": "commit"}, {"oid": "49b317fd66dd1171a46a14052b2fe80ace2bd31d", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/49b317fd66dd1171a46a14052b2fe80ace2bd31d", "message": "Implement basic DB2 data types", "committedDate": "2020-01-14T15:19:54Z", "type": "commit"}, {"oid": "d33fc2961e912421f203706384cd7a6c8077a07e", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/d33fc2961e912421f203706384cd7a6c8077a07e", "message": "Replace System.out with Vertx logging", "committedDate": "2020-01-14T15:19:54Z", "type": "commit"}, {"oid": "47184c65d8a96f6ad539a6e859be716852166153", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/47184c65d8a96f6ad539a6e859be716852166153", "message": "Parse prepared statement input and output columns separately", "committedDate": "2020-01-14T15:19:54Z", "type": "commit"}, {"oid": "b230f55c6da65a13ea15a4d13f0d6d88418f94f5", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/b230f55c6da65a13ea15a4d13f0d6d88418f94f5", "message": "Tolerate benign Sqlcodes for closing connections and updates with no updated rows", "committedDate": "2020-01-14T15:19:54Z", "type": "commit"}, {"oid": "6a39093ef09f914aa9c9aece56f57ff9cda14c61", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/6a39093ef09f914aa9c9aece56f57ff9cda14c61", "message": "Enable non-error-path Collector TCK tests", "committedDate": "2020-01-14T15:19:54Z", "type": "commit"}, {"oid": "a938e10bb816336ed07bef7dda41d86f62077cb4", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/a938e10bb816336ed07bef7dda41d86f62077cb4", "message": "Get prepared query tests working", "committedDate": "2020-01-14T15:19:54Z", "type": "commit"}, {"oid": "a3d6ecfd39ffef15b3c0d6f4546a62404c4c40c5", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/a3d6ecfd39ffef15b3c0d6f4546a62404c4c40c5", "message": "Implement section pooling", "committedDate": "2020-01-14T15:19:54Z", "type": "commit"}, {"oid": "d174c3dfd3a65c60f6fa8418de4bde68aacbfb43", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/d174c3dfd3a65c60f6fa8418de4bde68aacbfb43", "message": "Eliminate CCSIDManager usage as an instance", "committedDate": "2020-01-14T15:19:55Z", "type": "commit"}, {"oid": "2519bc4d455261d64d5024be6989f14029228db0", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/2519bc4d455261d64d5024be6989f14029228db0", "message": "Enable DB2 PreparedQueryCached TCK test", "committedDate": "2020-01-14T15:19:55Z", "type": "commit"}, {"oid": "c327f4cee09403596a9cc1806d3d9ba5388b98a4", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/c327f4cee09403596a9cc1806d3d9ba5388b98a4", "message": "Prepare DB2 module for initial PR", "committedDate": "2020-01-14T16:24:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwNjg0OA==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r368006848", "bodyText": "can we use the Numeric Vert.x type to replace BigDecimal like other projects do? it's useful to be used in a polyglot environment.", "author": "BillyYccc", "createdAt": "2020-01-17T15:54:13Z", "path": "vertx-db2-client/src/test/java/io/vertx/db2client/tck/DB2TextDataTypeDecodeTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.vertx.db2client.tck;\n+\n+import java.math.BigDecimal;\n+\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.db2client.junit.DB2Resource;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+import io.vertx.sqlclient.tck.TextDataTypeDecodeTestBase;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class DB2TextDataTypeDecodeTest extends TextDataTypeDecodeTestBase {\n+    @ClassRule\n+    public static DB2Resource rule = DB2Resource.SHARED_INSTANCE;\n+\n+    @Override\n+    protected void initConnector() {\n+        connector = ClientConfig.CONNECT.connect(vertx, rule.options());\n+    }\n+\n+    @Test\n+    public void testDecimal(TestContext ctx) {\n+        // In DB2 NUMERIC type == DECIMAL type so always return BigDecimal\n+        testDecodeGeneric(ctx, \"test_decimal\", BigDecimal.class, BigDecimal.valueOf(12345));", "originalCommit": "c327f4cee09403596a9cc1806d3d9ba5388b98a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0ODcyMg==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r368048722", "bodyText": "good point, I've pushed another commit that resolves this so now testDecimal and testNumeric are not overridden in the DB2 TCK tests", "author": "aguibert", "createdAt": "2020-01-17T17:22:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwNjg0OA=="}], "type": "inlineReview"}, {"oid": "7f1f3585d187fdf9d38ce7fd47e1b4bbd5c0b489", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/7f1f3585d187fdf9d38ce7fd47e1b4bbd5c0b489", "message": "Address review comments", "committedDate": "2020-01-17T17:21:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzNjMzOA==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r370536338", "bodyText": "We cannot change the version without a works-with CQ - can you revert this and make a separate PR for which we will create the works-with CQ separately ?", "author": "vietj", "createdAt": "2020-01-24T09:21:04Z", "path": "pom.xml", "diffHunk": "@@ -59,7 +59,7 @@\n     <!-- We skip sources jar generation as we do it with the assembly plugin to have greater control over the content -->\n     <source.skip>true</source.skip>\n     <kotlin.version>1.3.0</kotlin.version>\n-    <testcontainers.version>1.12.0</testcontainers.version>\n+    <testcontainers.version>1.12.4</testcontainers.version>", "originalCommit": "7f1f3585d187fdf9d38ce7fd47e1b4bbd5c0b489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1OTk3Nw==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r370759977", "bodyText": "Submitted the CQ for testcontainers update here: https://dev.eclipse.org/ipzilla/show_bug.cgi?id=21539", "author": "aguibert", "createdAt": "2020-01-24T17:46:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzNjMzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzNzU2NQ==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r370537565", "bodyText": "are those the commonly used env names ?\nfor PG we do use PGHOST, etc... because those are officially used see https://www.postgresql.org/docs/9.6/static/libpq-envars.html\njust asking a question here", "author": "vietj", "createdAt": "2020-01-24T09:24:13Z", "path": "vertx-db2-client/README.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+= The Reactive DB2 Client\n+\n+== How to use it\n+\n+See `src/main/java/examples/DB2ClientExamples.java`\n+\n+== Testing\n+\n+Out of the box, the test suite runs a Docker container using https://www.testcontainers.org/[TestContainers] by default.\n+\n+Since DB2 container takes about 2 minutes to start, it is good to reuse containers across multiple runs. To container reuse, create a file at `~/.testcontainers.properties` and add the following property:\n+\n+.~/.testcontainers.properties\n+```\n+testcontainers.reuse.enable=true\n+```\n+\n+Just run the following Maven command:\n+\n+```\n+mvn test\n+```\n+\n+== Testing with an external database\n+\n+If you want to use an external database, you must set the following environment variables:\n+\n+- DB2_HOST: The hostname of the machine where DB2 is", "originalCommit": "7f1f3585d187fdf9d38ce7fd47e1b4bbd5c0b489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNjA4Nw==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r370736087", "bodyText": "for DB2 there aren't really commonly used env var names. My colleague @mswatosh has additional changes that will go in after this PR for connection via URL, so once that goes in we can reduce all of these env vars to a single DB2_URL env var if we want", "author": "aguibert", "createdAt": "2020-01-24T16:53:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzNzU2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzOTAwNQ==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r370539005", "bodyText": "we need a CQ for this - if that's only used in tests then it's a works-with CQ", "author": "vietj", "createdAt": "2020-01-24T09:27:39Z", "path": "vertx-db2-client/pom.xml", "diffHunk": "@@ -0,0 +1,127 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+  ~ Copyright (C) 2019 IBM Corporation\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  ~\n+  -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>io.vertx</groupId>\n+    <artifactId>vertx-sql-client-parent</artifactId>\n+    <version>4.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>vertx-db2-client</artifactId>\n+\n+  <name>Vertx DB2 Client</name>\n+  <url>https://github.com/eclipse-vertx/vertx-sql-client</url>\n+  <description>The Reactive DB2 client</description>\n+\n+  <properties>\n+    <doc.skip>false</doc.skip>\n+    <docs.dir>${project.basedir}/src/main/docs</docs.dir>\n+  </properties>\n+\n+\n+  <dependencies>\n+\n+    <!-- Vert.x dependencies -->\n+    <dependency>\n+      <groupId>io.vertx</groupId>\n+      <artifactId>vertx-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.vertx</groupId>\n+      <artifactId>vertx-codegen</artifactId>\n+      <optional>true</optional>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.vertx</groupId>\n+      <artifactId>vertx-docgen</artifactId>\n+      <optional>true</optional>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.vertx</groupId>\n+      <artifactId>vertx-sql-client</artifactId>\n+    </dependency>\n+    \n+    <!-- Temp dependency for cross-checking w/ JDBC -->\n+    <dependency>\n+        <groupId>com.ibm.db2</groupId>", "originalCommit": "7f1f3585d187fdf9d38ce7fd47e1b4bbd5c0b489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NTM0NA==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r370765344", "bodyText": "Submitted a works-with CQ here: https://dev.eclipse.org/ipzilla/show_bug.cgi?id=21540", "author": "aguibert", "createdAt": "2020-01-24T17:59:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzOTAwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzOTk1MQ==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r370539951", "bodyText": "good idea to use -it and --rm=true it makes the script easier to use", "author": "vietj", "createdAt": "2020-01-24T09:29:59Z", "path": "vertx-db2-client/scripts/db2.sh", "diffHunk": "@@ -0,0 +1,22 @@\n+#!/bin/bash\n+echo \"Starting DB2 database with:\"\n+echo \"    user=db2user\"\n+echo \"    pass=db2pass\"\n+echo \"  dbname=vertx_db\"\n+echo \"    port=50000\"\n+echo \"\"\n+echo \"### DB will be usable when you see the following message ###\"\n+echo \"    (*) Setup has completed.\"\n+echo \"\"\n+docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 \\", "originalCommit": "7f1f3585d187fdf9d38ce7fd47e1b4bbd5c0b489", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU0MDE2Ng==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r370540166", "bodyText": "you should add a line of text to say that the DB will run until the user hits ctrl-c to shutdow the docker container", "author": "vietj", "createdAt": "2020-01-24T09:30:29Z", "path": "vertx-db2-client/scripts/db2.sh", "diffHunk": "@@ -0,0 +1,22 @@\n+#!/bin/bash\n+echo \"Starting DB2 database with:\"\n+echo \"    user=db2user\"\n+echo \"    pass=db2pass\"\n+echo \"  dbname=vertx_db\"\n+echo \"    port=50000\"\n+echo \"\"\n+echo \"### DB will be usable when you see the following message ###\"", "originalCommit": "7f1f3585d187fdf9d38ce7fd47e1b4bbd5c0b489", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU0MDYzMw==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r370540633", "bodyText": "commented hardcoded code", "author": "vietj", "createdAt": "2020-01-24T09:31:31Z", "path": "vertx-db2-client/src/main/java/examples/DB2ClientExamples.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (C) 2019,2020 IBM Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package examples;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.sql.CallableStatement;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.Types;\n+import java.util.Locale;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.db2client.DB2ConnectOptions;\n+import io.vertx.db2client.DB2Pool;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.Tuple;\n+\n+/**\n+ * To Run DB2 in a docker container thaty is compatible with this sample, run\n+ * the script at scripts/db2.sh\n+ */\n+public class DB2ClientExamples {\n+\t\n+\tstatic final String HOST = \"localhost\";\n+//\tstatic final String HOST = \"192.168.1.22\";", "originalCommit": "7f1f3585d187fdf9d38ce7fd47e1b4bbd5c0b489", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU0NzQ3NQ==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r370547475", "bodyText": "log", "author": "vietj", "createdAt": "2020-01-24T09:47:42Z", "path": "vertx-db2-client/src/main/java/io/vertx/db2client/impl/codec/CloseConnectionCommandCodec.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (C) 2019,2020 IBM Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.vertx.db2client.impl.codec;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.vertx.core.impl.logging.Logger;\n+import io.vertx.core.impl.logging.LoggerFactory;\n+import io.vertx.db2client.impl.drda.DRDAQueryRequest;\n+import io.vertx.db2client.impl.drda.DRDAQueryResponse;\n+import io.vertx.sqlclient.impl.command.CloseConnectionCommand;\n+\n+class CloseConnectionCommandCodec extends CommandCodec<Void, CloseConnectionCommand> {\n+\t\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(CloseConnectionCommandCodec.class);\n+\t\n+  CloseConnectionCommandCodec(CloseConnectionCommand cmd) {\n+    super(cmd);\n+  }\n+\n+  @Override\n+  void encode(DB2Encoder encoder) {\n+    super.encode(encoder);\n+    if (LOG.isDebugEnabled())\n+    \tLOG.debug(\"encode close\");\n+    // TODO: @AGG should we also close statements/queries here?\n+    try {\n+        ByteBuf packet = allocateBuffer();\n+        DRDAQueryRequest closeCursor = new DRDAQueryRequest(packet);\n+        // TODO: @AGG track open cursors somehow so they can be closed here\n+        //closeCursor.buildCLSQRY(SectionManager.INSTANCE.getDynamicSection(), encoder.socketConnection.database(), 1); // @AGG guessing 1 on queryInstanceId\n+        closeCursor.buildRDBCMM();\n+        closeCursor.completeCommand();\n+        sendNonSplitPacket(packet);\n+    } catch (Exception e) {\n+        e.printStackTrace();", "originalCommit": "7f1f3585d187fdf9d38ce7fd47e1b4bbd5c0b489", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU0NzUyOA==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r370547528", "bodyText": "log", "author": "vietj", "createdAt": "2020-01-24T09:47:49Z", "path": "vertx-db2-client/src/main/java/io/vertx/db2client/impl/codec/CloseConnectionCommandCodec.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (C) 2019,2020 IBM Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.vertx.db2client.impl.codec;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.vertx.core.impl.logging.Logger;\n+import io.vertx.core.impl.logging.LoggerFactory;\n+import io.vertx.db2client.impl.drda.DRDAQueryRequest;\n+import io.vertx.db2client.impl.drda.DRDAQueryResponse;\n+import io.vertx.sqlclient.impl.command.CloseConnectionCommand;\n+\n+class CloseConnectionCommandCodec extends CommandCodec<Void, CloseConnectionCommand> {\n+\t\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(CloseConnectionCommandCodec.class);\n+\t\n+  CloseConnectionCommandCodec(CloseConnectionCommand cmd) {\n+    super(cmd);\n+  }\n+\n+  @Override\n+  void encode(DB2Encoder encoder) {\n+    super.encode(encoder);\n+    if (LOG.isDebugEnabled())\n+    \tLOG.debug(\"encode close\");\n+    // TODO: @AGG should we also close statements/queries here?\n+    try {\n+        ByteBuf packet = allocateBuffer();\n+        DRDAQueryRequest closeCursor = new DRDAQueryRequest(packet);\n+        // TODO: @AGG track open cursors somehow so they can be closed here\n+        //closeCursor.buildCLSQRY(SectionManager.INSTANCE.getDynamicSection(), encoder.socketConnection.database(), 1); // @AGG guessing 1 on queryInstanceId\n+        closeCursor.buildRDBCMM();\n+        closeCursor.completeCommand();\n+        sendNonSplitPacket(packet);\n+    } catch (Exception e) {\n+        e.printStackTrace();\n+    }\n+  }\n+\n+  @Override\n+  void decodePayload(ByteBuf payload, int payloadLength) {\n+\t  if (LOG.isDebugEnabled())\n+\t\t  LOG.debug(\"disconnect reply\");\n+      try {\n+          DRDAQueryResponse closeCursor = new DRDAQueryResponse(payload);\n+          //closeCursor.readCursorClose();\n+          closeCursor.readLocalCommit();\n+      } catch (Exception e) {\n+          payload.clear();\n+          e.printStackTrace();", "originalCommit": "7f1f3585d187fdf9d38ce7fd47e1b4bbd5c0b489", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MzQyMA==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r370563420", "bodyText": "Netty has an utility for this you can reuse ByteBufUtils#appendPrettyHexDump that is used by Netty's LoggingHandler", "author": "vietj", "createdAt": "2020-01-24T10:22:44Z", "path": "vertx-db2-client/src/main/java/io/vertx/db2client/impl/codec/DB2Codec.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright (C) 2019,2020 IBM Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.vertx.db2client.impl.codec;\n+\n+import java.util.ArrayDeque;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.CombinedChannelDuplexHandler;\n+import io.vertx.db2client.impl.DB2SocketConnection;\n+\n+public class DB2Codec extends CombinedChannelDuplexHandler<DB2Decoder, DB2Encoder> {\n+    \n+    // TODO @AGG check what packet length limit actually is for DB2\n+    static final int PACKET_PAYLOAD_LENGTH_LIMIT = 0xFFFFFF;\n+\n+  private final ArrayDeque<CommandCodec<?, ?>> inflight = new ArrayDeque<>();\n+  \n+  public DB2Codec(DB2SocketConnection db2SocketConnection) {\n+    DB2Encoder encoder = new DB2Encoder(inflight, db2SocketConnection);\n+    DB2Decoder decoder = new DB2Decoder(inflight);\n+    init(decoder, encoder);\n+  }\n+  \n+  public static String dumpBuffer(ByteBuf buffer) {\n+      return dumpBuffer(buffer, buffer.readableBytes());\n+  }\n+  \n+  public static String dumpBuffer(ByteBuf buffer, int length) {\n+      return dumpBuffer(buffer, length, -1);\n+  }\n+  \n+  public static String dumpBuffer(ByteBuf buffer, int length, int calloutIndex) {", "originalCommit": "7f1f3585d187fdf9d38ce7fd47e1b4bbd5c0b489", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3OTUyNQ==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r370579525", "bodyText": "releasing should be in a finally block", "author": "vietj", "createdAt": "2020-01-24T11:01:54Z", "path": "vertx-db2-client/src/main/java/io/vertx/db2client/impl/codec/DB2Decoder.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (C) 2019,2020 IBM Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.vertx.db2client.impl.codec;\n+\n+import java.util.ArrayDeque;\n+import java.util.List;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.vertx.core.impl.logging.Logger;\n+import io.vertx.core.impl.logging.LoggerFactory;\n+import io.vertx.sqlclient.impl.command.CommandResponse;\n+\n+class DB2Decoder extends ByteToMessageDecoder {\n+\t\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(DB2Decoder.class);\n+\n+    private final ArrayDeque<CommandCodec<?, ?>> inflight;\n+    \n+    DB2Decoder(ArrayDeque<CommandCodec<?, ?>> inflight) {\n+        this.inflight = inflight;\n+    }\n+\n+    @Override\n+    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n+        int payloadLength = computeLength(in);\n+        if (payloadLength >= DB2Codec.PACKET_PAYLOAD_LENGTH_LIMIT)\n+            throw new UnsupportedOperationException(\"TODO @AGG split package decoding not implemented\");\n+        if (payloadLength <= 4)\n+            throw new IllegalStateException(\"Illegal payload length: \" + payloadLength);\n+        if (payloadLength > in.readableBytes()) {\n+            // wait until we have more bytes to read\n+            return;\n+        }\n+        if (LOG.isDebugEnabled())\n+        \tLOG.debug(\"received \" + payloadLength + \" bytes for \" + inflight.peek());\n+        decodePayload(in.readRetainedSlice(payloadLength), payloadLength, in.getShort(in.readerIndex() + 4));\n+    }\n+    \n+    private int computeLength(ByteBuf in) {\n+        int index = 0;\n+        final int readableBytes = in.readableBytes();\n+        boolean dssContinues = true;\n+        while (dssContinues && index < readableBytes) {\n+            if (readableBytes >= index + 3)\n+                dssContinues &= (in.getByte(index + 3) & 0x40) == 0x40;\n+            else\n+                dssContinues = false;\n+            short dssLen = in.getShort(index);\n+            index += dssLen;\n+//                System.out.println(\"  DSS=\" + dssLen + \" total=\" + index);\n+        }\n+        return index;\n+    }\n+\n+    private void decodePayload(ByteBuf payload, int payloadLength, int sequenceId) {\n+        CommandCodec<?,?> ctx = inflight.peek();\n+        ctx.sequenceId = sequenceId + 1;\n+        int startIndex = payload.readerIndex();\n+        try {\n+            ctx.decodePayload(payload, payloadLength);\n+        } catch (Throwable t) {\n+            int i = payload.readerIndex();\n+            payload.readerIndex(startIndex);\n+            LOG.error(\"FATAL: Error parsing buffer at index \" + i + \" / 0x\" + Integer.toHexString(i) + \"\\n\" + \n+                    DB2Codec.dumpBuffer(payload, payloadLength, i), t);\n+            ctx.completionHandler.handle(CommandResponse.failure(t));\n+        }\n+        payload.clear();\n+        payload.release();", "originalCommit": "7f1f3585d187fdf9d38ce7fd47e1b4bbd5c0b489", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MjI2NA==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r370582264", "bodyText": "so the protocol used depends on the interpretation of the SQL query by the client ?", "author": "vietj", "createdAt": "2020-01-24T11:09:32Z", "path": "vertx-db2-client/src/main/java/io/vertx/db2client/impl/codec/ExtendedQueryCommandCodec.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright (C) 2019,2020 IBM Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.vertx.db2client.impl.codec;\n+\n+import java.util.stream.Collector;\n+\n+import com.ibm.db2.jcc.am.ResultSet;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.vertx.core.impl.logging.Logger;\n+import io.vertx.core.impl.logging.LoggerFactory;\n+import io.vertx.db2client.impl.drda.DRDAQueryRequest;\n+import io.vertx.db2client.impl.drda.DRDAQueryResponse;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.Tuple;\n+import io.vertx.sqlclient.impl.RowDesc;\n+import io.vertx.sqlclient.impl.command.CommandResponse;\n+import io.vertx.sqlclient.impl.command.ExtendedQueryCommand;\n+\n+class ExtendedQueryCommandCodec<R> extends ExtendedQueryCommandBaseCodec<R, ExtendedQueryCommand<R>> {\n+\t\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(ExtendedQueryCommandCodec.class);\n+\t\n+    ExtendedQueryCommandCodec(ExtendedQueryCommand<R> cmd) {\n+        super(cmd);\n+        if (cmd.fetch() > 0) {\n+            // restore the state we need for decoding fetch response\n+            columnDefinitions = statement.rowDesc.columnDefinitions();\n+        }\n+        // @AGG always carry over column defs?\n+        columnDefinitions = statement.rowDesc.columnDefinitions();\n+        querySection = statement.section;\n+    }\n+\n+    @Override\n+    void encode(DB2Encoder encoder) {\n+        super.encode(encoder);\n+        if (LOG.isDebugEnabled())        \n+        \tLOG.debug(\"Extended query encode: statement=\" + statement);\n+        \n+        ByteBuf packet = allocateBuffer();\n+        DRDAQueryRequest openQuery = new DRDAQueryRequest(packet);\n+        String dbName = encoder.socketConnection.database();\n+        int fetchSize = 0; // TODO @AGG get fetch size from config\n+        Tuple params = cmd.params();\n+        Object[] inputs = new Object[params.size()];\n+        for (int i = 0; i < params.size(); i++)\n+            inputs[i] = params.getValue(i);\n+        \n+        if (DRDAQueryRequest.isQuery(cmd.sql())) {", "originalCommit": "7f1f3585d187fdf9d38ce7fd47e1b4bbd5c0b489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1Njk3OA==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r370756978", "bodyText": "The protocol used is always DRDA, but yes we need to send different commands over the wire for an update vs. query statement. I believe that we technically could use the same commands for both, but if we flow the more specific commands then the DB can make some optimizations on its end", "author": "aguibert", "createdAt": "2020-01-24T17:39:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MjI2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MjUwMA==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r370582500", "bodyText": "log", "author": "vietj", "createdAt": "2020-01-24T11:10:11Z", "path": "vertx-db2-client/src/main/java/io/vertx/db2client/impl/codec/InitialHandshakeCommandCodec.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright (C) 2019,2020 IBM Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.vertx.db2client.impl.codec;\n+\n+import java.sql.SQLException;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.vertx.db2client.impl.command.InitialHandshakeCommand;\n+import io.vertx.db2client.impl.drda.CCSIDManager;\n+import io.vertx.db2client.impl.drda.DRDAConnectRequest;\n+import io.vertx.db2client.impl.drda.DRDAConnectResponse;\n+import io.vertx.db2client.impl.drda.DRDAConnectResponse.RDBAccessData;\n+import io.vertx.db2client.impl.drda.DRDAConstants;\n+import io.vertx.sqlclient.impl.Connection;\n+import io.vertx.sqlclient.impl.command.CommandResponse;\n+\n+class InitialHandshakeCommandCodec extends AuthenticationCommandBaseCodec<Connection, InitialHandshakeCommand> {\n+\n+    private static final int ST_CONNECTING = 0;\n+    private static final int ST_AUTHENTICATING = 1;\n+    private static final int ST_CONNECTED = 2;\n+    \n+    private static final int TARGET_SECURITY_MEASURE = DRDAConstants.SECMEC_USRIDPWD;\n+    \n+    // TODO: @AGG may need to move this to connection level\n+    // Correlation Token of the source sent to the server in the accrdb.\n+    // It is saved like the prddta in case it is needed for a connect reflow.\n+    private byte[] correlationToken;\n+    \n+    private int status = ST_CONNECTING;\n+\n+    InitialHandshakeCommandCodec(InitialHandshakeCommand cmd) {\n+        super(cmd);\n+    }\n+\n+    @Override\n+    void encode(DB2Encoder encoder) {\n+        super.encode(encoder);\n+        sendInitialHandshake();\n+    }\n+\n+    @Override\n+    void decodePayload(ByteBuf payload, int payloadLength) {\n+        DRDAConnectResponse response = new DRDAConnectResponse(payload);\n+        try {\n+            switch (status) {\n+            case ST_CONNECTING:\n+                response.readExchangeServerAttributes();\n+                response.readAccessSecurity(TARGET_SECURITY_MEASURE);\n+                status = ST_AUTHENTICATING;\n+                ByteBuf packet = allocateBuffer();\n+                int packetStartIdx = packet.writerIndex();\n+                DRDAConnectRequest securityCheck = new DRDAConnectRequest(packet);\n+                correlationToken = securityCheck.getCorrelationToken(encoder.socketConnection.socket().localAddress().port());\n+                securityCheck.buildSECCHK(TARGET_SECURITY_MEASURE,\n+                        cmd.database(),\n+                        cmd.username(),\n+                        cmd.password(),\n+                        null, //sectkn, \n+                        null); //sectkn2\n+                securityCheck.buildACCRDB(cmd.database(), \n+                        false, //readOnly, \n+                        correlationToken,\n+                        DRDAConstants.SYSTEM_ASC);\n+                securityCheck.completeCommand();\n+                int lenOfPayload = packet.writerIndex() - packetStartIdx;\n+                sendPacket(packet, lenOfPayload);\n+                return;\n+            case ST_AUTHENTICATING:\n+                response.readSecurityCheck();\n+                RDBAccessData accData = response.readAccessDatabase();\n+                if (accData.correlationToken != null)\n+                    correlationToken = accData.correlationToken;\n+                status = ST_CONNECTED;\n+                completionHandler.handle(CommandResponse.success(cmd.connection()));\n+                return;\n+            default: \n+                throw new IllegalStateException(\"Unknown state: \" + status);\n+            }\n+        } catch (Throwable t) {\n+            t.printStackTrace();\n+            completionHandler.handle(CommandResponse.failure(t));\n+        }\n+    }\n+    \n+    private void sendInitialHandshake() {\n+        ByteBuf packet = allocateBuffer();\n+        int packetStartIdx = packet.writerIndex();\n+        DRDAConnectRequest cmd = new DRDAConnectRequest(packet);\n+        try {\n+            cmd.buildEXCSAT(DRDAConstants.EXTNAM, // externalName,\n+                    0x07, // 0x0A, // targetAgent,\n+                    DRDAConstants.TARGET_SQL_AM, // targetSqlam,\n+                    0x0C, // targetRdb,\n+                    TARGET_SECURITY_MEASURE, //targetSecmgr,\n+                    0, // targetCmntcpip,\n+                    0, // targetCmnappc, (not used)\n+                    0, // targetXamgr,\n+                    0, // targetSyncptmgr,\n+                    0, // targetRsyncmgr,\n+                    CCSIDManager.TARGET_UNICODE_MGR // targetUnicodemgr\n+            );\n+            cmd.buildACCSEC(TARGET_SECURITY_MEASURE, this.cmd.database(), null);\n+            cmd.completeCommand();\n+        } catch (SQLException e) {\n+            e.printStackTrace();", "originalCommit": "7f1f3585d187fdf9d38ce7fd47e1b4bbd5c0b489", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NzU3Nw==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r370587577", "bodyText": "it seems this class should rather be called CCSIDConstants", "author": "vietj", "createdAt": "2020-01-24T11:24:28Z", "path": "vertx-db2-client/src/main/java/io/vertx/db2client/impl/drda/CCSIDManager.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright (C) 2019,2020 IBM Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.vertx.db2client.impl.drda;\n+\n+import java.nio.charset.Charset;\n+\n+public class CCSIDManager {", "originalCommit": "7f1f3585d187fdf9d38ce7fd47e1b4bbd5c0b489", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4ODExNQ==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r370588115", "bodyText": "use StandardCharsets.UTF_8", "author": "vietj", "createdAt": "2020-01-24T11:25:57Z", "path": "vertx-db2-client/src/main/java/io/vertx/db2client/impl/drda/CCSIDManager.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright (C) 2019,2020 IBM Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.vertx.db2client.impl.drda;\n+\n+import java.nio.charset.Charset;\n+\n+public class CCSIDManager {\n+    \n+    public static final int CCSID_EBCDIC = 500; // 0x01F4\n+    public static final int CCSID_UTF8 = 1208; // 0x04B8\n+    public static final int TARGET_UNICODE_MGR = CCSID_UTF8;\n+    \n+    public static final Charset EBCDIC = Charset.forName(\"CP1047\");\n+    public static final Charset UTF8 = Charset.forName(\"UTF-8\");", "originalCommit": "7f1f3585d187fdf9d38ce7fd47e1b4bbd5c0b489", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4ODYwMg==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r370588602", "bodyText": "why naming with trailing underscores ?", "author": "vietj", "createdAt": "2020-01-24T11:27:16Z", "path": "vertx-db2-client/src/main/java/io/vertx/db2client/impl/drda/ColumnMetaData.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (C) 2019,2020 IBM Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.vertx.db2client.impl.drda;\n+\n+public class ColumnMetaData {\n+    \n+    public int columns_;", "originalCommit": "7f1f3585d187fdf9d38ce7fd47e1b4bbd5c0b489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1OTc2Ng==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r370759766", "bodyText": "this is how the code was from Apache Derby, I'm trying to modify the code as little as possible for starters while we try to get everything working so that it's easier to diff the original code. After we get everything working well I plan to come back to the drda package and do some major refactoring", "author": "aguibert", "createdAt": "2020-01-24T17:46:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4ODYwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYwOTg2Mg==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r370609862", "bodyText": "doc explaining what qryprctyp means", "author": "vietj", "createdAt": "2020-01-24T12:29:40Z", "path": "vertx-db2-client/src/main/java/io/vertx/db2client/impl/drda/Cursor.java", "diffHunk": "@@ -0,0 +1,2479 @@\n+/*\n+ * Copyright (C) 2019,2020 IBM Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.vertx.db2client.impl.drda;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.ObjectInputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.math.BigDecimal;\n+import java.nio.charset.Charset;\n+import java.sql.Blob;\n+import java.sql.Clob;\n+import java.sql.Date;\n+import java.sql.SQLException;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.sql.Types;\n+import java.time.LocalDate;\n+import java.time.LocalTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public class Cursor {\n+\n+    //-----------------------------varchar representations------------------------\n+\n+    public final static int STRING = 0;\n+    public final static int VARIABLE_STRING = 2;       // uses a 2-byte length indicator\n+    public final static int VARIABLE_SHORT_STRING = 1; // aka Pascal L; uses a 1-byte length indicator\n+    public final static int NULL_TERMINATED_STRING = 3;\n+\n+    public final static int BYTES = 4;\n+    // unused protocol element: VARIABLE_BYTES = 5;\n+    // unused protocol element: VARIABLE_SHORT_BYTES = 6;\n+    public final static int NULL_TERMINATED_BYTES = 7;\n+\n+    // Charsets\n+    static final Charset UTF_16BE = Charset.forName(\"UTF-16BE\");\n+    static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+    static final Charset ISO_8859_1 = Charset.forName(\"ISO-8859-1\");\n+    \n+    private static final DateTimeFormatter db2TimeFormat = DateTimeFormatter.ofPattern(\"HH.mm.ss\");\n+\n+    // unused protocol element: SBCS_CLOB = 8;\n+    // unused protocol element: MBCS_CLOB = 9;\n+    // unused protocol element: DBCS_CLOB = 10;\n+    //-----------------------------internal state---------------------------------\n+\n+    //-------------Structures for holding and scrolling the data -----------------\n+    public ByteBuf dataBuffer_;\n+//    public byte[] dataBuffer_;\n+//    public ByteArrayOutputStream dataBufferStream_ = new ByteArrayOutputStream();\n+//    public int position_; // This is the read head\n+    public int lastValidBytePosition_;\n+    public boolean hasLobs_; // is there at least one LOB column?\n+\n+    // Current row positioning\n+    protected int currentRowPosition_;\n+    private int nextRowPosition_;\n+    // Let's new up a 2-dimensional array based on fetch-size and reuse so that\n+    protected int[] columnDataPosition_;\n+\n+    // This is the actual, computed lengths of varchar fields, not the max length from query descriptor or DA\n+    protected int[] columnDataComputedLength_;\n+    // populate this for\n+\n+    // All the data is in the buffers, but user may not have necessarily stepped to the last row yet.\n+    // This flag indicates that the server has returned all the rows, and is positioned\n+    // after last, for both scrollable and forward-only cursors.\n+    // For singleton cursors, this memeber will be set to true as soon as next is called.\n+    private boolean allRowsReceivedFromServer_;\n+\n+    // Total number of rows read so far.\n+    // This should never exceed this.statement.maxRows\n+    long rowsRead_;\n+\n+    // Maximum column size limit in bytes.\n+    int maxFieldSize_ = 0;\n+\n+    // Row positioning for all cached rows\n+    // For scrollable result sets, these lists hold the offsets into the cached rowset buffer for each row of data.\n+    protected ArrayList<int[]> columnDataPositionCache_ = new ArrayList<int[]>();\n+    protected ArrayList<int[]> columnDataLengthCache_ = new ArrayList<int[]>();\n+    protected ArrayList<boolean[]> columnDataIsNullCache_ = new ArrayList<boolean[]>();\n+    ArrayList<Boolean> isUpdateDeleteHoleCache_ = new ArrayList<Boolean>();\n+    boolean isUpdateDeleteHole_;\n+\n+    // State to keep track of when a row has been updated,\n+    // cf. corresponding set and get accessors.  Only implemented for\n+    // scrollable updatable insensitive result sets for now.\n+    private boolean isRowUpdated_;\n+\n+    final static Boolean ROW_IS_NULL = Boolean.TRUE;\n+    private final static Boolean ROW_IS_NOT_NULL = Boolean.FALSE;\n+\n+    private Calendar recyclableCalendar_ = null;\n+\n+    // For the net, this data comes from the query descriptor.\n+\n+    public int[] jdbcTypes_;\n+    public int columns_;\n+    public boolean[] nullable_;\n+    public Charset[] charset_;\n+    public boolean[] isNull_;\n+    public int[] fdocaLength_; // this is the max length for\n+\n+    //----------------------------------------------------------------------------\n+\n+    public int[] ccsid_;\n+    private char[] charBuffer_;\n+    \n+//    NetResultSet netResultSet_;\n+//    private NetAgent netAgent_;\n+\n+    Typdef qrydscTypdef_;\n+\n+    int maximumRowSize_ = 0;\n+    boolean blocking_;  // if true, multiple rows may be \"blocked\" in a single reply\n+\n+    // Raw fdoca column meta data.\n+    int[] typeToUseForComputingDataLength_;\n+    boolean[] isGraphic_;\n+\n+    // key = column position, value = index into extdtaData_\n+    HashMap<Integer, Integer> extdtaPositions_ = new HashMap<Integer, Integer>();\n+\n+    /**\n+     * Queue to hold EXTDTA data that hasn't been correlated to its\n+     * column number.\n+     */\n+    ArrayList<byte[]> extdtaData_ = new ArrayList<byte[]>();\n+\n+\n+    boolean rtnextrow_ = true;\n+\n+    /** Flag indicating whether the result set on the server is\n+     * implicitly closed when end-of-data is received. */\n+    private boolean qryclsimpEnabled_;\n+\n+    //-----------------------------constants--------------------------------------\n+\n+    //---------------------constructors/finalizer---------------------------------\n+\n+    Cursor() {\n+    }\n+\n+    Cursor(int qryprctyp)  //protocolType, CodePoint.FIXROWPRC | CodePoint.LMTBLKPRC", "originalCommit": "7f1f3585d187fdf9d38ce7fd47e1b4bbd5c0b489", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxMzU1NQ==", "url": "https://github.com/eclipse-vertx/vertx-sql-client/pull/503#discussion_r370613555", "bodyText": "should the string be checked for whitespaces ?", "author": "vietj", "createdAt": "2020-01-24T12:39:52Z", "path": "vertx-db2-client/src/main/java/io/vertx/db2client/impl/drda/DRDAQueryRequest.java", "diffHunk": "@@ -0,0 +1,1862 @@\n+/*\n+ * Copyright (C) 2019,2020 IBM Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.vertx.db2client.impl.drda;\n+\n+import java.math.BigDecimal;\n+import java.sql.ResultSet;\n+import java.sql.Types;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public class DRDAQueryRequest extends DRDAConnectRequest {\n+    \n+    private static final String COLLECTIONNAME = \"NULLID\";\n+    \n+    public static final int defaultFetchSize = 64;\n+    \n+    private ArrayList<Integer> extdtaPositions_ = null;\n+    \n+    // promototed parameters hold parameters that are promotoed to a different\n+    // data type because they are too large to represent in PROTOCOL otherwise.\n+    // This currently only applies for promotion of (VAR)CHAR -> CLOB and (VAR)BINARY -> BLOB\n+    // The key for this structure is the parameter index.  Note that having this\n+    // collection does not eliminate the need for extdtaPositions_ because that\n+    // is still needed for non-promototed LOBs\n+    private final HashMap<Integer, Object> promototedParameters_ = new HashMap<>();\n+    \n+    public DRDAQueryRequest(ByteBuf buffer) {\n+        super(buffer);\n+    }\n+    \n+    /**\n+     * @return True if the SQL is a query (i.e. SELECT) and false otherwise\n+     */\n+    public static boolean isQuery(String sql) {", "originalCommit": "7f1f3585d187fdf9d38ce7fd47e1b4bbd5c0b489", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c955a8a37197e68121fc8354e5e28ce4514aa1e1", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/c955a8a37197e68121fc8354e5e28ce4514aa1e1", "message": "Review comments from Julien", "committedDate": "2020-01-24T18:37:37Z", "type": "commit"}, {"oid": "c955a8a37197e68121fc8354e5e28ce4514aa1e1", "url": "https://github.com/eclipse-vertx/vertx-sql-client/commit/c955a8a37197e68121fc8354e5e28ce4514aa1e1", "message": "Review comments from Julien", "committedDate": "2020-01-24T18:37:37Z", "type": "forcePushed"}]}