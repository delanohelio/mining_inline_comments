{"pr_number": 6732, "pr_title": "Add Deno support to typescript(experimental) generator", "pr_createdAt": "2020-06-21T12:04:49Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/6732", "timeline": [{"oid": "b5ff53cc0c9dc3074942d68ae4bb51aa8dd3303c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b5ff53cc0c9dc3074942d68ae4bb51aa8dd3303c", "message": "add 'deno' to typescript platforms", "committedDate": "2020-06-21T00:35:27Z", "type": "commit"}, {"oid": "c426c80e6f383965ff13ec5a6e77c3d4d440e9e9", "url": "https://github.com/OpenAPITools/openapi-generator/commit/c426c80e6f383965ff13ec5a6e77c3d4d440e9e9", "message": "Merge branch 'fork_origin_master' into deno", "committedDate": "2020-06-21T00:55:32Z", "type": "commit"}, {"oid": "48afe578d78a919e7a0bcd5c751a4533462698e8", "url": "https://github.com/OpenAPITools/openapi-generator/commit/48afe578d78a919e7a0bcd5c751a4533462698e8", "message": "Merge remote-tracking branch 'fork_origin/master' into deno", "committedDate": "2020-06-21T11:33:13Z", "type": "commit"}, {"oid": "393bbccd37a27baf42e4335ebc575dc7de8b4443", "url": "https://github.com/OpenAPITools/openapi-generator/commit/393bbccd37a27baf42e4335ebc575dc7de8b4443", "message": "add Deno support to typescript generator", "committedDate": "2020-06-21T11:46:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNDk4MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r443214980", "bodyText": "I don't know deno at all, but why did you decide not to generate package.mustache and tsconfig.mustache for deno?\nThis makes the required dependencies intransparent.", "author": "TiFu", "createdAt": "2020-06-21T12:30:15Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptClientCodegen.java", "diffHunk": "@@ -792,6 +789,12 @@ public void processOpts() {\n \n         additionalProperties.putIfAbsent(FILE_CONTENT_DATA_TYPE, propPlatform.equals(\"node\") ? \"Buffer\" : \"Blob\");\n \n+        if (!propPlatform.equals(\"deno\")) {", "originalCommit": "393bbccd37a27baf42e4335ebc575dc7de8b4443", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyODQzNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r443228437", "bodyText": "Thanks for your review !\nDeno does not use package.json in its module resolution algorithm(Deno uses \"ES Modules\". Third party modules are imported via URLs.).\nAnd also generated code can work by Deno's default tsconfig without optional tsconfig.json.", "author": "chibat", "createdAt": "2020-06-21T15:04:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNDk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNTY4Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r443215682", "bodyText": "Could we instead create a separate module that wraps deno's URL and provides a URLParse like interface?\nWe could then import this module instead of adding all of these conditions.", "author": "TiFu", "createdAt": "2020-06-21T12:38:53Z", "path": "modules/openapi-generator/src/main/resources/typescript/http/http.mustache", "diffHunk": "@@ -66,7 +74,7 @@ export type RequestBody = undefined | string | FormData;\n export class RequestContext {\n     private headers: { [key: string]: string } = {};\n     private body: RequestBody = undefined;\n-    private url: URLParse;\n+    private url: {{#platforms}}{{#deno}}URL{{/deno}}{{^deno}}URLParse{{/deno}}{{/platforms}};", "originalCommit": "393bbccd37a27baf42e4335ebc575dc7de8b4443", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyODQ0Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r443228442", "bodyText": "I understand. I try it.", "author": "chibat", "createdAt": "2020-06-21T15:04:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNTY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyODU3MQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r443328571", "bodyText": "Why do we use URLParse (external dependency) at all? Node provides whatwg-compatible URL (https://nodejs.org/docs/latest-v12.x/api/url.html#url_class_url), as well as modern browsers.", "author": "amakhrov", "createdAt": "2020-06-22T05:47:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNTY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUyNDQ0OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r443524448", "bodyText": "We are using url-parse to support IE ?\nIf we want to support IE, is it better to use URLSearchParams Polyfill ?", "author": "chibat", "createdAt": "2020-06-22T12:32:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNTY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwMzYwNg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r444003606", "bodyText": "I think we had this discussion in one of the PRs of the original generator. I think the decision was based on url-parse being easier to use compared to the polyfill. url-parse also only has two dependencies (including recursive dependencies).\nOpen to replacing url-parse in the browser as long as we hide it behind an interface. @bodograumann similarly added a workaround for uploading files in IE.", "author": "TiFu", "createdAt": "2020-06-23T07:01:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNTY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0MTU0OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r444041548", "bodyText": "I really believe polyfills is a responsibility of the end consumer (especially given URL is a rather well-supported feature, save for IE).\nTwo scenarios basically:\n\nI already have a polyfill in the project - why do I need another one?\nI have differential bundles: for IE and for modern browsers. I only need polyfills in former.\n\nAgain, it's not supposed to block this PR in any way, since this is how it's implemented in master already. I just didn't figure out a better place to raise this concern :)", "author": "amakhrov", "createdAt": "2020-06-23T08:10:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNTY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0NzAwOQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r444047009", "bodyText": "@amakhrov I absolutely agree! @TiFu would you mind removing the polyfills before the 5.0.0 release?", "author": "macjohnny", "createdAt": "2020-06-23T08:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNTY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczODMzMA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r444738330", "bodyText": "The question for me is, where do we draw the line?\nWe could use Blob.text(), as it is a WebAPI, but it is not supported in lots of browsers.\nThen there is URLSearchParams.\nAnd of course fetch API.\nWhen someone generates the code, they don't know which polyfills they need to get it running in a certain set of browsers. In my experience babel does not automatically add polyfills for (most of) these things.\nI think it is a complex issue and maybe you can open a separate issue, @amakhrov. I would love to discuss the details.", "author": "bodograumann", "createdAt": "2020-06-24T08:42:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNTY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI4OTE0OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r445289148", "bodyText": "This time, I have created URLParse wrapper for Deno.\nType of URLParse is complex..\nI have replaced instantiating from a function call to new.", "author": "chibat", "createdAt": "2020-06-25T03:39:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNTY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU0NDMxMg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r446544312", "bodyText": "I agree with @bodograumann - let's discuss how we want to proceed. I'd prefer something that just works out of the box in the targeted environment - be it node or browsers or deno.", "author": "TiFu", "createdAt": "2020-06-27T16:47:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNTY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU0NjA1OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r446546058", "bodyText": "Users must have a choice. Right now we force them to depend on a specific polyfill, regardless on the platform they target", "author": "amakhrov", "createdAt": "2020-06-27T17:06:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNTY4Mg=="}], "type": "inlineReview"}, {"oid": "334f7592e9ac6d8c95046c129d68d4b00de01fd8", "url": "https://github.com/OpenAPITools/openapi-generator/commit/334f7592e9ac6d8c95046c129d68d4b00de01fd8", "message": "add Deno support to typescript generator", "committedDate": "2020-06-21T21:55:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMzMTAxNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r443331017", "bodyText": "Also curious why we enforce this polyfill instead of delegating that to the end consumer (which might already have a different polyfill in their app!)\nIt's not a comment about this PR, though - it's actually about the typescript generator already in master :)", "author": "amakhrov", "createdAt": "2020-06-22T05:56:36Z", "path": "modules/openapi-generator/src/main/resources/typescript/index.mustache", "diffHunk": "@@ -1,41 +1,45 @@\n+{{#platforms}}\n+{{^deno}}\n import \"es6-promise/auto\";", "originalCommit": "334f7592e9ac6d8c95046c129d68d4b00de01fd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUyNTEzMw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r443525133", "bodyText": "I remove it and try running the integration test.", "author": "chibat", "createdAt": "2020-06-22T12:33:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMzMTAxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMzMTI3NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r443331274", "bodyText": "looks like there is no intention to support inversify on the Deno platform - is that so?", "author": "amakhrov", "createdAt": "2020-06-22T05:57:30Z", "path": "modules/openapi-generator/src/main/resources/typescript/auth/auth.mustache", "diffHunk": "@@ -5,7 +5,7 @@\n import * as btoa from \"btoa\";\n {{/node}}\n {{/platforms}}\n-import { RequestContext } from \"../http/http\";\n+import { RequestContext } from \"../http/http{{#platforms}}{{#deno}}.ts{{/deno}}{{/platforms}}\";\n {{#useInversify}}\n import { injectable, inject, named } from \"inversify\";", "originalCommit": "334f7592e9ac6d8c95046c129d68d4b00de01fd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUyNTkyMQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r443525921", "bodyText": "Yes. Inversify  may work on Deno. But I think it's probably not easy.", "author": "chibat", "createdAt": "2020-06-22T12:35:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMzMTI3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk5OTM4MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r443999380", "bodyText": "Why would it be difficult to add?\nIf we can't support inversify on deno, could you please document that in the inversify option?", "author": "TiFu", "createdAt": "2020-06-23T06:52:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMzMTI3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU2NjE5MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r444566190", "bodyText": "I have checked that if we can use Inversify on Deno.\nDeno Third Party Modules\nInversify is not listed in Deno Third Party Modules.\nPika\nhttps://www.pika.dev/search?q=inversify\nmessage: \"Package found! However, no web-optimized \"module\" entrypoint was found in its package.json manifest.\"\njspm\n$ cat inversify_sample.ts\n\nimport \"https://jspm.dev/reflect-metadata\";\n\n// @deno-types=\"https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/inversify.d.ts\"\nimport { Container, injectable } from \"https://jspm.dev/inversify@5.0.1\";\n\nvar container = new Container();\n\n$ ~/data/work$ deno run --reload -c tsconfig.json inversify_sample.ts\nDownload https://jspm.dev/reflect-metadata\nDownload https://jspm.dev/inversify@5.0.1\nDownload https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/inversify.d.ts\nDownload https://jspm.dev/npm:inversify@5.0.1/_/2b7febed.js\nDownload https://jspm.dev/npm:inversify@5.0.1/_/2e4eea2e.js\nDownload https://jspm.dev/npm:inversify@5.0.1/_/d819b7b6.js\nDownload https://jspm.dev/npm:inversify@5.0.1/_/8b88d942.js\nDownload https://jspm.dev/npm:inversify@5.0.1!cjs\nDownload https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/constants/metadata_keys\nDownload https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/container/container\nDownload https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/constants/literal_types\nDownload https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/container/container_module\nDownload https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/annotation/injectable\nDownload https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/annotation/tagged\nDownload https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/annotation/named\nDownload https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/annotation/inject\nDownload https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/annotation/optional\nDownload https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/annotation/unmanaged\nDownload https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/annotation/multi_inject\nDownload https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/annotation/target_name\nDownload https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/annotation/post_construct\nDownload https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/planning/metadata_reader\nDownload https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/utils/id\nDownload https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/interfaces/interfaces\nDownload https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/annotation/decorator_utils\nDownload https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/syntax/constraint_helpers\nDownload https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/utils/serialization\nDownload https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/utils/binding_utils\nDownload https://jspm.dev/npm:@jspm/core@2/nodelibs/process\nDownload https://jspm.dev/npm:reflect-metadata@0.1.13!cjs\nDownload https://jspm.dev/npm:@jspm/core@2.0.0-beta.7/_/de9a8dfb.js\nerror: Import 'https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/utils/binding_utils' failed: 404 Not Found\nImported from \"https://cdn.jsdelivr.net/npm/inversify@5.0.1/dts/inversify.d.ts:21\"\n\n$ echo $?\n1\n\nInversify may work on Deno via jspm. But I couldn't load the Type Definition file.\nInversify may officially support Deno in the future.\nAt the moment, I think it's better not to support by openapi-generator yet.\nThis time, I added a description to the documentation that it is not currently supported.", "author": "chibat", "createdAt": "2020-06-23T23:40:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMzMTI3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMzMjQ2MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r443332460", "bodyText": "this change looks redundant, since this whole line is not generated for Deno (which uses a built-in fetch anyway)", "author": "amakhrov", "createdAt": "2020-06-22T06:01:14Z", "path": "modules/openapi-generator/src/main/resources/typescript/http/http.mustache", "diffHunk": "@@ -4,19 +4,27 @@\n import * as FormData from \"form-data\";\n {{/node}}\n {{/platforms}}\n+{{#platforms}}\n+{{^deno}}\n // typings of url-parse are incorrect...\n // @ts-ignore \n import * as URLParse from \"url-parse\";\n-import { Observable, from } from {{#useRxJS}}'rxjs'{{/useRxJS}}{{^useRxJS}}'../rxjsStub'{{/useRxJS}};\n+{{/deno}}\n+{{/platforms}}\n+import { Observable, from } from {{#useRxJS}}'rxjs'{{/useRxJS}}{{^useRxJS}}'../rxjsStub{{#platforms}}{{#deno}}.ts{{/deno}}{{/platforms}}'{{/useRxJS}};\n \n+{{#platforms}}\n+{{^deno}}\n {{#frameworks}}\n {{#fetch-api}}\n-export * from './isomorphic-fetch';\n+export * from './isomorphic-fetch{{#platforms}}{{#deno}}.ts{{/deno}}{{/platforms}}';", "originalCommit": "334f7592e9ac6d8c95046c129d68d4b00de01fd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUyNjIzNg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r443526236", "bodyText": "Thanks! I fixed.", "author": "chibat", "createdAt": "2020-06-22T12:35:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMzMjQ2MA=="}], "type": "inlineReview"}, {"oid": "b306168c89262a64ea5a5a5c710d21d89f9206dc", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b306168c89262a64ea5a5a5c710d21d89f9206dc", "message": "add Deno support to typescript generator", "committedDate": "2020-06-22T12:29:34Z", "type": "commit"}, {"oid": "8a672059c02d94d793ae0abe406f14994261af4b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/8a672059c02d94d793ae0abe406f14994261af4b", "message": "add Deno support to typescript generator", "committedDate": "2020-06-22T21:17:36Z", "type": "commit"}, {"oid": "9d2d02e545c3cd5591f1dedbc8acf4c92a56fa9a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/9d2d02e545c3cd5591f1dedbc8acf4c92a56fa9a", "message": "add Deno support to typescript generator", "committedDate": "2020-06-23T23:35:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc0OTY1OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r444749658", "bodyText": "Adding conditional .ts suffixes to all imports seems very verbose to me.\nIs it possible to simply add it for all platforms?", "author": "bodograumann", "createdAt": "2020-06-24T09:01:14Z", "path": "modules/openapi-generator/src/main/resources/typescript/api/api.mustache", "diffHunk": "@@ -1,21 +1,21 @@\n // TODO: better import syntax?\n-import { BaseAPIRequestFactory, RequiredError } from './baseapi';\n-import {Configuration} from '../configuration';\n-import { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\n+import { BaseAPIRequestFactory, RequiredError } from './baseapi{{#platforms}}{{#deno}}.ts{{/deno}}{{/platforms}}';\n+import {Configuration} from '../configuration{{#platforms}}{{#deno}}.ts{{/deno}}{{/platforms}}';\n+import { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http{{#platforms}}{{#deno}}.ts{{/deno}}{{/platforms}}';", "originalCommit": "9d2d02e545c3cd5591f1dedbc8acf4c92a56fa9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyODg2Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r444828863", "bodyText": "We may be able to write like any other platform using Import maps.\nBut this is unstable feature..\nI have another suggestion.\nTypeScriptClientCodegen.java\nif (propPlatform.equals(\"deno\")) {\n    additionalProperties.put(\"extensionForDeno\", \".ts\");\n}\ntemplate(mustache)\nas-is\nimport { HttpLibrary } from \"./http/http{{#platforms}}{{#deno}}.ts{{/deno}}{{/platforms}}\";\nto-be\nimport { HttpLibrary } from \"./http/http{{extensionForDeno}}\";\nIs this acceptable ?", "author": "chibat", "createdAt": "2020-06-24T11:32:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc0OTY1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzNDU5NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r444834595", "bodyText": "That looks better maintainable.\nI was thinking whether we can could just always use the .ts extension though!?", "author": "bodograumann", "createdAt": "2020-06-24T11:44:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc0OTY1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI4OTIyNA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6732#discussion_r445289224", "bodyText": "I have fixed above.", "author": "chibat", "createdAt": "2020-06-25T03:39:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc0OTY1OA=="}], "type": "inlineReview"}, {"oid": "5f23333113b82ff193f804caf762121bb0da6388", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5f23333113b82ff193f804caf762121bb0da6388", "message": "add extensionForDeno property for typescript generator", "committedDate": "2020-06-24T20:58:42Z", "type": "commit"}, {"oid": "2c2ba9d947ff7b59164550cbf8a27530741a9903", "url": "https://github.com/OpenAPITools/openapi-generator/commit/2c2ba9d947ff7b59164550cbf8a27530741a9903", "message": "add URLParse Deno wrapper for typescript generator", "committedDate": "2020-06-25T03:03:45Z", "type": "commit"}, {"oid": "717760d04daf8ecfa201b6cc8b8cbfbd4f8ba524", "url": "https://github.com/OpenAPITools/openapi-generator/commit/717760d04daf8ecfa201b6cc8b8cbfbd4f8ba524", "message": "Merge remote-tracking branch 'fork_origin/master' into deno", "committedDate": "2020-06-25T10:13:34Z", "type": "commit"}, {"oid": "7e482958139057b9cdd9f335c76cb4c81000b29e", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7e482958139057b9cdd9f335c76cb4c81000b29e", "message": "update deno version in .travis.yml", "committedDate": "2020-06-26T22:38:32Z", "type": "commit"}]}