{"pr_number": 7677, "pr_title": "[typescript-fetch] serialize complex type in multipart/form-data as JSON", "pr_createdAt": "2020-10-12T20:56:05Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/7677", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY5NjcyNA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7677#discussion_r503696724", "bodyText": "what if the parameter is e.g. a Blob, is it also a primitive type?", "author": "macjohnny", "createdAt": "2020-10-13T06:30:47Z", "path": "modules/openapi-generator/src/main/resources/typescript-fetch/apis.mustache", "diffHunk": "@@ -238,7 +238,12 @@ export class {{classname}} extends runtime.BaseAPI {\n         {{/isListContainer}}\n         {{^isListContainer}}\n         if (requestParameters.{{paramName}} !== undefined) {\n+            {{#isPrimitiveType}}\n             formParams.append('{{baseName}}', requestParameters.{{paramName}} as any);\n+            {{/isPrimitiveType}}\n+            {{^isPrimitiveType}}\n+            formParams.append('{{baseName}}', new Blob([JSON.stringify(requestParameters.{{paramName}})], { type: \"application/json\", }));", "originalCommit": "27c438933d237f6cada7e55f9e636361e3eb36d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcwODI2OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7677#discussion_r503708268", "bodyText": "Yes, it's a primitive. I updated the PR cover letter with test details that includes binary data.", "author": "verokarhu", "createdAt": "2020-10-13T06:56:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY5NjcyNA=="}], "type": "inlineReview"}, {"oid": "047e544755a72bdd48f9176a70f667292d147210", "url": "https://github.com/OpenAPITools/openapi-generator/commit/047e544755a72bdd48f9176a70f667292d147210", "message": "[typescript-fetch] serialize complex type in multipart/form-data as JSON (#7658)\n\nComplex types need to be serialized as JSON to avoid FormData.append()\nfrom converting them into strings through .toString(). The generated\nToJSON mapper is used in case the value name has underscores or other\nunusual characters.\n\nSigned-off-by: Andreas Mets\u00e4l\u00e4 <andreas.metsala@gmail.com>", "committedDate": "2020-10-14T21:22:36Z", "type": "commit"}]}