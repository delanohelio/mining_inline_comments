{"pr_number": 6557, "pr_title": "[Python] Support for per-operation servers", "pr_createdAt": "2020-06-05T10:48:34Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/6557", "timeline": [{"oid": "81e594d319a5e76549e8f4aa45c4200f67b3f646", "url": "https://github.com/OpenAPITools/openapi-generator/commit/81e594d319a5e76549e8f4aa45c4200f67b3f646", "message": "Dynamic server support", "committedDate": "2020-06-05T10:41:33Z", "type": "commit"}, {"oid": "4985f2711ee994f75deb55d67a028c54defc0d8c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4985f2711ee994f75deb55d67a028c54defc0d8c", "message": "regenerated", "committedDate": "2020-06-05T10:47:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3MjAwOA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r435872008", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"\"\"Default sever variables\n          \n          \n            \n                    \"\"\"Default server variables", "author": "therve", "createdAt": "2020-06-05T11:56:19Z", "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -155,20 +155,30 @@ conf = {{{packageName}}}.Configuration(\n \n     _default = None\n \n-    def __init__(self, host=\"{{{basePath}}}\",\n+    def __init__(self, host=None,\n                  api_key=None, api_key_prefix=None,\n                  username=None, password=None,\n                  discard_unknown_keys=False,\n                  disabled_client_side_validations=\"\",\n {{#hasHttpSignatureMethods}}\n                  signing_info=None,\n {{/hasHttpSignatureMethods}}\n+                 server_index=None, server_variables=None,\n+                 server_operation_index=None, server_operation_variables=None,\n                  ):\n         \"\"\"Constructor\n         \"\"\"\n-        self.host = host\n+        self._base_path = \"{{{basePath}}}\" if host is None else host\n         \"\"\"Default Base url\n         \"\"\"\n+        self.server_index = 0 if server_index is None and host is None else server_index\n+        self.server_operation_index = server_operation_index or {}\n+        \"\"\"Default server index\n+        \"\"\"\n+        self.server_variables = server_variables or {}\n+        self.server_operation_variables = server_operation_variables or {}\n+        \"\"\"Default sever variables", "originalCommit": "4985f2711ee994f75deb55d67a028c54defc0d8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3MjE1Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r435872152", "bodyText": "Missing servers params doc.", "author": "therve", "createdAt": "2020-06-05T11:56:38Z", "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -561,14 +571,14 @@ conf = {{{packageName}}}.Configuration(\n             {{/servers}}\n         ]\n \n-    def get_host_from_settings(self, index, variables=None):\n+    def get_host_from_settings(self, index, variables=None, servers=None):\n         \"\"\"Gets host URL based on the index and variables\n         :param index: array index of the host settings\n         :param variables: hash of variable and the corresponding value", "originalCommit": "4985f2711ee994f75deb55d67a028c54defc0d8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3MjY3Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r435872677", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        kwargs['_host_index'] = kwargs.get('_host_index', None)\n          \n          \n            \n                        kwargs['_host_index'] = kwargs.get('_host_index')", "author": "therve", "createdAt": "2020-06-05T11:57:39Z", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api.mustache", "diffHunk": "@@ -131,7 +131,7 @@ class {{classname}}(object):\n             kwargs['_check_return_type'] = kwargs.get(\n                 '_check_return_type', True\n             )\n-            kwargs['_host_index'] = kwargs.get('_host_index', 0)\n+            kwargs['_host_index'] = kwargs.get('_host_index', None)", "originalCommit": "4985f2711ee994f75deb55d67a028c54defc0d8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg4NTM0Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r435885347", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    :param variables: hash of variable and the corresponding value\n          \n          \n            \n                    :param variables: hash of variable and the corresponding value\n          \n          \n            \n                    :param servers: host settings for the endpoint", "author": "jirikuncar", "createdAt": "2020-06-05T12:23:37Z", "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -561,14 +571,14 @@ conf = {{{packageName}}}.Configuration(\n             {{/servers}}\n         ]\n \n-    def get_host_from_settings(self, index, variables=None):\n+    def get_host_from_settings(self, index, variables=None, servers=None):\n         \"\"\"Gets host URL based on the index and variables\n         :param index: array index of the host settings\n         :param variables: hash of variable and the corresponding value", "originalCommit": "4985f2711ee994f75deb55d67a028c54defc0d8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1fd2e65794a3996f358ce868265c8b5df51cb2d5", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1fd2e65794a3996f358ce868265c8b5df51cb2d5", "message": "Apply suggestions from code review\n\nCo-authored-by: Thomas Herv\u00e9 <thomas.herve@datadoghq.com>", "committedDate": "2020-06-05T12:24:09Z", "type": "commit"}, {"oid": "6caf66f430e8317c925794022ee1e8de9fcf6cbc", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6caf66f430e8317c925794022ee1e8de9fcf6cbc", "message": "regenerated", "committedDate": "2020-06-05T12:27:14Z", "type": "commit"}, {"oid": "5eec72936750c4afd35b909699705ba54f785e20", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5eec72936750c4afd35b909699705ba54f785e20", "message": "Add ParameterizedServer feature to Python experimental", "committedDate": "2020-06-05T13:45:09Z", "type": "commit"}, {"oid": "df1c3242d6641b357272912f50c8abaa0ccf60d2", "url": "https://github.com/OpenAPITools/openapi-generator/commit/df1c3242d6641b357272912f50c8abaa0ccf60d2", "message": "Fix lookup of server variables", "committedDate": "2020-06-05T15:23:17Z", "type": "commit"}, {"oid": "39206459fc9c227c2326f548b770d37ba9a7b80c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/39206459fc9c227c2326f548b770d37ba9a7b80c", "message": "Add tests and change default value for servers", "committedDate": "2020-06-08T10:06:05Z", "type": "commit"}, {"oid": "7420edb6ccf308d350d5601e626fb7e68a16976f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7420edb6ccf308d350d5601e626fb7e68a16976f", "message": "Fix server variables", "committedDate": "2020-06-08T10:15:06Z", "type": "commit"}, {"oid": "5422cfd66af43372998367b94758dfba8c00d972", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5422cfd66af43372998367b94758dfba8c00d972", "message": "Return base path when index is None", "committedDate": "2020-06-08T11:50:44Z", "type": "commit"}, {"oid": "280837f05b0db29a0ead9287bea5d556b4e9be09", "url": "https://github.com/OpenAPITools/openapi-generator/commit/280837f05b0db29a0ead9287bea5d556b4e9be09", "message": "Merge remote-tracking branch 'upstream/master' into python-experimental/dynamic-servers", "committedDate": "2020-06-08T13:57:19Z", "type": "commit"}, {"oid": "294d164ab033df0f7c60f38885c9b57c1fb711c3", "url": "https://github.com/OpenAPITools/openapi-generator/commit/294d164ab033df0f7c60f38885c9b57c1fb711c3", "message": "Use HOST", "committedDate": "2020-06-08T15:15:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU3ODU3MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r438578570", "bodyText": "How about removing this if block because it already exists in get_host_from_settings?", "author": "spacether", "createdAt": "2020-06-11T06:54:10Z", "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -595,3 +609,17 @@ conf = {{{packageName}}}.Configuration(\n             url = url.replace(\"{\" + variable_name + \"}\", used_value)\n \n         return url\n+\n+    @property\n+    def host(self):\n+        \"\"\"Return generated host.\"\"\"\n+        if self.server_index is None:\n+            return self._base_path", "originalCommit": "294d164ab033df0f7c60f38885c9b57c1fb711c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4MDcwNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r438580707", "bodyText": "How about naming this variable _host, which more clearly conveys that this is the default host that we use?", "author": "spacether", "createdAt": "2020-06-11T06:59:03Z", "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -155,20 +155,30 @@ conf = {{{packageName}}}.Configuration(\n \n     _default = None\n \n-    def __init__(self, host=\"{{{basePath}}}\",\n+    def __init__(self, host=None,\n                  api_key=None, api_key_prefix=None,\n                  username=None, password=None,\n                  discard_unknown_keys=False,\n                  disabled_client_side_validations=\"\",\n {{#hasHttpSignatureMethods}}\n                  signing_info=None,\n {{/hasHttpSignatureMethods}}\n+                 server_index=None, server_variables=None,\n+                 server_operation_index=None, server_operation_variables=None,\n                  ):\n         \"\"\"Constructor\n         \"\"\"\n-        self.host = host\n+        self._base_path = \"{{{basePath}}}\" if host is None else host", "originalCommit": "294d164ab033df0f7c60f38885c9b57c1fb711c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzMDMxOQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r438830319", "bodyText": "Technically it's a base path since host would mean only host part of a URL.", "author": "jirikuncar", "createdAt": "2020-06-11T14:31:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4MDcwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4NDQzMA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r438584430", "bodyText": "Can you also update the docstring here to show that _host_index can now be type int/None?", "author": "spacether", "createdAt": "2020-06-11T07:07:25Z", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api.mustache", "diffHunk": "@@ -105,7 +105,7 @@ class {{classname}}(object):\n                     Default is True.\n                 _host_index (int): specifies the index of the server\n                     that we want to use.\n-                    Default is 0.\n+                    Default is read from the configuration.", "originalCommit": "294d164ab033df0f7c60f38885c9b57c1fb711c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4NTY5NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r438585695", "bodyText": "Can you describe that servers should is of type (list/None)?\nCan you describe that index is of type (int/None)?", "author": "spacether", "createdAt": "2020-06-11T07:10:10Z", "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -561,14 +571,18 @@ conf = {{{packageName}}}.Configuration(\n             {{/servers}}\n         ]\n \n-    def get_host_from_settings(self, index, variables=None):\n+    def get_host_from_settings(self, index, variables=None, servers=None):\n         \"\"\"Gets host URL based on the index and variables\n         :param index: array index of the host settings\n         :param variables: hash of variable and the corresponding value\n+        :param servers: host settings for the endpoint", "originalCommit": "294d164ab033df0f7c60f38885c9b57c1fb711c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzMTQ2Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r438831462", "bodyText": "This method should be private in first place. I might create a private version of this method instead.", "author": "jirikuncar", "createdAt": "2020-06-11T14:32:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4NTY5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU5NzI3OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r438597279", "bodyText": "This method already has 8 inputs not counting self.\nAdding 4 more variables here increases out input count to 12 which is a lot.\nIt is clearer if related variables are grouped together in dicts.\nCan you restructure these 4 new additions into two dicts?\nHow about something like:\nserver_info=None\n# which is a dict like: {index:1, variables={}}\noperation_server_info=None:\n# which is a dict like {index_by_operation_id: {'get_pet': 0}, variables_by_operation_id: {'get_pet': blah}}\n\nCan you add descriptions of these new parameters to the docstring above?", "author": "spacether", "createdAt": "2020-06-11T07:34:31Z", "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -155,20 +155,30 @@ conf = {{{packageName}}}.Configuration(\n \n     _default = None\n \n-    def __init__(self, host=\"{{{basePath}}}\",\n+    def __init__(self, host=None,\n                  api_key=None, api_key_prefix=None,\n                  username=None, password=None,\n                  discard_unknown_keys=False,\n                  disabled_client_side_validations=\"\",\n {{#hasHttpSignatureMethods}}\n                  signing_info=None,\n {{/hasHttpSignatureMethods}}\n+                 server_index=None, server_variables=None,\n+                 server_operation_index=None, server_operation_variables=None,", "originalCommit": "294d164ab033df0f7c60f38885c9b57c1fb711c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyOTA2OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r438829069", "bodyText": "I am trying to keep the usage similar with other languages. I don't see this as an issue. I would argue that configuration should be a mapping itself.", "author": "jirikuncar", "createdAt": "2020-06-11T14:29:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU5NzI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyOTMwNg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r438829306", "bodyText": "I will add the docstrings.", "author": "jirikuncar", "createdAt": "2020-06-11T14:29:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU5NzI3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYwMjQ3NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r438602474", "bodyText": "Possible improvement:\nThis works and a more standard python way to do it is to use\nassert_called_with", "author": "spacether", "createdAt": "2020-06-11T07:44:44Z", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_api_validation.py", "diffHunk": "@@ -44,6 +46,27 @@ def test_configuration(self):\n             config.disabled_client_side_validations = 'foo'\n         config.disabled_client_side_validations = \"\"\n \n+    def test_servers(self):\n+        config = petstore_api.Configuration(server_index=1, server_variables={'version': 'v1'})\n+        api_client = petstore_api.ApiClient(config)\n+        api = pet_api.PetApi(api_client)\n+\n+        def request(expected_url, method, url, **kwargs):\n+            assert expected_url == url\n+            raise RuntimeError('pass')\n+\n+        api_client.request = functools.partial(request, 'http://path-server-test.petstore.local/v2/pet')\n+        try:\n+            api.add_pet({'name': 'pet', 'photo_urls': []})\n+        except RuntimeError as e:\n+            assert \"pass\" == str(e)", "originalCommit": "294d164ab033df0f7c60f38885c9b57c1fb711c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg0MzI3Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r439843277", "bodyText": "If we remove support for Python 2, then yes.", "author": "jirikuncar", "createdAt": "2020-06-14T15:54:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYwMjQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg0MzU4OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r439843589", "bodyText": "It's still declared in \n  \n    \n      openapi-generator/samples/openapi3/client/petstore/python-experimental/setup.py\n    \n    \n         Line 33\n      in\n      294d164\n    \n    \n    \n    \n\n        \n          \n           EXTRAS = {':python_version <= \"2.7\"': ['future']} \n        \n    \n  \n\n. I would be happy to change it in the future for Python 3.6+ only.", "author": "jirikuncar", "createdAt": "2020-06-14T15:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYwMjQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg5OTM2Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r440899362", "bodyText": "I think we can drop Python 2.x support in the upcoming 5.x release. (not saying you need to do it as part of this PR though)", "author": "wing328", "createdAt": "2020-06-16T14:34:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYwMjQ3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYwNDM5Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r438604396", "bodyText": "Please also add tests of server_operation_index and server_operation_variables.\nThat code is added in this PR and does not yet have any test coverage.", "author": "spacether", "createdAt": "2020-06-11T07:48:30Z", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_api_validation.py", "diffHunk": "@@ -44,6 +46,27 @@ def test_configuration(self):\n             config.disabled_client_side_validations = 'foo'\n         config.disabled_client_side_validations = \"\"\n \n+    def test_servers(self):\n+        config = petstore_api.Configuration(server_index=1, server_variables={'version': 'v1'})\n+        api_client = petstore_api.ApiClient(config)\n+        api = pet_api.PetApi(api_client)\n+\n+        def request(expected_url, method, url, **kwargs):\n+            assert expected_url == url\n+            raise RuntimeError('pass')\n+\n+        api_client.request = functools.partial(request, 'http://path-server-test.petstore.local/v2/pet')\n+        try:\n+            api.add_pet({'name': 'pet', 'photo_urls': []})\n+        except RuntimeError as e:\n+            assert \"pass\" == str(e)\n+\n+        api_client.request = functools.partial(request, 'https://localhost:8080/v1/pet/123456789')\n+        try:\n+            api.delete_pet(123456789)\n+        except RuntimeError as e:\n+            assert \"pass\" == str(e)", "originalCommit": "294d164ab033df0f7c60f38885c9b57c1fb711c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMwNDQ1Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r439304456", "bodyText": "I have created a separate package with a detailed testsuite.", "author": "jirikuncar", "createdAt": "2020-06-12T09:14:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYwNDM5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzMjUxNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r438832517", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if self.server_index is None:\n          \n          \n            \n                        return self._base_path", "author": "jirikuncar", "createdAt": "2020-06-11T14:34:19Z", "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -595,3 +609,17 @@ conf = {{{packageName}}}.Configuration(\n             url = url.replace(\"{\" + variable_name + \"}\", used_value)\n \n         return url\n+\n+    @property\n+    def host(self):\n+        \"\"\"Return generated host.\"\"\"\n+        if self.server_index is None:\n+            return self._base_path\n+", "originalCommit": "294d164ab033df0f7c60f38885c9b57c1fb711c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzMjk1NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r438832954", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            _host_index (int): specifies the index of the server\n          \n          \n            \n                            _host_index (int/None): specifies the index of the server", "author": "jirikuncar", "createdAt": "2020-06-11T14:34:59Z", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api.mustache", "diffHunk": "@@ -105,7 +105,7 @@ class {{classname}}(object):\n                     Default is True.\n                 _host_index (int): specifies the index of the server", "originalCommit": "294d164ab033df0f7c60f38885c9b57c1fb711c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f38fc72f8343345bcf751f245a7bac661c57dd2c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f38fc72f8343345bcf751f245a7bac661c57dd2c", "message": "Apply suggestions from code review", "committedDate": "2020-06-11T14:35:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0OTM4NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r438849384", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    :param servers: host settings for the endpoint\n          \n          \n            \n                    :param servers: an array of host settings or None", "author": "jirikuncar", "createdAt": "2020-06-11T14:58:14Z", "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -561,14 +571,18 @@ conf = {{{packageName}}}.Configuration(\n             {{/servers}}\n         ]\n \n-    def get_host_from_settings(self, index, variables=None):\n+    def get_host_from_settings(self, index, variables=None, servers=None):\n         \"\"\"Gets host URL based on the index and variables\n         :param index: array index of the host settings\n         :param variables: hash of variable and the corresponding value\n+        :param servers: host settings for the endpoint", "originalCommit": "f38fc72f8343345bcf751f245a7bac661c57dd2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0OTc0Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r438849747", "bodyText": "@spacether I am going to use the same documentation as it is used for return value of get_host_settings.", "author": "jirikuncar", "createdAt": "2020-06-11T14:58:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0OTM4NA=="}], "type": "inlineReview"}, {"oid": "8ec2cb7f7fb227e373936b816ba4ed67e92be624", "url": "https://github.com/OpenAPITools/openapi-generator/commit/8ec2cb7f7fb227e373936b816ba4ed67e92be624", "message": "Apply suggestions from code review", "committedDate": "2020-06-11T14:58:57Z", "type": "commit"}, {"oid": "655ecd04f4ebe067d22114ce93a6da814ba74a9c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/655ecd04f4ebe067d22114ce93a6da814ba74a9c", "message": "Merge remote-tracking branch 'upstream/master' into python-experimental/dynamic-servers", "committedDate": "2020-06-11T15:07:04Z", "type": "commit"}, {"oid": "6e973605c39bcbc06b73874b961f3e4f18e0fe20", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6e973605c39bcbc06b73874b961f3e4f18e0fe20", "message": "regenerated", "committedDate": "2020-06-11T15:34:41Z", "type": "commit"}, {"oid": "0a57b4cd84d4ecbb4c5477bc530e1a96dfb7f267", "url": "https://github.com/OpenAPITools/openapi-generator/commit/0a57b4cd84d4ecbb4c5477bc530e1a96dfb7f267", "message": "Add specific tests for dynamic servers", "committedDate": "2020-06-12T09:06:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMwNTc3OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6557#discussion_r439305778", "bodyText": "@jimschubert I have tried to create a minimal specification on which we can showcase the dynamic server configuration to avoid modifications of default \"Petstore\" example. This should follow the work for extensions from #6469.", "author": "jirikuncar", "createdAt": "2020-06-12T09:16:57Z", "path": "modules/openapi-generator/src/test/resources/3_0/features/dynamic-servers.yaml", "diffHunk": "@@ -0,0 +1,92 @@\n+openapi: 3.0.0\n+info:\n+  description: This specification shows how to use dynamic servers.", "originalCommit": "0a57b4cd84d4ecbb4c5477bc530e1a96dfb7f267", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5788068afe4c08202ce1b8625a7a82e516afe2f0", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5788068afe4c08202ce1b8625a7a82e516afe2f0", "message": "Merge remote-tracking branch 'upstream/master' into python-experimental/dynamic-servers", "committedDate": "2020-06-12T12:33:12Z", "type": "commit"}, {"oid": "1d190976bcbcecfee5de97afab55a8e996d48a06", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1d190976bcbcecfee5de97afab55a8e996d48a06", "message": "regenerated", "committedDate": "2020-06-12T12:37:44Z", "type": "commit"}, {"oid": "ff976a4273b7221ea6f52f1a57be8da89961be75", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ff976a4273b7221ea6f52f1a57be8da89961be75", "message": "add docstring", "committedDate": "2020-06-14T16:43:02Z", "type": "commit"}, {"oid": "032533d2a034ba164c0897bb6d28f30a5351cd81", "url": "https://github.com/OpenAPITools/openapi-generator/commit/032533d2a034ba164c0897bb6d28f30a5351cd81", "message": "Merge remote-tracking branch 'upstream/master' into python-experimental/dynamic-servers", "committedDate": "2020-06-14T16:43:07Z", "type": "commit"}, {"oid": "3706f4d89fc69f3a9d7969940e5d5dc0b8535dad", "url": "https://github.com/OpenAPITools/openapi-generator/commit/3706f4d89fc69f3a9d7969940e5d5dc0b8535dad", "message": "regenerated", "committedDate": "2020-06-15T08:27:18Z", "type": "commit"}, {"oid": "3a1d0cad86335a5bc58cec1cf56022a4d1e8d8c9", "url": "https://github.com/OpenAPITools/openapi-generator/commit/3a1d0cad86335a5bc58cec1cf56022a4d1e8d8c9", "message": "Merge remote-tracking branch 'upstream/master' into python-experimental/dynamic-servers", "committedDate": "2020-06-23T08:59:30Z", "type": "commit"}, {"oid": "66df64717c47d2e27ea2d2c6a57957c295496e58", "url": "https://github.com/OpenAPITools/openapi-generator/commit/66df64717c47d2e27ea2d2c6a57957c295496e58", "message": "Fix wrong merge resolution", "committedDate": "2020-06-23T10:16:50Z", "type": "commit"}]}