{"pr_number": 5362, "pr_title": "[Python] add discard_unknown_keys parameter", "pr_createdAt": "2020-02-18T16:01:38Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/5362", "timeline": [{"oid": "aa75da114deb1c1169f41050fd11c41154f51699", "url": "https://github.com/OpenAPITools/openapi-generator/commit/aa75da114deb1c1169f41050fd11c41154f51699", "message": "add discard_unknown_key parameter", "committedDate": "2020-02-18T16:00:21Z", "type": "commit"}, {"oid": "700d65ab5d1c5cc965c1a6d5df032560148cd5c3", "url": "https://github.com/OpenAPITools/openapi-generator/commit/700d65ab5d1c5cc965c1a6d5df032560148cd5c3", "message": "add discard_unknown_key parameter", "committedDate": "2020-02-18T16:03:30Z", "type": "commit"}, {"oid": "6526695246c1169a2a50796f8a5a427d1ce8e513", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6526695246c1169a2a50796f8a5a427d1ce8e513", "message": "add discard_unknown_key parameter", "committedDate": "2020-02-18T16:05:08Z", "type": "commit"}, {"oid": "a14de3a7a0050e0919621dbc534d0bcdd50f8d16", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a14de3a7a0050e0919621dbc534d0bcdd50f8d16", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-18T17:38:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzNjg0Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380836843", "bodyText": "Can you only invoke this if self._configuration is not None and self._configuration.discard_unknown_keys?", "author": "spacether", "createdAt": "2020-02-18T17:53:13Z", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/method_init_composed.mustache", "diffHunk": "@@ -17,6 +17,11 @@\n         self._path_to_item = _path_to_item\n         self._configuration = _configuration\n \n+        if self._configuration.discard_unknown_keys:", "originalCommit": "a14de3a7a0050e0919621dbc534d0bcdd50f8d16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0Mjk4NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380842985", "bodyText": "done.", "author": "sebastien-rosset", "createdAt": "2020-02-18T18:05:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzNjg0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzNzgxOQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380837819", "bodyText": "Can you move this new code and the\n        self._data_store = {}\n        ...\n        self._configuration = _configuration\n\ninto method_init_shared?\nIt is always used together and will be defined only once if we put it there.", "author": "spacether", "createdAt": "2020-02-18T17:55:02Z", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/method_init_composed.mustache", "diffHunk": "@@ -17,6 +17,11 @@\n         self._path_to_item = _path_to_item\n         self._configuration = _configuration\n \n+        if self._configuration.discard_unknown_keys:\n+            for property_name in list(kwargs.keys()):\n+                if property_name not in self.attribute_map:\n+                    del kwargs[property_name]", "originalCommit": "a14de3a7a0050e0919621dbc534d0bcdd50f8d16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MzE1NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380843154", "bodyText": "Done.", "author": "sebastien-rosset", "createdAt": "2020-02-18T18:05:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzNzgxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MDE0Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380840147", "bodyText": "Can you explain why we need this?\nI think that unused_args will be length 0 if we are dropping the extra kwargs before we invoke this method.", "author": "spacether", "createdAt": "2020-02-18T17:59:23Z", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -1124,9 +1124,10 @@ def validate_get_composed_info(constant_args, model_args, self):\n                 \"class %s. Not all inputs were used. The unused input data \"\n                 \"is %s\" % (self.__class__.__name__, unused_args)\n             )\n-        for var_name, var_value in six.iteritems(unused_args):\n-            for instance in additional_properties_model_instances:\n-                setattr(instance, var_name, var_value)\n+        else:\n+            for var_name, var_value in six.iteritems(unused_args):\n+                for instance in additional_properties_model_instances:\n+                    setattr(instance, var_name, var_value)", "originalCommit": "a14de3a7a0050e0919621dbc534d0bcdd50f8d16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NTQ0OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380845449", "bodyText": "No it won't be. This is the case when the unused_args are injected into the additionalproperties map.", "author": "sebastien-rosset", "createdAt": "2020-02-18T18:09:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MDE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MTM3NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380851374", "bodyText": "Right, but didn't we delete those args with:\nself._configuration.discard_unknown_keys = True?\nSo they no longer exist here.\nWhat should we do if:\n\nWhat if one of our composed models has additional properties in it + discard_unknown_keys=True?\nWhat if self model has additional properties defined in self and discard_unknown_keys=True?", "author": "spacether", "createdAt": "2020-02-18T18:21:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MDE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1Mjg2NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380852865", "bodyText": "No, I removed that code. If additional properties exists, it will populate the undeclared properties into the additionalproperties Map. Then at that point there will be nothing to discard.", "author": "sebastien-rosset", "createdAt": "2020-02-18T18:24:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MDE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1NzM4Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380857386", "bodyText": "So when discard_unknown_keys=True it still allows additionalproperties to process unknown keys?", "author": "spacether", "createdAt": "2020-02-18T18:33:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MDE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1ODYzOA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380858638", "bodyText": "Yes, I think that should be the behavior.", "author": "sebastien-rosset", "createdAt": "2020-02-18T18:35:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MDE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2MDA0Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380860046", "bodyText": "In line41 of modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/method_init_composed.mustache we are already assigning additional properties.\nHow about deleting this else clause because we already handle assign these properties there?", "author": "spacether", "createdAt": "2020-02-18T18:38:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MDE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2MDc2NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380860764", "bodyText": "I've added documentation in the configuration file to clarify. There is a difference between \"undeclared\" versus unknown.", "author": "sebastien-rosset", "createdAt": "2020-02-18T18:39:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MDE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg3NjMxNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380876317", "bodyText": "Right but we also assign these properties in line42.\nSo right now this code is assigning properties in two places.\nCan we only assign these properties in one place?\nCan that be on line42 in __init__?", "author": "spacether", "createdAt": "2020-02-18T19:09:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MDE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg3ODA5NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380878095", "bodyText": "In line41 of modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/method_init_composed.mustache we are already assigning additional properties.\nHow about deleting this else clause because we already handle assign these properties there?\n\nSorry I am confused, at line 41 in method_init_composed.mustache there is no else clause", "author": "sebastien-rosset", "createdAt": "2020-02-18T19:12:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MDE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MTA5OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380881099", "bodyText": "I think I understand now. I've submitted another change.", "author": "sebastien-rosset", "createdAt": "2020-02-18T19:18:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MDE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MTc0Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380881743", "bodyText": "At that line we are looping over all kwargs.\nSome of those are the unused args.\nFor those unused args we assign the key value properties to self.\nSelf puts those in its own data store, and the data stores of all composed models that contain that property.", "author": "spacether", "createdAt": "2020-02-18T19:19:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MDE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg5MTEwMg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380891102", "bodyText": "There is some strange delay in github message delivery. I think I have addressed your point.", "author": "sebastien-rosset", "createdAt": "2020-02-18T19:37:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MDE0Nw=="}], "type": "inlineReview"}, {"oid": "a57b61d91531c901ffa04fcdd2f18134bd0cdeed", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a57b61d91531c901ffa04fcdd2f18134bd0cdeed", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-18T18:04:50Z", "type": "commit"}, {"oid": "5337dfc6e9933162b7fa7f2ac03effe150811aff", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5337dfc6e9933162b7fa7f2ac03effe150811aff", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-18T18:07:04Z", "type": "commit"}, {"oid": "8a2c22db4d86506367f78d5a363f63b98a6ec204", "url": "https://github.com/OpenAPITools/openapi-generator/commit/8a2c22db4d86506367f78d5a363f63b98a6ec204", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-18T18:09:07Z", "type": "commit"}, {"oid": "4e2552d4ffab271cfe7cfbc3a4b70e4f88cce6fa", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4e2552d4ffab271cfe7cfbc3a4b70e4f88cce6fa", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-18T18:10:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MzQwNA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380853404", "bodyText": "Can you keep the exception raising in validate_get_composed_info?\nThat makes it so we only need to look there to understand what is going wrong vs 2 or more locations.\nAlso, the model class setattr  currently automatically throws an exception when attempting to assign to an unknown variable so we should be okay here.", "author": "spacether", "createdAt": "2020-02-18T18:25:24Z", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/method_init_composed.mustache", "diffHunk": "@@ -34,9 +28,23 @@\n         self._composed_instances = composed_info[0]\n         self._var_name_to_model_instances = composed_info[1]\n         self._additional_properties_model_instances = composed_info[2]\n+        unused_args = composed_info[3]\n \n {{#requiredVars}}\n         self.{{name}} = {{name}}\n {{/requiredVars}}\n         for var_name, var_value in six.iteritems(kwargs):\n-            setattr(self, var_name, var_value)\n\\ No newline at end of file\n+            if var_name in unused_args:\n+                if self._configuration is not None and self._configuration.discard_unknown_keys:\n+                    # discard variable.\n+                    pass\n+                else:\n+                    # This should not happen, any validation problem should have been raised in\n+                    # validate_get_composed_info \n+                    raise ApiValueError(\n+                        \"Invalid input arguments input when making an instance of \"\n+                        \"class %s. Not all inputs were used. The unused input data \"\n+                        \"is %s\" % (self.__class__.__name__, unused_args)\n+                    )", "originalCommit": "4e2552d4ffab271cfe7cfbc3a4b70e4f88cce6fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1NTM1Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380855353", "bodyText": "Can you keep the exception raising in validate_get_composed_info?\n\nI didn't change that. It's still raising the exception. One thing I could do here is do nothing, because validate_get_composed_info has already raised the exception.\n\nThat makes it so we only need to look there to understand what is going wrong vs 2 or more locations.\nAlso, the model class setattr currently automatically throws an exception when attempting to assign to an unknown variable so we should be okay here.", "author": "sebastien-rosset", "createdAt": "2020-02-18T18:29:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MzQwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1NjM0Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380856342", "bodyText": "Can you also add code to cover the non-composed schemas use case?", "author": "spacether", "createdAt": "2020-02-18T18:31:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MzQwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1NzE4Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380857187", "bodyText": "I just refactored a bit.", "author": "sebastien-rosset", "createdAt": "2020-02-18T18:32:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MzQwNA=="}], "type": "inlineReview"}, {"oid": "e23ba45124dcd8c7954dd0f3b05ee4dd9169f976", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e23ba45124dcd8c7954dd0f3b05ee4dd9169f976", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-18T18:30:52Z", "type": "commit"}, {"oid": "07f89b4a40f2a8ba03afd29df5f2e528144d5dbc", "url": "https://github.com/OpenAPITools/openapi-generator/commit/07f89b4a40f2a8ba03afd29df5f2e528144d5dbc", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-18T18:34:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1OTE2Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380859167", "bodyText": "How about adding and not self._additional_properties_model_instances?\nThat way when we have _additional_properties_model_instances we will assign those additional props.", "author": "spacether", "createdAt": "2020-02-18T18:36:38Z", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/method_init_composed.mustache", "diffHunk": "@@ -34,9 +28,14 @@\n         self._composed_instances = composed_info[0]\n         self._var_name_to_model_instances = composed_info[1]\n         self._additional_properties_model_instances = composed_info[2]\n+        unused_args = composed_info[3]\n \n {{#requiredVars}}\n         self.{{name}} = {{name}}\n {{/requiredVars}}\n         for var_name, var_value in six.iteritems(kwargs):\n+            if var_name in unused_args and self._configuration is not None and \\\n+                            self._configuration.discard_unknown_keys:", "originalCommit": "e23ba45124dcd8c7954dd0f3b05ee4dd9169f976", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2MzgzOQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380863839", "bodyText": "done", "author": "sebastien-rosset", "createdAt": "2020-02-18T18:45:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1OTE2Nw=="}], "type": "inlineReview"}, {"oid": "398ad1861dcf99ef334053adc74552a7973b3daf", "url": "https://github.com/OpenAPITools/openapi-generator/commit/398ad1861dcf99ef334053adc74552a7973b3daf", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-18T18:39:09Z", "type": "commit"}, {"oid": "449c9b736231117402208312a17ce5bb2dffb7ce", "url": "https://github.com/OpenAPITools/openapi-generator/commit/449c9b736231117402208312a17ce5bb2dffb7ce", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-18T18:45:37Z", "type": "commit"}, {"oid": "ac1bec00c3c3285e35be5a29cbf6891e088af435", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ac1bec00c3c3285e35be5a29cbf6891e088af435", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-18T18:51:43Z", "type": "commit"}, {"oid": "072f1ecb837e3e2767ab34c44e85ff8d228fd8c7", "url": "https://github.com/OpenAPITools/openapi-generator/commit/072f1ecb837e3e2767ab34c44e85ff8d228fd8c7", "message": "Merge remote-tracking branch 'origin' into discard_unknown_keys", "committedDate": "2020-02-18T19:02:05Z", "type": "commit"}, {"oid": "ae41d250a2556004ad5f424e1a1af4ae5ac98773", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ae41d250a2556004ad5f424e1a1af4ae5ac98773", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-18T19:17:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg5NDM4Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380894386", "bodyText": "How about adding this if statement in the below for loop?\n            if var_name not in self.attribute_map and self._configuration is not None and \\\n                            self._configuration.discard_unknown_keys and \\\n                            self.additional_properties_type is None:\n                # discard variable.\n                pass\n\nThat will let us skip unknown keys for these non composed schema models.", "author": "spacether", "createdAt": "2020-02-18T19:43:49Z", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/method_init_normal.mustache", "diffHunk": "@@ -8,12 +8,6 @@\n \n {{> python-experimental/model_templates/method_init_shared }}\n \n-        self._data_store = {}\n-        self._check_type = _check_type\n-        self._from_server = _from_server\n-        self._path_to_item = _path_to_item\n-        self._configuration = _configuration\n-\n {{#requiredVars}}\n         self.{{name}} = {{name}}\n {{/requiredVars}}", "originalCommit": "ae41d250a2556004ad5f424e1a1af4ae5ac98773", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMjUxNA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380902514", "bodyText": "done\n\nHow about adding this if statement in the below for loop?\n            if var_name not in self.attribute_map and self._configuration is not None and \\\n                            self._configuration.discard_unknown_keys and \\\n                            self.additional_properties_type is None:\n                # discard variable.\n                pass\n\nThat will let us skip unknown keys for these non composed schema models.\n\ndone", "author": "sebastien-rosset", "createdAt": "2020-02-18T19:59:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg5NDM4Ng=="}], "type": "inlineReview"}, {"oid": "93514aa4d78a30997d2e2ba3db53dc15f1557c19", "url": "https://github.com/OpenAPITools/openapi-generator/commit/93514aa4d78a30997d2e2ba3db53dc15f1557c19", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-18T19:58:08Z", "type": "commit"}, {"oid": "7edc1eb9e1c4eaeb6a5f4525367f76703a131fd7", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7edc1eb9e1c4eaeb6a5f4525367f76703a131fd7", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-18T20:48:51Z", "type": "commit"}, {"oid": "b59958343c904efae1d770420e5d8f8c62c02032", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b59958343c904efae1d770420e5d8f8c62c02032", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-18T21:09:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1Mjg4Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r380952887", "bodyText": "Could you move these into the python-experimental samples spec?\nThat way we can test instantiating these classes in python.", "author": "spacether", "createdAt": "2020-02-18T21:43:49Z", "path": "modules/openapi-generator/src/test/resources/3_0/all_of_with_additional_properties.yaml", "diffHunk": "@@ -0,0 +1,43 @@\n+openapi: 3.0.2\n+info:\n+  version: 1.0.0\n+  title: Example\n+  license:\n+    name: MIT\n+servers:\n+  - url: http://api.example.xyz/v1\n+paths:\n+  /person/display/{personId}:\n+    get:\n+      parameters:\n+        - name: personId\n+          in: path\n+          required: true\n+          description: The id of the person to retrieve\n+          schema:\n+            type: string\n+      operationId: list\n+      responses:\n+        '200':\n+          description: OK\n+          content:\n+            application/json:\n+              schema:\n+                $ref: \"#/components/schemas/Person\"\n+components:\n+  schemas:\n+    Person:\n+      description: A representation of a person\n+      type: object\n+      properties:\n+        name:\n+          type: string\n+    Adult:\n+      description: A representation of an adult\n+      additionalProperties: {}\n+      allOf:\n+      - $ref: '#/components/schemas/Person'\n+      - type: object\n+        properties:\n+          address:\n+            type: string", "originalCommit": "b59958343c904efae1d770420e5d8f8c62c02032", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2NjY1Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r381066653", "bodyText": "I removed this code.", "author": "sebastien-rosset", "createdAt": "2020-02-19T04:04:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1Mjg4Nw=="}], "type": "inlineReview"}, {"oid": "5f70404376104a8b008f474b2398a73c315af163", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5f70404376104a8b008f474b2398a73c315af163", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-19T04:00:20Z", "type": "commit"}, {"oid": "216ff5b95eadda65a6e769624bad98452a0c3780", "url": "https://github.com/OpenAPITools/openapi-generator/commit/216ff5b95eadda65a6e769624bad98452a0c3780", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-19T04:01:53Z", "type": "commit"}, {"oid": "3d9055e9de9520a219c4ce65ca517252ca006f4c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/3d9055e9de9520a219c4ce65ca517252ca006f4c", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-19T04:02:30Z", "type": "commit"}, {"oid": "243e957cbe71407082276191c5cac6378cdcf127", "url": "https://github.com/OpenAPITools/openapi-generator/commit/243e957cbe71407082276191c5cac6378cdcf127", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-19T04:09:36Z", "type": "commit"}, {"oid": "2706e7b51278fef7a1103c3dec6dc46f3d1574b5", "url": "https://github.com/OpenAPITools/openapi-generator/commit/2706e7b51278fef7a1103c3dec6dc46f3d1574b5", "message": "Merge remote-tracking branch 'origin' into discard_unknown_keys", "committedDate": "2020-02-19T04:10:17Z", "type": "commit"}, {"oid": "6e8cdcb6e03577d1ece527856aad4d982cadc661", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6e8cdcb6e03577d1ece527856aad4d982cadc661", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-19T05:00:59Z", "type": "commit"}, {"oid": "f9fbe939742bf3334ac920b5ca4bc4854d48ebb7", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f9fbe939742bf3334ac920b5ca4bc4854d48ebb7", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-19T05:27:13Z", "type": "commit"}, {"oid": "28868406a40dda6559dc650747f47408ad424a07", "url": "https://github.com/OpenAPITools/openapi-generator/commit/28868406a40dda6559dc650747f47408ad424a07", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-19T05:46:33Z", "type": "commit"}, {"oid": "10709b96ff9171eae014bb45b5f57c8848f58adc", "url": "https://github.com/OpenAPITools/openapi-generator/commit/10709b96ff9171eae014bb45b5f57c8848f58adc", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-19T06:03:07Z", "type": "commit"}, {"oid": "3dbf8e620217076d14189573f98b6437c4dd6835", "url": "https://github.com/OpenAPITools/openapi-generator/commit/3dbf8e620217076d14189573f98b6437c4dd6835", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-19T06:41:49Z", "type": "commit"}, {"oid": "5120d494730a009bda765700668fc548199f9b35", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5120d494730a009bda765700668fc548199f9b35", "message": "discard unknown keys in composed schema if configuration.discard_unknown_keys is set", "committedDate": "2020-02-19T07:17:22Z", "type": "commit"}, {"oid": "f2a05272742f21553a5ce034814692db6da05c11", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f2a05272742f21553a5ce034814692db6da05c11", "message": "run sample scripts for python", "committedDate": "2020-02-19T14:01:35Z", "type": "commit"}, {"oid": "0106626909bc532bfdebfec71e990c63e25de646", "url": "https://github.com/OpenAPITools/openapi-generator/commit/0106626909bc532bfdebfec71e990c63e25de646", "message": "code reformatting", "committedDate": "2020-02-19T14:10:04Z", "type": "commit"}, {"oid": "d304d8cdc868ce05b4facb94fec148d9545eeb4b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d304d8cdc868ce05b4facb94fec148d9545eeb4b", "message": "execute script in bin directory", "committedDate": "2020-02-19T16:47:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0MzYyNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r381643627", "bodyText": "Can you add a test to check the value of deserialized['dog'].to_dict?\nThat would prove that the unknown properties have been discarded.", "author": "spacether", "createdAt": "2020-02-20T01:23:20Z", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_discard_unknown_properties.py", "diffHunk": "@@ -0,0 +1,129 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+from collections import namedtuple\n+import json\n+import os\n+import re\n+import shutil\n+import unittest\n+from six.moves.urllib.parse import urlencode, urlparse\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+from petstore_api.model_utils import (\n+    file_type,\n+    int,\n+    model_to_dict,\n+    str,\n+)\n+\n+MockResponse = namedtuple('MockResponse', 'data')\n+\n+class DiscardUnknownPropertiesTests(unittest.TestCase):\n+\n+    def test_deserialize_dog_do_not_discard_unknown_properties(self):\n+        \"\"\" deserialize str, Dog) with unknown properties, strict validation is enabled \"\"\"\n+        config = Configuration(discard_unknown_keys=False)\n+        api_client = petstore_api.ApiClient(config)\n+        data = {\n+            'dog': {\n+                \"class_name\": \"Dog\",\n+                \"color\": \"black\",\n+                \"breed\": \"husky\",\n+                \"unknown_property\": \"a-value\"\n+            }\n+        }\n+        response = MockResponse(data=json.dumps(data))\n+\n+        # Deserializing with strict validation raises an exception because the 'unknown_property'\n+        # is undeclared.\n+        with self.assertRaises(Exception) as cm:\n+            deserialized = api_client.deserialize(response,\n+                ({str: (petstore_api.Dog,)},), True)\n+        self.assertTrue(re.match('.*Not all inputs were used.*unknown_property.*', str(cm.exception)),\n+            'Exception message: {0}'.format(str(cm.exception)))\n+\n+    def test_deserialize_dog_discard_unknown_properties(self):\n+        \"\"\" deserialize str, Dog) with unknown properties, discard unknown properties \"\"\"\n+        config = Configuration(discard_unknown_keys=True)\n+        api_client = petstore_api.ApiClient(config)\n+        data = {\n+            'dog': {\n+                \"class_name\": \"Dog\",\n+                \"color\": \"black\",\n+                \"breed\": \"husky\",\n+                \"unknown_property\": \"a-value\",\n+                \"more-unknown\": [\n+                    \"a\"\n+                ]\n+            }\n+        }\n+        # The 'unknown_property' is undeclared, which would normally raise an exception, but\n+        # when discard_unknown_keys is set to True, the unknown properties are discarded.\n+        response = MockResponse(data=json.dumps(data))\n+        deserialized = api_client.deserialize(response,\n+            ({str: (petstore_api.Dog,)},), True)\n+        self.assertTrue(isinstance(deserialized, dict))\n+        self.assertTrue(isinstance(deserialized['dog'], petstore_api.Dog))", "originalCommit": "d304d8cdc868ce05b4facb94fec148d9545eeb4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4MDkwNA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r382680904", "bodyText": "done", "author": "sebastien-rosset", "createdAt": "2020-02-21T16:31:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0MzYyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0NDczMw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r381644733", "bodyText": "Can you use our specific exception here rather than the general Exception? Is it petstore_api.ApiValueError?", "author": "spacether", "createdAt": "2020-02-20T01:25:08Z", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_discard_unknown_properties.py", "diffHunk": "@@ -0,0 +1,129 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+from collections import namedtuple\n+import json\n+import os\n+import re\n+import shutil\n+import unittest\n+from six.moves.urllib.parse import urlencode, urlparse\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+from petstore_api.model_utils import (\n+    file_type,\n+    int,\n+    model_to_dict,\n+    str,\n+)\n+\n+MockResponse = namedtuple('MockResponse', 'data')\n+\n+class DiscardUnknownPropertiesTests(unittest.TestCase):\n+\n+    def test_deserialize_dog_do_not_discard_unknown_properties(self):\n+        \"\"\" deserialize str, Dog) with unknown properties, strict validation is enabled \"\"\"\n+        config = Configuration(discard_unknown_keys=False)\n+        api_client = petstore_api.ApiClient(config)\n+        data = {\n+            'dog': {\n+                \"class_name\": \"Dog\",\n+                \"color\": \"black\",\n+                \"breed\": \"husky\",\n+                \"unknown_property\": \"a-value\"\n+            }\n+        }\n+        response = MockResponse(data=json.dumps(data))\n+\n+        # Deserializing with strict validation raises an exception because the 'unknown_property'\n+        # is undeclared.\n+        with self.assertRaises(Exception) as cm:", "originalCommit": "d304d8cdc868ce05b4facb94fec148d9545eeb4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4MDMyNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r382680327", "bodyText": "done", "author": "sebastien-rosset", "createdAt": "2020-02-21T16:30:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0NDczMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0NTUzNQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r381645535", "bodyText": "If you want, you can change this data to just the dog dict.\nThat would look like:\n            deserialized = api_client.deserialize(response,\n                (petstore_api.Dog,), True)", "author": "spacether", "createdAt": "2020-02-20T01:26:27Z", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_discard_unknown_properties.py", "diffHunk": "@@ -0,0 +1,129 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+from collections import namedtuple\n+import json\n+import os\n+import re\n+import shutil\n+import unittest\n+from six.moves.urllib.parse import urlencode, urlparse\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+from petstore_api.model_utils import (\n+    file_type,\n+    int,\n+    model_to_dict,\n+    str,\n+)\n+\n+MockResponse = namedtuple('MockResponse', 'data')\n+\n+class DiscardUnknownPropertiesTests(unittest.TestCase):\n+\n+    def test_deserialize_dog_do_not_discard_unknown_properties(self):\n+        \"\"\" deserialize str, Dog) with unknown properties, strict validation is enabled \"\"\"\n+        config = Configuration(discard_unknown_keys=False)\n+        api_client = petstore_api.ApiClient(config)\n+        data = {\n+            'dog': {", "originalCommit": "d304d8cdc868ce05b4facb94fec148d9545eeb4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4MDQzMA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r382680430", "bodyText": "done", "author": "sebastien-rosset", "createdAt": "2020-02-21T16:31:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0NTUzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0NTcxMw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r381645713", "bodyText": "If you want, you can change this data to just the dog dict.\nThat would look like:\n            deserialized = api_client.deserialize(response,\n                (petstore_api.Dog,), True)", "author": "spacether", "createdAt": "2020-02-20T01:26:47Z", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_discard_unknown_properties.py", "diffHunk": "@@ -0,0 +1,129 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+from collections import namedtuple\n+import json\n+import os\n+import re\n+import shutil\n+import unittest\n+from six.moves.urllib.parse import urlencode, urlparse\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+from petstore_api.model_utils import (\n+    file_type,\n+    int,\n+    model_to_dict,\n+    str,\n+)\n+\n+MockResponse = namedtuple('MockResponse', 'data')\n+\n+class DiscardUnknownPropertiesTests(unittest.TestCase):\n+\n+    def test_deserialize_dog_do_not_discard_unknown_properties(self):\n+        \"\"\" deserialize str, Dog) with unknown properties, strict validation is enabled \"\"\"\n+        config = Configuration(discard_unknown_keys=False)\n+        api_client = petstore_api.ApiClient(config)\n+        data = {\n+            'dog': {\n+                \"class_name\": \"Dog\",\n+                \"color\": \"black\",\n+                \"breed\": \"husky\",\n+                \"unknown_property\": \"a-value\"\n+            }\n+        }\n+        response = MockResponse(data=json.dumps(data))\n+\n+        # Deserializing with strict validation raises an exception because the 'unknown_property'\n+        # is undeclared.\n+        with self.assertRaises(Exception) as cm:\n+            deserialized = api_client.deserialize(response,\n+                ({str: (petstore_api.Dog,)},), True)\n+        self.assertTrue(re.match('.*Not all inputs were used.*unknown_property.*', str(cm.exception)),\n+            'Exception message: {0}'.format(str(cm.exception)))\n+\n+    def test_deserialize_dog_discard_unknown_properties(self):\n+        \"\"\" deserialize str, Dog) with unknown properties, discard unknown properties \"\"\"\n+        config = Configuration(discard_unknown_keys=True)\n+        api_client = petstore_api.ApiClient(config)\n+        data = {\n+            'dog': {", "originalCommit": "d304d8cdc868ce05b4facb94fec148d9545eeb4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4MDczMg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r382680732", "bodyText": "done", "author": "sebastien-rosset", "createdAt": "2020-02-21T16:31:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0NTcxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0NjMxNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r381646317", "bodyText": "Same comment as above, you can strip this down to just the cat dict", "author": "spacether", "createdAt": "2020-02-20T01:27:44Z", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_discard_unknown_properties.py", "diffHunk": "@@ -0,0 +1,129 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+from collections import namedtuple\n+import json\n+import os\n+import re\n+import shutil\n+import unittest\n+from six.moves.urllib.parse import urlencode, urlparse\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+from petstore_api.model_utils import (\n+    file_type,\n+    int,\n+    model_to_dict,\n+    str,\n+)\n+\n+MockResponse = namedtuple('MockResponse', 'data')\n+\n+class DiscardUnknownPropertiesTests(unittest.TestCase):\n+\n+    def test_deserialize_dog_do_not_discard_unknown_properties(self):\n+        \"\"\" deserialize str, Dog) with unknown properties, strict validation is enabled \"\"\"\n+        config = Configuration(discard_unknown_keys=False)\n+        api_client = petstore_api.ApiClient(config)\n+        data = {\n+            'dog': {\n+                \"class_name\": \"Dog\",\n+                \"color\": \"black\",\n+                \"breed\": \"husky\",\n+                \"unknown_property\": \"a-value\"\n+            }\n+        }\n+        response = MockResponse(data=json.dumps(data))\n+\n+        # Deserializing with strict validation raises an exception because the 'unknown_property'\n+        # is undeclared.\n+        with self.assertRaises(Exception) as cm:\n+            deserialized = api_client.deserialize(response,\n+                ({str: (petstore_api.Dog,)},), True)\n+        self.assertTrue(re.match('.*Not all inputs were used.*unknown_property.*', str(cm.exception)),\n+            'Exception message: {0}'.format(str(cm.exception)))\n+\n+    def test_deserialize_dog_discard_unknown_properties(self):\n+        \"\"\" deserialize str, Dog) with unknown properties, discard unknown properties \"\"\"\n+        config = Configuration(discard_unknown_keys=True)\n+        api_client = petstore_api.ApiClient(config)\n+        data = {\n+            'dog': {\n+                \"class_name\": \"Dog\",\n+                \"color\": \"black\",\n+                \"breed\": \"husky\",\n+                \"unknown_property\": \"a-value\",\n+                \"more-unknown\": [\n+                    \"a\"\n+                ]\n+            }\n+        }\n+        # The 'unknown_property' is undeclared, which would normally raise an exception, but\n+        # when discard_unknown_keys is set to True, the unknown properties are discarded.\n+        response = MockResponse(data=json.dumps(data))\n+        deserialized = api_client.deserialize(response,\n+            ({str: (petstore_api.Dog,)},), True)\n+        self.assertTrue(isinstance(deserialized, dict))\n+        self.assertTrue(isinstance(deserialized['dog'], petstore_api.Dog))\n+\n+    def test_deserialize_cat_do_not_discard_unknown_properties(self):\n+        \"\"\" deserialize str, Cat) with unknown properties, strict validation is enabled \"\"\"\n+        config = Configuration(discard_unknown_keys=False)\n+        api_client = petstore_api.ApiClient(config)\n+        data = {\n+            'cat': {", "originalCommit": "d304d8cdc868ce05b4facb94fec148d9545eeb4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4MDUwMg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r382680502", "bodyText": "done", "author": "sebastien-rosset", "createdAt": "2020-02-21T16:31:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0NjMxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0NjM4NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r381646385", "bodyText": "Same comment as above, you can strip this down to just the cat dict", "author": "spacether", "createdAt": "2020-02-20T01:27:50Z", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_discard_unknown_properties.py", "diffHunk": "@@ -0,0 +1,129 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+from collections import namedtuple\n+import json\n+import os\n+import re\n+import shutil\n+import unittest\n+from six.moves.urllib.parse import urlencode, urlparse\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+from petstore_api.model_utils import (\n+    file_type,\n+    int,\n+    model_to_dict,\n+    str,\n+)\n+\n+MockResponse = namedtuple('MockResponse', 'data')\n+\n+class DiscardUnknownPropertiesTests(unittest.TestCase):\n+\n+    def test_deserialize_dog_do_not_discard_unknown_properties(self):\n+        \"\"\" deserialize str, Dog) with unknown properties, strict validation is enabled \"\"\"\n+        config = Configuration(discard_unknown_keys=False)\n+        api_client = petstore_api.ApiClient(config)\n+        data = {\n+            'dog': {\n+                \"class_name\": \"Dog\",\n+                \"color\": \"black\",\n+                \"breed\": \"husky\",\n+                \"unknown_property\": \"a-value\"\n+            }\n+        }\n+        response = MockResponse(data=json.dumps(data))\n+\n+        # Deserializing with strict validation raises an exception because the 'unknown_property'\n+        # is undeclared.\n+        with self.assertRaises(Exception) as cm:\n+            deserialized = api_client.deserialize(response,\n+                ({str: (petstore_api.Dog,)},), True)\n+        self.assertTrue(re.match('.*Not all inputs were used.*unknown_property.*', str(cm.exception)),\n+            'Exception message: {0}'.format(str(cm.exception)))\n+\n+    def test_deserialize_dog_discard_unknown_properties(self):\n+        \"\"\" deserialize str, Dog) with unknown properties, discard unknown properties \"\"\"\n+        config = Configuration(discard_unknown_keys=True)\n+        api_client = petstore_api.ApiClient(config)\n+        data = {\n+            'dog': {\n+                \"class_name\": \"Dog\",\n+                \"color\": \"black\",\n+                \"breed\": \"husky\",\n+                \"unknown_property\": \"a-value\",\n+                \"more-unknown\": [\n+                    \"a\"\n+                ]\n+            }\n+        }\n+        # The 'unknown_property' is undeclared, which would normally raise an exception, but\n+        # when discard_unknown_keys is set to True, the unknown properties are discarded.\n+        response = MockResponse(data=json.dumps(data))\n+        deserialized = api_client.deserialize(response,\n+            ({str: (petstore_api.Dog,)},), True)\n+        self.assertTrue(isinstance(deserialized, dict))\n+        self.assertTrue(isinstance(deserialized['dog'], petstore_api.Dog))\n+\n+    def test_deserialize_cat_do_not_discard_unknown_properties(self):\n+        \"\"\" deserialize str, Cat) with unknown properties, strict validation is enabled \"\"\"\n+        config = Configuration(discard_unknown_keys=False)\n+        api_client = petstore_api.ApiClient(config)\n+        data = {\n+            'cat': {\n+                \"class_name\": \"Cat\",\n+                \"color\": \"black\",\n+                \"declawed\": True,\n+                \"dynamic-property\": 12345,\n+            }\n+        }\n+        response = MockResponse(data=json.dumps(data))\n+\n+        # Deserializing with strict validation does not raise an exception because the even though\n+        # the 'dynamic-property' is undeclared, the 'Cat' schema defines the additionalProperties\n+        # attribute.\n+        deserialized = api_client.deserialize(response,\n+            ({str: (petstore_api.Cat,)},), True)\n+        self.assertTrue(isinstance(deserialized, dict))\n+        self.assertTrue(isinstance(deserialized['cat'], petstore_api.Cat))\n+        self.assertEqual(deserialized['cat']['color'], 'black')\n+\n+    def test_deserialize_cat_discard_unknown_properties(self):\n+        \"\"\" deserialize str, Cat) with unknown properties, discard unknown properties \"\"\"\n+        config = Configuration(discard_unknown_keys=True)\n+        api_client = petstore_api.ApiClient(config)\n+        data = {\n+            'cat': {", "originalCommit": "d304d8cdc868ce05b4facb94fec148d9545eeb4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4MDgwOQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r382680809", "bodyText": "done", "author": "sebastien-rosset", "createdAt": "2020-02-21T16:31:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0NjM4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0Njc3Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r381646772", "bodyText": "Can you add a test to check the value of deserialized['cat'].to_dict?\nThat would prove that the unknown properties have been discarded.", "author": "spacether", "createdAt": "2020-02-20T01:28:24Z", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_discard_unknown_properties.py", "diffHunk": "@@ -0,0 +1,129 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+from collections import namedtuple\n+import json\n+import os\n+import re\n+import shutil\n+import unittest\n+from six.moves.urllib.parse import urlencode, urlparse\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+from petstore_api.model_utils import (\n+    file_type,\n+    int,\n+    model_to_dict,\n+    str,\n+)\n+\n+MockResponse = namedtuple('MockResponse', 'data')\n+\n+class DiscardUnknownPropertiesTests(unittest.TestCase):\n+\n+    def test_deserialize_dog_do_not_discard_unknown_properties(self):\n+        \"\"\" deserialize str, Dog) with unknown properties, strict validation is enabled \"\"\"\n+        config = Configuration(discard_unknown_keys=False)\n+        api_client = petstore_api.ApiClient(config)\n+        data = {\n+            'dog': {\n+                \"class_name\": \"Dog\",\n+                \"color\": \"black\",\n+                \"breed\": \"husky\",\n+                \"unknown_property\": \"a-value\"\n+            }\n+        }\n+        response = MockResponse(data=json.dumps(data))\n+\n+        # Deserializing with strict validation raises an exception because the 'unknown_property'\n+        # is undeclared.\n+        with self.assertRaises(Exception) as cm:\n+            deserialized = api_client.deserialize(response,\n+                ({str: (petstore_api.Dog,)},), True)\n+        self.assertTrue(re.match('.*Not all inputs were used.*unknown_property.*', str(cm.exception)),\n+            'Exception message: {0}'.format(str(cm.exception)))\n+\n+    def test_deserialize_dog_discard_unknown_properties(self):\n+        \"\"\" deserialize str, Dog) with unknown properties, discard unknown properties \"\"\"\n+        config = Configuration(discard_unknown_keys=True)\n+        api_client = petstore_api.ApiClient(config)\n+        data = {\n+            'dog': {\n+                \"class_name\": \"Dog\",\n+                \"color\": \"black\",\n+                \"breed\": \"husky\",\n+                \"unknown_property\": \"a-value\",\n+                \"more-unknown\": [\n+                    \"a\"\n+                ]\n+            }\n+        }\n+        # The 'unknown_property' is undeclared, which would normally raise an exception, but\n+        # when discard_unknown_keys is set to True, the unknown properties are discarded.\n+        response = MockResponse(data=json.dumps(data))\n+        deserialized = api_client.deserialize(response,\n+            ({str: (petstore_api.Dog,)},), True)\n+        self.assertTrue(isinstance(deserialized, dict))\n+        self.assertTrue(isinstance(deserialized['dog'], petstore_api.Dog))\n+\n+    def test_deserialize_cat_do_not_discard_unknown_properties(self):\n+        \"\"\" deserialize str, Cat) with unknown properties, strict validation is enabled \"\"\"\n+        config = Configuration(discard_unknown_keys=False)\n+        api_client = petstore_api.ApiClient(config)\n+        data = {\n+            'cat': {\n+                \"class_name\": \"Cat\",\n+                \"color\": \"black\",\n+                \"declawed\": True,\n+                \"dynamic-property\": 12345,\n+            }\n+        }\n+        response = MockResponse(data=json.dumps(data))\n+\n+        # Deserializing with strict validation does not raise an exception because the even though\n+        # the 'dynamic-property' is undeclared, the 'Cat' schema defines the additionalProperties\n+        # attribute.\n+        deserialized = api_client.deserialize(response,\n+            ({str: (petstore_api.Cat,)},), True)\n+        self.assertTrue(isinstance(deserialized, dict))\n+        self.assertTrue(isinstance(deserialized['cat'], petstore_api.Cat))\n+        self.assertEqual(deserialized['cat']['color'], 'black')\n+\n+    def test_deserialize_cat_discard_unknown_properties(self):\n+        \"\"\" deserialize str, Cat) with unknown properties, discard unknown properties \"\"\"\n+        config = Configuration(discard_unknown_keys=True)\n+        api_client = petstore_api.ApiClient(config)\n+        data = {\n+            'cat': {\n+                \"class_name\": \"Cat\",\n+                \"color\": \"black\",\n+                \"declawed\": True,\n+                \"unknown_property\": \"a-value\",\n+                \"more-unknown\": [\n+                    \"a\"\n+                ]\n+            }\n+        }\n+        # The 'unknown_property' is undeclared, which would normally raise an exception, but\n+        # when discard_unknown_keys is set to True, the unknown properties are discarded.\n+        response = MockResponse(data=json.dumps(data))\n+        deserialized = api_client.deserialize(response,\n+            ({str: (petstore_api.Cat,)},), True)\n+        self.assertTrue(isinstance(deserialized, dict))\n+        self.assertTrue(isinstance(deserialized['cat'], petstore_api.Cat))", "originalCommit": "d304d8cdc868ce05b4facb94fec148d9545eeb4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4MDU2NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r382680565", "bodyText": "done", "author": "sebastien-rosset", "createdAt": "2020-02-21T16:31:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0Njc3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0NzkxMQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r381647911", "bodyText": "Can you an an assertion check to confirm that cat has additionalproperties instances\nand add a comment saying that this test case tests composed schema with additionalproperties", "author": "spacether", "createdAt": "2020-02-20T01:30:24Z", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_discard_unknown_properties.py", "diffHunk": "@@ -0,0 +1,129 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+from collections import namedtuple\n+import json\n+import os\n+import re\n+import shutil\n+import unittest\n+from six.moves.urllib.parse import urlencode, urlparse\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+from petstore_api.model_utils import (\n+    file_type,\n+    int,\n+    model_to_dict,\n+    str,\n+)\n+\n+MockResponse = namedtuple('MockResponse', 'data')\n+\n+class DiscardUnknownPropertiesTests(unittest.TestCase):\n+\n+    def test_deserialize_dog_do_not_discard_unknown_properties(self):\n+        \"\"\" deserialize str, Dog) with unknown properties, strict validation is enabled \"\"\"\n+        config = Configuration(discard_unknown_keys=False)\n+        api_client = petstore_api.ApiClient(config)\n+        data = {\n+            'dog': {\n+                \"class_name\": \"Dog\",\n+                \"color\": \"black\",\n+                \"breed\": \"husky\",\n+                \"unknown_property\": \"a-value\"\n+            }\n+        }\n+        response = MockResponse(data=json.dumps(data))\n+\n+        # Deserializing with strict validation raises an exception because the 'unknown_property'\n+        # is undeclared.\n+        with self.assertRaises(Exception) as cm:\n+            deserialized = api_client.deserialize(response,\n+                ({str: (petstore_api.Dog,)},), True)\n+        self.assertTrue(re.match('.*Not all inputs were used.*unknown_property.*', str(cm.exception)),\n+            'Exception message: {0}'.format(str(cm.exception)))\n+\n+    def test_deserialize_dog_discard_unknown_properties(self):\n+        \"\"\" deserialize str, Dog) with unknown properties, discard unknown properties \"\"\"\n+        config = Configuration(discard_unknown_keys=True)\n+        api_client = petstore_api.ApiClient(config)\n+        data = {\n+            'dog': {\n+                \"class_name\": \"Dog\",\n+                \"color\": \"black\",\n+                \"breed\": \"husky\",\n+                \"unknown_property\": \"a-value\",\n+                \"more-unknown\": [\n+                    \"a\"\n+                ]\n+            }\n+        }\n+        # The 'unknown_property' is undeclared, which would normally raise an exception, but\n+        # when discard_unknown_keys is set to True, the unknown properties are discarded.\n+        response = MockResponse(data=json.dumps(data))\n+        deserialized = api_client.deserialize(response,\n+            ({str: (petstore_api.Dog,)},), True)\n+        self.assertTrue(isinstance(deserialized, dict))\n+        self.assertTrue(isinstance(deserialized['dog'], petstore_api.Dog))\n+\n+    def test_deserialize_cat_do_not_discard_unknown_properties(self):\n+        \"\"\" deserialize str, Cat) with unknown properties, strict validation is enabled \"\"\"\n+        config = Configuration(discard_unknown_keys=False)\n+        api_client = petstore_api.ApiClient(config)\n+        data = {\n+            'cat': {\n+                \"class_name\": \"Cat\",\n+                \"color\": \"black\",\n+                \"declawed\": True,\n+                \"dynamic-property\": 12345,\n+            }\n+        }\n+        response = MockResponse(data=json.dumps(data))\n+\n+        # Deserializing with strict validation does not raise an exception because the even though\n+        # the 'dynamic-property' is undeclared, the 'Cat' schema defines the additionalProperties\n+        # attribute.\n+        deserialized = api_client.deserialize(response,\n+            ({str: (petstore_api.Cat,)},), True)\n+        self.assertTrue(isinstance(deserialized, dict))", "originalCommit": "d304d8cdc868ce05b4facb94fec148d9545eeb4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4MDYyNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5362#discussion_r382680627", "bodyText": "done", "author": "sebastien-rosset", "createdAt": "2020-02-21T16:31:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0NzkxMQ=="}], "type": "inlineReview"}, {"oid": "6ac99289136a198e30faa57f69e97d20d7bdd8ac", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6ac99289136a198e30faa57f69e97d20d7bdd8ac", "message": "Merge remote-tracking branch 'origin' into discard_unknown_keys", "committedDate": "2020-02-21T16:00:50Z", "type": "commit"}, {"oid": "1e1e2e6fc060b6d04c91a1c71e4abf64a7145f55", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1e1e2e6fc060b6d04c91a1c71e4abf64a7145f55", "message": "improve unit tests for discarding properties", "committedDate": "2020-02-21T16:30:43Z", "type": "commit"}]}