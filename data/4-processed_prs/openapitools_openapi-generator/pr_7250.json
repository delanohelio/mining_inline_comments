{"pr_number": 7250, "pr_title": "[core] Add model cache to speed up code generation", "pr_createdAt": "2020-08-19T18:32:50Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/7250", "timeline": [{"oid": "b59960e00d30fcedc9f63fd1c2d0e78455beef4f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b59960e00d30fcedc9f63fd1c2d0e78455beef4f", "message": "Merge pull request #24 from OpenAPITools/master\n\nMerge upstream fixes", "committedDate": "2020-08-03T15:04:28Z", "type": "commit"}, {"oid": "df4e5ca9ac443df61d403d8c3761dac9a857b452", "url": "https://github.com/OpenAPITools/openapi-generator/commit/df4e5ca9ac443df61d403d8c3761dac9a857b452", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-08-13T19:39:51Z", "type": "commit"}, {"oid": "9a23d90e71a7ebf0b4c4299785320ecd85d3b08e", "url": "https://github.com/OpenAPITools/openapi-generator/commit/9a23d90e71a7ebf0b4c4299785320ecd85d3b08e", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-08-14T14:18:19Z", "type": "commit"}, {"oid": "0974336610d39bbcb3c6882370d6eb0b9e1d27b7", "url": "https://github.com/OpenAPITools/openapi-generator/commit/0974336610d39bbcb3c6882370d6eb0b9e1d27b7", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-08-14T23:34:31Z", "type": "commit"}, {"oid": "db1f359694dcd846f3a638e7f37e7c9c25f64cc0", "url": "https://github.com/OpenAPITools/openapi-generator/commit/db1f359694dcd846f3a638e7f37e7c9c25f64cc0", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-08-15T05:07:05Z", "type": "commit"}, {"oid": "4bfd89a8dba12735fabc9cedbb78bb851ce69e98", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4bfd89a8dba12735fabc9cedbb78bb851ce69e98", "message": "Add modelName to schema cache.", "committedDate": "2020-08-15T05:09:03Z", "type": "commit"}, {"oid": "11f52352a25df1d0fc43b316ed74879c1d5b2433", "url": "https://github.com/OpenAPITools/openapi-generator/commit/11f52352a25df1d0fc43b316ed74879c1d5b2433", "message": "Add modelName to schema cache.", "committedDate": "2020-08-15T15:55:44Z", "type": "commit"}, {"oid": "6d8c8041488813a227344f8d3353fb4d9baf2bb5", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6d8c8041488813a227344f8d3353fb4d9baf2bb5", "message": "add cache optimizations", "committedDate": "2020-08-17T18:22:33Z", "type": "commit"}, {"oid": "6a4ec04657aadb45358ed29e24ffb8f5ac7ab9cf", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6a4ec04657aadb45358ed29e24ffb8f5ac7ab9cf", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-08-17T18:26:57Z", "type": "commit"}, {"oid": "d66962164d53899892e1fdda79940f4880c193f5", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d66962164d53899892e1fdda79940f4880c193f5", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into add-model-cache", "committedDate": "2020-08-17T18:27:42Z", "type": "commit"}, {"oid": "f5f451e099093ccc8fc032ced430fa9c65c7eb4c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f5f451e099093ccc8fc032ced430fa9c65c7eb4c", "message": "add cache optimizations", "committedDate": "2020-08-17T20:51:59Z", "type": "commit"}, {"oid": "9da490052a75acabff10f55bca077e9b8c64e1f7", "url": "https://github.com/OpenAPITools/openapi-generator/commit/9da490052a75acabff10f55bca077e9b8c64e1f7", "message": "remove unused variable", "committedDate": "2020-08-18T16:14:23Z", "type": "commit"}, {"oid": "b817a4800ee9b161ffa34f0ee20f9a01c9e5a047", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b817a4800ee9b161ffa34f0ee20f9a01c9e5a047", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-08-18T17:35:26Z", "type": "commit"}, {"oid": "66a0aef09e4cc851bdc18f19cd5db2eb75b6d54a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/66a0aef09e4cc851bdc18f19cd5db2eb75b6d54a", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into add-model-cache", "committedDate": "2020-08-18T17:35:57Z", "type": "commit"}, {"oid": "863c04f961f5690d70793a1781a30577f5619b66", "url": "https://github.com/OpenAPITools/openapi-generator/commit/863c04f961f5690d70793a1781a30577f5619b66", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into add-model-cache", "committedDate": "2020-08-19T18:36:54Z", "type": "commit"}, {"oid": "7ae460ac93c88793186aff648a584bcd68502729", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7ae460ac93c88793186aff648a584bcd68502729", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into add-model-cache", "committedDate": "2020-08-20T14:17:23Z", "type": "commit"}, {"oid": "62759c3f352382a17d7f3c56e3af2f988d30ccb4", "url": "https://github.com/OpenAPITools/openapi-generator/commit/62759c3f352382a17d7f3c56e3af2f988d30ccb4", "message": "improve documentation", "committedDate": "2020-08-20T20:04:52Z", "type": "commit"}, {"oid": "a3ac1384e47de6ca936676876e767211f5017bd1", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a3ac1384e47de6ca936676876e767211f5017bd1", "message": "cache optimizations", "committedDate": "2020-08-20T21:01:43Z", "type": "commit"}, {"oid": "d9b47c18d211a2131d609277677d2a3aa136e66d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d9b47c18d211a2131d609277677d2a3aa136e66d", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator into add-model-cache", "committedDate": "2020-08-22T15:44:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2Nzg4MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7250#discussion_r475167880", "bodyText": "I don't think we can do this. Word escaping is going to be very generator-specific, and this static cache will break functionality for any application where openapi-generator is \"long-lived\" (IDE plugins, our online generator, and other long-running services holding oag in memory).\nI think we need to improve our model and the logic around it instead.", "author": "jimschubert", "createdAt": "2020-08-23T04:17:01Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/StringUtils.java", "diffHunk": "@@ -31,7 +34,11 @@\n     private static Cache<Pair<String, Boolean>, String> camelizedWordsCache;\n \n     // A cache of underscored words, used to optimize the performance of the underscore() method.\n-    private static Cache<String, String> underscoreWords;\n+    private static Cache<String, String> underscoreWordsCache;\n+\n+    // A cache of escaped words, used to optimize the performance of the escape() method.\n+    private static Cache<EscapedNameOptions, String> escapedWordsCache;", "originalCommit": "d9b47c18d211a2131d609277677d2a3aa136e66d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIyNjIzNA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7250#discussion_r475226234", "bodyText": "thanks. What if the cache lifecycle is tied to the lifecycle of the generator, similar to the other caches? Would this work for the cases you mention?", "author": "sebastien-rosset", "createdAt": "2020-08-23T14:29:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2Nzg4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwMjA5MQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7250#discussion_r475302091", "bodyText": "I'm looking at the method again and I'm trying to think of scenarios where there would be conflicts across threads if all the parameters are the same, and I can't think of any. I think you're probably fine with your current implementation for memoizing the escape function. I thought I had noticed something when I commented yesterday that prevented this function from being pure, and I'm not seeing it today.\nBut because you asked about a tying to the generation, if we ever wanted to have per-run caching we could do something like the following (for something like a CodegenModel cache for $ref!):\nWe could create a context object with unique ID as a hash key (an entity in DDD-land), and use this as the Cache key or as a component of the type defining the cache key.\nFor instance:\nId\npackage org.openapitools.codegen.context;\n\nimport java.util.Objects;\nimport java.util.UUID;\n\npublic final class Id {\n    private final UUID value;\n\n    public Id() {\n        this.value = UUID.randomUUID();\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(getValue());\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Id id = (Id) o;\n        return getValue().equals(id.getValue());\n    }\n\n    public UUID getValue() {\n        return value;\n    }\n}\n\nInvocationContext\npackage org.openapitools.codegen.context;\n\nimport java.util.Objects;\nimport java.util.UUID;\n\npublic final class InvocationContext {\n    private final Id id;\n\n    public InvocationContext() {\n        this.id = new Id();\n    }\n\n    public UUID getIdentifier() {\n        return this.id.getValue();\n    }\n\n    @Override\n    public int hashCode() {\n        // InvocationContext is an entity and should only maintain id in hashcode.\n        return Objects.hash(id);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        InvocationContext that = (InvocationContext) o;\n\n        // InvocationContext is an entity and should only maintain id in equals.\n        return id.equals(that.id);\n    }\n}\n\nAnd then update GlobalSettings to provide this per-run specific identifiable object:\npublic class GlobalSettings {\n    private static ThreadLocal<InvocationContext> context = new InheritableThreadLocal<InvocationContext>() {\n        @Override\n        protected InvocationContext initialValue() {\n            return new InvocationContext();\n        }\n    };\n    private static ThreadLocal<Properties> properties = new InheritableThreadLocal<Properties>() {\n        @Override\n        protected Properties initialValue() {\n            return (Properties) System.getProperties().clone();\n        }\n    };\n\n    public static String getProperty(String key, String defaultValue) {\n        return properties.get().getProperty(key, defaultValue);\n    }\n\n    public static String getProperty(String key) {\n        return properties.get().getProperty(key);\n    }\n\n    public static void setProperty(String key, String value) {\n        properties.get().setProperty(key, value);\n    }\n\n    public static void clearProperty(String key) {\n        properties.get().remove(key);\n    }\n\n    public static InvocationContext getContext() {\n        return context.get();\n    }\n\n    public static void reset() {\n        properties.remove();\n        context.remove();\n    }\n}\n\nThen, you'd just need to work out how you'd want to work with this in your cache. For your escape function, for example, you could change EscapedNameOptions to accept a UUID which is added to equals and hashcode, and then construct it with the invocation context's identifier. So,\nEscapedNameOptions ns = new EscapedNameOptions(\n    GlobalSettings.getContext().getIdentifier(),\n    name, replacementMap.keySet(), charactersToAllow, appendToReplacement);\n\nin Thread1 would be different than the same in Thread2.\nI could see us using this for a really simple ref lookup like this as the key and CodegenModel as the value:\npackage org.openapitools.codegen.context;\n\nimport java.util.Objects;\nimport java.util.UUID;\n\npublic final class ContextualRef {\n    private final UUID invocationId;\n    private final String ref;\n\n    public ContextualRef(UUID invocationId, String ref) {\n        if (ref == null) throw new IllegalArgumentException(\"ref can't be null\");\n        this.invocationId = invocationId;\n        // normalize/validate ref?\n        this.ref = ref;\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(invocationId, ref);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        ContextualRef that = (ContextualRef) o;\n        return invocationId.equals(that.invocationId) &&\n                ref.equals(that.ref);\n    }\n}", "author": "jimschubert", "createdAt": "2020-08-24T01:49:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2Nzg4MA=="}], "type": "inlineReview"}]}