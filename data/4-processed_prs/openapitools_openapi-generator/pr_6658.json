{"pr_number": 6658, "pr_title": "[C++] [restsdk]Update CMakeLists.txt for seamless building on Windows and Linux", "pr_createdAt": "2020-06-14T19:33:18Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/6658", "timeline": [{"oid": "eae7edf02e7bccb0669dfae47bcfcc2386061577", "url": "https://github.com/OpenAPITools/openapi-generator/commit/eae7edf02e7bccb0669dfae47bcfcc2386061577", "message": "Update CMakeLists.txt for seamless building on Windows and Linux", "committedDate": "2020-06-14T19:32:16Z", "type": "commit"}, {"oid": "1d12c440f989b729a34c8be51b8e060d3da76c27", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1d12c440f989b729a34c8be51b8e060d3da76c27", "message": "Update CMakeLists.txt\n\nMissing the line ending", "committedDate": "2020-06-14T21:01:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MjY0OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439872648", "bodyText": "I would indent all statements inside if clauses by 2 or 4 spaces, so it's obvious it's if-else", "author": "muttleyxd", "createdAt": "2020-06-14T22:14:08Z", "path": "modules/openapi-generator/src/main/resources/cpp-rest-sdk-client/cmake-lists.mustache", "diffHunk": "@@ -27,28 +25,55 @@ endif()\n # BUILD TYPE\n message(\"A ${CMAKE_BUILD_TYPE} build configuration is detected\")\n \n-# Update require components as necessary\n-#find_package(Boost 1.45.0 REQUIRED COMPONENTS ${Boost_THREAD_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_REGEX_LIBRARY} ${Boost_DATE_TIME_LIBRARY} ${Boost_PROGRAM_OPTIONS_LIBRARY} ${Boost_FILESYSTEM_LIBRARY})\n+if (UNIX)", "originalCommit": "1d12c440f989b729a34c8be51b8e060d3da76c27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MjY2OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439872669", "bodyText": "I'd use newer syntax - simply\nelse() - less confusing for users from other languages", "author": "muttleyxd", "createdAt": "2020-06-14T22:14:35Z", "path": "modules/openapi-generator/src/main/resources/cpp-rest-sdk-client/cmake-lists.mustache", "diffHunk": "@@ -27,28 +25,55 @@ endif()\n # BUILD TYPE\n message(\"A ${CMAKE_BUILD_TYPE} build configuration is detected\")\n \n-# Update require components as necessary\n-#find_package(Boost 1.45.0 REQUIRED COMPONENTS ${Boost_THREAD_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_REGEX_LIBRARY} ${Boost_DATE_TIME_LIBRARY} ${Boost_PROGRAM_OPTIONS_LIBRARY} ${Boost_FILESYSTEM_LIBRARY})\n+if (UNIX)\n+\n+message(STATUS \"Building client library for Linux/Unix\")\n+\n+set(CMAKE_BUILD_TYPE Debug)\n+set(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS}   -fPIC -Wall -Wno-unused-variable\")\n+set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fPIC -Wall -Wno-unused-variable\")\n+\n+find_package(cpprestsdk REQUIRED)\n+find_package(Boost REQUIRED)\n \n-# build and set path to cpp rest sdk\n-set(CPPREST_ROOT ${PROJECT_SOURCE_DIR}/3rdParty/cpprest)\n-set(CPPREST_INCLUDE_DIR ${CPPREST_ROOT}/include)\n-set(CPPREST_LIBRARY_DIR ${CPPREST_ROOT}/lib)\n+else(UNIX)", "originalCommit": "1d12c440f989b729a34c8be51b8e060d3da76c27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MjY4OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439872689", "bodyText": "Same as with else - endif()", "author": "muttleyxd", "createdAt": "2020-06-14T22:14:46Z", "path": "modules/openapi-generator/src/main/resources/cpp-rest-sdk-client/cmake-lists.mustache", "diffHunk": "@@ -27,28 +25,55 @@ endif()\n # BUILD TYPE\n message(\"A ${CMAKE_BUILD_TYPE} build configuration is detected\")\n \n-# Update require components as necessary\n-#find_package(Boost 1.45.0 REQUIRED COMPONENTS ${Boost_THREAD_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_REGEX_LIBRARY} ${Boost_DATE_TIME_LIBRARY} ${Boost_PROGRAM_OPTIONS_LIBRARY} ${Boost_FILESYSTEM_LIBRARY})\n+if (UNIX)\n+\n+message(STATUS \"Building client library for Linux/Unix\")\n+\n+set(CMAKE_BUILD_TYPE Debug)\n+set(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS}   -fPIC -Wall -Wno-unused-variable\")\n+set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fPIC -Wall -Wno-unused-variable\")\n+\n+find_package(cpprestsdk REQUIRED)\n+find_package(Boost REQUIRED)\n \n-# build and set path to cpp rest sdk\n-set(CPPREST_ROOT ${PROJECT_SOURCE_DIR}/3rdParty/cpprest)\n-set(CPPREST_INCLUDE_DIR ${CPPREST_ROOT}/include)\n-set(CPPREST_LIBRARY_DIR ${CPPREST_ROOT}/lib)\n+else(UNIX)\n \n-include_directories(${PROJECT_SOURCE_DIR} api model ${CPPREST_INCLUDE_DIR})\n+message(STATUS \"Building client library for Windows\")\n \n+find_package(cpprestsdk REQUIRED)\n+find_package(Boost REQUIRED)\n+find_package(pthreads REQUIRED)\n \n-# If using vcpkg, set include directories. Also comment out CPPREST section above since vcpkg will handle it.\n-# To install required vcpkg packages execute:\n-# > vcpkg install cpprestsdk cpprestsdk:x64-windows boost-uuid boost-uuid:x64-windows\n-# set(VCPKG_ROOT \"C:\\\\vcpkg\\\\installed\\\\x64-windows\")\n-# set(VCPKG_INCLUDE_DIR ${VCPKG_ROOT}/include)\n-# set(VCPKG_LIBRARY_DIR ${VCPKG_ROOT}/lib)\n-# include_directories(${PROJECT_SOURCE_DIR} api model ${VCPKG_INCLUDE_DIR})\n+endif(UNIX)", "originalCommit": "1d12c440f989b729a34c8be51b8e060d3da76c27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3Mjg5Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439872892", "bodyText": "I would use more modern target_include_directories - this would lead to less clutter if someone decides to do add_subdirectory on a directory containing this file - it would propagate and everything declared after would have these directories.\nIf projects linking to ${PROJECT_NAME} require to know these headers then do target_include_directories(${PROJECT_NAME} PUBLIC ...), if not then change PUBLIC with PRIVATE", "author": "muttleyxd", "createdAt": "2020-06-14T22:17:44Z", "path": "modules/openapi-generator/src/main/resources/cpp-rest-sdk-client/cmake-lists.mustache", "diffHunk": "@@ -27,28 +25,55 @@ endif()\n # BUILD TYPE\n message(\"A ${CMAKE_BUILD_TYPE} build configuration is detected\")\n \n-# Update require components as necessary\n-#find_package(Boost 1.45.0 REQUIRED COMPONENTS ${Boost_THREAD_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_REGEX_LIBRARY} ${Boost_DATE_TIME_LIBRARY} ${Boost_PROGRAM_OPTIONS_LIBRARY} ${Boost_FILESYSTEM_LIBRARY})\n+if (UNIX)\n+\n+message(STATUS \"Building client library for Linux/Unix\")\n+\n+set(CMAKE_BUILD_TYPE Debug)\n+set(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS}   -fPIC -Wall -Wno-unused-variable\")\n+set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fPIC -Wall -Wno-unused-variable\")\n+\n+find_package(cpprestsdk REQUIRED)\n+find_package(Boost REQUIRED)\n \n-# build and set path to cpp rest sdk\n-set(CPPREST_ROOT ${PROJECT_SOURCE_DIR}/3rdParty/cpprest)\n-set(CPPREST_INCLUDE_DIR ${CPPREST_ROOT}/include)\n-set(CPPREST_LIBRARY_DIR ${CPPREST_ROOT}/lib)\n+else(UNIX)\n \n-include_directories(${PROJECT_SOURCE_DIR} api model ${CPPREST_INCLUDE_DIR})\n+message(STATUS \"Building client library for Windows\")\n \n+find_package(cpprestsdk REQUIRED)\n+find_package(Boost REQUIRED)\n+find_package(pthreads REQUIRED)\n \n-# If using vcpkg, set include directories. Also comment out CPPREST section above since vcpkg will handle it.\n-# To install required vcpkg packages execute:\n-# > vcpkg install cpprestsdk cpprestsdk:x64-windows boost-uuid boost-uuid:x64-windows\n-# set(VCPKG_ROOT \"C:\\\\vcpkg\\\\installed\\\\x64-windows\")\n-# set(VCPKG_INCLUDE_DIR ${VCPKG_ROOT}/include)\n-# set(VCPKG_LIBRARY_DIR ${VCPKG_ROOT}/lib)\n-# include_directories(${PROJECT_SOURCE_DIR} api model ${VCPKG_INCLUDE_DIR})\n+endif(UNIX)\n+\n+# Manually set the cpprestsdk paths\n+#set(CPPREST_INCLUDE_DIR ${CPPREST_ROOT}/include)\n+#set(CPPREST_LIBRARY_DIR ${CPPREST_ROOT}/lib)\n+#include_directories(${CPPREST_INCLUDE_DIR})\n+#link_directories(${CPPREST_LIBRARY_DIR})\n+\n+include_directories(", "originalCommit": "1d12c440f989b729a34c8be51b8e060d3da76c27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MjkwNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439872907", "bodyText": "Same as include_directories", "author": "muttleyxd", "createdAt": "2020-06-14T22:17:57Z", "path": "modules/openapi-generator/src/main/resources/cpp-rest-sdk-client/cmake-lists.mustache", "diffHunk": "@@ -27,28 +25,55 @@ endif()\n # BUILD TYPE\n message(\"A ${CMAKE_BUILD_TYPE} build configuration is detected\")\n \n-# Update require components as necessary\n-#find_package(Boost 1.45.0 REQUIRED COMPONENTS ${Boost_THREAD_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_REGEX_LIBRARY} ${Boost_DATE_TIME_LIBRARY} ${Boost_PROGRAM_OPTIONS_LIBRARY} ${Boost_FILESYSTEM_LIBRARY})\n+if (UNIX)\n+\n+message(STATUS \"Building client library for Linux/Unix\")\n+\n+set(CMAKE_BUILD_TYPE Debug)\n+set(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS}   -fPIC -Wall -Wno-unused-variable\")\n+set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fPIC -Wall -Wno-unused-variable\")\n+\n+find_package(cpprestsdk REQUIRED)\n+find_package(Boost REQUIRED)\n \n-# build and set path to cpp rest sdk\n-set(CPPREST_ROOT ${PROJECT_SOURCE_DIR}/3rdParty/cpprest)\n-set(CPPREST_INCLUDE_DIR ${CPPREST_ROOT}/include)\n-set(CPPREST_LIBRARY_DIR ${CPPREST_ROOT}/lib)\n+else(UNIX)\n \n-include_directories(${PROJECT_SOURCE_DIR} api model ${CPPREST_INCLUDE_DIR})\n+message(STATUS \"Building client library for Windows\")\n \n+find_package(cpprestsdk REQUIRED)\n+find_package(Boost REQUIRED)\n+find_package(pthreads REQUIRED)\n \n-# If using vcpkg, set include directories. Also comment out CPPREST section above since vcpkg will handle it.\n-# To install required vcpkg packages execute:\n-# > vcpkg install cpprestsdk cpprestsdk:x64-windows boost-uuid boost-uuid:x64-windows\n-# set(VCPKG_ROOT \"C:\\\\vcpkg\\\\installed\\\\x64-windows\")\n-# set(VCPKG_INCLUDE_DIR ${VCPKG_ROOT}/include)\n-# set(VCPKG_LIBRARY_DIR ${VCPKG_ROOT}/lib)\n-# include_directories(${PROJECT_SOURCE_DIR} api model ${VCPKG_INCLUDE_DIR})\n+endif(UNIX)\n+\n+# Manually set the cpprestsdk paths\n+#set(CPPREST_INCLUDE_DIR ${CPPREST_ROOT}/include)\n+#set(CPPREST_LIBRARY_DIR ${CPPREST_ROOT}/lib)\n+#include_directories(${CPPREST_INCLUDE_DIR})\n+#link_directories(${CPPREST_LIBRARY_DIR})\n+\n+include_directories(\n+    ${Boost_INCLUDE_DIRS}\n+    ${CMAKE_CURRENT_SOURCE_DIR}/model\n+    ${CMAKE_CURRENT_SOURCE_DIR}/api\n+)\n+\n+link_directories(", "originalCommit": "1d12c440f989b729a34c8be51b8e060d3da76c27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3Mjk4NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439872984", "bodyText": "Same as first if", "author": "muttleyxd", "createdAt": "2020-06-14T22:19:27Z", "path": "modules/openapi-generator/src/main/resources/cpp-rest-sdk-client/cmake-lists.mustache", "diffHunk": "@@ -27,28 +25,55 @@ endif()\n # BUILD TYPE\n message(\"A ${CMAKE_BUILD_TYPE} build configuration is detected\")\n \n-# Update require components as necessary\n-#find_package(Boost 1.45.0 REQUIRED COMPONENTS ${Boost_THREAD_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_REGEX_LIBRARY} ${Boost_DATE_TIME_LIBRARY} ${Boost_PROGRAM_OPTIONS_LIBRARY} ${Boost_FILESYSTEM_LIBRARY})\n+if (UNIX)\n+\n+message(STATUS \"Building client library for Linux/Unix\")\n+\n+set(CMAKE_BUILD_TYPE Debug)\n+set(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS}   -fPIC -Wall -Wno-unused-variable\")\n+set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fPIC -Wall -Wno-unused-variable\")\n+\n+find_package(cpprestsdk REQUIRED)\n+find_package(Boost REQUIRED)\n \n-# build and set path to cpp rest sdk\n-set(CPPREST_ROOT ${PROJECT_SOURCE_DIR}/3rdParty/cpprest)\n-set(CPPREST_INCLUDE_DIR ${CPPREST_ROOT}/include)\n-set(CPPREST_LIBRARY_DIR ${CPPREST_ROOT}/lib)\n+else(UNIX)\n \n-include_directories(${PROJECT_SOURCE_DIR} api model ${CPPREST_INCLUDE_DIR})\n+message(STATUS \"Building client library for Windows\")\n \n+find_package(cpprestsdk REQUIRED)\n+find_package(Boost REQUIRED)\n+find_package(pthreads REQUIRED)\n \n-# If using vcpkg, set include directories. Also comment out CPPREST section above since vcpkg will handle it.\n-# To install required vcpkg packages execute:\n-# > vcpkg install cpprestsdk cpprestsdk:x64-windows boost-uuid boost-uuid:x64-windows\n-# set(VCPKG_ROOT \"C:\\\\vcpkg\\\\installed\\\\x64-windows\")\n-# set(VCPKG_INCLUDE_DIR ${VCPKG_ROOT}/include)\n-# set(VCPKG_LIBRARY_DIR ${VCPKG_ROOT}/lib)\n-# include_directories(${PROJECT_SOURCE_DIR} api model ${VCPKG_INCLUDE_DIR})\n+endif(UNIX)\n+\n+# Manually set the cpprestsdk paths\n+#set(CPPREST_INCLUDE_DIR ${CPPREST_ROOT}/include)\n+#set(CPPREST_LIBRARY_DIR ${CPPREST_ROOT}/lib)\n+#include_directories(${CPPREST_INCLUDE_DIR})\n+#link_directories(${CPPREST_LIBRARY_DIR})\n+\n+include_directories(\n+    ${Boost_INCLUDE_DIRS}\n+    ${CMAKE_CURRENT_SOURCE_DIR}/model\n+    ${CMAKE_CURRENT_SOURCE_DIR}/api\n+)\n+\n+link_directories(\n+    ${Boost_LIBRARY_DIRS}\n+)\n \n #SUPPORTING FILES\n set(SUPPORTING_FILES  \"ApiClient\" \"ApiConfiguration\" \"ApiException\" \"HttpContent\" \"IHttpBody\" \"JsonBody\" \"ModelBase\" \"MultipartFormData\" \"Object\")\n #SOURCE FILES\n file(GLOB SOURCE_FILES  \"api/*\"  \"model/*\")\n \n add_library(${PROJECT_NAME} ${SUPPORTING_FILES} ${SOURCE_FILES})\n+\n+if (UNIX)", "originalCommit": "1d12c440f989b729a34c8be51b8e060d3da76c27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MzA4NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439873085", "bodyText": "This is generally a bad idea. I'd leave build type out, user has to specify it IMO. Unless we have a good reason to do so.", "author": "muttleyxd", "createdAt": "2020-06-14T22:20:34Z", "path": "samples/client/petstore/cpp-restsdk/CMakeLists.txt", "diffHunk": "@@ -4,16 +4,29 @@ project(cpprest-petstore)\n set(CMAKE_VERBOSE_MAKEFILE ON)\n set(CMAKE_INCLUDE_CURRENT_DIR ON)\n \n+if (UNIX)\n \n-set(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS}   -fPIC -Wall -Wno-unused-variable\")\n-set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fPIC -std=c++14 -Wall -Wno-unused-variable\")\n+message(STATUS \"Building for Linux/Unix\")\n \n+set(CMAKE_BUILD_TYPE Debug)", "originalCommit": "1d12c440f989b729a34c8be51b8e060d3da76c27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3ODI2OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439878269", "bodyText": "This is for the test app, and not the client so I would leave it as is.", "author": "etherealjoy", "createdAt": "2020-06-14T23:26:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MzA4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MzEzMQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439873131", "bodyText": "I think we can concatenate these with lines 14 and 15.", "author": "muttleyxd", "createdAt": "2020-06-14T22:21:01Z", "path": "samples/client/petstore/cpp-restsdk/CMakeLists.txt", "diffHunk": "@@ -4,16 +4,29 @@ project(cpprest-petstore)\n set(CMAKE_VERBOSE_MAKEFILE ON)\n set(CMAKE_INCLUDE_CURRENT_DIR ON)\n \n+if (UNIX)\n \n-set(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS}   -fPIC -Wall -Wno-unused-variable\")\n-set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fPIC -std=c++14 -Wall -Wno-unused-variable\")\n+message(STATUS \"Building for Linux/Unix\")\n \n+set(CMAKE_BUILD_TYPE Debug)\n+set(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS}   -fPIC -Wall -Wno-unused-variable\")", "originalCommit": "1d12c440f989b729a34c8be51b8e060d3da76c27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MzE2Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439873163", "bodyText": "Same as previous if", "author": "muttleyxd", "createdAt": "2020-06-14T22:21:29Z", "path": "samples/client/petstore/cpp-restsdk/CMakeLists.txt", "diffHunk": "@@ -4,16 +4,29 @@ project(cpprest-petstore)\n set(CMAKE_VERBOSE_MAKEFILE ON)\n set(CMAKE_INCLUDE_CURRENT_DIR ON)\n \n+if (UNIX)", "originalCommit": "1d12c440f989b729a34c8be51b8e060d3da76c27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MzE3Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439873177", "bodyText": "target_link_directories", "author": "muttleyxd", "createdAt": "2020-06-14T22:21:45Z", "path": "samples/client/petstore/cpp-restsdk/CMakeLists.txt", "diffHunk": "@@ -23,15 +36,25 @@ include_directories(\n     ${CMAKE_CURRENT_SOURCE_DIR}/client\n     ${CMAKE_CURRENT_SOURCE_DIR}/client/model\n     ${CMAKE_CURRENT_SOURCE_DIR}/client/api\n+    ${Boost_INCLUDE_DIRS}\n )\n \n link_directories(", "originalCommit": "1d12c440f989b729a34c8be51b8e060d3da76c27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MzI0Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439873247", "bodyText": "Same as other if()", "author": "muttleyxd", "createdAt": "2020-06-14T22:22:36Z", "path": "samples/client/petstore/cpp-restsdk/CMakeLists.txt", "diffHunk": "@@ -23,15 +36,25 @@ include_directories(\n     ${CMAKE_CURRENT_SOURCE_DIR}/client\n     ${CMAKE_CURRENT_SOURCE_DIR}/client/model\n     ${CMAKE_CURRENT_SOURCE_DIR}/client/api\n+    ${Boost_INCLUDE_DIRS}\n )\n \n link_directories(\n     ${Boost_LIBRARY_DIRS}\n )\n+\n add_executable(${PROJECT_NAME} ${SRCS})\n add_dependencies(${PROJECT_NAME} CppRestOpenAPIClient )\n-target_link_libraries(${PROJECT_NAME}  CppRestOpenAPIClient cpprest pthread boost_system crypto)\n+\n+if (UNIX)", "originalCommit": "1d12c440f989b729a34c8be51b8e060d3da76c27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MzI2Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439873263", "bodyText": "Same as other if()", "author": "muttleyxd", "createdAt": "2020-06-14T22:22:41Z", "path": "samples/client/petstore/cpp-restsdk/CMakeLists.txt", "diffHunk": "@@ -23,15 +36,25 @@ include_directories(\n     ${CMAKE_CURRENT_SOURCE_DIR}/client\n     ${CMAKE_CURRENT_SOURCE_DIR}/client/model\n     ${CMAKE_CURRENT_SOURCE_DIR}/client/api\n+    ${Boost_INCLUDE_DIRS}\n )\n \n link_directories(\n     ${Boost_LIBRARY_DIRS}\n )\n+\n add_executable(${PROJECT_NAME} ${SRCS})\n add_dependencies(${PROJECT_NAME} CppRestOpenAPIClient )\n-target_link_libraries(${PROJECT_NAME}  CppRestOpenAPIClient cpprest pthread boost_system crypto)\n+\n+if (UNIX)\n+target_link_libraries(${PROJECT_NAME} PRIVATE CppRestOpenAPIClient cpprest pthread ${Boost_LIBRARIES} crypto)\n+else(UNIX)\n+target_link_libraries(${PROJECT_NAME} PRIVATE CppRestOpenAPIClient cpprestsdk::cpprest ${pthreads_LIBRARIES} ${Boost_LIBRARIES} bcrypt)\n+endif(UNIX)\n+\n set_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD 14)\n set_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD_REQUIRED ON)\n \n+if (UNIX)", "originalCommit": "1d12c440f989b729a34c8be51b8e060d3da76c27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "49293c5f6f1b5acd21cc0652d752e81d54402a1d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/49293c5f6f1b5acd21cc0652d752e81d54402a1d", "message": "Indent if statements and use target specific directives", "committedDate": "2020-06-14T23:24:10Z", "type": "commit"}, {"oid": "a57a2797b885402c98846a1a40fa125b14abcb35", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a57a2797b885402c98846a1a40fa125b14abcb35", "message": "Change Client CMakeLists.txt to non Debug", "committedDate": "2020-06-14T23:38:45Z", "type": "commit"}]}