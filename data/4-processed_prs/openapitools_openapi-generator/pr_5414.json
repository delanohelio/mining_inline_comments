{"pr_number": 5414, "pr_title": "[go-experimental] Fix nullable support", "pr_createdAt": "2020-02-24T09:00:21Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/5414", "timeline": [{"oid": "cd511817f204c2e182d506bcaab049fe1fe0b869", "url": "https://github.com/OpenAPITools/openapi-generator/commit/cd511817f204c2e182d506bcaab049fe1fe0b869", "message": "Fix nullable support in go-experimental client", "committedDate": "2020-02-21T13:49:40Z", "type": "commit"}, {"oid": "6660e347ac5716e9050d951ecf686be80228a36b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6660e347ac5716e9050d951ecf686be80228a36b", "message": "Fix support for models with parents and container fields", "committedDate": "2020-02-24T08:55:21Z", "type": "commit"}, {"oid": "89c6693ad8cd30df1ec044e075faec331925550f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/89c6693ad8cd30df1ec044e075faec331925550f", "message": "Make sure that oneOf interfaces serialize properly even if they're required (non-pointers) on other models", "committedDate": "2020-02-24T11:02:47Z", "type": "commit"}, {"oid": "a214508a651a020d467561beb370c897abfb7f27", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a214508a651a020d467561beb370c897abfb7f27", "message": "Spaces => tabs", "committedDate": "2020-03-17T14:07:36Z", "type": "commit"}, {"oid": "69b5cf00e407c03ccbb853ce64194ec793ae54ca", "url": "https://github.com/OpenAPITools/openapi-generator/commit/69b5cf00e407c03ccbb853ce64194ec793ae54ca", "message": "Regenerate samples", "committedDate": "2020-03-17T14:55:31Z", "type": "commit"}, {"oid": "711acec112e20c6cec803dc1b61dd35afc745cc3", "url": "https://github.com/OpenAPITools/openapi-generator/commit/711acec112e20c6cec803dc1b61dd35afc745cc3", "message": "Make some methods of nullables pointer-receivers, add tests", "committedDate": "2020-03-19T08:56:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkxMjQ5Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5414#discussion_r394912497", "bodyText": "Since we return if the value inside the nullable is set, why don't we return the value inside the nullable too directly ? Might simplify usage of nullables ?\nHaven't thought about it deeply, just throwing that out there. Let me know what you think", "author": "zippolyte", "createdAt": "2020-03-19T10:03:26Z", "path": "modules/openapi-generator/src/main/resources/go-experimental/model.mustache", "diffHunk": "@@ -111,26 +123,31 @@ func (o *{{classname}}) Set{{name}}(v {{dataType}}) {\n {{^required}}\n // Get{{name}} returns the {{name}} field value if set, zero value otherwise.\n func (o *{{classname}}) Get{{name}}() {{dataType}} {\n-\tif o == nil || o.{{name}} == nil {\n+\tif o == nil {{^isNullable}}|| o.{{name}} == nil{{/isNullable}} {\n \t\tvar ret {{dataType}}\n \t\treturn ret\n \t}\n-\treturn *o.{{name}}\n+\treturn {{^isNullable}}*{{/isNullable}}o.{{name}}\n }\n \n // Get{{name}}Ok returns a tuple with the {{name}} field value if set, zero value otherwise\n // and a boolean to check if the value has been set.\n func (o *{{classname}}) Get{{name}}Ok() ({{dataType}}, bool) {\n-\tif o == nil || o.{{name}} == nil {\n+\tif o == nil {{^isNullable}}|| o.{{name}} == nil{{/isNullable}} {\n \t\tvar ret {{dataType}}\n \t\treturn ret, false\n \t}\n+{{#isNullable}}\n+\treturn o.{{name}}, {{#isContainer}}o.{{name}} == nil{{/isContainer}}{{^isContainer}}o.{{name}}.IsSet(){{/isContainer}}", "originalCommit": "711acec112e20c6cec803dc1b61dd35afc745cc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkyNTI0OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5414#discussion_r394925248", "bodyText": "I think it would then be problematic what Get{{name}} should return - because it would return null both if there's explicit null and if there's not, so it wouldn't make much sense to keep that method for nullables, which would lead to inconsistency in the API of the class. Also, getting the whole nullable structure directly lets you call e.g. Unset() on it... I do see your point, but I think this is a matter of preference, YMMV :)", "author": "bkabrda", "createdAt": "2020-03-19T10:25:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkxMjQ5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkyNzc1Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5414#discussion_r394927757", "bodyText": "Hmm, but it's true that doing this would make it somewhat easier to add implementation of nullables for container types in the future. Let me try to experiment with the idea a bit.", "author": "bkabrda", "createdAt": "2020-03-19T10:30:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkxMjQ5Nw=="}], "type": "inlineReview"}, {"oid": "abed6770facb2ff073af07549b60aa719a060cdb", "url": "https://github.com/OpenAPITools/openapi-generator/commit/abed6770facb2ff073af07549b60aa719a060cdb", "message": "Improve the Get/Set logic to make usage more convenient", "committedDate": "2020-03-19T14:55:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0NDA4Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5414#discussion_r395144087", "bodyText": "Let's document the caveat in case of explicit null", "author": "zippolyte", "createdAt": "2020-03-19T16:09:32Z", "path": "modules/openapi-generator/src/main/resources/go-experimental/model.mustache", "diffHunk": "@@ -57,167 +56,319 @@ type {{classname}} struct {\n // and makes sure properties required by API are set, but the set of arguments\n // will change when the set of required properties is changed\n func New{{classname}}({{#vars}}{{#required}}{{nameInCamelCase}} {{dataType}}, {{/required}}{{/vars}}) *{{classname}} {\n-    this := {{classname}}{}\n+\tthis := {{classname}}{}\n {{#vars}}\n {{#required}}\n-    this.{{name}} = {{nameInCamelCase}}\n+\tthis.{{name}} = {{nameInCamelCase}}\n {{/required}}\n {{^required}}\n {{#defaultValue}}\n {{^isContainer}}\n-    var {{nameInCamelCase}} {{{dataType}}} = {{#isNullable}}{{{dataType}}}{Value: {{/isNullable}}{{{.}}}{{#isNullable}} }{{/isNullable}}\n-    this.{{name}} = {{^required}}&{{/required}}{{nameInCamelCase}}\n+{{#isNullable}}\n+\tvar {{nameInCamelCase}} {{{datatypeWithEnum}}} = {{{.}}}\n+\tthis.{{name}} = *New{{{dataType}}}(&{{nameInCamelCase}})\n+{{/isNullable}}\n+{{^isNullable}}\n+\tvar {{nameInCamelCase}} {{{dataType}}} = {{{.}}}\n+\tthis.{{name}} = &{{nameInCamelCase}}\n+{{/isNullable}}\n {{/isContainer}}\n {{/defaultValue}}\n {{/required}}\n {{/vars}}\n-    return &this\n+\treturn &this\n }\n \n // New{{classname}}WithDefaults instantiates a new {{classname}} object\n // This constructor will only assign default values to properties that have it defined,\n // but it doesn't guarantee that properties required by API are set\n func New{{classname}}WithDefaults() *{{classname}} {\n-    this := {{classname}}{}\n+\tthis := {{classname}}{}\n {{#vars}}\n {{#defaultValue}}\n {{^isContainer}}\n-    var {{nameInCamelCase}} {{{dataType}}} = {{#isNullable}}{{{dataType}}}{Value: {{/isNullable}}{{{.}}}{{#isNullable}} }{{/isNullable}}\n-    this.{{name}} = {{^required}}&{{/required}}{{nameInCamelCase}}\n+{{#isNullable}}\n+{{!we use datatypeWithEnum here, since it will represent the non-nullable name of the datatype, e.g. int64 for NullableInt64}}\n+\tvar {{nameInCamelCase}} {{{datatypeWithEnum}}} = {{{.}}}\n+\tthis.{{name}} = *New{{{dataType}}}(&{{nameInCamelCase}})\n+{{/isNullable}}\n+{{^isNullable}}\n+\tvar {{nameInCamelCase}} {{{dataType}}} = {{{.}}}\n+\tthis.{{name}} = {{^required}}&{{/required}}{{nameInCamelCase}}\n+{{/isNullable}}\n {{/isContainer}}\n {{/defaultValue}}\n {{/vars}}\n-    return &this\n+\treturn &this\n }\n \n {{#vars}}\n {{#required}}\n // Get{{name}} returns the {{name}} field value", "originalCommit": "abed6770facb2ff073af07549b60aa719a060cdb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1NjI2NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5414#discussion_r395156264", "bodyText": "Has... is defined for every non required types, not just for nullables I believe.", "author": "zippolyte", "createdAt": "2020-03-19T16:26:54Z", "path": "modules/openapi-generator/src/main/resources/go-experimental/model_doc.mustache", "diffHunk": "@@ -36,37 +36,40 @@ but it doesn't guarantee that properties required by API are set\n {{#vars}}\n ### Get{{name}}\n \n-`func (o *{{classname}}) Get{{name}}() {{dataType}}`\n+`func (o *{{classname}}) Get{{name}}() {{vendorExtensions.x-basetype}}`\n \n Get{{name}} returns the {{name}} field if non-nil, zero value otherwise.\n \n ### Get{{name}}Ok\n \n-`func (o *{{classname}}) Get{{name}}Ok() ({{dataType}}, bool)`\n+`func (o *{{classname}}) Get{{name}}Ok() (*{{vendorExtensions.x-basetype}}, bool)`\n \n Get{{name}}Ok returns a tuple with the {{name}} field if it's non-nil, zero value otherwise\n and a boolean to check if the value has been set.\n \n+### Set{{name}}\n+\n+`func (o *{{classname}}) Set{{name}}(v {{vendorExtensions.x-basetype}})`\n+\n+Set{{name}} sets {{name}} field to given value.\n+\n+{{#isNullable}}\n ### Has{{name}}", "originalCommit": "abed6770facb2ff073af07549b60aa719a060cdb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "afc84265dd57192f0868d9b895e54ee24993fecb", "url": "https://github.com/OpenAPITools/openapi-generator/commit/afc84265dd57192f0868d9b895e54ee24993fecb", "message": "Address review", "committedDate": "2020-03-19T16:40:15Z", "type": "commit"}]}