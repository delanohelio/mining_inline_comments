{"pr_number": 7341, "pr_title": "[kotlin] Fix optional header params in openhttp client", "pr_createdAt": "2020-09-03T13:30:32Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/7341", "timeline": [{"oid": "252f0939af3c4758d6edd86ba57af94998b862a5", "url": "https://github.com/OpenAPITools/openapi-generator/commit/252f0939af3c4758d6edd86ba57af94998b862a5", "message": "Fix generation of optional parameters in openhttp kotlin api template\n\nThis commit adjusts the kotlin openhttp api template to:\n1. Default optional parameters to null so that API consumers are no longer forced to specify a value\n2. Ignore null headers when building the request rather than convert them to \"null\" string", "committedDate": "2020-09-03T13:20:23Z", "type": "commit"}, {"oid": "19b71dc2171fbe89d7f6725e0726410282998fa2", "url": "https://github.com/OpenAPITools/openapi-generator/commit/19b71dc2171fbe89d7f6725e0726410282998fa2", "message": "Update generated petstore API with template updates", "committedDate": "2020-09-03T13:22:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzNjg0MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7341#discussion_r483336840", "bodyText": "note that this will be a breaking change if sortParamsByRequiredFlag is false. If you specify a default value before other parameters with no default value, you can only invoke the method with named parameters.\nThis will also potentially break Java interop as it would require @JvmOverloads on all methods, and this could have a non-trivial overhead on larger generated clients.\nThe only good way I see to address those concerns would be to put this functionality behind a new user option (something like defaultOptionalArgsToNull) and default it to true, which I think would work if we get this into the 5.0 release.\nThen this change would become:\n{{^required}}?{{#defaultOptionalArgsToNull}} = null{{/defaultOptionalArgsToNull}}{{/required}}\n\nI don't know if defaultOptionalArgsToNull is the best name, though.", "author": "jimschubert", "createdAt": "2020-09-04T01:31:42Z", "path": "modules/openapi-generator/src/main/resources/kotlin-client/libraries/jvm-okhttp/api.mustache", "diffHunk": "@@ -40,7 +40,7 @@ import {{packageName}}.infrastructure.toMultiValue\n     {{#isDeprecated}}\n     @Deprecated(message = \"This operation is deprecated.\")\n     {{/isDeprecated}}\n-    {{^doNotUseRxAndCoroutines}}{{#useCoroutines}}suspend {{/useCoroutines}}{{/doNotUseRxAndCoroutines}}fun {{operationId}}({{#allParams}}{{{paramName}}}: {{{dataType}}}{{^required}}?{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) : {{#returnType}}{{{returnType}}}{{#nullableReturnType}}?{{/nullableReturnType}}{{/returnType}}{{^returnType}}Unit{{/returnType}} {\n+    {{^doNotUseRxAndCoroutines}}{{#useCoroutines}}suspend {{/useCoroutines}}{{/doNotUseRxAndCoroutines}}fun {{operationId}}({{#allParams}}{{{paramName}}}: {{{dataType}}}{{^required}}? = null{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) : {{#returnType}}{{{returnType}}}{{#nullableReturnType}}?{{/nullableReturnType}}{{/returnType}}{{^returnType}}Unit{{/returnType}} {", "originalCommit": "19b71dc2171fbe89d7f6725e0726410282998fa2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0MjU4OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7341#discussion_r483542588", "bodyText": "I use the sortParamsByRequiredFlag to false, because of some bugs caused by the reorder of the parameters in the past, so I agree with the new flag, to ensure the correct behaviour of sortParamsByRequiredFlag.", "author": "4brunu", "createdAt": "2020-09-04T10:52:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzNjg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0OTI0Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7341#discussion_r483549247", "bodyText": "Unless I have misunderstood something, there is no breakage within kotlin from adding = null. You can pass positioned params for a method that has defaulted params before others:\nprivate fun catOld(optionalParam: String?, requiredParam: Int, optionalParam2: String?): String {\n    return \"$optionalParam$requiredParam$optionalParam2\"\n}\n\nprivate fun cat(optionalParam: String? = null, requiredParam: Int, optionalParam2: String? = null): String {\n    return \"$optionalParam$requiredParam$optionalParam2\"\n}\n\n@Test\nfun testOptionalFirst() {\n    // Without defaults, all 3 values must be specified\n    assertEquals(\"123\", catOld(\"1\", 2, \"3\"))\n    assertEquals(\"123\", catOld(\"1\", 2, optionalParam2 = \"3\"))\n    assertEquals(\"123\", catOld(\"1\", requiredParam = 2, optionalParam2 = \"3\"))\n    assertEquals(\"123\", catOld(optionalParam = \"1\", requiredParam = 2, optionalParam2 = \"3\"))\n\n    // With defaults, the same possible combinations are still valid\n    assertEquals(\"123\", cat(\"1\", 2, \"3\"))\n    assertEquals(\"123\", cat(\"1\", 2, optionalParam2 = \"3\"))\n    assertEquals(\"123\", cat(\"1\", requiredParam = 2, optionalParam2 = \"3\"))\n    assertEquals(\"123\", cat(optionalParam = \"1\", requiredParam = 2, optionalParam2 = \"3\"))\n\n    // plus:\n    assertEquals(\"12null\", cat(\"1\", 2))\n    assertEquals(\"12null\", cat(\"1\", requiredParam = 2))\n    assertEquals(\"12null\", cat(optionalParam = \"1\", requiredParam = 2))\n    assertEquals(\"null23\", cat(requiredParam = 2, optionalParam2 = \"3\"))\n}\n\n(Was this a recent kotlin change?)\nThe Java overloads concern sounds legitimate (and therefore also the ability to turn the behavior off)\nI am not sure when I will be able to squeeze in the new config param change, so I am going to separate the null defaulting from this PR, so as to not block the null string fix.", "author": "isycat", "createdAt": "2020-09-04T11:08:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzNjg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY4NzY4MQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7341#discussion_r483687681", "bodyText": "(PR updated with null defaulting removed and generated petstore changes)", "author": "isycat", "createdAt": "2020-09-04T15:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzNjg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg3ODc3NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7341#discussion_r489878774", "bodyText": "(Was this a recent kotlin change?)\n\nIt's been around a while, but I recall being surprised by it when I started using Kotlin because it wasn't documented. The documentation was later updated August 2017 to clarify the corner case. I think most people who started learning Kotlin before this doc update probably don't know it's even a thing, most likely because we're all using named args for clarity :)", "author": "jimschubert", "createdAt": "2020-09-17T02:05:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzNjg0MA=="}], "type": "inlineReview"}, {"oid": "b2877e81724784b4b8c99d1e967ae79403290901", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b2877e81724784b4b8c99d1e967ae79403290901", "message": "Remove null-defaulting behavior", "committedDate": "2020-09-04T11:16:54Z", "type": "commit"}]}