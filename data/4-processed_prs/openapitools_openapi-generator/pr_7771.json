{"pr_number": 7771, "pr_title": "[typescript-rxjs] Added support for servers", "pr_createdAt": "2020-10-20T19:37:22Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/7771", "timeline": [{"oid": "2b41a6e0b43331c964c718939d90cc001e77a765", "url": "https://github.com/OpenAPITools/openapi-generator/commit/2b41a6e0b43331c964c718939d90cc001e77a765", "message": "regenerated typescript-rxjs samples", "committedDate": "2020-10-20T20:57:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA2NjU3NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7771#discussion_r509066574", "bodyText": "better only export the servers variable\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            export const server{{-index}} = new ServerConfiguration<{ {{#variables}} \"{{name}}\": {{#enumValues}}\"{{.}}\"{{^-last}} | {{/-last}}{{/enumValues}}{{^enumValues}}string{{/enumValues}}{{^-last}},{{/-last}} {{/variables}} }>(\"{{url}}\", { {{#variables}} \"{{name}}\": \"{{defaultValue}}\" {{^-last}},{{/-last}}{{/variables}} }, \"{{description}}\")\n          \n          \n            \n            const server{{-index}} = new ServerConfiguration<{ {{#variables}} \"{{name}}\": {{#enumValues}}\"{{.}}\"{{^-last}} | {{/-last}}{{/enumValues}}{{^enumValues}}string{{/enumValues}}{{^-last}},{{/-last}} {{/variables}} }>(\"{{url}}\", { {{#variables}} \"{{name}}\": \"{{defaultValue}}\" {{^-last}},{{/-last}}{{/variables}} }, \"{{description}}\")\n          \n      \n    \n    \n  \n\nand add server to the reserved keywords in \n  \n    \n      openapi-generator/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptRxjsClientCodegen.java\n    \n    \n        Lines 331 to 347\n      in\n      240c046\n    \n    \n    \n    \n\n        \n          \n           private void addExtraReservedWords() { \n        \n\n        \n          \n               this.reservedWords.add(\"BASE_PATH\"); \n        \n\n        \n          \n               this.reservedWords.add(\"BaseAPI\"); \n        \n\n        \n          \n               this.reservedWords.add(\"COLLECTION_FORMATS\"); \n        \n\n        \n          \n               this.reservedWords.add(\"ConfigurationParameters\"); \n        \n\n        \n          \n               this.reservedWords.add(\"Configuration\"); \n        \n\n        \n          \n               this.reservedWords.add(\"HttpMethod\"); \n        \n\n        \n          \n               this.reservedWords.add(\"HttpHeaders\"); \n        \n\n        \n          \n               this.reservedWords.add(\"HttpQuery\"); \n        \n\n        \n          \n               this.reservedWords.add(\"HttpBody\"); \n        \n\n        \n          \n               this.reservedWords.add(\"RequestArgs\"); \n        \n\n        \n          \n               this.reservedWords.add(\"RequestOpts\"); \n        \n\n        \n          \n               this.reservedWords.add(\"ResponseArgs\"); \n        \n\n        \n          \n               this.reservedWords.add(\"Middleware\"); \n        \n\n        \n          \n               this.reservedWords.add(\"AjaxRequest\"); \n        \n\n        \n          \n               this.reservedWords.add(\"AjaxResponse\"); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nto avoid naming conflicts with existing parameters", "author": "macjohnny", "createdAt": "2020-10-21T07:57:08Z", "path": "modules/openapi-generator/src/main/resources/typescript-rxjs/servers.mustache", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ *\n+ * Represents the configuration of a server including its\n+ * url template and variable configuration based on the url.\n+ *\n+ */\n+export class ServerConfiguration<T extends { [key: string]: string }> {\n+    public constructor(private url: string, private variableConfiguration: T, private description: string) {}\n+\n+    /**\n+     * Sets the value of the variables of this server.\n+     *\n+     * @param variableConfiguration a partial variable configuration for the variables contained in the url\n+     */\n+    public setVariables(variableConfiguration: Partial<T>) {\n+        Object.assign(this.variableConfiguration, variableConfiguration);\n+    }\n+\n+\tpublic getConfiguration(): T {\n+\t\treturn this.variableConfiguration\n+\t}\n+\n+\tpublic getDescription(): string {\n+\t\treturn this.description\n+\t}\n+\n+\t/**\n+\t * Constructions the URL this server using the url with variables\n+\t * replaced with their respective values\n+\t */\t\n+\tpublic getUrl(): string {\n+\t\tlet replacedUrl = this.url;\n+\t\tfor (const key in this.variableConfiguration) {\n+\t\t\tvar re = new RegExp(\"{\" + key + \"}\",\"g\");\n+\t\t\treplacedUrl = replacedUrl.replace(re, this.variableConfiguration[key]);\n+\t\t}\n+\t\treturn replacedUrl\n+\t}\n+}\n+\n+{{#servers}}\n+export const server{{-index}} = new ServerConfiguration<{ {{#variables}} \"{{name}}\": {{#enumValues}}\"{{.}}\"{{^-last}} | {{/-last}}{{/enumValues}}{{^enumValues}}string{{/enumValues}}{{^-last}},{{/-last}} {{/variables}} }>(\"{{url}}\", { {{#variables}} \"{{name}}\": \"{{defaultValue}}\" {{^-last}},{{/-last}}{{/variables}} }, \"{{description}}\")", "originalCommit": "2b41a6e0b43331c964c718939d90cc001e77a765", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2063018a5677ac8ddf26b3bb72d690cd719d71a7", "url": "https://github.com/OpenAPITools/openapi-generator/commit/2063018a5677ac8ddf26b3bb72d690cd719d71a7", "message": "adding multiple servers support to typescript-rxjs", "committedDate": "2020-10-21T15:22:31Z", "type": "commit"}, {"oid": "32e6b950c01384268d96f796a917f89b7d5e35cd", "url": "https://github.com/OpenAPITools/openapi-generator/commit/32e6b950c01384268d96f796a917f89b7d5e35cd", "message": "regenerated typescript-rxjs samples", "committedDate": "2020-10-21T15:45:44Z", "type": "commit"}, {"oid": "32e6b950c01384268d96f796a917f89b7d5e35cd", "url": "https://github.com/OpenAPITools/openapi-generator/commit/32e6b950c01384268d96f796a917f89b7d5e35cd", "message": "regenerated typescript-rxjs samples", "committedDate": "2020-10-21T15:45:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk2Nzk3Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7771#discussion_r509967972", "bodyText": "will there always be servers?\naccording to https://swagger.io/specification/#fixed-fields\nservers is\nAn array of Server Objects, which provide connectivity information to a target server. If the servers property is not provided, or is an empty array, the default value would be a Server Object with a url value of /.\n\nDid you check this works if we have an empty list?", "author": "macjohnny", "createdAt": "2020-10-22T08:17:59Z", "path": "modules/openapi-generator/src/main/resources/typescript-rxjs/runtime.mustache", "diffHunk": "@@ -3,8 +3,9 @@\n import { Observable, of{{#withProgressSubscriber}}, Subscriber{{/withProgressSubscriber}} } from 'rxjs';\n import { ajax, AjaxRequest, AjaxResponse } from 'rxjs/ajax';\n import { map, concatMap } from 'rxjs/operators';\n+import { servers } from './servers';\n \n-export const BASE_PATH = '{{{basePath}}}'.replace(/\\/+$/, '');\n+export const BASE_PATH = servers[0].getUrl();", "originalCommit": "32e6b950c01384268d96f796a917f89b7d5e35cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAwMzI2Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7771#discussion_r510003263", "bodyText": "Yes, we do the same. If no server is provided, we will get:\nconst server1 = new ServerConfiguration<{  }>(\"/\", {  }, \"\")\n\nexport const servers = [server1];\n\nRegarding the previous replace statement -> we could end up with //endpoint\nWhere we have two / following each other. In principle this is not expected, but normally works.\nThe experimental typescript generator would have double slashes as well. What is your take on it? Shall we make sure we have no trailing /?", "author": "BenICE", "createdAt": "2020-10-22T09:10:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk2Nzk3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAwOTA0NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7771#discussion_r510009045", "bodyText": "good point, but I guess the double slash issue is already present with the current implementation. Maybe you could open an issue for that and handle this separately? so we could merge this PR", "author": "macjohnny", "createdAt": "2020-10-22T09:18:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk2Nzk3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAzMTUyMA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7771#discussion_r510031520", "bodyText": "Agreed, lets merge.\nI will check if I have a minute or two the next days, to open a PR...I guess it is anyway not so urgent", "author": "BenICE", "createdAt": "2020-10-22T09:52:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk2Nzk3Mg=="}], "type": "inlineReview"}]}