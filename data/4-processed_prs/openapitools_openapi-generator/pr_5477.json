{"pr_number": 5477, "pr_title": "[C] fix issues on enums", "pr_createdAt": "2020-02-28T14:30:31Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/5477", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4MjkwNA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r385782904", "bodyText": "Here, the first value when the code is generated will be the actual enum value and its respective number will be 0, so if the enum is mandatory or optional in both cases the enum will be sent. But to avoid this we can make the array start with { NULL , and rest of values}. This will make NULL as 0, so when the enum is optional you can actually skip sending the enum value.", "author": "zhemant", "createdAt": "2020-02-28T16:09:33Z", "path": "modules/openapi-generator/src/main/resources/C-libcurl/api-body.mustache", "diffHunk": "@@ -11,6 +11,95 @@\n     snprintf(dst, 256, \"%ld\", (long int)(src));\\\n }while(0)\n \n+{{#operations}}\n+{{#operation}}\n+{{#allParams}}\n+\n+{{#isEnum}}\n+// Functions for enum {{enumName}} for {{{classname}}}_{{{operationId}}}\n+\n+\n+char* {{enumName}}_ToString({{baseName}}_e {{enumName}}){\n+char *{{enumName}}Array[] =  { {{#allowableValues}}{{#enumVars}}\"{{{value}}}\"{{^-last}},{{/-last}}{{/enumVars}}{{/allowableValues}} };", "originalCommit": "71a827bbc3288846993d863cec28e9f1dfd9a905", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4Mzg3OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r385783879", "bodyText": "ok!", "author": "michelealbano", "createdAt": "2020-02-28T16:11:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4MjkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4NDQ4MQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r385784481", "bodyText": "Same for model-body.mustache?", "author": "michelealbano", "createdAt": "2020-02-28T16:12:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4MjkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4NTE5NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r385785194", "bodyText": "yes, same for model-body and model-header. If you can push that also it would be great.", "author": "zhemant", "createdAt": "2020-02-28T16:13:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4MjkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5NjAyMg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r385796022", "bodyText": "NULL is a token and cannot be used. I am worried about using NOTHING or UNDEFINED because they could be also values in the enum.\nHow do you suggest to call the first \"NULL\" element?", "author": "michelealbano", "createdAt": "2020-02-28T16:33:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4MjkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5NzE1Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r385797156", "bodyText": "I could just decorate \"NULL\" and it could work.\nOn the other hand, the String corresponding to the NULL enum would be better be \"\", since a lot of user code does strcmp etc. Do you agree?", "author": "michelealbano", "createdAt": "2020-02-28T16:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4MjkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkxMzY2OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r385913669", "bodyText": "These are my opinions and things which I have learned while using the code generator.\nyou could do something like this:\ntypedef enum  { {{projectName}}_{{classVarName}}_NULL = 0,{{#enumVars}} {{projectName}}_{{classVarName}}_{{{value}}} {{^-last}},{{/-last}}{{/enumVars}} } {{classname}}_e;\nIn case of keywords, you have to escape them. So how it will be is like in ToString and FromString, the actual values will be present as these are sent to the destination, and these values are in string format so they will not create problems.  and in model-header, where the enum is defined, it will contain escaped/prefixed values then it will not conflict with C keywords or duplicate values.\nHere is an model-body code snippet\nchar* {{classname}}_ToString({{classname}}_e {{classname}}){\nchar *{{classname}}Array[] =  { \"NULL\", {{#allowableValues}}{{#enumVars}}\"{{{value}}}\"{{^-last}},{{/-last}}{{/enumVars}}{{/allowableValues}} };\n    return {{classname}}Array[{{classname}}];\n}\n\n{{classname}}_e {{classname}}_FromString(char* {{classname}}){\n    int stringToReturn = 0;\n    char *{{classname}}Array[] =  {\"NULL\",  {{#allowableValues}}{{#enumVars}}\"{{{value}}}\"{{^-last}},{{/-last}}{{/enumVars}}{{/allowableValues}} };\n    size_t sizeofArray = sizeof({{classname}}Array) / sizeof({{classname}}Array[0]);\n    while(stringToReturn < sizeofArray) {\n        if(strcmp({{classname}}, {{classname}}Array[stringToReturn]) == 0) {\n            return stringToReturn;\n        }\n        stringToReturn++;\n    }\n    return 0;\n}\n\nmodel-header snippet:\ntypedef enum  { {{projectName}}_{{classVarName}}_NULL = 0,{{#enumVars}} {{projectName}}_{{classVarName}}_{{{value}}} {{^-last}},{{/-last}}{{/enumVars}} } {{classname}}_e;\n\nThere is a reason I am using {{projectName}}_{{classVarName}}_{{{value}}}, the codebase I have contains a lot of repeated enum values definitions and C keywords, to overcome all these issues I have prefixed everything thing(functions, enums, etc) with these prefixes.\nAlso for your second comment, string compare will not create problems as enums in the code works as int values and if there is strcmp used anywhere in the code except FromString function then it is not good.", "author": "zhemant", "createdAt": "2020-02-28T20:44:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4MjkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyMzUwOQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r386023509", "bodyText": "The second comment was about using NULL, \"\" or \"NULL\", and in fact with \"NULL\" everything is fine.\nThe approach\ntypedef enum  { {{projectName}}_{{classVarName}}_NULL = 0,{{#enumVars}} {{projectName}}_{{classVarName}}_{{{value}}} {{^-last}},{{/-last}}{{/enumVars}} } {{classname}}_e;\nit does not work in the use case where the values are repeated among two enums used in the same model, e.g.:\n  schemas:\n    '200':\n      title: Successful response\n      type: object\n      properties:\n        weather:\n          type: string\n          description: (more info Weather condition codes)\n        secure:\n          type: string\n          enum:\n            - NOT_SECURE\n            - CERTIFICATE\n            - TOKEN\n        secure2:\n          type: string\n          enum:\n            - NOT_SECURE\n            - CERTIFICATE\n            - TOKEN\n\nThus, we need at least {{enumName}} in the decoration.\nThen, if there is repetition between different models, and we need also {{classVarName}}.\nIf we put there also {{projectName}}, an example of enum name is now openweathermap_api__200_SECURE_NOT_SECURE. Isn't it a little heavy? Would it be better without {{projectName}}?", "author": "michelealbano", "createdAt": "2020-02-29T12:01:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4MjkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODYxMA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r386138610", "bodyText": "It should be ok now. Anyway, I have not covered classes enums. I will work on that on a future PR, after somebody provides YAMLs to play against.", "author": "michelealbano", "createdAt": "2020-03-01T20:37:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4MjkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzNDA5Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r386834093", "bodyText": "@zhemant Is it ok the way I changed the code?", "author": "michelealbano", "createdAt": "2020-03-03T07:15:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4MjkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIyNDM2Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r392224363", "bodyText": "@michelealbano Yes it is okay. Sorry for late replies", "author": "zhemant", "createdAt": "2020-03-13T13:24:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4MjkwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNTY2NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r386005665", "bodyText": "Hello @michelealbano @zhemant\nActually, for the test case Petstore, the function involve enum is:\nlist_t*\nPetAPI_findPetsByStatus(apiClient_t *apiClient ,list_t * status);\n\nThe status is a list rather than an enum, so it does not need add the code in api-header and api-body.\nyaml snippet of petstore.yaml\nparameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: true\n          type: array\n          items:\n            type: string\n            enum:\n              - available\n              - pending\n              - sold\n\nMaybe we need another template code to control whether generating the enum related code in api header and body.", "author": "ityuhui", "createdAt": "2020-02-29T06:14:36Z", "path": "samples/client/petstore/c/api/PetAPI.c", "diffHunk": "@@ -10,6 +10,83 @@\n     char dst[256];\\\n     snprintf(dst, 256, \"%ld\", (long int)(src));\\\n }while(0)\n+\n+\n+\n+\n+\n+\n+\n+\n+// Functions for enum STATUS for PetAPI_findPetsByStatus\n+", "originalCommit": "637564baacc2b7fbc03d5aedc6bf59fe9a5b90b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0MTE5MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r386041190", "bodyText": "But this is only for enum, what if there is a struct. Even the structs are not generated from the path parameters. I remember I was told that other generators support creating models from path params, I think we should do same. So, in this case, a model will be generated for enum and it will be handled as a list of models in api-body . If we have two api and they have same struct defined in path params, then it should be generated as a model rather than putting model code in api-files", "author": "zhemant", "createdAt": "2020-02-29T17:06:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNTY2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDE3OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r386074178", "bodyText": "Hi @zhemant\nI agree with you that the enum in API path should be created in api-body for this case.\nBut I have a little question:\nTake the petstore as an example,  there is an enum \"pet_status_e\" created by model-body, it can be used for\nlist_t*\nPetAPI_findPetsByStatus(apiClient_t *apiClient ,list_t * status);\n\nUser can use pet_status_e for the \"status\" of PetAPI_findPetsByStatus\nThere is no need to create\ntypedef enum  {  STATUS_available, STATUS_pending, STATUS_sold } status_e;\n\nin api-body.\nIt is duplicated but I admit it is not a big deal.", "author": "ityuhui", "createdAt": "2020-03-01T03:48:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNTY2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0ODQzOQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r386148439", "bodyText": "Should I do something for this thread? Please try out the C generator as it is now, and tell me if you like the result.", "author": "michelealbano", "createdAt": "2020-03-01T22:48:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNTY2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ3MzY5MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r389473690", "bodyText": "Hello @michelealbano\nI don't understand why the generated functions (findPetsByStatus_STATUS_ToString, openapi_petstore_findPetsByStatus_status_e ) are \"static\" ?  (because I found they are not used in this source file, and users cannot use these functions in their source codes )\nActually, I agree with your commit first time, though it is duplicated for petstore sample, but it is acceptable.\nAnd why need add \"{{#allowableValues}}\" ?", "author": "ityuhui", "createdAt": "2020-03-09T05:54:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNTY2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUwMTg3MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r389501870", "bodyText": "Hi,\nI made the functions \"static\" since I did not want to fill up the namespace too much. If they were not static, they would have to be heavily decorated. By the way, I see no use cases where we need *_convertToJSON and *_parseFromJSON for the enums, since the JSONification is done on the whole models. Should I remove enums' *_convertToJSON and *_parseFromJSON from the api-body, like I did with the model-body?\nI added {{#allowableValues}} since the models' dump is:\n      \"allowableValues\" : {\n        \"enumVars\" : [ {\n          \"name\" : \"NOTSECURE\",\n          \"isString\" : false,\n          \"value\" : \"NOT_SECURE\"\n        }, {\n          \"name\" : \"CERTIFICATE\",\n          \"isString\" : false,\n          \"value\" : \"CERTIFICATE\"\n        }, {\n          \"name\" : \"TOKEN\",\n          \"isString\" : false,\n          \"value\" : \"TOKEN\"\n        } ],\n        \"values\" : [ \"NOT_SECURE\", \"CERTIFICATE\", \"TOKEN\" ]\n      }```\nThus, I had to go \"inside\" allowableValues to retrieve the possible values for the enums.", "author": "michelealbano", "createdAt": "2020-03-09T07:47:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNTY2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExNTY4OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r390115689", "bodyText": "Yes. I think you can if they are not needed for now.\n\nShould I remove enums' *_convertToJSON and *_parseFromJSON from the api-body, like I did with the model-body?", "author": "ityuhui", "createdAt": "2020-03-10T06:28:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNTY2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMyNjM2Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r390326366", "bodyText": "Done", "author": "michelealbano", "createdAt": "2020-03-10T13:50:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNTY2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDI2MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r386074260", "bodyText": "Hello @michelealbano\nThere are so many blank lines here. Could you please remove them ?", "author": "ityuhui", "createdAt": "2020-03-01T03:49:58Z", "path": "modules/openapi-generator/src/main/resources/C-libcurl/api-body.mustache", "diffHunk": "@@ -11,6 +11,91 @@\n     snprintf(dst, 256, \"%ld\", (long int)(src));\\\n }while(0)\n \n+{{#operations}}\n+{{#operation}}\n+{{#allParams}}\n+\n+{{#isEnum}}\n+// Functions for enum {{enumName}} for {{{classname}}}_{{{operationId}}}\n+\n+\n+char* {{enumName}}_ToString({{baseName}}_e {{enumName}}){\n+char *{{enumName}}Array[] =  { {{#allowableValues}}{{#enumVars}}\"{{{value}}}\"{{^-last}},{{/-last}}{{/enumVars}}{{/allowableValues}} };\n+    return {{enumName}}Array[{{enumName}}];\n+}\n+\n+{{baseName}}_e {{enumName}}_FromString(char* {{enumName}}){\n+    int stringToReturn = 0;\n+    char *{{enumName}}Array[] =  { {{#allowableValues}}{{#enumVars}}\"{{{value}}}\"{{^-last}},{{/-last}}{{/enumVars}}{{/allowableValues}} };\n+    size_t sizeofArray = sizeof({{enumName}}Array) / sizeof({{enumName}}Array[0]);\n+    while(stringToReturn < sizeofArray) {\n+        if(strcmp({{enumName}}, {{enumName}}Array[stringToReturn]) == 0) {\n+            return stringToReturn;\n+        }\n+        stringToReturn++;\n+    }\n+    return 0;\n+}\n+\n+cJSON *{{enumName}}_convertToJSON({{baseName}}_e {{enumName}}) {\n+cJSON *item = cJSON_CreateObject();\n+{{#isString}}\n+    if(cJSON_AddStringToObject(item, \"{{{paramName}}}\", {{{enumName}}}_ToString({{{enumName}}})) == NULL) {\n+        goto fail;\n+    }\n+{{/isString}}\n+{{#isNumeric}}\n+    if(cJSON_AddNumberToObject(item, \"{{{paramName}}}\", {{{enumName}}}) == NULL) {\n+        goto fail;\n+    }\n+{{/isNumeric}}\n+    return item;\n+    fail:\n+    cJSON_Delete(item);\n+    return NULL;\n+}\n+\n+{{baseName}}_e {{enumName}}_parseFromJSON(cJSON *{{enumName}}JSON){\n+\n+{{{baseName}}}_e {{enumName}}Variable = 0;\n+{{#isNumeric}}\n+cJSON *{{{enumName}}}Var = cJSON_GetObjectItemCaseSensitive({{enumName}}JSON, \"{{{paramName}}}\");\n+if(!cJSON_IsNumber({{{enumName}}}Var))\n+{\n+    goto end;\n+}\n+{{/isNumeric}}\n+{{#isString}}\n+cJSON *{{{enumName}}}Var = cJSON_GetObjectItemCaseSensitive({{enumName}}JSON, \"{{{paramName}}}\");\n+if(!cJSON_IsString({{{enumName}}}Var) || ({{{enumName}}}Var->valuestring == NULL)){\n+    goto end;\n+}\n+{{enumName}}Variable = {{enumName}}_FromString({{{enumName}}}Var->valuestring);\n+{{/isString}}\n+return {{enumName}}Variable;\n+end:\n+return 0;\n+}\n+{{/isEnum}}\n+\n+{{/allParams}}\n+{{/operation}}\n+{{/operations}}\n+\n+\n+", "originalCommit": "637564baacc2b7fbc03d5aedc6bf59fe9a5b90b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzMzQ1NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r386133454", "bodyText": "Done", "author": "michelealbano", "createdAt": "2020-03-01T19:25:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDI2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ5MzkxOA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r390493918", "bodyText": "@michelealbano Shall we remove these System.out.println?", "author": "wing328", "createdAt": "2020-03-10T17:39:50Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/CLibcurlClientCodegen.java", "diffHunk": "@@ -617,11 +617,17 @@ public void preprocessOpenAPI(OpenAPI openAPI) {\n         } else {\n             setProjectName(defaultProjectName);\n         }\n+        System.out.println(\"michele was here preprocessOpenAPI \"+projectName);\n         additionalProperties.put(PROJECT_NAME, projectName);\n+        System.out.println(\"michele was here preprocessOpenAPI after \"+projectName);\n     }\n \n     public void setProjectName(String projectName) {\n-        this.projectName = underscore(projectName.toLowerCase(Locale.ROOT));\n+        System.out.println(\"michele was here setProjectName this1 \"+this.projectName);\n+        System.out.println(\"michele was here setProjectName no1 \"+projectName);\n+        this.projectName = underscore(sanitizeName(projectName.toLowerCase(Locale.ROOT)));\n+        System.out.println(\"michele was here setProjectName this2 \"+this.projectName);\n+        System.out.println(\"michele was here setProjectName no2 \"+projectName);", "originalCommit": "d3c6998e2b2463a5765202cde414e28d7681f7a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2MjU3NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r390562574", "bodyText": "OUCH! I changed the .java to sanitize the input and I forgot to remove them!", "author": "michelealbano", "createdAt": "2020-03-10T19:34:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ5MzkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2NjMwOA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5477#discussion_r390566308", "bodyText": "Done", "author": "michelealbano", "createdAt": "2020-03-10T19:41:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ5MzkxOA=="}], "type": "inlineReview"}, {"oid": "e568f73b3934109594a5f7e105efd4794516ef6f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e568f73b3934109594a5f7e105efd4794516ef6f", "message": "PR to solve 2 open issues on enums:\nIssue 5091 needs to generate enums also when the enum is directly in a param to a API call, instead than in a model. I did that by copying and adapting enum code from *model* to *api*\nIssue 4293 needs to decorate enums, for when enum names or enum values are repeated over the yaml definition.", "committedDate": "2020-03-12T16:26:45Z", "type": "commit"}, {"oid": "c3fa511358317fa391181852f6540c42db0057d4", "url": "https://github.com/OpenAPITools/openapi-generator/commit/c3fa511358317fa391181852f6540c42db0057d4", "message": "PR to solve 2 open issues on enums:\nIssue 5091 needs to generate enums also when the enum is directly in a param to a API call, instead than in a model. I did that by copying and adapting enum code from *model* to *api*\nIssue 4293 needs to decorate enums, for when enum names or enum values are repeated over the yaml definition.", "committedDate": "2020-03-12T16:40:44Z", "type": "commit"}, {"oid": "54a95d84890ae3fc60d4f0bddd307e3bc7f79a3d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/54a95d84890ae3fc60d4f0bddd307e3bc7f79a3d", "message": "Enums decorated: with {{projectName}}_{{classVarName}}_{{enumName}}_ in the models, with {{projectName}}_{{classVarName}}_{{enumName}}_ in the operations.", "committedDate": "2020-03-12T16:43:50Z", "type": "commit"}, {"oid": "1400a8e46c71ca639203fbcabb49c876b8dbc4f7", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1400a8e46c71ca639203fbcabb49c876b8dbc4f7", "message": "Changes to the c client:\n- Removed white space.\n- Removed ToJSON and FromJSON function for the enums, since they are not used\n- Sanitized project name in the .java file. For example, this solves a problem with the issue #2338, where the yaml file had title: \"Skycoin REST API.\"", "committedDate": "2020-03-12T16:46:07Z", "type": "commit"}, {"oid": "bfdd7cff4949c00252b50b97841b81d7873a2c7b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/bfdd7cff4949c00252b50b97841b81d7873a2c7b", "message": "Changes to the c client:\n- Removed white space.\n- Removed ToJSON and FromJSON function for the enums, since they are not used\n- Sanitized project name in the .java file. For example, this solves a problem with the issue #2338, where the yaml file had title: \"Skycoin REST API.\"", "committedDate": "2020-03-12T16:47:44Z", "type": "commit"}, {"oid": "bfdd7cff4949c00252b50b97841b81d7873a2c7b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/bfdd7cff4949c00252b50b97841b81d7873a2c7b", "message": "Changes to the c client:\n- Removed white space.\n- Removed ToJSON and FromJSON function for the enums, since they are not used\n- Sanitized project name in the .java file. For example, this solves a problem with the issue #2338, where the yaml file had title: \"Skycoin REST API.\"", "committedDate": "2020-03-12T16:47:44Z", "type": "forcePushed"}]}