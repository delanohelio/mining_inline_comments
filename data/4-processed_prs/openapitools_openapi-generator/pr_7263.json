{"pr_number": 7263, "pr_title": "[Java][Native] Support oneOf/anyOf schemas", "pr_createdAt": "2020-08-20T17:30:52Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/7263", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQxOTc0Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7263#discussion_r474419747", "bodyText": "typo", "author": "jfeltesse-mdsol", "createdAt": "2020-08-21T05:41:21Z", "path": "modules/openapi-generator/src/main/resources/Java/libraries/native/anyof_model.mustache", "diffHunk": "@@ -0,0 +1,202 @@\n+import javax.ws.rs.core.GenericType;\n+import javax.ws.rs.core.Response;\n+import java.io.IOException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+import {{invokerPackage}}.JSON;\n+\n+{{>additionalModelTypeAnnotations}}{{>generatedAnnotation}}{{>xmlAnnotation}}\n+@JsonDeserialize(using={{classname}}.{{classname}}Deserializer.class)\n+@JsonSerialize(using = {{classname}}.{{classname}}Serializer.class)\n+public class {{classname}} extends AbstractOpenApiSchema{{#vendorExtensions.x-implements}}, {{{.}}}{{/vendorExtensions.x-implements}} {\n+    private static final Logger log = Logger.getLogger({{classname}}.class.getName());\n+\n+    public static class {{classname}}Serializer extends StdSerializer<{{classname}}> {\n+        public {{classname}}Serializer(Class<{{classname}}> t) {\n+            super(t);\n+        }\n+\n+        public {{classname}}Serializer() {\n+            this(null);\n+        }\n+\n+        @Override\n+        public void serialize({{classname}} value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {\n+            jgen.writeObject(value.getActualInstance());\n+        }\n+    }\n+\n+    public static class {{classname}}Deserializer extends StdDeserializer<{{classname}}> {\n+        public {{classname}}Deserializer() {\n+            this({{classname}}.class);\n+        }\n+\n+        public {{classname}}Deserializer(Class<?> vc) {\n+            super(vc);\n+        }\n+\n+        @Override\n+        public {{classname}} deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n+            JsonNode tree = jp.readValueAsTree();\n+\n+            Object deserialized = null;\n+            {{#discriminator}}\n+            Class<?> cls = JSON.getClassForElement(tree, {{classname}}.class);\n+            if (cls != null) {\n+                // When the OAS schema includes a discriminator, use the discriminator value to\n+                // discriminate the anyOf schemas.\n+                // Get the discriminator mapping value to get the class.\n+                deserialized = tree.traverse(jp.getCodec()).readValueAs(cls);\n+                {{classname}} ret = new {{classname}}();\n+                ret.setActualInstance(deserialized);\n+                return ret;\n+            }\n+            {{/discriminator}}\n+            {{#anyOf}}\n+            // deserialzie {{{.}}}", "originalCommit": "45da4d0a29e0376b60a298710cca32dad5a60b59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4Mjk3Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7263#discussion_r474782976", "bodyText": "fixed in 675545c", "author": "bgong-mdsol", "createdAt": "2020-08-21T15:50:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQxOTc0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQxOTkxNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7263#discussion_r474419917", "bodyText": "jersey2 reference here?", "author": "jfeltesse-mdsol", "createdAt": "2020-08-21T05:41:59Z", "path": "modules/openapi-generator/src/main/resources/Java/libraries/native/anyof_model.mustache", "diffHunk": "@@ -0,0 +1,202 @@\n+import javax.ws.rs.core.GenericType;\n+import javax.ws.rs.core.Response;\n+import java.io.IOException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+import {{invokerPackage}}.JSON;\n+\n+{{>additionalModelTypeAnnotations}}{{>generatedAnnotation}}{{>xmlAnnotation}}\n+@JsonDeserialize(using={{classname}}.{{classname}}Deserializer.class)\n+@JsonSerialize(using = {{classname}}.{{classname}}Serializer.class)\n+public class {{classname}} extends AbstractOpenApiSchema{{#vendorExtensions.x-implements}}, {{{.}}}{{/vendorExtensions.x-implements}} {\n+    private static final Logger log = Logger.getLogger({{classname}}.class.getName());\n+\n+    public static class {{classname}}Serializer extends StdSerializer<{{classname}}> {\n+        public {{classname}}Serializer(Class<{{classname}}> t) {\n+            super(t);\n+        }\n+\n+        public {{classname}}Serializer() {\n+            this(null);\n+        }\n+\n+        @Override\n+        public void serialize({{classname}} value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {\n+            jgen.writeObject(value.getActualInstance());\n+        }\n+    }\n+\n+    public static class {{classname}}Deserializer extends StdDeserializer<{{classname}}> {\n+        public {{classname}}Deserializer() {\n+            this({{classname}}.class);\n+        }\n+\n+        public {{classname}}Deserializer(Class<?> vc) {\n+            super(vc);\n+        }\n+\n+        @Override\n+        public {{classname}} deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n+            JsonNode tree = jp.readValueAsTree();\n+\n+            Object deserialized = null;\n+            {{#discriminator}}\n+            Class<?> cls = JSON.getClassForElement(tree, {{classname}}.class);\n+            if (cls != null) {\n+                // When the OAS schema includes a discriminator, use the discriminator value to\n+                // discriminate the anyOf schemas.\n+                // Get the discriminator mapping value to get the class.\n+                deserialized = tree.traverse(jp.getCodec()).readValueAs(cls);\n+                {{classname}} ret = new {{classname}}();\n+                ret.setActualInstance(deserialized);\n+                return ret;\n+            }\n+            {{/discriminator}}\n+            {{#anyOf}}\n+            // deserialzie {{{.}}}\n+            try {\n+                deserialized = tree.traverse(jp.getCodec()).readValueAs({{{.}}}.class);\n+                {{classname}} ret = new {{classname}}();\n+                ret.setActualInstance(deserialized);\n+                return ret;\n+            } catch (Exception e) {\n+                // deserialization failed, continue, log to help debugging\n+                log.log(Level.FINER, \"Input data does not match '{{classname}}'\", e);\n+            }\n+\n+            {{/anyOf}}\n+            throw new IOException(String.format(\"Failed deserialization for {{classname}}: no match found\"));\n+        }\n+\n+        /**\n+         * Handle deserialization of the 'null' value.\n+         */\n+        @Override\n+        public {{classname}} getNullValue(DeserializationContext ctxt) throws JsonMappingException {\n+        {{#isNullable}}\n+            return null;\n+        {{/isNullable}}\n+        {{^isNullable}}\n+            throw new JsonMappingException(ctxt.getParser(), \"{{classname}} cannot be null\");\n+        {{/isNullable}}\n+        }\n+    }\n+\n+    // store a list of schema names defined in anyOf\n+    public final static Map<String, GenericType> schemas = new HashMap<String, GenericType>();\n+\n+    public {{classname}}() {\n+        super(\"anyOf\", {{#isNullable}}Boolean.TRUE{{/isNullable}}{{^isNullable}}Boolean.FALSE{{/isNullable}});\n+    }\n+{{> libraries/jersey2/additional_properties }}", "originalCommit": "45da4d0a29e0376b60a298710cca32dad5a60b59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4MjkwNg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7263#discussion_r474782906", "bodyText": "updated in 675545c", "author": "bgong-mdsol", "createdAt": "2020-08-21T15:50:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQxOTkxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyMDA5Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7263#discussion_r474420093", "bodyText": "elsewhere in the code the curly brace is on the same line as static", "author": "jfeltesse-mdsol", "createdAt": "2020-08-21T05:42:38Z", "path": "modules/openapi-generator/src/main/resources/Java/libraries/native/JSON.mustache", "diffHunk": "@@ -0,0 +1,273 @@\n+package {{invokerPackage}};\n+\n+{{#threetenbp}}\n+import org.threeten.bp.*;\n+{{/threetenbp}}\n+import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.databind.*;\n+import org.openapitools.jackson.nullable.JsonNullableModule;\n+{{#java8}}\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+{{/java8}}\n+{{#joda}}\n+import com.fasterxml.jackson.datatype.joda.JodaModule;\n+{{/joda}}\n+{{#threetenbp}}\n+import com.fasterxml.jackson.datatype.threetenbp.ThreeTenModule;\n+{{/threetenbp}}\n+{{#models.0}}\n+import {{modelPackage}}.*;\n+{{/models.0}}\n+\n+import java.text.DateFormat;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.ws.rs.core.GenericType;\n+import javax.ws.rs.ext.ContextResolver;\n+\n+{{>generatedAnnotation}}\n+public class JSON implements ContextResolver<ObjectMapper> {\n+  private ObjectMapper mapper;\n+\n+  public JSON() {\n+    mapper = new ObjectMapper();\n+    mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n+    mapper.configure(MapperFeature.ALLOW_COERCION_OF_SCALARS, false);\n+    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true);\n+    mapper.configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, true);\n+    mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n+    mapper.enable(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);\n+    mapper.enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING);\n+    mapper.setDateFormat(new RFC3339DateFormat());\n+    {{#java8}}\n+    mapper.registerModule(new JavaTimeModule());\n+    {{/java8}}\n+    {{#joda}}\n+    mapper.registerModule(new JodaModule());\n+    {{/joda}}\n+    {{#threetenbp}}\n+    ThreeTenModule module = new ThreeTenModule();\n+    module.addDeserializer(Instant.class, CustomInstantDeserializer.INSTANT);\n+    module.addDeserializer(OffsetDateTime.class, CustomInstantDeserializer.OFFSET_DATE_TIME);\n+    module.addDeserializer(ZonedDateTime.class, CustomInstantDeserializer.ZONED_DATE_TIME);\n+    mapper.registerModule(module);\n+    {{/threetenbp}}\n+    JsonNullableModule jnm = new JsonNullableModule();\n+    mapper.registerModule(jnm);\n+  }\n+\n+  /**\n+   * Set the date format for JSON (de)serialization with Date properties.\n+   * @param dateFormat Date format\n+   */\n+  public void setDateFormat(DateFormat dateFormat) {\n+    mapper.setDateFormat(dateFormat);\n+  }\n+\n+  @Override\n+  public ObjectMapper getContext(Class<?> type) {\n+    return mapper;\n+  }\n+\n+  /**\n+   * Get the object mapper\n+   *\n+   * @return object mapper\n+   */\n+  public ObjectMapper getMapper() { return mapper; }\n+\n+  /**\n+   * Returns the target model class that should be used to deserialize the input data.\n+   * The discriminator mappings are used to determine the target model class.\n+   *\n+   * @param node The input data.\n+   * @param modelClass The class that contains the discriminator mappings.\n+   */\n+  public static Class<?> getClassForElement(JsonNode node, Class<?> modelClass) {\n+    ClassDiscriminatorMapping cdm = modelDiscriminators.get(modelClass);\n+    if (cdm != null) {\n+      return cdm.getClassForElement(node, new HashSet<Class<?>>());\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Helper class to register the discriminator mappings.\n+   */\n+  private static class ClassDiscriminatorMapping {\n+    // The model class name.\n+    Class<?> modelClass;\n+    // The name of the discriminator property.\n+    String discriminatorName;\n+    // The discriminator mappings for a model class.\n+    Map<String, Class<?>> discriminatorMappings;\n+\n+    // Constructs a new class discriminator.\n+    ClassDiscriminatorMapping(Class<?> cls, String propertyName, Map<String, Class<?>> mappings) {\n+      modelClass = cls;\n+      discriminatorName = propertyName;\n+      discriminatorMappings = new HashMap<String, Class<?>>();\n+      if (mappings != null) {\n+        discriminatorMappings.putAll(mappings);\n+      }\n+    }\n+\n+    // Return the name of the discriminator property for this model class.\n+    String getDiscriminatorPropertyName() {\n+      return discriminatorName;\n+    }\n+\n+    // Return the discriminator value or null if the discriminator is not\n+    // present in the payload.\n+    String getDiscriminatorValue(JsonNode node) {\n+      // Determine the value of the discriminator property in the input data.\n+      if (discriminatorName != null) {\n+        // Get the value of the discriminator property, if present in the input payload.\n+        node = node.get(discriminatorName);\n+        if (node != null && node.isValueNode()) {\n+          String discrValue = node.asText();\n+          if (discrValue != null) {\n+            return discrValue;\n+          }\n+        }\n+      }\n+      return null;\n+    }\n+\n+    /**\n+     * Returns the target model class that should be used to deserialize the input data.\n+     * This function can be invoked for anyOf/oneOf composed models with discriminator mappings.\n+     * The discriminator mappings are used to determine the target model class.\n+     *\n+     * @param node The input data.\n+     * @param visitedClasses The set of classes that have already been visited.\n+     */\n+    Class<?> getClassForElement(JsonNode node, Set<Class<?>> visitedClasses) {\n+      if (visitedClasses.contains(modelClass)) {\n+        // Class has already been visited.\n+        return null;\n+      }\n+      // Determine the value of the discriminator property in the input data.\n+      String discrValue = getDiscriminatorValue(node);\n+      if (discrValue == null) {\n+        return null;\n+      }\n+      Class<?> cls = discriminatorMappings.get(discrValue);\n+      // It may not be sufficient to return this cls directly because that target class\n+      // may itself be a composed schema, possibly with its own discriminator.\n+      visitedClasses.add(modelClass);\n+      for (Class<?> childClass : discriminatorMappings.values()) {\n+        ClassDiscriminatorMapping childCdm = modelDiscriminators.get(childClass);\n+        if (childCdm == null) {\n+          continue;\n+        }\n+        if (!discriminatorName.equals(childCdm.discriminatorName)) {\n+          discrValue = getDiscriminatorValue(node);\n+          if (discrValue == null) {\n+            continue;\n+          }\n+        }\n+        if (childCdm != null) {\n+          // Recursively traverse the discriminator mappings.\n+          Class<?> childDiscr = childCdm.getClassForElement(node, visitedClasses);\n+          if (childDiscr != null) {\n+            return childDiscr;\n+          }\n+        }\n+      }\n+      return cls;\n+    }\n+  }\n+\n+  /**\n+   * Returns true if inst is an instance of modelClass in the OpenAPI model hierarchy.\n+   *\n+   * The Java class hierarchy is not implemented the same way as the OpenAPI model hierarchy,\n+   * so it's not possible to use the instanceof keyword.\n+   *\n+   * @param modelClass A OpenAPI model class.\n+   * @param inst The instance object.\n+   */\n+  public static boolean isInstanceOf(Class<?> modelClass, Object inst, Set<Class<?>> visitedClasses) {\n+    if (modelClass.isInstance(inst)) {\n+      // This handles the 'allOf' use case with single parent inheritance.\n+      return true;\n+    }\n+    if (visitedClasses.contains(modelClass)) {\n+      // This is to prevent infinite recursion when the composed schemas have\n+      // a circular dependency.\n+      return false;\n+    }\n+    visitedClasses.add(modelClass);\n+    \n+    // Traverse the oneOf/anyOf composed schemas.\n+    Map<String, GenericType> descendants = modelDescendants.get(modelClass);\n+    if (descendants != null) {\n+      for (GenericType childType : descendants.values()) {\n+        if (isInstanceOf(childType.getRawType(), inst, visitedClasses)) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * A map of discriminators for all model classes.\n+   */\n+  private static Map<Class<?>, ClassDiscriminatorMapping> modelDiscriminators = new HashMap<Class<?>, ClassDiscriminatorMapping>();\n+\n+  /**\n+   * A map of oneOf/anyOf descendants for each model class.\n+   */\n+  private static Map<Class<?>, Map<String, GenericType>> modelDescendants = new HashMap<Class<?>, Map<String, GenericType>>();\n+\n+  /**\n+    * Register a model class discriminator.\n+    *\n+    * @param modelClass the model class\n+    * @param discriminatorPropertyName the name of the discriminator property\n+    * @param mappings a map with the discriminator mappings.\n+    */\n+  public static void registerDiscriminator(Class<?> modelClass, String discriminatorPropertyName, Map<String, Class<?>> mappings) {\n+    ClassDiscriminatorMapping m = new ClassDiscriminatorMapping(modelClass, discriminatorPropertyName, mappings);\n+    modelDiscriminators.put(modelClass, m);\n+  }\n+\n+  /**\n+    * Register the oneOf/anyOf descendants of the modelClass.\n+    *\n+    * @param modelClass the model class\n+    * @param descendants a map of oneOf/anyOf descendants.\n+    */\n+  public static void registerDescendants(Class<?> modelClass, Map<String, GenericType> descendants) {\n+    modelDescendants.put(modelClass, descendants);\n+  }\n+\n+  private static JSON json;\n+\n+  static\n+  {", "originalCommit": "45da4d0a29e0376b60a298710cca32dad5a60b59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4Mjc4NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7263#discussion_r474782785", "bodyText": "updated in 675545c", "author": "bgong-mdsol", "createdAt": "2020-08-21T15:50:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyMDA5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyMDM2NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7263#discussion_r474420365", "bodyText": "is this needed? unsure what it means actually but native == JDK 11", "author": "jfeltesse-mdsol", "createdAt": "2020-08-21T05:43:45Z", "path": "modules/openapi-generator/src/main/resources/Java/libraries/native/model.mustache", "diffHunk": "@@ -0,0 +1,66 @@\n+{{>licenseInfo}}\n+\n+package {{package}};\n+\n+{{#useReflectionEqualsHashCode}}\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+{{/useReflectionEqualsHashCode}}\n+{{#models}}\n+{{#model}}\n+{{#additionalPropertiesType}}\n+import java.util.Map;\n+import java.util.HashMap;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+{{/additionalPropertiesType}}\n+{{/model}}\n+{{/models}}\n+{{^supportJava6}}", "originalCommit": "45da4d0a29e0376b60a298710cca32dad5a60b59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4MjQ4OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7263#discussion_r474782489", "bodyText": "removed in 675545c", "author": "bgong-mdsol", "createdAt": "2020-08-21T15:49:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyMDM2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyMDczMw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7263#discussion_r474420733", "bodyText": "here as well, jersey2", "author": "jfeltesse-mdsol", "createdAt": "2020-08-21T05:45:00Z", "path": "modules/openapi-generator/src/main/resources/Java/libraries/native/oneof_model.mustache", "diffHunk": "@@ -0,0 +1,235 @@\n+import javax.ws.rs.core.GenericType;\n+import javax.ws.rs.core.Response;\n+import java.io.IOException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.JsonToken;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+import {{invokerPackage}}.JSON;\n+\n+{{>additionalModelTypeAnnotations}}{{>generatedAnnotation}}{{>xmlAnnotation}}\n+@JsonDeserialize(using = {{classname}}.{{classname}}Deserializer.class)\n+@JsonSerialize(using = {{classname}}.{{classname}}Serializer.class)\n+public class {{classname}} extends AbstractOpenApiSchema{{#vendorExtensions.x-implements}}, {{{.}}}{{/vendorExtensions.x-implements}} {\n+    private static final Logger log = Logger.getLogger({{classname}}.class.getName());\n+\n+    public static class {{classname}}Serializer extends StdSerializer<{{classname}}> {\n+        public {{classname}}Serializer(Class<{{classname}}> t) {\n+            super(t);\n+        }\n+\n+        public {{classname}}Serializer() {\n+            this(null);\n+        }\n+\n+        @Override\n+        public void serialize({{classname}} value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {\n+            jgen.writeObject(value.getActualInstance());\n+        }\n+    }\n+\n+    public static class {{classname}}Deserializer extends StdDeserializer<{{classname}}> {\n+        public {{classname}}Deserializer() {\n+            this({{classname}}.class);\n+        }\n+\n+        public {{classname}}Deserializer(Class<?> vc) {\n+            super(vc);\n+        }\n+\n+        @Override\n+        public {{classname}} deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n+            JsonNode tree = jp.readValueAsTree();\n+            Object deserialized = null;\n+            {{#useOneOfDiscriminatorLookup}}\n+            {{#discriminator}}\n+            {{classname}} new{{classname}} = new {{classname}}();\n+            Map<String,Object> result2 = tree.traverse(jp.getCodec()).readValueAs(new TypeReference<Map<String, Object>>() {});\n+            String discriminatorValue = (String)result2.get(\"{{{propertyBaseName}}}\");\n+            switch (discriminatorValue) {\n+        \t{{#mappedModels}}\n+                case \"{{{mappingName}}}\":\n+                    deserialized = tree.traverse(jp.getCodec()).readValueAs({{{modelName}}}.class);\n+                    new{{classname}}.setActualInstance(deserialized);\n+                    return new{{classname}};\n+        \t{{/mappedModels}}\n+                default:\n+                    log.log(Level.WARNING, String.format(\"Failed to lookup discriminator value `%s` for {{classname}}. Possible values:{{#mappedModels}} {{{mappingName}}}{{/mappedModels}}\", discriminatorValue));\n+            }\n+\n+            {{/discriminator}}\n+            {{/useOneOfDiscriminatorLookup}}\n+            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);\n+            int match = 0;\n+            JsonToken token = tree.traverse(jp.getCodec()).nextToken();\n+            {{#oneOf}}\n+            // deserialize {{{.}}}\n+            try {\n+                boolean attemptParsing = true;\n+                // ensure that we respect type coercion as set on the client ObjectMapper\n+                if ({{{.}}}.class.equals(Integer.class) || {{{.}}}.class.equals(Long.class) || {{{.}}}.class.equals(Float.class) || {{{.}}}.class.equals(Double.class) || {{{.}}}.class.equals(Boolean.class) || {{{.}}}.class.equals(String.class)) {\n+                    attemptParsing = typeCoercion;\n+                    if (!attemptParsing) {\n+                        attemptParsing |= (({{{.}}}.class.equals(Integer.class) || {{{.}}}.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);\n+                        attemptParsing |= (({{{.}}}.class.equals(Float.class) || {{{.}}}.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\n+                        attemptParsing |= ({{{.}}}.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));\n+                        attemptParsing |= ({{{.}}}.class.equals(String.class) && token == JsonToken.VALUE_STRING);\n+                        {{#isNullable}}\n+                        attemptParsing |= (token == JsonToken.VALUE_NULL);\n+                        {{/isNullable}}\n+                    }\n+                }\n+                if (attemptParsing) {\n+                    deserialized = tree.traverse(jp.getCodec()).readValueAs({{{.}}}.class);\n+                    // TODO: there is no validation against JSON schema constraints\n+                    // (min, max, enum, pattern...), this does not perform a strict JSON\n+                    // validation, which means the 'match' count may be higher than it should be.\n+                    match++;\n+                    log.log(Level.FINER, \"Input data matches schema '{{{.}}}'\");\n+                }\n+            } catch (Exception e) {\n+                // deserialization failed, continue\n+                log.log(Level.FINER, \"Input data does not match schema '{{{.}}}'\", e);\n+            }\n+\n+            {{/oneOf}}\n+            if (match == 1) {\n+                {{classname}} ret = new {{classname}}();\n+                ret.setActualInstance(deserialized);\n+                return ret;\n+            }\n+            throw new IOException(String.format(\"Failed deserialization for {{classname}}: %d classes match result, expected 1\", match));\n+        }\n+\n+        /**\n+         * Handle deserialization of the 'null' value.\n+         */\n+        @Override\n+        public {{classname}} getNullValue(DeserializationContext ctxt) throws JsonMappingException {\n+        {{#isNullable}}\n+            return null;\n+        {{/isNullable}}\n+        {{^isNullable}}\n+            throw new JsonMappingException(ctxt.getParser(), \"{{classname}} cannot be null\");\n+        {{/isNullable}}\n+        }\n+    }\n+\n+    // store a list of schema names defined in oneOf\n+    public final static Map<String, GenericType> schemas = new HashMap<String, GenericType>();\n+\n+    public {{classname}}() {\n+        super(\"oneOf\", {{#isNullable}}Boolean.TRUE{{/isNullable}}{{^isNullable}}Boolean.FALSE{{/isNullable}});\n+    }\n+{{> libraries/jersey2/additional_properties }}", "originalCommit": "45da4d0a29e0376b60a298710cca32dad5a60b59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4MjU5MQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7263#discussion_r474782591", "bodyText": "updated in 675545c", "author": "bgong-mdsol", "createdAt": "2020-08-21T15:50:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyMDczMw=="}], "type": "inlineReview"}, {"oid": "2cf483ddd2f2c4eca647ffb322cc93c5b74d6a1a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/2cf483ddd2f2c4eca647ffb322cc93c5b74d6a1a", "message": "Java-native add a sample project for openapi3", "committedDate": "2020-09-10T20:02:58Z", "type": "forcePushed"}, {"oid": "48d1e0ed4f5b46e51d31e01f989ac93d106b227c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/48d1e0ed4f5b46e51d31e01f989ac93d106b227c", "message": "java-native fix ci errors\n\nfix build errors", "committedDate": "2020-09-11T19:36:29Z", "type": "forcePushed"}, {"oid": "f57e5e28feb64f85d1286a1357bdd2c78b9aee1c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f57e5e28feb64f85d1286a1357bdd2c78b9aee1c", "message": "java-native fix ci errors\n\nfix build errors\n\nfix build errors", "committedDate": "2020-09-11T20:44:10Z", "type": "forcePushed"}, {"oid": "cea660ca8b89bab9a9124d4108390e7716b8d675", "url": "https://github.com/OpenAPITools/openapi-generator/commit/cea660ca8b89bab9a9124d4108390e7716b8d675", "message": "java-native fix ci errors\n\nfix build errors\n\nfix build errors\n\nfix build errors", "committedDate": "2020-09-14T13:39:39Z", "type": "forcePushed"}, {"oid": "6b04a39ba7a0096136da9ae23e0efbec3e66e266", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6b04a39ba7a0096136da9ae23e0efbec3e66e266", "message": "java-native fix ci errors\n\nfix build errors\n\nfix build errors\n\nfix build errors\n\nfix build errors", "committedDate": "2020-09-14T15:24:46Z", "type": "forcePushed"}, {"oid": "6ac7aeeb829ae1249ec37ace26950396f73366ef", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6ac7aeeb829ae1249ec37ace26950396f73366ef", "message": "Java-native add a sample project for openapi3", "committedDate": "2020-09-15T13:28:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3ODkwNQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7263#discussion_r491678905", "bodyText": "@bgong-mdsol I think you can remove this option as it makes no difference in the native library\nFor serverPort, I don't think it's used in the native template.", "author": "wing328", "createdAt": "2020-09-20T10:48:28Z", "path": "bin/configs/java-native-8.yaml", "diffHunk": "@@ -0,0 +1,12 @@\n+generatorName: java\n+outputDir: samples/openapi3/client/petstore/java/native-java8\n+library: native\n+inputSpec: modules/openapi-generator/src/test/resources/3_0/java/petstore-with-fake-endpoints-models-for-testing-with-http-signature.yaml\n+templateDir: modules/openapi-generator/src/main/resources/Java\n+additionalProperties:\n+  artifactId: petstore-openapi3-native-java8\n+  hideGenerationTimestamp: true\n+  serverPort: \"8082\"\n+  dateLibrary: java8", "originalCommit": "6ac7aeeb829ae1249ec37ace26950396f73366ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxOTI0OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7263#discussion_r491719248", "bodyText": "updated as suggested in 0ddb2a9", "author": "bgong-mdsol", "createdAt": "2020-09-20T18:25:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3ODkwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxMTA2NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7263#discussion_r504911064", "bodyText": "Can you please resolve the merge conflicts? I'll try to review and merge if no question from me later this week.\n\n@wing328 Sure, I am going to resolve the merge conflicts.", "author": "bgong-mdsol", "createdAt": "2020-10-14T19:11:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3ODkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3ODk2Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7263#discussion_r491678963", "bodyText": "I think native requires JDK11+ so I would remove java8 as it's a bit confusing.", "author": "wing328", "createdAt": "2020-09-20T10:49:13Z", "path": "bin/configs/java-native-8.yaml", "diffHunk": "@@ -0,0 +1,12 @@\n+generatorName: java\n+outputDir: samples/openapi3/client/petstore/java/native-java8", "originalCommit": "6ac7aeeb829ae1249ec37ace26950396f73366ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxOTMwOA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7263#discussion_r491719308", "bodyText": "updated as suggested in 0ddb2a9", "author": "bgong-mdsol", "createdAt": "2020-09-20T18:26:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3ODk2Mw=="}], "type": "inlineReview"}, {"oid": "eb9f23179236ea2fcee34726e865a3690901e4e8", "url": "https://github.com/OpenAPITools/openapi-generator/commit/eb9f23179236ea2fcee34726e865a3690901e4e8", "message": "Java-native add models of oneOf/anyOf", "committedDate": "2020-10-15T00:25:24Z", "type": "commit"}, {"oid": "f001a37b17a9197cb15ed857cf0797a8e413c87e", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f001a37b17a9197cb15ed857cf0797a8e413c87e", "message": "Java-native refresh samples", "committedDate": "2020-10-15T00:38:37Z", "type": "commit"}, {"oid": "b04d96a48fe384b905e7f9b9283f2a60db2dcbf0", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b04d96a48fe384b905e7f9b9283f2a60db2dcbf0", "message": "Java-native add a sample project for openapi3", "committedDate": "2020-10-15T00:46:05Z", "type": "commit"}, {"oid": "b04d96a48fe384b905e7f9b9283f2a60db2dcbf0", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b04d96a48fe384b905e7f9b9283f2a60db2dcbf0", "message": "Java-native add a sample project for openapi3", "committedDate": "2020-10-15T00:46:05Z", "type": "forcePushed"}]}