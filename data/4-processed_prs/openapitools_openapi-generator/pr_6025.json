{"pr_number": 6025, "pr_title": "Implement Asp.Net Core 3.0/3.1 generator (#6009)", "pr_createdAt": "2020-04-23T09:58:15Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/6025", "timeline": [{"oid": "1a89e35d141f43c3411be34ee95673bc93313ffb", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1a89e35d141f43c3411be34ee95673bc93313ffb", "message": "Minor changes to 2.1 templates to make them work or improve documentation", "committedDate": "2020-04-22T20:33:01Z", "type": "commit"}, {"oid": "71f4ab95b0c6685334aedd852a309b83d4ee8e94", "url": "https://github.com/OpenAPITools/openapi-generator/commit/71f4ab95b0c6685334aedd852a309b83d4ee8e94", "message": "Support for ASP.NET Core 3.0 and 3.1", "committedDate": "2020-04-22T20:33:01Z", "type": "commit"}, {"oid": "1c0e6ac21de68194ae8e926f76d22a0fdcb49561", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1c0e6ac21de68194ae8e926f76d22a0fdcb49561", "message": "Update aspnetcore test scripts and results", "committedDate": "2020-04-23T09:31:28Z", "type": "commit"}, {"oid": "11ad8b2e3c3aa0425645005f26dfc5744ccdd75f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/11ad8b2e3c3aa0425645005f26dfc5744ccdd75f", "message": "Update generated documentation", "committedDate": "2020-04-23T13:25:53Z", "type": "commit"}, {"oid": "fff4da94f22b9f74b6aa89c86ac4a5438719c4fd", "url": "https://github.com/OpenAPITools/openapi-generator/commit/fff4da94f22b9f74b6aa89c86ac4a5438719c4fd", "message": "update doc", "committedDate": "2020-04-27T15:39:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYyODQ2OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6025#discussion_r416628468", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public Startup(IHostEnvironment env)\n          \n          \n            \n                    {\n          \n          \n            \n                        var builder = new ConfigurationBuilder()\n          \n          \n            \n                            .SetBasePath(env.ContentRootPath)\n          \n          \n            \n                            .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)\n          \n          \n            \n                            .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)\n          \n          \n            \n                            .AddEnvironmentVariables();\n          \n          \n            \n            \n          \n          \n            \n                        Configuration = builder.Build();\n          \n          \n            \n                    }\n          \n          \n            \n                    public Startup(IConfiguration configuration)\n          \n          \n            \n                    {\n          \n          \n            \n                        Configuration = configuration;\n          \n          \n            \n                    }", "author": "shibayan", "createdAt": "2020-04-28T13:49:27Z", "path": "modules/openapi-generator/src/main/resources/aspnetcore/3.0/Startup.mustache", "diffHunk": "@@ -0,0 +1,170 @@\n+{{>partial_header}}\n+using System;\n+using System.IO;\n+using System.Reflection;\n+using Microsoft.AspNetCore.Authorization;\n+using Microsoft.AspNetCore.Builder;\n+using Microsoft.AspNetCore.Hosting;\n+using Microsoft.Extensions.Configuration;\n+using Microsoft.Extensions.DependencyInjection;\n+using Microsoft.Extensions.Hosting;\n+{{#useSwashbuckle}}\n+using Microsoft.OpenApi.Models;\n+{{/useSwashbuckle}}\n+{{#useNewtonsoft}}\n+using Newtonsoft.Json.Converters;\n+using Newtonsoft.Json.Serialization;\n+{{/useNewtonsoft}}\n+using {{packageName}}.Authentication;\n+{{#useSwashbuckle}}\n+using {{packageName}}.Filters;\n+{{/useSwashbuckle}}\n+using {{packageName}}.OpenApi;\n+\n+namespace {{packageName}}\n+{\n+    /// <summary>\n+    /// Startup\n+    /// </summary>\n+    public class Startup\n+    {\n+        /// <summary>\n+        /// Constructor\n+        /// </summary>\n+        /// <param name=\"env\"></param>\n+        public Startup(IHostEnvironment env)\n+        {\n+            var builder = new ConfigurationBuilder()\n+                .SetBasePath(env.ContentRootPath)\n+                .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)\n+                .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)\n+                .AddEnvironmentVariables();\n+\n+            Configuration = builder.Build();\n+        }", "originalCommit": "fff4da94f22b9f74b6aa89c86ac4a5438719c4fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYzMDg4MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6025#discussion_r416630880", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        app\n          \n          \n            \n                            // TODO: Renable if you need MVC views as well as just the API\n          \n          \n            \n                            //.UseMvc()\n          \n          \n            \n                            .UseDefaultFiles()\n          \n          \n            \n                            .UseStaticFiles(){{#useSwashbuckle}}\n          \n          \n            \n                            .UseSwagger(c =>\n          \n          \n            \n                            {\n          \n          \n            \n                                c.RouteTemplate = \"swagger/{documentName}/openapi.json\";\n          \n          \n            \n                            })\n          \n          \n            \n                            .UseSwaggerUI(c =>\n          \n          \n            \n                            {\n          \n          \n            \n                                //TODO: Either use the SwaggerGen generated Swagger contract (generated from C# classes)\n          \n          \n            \n                                c.SwaggerEndpoint(\"/swagger/{{#version}}{{{version}}}{{/version}}{{^version}}v1{{/version}}/openapi.json\", \"{{#appName}}{{{appName}}}{{/appName}}{{^appName}}{{packageName}}{{/appName}}\");\n          \n          \n            \n            \n          \n          \n            \n                                //TODO: Or alternatively use the original Swagger contract that's included in the static files\n          \n          \n            \n                                // c.SwaggerEndpoint(\"/openapi-original.json\", \"{{#appName}}{{{appName}}}{{/appName}}{{^appName}}{{packageName}}{{/appName}} Original\");\n          \n          \n            \n                            }){{/useSwashbuckle}};\n          \n          \n            \n                        app.UseDefaultFiles();\n          \n          \n            \n                        app.UseStaticFiles();\n          \n          \n            \n            {{#useSwashbuckle}}\n          \n          \n            \n                        app.UseSwagger(c =>\n          \n          \n            \n                            {\n          \n          \n            \n                                c.RouteTemplate = \"swagger/{documentName}/openapi.json\";\n          \n          \n            \n                            })\n          \n          \n            \n                            .UseSwaggerUI(c =>\n          \n          \n            \n                            {\n          \n          \n            \n                                //TODO: Either use the SwaggerGen generated Swagger contract (generated from C# classes)\n          \n          \n            \n                                c.SwaggerEndpoint(\"/swagger/{{#version}}{{{version}}}{{/version}}{{^version}}v1{{/version}}/openapi.json\", \"{{#appName}}{{{appName}}}{{/appName}}{{^appName}}{{packageName}}{{/appName}}\");\n          \n          \n            \n            \n          \n          \n            \n                                //TODO: Or alternatively use the original Swagger contract that's included in the static files\n          \n          \n            \n                                // c.SwaggerEndpoint(\"/openapi-original.json\", \"{{#appName}}{{{appName}}}{{/appName}}{{^appName}}{{packageName}}{{/appName}} Original\");\n          \n          \n            \n                            }){{/useSwashbuckle}};", "author": "shibayan", "createdAt": "2020-04-28T13:52:29Z", "path": "modules/openapi-generator/src/main/resources/aspnetcore/3.0/Startup.mustache", "diffHunk": "@@ -0,0 +1,170 @@\n+{{>partial_header}}\n+using System;\n+using System.IO;\n+using System.Reflection;\n+using Microsoft.AspNetCore.Authorization;\n+using Microsoft.AspNetCore.Builder;\n+using Microsoft.AspNetCore.Hosting;\n+using Microsoft.Extensions.Configuration;\n+using Microsoft.Extensions.DependencyInjection;\n+using Microsoft.Extensions.Hosting;\n+{{#useSwashbuckle}}\n+using Microsoft.OpenApi.Models;\n+{{/useSwashbuckle}}\n+{{#useNewtonsoft}}\n+using Newtonsoft.Json.Converters;\n+using Newtonsoft.Json.Serialization;\n+{{/useNewtonsoft}}\n+using {{packageName}}.Authentication;\n+{{#useSwashbuckle}}\n+using {{packageName}}.Filters;\n+{{/useSwashbuckle}}\n+using {{packageName}}.OpenApi;\n+\n+namespace {{packageName}}\n+{\n+    /// <summary>\n+    /// Startup\n+    /// </summary>\n+    public class Startup\n+    {\n+        /// <summary>\n+        /// Constructor\n+        /// </summary>\n+        /// <param name=\"env\"></param>\n+        public Startup(IHostEnvironment env)\n+        {\n+            var builder = new ConfigurationBuilder()\n+                .SetBasePath(env.ContentRootPath)\n+                .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)\n+                .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)\n+                .AddEnvironmentVariables();\n+\n+            Configuration = builder.Build();\n+        }\n+\n+        /// <summary>\n+        /// The application configuration.\n+        /// </summary>\n+        public IConfiguration Configuration { get; }\n+\n+        /// <summary>\n+        /// This method gets called by the runtime. Use this method to add services to the container.\n+        /// </summary>\n+        /// <param name=\"services\"></param>\n+        public void ConfigureServices(IServiceCollection services)\n+        {\n+{{#authMethods}}\n+{{#isApiKey}}\n+            services.AddTransient<IAuthorizationHandler, ApiKeyRequirementHandler>();\n+            services.AddAuthorization(authConfig =>\n+            {\n+                authConfig.AddPolicy(\"{{name}}\", policyBuilder =>\n+                {\n+                    policyBuilder\n+                        .AddRequirements(new ApiKeyRequirement(new[] { \"my-secret-key\" },\"{{name}}\"));\n+                });\n+            });\n+{{/isApiKey}}\n+{{/authMethods}}\n+\n+            // Add framework services.\n+            services\n+                // Don't need the full MVC stack for an API, see https://andrewlock.net/comparing-startup-between-the-asp-net-core-3-templates/\n+                .AddControllers()\n+                {{#compatibilityVersion}}\n+                // Don't need this for 3.x - see https://docs.microsoft.com/en-us/aspnet/core/mvc/compatibility-version?view=aspnetcore-3.1\n+                //.SetCompatibilityVersion(CompatibilityVersion.{{compatibilityVersion}})\n+                {{/compatibilityVersion}}\n+                .{{#useNewtonsoft}}AddNewtonsoftJson{{/useNewtonsoft}}{{^useNewtonsoft}}AddJsonOptions{{/useNewtonsoft}}(opts =>\n+                {\n+                    opts.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();\n+                    opts.SerializerSettings.Converters.Add(new StringEnumConverter\n+                    {\n+                        {{#useNewtonsoft}}NamingStrategy = new CamelCaseNamingStrategy(){{/useNewtonsoft}}{{^useNewtonsoft}}CamelCaseText = true{{/useNewtonsoft}}\n+                    });\n+                });\n+{{#useSwashbuckle}}\n+\n+            services\n+                .AddSwaggerGen(c =>\n+                {\n+                    c.SwaggerDoc(\"{{#version}}{{{version}}}{{/version}}{{^version}}v1{{/version}}\", new OpenApiInfo\n+                    {\n+                        Title = \"{{#appName}}{{{appName}}}{{/appName}}{{^appName}}{{packageName}}{{/appName}}\",\n+                        Description = \"{{#appName}}{{{appName}}}{{/appName}}{{^appName}}{{packageName}}{{/appName}} (ASP.NET Core {{aspnetCoreVersion}})\",\n+                        TermsOfService = new Uri(\"{{#termsOfService}}{{{termsOfService}}}{{/termsOfService}}{{^termsOfService}}https://github.com/openapitools/openapi-generator{{/termsOfService}}\"),\n+                        Contact = new OpenApiContact\n+                        {\n+                            Name = \"{{#infoName}}{{{infoName}}}{{/infoName}}{{^infoName}}OpenAPI-Generator Contributors{{/infoName}}\",\n+                            Url = new Uri(\"{{#infoUrl}}{{{infoUrl}}}{{/infoUrl}}{{^infoUrl}}https://github.com/openapitools/openapi-generator{{/infoUrl}}\"),\n+                            Email = \"{{#infoEmail}}{{{infoEmail}}}{{/infoEmail}}\"\n+                        },\n+                        License = new OpenApiLicense\n+                        {\n+                            Name = \"{{licenseName}}\",\n+                            Url = new Uri(\"{{licenseUrl}}\")\n+                        },\n+                        Version = \"{{#version}}{{{version}}}{{/version}}{{^version}}v1{{/version}}\",\n+                    });\n+                    c.CustomSchemaIds(type => type.FriendlyId(true));\n+                    c.DescribeAllEnumsAsStrings();\n+                    c.IncludeXmlComments($\"{AppContext.BaseDirectory}{Path.DirectorySeparatorChar}{Assembly.GetEntryAssembly().GetName().Name}.xml\");\n+                    {{#basePathWithoutHost}}\n+                    // Sets the basePath property in the Swagger document generated\n+                    c.DocumentFilter<BasePathFilter>(\"{{{basePathWithoutHost}}}\");\n+                    {{/basePathWithoutHost}}\n+\n+                    // Include DataAnnotation attributes on Controller Action parameters as Swagger validation rules (e.g required, pattern, ..)\n+                    // Use [ValidateModelState] on Actions to actually validate it in C# as well!\n+                    c.OperationFilter<GeneratePathParamsValidationFilter>();\n+                });\n+{{#useNewtonsoft}}\n+                services\n+                    .AddSwaggerGenNewtonsoftSupport();\n+{{/useNewtonsoft}}\n+{{/useSwashbuckle}}\n+        }\n+\n+        /// <summary>\n+        /// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n+        /// </summary>\n+        /// <param name=\"app\"></param>\n+        /// <param name=\"env\"></param>\n+        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n+        {\n+            if (env.IsDevelopment())\n+            {\n+                app.UseDeveloperExceptionPage();\n+            }\n+            else\n+            {\n+                app.UseHsts();\n+            }\n+\n+            app.UseHttpsRedirection();\n+            app\n+                // TODO: Renable if you need MVC views as well as just the API\n+                //.UseMvc()\n+                .UseDefaultFiles()\n+                .UseStaticFiles(){{#useSwashbuckle}}\n+                .UseSwagger(c =>\n+                {\n+                    c.RouteTemplate = \"swagger/{documentName}/openapi.json\";\n+                })\n+                .UseSwaggerUI(c =>\n+                {\n+                    //TODO: Either use the SwaggerGen generated Swagger contract (generated from C# classes)\n+                    c.SwaggerEndpoint(\"/swagger/{{#version}}{{{version}}}{{/version}}{{^version}}v1{{/version}}/openapi.json\", \"{{#appName}}{{{appName}}}{{/appName}}{{^appName}}{{packageName}}{{/appName}}\");\n+\n+                    //TODO: Or alternatively use the original Swagger contract that's included in the static files\n+                    // c.SwaggerEndpoint(\"/openapi-original.json\", \"{{#appName}}{{{appName}}}{{/appName}}{{^appName}}{{packageName}}{{/appName}} Original\");\n+                }){{/useSwashbuckle}};", "originalCommit": "fff4da94f22b9f74b6aa89c86ac4a5438719c4fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYzMjUyMA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6025#discussion_r416632520", "bodyText": "Please delete this file.", "author": "shibayan", "createdAt": "2020-04-28T13:54:36Z", "path": "modules/openapi-generator/src/main/resources/aspnetcore/3.0/wwwroot/web.config", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>", "originalCommit": "fff4da94f22b9f74b6aa89c86ac4a5438719c4fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2MDY4MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6025#discussion_r416860680", "bodyText": "Should I remove the entire www directory as that's not part of the template anymore?", "author": "phatcher", "createdAt": "2020-04-28T19:16:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYzMjUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE5NzYwNA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6025#discussion_r417197604", "bodyText": "Yes. It should be fine to remove it.", "author": "shibayan", "createdAt": "2020-04-29T09:55:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYzMjUyMA=="}], "type": "inlineReview"}, {"oid": "98cd254412a8b4b1881aea451317dc19cadd4e42", "url": "https://github.com/OpenAPITools/openapi-generator/commit/98cd254412a8b4b1881aea451317dc19cadd4e42", "message": "Update modules/openapi-generator/src/main/resources/aspnetcore/3.0/Startup.mustache\n\nCo-Authored-By: Tatsuro Shibamura <me@shibayan.jp>", "committedDate": "2020-04-28T19:06:48Z", "type": "commit"}, {"oid": "14aa03928ec72e70106427d9b689ab1c6f302a1d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/14aa03928ec72e70106427d9b689ab1c6f302a1d", "message": "Update modules/openapi-generator/src/main/resources/aspnetcore/3.0/Startup.mustache\n\nCo-Authored-By: Tatsuro Shibamura <me@shibayan.jp>", "committedDate": "2020-04-28T19:06:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzNDk3NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6025#discussion_r418534974", "bodyText": "@phatcher thanks for the PR. I noticed these -first, -last tags are removed. Would it still work if the openapi spec contains multiple API key definitions?", "author": "wing328", "createdAt": "2020-05-01T13:13:21Z", "path": "modules/openapi-generator/src/main/resources/aspnetcore/2.1/Startup.mustache", "diffHunk": "@@ -44,17 +44,13 @@ namespace {{packageName}}\n         {\n {{#authMethods}}\n {{#isApiKey}}\n-{{#-first}}\n             services.AddTransient<IAuthorizationHandler, ApiKeyRequirementHandler>();\n             services.AddAuthorization(authConfig =>\n             {\n-{{/-first}}            \n                 authConfig.AddPolicy(\"{{name}}\",\n                     policyBuilder => policyBuilder\n                         .AddRequirements(new ApiKeyRequirement(new[] { \"my-secret-key\" },\"{{name}}\")));\n-{{#-last}}\n             });\n-{{/-last}}", "originalCommit": "14aa03928ec72e70106427d9b689ab1c6f302a1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1Nzc3NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6025#discussion_r418557775", "bodyText": "Not sure, I removed them as the code did not compile with a single API key, there were missing \"}\" from a number of files,  e.g. the PetStore example, is there some conditional code missing from the aspnetcore generator?.\nIs there an example with multiple API key definitions so I can check what affect -first/-last have?", "author": "phatcher", "createdAt": "2020-05-01T14:11:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzNDk3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2MDE4MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6025#discussion_r418560180", "bodyText": "OK. I think we can deal with it later as single API key is a lot more common.", "author": "wing328", "createdAt": "2020-05-01T14:16:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzNDk3NA=="}], "type": "inlineReview"}]}