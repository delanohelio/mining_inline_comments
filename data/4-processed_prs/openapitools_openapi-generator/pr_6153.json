{"pr_number": 6153, "pr_title": "[core] Add type and format properties to model of inline response", "pr_createdAt": "2020-05-03T23:32:41Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/6153", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE3OTEyNQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6153#discussion_r419179125", "bodyText": "I wonder how to clone schema instance here. I need to change result of Json.pretty(schema); but keep original instance not modified.", "author": "ybelenko", "createdAt": "2020-05-04T00:19:44Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -2129,6 +2129,25 @@ public CodegenModel fromModel(String name, Schema schema) {\n             return null;\n         }\n \n+        String modelJson = Json.pretty(schema);\n+        if (schema.getType() == null ) {\n+            Schema copy = ModelUtils.unaliasSchema(this.openAPI, schema, importMapping);", "originalCommit": "8e033b3a4e8e87685d8360ba6f471136b75470ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5114dcc0b659bf45f23f94095364c92bef0ce342", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5114dcc0b659bf45f23f94095364c92bef0ce342", "message": "Refresh samples", "committedDate": "2020-05-09T07:35:01Z", "type": "forcePushed"}, {"oid": "8698e0e05132922cba5ff4c8516d8ec8f0c8318e", "url": "https://github.com/OpenAPITools/openapi-generator/commit/8698e0e05132922cba5ff4c8516d8ec8f0c8318e", "message": "Refresh samples", "committedDate": "2020-05-09T12:41:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQxODcyNQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6153#discussion_r436418725", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String modelJson = Json.pretty(schema);\n          \n          \n            \n                    String modelJson;", "author": "jimschubert", "createdAt": "2020-06-08T00:50:40Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -2146,6 +2146,25 @@ public CodegenModel fromModel(String name, Schema schema) {\n             return null;\n         }\n \n+        String modelJson = Json.pretty(schema);", "originalCommit": "8698e0e05132922cba5ff4c8516d8ec8f0c8318e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQxODgxNQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6153#discussion_r436418815", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    } else {\n          \n          \n            \n                        modelJson = Json.pretty(schema)\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\nThis coupled with the above solution will prevent prettifying this twice.", "author": "jimschubert", "createdAt": "2020-06-08T00:51:31Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -2146,6 +2146,25 @@ public CodegenModel fromModel(String name, Schema schema) {\n             return null;\n         }\n \n+        String modelJson = Json.pretty(schema);\n+        if (schema.getType() == null ) {\n+            Schema copy = ModelUtils.unaliasSchema(this.openAPI, schema, importMapping);\n+            if (ModelUtils.isIntegerSchema(schema)) {\n+                copy.setType(SchemaTypeUtil.INTEGER_TYPE);\n+            } else if (ModelUtils.isNumberSchema(schema)) {\n+                copy.setType(SchemaTypeUtil.NUMBER_TYPE);\n+            } else if (ModelUtils.isStringSchema(schema)) {\n+                copy.setType(SchemaTypeUtil.STRING_TYPE);\n+            } else if (ModelUtils.isBooleanSchema(schema)) {\n+                copy.setType(SchemaTypeUtil.BOOLEAN_TYPE);\n+            } else if (ModelUtils.isArraySchema(schema)) {\n+                copy.setType(\"array\");\n+            } else if (ModelUtils.isObjectSchema(schema) || ModelUtils.isComposedSchema(schema) || ModelUtils.isMapSchema(schema)) {\n+                copy.setType(SchemaTypeUtil.OBJECT_TYPE);\n+            }\n+            modelJson = Json.pretty(copy);\n+        }", "originalCommit": "8698e0e05132922cba5ff4c8516d8ec8f0c8318e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "49de85e778d5dc47b46cf493becdae27f432251b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/49de85e778d5dc47b46cf493becdae27f432251b", "message": "Refresh samples", "committedDate": "2020-06-09T12:04:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyOTQyMw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6153#discussion_r437429423", "bodyText": "Here I agree type: object was missing. It it there in the original document (modules/openapi-generator/src/test/resources/2_0/petstore-with-fake-endpoints-models-for-testing.yaml), it makes sense to add it.", "author": "sebastien-rosset", "createdAt": "2020-06-09T13:44:35Z", "path": "samples/client/petstore/go-experimental/go-petstore/api/openapi.yaml", "diffHunk": "@@ -2090,10 +2093,12 @@ components:\n       properties:\n         breed:\n           type: string\n+      type: object", "originalCommit": "49de85e778d5dc47b46cf493becdae27f432251b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMjY5Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6153#discussion_r437432692", "bodyText": "In JSON schema, allOf means a compliant validator must validate the payload against all of the nested schemas under allOf. Since Animal is already specified as a type: object, it's redundant and verbose to add type: object here.", "author": "sebastien-rosset", "createdAt": "2020-06-09T13:47:41Z", "path": "samples/client/petstore/go-experimental/go-petstore/api/openapi.yaml", "diffHunk": "@@ -1422,14 +1422,17 @@ components:\n       allOf:\n       - $ref: '#/components/schemas/Animal'\n       - $ref: '#/components/schemas/Dog_allOf'\n+      type: object", "originalCommit": "49de85e778d5dc47b46cf493becdae27f432251b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "267e09078e589ea3aa26fe6f74c41a8b4a3b0c00", "url": "https://github.com/OpenAPITools/openapi-generator/commit/267e09078e589ea3aa26fe6f74c41a8b4a3b0c00", "message": "Refresh samples", "committedDate": "2020-06-13T19:46:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2NDk4NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6153#discussion_r439764985", "bodyText": "I've figured out Java debugger finally and found that InlineModelResolver strips data type here. That's my fix.", "author": "ybelenko", "createdAt": "2020-06-13T19:56:50Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/InlineModelResolver.java", "diffHunk": "@@ -621,6 +621,9 @@ private Schema modelFromProperty(OpenAPI openAPI, Schema object, String path) {\n         XML xml = object.getXml();\n         Map<String, Schema> properties = object.getProperties();\n         Schema model = new Schema();\n+        if (object.getType() != null) {", "originalCommit": "267e09078e589ea3aa26fe6f74c41a8b4a3b0c00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI2OTk3Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6153#discussion_r456269976", "bodyText": "@ybelenko thanks for the fix. Do we need to set the format as well?", "author": "wing328", "createdAt": "2020-07-17T07:33:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2NDk4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3Mzg4NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6153#discussion_r456273884", "bodyText": "@wing328 Yeas, I think so. It's not so critical as type, but it's weird that InlineModelResolver can cut off that field completely. I'll test it today, maybe format isn't missing.", "author": "ybelenko", "createdAt": "2020-07-17T07:41:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2NDk4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM2NzExMg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6153#discussion_r456367112", "bodyText": "@wing328 Done.", "author": "ybelenko", "createdAt": "2020-07-17T10:46:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2NDk4NQ=="}], "type": "inlineReview"}, {"oid": "1550753d8fc66126bfaf2f5e40fbe487b94e8eb6", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1550753d8fc66126bfaf2f5e40fbe487b94e8eb6", "message": "Refresh samples", "committedDate": "2020-07-11T11:48:07Z", "type": "forcePushed"}, {"oid": "3e2259b1eed5354bf6766999c7b97384d4034cd3", "url": "https://github.com/OpenAPITools/openapi-generator/commit/3e2259b1eed5354bf6766999c7b97384d4034cd3", "message": "Save type of inline schema in modelJson prop", "committedDate": "2020-07-17T10:31:00Z", "type": "commit"}, {"oid": "1b26eca23ac51680524d4aae29ac9e616ad03f7c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1b26eca23ac51680524d4aae29ac9e616ad03f7c", "message": "Add fix suggested by Jim Schubert", "committedDate": "2020-07-17T10:31:01Z", "type": "commit"}, {"oid": "e1eb83a87154ac88d682ba94c599a1babde80ec6", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e1eb83a87154ac88d682ba94c599a1babde80ec6", "message": "Revert \"Add fix suggested by Jim Schubert\"\n\nThis reverts commit 3a1951b62088836aa116444fffb90c83719b4927.", "committedDate": "2020-07-17T10:31:01Z", "type": "commit"}, {"oid": "d2ff8c43d02d94277777bd9d9c99d4ef98c4513f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d2ff8c43d02d94277777bd9d9c99d4ef98c4513f", "message": "Revert \"Save type of inline schema in modelJson prop\"\n\nThis reverts commit f88dcb13594b3e21b734b8b1569ca29bcbf9cb13.", "committedDate": "2020-07-17T10:31:01Z", "type": "commit"}, {"oid": "fa77a31b5b9ea025c80884f2b3b1eb3f4e69a18f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/fa77a31b5b9ea025c80884f2b3b1eb3f4e69a18f", "message": "Keep schema type in InlineModelResolver", "committedDate": "2020-07-17T10:31:01Z", "type": "commit"}, {"oid": "4105317c9a61cfb7c6e6403acd3c46903e1e14c6", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4105317c9a61cfb7c6e6403acd3c46903e1e14c6", "message": "Add test for InlineModelResolver", "committedDate": "2020-07-17T10:31:01Z", "type": "commit"}, {"oid": "324bd3283017ffb5109af264e858bce9527ec6a1", "url": "https://github.com/OpenAPITools/openapi-generator/commit/324bd3283017ffb5109af264e858bce9527ec6a1", "message": "Add data formats to test spec", "committedDate": "2020-07-17T10:31:40Z", "type": "commit"}, {"oid": "01a491e9915e5eea4984ac62e6a404a0eeeda9b9", "url": "https://github.com/OpenAPITools/openapi-generator/commit/01a491e9915e5eea4984ac62e6a404a0eeeda9b9", "message": "Save data format in inline models", "committedDate": "2020-07-17T10:31:41Z", "type": "commit"}, {"oid": "cdf4d35e49857e0214b8a8cf4694c61f653d09b1", "url": "https://github.com/OpenAPITools/openapi-generator/commit/cdf4d35e49857e0214b8a8cf4694c61f653d09b1", "message": "Refresh samples", "committedDate": "2020-07-17T10:43:28Z", "type": "commit"}, {"oid": "cdf4d35e49857e0214b8a8cf4694c61f653d09b1", "url": "https://github.com/OpenAPITools/openapi-generator/commit/cdf4d35e49857e0214b8a8cf4694c61f653d09b1", "message": "Refresh samples", "committedDate": "2020-07-17T10:43:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MDg4Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6153#discussion_r463970882", "bodyText": "Can you explain the test you are exercising by adding the format keyword at the object level? In 3.0.3, the format keyword can be specified for primitive types, not for object types. See http://spec.openapis.org/oas/v3.0.3#dataTypeFormat:\n\nPrimitives have an optional modifier property: format.\n\nOr maybe you are trying to say the format keyword should not have been specified in the object type? If so, what is the reason the format keyword should not be stripped? I need to re-read the spec more carefully, but shouldn't we fail the OAI documentation validation if the format keyword is specified for an object type?\n# `format` keyword is applicable to primitive types, not object types\n\nOr did you mean to add the format keyword for the foo property?\nproperties:\n  foo:\n    format: date-time\n    type: string", "author": "sebastien-rosset", "createdAt": "2020-08-01T15:12:03Z", "path": "modules/openapi-generator/src/test/resources/3_0/6150_model_json_inline.yaml", "diffHunk": "@@ -0,0 +1,77 @@\n+openapi: \"3.0.0\"\n+info:\n+  version: 1.0.0\n+  title: Test inline response model\n+  description: Test inline response model.\n+  license:\n+    name: MIT\n+paths:\n+  /foobar:\n+    get:\n+      operationId: testOperation\n+      description: No type property in modelJson of InlineResponse200\n+      responses:\n+        200:\n+          description: InlineResponse200 itself.\n+          content:\n+            application/json:\n+              schema:\n+                type: object\n+                # OAS3 spec allows to use any value in format field\n+                format: unknown\n+                properties:\n+                  foo:\n+                    type: string\n+                  bar:\n+                    type: string\n+    post:\n+      operationId: testOperationPost\n+      description: No type property in modelJson of InlineResponse200\n+      responses:\n+        400:\n+          description: InlineResponse200 itself.\n+          content:\n+            application/json:\n+              schema:\n+                title: FooBarObject\n+                type: object\n+                # wrong format just to make sure it won't be stripped\n+                format: date-time", "originalCommit": "cdf4d35e49857e0214b8a8cf4694c61f653d09b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MTc4NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6153#discussion_r463971784", "bodyText": "Yeah, I know that format property is for primitives only, but my goal was to keep format and type property even in broken schemas. In other words if user declares format property in type: object by some reason he will likely expect it won't be stripped off by generator.", "author": "ybelenko", "createdAt": "2020-08-01T15:20:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MDg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3Mzc3OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6153#discussion_r463973778", "bodyText": "Then I recommend that you rewrite the comment. Writing \"Wrong format ...\" conveys that the value of format is incorrect, it should not be date-time but some other value. That's not what you were doing here.\n# In OAS 3.0.3, the 'format' keyword can be used for primitive types, not for object types, as\n# specified in http://spec.openapis.org/oas/v3.0.3#dataTypeFormat.\n# The `format` keyword is added in this test object type to show the generator retains the format property\n# even in broken schemas.", "author": "sebastien-rosset", "createdAt": "2020-08-01T15:40:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MDg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NDIwMA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6153#discussion_r463974200", "bodyText": "Note in the JSON schema specification, the format keyword can be used for any instance, not just primitive types. http://json-schema.org/draft/2019-09/json-schema-validation.html#rfc.section.7. In the draft 3.1, the format section still indicates the format keyword applies to primitive types.\nThe JSON schema spec does not say much about what the format keyword would mean for an object type, all defined formats apply to string instances.", "author": "sebastien-rosset", "createdAt": "2020-08-01T15:45:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MDg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3OTM3NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6153#discussion_r463979375", "bodyText": "title: FooBarObject\ntype: object\n# object type cannot contain format, but it still should be presented in resolved model\nformat: date-time\nSomething like that?", "author": "ybelenko", "createdAt": "2020-08-01T16:48:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MDg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MDE0OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6153#discussion_r463980148", "bodyText": "No because the JSON schema specification explicitly supports the format keyword for any model instance type including object. See OAI/OpenAPI-Specification#2301 I just opened related to this issue.\nI think the OAS should be slightly rephrased to clarify format applies to all types (including object), not just primitive types. Mike Ralphson seems to agree.\nSuggestion:\n# It is legal to use the `format` keyword for object types. The JSON schema specification explicitly allows this.\n# Even if in practice most OAS authors use `format` for primitive types, it should still be allowed to use format for object types.", "author": "sebastien-rosset", "createdAt": "2020-08-01T16:57:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MDg4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MjMyMA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6153#discussion_r463972320", "bodyText": "Same question/comment as what I wrote for line 39 below. What is the purpose of specifying the format keyword for an object type in your test?", "author": "sebastien-rosset", "createdAt": "2020-08-01T15:26:03Z", "path": "modules/openapi-generator/src/test/resources/3_0/6150_model_json_inline.yaml", "diffHunk": "@@ -0,0 +1,77 @@\n+openapi: \"3.0.0\"\n+info:\n+  version: 1.0.0\n+  title: Test inline response model\n+  description: Test inline response model.\n+  license:\n+    name: MIT\n+paths:\n+  /foobar:\n+    get:\n+      operationId: testOperation\n+      description: No type property in modelJson of InlineResponse200\n+      responses:\n+        200:\n+          description: InlineResponse200 itself.\n+          content:\n+            application/json:\n+              schema:\n+                type: object\n+                # OAS3 spec allows to use any value in format field\n+                format: unknown", "originalCommit": "cdf4d35e49857e0214b8a8cf4694c61f653d09b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MzAyMA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6153#discussion_r463973020", "bodyText": "Just to check that format property saved in broken schemas. On purpose.", "author": "ybelenko", "createdAt": "2020-08-01T15:32:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MjMyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3ODkzNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6153#discussion_r463978937", "bodyText": "IMO, there may be a contradiction in the OAS spec (both 3.0.3 and 3.1) versus the JSON schema specification.\nI have opened OAI/OpenAPI-Specification#2301. It would be interesting to have @wing328  and @jimschubert  opinions.\nIn any case, I suggest adding the code comments below because later it can be hard for maintainers to understand the context and why this was done.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        model.setFormat(object.getFormat());\n          \n          \n            \n                        // Even though the `format` keyword typically applies to primitive types only,\n          \n          \n            \n                        // the JSON schema specification states `format` can be used for any model type instance\n          \n          \n            \n                        // including object types.\n          \n          \n            \n                        model.setFormat(object.getFormat());", "author": "sebastien-rosset", "createdAt": "2020-08-01T16:42:57Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/InlineModelResolver.java", "diffHunk": "@@ -621,6 +621,12 @@ private Schema modelFromProperty(OpenAPI openAPI, Schema object, String path) {\n         XML xml = object.getXml();\n         Map<String, Schema> properties = object.getProperties();\n         Schema model = new Schema();\n+        if (object.getType() != null) {\n+            model.setType(object.getType());\n+        }\n+        if (object.getFormat() != null) {\n+            model.setFormat(object.getFormat());", "originalCommit": "cdf4d35e49857e0214b8a8cf4694c61f653d09b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2bd379bd2f388b744a90e28f5de1aa3d2a58be66", "url": "https://github.com/OpenAPITools/openapi-generator/commit/2bd379bd2f388b744a90e28f5de1aa3d2a58be66", "message": "Add comments suggested by @sebastien-rosset", "committedDate": "2020-08-02T10:40:54Z", "type": "commit"}]}