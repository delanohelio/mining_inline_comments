{"pr_number": 5440, "pr_title": "Support for additionalProperties in the C generator", "pr_createdAt": "2020-02-25T18:24:40Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/5440", "timeline": [{"oid": "c499046c26538f4f6a59e17610697482701a1302", "url": "https://github.com/OpenAPITools/openapi-generator/commit/c499046c26538f4f6a59e17610697482701a1302", "message": "Support for additionalProperties in the C generator.", "committedDate": "2020-02-25T17:49:19Z", "type": "commit"}, {"oid": "35d2a2d9c206e6881cee2f5c1c86dc8800affe16", "url": "https://github.com/OpenAPITools/openapi-generator/commit/35d2a2d9c206e6881cee2f5c1c86dc8800affe16", "message": "Support for additionalProperties in the C generator.", "committedDate": "2020-02-25T18:33:09Z", "type": "commit"}, {"oid": "bd4d396fe0e0eb4f020106661aac06222e1b2335", "url": "https://github.com/OpenAPITools/openapi-generator/commit/bd4d396fe0e0eb4f020106661aac06222e1b2335", "message": "Merge branch 'temp-branch' into betterCclient", "committedDate": "2020-02-25T18:36:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI0MDAzOA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5440#discussion_r384240038", "bodyText": "Hi @michelealbano, I have some questions here.\n\n\nIs this function \"keyValuePair_create_allocate\" used now? I cannot see any use case of this function.\n\n\nActually, this function \"keyValuePair_create_allocate\" allocates memory only for native data type (such as bool, int, double), the function name is not suitable.\n\n\nFrom my view, if we (OpenAPI-Generator) provide the allocating function, we should also provide the free function.", "author": "ityuhui", "createdAt": "2020-02-26T02:13:44Z", "path": "modules/openapi-generator/src/main/resources/C-libcurl/apiKey.c.mustache", "diffHunk": "@@ -9,6 +9,12 @@ keyValuePair_t *keyValuePair_create(char *key, void *value) {\n     return keyValuePair;\n }\n \n+keyValuePair_t* keyValuePair_create_allocate(char* key, double value) {", "originalCommit": "bd4d396fe0e0eb4f020106661aac06222e1b2335", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxNDU3NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5440#discussion_r384314574", "bodyText": "It is to be used in the main.\nCurrently, the generated code for models says:\nif(cJSON_AddNumberToObject(localMapObject, localKeyValue->key, *(double *)localKeyValue->value) == NULL)\nthus it considers the value as a pointer. The keyValuePair_create limited itself to copying the value. Imagine I wanted to have a (\"numberOfTeeth\", 5), I had to do this in my main:\nint number = 5; // since I need a lvalue\ndouble* val1 = malloc(sizeof(number));\nmemcpy(val1, &number, sizeof(number));\nkeyValuePair_create(\"numberOfTeeth\", val1);\n\nI tried to put directly the number (5) in the value, casting int to void *, but I would have to change a great deal of generated code for models, for example the ones I showed at the beginning of this message.\nWe are actually providing free functions! For example, I have this in my model.c:\nvoid orchestration_form_request_dto_free(orchestration_form_request_dto_t *orchestration_form_request_dto) {\n    listEntry_t *listEntry;\n    list_ForEach(listEntry, orchestration_form_request_dto->orchestration_flags) {\n        keyValuePair_t *localKeyValue = (keyValuePair_t*) listEntry->data;\n        free (localKeyValue->key);\n        free (localKeyValue->value);\n    }\n    list_free(orchestration_form_request_dto->orchestration_flags);\n    free(orchestration_form_request_dto);\n}", "author": "michelealbano", "createdAt": "2020-02-26T07:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI0MDAzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM0Mjg5Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5440#discussion_r384342896", "bodyText": "OK. I got it. No problems.", "author": "ityuhui", "createdAt": "2020-02-26T08:44:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI0MDAzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1MDkwMQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5440#discussion_r384250901", "bodyText": "Hi @michelealbano,\nWhy \"{{{name}}}_local_map\" is changed to \"cJSON *localMapObject\" ?", "author": "ityuhui", "createdAt": "2020-02-26T02:59:01Z", "path": "modules/openapi-generator/src/main/resources/C-libcurl/model-body.mustache", "diffHunk": "@@ -643,22 +642,24 @@ fail:\n     keyValuePair_t *localMapKeyPair;\n     cJSON_ArrayForEach({{{name}}}_local_map, {{{name}}})\n     {\n+\t\tcJSON *localMapObject = {{{name}}}_local_map;", "originalCommit": "bd4d396fe0e0eb4f020106661aac06222e1b2335", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxNzE5NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5440#discussion_r384317195", "bodyText": "Later on, the code did:\ncJSON_AddItemToObject({{{name}}},\"\", localMapObject);\nmeaning that there was an in item containing an item etc. The JSON for\n{\"fruit\" : \"apple\"}\nwould become\n{\"\" : {\"fruit\" : \"apple\"}}\n(that's why I verified my JSON against the one produced by other generators - see the beginning of my PR message)\nI needed to use {{{name}}}_local_map in the code, for example a few lines later where I do:\nlocalMapKeyPair = keyValuePair_create(strdup(localMapObject->string),strdup(localMapObject->valuestring));\nbut since I was into an {{#items}}, the content of {{{name}}} was different.\nThus, I provided an alias for {{{name}}}_local_map.", "author": "michelealbano", "createdAt": "2020-02-26T07:41:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1MDkwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM0Mzg2NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5440#discussion_r384343865", "bodyText": "OK. I got it.", "author": "ityuhui", "createdAt": "2020-02-26T08:46:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1MDkwMQ=="}], "type": "inlineReview"}]}