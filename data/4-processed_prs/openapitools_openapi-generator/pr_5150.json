{"pr_number": 5150, "pr_title": "[go-experimental] Add oneOf support", "pr_createdAt": "2020-01-29T17:08:52Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/5150", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMjUxNQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5150#discussion_r375032515", "bodyText": "Related to this comment, and line 5672. From https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#discriminatorObject:\n\nWhen using the discriminator, inline schemas will not be considered.\n\nI think we'd need to move line 5672 above this loop, and if discriminator is present, don't honor inline models.", "author": "jimschubert", "createdAt": "2020-02-05T02:37:39Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -5519,4 +5641,40 @@ public FeatureSet getFeatureSet() {\n     public void setFeatureSet(final FeatureSet featureSet) {\n         this.featureSet = featureSet == null ? DefaultFeatureSet : featureSet;\n     }\n+\n+    //// Following methods are related to the \"useOneOfInterfaces\" feature\n+    /**\n+     * Add \"x-oneOf-name\" extension to a given oneOf schema (assuming it has at least 1 oneOf elements)\n+     * @param s schema to add the extension to\n+     * @param name name of the parent oneOf schema\n+     */\n+    public void addOneOfNameExtension(ComposedSchema s, String name) {\n+        if (s.getOneOf() != null && s.getOneOf().size() > 0) {\n+            s.addExtension(\"x-oneOf-name\", name);\n+        }\n+    }\n+\n+    /**\n+     * Add a given ComposedSchema as an interface model to be generated\n+     * @param cs ComposedSchema object to create as interface model\n+     * @param type name to use for the generated interface model\n+     */\n+    public void addOneOfInterfaceModel(ComposedSchema cs, String type) {\n+        CodegenModel cm = new CodegenModel();\n+\n+        for (Schema o : cs.getOneOf()) {\n+            // TODO: inline objects", "originalCommit": "7bb83cbe84bcc66c32dfeebbd02cc0b3edb53e12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExNDIyNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5150#discussion_r375114227", "bodyText": "Good point. I'll take a look and try to address this.", "author": "bkabrda", "createdAt": "2020-02-05T08:25:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMjUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE2Njc3Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5150#discussion_r375166773", "bodyText": "I added a commit that handles this. TBH, I found out that this doesn't work with inline models even if the discriminator is not used (because inline models don't have $ref). I added a warning about this that would get emitted if inline objects are used.\nI honestly don't know ATM how I'd even add the support for inline models to this machinery and don't have too much time to work on that. Hopefully this can be accepted as something to work on going forward and wouldn't be required to accept this PR.", "author": "bkabrda", "createdAt": "2020-02-05T10:13:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMjUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwMzYzNA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5150#discussion_r375603634", "bodyText": "looks great!", "author": "jimschubert", "createdAt": "2020-02-06T01:47:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMjUxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMzYwNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5150#discussion_r375033607", "bodyText": "This is probably the best javadoc in the project now, and I hope it sets the bar high for everyone :)", "author": "jimschubert", "createdAt": "2020-02-05T02:42:26Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/OneOfImplementorAdditionalData.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package org.openapitools.codegen.utils;\n+\n+import org.openapitools.codegen.CodegenConfig;\n+import org.openapitools.codegen.CodegenModel;\n+import org.openapitools.codegen.CodegenProperty;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * This class holds data to add to `oneOf` members. Let's consider this example:", "originalCommit": "7bb83cbe84bcc66c32dfeebbd02cc0b3edb53e12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExNDExNQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5150#discussion_r375114115", "bodyText": "Thanks :)", "author": "bkabrda", "createdAt": "2020-02-05T08:25:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMzYwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzNDkzMg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5150#discussion_r375034932", "bodyText": "I have a PR to normalize vendor extensions to match the naming strategy defined in the OpenAPI Specification (must start with x-) and more specifically our rule defined in CONTRIBUTING.md (x- prefixed and lower-kebab-case).\nWould it be a huge pain to change this to x-is-one-of-interface in this PR, or should I wait for this to be merged and integrate up to my PR?", "author": "jimschubert", "createdAt": "2020-02-05T02:48:42Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -319,6 +326,65 @@ private void registerMustacheLambdas() {\n     // override with any special post-processing for all models\n     @SuppressWarnings({\"static-method\", \"unchecked\"})\n     public Map<String, Object> postProcessAllModels(Map<String, Object> objs) {\n+        if (this.useOneOfInterfaces) {\n+            // First, add newly created oneOf interfaces\n+            for (CodegenModel cm : addOneOfInterfaces) {\n+                Map<String, Object> modelValue = new HashMap<String, Object>() {{\n+                    putAll(additionalProperties());\n+                    put(\"model\", cm);\n+                }};\n+                List<Object> modelsValue = Arrays.asList(modelValue);\n+                List<Map<String, String>> importsValue = new ArrayList<Map<String, String>>();\n+                Map<String, Object> objsValue = new HashMap<String, Object>() {{\n+                    put(\"models\", modelsValue);\n+                    put(\"package\", modelPackage());\n+                    put(\"imports\", importsValue);\n+                    put(\"classname\", cm.classname);\n+                    putAll(additionalProperties);\n+                }};\n+                objs.put(cm.name, objsValue);\n+            }\n+\n+            // Gather data from all the models that contain oneOf into OneOfImplementorAdditionalData classes\n+            // (see docstring of that class to find out what information is gathered and why)\n+            Map<String, OneOfImplementorAdditionalData> additionalDataMap = new HashMap<String, OneOfImplementorAdditionalData>();\n+            for (Map.Entry modelsEntry : objs.entrySet()) {\n+                Map<String, Object> modelsAttrs = (Map<String, Object>) modelsEntry.getValue();\n+                List<Object> models = (List<Object>) modelsAttrs.get(\"models\");\n+                List<Map<String, String>> modelsImports = (List<Map<String, String>>) modelsAttrs.getOrDefault(\"imports\", new ArrayList<Map<String, String>>());\n+                for (Object _mo : models) {\n+                    Map<String, Object> mo = (Map<String, Object>) _mo;\n+                    CodegenModel cm = (CodegenModel) mo.get(\"model\");\n+                    if (cm.oneOf.size() > 0) {\n+                        cm.vendorExtensions.put(\"isOneOfInterface\", true);", "originalCommit": "7bb83cbe84bcc66c32dfeebbd02cc0b3edb53e12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExNDQ3NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5150#discussion_r375114475", "bodyText": "I have no problem with changing this, let me do that.", "author": "bkabrda", "createdAt": "2020-02-05T08:26:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzNDkzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMDI2Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5150#discussion_r375120263", "bodyText": "\u2705 done", "author": "bkabrda", "createdAt": "2020-02-05T08:40:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzNDkzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzNjE5MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5150#discussion_r375236190", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Convenience method to wrap this instance of {{classname}} in {{{.}}}\n          \n          \n            \n            // As{{{.}}} wraps this instance of {{classname}} in {{{.}}}", "author": "jirikuncar", "createdAt": "2020-02-05T12:50:47Z", "path": "modules/openapi-generator/src/main/resources/go-experimental/model.mustache", "diffHunk": "@@ -152,6 +152,12 @@ func (s *{{classname}}) UnmarshalJSON(src []byte) error {\n     {{/discriminator}}\n }\n {{/vendorExtensions.x-is-one-of-interface}}\n+{{#vendorExtensions.implements}}\n+// Convenience method to wrap this instance of {{classname}} in {{{.}}}", "originalCommit": "e3979bf5e704301e291b10725f2b8b87d0a2f991", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMwOTkwOQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5150#discussion_r375309909", "bodyText": "\ud83d\udcdbThank you!", "author": "jirikuncar", "createdAt": "2020-02-05T15:04:48Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -377,8 +377,9 @@ private void registerMustacheLambdas() {\n                 for (Object _implmo : models) {\n                     Map<String, Object> implmo = (Map<String, Object>) _implmo;\n                     CodegenModel implcm = (CodegenModel) implmo.get(\"model\");\n-                    if (additionalDataMap.containsKey(implcm.name)) {\n-                        additionalDataMap.get(implcm.name).addToImplementor(this, implcm, imports, addOneOfInterfaceImports);\n+                    String modelName = toModelName(implcm.name);", "originalCommit": "a3a4915b9de16fa8aaa927629b94105e6edc55bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e0f25449923030bf12dce8f097fed6d8566f1caf", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e0f25449923030bf12dce8f097fed6d8566f1caf", "message": "[go-experimental] Add oneOf support", "committedDate": "2020-02-10T13:38:08Z", "type": "commit"}, {"oid": "40dbf3aa10b34b4b13019346080197200737cb1c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/40dbf3aa10b34b4b13019346080197200737cb1c", "message": "Fix docs for the oneOf models", "committedDate": "2020-02-10T13:38:25Z", "type": "commit"}, {"oid": "b94ec8de689f4cf3af34cac9097970c477110f00", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b94ec8de689f4cf3af34cac9097970c477110f00", "message": "isOneOfInterface => x-is-one-of-interface", "committedDate": "2020-02-10T13:38:27Z", "type": "commit"}, {"oid": "dbd5aa1dd0d7bf9b104d0ce460a4dea8ba129a55", "url": "https://github.com/OpenAPITools/openapi-generator/commit/dbd5aa1dd0d7bf9b104d0ce460a4dea8ba129a55", "message": "Add proper warnings when inline models are used in oneOf choices", "committedDate": "2020-02-10T13:38:28Z", "type": "commit"}, {"oid": "7fd47d6dbdffafc70c0d51e98e5a7e01f15aecda", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7fd47d6dbdffafc70c0d51e98e5a7e01f15aecda", "message": "Add a convenience method to oneOf implementing structs to cast them as the oneOf interface", "committedDate": "2020-02-10T13:38:30Z", "type": "commit"}, {"oid": "800bea5dd298d0a693bc6a0a8b7857f5c1ec3067", "url": "https://github.com/OpenAPITools/openapi-generator/commit/800bea5dd298d0a693bc6a0a8b7857f5c1ec3067", "message": "Update modules/openapi-generator/src/main/resources/go-experimental/model.mustache\n\nCo-Authored-By: Jiri Kuncar <jiri.kuncar@gmail.com>", "committedDate": "2020-02-10T13:38:31Z", "type": "commit"}, {"oid": "b93a747b5f19200efbc985b5300c28edbd61da5d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b93a747b5f19200efbc985b5300c28edbd61da5d", "message": "Fix retrieving data from additionalDataMap", "committedDate": "2020-02-10T13:38:32Z", "type": "commit"}, {"oid": "347eaf77ded08e4423bc8d48b633193c4d69636a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/347eaf77ded08e4423bc8d48b633193c4d69636a", "message": "Add basic tests", "committedDate": "2020-02-10T13:38:33Z", "type": "commit"}, {"oid": "347eaf77ded08e4423bc8d48b633193c4d69636a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/347eaf77ded08e4423bc8d48b633193c4d69636a", "message": "Add basic tests", "committedDate": "2020-02-10T13:38:33Z", "type": "forcePushed"}]}