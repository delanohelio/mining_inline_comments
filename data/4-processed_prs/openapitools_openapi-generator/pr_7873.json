{"pr_number": 7873, "pr_title": "Fix a few issues with go examples generation", "pr_createdAt": "2020-11-04T09:42:30Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/7873", "timeline": [{"oid": "82f10eb97ebe50d59ad889d28beabdf10c88312a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/82f10eb97ebe50d59ad889d28beabdf10c88312a", "message": "Fix a few issues with go examples generation\n\nThis fixes a bunch of issues seen when generating go examples, namely\n - Numbers aren't casted to the right type\n - The time import is missing\n - Enums are treated as regular models", "committedDate": "2020-11-04T09:41:48Z", "type": "commit"}, {"oid": "14156cb129192f8288949abb88072ddf9fb43c42", "url": "https://github.com/OpenAPITools/openapi-generator/commit/14156cb129192f8288949abb88072ddf9fb43c42", "message": "Rebuild more samples", "committedDate": "2020-11-04T09:43:41Z", "type": "commit"}, {"oid": "67a316dd912d56fe19fd7b61756d7c62515c76a2", "url": "https://github.com/OpenAPITools/openapi-generator/commit/67a316dd912d56fe19fd7b61756d7c62515c76a2", "message": "Use examples properly", "committedDate": "2020-11-04T11:02:50Z", "type": "commit"}, {"oid": "ad2949ce7144f3f68ae3b826e23961532cc20499", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ad2949ce7144f3f68ae3b826e23961532cc20499", "message": "Handle multiple instances in the same doc", "committedDate": "2020-11-05T08:35:31Z", "type": "commit"}, {"oid": "e7e110a9f66247fb3cff3651796f83bddf02d0dd", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e7e110a9f66247fb3cff3651796f83bddf02d0dd", "message": "Fix wrong array closure", "committedDate": "2020-11-05T08:49:07Z", "type": "commit"}, {"oid": "3d0a9d06881571dead4208b22190d6074e365dc8", "url": "https://github.com/OpenAPITools/openapi-generator/commit/3d0a9d06881571dead4208b22190d6074e365dc8", "message": "Handle model arrays", "committedDate": "2020-11-05T09:50:42Z", "type": "commit"}, {"oid": "9ea35ecf913136fe99d3ba9cdaf3d36313ef303f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/9ea35ecf913136fe99d3ba9cdaf3d36313ef303f", "message": "Fix file and enum namespace", "committedDate": "2020-11-05T10:31:13Z", "type": "commit"}, {"oid": "63ea632a5b1b97c28a5648fa71600a3e514d73e6", "url": "https://github.com/OpenAPITools/openapi-generator/commit/63ea632a5b1b97c28a5648fa71600a3e514d73e6", "message": "Regenerate samples", "committedDate": "2020-11-05T13:30:28Z", "type": "commit"}, {"oid": "1a6712aa0d0e917accc2ca6f04148e12843365a7", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1a6712aa0d0e917accc2ca6f04148e12843365a7", "message": "Handle maps of complex types", "committedDate": "2020-11-05T13:40:26Z", "type": "commit"}, {"oid": "efa4f60054d55a7c2347ed9bfc14d0bb24c4dd08", "url": "https://github.com/OpenAPITools/openapi-generator/commit/efa4f60054d55a7c2347ed9bfc14d0bb24c4dd08", "message": "Handle oneOf", "committedDate": "2020-11-05T17:38:35Z", "type": "commit"}, {"oid": "ca56a1935a61b69e0ba3d80919bc2c8e70568ea8", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ca56a1935a61b69e0ba3d80919bc2c8e70568ea8", "message": "Fix padding", "committedDate": "2020-11-05T17:42:41Z", "type": "commit"}, {"oid": "48ceff6447bf354d655e8f253d193d92649bc100", "url": "https://github.com/OpenAPITools/openapi-generator/commit/48ceff6447bf354d655e8f253d193d92649bc100", "message": "Fix enum doc", "committedDate": "2020-11-09T13:38:48Z", "type": "commit"}, {"oid": "33de7b47b8f251f00109d9fe4e033f3298565c0e", "url": "https://github.com/OpenAPITools/openapi-generator/commit/33de7b47b8f251f00109d9fe4e033f3298565c0e", "message": "Removes links to basic types in arrays", "committedDate": "2020-11-09T14:18:08Z", "type": "commit"}, {"oid": "6ef17db3d743b5111fd0dd8385c0f9a105edf74f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6ef17db3d743b5111fd0dd8385c0f9a105edf74f", "message": "Remove links to basic types in maps", "committedDate": "2020-11-09T14:26:22Z", "type": "commit"}, {"oid": "889dae7cdf78a35ad1584dbd1c3168979447d621", "url": "https://github.com/OpenAPITools/openapi-generator/commit/889dae7cdf78a35ad1584dbd1c3168979447d621", "message": "Fix enum links", "committedDate": "2020-11-09T17:53:13Z", "type": "commit"}, {"oid": "9bdb91ff37abac9790f2cd44054927174846440b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/9bdb91ff37abac9790f2cd44054927174846440b", "message": "Minor indent fix", "committedDate": "2020-11-09T19:27:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQyODg5MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7873#discussion_r520428890", "bodyText": "Is this just a leftover from local testing? I don't think we should turn off tests.", "author": "bkabrda", "createdAt": "2020-11-10T09:51:24Z", "path": "Dockerfile", "diffHunk": "@@ -20,7 +20,7 @@ COPY ./modules/openapi-generator ${GEN_DIR}/modules/openapi-generator\n COPY ./pom.xml ${GEN_DIR}\n \n # Pre-compile openapi-generator-cli\n-RUN mvn -am -pl \"modules/openapi-generator-cli\" package\n+RUN mvn -DskipTests -am -pl \"modules/openapi-generator-cli\" package", "originalCommit": "9bdb91ff37abac9790f2cd44054927174846440b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0NTU1NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7873#discussion_r520445554", "bodyText": "Yep removing.", "author": "therve", "createdAt": "2020-11-10T10:15:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQyODg5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0MDk2OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7873#discussion_r520440969", "bodyText": "I'd suggest using \"map[string][]\".length() instead of 13. It's self-commenting and also prevents off-by-one errors. (There are couple instances of this, so please fix them all)", "author": "bkabrda", "createdAt": "2020-11-10T10:08:49Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/GoClientCodegen.java", "diffHunk": "@@ -448,26 +448,44 @@ public CodegenProperty fromProperty(String name, Schema p) {\n             for (CodegenParameter p : op.allParams) {\n                 p.vendorExtensions.put(\"x-go-example\", constructExampleCode(p, modelMaps, processedModelMaps));\n             }\n+            processedModelMaps.clear();\n         }\n \n-        processedModelMaps.clear();\n         for (CodegenOperation operation : operationList) {\n+            boolean needTimeImport = false;\n             for (CodegenParameter cp : operation.allParams) {\n                 cp.vendorExtensions.put(\"x-go-example\", constructExampleCode(cp, modelMaps, processedModelMaps));\n+                if (cp.isDateTime || cp.isDate) { // datetime or date\n+                    needTimeImport = true;\n+                }\n+            }\n+            if (needTimeImport) {\n+                operation.vendorExtensions.put(\"x-go-import\", \"    \\\"time\\\"\");\n             }\n+            processedModelMaps.clear();\n         }\n \n         return objs;\n     }\n \n     private String constructExampleCode(CodegenParameter codegenParameter, HashMap<String, CodegenModel> modelMaps, HashMap<String, Integer> processedModelMap) {\n         if (codegenParameter.isArray) { // array\n-            return codegenParameter.dataType + \"{\" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n+            String prefix = codegenParameter.dataType;\n+            String dataType = codegenParameter.dataType.substring(2);\n+            if (modelMaps.containsKey(dataType)) {\n+                prefix = \"[]\" + goImportAlias + \".\" + dataType;\n+            }\n+            return prefix + \"{\" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n         } else if (codegenParameter.isMap) {\n-            return codegenParameter.dataType + \"{ \\\"key\\\": \" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n+            String prefix = codegenParameter.dataType;\n+            String dataType = codegenParameter.dataType.substring(13); // map[string][]", "originalCommit": "9bdb91ff37abac9790f2cd44054927174846440b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1MDE4MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7873#discussion_r520450180", "bodyText": "Good thinking. I tried removeStart  which seems even more clear, let me know if it works.", "author": "therve", "createdAt": "2020-11-10T10:22:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0MDk2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0MzM4Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7873#discussion_r520443383", "bodyText": "I think if you just use\n{{#vendorExtensions.x-go-import}}\n{{{vendorExtensions.x-go-import}}}\n{{/vendorExtensions.x-go-import}}\n\nwithout any heading/trailing whitespace, it will still produce no output (not even blank lines) if there are no extra imports - this would make the template code nicer.", "author": "bkabrda", "createdAt": "2020-11-10T10:12:25Z", "path": "modules/openapi-generator/src/main/resources/go/api_doc.mustache", "diffHunk": "@@ -28,7 +28,8 @@ package main\n import (\n     \"context\"\n     \"fmt\"\n-    \"os\"\n+    \"os\"{{#vendorExtensions.x-go-import}}\n+{{{vendorExtensions.x-go-import}}}{{/vendorExtensions.x-go-import}}", "originalCommit": "9bdb91ff37abac9790f2cd44054927174846440b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8f35ab0e226c8e547feca668f029e0d815d2cf87", "url": "https://github.com/OpenAPITools/openapi-generator/commit/8f35ab0e226c8e547feca668f029e0d815d2cf87", "message": "Handle review comments", "committedDate": "2020-11-10T10:29:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI5ODk0Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7873#discussion_r528298942", "bodyText": "@therve FYI. I've fled #7998 to fix the string comparison in this line and a few other lines in this file.", "author": "wing328", "createdAt": "2020-11-22T08:07:43Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/GoClientCodegen.java", "diffHunk": "@@ -448,26 +448,44 @@ public CodegenProperty fromProperty(String name, Schema p) {\n             for (CodegenParameter p : op.allParams) {\n                 p.vendorExtensions.put(\"x-go-example\", constructExampleCode(p, modelMaps, processedModelMaps));\n             }\n+            processedModelMaps.clear();\n         }\n \n-        processedModelMaps.clear();\n         for (CodegenOperation operation : operationList) {\n+            boolean needTimeImport = false;\n             for (CodegenParameter cp : operation.allParams) {\n                 cp.vendorExtensions.put(\"x-go-example\", constructExampleCode(cp, modelMaps, processedModelMaps));\n+                if (cp.isDateTime || cp.isDate) { // datetime or date\n+                    needTimeImport = true;\n+                }\n+            }\n+            if (needTimeImport) {\n+                operation.vendorExtensions.put(\"x-go-import\", \"    \\\"time\\\"\");\n             }\n+            processedModelMaps.clear();\n         }\n \n         return objs;\n     }\n \n     private String constructExampleCode(CodegenParameter codegenParameter, HashMap<String, CodegenModel> modelMaps, HashMap<String, Integer> processedModelMap) {\n         if (codegenParameter.isArray) { // array\n-            return codegenParameter.dataType + \"{\" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n+            String prefix = codegenParameter.dataType;\n+            String dataType = StringUtils.removeStart(codegenParameter.dataType, \"[]\");\n+            if (modelMaps.containsKey(dataType)) {\n+                prefix = \"[]\" + goImportAlias + \".\" + dataType;\n+            }\n+            return prefix + \"{\" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n         } else if (codegenParameter.isMap) {\n-            return codegenParameter.dataType + \"{ \\\"key\\\": \" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n+            String prefix = codegenParameter.dataType;\n+            String dataType = StringUtils.removeStart(codegenParameter.dataType, \"map[string][]\");\n+            if (modelMaps.containsKey(dataType)) {\n+                prefix = \"map[string][]\" + goImportAlias + \".\" + dataType;\n+            }\n+            return prefix + \"{\\\"key\\\": \" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n         } else if (codegenParameter.isPrimitiveType) { // primitive type\n             if (codegenParameter.isString) {\n-                if (StringUtils.isEmpty(codegenParameter.example)) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && codegenParameter.example != \"null\") {", "originalCommit": "8f35ab0e226c8e547feca668f029e0d815d2cf87", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMzMzA5MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7873#discussion_r528333090", "bodyText": "Sorry about. Not sure why I didn't catch that during testing :/", "author": "therve", "createdAt": "2020-11-22T13:06:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI5ODk0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMzMzQ3NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7873#discussion_r528333474", "bodyText": "No worries. No one complains. We spotted it with a code analyser.", "author": "wing328", "createdAt": "2020-11-22T13:09:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI5ODk0Mg=="}], "type": "inlineReview"}]}