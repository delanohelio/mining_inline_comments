{"pr_number": 6481, "pr_title": "[Rust][Client][Reqwest] Better http error handling", "pr_createdAt": "2020-05-29T07:24:53Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/6481", "timeline": [{"oid": "9e3565e71d4f1419b1d57edbaf2243d82d8c9e93", "url": "https://github.com/OpenAPITools/openapi-generator/commit/9e3565e71d4f1419b1d57edbaf2243d82d8c9e93", "message": "Stronger typing for http errors with Rust client. (#5609).", "committedDate": "2020-05-29T06:42:54Z", "type": "commit"}, {"oid": "948d653806c6593cca5a96c59b6f53efdca255ee", "url": "https://github.com/OpenAPITools/openapi-generator/commit/948d653806c6593cca5a96c59b6f53efdca255ee", "message": "Merge branch 'master' into 5609-rust-client-better-error-typing (support async with reqwest 0.10+).", "committedDate": "2020-05-29T07:12:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MzA4OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6481#discussion_r432383088", "bodyText": "hey \ud83d\ude4b\u200d\u2642\ufe0f  great attempt on this issue, but this isn't complete yet.\nThe openapi spec allows for defining a schema for every possible response status: eg\n\"responses\": {\n    \"200\": {},\n    \"202\": {},\n    \"400\": {},\n    \"default\": {}\n}\nso instead of just checking for a success status, you'll need to match over the response status.\nand deserialize based on the defined schema for that status as well as the fallback(default) schema.\nI imagine this means that the return type of methods would become an enum,\npub enum OperationIdResponse {\n    Status200(Status200Schema),\n    Status202(Status202Schema),\n    Status400(Status400Schema),\n    Unspecified(DefaultSchema)\n}\n\n// .. snip\nmatch response.status().as_u16() {\n    200 => Ok(OperationIdResponse::Status200(response.json().await?))\n    202 => Ok(OperationIdResponse::Status202(response.json().await?))\n    400 => Ok(OperationIdResponse::Status400(response.json().await?))\n    _ => Ok(OperationIdResponse::Unspecified(response.json().await?))\n}\n// .. snip", "author": "seunlanlege", "createdAt": "2020-05-29T10:00:34Z", "path": "samples/client/petstore/rust/reqwest/fileResponseTest/src/apis/default_api.rs", "diffHunk": "@@ -47,7 +47,16 @@ impl DefaultApi for DefaultApiClient {\n         }\n \n         let req = req_builder.build()?;\n-        Ok(client.execute(req)?.error_for_status()?.json()?)\n+        let mut resp = client.execute(req)?;\n+        if resp.status().is_success() {\n+            Ok(resp.json()?)\n+        } else {\n+            let status = resp.status();\n+            let content = resp.text()?;\n+            let entity: Option<serde_json::Value> = serde_json::from_str(&content).ok();\n+            let error = crate::apis::ResponseErrorContent { status, content, entity };\n+            Err(Error::ResponseError(error))\n+        }", "originalCommit": "948d653806c6593cca5a96c59b6f53efdca255ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyMTQ3Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6481#discussion_r432421476", "bodyText": "Hi @seunlanlege,\nThanks for your comment. I know this is just a first attempt which is incomplete.\nI had the same idea of an enum as response, but I don't like it. I think we should not return Ok when the return status is not ok\u2026", "author": "bcourtine", "createdAt": "2020-05-29T11:26:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MzA4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNjI0Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6481#discussion_r432426243", "bodyText": "I am working on something like:\n#[derive(Debug, Clone)]\npub struct ResponseErrorContent<T> {\n    pub status: reqwest::StatusCode,\n    pub content: String,\n    pub entity: Option<T>,\n}\n\n#[derive(Debug)]\npub enum Error<T> {\n    Reqwest(reqwest::Error),\n    Serde(serde_json::Error),\n    Io(std::io::Error),\n    ResponseError(ResponseErrorContent<T>),\n}\nwhere T could be an enum of error types corresponding to error codes.", "author": "bcourtine", "createdAt": "2020-05-29T11:37:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MzA4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzMzQxMg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6481#discussion_r432433412", "bodyText": "also bear in mind that there could be more than one success response in the 2xx range, So success types would potentially be an enum", "author": "seunlanlege", "createdAt": "2020-05-29T11:53:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MzA4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1MTY3OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6481#discussion_r432451678", "bodyText": "With an enum, multiple success codes can be handled, but this case is not frequent. So I don't know if it is worth complicating the generated code for this.", "author": "bcourtine", "createdAt": "2020-05-29T12:32:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MzA4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3MTE0Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6481#discussion_r432971147", "bodyText": "multiple success codes can be handled, but this case is not frequent.\n\nunfortunately it's actually very common \ud83d\ude05\njira/sendgrid's openapi specifications have multiple 2xx success schemas", "author": "seunlanlege", "createdAt": "2020-05-31T18:18:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MzA4OA=="}], "type": "inlineReview"}, {"oid": "ed3e8fbc9b4cdb4e3547817a38fb73e1c4ae5f52", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ed3e8fbc9b4cdb4e3547817a38fb73e1c4ae5f52", "message": "Error structure can be parametrized (but is still hardcoded with `serde_json::Value` in generated code).", "committedDate": "2020-05-29T11:56:56Z", "type": "commit"}, {"oid": "3ad86b3ddf70f5671a15d7f82c9ef6be7f2f93e6", "url": "https://github.com/OpenAPITools/openapi-generator/commit/3ad86b3ddf70f5671a15d7f82c9ef6be7f2f93e6", "message": "Each API method has is own enum of functionnal errors.", "committedDate": "2020-05-29T12:14:34Z", "type": "commit"}, {"oid": "755fc693a6ec85647d88b3010c26afbdeba43c70", "url": "https://github.com/OpenAPITools/openapi-generator/commit/755fc693a6ec85647d88b3010c26afbdeba43c70", "message": "Fix the missing \"Debug\" derivation for API error enums.", "committedDate": "2020-05-29T12:46:40Z", "type": "commit"}, {"oid": "ff3d510a69b0c6d266c79d2a2d38472c36554782", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ff3d510a69b0c6d266c79d2a2d38472c36554782", "message": "Generate models for error deserialization.", "committedDate": "2020-05-30T07:46:10Z", "type": "commit"}, {"oid": "250d0ede69feb121f54cd0e05d9fb20b2ce2a05e", "url": "https://github.com/OpenAPITools/openapi-generator/commit/250d0ede69feb121f54cd0e05d9fb20b2ce2a05e", "message": "Handle several 2xx success models.", "committedDate": "2020-06-09T08:04:19Z", "type": "commit"}, {"oid": "a890621306cbeaacfdd3bb2543362c2887983f59", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a890621306cbeaacfdd3bb2543362c2887983f59", "message": "Expose new API objects, required to use the API (params, success, error structs/enums).", "committedDate": "2020-06-09T17:24:21Z", "type": "commit"}, {"oid": "733fd9d601b19862de26b8424106f60cd9716e6c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/733fd9d601b19862de26b8424106f60cd9716e6c", "message": "Merge remote-tracking branch 'upstream/master' into 5609-rust-client-better-error-typing", "committedDate": "2020-06-09T20:24:53Z", "type": "commit"}, {"oid": "a72be48f30e551342918fb63546ece224153cca0", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a72be48f30e551342918fb63546ece224153cca0", "message": "Merge branch 'master' of https://github.com/openapitools/openapi-generator into 5609-rust-client-better-error-typing", "committedDate": "2020-06-12T13:51:16Z", "type": "commit"}]}