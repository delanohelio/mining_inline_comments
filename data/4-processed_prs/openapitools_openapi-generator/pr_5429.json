{"pr_number": 5429, "pr_title": "[scala] new scala-sttp client generator", "pr_createdAt": "2020-02-25T10:33:54Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/5429", "timeline": [{"oid": "1620ad5071a39f48e05239c39c805861585b0e4e", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1620ad5071a39f48e05239c39c805861585b0e4e", "message": "scala-sttp-client template", "committedDate": "2020-02-23T17:04:58Z", "type": "commit"}, {"oid": "35d120d2f44a2230c57c85550f8f2c476e45590b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/35d120d2f44a2230c57c85550f8f2c476e45590b", "message": "invoker for sttp fixed and tests added", "committedDate": "2020-02-25T10:28:51Z", "type": "commit"}, {"oid": "b20fdb17f7637f4ba5aad62a345b28c7e89f4da4", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b20fdb17f7637f4ba5aad62a345b28c7e89f4da4", "message": "clean up pet api test from redunant comments", "committedDate": "2020-02-25T10:39:00Z", "type": "commit"}, {"oid": "262d0890094d600ed4a37f12a9745fdd87f4633b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/262d0890094d600ed4a37f12a9745fdd87f4633b", "message": "docs updated", "committedDate": "2020-02-26T05:00:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NDY2Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384294662", "bodyText": "is it possible to make SttpSerializer\n\njson agnostic (some endpoints require binary serializers)\nlibrary agnostic (what if instead json4s I want to use jackson or circe)\n\nOne of the approach is to have intermediate serialization abstraction or at least interface", "author": "eugeniyk", "createdAt": "2020-02-26T06:24:30Z", "path": "modules/openapi-generator/src/main/resources/scala-sttp-client/apiInvoker.mustache", "diffHunk": "@@ -0,0 +1,54 @@\n+{{>licenseInfo}}\n+package {{{mainPackage}}}.core\n+\n+import java.io.File\n+\n+import org.joda.time.DateTime\n+import org.joda.time.format.ISODateTimeFormat\n+import org.json4s.JsonAST.JString\n+import org.json4s._\n+import sttp.client._\n+import org.openapitools.client.api.EnumsSerializers\n+import org.openapitools.client.core.ApiInvoker.DateTimeSerializer\n+import sttp.client.json4s.SttpJson4sApi\n+import sttp.client.monad.MonadError\n+\n+class SttpSerializer(implicit val format: Formats = DefaultFormats ++ EnumsSerializers.all + DateTimeSerializer,\n+                     implicit val serialization: org.json4s.Serialization = org.json4s.jackson.Serialization) extends SttpJson4sApi", "originalCommit": "262d0890094d600ed4a37f12a9745fdd87f4633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMzNjMwNg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384336306", "bodyText": "That under discussion in softwaremill/sttp-model#5\njson4slibrary by default is a good compromise as it has AST model and supports jackson serialization as well. It is also possible to generate circle (or other supported by sttp) SttpSerializer by additionalProperties option instead of json4s.\nMake it fully library agnostic now seems bit complicated as sttp serializers haven't common interface.\ncould i ask for example regarding openApi spec for json agnostic question? generally asJson can be applied only to application/json responses, for binary (such as protobuf) solution seems too broad. will be great if you could create PR for that", "author": "chameleon82", "createdAt": "2020-02-26T08:30:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NDY2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NDg3OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384294878", "bodyText": "if you'll move (implicit backend: SttpBackend[R, Nothing, Nothing]) to this line, we can make ApiRequestImprovements as AnyVal implicit class and reduce memory allocation", "author": "eugeniyk", "createdAt": "2020-02-26T06:25:16Z", "path": "modules/openapi-generator/src/main/resources/scala-sttp-client/apiInvoker.mustache", "diffHunk": "@@ -0,0 +1,54 @@\n+{{>licenseInfo}}\n+package {{{mainPackage}}}.core\n+\n+import java.io.File\n+\n+import org.joda.time.DateTime\n+import org.joda.time.format.ISODateTimeFormat\n+import org.json4s.JsonAST.JString\n+import org.json4s._\n+import sttp.client._\n+import org.openapitools.client.api.EnumsSerializers\n+import org.openapitools.client.core.ApiInvoker.DateTimeSerializer\n+import sttp.client.json4s.SttpJson4sApi\n+import sttp.client.monad.MonadError\n+\n+class SttpSerializer(implicit val format: Formats = DefaultFormats ++ EnumsSerializers.all + DateTimeSerializer,\n+                     implicit val serialization: org.json4s.Serialization = org.json4s.jackson.Serialization) extends SttpJson4sApi\n+\n+class HttpException(val statusCode: Int, val statusText: String, val message: String) extends Exception(s\"[$statusCode] $statusText: $message\")\n+\n+object ApiInvoker {\n+\n+  /**\n+    * Allows request execution without calling apiInvoker.execute(request)\n+    * request.result can be used to get a monad wrapped content.\n+    *\n+    * @param request the apiRequest to be executed\n+    */\n+  implicit class ApiRequestImprovements[R[_], RE, T](request: RequestT[Identity, Either[ResponseError[Exception], T], Nothing])\n+                                                    (implicit backend: SttpBackend[R, Nothing, Nothing]) {\n+\n+    def result: R[T] = {", "originalCommit": "262d0890094d600ed4a37f12a9745fdd87f4633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1NTgyNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384455827", "bodyText": "done", "author": "chameleon82", "createdAt": "2020-02-26T12:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NDg3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMTIxOA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384301218", "bodyText": "from https://www.joda.org/joda-time/:\n\nNote that from Java SE 8 onwards, users are asked to migrate to java.time (JSR-310) - a core part of the JDK which replaces this project.\n\nLet's migrate to Java's date/time API?", "author": "eugeniyk", "createdAt": "2020-02-26T06:49:20Z", "path": "modules/openapi-generator/src/main/resources/scala-sttp-client/build.sbt.mustache", "diffHunk": "@@ -0,0 +1,29 @@\n+version := \"{{artifactVersion}}\"\n+name := \"{{artifactId}}\"\n+organization := \"{{groupId}}\"\n+scalaVersion := \"2.12.8\"\n+\n+val sttp = \"2.0.0\"\n+\n+libraryDependencies ++= Seq(\n+  \"com.softwaremill.sttp.client\" %% \"core\" % sttp,\n+  \"com.softwaremill.sttp.client\" %% \"json4s\" % sttp,\n+\n+  \"joda-time\" % \"joda-time\" % \"2.10.1\",", "originalCommit": "262d0890094d600ed4a37f12a9745fdd87f4633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyOTczNg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384329736", "bodyText": "I've opened next issue for it #5401", "author": "chameleon82", "createdAt": "2020-02-26T08:15:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMTIxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2MjczMQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r387762731", "bodyText": "#5291 for scala-based templates", "author": "chameleon82", "createdAt": "2020-03-04T15:58:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMTIxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMTMyOQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384301329", "bodyText": "for consistency I'd put \"3.6.5\" as val", "author": "eugeniyk", "createdAt": "2020-02-26T06:49:42Z", "path": "modules/openapi-generator/src/main/resources/scala-sttp-client/build.sbt.mustache", "diffHunk": "@@ -0,0 +1,29 @@\n+version := \"{{artifactVersion}}\"\n+name := \"{{artifactId}}\"\n+organization := \"{{groupId}}\"\n+scalaVersion := \"2.12.8\"\n+\n+val sttp = \"2.0.0\"\n+\n+libraryDependencies ++= Seq(\n+  \"com.softwaremill.sttp.client\" %% \"core\" % sttp,\n+  \"com.softwaremill.sttp.client\" %% \"json4s\" % sttp,\n+\n+  \"joda-time\" % \"joda-time\" % \"2.10.1\",\n+  \"org.json4s\" %% \"json4s-jackson\" % \"3.6.5\",", "originalCommit": "262d0890094d600ed4a37f12a9745fdd87f4633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1NTYyMA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384455620", "bodyText": "it better to extract into separate project/Dependency.scala file. i prefer to rename sttp back to keep templates simple.", "author": "chameleon82", "createdAt": "2020-02-26T12:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMTMyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMTQ3NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384301475", "bodyText": "I believe library users won't need maven local?", "author": "eugeniyk", "createdAt": "2020-02-26T06:50:18Z", "path": "modules/openapi-generator/src/main/resources/scala-sttp-client/build.sbt.mustache", "diffHunk": "@@ -0,0 +1,29 @@\n+version := \"{{artifactVersion}}\"\n+name := \"{{artifactId}}\"\n+organization := \"{{groupId}}\"\n+scalaVersion := \"2.12.8\"\n+\n+val sttp = \"2.0.0\"\n+\n+libraryDependencies ++= Seq(\n+  \"com.softwaremill.sttp.client\" %% \"core\" % sttp,\n+  \"com.softwaremill.sttp.client\" %% \"json4s\" % sttp,\n+\n+  \"joda-time\" % \"joda-time\" % \"2.10.1\",\n+  \"org.json4s\" %% \"json4s-jackson\" % \"3.6.5\",\n+  \"org.json4s\" %% \"json4s-ext\" % \"3.6.5\",\n+\n+  // test dependencies\n+  \"org.scalatest\" %% \"scalatest\" % \"3.0.5\" % \"test\",\n+  \"junit\" % \"junit\" % \"4.13\" % \"test\"\n+)\n+\n+resolvers ++= Seq(Resolver.mavenLocal)", "originalCommit": "262d0890094d600ed4a37f12a9745fdd87f4633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MTA1MQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r385071051", "bodyText": "removed", "author": "chameleon82", "createdAt": "2020-02-27T11:33:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMTQ3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMjg1Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384302852", "bodyText": "question - if you generate multiple clients, how would you differentiate settings from each other?", "author": "eugeniyk", "createdAt": "2020-02-26T06:55:29Z", "path": "samples/client/petstore/scala-sttp/src/main/resources/reference.conf", "diffHunk": "@@ -0,0 +1,24 @@\n+org.openapitools.client {", "originalCommit": "262d0890094d600ed4a37f12a9745fdd87f4633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1NjI1Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384456253", "bodyText": "I think don't need this file by default", "author": "chameleon82", "createdAt": "2020-02-26T12:18:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMjg1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMzAzNg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384303036", "bodyText": "is maven required here?", "author": "eugeniyk", "createdAt": "2020-02-26T06:56:08Z", "path": "samples/client/petstore/scala-sttp/pom.xml", "diffHunk": "@@ -0,0 +1,259 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"", "originalCommit": "262d0890094d600ed4a37f12a9745fdd87f4633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1NjMxNQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384456315", "bodyText": "removed", "author": "chameleon82", "createdAt": "2020-02-26T12:18:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMzAzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMzkyMw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384303923", "bodyText": "I'd suggest to change this to\nimplicit class OptionalParams(val request: RequestT[Identity, Either[String, String], Nothing]) extends AnyVal {\nfor gc-free extension method", "author": "eugeniyk", "createdAt": "2020-02-26T06:59:25Z", "path": "modules/openapi-generator/src/main/resources/scala-sttp-client/api.mustache", "diffHunk": "@@ -0,0 +1,65 @@\n+{{>licenseInfo}}\n+package {{package}}\n+\n+{{#imports}}\n+import {{import}}\n+{{/imports}}\n+import {{mainPackage}}.core._\n+import {{mainPackage}}.core.CollectionFormats._\n+import sttp.client._\n+import sttp.model.Method\n+import sttp.client.json4s.SttpJson4sApi\n+\n+{{#operations}}\n+object {{classname}} {\n+\n+  def apply(baseUrl: String = \"{{{basePath}}}\")(implicit serializer: SttpSerializer) = new {{classname}}(baseUrl)\n+}\n+\n+class {{classname}}(baseUrl: String)(implicit serializer: SttpSerializer) {\n+\n+  import serializer._\n+\n+  /*\n+   * Helper to handle Optional header parameters\n+   **/\n+  implicit class optionalParams(request: RequestT[Identity, Either[String, String], Nothing]) {", "originalCommit": "262d0890094d600ed4a37f12a9745fdd87f4633b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwNDE3OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384304178", "bodyText": "there must be string constant from sttp for \"application/json\"", "author": "eugeniyk", "createdAt": "2020-02-26T07:00:18Z", "path": "modules/openapi-generator/src/main/resources/scala-sttp-client/api.mustache", "diffHunk": "@@ -0,0 +1,65 @@\n+{{>licenseInfo}}\n+package {{package}}\n+\n+{{#imports}}\n+import {{import}}\n+{{/imports}}\n+import {{mainPackage}}.core._\n+import {{mainPackage}}.core.CollectionFormats._\n+import sttp.client._\n+import sttp.model.Method\n+import sttp.client.json4s.SttpJson4sApi\n+\n+{{#operations}}\n+object {{classname}} {\n+\n+  def apply(baseUrl: String = \"{{{basePath}}}\")(implicit serializer: SttpSerializer) = new {{classname}}(baseUrl)\n+}\n+\n+class {{classname}}(baseUrl: String)(implicit serializer: SttpSerializer) {\n+\n+  import serializer._\n+\n+  /*\n+   * Helper to handle Optional header parameters\n+   **/\n+  implicit class optionalParams(request: RequestT[Identity, Either[String, String], Nothing]) {\n+   def header( header: String, optValue: Option[Any]): RequestT[Identity, Either[String, String], Nothing] = {\n+      optValue.map( value => request.header(header, value.toString)).getOrElse(request)\n+    }\n+  }\n+\n+{{#operation}}\n+{{#javadocRenderer}}\n+{{>javadoc}}\n+{{/javadocRenderer}}\n+  def {{operationId}}({{>methodParameters}}): RequestT[Identity, Either[ResponseError[Exception], {{>operationReturnType}}], Nothing] =\n+    basicRequest\n+      .method(Method.{{httpMethod.toUpperCase}}, uri\"$baseUrl{{{path}}}{{#queryParams.0}}?{{#queryParams}}{{baseName}}=${{{paramName}}}{{^-last}}&{{/-last}}{{/queryParams}}{{/queryParams.0}}\")\n+      .contentType({{#consumes.0}}\"{{{mediaType}}}\"{{/consumes.0}}{{^consumes}}\"application/json\"{{/consumes}}){{#headerParams}}", "originalCommit": "262d0890094d600ed4a37f12a9745fdd87f4633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ2NjQ3MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384466470", "bodyText": "this seems to long sttp.model.MediaType.ApplicationJson.toString()", "author": "chameleon82", "createdAt": "2020-02-26T12:40:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwNDE3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwNDYyMQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384304621", "bodyText": "in generated doc missing doc for apiKey", "author": "eugeniyk", "createdAt": "2020-02-26T07:01:52Z", "path": "modules/openapi-generator/src/main/resources/scala-sttp-client/api.mustache", "diffHunk": "@@ -0,0 +1,65 @@\n+{{>licenseInfo}}\n+package {{package}}\n+\n+{{#imports}}\n+import {{import}}\n+{{/imports}}\n+import {{mainPackage}}.core._\n+import {{mainPackage}}.core.CollectionFormats._\n+import sttp.client._\n+import sttp.model.Method\n+import sttp.client.json4s.SttpJson4sApi\n+\n+{{#operations}}\n+object {{classname}} {\n+\n+  def apply(baseUrl: String = \"{{{basePath}}}\")(implicit serializer: SttpSerializer) = new {{classname}}(baseUrl)\n+}\n+\n+class {{classname}}(baseUrl: String)(implicit serializer: SttpSerializer) {\n+\n+  import serializer._\n+\n+  /*\n+   * Helper to handle Optional header parameters\n+   **/\n+  implicit class optionalParams(request: RequestT[Identity, Either[String, String], Nothing]) {\n+   def header( header: String, optValue: Option[Any]): RequestT[Identity, Either[String, String], Nothing] = {\n+      optValue.map( value => request.header(header, value.toString)).getOrElse(request)\n+    }\n+  }\n+\n+{{#operation}}\n+{{#javadocRenderer}}\n+{{>javadoc}}\n+{{/javadocRenderer}}\n+  def {{operationId}}({{>methodParameters}}): RequestT[Identity, Either[ResponseError[Exception], {{>operationReturnType}}], Nothing] =\n+    basicRequest\n+      .method(Method.{{httpMethod.toUpperCase}}, uri\"$baseUrl{{{path}}}{{#queryParams.0}}?{{#queryParams}}{{baseName}}=${{{paramName}}}{{^-last}}&{{/-last}}{{/queryParams}}{{/queryParams.0}}\")\n+      .contentType({{#consumes.0}}\"{{{mediaType}}}\"{{/consumes.0}}{{^consumes}}\"application/json\"{{/consumes}}){{#headerParams}}\n+      .header({{>paramCreation}}){{/headerParams}}{{#formParams.0}}\n+      .body(Map({{#formParams}}\n+        {{>paramFormCreation}},{{/formParams}}\n+      )){{/formParams.0}}{{#bodyParam}}\n+      .body({{paramName}}){{/bodyParam}}\n+      .response(asJson[{{>operationReturnType}}])\n+\n+\n+{{#x-skip-this}}\n+\n+\n+      {{#authMethods}}{{#isApiKey}}.withApiKey(apiKey, \"{{keyParamName}}\", {{#isKeyInQuery}}QUERY{{/isKeyInQuery}}{{#isKeyInHeader}}HEADER{{/isKeyInHeader}}{{#isKeyInCookie}}COOKIE{{/isKeyInCookie}})", "originalCommit": "262d0890094d600ed4a37f12a9745fdd87f4633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQxMDI2OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384410268", "bodyText": "it happened because description missed in spec", "author": "chameleon82", "createdAt": "2020-02-26T10:41:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwNDYyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwNTM4OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384305388", "bodyText": "misc - add optional cross compilation for scala 2.11/2.13", "author": "eugeniyk", "createdAt": "2020-02-26T07:04:50Z", "path": "samples/client/petstore/scala-sttp/build.sbt", "diffHunk": "@@ -0,0 +1,29 @@\n+version := \"1.0.0\"\n+name := \"scala-akka-petstore-client\"\n+organization := \"org.openapitools\"\n+scalaVersion := \"2.12.8\"", "originalCommit": "262d0890094d600ed4a37f12a9745fdd87f4633b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwNTg5Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384305892", "bodyText": "for common types like RequestT[Identity, Either[ResponseError[Exception], Unit], Nothing] it will be convenient to have type alias", "author": "eugeniyk", "createdAt": "2020-02-26T07:06:33Z", "path": "modules/openapi-generator/src/main/resources/scala-sttp-client/api.mustache", "diffHunk": "@@ -0,0 +1,65 @@\n+{{>licenseInfo}}\n+package {{package}}\n+\n+{{#imports}}\n+import {{import}}\n+{{/imports}}\n+import {{mainPackage}}.core._\n+import {{mainPackage}}.core.CollectionFormats._\n+import sttp.client._\n+import sttp.model.Method\n+import sttp.client.json4s.SttpJson4sApi\n+\n+{{#operations}}\n+object {{classname}} {\n+\n+  def apply(baseUrl: String = \"{{{basePath}}}\")(implicit serializer: SttpSerializer) = new {{classname}}(baseUrl)\n+}\n+\n+class {{classname}}(baseUrl: String)(implicit serializer: SttpSerializer) {\n+\n+  import serializer._\n+\n+  /*\n+   * Helper to handle Optional header parameters\n+   **/\n+  implicit class optionalParams(request: RequestT[Identity, Either[String, String], Nothing]) {\n+   def header( header: String, optValue: Option[Any]): RequestT[Identity, Either[String, String], Nothing] = {\n+      optValue.map( value => request.header(header, value.toString)).getOrElse(request)\n+    }\n+  }\n+\n+{{#operation}}\n+{{#javadocRenderer}}\n+{{>javadoc}}\n+{{/javadocRenderer}}\n+  def {{operationId}}({{>methodParameters}}): RequestT[Identity, Either[ResponseError[Exception], {{>operationReturnType}}], Nothing] =\n+    basicRequest\n+      .method(Method.{{httpMethod.toUpperCase}}, uri\"$baseUrl{{{path}}}{{#queryParams.0}}?{{#queryParams}}{{baseName}}=${{{paramName}}}{{^-last}}&{{/-last}}{{/queryParams}}{{/queryParams.0}}\")\n+      .contentType({{#consumes.0}}\"{{{mediaType}}}\"{{/consumes.0}}{{^consumes}}\"application/json\"{{/consumes}}){{#headerParams}}\n+      .header({{>paramCreation}}){{/headerParams}}{{#formParams.0}}\n+      .body(Map({{#formParams}}\n+        {{>paramFormCreation}},{{/formParams}}\n+      )){{/formParams.0}}{{#bodyParam}}\n+      .body({{paramName}}){{/bodyParam}}\n+      .response(asJson[{{>operationReturnType}}])\n+\n+\n+{{#x-skip-this}}\n+\n+\n+      {{#authMethods}}{{#isApiKey}}.withApiKey(apiKey, \"{{keyParamName}}\", {{#isKeyInQuery}}QUERY{{/isKeyInQuery}}{{#isKeyInHeader}}HEADER{{/isKeyInHeader}}{{#isKeyInCookie}}COOKIE{{/isKeyInCookie}})\n+      {{/isApiKey}}{{#isBasic}}{{#isBasicBasic}}.withCredentials(basicAuth){{/isBasicBasic}}{{#isBasicBearer}}.withCredentials(bearerToken){{/isBasicBearer}}{{/isBasic}}{{/authMethods}}\n+\n+{{#responses}}{{^isWildcard}}{{#dataType}}.with{{>responseState}}Response[{{dataType}}]({{code}})\n+      {{/dataType}}{{^dataType}}.with{{>responseState}}Response[Unit]({{code}})\n+      {{/dataType}}{{/isWildcard}}{{/responses}}{{#responses}}{{#isWildcard}}{{#dataType}}.withDefault{{>responseState}}Response[{{dataType}}]\n+      {{/dataType}}{{^dataType}}.withDefault{{>responseState}}Response[Unit]\n+      {{/dataType}}{{/isWildcard}}{{/responses}}\n+{{/x-skip-this}}\n+\n+{{/operation}}\n+\n+}\n+", "originalCommit": "262d0890094d600ed4a37f12a9745fdd87f4633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1Mzg1OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384453859", "bodyText": "added", "author": "chameleon82", "createdAt": "2020-02-26T12:12:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwNTg5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwNjU2Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384306563", "bodyText": "I'd use simplified ApiRequest instead, since it's mostly wrapper?", "author": "eugeniyk", "createdAt": "2020-02-26T07:08:47Z", "path": "modules/openapi-generator/src/main/resources/scala-sttp-client/apiInvoker.mustache", "diffHunk": "@@ -0,0 +1,54 @@\n+{{>licenseInfo}}\n+package {{{mainPackage}}}.core\n+\n+import java.io.File\n+\n+import org.joda.time.DateTime\n+import org.joda.time.format.ISODateTimeFormat\n+import org.json4s.JsonAST.JString\n+import org.json4s._\n+import sttp.client._\n+import org.openapitools.client.api.EnumsSerializers\n+import org.openapitools.client.core.ApiInvoker.DateTimeSerializer\n+import sttp.client.json4s.SttpJson4sApi\n+import sttp.client.monad.MonadError\n+\n+class SttpSerializer(implicit val format: Formats = DefaultFormats ++ EnumsSerializers.all + DateTimeSerializer,\n+                     implicit val serialization: org.json4s.Serialization = org.json4s.jackson.Serialization) extends SttpJson4sApi\n+\n+class HttpException(val statusCode: Int, val statusText: String, val message: String) extends Exception(s\"[$statusCode] $statusText: $message\")\n+\n+object ApiInvoker {\n+\n+  /**\n+    * Allows request execution without calling apiInvoker.execute(request)\n+    * request.result can be used to get a monad wrapped content.\n+    *\n+    * @param request the apiRequest to be executed\n+    */\n+  implicit class ApiRequestImprovements[R[_], RE, T](request: RequestT[Identity, Either[ResponseError[Exception], T], Nothing])", "originalCommit": "262d0890094d600ed4a37f12a9745fdd87f4633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwNzUzNA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384307534", "bodyText": "RE looks unused", "author": "eugeniyk", "createdAt": "2020-02-26T07:12:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwNjU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ2Nzc0NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384467745", "bodyText": "ApiRequest could interfered with model name. As that class implicitly defined it better to have better self-description", "author": "chameleon82", "createdAt": "2020-02-26T12:43:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwNjU2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwNjc5OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384306799", "bodyText": "Missing comments for public API (is this a part of generator API or generated (pets) API?)", "author": "eugeniyk", "createdAt": "2020-02-26T07:09:39Z", "path": "samples/client/petstore/scala-sttp/src/main/scala/org/openapitools/client/model/ApiResponse.scala", "diffHunk": "@@ -0,0 +1,22 @@\n+/**\n+ * OpenAPI Petstore\n+ * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.\n+ *\n+ * The version of the OpenAPI document: 1.0.0\n+ * \n+ *\n+ * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n+ * https://openapi-generator.tech\n+ * Do not edit the class manually.\n+ */\n+package org.openapitools.client.model\n+\n+import org.openapitools.client.core.ApiModel\n+\n+case class ApiResponse (", "originalCommit": "262d0890094d600ed4a37f12a9745fdd87f4633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5NDU3MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384394570", "bodyText": "added", "author": "chameleon82", "createdAt": "2020-02-26T10:12:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwNjc5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwODA5Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384308093", "bodyText": "here and below, names should be changed accordingly to sttp", "author": "eugeniyk", "createdAt": "2020-02-26T07:13:58Z", "path": "samples/client/petstore/scala-sttp/README.md", "diffHunk": "@@ -0,0 +1,121 @@\n+# scala-akka-petstore-client", "originalCommit": "262d0890094d600ed4a37f12a9745fdd87f4633b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5NDQ4OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384394488", "bodyText": "fixed, thanks", "author": "chameleon82", "createdAt": "2020-02-26T10:12:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwODA5Mw=="}], "type": "inlineReview"}, {"oid": "f7c8b80c19ccb2721d0a1bf3a60e1dddc7eae4fb", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f7c8b80c19ccb2721d0a1bf3a60e1dddc7eae4fb", "message": "fix artefact name, model comments and redunant generic", "committedDate": "2020-02-26T09:43:00Z", "type": "commit"}, {"oid": "897b077239dd8c15132a5b8c707faa1cb814da59", "url": "https://github.com/OpenAPITools/openapi-generator/commit/897b077239dd8c15132a5b8c707faa1cb814da59", "message": "code optimization", "committedDate": "2020-02-26T12:52:05Z", "type": "commit"}, {"oid": "1cab8e99659e46db72ec7b0d13d4b685815d3fee", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1cab8e99659e46db72ec7b0d13d4b685815d3fee", "message": "cross scala versions 2.11 2.12 2.13", "committedDate": "2020-02-26T13:07:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk2ODgwMA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384968800", "bodyText": "can we use sttp type / alias for status code instead?", "author": "eugeniyk", "createdAt": "2020-02-27T08:13:35Z", "path": "samples/client/petstore/scala-sttp/src/main/scala/org/openapitools/client/core/ApiInvoker.scala", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * OpenAPI Petstore\n+ * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.\n+ *\n+ * The version of the OpenAPI document: 1.0.0\n+ * \n+ *\n+ * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n+ * https://openapi-generator.tech\n+ * Do not edit the class manually.\n+ */\n+package org.openapitools.client.core\n+\n+import org.joda.time.DateTime\n+import org.joda.time.format.ISODateTimeFormat\n+import org.json4s.JsonAST.JString\n+import org.json4s._\n+import sttp.client._\n+import org.openapitools.client.api.EnumsSerializers\n+import org.openapitools.client.core.ApiInvoker.DateTimeSerializer\n+import sttp.client.json4s.SttpJson4sApi\n+import sttp.client.monad.MonadError\n+\n+class SttpSerializer(implicit val format: Formats = DefaultFormats ++ EnumsSerializers.all + DateTimeSerializer,\n+                     implicit val serialization: org.json4s.Serialization = org.json4s.jackson.Serialization) extends SttpJson4sApi\n+\n+class HttpException(val statusCode: Int, val statusText: String, val message: String) extends Exception(s\"[$statusCode] $statusText: $message\")", "originalCommit": "1cab8e99659e46db72ec7b0d13d4b685815d3fee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MDc3OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r385070778", "bodyText": "done", "author": "chameleon82", "createdAt": "2020-02-27T11:33:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk2ODgwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk2OTE1Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384969153", "bodyText": "let's try to remove blank spaces (the moto is to think that the client was created by human rather than by machine..)", "author": "eugeniyk", "createdAt": "2020-02-27T08:14:30Z", "path": "samples/client/petstore/scala-sttp/src/main/scala/org/openapitools/client/api/UserApi.scala", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * OpenAPI Petstore\n+ * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.\n+ *\n+ * The version of the OpenAPI document: 1.0.0\n+ * \n+ *\n+ * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n+ * https://openapi-generator.tech\n+ * Do not edit the class manually.\n+ */\n+package org.openapitools.client.api\n+\n+import org.openapitools.client.model.User\n+import org.openapitools.client.core._\n+import alias._\n+import sttp.client._\n+import sttp.model.Method\n+\n+object UserApi {\n+\n+  def apply(baseUrl: String = \"http://petstore.swagger.io/v2\")(implicit serializer: SttpSerializer) = new UserApi(baseUrl)\n+}\n+\n+class UserApi(baseUrl: String)(implicit serializer: SttpSerializer) {\n+\n+  import Helpers._\n+  import serializer._\n+\n+  /**\n+   * This can only be done by the logged in user.\n+   * \n+   * Expected answers:\n+   *   code 0 :  (successful operation)\n+   * \n+   * Available security schemes:\n+   *   auth_cookie (apiKey)\n+   * \n+   * @param user Created user object\n+   */\n+  def createUser(user: User)(implicit apiKey: ApiKeyValue): ApiRequestT[Unit] =\n+    basicRequest\n+      .method(Method.POST, uri\"$baseUrl/user\")\n+      .contentType(\"application/json\")\n+      .cookie(\"AUTH_KEY\", apiKey.value)\n+      .body(user)\n+      .response(asJson[Unit])\n+\n+\n+\n+  /**\n+   * Expected answers:\n+   *   code 0 :  (successful operation)\n+   * \n+   * Available security schemes:\n+   *   auth_cookie (apiKey)\n+   * \n+   * @param user List of user object\n+   */\n+  def createUsersWithArrayInput(user: Seq[User])(implicit apiKey: ApiKeyValue): ApiRequestT[Unit] =\n+    basicRequest\n+      .method(Method.POST, uri\"$baseUrl/user/createWithArray\")\n+      .contentType(\"application/json\")\n+      .cookie(\"AUTH_KEY\", apiKey.value)\n+      .body(user)\n+      .response(asJson[Unit])\n+\n+\n+\n+  /**\n+   * Expected answers:\n+   *   code 0 :  (successful operation)\n+   * \n+   * Available security schemes:\n+   *   auth_cookie (apiKey)\n+   * \n+   * @param user List of user object\n+   */\n+  def createUsersWithListInput(user: Seq[User])(implicit apiKey: ApiKeyValue): ApiRequestT[Unit] =\n+    basicRequest\n+      .method(Method.POST, uri\"$baseUrl/user/createWithList\")\n+      .contentType(\"application/json\")\n+      .cookie(\"AUTH_KEY\", apiKey.value)\n+      .body(user)\n+      .response(asJson[Unit])\n+\n+\n+\n+  /**\n+   * This can only be done by the logged in user.\n+   * \n+   * Expected answers:\n+   *   code 400 :  (Invalid username supplied)\n+   *   code 404 :  (User not found)\n+   * \n+   * Available security schemes:\n+   *   auth_cookie (apiKey)\n+   * \n+   * @param username The name that needs to be deleted\n+   */\n+  def deleteUser(username: String)(implicit apiKey: ApiKeyValue): ApiRequestT[Unit] =\n+    basicRequest\n+      .method(Method.DELETE, uri\"$baseUrl/user/${username}\")\n+      .contentType(\"application/json\")\n+      .cookie(\"AUTH_KEY\", apiKey.value)\n+      .response(asJson[Unit])\n+\n+\n+\n+  /**\n+   * Expected answers:\n+   *   code 200 : User (successful operation)\n+   *   code 400 :  (Invalid username supplied)\n+   *   code 404 :  (User not found)\n+   * \n+   * @param username The name that needs to be fetched. Use user1 for testing.\n+   */\n+  def getUserByName(username: String): ApiRequestT[User] =\n+    basicRequest\n+      .method(Method.GET, uri\"$baseUrl/user/${username}\")\n+      .contentType(\"application/json\")\n+      .response(asJson[User])\n+\n+\n+\n+  /**\n+   * Expected answers:\n+   *   code 200 : String (successful operation)\n+   *              Headers :\n+   *                Set-Cookie - Cookie authentication key for use with the `auth_cookie` apiKey authentication.\n+   *                X-Rate-Limit - calls per hour allowed by the user\n+   *                X-Expires-After - date in UTC when toekn expires\n+   *   code 400 :  (Invalid username/password supplied)\n+   * \n+   * @param username The user name for login\n+   * @param password The password for login in clear text\n+   */\n+  def loginUser(username: String, password: String): ApiRequestT[String] =\n+    basicRequest\n+      .method(Method.GET, uri\"$baseUrl/user/login?username=$username&password=$password\")\n+      .contentType(\"application/json\")\n+      .response(asJson[String])\n+\n+\n+\n+  /**\n+   * Expected answers:\n+   *   code 0 :  (successful operation)\n+   * \n+   * Available security schemes:\n+   *   auth_cookie (apiKey)\n+   */\n+  def logoutUser()(implicit apiKey: ApiKeyValue): ApiRequestT[Unit] =\n+    basicRequest\n+      .method(Method.GET, uri\"$baseUrl/user/logout\")\n+      .contentType(\"application/json\")\n+      .cookie(\"AUTH_KEY\", apiKey.value)\n+      .response(asJson[Unit])\n+\n+\n+\n+  /**\n+   * This can only be done by the logged in user.\n+   * \n+   * Expected answers:\n+   *   code 400 :  (Invalid user supplied)\n+   *   code 404 :  (User not found)\n+   * \n+   * Available security schemes:\n+   *   auth_cookie (apiKey)\n+   * \n+   * @param username name that need to be deleted\n+   * @param user Updated user object\n+   */\n+  def updateUser(username: String, user: User)(implicit apiKey: ApiKeyValue): ApiRequestT[Unit] =\n+    basicRequest\n+      .method(Method.PUT, uri\"$baseUrl/user/${username}\")\n+      .contentType(\"application/json\")\n+      .cookie(\"AUTH_KEY\", apiKey.value)\n+      .body(user)\n+      .response(asJson[Unit])\n+", "originalCommit": "1cab8e99659e46db72ec7b0d13d4b685815d3fee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MDg1Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r385070856", "bodyText": "optimised", "author": "chameleon82", "createdAt": "2020-02-27T11:33:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk2OTE1Mw=="}], "type": "inlineReview"}, {"oid": "66903ef5182b60ffe7e37ba92b20df226b997bf5", "url": "https://github.com/OpenAPITools/openapi-generator/commit/66903ef5182b60ffe7e37ba92b20df226b997bf5", "message": "date serializers extracted and joda enabled as default", "committedDate": "2020-02-27T11:25:24Z", "type": "commit"}, {"oid": "07a58b0269326653b18ccad04390cff7d97623da", "url": "https://github.com/OpenAPITools/openapi-generator/commit/07a58b0269326653b18ccad04390cff7d97623da", "message": "basic and bearer authorization added, apikey in query supported", "committedDate": "2020-02-27T12:05:35Z", "type": "commit"}]}