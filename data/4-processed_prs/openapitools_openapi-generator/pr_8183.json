{"pr_number": 8183, "pr_title": "[Qt5] add parameterized server support", "pr_createdAt": "2020-12-14T18:00:53Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/8183", "timeline": [{"oid": "10d5f56d6b93cfc8742ac1bdc94aef907b6c64cc", "url": "https://github.com/OpenAPITools/openapi-generator/commit/10d5f56d6b93cfc8742ac1bdc94aef907b6c64cc", "message": "first Commit parameterzied Server support", "committedDate": "2020-12-03T13:14:57Z", "type": "commit"}, {"oid": "09275333c04b1113908b8a65561b03dc5442843e", "url": "https://github.com/OpenAPITools/openapi-generator/commit/09275333c04b1113908b8a65561b03dc5442843e", "message": "Merge remote-tracking branch 'origin/master' into Qt5ParameterizedServer", "committedDate": "2020-12-04T11:11:51Z", "type": "commit"}, {"oid": "6360bf4750ab9cc15c44f0c26347cbf10ff88a82", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6360bf4750ab9cc15c44f0c26347cbf10ff88a82", "message": "fixed serverconfig classes", "committedDate": "2020-12-04T13:14:43Z", "type": "commit"}, {"oid": "44abfcfc7067f5584b0fa5acec1958f56ef4f921", "url": "https://github.com/OpenAPITools/openapi-generator/commit/44abfcfc7067f5584b0fa5acec1958f56ef4f921", "message": "Defautl constructor f. Config, fixed regex replace", "committedDate": "2020-12-04T15:02:43Z", "type": "commit"}, {"oid": "8cb5cb9e4c71f2a95c74abc74cc8247d5ec65e48", "url": "https://github.com/OpenAPITools/openapi-generator/commit/8cb5cb9e4c71f2a95c74abc74cc8247d5ec65e48", "message": "Polosihed Templates, Added MultiServer support", "committedDate": "2020-12-07T16:30:34Z", "type": "commit"}, {"oid": "4c1b40af08dfa728c87d8a721003a645e5b7480f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4c1b40af08dfa728c87d8a721003a645e5b7480f", "message": "Update Readme. Fixed MultiServer. Fixed def. Value", "committedDate": "2020-12-10T13:09:10Z", "type": "commit"}, {"oid": "c865bdbbc7934834101016655f0bbdc86bfb3384", "url": "https://github.com/OpenAPITools/openapi-generator/commit/c865bdbbc7934834101016655f0bbdc86bfb3384", "message": "Passing global Server to mustache. Small fixes", "committedDate": "2020-12-14T11:09:00Z", "type": "commit"}, {"oid": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8", "message": "Updated  samples, fixed mustache for multi server", "committedDate": "2020-12-14T17:53:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU2NTU2NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544565565", "bodyText": "PREFIX is missing here", "author": "etherealjoy", "createdAt": "2020-12-16T19:30:06Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/CppQt5ClientCodegen.java", "diffHunk": "@@ -80,6 +89,8 @@ public CppQt5ClientCodegen() {\n         supportingFiles.add(new SupportingFile(\"HttpFileElement.cpp.mustache\", sourceFolder, PREFIX + \"HttpFileElement.cpp\"));\n         supportingFiles.add(new SupportingFile(\"object.mustache\", sourceFolder, PREFIX + \"Object.h\"));\n         supportingFiles.add(new SupportingFile(\"enum.mustache\", sourceFolder, PREFIX + \"Enum.h\"));\n+        supportingFiles.add(new SupportingFile(\"ServerConfiguration.mustache\", sourceFolder,\"ServerConfiguration.h\"));", "originalCommit": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU2NTgzNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544565837", "bodyText": "modelNamePrefix is missing here", "author": "etherealjoy", "createdAt": "2020-12-16T19:30:28Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/CppQt5ClientCodegen.java", "diffHunk": "@@ -109,6 +120,8 @@ public void processOpts() {\n             supportingFiles.add(new SupportingFile(\"HttpFileElement.cpp.mustache\", sourceFolder, modelNamePrefix + \"HttpFileElement.cpp\"));           \n             supportingFiles.add(new SupportingFile(\"object.mustache\", sourceFolder, modelNamePrefix + \"Object.h\"));\n             supportingFiles.add(new SupportingFile(\"enum.mustache\", sourceFolder, modelNamePrefix + \"Enum.h\"));\n+            supportingFiles.add(new SupportingFile(\"ServerConfiguration.mustache\", sourceFolder,\"ServerConfiguration.h\"));", "originalCommit": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU2NjEwNg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544566106", "bodyText": "missing {{prefix}} here", "author": "etherealjoy", "createdAt": "2020-12-16T19:30:55Z", "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/Project.mustache", "diffHunk": "@@ -20,8 +20,10 @@ HEADERS += \\\n     $${PWD}/{{prefix}}HttpRequest.h \\\n     $${PWD}/{{prefix}}Object.h \\\n     $${PWD}/{{prefix}}Enum.h \\\n-    $${PWD}/{{prefix}}HttpFileElement.h\n-\n+    $${PWD}/{{prefix}}HttpFileElement.h \\\n+    $${PWD}/ServerConfiguration.h \\", "originalCommit": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3MDMxNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544570317", "bodyText": "Please use vendor extensions instead. something like\nthis.vendorExtensions.put(\"x-codegen-globalServerList\", CodegenServerList);\n\nThis allows differentiating generic and codegen specific extension. Correspondingly the mustache files would need updating.", "author": "etherealjoy", "createdAt": "2020-12-16T19:37:29Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractCppCodegen.java", "diffHunk": "@@ -341,6 +349,28 @@ public void preprocessOpenAPI(OpenAPI openAPI) {\n         if (!scheme.isEmpty()) {\n             this.additionalProperties.put(\"scheme\", scheme);\n         }\n+        if (!serverList.isEmpty()) {\n+            for (Server server : serverList) {\n+                CodegenServer s = new CodegenServer();\n+                s.description = server.getDescription();\n+                s.url = server.getUrl();\n+                s.variables = new ArrayList<CodegenServerVariable>();\n+                ServerVariables serverVars = server.getVariables();\n+                if(serverVars != null){\n+                serverVars.forEach((key,value) -> {\n+                    CodegenServerVariable codegenServerVar= new CodegenServerVariable();\n+                    ServerVariable ServerVar = value;\n+                    codegenServerVar.name = key;\n+                    codegenServerVar.description = ServerVar.getDescription();\n+                    codegenServerVar.defaultValue = ServerVar.getDefault();\n+                    codegenServerVar.enumValues = ServerVar.getEnum();\n+                    s.variables.add(codegenServerVar);\n+                    });\n+                }\n+                CodegenServerList.add(s);\n+            }\n+        this.additionalProperties.put(\"globalServerList\", CodegenServerList);", "originalCommit": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg5NDI4OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544894288", "bodyText": "Will change that, thanks!", "author": "basyskom-dege", "createdAt": "2020-12-17T08:20:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3MDMxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3MTkxMw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544571913", "bodyText": "Please add {{prefix}} here", "author": "etherealjoy", "createdAt": "2020-12-16T19:39:57Z", "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/api-body.mustache", "diffHunk": "@@ -1,7 +1,7 @@\n {{>licenseInfo}}\n #include \"{{classname}}.h\"\n #include \"{{prefix}}Helpers.h\"\n-\n+#include \"ServerConfiguration.h\"", "originalCommit": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3MjA3Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544572077", "bodyText": "{{prefix}}", "author": "etherealjoy", "createdAt": "2020-12-16T19:40:13Z", "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/api-header.mustache", "diffHunk": "@@ -3,13 +3,15 @@\n #define {{prefix}}_{{classname}}_H\n \n #include \"{{prefix}}HttpRequest.h\"\n+#include \"ServerConfiguration.h\"", "originalCommit": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3NTcyNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544575727", "bodyText": "prefix", "author": "etherealjoy", "createdAt": "2020-12-16T19:45:57Z", "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/ServerVariable.mustache", "diffHunk": "@@ -0,0 +1,43 @@\n+{{>licenseInfo}}\n+#ifndef SERVERVARIABLE_H", "originalCommit": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3NTg5MQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544575891", "bodyText": "This include unordered_set is not needed", "author": "etherealjoy", "createdAt": "2020-12-16T19:46:13Z", "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/ServerVariable.mustache", "diffHunk": "@@ -0,0 +1,43 @@\n+{{>licenseInfo}}\n+#ifndef SERVERVARIABLE_H\n+#define SERVERVARIABLE_H\n+#include <unordered_set>", "originalCommit": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3NjY1Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544576657", "bodyText": "This include stdexcept is not needed. Probably better to use the Qt one if you are using.", "author": "etherealjoy", "createdAt": "2020-12-16T19:47:30Z", "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/ServerConfiguration.mustache", "diffHunk": "@@ -0,0 +1,65 @@\n+{{>licenseInfo}}\n+/**\n+ * Representing a Server configuration.\n+ */\n+#ifndef SERVERVCONFIGURATION_H\n+#define SERVERVCONFIGURATION_H\n+#include <QString>\n+#include <QMap>\n+#include <stdexcept>", "originalCommit": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3NzgzNQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544577835", "bodyText": "prefix", "author": "etherealjoy", "createdAt": "2020-12-16T19:49:30Z", "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/ServerConfiguration.mustache", "diffHunk": "@@ -0,0 +1,65 @@\n+{{>licenseInfo}}\n+/**\n+ * Representing a Server configuration.\n+ */\n+#ifndef SERVERVCONFIGURATION_H", "originalCommit": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3OTAwMg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544579002", "bodyText": "missing namespace", "author": "etherealjoy", "createdAt": "2020-12-16T19:51:19Z", "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/ServerVariable.mustache", "diffHunk": "@@ -0,0 +1,43 @@\n+{{>licenseInfo}}\n+#ifndef SERVERVARIABLE_H\n+#define SERVERVARIABLE_H\n+#include <unordered_set>\n+#include <QString>\n+#include <QSet>\n+/**\n+ * Representing a Server Variable for server URL template substitution.\n+ */", "originalCommit": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3OTExMQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544579111", "bodyText": "missing namespace", "author": "etherealjoy", "createdAt": "2020-12-16T19:51:31Z", "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/ServerConfiguration.mustache", "diffHunk": "@@ -0,0 +1,65 @@\n+{{>licenseInfo}}\n+/**\n+ * Representing a Server configuration.\n+ */\n+#ifndef SERVERVCONFIGURATION_H\n+#define SERVERVCONFIGURATION_H\n+#include <QString>\n+#include <QMap>\n+#include <stdexcept>\n+#include <QRegularExpression>\n+#include \"ServerVariable.h\"\n+\n+class ServerConfiguration {", "originalCommit": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3OTU2Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544579563", "bodyText": "please append prefix to classname\nReason for this was some users were generating multiple clients and they put them in dedicated directories. They see warnings in compile.\nThey could have placed these common files in some place, but then it seems they use cmake to sort this out.\nSo we need the prefixes.", "author": "etherealjoy", "createdAt": "2020-12-16T19:52:14Z", "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/ServerConfiguration.mustache", "diffHunk": "@@ -0,0 +1,65 @@\n+{{>licenseInfo}}\n+/**\n+ * Representing a Server configuration.\n+ */\n+#ifndef SERVERVCONFIGURATION_H\n+#define SERVERVCONFIGURATION_H\n+#include <QString>\n+#include <QMap>\n+#include <stdexcept>\n+#include <QRegularExpression>\n+#include \"ServerVariable.h\"\n+\n+class ServerConfiguration {", "originalCommit": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg5NDEzMQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544894131", "bodyText": "Okay. I wasnt sure about the prefixes since its not a class of the API. But that makes sense.", "author": "basyskom-dege", "createdAt": "2020-12-17T08:19:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3OTU2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4MDA5OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544580099", "bodyText": "please append prefix to classname", "author": "etherealjoy", "createdAt": "2020-12-16T19:53:07Z", "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/ServerVariable.mustache", "diffHunk": "@@ -0,0 +1,43 @@\n+{{>licenseInfo}}\n+#ifndef SERVERVARIABLE_H\n+#define SERVERVARIABLE_H\n+#include <unordered_set>\n+#include <QString>\n+#include <QSet>\n+/**\n+ * Representing a Server Variable for server URL template substitution.\n+ */\n+class ServerVariable {", "originalCommit": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4Mzg2Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544583866", "bodyText": "You can check indentation if you have time.", "author": "etherealjoy", "createdAt": "2020-12-16T19:59:10Z", "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/api-body.mustache", "diffHunk": "@@ -17,11 +17,64 @@ namespace {{this}} {\n       _timeOut(timeOut),\n       _manager(nullptr),\n       isResponseCompressionEnabled(false),\n-      isRequestCompressionEnabled(false) {}\n+      isRequestCompressionEnabled(false) {\n+      initializeServerConfigs();\n+      }\n \n {{classname}}::~{{classname}}() {\n }\n \n+void {{classname}}::initializeServerConfigs(){\n+\n+//Default server\n+QList<ServerConfiguration> defaultConf = QList<ServerConfiguration>();\n+//varying endpoint server \n+QList<ServerConfiguration> serverConf = QList<ServerConfiguration>();\n+{{#globalServerList}}\n+defaultConf.append(ServerConfiguration(\n+    \"{{{url}}}\",\n+    \"{{{description}}}{{^description}}No description provided{{/description}}\",\n+    {{#variables}}{{#-first}}QMap<QString, ServerVariable>{ {{/-first}}\n+    {\"{{{name}}}\", ServerVariable(\"{{{description}}}{{^description}}No description provided{{/description}}\",\"{{{defaultValue}}}\",\n+    QSet<QString>{ {{#enumValues}}{\"{{{.}}}\"}{{#-last}} })},{{/-last}}{{^-last}},{{/-last}}{{/enumValues}}{{^enumValues}}{\"{{defaultValue}}\"} })},{{/enumValues}}{{#-last}} }));{{/-last}}\n+    {{/variables}}{{^variables}}QMap<QString, ServerVariable>()));{{/variables}}\n+{{/globalServerList}}\n+{{#operations}}\n+  {{#operation}}\n+  {{^servers}}\n+_serverConfigs.insert(\"{{nickname}}\",defaultConf);", "originalCommit": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkwNDQ5MQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544904491", "bodyText": "I tried to get mustache to produce a readable code but thats not that easy with so many variables. I try to make it look more appealing on mustache level.", "author": "basyskom-dege", "createdAt": "2020-12-17T08:37:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4Mzg2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4NDIzMw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544584233", "bodyText": "This is a strange change. I dont think it is related.", "author": "etherealjoy", "createdAt": "2020-12-16T19:59:48Z", "path": "samples/client/petstore/cpp-tizen/src/UserManager.h", "diffHunk": "@@ -28,80 +28,80 @@ class UserManager {\n /*! \\brief Create user. *Synchronous*\n  *\n  * This can only be done by the logged in user.\n- * \\param user Created user object *Required*\n+ * \\param body Created user object *Required*\n  * \\param handler The callback function to be invoked on completion. *Required*\n  * \\param accessToken The Authorization token. *Required*\n  * \\param userData The user data to be passed to the callback function.\n  */\n bool createUserSync(char * accessToken,\n-\tUser user, \n+\tUser body, \n \t\n \tvoid(* handler)(Error, void* ) , void* userData);\n \n /*! \\brief Create user. *Asynchronous*\n  *\n  * This can only be done by the logged in user.\n- * \\param user Created user object *Required*\n+ * \\param body Created user object *Required*\n  * \\param handler The callback function to be invoked on completion. *Required*\n  * \\param accessToken The Authorization token. *Required*\n  * \\param userData The user data to be passed to the callback function.\n  */\n bool createUserAsync(char * accessToken,\n-\tUser user, \n+\tUser body, \n \t\n \tvoid(* handler)(Error, void* ) , void* userData);\n \n \n /*! \\brief Creates list of users with given input array. *Synchronous*\n  *\n  * \n- * \\param user List of user object *Required*\n+ * \\param body List of user object *Required*\n  * \\param handler The callback function to be invoked on completion. *Required*\n  * \\param accessToken The Authorization token. *Required*\n  * \\param userData The user data to be passed to the callback function.\n  */\n bool createUsersWithArrayInputSync(char * accessToken,\n-\tstd::list<std::list> user, \n+\tstd::list<User> body, \n \t\n \tvoid(* handler)(Error, void* ) , void* userData);\n \n /*! \\brief Creates list of users with given input array. *Asynchronous*\n  *\n  * \n- * \\param user List of user object *Required*\n+ * \\param body List of user object *Required*\n  * \\param handler The callback function to be invoked on completion. *Required*\n  * \\param accessToken The Authorization token. *Required*\n  * \\param userData The user data to be passed to the callback function.\n  */\n bool createUsersWithArrayInputAsync(char * accessToken,\n-\tstd::list<std::list> user, \n+\tstd::list<User> body, \n \t\n \tvoid(* handler)(Error, void* ) , void* userData);\n \n \n /*! \\brief Creates list of users with given input array. *Synchronous*\n  *\n  * \n- * \\param user List of user object *Required*\n+ * \\param body List of user object *Required*\n  * \\param handler The callback function to be invoked on completion. *Required*\n  * \\param accessToken The Authorization token. *Required*\n  * \\param userData The user data to be passed to the callback function.\n  */\n bool createUsersWithListInputSync(char * accessToken,\n-\tstd::list<std::list> user, \n+\tstd::list<User> body, \n \t\n \tvoid(* handler)(Error, void* ) , void* userData);\n \n /*! \\brief Creates list of users with given input array. *Asynchronous*\n  *\n  * \n- * \\param user List of user object *Required*\n+ * \\param body List of user object *Required*\n  * \\param handler The callback function to be invoked on completion. *Required*\n  * \\param accessToken The Authorization token. *Required*\n  * \\param userData The user data to be passed to the callback function.\n  */\n bool createUsersWithListInputAsync(char * accessToken,\n-\tstd::list<std::list> user, \n+\tstd::list<User> body, ", "originalCommit": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkwNjI1OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544906259", "bodyText": "yes that was not intentionally. Maybe i broke something there. I will check whats the cause for this", "author": "basyskom-dege", "createdAt": "2020-12-17T08:40:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4NDIzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA2NzYyOA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r545067628", "bodyText": "This change occurred when i ran the generate-samples.sh for all generators that use cpp. I.e bin/configs/cpp* and bin/configs/other/cpp*. I got a little confused with the samples generator because he would give me many untracked files that didnt really make sense. I cloned my fork again and it looks better now. This change still occures when generating samples, but i guess thats because cpp-tizen hasnt been updated for a while", "author": "basyskom-dege", "createdAt": "2020-12-17T12:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4NDIzMw=="}], "type": "inlineReview"}, {"oid": "3b6c6cf77634ad7b624fd528d1c407eb271c5f1e", "url": "https://github.com/OpenAPITools/openapi-generator/commit/3b6c6cf77634ad7b624fd528d1c407eb271c5f1e", "message": "added prefixes, removed unused imports", "committedDate": "2020-12-17T10:57:40Z", "type": "commit"}, {"oid": "50fea41fd6a2cb81b0dc9d1b951bbdd98484079c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/50fea41fd6a2cb81b0dc9d1b951bbdd98484079c", "message": "added newly generated samples", "committedDate": "2020-12-17T11:11:25Z", "type": "commit"}, {"oid": "8a6a4859e3ba622c061dbc78151c3c75ae1b485f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/8a6a4859e3ba622c061dbc78151c3c75ae1b485f", "message": "missing vendorExtension in mustache. Update smaple", "committedDate": "2020-12-17T11:30:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk0MzkxNg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r545943916", "bodyText": "Hope you don't mind. I'll rename x-codegen-globalServerList to x-cpp-global-server-list later with another PR.", "author": "wing328", "createdAt": "2020-12-18T16:25:55Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractCppCodegen.java", "diffHunk": "@@ -341,6 +349,28 @@ public void preprocessOpenAPI(OpenAPI openAPI) {\n         if (!scheme.isEmpty()) {\n             this.additionalProperties.put(\"scheme\", scheme);\n         }\n+        if (!serverList.isEmpty()) {\n+            for (Server server : serverList) {\n+                CodegenServer s = new CodegenServer();\n+                s.description = server.getDescription();\n+                s.url = server.getUrl();\n+                s.variables = new ArrayList<CodegenServerVariable>();\n+                ServerVariables serverVars = server.getVariables();\n+                if(serverVars != null){\n+                serverVars.forEach((key,value) -> {\n+                    CodegenServerVariable codegenServerVar= new CodegenServerVariable();\n+                    ServerVariable ServerVar = value;\n+                    codegenServerVar.name = key;\n+                    codegenServerVar.description = ServerVar.getDescription();\n+                    codegenServerVar.defaultValue = ServerVar.getDefault();\n+                    codegenServerVar.enumValues = ServerVar.getEnum();\n+                    s.variables.add(codegenServerVar);\n+                    });\n+                }\n+                CodegenServerList.add(s);\n+            }\n+            this.vendorExtensions.put(\"x-codegen-globalServerList\", CodegenServerList);", "originalCommit": "8a6a4859e3ba622c061dbc78151c3c75ae1b485f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk1Mzc3OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r545953779", "bodyText": "Sure thats okay. Makes more sense to stick to the kebab case.", "author": "basyskom-dege", "createdAt": "2020-12-18T16:42:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk0MzkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIwNDU5Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r546204596", "bodyText": "Filed #8236 (which also removed some outdated files as part of the PR)", "author": "wing328", "createdAt": "2020-12-19T07:16:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk0MzkxNg=="}], "type": "inlineReview"}, {"oid": "fd1e16c85aba5dbde2b2439bbeb7b19a6695232a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/fd1e16c85aba5dbde2b2439bbeb7b19a6695232a", "message": "update doc", "committedDate": "2020-12-18T16:29:26Z", "type": "commit"}]}