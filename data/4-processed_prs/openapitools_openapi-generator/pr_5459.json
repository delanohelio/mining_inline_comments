{"pr_number": 5459, "pr_title": "[kotlin][client] Add Jackson to interface properties and remove extra line feed", "pr_createdAt": "2020-02-26T22:25:59Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/5459", "timeline": [{"oid": "7f570f393522a95c49e53d3be4f8ac4cd281f637", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7f570f393522a95c49e53d3be4f8ac4cd281f637", "message": "[kotlin][client] Ensure Jackson annotations are consistent with interface vars", "committedDate": "2020-02-26T22:19:54Z", "type": "commit"}, {"oid": "3f385ae96b31037f346310e5a508070abb954e70", "url": "https://github.com/OpenAPITools/openapi-generator/commit/3f385ae96b31037f346310e5a508070abb954e70", "message": "[kotlin][client] Rebuild samples", "committedDate": "2020-02-26T22:23:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzMTgzNQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5459#discussion_r385031835", "bodyText": "I think here we should use the iso8601 date format", "author": "4brunu", "createdAt": "2020-02-27T10:16:09Z", "path": "modules/openapi-generator/src/main/resources/kotlin-client/data_class_opt_var.mustache", "diffHunk": "@@ -10,10 +10,9 @@\n     {{/gson}}\n     {{#jackson}}\n     {{#isDateTime}}\n-    @JsonFormat\n-    (shape = JsonFormat.Shape.STRING, pattern = \"dd-MM-yyyy hh:mm:ss\")\n+    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"dd-MM-yyyy hh:mm:ss\")", "originalCommit": "3f385ae96b31037f346310e5a508070abb954e70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE0NzQ0OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5459#discussion_r385147449", "bodyText": "Hey @4brunu , thanks for the feedback.  I'm wondering if it would be better to just remove these @JsonFormat annotations in favor of a Jackson serializer/deserializer, similar to the other serialization libraries, such as Moshi, https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/kotlin-client/jvm-common/infrastructure/OffsetDateTimeAdapter.kt.mustache.\nI think moving to the serializer/deserializer would likely be better as I mentioned, once you have these @JsonFormat annotations, I don't think you can change them.  You'd be stuck with  whatever format you specified here.  I agree these should likely be the iso8601 date formats if we keep them.\nMaybe @herveDarritchon could also provide some feedback here as he added these annotations with #5236.", "author": "mtraynham", "createdAt": "2020-02-27T14:08:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzMTgzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE4NTA1NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5459#discussion_r385185055", "bodyText": "Looks like a good idea to me \ud83d\udc4d", "author": "4brunu", "createdAt": "2020-02-27T15:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzMTgzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzMTk3OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5459#discussion_r385031978", "bodyText": "The same here", "author": "4brunu", "createdAt": "2020-02-27T10:16:25Z", "path": "modules/openapi-generator/src/main/resources/kotlin-client/data_class_req_var.mustache", "diffHunk": "@@ -9,7 +9,10 @@\n     @SerializedName(\"{{{vendorExtensions.x-base-name-literal}}}\")\n     {{/gson}}\n     {{#jackson}}\n+    {{#isDateTime}}\n+    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"dd-MM-yyyy hh:mm:ss\")", "originalCommit": "3f385ae96b31037f346310e5a508070abb954e70", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzMjA2Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5459#discussion_r385032062", "bodyText": "And here", "author": "4brunu", "createdAt": "2020-02-27T10:16:35Z", "path": "modules/openapi-generator/src/main/resources/kotlin-client/interface_opt_var.mustache", "diffHunk": "@@ -8,5 +8,11 @@\n     {{#gson}}\n     @SerializedName(\"{{{vendorExtensions.x-base-name-literal}}}\")\n     {{/gson}}\n+    {{#jackson}}\n+    {{#isDateTime}}\n+    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"dd-MM-yyyy hh:mm:ss\")", "originalCommit": "3f385ae96b31037f346310e5a508070abb954e70", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzMjE1MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5459#discussion_r385032150", "bodyText": "And here", "author": "4brunu", "createdAt": "2020-02-27T10:16:45Z", "path": "modules/openapi-generator/src/main/resources/kotlin-client/interface_req_var.mustache", "diffHunk": "@@ -8,5 +8,11 @@\n     {{#gson}}\n     @SerializedName(\"{{{vendorExtensions.x-base-name-literal}}}\")\n     {{/gson}}\n+    {{#jackson}}\n+    {{#isDateTime}}\n+    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"dd-MM-yyyy hh:mm:ss\")", "originalCommit": "3f385ae96b31037f346310e5a508070abb954e70", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0309c96c25a4c48c86acfe6d2cffca29de975805", "url": "https://github.com/OpenAPITools/openapi-generator/commit/0309c96c25a4c48c86acfe6d2cffca29de975805", "message": "[kotlin][client] Some kotlin client enhancements\n\n- Don't use JsonFormat for Date objects, this should be controlled via\n  a custom serializer/deserializer or a turning on and off serialization\n  features of Jackson.  I've updated the jacksonObjectMapper config to\n  write the dates as strings, which I think was intended in the original\n  commit.\n  https://fasterxml.github.io/jackson-databind/javadoc/2.6/com/fasterxml/jackson/databind/SerializationFeature.html#WRITE_DATES_AS_TIMESTAMPS\n  https://fasterxml.github.io/jackson-databind/javadoc/2.6/com/fasterxml/jackson/databind/cfg/MapperConfig.html#getDateFormat--\n- Dont' use @JsonFormat(shape = JsonFormat.Shape.OBJECT) for enums.\n  This causes Enums to be formatted as objects with an internal \"value\"\n  field.  In reality, OpenAPI enums are just strings without properties\n  and should be treated as a string.\n  https://www.baeldung.com/jackson-serialize-enums#2-enum-as-json-object\n- Add's Kotlin use site annotation @get: to JsonProperty for parent interface\n  properties.  Otherwise Kotlin will warn:\n  \"This annotation is not applicable to target 'member property without\n  backing field or delegate'\"\n- Add's JsonTypeInfo annotations to interfaces for inheritance.  This\n  was copied verbatim from the kotlin-spring generator.\n  https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/kotlin-spring/typeInfoAnnotation.mustache", "committedDate": "2020-02-27T18:32:31Z", "type": "commit"}, {"oid": "ce0aa42f14adca08f15022609b576811cc0e0f7d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ce0aa42f14adca08f15022609b576811cc0e0f7d", "message": "[kotlin][client] Rebuild kotlin samples", "committedDate": "2020-02-27T18:32:33Z", "type": "commit"}]}