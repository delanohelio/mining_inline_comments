{"pr_number": 6262, "pr_title": "[python-experimental] Support schema property which has $ref to 'oneOf' schema", "pr_createdAt": "2020-05-12T01:46:52Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/6262", "timeline": [{"oid": "eadca7abb8a16e7e02dd68d8041d119a6ff9970b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/eadca7abb8a16e7e02dd68d8041d119a6ff9970b", "message": "Add reference to oneOf schema", "committedDate": "2020-05-12T01:44:21Z", "type": "commit"}, {"oid": "603b6fb200ebf372ef7343f1e81aa4b6b64a6ccd", "url": "https://github.com/OpenAPITools/openapi-generator/commit/603b6fb200ebf372ef7343f1e81aa4b6b64a6ccd", "message": "Add model showing unit test failure with ref to oneOf schema", "committedDate": "2020-05-12T03:59:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg2NDAyOA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6262#discussion_r423864028", "bodyText": "Thanks for adding this test\nThis test is helpful because it demonstrates that there is a bug here and drawings are not able to accept Shape/Triangle instances because type checking is failing.\nSo the pattern that we have been using is to have this test_deserialization.py file verify deserializing json payloads into python classes.\nWe use the files like test_drawing.py to demonstrate that we can instantiate model instances correctly.\nIn order to follow our patterns on where tests are how about\n\nmoving this test into samples/openapi3/client/petstore/python-experimental/test/test_drawing.py ?\n\nIf you want to add a test here can you update it to demonstrate deserializing a Drawing json payload?", "author": "spacether", "createdAt": "2020-05-12T16:19:31Z", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "diffHunk": "@@ -161,3 +161,26 @@ def test_deserialize_mammal(self):\n         self.assertTrue(isinstance(deserialized, petstore_api.Zebra))\n         self.assertEqual(deserialized.type, zebra_type)\n         self.assertEqual(deserialized.class_name, class_name)\n+\n+    def test_deserialize_oneof_reference(self):", "originalCommit": "603b6fb200ebf372ef7343f1e81aa4b6b64a6ccd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0OTM5OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6262#discussion_r423949399", "bodyText": "done", "author": "sebastien-rosset", "createdAt": "2020-05-12T18:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg2NDAyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg2Njk3OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6262#discussion_r423866979", "bodyText": "This line is hard for me to understand. Why are we expecting the instance type to be BiologyHominid. Should it be petstore_api .Drawing?\nAlso, because Drawing is an object type schema (ModelNormal subclass) in python, and doesn't have a discriminator, we will never pick a different class when moving through the new method, so we are sure that instances that we make from it will always be of type Drawing.", "author": "spacether", "createdAt": "2020-05-12T16:23:44Z", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "diffHunk": "@@ -161,3 +161,26 @@ def test_deserialize_mammal(self):\n         self.assertTrue(isinstance(deserialized, petstore_api.Zebra))\n         self.assertEqual(deserialized.type, zebra_type)\n         self.assertEqual(deserialized.class_name, class_name)\n+\n+    def test_deserialize_oneof_reference(self):\n+\n+        inst = petstore_api.Drawing(\n+            # 'main_shape' has type 'Shape', which is a oneOf [triangle, quadrilateral]\n+            # composed schema. So we should be able to assign a petstore_api.Triangle\n+            # to a 'main_shape'.\n+            main_shape=petstore_api.Triangle(\n+                shape_type=\"Triangle\",\n+                triangle_type=\"IsoscelesTriangle\"\n+            ),\n+            shapes=[\n+                petstore_api.Triangle(\n+                    shape_type=\"Triangle\",\n+                    triangle_type=\"IsoscelesTriangle\"\n+                ),\n+                petstore_api.Shape(\n+                    shape_type=\"Quadrilateral\",\n+                    quadrilateral_type=\"ComplexQuadrilateral\"\n+                ),\n+            ],\n+        )\n+        assert isinstance(inst, petstore_api.BiologyHominid)", "originalCommit": "603b6fb200ebf372ef7343f1e81aa4b6b64a6ccd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1MDk2NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6262#discussion_r423950965", "bodyText": "This line is hard for me to understand. Why are we expecting the instance type to be BiologyHominid. Should it be petstore_api .Drawing?\n\nThis is a typo.\n\nAlso, because Drawing is an object type schema (ModelNormal subclass) in python, and doesn't have a discriminator, we will never pick a different class when moving through the new method, so we are sure that instances that we make from it will always be of type Drawing.\n\nSure, it's just that I was planning to add more assertions, and it does not hurt to add an assertion.", "author": "sebastien-rosset", "createdAt": "2020-05-12T18:37:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg2Njk3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1NTE1MQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6262#discussion_r423955151", "bodyText": "Nope it doesn't hurt", "author": "spacether", "createdAt": "2020-05-12T18:45:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg2Njk3OQ=="}], "type": "inlineReview"}, {"oid": "7b2ed9e770ea9eff45429eaf90b24cfb3b366ea0", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7b2ed9e770ea9eff45429eaf90b24cfb3b366ea0", "message": "Updates get_discriminator_class to return visited_composed_classes", "committedDate": "2020-05-12T16:58:42Z", "type": "commit"}, {"oid": "9811b8c5ae4f524fdc7cb6b957b04e8963ed0174", "url": "https://github.com/OpenAPITools/openapi-generator/commit/9811b8c5ae4f524fdc7cb6b957b04e8963ed0174", "message": "Fixes broken test, adds is_valid_type", "committedDate": "2020-05-12T18:09:07Z", "type": "commit"}, {"oid": "245c850dc8b02fba0737e46941061c67ee5f886a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/245c850dc8b02fba0737e46941061c67ee5f886a", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into python-oneof-schema-reference", "committedDate": "2020-05-12T18:25:34Z", "type": "commit"}, {"oid": "942edf03f02535e5165d0d56f6433b3fd4a9c6d8", "url": "https://github.com/OpenAPITools/openapi-generator/commit/942edf03f02535e5165d0d56f6433b3fd4a9c6d8", "message": "move unit test to  test_drawing.py file", "committedDate": "2020-05-12T18:34:54Z", "type": "commit"}, {"oid": "f5050b0a80aba8d553283d2e8e2ea644811121aa", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f5050b0a80aba8d553283d2e8e2ea644811121aa", "message": "Add more unit tests", "committedDate": "2020-05-12T18:47:58Z", "type": "commit"}, {"oid": "251086b5751733ac309c478323adc5b6c829eed2", "url": "https://github.com/OpenAPITools/openapi-generator/commit/251086b5751733ac309c478323adc5b6c829eed2", "message": "invoke git pull from spacether fork", "committedDate": "2020-05-12T19:29:12Z", "type": "commit"}, {"oid": "2feed29dd73e68b9695a023de5eedf1ab392eccd", "url": "https://github.com/OpenAPITools/openapi-generator/commit/2feed29dd73e68b9695a023de5eedf1ab392eccd", "message": "invoke git pull from spacether fork", "committedDate": "2020-05-12T19:29:22Z", "type": "commit"}, {"oid": "3a05ff65b341a1a7b57498c26f0ae57a4a391bd3", "url": "https://github.com/OpenAPITools/openapi-generator/commit/3a05ff65b341a1a7b57498c26f0ae57a4a391bd3", "message": "invoke git pull from spacether fork", "committedDate": "2020-05-12T19:32:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4ODMxNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6262#discussion_r423988317", "bodyText": "Can we keep one of these classes as Triangle, or a specific one like EquilateralTriangle?\nThat requires that our solution depends upon Shape's discriminator and not on instance._visited_composed_classes containing Shape.\nWe should be able to pass any of these class inputs for shapes:\n\npetstore_api.Shape\npetstore_api.Triangle\npetstore_api.EquilateralTriangle\netc", "author": "spacether", "createdAt": "2020-05-12T19:42:13Z", "path": "samples/openapi3/client/petstore/python-experimental/test/test_drawing.py", "diffHunk": "@@ -0,0 +1,58 @@\n+# coding: utf-8\n+\n+\"\"\"\n+    OpenAPI Petstore\n+\n+    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \\\" \\\\  # noqa: E501\n+\n+    The version of the OpenAPI document: 1.0.0\n+    Generated by: https://openapi-generator.tech\n+\"\"\"\n+\n+\n+from __future__ import absolute_import\n+\n+import unittest\n+\n+import petstore_api\n+\n+\n+class TestDrawing(unittest.TestCase):\n+    \"\"\"Drawing unit test stubs\"\"\"\n+\n+    def setUp(self):\n+        self.api_client = petstore_api.ApiClient()\n+\n+    def tearDown(self):\n+        pass\n+\n+    def test_deserialize_oneof_reference(self):\n+        isosceles_triangle = petstore_api.Shape(\n+            shape_type=\"Triangle\",\n+            triangle_type=\"IsoscelesTriangle\"\n+        )\n+        assert isinstance(isosceles_triangle, petstore_api.IsoscelesTriangle)\n+        inst = petstore_api.Drawing(\n+            # 'main_shape' has type 'Shape', which is a oneOf [triangle, quadrilateral]\n+            # composed schema. So we should be able to assign a petstore_api.Triangle\n+            # to a 'main_shape'.\n+            main_shape=isosceles_triangle,\n+            shapes=[\n+                petstore_api.Shape(\n+                    shape_type=\"Triangle\",\n+                    triangle_type=\"EquilateralTriangle\"\n+                ),\n+                petstore_api.Shape(", "originalCommit": "3a05ff65b341a1a7b57498c26f0ae57a4a391bd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5MjUzMQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6262#discussion_r423992531", "bodyText": "I've improved the unit tests.", "author": "sebastien-rosset", "createdAt": "2020-05-12T19:50:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4ODMxNw=="}], "type": "inlineReview"}, {"oid": "40ecbfb82bf5d333a4420b7d082b8d4381a1a927", "url": "https://github.com/OpenAPITools/openapi-generator/commit/40ecbfb82bf5d333a4420b7d082b8d4381a1a927", "message": "Improve unit tests", "committedDate": "2020-05-12T19:49:57Z", "type": "commit"}]}