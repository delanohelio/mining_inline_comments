{"pr_number": 5060, "pr_title": "[C++] [Qt5]Add support for response compression and various enhancements", "pr_createdAt": "2020-01-20T21:14:43Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/5060", "timeline": [{"oid": "b563926f923b6ba4323f0b4ccc2ae05cb303f792", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b563926f923b6ba4323f0b4ccc2ae05cb303f792", "message": "Add support for response compression and add response body to error string", "committedDate": "2020-01-20T21:20:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc1NDEzMQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5060#discussion_r368754131", "bodyText": "wild spaces appear \ud83d\ude01", "author": "muttleyxd", "createdAt": "2020-01-20T23:12:14Z", "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/HttpRequest.cpp.mustache", "diffHunk": "@@ -332,15 +341,14 @@ void {{prefix}}HttpRequestWorker::execute({{prefix}}HttpRequestInput *input) {\n \n void {{prefix}}HttpRequestWorker::on_manager_finished(QNetworkReply *reply) {\n     error_type = reply->error();\n-    response = reply->readAll();\n     error_str = reply->errorString();\n     if (reply->rawHeaderPairs().count() > 0) {\n         for (const auto &item : reply->rawHeaderPairs()) {\n             headers.insert(item.first, item.second);\n         }\n     }\n-    reply->deleteLater();\n-    process_form_response();\n+    process_response(reply);\n+    reply->deleteLater();    ", "originalCommit": "b563926f923b6ba4323f0b4ccc2ae05cb303f792", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc1NTg3NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5060#discussion_r368755874", "bodyText": "wouldn't it be better to zero-initialize strm?\nz_stream strm{};\n\nwith this you could get rid of\n        strm.zalloc = Z_NULL;\n        strm.zfree = Z_NULL;\n        strm.opaque = Z_NULL;", "author": "muttleyxd", "createdAt": "2020-01-20T23:22:15Z", "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/HttpRequest.cpp.mustache", "diffHunk": "@@ -368,18 +376,61 @@ void {{prefix}}HttpRequestWorker::process_form_response() {\n                 }\n             }\n             {{prefix}}HttpFileElement felement;\n-            felement.saveToFile(QString(), workingDirectory + QDir::separator() + filename, filename, contentType, response.data());\n+            felement.saveToFile(QString(), workingDirectory + QDir::separator() + filename, filename, contentType, reply->readAll());\n             files.insert(filename, felement);\n         }\n \n     } else if (getResponseHeaders().contains(QString(\"Content-Type\"))) {\n         auto contentType = getResponseHeaders().value(QString(\"Content-Type\").toUtf8()).split(QString(\";\"), QString::SkipEmptyParts);\n         if ((contentType.count() > 0) && (contentType.first() == QString(\"multipart/form-data\"))) {\n+            // TODO : Handle Multipart responses\n         } else {\n+            if(headers.contains(\"Content-Encoding\")){\n+                auto encoding = headers.value(\"Content-Encoding\").split(',');\n+                if(encoding.contains(\"gzip\", Qt::CaseInsensitive) || encoding.contains(\"deflate\", Qt::CaseInsensitive)){\n+                    response = decompress(reply->readAll());\n+                }\n+            }\n+            else {\n+                response = reply->readAll();\n+            }\n         }\n     }\n }\n \n+QByteArray {{prefix}}HttpRequestWorker::decompress(const QByteArray& data){\n+    QByteArray result;\n+    bool sts = false;{{#contentCompression}}\n+    do{\n+        z_stream strm;", "originalCommit": "b563926f923b6ba4323f0b4ccc2ae05cb303f792", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc1NTk3NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5060#discussion_r368755975", "bodyText": "Please format this a little better, like this:\nreturn sts ? result : QByteArray();", "author": "muttleyxd", "createdAt": "2020-01-20T23:22:53Z", "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/HttpRequest.cpp.mustache", "diffHunk": "@@ -368,18 +376,61 @@ void {{prefix}}HttpRequestWorker::process_form_response() {\n                 }\n             }\n             {{prefix}}HttpFileElement felement;\n-            felement.saveToFile(QString(), workingDirectory + QDir::separator() + filename, filename, contentType, response.data());\n+            felement.saveToFile(QString(), workingDirectory + QDir::separator() + filename, filename, contentType, reply->readAll());\n             files.insert(filename, felement);\n         }\n \n     } else if (getResponseHeaders().contains(QString(\"Content-Type\"))) {\n         auto contentType = getResponseHeaders().value(QString(\"Content-Type\").toUtf8()).split(QString(\";\"), QString::SkipEmptyParts);\n         if ((contentType.count() > 0) && (contentType.first() == QString(\"multipart/form-data\"))) {\n+            // TODO : Handle Multipart responses\n         } else {\n+            if(headers.contains(\"Content-Encoding\")){\n+                auto encoding = headers.value(\"Content-Encoding\").split(',');\n+                if(encoding.contains(\"gzip\", Qt::CaseInsensitive) || encoding.contains(\"deflate\", Qt::CaseInsensitive)){\n+                    response = decompress(reply->readAll());\n+                }\n+            }\n+            else {\n+                response = reply->readAll();\n+            }\n         }\n     }\n }\n \n+QByteArray {{prefix}}HttpRequestWorker::decompress(const QByteArray& data){\n+    QByteArray result;\n+    bool sts = false;{{#contentCompression}}\n+    do{\n+        z_stream strm;\n+        static const int CHUNK_SIZE = 2048;\n+        char out[CHUNK_SIZE];\n+        if (data.size() <= 4) {\n+            break;\n+        }\n+        strm.zalloc = Z_NULL;\n+        strm.zfree = Z_NULL;\n+        strm.opaque = Z_NULL;\n+        strm.avail_in = data.size();\n+        strm.next_in = (Bytef*)(data.data());\n+        if(Z_OK != inflateInit2(&strm, 15 + 32)){\n+            break;\n+        }\n+        do {\n+            sts = false;\n+            strm.avail_out = CHUNK_SIZE;\n+            strm.next_out = (Bytef*)(out);\n+            if(inflate(&strm, Z_NO_FLUSH) < Z_OK){\n+                break;\n+            }\n+            result.append(out, CHUNK_SIZE - strm.avail_out);\n+            sts = true;\n+        } while (strm.avail_out == 0);\n+        inflateEnd(&strm);\n+    } while(false);{{/contentCompression}}\n+    return sts?result:QByteArray();", "originalCommit": "b563926f923b6ba4323f0b4ccc2ae05cb303f792", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc1NjEwNQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5060#discussion_r368756105", "bodyText": "Do we need this space?", "author": "muttleyxd", "createdAt": "2020-01-20T23:23:32Z", "path": "samples/client/petstore/cpp-qt5/client/CMakeLists.txt", "diffHunk": "@@ -15,7 +15,7 @@ file(GLOB SRCS\n )\n \n add_library(${PROJECT_NAME} ${SRCS})\n-target_link_libraries(${PROJECT_NAME} PRIVATE Qt5::Core Qt5::Network ssl crypto)\n+target_link_libraries(${PROJECT_NAME} PRIVATE Qt5::Core Qt5::Network ssl crypto )", "originalCommit": "b563926f923b6ba4323f0b4ccc2ae05cb303f792", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d1904038a2946ba9cd795b12c00a525bd1f7f0d3", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d1904038a2946ba9cd795b12c00a525bd1f7f0d3", "message": "Add support for response compression and add response body to error string", "committedDate": "2020-01-21T00:08:05Z", "type": "commit"}, {"oid": "d1904038a2946ba9cd795b12c00a525bd1f7f0d3", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d1904038a2946ba9cd795b12c00a525bd1f7f0d3", "message": "Add support for response compression and add response body to error string", "committedDate": "2020-01-21T00:08:05Z", "type": "forcePushed"}, {"oid": "e138b02b7a71d67cf18e69f9781b958e5cd3d891", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e138b02b7a71d67cf18e69f9781b958e5cd3d891", "message": "Improve robustness while parsing quality and compression levels", "committedDate": "2020-01-21T00:27:50Z", "type": "commit"}]}