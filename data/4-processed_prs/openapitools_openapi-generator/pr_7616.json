{"pr_number": 7616, "pr_title": "Small tweaks for php generator, PHPStan level 3, Psalm level 7", "pr_createdAt": "2020-10-07T07:58:25Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/7616", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNjgyOQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7616#discussion_r500816829", "bodyText": "This one is interesting, Psalm found it's nonsensical since it includes object, which is already handled a few lines above, meaning this branch can never be reached with that specific \"class\".\nThis introduces the first tool-specific annotation, but I believe it's not a big issue since Doctrine and PHPUnit already use them natively.", "author": "dkarlovi", "createdAt": "2020-10-07T08:06:57Z", "path": "modules/openapi-generator/src/main/resources/php/ObjectSerializer.mustache", "diffHunk": "@@ -307,6 +314,7 @@ class ObjectSerializer\n             }\n         }\n \n+        /** @psalm-suppress ParadoxicalCondition */", "originalCommit": "d4883baf6bd24318f02eddf366cb56a37e0638d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyMTMwMQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7616#discussion_r500821301", "bodyText": "See example what it found here: https://psalm.dev/r/1035490c06", "author": "dkarlovi", "createdAt": "2020-10-07T08:14:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNjgyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxODYzNg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7616#discussion_r500818636", "bodyText": "Using is_callable is safer than using method_exists, while also being more correct.", "author": "dkarlovi", "createdAt": "2020-10-07T08:09:47Z", "path": "modules/openapi-generator/src/main/resources/php/ObjectSerializer.mustache", "diffHunk": "@@ -159,8 +165,9 @@ class ObjectSerializer\n      */\n     public static function toHeaderValue($value)\n     {\n-        if (method_exists($value, 'toHeaderValue')) {\n-            return $value->toHeaderValue();\n+        $callable = [$value, 'toHeaderValue'];", "originalCommit": "d4883baf6bd24318f02eddf366cb56a37e0638d2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cf5679f1b4f72c56604c3fe6178a9c7b37b4c28c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/cf5679f1b4f72c56604c3fe6178a9c7b37b4c28c", "message": "Small tweaks for php generator, PHPStan level 3", "committedDate": "2020-10-07T08:25:03Z", "type": "forcePushed"}, {"oid": "48ed5c83ad12430aae70ca53bf63c4aab28ffd6b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/48ed5c83ad12430aae70ca53bf63c4aab28ffd6b", "message": "Small tweaks for php generator, PHPStan level 3", "committedDate": "2020-10-20T15:42:59Z", "type": "commit"}, {"oid": "48ed5c83ad12430aae70ca53bf63c4aab28ffd6b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/48ed5c83ad12430aae70ca53bf63c4aab28ffd6b", "message": "Small tweaks for php generator, PHPStan level 3", "committedDate": "2020-10-20T15:42:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4MzQwNA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7616#discussion_r508783404", "bodyText": "@dkarlovi So... instead of one big condition you decided to use three nested conditions? It's weird that PHPStan doesn't complain about that. It usually says to me \"consider refactoring\" when I have the third nested condition. \ud83d\ude15", "author": "ybelenko", "createdAt": "2020-10-20T19:26:30Z", "path": "samples/client/petstore/php/OpenAPIClient-php/lib/ObjectSerializer.php", "diffHunk": "@@ -87,12 +87,16 @@ public static function sanitizeForSerialization($data, $type = null, $format = n\n                 foreach ($data::openAPITypes() as $property => $openAPIType) {\n                     $getter = $data::getters()[$property];\n                     $value = $data->$getter();\n-                    if ($value !== null\n-                        && !in_array($openAPIType, ['DateTime', 'bool', 'boolean', 'byte', 'double', 'float', 'int', 'integer', 'mixed', 'number', 'object', 'string', 'void'], true)\n-                        && method_exists($openAPIType, 'getAllowableEnumValues')\n-                        && !in_array($value, $openAPIType::getAllowableEnumValues(), true)) {\n-                        $imploded = implode(\"', '\", $openAPIType::getAllowableEnumValues());\n-                        throw new \\InvalidArgumentException(\"Invalid value for enum '$openAPIType', must be one of: '$imploded'\");\n+                    if ($value !== null && !in_array($openAPIType, ['DateTime', 'bool', 'boolean', 'byte', 'double', 'float', 'int', 'integer', 'mixed', 'number', 'object', 'string', 'void'], true)) {", "originalCommit": "48ed5c83ad12430aae70ca53bf63c4aab28ffd6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA0OTI4MQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7616#discussion_r509049281", "bodyText": "@ybelenko the nested ifs are equivalent to the original single if, the difference is the safer types, in this case, $callable is really callable, using it instead of method_exists, see my other comment with links.\nIMO the serializer should in the future likely be extracted from the package anyway since it's static and has tests which are outside of the generated package (hinting at its static nature). Refactoring it further until it's clean enough to split apart / replace is a good direction here.", "author": "dkarlovi", "createdAt": "2020-10-21T07:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4MzQwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1MjI5Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7616#discussion_r509052292", "bodyText": "Oh no, copy paste. \ud83d\ude48\nShould be\n/** array $allowedEnumTypes */", "author": "dkarlovi", "createdAt": "2020-10-21T07:33:52Z", "path": "samples/client/petstore/php/OpenAPIClient-php/lib/ObjectSerializer.php", "diffHunk": "@@ -87,12 +87,16 @@ public static function sanitizeForSerialization($data, $type = null, $format = n\n                 foreach ($data::openAPITypes() as $property => $openAPIType) {\n                     $getter = $data::getters()[$property];\n                     $value = $data->$getter();\n-                    if ($value !== null\n-                        && !in_array($openAPIType, ['DateTime', 'bool', 'boolean', 'byte', 'double', 'float', 'int', 'integer', 'mixed', 'number', 'object', 'string', 'void'], true)\n-                        && method_exists($openAPIType, 'getAllowableEnumValues')\n-                        && !in_array($value, $openAPIType::getAllowableEnumValues(), true)) {\n-                        $imploded = implode(\"', '\", $openAPIType::getAllowableEnumValues());\n-                        throw new \\InvalidArgumentException(\"Invalid value for enum '$openAPIType', must be one of: '$imploded'\");\n+                    if ($value !== null && !in_array($openAPIType, ['DateTime', 'bool', 'boolean', 'byte', 'double', 'float', 'int', 'integer', 'mixed', 'number', 'object', 'string', 'void'], true)) {\n+                        $callable = [$openAPIType, 'getAllowableEnumValues'];\n+                        if (is_callable($callable)) {\n+                            /** array $callable */", "originalCommit": "48ed5c83ad12430aae70ca53bf63c4aab28ffd6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5MTMzNQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7616#discussion_r510191335", "bodyText": "Oh no, copy paste. \ud83d\ude48\nShould be\n/** array $allowedEnumTypes */\n\n\nCould you fix it in next PR?", "author": "ybelenko", "createdAt": "2020-10-22T14:07:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1MjI5Mg=="}], "type": "inlineReview"}]}