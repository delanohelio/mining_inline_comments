{"pr_number": 4975, "pr_title": "[Slim4] Add string formats support to Data Mocker", "pr_createdAt": "2020-01-11T19:42:31Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/4975", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzODY0MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365538640", "bodyText": "I'm not sure that truncate data is necessary there. Don't know which argument is more important, minLength/maxLength or format.", "author": "ybelenko", "createdAt": "2020-01-11T19:47:27Z", "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "diffHunk": "@@ -207,7 +228,72 @@ public function mockString(\n             throw new InvalidArgumentException('\"maxLength\" value cannot be less than \"minLength\"');\n         }\n \n-        return str_pad('', mt_rand($minLength, $maxLength), 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. ', \\STR_PAD_RIGHT);\n+        switch ($dataFormat) {\n+            case IMocker::DATA_FORMAT_BYTE:\n+            case IMocker::DATA_FORMAT_BINARY:\n+                // base64 encoded string\n+                $inputLength = 1;\n+                $str = base64_encode($getLoremIpsum($inputLength));\n+                while (mb_strlen($str) < $minLength) {\n+                    $inputLength++;\n+                    $str = base64_encode($getLoremIpsum($inputLength));\n+                }\n+\n+                // base64 encoding produces strings devided by 4, so resulted string can exceed maxLength parameter\n+                // I think truncated(invalid) base64 string is better than oversized, cause this data is fake anyway\n+                $str = $truncateOrPad($str, null, $maxLength, '. ');", "originalCommit": "6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzNTAwMA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365635000", "bodyText": "I'm ok with truncated data since it's fake anyway as you've pointed out.", "author": "wing328", "createdAt": "2020-01-13T02:53:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzODY0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzODk1MQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365538951", "bodyText": "Same applies to this part. Please, explain to me. Accordingly to OAS3 spec what properties has more priority, minLength/maxLength or date/date-time format? Is schema below valid:\ntype: string\nformat: date-time\nmaxLength: 1\nIt's not possible to write down date-time with single char, isn't it? It violates RFC standard for date-time specification too.", "author": "ybelenko", "createdAt": "2020-01-11T19:54:09Z", "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "diffHunk": "@@ -207,7 +228,72 @@ public function mockString(\n             throw new InvalidArgumentException('\"maxLength\" value cannot be less than \"minLength\"');\n         }\n \n-        return str_pad('', mt_rand($minLength, $maxLength), 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. ', \\STR_PAD_RIGHT);\n+        switch ($dataFormat) {\n+            case IMocker::DATA_FORMAT_BYTE:\n+            case IMocker::DATA_FORMAT_BINARY:\n+                // base64 encoded string\n+                $inputLength = 1;\n+                $str = base64_encode($getLoremIpsum($inputLength));\n+                while (mb_strlen($str) < $minLength) {\n+                    $inputLength++;\n+                    $str = base64_encode($getLoremIpsum($inputLength));\n+                }\n+\n+                // base64 encoding produces strings devided by 4, so resulted string can exceed maxLength parameter\n+                // I think truncated(invalid) base64 string is better than oversized, cause this data is fake anyway\n+                $str = $truncateOrPad($str, null, $maxLength, '. ');\n+                break;\n+            case IMocker::DATA_FORMAT_DATE:\n+            case IMocker::DATA_FORMAT_DATE_TIME:\n+                // min unix timestamp is 0 and max is 2147483647 for 32bit systems which equals 2038-01-19 03:14:07\n+                $date = DateTime::createFromFormat('U', mt_rand(0, 2147483647));\n+                $str = ($dataFormat === IMocker::DATA_FORMAT_DATE) ? $date->format('Y-m-d') : $date->format('Y-m-d\\TH:i:sP');\n+\n+                // truncate or pad datestring to fit minLength and maxLength\n+                $str = $truncateOrPad($str, $minLength, $maxLength, ' ');", "originalCommit": "6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzNTE1Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365635153", "bodyText": "Right, maxLength: 1 doesn't conform to RFC3339", "author": "wing328", "createdAt": "2020-01-13T02:54:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzODk1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0OTg3OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365649879", "bodyText": "Right, maxLength: 1 doesn't conform to RFC3339\n\nSo described spec is invalid or not? Will validate function of generator pass this part of spec? Should I add extra checks against RFC3339 and throw additional exceptions?", "author": "ybelenko", "createdAt": "2020-01-13T05:19:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzODk1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMyODU1NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r366328555", "bodyText": "If someone defines the following:\ntype: string\nformat: date-time\nmaxLength: 1\n\nI don't think it's our fault. I suggest we revisit this edge case when users bring it up.", "author": "wing328", "createdAt": "2020-01-14T13:11:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzODk1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzOTEyNg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365539126", "bodyText": "If I understand spec correctly, email format is not supported, but is recognisable by some systems. I think I can truncate email values with no worries.", "author": "ybelenko", "createdAt": "2020-01-11T19:57:53Z", "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "diffHunk": "@@ -207,7 +228,72 @@ public function mockString(\n             throw new InvalidArgumentException('\"maxLength\" value cannot be less than \"minLength\"');\n         }\n \n-        return str_pad('', mt_rand($minLength, $maxLength), 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. ', \\STR_PAD_RIGHT);\n+        switch ($dataFormat) {\n+            case IMocker::DATA_FORMAT_BYTE:\n+            case IMocker::DATA_FORMAT_BINARY:\n+                // base64 encoded string\n+                $inputLength = 1;\n+                $str = base64_encode($getLoremIpsum($inputLength));\n+                while (mb_strlen($str) < $minLength) {\n+                    $inputLength++;\n+                    $str = base64_encode($getLoremIpsum($inputLength));\n+                }\n+\n+                // base64 encoding produces strings devided by 4, so resulted string can exceed maxLength parameter\n+                // I think truncated(invalid) base64 string is better than oversized, cause this data is fake anyway\n+                $str = $truncateOrPad($str, null, $maxLength, '. ');\n+                break;\n+            case IMocker::DATA_FORMAT_DATE:\n+            case IMocker::DATA_FORMAT_DATE_TIME:\n+                // min unix timestamp is 0 and max is 2147483647 for 32bit systems which equals 2038-01-19 03:14:07\n+                $date = DateTime::createFromFormat('U', mt_rand(0, 2147483647));\n+                $str = ($dataFormat === IMocker::DATA_FORMAT_DATE) ? $date->format('Y-m-d') : $date->format('Y-m-d\\TH:i:sP');\n+\n+                // truncate or pad datestring to fit minLength and maxLength\n+                $str = $truncateOrPad($str, $minLength, $maxLength, ' ');\n+                break;\n+            case IMocker::DATA_FORMAT_PASSWORD:\n+                // use list of most popular passwords\n+                $obviousPassList = [\n+                    'qwerty',\n+                    'qwerty12345',\n+                    'hello',\n+                    '12345',\n+                    '0000',\n+                    'qwerty12345!',\n+                    'qwertyuiop[]',\n+                ];\n+                $str = $obviousPassList[mt_rand(0, count($obviousPassList) - 1)];\n+\n+                // truncate or pad password to fit minLength and maxLength\n+                $str = $truncateOrPad($str, $minLength, $maxLength);\n+                break;\n+            case IMocker::DATA_FORMAT_UUID:\n+                // use php built-in uniqid function\n+                $str = uniqid();\n+\n+                // truncate or pad password to fit minLength and maxLength\n+                $str = $truncateOrPad($str, $minLength, $maxLength);\n+                break;\n+            case IMocker::DATA_FORMAT_EMAIL:\n+                // just for visionary purpose, not related to real persons\n+                $fakeEmailList = [\n+                    'johndoe',\n+                    'lhoswald',\n+                    'ojsimpson',\n+                    'mlking',\n+                    'jfkennedy',\n+                ];\n+                $str = $fakeEmailList[mt_rand(0, count($fakeEmailList) - 1)] . '@example.com';\n+\n+                // truncate or pad email to fit minLength and maxLength\n+                $str = $truncateOrPad($str, $minLength, $maxLength);", "originalCommit": "6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzNTQ0Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365635442", "bodyText": "format field for type: string can be anything according to the spec so email is valid. I agree with you not every tool supports email as the format.\nLet's go with your current approach to see how it goes.", "author": "wing328", "createdAt": "2020-01-13T02:57:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzOTEyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzOTM4Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365539382", "bodyText": "I tried to produce binary string data with random_bytes() php function, but resulted string can break std output. I don't know how binary format string should look like(raw, hex. base64 etc.). If somebody knows, please give an example.", "author": "ybelenko", "createdAt": "2020-01-11T20:03:13Z", "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "diffHunk": "@@ -207,7 +228,72 @@ public function mockString(\n             throw new InvalidArgumentException('\"maxLength\" value cannot be less than \"minLength\"');\n         }\n \n-        return str_pad('', mt_rand($minLength, $maxLength), 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. ', \\STR_PAD_RIGHT);\n+        switch ($dataFormat) {\n+            case IMocker::DATA_FORMAT_BYTE:\n+            case IMocker::DATA_FORMAT_BINARY:", "originalCommit": "6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzNDYyNQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365634625", "bodyText": "What about using a random string generator mentioned in https://stackoverflow.com/a/4356295/677735 ?\n\nhow binary format string should look like(raw, hex. base64 etc.).\n\nShould be simply just raw.", "author": "wing328", "createdAt": "2020-01-13T02:49:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzOTM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY1MDM3NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365650374", "bodyText": "Function from link looks like a base62 encoded string to me. Raw binary string contains non UTF characters which breaks PHP output or even JSON.\nI thought that raw binary string in php is:\necho random_bytes(10);\n// ????U???", "author": "ybelenko", "createdAt": "2020-01-13T05:24:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzOTM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMyOTY0OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r366329649", "bodyText": "But your concern is that it may break the std output, right?\nIf that's not a concern, please start with random_bytes", "author": "wing328", "createdAt": "2020-01-14T13:13:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzOTM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMzMzAwNA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r366333004", "bodyText": "It's not my concern, I know that it breaks output \ud83d\ude04 I've checked. Maybe it should be encoded somehow to be presented inside of JSON or http request.", "author": "ybelenko", "createdAt": "2020-01-14T13:20:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzOTM4Mg=="}], "type": "inlineReview"}, {"oid": "69c50b9889e7f57a67b6f498da808244e9a44abc", "url": "https://github.com/OpenAPITools/openapi-generator/commit/69c50b9889e7f57a67b6f498da808244e9a44abc", "message": "[Slim4] Refresh samples", "committedDate": "2020-01-13T22:16:09Z", "type": "forcePushed"}, {"oid": "22ea6c1a44b1b705a599a2497e6d144a6cfb42cb", "url": "https://github.com/OpenAPITools/openapi-generator/commit/22ea6c1a44b1b705a599a2497e6d144a6cfb42cb", "message": "[Slim4] Support byte data format", "committedDate": "2020-01-14T06:19:56Z", "type": "commit"}, {"oid": "17e5d3379cc2c1a213e79c9e92adffafdff22f89", "url": "https://github.com/OpenAPITools/openapi-generator/commit/17e5d3379cc2c1a213e79c9e92adffafdff22f89", "message": "[Slim4] Support date and date-time data formats", "committedDate": "2020-01-14T06:19:56Z", "type": "commit"}, {"oid": "f7c30e06d25737e9508d7d0651a2887bcc327ec5", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f7c30e06d25737e9508d7d0651a2887bcc327ec5", "message": "[Slim4] Support password data format", "committedDate": "2020-01-14T06:19:56Z", "type": "commit"}, {"oid": "cadc45237878316cde13ebc6e78051081436aba2", "url": "https://github.com/OpenAPITools/openapi-generator/commit/cadc45237878316cde13ebc6e78051081436aba2", "message": "[Slim4] Support uuid data format", "committedDate": "2020-01-14T06:19:56Z", "type": "commit"}, {"oid": "cd67fbf21b95591daf350d1b99f7bcc534f42bdd", "url": "https://github.com/OpenAPITools/openapi-generator/commit/cd67fbf21b95591daf350d1b99f7bcc534f42bdd", "message": "[Slim4] Fix test of password format mocking\n\n'00000' is numeric type, because PHPUnit doesn't make strict type\ncomparison.", "committedDate": "2020-01-14T06:19:56Z", "type": "commit"}, {"oid": "4756cfc0a185a8028c8a824fa4550d8557f934d1", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4756cfc0a185a8028c8a824fa4550d8557f934d1", "message": "[Slim4] Support binary data format", "committedDate": "2020-01-14T06:19:56Z", "type": "commit"}, {"oid": "564d57e92a5f30bdcc0f616b419ac825484666f1", "url": "https://github.com/OpenAPITools/openapi-generator/commit/564d57e92a5f30bdcc0f616b419ac825484666f1", "message": "[Slim4] Support email data format", "committedDate": "2020-01-14T06:19:56Z", "type": "commit"}, {"oid": "6546981689437ad2ef5a64e321951b93e220a8f9", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6546981689437ad2ef5a64e321951b93e220a8f9", "message": "[Slim4] Base64 encode binary format output\n\nRaw bytes string breaks PHP stdout output, so I've decided to use base64\nencoding format for binary format too.", "committedDate": "2020-01-14T06:19:56Z", "type": "commit"}, {"oid": "ebfab2d89562f105c4c1682dfa81211f5b738567", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ebfab2d89562f105c4c1682dfa81211f5b738567", "message": "[Slim4] Fix data format key in object mocking", "committedDate": "2020-01-14T06:19:56Z", "type": "commit"}, {"oid": "83353c39826fac28537914e78e47e5d401efb7c8", "url": "https://github.com/OpenAPITools/openapi-generator/commit/83353c39826fac28537914e78e47e5d401efb7c8", "message": "[Slim4] Refresh samples", "committedDate": "2020-01-14T06:19:56Z", "type": "commit"}, {"oid": "83353c39826fac28537914e78e47e5d401efb7c8", "url": "https://github.com/OpenAPITools/openapi-generator/commit/83353c39826fac28537914e78e47e5d401efb7c8", "message": "[Slim4] Refresh samples", "committedDate": "2020-01-14T06:19:56Z", "type": "forcePushed"}]}