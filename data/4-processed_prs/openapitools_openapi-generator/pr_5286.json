{"pr_number": 5286, "pr_title": "[kotlin][client] improve debug experience", "pr_createdAt": "2020-02-11T14:17:24Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/5286", "timeline": [{"oid": "a98f3f3a76d60d3c58a2b58f9ff8f9149bce78d1", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a98f3f3a76d60d3c58a2b58f9ff8f9149bce78d1", "message": "[kotlin][client] remove null message on server error", "committedDate": "2020-02-11T14:11:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4NTcyOQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5286#discussion_r378585729", "bodyText": "I think we might want to rethink using response bodies here, as it could expose these clients to reflection and log injection attacks. I think it makes sense to expose the body of the error, but not as the message which the user is likely logging.\nI'm wondering as well, why would this ever be null and require some change here? Wouldn't it previously have been Server error?", "author": "jimschubert", "createdAt": "2020-02-13T00:14:19Z", "path": "modules/openapi-generator/src/main/resources/kotlin-client/api.mustache", "diffHunk": "@@ -77,7 +77,7 @@ import {{packageName}}.infrastructure.toMultiValue\n             }\n             ResponseType.ServerError -> {\n                 val localVarError = localVarResponse as ServerError<*>\n-                throw ServerException(localVarError.message ?: \"Server error\", localVarError.statusCode)\n+                throw ServerException(localVarError.body as? String ?: \"Server error\", localVarError.statusCode)", "originalCommit": "a98f3f3a76d60d3c58a2b58f9ff8f9149bce78d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcxMDIwOQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5286#discussion_r378710209", "bodyText": "It is like this since I use OpenAPI, but I only use it for a few months.\nI understand your concern, this already happens with the client error.\nI open this PR, because when a server error happens, error message is not very helpful.\nOn the other hand with the ClientError, it's really easy to debug a problem.\nDo you have any idea on how can we achieve a better debugging experience?\nIf you don't want to to put the body as the exception message, maybe we can create an extra variable, like body in server and client error?", "author": "4brunu", "createdAt": "2020-02-13T08:25:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4NTcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAxMTAzNQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5286#discussion_r379011035", "bodyText": "I wonder if the ServerException and ClientException could have a property holding their respective errors? This way, the exception's message is still clearly a message and additional details are still present for debugging purposes?\nI think the easiest way to do this without breaking existing clients might be to create a marker interface on ApiInfrastructureResponse<T> such as:\ninterface Response\n\nabstract class ApiInfrastructureResponse<T>(val responseType: ResponseType) {\n    abstract val statusCode: Int\n    abstract val headers: Map<String,List<String>>\n}: Response\n\nThen, the client/server exceptions could add ClientError and ServerError as properties with null defaults:\nopen class ClientException(message: kotlin.String? = null, val statusCode: Int = -1, val response: Response? = null) : RuntimeException(message) {\n\n    companion object {\n        private const val serialVersionUID: Long = 123L\n    }\n}\n\nopen class ServerException(message: kotlin.String? = null, val statusCode: Int = -1, val response: Response? = null) : RuntimeException(message) {\n\n    companion object {\n        private const val serialVersionUID: Long = 456L\n    }\n}\n\nI think that would allow us to define Client/Server exceptions more cleanly by assigning response.body to the Response? property.\nIt wouldn't protect from log injection if someone is logging exception.response, but that would be on the consumer and no fault of the generated code.\nWhat are your thoughts?", "author": "jimschubert", "createdAt": "2020-02-13T17:31:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4NTcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMyODI3Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5286#discussion_r379328276", "bodyText": "It looks good to me.\nI have just a few questions.\nWhy do you want an interface Response? To hide ApiInfrastructureResponse?\nAnd what value would we put in the message of the client and server exceptions?\nA plain string \"Client Error\" and \"Server Error\" to avoid exposing the body?", "author": "4brunu", "createdAt": "2020-02-14T09:29:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4NTcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2MDcxNQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5286#discussion_r379460715", "bodyText": "The Response interface would be needed because Kotlin doesn't support wildcard type parameters in the same way as Java. If you were to carry this type info, it would mean making the exceptions generic.\nI think the message for server exception should be \"Server Error\" for 500 and probably \"Server Error : name\" for other 5xx where name is the human readable value of the status code (e.g. Bad Gateway).\nFor Client Errors, we could probably use similar Code Name format, but they're technically not exceptional behavior. Probably something like \"Client returned a 403 Forbidden\"?", "author": "jimschubert", "createdAt": "2020-02-14T14:32:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4NTcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NDI2OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5286#discussion_r379464269", "bodyText": "How can I translate the status code into Bad Gateway for example?", "author": "4brunu", "createdAt": "2020-02-14T14:39:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4NTcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MzA5Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5286#discussion_r379493096", "bodyText": "It's done, what do you think of it?", "author": "4brunu", "createdAt": "2020-02-14T15:30:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4NTcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkxMzYwOQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5286#discussion_r379913609", "bodyText": "Sorry for the delayed response. Looks excellent! Seems that your fixes now address both of our concerns.", "author": "jimschubert", "createdAt": "2020-02-16T15:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4NTcyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4NjM0MQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5286#discussion_r378586341", "bodyText": "Changing this structure is a potential breaking change, as users of the generated clients may build adding these structures in the consuming code.", "author": "jimschubert", "createdAt": "2020-02-13T00:16:36Z", "path": "samples/client/petstore/kotlin-nullable/src/main/kotlin/org/openapitools/client/infrastructure/ApiInfrastructureResponse.kt", "diffHunk": "@@ -33,7 +33,6 @@ class ClientError<T>(\n ) : ApiInfrastructureResponse<T>(ResponseType.ClientError)\n \n class ServerError<T>(\n-    val message: String? = null,", "originalCommit": "a98f3f3a76d60d3c58a2b58f9ff8f9149bce78d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcwNzEzOA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5286#discussion_r378707138", "bodyText": "I reverted this change to avoid the breaking change", "author": "4brunu", "createdAt": "2020-02-13T08:18:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4NjM0MQ=="}], "type": "inlineReview"}, {"oid": "825a9e4edcd85ca55110317bc4371013304c3d47", "url": "https://github.com/OpenAPITools/openapi-generator/commit/825a9e4edcd85ca55110317bc4371013304c3d47", "message": "[kotlin][client] avoid breaking change", "committedDate": "2020-02-13T08:16:45Z", "type": "commit"}, {"oid": "fa7f3b2b6473af7c92670ac89ca7a1006b356b13", "url": "https://github.com/OpenAPITools/openapi-generator/commit/fa7f3b2b6473af7c92670ac89ca7a1006b356b13", "message": "[kotlin][client] add response to client and server exceptions", "committedDate": "2020-02-13T22:21:07Z", "type": "commit"}, {"oid": "1488e861500b87cd11f5871e01fe01d021c97659", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1488e861500b87cd11f5871e01fe01d021c97659", "message": "Merge branch 'master' into feature/kotlin-server-error", "committedDate": "2020-02-13T22:22:35Z", "type": "commit"}, {"oid": "13c7b571914b1f95740f18b06753b20a85cecb43", "url": "https://github.com/OpenAPITools/openapi-generator/commit/13c7b571914b1f95740f18b06753b20a85cecb43", "message": "[kotlin][client] improve message on ClientException and ServerException", "committedDate": "2020-02-14T15:28:52Z", "type": "commit"}, {"oid": "463d75f824fe311ca25e73e3c7678eb830e1b4c4", "url": "https://github.com/OpenAPITools/openapi-generator/commit/463d75f824fe311ca25e73e3c7678eb830e1b4c4", "message": "Merge branch 'master' into feature/kotlin-server-error", "committedDate": "2020-02-14T15:29:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkxMzQzNg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5286#discussion_r379913436", "bodyText": "note that this shouldn't be a breaking change because it's an internal type.", "author": "jimschubert", "createdAt": "2020-02-16T15:57:40Z", "path": "modules/openapi-generator/src/main/resources/kotlin-client/libraries/jvm-okhttp/infrastructure/ApiInfrastructureResponse.kt.mustache", "diffHunk": "@@ -27,6 +29,7 @@ package {{packageName}}.infrastructure\n ) : ApiInfrastructureResponse<T>(ResponseType.Redirection)\n \n {{#nonPublicApi}}internal {{/nonPublicApi}}class ClientError<T>(\n+    val message: String? = null,", "originalCommit": "463d75f824fe311ca25e73e3c7678eb830e1b4c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}