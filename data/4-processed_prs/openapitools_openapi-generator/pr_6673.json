{"pr_number": 6673, "pr_title": "[Rust][Client] Multiple returns becomes optional (fixes #6650).", "pr_createdAt": "2020-06-15T14:26:39Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/6673", "timeline": [{"oid": "fae63e35ed9b957414a0c2b94e23ab54533d41e1", "url": "https://github.com/OpenAPITools/openapi-generator/commit/fae63e35ed9b957414a0c2b94e23ab54533d41e1", "message": "fixes #6650. Rust client: multiple returns becomes optional.", "committedDate": "2020-06-15T14:22:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMzU1NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r440723554", "bodyText": "missing Ok() also i tried testing locally, didn't work for me:\njava -jar ./modules/openapi-generator-cli/target/openapi-generator-cli.jar generate -g rust -i slack_web_modified.json -o slack --skip-validate-spec --remove-operation-id-prefix --library reqwest --additional-properties useSingleRequestParameter=true,supportAsync=true,supportMultipleReturns=true", "author": "seunlanlege", "createdAt": "2020-06-16T09:43:39Z", "path": "samples/client/petstore/rust/reqwest/petstore/src/apis/pet_api.rs", "diffHunk": "@@ -452,9 +370,7 @@ impl PetApi for PetApiClient {\n         let content = resp.text()?;\n \n         if status.is_success() {\n-            let entity: Option<UploadFileSuccess> = serde_json::from_str(&content).ok();\n-            let result = ResponseContent { status, content, entity };\n-            Ok(result)\n+            serde_json::from_str(&content).map_err(Error::from)", "originalCommit": "fae63e35ed9b957414a0c2b94e23ab54533d41e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg3NjAzOA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r440876038", "bodyText": "Hi,\nI generated a slack client from official Github JSON with the same parameters as yours:\njava -jar ./modules/openapi-generator-cli/target/openapi-generator-cli.jar generate -g rust -i https://raw.githubusercontent.com/slackapi/slack-api-specs/master/web-api/slack_web_openapi_v2.json -o /tmp/slack --skip-validate-spec --remove-operation-id-prefix --library reqwest --additional-properties useSingleRequestParameter=true,supportAsync=true,supportMultipleReturns=true\n\nThe client compiles and works fine: can you provide some information to reproduce the problem?\nPS: in issue #6650, @HenningHolmDE tested the commit with and without the new param and didn't notice a problem.", "author": "bcourtine", "createdAt": "2020-06-16T14:02:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMzU1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg3ODcxOA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r440878718", "bodyText": "In the code serde_json::from_str(&content).map_err(Error::from) you quoted, Ok() is not missing, since this line produces the expected return type Result<Entity, Error>.\nThis line is equivalent to Ok(serde_json::from_str(&content)?)", "author": "bcourtine", "createdAt": "2020-06-16T14:06:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMzU1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg5NDY2NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r440894665", "bodyText": "supportMultipleReturns=false\n\nthis was the only thing that worked for me", "author": "seunlanlege", "createdAt": "2020-06-16T14:28:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMzU1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3NjIwMg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r440976202", "bodyText": "Do you have an example OAS to reproduce your problem?\nI have a compiling client (with Rust 1.44.0 and both values for supportMultipleReturns).", "author": "bcourtine", "createdAt": "2020-06-16T16:16:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMzU1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzNzg1NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r441537854", "bodyText": "@bcourtine I think @seunlanlege is using https://gist.githubusercontent.com/wing328/61225b4ad2d838447340a70494e09333/raw/b42fa7cf01df2a9269b910d19393a96081a246ff/slack_web_modified.json", "author": "wing328", "createdAt": "2020-06-17T13:19:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMzU1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU0NTUyMw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r441545523", "bodyText": "Hm, using that spec file also works for me (rust stable as well as nightly):\njava -jar ./modules/openapi-generator-cli/target/openapi-generator-cli.jar generate -g rust -i https://gist.githubusercontent.com/wing328/61225b4ad2d838447340a70494e09333/raw/b42fa7cf01df2a9269b910d19393a96081a246ff/slack_web_modified.json -o slack --skip-validate-spec --remove-operation-id-prefix --library reqwest --additional-properties useSingleRequestParameter=true,supportAsync=true,supportMultipleReturns=true\ncd slack\ncargo check\n> Finished dev [unoptimized + debuginfo] target(s) in 0.14s\n\nOr is the problem related to function instead of compilation?", "author": "HenningHolmDE", "createdAt": "2020-06-17T13:29:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMzU1NA=="}], "type": "inlineReview"}, {"oid": "74f033e3a850d2896198731ff86d8666f8dec455", "url": "https://github.com/OpenAPITools/openapi-generator/commit/74f033e3a850d2896198731ff86d8666f8dec455", "message": "Rename new param \"supportMultipleReturns\" into \"supportMultipleResponses\".", "committedDate": "2020-06-17T08:17:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NDI2MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r441664260", "bodyText": "in light of this, I don't think it's possible for serde_json::from_str() to fail because you've already covered serde_json::Value\nResponseContent should become:\nstruct ResponseContent {\n    entity: T,\n    status: StatusCode,\n}", "author": "seunlanlege", "createdAt": "2020-06-17T16:12:59Z", "path": "samples/client/petstore/rust/reqwest/fileResponseTest/src/apis/default_api.rs", "diffHunk": "@@ -73,9 +63,7 @@ impl DefaultApi for DefaultApiClient {\n         let content = resp.text()?;\n \n         if status.is_success() {\n-            let entity: Option<FileresponsetestSuccess> = serde_json::from_str(&content).ok();\n-            let result = ResponseContent { status, content, entity };\n-            Ok(result)\n+            serde_json::from_str(&content).map_err(Error::from)\n         } else {\n             let entity: Option<FileresponsetestError> = serde_json::from_str(&content).ok();", "originalCommit": "74f033e3a850d2896198731ff86d8666f8dec455", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY4NDk4Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r441684982", "bodyText": "As you pointed out, the call to serde_json::from_str() won't fail due to unexpected Types as we have covered serde_json::Value - but it might fail when content does not contain valid JSON.", "author": "HenningHolmDE", "createdAt": "2020-06-17T16:47:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NDI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMDM0Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r441730346", "bodyText": "hmm, then we should use the response.json() method.", "author": "seunlanlege", "createdAt": "2020-06-17T18:02:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NDI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczNDM4NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r441734384", "bodyText": "I'm afraid this will not help, as in case of invalid JSON reqwest::Response.json() will also fail:\n\npub async fn json<T: DeserializeOwned>(self) -> Result<T>\nTry to deserialize the response body as JSON.\n[...]\nErrors\nThis method fails whenever the response body is not in JSON format or it cannot be properly deserialized to target type T. For more details please see serde_json::from_reader.", "author": "HenningHolmDE", "createdAt": "2020-06-17T18:09:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NDI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0NDc1OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r441744758", "bodyText": "yes but then we already have an error for reqwest defined.\n#[derive(Debug)]\npub enum Error<T> {\n    Reqwest(reqwest::Error),\n    Serde(serde_json::Error),\n    Io(std::io::Error),\n    ResponseError(ResponseContent<T>),\n}\nso code becomes\nlet status = resp.status();\n\nif status.is_success() {\n    // would recommend using derive_more::From for the error type\n    Ok(response.json().await.map_err(Error::Reqwest)?)\n} else {\n        let entity: CloseError = response.json().await.map_err(Error::Reqwest)?;\n        let error = ResponseContent { status, entity };\n        Err(Error::ResponseError(error))\n}", "author": "seunlanlege", "createdAt": "2020-06-17T18:28:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NDI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2MzU2NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r441763565", "bodyText": "Good idea! That way we don't have to deal with serde_json::error::Error explicitily. As a downside, the raw content would no longer be available in the result. There was probably a reason for adding this in the first place, maybe @bcourtine can shed some light on this.\nAs for your remark on derive_more::From:\nimpl <T> From<reqwest::Error> for Error<T> is already present in api_mod.mustache. The map_err() should therefore not be necessary. Or do I overlook something here?", "author": "HenningHolmDE", "createdAt": "2020-06-17T18:55:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NDI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3MTM5Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r441771396", "bodyText": "As a downside, the raw content would no longer be available in the result.\n\nsince the response content is malformed JSON, the only thing useful to do with it is log to stdout/err or how would you try to handle it?", "author": "seunlanlege", "createdAt": "2020-06-17T19:05:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NDI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwMzgwOQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r441803809", "bodyText": "I meant in case of success: The current implementation always provides the raw content through ResponseContent.content (which requires using response.text() and serde_json::from_str()). Your suggestion would remove this. Sorry for the confusion!", "author": "HenningHolmDE", "createdAt": "2020-06-17T20:08:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NDI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxNjE2OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r441816168", "bodyText": "I meant in case of success\n\nhmm, I'm not sure how this happens because the specification defines the response content-type.\n\"produces\": [\n    \"application/json\"\n]\nand so if the success content isn't valid JSON shouldn't that be an error?", "author": "seunlanlege", "createdAt": "2020-06-17T20:33:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NDI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgzNDM2OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r441834369", "bodyText": "My remark about dropping the raw content wasn't related to error handling - sorry for being too vague here. I was referring to your suggestion of changing the return value from\nlet status = resp.status();\nlet content = resp.text().await?;\nif status.is_success() {\n    let entity: Option<UsersSetRegularSuccess> = serde_json::from_str(&content).ok();\n    let result = ResponseContent { status, content, entity };\n    Ok(result)\n} ...\nto this:\nlet status = resp.status();\nif status.is_success() {\n   Ok(resp.json().await?) // .map_err(Error::Reqwest) should not be necessary\n} ...\nWith this, status and content will no longer be provided to the API user in case of success. I do not know why this might be necessary or useful - however, it is provided by the current version of the code for some reason.", "author": "HenningHolmDE", "createdAt": "2020-06-17T21:06:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NDI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1MjMwMQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r441852301", "bodyText": "My remark about dropping the raw content wasn't related to error handling - sorry for being too vague here. I was referring to your suggestion of changing the return value from\nlet status = resp.status();\nlet content = resp.text().await?;\nif status.is_success() {\n    let entity: Option<UsersSetRegularSuccess> = serde_json::from_str(&content).ok();\n    let result = ResponseContent { status, content, entity };\n    Ok(result)\n} ...\nto this:\nlet status = resp.status();\nif status.is_success() {\n   Ok(resp.json().await?) // .map_err(Error::Reqwest) should not be necessary\n} ...\nWith this, status and content will no longer be provided to the API user in case of success. I do not know why this might be necessary or useful - however, it is provided by the current version of the code for some reason.\n\nThis pr removes use of ResponseContent in the success case, actually.\nWhat I'm advocating for is removing the content field in ResponseContent", "author": "seunlanlege", "createdAt": "2020-06-17T21:45:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NDI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEyMjc0NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r442122745", "bodyText": "This pr removes use of ResponseContent in the success case, actually.\n\nResponseContent is not dropped: it becomes optional. If you use supportMultipleResponses=true, you will still get a ResponseContent in success case.\nI totally dropped ResponseContent with supportMultipleResponses=false because the PR aimed at providing the simplest possible signature, like in 4.x.x version.\ncontent field exists mostly for error case: it allows to debug an error (malformed JSON which cannot be converted to entity). I let this field in success case to avoid multiplicating structs.\nFirst, I will simplify enum values dropping UnknowList (included in UnknownValue).\nFor the rest, I am a little lost in this debate\u2026 do you have a consensus on the best possible solution (for both supportMultipleResponses values)?", "author": "bcourtine", "createdAt": "2020-06-18T10:18:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NDI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE0NzY1MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r442147650", "bodyText": "hopefully, @bcourtine's comment clarifies things @HenningHolmDE\nto clarify further:\n\nWhat I'm advocating for is removing the content field in ResponseContent\n\nbecause:\n\nsince the response content is malformed JSON, the only thing useful to do with it is: log to stdout/err", "author": "seunlanlege", "createdAt": "2020-06-18T11:08:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NDI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE4MDI1Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r442180252", "bodyText": "since the response content is malformed JSON, the only thing useful to do with it is: log to stdout/err\n\nIt may or may not be malformed. We've seen issues in which a different type of object was returned (e.g. expecting array of Dog but get a single Dog, expecting a Cat but get a Dog due to invalid spec, expecting JSON but got XML as XML is the default when accept is not specified in the request header in that particular case) so my recommendation is still to include it in the Error response object to make developer's life easier in troubleshooting what's wrong.", "author": "wing328", "createdAt": "2020-06-18T12:14:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NDI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIwMjUyNg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r442202526", "bodyText": "I was under the impression that logging the reqwest Error had the response text, but after testing i just confirmed it doesn't so this is fine.\n\ninclude it in the Error response object to make developer's life easier in troubleshooting what's wrong.\n\nI think that's the last thing, we can finally get this merged? \ud83c\udf8a \ud83e\udd73", "author": "seunlanlege", "createdAt": "2020-06-18T12:52:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NDI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIzNDM5NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r442234394", "bodyText": "I think that's the last thing, we can finally get this merged? \ud83c\udf8a \ud83e\udd73\n\nNo objections from my side. \ud83d\udc4d", "author": "HenningHolmDE", "createdAt": "2020-06-18T13:41:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NDI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMTE0NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6673#discussion_r442311145", "bodyText": "\ud83d\udc4d \ud83d\udc4d \ud83d\udc4d", "author": "wing328", "createdAt": "2020-06-18T15:25:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NDI2MA=="}], "type": "inlineReview"}, {"oid": "67ef2ce2e4c37505e9283ff5e59c62648d9bb361", "url": "https://github.com/OpenAPITools/openapi-generator/commit/67ef2ce2e4c37505e9283ff5e59c62648d9bb361", "message": "Remove redundant `UnknownList` enum option.", "committedDate": "2020-06-18T11:35:51Z", "type": "commit"}, {"oid": "ae1a050273a156f017fe460d2a3133b3735cb9fb", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ae1a050273a156f017fe460d2a3133b3735cb9fb", "message": "update doc", "committedDate": "2020-06-19T06:01:21Z", "type": "commit"}]}