{"pr_number": 4864, "pr_title": "4420 failed job activation", "pr_createdAt": "2020-07-01T19:53:24Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4864", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3NTUwNw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4864#discussion_r448975507", "bodyText": "Some leftovers? \ud83d\ude05", "author": "saig0", "createdAt": "2020-07-02T12:47:49Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/job/JobBatchActivateProcessor.java", "diffHunk": "@@ -85,7 +90,9 @@ private void activateJobs(\n     final long jobBatchKey = keyGenerator.nextKey();\n \n     final AtomicInteger amount = new AtomicInteger(value.getMaxJobsToActivate());\n-    collectJobsToActivate(record, amount);\n+    collectJobsToActivate(record, amount, streamWriter);\n+\n+    if (value.getJobs().isEmpty() && value.isTruncated()) {}", "originalCommit": "c8f172db757c7b01054198ee9fd06b52d3977994", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4MDA0MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4864#discussion_r448980040", "bodyText": "I think it would be easier to follow the behavior if this block is outside of the method (like in line 95).", "author": "saig0", "createdAt": "2020-07-02T12:55:10Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/job/JobBatchActivateProcessor.java", "diffHunk": "@@ -144,6 +153,12 @@ private void collectJobsToActivate(\n             arrayValueJob.wrap(buffer);\n           } else {\n             value.setTruncated(true);\n+\n+            if (value.getJobs().isEmpty()) {\n+              raiseIncidentJobTooLargeForMessageSize(key, jobRecord, streamWriter);\n+              jobState.disable(key, jobRecord);\n+            }", "originalCommit": "c8f172db757c7b01054198ee9fd06b52d3977994", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5NTM4Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4864#discussion_r450095387", "bodyText": "I agree with you that it would be easier to follow. However, then I would not have access to the jobRecord.\nWould you rather leave it as it is, or refactor it for the collect method to return something that then can be analyzed?\nOr am I missing something?", "author": "pihme", "createdAt": "2020-07-06T09:23:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4MDA0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1NDIyOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4864#discussion_r450154228", "bodyText": "Good point. Then I don't have a suggestion.", "author": "saig0", "createdAt": "2020-07-06T11:20:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4MDA0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4OTIyOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4864#discussion_r448989228", "bodyText": "The job should not have an error message before. So, we can directly set the incident message.\nI think it could help the user if we provide more information about the message size and how to fix it. For example,\nThe job with key '123' can not be activated because it is larger than the configured message size (1,8MB). Try to reduce the size by limiting the fetched variables or modifying the variable values..", "author": "saig0", "createdAt": "2020-07-02T13:09:29Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/job/JobBatchActivateProcessor.java", "diffHunk": "@@ -221,4 +236,31 @@ private void rejectCommand(\n     streamWriter.appendRejection(record, rejectionType, rejectionReason);\n     responseWriter.writeRejectionOnCommand(record, rejectionType, rejectionReason);\n   }\n+\n+  private void raiseIncidentJobTooLargeForMessageSize(\n+      long jobKey, final JobRecord job, final TypedStreamWriter streamWriter) {\n+\n+    final DirectBuffer jobErrorMessage = job.getErrorMessageBuffer();\n+    DirectBuffer incidentErrorMessage =\n+        wrapString(\n+            String.format(\n+                \"The job with key '%s' is too large for the configured message size.\", jobKey));\n+    if (jobErrorMessage.capacity() > 0) {\n+      incidentErrorMessage = jobErrorMessage;\n+    }", "originalCommit": "c8f172db757c7b01054198ee9fd06b52d3977994", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4OTQ0Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4864#discussion_r448989443", "bodyText": "We need a new error type for this incident. The existing types don't fit.", "author": "saig0", "createdAt": "2020-07-02T13:09:47Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/job/JobBatchActivateProcessor.java", "diffHunk": "@@ -221,4 +236,31 @@ private void rejectCommand(\n     streamWriter.appendRejection(record, rejectionType, rejectionReason);\n     responseWriter.writeRejectionOnCommand(record, rejectionType, rejectionReason);\n   }\n+\n+  private void raiseIncidentJobTooLargeForMessageSize(\n+      long jobKey, final JobRecord job, final TypedStreamWriter streamWriter) {\n+\n+    final DirectBuffer jobErrorMessage = job.getErrorMessageBuffer();\n+    DirectBuffer incidentErrorMessage =\n+        wrapString(\n+            String.format(\n+                \"The job with key '%s' is too large for the configured message size.\", jobKey));\n+    if (jobErrorMessage.capacity() > 0) {\n+      incidentErrorMessage = jobErrorMessage;\n+    }\n+\n+    final IncidentRecord incidentEvent =\n+        new IncidentRecord()\n+            .setErrorType(ErrorType.CONDITION_ERROR.IO_MAPPING_ERROR)", "originalCommit": "c8f172db757c7b01054198ee9fd06b52d3977994", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1NjQ5Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4864#discussion_r449056497", "bodyText": "@saig0 Is this a problem with backwards compatibility? Or is it just important to add the new error code at the end?", "author": "pihme", "createdAt": "2020-07-02T14:47:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4OTQ0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM2ODQ3NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4864#discussion_r449368475", "bodyText": "Good point. We should add it at the end to avoid any problem on deserialization. In MessagePack, the enum is serialized as its ordinal.", "author": "saig0", "createdAt": "2020-07-03T04:23:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4OTQ0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwMzA3Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4864#discussion_r449003073", "bodyText": "Use a constant for this magic number 4 :)", "author": "saig0", "createdAt": "2020-07-02T13:30:47Z", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/incident/JobActivationIncidentTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor.workflow.incident;\n+\n+import static io.zeebe.protocol.record.Assertions.assertThat;\n+\n+import io.zeebe.engine.util.EngineRule;\n+import io.zeebe.model.bpmn.Bpmn;\n+import io.zeebe.model.bpmn.BpmnModelInstance;\n+import io.zeebe.protocol.record.intent.IncidentIntent;\n+import io.zeebe.protocol.record.value.ErrorType;\n+import io.zeebe.test.util.record.RecordingExporter;\n+import io.zeebe.test.util.record.RecordingExporterTestWatcher;\n+import java.util.Map;\n+import org.assertj.core.api.Assertions;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public final class JobActivationIncidentTest {\n+  @ClassRule public static final EngineRule ENGINE = EngineRule.singlePartition();\n+  private static final int MAX_MESSAGE_SIZE =\n+      1024 * 1024 * 4; // copy and paste from LogStreamBuilderImpl\n+  private static final String LARGE_TEXT = \"x\".repeat((int) (MAX_MESSAGE_SIZE / 4));", "originalCommit": "c8f172db757c7b01054198ee9fd06b52d3977994", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwNDUyMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4864#discussion_r449004523", "bodyText": "An alternative would be to limit the fetched variables (e.g. fetch 3 instead of 4 variables). Maybe, we can create another test case for this.", "author": "saig0", "createdAt": "2020-07-02T13:33:01Z", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/incident/JobActivationIncidentTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor.workflow.incident;\n+\n+import static io.zeebe.protocol.record.Assertions.assertThat;\n+\n+import io.zeebe.engine.util.EngineRule;\n+import io.zeebe.model.bpmn.Bpmn;\n+import io.zeebe.model.bpmn.BpmnModelInstance;\n+import io.zeebe.protocol.record.intent.IncidentIntent;\n+import io.zeebe.protocol.record.value.ErrorType;\n+import io.zeebe.test.util.record.RecordingExporter;\n+import io.zeebe.test.util.record.RecordingExporterTestWatcher;\n+import java.util.Map;\n+import org.assertj.core.api.Assertions;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public final class JobActivationIncidentTest {\n+  @ClassRule public static final EngineRule ENGINE = EngineRule.singlePartition();\n+  private static final int MAX_MESSAGE_SIZE =\n+      1024 * 1024 * 4; // copy and paste from LogStreamBuilderImpl\n+  private static final String LARGE_TEXT = \"x\".repeat((int) (MAX_MESSAGE_SIZE / 4));\n+  private static final String JOB_TYPE = \"test\";\n+  private static final BpmnModelInstance WORKFLOW =\n+      Bpmn.createExecutableProcess(\"process\")\n+          .startEvent()\n+          .serviceTask(\"task\", t -> t.zeebeJobType(JOB_TYPE))\n+          .endEvent()\n+          .done();\n+\n+  private static long workflowKey;\n+\n+  @Rule\n+  public RecordingExporterTestWatcher recordingExporterTestWatcher =\n+      new RecordingExporterTestWatcher();\n+\n+  @BeforeClass\n+  public static void init() {\n+    workflowKey =\n+        ENGINE\n+            .deployment()\n+            .withXmlResource(WORKFLOW)\n+            .deploy()\n+            .getValue()\n+            .getDeployedWorkflows()\n+            .get(0)\n+            .getWorkflowKey();\n+  }\n+\n+  @Test\n+  public void shouldRaiseIncidentWhenActivatingJobThatIsTooBigForMessageSize() {\n+    // given\n+    final var workflowInstanceKey = ENGINE.workflowInstance().ofBpmnProcessId(\"process\").create();\n+\n+    for (int i = 0; i < 4; i++) {\n+      ENGINE\n+          .variables()\n+          .ofScope(workflowInstanceKey)\n+          .withDocument(Map.of(String.valueOf(i), LARGE_TEXT))\n+          .update();\n+    }\n+\n+    // when\n+    final var activationResult =\n+        ENGINE.jobs().withMaxJobsToActivate(1).withType(JOB_TYPE).byWorker(\"dummy\").activate();\n+\n+    // then\n+    Assertions.assertThat(activationResult.getValue().getJobs()).isEmpty();\n+    Assertions.assertThat(activationResult.getValue().isTruncated()).isTrue();\n+\n+    final var incidentCommand =\n+        RecordingExporter.incidentRecords()\n+            .withIntent(IncidentIntent.CREATE)\n+            .withWorkflowInstanceKey(workflowInstanceKey)\n+            .getFirst();\n+\n+    assertThat(incidentCommand.getValue())\n+        .hasErrorType(ErrorType.IO_MAPPING_ERROR)\n+        .hasBpmnProcessId(\"process\")\n+        .hasWorkflowKey(workflowKey)\n+        .hasWorkflowInstanceKey(workflowInstanceKey)\n+        .hasElementId(\"task\");\n+  }\n+\n+  @Test\n+  public void shouldMakeJobActivatableAfterIncidentIsResolved() {\n+    // given\n+    final var workflowInstanceKey = ENGINE.workflowInstance().ofBpmnProcessId(\"process\").create();\n+\n+    for (int i = 0; i < 4; i++) {\n+      ENGINE\n+          .variables()\n+          .ofScope(workflowInstanceKey)\n+          .withDocument(Map.of(String.valueOf(i), LARGE_TEXT))\n+          .update();\n+    }\n+    ENGINE.jobs().withMaxJobsToActivate(1).withType(JOB_TYPE).byWorker(\"dummy\").activate();\n+\n+    // when\n+    final var incidentCommand =\n+        RecordingExporter.incidentRecords()\n+            .withIntent(IncidentIntent.CREATE)\n+            .withWorkflowInstanceKey(workflowInstanceKey)\n+            .getFirst();\n+\n+    ENGINE\n+        .variables()\n+        .ofScope(workflowInstanceKey)\n+        .withDocument(\n+            Map.of(\"0\", \"lorem ipsum\", \"1\", \"lorem ipsum\", \"2\", \"lorem ipsum\", \"3\", \"lorem ipsum\"))\n+        .update();", "originalCommit": "c8f172db757c7b01054198ee9fd06b52d3977994", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwNjYzNQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4864#discussion_r449006635", "bodyText": "Wow. That is a long method name \ud83d\ude02\nCan we shrink it a bit?", "author": "saig0", "createdAt": "2020-07-02T13:36:18Z", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/network/SmallMessageSizeTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.it.network;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.zeebe.broker.it.util.BrokerClassRuleHelper;\n+import io.zeebe.broker.it.util.GrpcClientRule;\n+import io.zeebe.broker.test.EmbeddedBrokerRule;\n+import io.zeebe.model.bpmn.Bpmn;\n+import io.zeebe.model.bpmn.BpmnModelInstance;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.springframework.util.unit.DataSize;\n+\n+public class SmallMessageSizeTest {\n+  private static final ObjectMapper MAPPER = new ObjectMapper();\n+  private static final DataSize MAX_MESSAGE_SIZE = DataSize.ofKilobytes(4);\n+  private static final String LARGE_TEXT = \"x\".repeat((int) (MAX_MESSAGE_SIZE.toBytes() / 4));\n+\n+  private static final EmbeddedBrokerRule BROKER_RULE =\n+      new EmbeddedBrokerRule(b -> b.getNetwork().setMaxMessageSize(MAX_MESSAGE_SIZE));\n+  private static final GrpcClientRule CLIENT_RULE = new GrpcClientRule(BROKER_RULE);\n+\n+  @ClassRule\n+  public static RuleChain ruleChain = RuleChain.outerRule(BROKER_RULE).around(CLIENT_RULE);\n+\n+  @Rule public final BrokerClassRuleHelper helper = new BrokerClassRuleHelper();\n+\n+  private String jobType;\n+\n+  private static BpmnModelInstance workflow(final String jobType) {\n+    return Bpmn.createExecutableProcess(\"process\")\n+        .startEvent()\n+        .serviceTask(\"task\", t -> t.zeebeJobType(jobType))\n+        .endEvent()\n+        .done();\n+  }\n+\n+  @Before\n+  public void init() {\n+    jobType = helper.getJobType();\n+  }\n+\n+  @Test\n+  public void\n+      shouldIgnoreJobsThatAreTooLargeToFitIntoAMessageAndProceedWithJobsThatAreBehindInQueue() {", "originalCommit": "c8f172db757c7b01054198ee9fd06b52d3977994", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwODI4MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4864#discussion_r449008281", "bodyText": "The object mapper is not used in the test.", "author": "saig0", "createdAt": "2020-07-02T13:38:45Z", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/network/SmallMessageSizeTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.it.network;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.zeebe.broker.it.util.BrokerClassRuleHelper;\n+import io.zeebe.broker.it.util.GrpcClientRule;\n+import io.zeebe.broker.test.EmbeddedBrokerRule;\n+import io.zeebe.model.bpmn.Bpmn;\n+import io.zeebe.model.bpmn.BpmnModelInstance;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.springframework.util.unit.DataSize;\n+\n+public class SmallMessageSizeTest {\n+  private static final ObjectMapper MAPPER = new ObjectMapper();", "originalCommit": "c8f172db757c7b01054198ee9fd06b52d3977994", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwODcxMg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4864#discussion_r449008712", "bodyText": "Use a constant for the magic number 4.", "author": "saig0", "createdAt": "2020-07-02T13:39:24Z", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/network/SmallMessageSizeTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.it.network;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.zeebe.broker.it.util.BrokerClassRuleHelper;\n+import io.zeebe.broker.it.util.GrpcClientRule;\n+import io.zeebe.broker.test.EmbeddedBrokerRule;\n+import io.zeebe.model.bpmn.Bpmn;\n+import io.zeebe.model.bpmn.BpmnModelInstance;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.springframework.util.unit.DataSize;\n+\n+public class SmallMessageSizeTest {\n+  private static final ObjectMapper MAPPER = new ObjectMapper();\n+  private static final DataSize MAX_MESSAGE_SIZE = DataSize.ofKilobytes(4);\n+  private static final String LARGE_TEXT = \"x\".repeat((int) (MAX_MESSAGE_SIZE.toBytes() / 4));", "originalCommit": "c8f172db757c7b01054198ee9fd06b52d3977994", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwOTMzMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4864#discussion_r449009330", "bodyText": "We don't need a dynamic job type. We have only one test case.", "author": "saig0", "createdAt": "2020-07-02T13:40:19Z", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/network/SmallMessageSizeTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.it.network;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.zeebe.broker.it.util.BrokerClassRuleHelper;\n+import io.zeebe.broker.it.util.GrpcClientRule;\n+import io.zeebe.broker.test.EmbeddedBrokerRule;\n+import io.zeebe.model.bpmn.Bpmn;\n+import io.zeebe.model.bpmn.BpmnModelInstance;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.springframework.util.unit.DataSize;\n+\n+public class SmallMessageSizeTest {\n+  private static final ObjectMapper MAPPER = new ObjectMapper();\n+  private static final DataSize MAX_MESSAGE_SIZE = DataSize.ofKilobytes(4);\n+  private static final String LARGE_TEXT = \"x\".repeat((int) (MAX_MESSAGE_SIZE.toBytes() / 4));\n+\n+  private static final EmbeddedBrokerRule BROKER_RULE =\n+      new EmbeddedBrokerRule(b -> b.getNetwork().setMaxMessageSize(MAX_MESSAGE_SIZE));\n+  private static final GrpcClientRule CLIENT_RULE = new GrpcClientRule(BROKER_RULE);\n+\n+  @ClassRule\n+  public static RuleChain ruleChain = RuleChain.outerRule(BROKER_RULE).around(CLIENT_RULE);\n+\n+  @Rule public final BrokerClassRuleHelper helper = new BrokerClassRuleHelper();\n+\n+  private String jobType;\n+\n+  private static BpmnModelInstance workflow(final String jobType) {\n+    return Bpmn.createExecutableProcess(\"process\")\n+        .startEvent()\n+        .serviceTask(\"task\", t -> t.zeebeJobType(jobType))\n+        .endEvent()\n+        .done();\n+  }\n+\n+  @Before\n+  public void init() {\n+    jobType = helper.getJobType();", "originalCommit": "c8f172db757c7b01054198ee9fd06b52d3977994", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxODQ3MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4864#discussion_r451318471", "bodyText": "I'm not sure about the PAYLOAD in the name. What do you think about MESSAGE_SIZE_EXCEEDED instead?\nAfter the PR is merged, we should inform Operate about the new error type.", "author": "saig0", "createdAt": "2020-07-08T06:46:50Z", "path": "protocol/src/main/java/io/zeebe/protocol/record/value/ErrorType.java", "diffHunk": "@@ -29,4 +29,6 @@\n   CALLED_ELEMENT_ERROR,\n \n   UNHANDLED_ERROR_EVENT,\n+\n+  PAYLOAD_EXCEEDS_MESSAGE_SIZE,", "originalCommit": "b5cbb237ad2845373f85bb39135371f25e214547", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM2NjkxMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4864#discussion_r451366913", "bodyText": "I don't like to introduce a new testing framework only for this one case. I would prefer to migrate to JUnit 5 instead and use a more plain test style before.", "author": "saig0", "createdAt": "2020-07-08T08:19:28Z", "path": "util/pom.xml", "diffHunk": "@@ -96,6 +96,11 @@\n       <artifactId>assertj-core</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>pl.pragmatists</groupId>\n+      <artifactId>JUnitParams</artifactId>\n+      <scope>test</scope>\n+    </dependency>", "originalCommit": "b5cbb237ad2845373f85bb39135371f25e214547", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM3MDcyMQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4864#discussion_r451370721", "bodyText": "The message is very precise but also a bit long. Maybe, we can remove some parts that are not so interesting for the user/operator.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"The job with key '%s' can not be activated because it plus additional activation-related data together is larger than the configured message size (%s). \"\n          \n          \n            \n                                + \"Try to reduce the size by reducing the number of fetched variables or modifying the variable values.\",\n          \n          \n            \n                            \"The job with key '%s' can not be activated because it is larger than the configured message size (%s). \"\n          \n          \n            \n                                + \"Try to reduce the size by reducing the number of fetched variables or modifying the variable values.\",", "author": "saig0", "createdAt": "2020-07-08T08:25:42Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/job/JobBatchActivateProcessor.java", "diffHunk": "@@ -240,19 +241,19 @@ private void rejectCommand(\n   private void raiseIncidentJobTooLargeForMessageSize(\n       long jobKey, final JobRecord job, final TypedStreamWriter streamWriter) {\n \n-    final DirectBuffer jobErrorMessage = job.getErrorMessageBuffer();\n-    DirectBuffer incidentErrorMessage =\n+    final String messageSize = ByteValue.prettyPrint(maxRecordLength);\n+\n+    final DirectBuffer incidentMessage =\n         wrapString(\n             String.format(\n-                \"The job with key '%s' is too large for the configured message size.\", jobKey));\n-    if (jobErrorMessage.capacity() > 0) {\n-      incidentErrorMessage = jobErrorMessage;\n-    }\n+                \"The job with key '%s' can not be activated because it plus additional activation-related data together is larger than the configured message size (%s). \"\n+                    + \"Try to reduce the size by reducing the number of fetched variables or modifying the variable values.\",", "originalCommit": "b5cbb237ad2845373f85bb39135371f25e214547", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bf224fdbb3c06c123d67cb010baa7881c5d90e79", "url": "https://github.com/camunda-cloud/zeebe/commit/bf224fdbb3c06c123d67cb010baa7881c5d90e79", "message": "fix(broker): fix endless loop in job activation", "committedDate": "2020-07-09T11:26:31Z", "type": "commit"}, {"oid": "bf224fdbb3c06c123d67cb010baa7881c5d90e79", "url": "https://github.com/camunda-cloud/zeebe/commit/bf224fdbb3c06c123d67cb010baa7881c5d90e79", "message": "fix(broker): fix endless loop in job activation", "committedDate": "2020-07-09T11:26:31Z", "type": "forcePushed"}]}