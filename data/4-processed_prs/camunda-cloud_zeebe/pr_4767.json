{"pr_number": 4767, "pr_title": "chore(engine): migrate event sub-process processor", "pr_createdAt": "2020-06-18T13:41:21Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4767", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg3OTg5Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4767#discussion_r442879897", "bodyText": "can this still be null?", "author": "korthout", "createdAt": "2020-06-19T14:41:17Z", "path": "engine/src/main/java/io/zeebe/engine/nwe/container/SubProcessProcessor.java", "diffHunk": "@@ -57,13 +57,27 @@ public void onActivating(\n   public void onActivated(\n       final ExecutableFlowElementContainer element, final BpmnElementContext context) {\n \n-    final var noneStartEvent = element.getNoneStartEvent();\n-    if (noneStartEvent == null) {\n-      throw new BpmnProcessingException(\n-          context, \"Expected to activate the none start event of the sub-process but not found.\");\n-    }\n+    if (element.hasNoneStartEvent()) {\n+      // embedded sub-process is activated\n+      final var noneStartEvent = element.getNoneStartEvent();\n+      if (noneStartEvent == null) {", "originalCommit": "29c6d4c876d6351475d07996b0e6717d2f75c822", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxOTE3NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4767#discussion_r443319174", "bodyText": "It should not. I can remove the null checks.", "author": "saig0", "createdAt": "2020-06-22T05:07:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg3OTg5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg4MjUxNQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4767#discussion_r442882515", "bodyText": "I like this change \ud83d\udc4d", "author": "korthout", "createdAt": "2020-06-19T14:46:15Z", "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnStateTransitionBehavior.java", "diffHunk": "@@ -206,6 +208,8 @@ public void terminateChildInstances(final BpmnElementContext context) {\n       }\n       stateBehavior.updateElementInstance(elementInstance);\n     }\n+\n+    return activeChildInstances == 0;", "originalCommit": "29c6d4c876d6351475d07996b0e6717d2f75c822", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg4MzE0NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4767#discussion_r442883144", "bodyText": "The lambda above is very large, can we find a way to make this a little cleaner? Perhaps extract the body of the lambda to a private method or so?", "author": "korthout", "createdAt": "2020-06-19T14:47:24Z", "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnEventSubscriptionBehavior.java", "diffHunk": "@@ -380,6 +381,56 @@ public void unsubscribeFromEvents(final BpmnElementContext context) {\n         context.getElementInstanceKey(), context.toStepContext());\n   }\n \n+  public void triggerEventSubProcess(\n+      final ExecutableStartEvent startEvent, final BpmnElementContext context) {\n+\n+    if (stateBehavior.getFlowScopeInstance(context).getInterruptingEventKey() > 0) {\n+      // the flow scope is already interrupted - discard this event\n+      return;\n+    }\n+\n+    final var flowScopeContext = stateBehavior.getFlowScopeContext(context);\n+\n+    triggerEvent(\n+        flowScopeContext,\n+        eventTrigger -> {\n+          final var eventSubProcessElementId = startEvent.getEventSubProcess();\n+          final var record =\n+              getEventRecord(context.getRecordValue(), eventTrigger, BpmnElementType.SUB_PROCESS)\n+                  .setElementId(eventSubProcessElementId);\n+\n+          final long eventElementInstanceKey = keyGenerator.nextKey();\n+          if (startEvent.interrupting()) {\n+\n+            unsubscribeFromEvents(flowScopeContext);\n+\n+            final var noActiveChildInstances =\n+                stateTransitionBehavior.terminateChildInstances(flowScopeContext);\n+            if (noActiveChildInstances) {\n+              // activate interrupting event sub-process\n+              publishActivatingEvent(context, eventElementInstanceKey, record);\n+\n+            } else {\n+              // wait until child instances are terminated\n+              deferActivatingEvent(flowScopeContext, eventElementInstanceKey, record);\n+            }\n+\n+            stateBehavior.updateFlowScopeInstance(\n+                context,\n+                flowScopeInstance -> {\n+                  flowScopeInstance.spawnToken();\n+                  flowScopeInstance.setInterruptingEventKey(eventElementInstanceKey);\n+                });\n+\n+          } else {\n+            // activate non-interrupting event sub-process\n+            publishActivatingEvent(context, eventElementInstanceKey, record);\n+          }\n+\n+          return eventElementInstanceKey;\n+        });", "originalCommit": "29c6d4c876d6351475d07996b0e6717d2f75c822", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7a5560879901d0a0073166ccf9e99375a61c6486", "url": "https://github.com/camunda-cloud/zeebe/commit/7a5560879901d0a0073166ccf9e99375a61c6486", "message": "chore(engine): migrate event sub-process processor\n\n* trigger an event sub-process using the event subscription behavior\n* remove unused code", "committedDate": "2020-06-22T12:12:56Z", "type": "commit"}, {"oid": "7a5560879901d0a0073166ccf9e99375a61c6486", "url": "https://github.com/camunda-cloud/zeebe/commit/7a5560879901d0a0073166ccf9e99375a61c6486", "message": "chore(engine): migrate event sub-process processor\n\n* trigger an event sub-process using the event subscription behavior\n* remove unused code", "committedDate": "2020-06-22T12:12:56Z", "type": "forcePushed"}]}