{"pr_number": 4551, "pr_title": "chore(exporters/elasticsearch-exporter): remove high level rest client", "pr_createdAt": "2020-05-18T16:19:05Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4551", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI0MTIwMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4551#discussion_r427241200", "bodyText": "This new line seems scary. It's likely not platform independent. Why do we need to add the record on a new line behind the serialised command? Perhaps we can find a way to do without it, otherwise I would suggest System.lineSeparator(). See: https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#lineSeparator--", "author": "korthout", "createdAt": "2020-05-19T11:51:26Z", "path": "exporters/elasticsearch-exporter/src/main/java/io/zeebe/exporter/ElasticsearchClient.java", "diffHunk": "@@ -103,51 +102,54 @@ private void checkVariableRecordValue(final Record<VariableRecordValue> record)\n     }\n   }\n \n-  public void bulk(final IndexRequest indexRequest) {\n-    bulkRequest.add(indexRequest);\n+  public void bulk(final Map<String, Object> command, final Record<?> record) {\n+    final String serializedCommand;\n+\n+    try {\n+      serializedCommand = MAPPER.writeValueAsString(command);\n+    } catch (final IOException e) {\n+      throw new ElasticsearchExporterException(\n+          \"Failed to serialize bulk request command to JSON\", e);\n+    }\n+\n+    bulkRequest.add(serializedCommand + \"\\n\" + record.toJson());", "originalCommit": "f3a0ea52e5f00e85bd245ee850a3ba6bda5102ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5MTM3OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4551#discussion_r427291379", "bodyText": "The \\n is lifted from the Elasticsearch documentation, where they specifically mention this uses ndjson (http://ndjson.org/), which uses \\n as line separator. Now ndjson also supports \\r\\n so we could use both, but in this case we're not really dealing with a platform but a spec, not sure if there's any advantage here. From their docs:\n\nNOTE: The final line of data must end with a newline character \\n. Each newline character may be preceded by a carriage return \\r. When sending requests to this endpoint the Content-Type header should be set to application/x-ndjson.\n\nSo seems I forgot the set the content type properly, will adjust. It was working as Elastic only prints a warning if you use JSON content type \ud83d\ude05", "author": "npepinpe", "createdAt": "2020-05-19T13:14:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI0MTIwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3MjA2MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4551#discussion_r427372061", "bodyText": "Interesting. So, yeah if that's the spec, we should just comply.", "author": "korthout", "createdAt": "2020-05-19T14:59:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI0MTIwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI1MDE4NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4551#discussion_r427250185", "bodyText": "Similar issue concerning platform independent newlines", "author": "korthout", "createdAt": "2020-05-19T12:07:40Z", "path": "exporters/elasticsearch-exporter/src/main/java/io/zeebe/exporter/ElasticsearchClient.java", "diffHunk": "@@ -103,51 +102,54 @@ private void checkVariableRecordValue(final Record<VariableRecordValue> record)\n     }\n   }\n \n-  public void bulk(final IndexRequest indexRequest) {\n-    bulkRequest.add(indexRequest);\n+  public void bulk(final Map<String, Object> command, final Record<?> record) {\n+    final String serializedCommand;\n+\n+    try {\n+      serializedCommand = MAPPER.writeValueAsString(command);\n+    } catch (final IOException e) {\n+      throw new ElasticsearchExporterException(\n+          \"Failed to serialize bulk request command to JSON\", e);\n+    }\n+\n+    bulkRequest.add(serializedCommand + \"\\n\" + record.toJson());\n   }\n \n   /** @return true if all bulk records where flushed successfully */\n   public boolean flush() {\n     boolean success = true;\n-    final int bulkSize = bulkRequest.numberOfActions();\n+    final int bulkSize = bulkRequest.size();\n     if (bulkSize > 0) {\n       try {\n         metrics.recordBulkSize(bulkSize);\n-        final BulkResponse responses = exportBulk();\n-        success = checkBulkResponses(responses);\n+        success = exportBulk();\n       } catch (final IOException e) {\n         throw new ElasticsearchExporterException(\"Failed to flush bulk\", e);\n       }\n \n       if (success) {\n         // all records where flushed, create new bulk request, otherwise retry next time\n-        bulkRequest = new BulkRequest();\n+        bulkRequest = new ArrayList<>();\n       }\n     }\n \n     return success;\n   }\n \n-  private BulkResponse exportBulk() throws IOException {\n+  private boolean exportBulk() throws IOException {\n     try (final Histogram.Timer timer = metrics.measureFlushDuration()) {\n-      return client.bulk(bulkRequest, RequestOptions.DEFAULT);\n-    }\n-  }\n+      final var request = new Request(\"POST\", \"/_bulk\");\n+      request.setJsonEntity(String.join(\"\\n\", bulkRequest) + \"\\n\");", "originalCommit": "f3a0ea52e5f00e85bd245ee850a3ba6bda5102ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI1MzEyNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4551#discussion_r427253124", "bodyText": "Perhaps it cannot occur here, but on line 110 you catch the potentially thrown IOException. It feels like the same thing might happen here.", "author": "korthout", "createdAt": "2020-05-19T12:12:50Z", "path": "exporters/elasticsearch-exporter/src/main/java/io/zeebe/exporter/ElasticsearchClient.java", "diffHunk": "@@ -179,37 +181,42 @@ public boolean putIndexTemplate(\n     template.put(\"index_patterns\", Collections.singletonList(templateName + INDEX_DELIMITER + \"*\"));\n \n     // update alias in template in case it was changed in configuration\n-    template.put(\"aliases\", Collections.singletonMap(aliasName, Collections.EMPTY_MAP));\n-\n-    final PutIndexTemplateRequest request =\n-        new PutIndexTemplateRequest(templateName).source(template);\n+    template.put(\"aliases\", Collections.singletonMap(aliasName, Collections.emptyMap()));\n \n-    return putIndexTemplate(request);\n+    return putIndexTemplate(templateName, template);\n   }\n \n   /** @return true if request was acknowledged */\n-  private boolean putIndexTemplate(final PutIndexTemplateRequest putIndexTemplateRequest) {\n+  private boolean putIndexTemplate(final String templateName, final Object body) {\n     try {\n-      return client\n-          .indices()\n-          .putTemplate(putIndexTemplateRequest, RequestOptions.DEFAULT)\n-          .isAcknowledged();\n+      final var request = new Request(\"PUT\", \"/_template/\" + templateName);\n+      request.addParameter(\"include_type_name\", \"true\");\n+      request.setJsonEntity(MAPPER.writeValueAsString(body));", "originalCommit": "f3a0ea52e5f00e85bd245ee850a3ba6bda5102ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI1NDY0MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4551#discussion_r427254640", "bodyText": "Oh wait, I'm mistaken, the catch for this exception occurs already on line 205. Nevermind", "author": "korthout", "createdAt": "2020-05-19T12:15:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI1MzEyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI1NDk5Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4551#discussion_r427254997", "bodyText": "I'm wondering whether this should be warn log or an ElasticsearchExporterException.", "author": "korthout", "createdAt": "2020-05-19T12:16:05Z", "path": "exporters/elasticsearch-exporter/src/main/java/io/zeebe/exporter/ElasticsearchClient.java", "diffHunk": "@@ -179,37 +181,42 @@ public boolean putIndexTemplate(\n     template.put(\"index_patterns\", Collections.singletonList(templateName + INDEX_DELIMITER + \"*\"));\n \n     // update alias in template in case it was changed in configuration\n-    template.put(\"aliases\", Collections.singletonMap(aliasName, Collections.EMPTY_MAP));\n-\n-    final PutIndexTemplateRequest request =\n-        new PutIndexTemplateRequest(templateName).source(template);\n+    template.put(\"aliases\", Collections.singletonMap(aliasName, Collections.emptyMap()));\n \n-    return putIndexTemplate(request);\n+    return putIndexTemplate(templateName, template);\n   }\n \n   /** @return true if request was acknowledged */\n-  private boolean putIndexTemplate(final PutIndexTemplateRequest putIndexTemplateRequest) {\n+  private boolean putIndexTemplate(final String templateName, final Object body) {\n     try {\n-      return client\n-          .indices()\n-          .putTemplate(putIndexTemplateRequest, RequestOptions.DEFAULT)\n-          .isAcknowledged();\n+      final var request = new Request(\"PUT\", \"/_template/\" + templateName);\n+      request.addParameter(\"include_type_name\", \"true\");\n+      request.setJsonEntity(MAPPER.writeValueAsString(body));\n+\n+      final var response = client.performRequest(request);\n+      final var statusLine = response.getStatusLine();\n+      final var status = statusLine.getStatusCode();\n+      if (status >= 400) {\n+        log.warn(\"Failed to put index template {}\", statusLine.getReasonPhrase());", "originalCommit": "f3a0ea52e5f00e85bd245ee850a3ba6bda5102ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5MjA0NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4551#discussion_r427292044", "bodyText": "Hm, you're probably right; I hate throwing exceptions, but we should be consistent here until we actually use either everywhere ;)", "author": "npepinpe", "createdAt": "2020-05-19T13:15:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI1NDk5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM2Nzg3NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4551#discussion_r427367875", "bodyText": "Well, there might be a good reason to just log here, although this feels like an error state. I have not thought it through. We should consider our options here before choosing consistency. When does this occur and what happens to the system when we throw an exception here. What was the original behaviour?", "author": "korthout", "createdAt": "2020-05-19T14:54:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI1NDk5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4NDk2OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4551#discussion_r427384968", "bodyText": "That's very good point - after a bit of digging, I realize I missed it originally as well. The response from the server contains a member, acknowledged, which is expected to be returned here. I also verified HTTP errors (e.g. 4xx and 5xx) actually cause an IOException to be thrown when performing the request, so there isn't anything to check at all. Good catch \ud83d\udcaa", "author": "npepinpe", "createdAt": "2020-05-19T15:16:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI1NDk5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4NjEyMg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4551#discussion_r427386122", "bodyText": "Nice, great work! Thanks for diving into this.", "author": "korthout", "createdAt": "2020-05-19T15:18:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI1NDk5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3MTE0MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4551#discussion_r427271140", "bodyText": "Even though this is just a test class, we should set a good example and use password.toCharArray() here instead of password (as a String), to set a good example of how to deal with passwords in Java code. The array should also be cleared from memory after using.", "author": "korthout", "createdAt": "2020-05-19T12:42:58Z", "path": "exporters/elasticsearch-exporter/src/test/java/io/zeebe/exporter/util/ElasticsearchContainer.java", "diffHunk": "@@ -152,27 +148,22 @@ protected void configure() {\n   }\n \n   private void setupUser() {\n-    final User user = new User(username, Collections.singleton(\"zeebe-exporter\"));\n+    final var request = new Request(\"POST\", \"/_xpack/security/user/\" + username);\n+    final var body = Map.of(\"roles\", Collections.singleton(\"zeebe-exporter\"), \"password\", password);", "originalCommit": "f3a0ea52e5f00e85bd245ee850a3ba6bda5102ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5NDI2Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/4551#discussion_r427294266", "bodyText": "The Elasticsearch API expects a string there, and if I use toCharArray, wouldn't the JSON mapper serialize it as an actual array? Plus, password is a field, so it's already in memory for the duration of the test. I understand your point however, so if toCharArray works fine then that's good enough for me. I can try it out.", "author": "npepinpe", "createdAt": "2020-05-19T13:18:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3MTE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM2OTc5NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4551#discussion_r427369794", "bodyText": "Yeah, I'm curious whether it works. If not, I think it's totally fine to just use a String here.", "author": "korthout", "createdAt": "2020-05-19T14:56:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3MTE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3NDc4NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4551#discussion_r427374785", "bodyText": "It does work ;)", "author": "npepinpe", "createdAt": "2020-05-19T15:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3MTE0MA=="}], "type": "inlineReview"}, {"oid": "6740ce3e01a3cfafbf581018a7ee051723318345", "url": "https://github.com/camunda-cloud/zeebe/commit/6740ce3e01a3cfafbf581018a7ee051723318345", "message": "chore(exporters/elasticsearch-exporter): remove high level rest client\n\n- replaces the high level rest client by the low level rest client\n- removes several elastic search dependencies", "committedDate": "2020-05-19T15:19:24Z", "type": "commit"}, {"oid": "6740ce3e01a3cfafbf581018a7ee051723318345", "url": "https://github.com/camunda-cloud/zeebe/commit/6740ce3e01a3cfafbf581018a7ee051723318345", "message": "chore(exporters/elasticsearch-exporter): remove high level rest client\n\n- replaces the high level rest client by the low level rest client\n- removes several elastic search dependencies", "committedDate": "2020-05-19T15:19:24Z", "type": "forcePushed"}]}