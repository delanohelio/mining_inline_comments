{"pr_number": 5651, "pr_title": "feat(gateway): Add a health info in the gateway's API.", "pr_createdAt": "2020-10-21T09:36:27Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/5651", "timeline": [{"oid": "54c6cf6b3a13527ddcdd6e9afcd8d9657626787d", "url": "https://github.com/camunda-cloud/zeebe/commit/54c6cf6b3a13527ddcdd6e9afcd8d9657626787d", "message": "feat(gateway): Add a health info in the gateway's API.", "committedDate": "2020-10-23T12:51:48Z", "type": "forcePushed"}, {"oid": "5ceb7ec3a9e82a448bfd8690c20e5f3cb677ea0d", "url": "https://github.com/camunda-cloud/zeebe/commit/5ceb7ec3a9e82a448bfd8690c20e5f3cb677ea0d", "message": "chore(gateway): add gateway tests\n\nI've add some test to verify a partition health changing with a gateway's API.", "committedDate": "2020-11-05T15:18:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5NTU1NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518195555", "bodyText": "I think this test is not necessary. You've changed a property of the topology and then again get the same object and alter it again. Just once is fine. Or am I missing something?", "author": "korthout", "createdAt": "2020-11-05T16:41:59Z", "path": "gateway/src/test/java/io/zeebe/gateway/api/topology/TopologyTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.api.topology;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.gateway.api.util.GatewayTest;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterStateImpl;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.BrokerInfo;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.Partition.PartitionBrokerHealth;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyRequest;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyResponse;\n+import org.junit.Test;\n+\n+public class TopologyTest extends GatewayTest {\n+\n+  @Test\n+  public void shouldResponseWithInitialUnhealthyPartitions() {\n+    // when\n+    final TopologyResponse topologyResponse = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    assertThat(topologyResponse.getBrokersList())\n+        .isNotEmpty()\n+        .allSatisfy(\n+            brokerInfo ->\n+                assertThat(brokerInfo.getPartitionsList())\n+                    .isNotEmpty()\n+                    .allSatisfy(\n+                        partitionPerBroker ->\n+                            assertThat(partitionPerBroker.getHealth())\n+                                .isEqualTo(PartitionBrokerHealth.UNHEALTHY)));\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealthHealthy() {\n+    // given\n+    final BrokerClusterStateImpl topology =\n+        (BrokerClusterStateImpl) brokerClient.getTopologyManager().getTopology();\n+    topology.setPartitionHealthy(0, 1);\n+\n+    // when\n+    final TopologyResponse topologyResponse = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    final PartitionBrokerHealth health =\n+        topologyResponse.getBrokers(0).getPartitions(0).getHealth();\n+    assertThat(health).isEqualTo(PartitionBrokerHealth.HEALTHY);\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealthUnhealthy() {", "originalCommit": "5ceb7ec3a9e82a448bfd8690c20e5f3cb677ea0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUzNjI5Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518536296", "bodyText": "There I'm thinking to test simultaneously changing the health of two partitions. All can work fine if the broker changes the health of one partition but not for many :) I'm don't sure that this needs to be tested but anyway, what do you think? :)", "author": "aivinog1", "createdAt": "2020-11-06T05:48:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5NTU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYxMjQ5Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518612496", "bodyText": "That makes sense, but you can do that in one go. No need for the additional setup. (I understand marking 1 partition first as healthy may matter for your implementation, but that should not be part of the test IMO)", "author": "korthout", "createdAt": "2020-11-06T09:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5NTU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYxNzI4NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518617285", "bodyText": "Also make sure to change the name of the test method accordingly. Something like: shouldUpdateMultiplePartitionHealths", "author": "korthout", "createdAt": "2020-11-06T09:13:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5NTU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc3ODI0NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518778245", "bodyText": "Done :)", "author": "aivinog1", "createdAt": "2020-11-06T14:15:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5NTU1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5NTkyNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518195926", "bodyText": "Please add an additional test case where you explicitly make this value unhealthy. Or change both in the same case and change the test case name to something like shouldRespondWithUpdatedPartitionHealth", "author": "korthout", "createdAt": "2020-11-05T16:42:30Z", "path": "gateway/src/test/java/io/zeebe/gateway/api/topology/TopologyTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.api.topology;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.gateway.api.util.GatewayTest;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterStateImpl;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.BrokerInfo;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.Partition.PartitionBrokerHealth;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyRequest;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyResponse;\n+import org.junit.Test;\n+\n+public class TopologyTest extends GatewayTest {\n+\n+  @Test\n+  public void shouldResponseWithInitialUnhealthyPartitions() {\n+    // when\n+    final TopologyResponse topologyResponse = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    assertThat(topologyResponse.getBrokersList())\n+        .isNotEmpty()\n+        .allSatisfy(\n+            brokerInfo ->\n+                assertThat(brokerInfo.getPartitionsList())\n+                    .isNotEmpty()\n+                    .allSatisfy(\n+                        partitionPerBroker ->\n+                            assertThat(partitionPerBroker.getHealth())\n+                                .isEqualTo(PartitionBrokerHealth.UNHEALTHY)));\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealthHealthy() {\n+    // given\n+    final BrokerClusterStateImpl topology =\n+        (BrokerClusterStateImpl) brokerClient.getTopologyManager().getTopology();\n+    topology.setPartitionHealthy(0, 1);", "originalCommit": "5ceb7ec3a9e82a448bfd8690c20e5f3cb677ea0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUzOTM3NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518539375", "bodyText": "Done", "author": "aivinog1", "createdAt": "2020-11-06T05:59:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5NTkyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5NjM1OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518196359", "bodyText": "nitpick: I suggest you change the name of the variable to response (its clear where it comes from) and change the type definition to var because it can easily be inferred.", "author": "korthout", "createdAt": "2020-11-05T16:43:07Z", "path": "gateway/src/test/java/io/zeebe/gateway/api/topology/TopologyTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.api.topology;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.gateway.api.util.GatewayTest;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterStateImpl;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.BrokerInfo;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.Partition.PartitionBrokerHealth;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyRequest;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyResponse;\n+import org.junit.Test;\n+\n+public class TopologyTest extends GatewayTest {\n+\n+  @Test\n+  public void shouldResponseWithInitialUnhealthyPartitions() {\n+    // when\n+    final TopologyResponse topologyResponse = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    assertThat(topologyResponse.getBrokersList())\n+        .isNotEmpty()\n+        .allSatisfy(\n+            brokerInfo ->\n+                assertThat(brokerInfo.getPartitionsList())\n+                    .isNotEmpty()\n+                    .allSatisfy(\n+                        partitionPerBroker ->\n+                            assertThat(partitionPerBroker.getHealth())\n+                                .isEqualTo(PartitionBrokerHealth.UNHEALTHY)));\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealthHealthy() {\n+    // given\n+    final BrokerClusterStateImpl topology =\n+        (BrokerClusterStateImpl) brokerClient.getTopologyManager().getTopology();\n+    topology.setPartitionHealthy(0, 1);\n+\n+    // when\n+    final TopologyResponse topologyResponse = client.topology(TopologyRequest.newBuilder().build());", "originalCommit": "5ceb7ec3a9e82a448bfd8690c20e5f3cb677ea0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5NjUxMg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518196512", "bodyText": "nitpick: There's some other places where you reduce the variable name length and where you can apply var instead of an explicit type.", "author": "korthout", "createdAt": "2020-11-05T16:43:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5NjM1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5ODQxMg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518198412", "bodyText": "generally our test classes are final.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class TopologyTest extends GatewayTest {\n          \n          \n            \n            public final class TopologyTest extends GatewayTest {", "author": "korthout", "createdAt": "2020-11-05T16:45:52Z", "path": "gateway/src/test/java/io/zeebe/gateway/api/topology/TopologyTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.api.topology;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.gateway.api.util.GatewayTest;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterStateImpl;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.BrokerInfo;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.Partition.PartitionBrokerHealth;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyRequest;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyResponse;\n+import org.junit.Test;\n+\n+public class TopologyTest extends GatewayTest {", "originalCommit": "5ceb7ec3a9e82a448bfd8690c20e5f3cb677ea0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUzOTI2OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518539269", "bodyText": "Done", "author": "aivinog1", "createdAt": "2020-11-06T05:59:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5ODQxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5ODg5Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518198896", "bodyText": "Should this be in here?", "author": "korthout", "createdAt": "2020-11-05T16:46:31Z", "path": "benchmarks/project/zbench/go.sum", "diffHunk": "@@ -532,6 +532,7 @@ golang.org/x/net v0.0.0-20200707034311-ab3426394381/go.mod h1:/O7V0waA8r7cgGh81R\n golang.org/x/net v0.0.0-20200822124328-c89045814202/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=\n golang.org/x/net v0.0.0-20201021035429-f5854403a974 h1:IX6qOQeG5uLjB/hjjwjedwfjND0hgjPMMyO1RoIXQNI=\n golang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\n+golang.org/x/net v0.0.0-20201031054903-ff519b6c9102/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=", "originalCommit": "5ceb7ec3a9e82a448bfd8690c20e5f3cb677ea0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUzNjc1Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518536753", "bodyText": "No, I will remove it :)", "author": "aivinog1", "createdAt": "2020-11-06T05:50:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5ODg5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUzOTMxNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518539314", "bodyText": "Done", "author": "aivinog1", "createdAt": "2020-11-06T05:59:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5ODg5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYxNjA0NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518616044", "bodyText": "You don't need this line in this test. I understand that it may seem so due to your implementation, but I'd rather test behaviour. So just setting 1 partition to unhealthy should be enough for this test.", "author": "korthout", "createdAt": "2020-11-06T09:11:39Z", "path": "gateway/src/test/java/io/zeebe/gateway/api/topology/TopologyTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.api.topology;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.gateway.api.util.GatewayTest;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterStateImpl;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.Partition.PartitionBrokerHealth;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyRequest;\n+import org.junit.Test;\n+\n+public final class TopologyTest extends GatewayTest {\n+\n+  @Test\n+  public void shouldResponseWithInitialUnhealthyPartitions() {\n+    // when\n+    final var response = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    assertThat(response.getBrokersList())\n+        .isNotEmpty()\n+        .allSatisfy(\n+            brokerInfo ->\n+                assertThat(brokerInfo.getPartitionsList())\n+                    .isNotEmpty()\n+                    .allSatisfy(\n+                        partitionPerBroker ->\n+                            assertThat(partitionPerBroker.getHealth())\n+                                .isEqualTo(PartitionBrokerHealth.UNHEALTHY)));\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealthHealthy() {\n+    // given\n+    final var topology = (BrokerClusterStateImpl) brokerClient.getTopologyManager().getTopology();\n+    topology.setPartitionHealthy(0, 1);\n+\n+    // when\n+    final var response = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    final var health = response.getBrokers(0).getPartitions(0).getHealth();\n+    assertThat(health).isEqualTo(PartitionBrokerHealth.HEALTHY);\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealth() {\n+    // given\n+    final var topology = (BrokerClusterStateImpl) brokerClient.getTopologyManager().getTopology();\n+    topology.setPartitionHealthy(0, 1);", "originalCommit": "0e292157961e2e59f011f9cc48d18293797f2bcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc3ODM0OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518778349", "bodyText": "Done", "author": "aivinog1", "createdAt": "2020-11-06T14:16:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYxNjA0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYxNjUyMg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518616522", "bodyText": "nit: you can also make this variable name shorter\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final var responseAfterUpdate = client.topology(TopologyRequest.newBuilder().build());\n          \n          \n            \n                final var response = client.topology(TopologyRequest.newBuilder().build());", "author": "korthout", "createdAt": "2020-11-06T09:12:33Z", "path": "gateway/src/test/java/io/zeebe/gateway/api/topology/TopologyTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.api.topology;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.gateway.api.util.GatewayTest;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterStateImpl;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.Partition.PartitionBrokerHealth;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyRequest;\n+import org.junit.Test;\n+\n+public final class TopologyTest extends GatewayTest {\n+\n+  @Test\n+  public void shouldResponseWithInitialUnhealthyPartitions() {\n+    // when\n+    final var response = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    assertThat(response.getBrokersList())\n+        .isNotEmpty()\n+        .allSatisfy(\n+            brokerInfo ->\n+                assertThat(brokerInfo.getPartitionsList())\n+                    .isNotEmpty()\n+                    .allSatisfy(\n+                        partitionPerBroker ->\n+                            assertThat(partitionPerBroker.getHealth())\n+                                .isEqualTo(PartitionBrokerHealth.UNHEALTHY)));\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealthHealthy() {\n+    // given\n+    final var topology = (BrokerClusterStateImpl) brokerClient.getTopologyManager().getTopology();\n+    topology.setPartitionHealthy(0, 1);\n+\n+    // when\n+    final var response = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    final var health = response.getBrokers(0).getPartitions(0).getHealth();\n+    assertThat(health).isEqualTo(PartitionBrokerHealth.HEALTHY);\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealth() {\n+    // given\n+    final var topology = (BrokerClusterStateImpl) brokerClient.getTopologyManager().getTopology();\n+    topology.setPartitionHealthy(0, 1);\n+    topology.setPartitionUnhealthy(0, 1);\n+\n+    // when\n+    final var response = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    final var health = response.getBrokers(0).getPartitions(0).getHealth();\n+    assertThat(health).isEqualTo(PartitionBrokerHealth.UNHEALTHY);\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealthUnhealthy() {\n+    // given\n+    final var topology = (BrokerClusterStateImpl) brokerClient.getTopologyManager().getTopology();\n+    topology.setPartitionHealthy(0, 1);\n+    final var topologyAfterUpdate =\n+        (BrokerClusterStateImpl) brokerClient.getTopologyManager().getTopology();\n+    topologyAfterUpdate.setPartitionUnhealthy(0, 1);\n+    topologyAfterUpdate.setPartitionHealthy(0, 6);\n+\n+    // when\n+    final var responseAfterUpdate = client.topology(TopologyRequest.newBuilder().build());", "originalCommit": "0e292157961e2e59f011f9cc48d18293797f2bcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc3ODQxNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518778416", "bodyText": "Done", "author": "aivinog1", "createdAt": "2020-11-06T14:16:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYxNjUyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYxNzQ4Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518617482", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldUpdatePartitionHealth() {\n          \n          \n            \n              public void shouldUpdatePartitionHealthUnhealthy() {", "author": "korthout", "createdAt": "2020-11-06T09:14:16Z", "path": "gateway/src/test/java/io/zeebe/gateway/api/topology/TopologyTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.api.topology;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.gateway.api.util.GatewayTest;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterStateImpl;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.Partition.PartitionBrokerHealth;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyRequest;\n+import org.junit.Test;\n+\n+public final class TopologyTest extends GatewayTest {\n+\n+  @Test\n+  public void shouldResponseWithInitialUnhealthyPartitions() {\n+    // when\n+    final var response = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    assertThat(response.getBrokersList())\n+        .isNotEmpty()\n+        .allSatisfy(\n+            brokerInfo ->\n+                assertThat(brokerInfo.getPartitionsList())\n+                    .isNotEmpty()\n+                    .allSatisfy(\n+                        partitionPerBroker ->\n+                            assertThat(partitionPerBroker.getHealth())\n+                                .isEqualTo(PartitionBrokerHealth.UNHEALTHY)));\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealthHealthy() {\n+    // given\n+    final var topology = (BrokerClusterStateImpl) brokerClient.getTopologyManager().getTopology();\n+    topology.setPartitionHealthy(0, 1);\n+\n+    // when\n+    final var response = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    final var health = response.getBrokers(0).getPartitions(0).getHealth();\n+    assertThat(health).isEqualTo(PartitionBrokerHealth.HEALTHY);\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealth() {", "originalCommit": "0e292157961e2e59f011f9cc48d18293797f2bcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc3ODUxNw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518778517", "bodyText": "Done", "author": "aivinog1", "createdAt": "2020-11-06T14:16:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYxNzQ4Mg=="}], "type": "inlineReview"}, {"oid": "3d6a4c61bc3aec000d81757268ea559542906481", "url": "https://github.com/camunda-cloud/zeebe/commit/3d6a4c61bc3aec000d81757268ea559542906481", "message": "feat(gateway): Add a health info in the gateway's API.", "committedDate": "2020-11-06T15:04:50Z", "type": "commit"}, {"oid": "3d6a4c61bc3aec000d81757268ea559542906481", "url": "https://github.com/camunda-cloud/zeebe/commit/3d6a4c61bc3aec000d81757268ea559542906481", "message": "feat(gateway): Add a health info in the gateway's API.", "committedDate": "2020-11-06T15:04:50Z", "type": "forcePushed"}]}