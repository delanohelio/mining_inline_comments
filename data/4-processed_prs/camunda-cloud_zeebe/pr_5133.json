{"pr_number": 5133, "pr_title": "Handle snapshot replication from 0.23.x brokers", "pr_createdAt": "2020-08-07T10:07:02Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/5133", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3NjMzOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5133#discussion_r466976338", "bodyText": "Suggestion: you can use snapshotChunkImpl.tryWrap", "author": "deepthidevaki", "createdAt": "2020-08-07T11:14:26Z", "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "diffHunk": "@@ -185,8 +189,17 @@ private void addSnapshotListener() {\n                   .build()));\n     }\n \n-    final var snapshotChunk = new SnapshotChunkImpl();\n-    snapshotChunk.wrap(new UnsafeBuffer(request.data()), 0, request.data().capacity());\n+    SnapshotChunk snapshotChunk;\n+    try {\n+      final var snapshotChunkImpl = new SnapshotChunkImpl();\n+      snapshotChunkImpl.wrap(new UnsafeBuffer(request.data()), 0, request.data().capacity());", "originalCommit": "270b591b47bcd45b65544962afd35a2d195cc018", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA1ODAzOQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5133#discussion_r467058039", "bodyText": "The way tryWrap is implemented would most likely work here, though it would also normally reject messages with the wrong schema ID or versions...still works but I feel for the wrong reason (as it doesn't explicitly fail if it cannot be parsed, just if some header properties are wrong). wdyt?", "author": "npepinpe", "createdAt": "2020-08-07T13:58:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3NjMzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA2NDA5MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5133#discussion_r467064090", "bodyText": "Ya. In this case, it does not make much difference. Might be useful for future-proofing.", "author": "deepthidevaki", "createdAt": "2020-08-07T14:08:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3NjMzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc0NDc4Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5133#discussion_r467744782", "bodyText": "Maybe we can have a legacy util class or something where we keep this code and can it remove it more easily. This might be also easier to track then.", "author": "Zelldon", "createdAt": "2020-08-10T08:05:28Z", "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "diffHunk": "@@ -385,6 +389,18 @@ private void addSnapshotListener() {\n                 .build()));\n   }\n \n+  private SnapshotChunk decodeSnapshotChunk(final InstallRequest request) {", "originalCommit": "028d5a5158fd57e65225e5b5230e53771c3a4282", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc0NjQ1MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5133#discussion_r467746451", "bodyText": "I think it feels less hacky if you name the constants. Like FALLBACK_TOTAL_COUNT or something", "author": "Zelldon", "createdAt": "2020-08-10T08:09:18Z", "path": "atomix/cluster/src/main/java/io/atomix/raft/snapshot/impl/FileBasedReceivedSnapshot.java", "diffHunk": "@@ -192,27 +192,29 @@ public PersistedSnapshot persist() {\n     final var files = directory.toFile().listFiles();\n     Objects.requireNonNull(files, \"No chunks have been applied yet\");\n \n-    if (files.length != expectedTotalCount) {\n+    if (expectedTotalCount != Integer.MIN_VALUE && files.length != expectedTotalCount) {", "originalCommit": "028d5a5158fd57e65225e5b5230e53771c3a4282", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc0Njk3Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5133#discussion_r467746977", "bodyText": "The same here - currently I would ask why it should be min value. But if you add a constant which describes this a bit better I think it would be clearer", "author": "Zelldon", "createdAt": "2020-08-10T08:10:28Z", "path": "atomix/cluster/src/main/java/io/atomix/raft/snapshot/impl/FileBasedReceivedSnapshot.java", "diffHunk": "@@ -192,27 +192,29 @@ public PersistedSnapshot persist() {\n     final var files = directory.toFile().listFiles();\n     Objects.requireNonNull(files, \"No chunks have been applied yet\");\n \n-    if (files.length != expectedTotalCount) {\n+    if (expectedTotalCount != Integer.MIN_VALUE && files.length != expectedTotalCount) {\n       throw new IllegalStateException(\n           String.format(\n               \"Expected '%d' chunk files for this snapshot, but found '%d'. Files are: %s.\",\n               expectedSnapshotChecksum, files.length, Arrays.toString(files)));\n     }\n \n-    final var filePaths =\n-        Arrays.stream(files).sorted().map(File::toPath).collect(Collectors.toList());\n-    final long actualSnapshotChecksum;\n-    try {\n-      actualSnapshotChecksum = ChecksumUtil.createCombinedChecksum(filePaths);\n-    } catch (final IOException e) {\n-      throw new UncheckedIOException(\"Unexpected exception on calculating snapshot checksum.\", e);\n-    }\n-\n-    if (actualSnapshotChecksum != expectedSnapshotChecksum) {\n-      throw new IllegalStateException(\n-          String.format(\n-              \"Expected snapshot checksum %d, but calculated %d.\",\n-              expectedSnapshotChecksum, actualSnapshotChecksum));\n+    if (expectedSnapshotChecksum != Long.MIN_VALUE) {", "originalCommit": "028d5a5158fd57e65225e5b5230e53771c3a4282", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc3MDY2MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5133#discussion_r467770660", "bodyText": "iirc I think SBE uses this as the null value, so I assume this came from there - naming the constants is probably anyway the better solution \ud83d\udc4d", "author": "npepinpe", "createdAt": "2020-08-10T08:58:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc0Njk3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc1MzE4MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5133#discussion_r467753180", "bodyText": "I think we need a mechanism to track these kind of methods or logic, which we expect to remove at some point. Maybe via annotation or adding it to a separate class which can be tracked more easily.", "author": "Zelldon", "createdAt": "2020-08-10T08:22:35Z", "path": "atomix/cluster/src/main/java/io/atomix/raft/snapshot/impl/SnapshotChunkUtil.java", "diffHunk": "@@ -23,6 +25,36 @@ static long createChecksum(final byte[] content) {\n     return crc32.getValue();\n   }\n \n+  /**\n+   * Returns a new snapshot chunk from a pre 0.24.x install request. Should be removed once no\n+   * versions below 0.24.x are supported.\n+   *\n+   * <p>The snapshot chunk will take most of its information from the install request, and use the\n+   * data as the chunk content, while setting the total count to {@link Integer#MIN_VALUE} and the\n+   * snapshot checksum to {@link Long#MIN_VALUE} so that neither will be validated against. See\n+   * {@link FileBasedReceivedSnapshot} for more on that.\n+   *\n+   * @param request the install request to build from\n+   * @return a valid {@link SnapshotChunk} built from the request\n+   */\n+  public static SnapshotChunk fromOldInstallRequest(final InstallRequest request) {", "originalCommit": "028d5a5158fd57e65225e5b5230e53771c3a4282", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc3MDc4Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/5133#discussion_r467770786", "bodyText": "I'll group all that legacy stuff together \ud83d\udc4d", "author": "npepinpe", "createdAt": "2020-08-10T08:58:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc1MzE4MA=="}], "type": "inlineReview"}, {"oid": "0d2e5182c452cdd0505563693a936086c740392e", "url": "https://github.com/camunda-cloud/zeebe/commit/0d2e5182c452cdd0505563693a936086c740392e", "message": "chore(parent): bump zeebe-test-container version", "committedDate": "2020-08-11T08:42:15Z", "type": "commit"}, {"oid": "3a37ee24331d136c8615e5c0f91ecfe474042f2c", "url": "https://github.com/camunda-cloud/zeebe/commit/3a37ee24331d136c8615e5c0f91ecfe474042f2c", "message": "chore(test-util): backport topology assert extensions", "committedDate": "2020-08-11T08:42:15Z", "type": "commit"}, {"oid": "ea7848a33e6906a5a15119c36c6d2059a6f0fa93", "url": "https://github.com/camunda-cloud/zeebe/commit/ea7848a33e6906a5a15119c36c6d2059a6f0fa93", "message": "chore(upgrade-tests): backport rolling upgrade test + new test with snapshot", "committedDate": "2020-08-11T08:42:15Z", "type": "commit"}, {"oid": "e7b6ccfcb94e354de945f2a6dc73e5a0af86a9e4", "url": "https://github.com/camunda-cloud/zeebe/commit/e7b6ccfcb94e354de945f2a6dc73e5a0af86a9e4", "message": "chore(atomix/cluster): handle old 0.23.x snapshot replication", "committedDate": "2020-08-11T08:42:16Z", "type": "commit"}, {"oid": "e7b6ccfcb94e354de945f2a6dc73e5a0af86a9e4", "url": "https://github.com/camunda-cloud/zeebe/commit/e7b6ccfcb94e354de945f2a6dc73e5a0af86a9e4", "message": "chore(atomix/cluster): handle old 0.23.x snapshot replication", "committedDate": "2020-08-11T08:42:16Z", "type": "forcePushed"}]}