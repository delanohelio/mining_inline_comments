{"pr_number": 5943, "pr_title": "feat(clients/go): add --output parameter to zbctl status", "pr_createdAt": "2020-11-30T12:34:20Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/5943", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU2NTQ3OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5943#discussion_r532565479", "bodyText": "I have to move it to a separate function because JSONPB marshals int64 as Go string. This breaks backward compatibility. See: https://developers.google.com/protocol-buffers/docs/proto3#json", "author": "aivinog1", "createdAt": "2020-11-30T12:36:48Z", "path": "clients/go/cmd/zbctl/internal/commands/status.go", "diffHunk": "@@ -117,3 +128,12 @@ func healthToString(health pb.Partition_PartitionBrokerHealth) string {\n \t\treturn unknownState\n \t}\n }\n+\n+func printTopologyJSON(resp *pb.TopologyResponse) error {", "originalCommit": "4d53182e736282f73aa746a4bb61e59d38b75f70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYyNTY1Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5943#discussion_r532625652", "bodyText": "Do I understand correctly this means we cannot just replace the implementation of printJSON() in commands/root.go?", "author": "korthout", "createdAt": "2020-11-30T14:13:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU2NTQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA4NDA3OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5943#discussion_r533084078", "bodyText": "Correct. For example, what the test show:\n        --- FAIL: TestZbctlWithInsecureGateway/TestCommonCommands/deploy_workflow (0.97s)\n            main_test.go:150: deploy workflow: diff (-want +got):\n                \u00a0\u00a0[]string{\n                \u00a0\u00a0      \"{\",\n                -\u00a0      `  \"key\": 2251799813685250,`,\n                +\u00a0      `  \"key\": \"2251799813685251\",`,\n                \u00a0\u00a0      `  \"workflows\": [`,\n                \u00a0\u00a0      \"    {\",\n                \u00a0\u00a0      `      \"bpmnProcessId\": \"process\",`,\n                \u00a0\u00a0      `      \"version\": 1,`,\n                -\u00a0      `      \"workflowKey\": 2251799813685345,`,\n                +\u00a0      `      \"workflowKey\": \"2251799813685249\",`,\n                \u00a0\u00a0      `      \"resourceName\": \"model.bpmn\"`,\n                \u00a0\u00a0      \"    },\",\n                \u00a0\u00a0      \"    {\",\n                \u00a0\u00a0      `      \"bpmnProcessId\": \"jobProcess\",`,\n                \u00a0\u00a0      `      \"version\": 1,`,\n                -\u00a0      `      \"workflowKey\": 2251799813685346,`,\n                +\u00a0      `      \"workflowKey\": \"2251799813685250\",`,\n                \u00a0\u00a0      `      \"resourceName\": \"job.bpmn\"`,\n                \u00a0\u00a0      \"    }\",\n                \u00a0\u00a0      ... // 3 identical elements\n                \u00a0\u00a0}\n\n\nAfter this diff:\nIndex: clients/go/cmd/zbctl/internal/commands/root.go\nIDEA additional info:\nSubsystem: com.intellij.openapi.diff.impl.patch.CharsetEP\n<+>UTF-8\n===================================================================\n--- clients/go/cmd/zbctl/internal/commands/root.go\t(revision 0d4eff5158bd87c7c7ae224a7bee9ed3953c7e7a)\n+++ clients/go/cmd/zbctl/internal/commands/root.go\t(date 1606800703955)\n@@ -15,9 +15,10 @@\n package commands\n \n import (\n-\t\"encoding/json\"\n \t\"fmt\"\n \t\"github.com/zeebe-io/zeebe/clients/go/pkg/zbc\"\n+\t\"google.golang.org/protobuf/encoding/protojson\"\n+\t\"google.golang.org/protobuf/reflect/protoreflect\"\n \t\"os\"\n \t\"strconv\"\n \t\"strings\"\n@@ -201,8 +202,9 @@\n \t}\n }\n \n-func printJSON(value interface{}) error {\n-\tvalueJSON, err := json.MarshalIndent(value, \"\", \"  \")\n+func printJSON(value protoreflect.ProtoMessage) error {\n+\tm := protojson.MarshalOptions{EmitUnpopulated: true, Indent: \"  \"}\n+\tvalueJSON, err := m.Marshal(value)\n \tif err == nil {\n \t\tfmt.Println(string(valueJSON))\n \t}", "author": "aivinog1", "createdAt": "2020-12-01T05:37:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU2NTQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE2NTMyMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5943#discussion_r533165320", "bodyText": "Thanks for this, very clear.\n@MiguelPires This change is backwards compatible this way, but it also means that json marshalling is done differently for this response compared to others. Should we keep backwards compatibility and introduce this inconsistency or should we break backwards compatibility and go for consistency? I'd love to hear what you think", "author": "korthout", "createdAt": "2020-12-01T08:49:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU2NTQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMyMjA2NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5943#discussion_r537322064", "bodyText": "I think right now our priority is maintaining backwards compatibility but @npepinpe can answer that better", "author": "MiguelPires", "createdAt": "2020-12-07T08:40:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU2NTQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMyMzkzOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5943#discussion_r537323938", "bodyText": "Backwards compat is pretty important, but primarily in the broker - in the client it really depends on what the impact is. I'm not really into the current topic, so how is backwards compatibility broken here? (let's ignore that I'm confused as to why int64 is converted to string \ud83d\ude05)", "author": "npepinpe", "createdAt": "2020-12-07T08:43:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU2NTQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMzMDg0OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5943#discussion_r537330848", "bodyText": "-       `  \"key\": 2251799813685250,`,\n                +       `  \"key\": \"2251799813685251\",`,\n\nJSONPB serializes the int64 fields as string and the standard one doesn't", "author": "MiguelPires", "createdAt": "2020-12-07T08:54:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU2NTQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMzODEwOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5943#discussion_r537338108", "bodyText": "Dumb question, but why is it using JSONPB and not just the standard one? Anyway, I assume we have to? And there's no way to change this behaviour? Because that's pretty weird.\nAt any rate, I imagine we're not going to use JSONPB for the other commands, right? So this only affects the topology? And only if we specify --json? Where does the backwards compatibility breaks?", "author": "npepinpe", "createdAt": "2020-12-07T09:05:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU2NTQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM0Mzg1NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5943#discussion_r537343854", "bodyText": "Yes, the standard json printer doesn't do well with protobuf because of the enums. The issue is not with jsonpb, specifying int64 integers as string is part of the protobuf spec. From what I read, it's because in some browsers javascript had trouble reading int64s (that's something I read online, I didn't do any research on it).\nActually, if we can break compatibility I would suggest adding this flag everywhere and either print things in a human-readable or using JSONPB. It would avoid issues like #5888", "author": "MiguelPires", "createdAt": "2020-12-07T09:14:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU2NTQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM4NzY2OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5943#discussion_r537387668", "bodyText": "Actually, if we can break compatibility I would suggest adding this flag everywhere and either print things in a human-readable or using JSONPB\n\nLet's do that, but I think this is maybe outside of scope here. Let's create a follow up issue, and for now let's implement this flag only for this command. wdyt?", "author": "npepinpe", "createdAt": "2020-12-07T10:18:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU2NTQ3OQ=="}], "type": "inlineReview"}, {"oid": "6a8652682f906245760e888db250b2c23a4ea6b4", "url": "https://github.com/camunda-cloud/zeebe/commit/6a8652682f906245760e888db250b2c23a4ea6b4", "message": "feat(clients/go): add --output flag to status", "committedDate": "2020-12-07T13:46:42Z", "type": "commit"}, {"oid": "6a8652682f906245760e888db250b2c23a4ea6b4", "url": "https://github.com/camunda-cloud/zeebe/commit/6a8652682f906245760e888db250b2c23a4ea6b4", "message": "feat(clients/go): add --output flag to status", "committedDate": "2020-12-07T13:46:42Z", "type": "forcePushed"}]}