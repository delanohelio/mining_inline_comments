{"pr_number": 3644, "pr_title": "docs(bpmn-workflows): add error event section", "pr_createdAt": "2020-01-13T10:48:13Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/3644", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc3NTQwNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/3644#discussion_r365775406", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A technical error is unexpected and can not be handled in the workflow. The error may disappear when the job is retried, or an incident is created to indicate that an user interaction is required.\n          \n          \n            \n            A technical error is unexpected and cannot be handled in the workflow. The error may disappear when the job is retried, or an incident is created to indicate that user interaction is required.", "author": "MiguelPires", "createdAt": "2020-01-13T12:21:34Z", "path": "docs/src/bpmn-workflows/error-events/error-events.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Error Events\n+\n+Error events are events which reference an error. They are used to handle business errors in a workflow.\n+\n+ ![workflow](/bpmn-workflows/error-events/error-events.png)\n+\n+An error is triggered from a **client command** while processing a job. It indicates that some kind of business error is occurred which should be handled in the workflow, for example, by taking a different path to compensate the error.\n+\n+\n+## Defining the Error\n+\n+An error can be referenced by one or more error events. It must define the `errorCode` (e.g. `Invalid Credit Card`) of the error.\n+\n+The `errorCode` is a `string` that must match to the error code that is sent by the client command.\n+\n+## Catching the Error\n+\n+An error can be caught using an error **boundary event** or an error **event subprocess**. The error is caught if the error code matches.\n+\n+The boundary event or the event subprocess must be interrupting. When the error is caught then the service task gets terminated and the boundary event / the event subprocess gets activated. That means the workflow instance continues where the error is caught instead of following the regular path.\n+\n+## Unhandled Errors\n+\n+When an error is triggered then it should be handled in the workflow. If it is not handled (e.g. unexpected error code) then an **incident** is raised to indicate the failure. The incident is attached to the corresponding service task of the processed job.\n+\n+The incident can be solved by increasing the retries of the processed job.\n+\n+## Business Error vs. Technical Error\n+\n+While processing a job, two different types of errors can be occurred: a technical error (e.g. database connection interrupted) and a business error (e.g. invalid credit card).\n+\n+A technical error is unexpected and can not be handled in the workflow. The error may disappear when the job is retried, or an incident is created to indicate that an user interaction is required.", "originalCommit": "22745b41e7f7f22b2a5ad5d33580eb5b23c351a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc3Njk0OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/3644#discussion_r365776948", "bodyText": "The forward slash with spaces on both sides seems a little weird but maybe it's just me.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The boundary event or the event subprocess must be interrupting. When the error is caught then the service task gets terminated and the boundary event / the event subprocess gets activated. That means the workflow instance continues where the error is caught instead of following the regular path.\n          \n          \n            \n            The boundary event or the event subprocess must be interrupting. When the error is caught then the service task gets terminated and the boundary event or event subprocess gets activated. That means the workflow instance continues where the error is caught instead of following the regular path.", "author": "MiguelPires", "createdAt": "2020-01-13T12:25:39Z", "path": "docs/src/bpmn-workflows/error-events/error-events.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Error Events\n+\n+Error events are events which reference an error. They are used to handle business errors in a workflow.\n+\n+ ![workflow](/bpmn-workflows/error-events/error-events.png)\n+\n+An error is triggered from a **client command** while processing a job. It indicates that some kind of business error is occurred which should be handled in the workflow, for example, by taking a different path to compensate the error.\n+\n+\n+## Defining the Error\n+\n+An error can be referenced by one or more error events. It must define the `errorCode` (e.g. `Invalid Credit Card`) of the error.\n+\n+The `errorCode` is a `string` that must match to the error code that is sent by the client command.\n+\n+## Catching the Error\n+\n+An error can be caught using an error **boundary event** or an error **event subprocess**. The error is caught if the error code matches.\n+\n+The boundary event or the event subprocess must be interrupting. When the error is caught then the service task gets terminated and the boundary event / the event subprocess gets activated. That means the workflow instance continues where the error is caught instead of following the regular path.", "originalCommit": "22745b41e7f7f22b2a5ad5d33580eb5b23c351a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dbfea56d5bd5c9976d5496e063058531965ab0b8", "url": "https://github.com/camunda-cloud/zeebe/commit/dbfea56d5bd5c9976d5496e063058531965ab0b8", "message": "docs(bpmn-workflows): add error event section\n\n* add error event section to BPMN workflows\n* mark error events on coverage overview page\n\nCo-Authored-By: Miguel Pires <miguel.pires@camunda.com>", "committedDate": "2020-01-13T13:12:22Z", "type": "commit"}, {"oid": "dbfea56d5bd5c9976d5496e063058531965ab0b8", "url": "https://github.com/camunda-cloud/zeebe/commit/dbfea56d5bd5c9976d5496e063058531965ab0b8", "message": "docs(bpmn-workflows): add error event section\n\n* add error event section to BPMN workflows\n* mark error events on coverage overview page\n\nCo-Authored-By: Miguel Pires <miguel.pires@camunda.com>", "committedDate": "2020-01-13T13:12:22Z", "type": "forcePushed"}]}