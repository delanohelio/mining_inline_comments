{"pr_number": 4098, "pr_title": "Support feel expressions for multi instance activities", "pr_createdAt": "2020-03-20T16:34:57Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4098", "timeline": [{"oid": "63ebe25983fd8ff24b2d575e93107e406dbabf8e", "url": "https://github.com/camunda-cloud/zeebe/commit/63ebe25983fd8ff24b2d575e93107e406dbabf8e", "message": "chore(engine): add github issue id to todo", "committedDate": "2020-03-23T09:34:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NDc4Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4098#discussion_r396944783", "bodyText": "Make it a bit more clear that is returned.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Evaluates the given expression and returns the result as a list.\n          \n          \n            \n               * Evaluates the given expression and returns the result as a list. The entries of the list are encoded in MessagePack and can have any type.", "author": "saig0", "createdAt": "2020-03-24T07:24:36Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/ExpressionProcessor.java", "diffHunk": "@@ -92,16 +93,36 @@ public String evaluateMessageCorrelationKeyExpression(\n   }\n \n   /**\n-   * Evaluates the given expression and passes the result to the {@code resultHandler}\n+   * Evaluates the given expression and returns the result no matter the type.\n    *\n-   * @param expression the expression to evaluate; must not be {@code null}\n-   * @param variableScopeKey the key to identify the variable scope which will provide the context\n-   *     in which the expression is evaluated\n-   * @param resultHandler the result handler to process the evaluation result, and convert it to the\n-   *     desired result type; must not be {@code null}\n-   * @param <T> desired result type\n-   * @return the result of the expression evaluation\n+   * @param expression the expression to evaluate\n+   * @param context the element context to load the variables from\n+   * @return the evaluation result as buffer, or {@link Optional#empty()} if an incident is raised\n    */\n+  public Optional<DirectBuffer> evaluateAnyExpression(\n+      final Expression expression, final BpmnStepContext<?> context) {\n+    return evaluateExpression(\n+        expression,\n+        context.getKey(),\n+        new FailureIncidentRaisingHandler<>(context, EvaluationResult::toBuffer));\n+  }\n+\n+  /**\n+   * Evaluates the given expression and returns the result as a list.", "originalCommit": "63ebe25983fd8ff24b2d575e93107e406dbabf8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2MDUxOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4098#discussion_r396960518", "bodyText": "The method is only used in MultiInstanceBodyCompletedHandler. Moving it to the caller gives us more context of how it is used.", "author": "saig0", "createdAt": "2020-03-24T07:59:56Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/multiinstance/AbstractMultiInstanceBodyHandler.java", "diffHunk": "@@ -86,19 +90,18 @@ protected void handleInnerActivity(final BpmnStepContext<ExecutableMultiInstance\n   protected abstract boolean handleMultiInstanceBody(\n       BpmnStepContext<ExecutableMultiInstanceBody> context);\n \n-  protected MsgPackQueryProcessor.QueryResults readInputCollectionVariable(\n+  protected Optional<List<DirectBuffer>> readInputCollectionVariable(\n       final BpmnStepContext<ExecutableMultiInstanceBody> context) {\n-\n-    final JsonPathQuery inputCollection =\n+    final Expression inputCollection =\n         context.getElement().getLoopCharacteristics().getInputCollection();\n-    final DirectBuffer variableName = inputCollection.getVariableName();\n-\n-    final VariablesState variablesState = context.getElementInstanceState().getVariablesState();\n-    final DirectBuffer variableAsDocument =\n-        variablesState.getVariablesAsDocument(\n-            context.getKey(), Collections.singleton(variableName));\n+    return expressionProcessor.evaluateArrayExpression(inputCollection, context);\n+  }\n \n-    return queryProcessor.process(inputCollection, variableAsDocument);\n+  protected DirectBuffer readOutputElementVariable(\n+      final BpmnStepContext<ExecutableMultiInstanceBody> context) {\n+    final var expression =\n+        context.getElement().getLoopCharacteristics().getOutputElement().orElseThrow();\n+    return expressionProcessor.evaluateAnyExpression(expression, context).orElse(null);", "originalCommit": "63ebe25983fd8ff24b2d575e93107e406dbabf8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2MzgzNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4098#discussion_r396963836", "bodyText": "Instead of returning null, I think it is better to deal with an optional.", "author": "saig0", "createdAt": "2020-03-24T08:06:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2MDUxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5Njg4MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4098#discussion_r396996880", "bodyText": "Throwing an exception here is dangerous \ud83d\udca5 It is very unlikely but the input collection variable might change. If it is not an array anymore then an exception is thrown and the workflow instance stops processing at all (i.e. added to the \"blacklist\").\nIt would be better to handle the case and create an incident instead. So, the workflow instance can be repaired and continue processing (which is not the case if it is added to the \"blacklist\").", "author": "saig0", "createdAt": "2020-03-24T09:06:32Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/multiinstance/MultiInstanceBodyCompletedHandler.java", "diffHunk": "@@ -44,12 +46,14 @@ protected void handleInnerActivity(final BpmnStepContext<ExecutableMultiInstance\n \n     if (loopCharacteristics.isSequential()) {\n \n-      final var array = readInputCollectionVariable(context).getSingleResult().getArray();\n+      final var array =\n+          readInputCollectionVariable(context).orElseThrow(IllegalStateException::new);", "originalCommit": "63ebe25983fd8ff24b2d575e93107e406dbabf8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4MTgzMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4098#discussion_r397681830", "bodyText": "@saig0 Ah okay, that's a good reason to avoid throwing an exception here. But how should we deal with the situation then? In case the variable is no longer an array, an incident is already raised inside the readInputCollectionVariable method. So we don't have to do that here. However, should we immediately return from this handleInnerActivity when we see the optional to be empty or should the rest of the method still be executed? For example, do we still need to call super.handleInnerActivity?", "author": "korthout", "createdAt": "2020-03-25T08:35:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5Njg4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwMzUyNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4098#discussion_r397703526", "bodyText": "\ud83d\udc4d We should return false immediately. Otherwise, we may continue the workflow instance.\nI have more and more the feeling that this API needs an Either return type...", "author": "saig0", "createdAt": "2020-03-25T09:13:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5Njg4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc2MTMwMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4098#discussion_r397761303", "bodyText": "@saig0 I'm all for it. Here are some implementations for Java: https://stackoverflow.com/questions/26162407/is-there-an-equivalent-of-scalas-either-in-java-8. The only issue I see with introducing one to our code is consistency. I think the ExpressionProcessor API should be migrated to using it in one PR, to make sure how we use it in the same way everywhere. That might take some effort.", "author": "korthout", "createdAt": "2020-03-25T10:48:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5Njg4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5Nzg4Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4098#discussion_r397797887", "bodyText": "\ud83d\udc4d", "author": "saig0", "createdAt": "2020-03-25T11:54:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5Njg4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAwMDQxMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4098#discussion_r397000413", "bodyText": "Why did you change the method visibility?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected void updateOutputCollection(\n          \n          \n            \n              private void updateOutputCollection(", "author": "saig0", "createdAt": "2020-03-24T09:12:44Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/multiinstance/MultiInstanceBodyCompletedHandler.java", "diffHunk": "@@ -69,35 +73,24 @@ protected boolean handleMultiInstanceBody(\n     return true;\n   }\n \n-  private void updateOutputCollection(\n+  protected void updateOutputCollection(", "originalCommit": "63ebe25983fd8ff24b2d575e93107e406dbabf8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4MjQzMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4098#discussion_r397682430", "bodyText": "oops \ud83d\ude04", "author": "korthout", "createdAt": "2020-03-25T08:36:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAwMDQxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAwNzM3NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4098#discussion_r397007374", "bodyText": "We can be tricky and avoid cloning the buffer by moving readOutputElementVariable(context); on top \ud83d\ude08\nThe output element result is resolved by the expression language which uses its own buffers.", "author": "saig0", "createdAt": "2020-03-24T09:23:27Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/multiinstance/MultiInstanceBodyCompletedHandler.java", "diffHunk": "@@ -69,35 +73,24 @@ protected boolean handleMultiInstanceBody(\n     return true;\n   }\n \n-  private void updateOutputCollection(\n+  protected void updateOutputCollection(\n       final BpmnStepContext<ExecutableMultiInstanceBody> context, final DirectBuffer variableName) {\n \n     final var variablesState = context.getElementInstanceState().getVariablesState();\n     final var bodyInstanceKey = context.getFlowScopeInstance().getKey();\n     final var workflowKey = context.getValue().getWorkflowKey();\n     final var loopCounter = context.getElementInstance().getMultiInstanceLoopCounter();\n \n-    final var elementVariable = readOutputElementVariable(context);\n-    final var currentCollection = variablesState.getVariableLocal(bodyInstanceKey, variableName);\n-\n-    final var updatedCollection = insertAt(currentCollection, loopCounter, elementVariable);\n-\n-    variablesState.setVariableLocal(bodyInstanceKey, workflowKey, variableName, updatedCollection);\n-  }\n+    // the result needs to be cloned because readOutputElementVariable(Context) uses the same buffer\n+    final var currentCollection =\n+        cloneBuffer(variablesState.getVariableLocal(bodyInstanceKey, variableName));", "originalCommit": "63ebe25983fd8ff24b2d575e93107e406dbabf8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAxMzA1NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4098#discussion_r397013055", "bodyText": "I think we can keep this check now after dealing with the outputElement variable name.", "author": "saig0", "createdAt": "2020-03-24T09:32:11Z", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java", "diffHunk": "@@ -589,13 +589,6 @@ public void shouldSetOutputElementVariable() {\n     completeJobs(workflowInstanceKey, INPUT_COLLECTION.size());\n \n     // then\n-    assertThat(\n-            RecordingExporter.variableRecords(VariableIntent.CREATED)\n-                .withName(OUTPUT_ELEMENT_VARIABLE)\n-                .limit(INPUT_COLLECTION.size()))\n-        .extracting(r -> r.getValue().getValue())\n-        .containsOnly(\"null\");\n-", "originalCommit": "63ebe25983fd8ff24b2d575e93107e406dbabf8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAxODI5OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4098#discussion_r397018299", "bodyText": "Optimized imports by Idea:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import java.{lang, util}\n          \n          \n            \n            \n          \n          \n            \n            import io.zeebe.el.{EvaluationResult, Expression, ResultType}\n          \n          \n            \n            import io.zeebe.util.buffer.BufferUtil\n          \n          \n            \n            import io.zeebe.util.buffer.BufferUtil.cloneBuffer\n          \n          \n            \n            import org.agrona.DirectBuffer\n          \n          \n            \n            import org.camunda.feel.syntaxtree.{Val, ValBoolean, ValContext, ValList, ValNull, ValNumber, ValString}\n          \n          \n            \n            \n          \n          \n            \n            import scala.collection.JavaConverters._\n          \n          \n            \n            import scala.collection.mutable.ListBuffer\n          \n          \n            \n            import java.{lang, util}\n          \n          \n            \n            \n          \n          \n            \n            import io.zeebe.el.{EvaluationResult, Expression, ResultType}\n          \n          \n            \n            import io.zeebe.util.buffer.BufferUtil.cloneBuffer\n          \n          \n            \n            import org.agrona.DirectBuffer\n          \n          \n            \n            import org.camunda.feel.syntaxtree.{Val, ValBoolean, ValContext, ValList, ValNull, ValNumber, ValString}\n          \n          \n            \n            \n          \n          \n            \n            import scala.jdk.CollectionConverters._", "author": "saig0", "createdAt": "2020-03-24T09:40:20Z", "path": "expression-language/src/main/scala/io/zeebe/el/impl/feel/FeelEvaluationResult.scala", "diffHunk": "@@ -7,12 +7,17 @@\n  */\n package io.zeebe.el.impl.feel\n \n-import java.lang\n+import java.{lang, util}\n \n import io.zeebe.el.{EvaluationResult, Expression, ResultType}\n+import io.zeebe.util.buffer.BufferUtil\n+import io.zeebe.util.buffer.BufferUtil.cloneBuffer\n import org.agrona.DirectBuffer\n import org.camunda.feel.syntaxtree.{Val, ValBoolean, ValContext, ValList, ValNull, ValNumber, ValString}\n \n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ListBuffer", "originalCommit": "63ebe25983fd8ff24b2d575e93107e406dbabf8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMyNzU4MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4098#discussion_r398327581", "bodyText": "You can use BrokerClassRuleHelper.getJobType() (a JUnit test watcher rule) to get unique job types for each test case.", "author": "saig0", "createdAt": "2020-03-26T05:36:56Z", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/incident/MultiInstanceIncidentTest.java", "diffHunk": "@@ -34,31 +39,37 @@\n \n   private static final String PROCESS_ID = \"process\";\n   private static final String ELEMENT_ID = \"task\";\n-  private static final String JOB_TYPE = \"test\";\n+  private static final String JOB_TYPE_PREFIX = \"test\";\n   private static final String INPUT_COLLECTION = \"items\";\n   private static final String INPUT_ELEMENT = \"item\";\n \n-  private static final BpmnModelInstance WORKFLOW =\n-      Bpmn.createExecutableProcess(PROCESS_ID)\n-          .startEvent()\n-          .serviceTask(\n-              ELEMENT_ID,\n-              t ->\n-                  t.zeebeTaskType(JOB_TYPE)\n-                      .multiInstance(\n-                          b ->\n-                              b.zeebeInputCollection(INPUT_COLLECTION)\n-                                  .zeebeInputElement(INPUT_ELEMENT)))\n-          .endEvent()\n-          .done();\n+  private static String jobType;\n \n   @Rule\n   public final RecordingExporterTestWatcher recordingExporterTestWatcher =\n       new RecordingExporterTestWatcher();\n \n+  private static BpmnModelInstance createWorkflow(String jobType) {\n+    return Bpmn.createExecutableProcess(PROCESS_ID)\n+        .startEvent()\n+        .serviceTask(\n+            ELEMENT_ID,\n+            t ->\n+                t.zeebeTaskType(jobType)\n+                    .multiInstance(\n+                        b ->\n+                            b.zeebeInputCollection(INPUT_COLLECTION)\n+                                .zeebeInputElement(INPUT_ELEMENT)\n+                                .zeebeOutputElement(\"some_result\")\n+                                .zeebeOutputCollection(\"results\")))\n+        .endEvent()\n+        .done();\n+  }\n+\n   @Before\n   public void init() {\n-    ENGINE.deployment().withXmlResource(WORKFLOW).deploy();\n+    jobType = String.format(\"%s_%s\", JOB_TYPE_PREFIX, UUID.randomUUID());", "originalCommit": "1ff5076adf6972f864ec41cd1e050f60a7335bb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMyOTM1Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4098#discussion_r398329353", "bodyText": "This stream of jobs is not limited, for example, by calling .limit(3). So, it waits until the timeout.", "author": "saig0", "createdAt": "2020-03-26T05:43:27Z", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/incident/MultiInstanceIncidentTest.java", "diffHunk": "@@ -115,9 +128,61 @@ public void shouldCreateIncidentIfInputVariableIsNotAnArray() {\n         .hasElementId(elementInstance.getValue().getElementId())\n         .hasErrorType(ErrorType.EXTRACT_VALUE_ERROR)\n         .hasErrorMessage(\n-            \"Expected multi-instance input collection variable '\"\n+            \"Expected result of the expression '\"\n                 + INPUT_COLLECTION\n-                + \"' to be an ARRAY, but found 'STRING'.\");\n+                + \"' to be 'ARRAY', but was 'STRING'.\");\n+  }\n+\n+  @Test\n+  public void shouldCreateIncidentIfOutputElementExpressionEvaluationFailed() {\n+    // given\n+    final long workflowInstanceKey =\n+        ENGINE\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID)\n+            .withVariable(INPUT_COLLECTION, List.of(1, 2, 3))\n+            .create();\n+\n+    // when\n+    final List<Record<JobRecordValue>> created =\n+        RecordingExporter.jobRecords(JobIntent.CREATED)\n+            .withType(jobType)\n+            .withWorkflowInstanceKey(workflowInstanceKey)\n+            .asList();", "originalCommit": "1ff5076adf6972f864ec41cd1e050f60a7335bb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzOTQxNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4098#discussion_r398339416", "bodyText": "In this test, we need to complete only one job. This can be done with the shortcut:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final List<Record<JobRecordValue>> created =\n          \n          \n            \n                    RecordingExporter.jobRecords(JobIntent.CREATED)\n          \n          \n            \n                        .withType(jobType)\n          \n          \n            \n                        .withWorkflowInstanceKey(workflowInstanceKey)\n          \n          \n            \n                        .asList();\n          \n          \n            \n                assertThat(created).hasSize(3);\n          \n          \n            \n            \n          \n          \n            \n                final Record<JobBatchRecordValue> jobs = ENGINE.jobs().withType(jobType).activate();\n          \n          \n            \n                assertThat(jobs.getValue().getJobs()).hasSize(3);\n          \n          \n            \n            \n          \n          \n            \n                for (final long key : jobs.getValue().getJobKeys()) {\n          \n          \n            \n                  ENGINE.job().withKey(key).complete();\n          \n          \n            \n                }\n          \n          \n            \n                final List<Record<JobRecordValue>> completed =\n          \n          \n            \n                    RecordingExporter.jobRecords(JobIntent.COMPLETED)\n          \n          \n            \n                        .withType(jobType)\n          \n          \n            \n                        .withWorkflowInstanceKey(workflowInstanceKey)\n          \n          \n            \n                        .asList();\n          \n          \n            \n                assertThat(completed).hasSize(3);\n          \n          \n            \n                ENGINE.job().withType(jobType).ofInstance(workflowInstanceKey).complete();", "author": "saig0", "createdAt": "2020-03-26T06:19:39Z", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/incident/MultiInstanceIncidentTest.java", "diffHunk": "@@ -115,9 +128,61 @@ public void shouldCreateIncidentIfInputVariableIsNotAnArray() {\n         .hasElementId(elementInstance.getValue().getElementId())\n         .hasErrorType(ErrorType.EXTRACT_VALUE_ERROR)\n         .hasErrorMessage(\n-            \"Expected multi-instance input collection variable '\"\n+            \"Expected result of the expression '\"\n                 + INPUT_COLLECTION\n-                + \"' to be an ARRAY, but found 'STRING'.\");\n+                + \"' to be 'ARRAY', but was 'STRING'.\");\n+  }\n+\n+  @Test\n+  public void shouldCreateIncidentIfOutputElementExpressionEvaluationFailed() {\n+    // given\n+    final long workflowInstanceKey =\n+        ENGINE\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID)\n+            .withVariable(INPUT_COLLECTION, List.of(1, 2, 3))\n+            .create();\n+\n+    // when\n+    final List<Record<JobRecordValue>> created =\n+        RecordingExporter.jobRecords(JobIntent.CREATED)\n+            .withType(jobType)\n+            .withWorkflowInstanceKey(workflowInstanceKey)\n+            .asList();\n+    assertThat(created).hasSize(3);\n+\n+    final Record<JobBatchRecordValue> jobs = ENGINE.jobs().withType(jobType).activate();\n+    assertThat(jobs.getValue().getJobs()).hasSize(3);\n+\n+    for (final long key : jobs.getValue().getJobKeys()) {\n+      ENGINE.job().withKey(key).complete();\n+    }\n+    final List<Record<JobRecordValue>> completed =\n+        RecordingExporter.jobRecords(JobIntent.COMPLETED)\n+            .withType(jobType)\n+            .withWorkflowInstanceKey(workflowInstanceKey)\n+            .asList();\n+    assertThat(completed).hasSize(3);", "originalCommit": "1ff5076adf6972f864ec41cd1e050f60a7335bb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM0NTc0Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/4098#discussion_r398345746", "bodyText": "This is not the failure you're looking for \ud83e\udd16\nIt seems that the FEEL engine doesn't like variable names starting with some (which is a reserved word in FEEL).\nSince the output element variable would be created when the multi-instance element is activated, we need to use some kind of expression (e.g. sum(r)).", "author": "saig0", "createdAt": "2020-03-26T06:40:18Z", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/incident/MultiInstanceIncidentTest.java", "diffHunk": "@@ -115,9 +128,61 @@ public void shouldCreateIncidentIfInputVariableIsNotAnArray() {\n         .hasElementId(elementInstance.getValue().getElementId())\n         .hasErrorType(ErrorType.EXTRACT_VALUE_ERROR)\n         .hasErrorMessage(\n-            \"Expected multi-instance input collection variable '\"\n+            \"Expected result of the expression '\"\n                 + INPUT_COLLECTION\n-                + \"' to be an ARRAY, but found 'STRING'.\");\n+                + \"' to be 'ARRAY', but was 'STRING'.\");\n+  }\n+\n+  @Test\n+  public void shouldCreateIncidentIfOutputElementExpressionEvaluationFailed() {\n+    // given\n+    final long workflowInstanceKey =\n+        ENGINE\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID)\n+            .withVariable(INPUT_COLLECTION, List.of(1, 2, 3))\n+            .create();\n+\n+    // when\n+    final List<Record<JobRecordValue>> created =\n+        RecordingExporter.jobRecords(JobIntent.CREATED)\n+            .withType(jobType)\n+            .withWorkflowInstanceKey(workflowInstanceKey)\n+            .asList();\n+    assertThat(created).hasSize(3);\n+\n+    final Record<JobBatchRecordValue> jobs = ENGINE.jobs().withType(jobType).activate();\n+    assertThat(jobs.getValue().getJobs()).hasSize(3);\n+\n+    for (final long key : jobs.getValue().getJobKeys()) {\n+      ENGINE.job().withKey(key).complete();\n+    }\n+    final List<Record<JobRecordValue>> completed =\n+        RecordingExporter.jobRecords(JobIntent.COMPLETED)\n+            .withType(jobType)\n+            .withWorkflowInstanceKey(workflowInstanceKey)\n+            .asList();\n+    assertThat(completed).hasSize(3);\n+\n+    // then\n+    final Record<IncidentRecordValue> incident =\n+        RecordingExporter.incidentRecords(IncidentIntent.CREATED)\n+            .withWorkflowInstanceKey(workflowInstanceKey)\n+            .getFirst();\n+\n+    final Record<WorkflowInstanceRecordValue> elementInstance =\n+        RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETING)\n+            .withWorkflowInstanceKey(workflowInstanceKey)\n+            .withElementId(ELEMENT_ID)\n+            .getFirst();\n+\n+    Assertions.assertThat(incident.getValue())\n+        .hasElementInstanceKey(elementInstance.getKey())\n+        .hasElementId(elementInstance.getValue().getElementId())\n+        .hasErrorType(ErrorType.EXTRACT_VALUE_ERROR)\n+        .hasErrorMessage(\n+            \"failed to parse expression 'some_result': [1.12] error: \"\n+                + \"'in' expected but end of source found\\n\\nsome_result\\n           ^\");", "originalCommit": "1ff5076adf6972f864ec41cd1e050f60a7335bb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cf0dd4ec4dd926639060a34bb41e9aa2ee281d7c", "url": "https://github.com/camunda-cloud/zeebe/commit/cf0dd4ec4dd926639060a34bb41e9aa2ee281d7c", "message": "chore(engine): only validate outputElement expression if present", "committedDate": "2020-03-26T16:01:24Z", "type": "forcePushed"}, {"oid": "ee44066dc1f906a0630674291dda991ff51fd3d6", "url": "https://github.com/camunda-cloud/zeebe/commit/ee44066dc1f906a0630674291dda991ff51fd3d6", "message": "feat(engine): support feel expressions for multi instance activities\n\nSpecifically, this commit provides support for feel expressions for the\ninputCollection and outputElement variables for multi instance\nactivities.", "committedDate": "2020-03-26T16:02:33Z", "type": "commit"}, {"oid": "ee44066dc1f906a0630674291dda991ff51fd3d6", "url": "https://github.com/camunda-cloud/zeebe/commit/ee44066dc1f906a0630674291dda991ff51fd3d6", "message": "feat(engine): support feel expressions for multi instance activities\n\nSpecifically, this commit provides support for feel expressions for the\ninputCollection and outputElement variables for multi instance\nactivities.", "committedDate": "2020-03-26T16:02:33Z", "type": "forcePushed"}]}