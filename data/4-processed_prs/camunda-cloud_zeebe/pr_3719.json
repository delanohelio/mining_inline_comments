{"pr_number": 3719, "pr_title": "fix(broker): fixing interrupting event subprocesses", "pr_createdAt": "2020-01-20T14:53:11Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/3719", "timeline": [{"oid": "94b8fe104eda31f6252bdc5182cbd13f1ec9aa6b", "url": "https://github.com/camunda-cloud/zeebe/commit/94b8fe104eda31f6252bdc5182cbd13f1ec9aa6b", "message": "fix(broker): consume tokens when triggering event subprocess\n\n* when an interrupting event subprocess is triggered then terminate the child instances and consume waiting token (e.g. on a joining parallel gateway)", "committedDate": "2020-01-20T14:42:32Z", "type": "commit"}, {"oid": "ee34273fa74173a5eae8cd33c325d79b451db3e1", "url": "https://github.com/camunda-cloud/zeebe/commit/ee34273fa74173a5eae8cd33c325d79b451db3e1", "message": "fix(broker): close event subscriptions\n\n* close event subscriptions when an interrupting event subprocess is triggered", "committedDate": "2020-01-20T14:42:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDExNTM1NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3719#discussion_r370115355", "bodyText": "Just a minor nit pick: This was a little odd to me, I guess I'm so used to seeing a for when iterating, that I had to read the next line again looking for the z variable. It also seems that we can achieve the same without it, like:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                for (int z = 0; z < zombies; z++) {\n          \n          \n            \n                while (zombies-- > 0) {\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                for (int z = 0; z < zombies; z++) {\n          \n          \n            \n            while (zombies > 0) {\n          \n          \n            \n            zombies--;\n          \n          \n            \n            ...", "author": "MiguelPires", "createdAt": "2020-01-23T13:28:25Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/eventsubproc/EventSubProcessEventOccurredHandler.java", "diffHunk": "@@ -86,21 +94,28 @@ private long handleInterrupting(\n   private boolean interruptParentScope(final BpmnStepContext<T> context) {\n     final long scopeKey = context.getValue().getFlowScopeKey();\n     final List<ElementInstance> children = context.getElementInstanceState().getChildren(scopeKey);\n-    boolean waitForTermination = false;\n+\n+    int terminatedChildInstances = 0;\n \n     for (final ElementInstance child : children) {\n       if (child.canTerminate()) {\n-        waitForTermination = true;\n         context\n             .getOutput()\n             .appendFollowUpEvent(\n                 child.getKey(), WorkflowInstanceIntent.ELEMENT_TERMINATING, child.getValue());\n-      } else {\n-        context.getElementInstanceState().consumeToken(scopeKey);\n+\n+        terminatedChildInstances += 1;\n       }\n     }\n \n-    return waitForTermination;\n+    // consume all other active tokens (e.g. tokens waiting at a joining gateway)\n+    final int zombies =\n+        context.getFlowScopeInstance().getNumberOfActiveTokens() - terminatedChildInstances;\n+    for (int z = 0; z < zombies; z++) {", "originalCommit": "ee34273fa74173a5eae8cd33c325d79b451db3e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3Nzk3MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3719#discussion_r370477971", "bodyText": "Thanks @MiguelPires. I see your point. But as for now, I will not change it. There are 2 other places which almost the same code \ud83d\ude48 I hope to get rid of it soon.", "author": "saig0", "createdAt": "2020-01-24T05:24:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDExNTM1NQ=="}], "type": "inlineReview"}]}