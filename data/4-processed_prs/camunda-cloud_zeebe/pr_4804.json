{"pr_number": 4804, "pr_title": "Engine clean up", "pr_createdAt": "2020-06-24T04:27:57Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4804", "timeline": [{"oid": "e8843f86017363fc4d05b24d6dec5e4067f446df", "url": "https://github.com/camunda-cloud/zeebe/commit/e8843f86017363fc4d05b24d6dec5e4067f446df", "message": "chore(engine): clean up BPMN behaviors\n\n* don't expose the variable state\n* extract incident record wrapper", "committedDate": "2020-06-26T13:15:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMDE5MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4804#discussion_r446920190", "bodyText": "Can we change this message to the error message convention we normally use? Something like: Expected to ..., but ...", "author": "korthout", "createdAt": "2020-06-29T12:08:39Z", "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnElementProcessors.java", "diffHunk": "@@ -67,8 +67,8 @@ public BpmnElementProcessors(final BpmnBehaviors bpmnBehaviors) {\n \n     final var processor = (BpmnElementProcessor<T>) processors.get(bpmnElementType);\n     if (processor == null) {\n-      //      throw new UnsupportedOperationException(\n-      //          String.format(\"no processor found for BPMN element type '%s'\", bpmnElementType));\n+      throw new UnsupportedOperationException(\n+          String.format(\"no processor found for BPMN element type '%s'\", bpmnElementType));", "originalCommit": "e8843f86017363fc4d05b24d6dec5e4067f446df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0MTE1MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4804#discussion_r446941151", "bodyText": "Please document use of magic number -1 as a means to have an empty variable scope.", "author": "korthout", "createdAt": "2020-06-29T12:43:39Z", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/ExpressionProcessorCorrelationKeyResultHandlerTest.java", "diffHunk": "@@ -26,8 +25,7 @@\n \n   public static final String TEST_EXPRESSION = \"expression\";\n \n-  CorrelationKeyResultHandler sutResultHandler =\n-      new CorrelationKeyResultHandler(new MessageCorrelationKeyContext());\n+  CorrelationKeyResultHandler sutResultHandler = new CorrelationKeyResultHandler(-1);", "originalCommit": "e18e516260b87e34d42fa5634e38ec2d3d7aedec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0MTgzMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4804#discussion_r446941833", "bodyText": "Please document its intended use. EDIT: nice! I just noted this while going through the commits 1 by 1. Good work", "author": "korthout", "createdAt": "2020-06-29T12:44:43Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/SideEffects.java", "diffHunk": "@@ -0,0 +1,15 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor.workflow;\n+\n+import io.zeebe.engine.processor.SideEffectProducer;\n+\n+public interface SideEffects {", "originalCommit": "e18e516260b87e34d42fa5634e38ec2d3d7aedec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0NDM3NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4804#discussion_r446944374", "bodyText": "As the remaining behavior in this copy is almost the same as the init method below, should we reuse the assignments?", "author": "korthout", "createdAt": "2020-06-29T12:48:44Z", "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnElementContextImpl.java", "diffHunk": "@@ -120,31 +87,19 @@ public BpmnElementContext copy(\n       final WorkflowInstanceRecord recordValue,\n       final WorkflowInstanceIntent intent) {\n \n-    final var copy = new BpmnElementContextImpl(stepContext);\n+    final var copy = new BpmnElementContextImpl();\n     copy.elementInstanceKey = elementInstanceKey;\n     copy.recordValue = recordValue;\n     copy.intent = intent;\n \n-    // the step context is not initialized for the copy\n-    // because it is not needed yet", "originalCommit": "73db93f6ef01e0a4b8c7e10bc6e76779bd11e0c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1MTU0MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4804#discussion_r446951540", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * An action that is executed add the end of the processing. It will <b>not</b> be executed during\n          \n          \n            \n             * An action that is executed at the end of the processing. It will <b>not</b> be executed during", "author": "korthout", "createdAt": "2020-06-29T12:59:50Z", "path": "engine/src/main/java/io/zeebe/engine/processor/SideEffectProducer.java", "diffHunk": "@@ -7,14 +7,17 @@\n  */\n package io.zeebe.engine.processor;\n \n+/**\n+ * An action that is executed add the end of the processing. It will <b>not</b> be executed during", "originalCommit": "e8843f86017363fc4d05b24d6dec5e4067f446df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzMzI3Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4804#discussion_r449033277", "bodyText": "I'm still not really sure about this. The name implies something about the value, but it still seems like a magic number. Why is it 21?", "author": "korthout", "createdAt": "2020-07-02T14:14:50Z", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/ExpressionProcessorCorrelationKeyResultHandlerTest.java", "diffHunk": "@@ -23,9 +23,11 @@\n @RunWith(MockitoJUnitRunner.class)\n public class ExpressionProcessorCorrelationKeyResultHandlerTest {\n \n-  public static final String TEST_EXPRESSION = \"expression\";\n+  private static final String TEST_EXPRESSION = \"expression\";\n+  private static final long VARIABLE_SCOPE_KEY = 21;", "originalCommit": "638bfc2155e05f5dfb79c67b7f1f103dd27f1966", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM2NzAwNw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4804#discussion_r449367007", "bodyText": "The variable scope key is not used in the test but it needs to be passed into the context. So, I chose a random number :)", "author": "saig0", "createdAt": "2020-07-03T04:15:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzMzI3Nw=="}], "type": "inlineReview"}, {"oid": "c950710c1efc568b7aeaede8db2bc4137a874a26", "url": "https://github.com/camunda-cloud/zeebe/commit/c950710c1efc568b7aeaede8db2bc4137a874a26", "message": "chore(engine): clean up old BPMN processing\n\n* remove BPMN steps and lifecycle binding\n* don't wait for an event in the intermediate catch event processor if it is connected to an event-based gateway\n* replace step context in catch event behavior\n* replace message correlation context with scope key\n* remove step context, event output and workflow engine state\n* fix incident resolve processor to send to response\n* don't expose the variable state", "committedDate": "2020-07-03T04:13:41Z", "type": "commit"}, {"oid": "c950710c1efc568b7aeaede8db2bc4137a874a26", "url": "https://github.com/camunda-cloud/zeebe/commit/c950710c1efc568b7aeaede8db2bc4137a874a26", "message": "chore(engine): clean up old BPMN processing\n\n* remove BPMN steps and lifecycle binding\n* don't wait for an event in the intermediate catch event processor if it is connected to an event-based gateway\n* replace step context in catch event behavior\n* replace message correlation context with scope key\n* remove step context, event output and workflow engine state\n* fix incident resolve processor to send to response\n* don't expose the variable state", "committedDate": "2020-07-03T04:13:41Z", "type": "forcePushed"}]}