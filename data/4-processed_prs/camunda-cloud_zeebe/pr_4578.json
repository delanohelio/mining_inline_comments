{"pr_number": 4578, "pr_title": "Migrate end event processor", "pr_createdAt": "2020-05-22T09:52:11Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4578", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc4NTE5OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4578#discussion_r429785198", "bodyText": "Here, we bind the processor only for end events that have an event definition but not for the none end event.", "author": "saig0", "createdAt": "2020-05-25T07:51:20Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/transformer/EndEventTransformer.java", "diffHunk": "@@ -42,10 +42,22 @@ private void transformEventDefinition(\n     if (eventDefinition instanceof ErrorEventDefinition) {\n       transformErrorEventDefinition(\n           context, executableElement, (ErrorEventDefinition) eventDefinition);\n-\n-      executableElement.bindLifecycleState(\n-          WorkflowInstanceIntent.ELEMENT_ACTIVATED, BpmnStep.THROW_ERROR);\n     }\n+\n+    executableElement.bindLifecycleState(\n+        WorkflowInstanceIntent.ELEMENT_ACTIVATING, BpmnStep.BPMN_ELEMENT_PROCESSOR);\n+    executableElement.bindLifecycleState(\n+        WorkflowInstanceIntent.ELEMENT_ACTIVATED, BpmnStep.BPMN_ELEMENT_PROCESSOR);\n+    executableElement.bindLifecycleState(\n+        WorkflowInstanceIntent.ELEMENT_COMPLETING, BpmnStep.BPMN_ELEMENT_PROCESSOR);\n+    executableElement.bindLifecycleState(\n+        WorkflowInstanceIntent.ELEMENT_COMPLETED, BpmnStep.BPMN_ELEMENT_PROCESSOR);\n+    executableElement.bindLifecycleState(\n+        WorkflowInstanceIntent.ELEMENT_TERMINATING, BpmnStep.BPMN_ELEMENT_PROCESSOR);\n+    executableElement.bindLifecycleState(\n+        WorkflowInstanceIntent.ELEMENT_TERMINATED, BpmnStep.BPMN_ELEMENT_PROCESSOR);\n+    executableElement.bindLifecycleState(\n+        WorkflowInstanceIntent.EVENT_OCCURRED, BpmnStep.BPMN_ELEMENT_PROCESSOR);", "originalCommit": "dd5b8f8bd0e4809446f47e2e71ea076f5efefc61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MTk1NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4578#discussion_r429791955", "bodyText": "We should add a comment on why we don't perform any state transition. It may not be obvious that the error catch can only be caught by an interrupting boundary event or event sub-process.", "author": "saig0", "createdAt": "2020-05-25T08:05:16Z", "path": "engine/src/main/java/io/zeebe/engine/nwe/event/EndEventProcessor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.event;\n+\n+import static io.zeebe.util.EnsureUtil.ensureNotNull;\n+import static io.zeebe.util.EnsureUtil.ensureNotNullOrEmpty;\n+import static io.zeebe.util.buffer.BufferUtil.bufferAsString;\n+\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.nwe.BpmnElementProcessor;\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviors;\n+import io.zeebe.engine.nwe.behavior.BpmnEventPublicationBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnIncidentBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateTransitionBehavior;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableEndEvent;\n+import io.zeebe.protocol.record.value.ErrorType;\n+\n+public final class EndEventProcessor implements BpmnElementProcessor<ExecutableEndEvent> {\n+\n+  private final BpmnEventPublicationBehavior eventPublicationBehavior;\n+  private final BpmnIncidentBehavior incidentBehavior;\n+  private final BpmnStateBehavior stateBehavior;\n+  private final BpmnStateTransitionBehavior stateTransitionBehavior;\n+\n+  public EndEventProcessor(final BpmnBehaviors bpmnBehaviors) {\n+    eventPublicationBehavior = bpmnBehaviors.eventPublicationBehavior();\n+    incidentBehavior = bpmnBehaviors.incidentBehavior();\n+    stateBehavior = bpmnBehaviors.stateBehavior();\n+    stateTransitionBehavior = bpmnBehaviors.stateTransitionBehavior();\n+  }\n+\n+  @Override\n+  public Class<ExecutableEndEvent> getType() {\n+    return ExecutableEndEvent.class;\n+  }\n+\n+  @Override\n+  public void onActivating(final ExecutableEndEvent element, final BpmnElementContext context) {\n+    stateTransitionBehavior.transitionToActivated(context);\n+  }\n+\n+  @Override\n+  public void onActivated(final ExecutableEndEvent element, final BpmnElementContext context) {\n+    if (!element.hasError()) {\n+      return;\n+    }\n+\n+    final var error = element.getError();\n+    ensureNotNull(\"error\", error);\n+\n+    final var errorCode = error.getErrorCode();\n+    ensureNotNullOrEmpty(\"errorCode\", errorCode);\n+\n+    // the error must be caught at the parent or an upper scope\n+    final var flowScopeKey = context.getFlowScopeKey();\n+    final boolean errorThrownAndCaught =\n+        eventPublicationBehavior.throwErrorEvent(errorCode, flowScopeKey);\n+\n+    if (!errorThrownAndCaught) {\n+      final var errorMessage =\n+          String.format(\n+              \"Expected to throw an error event with the code '%s', but it was not caught.\",\n+              bufferAsString(errorCode));\n+      incidentBehavior.createIncident(\n+          ErrorType.UNHANDLED_ERROR_EVENT, errorMessage, context, context.getElementInstanceKey());\n+    }\n+  }", "originalCommit": "dd5b8f8bd0e4809446f47e2e71ea076f5efefc61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MzY1MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4578#discussion_r429793651", "bodyText": "I would prefer to pass the whole context in like we do in other places. I think that the context is safer than passing just a long value in it.", "author": "saig0", "createdAt": "2020-05-25T08:08:49Z", "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnEventPublicationBehavior.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.behavior;\n+\n+import io.zeebe.engine.processor.TypedStreamWriter;\n+import io.zeebe.engine.processor.workflow.handlers.endevent.ErrorEventHandler;\n+import io.zeebe.engine.state.ZeebeState;\n+import io.zeebe.engine.state.instance.ElementInstance;\n+import io.zeebe.engine.state.instance.ElementInstanceState;\n+import org.agrona.DirectBuffer;\n+\n+public final class BpmnEventPublicationBehavior {\n+\n+  private final ErrorEventHandler errorEventHandler;\n+  private final TypedStreamWriter streamWriter;\n+  private final ElementInstanceState elementInstanceState;\n+\n+  public BpmnEventPublicationBehavior(\n+      final ZeebeState zeebeState, final TypedStreamWriter streamWriter) {\n+    final var workflowState = zeebeState.getWorkflowState();\n+    final var keyGenerator = zeebeState.getKeyGenerator();\n+    elementInstanceState = workflowState.getElementInstanceState();\n+    errorEventHandler = new ErrorEventHandler(workflowState, keyGenerator);\n+    this.streamWriter = streamWriter;\n+  }\n+\n+  /**\n+   * Throws an error event that must be caught somewhere in the scope hierarchy.\n+   *\n+   * @return {@code true} if the error event is thrown and caught by an catch event\n+   * @see ErrorEventHandler#throwErrorEvent(DirectBuffer, ElementInstance, TypedStreamWriter)\n+   */\n+  public boolean throwErrorEvent(final DirectBuffer errorCode, final long flowScopeKey) {\n+    final var flowScopeInstance = elementInstanceState.getInstance(flowScopeKey);\n+    return errorEventHandler.throwErrorEvent(errorCode, flowScopeInstance, streamWriter);\n+  }", "originalCommit": "dd5b8f8bd0e4809446f47e2e71ea076f5efefc61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4d05c5d69acde58d0515335ebee1608bc0368e5b", "url": "https://github.com/camunda-cloud/zeebe/commit/4d05c5d69acde58d0515335ebee1608bc0368e5b", "message": "chore(engine): migrate end event processor\n\nchore(engine): remove unused code\n\nchore(engine): use endeventprocessor for all types of end events\n\nnot only for error end event\n\nchore(engine): apply review comments", "committedDate": "2020-05-26T13:29:08Z", "type": "commit"}, {"oid": "4d05c5d69acde58d0515335ebee1608bc0368e5b", "url": "https://github.com/camunda-cloud/zeebe/commit/4d05c5d69acde58d0515335ebee1608bc0368e5b", "message": "chore(engine): migrate end event processor\n\nchore(engine): remove unused code\n\nchore(engine): use endeventprocessor for all types of end events\n\nnot only for error end event\n\nchore(engine): apply review comments", "committedDate": "2020-05-26T13:29:08Z", "type": "forcePushed"}]}