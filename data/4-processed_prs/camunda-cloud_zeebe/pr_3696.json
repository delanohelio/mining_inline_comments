{"pr_number": 3696, "pr_title": "chore(qa): prevent false positive exceptions on ClusteringRule#after", "pr_createdAt": "2020-01-17T10:47:13Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/3696", "timeline": [{"oid": "339e308027fe023abe37c5f7f00c66ca328a3f33", "url": "https://github.com/camunda-cloud/zeebe/commit/339e308027fe023abe37c5f7f00c66ca328a3f33", "message": "chore(qa): prevent false positive exceptions on ClusteringRule#after", "committedDate": "2020-01-17T10:50:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NDY1MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/3696#discussion_r367884650", "bodyText": "Do you think 10 seconds is enough? Maybe we use the stepTimeout from the cfg?", "author": "Zelldon", "createdAt": "2020-01-17T11:10:12Z", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/ClusteringRule.java", "diffHunk": "@@ -208,16 +207,40 @@ protected void before() throws IOException {\n \n   @Override\n   protected void after() {\n+    final var latch = new CountDownLatch(brokers.size());\n+    brokers\n+        .values()\n+        .parallelStream()\n+        .forEach(\n+            broker -> {\n+              broker.close();\n+              latch.countDown();\n+            });\n \n-    brokers.values().parallelStream().forEach(Broker::close);\n+    // wait until the brokers are shutdown before deleting their data, otherwise exceptions will be\n+    // thrown and cause developers to waste time figuring out that they aren't production bugs\n+    try {\n+      latch.await(10, TimeUnit.SECONDS);", "originalCommit": "339e308027fe023abe37c5f7f00c66ca328a3f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NDgxNw==", "url": "https://github.com/camunda-cloud/zeebe/pull/3696#discussion_r367884817", "bodyText": "Who did this before?", "author": "Zelldon", "createdAt": "2020-01-17T11:10:36Z", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/ClusteringRule.java", "diffHunk": "@@ -208,16 +207,40 @@ protected void before() throws IOException {\n \n   @Override\n   protected void after() {\n+    final var latch = new CountDownLatch(brokers.size());\n+    brokers\n+        .values()\n+        .parallelStream()\n+        .forEach(\n+            broker -> {\n+              broker.close();\n+              latch.countDown();\n+            });\n \n-    brokers.values().parallelStream().forEach(Broker::close);\n+    // wait until the brokers are shutdown before deleting their data, otherwise exceptions will be\n+    // thrown and cause developers to waste time figuring out that they aren't production bugs\n+    try {\n+      latch.await(10, TimeUnit.SECONDS);\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      LOG.warn(\"Interrupted while waiting for {} brokers to close\", brokers.size());\n+    }\n+\n+    for (final var base : brokerBases.entrySet()) {\n+      try {\n+        FileUtil.deleteFolder(base.getValue().getAbsolutePath());", "originalCommit": "339e308027fe023abe37c5f7f00c66ca328a3f33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NTQ3MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3696#discussion_r367885471", "bodyText": "Ah I see it is done in the closeables. But why not anymore? Brokers should be closed now right?", "author": "Zelldon", "createdAt": "2020-01-17T11:12:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NDgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxMTEyNQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3696#discussion_r367911125", "bodyText": "I'm actually not sure why we keep track of the folders here and also in the closeables to be honest. My issue with closeables is basically that keeping track of resources differently (i.e. one is the resource itself, another is a closure capturing it) led to out of memory errors for me (since we removed things from brokerBase and brokers but not closeables).\nSo like I said, I'm actually not sure what the gain of closeables is for the brokers if we keep track of those values in another map anyway \ud83d\ude05", "author": "npepinpe", "createdAt": "2020-01-17T12:25:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NDgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxNDc3Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/3696#discussion_r367914773", "bodyText": "Furthermore if we use a temp folder rule, this should cleanup by himself right?", "author": "Zelldon", "createdAt": "2020-01-17T12:36:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NDgxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NTY4NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3696#discussion_r367885685", "bodyText": "nice catch", "author": "Zelldon", "createdAt": "2020-01-17T11:13:02Z", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/ClusteringRule.java", "diffHunk": "@@ -511,6 +532,7 @@ public void stopBroker(final int nodeId) {\n           broker.getConfig().getNetwork().getCommandApi().getAddress();\n       final List<Integer> brokersLeadingPartitions = getBrokersLeadingPartitions(socketAddress);\n       broker.close();\n+      closeables.remove(broker);", "originalCommit": "339e308027fe023abe37c5f7f00c66ca328a3f33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NjE1Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/3696#discussion_r367886157", "bodyText": "So close was also called twice? But this should be cleared after the test class?\nAh ok and if you run a test in a loop this piles up right", "author": "Zelldon", "createdAt": "2020-01-17T11:14:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NTY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NzQ1NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3696#discussion_r367887455", "bodyText": "Where do you see that the brokers are added to the closeables? Haven't found this in the code?", "author": "Zelldon", "createdAt": "2020-01-17T11:17:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NTY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxMTU0Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/3696#discussion_r367911542", "bodyText": "Uh, you're right, they aren't. I added it because I ran into this issue in the past and had to do that, apparently it was already removed, my bad \ud83d\ude05 Makes more sense to not have the brokers managed by closeables anyway", "author": "npepinpe", "createdAt": "2020-01-17T12:26:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NTY4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NzY4OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3696#discussion_r367887689", "bodyText": "Ah the parallel stream directly returns after beeing called?", "author": "Zelldon", "createdAt": "2020-01-17T11:18:26Z", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/ClusteringRule.java", "diffHunk": "@@ -208,16 +207,40 @@ protected void before() throws IOException {\n \n   @Override\n   protected void after() {\n+    final var latch = new CountDownLatch(brokers.size());\n+    brokers\n+        .values()\n+        .parallelStream()\n+        .forEach(\n+            broker -> {\n+              broker.close();\n+              latch.countDown();\n+            });\n \n-    brokers.values().parallelStream().forEach(Broker::close);", "originalCommit": "339e308027fe023abe37c5f7f00c66ca328a3f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cf0124c5f4b8002c6b3e4cf6856d949de7e1fc14", "url": "https://github.com/camunda-cloud/zeebe/commit/cf0124c5f4b8002c6b3e4cf6856d949de7e1fc14", "message": "chore(qa): close ClusteringRule in correct order", "committedDate": "2020-01-17T12:55:03Z", "type": "forcePushed"}, {"oid": "9d0c4b9afaa5194f24ad825477ad76ce3f78d57f", "url": "https://github.com/camunda-cloud/zeebe/commit/9d0c4b9afaa5194f24ad825477ad76ce3f78d57f", "message": "chore(qa): close ClusteringRule in correct order", "committedDate": "2020-01-20T07:44:50Z", "type": "forcePushed"}, {"oid": "081e21e5341e1855b54dbec64c3034356ba32cfc", "url": "https://github.com/camunda-cloud/zeebe/commit/081e21e5341e1855b54dbec64c3034356ba32cfc", "message": "chore(qa): fix creation of rule with parameters", "committedDate": "2020-01-20T09:03:46Z", "type": "forcePushed"}, {"oid": "cea339b54a768bb6e224c12d2149c9254f739484", "url": "https://github.com/camunda-cloud/zeebe/commit/cea339b54a768bb6e224c12d2149c9254f739484", "message": "chore(qa): close ClusteringRule in correct order", "committedDate": "2020-01-20T13:27:28Z", "type": "commit"}, {"oid": "cea339b54a768bb6e224c12d2149c9254f739484", "url": "https://github.com/camunda-cloud/zeebe/commit/cea339b54a768bb6e224c12d2149c9254f739484", "message": "chore(qa): close ClusteringRule in correct order", "committedDate": "2020-01-20T13:27:28Z", "type": "forcePushed"}]}