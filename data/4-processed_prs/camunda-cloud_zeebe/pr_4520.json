{"pr_number": 4520, "pr_title": "4339 gateway liveness probe", "pr_createdAt": "2020-05-14T11:04:44Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4520", "timeline": [{"oid": "5323bc74acea43d445e1cd6a06fa0a0c2aea7bc5", "url": "https://github.com/camunda-cloud/zeebe/commit/5323bc74acea43d445e1cd6a06fa0a0c2aea7bc5", "message": "chore(broker): refactoring and cleanup", "committedDate": "2020-05-14T11:08:04Z", "type": "forcePushed"}, {"oid": "75091b7931b435080abcfecc117f59be62291b62", "url": "https://github.com/camunda-cloud/zeebe/commit/75091b7931b435080abcfecc117f59be62291b62", "message": "chore(broker): refactoring and cleanup", "committedDate": "2020-05-14T11:10:40Z", "type": "forcePushed"}, {"oid": "c7aa77246b3b5605fc986d2295c139853ef209d8", "url": "https://github.com/camunda-cloud/zeebe/commit/c7aa77246b3b5605fc986d2295c139853ef209d8", "message": "chore(deps): update spring boot to v2.3.0.release", "committedDate": "2020-05-18T08:23:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM5NjA0Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426396042", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The health status for a standalone gateway is available at `{zeebe-gatewy}:8080/actuator/health`\n          \n          \n            \n            The health status for a standalone gateway is available at `{zeebe-gateway}:8080/actuator/health`", "author": "Zelldon", "createdAt": "2020-05-18T06:33:29Z", "path": "docs/src/appendix/gateway-health-probes.md", "diffHunk": "@@ -0,0 +1,95 @@\n+# Gateway Health Indicators and Probes\n+\n+The health status for a standalone gateway is available at `{zeebe-gatewy}:8080/actuator/health`", "originalCommit": "75091b7931b435080abcfecc117f59be62291b62", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ5ODcxNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426498714", "bodyText": "So this is for embedded gateways right?", "author": "Zelldon", "createdAt": "2020-05-18T09:40:57Z", "path": "dist/src/main/java/io/zeebe/EnvironmentHelper.java", "diffHunk": "@@ -31,4 +31,20 @@ public static boolean isProductionEnvironment(final Environment springEnvironmen\n \n     return result;\n   }\n+\n+  /**\n+   * This method disables the gateway's health indicator and probes before launching a broker. This\n+   * is necessary, because broker and gateway share the same classpath. Therefore, all health\n+   * indicators targeted at the gateway, will by default also be enabled for the broker. This method\n+   * is here to prevent this.\n+   *\n+   * <p>Note that currently this is a very crude implementation which takes advantage of the fact\n+   * that no Spring health indicators are currently implemented for the broker. Therefore, we can\n+   * simply disable all. In the future, this implementation will need to become more sophisticated.\n+   *\n+   * <p>This method must be called by the broker before launching Spring system.\n+   */\n+  public static void disableGatewayHealthIndicatorsAndProbes() {", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4MzQzMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r428083433", "bodyText": "This is for brokers. With or without embedded gateway. For brokers the liveness probes of the (standalone) gateway are currently all disabled.", "author": "pihme", "createdAt": "2020-05-20T15:00:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ5ODcxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ5OTI5OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426499298", "bodyText": "So we disable it here and enable it again if we have a embedded gateway?", "author": "Zelldon", "createdAt": "2020-05-18T09:41:56Z", "path": "dist/src/main/java/io/zeebe/broker/StandaloneBroker.java", "diffHunk": "@@ -38,6 +38,8 @@\n   public static void main(final String[] args) throws Exception {\n     System.setProperty(\"spring.banner.location\", \"classpath:/assets/zeebe_broker_banner.txt\");\n \n+    EnvironmentHelper.disableGatewayHealthIndicatorsAndProbes();", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwMDA1Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426500052", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The started probe is available at `{zeebe-gatewy}:8080/actuator/health/startup`\n          \n          \n            \n            The started probe is available at `{zeebe-gateway}:8080/actuator/health/startup`", "author": "Zelldon", "createdAt": "2020-05-18T09:43:11Z", "path": "docs/src/appendix/gateway-health-probes.md", "diffHunk": "@@ -0,0 +1,95 @@\n+# Gateway Health Indicators and Probes\n+\n+The health status for a standalone gateway is available at `{zeebe-gatewy}:8080/actuator/health`\n+\n+The following health indicators are enabled by default\n+* Gateway Started - checks whether the Gateway is running (i.e. not currently starting and not yet shut down)\n+* Gateway Responsive - checks whether the Gateway can handle a request within a given timeout\n+* Gateway Cluster Awareness - checks whether the Gateway is aware of other nodes in the cluster\n+* Gateway Partition Leader Awareness - checks whether the Gateway is aware of partition leaders in the cluster\n+* Disk Space - checks that the free disk space is greater than 10 MB\n+* Memory - checks that at least 10% of max memory are still available\n+\n+Health indicators are set to sensible defaults. For specific use cases, it might be necessary to customize health probes.\n+\n+## Startup Probe\n+The started probe is available at `{zeebe-gatewy}:8080/actuator/health/startup`", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwMDI0MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426500241", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The liveness probe is available at `{zeebe-gatewy}:8080/actuator/health/liveness`\n          \n          \n            \n            The liveness probe is available at `{zeebe-gateway}:8080/actuator/health/liveness`", "author": "Zelldon", "createdAt": "2020-05-18T09:43:30Z", "path": "docs/src/appendix/gateway-health-probes.md", "diffHunk": "@@ -0,0 +1,95 @@\n+# Gateway Health Indicators and Probes\n+\n+The health status for a standalone gateway is available at `{zeebe-gatewy}:8080/actuator/health`\n+\n+The following health indicators are enabled by default\n+* Gateway Started - checks whether the Gateway is running (i.e. not currently starting and not yet shut down)\n+* Gateway Responsive - checks whether the Gateway can handle a request within a given timeout\n+* Gateway Cluster Awareness - checks whether the Gateway is aware of other nodes in the cluster\n+* Gateway Partition Leader Awareness - checks whether the Gateway is aware of partition leaders in the cluster\n+* Disk Space - checks that the free disk space is greater than 10 MB\n+* Memory - checks that at least 10% of max memory are still available\n+\n+Health indicators are set to sensible defaults. For specific use cases, it might be necessary to customize health probes.\n+\n+## Startup Probe\n+The started probe is available at `{zeebe-gatewy}:8080/actuator/health/startup`\n+\n+In the default configuration this is merely an alias for the _Gateway Started_ health indicator. Other configurations are possible (see below)\n+\n+## Liveness Probe\n+The liveness probe is available at `{zeebe-gatewy}:8080/actuator/health/liveness`", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwMTI1NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426501255", "bodyText": "Are we talking about java heap or real memory?", "author": "Zelldon", "createdAt": "2020-05-18T09:45:16Z", "path": "docs/src/appendix/gateway-health-probes.md", "diffHunk": "@@ -0,0 +1,95 @@\n+# Gateway Health Indicators and Probes\n+\n+The health status for a standalone gateway is available at `{zeebe-gatewy}:8080/actuator/health`\n+\n+The following health indicators are enabled by default\n+* Gateway Started - checks whether the Gateway is running (i.e. not currently starting and not yet shut down)\n+* Gateway Responsive - checks whether the Gateway can handle a request within a given timeout\n+* Gateway Cluster Awareness - checks whether the Gateway is aware of other nodes in the cluster\n+* Gateway Partition Leader Awareness - checks whether the Gateway is aware of partition leaders in the cluster\n+* Disk Space - checks that the free disk space is greater than 10 MB\n+* Memory - checks that at least 10% of max memory are still available\n+\n+Health indicators are set to sensible defaults. For specific use cases, it might be necessary to customize health probes.\n+\n+## Startup Probe\n+The started probe is available at `{zeebe-gatewy}:8080/actuator/health/startup`\n+\n+In the default configuration this is merely an alias for the _Gateway Started_ health indicator. Other configurations are possible (see below)\n+\n+## Liveness Probe\n+The liveness probe is available at `{zeebe-gatewy}:8080/actuator/health/liveness`\n+\n+It is based on the health indicators mentioned above.\n+\n+In the default configuration, the liveness probe is comprised of the following health indiactors:\n+\n+* Gateway Started - checks whether the Gateway is running (i.e. not currently starting and not yet shut down)\n+* Liveness Gateway Responsive - checks whether the Gateway can handle a request within an ample timeout, but will only report a *DOWN* health status after the underlying health indicator is down for more than 10 minutes\n+* Liveness Gateway Cluster Awareness - based on Gateway cluster awareness, but will only report a *DOWN* health status after the underlying health indicator is down for more than 5 minutes\n+* Liveness Gateway Partition Leader Awareness - based on Gateway partition leader awareness, but will only report a *DOWN* health status after the underlying health indicator is down for more than 5 minutes\n+* Liveness Disk Space - checks that the free disk space is greater than 1 MB\n+* Liveness Memory - checks that at least 1% of max memory are still available", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3ODU2Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426578566", "bodyText": "Java heap", "author": "pihme", "createdAt": "2020-05-18T12:10:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwMTI1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkxMTQxNw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r429911417", "bodyText": "should we make this clear then?", "author": "Zelldon", "createdAt": "2020-05-25T12:34:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwMTI1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwMzY1NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426503654", "bodyText": "Is here something missing ?", "author": "Zelldon", "createdAt": "2020-05-18T09:48:59Z", "path": "docs/src/appendix/gateway-health-probes.md", "diffHunk": "@@ -0,0 +1,95 @@\n+# Gateway Health Indicators and Probes\n+\n+The health status for a standalone gateway is available at `{zeebe-gatewy}:8080/actuator/health`\n+\n+The following health indicators are enabled by default\n+* Gateway Started - checks whether the Gateway is running (i.e. not currently starting and not yet shut down)\n+* Gateway Responsive - checks whether the Gateway can handle a request within a given timeout\n+* Gateway Cluster Awareness - checks whether the Gateway is aware of other nodes in the cluster\n+* Gateway Partition Leader Awareness - checks whether the Gateway is aware of partition leaders in the cluster\n+* Disk Space - checks that the free disk space is greater than 10 MB\n+* Memory - checks that at least 10% of max memory are still available\n+\n+Health indicators are set to sensible defaults. For specific use cases, it might be necessary to customize health probes.\n+\n+## Startup Probe\n+The started probe is available at `{zeebe-gatewy}:8080/actuator/health/startup`\n+\n+In the default configuration this is merely an alias for the _Gateway Started_ health indicator. Other configurations are possible (see below)\n+\n+## Liveness Probe\n+The liveness probe is available at `{zeebe-gatewy}:8080/actuator/health/liveness`\n+\n+It is based on the health indicators mentioned above.\n+\n+In the default configuration, the liveness probe is comprised of the following health indiactors:\n+\n+* Gateway Started - checks whether the Gateway is running (i.e. not currently starting and not yet shut down)\n+* Liveness Gateway Responsive - checks whether the Gateway can handle a request within an ample timeout, but will only report a *DOWN* health status after the underlying health indicator is down for more than 10 minutes\n+* Liveness Gateway Cluster Awareness - based on Gateway cluster awareness, but will only report a *DOWN* health status after the underlying health indicator is down for more than 5 minutes\n+* Liveness Gateway Partition Leader Awareness - based on Gateway partition leader awareness, but will only report a *DOWN* health status after the underlying health indicator is down for more than 5 minutes\n+* Liveness Disk Space - checks that the free disk space is greater than 1 MB\n+* Liveness Memory - checks that at least 1% of max memory are still available\n+\n+Note that health indicators with the *liveness* prefix are intended to be customized for the livness probe. This allows defining tighter thresholds (e.g. for free memory 1% for liveness vs. 10% for health), as well as adding tolerance for short downtimes (e.g. gateway has no awereness of other nodes in the cluster for more than 5 minutes).\n+\n+## Customizing Health Probes\n+\n+Global settings for all health indicators:\n+* `management.health.defaults.enabled=true` - enables (default) or disables all health indicators\n+* `management.endpoint.health.show-details=always/never` - toggles whether a summary or details (default) of the health indicators will be returned\n+\n+### Startup Probe\n+Settings for started probe:\n+* `management.endpoint.health.group.startup.show-details=always` - toggles whether a summary or details (default) of the startup probe will be returned\n+* `management.endpoint.health.group.startup.include=gatewayStarted` - defines which health indicators are included in the startup probe\n+\n+### Liveness Probe\n+Settings for liveness probe:\n+* `management.endpoint.health.group.liveness.show-details=always` - toggles whether a summary or details (default) of the liveness probe will be returned\n+* `management.endpoint.health.group.liveness.include=gatewayStarted,livenessGatewayResponsive,livenessGatewayClusterAwareness,livenessGatewayPartitionLeaderAwareness,livenessDiskSpace,livenessMemory` - defines which health indicators are included in the liveness probe\n+\n+Note that the individual contributing health indicators of the liveness probe can be configured as well (see below).\n+\n+### Gateway Started\n+Settings for gateway started health indicator:\n+* `management.health.gateway-started.enabled=true` - enables (default) or disables this health indicator\n+\n+### Gateway Responsive\n+\n+Settings for gateway repsonsiveness health indicator:\n+* `management.health.gateway-responsive.enabled=true` - enables (default) or disables this health indicator\n+* `management.health.gateway-responsive.requestTimeout=500ms` - defines the timeout for the request; if the test completes before the timeout, the health status is _UP_, otherwise it is _DOWN_\n+* `management.health.liveness.gateway-responsive.requestTimeout=5s` - defines the timeout for the request for liveness probe; if the test completes before the timeout", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNDA2MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426504061", "bodyText": "Which request we mean here? The request for asking how the health is?", "author": "Zelldon", "createdAt": "2020-05-18T09:49:37Z", "path": "docs/src/appendix/gateway-health-probes.md", "diffHunk": "@@ -0,0 +1,95 @@\n+# Gateway Health Indicators and Probes\n+\n+The health status for a standalone gateway is available at `{zeebe-gatewy}:8080/actuator/health`\n+\n+The following health indicators are enabled by default\n+* Gateway Started - checks whether the Gateway is running (i.e. not currently starting and not yet shut down)\n+* Gateway Responsive - checks whether the Gateway can handle a request within a given timeout\n+* Gateway Cluster Awareness - checks whether the Gateway is aware of other nodes in the cluster\n+* Gateway Partition Leader Awareness - checks whether the Gateway is aware of partition leaders in the cluster\n+* Disk Space - checks that the free disk space is greater than 10 MB\n+* Memory - checks that at least 10% of max memory are still available\n+\n+Health indicators are set to sensible defaults. For specific use cases, it might be necessary to customize health probes.\n+\n+## Startup Probe\n+The started probe is available at `{zeebe-gatewy}:8080/actuator/health/startup`\n+\n+In the default configuration this is merely an alias for the _Gateway Started_ health indicator. Other configurations are possible (see below)\n+\n+## Liveness Probe\n+The liveness probe is available at `{zeebe-gatewy}:8080/actuator/health/liveness`\n+\n+It is based on the health indicators mentioned above.\n+\n+In the default configuration, the liveness probe is comprised of the following health indiactors:\n+\n+* Gateway Started - checks whether the Gateway is running (i.e. not currently starting and not yet shut down)\n+* Liveness Gateway Responsive - checks whether the Gateway can handle a request within an ample timeout, but will only report a *DOWN* health status after the underlying health indicator is down for more than 10 minutes\n+* Liveness Gateway Cluster Awareness - based on Gateway cluster awareness, but will only report a *DOWN* health status after the underlying health indicator is down for more than 5 minutes\n+* Liveness Gateway Partition Leader Awareness - based on Gateway partition leader awareness, but will only report a *DOWN* health status after the underlying health indicator is down for more than 5 minutes\n+* Liveness Disk Space - checks that the free disk space is greater than 1 MB\n+* Liveness Memory - checks that at least 1% of max memory are still available\n+\n+Note that health indicators with the *liveness* prefix are intended to be customized for the livness probe. This allows defining tighter thresholds (e.g. for free memory 1% for liveness vs. 10% for health), as well as adding tolerance for short downtimes (e.g. gateway has no awereness of other nodes in the cluster for more than 5 minutes).\n+\n+## Customizing Health Probes\n+\n+Global settings for all health indicators:\n+* `management.health.defaults.enabled=true` - enables (default) or disables all health indicators\n+* `management.endpoint.health.show-details=always/never` - toggles whether a summary or details (default) of the health indicators will be returned\n+\n+### Startup Probe\n+Settings for started probe:\n+* `management.endpoint.health.group.startup.show-details=always` - toggles whether a summary or details (default) of the startup probe will be returned\n+* `management.endpoint.health.group.startup.include=gatewayStarted` - defines which health indicators are included in the startup probe\n+\n+### Liveness Probe\n+Settings for liveness probe:\n+* `management.endpoint.health.group.liveness.show-details=always` - toggles whether a summary or details (default) of the liveness probe will be returned\n+* `management.endpoint.health.group.liveness.include=gatewayStarted,livenessGatewayResponsive,livenessGatewayClusterAwareness,livenessGatewayPartitionLeaderAwareness,livenessDiskSpace,livenessMemory` - defines which health indicators are included in the liveness probe\n+\n+Note that the individual contributing health indicators of the liveness probe can be configured as well (see below).\n+\n+### Gateway Started\n+Settings for gateway started health indicator:\n+* `management.health.gateway-started.enabled=true` - enables (default) or disables this health indicator\n+\n+### Gateway Responsive\n+\n+Settings for gateway repsonsiveness health indicator:\n+* `management.health.gateway-responsive.enabled=true` - enables (default) or disables this health indicator\n+* `management.health.gateway-responsive.requestTimeout=500ms` - defines the timeout for the request; if the test completes before the timeout, the health status is _UP_, otherwise it is _DOWN_", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3ODk5Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426578992", "bodyText": "The get topology request. It is the the only one that doesn't require a connection to the brokers. Also it is the only request without side-effects", "author": "pihme", "createdAt": "2020-05-18T12:11:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNDA2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNDQyNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426504426", "bodyText": "downtime of a leader?", "author": "Zelldon", "createdAt": "2020-05-18T09:50:13Z", "path": "docs/src/appendix/gateway-health-probes.md", "diffHunk": "@@ -0,0 +1,95 @@\n+# Gateway Health Indicators and Probes\n+\n+The health status for a standalone gateway is available at `{zeebe-gatewy}:8080/actuator/health`\n+\n+The following health indicators are enabled by default\n+* Gateway Started - checks whether the Gateway is running (i.e. not currently starting and not yet shut down)\n+* Gateway Responsive - checks whether the Gateway can handle a request within a given timeout\n+* Gateway Cluster Awareness - checks whether the Gateway is aware of other nodes in the cluster\n+* Gateway Partition Leader Awareness - checks whether the Gateway is aware of partition leaders in the cluster\n+* Disk Space - checks that the free disk space is greater than 10 MB\n+* Memory - checks that at least 10% of max memory are still available\n+\n+Health indicators are set to sensible defaults. For specific use cases, it might be necessary to customize health probes.\n+\n+## Startup Probe\n+The started probe is available at `{zeebe-gatewy}:8080/actuator/health/startup`\n+\n+In the default configuration this is merely an alias for the _Gateway Started_ health indicator. Other configurations are possible (see below)\n+\n+## Liveness Probe\n+The liveness probe is available at `{zeebe-gatewy}:8080/actuator/health/liveness`\n+\n+It is based on the health indicators mentioned above.\n+\n+In the default configuration, the liveness probe is comprised of the following health indiactors:\n+\n+* Gateway Started - checks whether the Gateway is running (i.e. not currently starting and not yet shut down)\n+* Liveness Gateway Responsive - checks whether the Gateway can handle a request within an ample timeout, but will only report a *DOWN* health status after the underlying health indicator is down for more than 10 minutes\n+* Liveness Gateway Cluster Awareness - based on Gateway cluster awareness, but will only report a *DOWN* health status after the underlying health indicator is down for more than 5 minutes\n+* Liveness Gateway Partition Leader Awareness - based on Gateway partition leader awareness, but will only report a *DOWN* health status after the underlying health indicator is down for more than 5 minutes\n+* Liveness Disk Space - checks that the free disk space is greater than 1 MB\n+* Liveness Memory - checks that at least 1% of max memory are still available\n+\n+Note that health indicators with the *liveness* prefix are intended to be customized for the livness probe. This allows defining tighter thresholds (e.g. for free memory 1% for liveness vs. 10% for health), as well as adding tolerance for short downtimes (e.g. gateway has no awereness of other nodes in the cluster for more than 5 minutes).\n+\n+## Customizing Health Probes\n+\n+Global settings for all health indicators:\n+* `management.health.defaults.enabled=true` - enables (default) or disables all health indicators\n+* `management.endpoint.health.show-details=always/never` - toggles whether a summary or details (default) of the health indicators will be returned\n+\n+### Startup Probe\n+Settings for started probe:\n+* `management.endpoint.health.group.startup.show-details=always` - toggles whether a summary or details (default) of the startup probe will be returned\n+* `management.endpoint.health.group.startup.include=gatewayStarted` - defines which health indicators are included in the startup probe\n+\n+### Liveness Probe\n+Settings for liveness probe:\n+* `management.endpoint.health.group.liveness.show-details=always` - toggles whether a summary or details (default) of the liveness probe will be returned\n+* `management.endpoint.health.group.liveness.include=gatewayStarted,livenessGatewayResponsive,livenessGatewayClusterAwareness,livenessGatewayPartitionLeaderAwareness,livenessDiskSpace,livenessMemory` - defines which health indicators are included in the liveness probe\n+\n+Note that the individual contributing health indicators of the liveness probe can be configured as well (see below).\n+\n+### Gateway Started\n+Settings for gateway started health indicator:\n+* `management.health.gateway-started.enabled=true` - enables (default) or disables this health indicator\n+\n+### Gateway Responsive\n+\n+Settings for gateway repsonsiveness health indicator:\n+* `management.health.gateway-responsive.enabled=true` - enables (default) or disables this health indicator\n+* `management.health.gateway-responsive.requestTimeout=500ms` - defines the timeout for the request; if the test completes before the timeout, the health status is _UP_, otherwise it is _DOWN_\n+* `management.health.liveness.gateway-responsive.requestTimeout=5s` - defines the timeout for the request for liveness probe; if the test completes before the timeout\n+* `management.health.liveness.gateway-responsive.maxdowntime=10m` - - defines the maximum downtime before the liveness health indicator for responsiveness will flip\n+\n+### Gateway Cluster Awareness ###\n+\n+Settings for gateway cluster awareness health indicator:\n+* `management.health.gateway-clusterawareness.enabled=true` - enables (default) or disables this health indicator (and its liveness counterpart)\n+* `management.health.liveness.gateway-clusterawareness.maxdowntime=5m` - defines the maximum downtime before the liveness health indicator for cluster awareness will flip\n+\n+\n+### Gateway Partition Leader Awareness ###\n+\n+Settings for gateway partition leader awareness health indicator:\n+* `management.health.gateway-partitionleaderawareness.enabled=true` - enables (default) or disables this health indicator (and its liveness counterpart)\n+* `management.health.liveness.gateway-partitionleaderawareness.maxdowntime=5m` - defines the maximum downtime before the liveness health indicator for partition leader awareness will flip", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNTQyMg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426505422", "bodyText": "Again here the question are we talking about real memory or heap? Because the jvm could occupy all the memory, but still the application will work since it has its own memory model, gc and stuff.", "author": "Zelldon", "createdAt": "2020-05-18T09:51:45Z", "path": "docs/src/appendix/gateway-health-probes.md", "diffHunk": "@@ -0,0 +1,95 @@\n+# Gateway Health Indicators and Probes\n+\n+The health status for a standalone gateway is available at `{zeebe-gatewy}:8080/actuator/health`\n+\n+The following health indicators are enabled by default\n+* Gateway Started - checks whether the Gateway is running (i.e. not currently starting and not yet shut down)\n+* Gateway Responsive - checks whether the Gateway can handle a request within a given timeout\n+* Gateway Cluster Awareness - checks whether the Gateway is aware of other nodes in the cluster\n+* Gateway Partition Leader Awareness - checks whether the Gateway is aware of partition leaders in the cluster\n+* Disk Space - checks that the free disk space is greater than 10 MB\n+* Memory - checks that at least 10% of max memory are still available\n+\n+Health indicators are set to sensible defaults. For specific use cases, it might be necessary to customize health probes.\n+\n+## Startup Probe\n+The started probe is available at `{zeebe-gatewy}:8080/actuator/health/startup`\n+\n+In the default configuration this is merely an alias for the _Gateway Started_ health indicator. Other configurations are possible (see below)\n+\n+## Liveness Probe\n+The liveness probe is available at `{zeebe-gatewy}:8080/actuator/health/liveness`\n+\n+It is based on the health indicators mentioned above.\n+\n+In the default configuration, the liveness probe is comprised of the following health indiactors:\n+\n+* Gateway Started - checks whether the Gateway is running (i.e. not currently starting and not yet shut down)\n+* Liveness Gateway Responsive - checks whether the Gateway can handle a request within an ample timeout, but will only report a *DOWN* health status after the underlying health indicator is down for more than 10 minutes\n+* Liveness Gateway Cluster Awareness - based on Gateway cluster awareness, but will only report a *DOWN* health status after the underlying health indicator is down for more than 5 minutes\n+* Liveness Gateway Partition Leader Awareness - based on Gateway partition leader awareness, but will only report a *DOWN* health status after the underlying health indicator is down for more than 5 minutes\n+* Liveness Disk Space - checks that the free disk space is greater than 1 MB\n+* Liveness Memory - checks that at least 1% of max memory are still available\n+\n+Note that health indicators with the *liveness* prefix are intended to be customized for the livness probe. This allows defining tighter thresholds (e.g. for free memory 1% for liveness vs. 10% for health), as well as adding tolerance for short downtimes (e.g. gateway has no awereness of other nodes in the cluster for more than 5 minutes).\n+\n+## Customizing Health Probes\n+\n+Global settings for all health indicators:\n+* `management.health.defaults.enabled=true` - enables (default) or disables all health indicators\n+* `management.endpoint.health.show-details=always/never` - toggles whether a summary or details (default) of the health indicators will be returned\n+\n+### Startup Probe\n+Settings for started probe:\n+* `management.endpoint.health.group.startup.show-details=always` - toggles whether a summary or details (default) of the startup probe will be returned\n+* `management.endpoint.health.group.startup.include=gatewayStarted` - defines which health indicators are included in the startup probe\n+\n+### Liveness Probe\n+Settings for liveness probe:\n+* `management.endpoint.health.group.liveness.show-details=always` - toggles whether a summary or details (default) of the liveness probe will be returned\n+* `management.endpoint.health.group.liveness.include=gatewayStarted,livenessGatewayResponsive,livenessGatewayClusterAwareness,livenessGatewayPartitionLeaderAwareness,livenessDiskSpace,livenessMemory` - defines which health indicators are included in the liveness probe\n+\n+Note that the individual contributing health indicators of the liveness probe can be configured as well (see below).\n+\n+### Gateway Started\n+Settings for gateway started health indicator:\n+* `management.health.gateway-started.enabled=true` - enables (default) or disables this health indicator\n+\n+### Gateway Responsive\n+\n+Settings for gateway repsonsiveness health indicator:\n+* `management.health.gateway-responsive.enabled=true` - enables (default) or disables this health indicator\n+* `management.health.gateway-responsive.requestTimeout=500ms` - defines the timeout for the request; if the test completes before the timeout, the health status is _UP_, otherwise it is _DOWN_\n+* `management.health.liveness.gateway-responsive.requestTimeout=5s` - defines the timeout for the request for liveness probe; if the test completes before the timeout\n+* `management.health.liveness.gateway-responsive.maxdowntime=10m` - - defines the maximum downtime before the liveness health indicator for responsiveness will flip\n+\n+### Gateway Cluster Awareness ###\n+\n+Settings for gateway cluster awareness health indicator:\n+* `management.health.gateway-clusterawareness.enabled=true` - enables (default) or disables this health indicator (and its liveness counterpart)\n+* `management.health.liveness.gateway-clusterawareness.maxdowntime=5m` - defines the maximum downtime before the liveness health indicator for cluster awareness will flip\n+\n+\n+### Gateway Partition Leader Awareness ###\n+\n+Settings for gateway partition leader awareness health indicator:\n+* `management.health.gateway-partitionleaderawareness.enabled=true` - enables (default) or disables this health indicator (and its liveness counterpart)\n+* `management.health.liveness.gateway-partitionleaderawareness.maxdowntime=5m` - defines the maximum downtime before the liveness health indicator for partition leader awareness will flip\n+\n+### Disk Space\n+This is arguably the least critical health indicator given that the standalone gateway does not write to disk. The only exception may be the writing of log files, which depend on the log configuration.\n+\n+Settings for disk space health indicator:\n+* `management.health.diskspace.enabled=true` - enables (default) or disables this health indicator (and its liveness counterpart)\n+* `management.health.diskspace.threshold=10MB` - defines the threshold for the required free disk space\n+* `management.health.diskspace.path=.` - defines the path for which the free disk space is examined\n+* `management.health.liveness.diskspace.threshold=1MB` - defines the threshold for the required free disk space for liveness\n+* `management.health.liveness.diskspace.path=.` - defines the path for which the free disk space for liveness is examined\n+\n+### Memory\n+This health indicator examines free memory.", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3OTQ5OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426579499", "bodyText": "heap", "author": "pihme", "createdAt": "2020-05-18T12:12:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNTQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNjg2Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426506862", "bodyText": "This is only for standalone gateway right? But we can rename the file because spring will not detect it right? I'm was just think whether it might be a bit confusing with the different application files \ud83d\ude48", "author": "Zelldon", "createdAt": "2020-05-18T09:54:03Z", "path": "dist/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,8 @@\n+management.endpoint.health.show-details=always", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA5Mzk1MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r428093951", "bodyText": "This is for standalone gateway, yes. Personally, I would prefer to have two deliverables Broker and Gateway. Then the whole configuration topic would be clearer.\nHowever, this now works for the gateway, and as part of #4547 I will look at how to combine Broker and Gateway. I also thought about using profiles, but am not sure yet whether this is a good idea or not.", "author": "pihme", "createdAt": "2020-05-20T15:13:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNjg2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNzkzMQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426507931", "bodyText": "I think we discussed it before, but not 100% sure. Would it be possible to use the metrics port?", "author": "Zelldon", "createdAt": "2020-05-18T09:55:44Z", "path": "docs/src/operations/health.md", "diffHunk": "@@ -29,6 +30,53 @@ If it is unhealthy, then it can mean three things:\n  * **it is only temporarily unhealthy**, e.g. due to environmental circumstances such as temporary I/O issues\n  * **it is partially unhealthy**, could mean that one or more partitions is unhealthy, while the rest of them are able to process workflows\n  * **it is completely dead**\n- \n+\n [Metrics](/operations/metrics.html) give more insight into which partition is healthy or unhealthy.\n When a broker becomes unhealthy, it is recommended to check the logs to see what went wrong.\n+\n+\n+## Gateway\n+\n+Zeebe gateway exposes three HTTP endpoints to query its health status:\n+\n+* Health Status - `http://{zeebe-gateway}:8080/actuator/health`", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MDIyNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426580226", "bodyText": "Yes, and no. This is where there is overlap with #4547. We talked about it and decided that we could park it at a different port as long as #4547 will make sure to move it to the same port the metrics are running under", "author": "pihme", "createdAt": "2020-05-18T12:13:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNzkzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxMDYyOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426510628", "bodyText": "Why we need the client here? And why twice \ud83d\ude05", "author": "Zelldon", "createdAt": "2020-05-18T10:00:05Z", "path": "gateway/pom.xml", "diffHunk": "@@ -165,6 +167,27 @@\n       <artifactId>spring-context</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-actuator</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-autoconfigure</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-actuator-autoconfigure</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.zeebe</groupId>\n+      <artifactId>zeebe-client-java</artifactId>", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MDY4OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426580689", "bodyText": "The gateway is talking to itself in the same way a client would. That's why we need the Java client. Unless there is a different way.", "author": "pihme", "createdAt": "2020-05-18T12:14:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxMDYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MDc3MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426580771", "bodyText": "And no, we don't need it twice", "author": "pihme", "createdAt": "2020-05-18T12:14:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxMDYyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxMzMxOQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426513319", "bodyText": "Do you know why this is a builder not a static factory method? Can I add more context here?", "author": "Zelldon", "createdAt": "2020-05-18T10:04:37Z", "path": "gateway/src/main/java/io/zeebe/gateway/impl/probes/health/ClusterAwarenessHealthIndicator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.impl.probes.health;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterState;\n+import java.util.function.Supplier;\n+import org.springframework.boot.actuate.health.Health;\n+import org.springframework.boot.actuate.health.HealthIndicator;\n+\n+/**\n+ * Health indicator that signals whether the gateway is aware of any nodes in the cluster. If the\n+ * gateway is not aware of any nodes this indicates a potential network topology problem\n+ */\n+public class ClusterAwarenessHealthIndicator implements HealthIndicator {\n+\n+  private final Supplier<BrokerClusterState> clusterStateSupplier;\n+\n+  public ClusterAwarenessHealthIndicator(final Supplier<BrokerClusterState> clusterStateSupplier) {\n+    this.clusterStateSupplier = requireNonNull(clusterStateSupplier);\n+  }\n+\n+  @Override\n+  public Health health() {\n+    final var clusterState = clusterStateSupplier.get();\n+\n+    if (clusterState == null) {\n+      return Health.down().build();\n+    } else {\n+      if (clusterState.getBrokers().isEmpty()) {\n+        return Health.down().build();", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MjA3Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426582076", "bodyText": "You, you can add details. (there are other code lines where I did this)", "author": "pihme", "createdAt": "2020-05-18T12:17:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxMzMxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxNTQyNw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426515427", "bodyText": "Not sure whether it is necessary to explain it on these configurations?", "author": "Zelldon", "createdAt": "2020-05-18T10:08:20Z", "path": "gateway/src/main/java/io/zeebe/gateway/impl/probes/health/PartitionLeaderAwarenessHealthIndicatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.impl.probes.health;\n+\n+import io.zeebe.gateway.impl.SpringGatewayBridge;\n+import org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;\n+import org.springframework.boot.actuate.autoconfigure.health.HealthContributorAutoConfiguration;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for {@link\n+ * PartitionLeaderAwarenessHealthIndicator}.\n+ */\n+@Configuration(proxyBeanMethods = false)\n+@ConditionalOnEnabledHealthIndicator(\"gateway-partitionleaderawareness\")\n+@AutoConfigureBefore(HealthContributorAutoConfiguration.class)\n+public class PartitionLeaderAwarenessHealthIndicatorAutoConfiguration {\n+\n+  @Bean\n+  @ConditionalOnMissingBean(name = \"gatewayPartitionLeaderHealthIndicator\")\n+  public PartitionLeaderAwarenessHealthIndicator gatewayPartitionLeaderAwarenessHealthIndicator(\n+      SpringGatewayBridge gatewayBridge) {\n+    /**\n+     * Here we effectively chain two suppliers to decouple their creation in time.\n+     *\n+     * <p>The first supplier created here and passed into the constructor of the health indicator is", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxODY0Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426518643", "bodyText": "Currently not 100% sure how useful this really is it feels also a bit odd that we use the client in the gateway \ud83d\ude04 .\nMy problem currently is that I see that the topology is build in the gateway and we can directly answer this on a request. Every other requests will go a different bath and use the brokerClient to enqueue requests, which are then send to the broker etc.\nThis means if you have a lot of requests they all will enqueue in the BrokerClient, but with this indicator you will not see that actual a workflow instance creation takes really long because you requested the topology.", "author": "Zelldon", "createdAt": "2020-05-18T10:13:57Z", "path": "gateway/src/main/java/io/zeebe/gateway/impl/probes/health/ResponsiveHealthIndicator.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.impl.probes.health;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.zeebe.client.ZeebeClient;\n+import io.zeebe.client.ZeebeClientBuilder;\n+import io.zeebe.gateway.impl.configuration.GatewayCfg;\n+import java.time.Duration;\n+import org.springframework.boot.actuate.health.Health;\n+import org.springframework.boot.actuate.health.Health.Builder;\n+import org.springframework.boot.actuate.health.HealthIndicator;\n+\n+/**\n+ * Health indicator that sends a request to the gateway to check its responsiveness. The request\n+ * must yield a response within a given timeout for this health indicator to report {@code\n+ * Status.UP}\n+ */\n+public class ResponsiveHealthIndicator implements HealthIndicator {", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA5ODIzMg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r428098232", "bodyText": "Will be happy to discuss this.\nMy rationales were as follows:\n\nTopology is the only request I know of that has no side effects\nWhen researching best practices for health check one recommendation was to make a local health check, and not an aggregate health check of all the stuff you depend upon. As such, a request that is relayed to a broker is not ideal\nAs part of the failure case documentation we wanted to make sure that\n\nthere is no deadlock in the Gateway request processing thread\nthe Gatewa is not so overwhelmed with requests that it cannot accept any additional requests\n\n\nBoth these situation would be detected by this health check as it is implemented now", "author": "pihme", "createdAt": "2020-05-20T15:19:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxODY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5ODU3Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r429898576", "bodyText": "Both these situation would be detected by this health check as it is implemented now\n\nIs this really the case? Because what I think what we miss here is the transport part to the broker.\nI created an example see below:\n\nWe just check that the point to endpoint and topology manager works, but not the direction to BrokerClient and Broker works. Do you get what I mean?", "author": "Zelldon", "createdAt": "2020-05-25T12:03:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxODY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwMTM0Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r429901346", "bodyText": "Sure, but the gateway would be healthy even if the network (to the broker) is down. The gateway is responsive, it is not blocked by deadlock and not overwhelmed by requests.\nWe could add another health check, whether the Gateway ca reach all brokers, but I am not sure it's a good idea.\nHappy to discuss it though.", "author": "pihme", "createdAt": "2020-05-25T12:10:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxODY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkxNTkxNw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r429915917", "bodyText": "Hm, I somehow have the feeling that we miss a part. What I thought is that it might be possible to answer the topology request but the broker client component is somehow overhelmed because of so many requests. But yeah maybe the current approach is fine for the first step.", "author": "Zelldon", "createdAt": "2020-05-25T12:45:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxODY0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyMDAwOQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426520009", "bodyText": "Do we need to make the status volatile in the gateway?", "author": "Zelldon", "createdAt": "2020-05-18T10:16:31Z", "path": "gateway/src/main/java/io/zeebe/gateway/impl/probes/health/StartedHealthIndicator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.impl.probes.health;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.zeebe.gateway.Gateway.Status;\n+import io.zeebe.gateway.Loggers;\n+import java.util.function.Supplier;\n+import org.slf4j.Logger;\n+import org.springframework.boot.actuate.health.Health;\n+import org.springframework.boot.actuate.health.HealthIndicator;\n+\n+/**\n+ * Health indicator that signals whether the gateway is starting {@code DOWN }, running {@code UP}\n+ * or shut down {@code OUT_OF_SERVICE}\n+ */\n+public class StartedHealthIndicator implements HealthIndicator {\n+\n+  public static final Logger LOG = Loggers.GATEWAY_LOGGER;\n+\n+  private final Supplier<Status> gatewayStatusSupplier;\n+\n+  public StartedHealthIndicator(final Supplier<Status> gatewayStatusSupplier) {\n+    this.gatewayStatusSupplier = requireNonNull(gatewayStatusSupplier);\n+  }\n+\n+  @Override\n+  public Health health() {\n+    final Status status = gatewayStatusSupplier.get();", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA5OTgxMQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r428099811", "bodyText": "Good catch", "author": "pihme", "createdAt": "2020-05-20T15:21:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyMDAwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyMDIzMg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426520232", "bodyText": "I think this is not necessary to explain", "author": "Zelldon", "createdAt": "2020-05-18T10:16:58Z", "path": "gateway/src/main/java/io/zeebe/gateway/impl/probes/health/StartedHealthIndicatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.impl.probes.health;\n+\n+import io.zeebe.gateway.impl.SpringGatewayBridge;\n+import org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;\n+import org.springframework.boot.actuate.autoconfigure.health.HealthContributorAutoConfiguration;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/** {@link EnableAutoConfiguration Auto-configuration} for {@link StartedHealthIndicator}. */\n+@Configuration(proxyBeanMethods = false)\n+@ConditionalOnEnabledHealthIndicator(\"gateway-started\")\n+@AutoConfigureBefore(HealthContributorAutoConfiguration.class)\n+public class StartedHealthIndicatorAutoConfiguration {\n+\n+  @Bean\n+  @ConditionalOnMissingBean(name = \"gatewayStartedHealthIndicator\")\n+  public StartedHealthIndicator gatewayStartedHealthIndicator(SpringGatewayBridge gatewayBridge) {\n+    /**\n+     * Here we effectively chain two suppliers to decouple their creation in time.\n+     *\n+     * <p>The first supplier created here and passed into the constructor of the health indicator is\n+     * created first. This happens very early in the application's life cycle. At this point in", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyMTk5OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426521999", "bodyText": "Do we really need this abstract class?", "author": "Zelldon", "createdAt": "2020-05-18T10:20:11Z", "path": "gateway/src/main/java/io/zeebe/gateway/impl/probes/liveness/LivenessPartitionLeaderAwarenessHealthIndicatorProperties.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.impl.probes.liveness;\n+\n+import io.zeebe.util.health.AbstractDelayedHealthIndicatorProperties;\n+import java.time.Duration;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(prefix = \"management.health.liveness.gateway-partitionleaderawareness\")\n+public class LivenessPartitionLeaderAwarenessHealthIndicatorProperties\n+    extends AbstractDelayedHealthIndicatorProperties {", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwMDU1MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r428100551", "bodyText": "What bothers you about it?", "author": "pihme", "createdAt": "2020-05-20T15:22:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyMTk5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyMzE1OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426523158", "bodyText": "We could also use optional instead of returning and handling null", "author": "Zelldon", "createdAt": "2020-05-18T10:22:19Z", "path": "gateway/src/main/java/io/zeebe/gateway/impl/SpringGatewayBridge.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.impl;\n+\n+import io.zeebe.gateway.Gateway.Status;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterState;\n+import java.util.function.Supplier;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Helper class that allows Spring beans to access information from the gateway code that is not\n+ * managed by Spring\n+ */\n+@Component\n+public class SpringGatewayBridge {\n+\n+  private Supplier<Status> gatewayStatusSupplier;\n+  private Supplier<BrokerClusterState> clusterStateSupplier;\n+\n+  public void registerGatewayStatusSupplier(Supplier<Status> gatewayStatusSupplier) {\n+    this.gatewayStatusSupplier = gatewayStatusSupplier;\n+  }\n+\n+  public void registerClusterStateSupplier(Supplier<BrokerClusterState> clusterStateSupplier) {\n+    this.clusterStateSupplier = clusterStateSupplier;\n+  }\n+\n+  public Status getGatewayStatus() {\n+    if (gatewayStatusSupplier != null) {\n+      return gatewayStatusSupplier.get();\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public BrokerClusterState getClusterState() {", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyNTA3Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426525073", "bodyText": "could we move this in the before?", "author": "Zelldon", "createdAt": "2020-05-18T10:25:54Z", "path": "gateway/src/test/java/io/zeebe/gateway/impl/probes/health/LivenessClusterAwarenessHealthIndicatorAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.impl.probes.health;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import io.zeebe.gateway.impl.SpringGatewayBridge;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterState;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.boot.actuate.health.Health;\n+import org.springframework.boot.actuate.health.Status;\n+\n+public class LivenessClusterAwarenessHealthIndicatorAutoConfigurationTest {\n+\n+  private SpringGatewayBridge helperGatewayBridge;\n+\n+  private ClusterAwarenessHealthIndicatorAutoConfiguration sutAutoConfig;\n+\n+  @Before\n+  public void setUp() {\n+    helperGatewayBridge = new SpringGatewayBridge();\n+    sutAutoConfig = new ClusterAwarenessHealthIndicatorAutoConfiguration();\n+  }\n+\n+  @Test\n+  public void shouldCreateHealthIndicatorEvenBeforeClusterStateSupplierIsRegistered() {\n+    // when\n+    final var actual = sutAutoConfig.gatewayClusterAwarenessHealthIndicator(helperGatewayBridge);\n+\n+    // then\n+    assertThat(actual).isNotNull();\n+  }\n+\n+  @Test\n+  public void\n+      shouldCreateHealthIndicatorThatReportsHealthBasedOnResultOfRegisteredClusterStateSupplier() {\n+    // given\n+    final BrokerClusterState mockClusterState = mock(BrokerClusterState.class);\n+    when(mockClusterState.getBrokers()).thenReturn(List.of(1));\n+\n+    final Supplier<BrokerClusterState> stateSupplier = () -> mockClusterState;\n+    final var healthIndicator =", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyMTAzMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r428121030", "bodyText": "Not sure which line you are referring to.\nBut in general no. This setup is only used in this test and is not applicable in the other test method.\nAnd in general I prefer to have self contained tests - which means you only need to read the test method to understand what is going on.", "author": "pihme", "createdAt": "2020-05-20T15:50:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyNTA3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyNTUwOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426525508", "bodyText": "should we test what is reported when no supplier is registred?", "author": "Zelldon", "createdAt": "2020-05-18T10:26:41Z", "path": "gateway/src/test/java/io/zeebe/gateway/impl/probes/health/LivenessClusterAwarenessHealthIndicatorAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.impl.probes.health;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import io.zeebe.gateway.impl.SpringGatewayBridge;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterState;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.boot.actuate.health.Health;\n+import org.springframework.boot.actuate.health.Status;\n+\n+public class LivenessClusterAwarenessHealthIndicatorAutoConfigurationTest {\n+\n+  private SpringGatewayBridge helperGatewayBridge;\n+\n+  private ClusterAwarenessHealthIndicatorAutoConfiguration sutAutoConfig;\n+\n+  @Before\n+  public void setUp() {\n+    helperGatewayBridge = new SpringGatewayBridge();\n+    sutAutoConfig = new ClusterAwarenessHealthIndicatorAutoConfiguration();\n+  }\n+\n+  @Test\n+  public void shouldCreateHealthIndicatorEvenBeforeClusterStateSupplierIsRegistered() {\n+    // when\n+    final var actual = sutAutoConfig.gatewayClusterAwarenessHealthIndicator(helperGatewayBridge);\n+\n+    // then\n+    assertThat(actual).isNotNull();\n+  }\n+\n+  @Test\n+  public void\n+      shouldCreateHealthIndicatorThatReportsHealthBasedOnResultOfRegisteredClusterStateSupplier() {\n+    // given\n+    final BrokerClusterState mockClusterState = mock(BrokerClusterState.class);\n+    when(mockClusterState.getBrokers()).thenReturn(List.of(1));\n+\n+    final Supplier<BrokerClusterState> stateSupplier = () -> mockClusterState;\n+    final var healthIndicator =\n+        sutAutoConfig.gatewayClusterAwarenessHealthIndicator(helperGatewayBridge);\n+\n+    // when\n+    helperGatewayBridge.registerClusterStateSupplier(stateSupplier);\n+    final Health actualHealth = healthIndicator.health();", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MzgyMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426583823", "bodyText": "There is a dedicated test method for that shouldCreateHealthIndicatorEvenBeforeClusterStateSupplierIsRegistered()", "author": "pihme", "createdAt": "2020-05-18T12:20:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyNTUwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyNjc0NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426526745", "bodyText": "Why we need that?", "author": "Zelldon", "createdAt": "2020-05-18T10:29:04Z", "path": "gateway/src/main/java/io/zeebe/gateway/impl/configuration/GatewayCfg.java", "diffHunk": "@@ -32,6 +33,11 @@ public void init() {\n   public void init(final String defaultHost) {\n     network.init(defaultHost);\n     monitoring.init(defaultHost);\n+    initialized = true;\n+  }\n+\n+  public boolean isInitialized() {", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MTYzNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426581636", "bodyText": "Before it is initialized, the host might be null. And then I run into NPEs in the ResponsiveHealthIndiactor", "author": "pihme", "createdAt": "2020-05-18T12:16:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyNjc0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyODA1Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426528057", "bodyText": "what is these sut prefix thing ? \ud83d\ude05", "author": "Zelldon", "createdAt": "2020-05-18T10:31:34Z", "path": "gateway/src/test/java/io/zeebe/gateway/impl/probes/health/PartitionLeaderAwarenessHealthIndicatorTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.impl.probes.health;\n+\n+import static java.util.Collections.emptyList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterState;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import org.junit.Test;\n+import org.springframework.boot.actuate.health.Status;\n+\n+public class PartitionLeaderAwarenessHealthIndicatorTest {\n+\n+  @Test\n+  public void shouldRejectNullInConstructor() {\n+    // when + then\n+    assertThatThrownBy(() -> new PartitionLeaderAwarenessHealthIndicator(null))\n+        .isInstanceOf(NullPointerException.class);\n+  }\n+\n+  @Test\n+  public void shouldReportDownIfSupplierReturnsNull() {\n+    // given\n+    final Supplier<BrokerClusterState> stateSupplier = () -> null;\n+    final var sutHealthIndicator = new PartitionLeaderAwarenessHealthIndicator(stateSupplier);", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4Mzk3MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426583971", "bodyText": "systemUnderTest", "author": "pihme", "createdAt": "2020-05-18T12:20:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyODA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5OTY4MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r429899680", "bodyText": "ok interesting :D", "author": "Zelldon", "createdAt": "2020-05-25T12:05:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyODA1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzMDc2OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426530769", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldReportDownStatusIfRequestSucceeds()\n          \n          \n            \n              public void shouldReportUpStatusIfRequestSucceeds()", "author": "Zelldon", "createdAt": "2020-05-18T10:36:51Z", "path": "gateway/src/test/java/io/zeebe/gateway/impl/probes/health/ResponsiveHealthIndicatorTest.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.impl.probes.health;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n+\n+import io.zeebe.client.ZeebeClient;\n+import io.zeebe.client.api.ZeebeFuture;\n+import io.zeebe.client.api.command.TopologyRequestStep1;\n+import io.zeebe.gateway.impl.configuration.GatewayCfg;\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import org.junit.Test;\n+import org.springframework.boot.actuate.health.Status;\n+\n+public class ResponsiveHealthIndicatorTest {\n+  private static final Duration TEST_DURATION = Duration.ofSeconds(123);\n+  private static final GatewayCfg TEST_CFG = new GatewayCfg();\n+  private static final String CERTIFICATE_CHAIN_PATH =\n+      ResponsiveHealthIndicatorTest.class\n+          .getClassLoader()\n+          .getResource(\"security/test-chain.cert.pem\")\n+          .getPath();\n+\n+  static {\n+    TEST_CFG.getNetwork().setHost(\"testhost\");\n+    TEST_CFG.getNetwork().setPort(1234);\n+    TEST_CFG.getSecurity().setEnabled(false);\n+    TEST_CFG.init();\n+  }\n+\n+  @Test\n+  public void shouldRejectNullConfigInConstructor() {\n+    assertThatThrownBy(() -> new ResponsiveHealthIndicator(null, TEST_DURATION))\n+        .isExactlyInstanceOf(NullPointerException.class);\n+  }\n+\n+  @Test\n+  public void shouldRejectNullDurationInConstructor() {\n+    assertThatThrownBy(() -> new ResponsiveHealthIndicator(TEST_CFG, null))\n+        .isExactlyInstanceOf(NullPointerException.class);\n+  }\n+\n+  @Test\n+  public void shouldRejectZeroDurationIn() {\n+    assertThatThrownBy(() -> new ResponsiveHealthIndicator(TEST_CFG, Duration.ofSeconds(0)))\n+        .isExactlyInstanceOf(IllegalArgumentException.class);\n+  }\n+\n+  @Test\n+  public void shouldRejectNegativeDurationIn() {\n+    assertThatThrownBy(() -> new ResponsiveHealthIndicator(TEST_CFG, Duration.ofSeconds(-10)))\n+        .isExactlyInstanceOf(IllegalArgumentException.class);\n+  }\n+\n+  @Test\n+  public void shouldReportUnknownIfNoZeebeClientCanBeSupplied() {\n+    // given\n+    final var healthIndicator = new ResponsiveHealthIndicator(TEST_CFG, TEST_DURATION);\n+\n+    final var spyHealthIndicator = spy(healthIndicator);\n+    when(spyHealthIndicator.supplyZeebeClient()).thenReturn(null);\n+\n+    // when\n+    final var actualHealth = spyHealthIndicator.health();\n+\n+    // then\n+    assertThat(actualHealth).isNotNull();\n+    assertThat(actualHealth.getStatus()).isSameAs(Status.UNKNOWN);\n+  }\n+\n+  @Test\n+  public void shouldReportDownStatusIfRequestThrowsException()\n+      throws ExecutionException, InterruptedException {\n+    // given\n+    final var mockZeebeClient = mock(ZeebeClient.class);\n+    final var mockTopologyRequestStep1 = mock(TopologyRequestStep1.class);\n+    final var mockZeebeFuture = mock(ZeebeFuture.class);\n+\n+    // build mock chain that throws an exception on get() method call\n+    when(mockZeebeClient.newTopologyRequest()).thenReturn(mockTopologyRequestStep1);\n+    when(mockTopologyRequestStep1.send()).thenReturn(mockZeebeFuture);\n+    when(mockZeebeFuture.get()).thenThrow(new InterruptedException());\n+\n+    final var healthIndicator = new ResponsiveHealthIndicator(TEST_CFG, TEST_DURATION);\n+    final var spyHealthIndicator = spy(healthIndicator);\n+    when(spyHealthIndicator.supplyZeebeClient()).thenReturn(mockZeebeClient);\n+\n+    // when\n+    final var actualHealth = spyHealthIndicator.health();\n+\n+    // then\n+    assertThat(actualHealth).isNotNull();\n+    assertThat(actualHealth.getStatus()).isSameAs(Status.DOWN);\n+  }\n+\n+  @Test\n+  public void shouldReportDownStatusIfRequestSucceeds()", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1MzU5OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426553598", "bodyText": "\ud83d\ude48\nI don't like these kind of time based tests \ud83d\ude05 Could we test it differently? In our actor scheduler for example we can increase the clock, to test such things easily. I assume this is here not easily possible.\nBut we could just call the method twice to emulate such thing? Time based tests tend to be flaky quite often or take unnecessary long.", "author": "Zelldon", "createdAt": "2020-05-18T11:21:27Z", "path": "util/src/test/java/io/zeebe/util/health/DelayedHealthIndicatorTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.util.health;\n+\n+import java.time.Duration;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.boot.actuate.health.Health;\n+import org.springframework.boot.actuate.health.HealthIndicator;\n+import org.springframework.boot.actuate.health.Status;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DelayedHealthIndicatorTest {\n+\n+  private static final Duration TEST_MAX_DOWNTIME = Duration.ofMillis(50);\n+\n+  @Mock private HealthIndicator mockHealthIndicator;\n+\n+  @Test\n+  public void shouldRejectNullHealthIndicatorInConstructor() {\n+    Assertions.assertThatThrownBy(() -> new DelayedHealthIndicator(null, TEST_MAX_DOWNTIME))\n+        .isInstanceOf(NullPointerException.class);\n+  }\n+\n+  @Test\n+  public void shouldRejectNullMaxDowntimeInConstructor() {\n+    Assertions.assertThatThrownBy(() -> new DelayedHealthIndicator(mockHealthIndicator, null))\n+        .isInstanceOf(NullPointerException.class);\n+  }\n+\n+  @Test\n+  public void shouldRejectNegativeMaxDowntimeInConstructor() {\n+    Assertions.assertThatThrownBy(\n+            () -> new DelayedHealthIndicator(mockHealthIndicator, Duration.ofMillis(-50)))\n+        .isInstanceOf(IllegalArgumentException.class);\n+  }\n+\n+  @Test\n+  public void shouldReportUnknownHealthStatusIfAskedBeforeDelegateHealthIndicatorWasCalled() {\n+    // given\n+    final var sutDelayedHealthIndicator =\n+        new DelayedHealthIndicator(mockHealthIndicator, TEST_MAX_DOWNTIME);\n+\n+    // when\n+    final Health actualHealth = sutDelayedHealthIndicator.health();\n+\n+    // then\n+    Assertions.assertThat(actualHealth).isNotNull();\n+    Assertions.assertThat(actualHealth.getStatus()).isEqualTo(Status.UNKNOWN);\n+  }\n+\n+  @Test\n+  public void\n+      shouldReportHealthStatusOfDelegateHealthIndicatorIfBackendHealthIndicatorWasNeverUp() {\n+    // given\n+    final var sutDelayedHealthIndicator =\n+        new DelayedHealthIndicator(mockHealthIndicator, TEST_MAX_DOWNTIME);\n+\n+    Mockito.when(mockHealthIndicator.health()).thenReturn(Health.down().build());\n+\n+    // when\n+    sutDelayedHealthIndicator.checkHealth();\n+    final Health actualHealth = sutDelayedHealthIndicator.health();\n+\n+    // then\n+    Assertions.assertThat(actualHealth).isNotNull();\n+    Assertions.assertThat(actualHealth.getStatus()).isEqualTo(Status.DOWN);\n+  }\n+\n+  @Test\n+  public void\n+      shouldReportHealthStatusUpWhenBackendHealthIndicatorWasUpInThePastAndIsTemporarilyDown() {\n+    // given\n+    final var sutDelayedHealthIndicator =\n+        new DelayedHealthIndicator(mockHealthIndicator, TEST_MAX_DOWNTIME);\n+    // backend health indicator was up in the past\n+    Mockito.when(mockHealthIndicator.health()).thenReturn(Health.up().build());\n+    sutDelayedHealthIndicator.checkHealth();\n+\n+    // when\n+    // backend health indicator goes down\n+    Mockito.when(mockHealthIndicator.health()).thenReturn(Health.down().build());\n+    sutDelayedHealthIndicator.checkHealth();\n+\n+    final Health actualHealth = sutDelayedHealthIndicator.health();\n+\n+    // then\n+    // delayed health indicator is still up\n+    Assertions.assertThat(actualHealth).isNotNull();\n+    Assertions.assertThat(actualHealth.getStatus()).isEqualTo(Status.UP);\n+  }\n+\n+  @Test\n+  public void\n+      shouldReportHealthStatusDownWhenBackendHealthIndicatorWasUpInThePastAndIsDownForMoreThanMaxDowntime()\n+          throws InterruptedException {\n+    // given\n+    final var sutDelayedHealthIndicator =\n+        new DelayedHealthIndicator(mockHealthIndicator, TEST_MAX_DOWNTIME);\n+    // backend health indicator was up in the past\n+    Mockito.when(mockHealthIndicator.health()).thenReturn(Health.up().build());\n+    sutDelayedHealthIndicator.checkHealth();\n+\n+    // when\n+    // backend health indicator goes down\n+    Mockito.when(mockHealthIndicator.health()).thenReturn(Health.down().build());\n+    sutDelayedHealthIndicator.checkHealth();\n+\n+    final Health actualHealthImmediate = sutDelayedHealthIndicator.health();\n+\n+    // wait for more then the configured max downtime\n+    Thread.sleep(100);", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4ODAzMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r428088030", "bodyText": "In principle I agree with you. However, I think this can be a pragmatic exception. I reduced the time to 20 ms, so it won't take so long. I also ran them several times and they always gave me the same result.\nI think passing in an ActorClockwould be overkill. Also not sure which method you want to call twice to emulate the passing of time.\nI would like to keep it this way, to be honest.", "author": "pihme", "createdAt": "2020-05-20T15:06:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1MzU5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1NDk4OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426554989", "bodyText": "Do we need all of these in the util module?", "author": "Zelldon", "createdAt": "2020-05-18T11:24:18Z", "path": "util/pom.xml", "diffHunk": "@@ -52,6 +54,26 @@\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-core</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-context</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot</artifactId>", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4NDU4Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426584582", "bodyText": "Yes, if we want to have the shared health indicators here. We could also move them to gateway, which would also move the dependencies.", "author": "pihme", "createdAt": "2020-05-18T12:21:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1NDk4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkxNzk4OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r429917988", "bodyText": "Probably fine to move them into gateway. I assume we don't need them somewhere else?", "author": "Zelldon", "createdAt": "2020-05-25T12:50:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1NDk4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1NTc2NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426555765", "bodyText": "I would expect in the integration test that we have the standalone gateway and broker running and test the health/liveness checks?", "author": "Zelldon", "createdAt": "2020-05-18T11:25:52Z", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/gateway/GatewayHealthIndicatorsIntegrationTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.it.gateway;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.data.Offset.offset;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import io.zeebe.broker.it.gateway.GatewayHealthIndicatorsIntegrationTest.Config;\n+import io.zeebe.gateway.Gateway.Status;\n+import io.zeebe.gateway.impl.SpringGatewayBridge;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterState;\n+import io.zeebe.gateway.impl.probes.health.ClusterAwarenessHealthIndicator;\n+import io.zeebe.gateway.impl.probes.health.PartitionLeaderAwarenessHealthIndicator;\n+import io.zeebe.gateway.impl.probes.health.StartedHealthIndicator;\n+import io.zeebe.util.health.MemoryHealthIndicator;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.actuate.health.Health;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(classes = Config.class)\n+public class GatewayHealthIndicatorsIntegrationTest {", "originalCommit": "c7aa77246b3b5605fc986d2295c139853ef209d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1Njc4OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r426556789", "bodyText": "It feels like this should be moved to the broker/gateways tests? And here we should relay tests that this returns up and healthy etc if you requests the url and everything is started.", "author": "Zelldon", "createdAt": "2020-05-18T11:27:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1NTc2NQ=="}], "type": "inlineReview"}, {"oid": "da9639a1efcdf1ec4f45e1983c6015a7b2d9d923", "url": "https://github.com/camunda-cloud/zeebe/commit/da9639a1efcdf1ec4f45e1983c6015a7b2d9d923", "message": "chore(broker): add integration test for gateway liveness probe", "committedDate": "2020-05-22T07:29:43Z", "type": "forcePushed"}, {"oid": "22945c4bb94a13c45c77af639522f5fd852e163f", "url": "https://github.com/camunda-cloud/zeebe/commit/22945c4bb94a13c45c77af639522f5fd852e163f", "message": "chore(broker): add integration test for gateway liveness probe", "committedDate": "2020-05-22T07:30:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwNzUxOQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4520#discussion_r429907519", "bodyText": "just an idea: This can probably then rewritten like:\nif (optClusterState.map(BrokerClusterState::getPartitions)\n     .stream()\n     .filter(index -> {\n        return clusterState.getLeaderForPartition(index) != BrokerClusterState.NODE_ID_NULL;\n       })\n      .findAny()\n      .isPresent())\n{\n return Health.up().build();\n}\nelse {\nreturn Health.down().build();\n}", "author": "Zelldon", "createdAt": "2020-05-25T12:25:09Z", "path": "gateway/src/main/java/io/zeebe/gateway/impl/probes/health/PartitionLeaderAwarenessHealthIndicator.java", "diffHunk": "@@ -20,20 +21,21 @@\n  */\n public class PartitionLeaderAwarenessHealthIndicator implements HealthIndicator {\n \n-  private final Supplier<BrokerClusterState> clusterStateSupplier;\n+  private final Supplier<Optional<BrokerClusterState>> clusterStateSupplier;\n \n   public PartitionLeaderAwarenessHealthIndicator(\n-      final Supplier<BrokerClusterState> clusterStateSupplier) {\n+      final Supplier<Optional<BrokerClusterState>> clusterStateSupplier) {\n     this.clusterStateSupplier = requireNonNull(clusterStateSupplier);\n   }\n \n   @Override\n   public Health health() {\n-    final var clusterState = clusterStateSupplier.get();\n+    final var optClusterState = clusterStateSupplier.get();\n \n-    if (clusterState == null) {\n+    if (optClusterState.isEmpty()) {\n       return Health.down().build();\n     } else {\n+      final var clusterState = optClusterState.get();", "originalCommit": "c721a23857cdc170b5d4ed5c2b087c1da0d755e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "229015cc35d1cacf35f7a078e362551af8465fa1", "url": "https://github.com/camunda-cloud/zeebe/commit/229015cc35d1cacf35f7a078e362551af8465fa1", "message": "chore(broker): Integrate Spring Actuator and default health endpoints", "committedDate": "2020-05-25T13:46:45Z", "type": "commit"}, {"oid": "619d32935a4bcd7d5507a8b8af00c9f40ba98013", "url": "https://github.com/camunda-cloud/zeebe/commit/619d32935a4bcd7d5507a8b8af00c9f40ba98013", "message": "feat(broker): add memory health indicator for gateway", "committedDate": "2020-05-25T13:46:46Z", "type": "commit"}, {"oid": "0c670566c4d4ad93110a202e0c4f1bf4bca2a5a4", "url": "https://github.com/camunda-cloud/zeebe/commit/0c670566c4d4ad93110a202e0c4f1bf4bca2a5a4", "message": "feat(broker): add gateway started health indicator", "committedDate": "2020-05-25T13:46:46Z", "type": "commit"}, {"oid": "66158170c5e2a84273d4785c64b52368c834f24a", "url": "https://github.com/camunda-cloud/zeebe/commit/66158170c5e2a84273d4785c64b52368c834f24a", "message": "feat(broker): add gateway cluster awareness health check", "committedDate": "2020-05-25T13:46:46Z", "type": "commit"}, {"oid": "57c11f0ac1bc6a7e8975360981e42c9e1482b1f1", "url": "https://github.com/camunda-cloud/zeebe/commit/57c11f0ac1bc6a7e8975360981e42c9e1482b1f1", "message": "feat(broker): add partition leader health indicator", "committedDate": "2020-05-25T13:46:46Z", "type": "commit"}, {"oid": "1e78c6df078e4b8c9324c4bce2e14e8e656bf89c", "url": "https://github.com/camunda-cloud/zeebe/commit/1e78c6df078e4b8c9324c4bce2e14e8e656bf89c", "message": "feat(broker): add gateway responsive health indicator", "committedDate": "2020-05-25T13:46:46Z", "type": "commit"}, {"oid": "5c72b7b5bb06695d14645d4510fd624af28663cb", "url": "https://github.com/camunda-cloud/zeebe/commit/5c72b7b5bb06695d14645d4510fd624af28663cb", "message": "chore(broker): add delayed health indicator", "committedDate": "2020-05-25T13:46:47Z", "type": "commit"}, {"oid": "4a887550f774a53bc5a93b0064f10dd751be671a", "url": "https://github.com/camunda-cloud/zeebe/commit/4a887550f774a53bc5a93b0064f10dd751be671a", "message": "feat(broker): add liveness probe", "committedDate": "2020-05-25T13:46:47Z", "type": "commit"}, {"oid": "bbe1e6e3b8306a5afa2b32b39e6a508ba9d975b9", "url": "https://github.com/camunda-cloud/zeebe/commit/bbe1e6e3b8306a5afa2b32b39e6a508ba9d975b9", "message": "chore(broker): refactoring and cleanup", "committedDate": "2020-05-25T13:46:48Z", "type": "forcePushed"}, {"oid": "5dff6f9228df2da129888cc80b21218266c29bcd", "url": "https://github.com/camunda-cloud/zeebe/commit/5dff6f9228df2da129888cc80b21218266c29bcd", "message": "chore(broker): refactoring and cleanup", "committedDate": "2020-05-25T14:17:13Z", "type": "commit"}, {"oid": "5dff6f9228df2da129888cc80b21218266c29bcd", "url": "https://github.com/camunda-cloud/zeebe/commit/5dff6f9228df2da129888cc80b21218266c29bcd", "message": "chore(broker): refactoring and cleanup", "committedDate": "2020-05-25T14:17:13Z", "type": "forcePushed"}]}