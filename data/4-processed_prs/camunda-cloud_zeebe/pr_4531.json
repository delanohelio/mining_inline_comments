{"pr_number": 4531, "pr_title": "Add tests for snapshotting and compaction", "pr_createdAt": "2020-05-15T11:49:14Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4531", "timeline": [{"oid": "74c7404eaa34712e4b220fea69ed6c83d078ce7e", "url": "https://github.com/camunda-cloud/zeebe/commit/74c7404eaa34712e4b220fea69ed6c83d078ce7e", "message": "test(atomix): add tests for snapshotting and compaction", "committedDate": "2020-05-15T14:07:54Z", "type": "forcePushed"}, {"oid": "f13895fed1fae7e46d5b1a055cf8e7c01cf56a66", "url": "https://github.com/camunda-cloud/zeebe/commit/f13895fed1fae7e46d5b1a055cf8e7c01cf56a66", "message": "test(atomix): add tests for snapshotting and compaction", "committedDate": "2020-05-15T14:13:04Z", "type": "commit"}, {"oid": "f13895fed1fae7e46d5b1a055cf8e7c01cf56a66", "url": "https://github.com/camunda-cloud/zeebe/commit/f13895fed1fae7e46d5b1a055cf8e7c01cf56a66", "message": "test(atomix): add tests for snapshotting and compaction", "committedDate": "2020-05-15T14:13:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxMTYzMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4531#discussion_r426711630", "bodyText": "Nit: snapshot is a verb, so just say shouldSnapshot ;)", "author": "npepinpe", "createdAt": "2020-05-18T15:29:47Z", "path": "atomix/cluster/src/test/java/io/atomix/raft/RaftFailOverTest.java", "diffHunk": "@@ -118,19 +117,97 @@ public void shouldRecoverLeaderRestart() throws Throwable {\n   }\n \n   @Test\n-  @Ignore(\"https://github.com/zeebe-io/zeebe/issues/4467\")\n-  public void testNodeCatchUpAfterCompaction() throws Exception {\n+  public void shouldDoSnapshot() throws Exception {", "originalCommit": "f13895fed1fae7e46d5b1a055cf8e7c01cf56a66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0NTQ3Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4531#discussion_r427045473", "bodyText": "hm, but normally we say 'take a snapshot' right?", "author": "Zelldon", "createdAt": "2020-05-19T05:52:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxMTYzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA1MzYwNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4531#discussion_r427053604", "bodyText": "Isn't this testing the test setup rather than real implementation. Compaction is triggered by RaftRule.RaftSnapshotListener.", "author": "deepthidevaki", "createdAt": "2020-05-19T06:16:12Z", "path": "atomix/cluster/src/test/java/io/atomix/raft/RaftFailOverTest.java", "diffHunk": "@@ -118,19 +117,97 @@ public void shouldRecoverLeaderRestart() throws Throwable {\n   }\n \n   @Test\n-  @Ignore(\"https://github.com/zeebe-io/zeebe/issues/4467\")\n-  public void testNodeCatchUpAfterCompaction() throws Exception {\n+  public void shouldDoSnapshot() throws Exception {\n     // given\n-    raftRule.shutdownServer(\"1\");\n+    raftRule.appendEntries(128);\n+\n+    // when\n+    raftRule.doSnapshot(100);\n+\n+    // then\n+    assertThat(raftRule.allNodesHaveSnapshotWithIndex(100)).isTrue();\n+  }\n+\n+  @Test\n+  public void shouldCompactLogOnSnapshot() throws Exception {", "originalCommit": "f13895fed1fae7e46d5b1a055cf8e7c01cf56a66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE3OTU0OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4531#discussion_r427179549", "bodyText": "I think you're totally right. But actually I would like to keep it, to make sure our test suite works also as expected. I could move it in a separate class called something like RaftRuleTest ? What do you think @deepthidevaki ?", "author": "Zelldon", "createdAt": "2020-05-19T09:58:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA1MzYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI4OTQxMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4531#discussion_r427289413", "bodyText": "Do you really have to have the compaction logic in RaftRule? Isn't it used only in this test?", "author": "deepthidevaki", "createdAt": "2020-05-19T13:11:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA1MzYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzMTc3MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4531#discussion_r427331771", "bodyText": "Yes because with that I can test our bug we had, easily. Also other more complex scenarios", "author": "Zelldon", "createdAt": "2020-05-19T14:10:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA1MzYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NDA0Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4531#discussion_r427794043", "bodyText": "Without this logic I wouldn't be able to test like shouldReplicateSnapshotOnJoin or shouldTakeMultipleSnapshotsAndReplicateSnapshotAfterRestart and also not what you mentioned below.", "author": "Zelldon", "createdAt": "2020-05-20T07:23:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA1MzYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5ODcwNQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4531#discussion_r427798705", "bodyText": "Ok", "author": "deepthidevaki", "createdAt": "2020-05-20T07:32:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA1MzYwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA1NjQxNQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4531#discussion_r427056415", "bodyText": "In addition to this, another test that would be interesting is to restart follower with data loss. Can you add it?", "author": "deepthidevaki", "createdAt": "2020-05-19T06:23:39Z", "path": "atomix/cluster/src/test/java/io/atomix/raft/RaftFailOverTest.java", "diffHunk": "@@ -118,19 +117,97 @@ public void shouldRecoverLeaderRestart() throws Throwable {\n   }\n \n   @Test\n-  @Ignore(\"https://github.com/zeebe-io/zeebe/issues/4467\")\n-  public void testNodeCatchUpAfterCompaction() throws Exception {\n+  public void shouldDoSnapshot() throws Exception {\n     // given\n-    raftRule.shutdownServer(\"1\");\n+    raftRule.appendEntries(128);\n+\n+    // when\n+    raftRule.doSnapshot(100);\n+\n+    // then\n+    assertThat(raftRule.allNodesHaveSnapshotWithIndex(100)).isTrue();\n+  }\n+\n+  @Test\n+  public void shouldCompactLogOnSnapshot() throws Exception {\n+    // given\n+    raftRule.appendEntries(128);\n+    final var memberLogs = raftRule.getMemberLogs();\n+\n+    // when\n+    raftRule.doSnapshot(100);\n+\n+    // then\n+    final var compactedLogs = raftRule.getMemberLogs();\n+\n+    assertThat(compactedLogs.isEmpty()).isFalse();\n+    for (final String raftMember : compactedLogs.keySet()) {\n+      final var compactedLog = compactedLogs.get(raftMember);\n+      final var previousLog = memberLogs.get(raftMember);\n+      assertThat(compactedLog.size()).isLessThan(previousLog.size());\n+      assertThat(compactedLog).isSubsetOf(previousLog);\n+    }\n+  }\n+\n+  @Test\n+  public void shouldReplicateSnapshotOnJoin() throws Exception {\n+    // given\n+    final var follower = raftRule.shutdownFollower();\n+    raftRule.appendEntries(128);\n+    raftRule.doSnapshot(100);\n+\n+    // when\n+    raftRule.startNode(follower);\n+\n+    // then\n+    assertThat(raftRule.allNodesHaveSnapshotWithIndex(100)).isTrue();\n+    final var snapshot = raftRule.snapshotOnNode(follower);\n+\n+    assertThat(snapshot.index()).isEqualTo(100);\n+    assertThat(snapshot.term()).isEqualTo(1);\n+  }\n+\n+  @Test\n+  public void shouldTakeMultipleSnapshotAndReplicateSnapshotAfterRestart() throws Exception {\n+    // given\n+    raftRule.appendEntries(128);\n+    raftRule.doSnapshot(100);\n+    final var follower = raftRule.shutdownFollower();\n+    raftRule.appendEntries(128);\n+    raftRule.doSnapshot(200);\n+    raftRule.appendEntries(128);\n+    raftRule.doSnapshot(300);\n+\n+    // when\n+    raftRule.startNode(follower);", "originalCommit": "f13895fed1fae7e46d5b1a055cf8e7c01cf56a66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE3OTY3OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4531#discussion_r427179678", "bodyText": "Of course!", "author": "Zelldon", "createdAt": "2020-05-19T09:58:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA1NjQxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NDg1NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4531#discussion_r427794854", "bodyText": "btw this should be similar to shouldReplicateSnapshotOnJoin", "author": "Zelldon", "createdAt": "2020-05-20T07:25:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA1NjQxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgwMDE5Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4531#discussion_r427800197", "bodyText": "It is different. When follower restarts with data loss, leader thinks that it has already send those events to the follower. There was a bug before - something like leader doesn't send the snapshot again if the follower restarts with data loss.", "author": "deepthidevaki", "createdAt": "2020-05-20T07:35:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA1NjQxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA1OTA1MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4531#discussion_r427059051", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public Snapshot snapshotOnNode(final String nodeId) {\n          \n          \n            \n              public Snapshot getSnapshotOnNode(final String nodeId) {", "author": "deepthidevaki", "createdAt": "2020-05-19T06:30:14Z", "path": "atomix/cluster/src/test/java/io/atomix/raft/RaftRule.java", "diffHunk": "@@ -179,90 +187,119 @@ private MemberId nextNodeId() {\n           .thenAccept(this::addCommitListener)\n           .thenRun(latch::countDown);\n       servers.add(server);\n+      compactAwaiters.put(server.name(), new AtomicReference<>());\n     }\n \n     latch.await(30, TimeUnit.SECONDS);\n \n     return servers;\n   }\n \n-  public void shutdownFollower() throws Exception {\n+  public String shutdownFollower() throws Exception {\n     final var follower = getFollower().orElseThrow();\n     shutdownServer(follower);\n+    return follower.name();\n   }\n \n-  public RaftServer shutdownLeader() throws Exception {\n+  public void startNode(final String nodeId) throws Exception {\n+    final RaftMember member = getRaftMember(nodeId);\n+    createServer(member.memberId())\n+        .join(getMemberIds())\n+        .thenAccept(this::addCommitListener)\n+        .get(30, TimeUnit.SECONDS);\n+  }\n+\n+  public String shutdownLeader() throws Exception {\n     final var leader = getLeader().orElseThrow();\n     shutdownServer(leader);\n-    return leader;\n+    return leader.name();\n   }\n \n   public void restartLeader() throws Exception {\n     awaitNewLeader();\n     final var leader = shutdownLeader();\n-\n-    final RaftMember leaderMember = getRaftMember(leader.name());\n-    createServer(leaderMember.memberId())\n-        .join(getMemberIds())\n-        .thenAccept(this::addCommitListener)\n-        .get(30, TimeUnit.SECONDS);\n+    startNode(leader);\n   }\n \n   private List<MemberId> getMemberIds() {\n     return members.stream().map(RaftMember::memberId).collect(Collectors.toList());\n   }\n \n-  public void shutdownServer(final String memberId) throws Exception {\n-    final var raftServer = getRaftServer(memberId);\n-    shutdownServer(raftServer);\n-  }\n-\n-  private RaftServer getRaftServer(final String memberId) {\n-    return servers.stream()\n-        .filter(server -> server.name().equals(memberId))\n-        .findFirst()\n-        .orElseThrow();\n-  }\n-\n   public void shutdownServer(final RaftServer raftServer) throws Exception {\n     raftServer.shutdown().get(30, TimeUnit.SECONDS);\n-    servers.remove(raftServer);\n+    servers.remove(raftServer.name());\n+    compactAwaiters.remove(raftServer.name());\n     memberLog.remove(raftServer.name());\n   }\n \n-  public CompletableFuture<RaftServer> startServer(final String memberId) {\n-    final RaftMember raftMember = getRaftMember(memberId);\n-    final var server = createServer(raftMember.memberId());\n-    return server.join(getMemberIds());\n-  }\n-\n   private RaftMember getRaftMember(final String memberId) {\n     return members.stream()\n         .filter(member -> member.memberId().id().equals(memberId))\n         .findFirst()\n         .orElseThrow();\n   }\n \n-  public CompletableFuture<Void> tryToCompactLogsOnServersExcept(\n-      final String memberId, final long index) {\n+  public void doSnapshot(final long index) throws Exception {\n+    awaitNewLeader();\n+\n+    // we write on all nodes the same snapshot\n+    // this is similar to our current logic where leader takes a snapshot and replicates it\n+    // in the end all call the method #newSnapshot and the snapshot listener is triggered to compact\n \n-    final var servers =\n-        this.servers.stream()\n-            .filter(server -> !server.name().equals(memberId))\n-            .collect(Collectors.toList());\n+    for (final RaftServer raftServer : servers.values()) {\n+      if (raftServer.isRunning()) {\n+        final var raftContext = raftServer.getContext();\n+        final var snapshotStore = raftContext.getSnapshotStore();\n+\n+        compactAwaiters.get(raftServer.name()).set(new CountDownLatch(1));\n+        writeSnapshot(index, raftContext.getTerm(), snapshotStore);\n+      }\n+    }\n \n-    final List<CompletableFuture<Void>> futures = new ArrayList<>();\n-    for (final RaftServer server : servers) {\n-      futures.add(tryToCompactLogOnServer(server, index));\n+    // await the compaction to avoid race condition with reading the logs\n+    for (final RaftServer server : servers.values()) {\n+      final var latchAtomicReference = compactAwaiters.get(server.name());\n+      final var latch = latchAtomicReference.get();\n+      if (!latch.await(30, TimeUnit.SECONDS)) {\n+        throw new TimeoutException(\"Expected to compact the log after 30 seconds!\");\n+      }\n+      latchAtomicReference.set(null);\n     }\n+  }\n \n-    return CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]));\n+  public boolean allNodesHaveSnapshotWithIndex(final long index) {\n+    return servers.values().stream()\n+            .map(RaftServer::getContext)\n+            .map(RaftContext::getSnapshotStore)\n+            .map(SnapshotStore::getCurrentSnapshotIndex)\n+            .filter(idx -> idx == index)\n+            .count()\n+        == servers.values().size();\n   }\n \n-  private CompletableFuture<Void> tryToCompactLogOnServer(\n-      final RaftServer raftServer, final long index) {\n-    raftServer.getContext().getServiceManager().setCompactableIndex(index);\n-    return raftServer.compact();\n+  public Snapshot snapshotOnNode(final String nodeId) {", "originalCommit": "f13895fed1fae7e46d5b1a055cf8e7c01cf56a66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "69dcf5a0ad14f9d781b27647bce31e3db3b23c42", "url": "https://github.com/camunda-cloud/zeebe/commit/69dcf5a0ad14f9d781b27647bce31e3db3b23c42", "message": "test(atomix): add additional Raft tests", "committedDate": "2020-05-20T10:08:19Z", "type": "commit"}]}