{"pr_number": 6040, "pr_title": "Update http4s", "pr_createdAt": "2020-09-26T23:35:33Z", "pr_url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6040", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxMTQ1MA==", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6040#discussion_r495511450", "bodyText": "Shouldn't this be delay? You don't generally use fromFuture with pure", "author": "Daenyth", "createdAt": "2020-09-27T00:53:45Z", "path": "frameworks/Scala/http4s/src/main/scala/http4s/techempower/benchmark/DatabaseService.scala", "diffHunk": "@@ -0,0 +1,73 @@\n+package http4s.techempower.benchmark\n+\n+import java.util.concurrent.{Executor, ThreadLocalRandom}\n+\n+import scala.concurrent.{ExecutionContext, ExecutionContextExecutor}\n+import cats.effect.{ContextShift, IO => CatsIO}\n+import cats.syntax.all._\n+import io.getquill._\n+\n+class DatabaseService(ctx: PostgresJAsyncContext[LowerCase.type], executor: Executor)(implicit\n+    cs: ContextShift[CatsIO]\n+) {\n+  implicit val dbExecutionContext: ExecutionContextExecutor = ExecutionContext.fromExecutor(executor)\n+  import ctx._\n+\n+  def close(): CatsIO[Unit] = {\n+    CatsIO(ctx.close())\n+  }\n+\n+  // Provide a random number between 1 and 10000 (inclusive)\n+  private def randomWorldId() =\n+    CatsIO(ThreadLocalRandom.current().nextInt(1, 10001))\n+\n+  // Update the randomNumber field with a random number\n+  def updateRandomNumber(world: World): CatsIO[World] =\n+    for {\n+      randomId <- randomWorldId()\n+    } yield world.copy(randomNumber = randomId)\n+\n+  // Select a World object from the database by ID\n+  def selectWorld(id: Int): CatsIO[World] =\n+    CatsIO.fromFuture(\n+      CatsIO.pure(", "originalCommit": "e52f37932a02a82810e746941fa3c1b21492cf77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2MjE2Nw==", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6040#discussion_r495562167", "bodyText": "I wanted the eager evaluation, but that was a bit of premature optimization. Using delay is more correct, as you say, and doesn't seem to make any difference for the benchmark results. Changed, thanks!", "author": "wjoel", "createdAt": "2020-09-27T11:19:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxMTQ1MA=="}], "type": "inlineReview"}, {"oid": "7c89b2b51d48629cee7a06604fb073f660f73a8a", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/commit/7c89b2b51d48629cee7a06604fb073f660f73a8a", "message": "Update http4s\n\n- Replace doobie with quill and async drivers.\n- Update http4s, Scala, etc. to newest versions.\n- Update to JDK 15.\n- Improve JVM flags.\n- Tweak thread pool sizes.", "committedDate": "2020-09-27T11:19:41Z", "type": "commit"}, {"oid": "7c89b2b51d48629cee7a06604fb073f660f73a8a", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/commit/7c89b2b51d48629cee7a06604fb073f660f73a8a", "message": "Update http4s\n\n- Replace doobie with quill and async drivers.\n- Update http4s, Scala, etc. to newest versions.\n- Update to JDK 15.\n- Improve JVM flags.\n- Tweak thread pool sizes.", "committedDate": "2020-09-27T11:19:41Z", "type": "forcePushed"}]}