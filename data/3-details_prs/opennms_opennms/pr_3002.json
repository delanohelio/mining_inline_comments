{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NDc1OTU1", "number": 3002, "title": "CLOUD-68: Avoid storing passwords in clear text on disk (minion)", "bodyText": "This PR updates minion to include an alternative SCV implementation that contacts a dominion via gRPC to access credentials.\nWhen dominion spawns minions, it tells the minion to use the new impl by setting the appropriate confd config.\nI had to do some moving around of the Minion Identity stuff since it was a dependency of my new SCV impl and the bundle it was previously in was dependent on a SCV impl, so there was a circular dependency. I also changed the feature around a bit since there used to be an scv feature that bundled everything together including the impl, now that is broken up.\nI'm not positive that all the POM stuff is exactly right, however it all seems to be working without issue.\nI copy/pasted the generated proto code over from the dominion project directly, not sure if this is the best way to do it.\nThe credentials are no longer visible in minion's env (just the defaults set in the dockerfile, should we explicitly null these out?):\nminion@0a46700165ce:~$ env\nJAVA_MIN_MEM=1G\nHOSTNAME=0a46700165ce\nJAVA_MAX_MEM=1G\nJAVA_HOME=/usr/lib/jvm/java\nDOMINION_GRPC_CLIENT_SECRET=400a8301-7854-49b6-a92e-240b21909b0c\nPWD=/opt/minion\nHOME=/opt/minion\nOPENNMS_BROKER_PASS=minion\nTERM=xterm\nOPENNMS_BROKER_USER=minion\nMINION_ID=00000000-0000-0000-0000-deadbeef0001\nSHLVL=1\nOPENNMS_BROKER_URL=tcp://127.0.0.1:61616\nOPENNMS_HTTP_URL=http://127.0.0.1:8980/opennms\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nMINION_LOCATION=MINION\nOPENNMS_HTTP_USER=minion\nOPENNMS_HTTP_PASS=minion\n_=/usr/bin/env\n\nRelated dominion PR: https://github.com/OpenNMS-Cloud/opennms-dominion/pull/15\nAll Contributors\n\n Have you read and followed our Contribution Guidelines?\n Have you made an issue in the OpenNMS issue tracker?If so, you should:\n\nupdate the title of this PR to be of the format: ${JIRA-ISSUE-NUMBER}: subject of pull request\nupdate the JIRA link at the bottom of this comment to refer to the real issue number\nprefix your commit messages with the issue number, if possible\n\n\n Have you made a comment in that issue which points back to this PR?\n Have you updated the JIRA link at the bottom of this comment to link to your issue?\n If this is a new or updated feature, is there documentation for the new behavior?\n If this is new code, are there unit and/or integration tests?\n If this PR targets a foundation-* branch, does it avoid changing files in $OPENNMS_HOME/etc/?\n\nPull Request Process\nOne or more reviewers should be assigned to each PR.\nIf you know that a particular person is subject matter expert in the area your PR affects, feel free to assign one or more reviewers when you create this PR, otherwise reviewers will be assigned for you.\nIf you have made additions or changes to the documentation, or if you need documentation for these code changes, please make sure a technical writer has looked it over.\nOnce the reviewer(s) accept the PR and the branch passes continuous integration, the PR is eligible for merge.\nAt that time, if you have commit access (are an OpenNMS Group employee or a member of the Order of the Green Polo) you are welcome to merge the PR.\nOtherwise, a reviewer can merge it for you.\nThanks for taking time to contribute!\nExternal References\n\nJIRA (Issue Tracker): http://issues.opennms.org/browse/CLOUD-68", "createdAt": "2020-05-08T23:39:24Z", "url": "https://github.com/OpenNMS/opennms/pull/3002", "merged": true, "mergeCommit": {"oid": "6cdd850f20d8b5c8a45132a824c5bfac710bc7f8"}, "closed": true, "closedAt": "2020-05-25T19:01:46Z", "author": {"login": "mattixtech"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgUR0CgFqTQwOTQzNDIxNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABckx28XgFqTQxNzc4MTAxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NDM0MjE3", "url": "https://github.com/OpenNMS/opennms/pull/3002#pullrequestreview-409434217", "createdAt": "2020-05-11T18:44:00Z", "commit": {"oid": "f39a378b4bafcb50ea0b490ffddb43849a4fd6c7"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxODo0NDowMFrOGTowGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxODo0NDowMFrOGTowGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI0MzgwMA==", "bodyText": "Trailing dot in name", "url": "https://github.com/OpenNMS/opennms/pull/3002#discussion_r423243800", "createdAt": "2020-05-11T18:44:00Z", "author": {"login": "bouff"}, "path": "features/scv/dominion-grpc-impl/pom.xml", "diffHunk": "@@ -0,0 +1,61 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <groupId>org.opennms.features</groupId>\n+        <artifactId>org.opennms.features.scv</artifactId>\n+        <version>27.0.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>org.opennms.features.scv</groupId>\n+    <artifactId>org.opennms.features.scv.dominion-grpc-impl</artifactId>\n+    <packaging>bundle</packaging>\n+    <name>OpenNMS :: Features :: SCV :: Dominion gRPC Impl.</name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f39a378b4bafcb50ea0b490ffddb43849a4fd6c7"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNjI2ODIx", "url": "https://github.com/OpenNMS/opennms/pull/3002#pullrequestreview-413626821", "createdAt": "2020-05-18T14:04:56Z", "commit": {"oid": "f39a378b4bafcb50ea0b490ffddb43849a4fd6c7"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDowNDo1NlrOGW4tIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDoxNToxN1rOGW5J7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1MDkxMg==", "bodyText": "We can't have multiple Blueprint's directly reference the same PID (org.opennms.minion.controller) - we've ran into problems with this before.\nWe'll need to wire this up differently.", "url": "https://github.com/OpenNMS/opennms/pull/3002#discussion_r426650912", "createdAt": "2020-05-18T14:04:56Z", "author": {"login": "j-white"}, "path": "features/minion/core/minion-identity-impl/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "diffHunk": "@@ -0,0 +1,30 @@\n+<blueprint\n+        xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\"\n+        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+        xmlns:cm=\"http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0\"\n+        xsi:schemaLocation=\"\n+        http://www.osgi.org/xmlns/blueprint/v1.0.0 \n+        https://osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd\n+\n+        http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0\n+        http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.3.0.xsd\n+\">\n+    <cm:property-placeholder id=\"minionProperties\" persistent-id=\"org.opennms.minion.controller\" placeholder-prefix=\"[[\" placeholder-suffix=\"]]\" update-strategy=\"reload\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f39a378b4bafcb50ea0b490ffddb43849a4fd6c7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1NDg1Mg==", "bodyText": "Can we configure this in the same place as the host and port rather than using an env. variable?", "url": "https://github.com/OpenNMS/opennms/pull/3002#discussion_r426654852", "createdAt": "2020-05-18T14:10:39Z", "author": {"login": "j-white"}, "path": "features/minion/dominion/grpc-client/src/main/java/org/opennms/features/minion/dominion/grpc/DominionGrpcFactoryImpl.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.features.minion.dominion.grpc;\n+\n+import java.util.Objects;\n+\n+import org.opennms.distributed.core.api.MinionIdentity;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+\n+public class DominionGrpcFactoryImpl implements DominionGrpcFactory {\n+\n+    private final ManagedChannel channel;\n+    private final String clientId;\n+    private final String clientSecret;\n+\n+    public DominionGrpcFactoryImpl(String host, String port, MinionIdentity minionIdentity) {\n+        this(host, port, Objects.requireNonNull(minionIdentity).getId(),\n+                System.getenv(\"DOMINION_GRPC_CLIENT_SECRET\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f39a378b4bafcb50ea0b490ffddb43849a4fd6c7"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1NTg4MA==", "bodyText": "Let's include the .proto in the source tree for reference.", "url": "https://github.com/OpenNMS/opennms/pull/3002#discussion_r426655880", "createdAt": "2020-05-18T14:12:01Z", "author": {"login": "j-white"}, "path": "features/minion/dominion/grpc-client/src/main/java/org/opennms/dominion/local/rpc/grpc/DominionGrpc.java", "diffHunk": "@@ -0,0 +1,5741 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+// Generated by the protocol buffer compiler.  DO NOT EDIT!\n+// source: dominion.proto", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f39a378b4bafcb50ea0b490ffddb43849a4fd6c7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1ODI4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(scv.getAliases().containsAll(aliases));\n          \n          \n            \n                    assertThat(scv.getAliases(), contains(aliases));", "url": "https://github.com/OpenNMS/opennms/pull/3002#discussion_r426658286", "createdAt": "2020-05-18T14:15:17Z", "author": {"login": "j-white"}, "path": "features/scv/dominion-grpc-impl/src/test/java/org/opennms/dominion/features/scv/grpc/DominionSecureCredentialsVaultIT.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.dominion.features.scv.grpc;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.opennms.dominion.local.rpc.grpc.DominionGrpc;\n+import org.opennms.dominion.local.rpc.grpc.SecureCredentialsVaultGrpc;\n+import org.opennms.features.minion.dominion.grpc.DominionGrpcFactory;\n+import org.opennms.features.minion.dominion.grpc.DominionGrpcFactoryImpl;\n+import org.opennms.features.scv.api.Credentials;\n+import org.opennms.features.scv.api.SecureCredentialsVault;\n+import org.opennms.features.scv.dominion.grpc.DominionSecureCredentialsVault;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.Server;\n+import io.grpc.ServerBuilder;\n+import io.grpc.Status;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+\n+public class DominionSecureCredentialsVaultIT {\n+\n+    private static final String HOST = \"localhost\";\n+    private static final String CLIENT_ID = \"client.id\";\n+    private static final String CLIENT_SECRET = \"client.secret\";\n+    private static final String SUPPORTED_ALIAS = \"supported.alias\";\n+    private static final List<String> aliases = Collections.singletonList(SUPPORTED_ALIAS);\n+\n+    private static final String USERNAME = \"user\";\n+    private static final String PASSWORD = \"password\";\n+\n+    private ManagedChannel channel;\n+    private SecureCredentialsVault scv;\n+\n+    @Before\n+    public void setup() throws IOException {\n+        int freePort;\n+\n+        try (ServerSocket socket = new ServerSocket(0)) {\n+            socket.setReuseAddress(true);\n+            freePort = socket.getLocalPort();\n+        }\n+\n+        channel = ManagedChannelBuilder.forAddress(HOST, freePort)\n+                .usePlaintext()\n+                .build();\n+        Server server = ServerBuilder.forPort(freePort).addService(new MockDominionServer()).build();\n+        server.start();\n+        CompletableFuture.runAsync(() -> {\n+            try {\n+                server.awaitTermination();\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException();\n+            }\n+        });\n+\n+\n+        DominionGrpcFactory factory = new DominionGrpcFactoryImpl(HOST, Integer.toString(freePort), CLIENT_ID,\n+                CLIENT_SECRET);\n+        scv = new DominionSecureCredentialsVault(factory.scvClient());\n+    }\n+\n+    @After\n+    public void stop() {\n+        channel.shutdownNow();\n+    }\n+\n+    @Test\n+    public void canGetAliases() {\n+        assertTrue(scv.getAliases().containsAll(aliases));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f39a378b4bafcb50ea0b490ffddb43849a4fd6c7"}, "originalPosition": 110}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdbcbbbac2da64b163524d90dca5f2a38ae7995c", "author": {"user": {"login": "mattixtech", "name": "Matthew Brooks"}}, "url": "https://github.com/OpenNMS/opennms/commit/cdbcbbbac2da64b163524d90dca5f2a38ae7995c", "committedDate": "2020-05-20T20:42:33Z", "message": "CLOUD-68: Avoid storing passwords in clear text on disk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cd24c1ecc57fac27cf6b8b3a4094b663f3e5d9d", "author": {"user": {"login": "mattixtech", "name": "Matthew Brooks"}}, "url": "https://github.com/OpenNMS/opennms/commit/5cd24c1ecc57fac27cf6b8b3a4094b663f3e5d9d", "committedDate": "2020-05-20T20:42:34Z", "message": "Review feedback pt 1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f39a378b4bafcb50ea0b490ffddb43849a4fd6c7", "author": {"user": {"login": "mattixtech", "name": "Matthew Brooks"}}, "url": "https://github.com/OpenNMS/opennms/commit/f39a378b4bafcb50ea0b490ffddb43849a4fd6c7", "committedDate": "2020-05-08T22:50:11Z", "message": "CLOUD-68: Avoid storing passwords in clear text on disk"}, "afterCommit": {"oid": "5cd24c1ecc57fac27cf6b8b3a4094b663f3e5d9d", "author": {"user": {"login": "mattixtech", "name": "Matthew Brooks"}}, "url": "https://github.com/OpenNMS/opennms/commit/5cd24c1ecc57fac27cf6b8b3a4094b663f3e5d9d", "committedDate": "2020-05-20T20:42:34Z", "message": "Review feedback pt 1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70ec3acdd4bf5487556d7aee17fade4548e42950", "author": {"user": {"login": "mattixtech", "name": "Matthew Brooks"}}, "url": "https://github.com/OpenNMS/opennms/commit/70ec3acdd4bf5487556d7aee17fade4548e42950", "committedDate": "2020-05-22T16:40:37Z", "message": "- Remove minion-identity bundle and instead split out the rest client as a separate bundle\n- Share the controller config with th rest client\n\ngrpc scv impl depends on core-impl\nrest client depends on grpc scv impl and on core-impl\n\nThese have to be separate to avoid circular deps"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NzgxMDE3", "url": "https://github.com/OpenNMS/opennms/pull/3002#pullrequestreview-417781017", "createdAt": "2020-05-25T15:32:43Z", "commit": {"oid": "70ec3acdd4bf5487556d7aee17fade4548e42950"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3636, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}