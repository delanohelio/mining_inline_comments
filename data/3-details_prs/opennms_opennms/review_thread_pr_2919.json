{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MjIwMzA2", "number": 2919, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzoxODowMFrODoVAZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoxODoyNFrODoZ4vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjEzNzk3OnYy", "diffSide": "RIGHT", "path": "opennms-container/minion/Makefile", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzoxODowMFrOF2zwJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzoxODowMFrOF2zwJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxNTMzMg==", "bodyText": "\u26a0\ufe0f Change this to opennms before merge.", "url": "https://github.com/OpenNMS/opennms/pull/2919#discussion_r393015332", "createdAt": "2020-03-16T13:18:00Z", "author": {"login": "indigo423"}, "path": "opennms-container/minion/Makefile", "diffHunk": "@@ -0,0 +1,106 @@\n+## \n+# Makefile to build Minion container image with Docker\n+##\n+.PHONY: help test build install uninstall clean clean-all\n+\n+.DEFAULT_GOAL := build\n+\n+VERSION                 := localbuild\n+SHELL                   := /bin/bash -o nounset -o pipefail -o errexit\n+BUILD_DATE              := $(shell date -u +\"%Y-%m-%dT%H:%M:%SZ\")\n+BASE_IMAGE              := opennms/deploy-base:jre-1.0.0.b31\n+DOCKER_CLI_EXPERIMENTAL := enabled\n+DOCKERX_INSTANCE        := env-minion-oci\n+DOCKER_REGISTRY         := docker.io\n+DOCKER_ORG              := no42org", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "982ded24b4a1343a6357e20e643d6339a9f509cf"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjEzOTcwOnYy", "diffSide": "RIGHT", "path": ".circleci/config.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzoxODoyOVrOF2zxQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzoxODoyOVrOF2zxQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxNTYxOQ==", "bodyText": "\u26a0\ufe0f Remove this before merge.", "url": "https://github.com/OpenNMS/opennms/pull/2919#discussion_r393015619", "createdAt": "2020-03-16T13:18:29Z", "author": {"login": "indigo423"}, "path": ".circleci/config.yml", "diffHunk": "@@ -437,6 +432,94 @@ jobs:\n     steps:\n       - run-build:\n           number-vcpu: 8\n+\n+  tarball-assembly:\n+    machine:\n+      image: ubuntu-1604:201903-01\n+      docker_layer_caching: true\n+    environment:\n+      DOCKER_CLI_EXPERIMENTAL: enabled\n+    parameters:\n+      number-vcpu:\n+        default: 2\n+        type: integer\n+      vaadin-javamaxmem:\n+        default: 1g\n+        type: string\n+    steps:\n+      - attach_workspace:\n+          at: ~/\n+      - run:\n+          name: multiarch/qemu-user-static\n+          command: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n+      - run:\n+          name: Install Docker buildx\n+          command: |\n+            sudo wget https://github.com/docker/buildx/releases/download/v0.3.1/buildx-v0.3.1.linux-amd64 -O /usr/local/bin/docker-buildx\n+            sudo chmod a+x /usr/local/bin/docker-buildx\n+            sudo systemctl restart docker\n+      - dockerhub-login\n+      - run:\n+          name: Assemble tarballs\n+          # Install fake makensis to satisfy the assemble dependency\n+          command: |\n+            sudo cp .circleci/scripts/makensis.py /usr/local/bin/makensis\n+            ./assemble.pl -Dopennms.home=/opt/opennms \\\n+                          -DskipTests \\\n+                          -DupdatePolicy=never\n+      - run:\n+          name: Collect tarball artifacts\n+          command: |\n+            mkdir target/tarballs\n+            find ./target -name \"*.tar.gz\" -type f -not -iname '*source*' -exec cp {} ./target/tarballs/opennms.tar.gz \\;\n+            find ./opennms-assemblies/minion/target -name \"*.tar.gz\" -type f -not -iname '*source*' -exec cp {} ./target/tarballs/minion.tar.gz \\;\n+            find ./opennms-assemblies/sentinel/target -name \"*.tar.gz\" -type f -not -iname '*source*' -exec cp {} ./target/tarballs/sentinel.tar.gz \\;\n+      - run:\n+          name: Build Minion OCI\n+          command: |\n+            cd opennms-container/minion\n+            make DOCKER_TAG=\"minion:latest\" BUILD_NUMBER=\"${CIRCLE_BUILD_NUM}\" BUILD_URL=\"${CIRCLE_BUILD_URL}\" BUILD_BRANCH=\"${CIRCLE_BRANCH}\"\n+            case \"${CIRCLE_BRANCH}\" in\n+              master)\n+                make DOCKER_ARCH=\"linux/amd64,linux/arm/v7,linux/arm64\" \\\n+                     DOCKER_FLAGS=--push \\\n+                     VERSION=\"$(../pom2version.py ../../pom.xml)\" \\\n+                     BUILD_NUMBER=\"${CIRCLE_BUILD_NUM}\" \\\n+                     BUILD_URL=\"${CIRCLE_BUILD_URL}\" \\\n+                     BUILD_BRANCH=\"${CIRCLE_BRANCH}\"\n+                ;;\n+              develop)\n+                make DOCKER_ARCH=\"linux/amd64,linux/arm/v7,linux/arm64\" \\\n+                     DOCKER_FLAGS=--push \\\n+                     VERSION=\"$(../pom2version.py ../../pom.xml)\" \\\n+                     BUILD_NUMBER=\"${CIRCLE_BUILD_NUM}\" \\\n+                     BUILD_URL=\"${CIRCLE_BUILD_URL}\" \\\n+                     BUILD_BRANCH=\"${CIRCLE_BRANCH}\"\n+                ;;\n+              jira/NMS-12483)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "982ded24b4a1343a6357e20e643d6339a9f509cf"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjMzMDEyOnYy", "diffSide": "RIGHT", "path": ".circleci/config.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDowNjoyNVrOF21p6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDowNjoyNVrOF21p6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0NjUwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          master)\n          \n          \n            \n                          \"master\" | \"develop\")\n          \n      \n    \n    \n  \n\nIt looks like the code blocks here are the same. We can de-duplicate them with an OR for the case statement?", "url": "https://github.com/OpenNMS/opennms/pull/2919#discussion_r393046507", "createdAt": "2020-03-16T14:06:25Z", "author": {"login": "j-white"}, "path": ".circleci/config.yml", "diffHunk": "@@ -437,6 +432,94 @@ jobs:\n     steps:\n       - run-build:\n           number-vcpu: 8\n+\n+  tarball-assembly:\n+    machine:\n+      image: ubuntu-1604:201903-01\n+      docker_layer_caching: true\n+    environment:\n+      DOCKER_CLI_EXPERIMENTAL: enabled\n+    parameters:\n+      number-vcpu:\n+        default: 2\n+        type: integer\n+      vaadin-javamaxmem:\n+        default: 1g\n+        type: string\n+    steps:\n+      - attach_workspace:\n+          at: ~/\n+      - run:\n+          name: multiarch/qemu-user-static\n+          command: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n+      - run:\n+          name: Install Docker buildx\n+          command: |\n+            sudo wget https://github.com/docker/buildx/releases/download/v0.3.1/buildx-v0.3.1.linux-amd64 -O /usr/local/bin/docker-buildx\n+            sudo chmod a+x /usr/local/bin/docker-buildx\n+            sudo systemctl restart docker\n+      - dockerhub-login\n+      - run:\n+          name: Assemble tarballs\n+          # Install fake makensis to satisfy the assemble dependency\n+          command: |\n+            sudo cp .circleci/scripts/makensis.py /usr/local/bin/makensis\n+            ./assemble.pl -Dopennms.home=/opt/opennms \\\n+                          -DskipTests \\\n+                          -DupdatePolicy=never\n+      - run:\n+          name: Collect tarball artifacts\n+          command: |\n+            mkdir target/tarballs\n+            find ./target -name \"*.tar.gz\" -type f -not -iname '*source*' -exec cp {} ./target/tarballs/opennms.tar.gz \\;\n+            find ./opennms-assemblies/minion/target -name \"*.tar.gz\" -type f -not -iname '*source*' -exec cp {} ./target/tarballs/minion.tar.gz \\;\n+            find ./opennms-assemblies/sentinel/target -name \"*.tar.gz\" -type f -not -iname '*source*' -exec cp {} ./target/tarballs/sentinel.tar.gz \\;\n+      - run:\n+          name: Build Minion OCI\n+          command: |\n+            cd opennms-container/minion\n+            make DOCKER_TAG=\"minion:latest\" BUILD_NUMBER=\"${CIRCLE_BUILD_NUM}\" BUILD_URL=\"${CIRCLE_BUILD_URL}\" BUILD_BRANCH=\"${CIRCLE_BRANCH}\"\n+            case \"${CIRCLE_BRANCH}\" in\n+              master)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "982ded24b4a1343a6357e20e643d6339a9f509cf"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjkzNzU3OnYy", "diffSide": "RIGHT", "path": "opennms-container/minion/Dockerfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoxODoyNFrOF27qgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNjozNzoyMVrOF3PetA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0NDk2Mg==", "bodyText": "Do we need line 45 given line 38?", "url": "https://github.com/OpenNMS/opennms/pull/2919#discussion_r393144962", "createdAt": "2020-03-16T16:18:24Z", "author": {"login": "mattixtech"}, "path": "opennms-container/minion/Dockerfile", "diffHunk": "@@ -1,88 +1,64 @@\n ##\n-# Use Java base image and setup required RPMS as cacheable image.\n+# Pre-stage image to extract and manipulate Minion directory structure\n+# Normally we install to /opt/minion and not /opt/minion-26.0.0-SNAPSHOT\n+# To avoid issues, we rearrange the directories in pre-stage to avoid injecting these\n+# as addtional layers into the final image.\n ##\n-ARG BASE_IMAGE=\"opennms/openjdk\"\n-ARG BASE_IMAGE_VERSION=\"11.0.5.10-b3108\"\n+ARG BASE_IMAGE=\"opennms/deploy-base:jre-1.0.0.b31\"\n \n-FROM ${BASE_IMAGE}:${BASE_IMAGE_VERSION} as minion-base\n+FROM ${BASE_IMAGE} as minion-base\n \n-ARG REQUIRED_RPMS=\"wget gettext jicmp jicmp6 openssh-clients\"\n+ADD ./tarball/minion.tar.gz /opt/\n \n-ARG REPO_KEY_URL=\"https://yum.opennms.org/OPENNMS-GPG-KEY\"\n-ARG REPO_RPM=\"https://yum.opennms.org/repofiles/opennms-repo-stable-rhel8.noarch.rpm\"\n+# Organize files based on the build home dir /opt/minion\n+RUN mv /opt/minion-* /opt/minion\n \n-SHELL [\"/bin/bash\", \"-c\"]\n-\n-# Collect generic steps in a layer for caching\n-RUN rpm --import \"${REPO_KEY_URL}\" && \\\n-    dnf -y install epel-release && \\\n-    dnf -y install \"${REPO_RPM}\" && \\\n-    dnf -y install ${REQUIRED_RPMS} && \\\n-    dnf clean all && \\\n-    rm -rf /var/cache/yum\n-\n-# Allow to send ICMP messages as non-root user\n-RUN setcap cap_net_raw+ep ${JAVA_HOME}/bin/java && \\\n-    echo ${JAVA_HOME}/lib/jli > /etc/ld.so.conf.d/java-latest.conf && \\\n-    ldconfig\n-\n-# Create Minion user with a specific group ID\n-RUN groupadd -g 10001 minion && \\\n-    adduser -u 10001 -g 10001 -d /opt/minion -s /usr/bin/bash minion\n-\n-# Create SSH Key-Pair to use with the Karaf Shell\n-RUN mkdir /opt/minion/.ssh && \\\n-    chmod 700 /opt/minion/.ssh && \\\n-    ssh-keygen -t rsa -f /opt/minion/.ssh/id_rsa -q -N \"\"\n+# We set the correct permissions in this stage, so we don't have this as an addtional\n+# layer in our deploy image.\n+RUN groupadd --gid 10001 minion && \\\n+    useradd --system --uid 10001 --gid minion minion --home-dir /opt/minion && \\\n+    chown 10001 /opt/minion -R && \\\n+    chgrp -R 0 /opt/minion && \\\n+    chmod -R g=u /opt/minion\n \n ##\n-# Install and setup OpenNMS Minion RPMS\n+# Prod image with minimal image size\n ##\n-FROM minion-base\n+FROM ${BASE_IMAGE}\n \n-ARG USER=\"minion\"\n+# Create user to be able to run as non root with a known user and group id.\n+RUN groupadd --gid 10001 minion && \\\n+    useradd --system --uid 10001 --gid minion minion --home-dir /opt/minion\n \n-# A default which installs the minimum required Minion packages\n-ARG MINION_PACKAGES=\"opennms-minion\"\n+# Install entrypoint wrapper and health check script\n+COPY container-fs/entrypoint.sh /\n+COPY container-fs/health.sh /\n \n-# Allow to install optional packages via YUM\n-ARG ADD_YUM_PACKAGES\n+# Install confd configuration\n+COPY ./container-fs/confd/ /opt/minion/confd/\n \n-COPY ./rpms /tmp/rpms\n+# If you copy from /opt/minion to /opt/minion the permissions are not preserved\n+# We would have 755 for minion:root instead of 775 and prevents writing lock files in /opt/minion\n+COPY --chown=10001:0 --from=minion-base /opt /opt\n \n-SHELL [\"/bin/bash\", \"-c\"]\n+# Install confd.io configuration files and scripts and ensure they are executable\n+COPY ./container-fs/confd/ /opt/minion/confd/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "982ded24b4a1343a6357e20e643d6339a9f509cf"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ2OTYyMA==", "bodyText": "Thank you! Very good catch slipped through a resolved merge conflict.", "url": "https://github.com/OpenNMS/opennms/pull/2919#discussion_r393469620", "createdAt": "2020-03-17T06:37:21Z", "author": {"login": "indigo423"}, "path": "opennms-container/minion/Dockerfile", "diffHunk": "@@ -1,88 +1,64 @@\n ##\n-# Use Java base image and setup required RPMS as cacheable image.\n+# Pre-stage image to extract and manipulate Minion directory structure\n+# Normally we install to /opt/minion and not /opt/minion-26.0.0-SNAPSHOT\n+# To avoid issues, we rearrange the directories in pre-stage to avoid injecting these\n+# as addtional layers into the final image.\n ##\n-ARG BASE_IMAGE=\"opennms/openjdk\"\n-ARG BASE_IMAGE_VERSION=\"11.0.5.10-b3108\"\n+ARG BASE_IMAGE=\"opennms/deploy-base:jre-1.0.0.b31\"\n \n-FROM ${BASE_IMAGE}:${BASE_IMAGE_VERSION} as minion-base\n+FROM ${BASE_IMAGE} as minion-base\n \n-ARG REQUIRED_RPMS=\"wget gettext jicmp jicmp6 openssh-clients\"\n+ADD ./tarball/minion.tar.gz /opt/\n \n-ARG REPO_KEY_URL=\"https://yum.opennms.org/OPENNMS-GPG-KEY\"\n-ARG REPO_RPM=\"https://yum.opennms.org/repofiles/opennms-repo-stable-rhel8.noarch.rpm\"\n+# Organize files based on the build home dir /opt/minion\n+RUN mv /opt/minion-* /opt/minion\n \n-SHELL [\"/bin/bash\", \"-c\"]\n-\n-# Collect generic steps in a layer for caching\n-RUN rpm --import \"${REPO_KEY_URL}\" && \\\n-    dnf -y install epel-release && \\\n-    dnf -y install \"${REPO_RPM}\" && \\\n-    dnf -y install ${REQUIRED_RPMS} && \\\n-    dnf clean all && \\\n-    rm -rf /var/cache/yum\n-\n-# Allow to send ICMP messages as non-root user\n-RUN setcap cap_net_raw+ep ${JAVA_HOME}/bin/java && \\\n-    echo ${JAVA_HOME}/lib/jli > /etc/ld.so.conf.d/java-latest.conf && \\\n-    ldconfig\n-\n-# Create Minion user with a specific group ID\n-RUN groupadd -g 10001 minion && \\\n-    adduser -u 10001 -g 10001 -d /opt/minion -s /usr/bin/bash minion\n-\n-# Create SSH Key-Pair to use with the Karaf Shell\n-RUN mkdir /opt/minion/.ssh && \\\n-    chmod 700 /opt/minion/.ssh && \\\n-    ssh-keygen -t rsa -f /opt/minion/.ssh/id_rsa -q -N \"\"\n+# We set the correct permissions in this stage, so we don't have this as an addtional\n+# layer in our deploy image.\n+RUN groupadd --gid 10001 minion && \\\n+    useradd --system --uid 10001 --gid minion minion --home-dir /opt/minion && \\\n+    chown 10001 /opt/minion -R && \\\n+    chgrp -R 0 /opt/minion && \\\n+    chmod -R g=u /opt/minion\n \n ##\n-# Install and setup OpenNMS Minion RPMS\n+# Prod image with minimal image size\n ##\n-FROM minion-base\n+FROM ${BASE_IMAGE}\n \n-ARG USER=\"minion\"\n+# Create user to be able to run as non root with a known user and group id.\n+RUN groupadd --gid 10001 minion && \\\n+    useradd --system --uid 10001 --gid minion minion --home-dir /opt/minion\n \n-# A default which installs the minimum required Minion packages\n-ARG MINION_PACKAGES=\"opennms-minion\"\n+# Install entrypoint wrapper and health check script\n+COPY container-fs/entrypoint.sh /\n+COPY container-fs/health.sh /\n \n-# Allow to install optional packages via YUM\n-ARG ADD_YUM_PACKAGES\n+# Install confd configuration\n+COPY ./container-fs/confd/ /opt/minion/confd/\n \n-COPY ./rpms /tmp/rpms\n+# If you copy from /opt/minion to /opt/minion the permissions are not preserved\n+# We would have 755 for minion:root instead of 775 and prevents writing lock files in /opt/minion\n+COPY --chown=10001:0 --from=minion-base /opt /opt\n \n-SHELL [\"/bin/bash\", \"-c\"]\n+# Install confd.io configuration files and scripts and ensure they are executable\n+COPY ./container-fs/confd/ /opt/minion/confd/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0NDk2Mg=="}, "originalCommit": {"oid": "982ded24b4a1343a6357e20e643d6339a9f509cf"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 808, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}