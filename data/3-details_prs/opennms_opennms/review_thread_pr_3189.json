{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MDg0NTQw", "number": 3189, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTowMDozMlrOE0SSDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTowMzowMFrOE0SVug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjYwOTQyOnYy", "diffSide": "RIGHT", "path": "features/telemetry/protocols/sflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/sflow/adapter/SFlow.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTowMDozMlrOHr7YnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjo0ODo0OVrOHsYxRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyMzc3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!getInt64(document, \"source_id\").equals(getInt64(document, \"input\")) &&\n          \n          \n            \n                        !getInt64(document, \"source_id\").equals(Optional.empty())) {\n          \n          \n            \n                        return Direction.EGRESS;\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return Direction.INGRESS;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (getInt64(document, \"source_id\").equals(getInt64(document, \"input\"))) {\n          \n          \n            \n                        return Direction.INGRESS;\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return Direction.EGRESS;\n          \n          \n            \n                    }", "url": "https://github.com/OpenNMS/opennms/pull/3189#discussion_r515823772", "createdAt": "2020-11-02T09:00:32Z", "author": {"login": "fooker"}, "path": "features/telemetry/protocols/sflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/sflow/adapter/SFlow.java", "diffHunk": "@@ -92,7 +93,12 @@ public Long getBytes() {\n \n     @Override\n     public Direction getDirection() {\n-        return Direction.INGRESS;\n+        if (!getInt64(document, \"source_id\").equals(getInt64(document, \"input\")) &&\n+            !getInt64(document, \"source_id\").equals(Optional.empty())) {\n+            return Direction.EGRESS;\n+        } else {\n+            return Direction.INGRESS;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd957c786a442737a958bdd2443a398b6af8bd2f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA0NDU4Mw==", "bodyText": "I did it this way because I only wanted to set egress on packets that specifically met the criteria, and let everything else be ingress (egress as the exception, ingress as the rule, i suppose).  I felt that better aligned with the current behavior of unconditionally marking everything as ingress.  I don't have a problem flipping the logic if that's what's preferred.", "url": "https://github.com/OpenNMS/opennms/pull/3189#discussion_r516044583", "createdAt": "2020-11-02T15:19:50Z", "author": {"login": "dino2gnt"}, "path": "features/telemetry/protocols/sflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/sflow/adapter/SFlow.java", "diffHunk": "@@ -92,7 +93,12 @@ public Long getBytes() {\n \n     @Override\n     public Direction getDirection() {\n-        return Direction.INGRESS;\n+        if (!getInt64(document, \"source_id\").equals(getInt64(document, \"input\")) &&\n+            !getInt64(document, \"source_id\").equals(Optional.empty())) {\n+            return Direction.EGRESS;\n+        } else {\n+            return Direction.INGRESS;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyMzc3Mg=="}, "originalCommit": {"oid": "fd957c786a442737a958bdd2443a398b6af8bd2f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMwNTIyMA==", "bodyText": "There are two things that came to my mind:\n\nswitching the then and the else branches to get rid of some boolean inverts. But your explaination makes sens - if ingress is the default, keep it in the else branch.\nlooks like source_id is never empty (if there is a chance, using getInt64(...).isPresent() is a more appropriate way to check, btw.)", "url": "https://github.com/OpenNMS/opennms/pull/3189#discussion_r516305220", "createdAt": "2020-11-02T22:48:49Z", "author": {"login": "fooker"}, "path": "features/telemetry/protocols/sflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/sflow/adapter/SFlow.java", "diffHunk": "@@ -92,7 +93,12 @@ public Long getBytes() {\n \n     @Override\n     public Direction getDirection() {\n-        return Direction.INGRESS;\n+        if (!getInt64(document, \"source_id\").equals(getInt64(document, \"input\")) &&\n+            !getInt64(document, \"source_id\").equals(Optional.empty())) {\n+            return Direction.EGRESS;\n+        } else {\n+            return Direction.INGRESS;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyMzc3Mg=="}, "originalCommit": {"oid": "fd957c786a442737a958bdd2443a398b6af8bd2f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjYxMTc0OnYy", "diffSide": "RIGHT", "path": "features/telemetry/protocols/sflow/parser/src/test/java/org/opennms/netmgt/telemetry/protocols/sflow/parser/proto/flows/BsonDocumentTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTowMTowN1rOHr7Z4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTowMTowN1rOHr7Z4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyNDA5Nw==", "bodyText": "Indention", "url": "https://github.com/OpenNMS/opennms/pull/3189#discussion_r515824097", "createdAt": "2020-11-02T09:01:07Z", "author": {"login": "fooker"}, "path": "features/telemetry/protocols/sflow/parser/src/test/java/org/opennms/netmgt/telemetry/protocols/sflow/parser/proto/flows/BsonDocumentTest.java", "diffHunk": "@@ -382,6 +406,20 @@ public void testSFlowHeader() {\n         Assert.assertEquals(null, sFlow.getTimestamp());\n     }\n \n+    @Test\n+    public void testIngress() {\n+        final BsonDocument bsonDocument = createDirectionIngress();\n+        final SFlow sFlow = new SFlow(SFLOW_HEADER, bsonDocument);\n+\tAssert.assertEquals(Flow.Direction.INGRESS, sFlow.getDirection());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd957c786a442737a958bdd2443a398b6af8bd2f"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjYxMTk0OnYy", "diffSide": "RIGHT", "path": "features/telemetry/protocols/sflow/parser/src/test/java/org/opennms/netmgt/telemetry/protocols/sflow/parser/proto/flows/BsonDocumentTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTowMToxMlrOHr7aAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTowMToxMlrOHr7aAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyNDEyOA==", "bodyText": "Indention", "url": "https://github.com/OpenNMS/opennms/pull/3189#discussion_r515824128", "createdAt": "2020-11-02T09:01:12Z", "author": {"login": "fooker"}, "path": "features/telemetry/protocols/sflow/parser/src/test/java/org/opennms/netmgt/telemetry/protocols/sflow/parser/proto/flows/BsonDocumentTest.java", "diffHunk": "@@ -382,6 +406,20 @@ public void testSFlowHeader() {\n         Assert.assertEquals(null, sFlow.getTimestamp());\n     }\n \n+    @Test\n+    public void testIngress() {\n+        final BsonDocument bsonDocument = createDirectionIngress();\n+        final SFlow sFlow = new SFlow(SFLOW_HEADER, bsonDocument);\n+\tAssert.assertEquals(Flow.Direction.INGRESS, sFlow.getDirection());\n+    }\n+\n+    @Test\n+    public void testEgress() {\n+        final BsonDocument bsonDocument = createDirectionEgress();\n+        final SFlow sFlow = new SFlow(SFLOW_HEADER, bsonDocument);\n+\tAssert.assertEquals(Flow.Direction.EGRESS, sFlow.getDirection());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd957c786a442737a958bdd2443a398b6af8bd2f"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjYxODgyOnYy", "diffSide": "RIGHT", "path": "features/telemetry/protocols/sflow/parser/src/test/java/org/opennms/netmgt/telemetry/protocols/sflow/parser/proto/flows/BsonDocumentTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTowMzowMFrOHr7eAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDoyMToyNFrOHsUTpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyNTE1NQ==", "bodyText": "If only called once, just inline these methods", "url": "https://github.com/OpenNMS/opennms/pull/3189#discussion_r515825155", "createdAt": "2020-11-02T09:03:00Z", "author": {"login": "fooker"}, "path": "features/telemetry/protocols/sflow/parser/src/test/java/org/opennms/netmgt/telemetry/protocols/sflow/parser/proto/flows/BsonDocumentTest.java", "diffHunk": "@@ -198,6 +198,30 @@ private BsonDocument createExtendedGateway() {\n         return bsonDocument;\n     }\n \n+    private BsonDocument createDirectionIngress() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd957c786a442737a958bdd2443a398b6af8bd2f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA0NzAwNA==", "bodyText": "I don't actually know what that means :)  I am not a Java developer in any sense.", "url": "https://github.com/OpenNMS/opennms/pull/3189#discussion_r516047004", "createdAt": "2020-11-02T15:23:12Z", "author": {"login": "dino2gnt"}, "path": "features/telemetry/protocols/sflow/parser/src/test/java/org/opennms/netmgt/telemetry/protocols/sflow/parser/proto/flows/BsonDocumentTest.java", "diffHunk": "@@ -198,6 +198,30 @@ private BsonDocument createExtendedGateway() {\n         return bsonDocument;\n     }\n \n+    private BsonDocument createDirectionIngress() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyNTE1NQ=="}, "originalCommit": {"oid": "fd957c786a442737a958bdd2443a398b6af8bd2f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIzMjEwMA==", "bodyText": "don't bother making a little function to return the thing, just use the thing", "url": "https://github.com/OpenNMS/opennms/pull/3189#discussion_r516232100", "createdAt": "2020-11-02T20:21:24Z", "author": {"login": "RangerRick"}, "path": "features/telemetry/protocols/sflow/parser/src/test/java/org/opennms/netmgt/telemetry/protocols/sflow/parser/proto/flows/BsonDocumentTest.java", "diffHunk": "@@ -198,6 +198,30 @@ private BsonDocument createExtendedGateway() {\n         return bsonDocument;\n     }\n \n+    private BsonDocument createDirectionIngress() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyNTE1NQ=="}, "originalCommit": {"oid": "fd957c786a442737a958bdd2443a398b6af8bd2f"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3013, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}