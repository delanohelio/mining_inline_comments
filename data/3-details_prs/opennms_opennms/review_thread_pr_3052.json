{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNTk1ODk0", "number": 3052, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMDo1MDo0MlrOEJVnnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1OTowNVrOEKbQkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjI2ODQ1OnYy", "diffSide": "RIGHT", "path": "opennms-doc/guide-development/src/asciidoc/text/rest/remotepoller.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMDo1MDo0MlrOGp08bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxODo1MDo0N1rOGp3mmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMjIzNw==", "bodyText": "Would it make sense to call it /remotepoller/availability/{applicationId} and /remotepoller/availability/{applicationId}/{monitoredServiceId}? That way don't have to break the API later when we want to publish also other information from a remote poller application, like status or whatever we need to publish?", "url": "https://github.com/OpenNMS/opennms/pull/3052#discussion_r446512237", "createdAt": "2020-06-27T10:50:42Z", "author": {"login": "indigo423"}, "path": "opennms-doc/guide-development/src/asciidoc/text/rest/remotepoller.adoc", "diffHunk": "@@ -0,0 +1,59 @@\n+\n+==== Remote Roller\n+\n+===== GETs (Reading Data)\n+\n+Allows to query the aggregated percentage availability for a given specific application and its services.\n+\n+NOTE: This API is v2-only\n+\n+[options=\"header\", cols=\"5,10\"]\n+|===\n+| Resource                                           | Description\n+| `remotepoller/{applicationId}`                     | Get the list of aggregated percentage availability per location for the application specified by _applicationId_.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "934aef74958de87c9726170acd130df52a1eec7b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxODEwMQ==", "bodyText": "I have currently implemented the API as defined in Confluence. I'm sure this will change over time, but at the moment the UI work is based on exactly this API.", "url": "https://github.com/OpenNMS/opennms/pull/3052#discussion_r446518101", "createdAt": "2020-06-27T12:06:11Z", "author": {"login": "christianpape"}, "path": "opennms-doc/guide-development/src/asciidoc/text/rest/remotepoller.adoc", "diffHunk": "@@ -0,0 +1,59 @@\n+\n+==== Remote Roller\n+\n+===== GETs (Reading Data)\n+\n+Allows to query the aggregated percentage availability for a given specific application and its services.\n+\n+NOTE: This API is v2-only\n+\n+[options=\"header\", cols=\"5,10\"]\n+|===\n+| Resource                                           | Description\n+| `remotepoller/{applicationId}`                     | Get the list of aggregated percentage availability per location for the application specified by _applicationId_.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMjIzNw=="}, "originalCommit": {"oid": "934aef74958de87c9726170acd130df52a1eec7b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1NTgwMQ==", "bodyText": "ok got it :)", "url": "https://github.com/OpenNMS/opennms/pull/3052#discussion_r446555801", "createdAt": "2020-06-27T18:50:47Z", "author": {"login": "indigo423"}, "path": "opennms-doc/guide-development/src/asciidoc/text/rest/remotepoller.adoc", "diffHunk": "@@ -0,0 +1,59 @@\n+\n+==== Remote Roller\n+\n+===== GETs (Reading Data)\n+\n+Allows to query the aggregated percentage availability for a given specific application and its services.\n+\n+NOTE: This API is v2-only\n+\n+[options=\"header\", cols=\"5,10\"]\n+|===\n+| Resource                                           | Description\n+| `remotepoller/{applicationId}`                     | Get the list of aggregated percentage availability per location for the application specified by _applicationId_.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMjIzNw=="}, "originalCommit": {"oid": "934aef74958de87c9726170acd130df52a1eec7b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjI2ODgxOnYy", "diffSide": "RIGHT", "path": "opennms-doc/guide-development/src/asciidoc/text/rest/remotepoller.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMDo1MToyOFrOGp08mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMDo1MToyOFrOGp08mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMjI4Mg==", "bodyText": "montoredServiceId -> monitoredServiceId", "url": "https://github.com/OpenNMS/opennms/pull/3052#discussion_r446512282", "createdAt": "2020-06-27T10:51:28Z", "author": {"login": "indigo423"}, "path": "opennms-doc/guide-development/src/asciidoc/text/rest/remotepoller.adoc", "diffHunk": "@@ -0,0 +1,59 @@\n+\n+==== Remote Roller\n+\n+===== GETs (Reading Data)\n+\n+Allows to query the aggregated percentage availability for a given specific application and its services.\n+\n+NOTE: This API is v2-only\n+\n+[options=\"header\", cols=\"5,10\"]\n+|===\n+| Resource                                           | Description\n+| `remotepoller/{applicationId}`                     | Get the list of aggregated percentage availability per location for the application specified by _applicationId_.\n+| `remotepoller/{applicationId}/{montoredServiceId}` | Get the list of aggregated percentage availability per location for an application service specified by _applicationId_ and _monitoredServiceId_.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "934aef74958de87c9726170acd130df52a1eec7b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzY1MTkxOnYy", "diffSide": "RIGHT", "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/ApplicationStatusRestService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1MTo0M1rOGrc8nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzozODo1N1rOGrmUIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNjIyMQ==", "bodyText": "Rename to buildApplicationServiceStatus or inline.", "url": "https://github.com/OpenNMS/opennms/pull/3052#discussion_r448216221", "createdAt": "2020-07-01T08:51:43Z", "author": {"login": "fooker"}, "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/ApplicationStatusRestService.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.web.rest.v2;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.opennms.core.utils.InetAddressUtils;\n+import org.opennms.netmgt.collection.support.builder.RemoteLatencyResource;\n+import org.opennms.netmgt.dao.api.ApplicationDao;\n+import org.opennms.netmgt.dao.api.LocationSpecificStatusDao;\n+import org.opennms.netmgt.dao.api.MonitoredServiceDao;\n+import org.opennms.netmgt.model.OnmsApplication;\n+import org.opennms.netmgt.model.OnmsLocationSpecificStatus;\n+import org.opennms.netmgt.model.OnmsMonitoredService;\n+import org.opennms.netmgt.model.monitoringLocations.OnmsMonitoringLocation;\n+import org.opennms.netmgt.model.remotepolling.ApplicationServiceStatus;\n+import org.opennms.netmgt.model.remotepolling.ApplicationStatus;\n+import org.opennms.netmgt.model.remotepolling.Location;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Lists;\n+\n+@Component\n+@Path(\"remotepoller\")\n+@Transactional\n+public class ApplicationStatusRestService {\n+\n+    @Autowired\n+    private LocationSpecificStatusDao locationSpecificStatusDao;\n+\n+    @Autowired\n+    private ApplicationDao applicationDao;\n+\n+    @Autowired\n+    private MonitoredServiceDao monitoredServiceDao;\n+\n+    class DowntimeInterval {\n+        public long start, end;\n+\n+        public DowntimeInterval(final long start, final long end) {\n+            this.start = start;\n+            this.end = end;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return MoreObjects.toStringHelper(this)\n+                    .add(\"start\", start)\n+                    .add(\"end\", end)\n+                    .toString();\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            DowntimeInterval that = (DowntimeInterval) o;\n+            return start == that.start &&\n+                    end == that.end;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(start, end);\n+        }\n+    }\n+\n+    private List<DowntimeInterval> mergeDowntimeIntervals(final List<DowntimeInterval> intervals) {\n+        final List<DowntimeInterval> resultList = new ArrayList<>();\n+\n+        Collections.sort(intervals, (DowntimeInterval donwtimeInterval1, DowntimeInterval donwtimeInterval2) -> {\n+            return Long.signum(donwtimeInterval1.start - donwtimeInterval2.start) != 0 ? Long.signum(donwtimeInterval1.start - donwtimeInterval2.start) : Long.signum(donwtimeInterval1.end - donwtimeInterval2.end);\n+        });\n+\n+        for (int i = 0; i < intervals.size(); ++i) {\n+            final DowntimeInterval mergedInterval = intervals.get(i);\n+\n+            ++i;\n+            while (i < intervals.size() && intervalsOverlap(mergedInterval, intervals.get(i))) {\n+                mergedInterval.start = Math.min(mergedInterval.start, intervals.get(i).start);\n+                mergedInterval.end = Math.max(mergedInterval.end, intervals.get(i).end);\n+                ++i;\n+            }\n+            --i;\n+\n+            resultList.add(mergedInterval);\n+        }\n+\n+        return resultList;\n+    }\n+\n+    private boolean intervalsOverlap(final DowntimeInterval donwtimeInterval1, final DowntimeInterval donwtimeInterval2) {\n+        return !(Math.max(donwtimeInterval1.start, donwtimeInterval2.start) > Math.min(donwtimeInterval1.end, donwtimeInterval2.end));\n+    }\n+\n+    private double calculateServicePercentageUptime(final Collection<OnmsLocationSpecificStatus> statusChanges, final List<DowntimeInterval> downtimeIntervals, final long start, final long end) {\n+        double totalTimeMillis = end - start;\n+        double uptimeMillis = totalTimeMillis;\n+\n+        OnmsLocationSpecificStatus lastChange = null;\n+\n+        for(final OnmsLocationSpecificStatus status : statusChanges) {\n+            long s = (lastChange == null ? 0 : lastChange.getPollResult().getTimestamp().getTime());\n+            long e = status.getPollResult().getTimestamp().getTime();\n+            if (lastChange != null && lastChange.getPollResult().isDown() ) {\n+                if(s < e) {\n+                    uptimeMillis -= (Math.min(e, end)-Math.max(s, start));\n+                    downtimeIntervals.add(new DowntimeInterval(Math.max(s, start), Math.min(e, end)));\n+                }\n+            }\n+            lastChange = status;\n+        }\n+\n+        if (lastChange != null && lastChange.getPollResult().isDown() ) {\n+            long s = lastChange.getPollResult().getTimestamp().getTime();\n+            long e = end;\n+            if(s < e) {\n+                uptimeMillis -= (Math.min(e, end)-Math.max(s, start));\n+                downtimeIntervals.add(new DowntimeInterval(Math.max(s, start), Math.min(e, end)));\n+            }\n+        }\n+\n+        return uptimeMillis / totalTimeMillis;\n+    }\n+\n+    public double calculateApplicationPercentageUptime(final List<DowntimeInterval> intervals, final long start, final long end) {\n+        double totalTimeMillis = end - start;\n+        double uptimeMillis = totalTimeMillis;\n+        for(final DowntimeInterval interval : intervals) {\n+            uptimeMillis -= (Math.min(interval.end, end)-Math.max(interval.start, start));\n+        }\n+        return uptimeMillis / totalTimeMillis;\n+    }\n+\n+\n+    private ApplicationStatus getApplicationStatus(final OnmsApplication onmsApplication, final Collection<OnmsLocationSpecificStatus> statusChanges, final long start, final long end) {\n+        final Map<OnmsMonitoringLocation, Map<OnmsMonitoredService, List<OnmsLocationSpecificStatus>>> m = new HashMap<>();\n+\n+        for(final OnmsLocationSpecificStatus onmsLocationSpecificStatus : statusChanges) {\n+            m.computeIfAbsent(onmsLocationSpecificStatus.getLocation(), k -> new HashMap<>())\n+                    .computeIfAbsent(onmsLocationSpecificStatus.getMonitoredService(), k -> new ArrayList<>())\n+                    .add(onmsLocationSpecificStatus);\n+        }\n+\n+        final ApplicationStatus applicationStatus = new ApplicationStatus();\n+        applicationStatus.setStart(start);\n+        applicationStatus.setEnd(end);\n+        applicationStatus.setApplicationId(onmsApplication.getId());\n+\n+        for (final OnmsMonitoringLocation onmsMonitoringLocation : m.keySet()) {\n+            final Location location = new Location();\n+            location.setName(onmsMonitoringLocation.getLocationName());\n+\n+            final List<DowntimeInterval> downtimeIntervals = Lists.newArrayList();\n+            \n+            for (final OnmsMonitoredService onmsMonitoredService : m.get(onmsMonitoringLocation).keySet()) {\n+                calculateServicePercentageUptime(m.get(onmsMonitoringLocation).get(onmsMonitoredService), downtimeIntervals, start, end);\n+            }\n+\n+            final List<DowntimeInterval> mergedDowntimeIntervals = mergeDowntimeIntervals(downtimeIntervals);\n+\n+            location.setAggregatedStatus(100.0 * calculateApplicationPercentageUptime(mergedDowntimeIntervals, start, end));\n+            applicationStatus.getLocations().add(location);\n+        }\n+        return applicationStatus;\n+    }\n+\n+    private ApplicationServiceStatus getApplicationServiceStatus(final OnmsApplication onmsApplication, final Integer monitoredServiceId, final Collection<OnmsLocationSpecificStatus> statusChanges, final long start, final long end) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d2e823993d2b732efa79834c46fd87a28daa0d9"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM2OTY5Nw==", "bodyText": "done.", "url": "https://github.com/OpenNMS/opennms/pull/3052#discussion_r448369697", "createdAt": "2020-07-01T13:38:57Z", "author": {"login": "christianpape"}, "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/ApplicationStatusRestService.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.web.rest.v2;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.opennms.core.utils.InetAddressUtils;\n+import org.opennms.netmgt.collection.support.builder.RemoteLatencyResource;\n+import org.opennms.netmgt.dao.api.ApplicationDao;\n+import org.opennms.netmgt.dao.api.LocationSpecificStatusDao;\n+import org.opennms.netmgt.dao.api.MonitoredServiceDao;\n+import org.opennms.netmgt.model.OnmsApplication;\n+import org.opennms.netmgt.model.OnmsLocationSpecificStatus;\n+import org.opennms.netmgt.model.OnmsMonitoredService;\n+import org.opennms.netmgt.model.monitoringLocations.OnmsMonitoringLocation;\n+import org.opennms.netmgt.model.remotepolling.ApplicationServiceStatus;\n+import org.opennms.netmgt.model.remotepolling.ApplicationStatus;\n+import org.opennms.netmgt.model.remotepolling.Location;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Lists;\n+\n+@Component\n+@Path(\"remotepoller\")\n+@Transactional\n+public class ApplicationStatusRestService {\n+\n+    @Autowired\n+    private LocationSpecificStatusDao locationSpecificStatusDao;\n+\n+    @Autowired\n+    private ApplicationDao applicationDao;\n+\n+    @Autowired\n+    private MonitoredServiceDao monitoredServiceDao;\n+\n+    class DowntimeInterval {\n+        public long start, end;\n+\n+        public DowntimeInterval(final long start, final long end) {\n+            this.start = start;\n+            this.end = end;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return MoreObjects.toStringHelper(this)\n+                    .add(\"start\", start)\n+                    .add(\"end\", end)\n+                    .toString();\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            DowntimeInterval that = (DowntimeInterval) o;\n+            return start == that.start &&\n+                    end == that.end;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(start, end);\n+        }\n+    }\n+\n+    private List<DowntimeInterval> mergeDowntimeIntervals(final List<DowntimeInterval> intervals) {\n+        final List<DowntimeInterval> resultList = new ArrayList<>();\n+\n+        Collections.sort(intervals, (DowntimeInterval donwtimeInterval1, DowntimeInterval donwtimeInterval2) -> {\n+            return Long.signum(donwtimeInterval1.start - donwtimeInterval2.start) != 0 ? Long.signum(donwtimeInterval1.start - donwtimeInterval2.start) : Long.signum(donwtimeInterval1.end - donwtimeInterval2.end);\n+        });\n+\n+        for (int i = 0; i < intervals.size(); ++i) {\n+            final DowntimeInterval mergedInterval = intervals.get(i);\n+\n+            ++i;\n+            while (i < intervals.size() && intervalsOverlap(mergedInterval, intervals.get(i))) {\n+                mergedInterval.start = Math.min(mergedInterval.start, intervals.get(i).start);\n+                mergedInterval.end = Math.max(mergedInterval.end, intervals.get(i).end);\n+                ++i;\n+            }\n+            --i;\n+\n+            resultList.add(mergedInterval);\n+        }\n+\n+        return resultList;\n+    }\n+\n+    private boolean intervalsOverlap(final DowntimeInterval donwtimeInterval1, final DowntimeInterval donwtimeInterval2) {\n+        return !(Math.max(donwtimeInterval1.start, donwtimeInterval2.start) > Math.min(donwtimeInterval1.end, donwtimeInterval2.end));\n+    }\n+\n+    private double calculateServicePercentageUptime(final Collection<OnmsLocationSpecificStatus> statusChanges, final List<DowntimeInterval> downtimeIntervals, final long start, final long end) {\n+        double totalTimeMillis = end - start;\n+        double uptimeMillis = totalTimeMillis;\n+\n+        OnmsLocationSpecificStatus lastChange = null;\n+\n+        for(final OnmsLocationSpecificStatus status : statusChanges) {\n+            long s = (lastChange == null ? 0 : lastChange.getPollResult().getTimestamp().getTime());\n+            long e = status.getPollResult().getTimestamp().getTime();\n+            if (lastChange != null && lastChange.getPollResult().isDown() ) {\n+                if(s < e) {\n+                    uptimeMillis -= (Math.min(e, end)-Math.max(s, start));\n+                    downtimeIntervals.add(new DowntimeInterval(Math.max(s, start), Math.min(e, end)));\n+                }\n+            }\n+            lastChange = status;\n+        }\n+\n+        if (lastChange != null && lastChange.getPollResult().isDown() ) {\n+            long s = lastChange.getPollResult().getTimestamp().getTime();\n+            long e = end;\n+            if(s < e) {\n+                uptimeMillis -= (Math.min(e, end)-Math.max(s, start));\n+                downtimeIntervals.add(new DowntimeInterval(Math.max(s, start), Math.min(e, end)));\n+            }\n+        }\n+\n+        return uptimeMillis / totalTimeMillis;\n+    }\n+\n+    public double calculateApplicationPercentageUptime(final List<DowntimeInterval> intervals, final long start, final long end) {\n+        double totalTimeMillis = end - start;\n+        double uptimeMillis = totalTimeMillis;\n+        for(final DowntimeInterval interval : intervals) {\n+            uptimeMillis -= (Math.min(interval.end, end)-Math.max(interval.start, start));\n+        }\n+        return uptimeMillis / totalTimeMillis;\n+    }\n+\n+\n+    private ApplicationStatus getApplicationStatus(final OnmsApplication onmsApplication, final Collection<OnmsLocationSpecificStatus> statusChanges, final long start, final long end) {\n+        final Map<OnmsMonitoringLocation, Map<OnmsMonitoredService, List<OnmsLocationSpecificStatus>>> m = new HashMap<>();\n+\n+        for(final OnmsLocationSpecificStatus onmsLocationSpecificStatus : statusChanges) {\n+            m.computeIfAbsent(onmsLocationSpecificStatus.getLocation(), k -> new HashMap<>())\n+                    .computeIfAbsent(onmsLocationSpecificStatus.getMonitoredService(), k -> new ArrayList<>())\n+                    .add(onmsLocationSpecificStatus);\n+        }\n+\n+        final ApplicationStatus applicationStatus = new ApplicationStatus();\n+        applicationStatus.setStart(start);\n+        applicationStatus.setEnd(end);\n+        applicationStatus.setApplicationId(onmsApplication.getId());\n+\n+        for (final OnmsMonitoringLocation onmsMonitoringLocation : m.keySet()) {\n+            final Location location = new Location();\n+            location.setName(onmsMonitoringLocation.getLocationName());\n+\n+            final List<DowntimeInterval> downtimeIntervals = Lists.newArrayList();\n+            \n+            for (final OnmsMonitoredService onmsMonitoredService : m.get(onmsMonitoringLocation).keySet()) {\n+                calculateServicePercentageUptime(m.get(onmsMonitoringLocation).get(onmsMonitoredService), downtimeIntervals, start, end);\n+            }\n+\n+            final List<DowntimeInterval> mergedDowntimeIntervals = mergeDowntimeIntervals(downtimeIntervals);\n+\n+            location.setAggregatedStatus(100.0 * calculateApplicationPercentageUptime(mergedDowntimeIntervals, start, end));\n+            applicationStatus.getLocations().add(location);\n+        }\n+        return applicationStatus;\n+    }\n+\n+    private ApplicationServiceStatus getApplicationServiceStatus(final OnmsApplication onmsApplication, final Integer monitoredServiceId, final Collection<OnmsLocationSpecificStatus> statusChanges, final long start, final long end) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNjIyMQ=="}, "originalCommit": {"oid": "7d2e823993d2b732efa79834c46fd87a28daa0d9"}, "originalPosition": 212}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzY2MjY1OnYy", "diffSide": "RIGHT", "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/ApplicationStatusRestService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1NDo0OVrOGrdDcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzozOTowN1rOGrmUhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzk3MQ==", "bodyText": "Rename to buildApplicationStatus or inline.", "url": "https://github.com/OpenNMS/opennms/pull/3052#discussion_r448217971", "createdAt": "2020-07-01T08:54:49Z", "author": {"login": "fooker"}, "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/ApplicationStatusRestService.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.web.rest.v2;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.opennms.core.utils.InetAddressUtils;\n+import org.opennms.netmgt.collection.support.builder.RemoteLatencyResource;\n+import org.opennms.netmgt.dao.api.ApplicationDao;\n+import org.opennms.netmgt.dao.api.LocationSpecificStatusDao;\n+import org.opennms.netmgt.dao.api.MonitoredServiceDao;\n+import org.opennms.netmgt.model.OnmsApplication;\n+import org.opennms.netmgt.model.OnmsLocationSpecificStatus;\n+import org.opennms.netmgt.model.OnmsMonitoredService;\n+import org.opennms.netmgt.model.monitoringLocations.OnmsMonitoringLocation;\n+import org.opennms.netmgt.model.remotepolling.ApplicationServiceStatus;\n+import org.opennms.netmgt.model.remotepolling.ApplicationStatus;\n+import org.opennms.netmgt.model.remotepolling.Location;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Lists;\n+\n+@Component\n+@Path(\"remotepoller\")\n+@Transactional\n+public class ApplicationStatusRestService {\n+\n+    @Autowired\n+    private LocationSpecificStatusDao locationSpecificStatusDao;\n+\n+    @Autowired\n+    private ApplicationDao applicationDao;\n+\n+    @Autowired\n+    private MonitoredServiceDao monitoredServiceDao;\n+\n+    class DowntimeInterval {\n+        public long start, end;\n+\n+        public DowntimeInterval(final long start, final long end) {\n+            this.start = start;\n+            this.end = end;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return MoreObjects.toStringHelper(this)\n+                    .add(\"start\", start)\n+                    .add(\"end\", end)\n+                    .toString();\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            DowntimeInterval that = (DowntimeInterval) o;\n+            return start == that.start &&\n+                    end == that.end;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(start, end);\n+        }\n+    }\n+\n+    private List<DowntimeInterval> mergeDowntimeIntervals(final List<DowntimeInterval> intervals) {\n+        final List<DowntimeInterval> resultList = new ArrayList<>();\n+\n+        Collections.sort(intervals, (DowntimeInterval donwtimeInterval1, DowntimeInterval donwtimeInterval2) -> {\n+            return Long.signum(donwtimeInterval1.start - donwtimeInterval2.start) != 0 ? Long.signum(donwtimeInterval1.start - donwtimeInterval2.start) : Long.signum(donwtimeInterval1.end - donwtimeInterval2.end);\n+        });\n+\n+        for (int i = 0; i < intervals.size(); ++i) {\n+            final DowntimeInterval mergedInterval = intervals.get(i);\n+\n+            ++i;\n+            while (i < intervals.size() && intervalsOverlap(mergedInterval, intervals.get(i))) {\n+                mergedInterval.start = Math.min(mergedInterval.start, intervals.get(i).start);\n+                mergedInterval.end = Math.max(mergedInterval.end, intervals.get(i).end);\n+                ++i;\n+            }\n+            --i;\n+\n+            resultList.add(mergedInterval);\n+        }\n+\n+        return resultList;\n+    }\n+\n+    private boolean intervalsOverlap(final DowntimeInterval donwtimeInterval1, final DowntimeInterval donwtimeInterval2) {\n+        return !(Math.max(donwtimeInterval1.start, donwtimeInterval2.start) > Math.min(donwtimeInterval1.end, donwtimeInterval2.end));\n+    }\n+\n+    private double calculateServicePercentageUptime(final Collection<OnmsLocationSpecificStatus> statusChanges, final List<DowntimeInterval> downtimeIntervals, final long start, final long end) {\n+        double totalTimeMillis = end - start;\n+        double uptimeMillis = totalTimeMillis;\n+\n+        OnmsLocationSpecificStatus lastChange = null;\n+\n+        for(final OnmsLocationSpecificStatus status : statusChanges) {\n+            long s = (lastChange == null ? 0 : lastChange.getPollResult().getTimestamp().getTime());\n+            long e = status.getPollResult().getTimestamp().getTime();\n+            if (lastChange != null && lastChange.getPollResult().isDown() ) {\n+                if(s < e) {\n+                    uptimeMillis -= (Math.min(e, end)-Math.max(s, start));\n+                    downtimeIntervals.add(new DowntimeInterval(Math.max(s, start), Math.min(e, end)));\n+                }\n+            }\n+            lastChange = status;\n+        }\n+\n+        if (lastChange != null && lastChange.getPollResult().isDown() ) {\n+            long s = lastChange.getPollResult().getTimestamp().getTime();\n+            long e = end;\n+            if(s < e) {\n+                uptimeMillis -= (Math.min(e, end)-Math.max(s, start));\n+                downtimeIntervals.add(new DowntimeInterval(Math.max(s, start), Math.min(e, end)));\n+            }\n+        }\n+\n+        return uptimeMillis / totalTimeMillis;\n+    }\n+\n+    public double calculateApplicationPercentageUptime(final List<DowntimeInterval> intervals, final long start, final long end) {\n+        double totalTimeMillis = end - start;\n+        double uptimeMillis = totalTimeMillis;\n+        for(final DowntimeInterval interval : intervals) {\n+            uptimeMillis -= (Math.min(interval.end, end)-Math.max(interval.start, start));\n+        }\n+        return uptimeMillis / totalTimeMillis;\n+    }\n+\n+\n+    private ApplicationStatus getApplicationStatus(final OnmsApplication onmsApplication, final Collection<OnmsLocationSpecificStatus> statusChanges, final long start, final long end) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d2e823993d2b732efa79834c46fd87a28daa0d9"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM2OTc5Nw==", "bodyText": "done.", "url": "https://github.com/OpenNMS/opennms/pull/3052#discussion_r448369797", "createdAt": "2020-07-01T13:39:07Z", "author": {"login": "christianpape"}, "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/ApplicationStatusRestService.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.web.rest.v2;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.opennms.core.utils.InetAddressUtils;\n+import org.opennms.netmgt.collection.support.builder.RemoteLatencyResource;\n+import org.opennms.netmgt.dao.api.ApplicationDao;\n+import org.opennms.netmgt.dao.api.LocationSpecificStatusDao;\n+import org.opennms.netmgt.dao.api.MonitoredServiceDao;\n+import org.opennms.netmgt.model.OnmsApplication;\n+import org.opennms.netmgt.model.OnmsLocationSpecificStatus;\n+import org.opennms.netmgt.model.OnmsMonitoredService;\n+import org.opennms.netmgt.model.monitoringLocations.OnmsMonitoringLocation;\n+import org.opennms.netmgt.model.remotepolling.ApplicationServiceStatus;\n+import org.opennms.netmgt.model.remotepolling.ApplicationStatus;\n+import org.opennms.netmgt.model.remotepolling.Location;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Lists;\n+\n+@Component\n+@Path(\"remotepoller\")\n+@Transactional\n+public class ApplicationStatusRestService {\n+\n+    @Autowired\n+    private LocationSpecificStatusDao locationSpecificStatusDao;\n+\n+    @Autowired\n+    private ApplicationDao applicationDao;\n+\n+    @Autowired\n+    private MonitoredServiceDao monitoredServiceDao;\n+\n+    class DowntimeInterval {\n+        public long start, end;\n+\n+        public DowntimeInterval(final long start, final long end) {\n+            this.start = start;\n+            this.end = end;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return MoreObjects.toStringHelper(this)\n+                    .add(\"start\", start)\n+                    .add(\"end\", end)\n+                    .toString();\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            DowntimeInterval that = (DowntimeInterval) o;\n+            return start == that.start &&\n+                    end == that.end;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(start, end);\n+        }\n+    }\n+\n+    private List<DowntimeInterval> mergeDowntimeIntervals(final List<DowntimeInterval> intervals) {\n+        final List<DowntimeInterval> resultList = new ArrayList<>();\n+\n+        Collections.sort(intervals, (DowntimeInterval donwtimeInterval1, DowntimeInterval donwtimeInterval2) -> {\n+            return Long.signum(donwtimeInterval1.start - donwtimeInterval2.start) != 0 ? Long.signum(donwtimeInterval1.start - donwtimeInterval2.start) : Long.signum(donwtimeInterval1.end - donwtimeInterval2.end);\n+        });\n+\n+        for (int i = 0; i < intervals.size(); ++i) {\n+            final DowntimeInterval mergedInterval = intervals.get(i);\n+\n+            ++i;\n+            while (i < intervals.size() && intervalsOverlap(mergedInterval, intervals.get(i))) {\n+                mergedInterval.start = Math.min(mergedInterval.start, intervals.get(i).start);\n+                mergedInterval.end = Math.max(mergedInterval.end, intervals.get(i).end);\n+                ++i;\n+            }\n+            --i;\n+\n+            resultList.add(mergedInterval);\n+        }\n+\n+        return resultList;\n+    }\n+\n+    private boolean intervalsOverlap(final DowntimeInterval donwtimeInterval1, final DowntimeInterval donwtimeInterval2) {\n+        return !(Math.max(donwtimeInterval1.start, donwtimeInterval2.start) > Math.min(donwtimeInterval1.end, donwtimeInterval2.end));\n+    }\n+\n+    private double calculateServicePercentageUptime(final Collection<OnmsLocationSpecificStatus> statusChanges, final List<DowntimeInterval> downtimeIntervals, final long start, final long end) {\n+        double totalTimeMillis = end - start;\n+        double uptimeMillis = totalTimeMillis;\n+\n+        OnmsLocationSpecificStatus lastChange = null;\n+\n+        for(final OnmsLocationSpecificStatus status : statusChanges) {\n+            long s = (lastChange == null ? 0 : lastChange.getPollResult().getTimestamp().getTime());\n+            long e = status.getPollResult().getTimestamp().getTime();\n+            if (lastChange != null && lastChange.getPollResult().isDown() ) {\n+                if(s < e) {\n+                    uptimeMillis -= (Math.min(e, end)-Math.max(s, start));\n+                    downtimeIntervals.add(new DowntimeInterval(Math.max(s, start), Math.min(e, end)));\n+                }\n+            }\n+            lastChange = status;\n+        }\n+\n+        if (lastChange != null && lastChange.getPollResult().isDown() ) {\n+            long s = lastChange.getPollResult().getTimestamp().getTime();\n+            long e = end;\n+            if(s < e) {\n+                uptimeMillis -= (Math.min(e, end)-Math.max(s, start));\n+                downtimeIntervals.add(new DowntimeInterval(Math.max(s, start), Math.min(e, end)));\n+            }\n+        }\n+\n+        return uptimeMillis / totalTimeMillis;\n+    }\n+\n+    public double calculateApplicationPercentageUptime(final List<DowntimeInterval> intervals, final long start, final long end) {\n+        double totalTimeMillis = end - start;\n+        double uptimeMillis = totalTimeMillis;\n+        for(final DowntimeInterval interval : intervals) {\n+            uptimeMillis -= (Math.min(interval.end, end)-Math.max(interval.start, start));\n+        }\n+        return uptimeMillis / totalTimeMillis;\n+    }\n+\n+\n+    private ApplicationStatus getApplicationStatus(final OnmsApplication onmsApplication, final Collection<OnmsLocationSpecificStatus> statusChanges, final long start, final long end) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzk3MQ=="}, "originalCommit": {"oid": "7d2e823993d2b732efa79834c46fd87a28daa0d9"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzY3Njc4OnYy", "diffSide": "RIGHT", "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/ApplicationStatusRestService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1ODo0MFrOGrdMeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1ODo0MFrOGrdMeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMDI4Mg==", "bodyText": "Is this collection required? Why not just calculate the values and fill the ApplicationStatus?", "url": "https://github.com/OpenNMS/opennms/pull/3052#discussion_r448220282", "createdAt": "2020-07-01T08:58:40Z", "author": {"login": "fooker"}, "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/ApplicationStatusRestService.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.web.rest.v2;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.opennms.core.utils.InetAddressUtils;\n+import org.opennms.netmgt.collection.support.builder.RemoteLatencyResource;\n+import org.opennms.netmgt.dao.api.ApplicationDao;\n+import org.opennms.netmgt.dao.api.LocationSpecificStatusDao;\n+import org.opennms.netmgt.dao.api.MonitoredServiceDao;\n+import org.opennms.netmgt.model.OnmsApplication;\n+import org.opennms.netmgt.model.OnmsLocationSpecificStatus;\n+import org.opennms.netmgt.model.OnmsMonitoredService;\n+import org.opennms.netmgt.model.monitoringLocations.OnmsMonitoringLocation;\n+import org.opennms.netmgt.model.remotepolling.ApplicationServiceStatus;\n+import org.opennms.netmgt.model.remotepolling.ApplicationStatus;\n+import org.opennms.netmgt.model.remotepolling.Location;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Lists;\n+\n+@Component\n+@Path(\"remotepoller\")\n+@Transactional\n+public class ApplicationStatusRestService {\n+\n+    @Autowired\n+    private LocationSpecificStatusDao locationSpecificStatusDao;\n+\n+    @Autowired\n+    private ApplicationDao applicationDao;\n+\n+    @Autowired\n+    private MonitoredServiceDao monitoredServiceDao;\n+\n+    class DowntimeInterval {\n+        public long start, end;\n+\n+        public DowntimeInterval(final long start, final long end) {\n+            this.start = start;\n+            this.end = end;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return MoreObjects.toStringHelper(this)\n+                    .add(\"start\", start)\n+                    .add(\"end\", end)\n+                    .toString();\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            DowntimeInterval that = (DowntimeInterval) o;\n+            return start == that.start &&\n+                    end == that.end;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(start, end);\n+        }\n+    }\n+\n+    private List<DowntimeInterval> mergeDowntimeIntervals(final List<DowntimeInterval> intervals) {\n+        final List<DowntimeInterval> resultList = new ArrayList<>();\n+\n+        Collections.sort(intervals, (DowntimeInterval donwtimeInterval1, DowntimeInterval donwtimeInterval2) -> {\n+            return Long.signum(donwtimeInterval1.start - donwtimeInterval2.start) != 0 ? Long.signum(donwtimeInterval1.start - donwtimeInterval2.start) : Long.signum(donwtimeInterval1.end - donwtimeInterval2.end);\n+        });\n+\n+        for (int i = 0; i < intervals.size(); ++i) {\n+            final DowntimeInterval mergedInterval = intervals.get(i);\n+\n+            ++i;\n+            while (i < intervals.size() && intervalsOverlap(mergedInterval, intervals.get(i))) {\n+                mergedInterval.start = Math.min(mergedInterval.start, intervals.get(i).start);\n+                mergedInterval.end = Math.max(mergedInterval.end, intervals.get(i).end);\n+                ++i;\n+            }\n+            --i;\n+\n+            resultList.add(mergedInterval);\n+        }\n+\n+        return resultList;\n+    }\n+\n+    private boolean intervalsOverlap(final DowntimeInterval donwtimeInterval1, final DowntimeInterval donwtimeInterval2) {\n+        return !(Math.max(donwtimeInterval1.start, donwtimeInterval2.start) > Math.min(donwtimeInterval1.end, donwtimeInterval2.end));\n+    }\n+\n+    private double calculateServicePercentageUptime(final Collection<OnmsLocationSpecificStatus> statusChanges, final List<DowntimeInterval> downtimeIntervals, final long start, final long end) {\n+        double totalTimeMillis = end - start;\n+        double uptimeMillis = totalTimeMillis;\n+\n+        OnmsLocationSpecificStatus lastChange = null;\n+\n+        for(final OnmsLocationSpecificStatus status : statusChanges) {\n+            long s = (lastChange == null ? 0 : lastChange.getPollResult().getTimestamp().getTime());\n+            long e = status.getPollResult().getTimestamp().getTime();\n+            if (lastChange != null && lastChange.getPollResult().isDown() ) {\n+                if(s < e) {\n+                    uptimeMillis -= (Math.min(e, end)-Math.max(s, start));\n+                    downtimeIntervals.add(new DowntimeInterval(Math.max(s, start), Math.min(e, end)));\n+                }\n+            }\n+            lastChange = status;\n+        }\n+\n+        if (lastChange != null && lastChange.getPollResult().isDown() ) {\n+            long s = lastChange.getPollResult().getTimestamp().getTime();\n+            long e = end;\n+            if(s < e) {\n+                uptimeMillis -= (Math.min(e, end)-Math.max(s, start));\n+                downtimeIntervals.add(new DowntimeInterval(Math.max(s, start), Math.min(e, end)));\n+            }\n+        }\n+\n+        return uptimeMillis / totalTimeMillis;\n+    }\n+\n+    public double calculateApplicationPercentageUptime(final List<DowntimeInterval> intervals, final long start, final long end) {\n+        double totalTimeMillis = end - start;\n+        double uptimeMillis = totalTimeMillis;\n+        for(final DowntimeInterval interval : intervals) {\n+            uptimeMillis -= (Math.min(interval.end, end)-Math.max(interval.start, start));\n+        }\n+        return uptimeMillis / totalTimeMillis;\n+    }\n+\n+\n+    private ApplicationStatus getApplicationStatus(final OnmsApplication onmsApplication, final Collection<OnmsLocationSpecificStatus> statusChanges, final long start, final long end) {\n+        final Map<OnmsMonitoringLocation, Map<OnmsMonitoredService, List<OnmsLocationSpecificStatus>>> m = new HashMap<>();\n+\n+        for(final OnmsLocationSpecificStatus onmsLocationSpecificStatus : statusChanges) {\n+            m.computeIfAbsent(onmsLocationSpecificStatus.getLocation(), k -> new HashMap<>())\n+                    .computeIfAbsent(onmsLocationSpecificStatus.getMonitoredService(), k -> new ArrayList<>())\n+                    .add(onmsLocationSpecificStatus);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d2e823993d2b732efa79834c46fd87a28daa0d9"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzY3ODI1OnYy", "diffSide": "RIGHT", "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/ApplicationStatusRestService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1OTowNVrOGrdNaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1OTowNVrOGrdNaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMDUyMw==", "bodyText": "Is this collection required? Why not just calculate the values and fill the ApplicationServiceStatus?", "url": "https://github.com/OpenNMS/opennms/pull/3052#discussion_r448220523", "createdAt": "2020-07-01T08:59:05Z", "author": {"login": "fooker"}, "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/ApplicationStatusRestService.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.web.rest.v2;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.opennms.core.utils.InetAddressUtils;\n+import org.opennms.netmgt.collection.support.builder.RemoteLatencyResource;\n+import org.opennms.netmgt.dao.api.ApplicationDao;\n+import org.opennms.netmgt.dao.api.LocationSpecificStatusDao;\n+import org.opennms.netmgt.dao.api.MonitoredServiceDao;\n+import org.opennms.netmgt.model.OnmsApplication;\n+import org.opennms.netmgt.model.OnmsLocationSpecificStatus;\n+import org.opennms.netmgt.model.OnmsMonitoredService;\n+import org.opennms.netmgt.model.monitoringLocations.OnmsMonitoringLocation;\n+import org.opennms.netmgt.model.remotepolling.ApplicationServiceStatus;\n+import org.opennms.netmgt.model.remotepolling.ApplicationStatus;\n+import org.opennms.netmgt.model.remotepolling.Location;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Lists;\n+\n+@Component\n+@Path(\"remotepoller\")\n+@Transactional\n+public class ApplicationStatusRestService {\n+\n+    @Autowired\n+    private LocationSpecificStatusDao locationSpecificStatusDao;\n+\n+    @Autowired\n+    private ApplicationDao applicationDao;\n+\n+    @Autowired\n+    private MonitoredServiceDao monitoredServiceDao;\n+\n+    class DowntimeInterval {\n+        public long start, end;\n+\n+        public DowntimeInterval(final long start, final long end) {\n+            this.start = start;\n+            this.end = end;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return MoreObjects.toStringHelper(this)\n+                    .add(\"start\", start)\n+                    .add(\"end\", end)\n+                    .toString();\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            DowntimeInterval that = (DowntimeInterval) o;\n+            return start == that.start &&\n+                    end == that.end;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(start, end);\n+        }\n+    }\n+\n+    private List<DowntimeInterval> mergeDowntimeIntervals(final List<DowntimeInterval> intervals) {\n+        final List<DowntimeInterval> resultList = new ArrayList<>();\n+\n+        Collections.sort(intervals, (DowntimeInterval donwtimeInterval1, DowntimeInterval donwtimeInterval2) -> {\n+            return Long.signum(donwtimeInterval1.start - donwtimeInterval2.start) != 0 ? Long.signum(donwtimeInterval1.start - donwtimeInterval2.start) : Long.signum(donwtimeInterval1.end - donwtimeInterval2.end);\n+        });\n+\n+        for (int i = 0; i < intervals.size(); ++i) {\n+            final DowntimeInterval mergedInterval = intervals.get(i);\n+\n+            ++i;\n+            while (i < intervals.size() && intervalsOverlap(mergedInterval, intervals.get(i))) {\n+                mergedInterval.start = Math.min(mergedInterval.start, intervals.get(i).start);\n+                mergedInterval.end = Math.max(mergedInterval.end, intervals.get(i).end);\n+                ++i;\n+            }\n+            --i;\n+\n+            resultList.add(mergedInterval);\n+        }\n+\n+        return resultList;\n+    }\n+\n+    private boolean intervalsOverlap(final DowntimeInterval donwtimeInterval1, final DowntimeInterval donwtimeInterval2) {\n+        return !(Math.max(donwtimeInterval1.start, donwtimeInterval2.start) > Math.min(donwtimeInterval1.end, donwtimeInterval2.end));\n+    }\n+\n+    private double calculateServicePercentageUptime(final Collection<OnmsLocationSpecificStatus> statusChanges, final List<DowntimeInterval> downtimeIntervals, final long start, final long end) {\n+        double totalTimeMillis = end - start;\n+        double uptimeMillis = totalTimeMillis;\n+\n+        OnmsLocationSpecificStatus lastChange = null;\n+\n+        for(final OnmsLocationSpecificStatus status : statusChanges) {\n+            long s = (lastChange == null ? 0 : lastChange.getPollResult().getTimestamp().getTime());\n+            long e = status.getPollResult().getTimestamp().getTime();\n+            if (lastChange != null && lastChange.getPollResult().isDown() ) {\n+                if(s < e) {\n+                    uptimeMillis -= (Math.min(e, end)-Math.max(s, start));\n+                    downtimeIntervals.add(new DowntimeInterval(Math.max(s, start), Math.min(e, end)));\n+                }\n+            }\n+            lastChange = status;\n+        }\n+\n+        if (lastChange != null && lastChange.getPollResult().isDown() ) {\n+            long s = lastChange.getPollResult().getTimestamp().getTime();\n+            long e = end;\n+            if(s < e) {\n+                uptimeMillis -= (Math.min(e, end)-Math.max(s, start));\n+                downtimeIntervals.add(new DowntimeInterval(Math.max(s, start), Math.min(e, end)));\n+            }\n+        }\n+\n+        return uptimeMillis / totalTimeMillis;\n+    }\n+\n+    public double calculateApplicationPercentageUptime(final List<DowntimeInterval> intervals, final long start, final long end) {\n+        double totalTimeMillis = end - start;\n+        double uptimeMillis = totalTimeMillis;\n+        for(final DowntimeInterval interval : intervals) {\n+            uptimeMillis -= (Math.min(interval.end, end)-Math.max(interval.start, start));\n+        }\n+        return uptimeMillis / totalTimeMillis;\n+    }\n+\n+\n+    private ApplicationStatus getApplicationStatus(final OnmsApplication onmsApplication, final Collection<OnmsLocationSpecificStatus> statusChanges, final long start, final long end) {\n+        final Map<OnmsMonitoringLocation, Map<OnmsMonitoredService, List<OnmsLocationSpecificStatus>>> m = new HashMap<>();\n+\n+        for(final OnmsLocationSpecificStatus onmsLocationSpecificStatus : statusChanges) {\n+            m.computeIfAbsent(onmsLocationSpecificStatus.getLocation(), k -> new HashMap<>())\n+                    .computeIfAbsent(onmsLocationSpecificStatus.getMonitoredService(), k -> new ArrayList<>())\n+                    .add(onmsLocationSpecificStatus);\n+        }\n+\n+        final ApplicationStatus applicationStatus = new ApplicationStatus();\n+        applicationStatus.setStart(start);\n+        applicationStatus.setEnd(end);\n+        applicationStatus.setApplicationId(onmsApplication.getId());\n+\n+        for (final OnmsMonitoringLocation onmsMonitoringLocation : m.keySet()) {\n+            final Location location = new Location();\n+            location.setName(onmsMonitoringLocation.getLocationName());\n+\n+            final List<DowntimeInterval> downtimeIntervals = Lists.newArrayList();\n+            \n+            for (final OnmsMonitoredService onmsMonitoredService : m.get(onmsMonitoringLocation).keySet()) {\n+                calculateServicePercentageUptime(m.get(onmsMonitoringLocation).get(onmsMonitoredService), downtimeIntervals, start, end);\n+            }\n+\n+            final List<DowntimeInterval> mergedDowntimeIntervals = mergeDowntimeIntervals(downtimeIntervals);\n+\n+            location.setAggregatedStatus(100.0 * calculateApplicationPercentageUptime(mergedDowntimeIntervals, start, end));\n+            applicationStatus.getLocations().add(location);\n+        }\n+        return applicationStatus;\n+    }\n+\n+    private ApplicationServiceStatus getApplicationServiceStatus(final OnmsApplication onmsApplication, final Integer monitoredServiceId, final Collection<OnmsLocationSpecificStatus> statusChanges, final long start, final long end) {\n+        final Map<OnmsMonitoringLocation, List<OnmsLocationSpecificStatus>> m = new HashMap<>();\n+        final OnmsMonitoredService onmsMonitoredService = monitoredServiceDao.get(monitoredServiceId);\n+\n+        for(final OnmsLocationSpecificStatus onmsLocationSpecificStatus : statusChanges) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d2e823993d2b732efa79834c46fd87a28daa0d9"}, "originalPosition": 216}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3022, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}