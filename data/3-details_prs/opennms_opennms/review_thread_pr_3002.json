{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NDc1OTU1", "number": 3002, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxODo0NDowMFrOD7XBiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDoxNToxN1rOD9addg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTY5ODAwOnYy", "diffSide": "RIGHT", "path": "features/scv/dominion-grpc-impl/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxODo0NDowMFrOGTowGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxODo0NDowMFrOGTowGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI0MzgwMA==", "bodyText": "Trailing dot in name", "url": "https://github.com/OpenNMS/opennms/pull/3002#discussion_r423243800", "createdAt": "2020-05-11T18:44:00Z", "author": {"login": "bouff"}, "path": "features/scv/dominion-grpc-impl/pom.xml", "diffHunk": "@@ -0,0 +1,61 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <groupId>org.opennms.features</groupId>\n+        <artifactId>org.opennms.features.scv</artifactId>\n+        <version>27.0.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>org.opennms.features.scv</groupId>\n+    <artifactId>org.opennms.features.scv.dominion-grpc-impl</artifactId>\n+    <packaging>bundle</packaging>\n+    <name>OpenNMS :: Features :: SCV :: Dominion gRPC Impl.</name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f39a378b4bafcb50ea0b490ffddb43849a4fd6c7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzE4NzAwOnYy", "diffSide": "RIGHT", "path": "features/minion/core/minion-identity-impl/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDowNDo1NlrOGW4tIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo0Mjo0M1rOGXpOyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1MDkxMg==", "bodyText": "We can't have multiple Blueprint's directly reference the same PID (org.opennms.minion.controller) - we've ran into problems with this before.\nWe'll need to wire this up differently.", "url": "https://github.com/OpenNMS/opennms/pull/3002#discussion_r426650912", "createdAt": "2020-05-18T14:04:56Z", "author": {"login": "j-white"}, "path": "features/minion/core/minion-identity-impl/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "diffHunk": "@@ -0,0 +1,30 @@\n+<blueprint\n+        xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\"\n+        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+        xmlns:cm=\"http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0\"\n+        xsi:schemaLocation=\"\n+        http://www.osgi.org/xmlns/blueprint/v1.0.0 \n+        https://osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd\n+\n+        http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0\n+        http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.3.0.xsd\n+\">\n+    <cm:property-placeholder id=\"minionProperties\" persistent-id=\"org.opennms.minion.controller\" placeholder-prefix=\"[[\" placeholder-suffix=\"]]\" update-strategy=\"reload\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f39a378b4bafcb50ea0b490ffddb43849a4fd6c7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NTk2Mg==", "bodyText": "Dang, it seemed to work just fine so I went with it. I'll look into rewiring it.", "url": "https://github.com/OpenNMS/opennms/pull/3002#discussion_r427445962", "createdAt": "2020-05-19T16:42:43Z", "author": {"login": "mattixtech"}, "path": "features/minion/core/minion-identity-impl/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "diffHunk": "@@ -0,0 +1,30 @@\n+<blueprint\n+        xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\"\n+        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+        xmlns:cm=\"http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0\"\n+        xsi:schemaLocation=\"\n+        http://www.osgi.org/xmlns/blueprint/v1.0.0 \n+        https://osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd\n+\n+        http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0\n+        http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.3.0.xsd\n+\">\n+    <cm:property-placeholder id=\"minionProperties\" persistent-id=\"org.opennms.minion.controller\" placeholder-prefix=\"[[\" placeholder-suffix=\"]]\" update-strategy=\"reload\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1MDkxMg=="}, "originalCommit": {"oid": "f39a378b4bafcb50ea0b490ffddb43849a4fd6c7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzIxMDkyOnYy", "diffSide": "RIGHT", "path": "features/minion/dominion/grpc-client/src/main/java/org/opennms/features/minion/dominion/grpc/DominionGrpcFactoryImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDoxMDozOVrOGW48hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODozMjo1NFrOGYYtlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1NDg1Mg==", "bodyText": "Can we configure this in the same place as the host and port rather than using an env. variable?", "url": "https://github.com/OpenNMS/opennms/pull/3002#discussion_r426654852", "createdAt": "2020-05-18T14:10:39Z", "author": {"login": "j-white"}, "path": "features/minion/dominion/grpc-client/src/main/java/org/opennms/features/minion/dominion/grpc/DominionGrpcFactoryImpl.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.features.minion.dominion.grpc;\n+\n+import java.util.Objects;\n+\n+import org.opennms.distributed.core.api.MinionIdentity;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+\n+public class DominionGrpcFactoryImpl implements DominionGrpcFactory {\n+\n+    private final ManagedChannel channel;\n+    private final String clientId;\n+    private final String clientSecret;\n+\n+    public DominionGrpcFactoryImpl(String host, String port, MinionIdentity minionIdentity) {\n+        this(host, port, Objects.requireNonNull(minionIdentity).getId(),\n+                System.getenv(\"DOMINION_GRPC_CLIENT_SECRET\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f39a378b4bafcb50ea0b490ffddb43849a4fd6c7"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMzg5NQ==", "bodyText": "Yep, good point.", "url": "https://github.com/OpenNMS/opennms/pull/3002#discussion_r428223895", "createdAt": "2020-05-20T18:32:54Z", "author": {"login": "mattixtech"}, "path": "features/minion/dominion/grpc-client/src/main/java/org/opennms/features/minion/dominion/grpc/DominionGrpcFactoryImpl.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.features.minion.dominion.grpc;\n+\n+import java.util.Objects;\n+\n+import org.opennms.distributed.core.api.MinionIdentity;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+\n+public class DominionGrpcFactoryImpl implements DominionGrpcFactory {\n+\n+    private final ManagedChannel channel;\n+    private final String clientId;\n+    private final String clientSecret;\n+\n+    public DominionGrpcFactoryImpl(String host, String port, MinionIdentity minionIdentity) {\n+        this(host, port, Objects.requireNonNull(minionIdentity).getId(),\n+                System.getenv(\"DOMINION_GRPC_CLIENT_SECRET\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1NDg1Mg=="}, "originalCommit": {"oid": "f39a378b4bafcb50ea0b490ffddb43849a4fd6c7"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzIxNzU3OnYy", "diffSide": "RIGHT", "path": "features/minion/dominion/grpc-client/src/main/java/org/opennms/dominion/local/rpc/grpc/DominionGrpc.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDoxMjowMVrOGW5AiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDoxMjowMVrOGW5AiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1NTg4MA==", "bodyText": "Let's include the .proto in the source tree for reference.", "url": "https://github.com/OpenNMS/opennms/pull/3002#discussion_r426655880", "createdAt": "2020-05-18T14:12:01Z", "author": {"login": "j-white"}, "path": "features/minion/dominion/grpc-client/src/main/java/org/opennms/dominion/local/rpc/grpc/DominionGrpc.java", "diffHunk": "@@ -0,0 +1,5741 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+// Generated by the protocol buffer compiler.  DO NOT EDIT!\n+// source: dominion.proto", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f39a378b4bafcb50ea0b490ffddb43849a4fd6c7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzIzMjU0OnYy", "diffSide": "RIGHT", "path": "features/scv/dominion-grpc-impl/src/test/java/org/opennms/dominion/features/scv/grpc/DominionSecureCredentialsVaultIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDoxNToxN1rOGW5J7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDoxNToxN1rOGW5J7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1ODI4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(scv.getAliases().containsAll(aliases));\n          \n          \n            \n                    assertThat(scv.getAliases(), contains(aliases));", "url": "https://github.com/OpenNMS/opennms/pull/3002#discussion_r426658286", "createdAt": "2020-05-18T14:15:17Z", "author": {"login": "j-white"}, "path": "features/scv/dominion-grpc-impl/src/test/java/org/opennms/dominion/features/scv/grpc/DominionSecureCredentialsVaultIT.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.dominion.features.scv.grpc;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.opennms.dominion.local.rpc.grpc.DominionGrpc;\n+import org.opennms.dominion.local.rpc.grpc.SecureCredentialsVaultGrpc;\n+import org.opennms.features.minion.dominion.grpc.DominionGrpcFactory;\n+import org.opennms.features.minion.dominion.grpc.DominionGrpcFactoryImpl;\n+import org.opennms.features.scv.api.Credentials;\n+import org.opennms.features.scv.api.SecureCredentialsVault;\n+import org.opennms.features.scv.dominion.grpc.DominionSecureCredentialsVault;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.Server;\n+import io.grpc.ServerBuilder;\n+import io.grpc.Status;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+\n+public class DominionSecureCredentialsVaultIT {\n+\n+    private static final String HOST = \"localhost\";\n+    private static final String CLIENT_ID = \"client.id\";\n+    private static final String CLIENT_SECRET = \"client.secret\";\n+    private static final String SUPPORTED_ALIAS = \"supported.alias\";\n+    private static final List<String> aliases = Collections.singletonList(SUPPORTED_ALIAS);\n+\n+    private static final String USERNAME = \"user\";\n+    private static final String PASSWORD = \"password\";\n+\n+    private ManagedChannel channel;\n+    private SecureCredentialsVault scv;\n+\n+    @Before\n+    public void setup() throws IOException {\n+        int freePort;\n+\n+        try (ServerSocket socket = new ServerSocket(0)) {\n+            socket.setReuseAddress(true);\n+            freePort = socket.getLocalPort();\n+        }\n+\n+        channel = ManagedChannelBuilder.forAddress(HOST, freePort)\n+                .usePlaintext()\n+                .build();\n+        Server server = ServerBuilder.forPort(freePort).addService(new MockDominionServer()).build();\n+        server.start();\n+        CompletableFuture.runAsync(() -> {\n+            try {\n+                server.awaitTermination();\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException();\n+            }\n+        });\n+\n+\n+        DominionGrpcFactory factory = new DominionGrpcFactoryImpl(HOST, Integer.toString(freePort), CLIENT_ID,\n+                CLIENT_SECRET);\n+        scv = new DominionSecureCredentialsVault(factory.scvClient());\n+    }\n+\n+    @After\n+    public void stop() {\n+        channel.shutdownNow();\n+    }\n+\n+    @Test\n+    public void canGetAliases() {\n+        assertTrue(scv.getAliases().containsAll(aliases));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f39a378b4bafcb50ea0b490ffddb43849a4fd6c7"}, "originalPosition": 110}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 655, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}