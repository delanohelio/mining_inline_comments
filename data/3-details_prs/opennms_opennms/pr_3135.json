{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MzkzMjc1", "number": 3135, "title": "NMS-12874: Renamed RemotePoller to PerspectivePoller", "bodyText": "JIRA (Issue Tracker): http://issues.opennms.org/browse/NMS-12874", "createdAt": "2020-08-28T13:02:01Z", "url": "https://github.com/OpenNMS/opennms/pull/3135", "merged": true, "mergeCommit": {"oid": "c12e898c493c388db257abbf9cf9e7a5a2ae6be4"}, "closed": true, "closedAt": "2020-09-02T13:41:11Z", "author": {"login": "fooker"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDlilKABqjM3MDYzMTc5NDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdE6QRcAH2gAyNDc1MzkzMjc1OjQ1Yzk4NWQ5OGFlZmY1YTY3MjU3NDhkNTMwODkzNGJlOWYzNWE3NjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "744de6477d5b40eb2340f1af285e9a7202c61ea2", "author": {"user": {"login": "fooker", "name": "Dustin Frisch"}}, "url": "https://github.com/OpenNMS/opennms/commit/744de6477d5b40eb2340f1af285e9a7202c61ea2", "committedDate": "2020-08-28T13:00:23Z", "message": "NMS-12874: Renamed RemotePoller to PerspectivePoller"}, "afterCommit": {"oid": "ca5e642854d94211641c85627e3fb99e3a329a71", "author": {"user": {"login": "fooker", "name": "Dustin Frisch"}}, "url": "https://github.com/OpenNMS/opennms/commit/ca5e642854d94211641c85627e3fb99e3a329a71", "committedDate": "2020-08-29T08:42:50Z", "message": "NMS-12874: Renamed RemotePoller to PerspectivePoller"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MjM5NDQ3", "url": "https://github.com/OpenNMS/opennms/pull/3135#pullrequestreview-478239447", "createdAt": "2020-08-30T22:18:46Z", "commit": {"oid": "ca5e642854d94211641c85627e3fb99e3a329a71"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MzQ0MjQy", "url": "https://github.com/OpenNMS/opennms/pull/3135#pullrequestreview-478344242", "createdAt": "2020-08-31T06:23:46Z", "commit": {"oid": "ca5e642854d94211641c85627e3fb99e3a329a71"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjoyMzo0N1rOHJr4dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjoyNToxMFrOHJr6Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkxODE5OQ==", "bodyText": "Typo", "url": "https://github.com/OpenNMS/opennms/pull/3135#discussion_r479918199", "createdAt": "2020-08-31T06:23:47Z", "author": {"login": "christianpape"}, "path": "features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java", "diffHunk": "@@ -98,7 +98,7 @@\n         \"classpath:/META-INF/opennms/applicationContext-commonConfigs.xml\",\n         \"classpath:/META-INF/opennms/applicationContext-dao.xml\",\n         \"classpath:/META-INF/opennms/applicationContext-databasePopulator.xml\",\n-        \"classpath:/META-INF/opennms/applicationContext-testRemotePollerDaemon.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-testPerpsectivePollerDaemon.xml\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca5e642854d94211641c85627e3fb99e3a329a71"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkxODY4Mw==", "bodyText": "upper case P please, findPerspectivePolledService", "url": "https://github.com/OpenNMS/opennms/pull/3135#discussion_r479918683", "createdAt": "2020-08-31T06:25:10Z", "author": {"login": "christianpape"}, "path": "features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java", "diffHunk": "@@ -263,66 +263,66 @@ public void reportResultTest() throws Exception {\n         final InetAddress ipAddress = this.node1icmp.getIpAddress();\n         final String location = this.node1icmp.getIpInterface().getNode().getLocation().getLocationName();\n \n-        final RemotePolledService remotePolledService = findRemotePolledService(this.node1icmp, \"RDU\");\n+        final PerspectivePolledService perspectivePolledService = findperspectivePolledService(this.node1icmp, \"RDU\");\n         assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n \n         this.eventIpcManager.getEventAnticipator().reset();\n-        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.REMOTE_NODE_REGAINED_SERVICE_UEI, \"RemotePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n-        this.remotePollerd.reportResult(remotePolledService, PollStatus.available());\n+        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.PERSPECTIVE_NODE_REGAINED_SERVICE_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n+        this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.available());\n         assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n-        this.remotePollerd.reportResult(remotePolledService, PollStatus.available());\n+        this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.available());\n         assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n-        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.REMOTE_NODE_LOST_SERVICE_UEI, \"RemotePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n-        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.OUTAGE_CREATED_EVENT_UEI, \"RemotePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n-        this.remotePollerd.reportResult(remotePolledService, PollStatus.unavailable(\"old reason\"));\n+        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.PERSPECTIVE_NODE_LOST_SERVICE_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n+        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.OUTAGE_CREATED_EVENT_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n+        this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.unavailable(\"old reason\"));\n         assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n-        this.remotePollerd.reportResult(remotePolledService, PollStatus.unavailable(\"old reason\"));\n+        this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.unavailable(\"old reason\"));\n         assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n-        this.remotePollerd.reportResult(remotePolledService, PollStatus.unavailable(\"new reason\"));\n+        this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.unavailable(\"new reason\"));\n         assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n-        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.REMOTE_NODE_REGAINED_SERVICE_UEI, \"RemotePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n-        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.OUTAGE_RESOLVED_EVENT_UEI, \"RemotePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n-        this.remotePollerd.reportResult(remotePolledService, PollStatus.available());\n+        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.PERSPECTIVE_NODE_REGAINED_SERVICE_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n+        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.OUTAGE_RESOLVED_EVENT_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n+        this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.available());\n         assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n     }\n \n     @Test\n     public void testDaemonReload() throws Exception {\n         // Initial config, ICMP and SNMP bound to single package\n-        Assert.assertEquals(8, this.remotePollerd.scheduler.getJobKeys(GroupMatcher.anyGroup()).size());\n-        assertThat(findRemotePolledService(this.node1icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findRemotePolledService(this.node1icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findRemotePolledService(this.node2icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findRemotePolledService(this.node2icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findRemotePolledService(this.node1snmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findRemotePolledService(this.node2snmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n+        Assert.assertEquals(8, this.perspectivePollerd.scheduler.getJobKeys(GroupMatcher.anyGroup()).size());\n+        assertThat(findperspectivePolledService(this.node1icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca5e642854d94211641c85627e3fb99e3a329a71"}, "originalPosition": 137}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c01ddbac560ddfb1d76cfd82188c53b42c165e22", "author": {"user": {"login": "fooker", "name": "Dustin Frisch"}}, "url": "https://github.com/OpenNMS/opennms/commit/c01ddbac560ddfb1d76cfd82188c53b42c165e22", "committedDate": "2020-09-01T15:27:09Z", "message": "NMS-12874: Renamed RemotePoller to PerspectivePoller"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e119dad1135d969be71b33d8ba7c530b1d40a79", "author": {"user": {"login": "fooker", "name": "Dustin Frisch"}}, "url": "https://github.com/OpenNMS/opennms/commit/0e119dad1135d969be71b33d8ba7c530b1d40a79", "committedDate": "2020-09-01T20:17:51Z", "message": "Merge remote-tracking branch 'origin/features/rpwm' into jira/NMS-12874"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f41e70cbb9fd86a98a9edb176b519307339fb241", "author": {"user": {"login": "fooker", "name": "Dustin Frisch"}}, "url": "https://github.com/OpenNMS/opennms/commit/f41e70cbb9fd86a98a9edb176b519307339fb241", "committedDate": "2020-09-01T20:18:22Z", "message": "NSM-12874: Fix tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8abc74e9079db24ff792827c6caeac469be81c3f", "author": {"user": {"login": "fooker", "name": "Dustin Frisch"}}, "url": "https://github.com/OpenNMS/opennms/commit/8abc74e9079db24ff792827c6caeac469be81c3f", "committedDate": "2020-08-31T07:20:18Z", "message": "NMS-12874: Review comments"}, "afterCommit": {"oid": "f41e70cbb9fd86a98a9edb176b519307339fb241", "author": {"user": {"login": "fooker", "name": "Dustin Frisch"}}, "url": "https://github.com/OpenNMS/opennms/commit/f41e70cbb9fd86a98a9edb176b519307339fb241", "committedDate": "2020-09-01T20:18:22Z", "message": "NSM-12874: Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7bd4a3cabc21cbd274897bd98264082215b16b4", "author": {"user": {"login": "fooker", "name": "Dustin Frisch"}}, "url": "https://github.com/OpenNMS/opennms/commit/b7bd4a3cabc21cbd274897bd98264082215b16b4", "committedDate": "2020-09-02T08:17:40Z", "message": "fixup! NSM-12874: Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45c985d98aeff5a6725748d5308934be9f35a762", "author": {"user": {"login": "fooker", "name": "Dustin Frisch"}}, "url": "https://github.com/OpenNMS/opennms/commit/45c985d98aeff5a6725748d5308934be9f35a762", "committedDate": "2020-09-02T11:25:12Z", "message": "fixup! NSM-12874: Fix tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3546, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}