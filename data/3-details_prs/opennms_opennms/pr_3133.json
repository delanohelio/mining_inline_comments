{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0NzIyOTAx", "number": 3133, "title": "NMS-12878: Make backend more resilient", "bodyText": "JIRA (Issue Tracker): http://issues.opennms.org/browse/NMS-12878", "createdAt": "2020-08-27T14:02:47Z", "url": "https://github.com/OpenNMS/opennms/pull/3133", "merged": true, "mergeCommit": {"oid": "6b64ba5cab693f37c70adbc083b4f36de7eb7c22"}, "closed": true, "closedAt": "2020-08-29T08:39:05Z", "author": {"login": "fooker"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDFf78gH2gAyNDc0NzIyOTAxOmUxZmY5ZTdkMGE5NjRmNDg1MjczMmZlNmVhMTZkZDdlMDI4OGI5NTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDR2MHgH2gAyNDc0NzIyOTAxOjI4YTM3NGFiOWVhNjFhM2FhNThlMWJhNzczZjYyMGJjNDU2ZDJhMzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e1ff9e7d0a964f4852732fe6ea16dd7e0288b955", "author": {"user": {"login": "fooker", "name": "Dustin Frisch"}}, "url": "https://github.com/OpenNMS/opennms/commit/e1ff9e7d0a964f4852732fe6ea16dd7e0288b955", "committedDate": "2020-08-27T19:23:25Z", "message": "NMS-12878: Make backend more resilient"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b6e65e1f1a90f680a2d15d26f33be116bec51a9f", "author": {"user": {"login": "fooker", "name": "Dustin Frisch"}}, "url": "https://github.com/OpenNMS/opennms/commit/b6e65e1f1a90f680a2d15d26f33be116bec51a9f", "committedDate": "2020-08-27T14:01:54Z", "message": "NMS-12878: Make backend more resilient"}, "afterCommit": {"oid": "e1ff9e7d0a964f4852732fe6ea16dd7e0288b955", "author": {"user": {"login": "fooker", "name": "Dustin Frisch"}}, "url": "https://github.com/OpenNMS/opennms/commit/e1ff9e7d0a964f4852732fe6ea16dd7e0288b955", "committedDate": "2020-08-27T19:23:25Z", "message": "NMS-12878: Make backend more resilient"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MDUzOTYx", "url": "https://github.com/OpenNMS/opennms/pull/3133#pullrequestreview-477053961", "createdAt": "2020-08-27T20:23:57Z", "commit": {"oid": "e1ff9e7d0a964f4852732fe6ea16dd7e0288b955"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDoyMzo1N1rOHIf-tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDozMDoxMVrOHIgLBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3NDYxNQ==", "bodyText": "Do we intend to use min (vs max here?). The default value of REFRESH_RATE_LIMIT_MS is 30 seconds.", "url": "https://github.com/OpenNMS/opennms/pull/3133#discussion_r478674615", "createdAt": "2020-08-27T20:23:57Z", "author": {"login": "j-white"}, "path": "features/remotepollerng/daemon/src/main/java/org/opennms/netmgt/remotepollerng/PerspectiveServiceTracker.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.remotepollerng;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.opennms.core.sysprops.SystemProperties;\n+import org.opennms.netmgt.dao.api.ApplicationDao;\n+import org.opennms.netmgt.dao.api.ServicePerspective;\n+import org.opennms.netmgt.dao.api.SessionUtils;\n+import org.opennms.netmgt.events.api.EventConstants;\n+import org.opennms.netmgt.events.api.annotations.EventHandler;\n+import org.opennms.netmgt.events.api.annotations.EventListener;\n+import org.opennms.netmgt.events.api.model.IEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.DisposableBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import com.google.common.collect.Sets;\n+\n+@EventListener(name = \"PerspectiveServiceTracker\")\n+public class PerspectiveServiceTracker implements DisposableBean {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PerspectiveServiceTracker.class);\n+\n+    private static final long REFRESH_RATE_LIMIT_MS = SystemProperties.getLong(\"org.opennms.netmgt.remotepollerng.trackerRefreshRateLimit\", TimeUnit.SECONDS.toMillis(30));\n+\n+    public interface Listener {\n+        void onServicePerspectiveAdded(final ServicePerspectiveRef servicePerspective, final ServicePerspective entity);\n+        void onServicePerspectiveRemoved(final ServicePerspectiveRef servicePerspective);\n+    }\n+\n+    public static class ServicePerspectiveRef {\n+        private final int nodeId;\n+        private final InetAddress ipAddress;\n+        private final String serviceName;\n+        private final String perspectiveLocation;\n+\n+        public ServicePerspectiveRef(final int nodeId,\n+                                     final InetAddress ipAddress,\n+                                     final String serviceName,\n+                                     final String perspectiveLocation) {\n+            this.nodeId = Objects.requireNonNull(nodeId);\n+            this.ipAddress = Objects.requireNonNull(ipAddress);\n+            this.serviceName = Objects.requireNonNull(serviceName);\n+            this.perspectiveLocation = Objects.requireNonNull(perspectiveLocation);\n+        }\n+\n+        public int getNodeId() {\n+            return this.nodeId;\n+        }\n+\n+        public InetAddress getIpAddress() {\n+            return this.ipAddress;\n+        }\n+\n+        public String getServiceName() {\n+            return this.serviceName;\n+        }\n+\n+        public String getPerspectiveLocation() {\n+            return this.perspectiveLocation;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) {\n+                return true;\n+            }\n+            if (!(o instanceof ServicePerspectiveRef)) {\n+                return false;\n+            }\n+            final ServicePerspectiveRef that = (ServicePerspectiveRef) o;\n+            return Objects.equals(this.nodeId, that.nodeId) &&\n+                   Objects.equals(this.ipAddress, that.ipAddress) &&\n+                   Objects.equals(this.serviceName, that.serviceName) &&\n+                   Objects.equals(this.perspectiveLocation, that.perspectiveLocation);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(this.nodeId, this.ipAddress, this.serviceName, this.perspectiveLocation);\n+        }\n+\n+        public static ServicePerspectiveRef from(final ServicePerspective servicePerspective) {\n+            return new ServicePerspectiveRef(servicePerspective.getService().getNodeId(),\n+                                             servicePerspective.getService().getIpAddress(),\n+                                             servicePerspective.getService().getServiceName(),\n+                                             servicePerspective.getPerspectiveLocation().getLocationName());\n+        }\n+    }\n+\n+    private final SessionUtils sessionUtils;\n+\n+    private final ApplicationDao applicationDao;\n+\n+    private final Set<Session> sessions = Sets.newHashSet();\n+\n+    private final Timer timer = new Timer(\"PerspectiveServiceTracker-Timer\");\n+\n+    @Autowired\n+    public PerspectiveServiceTracker(final SessionUtils sessionUtils,\n+                                     final ApplicationDao applicationDao) {\n+        this.sessionUtils = Objects.requireNonNull(sessionUtils);\n+        this.applicationDao = Objects.requireNonNull(applicationDao);\n+\n+        final long timerIntevalMs = Math.min(REFRESH_RATE_LIMIT_MS, TimeUnit.SECONDS.toMillis(5));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1ff9e7d0a964f4852732fe6ea16dd7e0288b955"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3NjY5OA==", "bodyText": "I'd move the \"org.opennms.netmgt.remotepollerng.trackerRefreshRateLimit\" part to a constant and refer to that instead.", "url": "https://github.com/OpenNMS/opennms/pull/3133#discussion_r478676698", "createdAt": "2020-08-27T20:28:06Z", "author": {"login": "j-white"}, "path": "features/remotepollerng/daemon/src/test/java/org/opennms/netmgt/remotepollerng/RemotePollerdIT.java", "diffHunk": "@@ -215,6 +215,11 @@ public void setUp() throws Exception {\n         locationAwarePollerClient.setRpcTargetHelper(new RpcTargetHelper());\n         locationAwarePollerClient.afterPropertiesSet();\n \n+        System.setProperty(\"org.opennms.netmgt.remotepollerng.trackerRefreshRateLimit\", \"5\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1ff9e7d0a964f4852732fe6ea16dd7e0288b955"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3Nzc2NQ==", "bodyText": "Every session will create its own transaction and repeat the same DB query. This is not a big problem since there's likely only 1 session, but would be nicer to do that outside the loop.", "url": "https://github.com/OpenNMS/opennms/pull/3133#discussion_r478677765", "createdAt": "2020-08-27T20:30:11Z", "author": {"login": "j-white"}, "path": "features/remotepollerng/daemon/src/main/java/org/opennms/netmgt/remotepollerng/PerspectiveServiceTracker.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.remotepollerng;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.opennms.core.sysprops.SystemProperties;\n+import org.opennms.netmgt.dao.api.ApplicationDao;\n+import org.opennms.netmgt.dao.api.ServicePerspective;\n+import org.opennms.netmgt.dao.api.SessionUtils;\n+import org.opennms.netmgt.events.api.EventConstants;\n+import org.opennms.netmgt.events.api.annotations.EventHandler;\n+import org.opennms.netmgt.events.api.annotations.EventListener;\n+import org.opennms.netmgt.events.api.model.IEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.DisposableBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import com.google.common.collect.Sets;\n+\n+@EventListener(name = \"PerspectiveServiceTracker\")\n+public class PerspectiveServiceTracker implements DisposableBean {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PerspectiveServiceTracker.class);\n+\n+    private static final long REFRESH_RATE_LIMIT_MS = SystemProperties.getLong(\"org.opennms.netmgt.remotepollerng.trackerRefreshRateLimit\", TimeUnit.SECONDS.toMillis(30));\n+\n+    public interface Listener {\n+        void onServicePerspectiveAdded(final ServicePerspectiveRef servicePerspective, final ServicePerspective entity);\n+        void onServicePerspectiveRemoved(final ServicePerspectiveRef servicePerspective);\n+    }\n+\n+    public static class ServicePerspectiveRef {\n+        private final int nodeId;\n+        private final InetAddress ipAddress;\n+        private final String serviceName;\n+        private final String perspectiveLocation;\n+\n+        public ServicePerspectiveRef(final int nodeId,\n+                                     final InetAddress ipAddress,\n+                                     final String serviceName,\n+                                     final String perspectiveLocation) {\n+            this.nodeId = Objects.requireNonNull(nodeId);\n+            this.ipAddress = Objects.requireNonNull(ipAddress);\n+            this.serviceName = Objects.requireNonNull(serviceName);\n+            this.perspectiveLocation = Objects.requireNonNull(perspectiveLocation);\n+        }\n+\n+        public int getNodeId() {\n+            return this.nodeId;\n+        }\n+\n+        public InetAddress getIpAddress() {\n+            return this.ipAddress;\n+        }\n+\n+        public String getServiceName() {\n+            return this.serviceName;\n+        }\n+\n+        public String getPerspectiveLocation() {\n+            return this.perspectiveLocation;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) {\n+                return true;\n+            }\n+            if (!(o instanceof ServicePerspectiveRef)) {\n+                return false;\n+            }\n+            final ServicePerspectiveRef that = (ServicePerspectiveRef) o;\n+            return Objects.equals(this.nodeId, that.nodeId) &&\n+                   Objects.equals(this.ipAddress, that.ipAddress) &&\n+                   Objects.equals(this.serviceName, that.serviceName) &&\n+                   Objects.equals(this.perspectiveLocation, that.perspectiveLocation);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(this.nodeId, this.ipAddress, this.serviceName, this.perspectiveLocation);\n+        }\n+\n+        public static ServicePerspectiveRef from(final ServicePerspective servicePerspective) {\n+            return new ServicePerspectiveRef(servicePerspective.getService().getNodeId(),\n+                                             servicePerspective.getService().getIpAddress(),\n+                                             servicePerspective.getService().getServiceName(),\n+                                             servicePerspective.getPerspectiveLocation().getLocationName());\n+        }\n+    }\n+\n+    private final SessionUtils sessionUtils;\n+\n+    private final ApplicationDao applicationDao;\n+\n+    private final Set<Session> sessions = Sets.newHashSet();\n+\n+    private final Timer timer = new Timer(\"PerspectiveServiceTracker-Timer\");\n+\n+    @Autowired\n+    public PerspectiveServiceTracker(final SessionUtils sessionUtils,\n+                                     final ApplicationDao applicationDao) {\n+        this.sessionUtils = Objects.requireNonNull(sessionUtils);\n+        this.applicationDao = Objects.requireNonNull(applicationDao);\n+\n+        final long timerIntevalMs = Math.min(REFRESH_RATE_LIMIT_MS, TimeUnit.SECONDS.toMillis(5));\n+        this.timer.schedule(new TimerTask() {\n+            @Override\n+            public void run() {\n+                PerspectiveServiceTracker.this.update(false);\n+            }\n+        }, timerIntevalMs, timerIntevalMs);\n+    }\n+\n+    public AutoCloseable track(final Listener listener) {\n+        final Session session = new Session(listener);\n+        session.update(true);\n+\n+        return session;\n+    }\n+\n+    @Override\n+    public void destroy() throws Exception {\n+        this.timer.cancel();\n+    }\n+\n+    @EventHandler(ueis = {\n+            EventConstants.NODE_GAINED_SERVICE_EVENT_UEI,\n+            EventConstants.SERVICE_DELETED_EVENT_UEI,\n+            EventConstants.NODE_CATEGORY_MEMBERSHIP_CHANGED_EVENT_UEI,\n+            EventConstants.NODE_LOCATION_CHANGED_EVENT_UEI,\n+            EventConstants.NODE_ADDED_EVENT_UEI,\n+            EventConstants.NODE_DELETED_EVENT_UEI,\n+            EventConstants.NODE_GAINED_INTERFACE_EVENT_UEI,\n+            EventConstants.INTERFACE_DELETED_EVENT_UEI,\n+            EventConstants.INTERFACE_REPARENTED_EVENT_UEI,\n+            EventConstants.SUSPEND_POLLING_SERVICE_EVENT_UEI,\n+            EventConstants.RESUME_POLLING_SERVICE_EVENT_UEI,\n+            EventConstants.APPLICATION_CHANGED_EVENT_UEI,\n+            EventConstants.APPLICATION_CREATED_EVENT_UEI,\n+            EventConstants.APPLICATION_DELETED_EVENT_UEI,\n+    })\n+    public void handleEvent(final IEvent event) {\n+        update(true);\n+    }\n+\n+    private void update(final boolean dirty) {\n+        synchronized (PerspectiveServiceTracker.this.sessions) {\n+            try {\n+                PerspectiveServiceTracker.this.sessions.forEach(session -> session.update(dirty));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1ff9e7d0a964f4852732fe6ea16dd7e0288b955"}, "originalPosition": 187}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3Mjk5OTkz", "url": "https://github.com/OpenNMS/opennms/pull/3133#pullrequestreview-477299993", "createdAt": "2020-08-28T06:51:00Z", "commit": {"oid": "e1ff9e7d0a964f4852732fe6ea16dd7e0288b955"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNjo1MTowMFrOHIrqZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNjo1MTowMFrOHIrqZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg2NjAyMQ==", "bodyText": "typo: timerInte>r<valMs", "url": "https://github.com/OpenNMS/opennms/pull/3133#discussion_r478866021", "createdAt": "2020-08-28T06:51:00Z", "author": {"login": "christianpape"}, "path": "features/remotepollerng/daemon/src/main/java/org/opennms/netmgt/remotepollerng/PerspectiveServiceTracker.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.remotepollerng;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.opennms.core.sysprops.SystemProperties;\n+import org.opennms.netmgt.dao.api.ApplicationDao;\n+import org.opennms.netmgt.dao.api.ServicePerspective;\n+import org.opennms.netmgt.dao.api.SessionUtils;\n+import org.opennms.netmgt.events.api.EventConstants;\n+import org.opennms.netmgt.events.api.annotations.EventHandler;\n+import org.opennms.netmgt.events.api.annotations.EventListener;\n+import org.opennms.netmgt.events.api.model.IEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.DisposableBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import com.google.common.collect.Sets;\n+\n+@EventListener(name = \"PerspectiveServiceTracker\")\n+public class PerspectiveServiceTracker implements DisposableBean {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PerspectiveServiceTracker.class);\n+\n+    private static final long REFRESH_RATE_LIMIT_MS = SystemProperties.getLong(\"org.opennms.netmgt.remotepollerng.trackerRefreshRateLimit\", TimeUnit.SECONDS.toMillis(30));\n+\n+    public interface Listener {\n+        void onServicePerspectiveAdded(final ServicePerspectiveRef servicePerspective, final ServicePerspective entity);\n+        void onServicePerspectiveRemoved(final ServicePerspectiveRef servicePerspective);\n+    }\n+\n+    public static class ServicePerspectiveRef {\n+        private final int nodeId;\n+        private final InetAddress ipAddress;\n+        private final String serviceName;\n+        private final String perspectiveLocation;\n+\n+        public ServicePerspectiveRef(final int nodeId,\n+                                     final InetAddress ipAddress,\n+                                     final String serviceName,\n+                                     final String perspectiveLocation) {\n+            this.nodeId = Objects.requireNonNull(nodeId);\n+            this.ipAddress = Objects.requireNonNull(ipAddress);\n+            this.serviceName = Objects.requireNonNull(serviceName);\n+            this.perspectiveLocation = Objects.requireNonNull(perspectiveLocation);\n+        }\n+\n+        public int getNodeId() {\n+            return this.nodeId;\n+        }\n+\n+        public InetAddress getIpAddress() {\n+            return this.ipAddress;\n+        }\n+\n+        public String getServiceName() {\n+            return this.serviceName;\n+        }\n+\n+        public String getPerspectiveLocation() {\n+            return this.perspectiveLocation;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) {\n+                return true;\n+            }\n+            if (!(o instanceof ServicePerspectiveRef)) {\n+                return false;\n+            }\n+            final ServicePerspectiveRef that = (ServicePerspectiveRef) o;\n+            return Objects.equals(this.nodeId, that.nodeId) &&\n+                   Objects.equals(this.ipAddress, that.ipAddress) &&\n+                   Objects.equals(this.serviceName, that.serviceName) &&\n+                   Objects.equals(this.perspectiveLocation, that.perspectiveLocation);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(this.nodeId, this.ipAddress, this.serviceName, this.perspectiveLocation);\n+        }\n+\n+        public static ServicePerspectiveRef from(final ServicePerspective servicePerspective) {\n+            return new ServicePerspectiveRef(servicePerspective.getService().getNodeId(),\n+                                             servicePerspective.getService().getIpAddress(),\n+                                             servicePerspective.getService().getServiceName(),\n+                                             servicePerspective.getPerspectiveLocation().getLocationName());\n+        }\n+    }\n+\n+    private final SessionUtils sessionUtils;\n+\n+    private final ApplicationDao applicationDao;\n+\n+    private final Set<Session> sessions = Sets.newHashSet();\n+\n+    private final Timer timer = new Timer(\"PerspectiveServiceTracker-Timer\");\n+\n+    @Autowired\n+    public PerspectiveServiceTracker(final SessionUtils sessionUtils,\n+                                     final ApplicationDao applicationDao) {\n+        this.sessionUtils = Objects.requireNonNull(sessionUtils);\n+        this.applicationDao = Objects.requireNonNull(applicationDao);\n+\n+        final long timerIntevalMs = Math.min(REFRESH_RATE_LIMIT_MS, TimeUnit.SECONDS.toMillis(5));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1ff9e7d0a964f4852732fe6ea16dd7e0288b955"}, "originalPosition": 143}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MzUzMjAx", "url": "https://github.com/OpenNMS/opennms/pull/3133#pullrequestreview-477353201", "createdAt": "2020-08-28T07:15:19Z", "commit": {"oid": "e1ff9e7d0a964f4852732fe6ea16dd7e0288b955"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNzoxNToxOVrOHIsSmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNzoxNToxOVrOHIsSmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg3NjMxNQ==", "bodyText": "Please also add an entry with description and default value in opennms-base-assembly/src/main/filtered/etc/opennms.properties.", "url": "https://github.com/OpenNMS/opennms/pull/3133#discussion_r478876315", "createdAt": "2020-08-28T07:15:19Z", "author": {"login": "christianpape"}, "path": "features/remotepollerng/daemon/src/main/java/org/opennms/netmgt/remotepollerng/PerspectiveServiceTracker.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.remotepollerng;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.opennms.core.sysprops.SystemProperties;\n+import org.opennms.netmgt.dao.api.ApplicationDao;\n+import org.opennms.netmgt.dao.api.ServicePerspective;\n+import org.opennms.netmgt.dao.api.SessionUtils;\n+import org.opennms.netmgt.events.api.EventConstants;\n+import org.opennms.netmgt.events.api.annotations.EventHandler;\n+import org.opennms.netmgt.events.api.annotations.EventListener;\n+import org.opennms.netmgt.events.api.model.IEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.DisposableBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import com.google.common.collect.Sets;\n+\n+@EventListener(name = \"PerspectiveServiceTracker\")\n+public class PerspectiveServiceTracker implements DisposableBean {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PerspectiveServiceTracker.class);\n+\n+    private static final long REFRESH_RATE_LIMIT_MS = SystemProperties.getLong(\"org.opennms.netmgt.remotepollerng.trackerRefreshRateLimit\", TimeUnit.SECONDS.toMillis(30));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1ff9e7d0a964f4852732fe6ea16dd7e0288b955"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MzU2Nzc2", "url": "https://github.com/OpenNMS/opennms/pull/3133#pullrequestreview-477356776", "createdAt": "2020-08-28T07:16:32Z", "commit": {"oid": "e1ff9e7d0a964f4852732fe6ea16dd7e0288b955"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9218b4e2b6ee952b1bbcfb289fd4b6eb1cdb6f80", "author": {"user": {"login": "fooker", "name": "Dustin Frisch"}}, "url": "https://github.com/OpenNMS/opennms/commit/9218b4e2b6ee952b1bbcfb289fd4b6eb1cdb6f80", "committedDate": "2020-08-28T09:21:33Z", "message": "NMS-12878: Review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NTgzMjkx", "url": "https://github.com/OpenNMS/opennms/pull/3133#pullrequestreview-477583291", "createdAt": "2020-08-28T09:28:53Z", "commit": {"oid": "9218b4e2b6ee952b1bbcfb289fd4b6eb1cdb6f80"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28a374ab9ea61a3aa58e1ba773f620bc456d2a39", "author": {"user": {"login": "fooker", "name": "Dustin Frisch"}}, "url": "https://github.com/OpenNMS/opennms/commit/28a374ab9ea61a3aa58e1ba773f620bc456d2a39", "committedDate": "2020-08-28T09:46:35Z", "message": "Merge remote-tracking branch 'origin/features/rpwm' into jira/NMS-12878"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3542, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}