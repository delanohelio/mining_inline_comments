{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MzkzMjc1", "number": 3135, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjoyMzo0NlrOEeLMow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjoyNToxMFrOEeLN9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDc2MTk1OnYy", "diffSide": "RIGHT", "path": "features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjoyMzo0N1rOHJr4dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjoyMzo0N1rOHJr4dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkxODE5OQ==", "bodyText": "Typo", "url": "https://github.com/OpenNMS/opennms/pull/3135#discussion_r479918199", "createdAt": "2020-08-31T06:23:47Z", "author": {"login": "christianpape"}, "path": "features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java", "diffHunk": "@@ -98,7 +98,7 @@\n         \"classpath:/META-INF/opennms/applicationContext-commonConfigs.xml\",\n         \"classpath:/META-INF/opennms/applicationContext-dao.xml\",\n         \"classpath:/META-INF/opennms/applicationContext-databasePopulator.xml\",\n-        \"classpath:/META-INF/opennms/applicationContext-testRemotePollerDaemon.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-testPerpsectivePollerDaemon.xml\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca5e642854d94211641c85627e3fb99e3a329a71"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDc2NTMzOnYy", "diffSide": "RIGHT", "path": "features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjoyNToxMFrOHJr6Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjoyNToxMFrOHJr6Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkxODY4Mw==", "bodyText": "upper case P please, findPerspectivePolledService", "url": "https://github.com/OpenNMS/opennms/pull/3135#discussion_r479918683", "createdAt": "2020-08-31T06:25:10Z", "author": {"login": "christianpape"}, "path": "features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java", "diffHunk": "@@ -263,66 +263,66 @@ public void reportResultTest() throws Exception {\n         final InetAddress ipAddress = this.node1icmp.getIpAddress();\n         final String location = this.node1icmp.getIpInterface().getNode().getLocation().getLocationName();\n \n-        final RemotePolledService remotePolledService = findRemotePolledService(this.node1icmp, \"RDU\");\n+        final PerspectivePolledService perspectivePolledService = findperspectivePolledService(this.node1icmp, \"RDU\");\n         assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n \n         this.eventIpcManager.getEventAnticipator().reset();\n-        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.REMOTE_NODE_REGAINED_SERVICE_UEI, \"RemotePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n-        this.remotePollerd.reportResult(remotePolledService, PollStatus.available());\n+        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.PERSPECTIVE_NODE_REGAINED_SERVICE_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n+        this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.available());\n         assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n-        this.remotePollerd.reportResult(remotePolledService, PollStatus.available());\n+        this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.available());\n         assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n-        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.REMOTE_NODE_LOST_SERVICE_UEI, \"RemotePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n-        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.OUTAGE_CREATED_EVENT_UEI, \"RemotePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n-        this.remotePollerd.reportResult(remotePolledService, PollStatus.unavailable(\"old reason\"));\n+        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.PERSPECTIVE_NODE_LOST_SERVICE_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n+        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.OUTAGE_CREATED_EVENT_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n+        this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.unavailable(\"old reason\"));\n         assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n-        this.remotePollerd.reportResult(remotePolledService, PollStatus.unavailable(\"old reason\"));\n+        this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.unavailable(\"old reason\"));\n         assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n-        this.remotePollerd.reportResult(remotePolledService, PollStatus.unavailable(\"new reason\"));\n+        this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.unavailable(\"new reason\"));\n         assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n-        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.REMOTE_NODE_REGAINED_SERVICE_UEI, \"RemotePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n-        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.OUTAGE_RESOLVED_EVENT_UEI, \"RemotePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n-        this.remotePollerd.reportResult(remotePolledService, PollStatus.available());\n+        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.PERSPECTIVE_NODE_REGAINED_SERVICE_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n+        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.OUTAGE_RESOLVED_EVENT_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n+        this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.available());\n         assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n     }\n \n     @Test\n     public void testDaemonReload() throws Exception {\n         // Initial config, ICMP and SNMP bound to single package\n-        Assert.assertEquals(8, this.remotePollerd.scheduler.getJobKeys(GroupMatcher.anyGroup()).size());\n-        assertThat(findRemotePolledService(this.node1icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findRemotePolledService(this.node1icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findRemotePolledService(this.node2icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findRemotePolledService(this.node2icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findRemotePolledService(this.node1snmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findRemotePolledService(this.node2snmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n+        Assert.assertEquals(8, this.perspectivePollerd.scheduler.getJobKeys(GroupMatcher.anyGroup()).size());\n+        assertThat(findperspectivePolledService(this.node1icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca5e642854d94211641c85627e3fb99e3a329a71"}, "originalPosition": 137}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3112, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}