{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMjg4ODc0", "number": 2997, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTo1Nzo1MFrOD5XqKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTo1Nzo1MFrOD5XqKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDgzMDUwOnYy", "diffSide": "RIGHT", "path": "core/ipc/sink/common/src/main/java/org/opennms/core/ipc/sink/common/AbstractMessageConsumerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTo1Nzo1MFrOGQmCAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjozMDo1NVrOGQnH3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MzUwNA==", "bodyText": "Let's make sure this thread pool gets shutdown.", "url": "https://github.com/OpenNMS/opennms/pull/2997#discussion_r420053504", "createdAt": "2020-05-05T11:57:50Z", "author": {"login": "j-white"}, "path": "core/ipc/sink/common/src/main/java/org/opennms/core/ipc/sink/common/AbstractMessageConsumerManager.java", "diffHunk": "@@ -44,13 +47,20 @@\n import com.google.common.collect.LinkedListMultimap;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Multimap;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n \n public abstract class AbstractMessageConsumerManager implements MessageConsumerManager {\n \n     private static final Logger LOG = LoggerFactory.getLogger(AbstractMessageConsumerManager.class);\n \n     public static final String SINK_INITIAL_SLEEP_TIME = \"org.opennms.core.ipc.sink.initialSleepTime\";\n \n+    private final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+            .setNameFormat(\"consumer-starter-%d\")\n+            .build();\n+\n+    protected final ExecutorService startupExecutor = Executors.newCachedThreadPool(threadFactory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98ebfee193799b6ef7e1d6110a69999bcdea9de9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3MTM4OQ==", "bodyText": "We can merge without this, but let's make sure to circle back.", "url": "https://github.com/OpenNMS/opennms/pull/2997#discussion_r420071389", "createdAt": "2020-05-05T12:30:55Z", "author": {"login": "j-white"}, "path": "core/ipc/sink/common/src/main/java/org/opennms/core/ipc/sink/common/AbstractMessageConsumerManager.java", "diffHunk": "@@ -44,13 +47,20 @@\n import com.google.common.collect.LinkedListMultimap;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Multimap;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n \n public abstract class AbstractMessageConsumerManager implements MessageConsumerManager {\n \n     private static final Logger LOG = LoggerFactory.getLogger(AbstractMessageConsumerManager.class);\n \n     public static final String SINK_INITIAL_SLEEP_TIME = \"org.opennms.core.ipc.sink.initialSleepTime\";\n \n+    private final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+            .setNameFormat(\"consumer-starter-%d\")\n+            .build();\n+\n+    protected final ExecutorService startupExecutor = Executors.newCachedThreadPool(threadFactory);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MzUwNA=="}, "originalCommit": {"oid": "98ebfee193799b6ef7e1d6110a69999bcdea9de9"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 648, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}