{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MzQ3MTA2", "number": 3161, "title": "NMS-12814: Interfaces incorrectly marked as having flows resulting in no data via Helm", "bodyText": "Jira https://issues.opennms.org/browse/NMS-12814", "createdAt": "2020-09-17T01:31:11Z", "url": "https://github.com/OpenNMS/opennms/pull/3161", "merged": true, "mergeCommit": {"oid": "76081fc1ea2ac3ac230f083e03318fd4c067e42d"}, "closed": true, "closedAt": "2020-09-24T12:53:00Z", "author": {"login": "patrick-schweizer"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdKLOFWgFqTQ5MTc0NjM1Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMApPFAFqTQ5NTUzNDI1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNzQ2MzUz", "url": "https://github.com/OpenNMS/opennms/pull/3161#pullrequestreview-491746353", "createdAt": "2020-09-18T20:00:49Z", "commit": {"oid": "da7b3a7ddde10090b2fa7b14232946d603c42d75"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDowMDo0OVrOHUaN2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDowMDo0OVrOHUaN2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2MzA5OQ==", "bodyText": "@fooker , @christianpape, the test will succeed with this implementation. But It is not clear to me why the system behaves like it does. Why is it green when I implement it that way?\nI assume the checkInterfaces method is implemented wrong. I don't have enough domain knowledge to understand what we need to test for...\nMaybe you can help me out here... Thanks!", "url": "https://github.com/OpenNMS/opennms/pull/3161#discussion_r491163099", "createdAt": "2020-09-18T20:00:49Z", "author": {"login": "patrick-schweizer"}, "path": "features/flows/itests/src/test/java/org/opennms/netmgt/flows/elastic/MarkerCacheIT.java", "diffHunk": "@@ -221,11 +236,81 @@ public void testNMS12740() throws Exception {\n \n             elasticFlowRepository.persist(Lists.newArrayList(getMockFlow(Flow.Direction.EGRESS)), getMockFlowSource());\n \n-            Assert.assertEquals(0,snmpInterfaceDao.findAllHavingIngressFlows(2).size());\n-            Assert.assertEquals(0, snmpInterfaceDao.findAllHavingEgressFlows(2).size());\n+            assertEquals(0, snmpInterfaceDao.findAllHavingIngressFlows(2).size());\n+            assertEquals(0, snmpInterfaceDao.findAllHavingEgressFlows(2).size());\n \n             // the following call resulted to two wrong entries before, since the wrong query returned entries from other nodes with egress flows\n-            Assert.assertEquals(0, snmpInterfaceDao.findAllHavingFlows(2).size());\n+            assertEquals(0, snmpInterfaceDao.findAllHavingFlows(2).size());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldDistinguishBetweenIngressAndEgressWhenDeterminingIfFlowsAreAvailable() throws Exception {\n+        Assert.assertFalse(OnmsSnmpInterface.INGRESS_AND_EGRESS_REQUIRED);\n+\n+        stubFor(post(\"/_bulk\")\n+                .willReturn(aResponse()\n+                        .withStatus(200)\n+                        .withHeader(\"Content-Type\", \"application/json\")));\n+\n+        final ClassificationEngine classificationEngine = new DefaultClassificationEngine(() -> Lists.newArrayList(\n+                new RuleBuilder().withName(\"http\").withDstPort(\"80\").withProtocol(\"tcp,udp\").build(),\n+                new RuleBuilder().withName(\"https\").withDstPort(\"443\").withProtocol(\"tcp,udp\").build()\n+        ), FilterService.NOOP);\n+\n+        final DocumentEnricher documentEnricher = new DocumentEnricher(\n+                new MetricRegistry(), nodeDao, interfaceToNodeCache, sessionUtils, classificationEngine,\n+                new CacheConfigBuilder()\n+                        .withName(\"flows.node\")\n+                        .withMaximumSize(1000)\n+                        .withExpireAfterWrite(300)\n+                        .build());\n+\n+        final JestClientFactory factory = new JestClientFactory();\n+        factory.setHttpClientConfig(new HttpClientConfig.Builder(\"http://localhost:\" + wireMockRule.port()).build());\n+\n+        try (JestClient client = factory.getObject()) {\n+            final ElasticFlowRepository elasticFlowRepository = new ElasticFlowRepository(new MetricRegistry(),\n+                    client, IndexStrategy.MONTHLY, documentEnricher,\n+                    sessionUtils, nodeDao, snmpInterfaceDao,\n+                    new MockIdentity(), new MockTracerRegistry(), new MockDocumentForwarder(), new IndexSettings(),\n+                    mock(SmartQueryService.class));\n+\n+            Assert.assertThat(nodeDao.findAllHavingFlows(), is(empty()));\n+            Assert.assertThat(snmpInterfaceDao.findAllHavingFlows(1), is(empty()));\n+            Assert.assertThat(snmpInterfaceDao.findAllHavingFlows(2), is(empty()));\n+\n+            elasticFlowRepository.persist(Lists.newArrayList(getMockFlow(Flow.Direction.EGRESS)), getMockFlowSource());\n+            checkInterfaces(1, \"192.168.1.1\");\n+            checkInterfaces(2);\n+\n+            elasticFlowRepository.persist(Lists.newArrayList(getMockFlow(Flow.Direction.INGRESS)), getMockFlowSource());\n+            checkInterfaces(1, \"192.168.1.1\", \"192.168.1.1\");\n+            checkInterfaces(2);\n+\n+            elasticFlowRepository.persist(Lists.newArrayList(getMockFlow(Flow.Direction.INGRESS)), getMockFlowSource());\n+            checkInterfaces(1, \"192.168.1.1\", \"192.168.1.1\");\n+            checkInterfaces(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da7b3a7ddde10090b2fa7b14232946d603c42d75"}, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzODAyNjE2", "url": "https://github.com/OpenNMS/opennms/pull/3161#pullrequestreview-493802616", "createdAt": "2020-09-22T20:01:31Z", "commit": {"oid": "c797dd7820ab1f07f690d8ee91e89b5ff31b06da"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDowMTozMVrOHWKSXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDowNjo1OVrOHWKdhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5OTI2Mw==", "bodyText": "Comment / code mismatch (ingress vs egress)", "url": "https://github.com/OpenNMS/opennms/pull/3161#discussion_r492999263", "createdAt": "2020-09-22T20:01:31Z", "author": {"login": "fooker"}, "path": "features/flows/itests/src/test/java/org/opennms/netmgt/flows/elastic/MarkerCacheIT.java", "diffHunk": "@@ -221,11 +232,97 @@ public void testNMS12740() throws Exception {\n \n             elasticFlowRepository.persist(Lists.newArrayList(getMockFlow(Flow.Direction.EGRESS)), getMockFlowSource());\n \n-            Assert.assertEquals(0,snmpInterfaceDao.findAllHavingIngressFlows(2).size());\n-            Assert.assertEquals(0, snmpInterfaceDao.findAllHavingEgressFlows(2).size());\n+            assertEquals(0, snmpInterfaceDao.findAllHavingIngressFlows(2).size());\n+            assertEquals(0, snmpInterfaceDao.findAllHavingEgressFlows(2).size());\n \n             // the following call resulted to two wrong entries before, since the wrong query returned entries from other nodes with egress flows\n-            Assert.assertEquals(0, snmpInterfaceDao.findAllHavingFlows(2).size());\n+            assertEquals(0, snmpInterfaceDao.findAllHavingFlows(2).size());\n         }\n     }\n+\n+    @Test\n+    public void shouldDistinguishBetweenIngressAndEgressWhenDeterminingIfFlowsAreAvailable() throws Exception {\n+        Assert.assertFalse(OnmsSnmpInterface.INGRESS_AND_EGRESS_REQUIRED);\n+\n+        stubFor(post(\"/_bulk\")\n+                .willReturn(aResponse()\n+                        .withStatus(200)\n+                        .withHeader(\"Content-Type\", \"application/json\")));\n+\n+        final ClassificationEngine classificationEngine = new DefaultClassificationEngine(() -> Lists.newArrayList(\n+                new RuleBuilder().withName(\"http\").withDstPort(\"80\").withProtocol(\"tcp,udp\").build(),\n+                new RuleBuilder().withName(\"https\").withDstPort(\"443\").withProtocol(\"tcp,udp\").build()\n+        ), FilterService.NOOP);\n+\n+        final DocumentEnricher documentEnricher = new DocumentEnricher(\n+                new MetricRegistry(), nodeDao, interfaceToNodeCache, sessionUtils, classificationEngine,\n+                new CacheConfigBuilder()\n+                        .withName(\"flows.node\")\n+                        .withMaximumSize(1000)\n+                        .withExpireAfterWrite(300)\n+                        .build());\n+\n+        final JestClientFactory factory = new JestClientFactory();\n+        factory.setHttpClientConfig(new HttpClientConfig.Builder(\"http://localhost:\" + wireMockRule.port()).build());\n+\n+        try (JestClient client = factory.getObject()) {\n+            final ElasticFlowRepository elasticFlowRepository = new ElasticFlowRepository(new MetricRegistry(),\n+                    client, IndexStrategy.MONTHLY, documentEnricher,\n+                    sessionUtils, nodeDao, snmpInterfaceDao,\n+                    new MockIdentity(), new MockTracerRegistry(), new MockDocumentForwarder(), new IndexSettings(),\n+                    mock(SmartQueryService.class));\n+\n+            Integer ingress = 2;\n+            Integer egress = 3;\n+\n+            // no flows persisted -> we shouldn't have any interfaces\n+            expectAllInterfaces();\n+            expectIngressInterfaces();\n+            expectEgressInterfaces();\n+\n+            // persist egress flow", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c797dd7820ab1f07f690d8ee91e89b5ff31b06da"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5OTMzMw==", "bodyText": "And the other way around", "url": "https://github.com/OpenNMS/opennms/pull/3161#discussion_r492999333", "createdAt": "2020-09-22T20:01:41Z", "author": {"login": "fooker"}, "path": "features/flows/itests/src/test/java/org/opennms/netmgt/flows/elastic/MarkerCacheIT.java", "diffHunk": "@@ -221,11 +232,97 @@ public void testNMS12740() throws Exception {\n \n             elasticFlowRepository.persist(Lists.newArrayList(getMockFlow(Flow.Direction.EGRESS)), getMockFlowSource());\n \n-            Assert.assertEquals(0,snmpInterfaceDao.findAllHavingIngressFlows(2).size());\n-            Assert.assertEquals(0, snmpInterfaceDao.findAllHavingEgressFlows(2).size());\n+            assertEquals(0, snmpInterfaceDao.findAllHavingIngressFlows(2).size());\n+            assertEquals(0, snmpInterfaceDao.findAllHavingEgressFlows(2).size());\n \n             // the following call resulted to two wrong entries before, since the wrong query returned entries from other nodes with egress flows\n-            Assert.assertEquals(0, snmpInterfaceDao.findAllHavingFlows(2).size());\n+            assertEquals(0, snmpInterfaceDao.findAllHavingFlows(2).size());\n         }\n     }\n+\n+    @Test\n+    public void shouldDistinguishBetweenIngressAndEgressWhenDeterminingIfFlowsAreAvailable() throws Exception {\n+        Assert.assertFalse(OnmsSnmpInterface.INGRESS_AND_EGRESS_REQUIRED);\n+\n+        stubFor(post(\"/_bulk\")\n+                .willReturn(aResponse()\n+                        .withStatus(200)\n+                        .withHeader(\"Content-Type\", \"application/json\")));\n+\n+        final ClassificationEngine classificationEngine = new DefaultClassificationEngine(() -> Lists.newArrayList(\n+                new RuleBuilder().withName(\"http\").withDstPort(\"80\").withProtocol(\"tcp,udp\").build(),\n+                new RuleBuilder().withName(\"https\").withDstPort(\"443\").withProtocol(\"tcp,udp\").build()\n+        ), FilterService.NOOP);\n+\n+        final DocumentEnricher documentEnricher = new DocumentEnricher(\n+                new MetricRegistry(), nodeDao, interfaceToNodeCache, sessionUtils, classificationEngine,\n+                new CacheConfigBuilder()\n+                        .withName(\"flows.node\")\n+                        .withMaximumSize(1000)\n+                        .withExpireAfterWrite(300)\n+                        .build());\n+\n+        final JestClientFactory factory = new JestClientFactory();\n+        factory.setHttpClientConfig(new HttpClientConfig.Builder(\"http://localhost:\" + wireMockRule.port()).build());\n+\n+        try (JestClient client = factory.getObject()) {\n+            final ElasticFlowRepository elasticFlowRepository = new ElasticFlowRepository(new MetricRegistry(),\n+                    client, IndexStrategy.MONTHLY, documentEnricher,\n+                    sessionUtils, nodeDao, snmpInterfaceDao,\n+                    new MockIdentity(), new MockTracerRegistry(), new MockDocumentForwarder(), new IndexSettings(),\n+                    mock(SmartQueryService.class));\n+\n+            Integer ingress = 2;\n+            Integer egress = 3;\n+\n+            // no flows persisted -> we shouldn't have any interfaces\n+            expectAllInterfaces();\n+            expectIngressInterfaces();\n+            expectEgressInterfaces();\n+\n+            // persist egress flow\n+            elasticFlowRepository.persist(Lists.newArrayList(getMockFlow(Flow.Direction.INGRESS)), getMockFlowSource());\n+            expectAllInterfaces(ingress);\n+            expectIngressInterfaces(ingress);\n+            expectEgressInterfaces();\n+\n+            // persist ingress flow", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c797dd7820ab1f07f690d8ee91e89b5ff31b06da"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwMDc4Nw==", "bodyText": "Use SessionUtils instead. It saves you from a lot of boilerplate code", "url": "https://github.com/OpenNMS/opennms/pull/3161#discussion_r493000787", "createdAt": "2020-09-22T20:04:29Z", "author": {"login": "fooker"}, "path": "features/flows/itests/src/test/java/org/opennms/netmgt/flows/elastic/MarkerCacheIT.java", "diffHunk": "@@ -108,6 +116,9 @@\n     @Autowired\n     private InterfaceToNodeCache interfaceToNodeCache;\n \n+    @Autowired\n+    private TransactionTemplate transactionTemplate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c797dd7820ab1f07f690d8ee91e89b5ff31b06da"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwMTUyOA==", "bodyText": "Any reason why these (and others below) are Integer, not int?", "url": "https://github.com/OpenNMS/opennms/pull/3161#discussion_r493001528", "createdAt": "2020-09-22T20:05:47Z", "author": {"login": "fooker"}, "path": "features/flows/itests/src/test/java/org/opennms/netmgt/flows/elastic/MarkerCacheIT.java", "diffHunk": "@@ -221,11 +232,97 @@ public void testNMS12740() throws Exception {\n \n             elasticFlowRepository.persist(Lists.newArrayList(getMockFlow(Flow.Direction.EGRESS)), getMockFlowSource());\n \n-            Assert.assertEquals(0,snmpInterfaceDao.findAllHavingIngressFlows(2).size());\n-            Assert.assertEquals(0, snmpInterfaceDao.findAllHavingEgressFlows(2).size());\n+            assertEquals(0, snmpInterfaceDao.findAllHavingIngressFlows(2).size());\n+            assertEquals(0, snmpInterfaceDao.findAllHavingEgressFlows(2).size());\n \n             // the following call resulted to two wrong entries before, since the wrong query returned entries from other nodes with egress flows\n-            Assert.assertEquals(0, snmpInterfaceDao.findAllHavingFlows(2).size());\n+            assertEquals(0, snmpInterfaceDao.findAllHavingFlows(2).size());\n         }\n     }\n+\n+    @Test\n+    public void shouldDistinguishBetweenIngressAndEgressWhenDeterminingIfFlowsAreAvailable() throws Exception {\n+        Assert.assertFalse(OnmsSnmpInterface.INGRESS_AND_EGRESS_REQUIRED);\n+\n+        stubFor(post(\"/_bulk\")\n+                .willReturn(aResponse()\n+                        .withStatus(200)\n+                        .withHeader(\"Content-Type\", \"application/json\")));\n+\n+        final ClassificationEngine classificationEngine = new DefaultClassificationEngine(() -> Lists.newArrayList(\n+                new RuleBuilder().withName(\"http\").withDstPort(\"80\").withProtocol(\"tcp,udp\").build(),\n+                new RuleBuilder().withName(\"https\").withDstPort(\"443\").withProtocol(\"tcp,udp\").build()\n+        ), FilterService.NOOP);\n+\n+        final DocumentEnricher documentEnricher = new DocumentEnricher(\n+                new MetricRegistry(), nodeDao, interfaceToNodeCache, sessionUtils, classificationEngine,\n+                new CacheConfigBuilder()\n+                        .withName(\"flows.node\")\n+                        .withMaximumSize(1000)\n+                        .withExpireAfterWrite(300)\n+                        .build());\n+\n+        final JestClientFactory factory = new JestClientFactory();\n+        factory.setHttpClientConfig(new HttpClientConfig.Builder(\"http://localhost:\" + wireMockRule.port()).build());\n+\n+        try (JestClient client = factory.getObject()) {\n+            final ElasticFlowRepository elasticFlowRepository = new ElasticFlowRepository(new MetricRegistry(),\n+                    client, IndexStrategy.MONTHLY, documentEnricher,\n+                    sessionUtils, nodeDao, snmpInterfaceDao,\n+                    new MockIdentity(), new MockTracerRegistry(), new MockDocumentForwarder(), new IndexSettings(),\n+                    mock(SmartQueryService.class));\n+\n+            Integer ingress = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c797dd7820ab1f07f690d8ee91e89b5ff31b06da"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwMjExOQ==", "bodyText": "In this case: just inline them or make them real constants (same for the nodeId below.", "url": "https://github.com/OpenNMS/opennms/pull/3161#discussion_r493002119", "createdAt": "2020-09-22T20:06:59Z", "author": {"login": "fooker"}, "path": "features/flows/itests/src/test/java/org/opennms/netmgt/flows/elastic/MarkerCacheIT.java", "diffHunk": "@@ -221,11 +232,97 @@ public void testNMS12740() throws Exception {\n \n             elasticFlowRepository.persist(Lists.newArrayList(getMockFlow(Flow.Direction.EGRESS)), getMockFlowSource());\n \n-            Assert.assertEquals(0,snmpInterfaceDao.findAllHavingIngressFlows(2).size());\n-            Assert.assertEquals(0, snmpInterfaceDao.findAllHavingEgressFlows(2).size());\n+            assertEquals(0, snmpInterfaceDao.findAllHavingIngressFlows(2).size());\n+            assertEquals(0, snmpInterfaceDao.findAllHavingEgressFlows(2).size());\n \n             // the following call resulted to two wrong entries before, since the wrong query returned entries from other nodes with egress flows\n-            Assert.assertEquals(0, snmpInterfaceDao.findAllHavingFlows(2).size());\n+            assertEquals(0, snmpInterfaceDao.findAllHavingFlows(2).size());\n         }\n     }\n+\n+    @Test\n+    public void shouldDistinguishBetweenIngressAndEgressWhenDeterminingIfFlowsAreAvailable() throws Exception {\n+        Assert.assertFalse(OnmsSnmpInterface.INGRESS_AND_EGRESS_REQUIRED);\n+\n+        stubFor(post(\"/_bulk\")\n+                .willReturn(aResponse()\n+                        .withStatus(200)\n+                        .withHeader(\"Content-Type\", \"application/json\")));\n+\n+        final ClassificationEngine classificationEngine = new DefaultClassificationEngine(() -> Lists.newArrayList(\n+                new RuleBuilder().withName(\"http\").withDstPort(\"80\").withProtocol(\"tcp,udp\").build(),\n+                new RuleBuilder().withName(\"https\").withDstPort(\"443\").withProtocol(\"tcp,udp\").build()\n+        ), FilterService.NOOP);\n+\n+        final DocumentEnricher documentEnricher = new DocumentEnricher(\n+                new MetricRegistry(), nodeDao, interfaceToNodeCache, sessionUtils, classificationEngine,\n+                new CacheConfigBuilder()\n+                        .withName(\"flows.node\")\n+                        .withMaximumSize(1000)\n+                        .withExpireAfterWrite(300)\n+                        .build());\n+\n+        final JestClientFactory factory = new JestClientFactory();\n+        factory.setHttpClientConfig(new HttpClientConfig.Builder(\"http://localhost:\" + wireMockRule.port()).build());\n+\n+        try (JestClient client = factory.getObject()) {\n+            final ElasticFlowRepository elasticFlowRepository = new ElasticFlowRepository(new MetricRegistry(),\n+                    client, IndexStrategy.MONTHLY, documentEnricher,\n+                    sessionUtils, nodeDao, snmpInterfaceDao,\n+                    new MockIdentity(), new MockTracerRegistry(), new MockDocumentForwarder(), new IndexSettings(),\n+                    mock(SmartQueryService.class));\n+\n+            Integer ingress = 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwMTUyOA=="}, "originalCommit": {"oid": "c797dd7820ab1f07f690d8ee91e89b5ff31b06da"}, "originalPosition": 83}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "970176cc5a7c81584a42bd45e8941b29d2997c9b", "author": {"user": {"login": "patrick-schweizer", "name": "Patrick Schweizer"}}, "url": "https://github.com/OpenNMS/opennms/commit/970176cc5a7c81584a42bd45e8941b29d2997c9b", "committedDate": "2020-09-23T14:44:08Z", "message": "NMS-12814: Interfaces incorrectly marked as having flows resulting in no data via Helm"}, "afterCommit": {"oid": "eb5d05580e4190b9b82c50c711d80dfab5b9f4de", "author": {"user": {"login": "patrick-schweizer", "name": "Patrick Schweizer"}}, "url": "https://github.com/OpenNMS/opennms/commit/eb5d05580e4190b9b82c50c711d80dfab5b9f4de", "committedDate": "2020-09-23T14:49:44Z", "message": "NMS-12814: Interfaces incorrectly marked as having flows resulting in no data via Helm"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b0da07e276792eaefa972a4992f1044efdfdfb5", "author": {"user": {"login": "patrick-schweizer", "name": "Patrick Schweizer"}}, "url": "https://github.com/OpenNMS/opennms/commit/6b0da07e276792eaefa972a4992f1044efdfdfb5", "committedDate": "2020-09-23T15:12:47Z", "message": "NMS-12814: Interfaces incorrectly marked as having flows resulting in no data via Helm"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eb5d05580e4190b9b82c50c711d80dfab5b9f4de", "author": {"user": {"login": "patrick-schweizer", "name": "Patrick Schweizer"}}, "url": "https://github.com/OpenNMS/opennms/commit/eb5d05580e4190b9b82c50c711d80dfab5b9f4de", "committedDate": "2020-09-23T14:49:44Z", "message": "NMS-12814: Interfaces incorrectly marked as having flows resulting in no data via Helm"}, "afterCommit": {"oid": "6b0da07e276792eaefa972a4992f1044efdfdfb5", "author": {"user": {"login": "patrick-schweizer", "name": "Patrick Schweizer"}}, "url": "https://github.com/OpenNMS/opennms/commit/6b0da07e276792eaefa972a4992f1044efdfdfb5", "committedDate": "2020-09-23T15:12:47Z", "message": "NMS-12814: Interfaces incorrectly marked as having flows resulting in no data via Helm"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d880ab1a5e4add95d2293dcb2c1877067664383", "author": {"user": {"login": "patrick-schweizer", "name": "Patrick Schweizer"}}, "url": "https://github.com/OpenNMS/opennms/commit/7d880ab1a5e4add95d2293dcb2c1877067664383", "committedDate": "2020-09-23T15:39:17Z", "message": "NMS-12814: Interfaces incorrectly marked as having flows resulting in no data via Helm: fix backport"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NTM0MjUz", "url": "https://github.com/OpenNMS/opennms/pull/3161#pullrequestreview-495534253", "createdAt": "2020-09-24T12:49:22Z", "commit": {"oid": "7d880ab1a5e4add95d2293dcb2c1877067664383"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3882, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}