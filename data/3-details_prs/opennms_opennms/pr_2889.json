{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MTQyMzU4", "number": 2889, "title": "NMS-12529: Split OpenNMS and Minion docker setup", "bodyText": "All Contributors\n\n Have you read and followed our Contribution Guidelines?\n Have you made an issue in the OpenNMS issue tracker?If so, you should:\n\nupdate the title of this PR to be of the format: ${JIRA-ISSUE-NUMBER}: subject of pull request\nupdate the JIRA link at the bottom of this comment to refer to the real issue number\nprefix your commit messages with the issue number, if possible\n\n\n Have you made a comment in that issue which points back to this PR?\n Have you updated the JIRA link at the bottom of this comment to link to your issue?\n If this is a new or updated feature, is there documentation for the new behavior?\n If this is new code, are there unit and/or integration tests?\n If this PR targets a foundation-* branch, does it avoid changing files in $OPENNMS_HOME/etc/?\n\nInstead of having one large Docker setup, I've split up the Docker run instructions for each component to be more consistent. It provides a docker-compose file for each component, such as Horizon core instance and a Minion which is more realistic to real-world setups.\nReviewer Hint\nWe currently have no example of how to run a Sentinel in Docker. @agalue maybe you can help us out here.\nExternal References\n\nJIRA (Issue Tracker): http://issues.opennms.org/browse/NMS-12529", "createdAt": "2020-02-17T13:40:10Z", "url": "https://github.com/OpenNMS/opennms/pull/2889", "merged": true, "mergeCommit": {"oid": "941bb39109c006a0c7eddb75ee720c3b585757c8"}, "closed": true, "closedAt": "2020-03-26T11:18:44Z", "author": {"login": "indigo423"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFi3nCgFqTM2MDM1ODc1NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRYhjfABqjMxNjczMzk0NDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMzU4NzU0", "url": "https://github.com/OpenNMS/opennms/pull/2889#pullrequestreview-360358754", "createdAt": "2020-02-18T14:00:44Z", "commit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNDowMDo0NVrOFrDYAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNDozMjowN1rOFrEjkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY4ODM4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  If you want ot customize and maintain your own image, you can find the _Dockerfiles_ in our link:https://github.com/OpenNMS/opennms/tree/develop/opennms-container[source repository].\n          \n          \n            \n                  If you want to customize and maintain your own image, you can find the _Dockerfiles_ in our link:https://github.com/OpenNMS/opennms/tree/develop/opennms-container[source repository].", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380688384", "createdAt": "2020-02-18T14:00:45Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/basic-setup-opennms/docker/opennms-docker.adoc", "diffHunk": "@@ -1,38 +1,37 @@\n \n-== Run with Docker\n+=== Run with Docker\n \n Modern infrastructure allows you to deploy and run workloads in containers.\n With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n \n NOTE: We don't install all available plugins in our published Docker image.\n       If you want ot customize and maintain your own image, you can find the _Dockerfiles_ in our link:https://github.com/OpenNMS/opennms/tree/develop/opennms-container[source repository].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY4OTMyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It is required you have at least the following components installed:\n          \n          \n            \n            You must have at least the following components installed:", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380689328", "createdAt": "2020-02-18T14:02:21Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/basic-setup-opennms/docker/opennms-docker.adoc", "diffHunk": "@@ -1,38 +1,37 @@\n \n-== Run with Docker\n+=== Run with Docker\n \n Modern infrastructure allows you to deploy and run workloads in containers.\n With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n \n NOTE: We don't install all available plugins in our published Docker image.\n       If you want ot customize and maintain your own image, you can find the _Dockerfiles_ in our link:https://github.com/OpenNMS/opennms/tree/develop/opennms-container[source repository].\n \n-=== Objectives\n+==== Objectives\n \n * Run _{opennms-product-name}_ using _Docker Compose_ with a basic setup and _PostgreSQL_ on your local system as a quickstart\n * Persist RRD files from _{opennms-product-name}_ and _PostgreSQL_ in a volume\n-* Run and configure a _Minion_ in the stack and connect it to the _{opennms-product-name}_ instance using environment variables\n * Introduce a reference with all available configuration and mount conventions for more advanced setups\n \n-=== Before you begin\n+==== Before you begin\n \n It is required you have at least the following components installed:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY4OTg1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * You should have a basic knowledge about _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n          \n          \n            \n            * You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380689857", "createdAt": "2020-02-18T14:03:16Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/basic-setup-opennms/docker/opennms-docker.adoc", "diffHunk": "@@ -1,38 +1,37 @@\n \n-== Run with Docker\n+=== Run with Docker\n \n Modern infrastructure allows you to deploy and run workloads in containers.\n With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n \n NOTE: We don't install all available plugins in our published Docker image.\n       If you want ot customize and maintain your own image, you can find the _Dockerfiles_ in our link:https://github.com/OpenNMS/opennms/tree/develop/opennms-container[source repository].\n \n-=== Objectives\n+==== Objectives\n \n * Run _{opennms-product-name}_ using _Docker Compose_ with a basic setup and _PostgreSQL_ on your local system as a quickstart\n * Persist RRD files from _{opennms-product-name}_ and _PostgreSQL_ in a volume\n-* Run and configure a _Minion_ in the stack and connect it to the _{opennms-product-name}_ instance using environment variables\n * Introduce a reference with all available configuration and mount conventions for more advanced setups\n \n-=== Before you begin\n+==== Before you begin\n \n It is required you have at least the following components installed:\n \n * Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n * Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n * You should have a basic knowledge about _Docker_, _Docker Compose_ with networking, persisting files and mounting directories", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY5MDE4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The first section describes how to setup _{opennms-product-name}_ service stack in a `docker-compose.yml` file.\n          \n          \n            \n            The first section describes how to set up _{opennms-product-name}_ service stack in a `docker-compose.yml` file.", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380690184", "createdAt": "2020-02-18T14:03:48Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/basic-setup-opennms/docker/opennms-docker.adoc", "diffHunk": "@@ -1,38 +1,37 @@\n \n-== Run with Docker\n+=== Run with Docker\n \n Modern infrastructure allows you to deploy and run workloads in containers.\n With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n \n NOTE: We don't install all available plugins in our published Docker image.\n       If you want ot customize and maintain your own image, you can find the _Dockerfiles_ in our link:https://github.com/OpenNMS/opennms/tree/develop/opennms-container[source repository].\n \n-=== Objectives\n+==== Objectives\n \n * Run _{opennms-product-name}_ using _Docker Compose_ with a basic setup and _PostgreSQL_ on your local system as a quickstart\n * Persist RRD files from _{opennms-product-name}_ and _PostgreSQL_ in a volume\n-* Run and configure a _Minion_ in the stack and connect it to the _{opennms-product-name}_ instance using environment variables\n * Introduce a reference with all available configuration and mount conventions for more advanced setups\n \n-=== Before you begin\n+==== Before you begin\n \n It is required you have at least the following components installed:\n \n * Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n * Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n * You should have a basic knowledge about _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n \n-=== Quickstart service stack\n+==== Quickstart service stack\n \n // No section numbers for step-by-step guide\n :!sectnums:\n \n-==== Step 1: Create service stack for PostgreSQL and _{opennms-product-name}_\n+===== Step 1: Create service stack for PostgreSQL and _{opennms-product-name}_\n \n The first section describes how to setup _{opennms-product-name}_ service stack in a `docker-compose.yml` file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY5MDgxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Create a project directory withg `mkdir opennms-horizon` and create inside a `docker-compose.yml` file with the following content:\n          \n          \n            \n            Create a project directory with `mkdir opennms-horizon` and create a `docker-compose.yml` file in that directory with the following content:", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380690814", "createdAt": "2020-02-18T14:04:55Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/basic-setup-opennms/docker/opennms-docker.adoc", "diffHunk": "@@ -1,38 +1,37 @@\n \n-== Run with Docker\n+=== Run with Docker\n \n Modern infrastructure allows you to deploy and run workloads in containers.\n With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n \n NOTE: We don't install all available plugins in our published Docker image.\n       If you want ot customize and maintain your own image, you can find the _Dockerfiles_ in our link:https://github.com/OpenNMS/opennms/tree/develop/opennms-container[source repository].\n \n-=== Objectives\n+==== Objectives\n \n * Run _{opennms-product-name}_ using _Docker Compose_ with a basic setup and _PostgreSQL_ on your local system as a quickstart\n * Persist RRD files from _{opennms-product-name}_ and _PostgreSQL_ in a volume\n-* Run and configure a _Minion_ in the stack and connect it to the _{opennms-product-name}_ instance using environment variables\n * Introduce a reference with all available configuration and mount conventions for more advanced setups\n \n-=== Before you begin\n+==== Before you begin\n \n It is required you have at least the following components installed:\n \n * Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n * Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n * You should have a basic knowledge about _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n \n-=== Quickstart service stack\n+==== Quickstart service stack\n \n // No section numbers for step-by-step guide\n :!sectnums:\n \n-==== Step 1: Create service stack for PostgreSQL and _{opennms-product-name}_\n+===== Step 1: Create service stack for PostgreSQL and _{opennms-product-name}_\n \n The first section describes how to setup _{opennms-product-name}_ service stack in a `docker-compose.yml` file.\n Create a project directory withg `mkdir opennms-horizon` and create inside a `docker-compose.yml` file with the following content:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY5MTIyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: The startup and download can take a while, you can use the `docker-compose ps` command and wait until the health check for the `horizon` service is `up (healthy)`.\n          \n          \n            \n            NOTE: The startup and download can take a while; you can use the `docker-compose ps` command and wait until the health check for the `horizon` service is `up (healthy)`.", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380691222", "createdAt": "2020-02-18T14:05:43Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/basic-setup-opennms/docker/opennms-docker.adoc", "diffHunk": "@@ -127,64 +106,13 @@ docker-compose up -d\n ----\n \n NOTE: The startup and download can take a while, you can use the `docker-compose ps` command and wait until the health check for the `horizon` service is `up (healthy)`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY5MjMwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            After download and startup verify if you can access the web user interface with going to http://localhost:8980.\n          \n          \n            \n            After download and startup verify if you can access the web user interface by going to http://localhost:8980.", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380692300", "createdAt": "2020-02-18T14:07:34Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/basic-setup-opennms/docker/opennms-docker.adoc", "diffHunk": "@@ -127,64 +106,13 @@ docker-compose up -d\n ----\n \n NOTE: The startup and download can take a while, you can use the `docker-compose ps` command and wait until the health check for the `horizon` service is `up (healthy)`.\n-      After download and startup verify if you can access the web user interface with going to http://localhost:8980.\n-\n-==== Step 3: Configure _ActiveMQ_ using the overlay directory convention\n-\n-.Obtain the ActiveMQ default configuration and persist it in the overlay directory so you can change it \n-----\n-mkdir overlay/etc && cd overlay/etc\n-docker cp $(docker ps -qf name=horizon):/opt/opennms/etc/opennms-activemq.xml .\n-----\n-\n-==== Step 4:\n-\n-.Enable listening on all interfaces for _ActiveMQ_\n-----\n-vi opennms-activemq.xml\n-----\n-\n-.Uncomment the following line to allow external TCP connections\n-----\n-<!-- Uncomment this line to allow external TCP connections -->\n-<!--\n-    WARNING: Access to port 61616 should be firewalled to prevent unauthorized injection\n-             of data into OpenNMS when this port is open.\n--->\n-<transportConnector name=\"openwire\" uri=\"tcp://0.0.0.0:61616?useJmx=false&amp;maximumConnections=1000&amp;wireformat.maxFrameSize=104857600\"/>\n-----\n-\n-==== Step 5: Restart _{opennms-product-name}_\n-\n-----\n-docker-compose stop horizon\n-docker-compose up -d\n-----\n-\n-==== Step 6: Run _Minion_ health check\n-\n-.Login in to the _Minion Karaf Shell_ and run the health check\n-[source, shell]\n-----\n-ssh admin@localhost -p 8201\n-\n-admin@minion> health:check\n-Verifying the health of the container\n-\n-Connecting to OpenNMS ReST API   [ Success  ]\n-Verifying installed bundles      [ Success  ]\n-Connecting to JMS Broker         [ Success  ]\n-\n-=> Everything is awesome\n-----\n-\n-NOTE: The default admin password for the _Minion Karaf Shell_ is _admin_.\n+      \n+===== Step 3: Login to the Web UI\n \n-==== Step 7: Verify status in the administrative Web UI\n+After download and startup verify if you can access the web user interface with going to http://localhost:8980.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY5MjY4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            IMPORTANT: Please change immediately your admin account and set a strong password.\n          \n          \n            \n            IMPORTANT: Please immediately change your admin account and set a strong password.", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380692687", "createdAt": "2020-02-18T14:08:11Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/basic-setup-opennms/docker/opennms-docker.adoc", "diffHunk": "@@ -127,64 +106,13 @@ docker-compose up -d\n ----\n \n NOTE: The startup and download can take a while, you can use the `docker-compose ps` command and wait until the health check for the `horizon` service is `up (healthy)`.\n-      After download and startup verify if you can access the web user interface with going to http://localhost:8980.\n-\n-==== Step 3: Configure _ActiveMQ_ using the overlay directory convention\n-\n-.Obtain the ActiveMQ default configuration and persist it in the overlay directory so you can change it \n-----\n-mkdir overlay/etc && cd overlay/etc\n-docker cp $(docker ps -qf name=horizon):/opt/opennms/etc/opennms-activemq.xml .\n-----\n-\n-==== Step 4:\n-\n-.Enable listening on all interfaces for _ActiveMQ_\n-----\n-vi opennms-activemq.xml\n-----\n-\n-.Uncomment the following line to allow external TCP connections\n-----\n-<!-- Uncomment this line to allow external TCP connections -->\n-<!--\n-    WARNING: Access to port 61616 should be firewalled to prevent unauthorized injection\n-             of data into OpenNMS when this port is open.\n--->\n-<transportConnector name=\"openwire\" uri=\"tcp://0.0.0.0:61616?useJmx=false&amp;maximumConnections=1000&amp;wireformat.maxFrameSize=104857600\"/>\n-----\n-\n-==== Step 5: Restart _{opennms-product-name}_\n-\n-----\n-docker-compose stop horizon\n-docker-compose up -d\n-----\n-\n-==== Step 6: Run _Minion_ health check\n-\n-.Login in to the _Minion Karaf Shell_ and run the health check\n-[source, shell]\n-----\n-ssh admin@localhost -p 8201\n-\n-admin@minion> health:check\n-Verifying the health of the container\n-\n-Connecting to OpenNMS ReST API   [ Success  ]\n-Verifying installed bundles      [ Success  ]\n-Connecting to JMS Broker         [ Success  ]\n-\n-=> Everything is awesome\n-----\n-\n-NOTE: The default admin password for the _Minion Karaf Shell_ is _admin_.\n+      \n+===== Step 3: Login to the Web UI\n \n-==== Step 7: Verify status in the administrative Web UI\n+After download and startup verify if you can access the web user interface with going to http://localhost:8980.\n+The default login is `admin` with password `admin`.\n \n-* Login as admin\n-* _Configure OpenNMS -> Manage Minions_, the _Minion_ should be registered and the Status should be _up_\n-* Verify if _Minion_ is provisioned automatically going to _Info -> Nodes_ and select the _Minion_, the services _JMX-Minion_, _Minion-Heartbeat_ and _Minion-RPC_ should be _up_ and provisioned on the local loopback interface\n+IMPORTANT: Please change immediately your admin account and set a strong password.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY5NDU3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Run and configure a _Minion_ in and connect it to the _{opennms-product-name}_ instance using environment variables\n          \n          \n            \n            * Run and configure a _Minion_ in, and connect it to, the _{opennms-product-name}_ instance using environment variables", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380694574", "createdAt": "2020-02-18T14:11:18Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,103 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in and connect it to the _{opennms-product-name}_ instance using environment variables", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY5NDg4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It is required you have at least the following components installed:\n          \n          \n            \n            You must have at least the following components installed:", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380694886", "createdAt": "2020-02-18T14:11:47Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,103 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in and connect it to the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+It is required you have at least the following components installed:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY5NTExMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n          \n          \n            \n            * Current stable _Docker_ release installed, e.g., installed from link:https://docs.docker.com/[Docker Documentation]", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380695112", "createdAt": "2020-02-18T14:12:12Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,103 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in and connect it to the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+It is required you have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY5NTI2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n          \n          \n            \n            * Current stable _Docker Compose_ installed, e.g., installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380695268", "createdAt": "2020-02-18T14:12:25Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,103 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in and connect it to the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+It is required you have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY5NTY1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * You should have a basic knowledge about _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n          \n          \n            \n            * You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380695651", "createdAt": "2020-02-18T14:13:04Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,103 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in and connect it to the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+It is required you have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge about _Docker_, _Docker Compose_ with networking, persisting files and mounting directories", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY5Njc4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ exist\n          \n          \n            \n            * _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ \n          \n      \n    \n    \n  \n\nI think we can remove \"exist\" unless you mean that the ROLE_MINION must exist?", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380696785", "createdAt": "2020-02-18T14:14:58Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,103 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in and connect it to the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+It is required you have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge about _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+* _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ exist", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY5NzI0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Create a project directory withg `mkdir opennms-minion` and create inside a `docker-compose.yml` file with the following content:\n          \n          \n            \n            Create a project directory with `mkdir opennms-minion` and create a `docker-compose.yml` file in that directory with the following content:", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380697247", "createdAt": "2020-02-18T14:15:41Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,103 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in and connect it to the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+It is required you have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge about _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+* _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ exist\n+* The _Minion_ can connect to _{opennms-product-name}_ with port `61616/TCP` for _ActiveMQ_ and _REST_ on port `8980/TCP`\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack with a Minion\n+\n+Create a project directory withg `mkdir opennms-minion` and create inside a `docker-compose.yml` file with the following content:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY5ODc5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <2> Timezone for the Minion\n          \n          \n            \n            <2> Time zone for the _Minion_", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380698797", "createdAt": "2020-02-18T14:18:10Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,103 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in and connect it to the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+It is required you have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge about _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+* _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ exist\n+* The _Minion_ can connect to _{opennms-product-name}_ with port `61616/TCP` for _ActiveMQ_ and _REST_ on port `8980/TCP`\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack with a Minion\n+\n+Create a project directory withg `mkdir opennms-minion` and create inside a `docker-compose.yml` file with the following content:\n+\n+[source,yaml]\n+----\n+---\n+version: '3'\n+\n+services:  \n+  minion:\n+    image: opennms/minion:25.2.0\n+    container_name: minion<1>\n+    environment:\n+      - TZ=Europe/Berlin<2>\n+      - MINION_ID=my-minion<3>\n+      - MINION_LOCATION=my-location<4>\n+      - OPENNMS_BROKER_URL=failover:tcp://horizon-instance:61616<5>\n+      - OPENNMS_BROKER_USER=minion-user<6>\n+      - OPENNMS_BROKER_PASS=minion-password\n+      - OPENNMS_HTTP_URL=http://horizon-instance:8980/opennms<7>\n+      - OPENNMS_HTTP_USER=minion-user<8>\n+      - OPENNMS_HTTP_PASS=minion-password\n+    command: [\"-f\"]\n+    ports:<9>\n+      - \"8201:8201/tcp\"\n+      - \"162:1162/udp\"\n+----\n+<1> Friendly container name\n+<2> Timezone for the Minion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY5OTYzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <3> A defined identifier for this _Minion_, if not set a unique user identifier (_UUID_) will be generated\n          \n          \n            \n            <3> A defined identifier for this _Minion_. If not set, a unique user identifier (_UUID_) will be generated", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380699638", "createdAt": "2020-02-18T14:19:32Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,103 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in and connect it to the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+It is required you have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge about _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+* _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ exist\n+* The _Minion_ can connect to _{opennms-product-name}_ with port `61616/TCP` for _ActiveMQ_ and _REST_ on port `8980/TCP`\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack with a Minion\n+\n+Create a project directory withg `mkdir opennms-minion` and create inside a `docker-compose.yml` file with the following content:\n+\n+[source,yaml]\n+----\n+---\n+version: '3'\n+\n+services:  \n+  minion:\n+    image: opennms/minion:25.2.0\n+    container_name: minion<1>\n+    environment:\n+      - TZ=Europe/Berlin<2>\n+      - MINION_ID=my-minion<3>\n+      - MINION_LOCATION=my-location<4>\n+      - OPENNMS_BROKER_URL=failover:tcp://horizon-instance:61616<5>\n+      - OPENNMS_BROKER_USER=minion-user<6>\n+      - OPENNMS_BROKER_PASS=minion-password\n+      - OPENNMS_HTTP_URL=http://horizon-instance:8980/opennms<7>\n+      - OPENNMS_HTTP_USER=minion-user<8>\n+      - OPENNMS_HTTP_PASS=minion-password\n+    command: [\"-f\"]\n+    ports:<9>\n+      - \"8201:8201/tcp\"\n+      - \"162:1162/udp\"\n+----\n+<1> Friendly container name\n+<2> Timezone for the Minion\n+<3> A defined identifier for this _Minion_, if not set a unique user identifier (_UUID_) will be generated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY5OTk4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <4> The name of the location the _Minion_ and the connection to the _ActiveMQ_ broker running in _{opennms-product-name}_\n          \n          \n            \n            <4> The name of the location of the _Minion_ and the connection to the _ActiveMQ_ broker running in _{opennms-product-name}_", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380699983", "createdAt": "2020-02-18T14:20:03Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,103 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in and connect it to the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+It is required you have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge about _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+* _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ exist\n+* The _Minion_ can connect to _{opennms-product-name}_ with port `61616/TCP` for _ActiveMQ_ and _REST_ on port `8980/TCP`\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack with a Minion\n+\n+Create a project directory withg `mkdir opennms-minion` and create inside a `docker-compose.yml` file with the following content:\n+\n+[source,yaml]\n+----\n+---\n+version: '3'\n+\n+services:  \n+  minion:\n+    image: opennms/minion:25.2.0\n+    container_name: minion<1>\n+    environment:\n+      - TZ=Europe/Berlin<2>\n+      - MINION_ID=my-minion<3>\n+      - MINION_LOCATION=my-location<4>\n+      - OPENNMS_BROKER_URL=failover:tcp://horizon-instance:61616<5>\n+      - OPENNMS_BROKER_USER=minion-user<6>\n+      - OPENNMS_BROKER_PASS=minion-password\n+      - OPENNMS_HTTP_URL=http://horizon-instance:8980/opennms<7>\n+      - OPENNMS_HTTP_USER=minion-user<8>\n+      - OPENNMS_HTTP_PASS=minion-password\n+    command: [\"-f\"]\n+    ports:<9>\n+      - \"8201:8201/tcp\"\n+      - \"162:1162/udp\"\n+----\n+<1> Friendly container name\n+<2> Timezone for the Minion\n+<3> A defined identifier for this _Minion_, if not set a unique user identifier (_UUID_) will be generated\n+<4> The name of the location the _Minion_ and the connection to the _ActiveMQ_ broker running in _{opennms-product-name}_", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcwMDIwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <7> _REST_ endpoint to to connect to the _{opennms-product-name}_ instance\n          \n          \n            \n            <7> _REST_ endpoint to connect to the _{opennms-product-name}_ instance", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380700209", "createdAt": "2020-02-18T14:20:24Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,103 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in and connect it to the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+It is required you have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge about _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+* _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ exist\n+* The _Minion_ can connect to _{opennms-product-name}_ with port `61616/TCP` for _ActiveMQ_ and _REST_ on port `8980/TCP`\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack with a Minion\n+\n+Create a project directory withg `mkdir opennms-minion` and create inside a `docker-compose.yml` file with the following content:\n+\n+[source,yaml]\n+----\n+---\n+version: '3'\n+\n+services:  \n+  minion:\n+    image: opennms/minion:25.2.0\n+    container_name: minion<1>\n+    environment:\n+      - TZ=Europe/Berlin<2>\n+      - MINION_ID=my-minion<3>\n+      - MINION_LOCATION=my-location<4>\n+      - OPENNMS_BROKER_URL=failover:tcp://horizon-instance:61616<5>\n+      - OPENNMS_BROKER_USER=minion-user<6>\n+      - OPENNMS_BROKER_PASS=minion-password\n+      - OPENNMS_HTTP_URL=http://horizon-instance:8980/opennms<7>\n+      - OPENNMS_HTTP_USER=minion-user<8>\n+      - OPENNMS_HTTP_PASS=minion-password\n+    command: [\"-f\"]\n+    ports:<9>\n+      - \"8201:8201/tcp\"\n+      - \"162:1162/udp\"\n+----\n+<1> Friendly container name\n+<2> Timezone for the Minion\n+<3> A defined identifier for this _Minion_, if not set a unique user identifier (_UUID_) will be generated\n+<4> The name of the location the _Minion_ and the connection to the _ActiveMQ_ broker running in _{opennms-product-name}_\n+<5> _ActiveMQ_ broker endpoint from _{opennms-product-name}_\n+<6> Authentication for ActiveMQ broker\n+<7> _REST_ endpoint to to connect to the _{opennms-product-name}_ instance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcwMTAwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <9> Publish ports for SSH access to the _Karaf Shell_ and listen for _SNMP Traps_ forwarding to an internal un-privileged port\n          \n          \n            \n            <9> Publish ports for SSH access to the _Karaf Shell_ and listen for _SNMP Traps_ forwarding to an internal unprivileged port", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380701001", "createdAt": "2020-02-18T14:21:41Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,103 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in and connect it to the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+It is required you have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge about _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+* _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ exist\n+* The _Minion_ can connect to _{opennms-product-name}_ with port `61616/TCP` for _ActiveMQ_ and _REST_ on port `8980/TCP`\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack with a Minion\n+\n+Create a project directory withg `mkdir opennms-minion` and create inside a `docker-compose.yml` file with the following content:\n+\n+[source,yaml]\n+----\n+---\n+version: '3'\n+\n+services:  \n+  minion:\n+    image: opennms/minion:25.2.0\n+    container_name: minion<1>\n+    environment:\n+      - TZ=Europe/Berlin<2>\n+      - MINION_ID=my-minion<3>\n+      - MINION_LOCATION=my-location<4>\n+      - OPENNMS_BROKER_URL=failover:tcp://horizon-instance:61616<5>\n+      - OPENNMS_BROKER_USER=minion-user<6>\n+      - OPENNMS_BROKER_PASS=minion-password\n+      - OPENNMS_HTTP_URL=http://horizon-instance:8980/opennms<7>\n+      - OPENNMS_HTTP_USER=minion-user<8>\n+      - OPENNMS_HTTP_PASS=minion-password\n+    command: [\"-f\"]\n+    ports:<9>\n+      - \"8201:8201/tcp\"\n+      - \"162:1162/udp\"\n+----\n+<1> Friendly container name\n+<2> Timezone for the Minion\n+<3> A defined identifier for this _Minion_, if not set a unique user identifier (_UUID_) will be generated\n+<4> The name of the location the _Minion_ and the connection to the _ActiveMQ_ broker running in _{opennms-product-name}_\n+<5> _ActiveMQ_ broker endpoint from _{opennms-product-name}_\n+<6> Authentication for ActiveMQ broker\n+<7> _REST_ endpoint to to connect to the _{opennms-product-name}_ instance\n+<8> Authentication for the _REST_ endpoint\n+<9> Publish ports for SSH access to the _Karaf Shell_ and listen for _SNMP Traps_ forwarding to an internal un-privileged port", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcwMTY4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: In this example we haven't set credentials to connect the _Minion_ via _REST_ and the _ActiveMQ Message Broker.\n          \n          \n            \n            NOTE: In this example we haven't set credentials to connect the _Minion_ via _REST_ and the _ActiveMQ Message Broker_.", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380701687", "createdAt": "2020-02-18T14:22:50Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,103 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in and connect it to the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+It is required you have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge about _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+* _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ exist\n+* The _Minion_ can connect to _{opennms-product-name}_ with port `61616/TCP` for _ActiveMQ_ and _REST_ on port `8980/TCP`\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack with a Minion\n+\n+Create a project directory withg `mkdir opennms-minion` and create inside a `docker-compose.yml` file with the following content:\n+\n+[source,yaml]\n+----\n+---\n+version: '3'\n+\n+services:  \n+  minion:\n+    image: opennms/minion:25.2.0\n+    container_name: minion<1>\n+    environment:\n+      - TZ=Europe/Berlin<2>\n+      - MINION_ID=my-minion<3>\n+      - MINION_LOCATION=my-location<4>\n+      - OPENNMS_BROKER_URL=failover:tcp://horizon-instance:61616<5>\n+      - OPENNMS_BROKER_USER=minion-user<6>\n+      - OPENNMS_BROKER_PASS=minion-password\n+      - OPENNMS_HTTP_URL=http://horizon-instance:8980/opennms<7>\n+      - OPENNMS_HTTP_USER=minion-user<8>\n+      - OPENNMS_HTTP_PASS=minion-password\n+    command: [\"-f\"]\n+    ports:<9>\n+      - \"8201:8201/tcp\"\n+      - \"162:1162/udp\"\n+----\n+<1> Friendly container name\n+<2> Timezone for the Minion\n+<3> A defined identifier for this _Minion_, if not set a unique user identifier (_UUID_) will be generated\n+<4> The name of the location the _Minion_ and the connection to the _ActiveMQ_ broker running in _{opennms-product-name}_\n+<5> _ActiveMQ_ broker endpoint from _{opennms-product-name}_\n+<6> Authentication for ActiveMQ broker\n+<7> _REST_ endpoint to to connect to the _{opennms-product-name}_ instance\n+<8> Authentication for the _REST_ endpoint\n+<9> Publish ports for SSH access to the _Karaf Shell_ and listen for _SNMP Traps_ forwarding to an internal un-privileged port\n+\n+NOTE: In this example we haven't set credentials to connect the _Minion_ via _REST_ and the _ActiveMQ Message Broker.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcwMjMxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            .Login in to the _Minion Karaf Shell_ and run the health check\n          \n          \n            \n            .Log in to the _Minion Karaf Shell_ and run the health check", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380702311", "createdAt": "2020-02-18T14:23:49Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,103 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in and connect it to the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+It is required you have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge about _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+* _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ exist\n+* The _Minion_ can connect to _{opennms-product-name}_ with port `61616/TCP` for _ActiveMQ_ and _REST_ on port `8980/TCP`\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack with a Minion\n+\n+Create a project directory withg `mkdir opennms-minion` and create inside a `docker-compose.yml` file with the following content:\n+\n+[source,yaml]\n+----\n+---\n+version: '3'\n+\n+services:  \n+  minion:\n+    image: opennms/minion:25.2.0\n+    container_name: minion<1>\n+    environment:\n+      - TZ=Europe/Berlin<2>\n+      - MINION_ID=my-minion<3>\n+      - MINION_LOCATION=my-location<4>\n+      - OPENNMS_BROKER_URL=failover:tcp://horizon-instance:61616<5>\n+      - OPENNMS_BROKER_USER=minion-user<6>\n+      - OPENNMS_BROKER_PASS=minion-password\n+      - OPENNMS_HTTP_URL=http://horizon-instance:8980/opennms<7>\n+      - OPENNMS_HTTP_USER=minion-user<8>\n+      - OPENNMS_HTTP_PASS=minion-password\n+    command: [\"-f\"]\n+    ports:<9>\n+      - \"8201:8201/tcp\"\n+      - \"162:1162/udp\"\n+----\n+<1> Friendly container name\n+<2> Timezone for the Minion\n+<3> A defined identifier for this _Minion_, if not set a unique user identifier (_UUID_) will be generated\n+<4> The name of the location the _Minion_ and the connection to the _ActiveMQ_ broker running in _{opennms-product-name}_\n+<5> _ActiveMQ_ broker endpoint from _{opennms-product-name}_\n+<6> Authentication for ActiveMQ broker\n+<7> _REST_ endpoint to to connect to the _{opennms-product-name}_ instance\n+<8> Authentication for the _REST_ endpoint\n+<9> Publish ports for SSH access to the _Karaf Shell_ and listen for _SNMP Traps_ forwarding to an internal un-privileged port\n+\n+NOTE: In this example we haven't set credentials to connect the _Minion_ via _REST_ and the _ActiveMQ Message Broker.\n+      The _Minion_ will fall back and uses the default admin/admin credentials for the communication.\n+      Permissions for _ActiveMQ_ and _REST_ are assigned with the role _ROLE_MINION_ on the _{opennms-product-name}_ instance.\n+\n+===== Step 2: Start the service stack and test the functionality\n+\n+[source,shell]\n+----\n+cd opennms-minion\n+docker-compose up -d\n+----\n+\n+===== Step 3: Run _Minion_ health check\n+\n+.Login in to the _Minion Karaf Shell_ and run the health check", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcwMjg0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Login as admin in the _{opennms-product-name}_ web interface\n          \n          \n            \n            * Log in as admin in the _{opennms-product-name}_ web interface", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380702840", "createdAt": "2020-02-18T14:24:38Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,103 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in and connect it to the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+It is required you have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge about _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+* _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ exist\n+* The _Minion_ can connect to _{opennms-product-name}_ with port `61616/TCP` for _ActiveMQ_ and _REST_ on port `8980/TCP`\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack with a Minion\n+\n+Create a project directory withg `mkdir opennms-minion` and create inside a `docker-compose.yml` file with the following content:\n+\n+[source,yaml]\n+----\n+---\n+version: '3'\n+\n+services:  \n+  minion:\n+    image: opennms/minion:25.2.0\n+    container_name: minion<1>\n+    environment:\n+      - TZ=Europe/Berlin<2>\n+      - MINION_ID=my-minion<3>\n+      - MINION_LOCATION=my-location<4>\n+      - OPENNMS_BROKER_URL=failover:tcp://horizon-instance:61616<5>\n+      - OPENNMS_BROKER_USER=minion-user<6>\n+      - OPENNMS_BROKER_PASS=minion-password\n+      - OPENNMS_HTTP_URL=http://horizon-instance:8980/opennms<7>\n+      - OPENNMS_HTTP_USER=minion-user<8>\n+      - OPENNMS_HTTP_PASS=minion-password\n+    command: [\"-f\"]\n+    ports:<9>\n+      - \"8201:8201/tcp\"\n+      - \"162:1162/udp\"\n+----\n+<1> Friendly container name\n+<2> Timezone for the Minion\n+<3> A defined identifier for this _Minion_, if not set a unique user identifier (_UUID_) will be generated\n+<4> The name of the location the _Minion_ and the connection to the _ActiveMQ_ broker running in _{opennms-product-name}_\n+<5> _ActiveMQ_ broker endpoint from _{opennms-product-name}_\n+<6> Authentication for ActiveMQ broker\n+<7> _REST_ endpoint to to connect to the _{opennms-product-name}_ instance\n+<8> Authentication for the _REST_ endpoint\n+<9> Publish ports for SSH access to the _Karaf Shell_ and listen for _SNMP Traps_ forwarding to an internal un-privileged port\n+\n+NOTE: In this example we haven't set credentials to connect the _Minion_ via _REST_ and the _ActiveMQ Message Broker.\n+      The _Minion_ will fall back and uses the default admin/admin credentials for the communication.\n+      Permissions for _ActiveMQ_ and _REST_ are assigned with the role _ROLE_MINION_ on the _{opennms-product-name}_ instance.\n+\n+===== Step 2: Start the service stack and test the functionality\n+\n+[source,shell]\n+----\n+cd opennms-minion\n+docker-compose up -d\n+----\n+\n+===== Step 3: Run _Minion_ health check\n+\n+.Login in to the _Minion Karaf Shell_ and run the health check\n+[source, shell]\n+----\n+ssh admin@localhost -p 8201\n+\n+admin@minion> health:check\n+Verifying the health of the container\n+\n+Connecting to OpenNMS ReST API   [ Success  ]\n+Verifying installed bundles      [ Success  ]\n+Connecting to JMS Broker         [ Success  ]\n+\n+=> Everything is awesome\n+----\n+\n+NOTE: The default admin password for the _Minion Karaf Shell_ is _admin_.\n+\n+===== Step 4: Verify status in the administrative Web UI\n+\n+* Login as admin in the _{opennms-product-name}_ web interface", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcwMzU0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * _Configure OpenNMS -> Manage Minions_, the _Minion_ should be registered and the status should be _up_\n          \n          \n            \n            * _Configure OpenNMS -> Manage Minions_. The _Minion_ should be registered and the status should be _up_", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380703540", "createdAt": "2020-02-18T14:25:40Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,103 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in and connect it to the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+It is required you have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge about _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+* _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ exist\n+* The _Minion_ can connect to _{opennms-product-name}_ with port `61616/TCP` for _ActiveMQ_ and _REST_ on port `8980/TCP`\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack with a Minion\n+\n+Create a project directory withg `mkdir opennms-minion` and create inside a `docker-compose.yml` file with the following content:\n+\n+[source,yaml]\n+----\n+---\n+version: '3'\n+\n+services:  \n+  minion:\n+    image: opennms/minion:25.2.0\n+    container_name: minion<1>\n+    environment:\n+      - TZ=Europe/Berlin<2>\n+      - MINION_ID=my-minion<3>\n+      - MINION_LOCATION=my-location<4>\n+      - OPENNMS_BROKER_URL=failover:tcp://horizon-instance:61616<5>\n+      - OPENNMS_BROKER_USER=minion-user<6>\n+      - OPENNMS_BROKER_PASS=minion-password\n+      - OPENNMS_HTTP_URL=http://horizon-instance:8980/opennms<7>\n+      - OPENNMS_HTTP_USER=minion-user<8>\n+      - OPENNMS_HTTP_PASS=minion-password\n+    command: [\"-f\"]\n+    ports:<9>\n+      - \"8201:8201/tcp\"\n+      - \"162:1162/udp\"\n+----\n+<1> Friendly container name\n+<2> Timezone for the Minion\n+<3> A defined identifier for this _Minion_, if not set a unique user identifier (_UUID_) will be generated\n+<4> The name of the location the _Minion_ and the connection to the _ActiveMQ_ broker running in _{opennms-product-name}_\n+<5> _ActiveMQ_ broker endpoint from _{opennms-product-name}_\n+<6> Authentication for ActiveMQ broker\n+<7> _REST_ endpoint to to connect to the _{opennms-product-name}_ instance\n+<8> Authentication for the _REST_ endpoint\n+<9> Publish ports for SSH access to the _Karaf Shell_ and listen for _SNMP Traps_ forwarding to an internal un-privileged port\n+\n+NOTE: In this example we haven't set credentials to connect the _Minion_ via _REST_ and the _ActiveMQ Message Broker.\n+      The _Minion_ will fall back and uses the default admin/admin credentials for the communication.\n+      Permissions for _ActiveMQ_ and _REST_ are assigned with the role _ROLE_MINION_ on the _{opennms-product-name}_ instance.\n+\n+===== Step 2: Start the service stack and test the functionality\n+\n+[source,shell]\n+----\n+cd opennms-minion\n+docker-compose up -d\n+----\n+\n+===== Step 3: Run _Minion_ health check\n+\n+.Login in to the _Minion Karaf Shell_ and run the health check\n+[source, shell]\n+----\n+ssh admin@localhost -p 8201\n+\n+admin@minion> health:check\n+Verifying the health of the container\n+\n+Connecting to OpenNMS ReST API   [ Success  ]\n+Verifying installed bundles      [ Success  ]\n+Connecting to JMS Broker         [ Success  ]\n+\n+=> Everything is awesome\n+----\n+\n+NOTE: The default admin password for the _Minion Karaf Shell_ is _admin_.\n+\n+===== Step 4: Verify status in the administrative Web UI\n+\n+* Login as admin in the _{opennms-product-name}_ web interface\n+* _Configure OpenNMS -> Manage Minions_, the _Minion_ should be registered and the status should be _up_", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcwNzczMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Verify if _Minion_ is provisioned automatically going to _Info -> Nodes_ and select the _Minion_, the services _JMX-Minion_, _Minion-Heartbeat_ and _Minion-RPC_ should be _up_ and provisioned on the local loopback interface\n          \n          \n            \n            * Verify if _Minion_ is provisioned automatically by going to _Info -> Nodes_ and select the _Minion_. The services _JMX-Minion_, _Minion-Heartbeat_ and _Minion-RPC_ should be _up_ and provisioned on the local loop-back interface", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r380707731", "createdAt": "2020-02-18T14:32:07Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,103 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in and connect it to the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+It is required you have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge about _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+* _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ exist\n+* The _Minion_ can connect to _{opennms-product-name}_ with port `61616/TCP` for _ActiveMQ_ and _REST_ on port `8980/TCP`\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack with a Minion\n+\n+Create a project directory withg `mkdir opennms-minion` and create inside a `docker-compose.yml` file with the following content:\n+\n+[source,yaml]\n+----\n+---\n+version: '3'\n+\n+services:  \n+  minion:\n+    image: opennms/minion:25.2.0\n+    container_name: minion<1>\n+    environment:\n+      - TZ=Europe/Berlin<2>\n+      - MINION_ID=my-minion<3>\n+      - MINION_LOCATION=my-location<4>\n+      - OPENNMS_BROKER_URL=failover:tcp://horizon-instance:61616<5>\n+      - OPENNMS_BROKER_USER=minion-user<6>\n+      - OPENNMS_BROKER_PASS=minion-password\n+      - OPENNMS_HTTP_URL=http://horizon-instance:8980/opennms<7>\n+      - OPENNMS_HTTP_USER=minion-user<8>\n+      - OPENNMS_HTTP_PASS=minion-password\n+    command: [\"-f\"]\n+    ports:<9>\n+      - \"8201:8201/tcp\"\n+      - \"162:1162/udp\"\n+----\n+<1> Friendly container name\n+<2> Timezone for the Minion\n+<3> A defined identifier for this _Minion_, if not set a unique user identifier (_UUID_) will be generated\n+<4> The name of the location the _Minion_ and the connection to the _ActiveMQ_ broker running in _{opennms-product-name}_\n+<5> _ActiveMQ_ broker endpoint from _{opennms-product-name}_\n+<6> Authentication for ActiveMQ broker\n+<7> _REST_ endpoint to to connect to the _{opennms-product-name}_ instance\n+<8> Authentication for the _REST_ endpoint\n+<9> Publish ports for SSH access to the _Karaf Shell_ and listen for _SNMP Traps_ forwarding to an internal un-privileged port\n+\n+NOTE: In this example we haven't set credentials to connect the _Minion_ via _REST_ and the _ActiveMQ Message Broker.\n+      The _Minion_ will fall back and uses the default admin/admin credentials for the communication.\n+      Permissions for _ActiveMQ_ and _REST_ are assigned with the role _ROLE_MINION_ on the _{opennms-product-name}_ instance.\n+\n+===== Step 2: Start the service stack and test the functionality\n+\n+[source,shell]\n+----\n+cd opennms-minion\n+docker-compose up -d\n+----\n+\n+===== Step 3: Run _Minion_ health check\n+\n+.Login in to the _Minion Karaf Shell_ and run the health check\n+[source, shell]\n+----\n+ssh admin@localhost -p 8201\n+\n+admin@minion> health:check\n+Verifying the health of the container\n+\n+Connecting to OpenNMS ReST API   [ Success  ]\n+Verifying installed bundles      [ Success  ]\n+Connecting to JMS Broker         [ Success  ]\n+\n+=> Everything is awesome\n+----\n+\n+NOTE: The default admin password for the _Minion Karaf Shell_ is _admin_.\n+\n+===== Step 4: Verify status in the administrative Web UI\n+\n+* Login as admin in the _{opennms-product-name}_ web interface\n+* _Configure OpenNMS -> Manage Minions_, the _Minion_ should be registered and the status should be _up_\n+* Verify if _Minion_ is provisioned automatically going to _Info -> Nodes_ and select the _Minion_, the services _JMX-Minion_, _Minion-Heartbeat_ and _Minion-RPC_ should be _up_ and provisioned on the local loopback interface", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06689fb32672f9c1589821cfdd2d3ab1bdfed0c6"}, "originalPosition": 100}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c7b1ecd87c6e05f0cd9675b8539ba531f0f59e6f", "author": {"user": {"login": "indigo423", "name": "Ronny Trommer"}}, "url": "https://github.com/OpenNMS/opennms/commit/c7b1ecd87c6e05f0cd9675b8539ba531f0f59e6f", "committedDate": "2020-03-18T14:35:52Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: Bonrob2 <59453630+Bonrob2@users.noreply.github.com>"}, "afterCommit": {"oid": "05b92e28d2f9bcc2f364d3f20074e73907630ca9", "author": {"user": {"login": "indigo423", "name": "Ronny Trommer"}}, "url": "https://github.com/OpenNMS/opennms/commit/05b92e28d2f9bcc2f364d3f20074e73907630ca9", "committedDate": "2020-03-18T15:02:53Z", "message": "NMS-12529: Review fixes and comments\n\nCo-Authored-By: Bonrob2 <59453630+Bonrob2@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cfb0c06f0d2eff673e2b746f94c966b6f992ea0b", "author": {"user": {"login": "indigo423", "name": "Ronny Trommer"}}, "url": "https://github.com/OpenNMS/opennms/commit/cfb0c06f0d2eff673e2b746f94c966b6f992ea0b", "committedDate": "2020-03-19T07:58:54Z", "message": "NMS-12529: Add network_mode host in the Minion Docker description"}, "afterCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859", "author": {"user": {"login": "indigo423", "name": "Ronny Trommer"}}, "url": "https://github.com/OpenNMS/opennms/commit/47eb90e4ac7dbf0cd36e690e32a47738c29d4859", "committedDate": "2020-03-19T08:33:40Z", "message": "NMS-12529: Add network_mode host in the Minion Docker description"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMTkzNTU1", "url": "https://github.com/OpenNMS/opennms/pull/2889#pullrequestreview-381193555", "createdAt": "2020-03-25T14:21:04Z", "commit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDoyMTowNFrOF7dXqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDo0NDo0MlrOF7ejIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5MTQ5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n          \n          \n            \n            * Current stable _Docker_ release installed, e.g., installed from link:https://docs.docker.com/[Docker Documentation]", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r397891498", "createdAt": "2020-03-25T14:21:04Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/basic-setup-opennms/docker/opennms-docker.adoc", "diffHunk": "@@ -0,0 +1,118 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+NOTE: We don't install all available plugins in our published Docker image.\n+      If you want to customize and maintain your own image, you can find the _Dockerfiles_ in our link:https://github.com/OpenNMS/opennms/tree/develop/opennms-container[source repository].\n+\n+==== Objectives\n+\n+* Run _{opennms-product-name}_ using _Docker Compose_ with a basic setup and _PostgreSQL_ on your local system as a quickstart\n+* Persist RRD files from _{opennms-product-name}_ and _PostgreSQL_ in a volume\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+You must have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5MTY4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n          \n          \n            \n            * Current stable _Docker Compose_ installed, e.g., installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r397891684", "createdAt": "2020-03-25T14:21:17Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/basic-setup-opennms/docker/opennms-docker.adoc", "diffHunk": "@@ -0,0 +1,118 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+NOTE: We don't install all available plugins in our published Docker image.\n+      If you want to customize and maintain your own image, you can find the _Dockerfiles_ in our link:https://github.com/OpenNMS/opennms/tree/develop/opennms-container[source repository].\n+\n+==== Objectives\n+\n+* Run _{opennms-product-name}_ using _Docker Compose_ with a basic setup and _PostgreSQL_ on your local system as a quickstart\n+* Persist RRD files from _{opennms-product-name}_ and _PostgreSQL_ in a volume\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+You must have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5MjU4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n          \n          \n            \n            You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r397892585", "createdAt": "2020-03-25T14:22:25Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/basic-setup-opennms/docker/opennms-docker.adoc", "diffHunk": "@@ -0,0 +1,118 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+NOTE: We don't install all available plugins in our published Docker image.\n+      If you want to customize and maintain your own image, you can find the _Dockerfiles_ in our link:https://github.com/OpenNMS/opennms/tree/develop/opennms-container[source repository].\n+\n+==== Objectives\n+\n+* Run _{opennms-product-name}_ using _Docker Compose_ with a basic setup and _PostgreSQL_ on your local system as a quickstart\n+* Persist RRD files from _{opennms-product-name}_ and _PostgreSQL_ in a volume\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+You must have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5MzU0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <1> Volume definition to persist permanently the _PostgreSQL_ database\n          \n          \n            \n            <1> Volume definition to persist  the _PostgreSQL_ database permanently", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r397893549", "createdAt": "2020-03-25T14:23:36Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/basic-setup-opennms/docker/opennms-docker.adoc", "diffHunk": "@@ -0,0 +1,118 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+NOTE: We don't install all available plugins in our published Docker image.\n+      If you want to customize and maintain your own image, you can find the _Dockerfiles_ in our link:https://github.com/OpenNMS/opennms/tree/develop/opennms-container[source repository].\n+\n+==== Objectives\n+\n+* Run _{opennms-product-name}_ using _Docker Compose_ with a basic setup and _PostgreSQL_ on your local system as a quickstart\n+* Persist RRD files from _{opennms-product-name}_ and _PostgreSQL_ in a volume\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+You must have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack for PostgreSQL and _{opennms-product-name}_\n+\n+The first section describes how to set up _{opennms-product-name}_ service stack in a `docker-compose.yml` file.\n+Create a project directory with `mkdir opennms-horizon` and create a `docker-compose.yml` file in that directory with the following content:\n+\n+[source]\n+----\n+---\n+version: '3'\n+\n+volumes:\n+  data-postgres: {}<1>\n+  data-opennms: {}<2>\n+\n+services:\n+  database:<3>\n+    image: postgres:12<4>\n+    container_name: database<5>\n+    environment:<6>\n+      - TZ=Europe/Berlin\n+      - POSTGRES_USER=postgres\n+      - POSTGRES_PASSWORD=postgres\n+    volumes:<7>\n+      - data-postgres:/var/lib/postgresql/data\n+    healthcheck:<8>\n+      test: [ \"CMD-SHELL\", \"pg_isready -U postgres\" ]\n+      interval: 10s\n+      timeout: 30s\n+      retries: 3\n+\n+  horizon:\n+    image: opennms/horizon:25.2.0<9>\n+    container_name: horizon\n+    environment:<10>\n+      - TZ=Europe/Berlin\n+      - POSTGRES_HOST=database\n+      - POSTGRES_PORT=5432\n+      - POSTGRES_USER=postgres\n+      - POSTGRES_PASSWORD=postgres\n+      - OPENNMS_DBNAME=opennms\n+      - OPENNMS_DBUSER=opennms\n+      - OPENNMS_DBPASS=opennms\n+    volumes:\n+      - data-opennms:/opt/opennms/share/rrd<11>\n+      - ./overlay:/opt/opennms-overlay<12>\n+    command: [\"-s\"]\n+    ports:<13>\n+      - \"8980:8980/tcp\"\n+      - \"8101:8101/tcp\"\n+      - \"61616:61616/tcp\"\n+    healthcheck:<14>\n+      test: [ \"CMD\", \"curl\", \"-f\", \"-I\", \"http://localhost:8980/opennms/login.jsp\" ]\n+      interval: 1m\n+      timeout: 5s\n+      retries: 3\n+----\n+<1> Volume definition to persist permanently the _PostgreSQL_ database", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5MzgzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <2> Volume definition to persist permanently the _RRD_ files from _{opennms-product-name}_\n          \n          \n            \n            <2> Volume definition to persist the _RRD_ files from _{opennms-product-name}_ permanently", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r397893836", "createdAt": "2020-03-25T14:23:55Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/basic-setup-opennms/docker/opennms-docker.adoc", "diffHunk": "@@ -0,0 +1,118 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+NOTE: We don't install all available plugins in our published Docker image.\n+      If you want to customize and maintain your own image, you can find the _Dockerfiles_ in our link:https://github.com/OpenNMS/opennms/tree/develop/opennms-container[source repository].\n+\n+==== Objectives\n+\n+* Run _{opennms-product-name}_ using _Docker Compose_ with a basic setup and _PostgreSQL_ on your local system as a quickstart\n+* Persist RRD files from _{opennms-product-name}_ and _PostgreSQL_ in a volume\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+You must have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack for PostgreSQL and _{opennms-product-name}_\n+\n+The first section describes how to set up _{opennms-product-name}_ service stack in a `docker-compose.yml` file.\n+Create a project directory with `mkdir opennms-horizon` and create a `docker-compose.yml` file in that directory with the following content:\n+\n+[source]\n+----\n+---\n+version: '3'\n+\n+volumes:\n+  data-postgres: {}<1>\n+  data-opennms: {}<2>\n+\n+services:\n+  database:<3>\n+    image: postgres:12<4>\n+    container_name: database<5>\n+    environment:<6>\n+      - TZ=Europe/Berlin\n+      - POSTGRES_USER=postgres\n+      - POSTGRES_PASSWORD=postgres\n+    volumes:<7>\n+      - data-postgres:/var/lib/postgresql/data\n+    healthcheck:<8>\n+      test: [ \"CMD-SHELL\", \"pg_isready -U postgres\" ]\n+      interval: 10s\n+      timeout: 30s\n+      retries: 3\n+\n+  horizon:\n+    image: opennms/horizon:25.2.0<9>\n+    container_name: horizon\n+    environment:<10>\n+      - TZ=Europe/Berlin\n+      - POSTGRES_HOST=database\n+      - POSTGRES_PORT=5432\n+      - POSTGRES_USER=postgres\n+      - POSTGRES_PASSWORD=postgres\n+      - OPENNMS_DBNAME=opennms\n+      - OPENNMS_DBUSER=opennms\n+      - OPENNMS_DBPASS=opennms\n+    volumes:\n+      - data-opennms:/opt/opennms/share/rrd<11>\n+      - ./overlay:/opt/opennms-overlay<12>\n+    command: [\"-s\"]\n+    ports:<13>\n+      - \"8980:8980/tcp\"\n+      - \"8101:8101/tcp\"\n+      - \"61616:61616/tcp\"\n+    healthcheck:<14>\n+      test: [ \"CMD\", \"curl\", \"-f\", \"-I\", \"http://localhost:8980/opennms/login.jsp\" ]\n+      interval: 1m\n+      timeout: 5s\n+      retries: 3\n+----\n+<1> Volume definition to persist permanently the _PostgreSQL_ database\n+<2> Volume definition to persist permanently the _RRD_ files from _{opennms-product-name}_", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5NDgyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <6> Environment variables to initialize a postgres user with a password.\n          \n          \n            \n            <6> Environment variables to initialize a postgres user with a password", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r397894825", "createdAt": "2020-03-25T14:25:12Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/basic-setup-opennms/docker/opennms-docker.adoc", "diffHunk": "@@ -0,0 +1,118 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+NOTE: We don't install all available plugins in our published Docker image.\n+      If you want to customize and maintain your own image, you can find the _Dockerfiles_ in our link:https://github.com/OpenNMS/opennms/tree/develop/opennms-container[source repository].\n+\n+==== Objectives\n+\n+* Run _{opennms-product-name}_ using _Docker Compose_ with a basic setup and _PostgreSQL_ on your local system as a quickstart\n+* Persist RRD files from _{opennms-product-name}_ and _PostgreSQL_ in a volume\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+You must have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack for PostgreSQL and _{opennms-product-name}_\n+\n+The first section describes how to set up _{opennms-product-name}_ service stack in a `docker-compose.yml` file.\n+Create a project directory with `mkdir opennms-horizon` and create a `docker-compose.yml` file in that directory with the following content:\n+\n+[source]\n+----\n+---\n+version: '3'\n+\n+volumes:\n+  data-postgres: {}<1>\n+  data-opennms: {}<2>\n+\n+services:\n+  database:<3>\n+    image: postgres:12<4>\n+    container_name: database<5>\n+    environment:<6>\n+      - TZ=Europe/Berlin\n+      - POSTGRES_USER=postgres\n+      - POSTGRES_PASSWORD=postgres\n+    volumes:<7>\n+      - data-postgres:/var/lib/postgresql/data\n+    healthcheck:<8>\n+      test: [ \"CMD-SHELL\", \"pg_isready -U postgres\" ]\n+      interval: 10s\n+      timeout: 30s\n+      retries: 3\n+\n+  horizon:\n+    image: opennms/horizon:25.2.0<9>\n+    container_name: horizon\n+    environment:<10>\n+      - TZ=Europe/Berlin\n+      - POSTGRES_HOST=database\n+      - POSTGRES_PORT=5432\n+      - POSTGRES_USER=postgres\n+      - POSTGRES_PASSWORD=postgres\n+      - OPENNMS_DBNAME=opennms\n+      - OPENNMS_DBUSER=opennms\n+      - OPENNMS_DBPASS=opennms\n+    volumes:\n+      - data-opennms:/opt/opennms/share/rrd<11>\n+      - ./overlay:/opt/opennms-overlay<12>\n+    command: [\"-s\"]\n+    ports:<13>\n+      - \"8980:8980/tcp\"\n+      - \"8101:8101/tcp\"\n+      - \"61616:61616/tcp\"\n+    healthcheck:<14>\n+      test: [ \"CMD\", \"curl\", \"-f\", \"-I\", \"http://localhost:8980/opennms/login.jsp\" ]\n+      interval: 1m\n+      timeout: 5s\n+      retries: 3\n+----\n+<1> Volume definition to persist permanently the _PostgreSQL_ database\n+<2> Volume definition to persist permanently the _RRD_ files from _{opennms-product-name}_\n+<3> Service name `database` for the _PostgreSQL_ instance\n+<4> Image reference for the vanilla _PostgreSQL_ Docker image with a fixed version\n+<5> Friendly container name\n+<6> Environment variables to initialize a postgres user with a password.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5NTMxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <10> Setup a data base connection using the `postgres` root user and initialize an `opennms` database with user and credentials\n          \n          \n            \n            <10> Set up a database connection using the `postgres` root user and initialize an `opennms` database with user and credentials", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r397895315", "createdAt": "2020-03-25T14:25:46Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/basic-setup-opennms/docker/opennms-docker.adoc", "diffHunk": "@@ -0,0 +1,118 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+NOTE: We don't install all available plugins in our published Docker image.\n+      If you want to customize and maintain your own image, you can find the _Dockerfiles_ in our link:https://github.com/OpenNMS/opennms/tree/develop/opennms-container[source repository].\n+\n+==== Objectives\n+\n+* Run _{opennms-product-name}_ using _Docker Compose_ with a basic setup and _PostgreSQL_ on your local system as a quickstart\n+* Persist RRD files from _{opennms-product-name}_ and _PostgreSQL_ in a volume\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+You must have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack for PostgreSQL and _{opennms-product-name}_\n+\n+The first section describes how to set up _{opennms-product-name}_ service stack in a `docker-compose.yml` file.\n+Create a project directory with `mkdir opennms-horizon` and create a `docker-compose.yml` file in that directory with the following content:\n+\n+[source]\n+----\n+---\n+version: '3'\n+\n+volumes:\n+  data-postgres: {}<1>\n+  data-opennms: {}<2>\n+\n+services:\n+  database:<3>\n+    image: postgres:12<4>\n+    container_name: database<5>\n+    environment:<6>\n+      - TZ=Europe/Berlin\n+      - POSTGRES_USER=postgres\n+      - POSTGRES_PASSWORD=postgres\n+    volumes:<7>\n+      - data-postgres:/var/lib/postgresql/data\n+    healthcheck:<8>\n+      test: [ \"CMD-SHELL\", \"pg_isready -U postgres\" ]\n+      interval: 10s\n+      timeout: 30s\n+      retries: 3\n+\n+  horizon:\n+    image: opennms/horizon:25.2.0<9>\n+    container_name: horizon\n+    environment:<10>\n+      - TZ=Europe/Berlin\n+      - POSTGRES_HOST=database\n+      - POSTGRES_PORT=5432\n+      - POSTGRES_USER=postgres\n+      - POSTGRES_PASSWORD=postgres\n+      - OPENNMS_DBNAME=opennms\n+      - OPENNMS_DBUSER=opennms\n+      - OPENNMS_DBPASS=opennms\n+    volumes:\n+      - data-opennms:/opt/opennms/share/rrd<11>\n+      - ./overlay:/opt/opennms-overlay<12>\n+    command: [\"-s\"]\n+    ports:<13>\n+      - \"8980:8980/tcp\"\n+      - \"8101:8101/tcp\"\n+      - \"61616:61616/tcp\"\n+    healthcheck:<14>\n+      test: [ \"CMD\", \"curl\", \"-f\", \"-I\", \"http://localhost:8980/opennms/login.jsp\" ]\n+      interval: 1m\n+      timeout: 5s\n+      retries: 3\n+----\n+<1> Volume definition to persist permanently the _PostgreSQL_ database\n+<2> Volume definition to persist permanently the _RRD_ files from _{opennms-product-name}_\n+<3> Service name `database` for the _PostgreSQL_ instance\n+<4> Image reference for the vanilla _PostgreSQL_ Docker image with a fixed version\n+<5> Friendly container name\n+<6> Environment variables to initialize a postgres user with a password.\n+<7> Assign volume to persist the _PostgreSQL_ database\n+<8> Create a health check for the _PostgreSQL_ database\n+<9> Image reference for the _{opennms-product-name}_ container image using the latest stable version\n+<10> Setup a data base connection using the `postgres` root user and initialize an `opennms` database with user and credentials", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5OTgyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            After download and startup verify if you can access the web user interface by going to http://localhost:8980.\n          \n          \n            \n            After download and startup, verify that you can access the web user interface by going to http://localhost:8980.", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r397899827", "createdAt": "2020-03-25T14:31:08Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/basic-setup-opennms/docker/opennms-docker.adoc", "diffHunk": "@@ -0,0 +1,118 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+NOTE: We don't install all available plugins in our published Docker image.\n+      If you want to customize and maintain your own image, you can find the _Dockerfiles_ in our link:https://github.com/OpenNMS/opennms/tree/develop/opennms-container[source repository].\n+\n+==== Objectives\n+\n+* Run _{opennms-product-name}_ using _Docker Compose_ with a basic setup and _PostgreSQL_ on your local system as a quickstart\n+* Persist RRD files from _{opennms-product-name}_ and _PostgreSQL_ in a volume\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+You must have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack for PostgreSQL and _{opennms-product-name}_\n+\n+The first section describes how to set up _{opennms-product-name}_ service stack in a `docker-compose.yml` file.\n+Create a project directory with `mkdir opennms-horizon` and create a `docker-compose.yml` file in that directory with the following content:\n+\n+[source]\n+----\n+---\n+version: '3'\n+\n+volumes:\n+  data-postgres: {}<1>\n+  data-opennms: {}<2>\n+\n+services:\n+  database:<3>\n+    image: postgres:12<4>\n+    container_name: database<5>\n+    environment:<6>\n+      - TZ=Europe/Berlin\n+      - POSTGRES_USER=postgres\n+      - POSTGRES_PASSWORD=postgres\n+    volumes:<7>\n+      - data-postgres:/var/lib/postgresql/data\n+    healthcheck:<8>\n+      test: [ \"CMD-SHELL\", \"pg_isready -U postgres\" ]\n+      interval: 10s\n+      timeout: 30s\n+      retries: 3\n+\n+  horizon:\n+    image: opennms/horizon:25.2.0<9>\n+    container_name: horizon\n+    environment:<10>\n+      - TZ=Europe/Berlin\n+      - POSTGRES_HOST=database\n+      - POSTGRES_PORT=5432\n+      - POSTGRES_USER=postgres\n+      - POSTGRES_PASSWORD=postgres\n+      - OPENNMS_DBNAME=opennms\n+      - OPENNMS_DBUSER=opennms\n+      - OPENNMS_DBPASS=opennms\n+    volumes:\n+      - data-opennms:/opt/opennms/share/rrd<11>\n+      - ./overlay:/opt/opennms-overlay<12>\n+    command: [\"-s\"]\n+    ports:<13>\n+      - \"8980:8980/tcp\"\n+      - \"8101:8101/tcp\"\n+      - \"61616:61616/tcp\"\n+    healthcheck:<14>\n+      test: [ \"CMD\", \"curl\", \"-f\", \"-I\", \"http://localhost:8980/opennms/login.jsp\" ]\n+      interval: 1m\n+      timeout: 5s\n+      retries: 3\n+----\n+<1> Volume definition to persist permanently the _PostgreSQL_ database\n+<2> Volume definition to persist permanently the _RRD_ files from _{opennms-product-name}_\n+<3> Service name `database` for the _PostgreSQL_ instance\n+<4> Image reference for the vanilla _PostgreSQL_ Docker image with a fixed version\n+<5> Friendly container name\n+<6> Environment variables to initialize a postgres user with a password.\n+<7> Assign volume to persist the _PostgreSQL_ database\n+<8> Create a health check for the _PostgreSQL_ database\n+<9> Image reference for the _{opennms-product-name}_ container image using the latest stable version\n+<10> Setup a data base connection using the `postgres` root user and initialize an `opennms` database with user and credentials\n+<11> Assign the volume to persist the _RRD_ files permanently\n+<12> Mount the configuration files to make them accessible in a local directory\n+<13> Publish ports for the web user interface, _Karaf Shell_ and _ActiveMQ_\n+<14> Create a health check against the login page from _{opennms-product-name}_\n+\n+===== Step 2: Start the service stack\n+\n+[source,shell]\n+----\n+cd opennms-horizon\n+docker-compose up -d\n+----\n+\n+NOTE: The startup and download can take a while; you can use the `docker-compose ps` command and wait until the health check for the `horizon` service is `up (healthy)`.\n+      \n+===== Step 3: Login to the Web UI\n+\n+After download and startup verify if you can access the web user interface by going to http://localhost:8980.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkwMDE4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ===== Step 3: Login to the Web UI\n          \n          \n            \n            ===== Step 3: Log in to the Web UI", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r397900186", "createdAt": "2020-03-25T14:31:35Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/basic-setup-opennms/docker/opennms-docker.adoc", "diffHunk": "@@ -0,0 +1,118 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+NOTE: We don't install all available plugins in our published Docker image.\n+      If you want to customize and maintain your own image, you can find the _Dockerfiles_ in our link:https://github.com/OpenNMS/opennms/tree/develop/opennms-container[source repository].\n+\n+==== Objectives\n+\n+* Run _{opennms-product-name}_ using _Docker Compose_ with a basic setup and _PostgreSQL_ on your local system as a quickstart\n+* Persist RRD files from _{opennms-product-name}_ and _PostgreSQL_ in a volume\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+You must have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g. installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g. installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack for PostgreSQL and _{opennms-product-name}_\n+\n+The first section describes how to set up _{opennms-product-name}_ service stack in a `docker-compose.yml` file.\n+Create a project directory with `mkdir opennms-horizon` and create a `docker-compose.yml` file in that directory with the following content:\n+\n+[source]\n+----\n+---\n+version: '3'\n+\n+volumes:\n+  data-postgres: {}<1>\n+  data-opennms: {}<2>\n+\n+services:\n+  database:<3>\n+    image: postgres:12<4>\n+    container_name: database<5>\n+    environment:<6>\n+      - TZ=Europe/Berlin\n+      - POSTGRES_USER=postgres\n+      - POSTGRES_PASSWORD=postgres\n+    volumes:<7>\n+      - data-postgres:/var/lib/postgresql/data\n+    healthcheck:<8>\n+      test: [ \"CMD-SHELL\", \"pg_isready -U postgres\" ]\n+      interval: 10s\n+      timeout: 30s\n+      retries: 3\n+\n+  horizon:\n+    image: opennms/horizon:25.2.0<9>\n+    container_name: horizon\n+    environment:<10>\n+      - TZ=Europe/Berlin\n+      - POSTGRES_HOST=database\n+      - POSTGRES_PORT=5432\n+      - POSTGRES_USER=postgres\n+      - POSTGRES_PASSWORD=postgres\n+      - OPENNMS_DBNAME=opennms\n+      - OPENNMS_DBUSER=opennms\n+      - OPENNMS_DBPASS=opennms\n+    volumes:\n+      - data-opennms:/opt/opennms/share/rrd<11>\n+      - ./overlay:/opt/opennms-overlay<12>\n+    command: [\"-s\"]\n+    ports:<13>\n+      - \"8980:8980/tcp\"\n+      - \"8101:8101/tcp\"\n+      - \"61616:61616/tcp\"\n+    healthcheck:<14>\n+      test: [ \"CMD\", \"curl\", \"-f\", \"-I\", \"http://localhost:8980/opennms/login.jsp\" ]\n+      interval: 1m\n+      timeout: 5s\n+      retries: 3\n+----\n+<1> Volume definition to persist permanently the _PostgreSQL_ database\n+<2> Volume definition to persist permanently the _RRD_ files from _{opennms-product-name}_\n+<3> Service name `database` for the _PostgreSQL_ instance\n+<4> Image reference for the vanilla _PostgreSQL_ Docker image with a fixed version\n+<5> Friendly container name\n+<6> Environment variables to initialize a postgres user with a password.\n+<7> Assign volume to persist the _PostgreSQL_ database\n+<8> Create a health check for the _PostgreSQL_ database\n+<9> Image reference for the _{opennms-product-name}_ container image using the latest stable version\n+<10> Setup a data base connection using the `postgres` root user and initialize an `opennms` database with user and credentials\n+<11> Assign the volume to persist the _RRD_ files permanently\n+<12> Mount the configuration files to make them accessible in a local directory\n+<13> Publish ports for the web user interface, _Karaf Shell_ and _ActiveMQ_\n+<14> Create a health check against the login page from _{opennms-product-name}_\n+\n+===== Step 2: Start the service stack\n+\n+[source,shell]\n+----\n+cd opennms-horizon\n+docker-compose up -d\n+----\n+\n+NOTE: The startup and download can take a while; you can use the `docker-compose ps` command and wait until the health check for the `horizon` service is `up (healthy)`.\n+      \n+===== Step 3: Login to the Web UI", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkwMjQ4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ===== Step 4: Verify status in the administrative Web UI\n          \n          \n            \n            ===== Step 4: Verify status in the web UI", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r397902480", "createdAt": "2020-03-25T14:34:21Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,107 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in, and connect it to, the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+You must have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g., installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g., installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+* _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ \n+* The _Minion_ can connect to _{opennms-product-name}_ with port `61616/TCP` for _ActiveMQ_ and _REST_ on port `8980/TCP`\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack with a Minion\n+\n+Create a project directory with `mkdir opennms-minion` and create a `docker-compose.yml` file in that directory with the following content:\n+\n+[source,yaml]\n+----\n+---\n+version: '3'\n+\n+services:  \n+  minion:\n+    image: opennms/minion:25.2.0\n+    container_name: minion<1>\n+    network_mode: host<2>\n+    environment:\n+      - TZ=Europe/Berlin<3>\n+      - MINION_ID=my-minion<4>\n+      - MINION_LOCATION=my-location<5>\n+      - OPENNMS_BROKER_URL=failover:tcp://horizon-instance:61616<6>\n+      - OPENNMS_BROKER_USER=minion-user<7>\n+      - OPENNMS_BROKER_PASS=minion-password\n+      - OPENNMS_HTTP_URL=http://horizon-instance:8980/opennms<8>\n+      - OPENNMS_HTTP_USER=minion-user<9>\n+      - OPENNMS_HTTP_PASS=minion-password\n+    command: [\"-f\"]\n+----\n+<1> Friendly container name\n+<2> If you process UDP data like SNMP traps, Syslogs or flows, `network_mode: host` ensures the UDP source addresses are not modified\n+<3> Time zone for the _Minion_\n+<4> A defined identifier for this _Minion_. If not set, a unique user identifier (_UUID_) will be generated\n+<5> The name of the location of the _Minion_ and the connection to the _ActiveMQ_ broker running in _{opennms-product-name}_\n+<6> _ActiveMQ_ broker endpoint from _{opennms-product-name}_\n+<7> Authentication for ActiveMQ broker\n+<8> _REST_ endpoint to connect to the _{opennms-product-name}_ instance\n+<9> Authentication for the _REST_ endpoint\n+\n+NOTE: In this example we haven't set credentials to connect the _Minion_ via _REST_ and the _ActiveMQ Message Broker_.\n+      The _Minion_ will fall back and uses the default admin/admin credentials for the communication.\n+      Permissions for _ActiveMQ_ and _REST_ are assigned with the role _ROLE_MINION_ on the _{opennms-product-name}_ instance.\n+\n+WARNING: In case you process UDP data and you don't use `network_mode: host` the UDP source address from your packets will be modified from Docker.\n+         The source address is your Docker internal gateway instead of the source address of your device.\n+         Source addresses are used to associate the Syslog or SNMP traps to the nodes in the OpenNMS database.\n+         You can use an isolated network and publish ports as usual if you don't receive UDP based monitoring data.\n+         If you don't use `network_mode: host` you have to publish the listener ports manually.\n+\n+===== Step 2: Start the service stack and test the functionality\n+\n+[source,shell]\n+----\n+cd opennms-minion\n+docker-compose up -d\n+----\n+\n+===== Step 3: Run _Minion_ health check\n+\n+.Log in to the _Minion Karaf Shell_ and run the health check\n+[source, shell]\n+----\n+ssh admin@localhost -p 8201\n+\n+admin@minion> health:check\n+Verifying the health of the container\n+\n+Connecting to OpenNMS ReST API   [ Success  ]\n+Verifying installed bundles      [ Success  ]\n+Connecting to JMS Broker         [ Success  ]\n+\n+=> Everything is awesome\n+----\n+\n+NOTE: The default admin password for the _Minion Karaf Shell_ is _admin_.\n+\n+===== Step 4: Verify status in the administrative Web UI", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkwMjc4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ===== Step 3: Run _Minion_ health check\n          \n          \n            \n            ===== Step 3: Run _Minion_ Health Check", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r397902782", "createdAt": "2020-03-25T14:34:41Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,107 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in, and connect it to, the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+You must have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g., installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g., installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+* _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ \n+* The _Minion_ can connect to _{opennms-product-name}_ with port `61616/TCP` for _ActiveMQ_ and _REST_ on port `8980/TCP`\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack with a Minion\n+\n+Create a project directory with `mkdir opennms-minion` and create a `docker-compose.yml` file in that directory with the following content:\n+\n+[source,yaml]\n+----\n+---\n+version: '3'\n+\n+services:  \n+  minion:\n+    image: opennms/minion:25.2.0\n+    container_name: minion<1>\n+    network_mode: host<2>\n+    environment:\n+      - TZ=Europe/Berlin<3>\n+      - MINION_ID=my-minion<4>\n+      - MINION_LOCATION=my-location<5>\n+      - OPENNMS_BROKER_URL=failover:tcp://horizon-instance:61616<6>\n+      - OPENNMS_BROKER_USER=minion-user<7>\n+      - OPENNMS_BROKER_PASS=minion-password\n+      - OPENNMS_HTTP_URL=http://horizon-instance:8980/opennms<8>\n+      - OPENNMS_HTTP_USER=minion-user<9>\n+      - OPENNMS_HTTP_PASS=minion-password\n+    command: [\"-f\"]\n+----\n+<1> Friendly container name\n+<2> If you process UDP data like SNMP traps, Syslogs or flows, `network_mode: host` ensures the UDP source addresses are not modified\n+<3> Time zone for the _Minion_\n+<4> A defined identifier for this _Minion_. If not set, a unique user identifier (_UUID_) will be generated\n+<5> The name of the location of the _Minion_ and the connection to the _ActiveMQ_ broker running in _{opennms-product-name}_\n+<6> _ActiveMQ_ broker endpoint from _{opennms-product-name}_\n+<7> Authentication for ActiveMQ broker\n+<8> _REST_ endpoint to connect to the _{opennms-product-name}_ instance\n+<9> Authentication for the _REST_ endpoint\n+\n+NOTE: In this example we haven't set credentials to connect the _Minion_ via _REST_ and the _ActiveMQ Message Broker_.\n+      The _Minion_ will fall back and uses the default admin/admin credentials for the communication.\n+      Permissions for _ActiveMQ_ and _REST_ are assigned with the role _ROLE_MINION_ on the _{opennms-product-name}_ instance.\n+\n+WARNING: In case you process UDP data and you don't use `network_mode: host` the UDP source address from your packets will be modified from Docker.\n+         The source address is your Docker internal gateway instead of the source address of your device.\n+         Source addresses are used to associate the Syslog or SNMP traps to the nodes in the OpenNMS database.\n+         You can use an isolated network and publish ports as usual if you don't receive UDP based monitoring data.\n+         If you don't use `network_mode: host` you have to publish the listener ports manually.\n+\n+===== Step 2: Start the service stack and test the functionality\n+\n+[source,shell]\n+----\n+cd opennms-minion\n+docker-compose up -d\n+----\n+\n+===== Step 3: Run _Minion_ health check", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkwMzYyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n          \n          \n            \n            _{opennms-product-name}_ provides and publishes container images on link:https://hub.docker.com/u/opennms[DockerHub].", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r397903626", "createdAt": "2020-03-25T14:35:45Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/basic-setup-opennms/docker/opennms-docker.adoc", "diffHunk": "@@ -0,0 +1,118 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkwNDMxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n          \n          \n            \n            _{opennms-product-name}_ provides and publishes container images on link:https://hub.docker.com/u/opennms[DockerHub].", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r397904312", "createdAt": "2020-03-25T14:36:36Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,107 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkwNTY1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n          \n          \n            \n            You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r397905658", "createdAt": "2020-03-25T14:38:13Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,107 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in, and connect it to, the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+You must have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g., installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g., installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkwNTg2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ \n          \n          \n            \n            _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r397905869", "createdAt": "2020-03-25T14:38:31Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,107 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in, and connect it to, the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+You must have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g., installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g., installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+* _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkwNjAyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * The _Minion_ can connect to _{opennms-product-name}_ with port `61616/TCP` for _ActiveMQ_ and _REST_ on port `8980/TCP`\n          \n          \n            \n            The _Minion_ can connect to _{opennms-product-name}_ with port `61616/TCP` for _ActiveMQ_ and _REST_ on port `8980/TCP`", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r397906020", "createdAt": "2020-03-25T14:38:42Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,107 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in, and connect it to, the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+You must have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g., installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g., installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+* _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ \n+* The _Minion_ can connect to _{opennms-product-name}_ with port `61616/TCP` for _ActiveMQ_ and _REST_ on port `8980/TCP`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkwNzI0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  The _Minion_ will fall back and uses the default admin/admin credentials for the communication.\n          \n          \n            \n                  The _Minion_ will fall back and uses the default admin/admin credentials for communication.", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r397907245", "createdAt": "2020-03-25T14:40:15Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,107 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in, and connect it to, the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+You must have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g., installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g., installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+* _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ \n+* The _Minion_ can connect to _{opennms-product-name}_ with port `61616/TCP` for _ActiveMQ_ and _REST_ on port `8980/TCP`\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack with a Minion\n+\n+Create a project directory with `mkdir opennms-minion` and create a `docker-compose.yml` file in that directory with the following content:\n+\n+[source,yaml]\n+----\n+---\n+version: '3'\n+\n+services:  \n+  minion:\n+    image: opennms/minion:25.2.0\n+    container_name: minion<1>\n+    network_mode: host<2>\n+    environment:\n+      - TZ=Europe/Berlin<3>\n+      - MINION_ID=my-minion<4>\n+      - MINION_LOCATION=my-location<5>\n+      - OPENNMS_BROKER_URL=failover:tcp://horizon-instance:61616<6>\n+      - OPENNMS_BROKER_USER=minion-user<7>\n+      - OPENNMS_BROKER_PASS=minion-password\n+      - OPENNMS_HTTP_URL=http://horizon-instance:8980/opennms<8>\n+      - OPENNMS_HTTP_USER=minion-user<9>\n+      - OPENNMS_HTTP_PASS=minion-password\n+    command: [\"-f\"]\n+----\n+<1> Friendly container name\n+<2> If you process UDP data like SNMP traps, Syslogs or flows, `network_mode: host` ensures the UDP source addresses are not modified\n+<3> Time zone for the _Minion_\n+<4> A defined identifier for this _Minion_. If not set, a unique user identifier (_UUID_) will be generated\n+<5> The name of the location of the _Minion_ and the connection to the _ActiveMQ_ broker running in _{opennms-product-name}_\n+<6> _ActiveMQ_ broker endpoint from _{opennms-product-name}_\n+<7> Authentication for ActiveMQ broker\n+<8> _REST_ endpoint to connect to the _{opennms-product-name}_ instance\n+<9> Authentication for the _REST_ endpoint\n+\n+NOTE: In this example we haven't set credentials to connect the _Minion_ via _REST_ and the _ActiveMQ Message Broker_.\n+      The _Minion_ will fall back and uses the default admin/admin credentials for the communication.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkwODA2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            WARNING: In case you process UDP data and you don't use `network_mode: host` the UDP source address from your packets will be modified from Docker.\n          \n          \n            \n            WARNING: If you process UDP data and you don't use `network_mode: host`, the UDP source address from your packets will be modified from Docker.", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r397908060", "createdAt": "2020-03-25T14:41:18Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,107 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in, and connect it to, the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+You must have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g., installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g., installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+* _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ \n+* The _Minion_ can connect to _{opennms-product-name}_ with port `61616/TCP` for _ActiveMQ_ and _REST_ on port `8980/TCP`\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack with a Minion\n+\n+Create a project directory with `mkdir opennms-minion` and create a `docker-compose.yml` file in that directory with the following content:\n+\n+[source,yaml]\n+----\n+---\n+version: '3'\n+\n+services:  \n+  minion:\n+    image: opennms/minion:25.2.0\n+    container_name: minion<1>\n+    network_mode: host<2>\n+    environment:\n+      - TZ=Europe/Berlin<3>\n+      - MINION_ID=my-minion<4>\n+      - MINION_LOCATION=my-location<5>\n+      - OPENNMS_BROKER_URL=failover:tcp://horizon-instance:61616<6>\n+      - OPENNMS_BROKER_USER=minion-user<7>\n+      - OPENNMS_BROKER_PASS=minion-password\n+      - OPENNMS_HTTP_URL=http://horizon-instance:8980/opennms<8>\n+      - OPENNMS_HTTP_USER=minion-user<9>\n+      - OPENNMS_HTTP_PASS=minion-password\n+    command: [\"-f\"]\n+----\n+<1> Friendly container name\n+<2> If you process UDP data like SNMP traps, Syslogs or flows, `network_mode: host` ensures the UDP source addresses are not modified\n+<3> Time zone for the _Minion_\n+<4> A defined identifier for this _Minion_. If not set, a unique user identifier (_UUID_) will be generated\n+<5> The name of the location of the _Minion_ and the connection to the _ActiveMQ_ broker running in _{opennms-product-name}_\n+<6> _ActiveMQ_ broker endpoint from _{opennms-product-name}_\n+<7> Authentication for ActiveMQ broker\n+<8> _REST_ endpoint to connect to the _{opennms-product-name}_ instance\n+<9> Authentication for the _REST_ endpoint\n+\n+NOTE: In this example we haven't set credentials to connect the _Minion_ via _REST_ and the _ActiveMQ Message Broker_.\n+      The _Minion_ will fall back and uses the default admin/admin credentials for the communication.\n+      Permissions for _ActiveMQ_ and _REST_ are assigned with the role _ROLE_MINION_ on the _{opennms-product-name}_ instance.\n+\n+WARNING: In case you process UDP data and you don't use `network_mode: host` the UDP source address from your packets will be modified from Docker.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkwODU1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     Source addresses are used to associate the Syslog or SNMP traps to the nodes in the OpenNMS database.\n          \n          \n            \n                     Source addresses associate the Syslog or SNMP traps to the nodes in the OpenNMS database.", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r397908557", "createdAt": "2020-03-25T14:41:52Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,107 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in, and connect it to, the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+You must have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g., installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g., installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+* _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ \n+* The _Minion_ can connect to _{opennms-product-name}_ with port `61616/TCP` for _ActiveMQ_ and _REST_ on port `8980/TCP`\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack with a Minion\n+\n+Create a project directory with `mkdir opennms-minion` and create a `docker-compose.yml` file in that directory with the following content:\n+\n+[source,yaml]\n+----\n+---\n+version: '3'\n+\n+services:  \n+  minion:\n+    image: opennms/minion:25.2.0\n+    container_name: minion<1>\n+    network_mode: host<2>\n+    environment:\n+      - TZ=Europe/Berlin<3>\n+      - MINION_ID=my-minion<4>\n+      - MINION_LOCATION=my-location<5>\n+      - OPENNMS_BROKER_URL=failover:tcp://horizon-instance:61616<6>\n+      - OPENNMS_BROKER_USER=minion-user<7>\n+      - OPENNMS_BROKER_PASS=minion-password\n+      - OPENNMS_HTTP_URL=http://horizon-instance:8980/opennms<8>\n+      - OPENNMS_HTTP_USER=minion-user<9>\n+      - OPENNMS_HTTP_PASS=minion-password\n+    command: [\"-f\"]\n+----\n+<1> Friendly container name\n+<2> If you process UDP data like SNMP traps, Syslogs or flows, `network_mode: host` ensures the UDP source addresses are not modified\n+<3> Time zone for the _Minion_\n+<4> A defined identifier for this _Minion_. If not set, a unique user identifier (_UUID_) will be generated\n+<5> The name of the location of the _Minion_ and the connection to the _ActiveMQ_ broker running in _{opennms-product-name}_\n+<6> _ActiveMQ_ broker endpoint from _{opennms-product-name}_\n+<7> Authentication for ActiveMQ broker\n+<8> _REST_ endpoint to connect to the _{opennms-product-name}_ instance\n+<9> Authentication for the _REST_ endpoint\n+\n+NOTE: In this example we haven't set credentials to connect the _Minion_ via _REST_ and the _ActiveMQ Message Broker_.\n+      The _Minion_ will fall back and uses the default admin/admin credentials for the communication.\n+      Permissions for _ActiveMQ_ and _REST_ are assigned with the role _ROLE_MINION_ on the _{opennms-product-name}_ instance.\n+\n+WARNING: In case you process UDP data and you don't use `network_mode: host` the UDP source address from your packets will be modified from Docker.\n+         The source address is your Docker internal gateway instead of the source address of your device.\n+         Source addresses are used to associate the Syslog or SNMP traps to the nodes in the OpenNMS database.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkwODg4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     You can use an isolated network and publish ports as usual if you don't receive UDP based monitoring data.\n          \n          \n            \n                     You can use an isolated network and publish ports as usual if you don't receive UDP-based monitoring data.", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r397908881", "createdAt": "2020-03-25T14:42:14Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,107 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in, and connect it to, the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+You must have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g., installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g., installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+* _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ \n+* The _Minion_ can connect to _{opennms-product-name}_ with port `61616/TCP` for _ActiveMQ_ and _REST_ on port `8980/TCP`\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack with a Minion\n+\n+Create a project directory with `mkdir opennms-minion` and create a `docker-compose.yml` file in that directory with the following content:\n+\n+[source,yaml]\n+----\n+---\n+version: '3'\n+\n+services:  \n+  minion:\n+    image: opennms/minion:25.2.0\n+    container_name: minion<1>\n+    network_mode: host<2>\n+    environment:\n+      - TZ=Europe/Berlin<3>\n+      - MINION_ID=my-minion<4>\n+      - MINION_LOCATION=my-location<5>\n+      - OPENNMS_BROKER_URL=failover:tcp://horizon-instance:61616<6>\n+      - OPENNMS_BROKER_USER=minion-user<7>\n+      - OPENNMS_BROKER_PASS=minion-password\n+      - OPENNMS_HTTP_URL=http://horizon-instance:8980/opennms<8>\n+      - OPENNMS_HTTP_USER=minion-user<9>\n+      - OPENNMS_HTTP_PASS=minion-password\n+    command: [\"-f\"]\n+----\n+<1> Friendly container name\n+<2> If you process UDP data like SNMP traps, Syslogs or flows, `network_mode: host` ensures the UDP source addresses are not modified\n+<3> Time zone for the _Minion_\n+<4> A defined identifier for this _Minion_. If not set, a unique user identifier (_UUID_) will be generated\n+<5> The name of the location of the _Minion_ and the connection to the _ActiveMQ_ broker running in _{opennms-product-name}_\n+<6> _ActiveMQ_ broker endpoint from _{opennms-product-name}_\n+<7> Authentication for ActiveMQ broker\n+<8> _REST_ endpoint to connect to the _{opennms-product-name}_ instance\n+<9> Authentication for the _REST_ endpoint\n+\n+NOTE: In this example we haven't set credentials to connect the _Minion_ via _REST_ and the _ActiveMQ Message Broker_.\n+      The _Minion_ will fall back and uses the default admin/admin credentials for the communication.\n+      Permissions for _ActiveMQ_ and _REST_ are assigned with the role _ROLE_MINION_ on the _{opennms-product-name}_ instance.\n+\n+WARNING: In case you process UDP data and you don't use `network_mode: host` the UDP source address from your packets will be modified from Docker.\n+         The source address is your Docker internal gateway instead of the source address of your device.\n+         Source addresses are used to associate the Syslog or SNMP traps to the nodes in the OpenNMS database.\n+         You can use an isolated network and publish ports as usual if you don't receive UDP based monitoring data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxMDMzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Verify if _Minion_ is provisioned automatically by going to _Info -> Nodes_ and select the _Minion_. The services _JMX-Minion_, _Minion-Heartbeat_ and _Minion-RPC_ should be _up_ and provisioned on the local loop-back interface\n          \n          \n            \n            * Verify that _Minion_ is provisioned automatically by going to _Info -> Nodes_ and selecting the _Minion_. The services _JMX-Minion_, _Minion-Heartbeat_ and _Minion-RPC_ should be _up_ and provisioned on the local loop-back interface", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r397910331", "createdAt": "2020-03-25T14:44:04Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,107 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in, and connect it to, the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+You must have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g., installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g., installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+* _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ \n+* The _Minion_ can connect to _{opennms-product-name}_ with port `61616/TCP` for _ActiveMQ_ and _REST_ on port `8980/TCP`\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack with a Minion\n+\n+Create a project directory with `mkdir opennms-minion` and create a `docker-compose.yml` file in that directory with the following content:\n+\n+[source,yaml]\n+----\n+---\n+version: '3'\n+\n+services:  \n+  minion:\n+    image: opennms/minion:25.2.0\n+    container_name: minion<1>\n+    network_mode: host<2>\n+    environment:\n+      - TZ=Europe/Berlin<3>\n+      - MINION_ID=my-minion<4>\n+      - MINION_LOCATION=my-location<5>\n+      - OPENNMS_BROKER_URL=failover:tcp://horizon-instance:61616<6>\n+      - OPENNMS_BROKER_USER=minion-user<7>\n+      - OPENNMS_BROKER_PASS=minion-password\n+      - OPENNMS_HTTP_URL=http://horizon-instance:8980/opennms<8>\n+      - OPENNMS_HTTP_USER=minion-user<9>\n+      - OPENNMS_HTTP_PASS=minion-password\n+    command: [\"-f\"]\n+----\n+<1> Friendly container name\n+<2> If you process UDP data like SNMP traps, Syslogs or flows, `network_mode: host` ensures the UDP source addresses are not modified\n+<3> Time zone for the _Minion_\n+<4> A defined identifier for this _Minion_. If not set, a unique user identifier (_UUID_) will be generated\n+<5> The name of the location of the _Minion_ and the connection to the _ActiveMQ_ broker running in _{opennms-product-name}_\n+<6> _ActiveMQ_ broker endpoint from _{opennms-product-name}_\n+<7> Authentication for ActiveMQ broker\n+<8> _REST_ endpoint to connect to the _{opennms-product-name}_ instance\n+<9> Authentication for the _REST_ endpoint\n+\n+NOTE: In this example we haven't set credentials to connect the _Minion_ via _REST_ and the _ActiveMQ Message Broker_.\n+      The _Minion_ will fall back and uses the default admin/admin credentials for the communication.\n+      Permissions for _ActiveMQ_ and _REST_ are assigned with the role _ROLE_MINION_ on the _{opennms-product-name}_ instance.\n+\n+WARNING: In case you process UDP data and you don't use `network_mode: host` the UDP source address from your packets will be modified from Docker.\n+         The source address is your Docker internal gateway instead of the source address of your device.\n+         Source addresses are used to associate the Syslog or SNMP traps to the nodes in the OpenNMS database.\n+         You can use an isolated network and publish ports as usual if you don't receive UDP based monitoring data.\n+         If you don't use `network_mode: host` you have to publish the listener ports manually.\n+\n+===== Step 2: Start the service stack and test the functionality\n+\n+[source,shell]\n+----\n+cd opennms-minion\n+docker-compose up -d\n+----\n+\n+===== Step 3: Run _Minion_ health check\n+\n+.Log in to the _Minion Karaf Shell_ and run the health check\n+[source, shell]\n+----\n+ssh admin@localhost -p 8201\n+\n+admin@minion> health:check\n+Verifying the health of the container\n+\n+Connecting to OpenNMS ReST API   [ Success  ]\n+Verifying installed bundles      [ Success  ]\n+Connecting to JMS Broker         [ Success  ]\n+\n+=> Everything is awesome\n+----\n+\n+NOTE: The default admin password for the _Minion Karaf Shell_ is _admin_.\n+\n+===== Step 4: Verify status in the administrative Web UI\n+\n+* Log in as admin in the _{opennms-product-name}_ web interface\n+* _Configure OpenNMS -> Manage Minions_. The _Minion_ should be registered and the status should be _up_\n+* Verify if _Minion_ is provisioned automatically by going to _Info -> Nodes_ and select the _Minion_. The services _JMX-Minion_, _Minion-Heartbeat_ and _Minion-RPC_ should be _up_ and provisioned on the local loop-back interface", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxMDgxNw==", "bodyText": "Could we offer suggestions on what to look for if they are not provisioned? Or is that beyond the scope of this material?", "url": "https://github.com/OpenNMS/opennms/pull/2889#discussion_r397910817", "createdAt": "2020-03-25T14:44:42Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-install/src/asciidoc/text/monitor-location-minion/docker/minion-docker.adoc", "diffHunk": "@@ -0,0 +1,107 @@\n+\n+=== Run with Docker\n+\n+Modern infrastructure allows you to deploy and run workloads in containers.\n+With _{opennms-product-name}_ we provide and publish container images on link:https://hub.docker.com/u/opennms[DockerHub].\n+\n+==== Objectives\n+\n+* Run and configure a _Minion_ in, and connect it to, the _{opennms-product-name}_ instance using environment variables\n+* Introduce a reference with all available configuration and mount conventions for more advanced setups\n+\n+==== Before you begin\n+\n+You must have at least the following components installed:\n+\n+* Current stable _Docker_ release installed, e.g., installed from link:https://docs.docker.com/[Docker Documentation]\n+* Current stable _Docker Compose_ installed, e.g., installed from link:https://docs.docker.com/compose/install/[Docker Compose instructions]\n+* You should have a basic knowledge of _Docker_, _Docker Compose_ with networking, persisting files and mounting directories\n+* _{opennms-product-name}_ is configured to accept connections via _ActiveMQ_ and a Minion user with _ROLE_MINION_ \n+* The _Minion_ can connect to _{opennms-product-name}_ with port `61616/TCP` for _ActiveMQ_ and _REST_ on port `8980/TCP`\n+\n+==== Quickstart service stack\n+\n+// No section numbers for step-by-step guide\n+:!sectnums:\n+\n+===== Step 1: Create service stack with a Minion\n+\n+Create a project directory with `mkdir opennms-minion` and create a `docker-compose.yml` file in that directory with the following content:\n+\n+[source,yaml]\n+----\n+---\n+version: '3'\n+\n+services:  \n+  minion:\n+    image: opennms/minion:25.2.0\n+    container_name: minion<1>\n+    network_mode: host<2>\n+    environment:\n+      - TZ=Europe/Berlin<3>\n+      - MINION_ID=my-minion<4>\n+      - MINION_LOCATION=my-location<5>\n+      - OPENNMS_BROKER_URL=failover:tcp://horizon-instance:61616<6>\n+      - OPENNMS_BROKER_USER=minion-user<7>\n+      - OPENNMS_BROKER_PASS=minion-password\n+      - OPENNMS_HTTP_URL=http://horizon-instance:8980/opennms<8>\n+      - OPENNMS_HTTP_USER=minion-user<9>\n+      - OPENNMS_HTTP_PASS=minion-password\n+    command: [\"-f\"]\n+----\n+<1> Friendly container name\n+<2> If you process UDP data like SNMP traps, Syslogs or flows, `network_mode: host` ensures the UDP source addresses are not modified\n+<3> Time zone for the _Minion_\n+<4> A defined identifier for this _Minion_. If not set, a unique user identifier (_UUID_) will be generated\n+<5> The name of the location of the _Minion_ and the connection to the _ActiveMQ_ broker running in _{opennms-product-name}_\n+<6> _ActiveMQ_ broker endpoint from _{opennms-product-name}_\n+<7> Authentication for ActiveMQ broker\n+<8> _REST_ endpoint to connect to the _{opennms-product-name}_ instance\n+<9> Authentication for the _REST_ endpoint\n+\n+NOTE: In this example we haven't set credentials to connect the _Minion_ via _REST_ and the _ActiveMQ Message Broker_.\n+      The _Minion_ will fall back and uses the default admin/admin credentials for the communication.\n+      Permissions for _ActiveMQ_ and _REST_ are assigned with the role _ROLE_MINION_ on the _{opennms-product-name}_ instance.\n+\n+WARNING: In case you process UDP data and you don't use `network_mode: host` the UDP source address from your packets will be modified from Docker.\n+         The source address is your Docker internal gateway instead of the source address of your device.\n+         Source addresses are used to associate the Syslog or SNMP traps to the nodes in the OpenNMS database.\n+         You can use an isolated network and publish ports as usual if you don't receive UDP based monitoring data.\n+         If you don't use `network_mode: host` you have to publish the listener ports manually.\n+\n+===== Step 2: Start the service stack and test the functionality\n+\n+[source,shell]\n+----\n+cd opennms-minion\n+docker-compose up -d\n+----\n+\n+===== Step 3: Run _Minion_ health check\n+\n+.Log in to the _Minion Karaf Shell_ and run the health check\n+[source, shell]\n+----\n+ssh admin@localhost -p 8201\n+\n+admin@minion> health:check\n+Verifying the health of the container\n+\n+Connecting to OpenNMS ReST API   [ Success  ]\n+Verifying installed bundles      [ Success  ]\n+Connecting to JMS Broker         [ Success  ]\n+\n+=> Everything is awesome\n+----\n+\n+NOTE: The default admin password for the _Minion Karaf Shell_ is _admin_.\n+\n+===== Step 4: Verify status in the administrative Web UI\n+\n+* Log in as admin in the _{opennms-product-name}_ web interface\n+* _Configure OpenNMS -> Manage Minions_. The _Minion_ should be registered and the status should be _up_\n+* Verify if _Minion_ is provisioned automatically by going to _Info -> Nodes_ and select the _Minion_. The services _JMX-Minion_, _Minion-Heartbeat_ and _Minion-RPC_ should be _up_ and provisioned on the local loop-back interface", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxMDMzMQ=="}, "originalCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859"}, "originalPosition": 104}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8ea99769aa0494808e8354327f4fb25a9e04811", "author": {"user": {"login": "indigo423", "name": "Ronny Trommer"}}, "url": "https://github.com/OpenNMS/opennms/commit/a8ea99769aa0494808e8354327f4fb25a9e04811", "committedDate": "2020-03-26T08:41:19Z", "message": "NMS-12529: Split OpenNMS and Minion docker setup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9611b6de0410d23f331f0cb0e33850f1ed7472b", "author": {"user": {"login": "indigo423", "name": "Ronny Trommer"}}, "url": "https://github.com/OpenNMS/opennms/commit/e9611b6de0410d23f331f0cb0e33850f1ed7472b", "committedDate": "2020-03-26T08:41:19Z", "message": "NMS-12529: Review fixes and comments\n\nCo-Authored-By: Bonrob2 <59453630+Bonrob2@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16ea43b9e02781668acb86d1d719de184079c417", "author": {"user": {"login": "indigo423", "name": "Ronny Trommer"}}, "url": "https://github.com/OpenNMS/opennms/commit/16ea43b9e02781668acb86d1d719de184079c417", "committedDate": "2020-03-26T08:41:19Z", "message": "NMS-12529: Add network_mode host in the Minion Docker description"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "47eb90e4ac7dbf0cd36e690e32a47738c29d4859", "author": {"user": {"login": "indigo423", "name": "Ronny Trommer"}}, "url": "https://github.com/OpenNMS/opennms/commit/47eb90e4ac7dbf0cd36e690e32a47738c29d4859", "committedDate": "2020-03-19T08:33:40Z", "message": "NMS-12529: Add network_mode host in the Minion Docker description"}, "afterCommit": {"oid": "16ea43b9e02781668acb86d1d719de184079c417", "author": {"user": {"login": "indigo423", "name": "Ronny Trommer"}}, "url": "https://github.com/OpenNMS/opennms/commit/16ea43b9e02781668acb86d1d719de184079c417", "committedDate": "2020-03-26T08:41:19Z", "message": "NMS-12529: Add network_mode host in the Minion Docker description"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "caf0c93e46b49e566d9d35082b7f7dbe200cce13", "author": {"user": {"login": "indigo423", "name": "Ronny Trommer"}}, "url": "https://github.com/OpenNMS/opennms/commit/caf0c93e46b49e566d9d35082b7f7dbe200cce13", "committedDate": "2020-03-26T09:10:18Z", "message": "NMS-12529: Set version number in docker-compose with variable opennms-version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92148af8616171398600ad129ab8da44a6133d16", "author": {"user": {"login": "indigo423", "name": "Ronny Trommer"}}, "url": "https://github.com/OpenNMS/opennms/commit/92148af8616171398600ad129ab8da44a6133d16", "committedDate": "2020-03-26T09:16:54Z", "message": "NMS-12529: Apply reader review\n\nCo-Authored-By: Bonrob2 <59453630+Bonrob2@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c44e236209acd107a2e7fb9008373e51e27cc3aa", "author": {"user": {"login": "indigo423", "name": "Ronny Trommer"}}, "url": "https://github.com/OpenNMS/opennms/commit/c44e236209acd107a2e7fb9008373e51e27cc3aa", "committedDate": "2020-03-26T09:16:10Z", "message": "NMS-12529: Apply reader review\n\nCo-Authored-By: Bonrob2 <59453630+Bonrob2@users.noreply.github.com>"}, "afterCommit": {"oid": "92148af8616171398600ad129ab8da44a6133d16", "author": {"user": {"login": "indigo423", "name": "Ronny Trommer"}}, "url": "https://github.com/OpenNMS/opennms/commit/92148af8616171398600ad129ab8da44a6133d16", "committedDate": "2020-03-26T09:16:54Z", "message": "NMS-12529: Apply reader review\n\nCo-Authored-By: Bonrob2 <59453630+Bonrob2@users.noreply.github.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3753, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}