{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1NTgzNzUy", "number": 3207, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjozMDoyNVrOE1op7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjozMjozNFrOE1os0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0Njc2MDc5OnYy", "diffSide": "RIGHT", "path": "core/upgrade/src/test/java/org/opennms/upgrade/implementations/VmwareAssetsMigratorOfflineIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjozMDoyNVrOHuBHmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjozMDoyNVrOHuBHmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAxNDg3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void foo() throws Exception {\n          \n          \n            \n                public void bar() throws Exception {", "url": "https://github.com/OpenNMS/opennms/pull/3207#discussion_r518014872", "createdAt": "2020-11-05T12:30:25Z", "author": {"login": "fooker"}, "path": "core/upgrade/src/test/java/org/opennms/upgrade/implementations/VmwareAssetsMigratorOfflineIT.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.upgrade.implementations;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Optional;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.opennms.core.spring.BeanUtils;\n+import org.opennms.core.test.OpenNMSJUnit4ClassRunner;\n+import org.opennms.core.test.db.TemporaryDatabase;\n+import org.opennms.core.test.db.TemporaryDatabaseAware;\n+import org.opennms.core.test.db.annotations.JUnitTemporaryDatabase;\n+import org.opennms.netmgt.dao.DatabasePopulator;\n+import org.opennms.netmgt.model.OnmsNode;\n+import org.opennms.test.JUnitConfigurationEnvironment;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.support.TransactionCallback;\n+import org.springframework.transaction.support.TransactionOperations;\n+\n+@RunWith(OpenNMSJUnit4ClassRunner.class)\n+@ContextConfiguration(locations = {\n+        \"classpath:/META-INF/opennms/applicationContext-soa.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-dao.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-commonConfigs.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-minimal-conf.xml\",\n+        \"classpath*:/META-INF/opennms/component-dao.xml\",\n+        \"classpath*:/META-INF/opennms/component-service.xml\",\n+        \"classpath:/META-INF/opennms/mockEventIpcManager.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-databasePopulator.xml\"\n+})\n+@JUnitConfigurationEnvironment\n+@JUnitTemporaryDatabase(reuseDatabase = false)\n+public class VmwareAssetsMigratorOfflineIT implements TemporaryDatabaseAware<TemporaryDatabase> {\n+\n+    @Autowired\n+    DatabasePopulator databasePopulator;\n+\n+    @Autowired\n+    TransactionOperations transactionOperations;\n+\n+    TemporaryDatabase temporaryDatabase;\n+\n+    @Before\n+    public void before() {\n+        BeanUtils.assertAutowiring(this);\n+        this.databasePopulator.populateDatabase();\n+    }\n+\n+    @Override\n+    public void setTemporaryDatabase(TemporaryDatabase database) {\n+        this.temporaryDatabase = database;\n+    }\n+\n+    @Test\n+    public void foo() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e9b05b26d4b2ead6f43c33d688349e1f96b6bef"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0Njc2ODE4OnYy", "diffSide": "RIGHT", "path": "core/upgrade/src/test/java/org/opennms/upgrade/implementations/VmwareAssetsMigratorOfflineIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjozMjozNFrOHuBMCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjozMjozNFrOHuBMCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAxNjAxMA==", "bodyText": "Use SessionUtils instead.", "url": "https://github.com/OpenNMS/opennms/pull/3207#discussion_r518016010", "createdAt": "2020-11-05T12:32:34Z", "author": {"login": "fooker"}, "path": "core/upgrade/src/test/java/org/opennms/upgrade/implementations/VmwareAssetsMigratorOfflineIT.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.upgrade.implementations;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Optional;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.opennms.core.spring.BeanUtils;\n+import org.opennms.core.test.OpenNMSJUnit4ClassRunner;\n+import org.opennms.core.test.db.TemporaryDatabase;\n+import org.opennms.core.test.db.TemporaryDatabaseAware;\n+import org.opennms.core.test.db.annotations.JUnitTemporaryDatabase;\n+import org.opennms.netmgt.dao.DatabasePopulator;\n+import org.opennms.netmgt.model.OnmsNode;\n+import org.opennms.test.JUnitConfigurationEnvironment;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.support.TransactionCallback;\n+import org.springframework.transaction.support.TransactionOperations;\n+\n+@RunWith(OpenNMSJUnit4ClassRunner.class)\n+@ContextConfiguration(locations = {\n+        \"classpath:/META-INF/opennms/applicationContext-soa.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-dao.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-commonConfigs.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-minimal-conf.xml\",\n+        \"classpath*:/META-INF/opennms/component-dao.xml\",\n+        \"classpath*:/META-INF/opennms/component-service.xml\",\n+        \"classpath:/META-INF/opennms/mockEventIpcManager.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-databasePopulator.xml\"\n+})\n+@JUnitConfigurationEnvironment\n+@JUnitTemporaryDatabase(reuseDatabase = false)\n+public class VmwareAssetsMigratorOfflineIT implements TemporaryDatabaseAware<TemporaryDatabase> {\n+\n+    @Autowired\n+    DatabasePopulator databasePopulator;\n+\n+    @Autowired\n+    TransactionOperations transactionOperations;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "815f058cbdfe1aecb4029126fc9267c2f68149c3"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2929, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}