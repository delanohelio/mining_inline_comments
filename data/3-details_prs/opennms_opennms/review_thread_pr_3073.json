{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzMTY0ODg1", "number": 3073, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODo0Nzo0N1rOERXAWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTo1NDo0MVrOERy5Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjM4MTcxOnYy", "diffSide": "RIGHT", "path": "opennms-base-assembly/src/main/filtered/etc/create.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODo0Nzo0N1rOG2BkKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDo1NDowMlrOG2FhOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMwMTkzMQ==", "bodyText": "Formatting", "url": "https://github.com/OpenNMS/opennms/pull/3073#discussion_r459301931", "createdAt": "2020-07-23T08:47:47Z", "author": {"login": "fooker"}, "path": "opennms-base-assembly/src/main/filtered/etc/create.sql", "diffHunk": "@@ -895,19 +895,22 @@ create table outages (\n \tifRegainedService\ttimestamp with time zone,\n \tsuppressTime    \ttimestamp with time zone,\n \tsuppressedBy\t\tvarchar(256),\n-\tifServiceId\t\tINTEGER not null,\n+\tifServiceId\t\t    INTEGER not null,\n+\tperspective         text,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdbf2c5411dac8a4aa2d048901b11cd650c4261d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2NjcxNA==", "bodyText": "done", "url": "https://github.com/OpenNMS/opennms/pull/3073#discussion_r459366714", "createdAt": "2020-07-23T10:54:02Z", "author": {"login": "christianpape"}, "path": "opennms-base-assembly/src/main/filtered/etc/create.sql", "diffHunk": "@@ -895,19 +895,22 @@ create table outages (\n \tifRegainedService\ttimestamp with time zone,\n \tsuppressTime    \ttimestamp with time zone,\n \tsuppressedBy\t\tvarchar(256),\n-\tifServiceId\t\tINTEGER not null,\n+\tifServiceId\t\t    INTEGER not null,\n+\tperspective         text,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMwMTkzMQ=="}, "originalCommit": {"oid": "cdbf2c5411dac8a4aa2d048901b11cd650c4261d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjQ2MzE1OnYy", "diffSide": "RIGHT", "path": "opennms-webapp/src/main/java/org/opennms/web/outage/OutageModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOToxMDozN1rOG2CVWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDo1NTozN1rOG2Fj_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNDUyMA==", "bodyText": "Formatting", "url": "https://github.com/OpenNMS/opennms/pull/3073#discussion_r459314520", "createdAt": "2020-07-23T09:10:37Z", "author": {"login": "fooker"}, "path": "opennms-webapp/src/main/java/org/opennms/web/outage/OutageModel.java", "diffHunk": "@@ -88,7 +88,8 @@\n             \t\t\"       on node.nodeid = ipinterface.nodeid \\n\" + \n             \t\t\"    join service \\n\" + \n             \t\t\"      on ifservices.serviceid = service.serviceid \\n\" + \n-            \t\t\"   where node.nodeid = ? \\n\" + \n+            \t\t\"   where node.nodeid = ? \\n\" +\n+                    \"     and outages.perspective is null \\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdbf2c5411dac8a4aa2d048901b11cd650c4261d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2NzQyMg==", "bodyText": "done", "url": "https://github.com/OpenNMS/opennms/pull/3073#discussion_r459367422", "createdAt": "2020-07-23T10:55:37Z", "author": {"login": "christianpape"}, "path": "opennms-webapp/src/main/java/org/opennms/web/outage/OutageModel.java", "diffHunk": "@@ -88,7 +88,8 @@\n             \t\t\"       on node.nodeid = ipinterface.nodeid \\n\" + \n             \t\t\"    join service \\n\" + \n             \t\t\"      on ifservices.serviceid = service.serviceid \\n\" + \n-            \t\t\"   where node.nodeid = ? \\n\" + \n+            \t\t\"   where node.nodeid = ? \\n\" +\n+                    \"     and outages.perspective is null \\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNDUyMA=="}, "originalCommit": {"oid": "cdbf2c5411dac8a4aa2d048901b11cd650c4261d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjQ2NTkzOnYy", "diffSide": "RIGHT", "path": "opennms-webapp/src/test/java/org/opennms/web/svclayer/support/DefaultDistributedStatusServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOToxMToyM1rOG2CXBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDo1Njo0M1rOG2FmAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNDk0OQ==", "bodyText": "Please add an TODO cpape so we can find it later on", "url": "https://github.com/OpenNMS/opennms/pull/3073#discussion_r459314949", "createdAt": "2020-07-23T09:11:23Z", "author": {"login": "fooker"}, "path": "opennms-webapp/src/test/java/org/opennms/web/svclayer/support/DefaultDistributedStatusServiceTest.java", "diffHunk": "@@ -79,6 +80,10 @@\n import junit.framework.AssertionFailedError;\n import junit.framework.TestCase;\n \n+/**\n+ * Ignore for now, since the remote poller with minion stuff is still in development\n+ */\n+@Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdbf2c5411dac8a4aa2d048901b11cd650c4261d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2NzkzNg==", "bodyText": "done", "url": "https://github.com/OpenNMS/opennms/pull/3073#discussion_r459367936", "createdAt": "2020-07-23T10:56:43Z", "author": {"login": "christianpape"}, "path": "opennms-webapp/src/test/java/org/opennms/web/svclayer/support/DefaultDistributedStatusServiceTest.java", "diffHunk": "@@ -79,6 +80,10 @@\n import junit.framework.AssertionFailedError;\n import junit.framework.TestCase;\n \n+/**\n+ * Ignore for now, since the remote poller with minion stuff is still in development\n+ */\n+@Ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNDk0OQ=="}, "originalCommit": {"oid": "cdbf2c5411dac8a4aa2d048901b11cd650c4261d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjQ2ODExOnYy", "diffSide": "RIGHT", "path": "opennms-webapp-rest/src/test/java/org/opennms/web/rest/v1/RemotePollerAvailabilityRestServiceIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOToxMTo1N1rOG2CYQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDo1Njo1MlrOG2FmVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNTI2NA==", "bodyText": "Please add an TODO cpape so we can find this later on.", "url": "https://github.com/OpenNMS/opennms/pull/3073#discussion_r459315264", "createdAt": "2020-07-23T09:11:57Z", "author": {"login": "fooker"}, "path": "opennms-webapp-rest/src/test/java/org/opennms/web/rest/v1/RemotePollerAvailabilityRestServiceIT.java", "diffHunk": "@@ -87,6 +88,10 @@\n @JUnitConfigurationEnvironment\n @JUnitTemporaryDatabase\n @Transactional\n+/**\n+ * Ignore for now, since the remote poller with minion stuff is still in development\n+ */\n+@Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdbf2c5411dac8a4aa2d048901b11cd650c4261d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2ODAyMw==", "bodyText": "done", "url": "https://github.com/OpenNMS/opennms/pull/3073#discussion_r459368023", "createdAt": "2020-07-23T10:56:52Z", "author": {"login": "christianpape"}, "path": "opennms-webapp-rest/src/test/java/org/opennms/web/rest/v1/RemotePollerAvailabilityRestServiceIT.java", "diffHunk": "@@ -87,6 +88,10 @@\n @JUnitConfigurationEnvironment\n @JUnitTemporaryDatabase\n @Transactional\n+/**\n+ * Ignore for now, since the remote poller with minion stuff is still in development\n+ */\n+@Ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNTI2NA=="}, "originalCommit": {"oid": "cdbf2c5411dac8a4aa2d048901b11cd650c4261d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjQ3MTkxOnYy", "diffSide": "RIGHT", "path": "opennms-services/src/main/java/org/opennms/netmgt/rtc/DataUpdater.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOToxMzowM1rOG2CaiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDo1Nzo0NlrOG2Fn2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNTg0OA==", "bodyText": "Maybe that is more of kind trace", "url": "https://github.com/OpenNMS/opennms/pull/3073#discussion_r459315848", "createdAt": "2020-07-23T09:13:03Z", "author": {"login": "fooker"}, "path": "opennms-services/src/main/java/org/opennms/netmgt/rtc/DataUpdater.java", "diffHunk": "@@ -218,11 +218,17 @@ private void handleNodeCategoryMembershipChanged(int nodeid) {\n     private void processEvent() {\n \n         if (m_event == null) {\n-\n             LOG.debug(\"Event is null, nothing to process\");\n             return;\n         }\n \n+        final boolean isPerspectiveNull = m_event.getParm(\"perspective\") == null ? true : m_event.getParm(\"perspective\").getValue() == null;\n+\n+        if (!isPerspectiveNull) {\n+            LOG.debug(\"Event's perspective is not null, nothing to process\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdbf2c5411dac8a4aa2d048901b11cd650c4261d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2ODQxMQ==", "bodyText": "done", "url": "https://github.com/OpenNMS/opennms/pull/3073#discussion_r459368411", "createdAt": "2020-07-23T10:57:46Z", "author": {"login": "christianpape"}, "path": "opennms-services/src/main/java/org/opennms/netmgt/rtc/DataUpdater.java", "diffHunk": "@@ -218,11 +218,17 @@ private void handleNodeCategoryMembershipChanged(int nodeid) {\n     private void processEvent() {\n \n         if (m_event == null) {\n-\n             LOG.debug(\"Event is null, nothing to process\");\n             return;\n         }\n \n+        final boolean isPerspectiveNull = m_event.getParm(\"perspective\") == null ? true : m_event.getParm(\"perspective\").getValue() == null;\n+\n+        if (!isPerspectiveNull) {\n+            LOG.debug(\"Event's perspective is not null, nothing to process\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNTg0OA=="}, "originalCommit": {"oid": "cdbf2c5411dac8a4aa2d048901b11cd650c4261d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjQ3Mzg1OnYy", "diffSide": "RIGHT", "path": "opennms-dao/src/test/java/org/opennms/netmgt/dao/support/DefaultResourceDaoTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOToxMzo0OVrOG2Cb6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDo1ODozM1rOG2FpRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNjIwMw==", "bodyText": "Please add an TODO cpape so we can find this later on.", "url": "https://github.com/OpenNMS/opennms/pull/3073#discussion_r459316203", "createdAt": "2020-07-23T09:13:49Z", "author": {"login": "fooker"}, "path": "opennms-dao/src/test/java/org/opennms/netmgt/dao/support/DefaultResourceDaoTest.java", "diffHunk": "@@ -268,6 +269,10 @@ public void testGetTopLevelResourceDomainDoesNotExistInCollectdConfig() {\n         assertNull(\"Resource should be null\", resource);\n     }\n \n+    /**\n+     * Rewrite of RmotePoller is still in progress, so ignore this one for now.\n+     */\n+    @Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdbf2c5411dac8a4aa2d048901b11cd650c4261d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2ODc3Mw==", "bodyText": "done", "url": "https://github.com/OpenNMS/opennms/pull/3073#discussion_r459368773", "createdAt": "2020-07-23T10:58:33Z", "author": {"login": "christianpape"}, "path": "opennms-dao/src/test/java/org/opennms/netmgt/dao/support/DefaultResourceDaoTest.java", "diffHunk": "@@ -268,6 +269,10 @@ public void testGetTopLevelResourceDomainDoesNotExistInCollectdConfig() {\n         assertNull(\"Resource should be null\", resource);\n     }\n \n+    /**\n+     * Rewrite of RmotePoller is still in progress, so ignore this one for now.\n+     */\n+    @Ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNjIwMw=="}, "originalCommit": {"oid": "cdbf2c5411dac8a4aa2d048901b11cd650c4261d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjQ3NDEzOnYy", "diffSide": "RIGHT", "path": "opennms-dao/src/test/java/org/opennms/netmgt/dao/support/DefaultResourceDaoTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOToxMzo1NVrOG2CcHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDo1ODo0MFrOG2FpgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNjI1Mg==", "bodyText": "Please add an TODO cpape so we can find this later on.", "url": "https://github.com/OpenNMS/opennms/pull/3073#discussion_r459316252", "createdAt": "2020-07-23T09:13:55Z", "author": {"login": "fooker"}, "path": "opennms-dao/src/test/java/org/opennms/netmgt/dao/support/DefaultResourceDaoTest.java", "diffHunk": "@@ -342,6 +347,10 @@ public void testFindNodeResourcesWithResponseTime() throws Exception {\n         assertEquals(\"resource list size\", 1, resources.size());\n     }\n \n+    /**\n+     * Rewrite of RmotePoller is still in progress, so ignore this one for now.\n+     */\n+    @Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdbf2c5411dac8a4aa2d048901b11cd650c4261d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2ODgzMw==", "bodyText": "done", "url": "https://github.com/OpenNMS/opennms/pull/3073#discussion_r459368833", "createdAt": "2020-07-23T10:58:40Z", "author": {"login": "christianpape"}, "path": "opennms-dao/src/test/java/org/opennms/netmgt/dao/support/DefaultResourceDaoTest.java", "diffHunk": "@@ -342,6 +347,10 @@ public void testFindNodeResourcesWithResponseTime() throws Exception {\n         assertEquals(\"resource list size\", 1, resources.size());\n     }\n \n+    /**\n+     * Rewrite of RmotePoller is still in progress, so ignore this one for now.\n+     */\n+    @Ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNjI1Mg=="}, "originalCommit": {"oid": "cdbf2c5411dac8a4aa2d048901b11cd650c4261d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjQ4MTY0OnYy", "diffSide": "RIGHT", "path": "features/remotepollerng/daemon/src/main/java/org/opennms/netmgt/remotepollerng/RemotePollerd.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOToxNjowNlrOG2CgpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMjowMDo1NlrOG2sxvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNzQxMw==", "bodyText": "It seems a bit strange to react to an event which is created by the same class. Any reason why we create the outage by reacting to the event instead of creating it directly when we create the event? This would safe a lot of event parameter handling and checking.", "url": "https://github.com/OpenNMS/opennms/pull/3073#discussion_r459317413", "createdAt": "2020-07-23T09:16:06Z", "author": {"login": "fooker"}, "path": "features/remotepollerng/daemon/src/main/java/org/opennms/netmgt/remotepollerng/RemotePollerd.java", "diffHunk": "@@ -508,4 +522,63 @@ public void reloadDaemonConfigForLocation(final IEvent e) {\n             }\n         }\n     }\n+\n+    @EventHandler(uei = EventConstants.REMOTE_NODE_LOST_SERVICE_UEI)\n+    public void handleRemoteNodeLostService(final IEvent e) {\n+        if (e.hasNodeid() && e.getInterfaceAddress() != null && e.getService() != null && e.getParm(\"perspective\") != null) {\n+            final OnmsEvent onmsEvent = eventDao.get(e.getDbid());\n+            final OnmsMonitoredService service = monSvcDao.get(onmsEvent.getNodeId(), onmsEvent.getIpAddr(), onmsEvent.getServiceType().getId());\n+            final OnmsMonitoringLocation perspective = monitoringLocationDao.get(e.getParm(\"perspective\").getValue().getContent());\n+            final OnmsOutage onmsOutage = new OnmsOutage(onmsEvent.getEventCreateTime(), onmsEvent, service);\n+            onmsOutage.setPerspective(perspective);\n+            outageDao.save(onmsOutage);\n+\n+            final Event outageEvent = new EventBuilder(EventConstants.OUTAGE_CREATED_EVENT_UEI, \"RemotePollerd\")\n+                    .setNodeid(onmsEvent.getNodeId())\n+                    .setService(service.getServiceName())\n+                    .setTime(onmsEvent.getEventCreateTime())\n+                    .setParam(\"perspective\", perspective.getLocationName())\n+                    .getEvent();\n+            eventForwarder.sendNow(outageEvent);\n+        } else {\n+            LOG.warn(\"Received incomplete {} event: {}\", EventConstants.REMOTE_NODE_LOST_SERVICE_UEI, e);\n+        }\n+    }\n+\n+    @EventHandler(uei = EventConstants.REMOTE_NODE_REGAINED_SERVICE_UEI)\n+    public void handleRemoteNodeGainedService(final IEvent e) {\n+        if (e.hasNodeid() && e.getInterfaceAddress() != null && e.getService() != null && e.getParm(\"perspective\") != null) {\n+            final OnmsEvent onmsEvent = eventDao.get(e.getDbid());\n+            final OnmsMonitoredService service = monSvcDao.get(onmsEvent.getNodeId(), onmsEvent.getIpAddr(), onmsEvent.getServiceType().getId());\n+            final OnmsMonitoringLocation perspective = monitoringLocationDao.get(e.getParm(\"perspective\").getValue().getContent());\n+\n+            final Criteria criteria = new CriteriaBuilder(OnmsOutage.class)\n+                    .eq(\"perspective\", perspective)\n+                    .isNull(\"serviceRegainedEvent\")\n+                    .isNull(\"ifRegainedService\")\n+                    .eq(\"monitoredService\", service).toCriteria();\n+\n+            final List<OnmsOutage> onmsOutages = outageDao.findMatching(criteria);\n+\n+            if (onmsOutages.size() == 1) {\n+                final OnmsOutage onmsOutage = onmsOutages.get(0);\n+                onmsOutage.setIfRegainedService(onmsEvent.getEventCreateTime());\n+                onmsOutage.setServiceRegainedEvent(onmsEvent);\n+                outageDao.update(onmsOutage);\n+\n+                final Event outageEvent = new EventBuilder(EventConstants.OUTAGE_RESOLVED_EVENT_UEI, \"RemotePollerd\")\n+                        .setNodeid(onmsEvent.getNodeId())\n+                        .setService(service.getServiceName())\n+                        .setTime(onmsEvent.getEventCreateTime())\n+                        .setParam(\"perspective\", perspective.getLocationName())\n+                        .getEvent();\n+                eventForwarder.sendNow(outageEvent);\n+            } else {\n+                LOG.warn(\"Found more than one outages for {} event: {}\", EventConstants.REMOTE_NODE_REGAINED_SERVICE_UEI, e);\n+                return;\n+            }\n+        } else {\n+            LOG.warn(\"Received incomplete {} event: {}\", EventConstants.REMOTE_NODE_REGAINED_SERVICE_UEI, e);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdbf2c5411dac8a4aa2d048901b11cd650c4261d"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM5Mzc5Nw==", "bodyText": "The problem is that the service lost event is needed to generate an outage. But if I create the event and send it to the eventbus it is not necessarily persisted immediately. Only when I consume the event I can be sure that it is present in the database. If you look at the class QueryManagerDaoImpl you will see the same behavior, but in my opinion it is realizied in a much more complicated way. The outage is persisted there without the event and after the event is received the outage is updated with the event\u2019s id. In my opinion this is too heavy and unnecessary, since I cannot imagine a case in which I need an persisted outage before the original service lost event was properly processed by OpenNMS.", "url": "https://github.com/OpenNMS/opennms/pull/3073#discussion_r459393797", "createdAt": "2020-07-23T11:54:21Z", "author": {"login": "christianpape"}, "path": "features/remotepollerng/daemon/src/main/java/org/opennms/netmgt/remotepollerng/RemotePollerd.java", "diffHunk": "@@ -508,4 +522,63 @@ public void reloadDaemonConfigForLocation(final IEvent e) {\n             }\n         }\n     }\n+\n+    @EventHandler(uei = EventConstants.REMOTE_NODE_LOST_SERVICE_UEI)\n+    public void handleRemoteNodeLostService(final IEvent e) {\n+        if (e.hasNodeid() && e.getInterfaceAddress() != null && e.getService() != null && e.getParm(\"perspective\") != null) {\n+            final OnmsEvent onmsEvent = eventDao.get(e.getDbid());\n+            final OnmsMonitoredService service = monSvcDao.get(onmsEvent.getNodeId(), onmsEvent.getIpAddr(), onmsEvent.getServiceType().getId());\n+            final OnmsMonitoringLocation perspective = monitoringLocationDao.get(e.getParm(\"perspective\").getValue().getContent());\n+            final OnmsOutage onmsOutage = new OnmsOutage(onmsEvent.getEventCreateTime(), onmsEvent, service);\n+            onmsOutage.setPerspective(perspective);\n+            outageDao.save(onmsOutage);\n+\n+            final Event outageEvent = new EventBuilder(EventConstants.OUTAGE_CREATED_EVENT_UEI, \"RemotePollerd\")\n+                    .setNodeid(onmsEvent.getNodeId())\n+                    .setService(service.getServiceName())\n+                    .setTime(onmsEvent.getEventCreateTime())\n+                    .setParam(\"perspective\", perspective.getLocationName())\n+                    .getEvent();\n+            eventForwarder.sendNow(outageEvent);\n+        } else {\n+            LOG.warn(\"Received incomplete {} event: {}\", EventConstants.REMOTE_NODE_LOST_SERVICE_UEI, e);\n+        }\n+    }\n+\n+    @EventHandler(uei = EventConstants.REMOTE_NODE_REGAINED_SERVICE_UEI)\n+    public void handleRemoteNodeGainedService(final IEvent e) {\n+        if (e.hasNodeid() && e.getInterfaceAddress() != null && e.getService() != null && e.getParm(\"perspective\") != null) {\n+            final OnmsEvent onmsEvent = eventDao.get(e.getDbid());\n+            final OnmsMonitoredService service = monSvcDao.get(onmsEvent.getNodeId(), onmsEvent.getIpAddr(), onmsEvent.getServiceType().getId());\n+            final OnmsMonitoringLocation perspective = monitoringLocationDao.get(e.getParm(\"perspective\").getValue().getContent());\n+\n+            final Criteria criteria = new CriteriaBuilder(OnmsOutage.class)\n+                    .eq(\"perspective\", perspective)\n+                    .isNull(\"serviceRegainedEvent\")\n+                    .isNull(\"ifRegainedService\")\n+                    .eq(\"monitoredService\", service).toCriteria();\n+\n+            final List<OnmsOutage> onmsOutages = outageDao.findMatching(criteria);\n+\n+            if (onmsOutages.size() == 1) {\n+                final OnmsOutage onmsOutage = onmsOutages.get(0);\n+                onmsOutage.setIfRegainedService(onmsEvent.getEventCreateTime());\n+                onmsOutage.setServiceRegainedEvent(onmsEvent);\n+                outageDao.update(onmsOutage);\n+\n+                final Event outageEvent = new EventBuilder(EventConstants.OUTAGE_RESOLVED_EVENT_UEI, \"RemotePollerd\")\n+                        .setNodeid(onmsEvent.getNodeId())\n+                        .setService(service.getServiceName())\n+                        .setTime(onmsEvent.getEventCreateTime())\n+                        .setParam(\"perspective\", perspective.getLocationName())\n+                        .getEvent();\n+                eventForwarder.sendNow(outageEvent);\n+            } else {\n+                LOG.warn(\"Found more than one outages for {} event: {}\", EventConstants.REMOTE_NODE_REGAINED_SERVICE_UEI, e);\n+                return;\n+            }\n+        } else {\n+            LOG.warn(\"Received incomplete {} event: {}\", EventConstants.REMOTE_NODE_REGAINED_SERVICE_UEI, e);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNzQxMw=="}, "originalCommit": {"oid": "cdbf2c5411dac8a4aa2d048901b11cd650c4261d"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAwOTkxNw==", "bodyText": "Would be handy if we could do something like:\nCompletableFuture<Event> future =  eventForwarder.sendNow(outageEvent);\nEvent eventWithDbId = future.get();", "url": "https://github.com/OpenNMS/opennms/pull/3073#discussion_r460009917", "createdAt": "2020-07-24T12:00:56Z", "author": {"login": "j-white"}, "path": "features/remotepollerng/daemon/src/main/java/org/opennms/netmgt/remotepollerng/RemotePollerd.java", "diffHunk": "@@ -508,4 +522,63 @@ public void reloadDaemonConfigForLocation(final IEvent e) {\n             }\n         }\n     }\n+\n+    @EventHandler(uei = EventConstants.REMOTE_NODE_LOST_SERVICE_UEI)\n+    public void handleRemoteNodeLostService(final IEvent e) {\n+        if (e.hasNodeid() && e.getInterfaceAddress() != null && e.getService() != null && e.getParm(\"perspective\") != null) {\n+            final OnmsEvent onmsEvent = eventDao.get(e.getDbid());\n+            final OnmsMonitoredService service = monSvcDao.get(onmsEvent.getNodeId(), onmsEvent.getIpAddr(), onmsEvent.getServiceType().getId());\n+            final OnmsMonitoringLocation perspective = monitoringLocationDao.get(e.getParm(\"perspective\").getValue().getContent());\n+            final OnmsOutage onmsOutage = new OnmsOutage(onmsEvent.getEventCreateTime(), onmsEvent, service);\n+            onmsOutage.setPerspective(perspective);\n+            outageDao.save(onmsOutage);\n+\n+            final Event outageEvent = new EventBuilder(EventConstants.OUTAGE_CREATED_EVENT_UEI, \"RemotePollerd\")\n+                    .setNodeid(onmsEvent.getNodeId())\n+                    .setService(service.getServiceName())\n+                    .setTime(onmsEvent.getEventCreateTime())\n+                    .setParam(\"perspective\", perspective.getLocationName())\n+                    .getEvent();\n+            eventForwarder.sendNow(outageEvent);\n+        } else {\n+            LOG.warn(\"Received incomplete {} event: {}\", EventConstants.REMOTE_NODE_LOST_SERVICE_UEI, e);\n+        }\n+    }\n+\n+    @EventHandler(uei = EventConstants.REMOTE_NODE_REGAINED_SERVICE_UEI)\n+    public void handleRemoteNodeGainedService(final IEvent e) {\n+        if (e.hasNodeid() && e.getInterfaceAddress() != null && e.getService() != null && e.getParm(\"perspective\") != null) {\n+            final OnmsEvent onmsEvent = eventDao.get(e.getDbid());\n+            final OnmsMonitoredService service = monSvcDao.get(onmsEvent.getNodeId(), onmsEvent.getIpAddr(), onmsEvent.getServiceType().getId());\n+            final OnmsMonitoringLocation perspective = monitoringLocationDao.get(e.getParm(\"perspective\").getValue().getContent());\n+\n+            final Criteria criteria = new CriteriaBuilder(OnmsOutage.class)\n+                    .eq(\"perspective\", perspective)\n+                    .isNull(\"serviceRegainedEvent\")\n+                    .isNull(\"ifRegainedService\")\n+                    .eq(\"monitoredService\", service).toCriteria();\n+\n+            final List<OnmsOutage> onmsOutages = outageDao.findMatching(criteria);\n+\n+            if (onmsOutages.size() == 1) {\n+                final OnmsOutage onmsOutage = onmsOutages.get(0);\n+                onmsOutage.setIfRegainedService(onmsEvent.getEventCreateTime());\n+                onmsOutage.setServiceRegainedEvent(onmsEvent);\n+                outageDao.update(onmsOutage);\n+\n+                final Event outageEvent = new EventBuilder(EventConstants.OUTAGE_RESOLVED_EVENT_UEI, \"RemotePollerd\")\n+                        .setNodeid(onmsEvent.getNodeId())\n+                        .setService(service.getServiceName())\n+                        .setTime(onmsEvent.getEventCreateTime())\n+                        .setParam(\"perspective\", perspective.getLocationName())\n+                        .getEvent();\n+                eventForwarder.sendNow(outageEvent);\n+            } else {\n+                LOG.warn(\"Found more than one outages for {} event: {}\", EventConstants.REMOTE_NODE_REGAINED_SERVICE_UEI, e);\n+                return;\n+            }\n+        } else {\n+            LOG.warn(\"Received incomplete {} event: {}\", EventConstants.REMOTE_NODE_REGAINED_SERVICE_UEI, e);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNzQxMw=="}, "originalCommit": {"oid": "cdbf2c5411dac8a4aa2d048901b11cd650c4261d"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDk1MTEwOnYy", "diffSide": "RIGHT", "path": "opennms-base-assembly/src/main/filtered/etc/create.sql", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTo1NDo0MVrOG2snzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTo1NDo0MVrOG2snzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAwNzM3NA==", "bodyText": "The formatting is still screwed up", "url": "https://github.com/OpenNMS/opennms/pull/3073#discussion_r460007374", "createdAt": "2020-07-24T11:54:41Z", "author": {"login": "fooker"}, "path": "opennms-base-assembly/src/main/filtered/etc/create.sql", "diffHunk": "@@ -895,7 +895,7 @@ create table outages (\n \tifRegainedService\ttimestamp with time zone,\n \tsuppressTime    \ttimestamp with time zone,\n \tsuppressedBy\t\tvarchar(256),\n-\tifServiceId\t\t    INTEGER not null,\n+\tifServiceId         integer not null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5715b89300502b11e395b4bb0bef642fc60e2598"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3040, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}