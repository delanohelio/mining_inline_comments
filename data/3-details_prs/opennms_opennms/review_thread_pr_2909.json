{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzOTAzNzI3", "number": 2909, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzo1ODo0NlrODlhm8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODowMDo1NVrODlhpyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjc0NTQ3OnYy", "diffSide": "RIGHT", "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpPeerStatusAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzo1ODo0NlrOFyd_eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjowNzowMlrOFy2lHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2NDUwNg==", "bodyText": "Maybe change this to INFO now that we handle it properly?", "url": "https://github.com/OpenNMS/opennms/pull/2909#discussion_r388464506", "createdAt": "2020-03-05T17:58:46Z", "author": {"login": "j-white"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpPeerStatusAdapter.java", "diffHunk": "@@ -91,10 +103,28 @@ public void handleMessage(final TelemetryMessageLogEntry messageLogEntry,\n \n         // Find the node for the router who has exported the peer status notification\n         final InetAddress exporterAddress = InetAddressUtils.getInetAddress(messageLog.getSourceAddress());\n-        final Optional<Integer> exporterNodeId = this.interfaceToNodeCache.getFirstNodeId(messageLog.getLocation(), exporterAddress);\n+        Optional<Integer> exporterNodeId = this.interfaceToNodeCache.getFirstNodeId(messageLog.getLocation(), exporterAddress);\n+\n         if (!exporterNodeId.isPresent()) {\n-            LOG.warn(\"Unable to find node for exporter: {}\", exporterAddress);\n-            return;\n+            LOG.warn(\"Unable to find node for exporter address: {}\", exporterAddress);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe889e3ea30c37d61d04803fdf387f25bbcd3a2a"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg2NzM1OA==", "bodyText": "done.", "url": "https://github.com/OpenNMS/opennms/pull/2909#discussion_r388867358", "createdAt": "2020-03-06T12:07:02Z", "author": {"login": "christianpape"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpPeerStatusAdapter.java", "diffHunk": "@@ -91,10 +103,28 @@ public void handleMessage(final TelemetryMessageLogEntry messageLogEntry,\n \n         // Find the node for the router who has exported the peer status notification\n         final InetAddress exporterAddress = InetAddressUtils.getInetAddress(messageLog.getSourceAddress());\n-        final Optional<Integer> exporterNodeId = this.interfaceToNodeCache.getFirstNodeId(messageLog.getLocation(), exporterAddress);\n+        Optional<Integer> exporterNodeId = this.interfaceToNodeCache.getFirstNodeId(messageLog.getLocation(), exporterAddress);\n+\n         if (!exporterNodeId.isPresent()) {\n-            LOG.warn(\"Unable to find node for exporter: {}\", exporterAddress);\n-            return;\n+            LOG.warn(\"Unable to find node for exporter address: {}\", exporterAddress);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2NDUwNg=="}, "originalCommit": {"oid": "fe889e3ea30c37d61d04803fdf387f25bbcd3a2a"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjc1MjcyOnYy", "diffSide": "RIGHT", "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpTelemetryAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODowMDo1NVrOFyeEAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjowNzowNlrOFy2lOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2NTY2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    if (nodes.size() > 0) {\n          \n          \n            \n                                    if (!nodes.isEmpty()) {\n          \n      \n    \n    \n  \n\nThis one is for @mattixtech :)", "url": "https://github.com/OpenNMS/opennms/pull/2909#discussion_r388465665", "createdAt": "2020-03-05T18:00:55Z", "author": {"login": "j-white"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpTelemetryAdapter.java", "diffHunk": "@@ -91,12 +118,51 @@ public BmpTelemetryAdapter(final AdapterDefinition adapterConfig,\n         final Transport.StatisticsReportPacket stats = message.getStatisticsReport();\n \n         // Find the node for the router who has exported the stats and build a collection agent for it\n-        final InetAddress exporterAddress = InetAddressUtils.getInetAddress(messageLog.getSourceAddress());\n-        final Optional<Integer> exporterNodeId = this.interfaceToNodeCache.getFirstNodeId(messageLog.getLocation(), exporterAddress);\n+        InetAddress exporterAddress = InetAddressUtils.getInetAddress(messageLog.getSourceAddress());\n+        Optional<Integer> exporterNodeId = this.interfaceToNodeCache.getFirstNodeId(messageLog.getLocation(), exporterAddress);\n+\n         if (!exporterNodeId.isPresent()) {\n-            LOG.warn(\"Unable to find node and interface for agent address: {}\", exporterAddress);\n-            return Stream.empty();\n+            LOG.warn(\"Unable to find node for exporter address: {}\", exporterAddress);\n+\n+            if (message.hasBgpId()) {\n+                final InetAddress bgpId = address(message.getBgpId());\n+\n+                final ExporterInfo exporterInfo = transactionTemplate.execute(new TransactionCallback<ExporterInfo>() {\n+                    @Override\n+                    public ExporterInfo doInTransaction(final TransactionStatus transactionStatus) {\n+                        final List<OnmsNode> nodes = nodeDao.findNodeWithMetaData(contextKey.getContext(), contextKey.getKey(), InetAddressUtils.toIpAddrString(bgpId));\n+\n+                        if (nodes.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe889e3ea30c37d61d04803fdf387f25bbcd3a2a"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg2NzM4Nw==", "bodyText": "done.", "url": "https://github.com/OpenNMS/opennms/pull/2909#discussion_r388867387", "createdAt": "2020-03-06T12:07:06Z", "author": {"login": "christianpape"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpTelemetryAdapter.java", "diffHunk": "@@ -91,12 +118,51 @@ public BmpTelemetryAdapter(final AdapterDefinition adapterConfig,\n         final Transport.StatisticsReportPacket stats = message.getStatisticsReport();\n \n         // Find the node for the router who has exported the stats and build a collection agent for it\n-        final InetAddress exporterAddress = InetAddressUtils.getInetAddress(messageLog.getSourceAddress());\n-        final Optional<Integer> exporterNodeId = this.interfaceToNodeCache.getFirstNodeId(messageLog.getLocation(), exporterAddress);\n+        InetAddress exporterAddress = InetAddressUtils.getInetAddress(messageLog.getSourceAddress());\n+        Optional<Integer> exporterNodeId = this.interfaceToNodeCache.getFirstNodeId(messageLog.getLocation(), exporterAddress);\n+\n         if (!exporterNodeId.isPresent()) {\n-            LOG.warn(\"Unable to find node and interface for agent address: {}\", exporterAddress);\n-            return Stream.empty();\n+            LOG.warn(\"Unable to find node for exporter address: {}\", exporterAddress);\n+\n+            if (message.hasBgpId()) {\n+                final InetAddress bgpId = address(message.getBgpId());\n+\n+                final ExporterInfo exporterInfo = transactionTemplate.execute(new TransactionCallback<ExporterInfo>() {\n+                    @Override\n+                    public ExporterInfo doInTransaction(final TransactionStatus transactionStatus) {\n+                        final List<OnmsNode> nodes = nodeDao.findNodeWithMetaData(contextKey.getContext(), contextKey.getKey(), InetAddressUtils.toIpAddrString(bgpId));\n+\n+                        if (nodes.size() > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2NTY2NQ=="}, "originalCommit": {"oid": "fe889e3ea30c37d61d04803fdf387f25bbcd3a2a"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 789, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}