{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0MDI3NTMw", "number": 3150, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjo1MTowNFrOEiNOjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjo1MDozMVrOEkhReg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzAzNzU5OnYy", "diffSide": "RIGHT", "path": "core/lib/src/main/java/org/opennms/core/utils/StringUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjo1MTowNFrOHP9Dug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToxMToxOVrOHSUslQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5MTA2Ng==", "bodyText": "null and \"\" are already covered cases by parseInt() and parseDouble(). Is there a specific reason to add this additional check?", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r486491066", "createdAt": "2020-09-10T16:51:04Z", "author": {"login": "mattixtech"}, "path": "core/lib/src/main/java/org/opennms/core/utils/StringUtils.java", "diffHunk": "@@ -455,11 +457,25 @@ public static String getHumanReadableByteCount(long bytes, boolean si) {\n     }\n \n     public static Integer parseInt(String value, Integer defaultValue) {\n+        if(Strings.isNullOrEmpty(value)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e5709fa5a27e726cce1420ab5569395af926b6d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcyODQyOA==", "bodyText": "parseDouble doesn't have a null check besides it also saves going through that exception.", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r488728428", "createdAt": "2020-09-15T14:47:34Z", "author": {"login": "cgorantla"}, "path": "core/lib/src/main/java/org/opennms/core/utils/StringUtils.java", "diffHunk": "@@ -455,11 +457,25 @@ public static String getHumanReadableByteCount(long bytes, boolean si) {\n     }\n \n     public static Integer parseInt(String value, Integer defaultValue) {\n+        if(Strings.isNullOrEmpty(value)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5MTA2Ng=="}, "originalCommit": {"oid": "6e5709fa5a27e726cce1420ab5569395af926b6d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3NTUwOQ==", "bodyText": "Oh yeah, you are right, parseDouble only handles the empty case and not the null. Weird inconsistency in the stdlib!", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r488975509", "createdAt": "2020-09-15T21:11:19Z", "author": {"login": "mattixtech"}, "path": "core/lib/src/main/java/org/opennms/core/utils/StringUtils.java", "diffHunk": "@@ -455,11 +457,25 @@ public static String getHumanReadableByteCount(long bytes, boolean si) {\n     }\n \n     public static Integer parseInt(String value, Integer defaultValue) {\n+        if(Strings.isNullOrEmpty(value)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5MTA2Ng=="}, "originalCommit": {"oid": "6e5709fa5a27e726cce1420ab5569395af926b6d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Njk5NzEyOnYy", "diffSide": "RIGHT", "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/AbstractThresholdEvaluatorState.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNToxMzoxNFrOHQi_gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QwMjo0MzoxNFrOHQ49eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExMjU3Nw==", "bodyText": "Do we need this cached field? It looks like the presence or absence of a value in thresholdValues would be sufficient.", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r487112577", "createdAt": "2020-09-11T15:13:14Z", "author": {"login": "mattixtech"}, "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/AbstractThresholdEvaluatorState.java", "diffHunk": "@@ -128,6 +128,8 @@ public Long load(String key) {\n \n     static abstract class AbstractState implements Serializable {\n         String interpolatedExpression = null;\n+        boolean cached = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d7322bceb30ccea7953de224a9fc3594851a7a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4MzEyOA==", "bodyText": "Yeah, this is needed since thresholdValues can exist before and after reload.\nDoesn't state itself get reset when reloading ? Looks like it's not. When merging thresholds it retains previous ThresholdStates and just loads the config again.  There are several tests with  ThresholdingVisitor  reload that mimics this  behavior.", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r487183128", "createdAt": "2020-09-11T17:20:01Z", "author": {"login": "cgorantla"}, "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/AbstractThresholdEvaluatorState.java", "diffHunk": "@@ -128,6 +128,8 @@ public Long load(String key) {\n \n     static abstract class AbstractState implements Serializable {\n         String interpolatedExpression = null;\n+        boolean cached = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExMjU3Nw=="}, "originalCommit": {"oid": "72d7322bceb30ccea7953de224a9fc3594851a7a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI5MjY4Mw==", "bodyText": "Not sure I follow, looks like very writer of thresholdValues also sets the cached field. Also upon deserializing an object with thresholdValues set wouldn't cached also be set in that case?", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r487292683", "createdAt": "2020-09-11T21:11:22Z", "author": {"login": "mattixtech"}, "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/AbstractThresholdEvaluatorState.java", "diffHunk": "@@ -128,6 +128,8 @@ public Long load(String key) {\n \n     static abstract class AbstractState implements Serializable {\n         String interpolatedExpression = null;\n+        boolean cached = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExMjU3Nw=="}, "originalCommit": {"oid": "72d7322bceb30ccea7953de224a9fc3594851a7a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMwNzc4MQ==", "bodyText": "clearStateBeforePersist unsets the cache which gets called in ThresholdingVisitor reload.  If you are saying that thresholdValues can be set as null or Optional.empty in clearStateBeforePersist that's an option but I chose this as this is common to both interpolatedExpression and thresholdValues.", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r487307781", "createdAt": "2020-09-11T21:54:48Z", "author": {"login": "cgorantla"}, "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/AbstractThresholdEvaluatorState.java", "diffHunk": "@@ -128,6 +128,8 @@ public Long load(String key) {\n \n     static abstract class AbstractState implements Serializable {\n         String interpolatedExpression = null;\n+        boolean cached = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExMjU3Nw=="}, "originalCommit": {"oid": "72d7322bceb30ccea7953de224a9fc3594851a7a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ3MjUwNg==", "bodyText": "Ok, I missed the part where it was getting cleared in clearStateBeforePersist, I was thinking it was always being set in a tandem with the value. No worries, can leave as is.", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r487472506", "createdAt": "2020-09-13T02:43:14Z", "author": {"login": "mattixtech"}, "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/AbstractThresholdEvaluatorState.java", "diffHunk": "@@ -128,6 +128,8 @@ public Long load(String key) {\n \n     static abstract class AbstractState implements Serializable {\n         String interpolatedExpression = null;\n+        boolean cached = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExMjU3Nw=="}, "originalCommit": {"oid": "72d7322bceb30ccea7953de224a9fc3594851a7a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzAxMDQ4OnYy", "diffSide": "RIGHT", "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/AbstractThresholdEvaluatorState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNToxNjo0NVrOHQjH5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNToxNjo0NVrOHQjH5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExNDcyNg==", "bodyText": "Unnecessary indentation from the else branch.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!state.isCached()) {\n          \n          \n            \n                        return thresholdValuesConsumer.get(thresholdValues -> {\n          \n          \n            \n                            state.setThresholdValues(thresholdValues);\n          \n          \n            \n                            state.setCached(true);\n          \n          \n            \n                        });\n          \n          \n            \n                    } else {\n          \n          \n            \n                        Double dsvalue = thresholdValuesConsumer.getDsValue();\n          \n          \n            \n                        ThresholdValues thresholdValues = state.getThresholdValues();\n          \n          \n            \n                        thresholdValues.setDsValue(dsvalue);\n          \n          \n            \n                        return thresholdValues;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (!state.isCached()) {\n          \n          \n            \n                        return thresholdValuesConsumer.get(thresholdValues -> {\n          \n          \n            \n                            state.setThresholdValues(thresholdValues);\n          \n          \n            \n                            state.setCached(true);\n          \n          \n            \n                        });\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    Double dsvalue = thresholdValuesConsumer.getDsValue();\n          \n          \n            \n                    ThresholdValues thresholdValues = state.getThresholdValues();\n          \n          \n            \n                    thresholdValues.setDsValue(dsvalue);\n          \n          \n            \n                    return thresholdValues;", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r487114726", "createdAt": "2020-09-11T15:16:45Z", "author": {"login": "mattixtech"}, "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/AbstractThresholdEvaluatorState.java", "diffHunk": "@@ -263,21 +287,51 @@ public synchronized Status evaluate(double dsValue, Long sequenceNumber) {\n     @Override\n     public ValueStatus evaluate(ExpressionThresholdValue valueSupplier, Long sequenceNumber)\n             throws ThresholdExpressionException {\n-        double dsValue = getValueForExpressionThreshold(valueSupplier);\n-        Status status = evaluate(dsValue, sequenceNumber);\n+        ExpressionConfigWrapper.ExpressionValue expressionValue = getValueForExpressionThreshold(valueSupplier);\n+        Status status = evaluate(expressionValue.value, expressionValue.getThresholdValues(), sequenceNumber);\n+\n+        return new ValueStatus(expressionValue.value, status, expressionValue.getThresholdValues());\n+    }\n+\n+    @Override\n+    public ValueStatus evaluate(ThresholdValuesConsumer thresholdValuesConsumer, Long sequenceNumber)\n+            throws ThresholdExpressionException {\n+        ThresholdValues thresholdValues = getThresholdValues(thresholdValuesConsumer);\n+        Status status = evaluate(thresholdValues.getDsValue(), thresholdValues, sequenceNumber);\n+        return new ValueStatus(thresholdValues.getDsValue(), status, thresholdValues);\n+    }\n+\n+    private ThresholdValues getThresholdValues(ThresholdValuesConsumer thresholdValuesConsumer) {\n \n-        return new ValueStatus(dsValue, status);\n+        if (!state.isCached()) {\n+            return thresholdValuesConsumer.get(thresholdValues -> {\n+                state.setThresholdValues(thresholdValues);\n+                state.setCached(true);\n+            });\n+        } else {\n+            Double dsvalue = thresholdValuesConsumer.getDsValue();\n+            ThresholdValues thresholdValues = state.getThresholdValues();\n+            thresholdValues.setDsValue(dsvalue);\n+            return thresholdValues;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d7322bceb30ccea7953de224a9fc3594851a7a"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzAyMDQ3OnYy", "diffSide": "RIGHT", "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/ThresholdValuesConsumer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNToxOToxN1rOHQjN9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMTo1MzoxOFrOHSWUtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExNjI3OA==", "bodyText": "Why does this method take a consumer? It looks like it would be sufficient to simply return the values and take no parameters here.", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r487116278", "createdAt": "2020-09-11T15:19:17Z", "author": {"login": "mattixtech"}, "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/ThresholdValuesConsumer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.threshd;\n+\n+import java.util.function.Consumer;\n+\n+public interface ThresholdValuesConsumer {\n+\n+    ThresholdEvaluatorState.ThresholdValues get(Consumer<ThresholdEvaluatorState.ThresholdValues> thresholdsConsumer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d7322bceb30ccea7953de224a9fc3594851a7a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODczMTEyMg==", "bodyText": "Refactored", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r488731122", "createdAt": "2020-09-15T14:51:06Z", "author": {"login": "cgorantla"}, "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/ThresholdValuesConsumer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.threshd;\n+\n+import java.util.function.Consumer;\n+\n+public interface ThresholdValuesConsumer {\n+\n+    ThresholdEvaluatorState.ThresholdValues get(Consumer<ThresholdEvaluatorState.ThresholdValues> thresholdsConsumer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExNjI3OA=="}, "originalCommit": {"oid": "72d7322bceb30ccea7953de224a9fc3594851a7a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTAwMjE2NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r489002165", "createdAt": "2020-09-15T21:53:18Z", "author": {"login": "mattixtech"}, "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/ThresholdValuesConsumer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.threshd;\n+\n+import java.util.function.Consumer;\n+\n+public interface ThresholdValuesConsumer {\n+\n+    ThresholdEvaluatorState.ThresholdValues get(Consumer<ThresholdEvaluatorState.ThresholdValues> thresholdsConsumer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExNjI3OA=="}, "originalCommit": {"oid": "72d7322bceb30ccea7953de224a9fc3594851a7a"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzA2MDkwOnYy", "diffSide": "RIGHT", "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/ThresholdValuesConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNToyOTo0OVrOHQjnNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDo1MDo1OVrOHSFxpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMjc0MQ==", "bodyText": "The interface name here is misleading as this seems to be supplying rather than consuming.", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r487122741", "createdAt": "2020-09-11T15:29:49Z", "author": {"login": "mattixtech"}, "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/ThresholdValuesConsumer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.threshd;\n+\n+import java.util.function.Consumer;\n+\n+public interface ThresholdValuesConsumer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d7322bceb30ccea7953de224a9fc3594851a7a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODczMTA0NQ==", "bodyText": "Refactored", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r488731045", "createdAt": "2020-09-15T14:50:59Z", "author": {"login": "cgorantla"}, "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/ThresholdValuesConsumer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.threshd;\n+\n+import java.util.function.Consumer;\n+\n+public interface ThresholdValuesConsumer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMjc0MQ=="}, "originalCommit": {"oid": "72d7322bceb30ccea7953de224a9fc3594851a7a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzExMzk0OnYy", "diffSide": "RIGHT", "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/ExpressionThresholdValue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNTo0MzozN1rOHQkH3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDo1MDoyN1rOHSFwEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzMTEwMg==", "bodyText": "Looks like this doesn't need to accept a consumer either. The caller should be able to use the return value.", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r487131102", "createdAt": "2020-09-11T15:43:37Z", "author": {"login": "mattixtech"}, "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/ExpressionThresholdValue.java", "diffHunk": "@@ -32,10 +32,10 @@\n \n public interface ExpressionThresholdValue {\n     /**\n-     * @param expressionConsumer a consumer for accepting the interpolated expression for caching purposes\n+     * @param expressionConsumer a consumer for accepting the interpolated expression and threshold values for caching purposes\n      * @return the expression value\n      */\n-    double get(Consumer<String> expressionConsumer) throws ThresholdExpressionException;\n+    ExpressionConfigWrapper.ExpressionValue get(Consumer<ExpressionConfigWrapper.ExpressionValue> expressionConsumer) throws ThresholdExpressionException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d7322bceb30ccea7953de224a9fc3594851a7a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODczMDY0MQ==", "bodyText": "Refactored this.", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r488730641", "createdAt": "2020-09-15T14:50:27Z", "author": {"login": "cgorantla"}, "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/ExpressionThresholdValue.java", "diffHunk": "@@ -32,10 +32,10 @@\n \n public interface ExpressionThresholdValue {\n     /**\n-     * @param expressionConsumer a consumer for accepting the interpolated expression for caching purposes\n+     * @param expressionConsumer a consumer for accepting the interpolated expression and threshold values for caching purposes\n      * @return the expression value\n      */\n-    double get(Consumer<String> expressionConsumer) throws ThresholdExpressionException;\n+    ExpressionConfigWrapper.ExpressionValue get(Consumer<ExpressionConfigWrapper.ExpressionValue> expressionConsumer) throws ThresholdExpressionException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzMTEwMg=="}, "originalCommit": {"oid": "72d7322bceb30ccea7953de224a9fc3594851a7a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzE0OTAyOnYy", "diffSide": "RIGHT", "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/BaseThresholdDefConfigWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNTo1MzoxNVrOHQkdcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDo0OTo1N1rOHSFumQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzNjYyNw==", "bodyText": "Since we are already using Optional in this class in some places to signify the absence of a value can we use that for the new/refactored methods rather than returning null.\nThis applies for the rest of new code in this class as well where nullable values are being returned.\nAlso the javadoc should either be updated or deleted as these methods don't return primitives anymore and the javadoc does not indicate when they would return null (or if we update them optional).", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r487136627", "createdAt": "2020-09-11T15:53:15Z", "author": {"login": "mattixtech"}, "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/BaseThresholdDefConfigWrapper.java", "diffHunk": "@@ -124,7 +127,11 @@ public String getDsType() {\n      *\n      * @return a double.\n      */\n-    public double getRearm() {\n+    public Double getRearm() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d7322bceb30ccea7953de224a9fc3594851a7a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODczMDI2NQ==", "bodyText": "Updated javadocs.  The places this is getting called seems better without Optional", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r488730265", "createdAt": "2020-09-15T14:49:57Z", "author": {"login": "cgorantla"}, "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/BaseThresholdDefConfigWrapper.java", "diffHunk": "@@ -124,7 +127,11 @@ public String getDsType() {\n      *\n      * @return a double.\n      */\n-    public double getRearm() {\n+    public Double getRearm() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzNjYyNw=="}, "originalCommit": {"oid": "72d7322bceb30ccea7953de224a9fc3594851a7a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzE4MzAyOnYy", "diffSide": "RIGHT", "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/ThresholdConfigWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjowMjo0NlrOHQkyvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjowMjo0NlrOHQkyvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0MjA3OA==", "bodyText": "Looks like we don't need to churn this file.", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r487142078", "createdAt": "2020-09-11T16:02:46Z", "author": {"login": "mattixtech"}, "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/ThresholdConfigWrapper.java", "diffHunk": "@@ -83,4 +83,5 @@ public double evaluate(Map<String, Double> values) {\n     public void accept(ThresholdDefVisitor thresholdDefVisitor) {\n         thresholdDefVisitor.visit(this);\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d7322bceb30ccea7953de224a9fc3594851a7a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzI1MjI4OnYy", "diffSide": "RIGHT", "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/ThresholdEvaluatorHighLow.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjoyMjo0NVrOHQldkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODoxNDoyNlrOHS8noQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE1MzA0MQ==", "bodyText": "Since this method and isRearmExceeded will NPE if given nulls can we update the method signature to take a primitive. That way their preconditions will be enforced.", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r487153041", "createdAt": "2020-09-11T16:22:45Z", "author": {"login": "mattixtech"}, "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/ThresholdEvaluatorHighLow.java", "diffHunk": "@@ -201,32 +211,53 @@ public Status evaluateAfterFetch(double dsValue) {\n             return Status.NO_CHANGE;\n         }\n \n-        protected boolean isThresholdExceeded(double dsValue) {\n+        protected boolean isThresholdExceeded(double dsValue, Double value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72d7322bceb30ccea7953de224a9fc3594851a7a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4NTM5Mg==", "bodyText": "Doesn't look like this changed, anyways not a big deal...", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r489585392", "createdAt": "2020-09-16T16:56:22Z", "author": {"login": "mattixtech"}, "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/ThresholdEvaluatorHighLow.java", "diffHunk": "@@ -201,32 +211,53 @@ public Status evaluateAfterFetch(double dsValue) {\n             return Status.NO_CHANGE;\n         }\n \n-        protected boolean isThresholdExceeded(double dsValue) {\n+        protected boolean isThresholdExceeded(double dsValue, Double value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE1MzA0MQ=="}, "originalCommit": {"oid": "72d7322bceb30ccea7953de224a9fc3594851a7a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5MDEyMg==", "bodyText": "Oh, yeah. method with only one argument is only used in tests so added @VisibleForTesting annotation and other will always pre-check for null so this seems safe.", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r489590122", "createdAt": "2020-09-16T17:04:15Z", "author": {"login": "cgorantla"}, "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/ThresholdEvaluatorHighLow.java", "diffHunk": "@@ -201,32 +211,53 @@ public Status evaluateAfterFetch(double dsValue) {\n             return Status.NO_CHANGE;\n         }\n \n-        protected boolean isThresholdExceeded(double dsValue) {\n+        protected boolean isThresholdExceeded(double dsValue, Double value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE1MzA0MQ=="}, "originalCommit": {"oid": "72d7322bceb30ccea7953de224a9fc3594851a7a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYyOTYwMQ==", "bodyText": "Not that it matters at this point, but the reason I originally commented on this is because the method would assert its preconditions by using a primitive double in the signature rather than implicitly only being valid with a non-null Double.\nIf we had changed the other code to return OptionalDouble rather than a nullable Double we would have either empty or a primitive double to pass in and we would satisfy the preconditions.\nNo need to action this, just explaining my train of thought.", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r489629601", "createdAt": "2020-09-16T18:14:26Z", "author": {"login": "mattixtech"}, "path": "features/collection/thresholding/impl/src/main/java/org/opennms/netmgt/threshd/ThresholdEvaluatorHighLow.java", "diffHunk": "@@ -201,32 +211,53 @@ public Status evaluateAfterFetch(double dsValue) {\n             return Status.NO_CHANGE;\n         }\n \n-        protected boolean isThresholdExceeded(double dsValue) {\n+        protected boolean isThresholdExceeded(double dsValue, Double value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE1MzA0MQ=="}, "originalCommit": {"oid": "72d7322bceb30ccea7953de224a9fc3594851a7a"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzI4MzQ2OnYy", "diffSide": "RIGHT", "path": "opennms-doc/guide-admin/src/asciidoc/text/thresholds/thresholding.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjo0ODoyMlrOHTgZIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjo0ODoyMlrOHTgZIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIxNTcxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Metadata is also supported in Value, Rearm, Trigger fields for Single-DS and expression-based thresholds.\n          \n          \n            \n            Metadata is also supported in Value, Re-arm, and Trigger fields for Single-DS and expression-based thresholds.", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r490215713", "createdAt": "2020-09-17T12:48:22Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/thresholds/thresholding.adoc", "diffHunk": "@@ -173,11 +173,10 @@ During evaluation of an expression, the following scopes are available:\n * Interface metadata\n * Service metadata\n \n+Metadata is also supported in Value, Rearm, Trigger fields for Single-DS and expression-based thresholds.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2f4ef0930d11af2e020b6ab8f147c3209fd03c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzI5MzM4OnYy", "diffSide": "RIGHT", "path": "opennms-doc/guide-admin/src/asciidoc/text/thresholds/thresholding.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjo1MDozMVrOHTgfIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjowNTo0MlrOHTp1iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIxNzI1MA==", "bodyText": "The metadata link is broken.", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r490217250", "createdAt": "2020-09-17T12:50:31Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/thresholds/thresholding.adoc", "diffHunk": "@@ -173,11 +173,10 @@ During evaluation of an expression, the following scopes are available:\n * Interface metadata\n * Service metadata\n \n+Metadata is also supported in Value, Rearm, Trigger fields for Single-DS and expression-based thresholds.\n+\n For more information on metadata and how to define it, see link:metadata[Metadata].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2f4ef0930d11af2e020b6ab8f147c3209fd03c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM3MDQ0MQ==", "bodyText": "Guess I updated it right", "url": "https://github.com/OpenNMS/opennms/pull/3150#discussion_r490370441", "createdAt": "2020-09-17T16:05:42Z", "author": {"login": "cgorantla"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/thresholds/thresholding.adoc", "diffHunk": "@@ -173,11 +173,10 @@ During evaluation of an expression, the following scopes are available:\n * Interface metadata\n * Service metadata\n \n+Metadata is also supported in Value, Rearm, Trigger fields for Single-DS and expression-based thresholds.\n+\n For more information on metadata and how to define it, see link:metadata[Metadata].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIxNzI1MA=="}, "originalCommit": {"oid": "9b2f4ef0930d11af2e020b6ab8f147c3209fd03c"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2970, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}