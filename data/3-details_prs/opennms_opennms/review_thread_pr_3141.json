{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4NDA2ODU5", "number": 3141, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxOTo1MToxN1rOEggZeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTowNDowNFrOEg2e3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTIwNjk2OnYy", "diffSide": "RIGHT", "path": "opennms-dao/src/main/java/org/opennms/netmgt/dao/support/ApplicationStatusUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxOTo1MToxN1rOHNZ6YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxMTo1NDo1NFrOHNhl9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgxODA4MQ==", "bodyText": "I am wondering if we can't replace this inner class with java.time.Duration? I believe it represents the same.", "url": "https://github.com/OpenNMS/opennms/pull/3141#discussion_r483818081", "createdAt": "2020-09-04T19:51:17Z", "author": {"login": "patrick-schweizer"}, "path": "opennms-dao/src/main/java/org/opennms/netmgt/dao/support/ApplicationStatusUtil.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.dao.support;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import org.opennms.core.utils.InetAddressUtils;\n+import org.opennms.netmgt.collection.support.builder.PerspectiveResponseTimeResource;\n+import org.opennms.netmgt.dao.api.MonitoredServiceDao;\n+import org.opennms.netmgt.model.OnmsApplication;\n+import org.opennms.netmgt.model.OnmsMonitoredService;\n+import org.opennms.netmgt.model.OnmsOutage;\n+import org.opennms.netmgt.model.monitoringLocations.OnmsMonitoringLocation;\n+import org.opennms.netmgt.model.perspectivepolling.ApplicationServiceStatus;\n+import org.opennms.netmgt.model.perspectivepolling.ApplicationStatus;\n+import org.opennms.netmgt.model.perspectivepolling.Location;\n+\n+import com.google.common.base.MoreObjects;\n+\n+public class ApplicationStatusUtil {\n+    static class DowntimeInterval {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d75e9ca281448c60215f12c4295530d57ec6d940"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkyNjgwNQ==", "bodyText": "The Java Duration class models an amount of time. This does not include a start or end timestamp of the duration, just the duration itself. I query the start and end timestamps of the associated outages and have to merge them together. So, I need the start and end timestamps for this, because the outages of different services may overlap.", "url": "https://github.com/OpenNMS/opennms/pull/3141#discussion_r483926805", "createdAt": "2020-09-05T08:24:56Z", "author": {"login": "christianpape"}, "path": "opennms-dao/src/main/java/org/opennms/netmgt/dao/support/ApplicationStatusUtil.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.dao.support;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import org.opennms.core.utils.InetAddressUtils;\n+import org.opennms.netmgt.collection.support.builder.PerspectiveResponseTimeResource;\n+import org.opennms.netmgt.dao.api.MonitoredServiceDao;\n+import org.opennms.netmgt.model.OnmsApplication;\n+import org.opennms.netmgt.model.OnmsMonitoredService;\n+import org.opennms.netmgt.model.OnmsOutage;\n+import org.opennms.netmgt.model.monitoringLocations.OnmsMonitoringLocation;\n+import org.opennms.netmgt.model.perspectivepolling.ApplicationServiceStatus;\n+import org.opennms.netmgt.model.perspectivepolling.ApplicationStatus;\n+import org.opennms.netmgt.model.perspectivepolling.Location;\n+\n+import com.google.common.base.MoreObjects;\n+\n+public class ApplicationStatusUtil {\n+    static class DowntimeInterval {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgxODA4MQ=="}, "originalCommit": {"oid": "d75e9ca281448c60215f12c4295530d57ec6d940"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk0MzkyNg==", "bodyText": "you are right - makes sense!", "url": "https://github.com/OpenNMS/opennms/pull/3141#discussion_r483943926", "createdAt": "2020-09-05T11:54:54Z", "author": {"login": "patrick-schweizer"}, "path": "opennms-dao/src/main/java/org/opennms/netmgt/dao/support/ApplicationStatusUtil.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.dao.support;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import org.opennms.core.utils.InetAddressUtils;\n+import org.opennms.netmgt.collection.support.builder.PerspectiveResponseTimeResource;\n+import org.opennms.netmgt.dao.api.MonitoredServiceDao;\n+import org.opennms.netmgt.model.OnmsApplication;\n+import org.opennms.netmgt.model.OnmsMonitoredService;\n+import org.opennms.netmgt.model.OnmsOutage;\n+import org.opennms.netmgt.model.monitoringLocations.OnmsMonitoringLocation;\n+import org.opennms.netmgt.model.perspectivepolling.ApplicationServiceStatus;\n+import org.opennms.netmgt.model.perspectivepolling.ApplicationStatus;\n+import org.opennms.netmgt.model.perspectivepolling.Location;\n+\n+import com.google.common.base.MoreObjects;\n+\n+public class ApplicationStatusUtil {\n+    static class DowntimeInterval {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgxODA4MQ=="}, "originalCommit": {"oid": "d75e9ca281448c60215f12c4295530d57ec6d940"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTIwODgwOnYy", "diffSide": "RIGHT", "path": "opennms-dao/src/main/java/org/opennms/netmgt/dao/support/ApplicationStatusUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxOTo1MTo0OFrOHNZ7Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwODoyNTowOFrOHNgjOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgxODMzMA==", "bodyText": "Maybe replace with a static method that creates a java.time.Duration?", "url": "https://github.com/OpenNMS/opennms/pull/3141#discussion_r483818330", "createdAt": "2020-09-04T19:51:48Z", "author": {"login": "patrick-schweizer"}, "path": "opennms-dao/src/main/java/org/opennms/netmgt/dao/support/ApplicationStatusUtil.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.dao.support;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import org.opennms.core.utils.InetAddressUtils;\n+import org.opennms.netmgt.collection.support.builder.PerspectiveResponseTimeResource;\n+import org.opennms.netmgt.dao.api.MonitoredServiceDao;\n+import org.opennms.netmgt.model.OnmsApplication;\n+import org.opennms.netmgt.model.OnmsMonitoredService;\n+import org.opennms.netmgt.model.OnmsOutage;\n+import org.opennms.netmgt.model.monitoringLocations.OnmsMonitoringLocation;\n+import org.opennms.netmgt.model.perspectivepolling.ApplicationServiceStatus;\n+import org.opennms.netmgt.model.perspectivepolling.ApplicationStatus;\n+import org.opennms.netmgt.model.perspectivepolling.Location;\n+\n+import com.google.common.base.MoreObjects;\n+\n+public class ApplicationStatusUtil {\n+    static class DowntimeInterval {\n+        public long start, end;\n+\n+        public DowntimeInterval(final OnmsOutage onmsOutage, long start, long end) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d75e9ca281448c60215f12c4295530d57ec6d940"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkyNjg0MQ==", "bodyText": "see above", "url": "https://github.com/OpenNMS/opennms/pull/3141#discussion_r483926841", "createdAt": "2020-09-05T08:25:08Z", "author": {"login": "christianpape"}, "path": "opennms-dao/src/main/java/org/opennms/netmgt/dao/support/ApplicationStatusUtil.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.dao.support;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import org.opennms.core.utils.InetAddressUtils;\n+import org.opennms.netmgt.collection.support.builder.PerspectiveResponseTimeResource;\n+import org.opennms.netmgt.dao.api.MonitoredServiceDao;\n+import org.opennms.netmgt.model.OnmsApplication;\n+import org.opennms.netmgt.model.OnmsMonitoredService;\n+import org.opennms.netmgt.model.OnmsOutage;\n+import org.opennms.netmgt.model.monitoringLocations.OnmsMonitoringLocation;\n+import org.opennms.netmgt.model.perspectivepolling.ApplicationServiceStatus;\n+import org.opennms.netmgt.model.perspectivepolling.ApplicationStatus;\n+import org.opennms.netmgt.model.perspectivepolling.Location;\n+\n+import com.google.common.base.MoreObjects;\n+\n+public class ApplicationStatusUtil {\n+    static class DowntimeInterval {\n+        public long start, end;\n+\n+        public DowntimeInterval(final OnmsOutage onmsOutage, long start, long end) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgxODMzMA=="}, "originalCommit": {"oid": "d75e9ca281448c60215f12c4295530d57ec6d940"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODgyMDU5OnYy", "diffSide": "RIGHT", "path": "opennms-webapp/src/main/java/org/opennms/web/element/NetworkElementFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTowMzowNFrOHN2_oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOToyNzoxMFrOHN35Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5NDU2MQ==", "bodyText": "The key of the map is never used. Can onmsApplication.getMonitoredServices() be used directly in the loop below?", "url": "https://github.com/OpenNMS/opennms/pull/3141#discussion_r484294561", "createdAt": "2020-09-07T09:03:04Z", "author": {"login": "fooker"}, "path": "opennms-webapp/src/main/java/org/opennms/web/element/NetworkElementFactory.java", "diffHunk": "@@ -1009,4 +1020,50 @@ public boolean nodeExistsInRequisition(final String foreignSource, final String\n     public Collection<OnmsOutage> currentOutagesForServiceFromPerspectivePoller(OnmsMonitoredService service){\n         return m_outageDao.currentOutagesForServiceFromPerspectivePoller(service);\n     }\n+\n+    @Override\n+    public List<OnmsApplication> getAllApplications() {\n+        return m_applicatioDao.findMatching(new CriteriaBuilder(OnmsApplication.class).orderBy(\"name\").toCriteria());\n+    }\n+\n+    @Override\n+    public ApplicationStatus getApplicationStatus(final OnmsApplication onmsApplication, final long start, final long end) {\n+        return ApplicationStatusUtil.buildApplicationStatus(\n+                onmsApplication,\n+                m_outageDao.getStatusChangesForApplicationIdBetween(new Date(start), new Date(end), onmsApplication.getId()),\n+                start,\n+                end\n+        );\n+    }\n+\n+    @Override\n+    public Map<OnmsMonitoredService, Map<String, Double>> getApplicationServiceStatus(final OnmsApplication onmsApplication, final long start, final long end) {\n+        final Map<String, OnmsMonitoredService> serviceMap = new TreeMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d75e9ca281448c60215f12c4295530d57ec6d940"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMwOTI2Nw==", "bodyText": "done.", "url": "https://github.com/OpenNMS/opennms/pull/3141#discussion_r484309267", "createdAt": "2020-09-07T09:27:10Z", "author": {"login": "christianpape"}, "path": "opennms-webapp/src/main/java/org/opennms/web/element/NetworkElementFactory.java", "diffHunk": "@@ -1009,4 +1020,50 @@ public boolean nodeExistsInRequisition(final String foreignSource, final String\n     public Collection<OnmsOutage> currentOutagesForServiceFromPerspectivePoller(OnmsMonitoredService service){\n         return m_outageDao.currentOutagesForServiceFromPerspectivePoller(service);\n     }\n+\n+    @Override\n+    public List<OnmsApplication> getAllApplications() {\n+        return m_applicatioDao.findMatching(new CriteriaBuilder(OnmsApplication.class).orderBy(\"name\").toCriteria());\n+    }\n+\n+    @Override\n+    public ApplicationStatus getApplicationStatus(final OnmsApplication onmsApplication, final long start, final long end) {\n+        return ApplicationStatusUtil.buildApplicationStatus(\n+                onmsApplication,\n+                m_outageDao.getStatusChangesForApplicationIdBetween(new Date(start), new Date(end), onmsApplication.getId()),\n+                start,\n+                end\n+        );\n+    }\n+\n+    @Override\n+    public Map<OnmsMonitoredService, Map<String, Double>> getApplicationServiceStatus(final OnmsApplication onmsApplication, final long start, final long end) {\n+        final Map<String, OnmsMonitoredService> serviceMap = new TreeMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5NDU2MQ=="}, "originalCommit": {"oid": "d75e9ca281448c60215f12c4295530d57ec6d940"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODgyNTI2OnYy", "diffSide": "RIGHT", "path": "opennms-webapp/src/main/java/org/opennms/web/element/NetworkElementFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTowNDowNFrOHN3CVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOToyNzoxNVrOHN35Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5NTI1Mg==", "bodyText": "This call can be moved out of the loop.", "url": "https://github.com/OpenNMS/opennms/pull/3141#discussion_r484295252", "createdAt": "2020-09-07T09:04:04Z", "author": {"login": "fooker"}, "path": "opennms-webapp/src/main/java/org/opennms/web/element/NetworkElementFactory.java", "diffHunk": "@@ -1009,4 +1020,50 @@ public boolean nodeExistsInRequisition(final String foreignSource, final String\n     public Collection<OnmsOutage> currentOutagesForServiceFromPerspectivePoller(OnmsMonitoredService service){\n         return m_outageDao.currentOutagesForServiceFromPerspectivePoller(service);\n     }\n+\n+    @Override\n+    public List<OnmsApplication> getAllApplications() {\n+        return m_applicatioDao.findMatching(new CriteriaBuilder(OnmsApplication.class).orderBy(\"name\").toCriteria());\n+    }\n+\n+    @Override\n+    public ApplicationStatus getApplicationStatus(final OnmsApplication onmsApplication, final long start, final long end) {\n+        return ApplicationStatusUtil.buildApplicationStatus(\n+                onmsApplication,\n+                m_outageDao.getStatusChangesForApplicationIdBetween(new Date(start), new Date(end), onmsApplication.getId()),\n+                start,\n+                end\n+        );\n+    }\n+\n+    @Override\n+    public Map<OnmsMonitoredService, Map<String, Double>> getApplicationServiceStatus(final OnmsApplication onmsApplication, final long start, final long end) {\n+        final Map<String, OnmsMonitoredService> serviceMap = new TreeMap<>();\n+        for(final OnmsMonitoredService svc : onmsApplication.getMonitoredServices()) {\n+            serviceMap.put(svc.getIpAddressAsString() + \" / \" + svc.getServiceName(), svc);\n+        }\n+\n+        final Map<OnmsMonitoredService, Map<String, Double>> status = new TreeMap<>();\n+\n+        for(final Map.Entry<String, OnmsMonitoredService> serviceMapEntry : serviceMap.entrySet()) {\n+            final Map<String, Double> serviceStatus = new TreeMap<>();\n+\n+            ApplicationServiceStatus applicationServiceStatus = ApplicationStatusUtil.buildApplicationServiceStatus(\n+                    m_monSvcDao,\n+                    onmsApplication,\n+                    serviceMapEntry.getValue().getId(),\n+                    m_outageDao.getStatusChangesForApplicationIdBetween(new Date(start), new Date(end), onmsApplication.getId()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d75e9ca281448c60215f12c4295530d57ec6d940"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMwOTMyMg==", "bodyText": "done.", "url": "https://github.com/OpenNMS/opennms/pull/3141#discussion_r484309322", "createdAt": "2020-09-07T09:27:15Z", "author": {"login": "christianpape"}, "path": "opennms-webapp/src/main/java/org/opennms/web/element/NetworkElementFactory.java", "diffHunk": "@@ -1009,4 +1020,50 @@ public boolean nodeExistsInRequisition(final String foreignSource, final String\n     public Collection<OnmsOutage> currentOutagesForServiceFromPerspectivePoller(OnmsMonitoredService service){\n         return m_outageDao.currentOutagesForServiceFromPerspectivePoller(service);\n     }\n+\n+    @Override\n+    public List<OnmsApplication> getAllApplications() {\n+        return m_applicatioDao.findMatching(new CriteriaBuilder(OnmsApplication.class).orderBy(\"name\").toCriteria());\n+    }\n+\n+    @Override\n+    public ApplicationStatus getApplicationStatus(final OnmsApplication onmsApplication, final long start, final long end) {\n+        return ApplicationStatusUtil.buildApplicationStatus(\n+                onmsApplication,\n+                m_outageDao.getStatusChangesForApplicationIdBetween(new Date(start), new Date(end), onmsApplication.getId()),\n+                start,\n+                end\n+        );\n+    }\n+\n+    @Override\n+    public Map<OnmsMonitoredService, Map<String, Double>> getApplicationServiceStatus(final OnmsApplication onmsApplication, final long start, final long end) {\n+        final Map<String, OnmsMonitoredService> serviceMap = new TreeMap<>();\n+        for(final OnmsMonitoredService svc : onmsApplication.getMonitoredServices()) {\n+            serviceMap.put(svc.getIpAddressAsString() + \" / \" + svc.getServiceName(), svc);\n+        }\n+\n+        final Map<OnmsMonitoredService, Map<String, Double>> status = new TreeMap<>();\n+\n+        for(final Map.Entry<String, OnmsMonitoredService> serviceMapEntry : serviceMap.entrySet()) {\n+            final Map<String, Double> serviceStatus = new TreeMap<>();\n+\n+            ApplicationServiceStatus applicationServiceStatus = ApplicationStatusUtil.buildApplicationServiceStatus(\n+                    m_monSvcDao,\n+                    onmsApplication,\n+                    serviceMapEntry.getValue().getId(),\n+                    m_outageDao.getStatusChangesForApplicationIdBetween(new Date(start), new Date(end), onmsApplication.getId()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5NTI1Mg=="}, "originalCommit": {"oid": "d75e9ca281448c60215f12c4295530d57ec6d940"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3115, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}