{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MjMzOTEy", "number": 2900, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODo0NDowNlrODinECA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODo0ODoyM1rODinJTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjE4MTg0OnYy", "diffSide": "RIGHT", "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpPeerStatusAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODo0NDowNlrOFt9B9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTozNjo1MVrOFt-xhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzczMDE2NA==", "bodyText": "Should call this something other than document now?", "url": "https://github.com/OpenNMS/opennms/pull/2900#discussion_r383730164", "createdAt": "2020-02-25T08:44:06Z", "author": {"login": "j-white"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpPeerStatusAdapter.java", "diffHunk": "@@ -77,13 +74,18 @@ public BmpPeerStatusAdapter(final AdapterDefinition adapterConfig,\n     public void handleMessage(final TelemetryMessageLogEntry message,\n                               final TelemetryMessageLog messageLog) {\n         LOG.trace(\"Parsing packet: {}\", message);\n-        final BsonDocument document = new RawBsonDocument(message.getByteArray());\n+        final Transport.Message document;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d64ac636484f79132ed59a5504cad11bced8acd"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1ODcyNQ==", "bodyText": "There is no good name I can come up with - message is already in use.", "url": "https://github.com/OpenNMS/opennms/pull/2900#discussion_r383758725", "createdAt": "2020-02-25T09:36:51Z", "author": {"login": "fooker"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpPeerStatusAdapter.java", "diffHunk": "@@ -77,13 +74,18 @@ public BmpPeerStatusAdapter(final AdapterDefinition adapterConfig,\n     public void handleMessage(final TelemetryMessageLogEntry message,\n                               final TelemetryMessageLog messageLog) {\n         LOG.trace(\"Parsing packet: {}\", message);\n-        final BsonDocument document = new RawBsonDocument(message.getByteArray());\n+        final Transport.Message document;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzczMDE2NA=="}, "originalCommit": {"oid": "5d64ac636484f79132ed59a5504cad11bced8acd"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjE5NDI2OnYy", "diffSide": "RIGHT", "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpTelemetryAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODo0ODowM1rOFt9JkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTozNToyNVrOFt-uaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzczMjExMg==", "bodyText": "Worth creating a JIRA for this?", "url": "https://github.com/OpenNMS/opennms/pull/2900#discussion_r383732112", "createdAt": "2020-02-25T08:48:03Z", "author": {"login": "j-white"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpTelemetryAdapter.java", "diffHunk": "@@ -99,40 +100,46 @@ public BmpTelemetryAdapter(final AdapterDefinition adapterConfig,\n         final CollectionAgent agent = this.collectionAgentFactory.createCollectionAgent(Integer.toString(exporterNodeId.get()), exporterAddress);\n \n         // Extract peer details\n-        final String peerAddress = getString(document, \"peer\", \"address\").get();\n-        final Instant timestamp = Instant.ofEpochSecond(getInt64(document, \"peer\", \"timestamp\", \"epoch\").get(),\n-                                                        getInt64(document, \"peer\", \"timestamp\", \"nanos\").orElse(0L));\n-        final String as = Long.toString(getInt64(document, \"peer\", \"as\").get());\n-        final String id = Long.toString(getInt64(document, \"peer\", \"id\").get());\n+        final String peerAddress = InetAddressUtils.str(address(stats.getPeer().getAddress()));\n \n         // Build resource for the peer\n         final NodeLevelResource nodeResource = new NodeLevelResource(agent.getNodeId());\n         final DeferredGenericTypeResource peerResource = new DeferredGenericTypeResource(nodeResource, \"bmp\", peerAddress);\n \n         // Build the collection set for the peer\n         final CollectionSetBuilder builder = new CollectionSetBuilder(agent);\n-        builder.withTimestamp(Date.from(timestamp));\n+        builder.withTimestamp(Date.from(timestamp(stats.getPeer().getTimestamp())));\n         builder.withStringAttribute(peerResource, \"bmp\", \"address\", peerAddress);\n-        builder.withStringAttribute(peerResource, \"bmp\", \"as\", as);\n-        builder.withStringAttribute(peerResource, \"bmp\", \"id\", id);\n-\n-        final BsonDocument stats = document.getDocument(\"stats\");\n-        for (final String key : stats.keySet()) {\n-            final BsonDocument metric = stats.getDocument(key);\n-\n-            final String identifier = String.format(\"bmp_%s_%s\", peerAddress, key);\n-\n-            getInt64(metric, \"counter\").ifPresent(counter -> {\n-                Optional.ofNullable(METRIC_ATTRIBUTE_MAP.get(key)).ifPresent(name -> {\n-                    builder.withIdentifiedNumericAttribute(peerResource, \"bmp\", name, counter, AttributeType.COUNTER, identifier);\n-                });\n-            });\n-            getInt64(metric, \"gauge\").ifPresent(gauge -> {\n-                Optional.ofNullable(METRIC_ATTRIBUTE_MAP.get(key)).ifPresent(name -> {\n-                    builder.withIdentifiedNumericAttribute(peerResource, \"bmp\", name, gauge, AttributeType.GAUGE, identifier);\n-                });\n-            });\n-        }\n+        builder.withStringAttribute(peerResource, \"bmp\", \"as\", Long.toString(stats.getPeer().getAs()));\n+        builder.withStringAttribute(peerResource, \"bmp\", \"id\", Long.toString(stats.getPeer().getId()));\n+\n+        final Function<String, Consumer<Transport.StatisticsReportPacket.Counter>> addCounter = (name) -> (counter) -> {\n+            final String identifier = String.format(\"bmp_%s_%s\", peerAddress, name);\n+            builder.withIdentifiedNumericAttribute(peerResource, \"bmp\", name, counter.getCount(), AttributeType.COUNTER, identifier);\n+        };\n+\n+        final Function<String, Consumer<Transport.StatisticsReportPacket.Gauge>> addGauge = (name) -> (gauge) -> {\n+            final String identifier = String.format(\"bmp_%s_%s\", peerAddress, name);\n+            builder.withIdentifiedNumericAttribute(peerResource, \"bmp\", name, gauge.getValue(), AttributeType.COUNTER, identifier);\n+        };\n+\n+        Optional.ofNullable(stats.getRejected()).ifPresent(addCounter.apply(\"rejected\"));\n+        Optional.ofNullable(stats.getDuplicatePrefix()).ifPresent(addCounter.apply(\"duplicate_prefix\"));\n+        Optional.ofNullable(stats.getDuplicateWithdraw()).ifPresent(addCounter.apply(\"duplicate_withdraw\"));\n+        Optional.ofNullable(stats.getInvalidUpdateDueToAsConfedLoop()).ifPresent(addCounter.apply(\"inv_as_confed_loop\"));\n+        Optional.ofNullable(stats.getInvalidUpdateDueToAsPathLoop()).ifPresent(addCounter.apply(\"inv_as_path_loop\"));\n+        Optional.ofNullable(stats.getInvalidUpdateDueToClusterListLoop()).ifPresent(addCounter.apply(\"inv_cl_loop\"));\n+        Optional.ofNullable(stats.getInvalidUpdateDueToOriginatorId()).ifPresent(addCounter.apply(\"inv_originator_id\"));\n+        Optional.ofNullable(stats.getAdjRibIn()).ifPresent(addGauge.apply(\"adj_rib_in\"));\n+        Optional.ofNullable(stats.getAdjRibOut()).ifPresent(addGauge.apply(\"adj_rib_out\"));\n+\n+        // TODO fooker: Add per AFI counters (perAfiAdjRibIn and perAfiLocRib)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d64ac636484f79132ed59a5504cad11bced8acd"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1NzkzMQ==", "bodyText": "Tracking issue is https://issues.opennms.org/browse/NMS-12553", "url": "https://github.com/OpenNMS/opennms/pull/2900#discussion_r383757931", "createdAt": "2020-02-25T09:35:25Z", "author": {"login": "fooker"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpTelemetryAdapter.java", "diffHunk": "@@ -99,40 +100,46 @@ public BmpTelemetryAdapter(final AdapterDefinition adapterConfig,\n         final CollectionAgent agent = this.collectionAgentFactory.createCollectionAgent(Integer.toString(exporterNodeId.get()), exporterAddress);\n \n         // Extract peer details\n-        final String peerAddress = getString(document, \"peer\", \"address\").get();\n-        final Instant timestamp = Instant.ofEpochSecond(getInt64(document, \"peer\", \"timestamp\", \"epoch\").get(),\n-                                                        getInt64(document, \"peer\", \"timestamp\", \"nanos\").orElse(0L));\n-        final String as = Long.toString(getInt64(document, \"peer\", \"as\").get());\n-        final String id = Long.toString(getInt64(document, \"peer\", \"id\").get());\n+        final String peerAddress = InetAddressUtils.str(address(stats.getPeer().getAddress()));\n \n         // Build resource for the peer\n         final NodeLevelResource nodeResource = new NodeLevelResource(agent.getNodeId());\n         final DeferredGenericTypeResource peerResource = new DeferredGenericTypeResource(nodeResource, \"bmp\", peerAddress);\n \n         // Build the collection set for the peer\n         final CollectionSetBuilder builder = new CollectionSetBuilder(agent);\n-        builder.withTimestamp(Date.from(timestamp));\n+        builder.withTimestamp(Date.from(timestamp(stats.getPeer().getTimestamp())));\n         builder.withStringAttribute(peerResource, \"bmp\", \"address\", peerAddress);\n-        builder.withStringAttribute(peerResource, \"bmp\", \"as\", as);\n-        builder.withStringAttribute(peerResource, \"bmp\", \"id\", id);\n-\n-        final BsonDocument stats = document.getDocument(\"stats\");\n-        for (final String key : stats.keySet()) {\n-            final BsonDocument metric = stats.getDocument(key);\n-\n-            final String identifier = String.format(\"bmp_%s_%s\", peerAddress, key);\n-\n-            getInt64(metric, \"counter\").ifPresent(counter -> {\n-                Optional.ofNullable(METRIC_ATTRIBUTE_MAP.get(key)).ifPresent(name -> {\n-                    builder.withIdentifiedNumericAttribute(peerResource, \"bmp\", name, counter, AttributeType.COUNTER, identifier);\n-                });\n-            });\n-            getInt64(metric, \"gauge\").ifPresent(gauge -> {\n-                Optional.ofNullable(METRIC_ATTRIBUTE_MAP.get(key)).ifPresent(name -> {\n-                    builder.withIdentifiedNumericAttribute(peerResource, \"bmp\", name, gauge, AttributeType.GAUGE, identifier);\n-                });\n-            });\n-        }\n+        builder.withStringAttribute(peerResource, \"bmp\", \"as\", Long.toString(stats.getPeer().getAs()));\n+        builder.withStringAttribute(peerResource, \"bmp\", \"id\", Long.toString(stats.getPeer().getId()));\n+\n+        final Function<String, Consumer<Transport.StatisticsReportPacket.Counter>> addCounter = (name) -> (counter) -> {\n+            final String identifier = String.format(\"bmp_%s_%s\", peerAddress, name);\n+            builder.withIdentifiedNumericAttribute(peerResource, \"bmp\", name, counter.getCount(), AttributeType.COUNTER, identifier);\n+        };\n+\n+        final Function<String, Consumer<Transport.StatisticsReportPacket.Gauge>> addGauge = (name) -> (gauge) -> {\n+            final String identifier = String.format(\"bmp_%s_%s\", peerAddress, name);\n+            builder.withIdentifiedNumericAttribute(peerResource, \"bmp\", name, gauge.getValue(), AttributeType.COUNTER, identifier);\n+        };\n+\n+        Optional.ofNullable(stats.getRejected()).ifPresent(addCounter.apply(\"rejected\"));\n+        Optional.ofNullable(stats.getDuplicatePrefix()).ifPresent(addCounter.apply(\"duplicate_prefix\"));\n+        Optional.ofNullable(stats.getDuplicateWithdraw()).ifPresent(addCounter.apply(\"duplicate_withdraw\"));\n+        Optional.ofNullable(stats.getInvalidUpdateDueToAsConfedLoop()).ifPresent(addCounter.apply(\"inv_as_confed_loop\"));\n+        Optional.ofNullable(stats.getInvalidUpdateDueToAsPathLoop()).ifPresent(addCounter.apply(\"inv_as_path_loop\"));\n+        Optional.ofNullable(stats.getInvalidUpdateDueToClusterListLoop()).ifPresent(addCounter.apply(\"inv_cl_loop\"));\n+        Optional.ofNullable(stats.getInvalidUpdateDueToOriginatorId()).ifPresent(addCounter.apply(\"inv_originator_id\"));\n+        Optional.ofNullable(stats.getAdjRibIn()).ifPresent(addGauge.apply(\"adj_rib_in\"));\n+        Optional.ofNullable(stats.getAdjRibOut()).ifPresent(addGauge.apply(\"adj_rib_out\"));\n+\n+        // TODO fooker: Add per AFI counters (perAfiAdjRibIn and perAfiLocRib)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzczMjExMg=="}, "originalCommit": {"oid": "5d64ac636484f79132ed59a5504cad11bced8acd"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjE5NTM0OnYy", "diffSide": "RIGHT", "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpTelemetryAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODo0ODoyM1rOFt9KPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODo0ODoyM1rOFt9KPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzczMjI4Nw==", "bodyText": "Similarly here.", "url": "https://github.com/OpenNMS/opennms/pull/2900#discussion_r383732287", "createdAt": "2020-02-25T08:48:23Z", "author": {"login": "j-white"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpTelemetryAdapter.java", "diffHunk": "@@ -77,15 +75,18 @@ public BmpTelemetryAdapter(final AdapterDefinition adapterConfig,\n     @Override\n     public Stream<CollectionSetWithAgent> handleCollectionMessage(final TelemetryMessageLogEntry message,\n                                                                   final TelemetryMessageLog messageLog) {\n-        LOG.debug(\"Received {} telemetry messages\", messageLog.getMessageList().size());\n-\n         LOG.trace(\"Parsing packet: {}\", message);\n-        final BsonDocument document = new RawBsonDocument(message.getByteArray());\n+        final Transport.Message document;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d64ac636484f79132ed59a5504cad11bced8acd"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 773, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}