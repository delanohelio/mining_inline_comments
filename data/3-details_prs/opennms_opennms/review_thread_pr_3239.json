{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzOTgwMzg4", "number": 3239, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwNzo1NzoyNlrOFPBmCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMDozNjoyM1rOFVnIBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMjk5MDgzOnYy", "diffSide": "RIGHT", "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/AsnInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwNzo1NzoyNlrOIUIg4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwODoxODoyNVrOIUKhzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzk4MTkyMA==", "bodyText": "Maybe this should be updated to 2021 now", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r557981920", "createdAt": "2021-01-15T07:57:26Z", "author": {"login": "christianpape"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/AsnInfo.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODAxNDkyNA==", "bodyText": "This applies to all the other new headers too", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r558014924", "createdAt": "2021-01-15T08:18:25Z", "author": {"login": "christianpape"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/AsnInfo.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzk4MTkyMA=="}, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMzAzNTg3OnYy", "diffSide": "RIGHT", "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/AsnInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwODowMTozOVrOIUI_-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwODowMTozOVrOIUI_-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzk4OTg4MQ==", "bodyText": "Is OrgName ||\u00a0descr right? Isn't it something like OrgName || orgname?", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r557989881", "createdAt": "2021-01-15T08:01:39Z", "author": {"login": "christianpape"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/AsnInfo.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.bmp.adapter;\n+\n+import java.util.Optional;\n+\n+public class AsnInfo {\n+\n+    private Long asn;\n+    private String asName;\n+    private String orgId;\n+    private String orgName;\n+    private String address;\n+    private String city;\n+    private String stateProv;\n+    private String postalCode;\n+    private String country;\n+    private String source;\n+    private String rawOutput;\n+    private String remarks;\n+\n+    public AsnInfo(Long asn, String source, String rawOutput) {\n+        this.asn = asn;\n+        this.source = source;\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public Long getAsn() {\n+        return asn;\n+    }\n+\n+    public void setAsn(Long asn) {\n+        this.asn = asn;\n+    }\n+\n+    public String getAsName() {\n+        return asName;\n+    }\n+\n+    public void setAsName(String asName) {\n+        this.asName = asName;\n+    }\n+\n+    public String getOrgId() {\n+        return orgId;\n+    }\n+\n+    public void setOrgId(String orgId) {\n+        this.orgId = orgId;\n+    }\n+\n+    public String getOrgName() {\n+        return orgName;\n+    }\n+\n+    public void setOrgName(String orgName) {\n+        this.orgName = orgName;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    public String getCity() {\n+        return city;\n+    }\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public String getStateProv() {\n+        return stateProv;\n+    }\n+\n+    public void setStateProv(String stateProv) {\n+        this.stateProv = stateProv;\n+    }\n+\n+    public String getPostalCode() {\n+        return postalCode;\n+    }\n+\n+    public void setPostalCode(String postalCode) {\n+        this.postalCode = postalCode;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    public void setSource(String source) {\n+        this.source = source;\n+    }\n+\n+    public String getRawOutput() {\n+        return rawOutput;\n+    }\n+\n+    public void setRawOutput(String rawOutput) {\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public String getRemarks() {\n+        return remarks;\n+    }\n+\n+    public void setRemarks(String remarks) {\n+        this.remarks = remarks;\n+    }\n+\n+    public static AsnInfo parseOutput(Long asn, String source, String rawOutput) {\n+        AsnInfo asnInfo = new AsnInfo(asn, source, rawOutput);\n+        // Split output into lines\n+        String[] lines = rawOutput.split(\"\\\\r?\\\\n\");\n+        for (String line : lines) {\n+            if (line.contains(\"ASName\") || line.contains(\"as-name\")) {\n+                getSubStringAfterColon(line).ifPresent(asnInfo::setAsName);\n+                continue;\n+            }\n+            if (line.contains(\"OrgName\") || line.contains(\"descr\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMzAzODE4OnYy", "diffSide": "RIGHT", "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/AsnInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwODowMTo1MlrOIUJBeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwODowMTo1MlrOIUJBeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzk5MDI2Ng==", "bodyText": "Same here", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r557990266", "createdAt": "2021-01-15T08:01:52Z", "author": {"login": "christianpape"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/AsnInfo.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.bmp.adapter;\n+\n+import java.util.Optional;\n+\n+public class AsnInfo {\n+\n+    private Long asn;\n+    private String asName;\n+    private String orgId;\n+    private String orgName;\n+    private String address;\n+    private String city;\n+    private String stateProv;\n+    private String postalCode;\n+    private String country;\n+    private String source;\n+    private String rawOutput;\n+    private String remarks;\n+\n+    public AsnInfo(Long asn, String source, String rawOutput) {\n+        this.asn = asn;\n+        this.source = source;\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public Long getAsn() {\n+        return asn;\n+    }\n+\n+    public void setAsn(Long asn) {\n+        this.asn = asn;\n+    }\n+\n+    public String getAsName() {\n+        return asName;\n+    }\n+\n+    public void setAsName(String asName) {\n+        this.asName = asName;\n+    }\n+\n+    public String getOrgId() {\n+        return orgId;\n+    }\n+\n+    public void setOrgId(String orgId) {\n+        this.orgId = orgId;\n+    }\n+\n+    public String getOrgName() {\n+        return orgName;\n+    }\n+\n+    public void setOrgName(String orgName) {\n+        this.orgName = orgName;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    public String getCity() {\n+        return city;\n+    }\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public String getStateProv() {\n+        return stateProv;\n+    }\n+\n+    public void setStateProv(String stateProv) {\n+        this.stateProv = stateProv;\n+    }\n+\n+    public String getPostalCode() {\n+        return postalCode;\n+    }\n+\n+    public void setPostalCode(String postalCode) {\n+        this.postalCode = postalCode;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    public void setSource(String source) {\n+        this.source = source;\n+    }\n+\n+    public String getRawOutput() {\n+        return rawOutput;\n+    }\n+\n+    public void setRawOutput(String rawOutput) {\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public String getRemarks() {\n+        return remarks;\n+    }\n+\n+    public void setRemarks(String remarks) {\n+        this.remarks = remarks;\n+    }\n+\n+    public static AsnInfo parseOutput(Long asn, String source, String rawOutput) {\n+        AsnInfo asnInfo = new AsnInfo(asn, source, rawOutput);\n+        // Split output into lines\n+        String[] lines = rawOutput.split(\"\\\\r?\\\\n\");\n+        for (String line : lines) {\n+            if (line.contains(\"ASName\") || line.contains(\"as-name\")) {\n+                getSubStringAfterColon(line).ifPresent(asnInfo::setAsName);\n+                continue;\n+            }\n+            if (line.contains(\"OrgName\") || line.contains(\"descr\")) {\n+                getSubStringAfterColon(line).ifPresent(asnInfo::setOrgName);\n+                continue;\n+            }\n+            if (line.contains(\"OrgId\") || line.contains(\"org\")) {\n+                getSubStringAfterColon(line).ifPresent(asnInfo::setOrgId);\n+                continue;\n+            }\n+            if (line.contains(\"Address\") || line.contains(\"descr\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMzA5MDQ1OnYy", "diffSide": "RIGHT", "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpMessagePersister.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwODowODoyNlrOIUJlPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwODowODoyNlrOIUJlPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzk5OTQyMQ==", "bodyText": "Remarks are missing, right?", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r557999421", "createdAt": "2021-01-15T08:08:26Z", "author": {"login": "christianpape"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpMessagePersister.java", "diffHunk": "@@ -540,6 +600,119 @@ private BmpGlobalIpRib buildGlobalIpRib(PrefixByAS prefixByAS) {\n \n     }\n \n+    private BmpAsnInfo fetchAndBuildAsnInfo(Long asn) {\n+        Optional<AsnInfo> asnInfoOptional = BmpWhoIsClient.getAsnInfo(asn);\n+        if (asnInfoOptional.isPresent()) {\n+            BmpAsnInfo bmpAsnInfo = new BmpAsnInfo();\n+            AsnInfo asnInfo = asnInfoOptional.get();\n+            bmpAsnInfo.setAsn(asnInfo.getAsn());\n+            bmpAsnInfo.setOrgId(asnInfo.getOrgId());\n+            bmpAsnInfo.setAsName(asnInfo.getAsName());\n+            bmpAsnInfo.setOrgName(asnInfo.getOrgName());\n+            bmpAsnInfo.setAddress(asnInfo.getAddress());\n+            bmpAsnInfo.setCity(asnInfo.getCity());\n+            bmpAsnInfo.setStateProv(asnInfo.getStateProv());\n+            bmpAsnInfo.setPostalCode(asnInfo.getPostalCode());\n+            bmpAsnInfo.setCountry(asnInfo.getCountry());\n+            bmpAsnInfo.setSource(asnInfo.getSource());\n+            bmpAsnInfo.setRawOutput(asnInfo.getRawOutput());\n+            bmpAsnInfo.setLastUpdated(Date.from(Instant.now()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMzMyNzg1OnYy", "diffSide": "RIGHT", "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/RouteInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwODozNjoxNFrOIUMHOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwODozNjoxNFrOIUMHOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA0MDg4OA==", "bodyText": "I do not understand why the prefix is tried to be parsed twice. StringUtils.parseInt also uses Integer.parseInt().", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r558040888", "createdAt": "2021-01-15T08:36:14Z", "author": {"login": "christianpape"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/RouteInfo.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.bmp.adapter;\n+\n+import java.net.InetAddress;\n+import java.util.Optional;\n+\n+import org.opennms.core.utils.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class RouteInfo {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(RouteInfo.class);\n+\n+    private String prefix;\n+\n+    private Integer prefixLen;\n+\n+    private String description;\n+\n+    private Long originAs;\n+\n+    private String source;\n+\n+    public String getPrefix() {\n+        return prefix;\n+    }\n+\n+    public void setPrefix(String prefix) {\n+        this.prefix = prefix;\n+    }\n+\n+    public Integer getPrefixLen() {\n+        return prefixLen;\n+    }\n+\n+    public void setPrefixLen(Integer prefixLen) {\n+        this.prefixLen = prefixLen;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public Long getOriginAs() {\n+        return originAs;\n+    }\n+\n+    public void setOriginAs(Long originAs) {\n+        this.originAs = originAs;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    public void setSource(String source) {\n+        this.source = source;\n+    }\n+\n+    public static RouteInfo parseOutput(String rawOutput) {\n+        RouteInfo routeInfo = new RouteInfo();\n+        // Split output into lines\n+        String[] lines = rawOutput.split(\"\\\\r?\\\\n\");\n+        for (String line : lines) {\n+            if (line.contains(\"route\")) {\n+                getSubStringAfterColon(line).ifPresent(route -> {\n+                    if (route.contains(\"/\")) {\n+                        String[] prefixArray = route.split(\"/\", 2);\n+                        if(isValidIpAddress(prefixArray[0])) {\n+                            routeInfo.setPrefix(prefixArray[0]);\n+                        }\n+                        Integer prefixLen = StringUtils.parseInt(prefixArray[1], null);\n+                        if (prefixLen != null) {\n+                            routeInfo.setPrefixLen(Integer.parseInt(prefixArray[1]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMzM3NzA4OnYy", "diffSide": "RIGHT", "path": "features/telemetry/protocols/bmp/persistence/api/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/persistence/api/BmpPeer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwODo0MTozMlrOIUMoZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwODo0MTozMlrOIUMoZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA0OTM4Mg==", "bodyText": "should the subCode added here too?", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r558049382", "createdAt": "2021-01-15T08:41:32Z", "author": {"login": "christianpape"}, "path": "features/telemetry/protocols/bmp/persistence/api/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/persistence/api/BmpPeer.java", "diffHunk": "@@ -397,6 +419,7 @@ public boolean equals(Object o) {\n                 Objects.equals(bmpRouter, bmpPeer.bmpRouter) &&\n                 Objects.equals(peerRd, bmpPeer.peerRd) &&\n                 Objects.equals(peerAddr, bmpPeer.peerAddr) &&\n+                Objects.equals(peerAsn, bmpPeer.peerAsn) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMzM3OTE2OnYy", "diffSide": "RIGHT", "path": "features/telemetry/protocols/bmp/persistence/api/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/persistence/api/BmpPeer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwODo0MTo0NFrOIUMpsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwODo0MTo0NFrOIUMpsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA0OTcxMg==", "bodyText": "same here", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r558049712", "createdAt": "2021-01-15T08:41:44Z", "author": {"login": "christianpape"}, "path": "features/telemetry/protocols/bmp/persistence/api/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/persistence/api/BmpPeer.java", "diffHunk": "@@ -419,7 +442,7 @@ public boolean equals(Object o) {\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(hashId, bmpRouter, peerRd, isIpv4, peerAddr, name, peerBgpId, state, isL3VPNPeer, timestamp, isPrePolicy, geoIpStart, localIp, localBgpId, localPort, localHoldTime, localAsn, remotePort, remoteHoldTime, sentCapabilities, receivedCapabilities, bmpReason, bgpErrCode, errorText, isLocRib, isLocRibFiltered, tableName);\n+        return Objects.hash(hashId, bmpRouter, peerRd, isIpv4, peerAddr, peerAsn, name, peerBgpId, state, isL3VPNPeer, timestamp, isPrePolicy, geoIpStart, localIp, localBgpId, localPort, localHoldTime, localAsn, remotePort, remoteHoldTime, sentCapabilities, receivedCapabilities, bmpReason, bgpErrCode, errorText, isLocRib, isLocRibFiltered, tableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMzM4MDUwOnYy", "diffSide": "RIGHT", "path": "features/telemetry/protocols/bmp/persistence/api/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/persistence/api/BmpPeer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwODo0MTo1M1rOIUMqrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwODo0MTo1M1rOIUMqrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA0OTk2NQ==", "bodyText": "...and here", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r558049965", "createdAt": "2021-01-15T08:41:53Z", "author": {"login": "christianpape"}, "path": "features/telemetry/protocols/bmp/persistence/api/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/persistence/api/BmpPeer.java", "diffHunk": "@@ -431,6 +454,7 @@ public String toString() {\n                 \", peerRd='\" + peerRd + '\\'' +\n                 \", isIpv4=\" + isIpv4 +\n                 \", peerAddr='\" + peerAddr + '\\'' +\n+                \", peerAsn='\" + peerAsn + '\\'' +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNDQxMTM5OnYy", "diffSide": "RIGHT", "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/AsnInfo.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMDo0OTozOFrOIUXeVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxNDo0NToyMFrOIaaWDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyNzAzMA==", "bodyText": "As far as I know, there can be entries can appear more than once. For instance there can be multiple address entries if the address is more than one line. The OpenBMP-implementation concatenates these strings before persisting them. So, this is missing here.", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r558227030", "createdAt": "2021-01-15T10:49:38Z", "author": {"login": "christianpape"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/AsnInfo.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.bmp.adapter;\n+\n+import java.util.Optional;\n+\n+public class AsnInfo {\n+\n+    private Long asn;\n+    private String asName;\n+    private String orgId;\n+    private String orgName;\n+    private String address;\n+    private String city;\n+    private String stateProv;\n+    private String postalCode;\n+    private String country;\n+    private String source;\n+    private String rawOutput;\n+    private String remarks;\n+\n+    public AsnInfo(Long asn, String source, String rawOutput) {\n+        this.asn = asn;\n+        this.source = source;\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public Long getAsn() {\n+        return asn;\n+    }\n+\n+    public void setAsn(Long asn) {\n+        this.asn = asn;\n+    }\n+\n+    public String getAsName() {\n+        return asName;\n+    }\n+\n+    public void setAsName(String asName) {\n+        this.asName = asName;\n+    }\n+\n+    public String getOrgId() {\n+        return orgId;\n+    }\n+\n+    public void setOrgId(String orgId) {\n+        this.orgId = orgId;\n+    }\n+\n+    public String getOrgName() {\n+        return orgName;\n+    }\n+\n+    public void setOrgName(String orgName) {\n+        this.orgName = orgName;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    public String getCity() {\n+        return city;\n+    }\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public String getStateProv() {\n+        return stateProv;\n+    }\n+\n+    public void setStateProv(String stateProv) {\n+        this.stateProv = stateProv;\n+    }\n+\n+    public String getPostalCode() {\n+        return postalCode;\n+    }\n+\n+    public void setPostalCode(String postalCode) {\n+        this.postalCode = postalCode;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    public void setSource(String source) {\n+        this.source = source;\n+    }\n+\n+    public String getRawOutput() {\n+        return rawOutput;\n+    }\n+\n+    public void setRawOutput(String rawOutput) {\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public String getRemarks() {\n+        return remarks;\n+    }\n+\n+    public void setRemarks(String remarks) {\n+        this.remarks = remarks;\n+    }\n+\n+    public static AsnInfo parseOutput(Long asn, String source, String rawOutput) {\n+        AsnInfo asnInfo = new AsnInfo(asn, source, rawOutput);\n+        // Split output into lines\n+        String[] lines = rawOutput.split(\"\\\\r?\\\\n\");\n+        for (String line : lines) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDYxOTg0OA==", "bodyText": "yeah, OpenBMP has this handling for RIPE. I m looking for an example AS number to properly implement this.  Currently all the responses I'm getting are from ARIN and RTT.", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r560619848", "createdAt": "2021-01-20T01:50:55Z", "author": {"login": "cgorantla"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/AsnInfo.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.bmp.adapter;\n+\n+import java.util.Optional;\n+\n+public class AsnInfo {\n+\n+    private Long asn;\n+    private String asName;\n+    private String orgId;\n+    private String orgName;\n+    private String address;\n+    private String city;\n+    private String stateProv;\n+    private String postalCode;\n+    private String country;\n+    private String source;\n+    private String rawOutput;\n+    private String remarks;\n+\n+    public AsnInfo(Long asn, String source, String rawOutput) {\n+        this.asn = asn;\n+        this.source = source;\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public Long getAsn() {\n+        return asn;\n+    }\n+\n+    public void setAsn(Long asn) {\n+        this.asn = asn;\n+    }\n+\n+    public String getAsName() {\n+        return asName;\n+    }\n+\n+    public void setAsName(String asName) {\n+        this.asName = asName;\n+    }\n+\n+    public String getOrgId() {\n+        return orgId;\n+    }\n+\n+    public void setOrgId(String orgId) {\n+        this.orgId = orgId;\n+    }\n+\n+    public String getOrgName() {\n+        return orgName;\n+    }\n+\n+    public void setOrgName(String orgName) {\n+        this.orgName = orgName;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    public String getCity() {\n+        return city;\n+    }\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public String getStateProv() {\n+        return stateProv;\n+    }\n+\n+    public void setStateProv(String stateProv) {\n+        this.stateProv = stateProv;\n+    }\n+\n+    public String getPostalCode() {\n+        return postalCode;\n+    }\n+\n+    public void setPostalCode(String postalCode) {\n+        this.postalCode = postalCode;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    public void setSource(String source) {\n+        this.source = source;\n+    }\n+\n+    public String getRawOutput() {\n+        return rawOutput;\n+    }\n+\n+    public void setRawOutput(String rawOutput) {\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public String getRemarks() {\n+        return remarks;\n+    }\n+\n+    public void setRemarks(String remarks) {\n+        this.remarks = remarks;\n+    }\n+\n+    public static AsnInfo parseOutput(Long asn, String source, String rawOutput) {\n+        AsnInfo asnInfo = new AsnInfo(asn, source, rawOutput);\n+        // Split output into lines\n+        String[] lines = rawOutput.split(\"\\\\r?\\\\n\");\n+        for (String line : lines) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyNzAzMA=="}, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjAwMzIyNw==", "bodyText": "I updated few things but still didn't get an example for having Address in multiple lines even with RIPE. We can address this later if we find such scenarios.", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r562003227", "createdAt": "2021-01-21T16:07:54Z", "author": {"login": "cgorantla"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/AsnInfo.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.bmp.adapter;\n+\n+import java.util.Optional;\n+\n+public class AsnInfo {\n+\n+    private Long asn;\n+    private String asName;\n+    private String orgId;\n+    private String orgName;\n+    private String address;\n+    private String city;\n+    private String stateProv;\n+    private String postalCode;\n+    private String country;\n+    private String source;\n+    private String rawOutput;\n+    private String remarks;\n+\n+    public AsnInfo(Long asn, String source, String rawOutput) {\n+        this.asn = asn;\n+        this.source = source;\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public Long getAsn() {\n+        return asn;\n+    }\n+\n+    public void setAsn(Long asn) {\n+        this.asn = asn;\n+    }\n+\n+    public String getAsName() {\n+        return asName;\n+    }\n+\n+    public void setAsName(String asName) {\n+        this.asName = asName;\n+    }\n+\n+    public String getOrgId() {\n+        return orgId;\n+    }\n+\n+    public void setOrgId(String orgId) {\n+        this.orgId = orgId;\n+    }\n+\n+    public String getOrgName() {\n+        return orgName;\n+    }\n+\n+    public void setOrgName(String orgName) {\n+        this.orgName = orgName;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    public String getCity() {\n+        return city;\n+    }\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public String getStateProv() {\n+        return stateProv;\n+    }\n+\n+    public void setStateProv(String stateProv) {\n+        this.stateProv = stateProv;\n+    }\n+\n+    public String getPostalCode() {\n+        return postalCode;\n+    }\n+\n+    public void setPostalCode(String postalCode) {\n+        this.postalCode = postalCode;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    public void setSource(String source) {\n+        this.source = source;\n+    }\n+\n+    public String getRawOutput() {\n+        return rawOutput;\n+    }\n+\n+    public void setRawOutput(String rawOutput) {\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public String getRemarks() {\n+        return remarks;\n+    }\n+\n+    public void setRemarks(String remarks) {\n+        this.remarks = remarks;\n+    }\n+\n+    public static AsnInfo parseOutput(Long asn, String source, String rawOutput) {\n+        AsnInfo asnInfo = new AsnInfo(asn, source, rawOutput);\n+        // Split output into lines\n+        String[] lines = rawOutput.split(\"\\\\r?\\\\n\");\n+        for (String line : lines) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyNzAzMA=="}, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQ2OTgyNQ==", "bodyText": "Ok", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r562469825", "createdAt": "2021-01-22T08:39:23Z", "author": {"login": "christianpape"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/AsnInfo.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.bmp.adapter;\n+\n+import java.util.Optional;\n+\n+public class AsnInfo {\n+\n+    private Long asn;\n+    private String asName;\n+    private String orgId;\n+    private String orgName;\n+    private String address;\n+    private String city;\n+    private String stateProv;\n+    private String postalCode;\n+    private String country;\n+    private String source;\n+    private String rawOutput;\n+    private String remarks;\n+\n+    public AsnInfo(Long asn, String source, String rawOutput) {\n+        this.asn = asn;\n+        this.source = source;\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public Long getAsn() {\n+        return asn;\n+    }\n+\n+    public void setAsn(Long asn) {\n+        this.asn = asn;\n+    }\n+\n+    public String getAsName() {\n+        return asName;\n+    }\n+\n+    public void setAsName(String asName) {\n+        this.asName = asName;\n+    }\n+\n+    public String getOrgId() {\n+        return orgId;\n+    }\n+\n+    public void setOrgId(String orgId) {\n+        this.orgId = orgId;\n+    }\n+\n+    public String getOrgName() {\n+        return orgName;\n+    }\n+\n+    public void setOrgName(String orgName) {\n+        this.orgName = orgName;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    public String getCity() {\n+        return city;\n+    }\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public String getStateProv() {\n+        return stateProv;\n+    }\n+\n+    public void setStateProv(String stateProv) {\n+        this.stateProv = stateProv;\n+    }\n+\n+    public String getPostalCode() {\n+        return postalCode;\n+    }\n+\n+    public void setPostalCode(String postalCode) {\n+        this.postalCode = postalCode;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    public void setSource(String source) {\n+        this.source = source;\n+    }\n+\n+    public String getRawOutput() {\n+        return rawOutput;\n+    }\n+\n+    public void setRawOutput(String rawOutput) {\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public String getRemarks() {\n+        return remarks;\n+    }\n+\n+    public void setRemarks(String remarks) {\n+        this.remarks = remarks;\n+    }\n+\n+    public static AsnInfo parseOutput(Long asn, String source, String rawOutput) {\n+        AsnInfo asnInfo = new AsnInfo(asn, source, rawOutput);\n+        // Split output into lines\n+        String[] lines = rawOutput.split(\"\\\\r?\\\\n\");\n+        for (String line : lines) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyNzAzMA=="}, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjcxMzQ4Mg==", "bodyText": "@cgorantla https://www.ripe.net/manage-ips-and-asns/db/support/querying-the-ripe-database has some examples showing multiple address lines. What do you need for testing? Maybe I can provide something.", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r562713482", "createdAt": "2021-01-22T15:33:49Z", "author": {"login": "fooker"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/AsnInfo.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.bmp.adapter;\n+\n+import java.util.Optional;\n+\n+public class AsnInfo {\n+\n+    private Long asn;\n+    private String asName;\n+    private String orgId;\n+    private String orgName;\n+    private String address;\n+    private String city;\n+    private String stateProv;\n+    private String postalCode;\n+    private String country;\n+    private String source;\n+    private String rawOutput;\n+    private String remarks;\n+\n+    public AsnInfo(Long asn, String source, String rawOutput) {\n+        this.asn = asn;\n+        this.source = source;\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public Long getAsn() {\n+        return asn;\n+    }\n+\n+    public void setAsn(Long asn) {\n+        this.asn = asn;\n+    }\n+\n+    public String getAsName() {\n+        return asName;\n+    }\n+\n+    public void setAsName(String asName) {\n+        this.asName = asName;\n+    }\n+\n+    public String getOrgId() {\n+        return orgId;\n+    }\n+\n+    public void setOrgId(String orgId) {\n+        this.orgId = orgId;\n+    }\n+\n+    public String getOrgName() {\n+        return orgName;\n+    }\n+\n+    public void setOrgName(String orgName) {\n+        this.orgName = orgName;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    public String getCity() {\n+        return city;\n+    }\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public String getStateProv() {\n+        return stateProv;\n+    }\n+\n+    public void setStateProv(String stateProv) {\n+        this.stateProv = stateProv;\n+    }\n+\n+    public String getPostalCode() {\n+        return postalCode;\n+    }\n+\n+    public void setPostalCode(String postalCode) {\n+        this.postalCode = postalCode;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    public void setSource(String source) {\n+        this.source = source;\n+    }\n+\n+    public String getRawOutput() {\n+        return rawOutput;\n+    }\n+\n+    public void setRawOutput(String rawOutput) {\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public String getRemarks() {\n+        return remarks;\n+    }\n+\n+    public void setRemarks(String remarks) {\n+        this.remarks = remarks;\n+    }\n+\n+    public static AsnInfo parseOutput(Long asn, String source, String rawOutput) {\n+        AsnInfo asnInfo = new AsnInfo(asn, source, rawOutput);\n+        // Split output into lines\n+        String[] lines = rawOutput.split(\"\\\\r?\\\\n\");\n+        for (String line : lines) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyNzAzMA=="}, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjcxNzg2MA==", "bodyText": "I was looking for an AS number that can give us output just like above example.\nWe need to split multiple address lines into  address, city,  state and country. I'm looking if there is any standard way to do that.", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r562717860", "createdAt": "2021-01-22T15:40:10Z", "author": {"login": "cgorantla"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/AsnInfo.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.bmp.adapter;\n+\n+import java.util.Optional;\n+\n+public class AsnInfo {\n+\n+    private Long asn;\n+    private String asName;\n+    private String orgId;\n+    private String orgName;\n+    private String address;\n+    private String city;\n+    private String stateProv;\n+    private String postalCode;\n+    private String country;\n+    private String source;\n+    private String rawOutput;\n+    private String remarks;\n+\n+    public AsnInfo(Long asn, String source, String rawOutput) {\n+        this.asn = asn;\n+        this.source = source;\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public Long getAsn() {\n+        return asn;\n+    }\n+\n+    public void setAsn(Long asn) {\n+        this.asn = asn;\n+    }\n+\n+    public String getAsName() {\n+        return asName;\n+    }\n+\n+    public void setAsName(String asName) {\n+        this.asName = asName;\n+    }\n+\n+    public String getOrgId() {\n+        return orgId;\n+    }\n+\n+    public void setOrgId(String orgId) {\n+        this.orgId = orgId;\n+    }\n+\n+    public String getOrgName() {\n+        return orgName;\n+    }\n+\n+    public void setOrgName(String orgName) {\n+        this.orgName = orgName;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    public String getCity() {\n+        return city;\n+    }\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public String getStateProv() {\n+        return stateProv;\n+    }\n+\n+    public void setStateProv(String stateProv) {\n+        this.stateProv = stateProv;\n+    }\n+\n+    public String getPostalCode() {\n+        return postalCode;\n+    }\n+\n+    public void setPostalCode(String postalCode) {\n+        this.postalCode = postalCode;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    public void setSource(String source) {\n+        this.source = source;\n+    }\n+\n+    public String getRawOutput() {\n+        return rawOutput;\n+    }\n+\n+    public void setRawOutput(String rawOutput) {\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public String getRemarks() {\n+        return remarks;\n+    }\n+\n+    public void setRemarks(String remarks) {\n+        this.remarks = remarks;\n+    }\n+\n+    public static AsnInfo parseOutput(Long asn, String source, String rawOutput) {\n+        AsnInfo asnInfo = new AsnInfo(asn, source, rawOutput);\n+        // Split output into lines\n+        String[] lines = rawOutput.split(\"\\\\r?\\\\n\");\n+        for (String line : lines) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyNzAzMA=="}, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc1Nzg4NA==", "bodyText": "My understanding of the code above is that it will overwrite with the last encountered address value. Maybe it would be more suitable to concatenate the multiple lines separated by \\n. Looks like that's what openbmp is doing: https://github.com/SNAS/openbmp-mysql-consumer/blob/master/cron_scripts/gen-whois/gen-whois-asn.py#L186 .\nThe reference code calls the whois command, which by default also fetches related entries. Maybe org.apache.commons.net.whois.WhoisClient does not do this?\nwhois -h whois.ripe.net AS8319 shows some output with multiple address lines.\nThis is not only true for the address field but for almost all fields (RIPE marks them as multiple in the link above).", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r562757884", "createdAt": "2021-01-22T16:39:57Z", "author": {"login": "fooker"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/AsnInfo.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.bmp.adapter;\n+\n+import java.util.Optional;\n+\n+public class AsnInfo {\n+\n+    private Long asn;\n+    private String asName;\n+    private String orgId;\n+    private String orgName;\n+    private String address;\n+    private String city;\n+    private String stateProv;\n+    private String postalCode;\n+    private String country;\n+    private String source;\n+    private String rawOutput;\n+    private String remarks;\n+\n+    public AsnInfo(Long asn, String source, String rawOutput) {\n+        this.asn = asn;\n+        this.source = source;\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public Long getAsn() {\n+        return asn;\n+    }\n+\n+    public void setAsn(Long asn) {\n+        this.asn = asn;\n+    }\n+\n+    public String getAsName() {\n+        return asName;\n+    }\n+\n+    public void setAsName(String asName) {\n+        this.asName = asName;\n+    }\n+\n+    public String getOrgId() {\n+        return orgId;\n+    }\n+\n+    public void setOrgId(String orgId) {\n+        this.orgId = orgId;\n+    }\n+\n+    public String getOrgName() {\n+        return orgName;\n+    }\n+\n+    public void setOrgName(String orgName) {\n+        this.orgName = orgName;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    public String getCity() {\n+        return city;\n+    }\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public String getStateProv() {\n+        return stateProv;\n+    }\n+\n+    public void setStateProv(String stateProv) {\n+        this.stateProv = stateProv;\n+    }\n+\n+    public String getPostalCode() {\n+        return postalCode;\n+    }\n+\n+    public void setPostalCode(String postalCode) {\n+        this.postalCode = postalCode;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    public void setSource(String source) {\n+        this.source = source;\n+    }\n+\n+    public String getRawOutput() {\n+        return rawOutput;\n+    }\n+\n+    public void setRawOutput(String rawOutput) {\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public String getRemarks() {\n+        return remarks;\n+    }\n+\n+    public void setRemarks(String remarks) {\n+        this.remarks = remarks;\n+    }\n+\n+    public static AsnInfo parseOutput(Long asn, String source, String rawOutput) {\n+        AsnInfo asnInfo = new AsnInfo(asn, source, rawOutput);\n+        // Split output into lines\n+        String[] lines = rawOutput.split(\"\\\\r?\\\\n\");\n+        for (String line : lines) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyNzAzMA=="}, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc5MjMxMw==", "bodyText": "Removing optional a with the query a AS8319 seems to give the output identical to whois client.  Updated code to append multiple lines in address/remarks/orgId as per link above.", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r562792313", "createdAt": "2021-01-22T17:34:59Z", "author": {"login": "cgorantla"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/AsnInfo.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.bmp.adapter;\n+\n+import java.util.Optional;\n+\n+public class AsnInfo {\n+\n+    private Long asn;\n+    private String asName;\n+    private String orgId;\n+    private String orgName;\n+    private String address;\n+    private String city;\n+    private String stateProv;\n+    private String postalCode;\n+    private String country;\n+    private String source;\n+    private String rawOutput;\n+    private String remarks;\n+\n+    public AsnInfo(Long asn, String source, String rawOutput) {\n+        this.asn = asn;\n+        this.source = source;\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public Long getAsn() {\n+        return asn;\n+    }\n+\n+    public void setAsn(Long asn) {\n+        this.asn = asn;\n+    }\n+\n+    public String getAsName() {\n+        return asName;\n+    }\n+\n+    public void setAsName(String asName) {\n+        this.asName = asName;\n+    }\n+\n+    public String getOrgId() {\n+        return orgId;\n+    }\n+\n+    public void setOrgId(String orgId) {\n+        this.orgId = orgId;\n+    }\n+\n+    public String getOrgName() {\n+        return orgName;\n+    }\n+\n+    public void setOrgName(String orgName) {\n+        this.orgName = orgName;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    public String getCity() {\n+        return city;\n+    }\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public String getStateProv() {\n+        return stateProv;\n+    }\n+\n+    public void setStateProv(String stateProv) {\n+        this.stateProv = stateProv;\n+    }\n+\n+    public String getPostalCode() {\n+        return postalCode;\n+    }\n+\n+    public void setPostalCode(String postalCode) {\n+        this.postalCode = postalCode;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    public void setSource(String source) {\n+        this.source = source;\n+    }\n+\n+    public String getRawOutput() {\n+        return rawOutput;\n+    }\n+\n+    public void setRawOutput(String rawOutput) {\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public String getRemarks() {\n+        return remarks;\n+    }\n+\n+    public void setRemarks(String remarks) {\n+        this.remarks = remarks;\n+    }\n+\n+    public static AsnInfo parseOutput(Long asn, String source, String rawOutput) {\n+        AsnInfo asnInfo = new AsnInfo(asn, source, rawOutput);\n+        // Split output into lines\n+        String[] lines = rawOutput.split(\"\\\\r?\\\\n\");\n+        for (String line : lines) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyNzAzMA=="}, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDU2NTUxNw==", "bodyText": "@fooker  This is taken care with dc3c5b6.  Can you take a look", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r564565517", "createdAt": "2021-01-26T14:45:20Z", "author": {"login": "cgorantla"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/AsnInfo.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.bmp.adapter;\n+\n+import java.util.Optional;\n+\n+public class AsnInfo {\n+\n+    private Long asn;\n+    private String asName;\n+    private String orgId;\n+    private String orgName;\n+    private String address;\n+    private String city;\n+    private String stateProv;\n+    private String postalCode;\n+    private String country;\n+    private String source;\n+    private String rawOutput;\n+    private String remarks;\n+\n+    public AsnInfo(Long asn, String source, String rawOutput) {\n+        this.asn = asn;\n+        this.source = source;\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public Long getAsn() {\n+        return asn;\n+    }\n+\n+    public void setAsn(Long asn) {\n+        this.asn = asn;\n+    }\n+\n+    public String getAsName() {\n+        return asName;\n+    }\n+\n+    public void setAsName(String asName) {\n+        this.asName = asName;\n+    }\n+\n+    public String getOrgId() {\n+        return orgId;\n+    }\n+\n+    public void setOrgId(String orgId) {\n+        this.orgId = orgId;\n+    }\n+\n+    public String getOrgName() {\n+        return orgName;\n+    }\n+\n+    public void setOrgName(String orgName) {\n+        this.orgName = orgName;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    public String getCity() {\n+        return city;\n+    }\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public String getStateProv() {\n+        return stateProv;\n+    }\n+\n+    public void setStateProv(String stateProv) {\n+        this.stateProv = stateProv;\n+    }\n+\n+    public String getPostalCode() {\n+        return postalCode;\n+    }\n+\n+    public void setPostalCode(String postalCode) {\n+        this.postalCode = postalCode;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    public void setSource(String source) {\n+        this.source = source;\n+    }\n+\n+    public String getRawOutput() {\n+        return rawOutput;\n+    }\n+\n+    public void setRawOutput(String rawOutput) {\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public String getRemarks() {\n+        return remarks;\n+    }\n+\n+    public void setRemarks(String remarks) {\n+        this.remarks = remarks;\n+    }\n+\n+    public static AsnInfo parseOutput(Long asn, String source, String rawOutput) {\n+        AsnInfo asnInfo = new AsnInfo(asn, source, rawOutput);\n+        // Split output into lines\n+        String[] lines = rawOutput.split(\"\\\\r?\\\\n\");\n+        for (String line : lines) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyNzAzMA=="}, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MjAxODk2OnYy", "diffSide": "RIGHT", "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpMessagePersister.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMDoyODowN1rOIeJ5cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDowMTowNVrOIfDjvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODQ5MDM1NQ==", "bodyText": "Can we have a test for this?", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r568490355", "createdAt": "2021-02-02T10:28:07Z", "author": {"login": "fooker"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpMessagePersister.java", "diffHunk": "@@ -540,6 +600,120 @@ private BmpGlobalIpRib buildGlobalIpRib(PrefixByAS prefixByAS) {\n \n     }\n \n+    private BmpAsnInfo fetchAndBuildAsnInfo(Long asn) {\n+        Optional<AsnInfo> asnInfoOptional = BmpWhoIsClient.getAsnInfo(asn);\n+        if (asnInfoOptional.isPresent()) {\n+            BmpAsnInfo bmpAsnInfo = new BmpAsnInfo();\n+            AsnInfo asnInfo = asnInfoOptional.get();\n+            bmpAsnInfo.setAsn(asnInfo.getAsn());\n+            bmpAsnInfo.setOrgId(asnInfo.getOrgId());\n+            bmpAsnInfo.setAsName(asnInfo.getAsName());\n+            bmpAsnInfo.setOrgName(asnInfo.getOrgName());\n+            bmpAsnInfo.setAddress(asnInfo.getAddress());\n+            bmpAsnInfo.setCity(asnInfo.getCity());\n+            bmpAsnInfo.setStateProv(asnInfo.getStateProv());\n+            bmpAsnInfo.setPostalCode(asnInfo.getPostalCode());\n+            bmpAsnInfo.setCountry(asnInfo.getCountry());\n+            bmpAsnInfo.setSource(asnInfo.getSource());\n+            bmpAsnInfo.setRawOutput(asnInfo.getRawOutput());\n+            bmpAsnInfo.setRemarks(asnInfo.getRemarks());\n+            bmpAsnInfo.setLastUpdated(Date.from(Instant.now()));\n+            return bmpAsnInfo;\n+        }\n+        return null;\n+    }\n+\n+    private BmpRouteInfo fetchAndBuildRouteInfo(String prefix) {\n+        Optional<RouteInfo> routeInfoOptional = BmpWhoIsClient.getRouteInfo(prefix);\n+        if (routeInfoOptional.isPresent() && routeInfoOptional.get().getPrefix() != null) {\n+            RouteInfo routeInfo = routeInfoOptional.get();\n+            Integer prefixLen = routeInfo.getPrefixLen();\n+            Long originAs = routeInfo.getOriginAs();\n+            BmpRouteInfo bmpRouteInfo = bmpRouteInfoDao.findByPrefix(routeInfo.getPrefix(), prefixLen, originAs);\n+            if (bmpRouteInfo == null) {\n+                bmpRouteInfo = new BmpRouteInfo();\n+                bmpRouteInfo.setPrefix(routeInfo.getPrefix());\n+                bmpRouteInfo.setPrefixLen(routeInfo.getPrefixLen());\n+                bmpRouteInfo.setDescr(routeInfo.getDescription());\n+                bmpRouteInfo.setOriginAs(routeInfo.getOriginAs());\n+                bmpRouteInfo.setSource(routeInfo.getSource());\n+            }\n+            bmpRouteInfo.setLastUpdated(Date.from(Instant.now()));\n+            return bmpRouteInfo;\n+        }\n+        return null;\n+    }\n+\n+    private List<BmpAsnPathAnalysis> buildBmpAsnPath(String asnPath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f2214ddb4c883f05780435c9ee9d051c9daf46"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQzNTA3MA==", "bodyText": "Simplified this and added a test case for expected output.", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r569435070", "createdAt": "2021-02-03T14:01:05Z", "author": {"login": "cgorantla"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpMessagePersister.java", "diffHunk": "@@ -540,6 +600,120 @@ private BmpGlobalIpRib buildGlobalIpRib(PrefixByAS prefixByAS) {\n \n     }\n \n+    private BmpAsnInfo fetchAndBuildAsnInfo(Long asn) {\n+        Optional<AsnInfo> asnInfoOptional = BmpWhoIsClient.getAsnInfo(asn);\n+        if (asnInfoOptional.isPresent()) {\n+            BmpAsnInfo bmpAsnInfo = new BmpAsnInfo();\n+            AsnInfo asnInfo = asnInfoOptional.get();\n+            bmpAsnInfo.setAsn(asnInfo.getAsn());\n+            bmpAsnInfo.setOrgId(asnInfo.getOrgId());\n+            bmpAsnInfo.setAsName(asnInfo.getAsName());\n+            bmpAsnInfo.setOrgName(asnInfo.getOrgName());\n+            bmpAsnInfo.setAddress(asnInfo.getAddress());\n+            bmpAsnInfo.setCity(asnInfo.getCity());\n+            bmpAsnInfo.setStateProv(asnInfo.getStateProv());\n+            bmpAsnInfo.setPostalCode(asnInfo.getPostalCode());\n+            bmpAsnInfo.setCountry(asnInfo.getCountry());\n+            bmpAsnInfo.setSource(asnInfo.getSource());\n+            bmpAsnInfo.setRawOutput(asnInfo.getRawOutput());\n+            bmpAsnInfo.setRemarks(asnInfo.getRemarks());\n+            bmpAsnInfo.setLastUpdated(Date.from(Instant.now()));\n+            return bmpAsnInfo;\n+        }\n+        return null;\n+    }\n+\n+    private BmpRouteInfo fetchAndBuildRouteInfo(String prefix) {\n+        Optional<RouteInfo> routeInfoOptional = BmpWhoIsClient.getRouteInfo(prefix);\n+        if (routeInfoOptional.isPresent() && routeInfoOptional.get().getPrefix() != null) {\n+            RouteInfo routeInfo = routeInfoOptional.get();\n+            Integer prefixLen = routeInfo.getPrefixLen();\n+            Long originAs = routeInfo.getOriginAs();\n+            BmpRouteInfo bmpRouteInfo = bmpRouteInfoDao.findByPrefix(routeInfo.getPrefix(), prefixLen, originAs);\n+            if (bmpRouteInfo == null) {\n+                bmpRouteInfo = new BmpRouteInfo();\n+                bmpRouteInfo.setPrefix(routeInfo.getPrefix());\n+                bmpRouteInfo.setPrefixLen(routeInfo.getPrefixLen());\n+                bmpRouteInfo.setDescr(routeInfo.getDescription());\n+                bmpRouteInfo.setOriginAs(routeInfo.getOriginAs());\n+                bmpRouteInfo.setSource(routeInfo.getSource());\n+            }\n+            bmpRouteInfo.setLastUpdated(Date.from(Instant.now()));\n+            return bmpRouteInfo;\n+        }\n+        return null;\n+    }\n+\n+    private List<BmpAsnPathAnalysis> buildBmpAsnPath(String asnPath) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODQ5MDM1NQ=="}, "originalCommit": {"oid": "89f2214ddb4c883f05780435c9ee9d051c9daf46"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MjAyNzQyOnYy", "diffSide": "RIGHT", "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpMessagePersister.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMDoyOTo1OFrOIeJ-kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMDoyOTo1OFrOIeJ-kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODQ5MTY2NQ==", "bodyText": "This code path is never taken if i == 0 because asn will always be 0 on the first iteration.", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r568491665", "createdAt": "2021-02-02T10:29:58Z", "author": {"login": "fooker"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpMessagePersister.java", "diffHunk": "@@ -540,6 +600,120 @@ private BmpGlobalIpRib buildGlobalIpRib(PrefixByAS prefixByAS) {\n \n     }\n \n+    private BmpAsnInfo fetchAndBuildAsnInfo(Long asn) {\n+        Optional<AsnInfo> asnInfoOptional = BmpWhoIsClient.getAsnInfo(asn);\n+        if (asnInfoOptional.isPresent()) {\n+            BmpAsnInfo bmpAsnInfo = new BmpAsnInfo();\n+            AsnInfo asnInfo = asnInfoOptional.get();\n+            bmpAsnInfo.setAsn(asnInfo.getAsn());\n+            bmpAsnInfo.setOrgId(asnInfo.getOrgId());\n+            bmpAsnInfo.setAsName(asnInfo.getAsName());\n+            bmpAsnInfo.setOrgName(asnInfo.getOrgName());\n+            bmpAsnInfo.setAddress(asnInfo.getAddress());\n+            bmpAsnInfo.setCity(asnInfo.getCity());\n+            bmpAsnInfo.setStateProv(asnInfo.getStateProv());\n+            bmpAsnInfo.setPostalCode(asnInfo.getPostalCode());\n+            bmpAsnInfo.setCountry(asnInfo.getCountry());\n+            bmpAsnInfo.setSource(asnInfo.getSource());\n+            bmpAsnInfo.setRawOutput(asnInfo.getRawOutput());\n+            bmpAsnInfo.setRemarks(asnInfo.getRemarks());\n+            bmpAsnInfo.setLastUpdated(Date.from(Instant.now()));\n+            return bmpAsnInfo;\n+        }\n+        return null;\n+    }\n+\n+    private BmpRouteInfo fetchAndBuildRouteInfo(String prefix) {\n+        Optional<RouteInfo> routeInfoOptional = BmpWhoIsClient.getRouteInfo(prefix);\n+        if (routeInfoOptional.isPresent() && routeInfoOptional.get().getPrefix() != null) {\n+            RouteInfo routeInfo = routeInfoOptional.get();\n+            Integer prefixLen = routeInfo.getPrefixLen();\n+            Long originAs = routeInfo.getOriginAs();\n+            BmpRouteInfo bmpRouteInfo = bmpRouteInfoDao.findByPrefix(routeInfo.getPrefix(), prefixLen, originAs);\n+            if (bmpRouteInfo == null) {\n+                bmpRouteInfo = new BmpRouteInfo();\n+                bmpRouteInfo.setPrefix(routeInfo.getPrefix());\n+                bmpRouteInfo.setPrefixLen(routeInfo.getPrefixLen());\n+                bmpRouteInfo.setDescr(routeInfo.getDescription());\n+                bmpRouteInfo.setOriginAs(routeInfo.getOriginAs());\n+                bmpRouteInfo.setSource(routeInfo.getSource());\n+            }\n+            bmpRouteInfo.setLastUpdated(Date.from(Instant.now()));\n+            return bmpRouteInfo;\n+        }\n+        return null;\n+    }\n+\n+    private List<BmpAsnPathAnalysis> buildBmpAsnPath(String asnPath) {\n+\n+        List<BmpAsnPathAnalysis> bmpAsnPathAnalyses = new ArrayList<>();\n+        String[] asnArray = asnPath.split(\" \");\n+\n+        Long leftAsn = 0L;\n+        Long rightAsn = 0L;\n+        Long asn = 0L;\n+        for (int i = 0; i < asnArray.length; i++) {\n+            if (asnArray[i].length() <= 0)\n+                break;\n+\n+            try {\n+                asn = Long.valueOf(asnArray[i]);\n+            } catch (NumberFormatException e) {\n+                e.printStackTrace();\n+                break;\n+            }\n+\n+            if (asn > 0) {\n+                if (i + 1 < asnArray.length) {\n+\n+                    if (asnArray[i + 1].length() <= 0)\n+                        break;\n+\n+                    try {\n+                        rightAsn = Long.valueOf(asnArray[i + 1]);\n+\n+                    } catch (NumberFormatException e) {\n+                        e.printStackTrace();\n+                        break;\n+                    }\n+\n+                    if (rightAsn.equals(asn)) {\n+                        continue;\n+                    }\n+\n+                    Boolean isPeeringAsn = (i == 0 || i == 1) ? TRUE : FALSE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f2214ddb4c883f05780435c9ee9d051c9daf46"}, "originalPosition": 238}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MjA0MTAwOnYy", "diffSide": "RIGHT", "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpMessagePersister.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMDozMzoxMlrOIeKG4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMDozMzoxMlrOIeKG4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODQ5Mzc5NA==", "bodyText": "Why not parse the ASNs into longs here? this would save some error handling in the loop.\nBy doing so, we can skip the whole update if the path in invalid.", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r568493794", "createdAt": "2021-02-02T10:33:12Z", "author": {"login": "fooker"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpMessagePersister.java", "diffHunk": "@@ -540,6 +600,120 @@ private BmpGlobalIpRib buildGlobalIpRib(PrefixByAS prefixByAS) {\n \n     }\n \n+    private BmpAsnInfo fetchAndBuildAsnInfo(Long asn) {\n+        Optional<AsnInfo> asnInfoOptional = BmpWhoIsClient.getAsnInfo(asn);\n+        if (asnInfoOptional.isPresent()) {\n+            BmpAsnInfo bmpAsnInfo = new BmpAsnInfo();\n+            AsnInfo asnInfo = asnInfoOptional.get();\n+            bmpAsnInfo.setAsn(asnInfo.getAsn());\n+            bmpAsnInfo.setOrgId(asnInfo.getOrgId());\n+            bmpAsnInfo.setAsName(asnInfo.getAsName());\n+            bmpAsnInfo.setOrgName(asnInfo.getOrgName());\n+            bmpAsnInfo.setAddress(asnInfo.getAddress());\n+            bmpAsnInfo.setCity(asnInfo.getCity());\n+            bmpAsnInfo.setStateProv(asnInfo.getStateProv());\n+            bmpAsnInfo.setPostalCode(asnInfo.getPostalCode());\n+            bmpAsnInfo.setCountry(asnInfo.getCountry());\n+            bmpAsnInfo.setSource(asnInfo.getSource());\n+            bmpAsnInfo.setRawOutput(asnInfo.getRawOutput());\n+            bmpAsnInfo.setRemarks(asnInfo.getRemarks());\n+            bmpAsnInfo.setLastUpdated(Date.from(Instant.now()));\n+            return bmpAsnInfo;\n+        }\n+        return null;\n+    }\n+\n+    private BmpRouteInfo fetchAndBuildRouteInfo(String prefix) {\n+        Optional<RouteInfo> routeInfoOptional = BmpWhoIsClient.getRouteInfo(prefix);\n+        if (routeInfoOptional.isPresent() && routeInfoOptional.get().getPrefix() != null) {\n+            RouteInfo routeInfo = routeInfoOptional.get();\n+            Integer prefixLen = routeInfo.getPrefixLen();\n+            Long originAs = routeInfo.getOriginAs();\n+            BmpRouteInfo bmpRouteInfo = bmpRouteInfoDao.findByPrefix(routeInfo.getPrefix(), prefixLen, originAs);\n+            if (bmpRouteInfo == null) {\n+                bmpRouteInfo = new BmpRouteInfo();\n+                bmpRouteInfo.setPrefix(routeInfo.getPrefix());\n+                bmpRouteInfo.setPrefixLen(routeInfo.getPrefixLen());\n+                bmpRouteInfo.setDescr(routeInfo.getDescription());\n+                bmpRouteInfo.setOriginAs(routeInfo.getOriginAs());\n+                bmpRouteInfo.setSource(routeInfo.getSource());\n+            }\n+            bmpRouteInfo.setLastUpdated(Date.from(Instant.now()));\n+            return bmpRouteInfo;\n+        }\n+        return null;\n+    }\n+\n+    private List<BmpAsnPathAnalysis> buildBmpAsnPath(String asnPath) {\n+\n+        List<BmpAsnPathAnalysis> bmpAsnPathAnalyses = new ArrayList<>();\n+        String[] asnArray = asnPath.split(\" \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f2214ddb4c883f05780435c9ee9d051c9daf46"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MjA1NDQ0OnYy", "diffSide": "RIGHT", "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpMessagePersister.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMDozNjoyM1rOIeKPBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMDozNjoyM1rOIeKPBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODQ5NTg3Nw==", "bodyText": "The loop can be simplified by iterating from i = 1 to i = asnArray.length - . The  you can use i-1 and i+1 for left and right ASN inside the loop.\nIn addition, the Origin AS handling can be done out of loop at the end.", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r568495877", "createdAt": "2021-02-02T10:36:23Z", "author": {"login": "fooker"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpMessagePersister.java", "diffHunk": "@@ -540,6 +600,120 @@ private BmpGlobalIpRib buildGlobalIpRib(PrefixByAS prefixByAS) {\n \n     }\n \n+    private BmpAsnInfo fetchAndBuildAsnInfo(Long asn) {\n+        Optional<AsnInfo> asnInfoOptional = BmpWhoIsClient.getAsnInfo(asn);\n+        if (asnInfoOptional.isPresent()) {\n+            BmpAsnInfo bmpAsnInfo = new BmpAsnInfo();\n+            AsnInfo asnInfo = asnInfoOptional.get();\n+            bmpAsnInfo.setAsn(asnInfo.getAsn());\n+            bmpAsnInfo.setOrgId(asnInfo.getOrgId());\n+            bmpAsnInfo.setAsName(asnInfo.getAsName());\n+            bmpAsnInfo.setOrgName(asnInfo.getOrgName());\n+            bmpAsnInfo.setAddress(asnInfo.getAddress());\n+            bmpAsnInfo.setCity(asnInfo.getCity());\n+            bmpAsnInfo.setStateProv(asnInfo.getStateProv());\n+            bmpAsnInfo.setPostalCode(asnInfo.getPostalCode());\n+            bmpAsnInfo.setCountry(asnInfo.getCountry());\n+            bmpAsnInfo.setSource(asnInfo.getSource());\n+            bmpAsnInfo.setRawOutput(asnInfo.getRawOutput());\n+            bmpAsnInfo.setRemarks(asnInfo.getRemarks());\n+            bmpAsnInfo.setLastUpdated(Date.from(Instant.now()));\n+            return bmpAsnInfo;\n+        }\n+        return null;\n+    }\n+\n+    private BmpRouteInfo fetchAndBuildRouteInfo(String prefix) {\n+        Optional<RouteInfo> routeInfoOptional = BmpWhoIsClient.getRouteInfo(prefix);\n+        if (routeInfoOptional.isPresent() && routeInfoOptional.get().getPrefix() != null) {\n+            RouteInfo routeInfo = routeInfoOptional.get();\n+            Integer prefixLen = routeInfo.getPrefixLen();\n+            Long originAs = routeInfo.getOriginAs();\n+            BmpRouteInfo bmpRouteInfo = bmpRouteInfoDao.findByPrefix(routeInfo.getPrefix(), prefixLen, originAs);\n+            if (bmpRouteInfo == null) {\n+                bmpRouteInfo = new BmpRouteInfo();\n+                bmpRouteInfo.setPrefix(routeInfo.getPrefix());\n+                bmpRouteInfo.setPrefixLen(routeInfo.getPrefixLen());\n+                bmpRouteInfo.setDescr(routeInfo.getDescription());\n+                bmpRouteInfo.setOriginAs(routeInfo.getOriginAs());\n+                bmpRouteInfo.setSource(routeInfo.getSource());\n+            }\n+            bmpRouteInfo.setLastUpdated(Date.from(Instant.now()));\n+            return bmpRouteInfo;\n+        }\n+        return null;\n+    }\n+\n+    private List<BmpAsnPathAnalysis> buildBmpAsnPath(String asnPath) {\n+\n+        List<BmpAsnPathAnalysis> bmpAsnPathAnalyses = new ArrayList<>();\n+        String[] asnArray = asnPath.split(\" \");\n+\n+        Long leftAsn = 0L;\n+        Long rightAsn = 0L;\n+        Long asn = 0L;\n+        for (int i = 0; i < asnArray.length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f2214ddb4c883f05780435c9ee9d051c9daf46"}, "originalPosition": 209}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2963, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}