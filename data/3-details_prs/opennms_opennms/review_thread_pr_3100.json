{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MDkzMTYw", "number": 3100, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjozNDozOVrOEWGJVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOToyNToyMVrOEYM9jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjA0ODIxOnYy", "diffSide": "LEFT", "path": "features/remotepollerng/daemon/src/main/java/org/opennms/netmgt/remotepollerng/RemotePollerd.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjozNDozOVrOG9OK6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo0MjozOVrOG_fiuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0ODQ4OA==", "bodyText": "We need something similar here, that reacts to APPLICATION_CREATED_EVENT_UEI, APPLICATION_DELETED_EVENT_UEI and APPLICATION_CHANGED_EVENT_UEI and creates / reschedule / cancels only the affected and not the entire set of polling jobs, e.g. handleConfigurationChangedForApplication().", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r466848488", "createdAt": "2020-08-07T06:34:39Z", "author": {"login": "christianpape"}, "path": "features/remotepollerng/daemon/src/main/java/org/opennms/netmgt/remotepollerng/RemotePollerd.java", "diffHunk": "@@ -498,15 +496,4 @@ public void afterPropertiesSet() throws Exception {\n     public void reloadDaemonConfig(final IEvent e) {\n         DaemonTools.handleReloadEvent(e, RemotePollerd.NAME, (event) -> handleConfigurationChanged());\n     }\n-\n-    @EventHandler(uei = EventConstants.POLLER_PACKAGE_LOCATION_ASSOCIATION_CHANGED_EVENT_UEI)\n-    public void reloadDaemonConfigForLocation(final IEvent e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d23955e2e31133b384ead8a37e8feb7e6c03198"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA1NTQ0Mg==", "bodyText": "if I understood @fooker correctly this ticket was only about creating the events, not listening to them. Having said that I can ad this of course as well. @fooker what do you think?", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r467055442", "createdAt": "2020-08-07T13:54:19Z", "author": {"login": "patrick-schweizer"}, "path": "features/remotepollerng/daemon/src/main/java/org/opennms/netmgt/remotepollerng/RemotePollerd.java", "diffHunk": "@@ -498,15 +496,4 @@ public void afterPropertiesSet() throws Exception {\n     public void reloadDaemonConfig(final IEvent e) {\n         DaemonTools.handleReloadEvent(e, RemotePollerd.NAME, (event) -> handleConfigurationChanged());\n     }\n-\n-    @EventHandler(uei = EventConstants.POLLER_PACKAGE_LOCATION_ASSOCIATION_CHANGED_EVENT_UEI)\n-    public void reloadDaemonConfigForLocation(final IEvent e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0ODQ4OA=="}, "originalCommit": {"oid": "0d23955e2e31133b384ead8a37e8feb7e6c03198"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIyNzkyOA==", "bodyText": "That's right. I'm currently refactoring this anyways. So no need to implement the receiving side (right now).", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r469227928", "createdAt": "2020-08-12T12:38:17Z", "author": {"login": "fooker"}, "path": "features/remotepollerng/daemon/src/main/java/org/opennms/netmgt/remotepollerng/RemotePollerd.java", "diffHunk": "@@ -498,15 +496,4 @@ public void afterPropertiesSet() throws Exception {\n     public void reloadDaemonConfig(final IEvent e) {\n         DaemonTools.handleReloadEvent(e, RemotePollerd.NAME, (event) -> handleConfigurationChanged());\n     }\n-\n-    @EventHandler(uei = EventConstants.POLLER_PACKAGE_LOCATION_ASSOCIATION_CHANGED_EVENT_UEI)\n-    public void reloadDaemonConfigForLocation(final IEvent e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0ODQ4OA=="}, "originalCommit": {"oid": "0d23955e2e31133b384ead8a37e8feb7e6c03198"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzMDI2Nw==", "bodyText": "Ok, makes sense.", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r469230267", "createdAt": "2020-08-12T12:42:39Z", "author": {"login": "christianpape"}, "path": "features/remotepollerng/daemon/src/main/java/org/opennms/netmgt/remotepollerng/RemotePollerd.java", "diffHunk": "@@ -498,15 +496,4 @@ public void afterPropertiesSet() throws Exception {\n     public void reloadDaemonConfig(final IEvent e) {\n         DaemonTools.handleReloadEvent(e, RemotePollerd.NAME, (event) -> handleConfigurationChanged());\n     }\n-\n-    @EventHandler(uei = EventConstants.POLLER_PACKAGE_LOCATION_ASSOCIATION_CHANGED_EVENT_UEI)\n-    public void reloadDaemonConfigForLocation(final IEvent e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0ODQ4OA=="}, "originalCommit": {"oid": "0d23955e2e31133b384ead8a37e8feb7e6c03198"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjA1MTUzOnYy", "diffSide": "RIGHT", "path": "features/remotepollerng/daemon/src/test/java/org/opennms/netmgt/remotepollerng/RemotePollerdIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjozNTo1NVrOG9OM7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjozNTo1NVrOG9OM7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0OTAwNw==", "bodyText": "see above, the behavior for the partial reschedule of jobs for an application should be tested here.", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r466849007", "createdAt": "2020-08-07T06:35:55Z", "author": {"login": "christianpape"}, "path": "features/remotepollerng/daemon/src/test/java/org/opennms/netmgt/remotepollerng/RemotePollerdIT.java", "diffHunk": "@@ -208,9 +208,10 @@ private void changePollingPackages(final String locationName, final String ... p\n     }\n \n     private void sendPollingPackageAssociationChanged(final String locationName) {\n-        final EventBuilder ebldr = new EventBuilder(EventConstants.POLLER_PACKAGE_LOCATION_ASSOCIATION_CHANGED_EVENT_UEI, \"test\");\n-        ebldr.addParam(EventConstants.PARM_LOCATION, locationName);\n-        this.eventIpcManager.sendNow(ebldr.getEvent());\n+        // TODO Patrick: do we need to send a different event?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d23955e2e31133b384ead8a37e8feb7e6c03198"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjA2Nzc4OnYy", "diffSide": "RIGHT", "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/ApplicationRestService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjo0Mjo1MlrOG9OW5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNjowNToyNFrOG_9NiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MTU1Nw==", "bodyText": "There are events sent for creation and deletion of an application but not for changing an application, right? Or am I missing something?", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r466851557", "createdAt": "2020-08-07T06:42:52Z", "author": {"login": "christianpape"}, "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/ApplicationRestService.java", "diffHunk": "@@ -58,8 +68,17 @@\n @Transactional\n public class ApplicationRestService extends AbstractDaoRestService<OnmsApplication,OnmsApplication,Integer,Integer> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d23955e2e31133b384ead8a37e8feb7e6c03198"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA1Mzg2Ng==", "bodyText": "That is correct. The ApplicationRestService has no changeApplication method? In opennms-web-api/src/main/java/org/opennms/web/svclayer/support/DefaultAdminApplicationService.java we have the edit method that is sending a CHANGED event.", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r467053866", "createdAt": "2020-08-07T13:51:33Z", "author": {"login": "patrick-schweizer"}, "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/ApplicationRestService.java", "diffHunk": "@@ -58,8 +68,17 @@\n @Transactional\n public class ApplicationRestService extends AbstractDaoRestService<OnmsApplication,OnmsApplication,Integer,Integer> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MTU1Nw=="}, "originalCommit": {"oid": "0d23955e2e31133b384ead8a37e8feb7e6c03198"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUzNTg0Mg==", "bodyText": "@christianpape I checked again. No edit method (the default implementation doesn't support edit).", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r469535842", "createdAt": "2020-08-12T20:44:46Z", "author": {"login": "patrick-schweizer"}, "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/ApplicationRestService.java", "diffHunk": "@@ -58,8 +68,17 @@\n @Transactional\n public class ApplicationRestService extends AbstractDaoRestService<OnmsApplication,OnmsApplication,Integer,Integer> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MTU1Nw=="}, "originalCommit": {"oid": "0d23955e2e31133b384ead8a37e8feb7e6c03198"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcxNjM2MQ==", "bodyText": "OK", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r469716361", "createdAt": "2020-08-13T06:05:24Z", "author": {"login": "christianpape"}, "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/ApplicationRestService.java", "diffHunk": "@@ -58,8 +68,17 @@\n @Transactional\n public class ApplicationRestService extends AbstractDaoRestService<OnmsApplication,OnmsApplication,Integer,Integer> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MTU1Nw=="}, "originalCommit": {"oid": "0d23955e2e31133b384ead8a37e8feb7e6c03198"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODA4NTEzOnYy", "diffSide": "RIGHT", "path": "opennms-web-api/src/main/java/org/opennms/web/svclayer/support/DefaultAdminApplicationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOToxMjo1N1rOHAZ8cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMzowNTo1MFrOHAgmUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4NzEyMA==", "bodyText": "Better call it sendEvent, 'sent' is past.", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r470187120", "createdAt": "2020-08-13T19:12:57Z", "author": {"login": "christianpape"}, "path": "opennms-web-api/src/main/java/org/opennms/web/svclayer/support/DefaultAdminApplicationService.java", "diffHunk": "@@ -307,12 +325,25 @@ public void performEditLocations(final String applicationIdString, final String\n         }\n     }\n \n+    private void sentEvent(final OnmsApplication application, final String uei) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41449fbd486b91ddf45b93f74c33fa0872716666"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI5NjE0NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r470296145", "createdAt": "2020-08-13T23:05:50Z", "author": {"login": "patrick-schweizer"}, "path": "opennms-web-api/src/main/java/org/opennms/web/svclayer/support/DefaultAdminApplicationService.java", "diffHunk": "@@ -307,12 +325,25 @@ public void performEditLocations(final String applicationIdString, final String\n         }\n     }\n \n+    private void sentEvent(final OnmsApplication application, final String uei) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4NzEyMA=="}, "originalCommit": {"oid": "41449fbd486b91ddf45b93f74c33fa0872716666"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODEwNzY0OnYy", "diffSide": "RIGHT", "path": "opennms-web-api/src/main/java/org/opennms/web/svclayer/support/DefaultAdminApplicationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOToxODoyMFrOHAaJXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMzowNzoxM1rOHAgn7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5MDQyOA==", "bodyText": "Same must be done in the performEditLocations() method, since the application is also saved there.", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r470190428", "createdAt": "2020-08-13T19:18:20Z", "author": {"login": "christianpape"}, "path": "opennms-web-api/src/main/java/org/opennms/web/svclayer/support/DefaultAdminApplicationService.java", "diffHunk": "@@ -203,9 +219,10 @@ public void performEditServices(String applicationIdString, String editAction, S\n                 \n                 service.addApplication(application);\n                 m_monitoredServiceDao.save(service);\n+                sentEvent(application, EventConstants.APPLICATION_CHANGED_EVENT_UEI);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41449fbd486b91ddf45b93f74c33fa0872716666"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI5NjU1Nw==", "bodyText": "fixed.", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r470296557", "createdAt": "2020-08-13T23:07:13Z", "author": {"login": "patrick-schweizer"}, "path": "opennms-web-api/src/main/java/org/opennms/web/svclayer/support/DefaultAdminApplicationService.java", "diffHunk": "@@ -203,9 +219,10 @@ public void performEditServices(String applicationIdString, String editAction, S\n                 \n                 service.addApplication(application);\n                 m_monitoredServiceDao.save(service);\n+                sentEvent(application, EventConstants.APPLICATION_CHANGED_EVENT_UEI);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5MDQyOA=="}, "originalCommit": {"oid": "41449fbd486b91ddf45b93f74c33fa0872716666"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODEwOTE5OnYy", "diffSide": "RIGHT", "path": "opennms-web-api/src/main/java/org/opennms/web/svclayer/support/DefaultAdminApplicationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOToxODo0OFrOHAaKZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozODowNVrOHAi-kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5MDY5NA==", "bodyText": "Same must be done in the performEditLocations() method, since the application is also saved there.", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r470190694", "createdAt": "2020-08-13T19:18:48Z", "author": {"login": "christianpape"}, "path": "opennms-web-api/src/main/java/org/opennms/web/svclayer/support/DefaultAdminApplicationService.java", "diffHunk": "@@ -237,6 +254,7 @@ public void performEditServices(String applicationIdString, String editAction, S\n             }\n \n             m_applicationDao.save(application);\n+            sentEvent(application, EventConstants.APPLICATION_CHANGED_EVENT_UEI);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41449fbd486b91ddf45b93f74c33fa0872716666"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzNTEyMg==", "bodyText": "\ud83d\udc4d done.", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r470335122", "createdAt": "2020-08-14T00:38:05Z", "author": {"login": "patrick-schweizer"}, "path": "opennms-web-api/src/main/java/org/opennms/web/svclayer/support/DefaultAdminApplicationService.java", "diffHunk": "@@ -237,6 +254,7 @@ public void performEditServices(String applicationIdString, String editAction, S\n             }\n \n             m_applicationDao.save(application);\n+            sentEvent(application, EventConstants.APPLICATION_CHANGED_EVENT_UEI);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5MDY5NA=="}, "originalCommit": {"oid": "41449fbd486b91ddf45b93f74c33fa0872716666"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODExNjcwOnYy", "diffSide": "RIGHT", "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/ApplicationRestService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOToyMDozNlrOHAaOug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozODo1NFrOHAjAaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5MTgwMg==", "bodyText": "Same here 'sendEvent' is better.", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r470191802", "createdAt": "2020-08-13T19:20:36Z", "author": {"login": "christianpape"}, "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/ApplicationRestService.java", "diffHunk": "@@ -104,11 +123,25 @@ protected OnmsApplication doGet(UriInfo uriInfo, Integer id) {\n     @Override\n     public Response doCreate(final SecurityContext securityContext, final UriInfo uriInfo, final OnmsApplication object) {\n         final Integer id = getDao().save(object);\n+        sentEvent(object, EventConstants.APPLICATION_CREATED_EVENT_UEI);\n         return Response.created(RedirectHelper.getRedirectUri(uriInfo, id)).build();\n     }\n \n     @Override\n     protected void doDelete(SecurityContext securityContext, UriInfo uriInfo, OnmsApplication object) {\n         getDao().delete(object);\n+        sentEvent(object, EventConstants.APPLICATION_DELETED_EVENT_UEI);\n+    }\n+\n+    private void sentEvent(final OnmsApplication application, final String uei) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41449fbd486b91ddf45b93f74c33fa0872716666"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzNTU5NQ==", "bodyText": "\ud83d\udc4d fixed.", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r470335595", "createdAt": "2020-08-14T00:38:54Z", "author": {"login": "patrick-schweizer"}, "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/ApplicationRestService.java", "diffHunk": "@@ -104,11 +123,25 @@ protected OnmsApplication doGet(UriInfo uriInfo, Integer id) {\n     @Override\n     public Response doCreate(final SecurityContext securityContext, final UriInfo uriInfo, final OnmsApplication object) {\n         final Integer id = getDao().save(object);\n+        sentEvent(object, EventConstants.APPLICATION_CREATED_EVENT_UEI);\n         return Response.created(RedirectHelper.getRedirectUri(uriInfo, id)).build();\n     }\n \n     @Override\n     protected void doDelete(SecurityContext securityContext, UriInfo uriInfo, OnmsApplication object) {\n         getDao().delete(object);\n+        sentEvent(object, EventConstants.APPLICATION_DELETED_EVENT_UEI);\n+    }\n+\n+    private void sentEvent(final OnmsApplication application, final String uei) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5MTgwMg=="}, "originalCommit": {"oid": "41449fbd486b91ddf45b93f74c33fa0872716666"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODExOTM1OnYy", "diffSide": "RIGHT", "path": "opennms-web-api/src/test/java/org/opennms/web/svclayer/support/DefaultAdminApplicationServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOToyMToyN1rOHAaQYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozOTo1NlrOHAjDEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5MjIyNw==", "bodyText": "shouldSendEvents...", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r470192227", "createdAt": "2020-08-13T19:21:27Z", "author": {"login": "christianpape"}, "path": "opennms-web-api/src/test/java/org/opennms/web/svclayer/support/DefaultAdminApplicationServiceTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2006-2014 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2014 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.web.svclayer.support;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+import org.opennms.netmgt.dao.api.ApplicationDao;\n+import org.opennms.netmgt.dao.api.MonitoredServiceDao;\n+import org.opennms.netmgt.dao.mock.MockApplicationDao;\n+import org.opennms.netmgt.events.api.EventConstants;\n+import org.opennms.netmgt.events.api.EventProxy;\n+import org.opennms.netmgt.events.api.EventProxyException;\n+import org.opennms.netmgt.model.OnmsMonitoredService;\n+import org.opennms.netmgt.xml.event.Event;\n+\n+public class DefaultAdminApplicationServiceTest {\n+\n+    @Test\n+    public void shouldSentEventsForApplication() throws EventProxyException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41449fbd486b91ddf45b93f74c33fa0872716666"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzNjI3Mw==", "bodyText": "\ud83d\udc4d fixed.", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r470336273", "createdAt": "2020-08-14T00:39:56Z", "author": {"login": "patrick-schweizer"}, "path": "opennms-web-api/src/test/java/org/opennms/web/svclayer/support/DefaultAdminApplicationServiceTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2006-2014 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2014 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.web.svclayer.support;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+import org.opennms.netmgt.dao.api.ApplicationDao;\n+import org.opennms.netmgt.dao.api.MonitoredServiceDao;\n+import org.opennms.netmgt.dao.mock.MockApplicationDao;\n+import org.opennms.netmgt.events.api.EventConstants;\n+import org.opennms.netmgt.events.api.EventProxy;\n+import org.opennms.netmgt.events.api.EventProxyException;\n+import org.opennms.netmgt.model.OnmsMonitoredService;\n+import org.opennms.netmgt.xml.event.Event;\n+\n+public class DefaultAdminApplicationServiceTest {\n+\n+    @Test\n+    public void shouldSentEventsForApplication() throws EventProxyException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5MjIyNw=="}, "originalCommit": {"oid": "41449fbd486b91ddf45b93f74c33fa0872716666"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODEzMDAyOnYy", "diffSide": "RIGHT", "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/ApplicationEventUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOToyMzo1M1rOHAaWdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo0NTo1NVrOHAjSQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5Mzc4Mw==", "bodyText": "Why not static?", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r470193783", "createdAt": "2020-08-13T19:23:53Z", "author": {"login": "christianpape"}, "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/ApplicationEventUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2008-2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.web.rest.v2;\n+\n+import static org.opennms.netmgt.events.api.EventConstants.APPLICATION_CHANGED_EVENT_UEI;\n+import static org.opennms.netmgt.events.api.EventConstants.PARM_APPLICATION_ID;\n+import static org.opennms.netmgt.events.api.EventConstants.PARM_APPLICATION_NAME;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.opennms.netmgt.model.OnmsApplication;\n+import org.opennms.netmgt.model.events.EventBuilder;\n+import org.opennms.netmgt.xml.event.Event;\n+\n+public class ApplicationEventUtil {\n+\n+    public List<Event> getApplicationChangedEvents(final Collection<OnmsApplication> applications) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41449fbd486b91ddf45b93f74c33fa0872716666"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0MDE2Mw==", "bodyText": "sure. Fixed.", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r470340163", "createdAt": "2020-08-14T00:45:55Z", "author": {"login": "patrick-schweizer"}, "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/ApplicationEventUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2008-2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.web.rest.v2;\n+\n+import static org.opennms.netmgt.events.api.EventConstants.APPLICATION_CHANGED_EVENT_UEI;\n+import static org.opennms.netmgt.events.api.EventConstants.PARM_APPLICATION_ID;\n+import static org.opennms.netmgt.events.api.EventConstants.PARM_APPLICATION_NAME;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.opennms.netmgt.model.OnmsApplication;\n+import org.opennms.netmgt.model.events.EventBuilder;\n+import org.opennms.netmgt.xml.event.Event;\n+\n+public class ApplicationEventUtil {\n+\n+    public List<Event> getApplicationChangedEvents(final Collection<OnmsApplication> applications) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5Mzc4Mw=="}, "originalCommit": {"oid": "41449fbd486b91ddf45b93f74c33fa0872716666"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODEzMzI3OnYy", "diffSide": "RIGHT", "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/NodeMonitoredServiceRestService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOToyNDozNlrOHAaYQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo0NjoyMFrOHAjTOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5NDI0Mw==", "bodyText": "Is there a reason why the method is not static?", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r470194243", "createdAt": "2020-08-13T19:24:36Z", "author": {"login": "christianpape"}, "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/NodeMonitoredServiceRestService.java", "diffHunk": "@@ -159,6 +164,8 @@ protected Response doCreate(SecurityContext securityContext, UriInfo uriInfo, On\n         final Event e = EventUtils.createNodeGainedServiceEvent(\"ReST\", iface.getNode().getId(), iface.getIpAddress(), service.getServiceName(), iface.getNode().getLabel(),\n                                                                 iface.getNode().getLabelSource(), iface.getNode().getSysName(), iface.getNode().getSysDescription());\n         sendEvent(e);\n+        new ApplicationEventUtil().getApplicationChangedEvents(service.getApplications()).forEach(this::sendEvent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41449fbd486b91ddf45b93f74c33fa0872716666"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0MDQwOQ==", "bodyText": "its static now.", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r470340409", "createdAt": "2020-08-14T00:46:20Z", "author": {"login": "patrick-schweizer"}, "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/NodeMonitoredServiceRestService.java", "diffHunk": "@@ -159,6 +164,8 @@ protected Response doCreate(SecurityContext securityContext, UriInfo uriInfo, On\n         final Event e = EventUtils.createNodeGainedServiceEvent(\"ReST\", iface.getNode().getId(), iface.getIpAddress(), service.getServiceName(), iface.getNode().getLabel(),\n                                                                 iface.getNode().getLabelSource(), iface.getNode().getSysName(), iface.getNode().getSysDescription());\n         sendEvent(e);\n+        new ApplicationEventUtil().getApplicationChangedEvents(service.getApplications()).forEach(this::sendEvent);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5NDI0Mw=="}, "originalCommit": {"oid": "41449fbd486b91ddf45b93f74c33fa0872716666"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODEzNjQ0OnYy", "diffSide": "RIGHT", "path": "opennms-webapp-rest/src/test/java/org/opennms/web/rest/v2/ApplicationRestServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOToyNToyMVrOHAaaEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo0OTo1OVrOHAjcjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5NDcwNQ==", "bodyText": "Again, use 'send' instead of 'sent'", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r470194705", "createdAt": "2020-08-13T19:25:21Z", "author": {"login": "christianpape"}, "path": "opennms-webapp-rest/src/test/java/org/opennms/web/rest/v2/ApplicationRestServiceTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2008-2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.web.rest.v2;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Map;\n+\n+import javax.ws.rs.core.SecurityContext;\n+import javax.ws.rs.core.UriBuilder;\n+import javax.ws.rs.core.UriBuilderException;\n+import javax.ws.rs.core.UriInfo;\n+\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.opennms.netmgt.dao.api.ApplicationDao;\n+import org.opennms.netmgt.dao.mock.MockApplicationDao;\n+import org.opennms.netmgt.events.api.EventConstants;\n+import org.opennms.netmgt.events.api.EventProxy;\n+import org.opennms.netmgt.events.api.EventProxyException;\n+import org.opennms.netmgt.model.OnmsApplication;\n+import org.opennms.netmgt.xml.event.Event;\n+\n+public class ApplicationRestServiceTest {\n+    @Test\n+    public void shouldSentEvents() throws EventProxyException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41449fbd486b91ddf45b93f74c33fa0872716666"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0Mjc5Ng==", "bodyText": "\ud83d\udc4d fixed", "url": "https://github.com/OpenNMS/opennms/pull/3100#discussion_r470342796", "createdAt": "2020-08-14T00:49:59Z", "author": {"login": "patrick-schweizer"}, "path": "opennms-webapp-rest/src/test/java/org/opennms/web/rest/v2/ApplicationRestServiceTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2008-2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.web.rest.v2;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Map;\n+\n+import javax.ws.rs.core.SecurityContext;\n+import javax.ws.rs.core.UriBuilder;\n+import javax.ws.rs.core.UriBuilderException;\n+import javax.ws.rs.core.UriInfo;\n+\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.opennms.netmgt.dao.api.ApplicationDao;\n+import org.opennms.netmgt.dao.mock.MockApplicationDao;\n+import org.opennms.netmgt.events.api.EventConstants;\n+import org.opennms.netmgt.events.api.EventProxy;\n+import org.opennms.netmgt.events.api.EventProxyException;\n+import org.opennms.netmgt.model.OnmsApplication;\n+import org.opennms.netmgt.xml.event.Event;\n+\n+public class ApplicationRestServiceTest {\n+    @Test\n+    public void shouldSentEvents() throws EventProxyException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5NDcwNQ=="}, "originalCommit": {"oid": "41449fbd486b91ddf45b93f74c33fa0872716666"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3056, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}