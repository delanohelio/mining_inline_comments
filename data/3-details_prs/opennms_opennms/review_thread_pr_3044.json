{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NzYzMTM4", "number": 3044, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjoxMzoxNlrOEIb2zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDozMDoyMFrOEI6dVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjgwNDYwOnYy", "diffSide": "RIGHT", "path": "opennms-doc/guide-admin/src/asciidoc/text/telemetryd/introduction.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjoxMzoxNlrOGoZVUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzozMzo1MlrOGphFdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAxMTI4Mw==", "bodyText": "Is this true? As far I remember we have parsers on the Minion as described here: https://docs.opennms.org/opennms/releases/26.1.1/guide-admin/guide-admin.html#_push_sensor_data_through_minion\n@fooker can you verify this here?", "url": "https://github.com/OpenNMS/opennms/pull/3044#discussion_r445011283", "createdAt": "2020-06-24T16:13:16Z", "author": {"login": "indigo423"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/telemetryd/introduction.adoc", "diffHunk": "@@ -2,68 +2,80 @@\n // Allow GitHub image rendering\n :imagesdir: ../../images\n \n-The telemetry daemon (telemetryd) provides an extensible framework that can be used to handle sensor data pushed to _{opennms-product-name}_.\n-The framework can be used to implement support for a variety of applications which use different protocols to transfer metrics.\n-Using _telemetryd_, operators can define listeners supporting different protocols to receive the telemetry data and adapters transferring the received data into generic formats like flows or performance data.\n+The telemetry daemon (telemetryd) provides an extensible framework you can use to handle sensor data pushed to _{opennms-product-name}_.\n+Use the framework to support applications that use different protocols to transfer metrics.\n+With _telemetryd_, operators can define listeners supporting different protocols to receive the telemetry data and adapters transferring the received data into generic formats like flows or performance data.\n \n .Generic component overview of components in telemetryd\n image::telemetryd/telemetryd-overview.png[]\n \n The configuration is split in two parts.\n-_Listeners_ and attached _Parsers_ on one side, are responsible for receiving telemetry data transported over a specific protocol and parse the protocol according to its specification.\n+_Listeners_ and attached _Parsers_ on one side, receive telemetry data transported over a specific protocol and parse the protocol according to its specification.\n On the other side, _Adapters_ pick up the parsed data and enrich it before persisting it.\n \n-_Queues_ are used to transport the parsed telemetry data from _Parsers_ to _Adapters_ by binding a specific _Parser_ to a specific _Adapter_.\n+_Queues_ transport the parsed telemetry data from _Parsers_ to _Adapters_ by binding a specific _Parser_ to a specific _Adapter_.\n \n === _Listeners_ and _Parsers_\n-_Listeners_ are responsible for receiving sensor data from some external source and hand them off to _Parsers_ which handles the transport protocol format and extracts the transported data.\n+_Listeners_ receive sensor data from an external source and hand them off to _Parsers_, which handle the transport protocol format and extract the transported data.\n \n A _Listener_ does the transport protocol handling like opening a socket and accepting incoming connections.\n-The received messages are then passed to the parser configured for the _Listener_ which parses the concrete protocol implementation and extract all available information out of the received message.\n+The received messages are then passed to the parser configured for the _Listener_ which parses the concrete protocol implementation and extracts all available information out of the received message.\n For further processing, the extracted data is handed over to the configured queue.\n \n-For example: A _Listener_ may open a UDP socket for receiving packets and a assigned _Parser_ parses the incoming IPFix packets.\n+For example: a _Listener_ may open a UDP socket for receiving packets and an assigned _Parser_ parses the incoming IPFIX packets.\n \n-_Parsers_ and _Listeners_ must work together in a tight manner.\n-Therefore they can not be combined in any possible combination.\n-Which _Parser_ is supported by which _Listener_ is described in the documentation of each _Parser_ accordingly.\n+_Parsers_ and _Listeners_ must work together closely.\n+Therefore, they can not be combined in any random way.\n+Which _Parser_ is supported by which _Listener_ is described in the documentation of each respective _Parser_.\n \n-TIP: You can provide the parameter `maxClockSkew` in your parser definition to enable clock skew detection for exporters. It specifies the maximum delta in seconds between exporter and Minion timestamps. If violated an alarm will be generated for the exporting device. The default value is 0, so clock skew detection is disabled. Furthermore, a parameter `clockSkewEventRate` can be used to rate-limit clock skew events. The default is `3600` seconds, so every hour an event will be sent.\n+TIP: You can provide the parameter `maxClockSkew` in your parser definition to enable clock skew detection for exporters. \n+It specifies the maximum delta in seconds between exporter and Minion time stamps. \n+If violated, an alarm will be generated for the exporting device. \n+The default value is 0, so clock skew detection is disabled. \n+Furthermore, a parameter `clockSkewEventRate` can be used to rate-limit clock skew events.\n+The default is `3600` seconds, so every hour an event will be sent.\n+\n+==== Working with Minions\n+While {opennms-product-name} can operate as both a listener and a parser, Minion cannot.\n+A Minion receives data (listens). \n+Listeners on Minion must use parsers on {opennms-product-name} or Sentinel to process the data. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b01bdcdde6bef1d7cdac586797ffb85cf5b845"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNjcwNQ==", "bodyText": "@indigo423 has a point there. The listeners and parsers run on the minion whereas the adapters are executed on the sentinel. The main opennms instance can be both.", "url": "https://github.com/OpenNMS/opennms/pull/3044#discussion_r445816705", "createdAt": "2020-06-25T20:23:33Z", "author": {"login": "fooker"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/telemetryd/introduction.adoc", "diffHunk": "@@ -2,68 +2,80 @@\n // Allow GitHub image rendering\n :imagesdir: ../../images\n \n-The telemetry daemon (telemetryd) provides an extensible framework that can be used to handle sensor data pushed to _{opennms-product-name}_.\n-The framework can be used to implement support for a variety of applications which use different protocols to transfer metrics.\n-Using _telemetryd_, operators can define listeners supporting different protocols to receive the telemetry data and adapters transferring the received data into generic formats like flows or performance data.\n+The telemetry daemon (telemetryd) provides an extensible framework you can use to handle sensor data pushed to _{opennms-product-name}_.\n+Use the framework to support applications that use different protocols to transfer metrics.\n+With _telemetryd_, operators can define listeners supporting different protocols to receive the telemetry data and adapters transferring the received data into generic formats like flows or performance data.\n \n .Generic component overview of components in telemetryd\n image::telemetryd/telemetryd-overview.png[]\n \n The configuration is split in two parts.\n-_Listeners_ and attached _Parsers_ on one side, are responsible for receiving telemetry data transported over a specific protocol and parse the protocol according to its specification.\n+_Listeners_ and attached _Parsers_ on one side, receive telemetry data transported over a specific protocol and parse the protocol according to its specification.\n On the other side, _Adapters_ pick up the parsed data and enrich it before persisting it.\n \n-_Queues_ are used to transport the parsed telemetry data from _Parsers_ to _Adapters_ by binding a specific _Parser_ to a specific _Adapter_.\n+_Queues_ transport the parsed telemetry data from _Parsers_ to _Adapters_ by binding a specific _Parser_ to a specific _Adapter_.\n \n === _Listeners_ and _Parsers_\n-_Listeners_ are responsible for receiving sensor data from some external source and hand them off to _Parsers_ which handles the transport protocol format and extracts the transported data.\n+_Listeners_ receive sensor data from an external source and hand them off to _Parsers_, which handle the transport protocol format and extract the transported data.\n \n A _Listener_ does the transport protocol handling like opening a socket and accepting incoming connections.\n-The received messages are then passed to the parser configured for the _Listener_ which parses the concrete protocol implementation and extract all available information out of the received message.\n+The received messages are then passed to the parser configured for the _Listener_ which parses the concrete protocol implementation and extracts all available information out of the received message.\n For further processing, the extracted data is handed over to the configured queue.\n \n-For example: A _Listener_ may open a UDP socket for receiving packets and a assigned _Parser_ parses the incoming IPFix packets.\n+For example: a _Listener_ may open a UDP socket for receiving packets and an assigned _Parser_ parses the incoming IPFIX packets.\n \n-_Parsers_ and _Listeners_ must work together in a tight manner.\n-Therefore they can not be combined in any possible combination.\n-Which _Parser_ is supported by which _Listener_ is described in the documentation of each _Parser_ accordingly.\n+_Parsers_ and _Listeners_ must work together closely.\n+Therefore, they can not be combined in any random way.\n+Which _Parser_ is supported by which _Listener_ is described in the documentation of each respective _Parser_.\n \n-TIP: You can provide the parameter `maxClockSkew` in your parser definition to enable clock skew detection for exporters. It specifies the maximum delta in seconds between exporter and Minion timestamps. If violated an alarm will be generated for the exporting device. The default value is 0, so clock skew detection is disabled. Furthermore, a parameter `clockSkewEventRate` can be used to rate-limit clock skew events. The default is `3600` seconds, so every hour an event will be sent.\n+TIP: You can provide the parameter `maxClockSkew` in your parser definition to enable clock skew detection for exporters. \n+It specifies the maximum delta in seconds between exporter and Minion time stamps. \n+If violated, an alarm will be generated for the exporting device. \n+The default value is 0, so clock skew detection is disabled. \n+Furthermore, a parameter `clockSkewEventRate` can be used to rate-limit clock skew events.\n+The default is `3600` seconds, so every hour an event will be sent.\n+\n+==== Working with Minions\n+While {opennms-product-name} can operate as both a listener and a parser, Minion cannot.\n+A Minion receives data (listens). \n+Listeners on Minion must use parsers on {opennms-product-name} or Sentinel to process the data. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAxMTI4Mw=="}, "originalCommit": {"oid": "79b01bdcdde6bef1d7cdac586797ffb85cf5b845"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4Njg2OA==", "bodyText": "Thanks for clarifying. Am updating the documentation.", "url": "https://github.com/OpenNMS/opennms/pull/3044#discussion_r446186868", "createdAt": "2020-06-26T13:33:52Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/telemetryd/introduction.adoc", "diffHunk": "@@ -2,68 +2,80 @@\n // Allow GitHub image rendering\n :imagesdir: ../../images\n \n-The telemetry daemon (telemetryd) provides an extensible framework that can be used to handle sensor data pushed to _{opennms-product-name}_.\n-The framework can be used to implement support for a variety of applications which use different protocols to transfer metrics.\n-Using _telemetryd_, operators can define listeners supporting different protocols to receive the telemetry data and adapters transferring the received data into generic formats like flows or performance data.\n+The telemetry daemon (telemetryd) provides an extensible framework you can use to handle sensor data pushed to _{opennms-product-name}_.\n+Use the framework to support applications that use different protocols to transfer metrics.\n+With _telemetryd_, operators can define listeners supporting different protocols to receive the telemetry data and adapters transferring the received data into generic formats like flows or performance data.\n \n .Generic component overview of components in telemetryd\n image::telemetryd/telemetryd-overview.png[]\n \n The configuration is split in two parts.\n-_Listeners_ and attached _Parsers_ on one side, are responsible for receiving telemetry data transported over a specific protocol and parse the protocol according to its specification.\n+_Listeners_ and attached _Parsers_ on one side, receive telemetry data transported over a specific protocol and parse the protocol according to its specification.\n On the other side, _Adapters_ pick up the parsed data and enrich it before persisting it.\n \n-_Queues_ are used to transport the parsed telemetry data from _Parsers_ to _Adapters_ by binding a specific _Parser_ to a specific _Adapter_.\n+_Queues_ transport the parsed telemetry data from _Parsers_ to _Adapters_ by binding a specific _Parser_ to a specific _Adapter_.\n \n === _Listeners_ and _Parsers_\n-_Listeners_ are responsible for receiving sensor data from some external source and hand them off to _Parsers_ which handles the transport protocol format and extracts the transported data.\n+_Listeners_ receive sensor data from an external source and hand them off to _Parsers_, which handle the transport protocol format and extract the transported data.\n \n A _Listener_ does the transport protocol handling like opening a socket and accepting incoming connections.\n-The received messages are then passed to the parser configured for the _Listener_ which parses the concrete protocol implementation and extract all available information out of the received message.\n+The received messages are then passed to the parser configured for the _Listener_ which parses the concrete protocol implementation and extracts all available information out of the received message.\n For further processing, the extracted data is handed over to the configured queue.\n \n-For example: A _Listener_ may open a UDP socket for receiving packets and a assigned _Parser_ parses the incoming IPFix packets.\n+For example: a _Listener_ may open a UDP socket for receiving packets and an assigned _Parser_ parses the incoming IPFIX packets.\n \n-_Parsers_ and _Listeners_ must work together in a tight manner.\n-Therefore they can not be combined in any possible combination.\n-Which _Parser_ is supported by which _Listener_ is described in the documentation of each _Parser_ accordingly.\n+_Parsers_ and _Listeners_ must work together closely.\n+Therefore, they can not be combined in any random way.\n+Which _Parser_ is supported by which _Listener_ is described in the documentation of each respective _Parser_.\n \n-TIP: You can provide the parameter `maxClockSkew` in your parser definition to enable clock skew detection for exporters. It specifies the maximum delta in seconds between exporter and Minion timestamps. If violated an alarm will be generated for the exporting device. The default value is 0, so clock skew detection is disabled. Furthermore, a parameter `clockSkewEventRate` can be used to rate-limit clock skew events. The default is `3600` seconds, so every hour an event will be sent.\n+TIP: You can provide the parameter `maxClockSkew` in your parser definition to enable clock skew detection for exporters. \n+It specifies the maximum delta in seconds between exporter and Minion time stamps. \n+If violated, an alarm will be generated for the exporting device. \n+The default value is 0, so clock skew detection is disabled. \n+Furthermore, a parameter `clockSkewEventRate` can be used to rate-limit clock skew events.\n+The default is `3600` seconds, so every hour an event will be sent.\n+\n+==== Working with Minions\n+While {opennms-product-name} can operate as both a listener and a parser, Minion cannot.\n+A Minion receives data (listens). \n+Listeners on Minion must use parsers on {opennms-product-name} or Sentinel to process the data. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAxMTI4Mw=="}, "originalCommit": {"oid": "79b01bdcdde6bef1d7cdac586797ffb85cf5b845"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjgyMjAwOnYy", "diffSide": "RIGHT", "path": "opennms-doc/guide-development/src/asciidoc/text/docs/include-source.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjoxNzo1M1rOGoZgZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjoxNzo1M1rOGoZgZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAxNDExOA==", "bodyText": "line break", "url": "https://github.com/OpenNMS/opennms/pull/3044#discussion_r445014118", "createdAt": "2020-06-24T16:17:53Z", "author": {"login": "indigo423"}, "path": "opennms-doc/guide-development/src/asciidoc/text/docs/include-source.adoc", "diffHunk": "@@ -6,15 +6,15 @@\n === Code Snippets\n \n You can include code snippets, configuration- or source code files in the documentation.\n-You can enable syntax highlighting by providing the given language parameter, this will work on source code or configuration.\n+You can enable syntax highlighting by providing the given language parameter. This will work on source code or configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b01bdcdde6bef1d7cdac586797ffb85cf5b845"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Nzc5MDY0OnYy", "diffSide": "RIGHT", "path": "opennms-doc/guide-admin/src/asciidoc/text/telemetryd/introduction.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDoyMTowMlrOGpKapw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzozNjoyNlrOGphKzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNTQ2Mw==", "bodyText": "While being here already, it is quite a strange place to mentioned it here. This feature is only supported by the netflow and ipfix parsers.", "url": "https://github.com/OpenNMS/opennms/pull/3044#discussion_r445815463", "createdAt": "2020-06-25T20:21:02Z", "author": {"login": "fooker"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/telemetryd/introduction.adoc", "diffHunk": "@@ -2,68 +2,80 @@\n // Allow GitHub image rendering\n :imagesdir: ../../images\n \n-The telemetry daemon (telemetryd) provides an extensible framework that can be used to handle sensor data pushed to _{opennms-product-name}_.\n-The framework can be used to implement support for a variety of applications which use different protocols to transfer metrics.\n-Using _telemetryd_, operators can define listeners supporting different protocols to receive the telemetry data and adapters transferring the received data into generic formats like flows or performance data.\n+The telemetry daemon (telemetryd) provides an extensible framework you can use to handle sensor data pushed to _{opennms-product-name}_.\n+Use the framework to support applications that use different protocols to transfer metrics.\n+With _telemetryd_, operators can define listeners supporting different protocols to receive the telemetry data and adapters transferring the received data into generic formats like flows or performance data.\n \n .Generic component overview of components in telemetryd\n image::telemetryd/telemetryd-overview.png[]\n \n The configuration is split in two parts.\n-_Listeners_ and attached _Parsers_ on one side, are responsible for receiving telemetry data transported over a specific protocol and parse the protocol according to its specification.\n+_Listeners_ and attached _Parsers_ on one side, receive telemetry data transported over a specific protocol and parse the protocol according to its specification.\n On the other side, _Adapters_ pick up the parsed data and enrich it before persisting it.\n \n-_Queues_ are used to transport the parsed telemetry data from _Parsers_ to _Adapters_ by binding a specific _Parser_ to a specific _Adapter_.\n+_Queues_ transport the parsed telemetry data from _Parsers_ to _Adapters_ by binding a specific _Parser_ to a specific _Adapter_.\n \n === _Listeners_ and _Parsers_\n-_Listeners_ are responsible for receiving sensor data from some external source and hand them off to _Parsers_ which handles the transport protocol format and extracts the transported data.\n+_Listeners_ receive sensor data from an external source and hand them off to _Parsers_, which handle the transport protocol format and extract the transported data.\n \n A _Listener_ does the transport protocol handling like opening a socket and accepting incoming connections.\n-The received messages are then passed to the parser configured for the _Listener_ which parses the concrete protocol implementation and extract all available information out of the received message.\n+The received messages are then passed to the parser configured for the _Listener_ which parses the concrete protocol implementation and extracts all available information out of the received message.\n For further processing, the extracted data is handed over to the configured queue.\n \n-For example: A _Listener_ may open a UDP socket for receiving packets and a assigned _Parser_ parses the incoming IPFix packets.\n+For example: a _Listener_ may open a UDP socket for receiving packets and an assigned _Parser_ parses the incoming IPFIX packets.\n \n-_Parsers_ and _Listeners_ must work together in a tight manner.\n-Therefore they can not be combined in any possible combination.\n-Which _Parser_ is supported by which _Listener_ is described in the documentation of each _Parser_ accordingly.\n+_Parsers_ and _Listeners_ must work together closely.\n+Therefore, they can not be combined in any random way.\n+Which _Parser_ is supported by which _Listener_ is described in the documentation of each respective _Parser_.\n \n-TIP: You can provide the parameter `maxClockSkew` in your parser definition to enable clock skew detection for exporters. It specifies the maximum delta in seconds between exporter and Minion timestamps. If violated an alarm will be generated for the exporting device. The default value is 0, so clock skew detection is disabled. Furthermore, a parameter `clockSkewEventRate` can be used to rate-limit clock skew events. The default is `3600` seconds, so every hour an event will be sent.\n+TIP: You can provide the parameter `maxClockSkew` in your parser definition to enable clock skew detection for exporters. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b01bdcdde6bef1d7cdac586797ffb85cf5b845"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4ODIzOA==", "bodyText": "I will remove it from here, add to netflow and ipfix sections.", "url": "https://github.com/OpenNMS/opennms/pull/3044#discussion_r446188238", "createdAt": "2020-06-26T13:36:26Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/telemetryd/introduction.adoc", "diffHunk": "@@ -2,68 +2,80 @@\n // Allow GitHub image rendering\n :imagesdir: ../../images\n \n-The telemetry daemon (telemetryd) provides an extensible framework that can be used to handle sensor data pushed to _{opennms-product-name}_.\n-The framework can be used to implement support for a variety of applications which use different protocols to transfer metrics.\n-Using _telemetryd_, operators can define listeners supporting different protocols to receive the telemetry data and adapters transferring the received data into generic formats like flows or performance data.\n+The telemetry daemon (telemetryd) provides an extensible framework you can use to handle sensor data pushed to _{opennms-product-name}_.\n+Use the framework to support applications that use different protocols to transfer metrics.\n+With _telemetryd_, operators can define listeners supporting different protocols to receive the telemetry data and adapters transferring the received data into generic formats like flows or performance data.\n \n .Generic component overview of components in telemetryd\n image::telemetryd/telemetryd-overview.png[]\n \n The configuration is split in two parts.\n-_Listeners_ and attached _Parsers_ on one side, are responsible for receiving telemetry data transported over a specific protocol and parse the protocol according to its specification.\n+_Listeners_ and attached _Parsers_ on one side, receive telemetry data transported over a specific protocol and parse the protocol according to its specification.\n On the other side, _Adapters_ pick up the parsed data and enrich it before persisting it.\n \n-_Queues_ are used to transport the parsed telemetry data from _Parsers_ to _Adapters_ by binding a specific _Parser_ to a specific _Adapter_.\n+_Queues_ transport the parsed telemetry data from _Parsers_ to _Adapters_ by binding a specific _Parser_ to a specific _Adapter_.\n \n === _Listeners_ and _Parsers_\n-_Listeners_ are responsible for receiving sensor data from some external source and hand them off to _Parsers_ which handles the transport protocol format and extracts the transported data.\n+_Listeners_ receive sensor data from an external source and hand them off to _Parsers_, which handle the transport protocol format and extract the transported data.\n \n A _Listener_ does the transport protocol handling like opening a socket and accepting incoming connections.\n-The received messages are then passed to the parser configured for the _Listener_ which parses the concrete protocol implementation and extract all available information out of the received message.\n+The received messages are then passed to the parser configured for the _Listener_ which parses the concrete protocol implementation and extracts all available information out of the received message.\n For further processing, the extracted data is handed over to the configured queue.\n \n-For example: A _Listener_ may open a UDP socket for receiving packets and a assigned _Parser_ parses the incoming IPFix packets.\n+For example: a _Listener_ may open a UDP socket for receiving packets and an assigned _Parser_ parses the incoming IPFIX packets.\n \n-_Parsers_ and _Listeners_ must work together in a tight manner.\n-Therefore they can not be combined in any possible combination.\n-Which _Parser_ is supported by which _Listener_ is described in the documentation of each _Parser_ accordingly.\n+_Parsers_ and _Listeners_ must work together closely.\n+Therefore, they can not be combined in any random way.\n+Which _Parser_ is supported by which _Listener_ is described in the documentation of each respective _Parser_.\n \n-TIP: You can provide the parameter `maxClockSkew` in your parser definition to enable clock skew detection for exporters. It specifies the maximum delta in seconds between exporter and Minion timestamps. If violated an alarm will be generated for the exporting device. The default value is 0, so clock skew detection is disabled. Furthermore, a parameter `clockSkewEventRate` can be used to rate-limit clock skew events. The default is `3600` seconds, so every hour an event will be sent.\n+TIP: You can provide the parameter `maxClockSkew` in your parser definition to enable clock skew detection for exporters. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNTQ2Mw=="}, "originalCommit": {"oid": "79b01bdcdde6bef1d7cdac586797ffb85cf5b845"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Nzc5MjA1OnYy", "diffSide": "RIGHT", "path": "opennms-doc/guide-admin/src/asciidoc/text/telemetryd/introduction.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDoyMToyOVrOGpKblQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDoyMToyOVrOGpKblQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNTcwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If violated, an alarm will be generated for the exporting device. \n          \n          \n            \n            If exceeded, an alarm will be generated for the exporting device.", "url": "https://github.com/OpenNMS/opennms/pull/3044#discussion_r445815701", "createdAt": "2020-06-25T20:21:29Z", "author": {"login": "fooker"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/telemetryd/introduction.adoc", "diffHunk": "@@ -2,68 +2,80 @@\n // Allow GitHub image rendering\n :imagesdir: ../../images\n \n-The telemetry daemon (telemetryd) provides an extensible framework that can be used to handle sensor data pushed to _{opennms-product-name}_.\n-The framework can be used to implement support for a variety of applications which use different protocols to transfer metrics.\n-Using _telemetryd_, operators can define listeners supporting different protocols to receive the telemetry data and adapters transferring the received data into generic formats like flows or performance data.\n+The telemetry daemon (telemetryd) provides an extensible framework you can use to handle sensor data pushed to _{opennms-product-name}_.\n+Use the framework to support applications that use different protocols to transfer metrics.\n+With _telemetryd_, operators can define listeners supporting different protocols to receive the telemetry data and adapters transferring the received data into generic formats like flows or performance data.\n \n .Generic component overview of components in telemetryd\n image::telemetryd/telemetryd-overview.png[]\n \n The configuration is split in two parts.\n-_Listeners_ and attached _Parsers_ on one side, are responsible for receiving telemetry data transported over a specific protocol and parse the protocol according to its specification.\n+_Listeners_ and attached _Parsers_ on one side, receive telemetry data transported over a specific protocol and parse the protocol according to its specification.\n On the other side, _Adapters_ pick up the parsed data and enrich it before persisting it.\n \n-_Queues_ are used to transport the parsed telemetry data from _Parsers_ to _Adapters_ by binding a specific _Parser_ to a specific _Adapter_.\n+_Queues_ transport the parsed telemetry data from _Parsers_ to _Adapters_ by binding a specific _Parser_ to a specific _Adapter_.\n \n === _Listeners_ and _Parsers_\n-_Listeners_ are responsible for receiving sensor data from some external source and hand them off to _Parsers_ which handles the transport protocol format and extracts the transported data.\n+_Listeners_ receive sensor data from an external source and hand them off to _Parsers_, which handle the transport protocol format and extract the transported data.\n \n A _Listener_ does the transport protocol handling like opening a socket and accepting incoming connections.\n-The received messages are then passed to the parser configured for the _Listener_ which parses the concrete protocol implementation and extract all available information out of the received message.\n+The received messages are then passed to the parser configured for the _Listener_ which parses the concrete protocol implementation and extracts all available information out of the received message.\n For further processing, the extracted data is handed over to the configured queue.\n \n-For example: A _Listener_ may open a UDP socket for receiving packets and a assigned _Parser_ parses the incoming IPFix packets.\n+For example: a _Listener_ may open a UDP socket for receiving packets and an assigned _Parser_ parses the incoming IPFIX packets.\n \n-_Parsers_ and _Listeners_ must work together in a tight manner.\n-Therefore they can not be combined in any possible combination.\n-Which _Parser_ is supported by which _Listener_ is described in the documentation of each _Parser_ accordingly.\n+_Parsers_ and _Listeners_ must work together closely.\n+Therefore, they can not be combined in any random way.\n+Which _Parser_ is supported by which _Listener_ is described in the documentation of each respective _Parser_.\n \n-TIP: You can provide the parameter `maxClockSkew` in your parser definition to enable clock skew detection for exporters. It specifies the maximum delta in seconds between exporter and Minion timestamps. If violated an alarm will be generated for the exporting device. The default value is 0, so clock skew detection is disabled. Furthermore, a parameter `clockSkewEventRate` can be used to rate-limit clock skew events. The default is `3600` seconds, so every hour an event will be sent.\n+TIP: You can provide the parameter `maxClockSkew` in your parser definition to enable clock skew detection for exporters. \n+It specifies the maximum delta in seconds between exporter and Minion time stamps. \n+If violated, an alarm will be generated for the exporting device. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b01bdcdde6bef1d7cdac586797ffb85cf5b845"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Nzc5OTI1OnYy", "diffSide": "RIGHT", "path": "opennms-doc/guide-admin/src/asciidoc/text/telemetryd/introduction.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDoyMzo1NlrOGpKgQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzozNzoyN1rOGphNLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNjg5OA==", "bodyText": "Is there something missing?", "url": "https://github.com/OpenNMS/opennms/pull/3044#discussion_r445816898", "createdAt": "2020-06-25T20:23:56Z", "author": {"login": "fooker"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/telemetryd/introduction.adoc", "diffHunk": "@@ -2,68 +2,80 @@\n // Allow GitHub image rendering\n :imagesdir: ../../images\n \n-The telemetry daemon (telemetryd) provides an extensible framework that can be used to handle sensor data pushed to _{opennms-product-name}_.\n-The framework can be used to implement support for a variety of applications which use different protocols to transfer metrics.\n-Using _telemetryd_, operators can define listeners supporting different protocols to receive the telemetry data and adapters transferring the received data into generic formats like flows or performance data.\n+The telemetry daemon (telemetryd) provides an extensible framework you can use to handle sensor data pushed to _{opennms-product-name}_.\n+Use the framework to support applications that use different protocols to transfer metrics.\n+With _telemetryd_, operators can define listeners supporting different protocols to receive the telemetry data and adapters transferring the received data into generic formats like flows or performance data.\n \n .Generic component overview of components in telemetryd\n image::telemetryd/telemetryd-overview.png[]\n \n The configuration is split in two parts.\n-_Listeners_ and attached _Parsers_ on one side, are responsible for receiving telemetry data transported over a specific protocol and parse the protocol according to its specification.\n+_Listeners_ and attached _Parsers_ on one side, receive telemetry data transported over a specific protocol and parse the protocol according to its specification.\n On the other side, _Adapters_ pick up the parsed data and enrich it before persisting it.\n \n-_Queues_ are used to transport the parsed telemetry data from _Parsers_ to _Adapters_ by binding a specific _Parser_ to a specific _Adapter_.\n+_Queues_ transport the parsed telemetry data from _Parsers_ to _Adapters_ by binding a specific _Parser_ to a specific _Adapter_.\n \n === _Listeners_ and _Parsers_\n-_Listeners_ are responsible for receiving sensor data from some external source and hand them off to _Parsers_ which handles the transport protocol format and extracts the transported data.\n+_Listeners_ receive sensor data from an external source and hand them off to _Parsers_, which handle the transport protocol format and extract the transported data.\n \n A _Listener_ does the transport protocol handling like opening a socket and accepting incoming connections.\n-The received messages are then passed to the parser configured for the _Listener_ which parses the concrete protocol implementation and extract all available information out of the received message.\n+The received messages are then passed to the parser configured for the _Listener_ which parses the concrete protocol implementation and extracts all available information out of the received message.\n For further processing, the extracted data is handed over to the configured queue.\n \n-For example: A _Listener_ may open a UDP socket for receiving packets and a assigned _Parser_ parses the incoming IPFix packets.\n+For example: a _Listener_ may open a UDP socket for receiving packets and an assigned _Parser_ parses the incoming IPFIX packets.\n \n-_Parsers_ and _Listeners_ must work together in a tight manner.\n-Therefore they can not be combined in any possible combination.\n-Which _Parser_ is supported by which _Listener_ is described in the documentation of each _Parser_ accordingly.\n+_Parsers_ and _Listeners_ must work together closely.\n+Therefore, they can not be combined in any random way.\n+Which _Parser_ is supported by which _Listener_ is described in the documentation of each respective _Parser_.\n \n-TIP: You can provide the parameter `maxClockSkew` in your parser definition to enable clock skew detection for exporters. It specifies the maximum delta in seconds between exporter and Minion timestamps. If violated an alarm will be generated for the exporting device. The default value is 0, so clock skew detection is disabled. Furthermore, a parameter `clockSkewEventRate` can be used to rate-limit clock skew events. The default is `3600` seconds, so every hour an event will be sent.\n+TIP: You can provide the parameter `maxClockSkew` in your parser definition to enable clock skew detection for exporters. \n+It specifies the maximum delta in seconds between exporter and Minion time stamps. \n+If violated, an alarm will be generated for the exporting device. \n+The default value is 0, so clock skew detection is disabled. \n+Furthermore, a parameter `clockSkewEventRate` can be used to rate-limit clock skew events.\n+The default is `3600` seconds, so every hour an event will be sent.\n+\n+==== Working with Minions\n+While {opennms-product-name} can operate as both a listener and a parser, Minion cannot.\n+A Minion receives data (listens). \n+Listeners on Minion must use parsers on {opennms-product-name} or Sentinel to process the data. \n+\n+Be aware that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b01bdcdde6bef1d7cdac586797ffb85cf5b845"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4ODg0NQ==", "bodyText": "deleted.", "url": "https://github.com/OpenNMS/opennms/pull/3044#discussion_r446188845", "createdAt": "2020-06-26T13:37:27Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/telemetryd/introduction.adoc", "diffHunk": "@@ -2,68 +2,80 @@\n // Allow GitHub image rendering\n :imagesdir: ../../images\n \n-The telemetry daemon (telemetryd) provides an extensible framework that can be used to handle sensor data pushed to _{opennms-product-name}_.\n-The framework can be used to implement support for a variety of applications which use different protocols to transfer metrics.\n-Using _telemetryd_, operators can define listeners supporting different protocols to receive the telemetry data and adapters transferring the received data into generic formats like flows or performance data.\n+The telemetry daemon (telemetryd) provides an extensible framework you can use to handle sensor data pushed to _{opennms-product-name}_.\n+Use the framework to support applications that use different protocols to transfer metrics.\n+With _telemetryd_, operators can define listeners supporting different protocols to receive the telemetry data and adapters transferring the received data into generic formats like flows or performance data.\n \n .Generic component overview of components in telemetryd\n image::telemetryd/telemetryd-overview.png[]\n \n The configuration is split in two parts.\n-_Listeners_ and attached _Parsers_ on one side, are responsible for receiving telemetry data transported over a specific protocol and parse the protocol according to its specification.\n+_Listeners_ and attached _Parsers_ on one side, receive telemetry data transported over a specific protocol and parse the protocol according to its specification.\n On the other side, _Adapters_ pick up the parsed data and enrich it before persisting it.\n \n-_Queues_ are used to transport the parsed telemetry data from _Parsers_ to _Adapters_ by binding a specific _Parser_ to a specific _Adapter_.\n+_Queues_ transport the parsed telemetry data from _Parsers_ to _Adapters_ by binding a specific _Parser_ to a specific _Adapter_.\n \n === _Listeners_ and _Parsers_\n-_Listeners_ are responsible for receiving sensor data from some external source and hand them off to _Parsers_ which handles the transport protocol format and extracts the transported data.\n+_Listeners_ receive sensor data from an external source and hand them off to _Parsers_, which handle the transport protocol format and extract the transported data.\n \n A _Listener_ does the transport protocol handling like opening a socket and accepting incoming connections.\n-The received messages are then passed to the parser configured for the _Listener_ which parses the concrete protocol implementation and extract all available information out of the received message.\n+The received messages are then passed to the parser configured for the _Listener_ which parses the concrete protocol implementation and extracts all available information out of the received message.\n For further processing, the extracted data is handed over to the configured queue.\n \n-For example: A _Listener_ may open a UDP socket for receiving packets and a assigned _Parser_ parses the incoming IPFix packets.\n+For example: a _Listener_ may open a UDP socket for receiving packets and an assigned _Parser_ parses the incoming IPFIX packets.\n \n-_Parsers_ and _Listeners_ must work together in a tight manner.\n-Therefore they can not be combined in any possible combination.\n-Which _Parser_ is supported by which _Listener_ is described in the documentation of each _Parser_ accordingly.\n+_Parsers_ and _Listeners_ must work together closely.\n+Therefore, they can not be combined in any random way.\n+Which _Parser_ is supported by which _Listener_ is described in the documentation of each respective _Parser_.\n \n-TIP: You can provide the parameter `maxClockSkew` in your parser definition to enable clock skew detection for exporters. It specifies the maximum delta in seconds between exporter and Minion timestamps. If violated an alarm will be generated for the exporting device. The default value is 0, so clock skew detection is disabled. Furthermore, a parameter `clockSkewEventRate` can be used to rate-limit clock skew events. The default is `3600` seconds, so every hour an event will be sent.\n+TIP: You can provide the parameter `maxClockSkew` in your parser definition to enable clock skew detection for exporters. \n+It specifies the maximum delta in seconds between exporter and Minion time stamps. \n+If violated, an alarm will be generated for the exporting device. \n+The default value is 0, so clock skew detection is disabled. \n+Furthermore, a parameter `clockSkewEventRate` can be used to rate-limit clock skew events.\n+The default is `3600` seconds, so every hour an event will be sent.\n+\n+==== Working with Minions\n+While {opennms-product-name} can operate as both a listener and a parser, Minion cannot.\n+A Minion receives data (listens). \n+Listeners on Minion must use parsers on {opennms-product-name} or Sentinel to process the data. \n+\n+Be aware that", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNjg5OA=="}, "originalCommit": {"oid": "79b01bdcdde6bef1d7cdac586797ffb85cf5b845"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzgxMTI5OnYy", "diffSide": "RIGHT", "path": "opennms-doc/guide-admin/src/asciidoc/text/telemetryd/protocols/bmp.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDoyNzo1N1rOGpKoBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDoyNzo1N1rOGpKoBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxODg4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            admin@minion()> config:property-set parsers.0.class-name org.opennms.netmgt.telemetry.protocols.common.parser.ForwardParser\n          \n          \n            \n            admin@minion()> config:property-set parsers.0.class-name org.opennms.netmgt.telemetry.protocols.bmp.parser.BmpParser", "url": "https://github.com/OpenNMS/opennms/pull/3044#discussion_r445818887", "createdAt": "2020-06-25T20:27:57Z", "author": {"login": "fooker"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/telemetryd/protocols/bmp.adoc", "diffHunk": "@@ -32,6 +32,25 @@ The BMP Parser accepts BMP connections from router packets using a <<telemetryd-\n | `bulkhead.maxWaitDurationMs`  | Limits the amount of time to wait for a saturated bulkhead (in milliseconds). | no       | 5 Minutes\n |===\n \n+===== Configure BMP Listener on a Minion\n+\n+To enable and configure a _TCP Listener_ for BMP on Minion, connect to the _Karaf Console_ and set the following properties:\n+\n+[source]\n+----\n+$ ssh -p 8201 admin@localhost\n+...\n+admin@minion()> config:edit --alias tcp-5000 --factory org.opennms.features.telemetry.listeners\n+admin@minion()> config:property-set name BMP\n+admin@minion()> config:property-set class-name org.opennms.netmgt.telemetry.listeners.TcpListener\n+admin@minion()> config:property-set parameters.port 50000\n+admin@minion()> config:property-set parsers.0.name BMP \n+admin@minion()> config:property-set parsers.0.class-name org.opennms.netmgt.telemetry.protocols.common.parser.ForwardParser", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b01bdcdde6bef1d7cdac586797ffb85cf5b845"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzgxNjQ4OnYy", "diffSide": "RIGHT", "path": "opennms-doc/guide-admin/src/asciidoc/text/telemetryd/protocols/ipfix.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDoyOTo0MFrOGpKrTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzo1MDozOFrOGphqxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxOTcyNg==", "bodyText": "Isn't \"timestamp\" a single word as it's used as a technical term?", "url": "https://github.com/OpenNMS/opennms/pull/3044#discussion_r445819726", "createdAt": "2020-06-25T20:29:40Z", "author": {"login": "fooker"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/telemetryd/protocols/ipfix.adoc", "diffHunk": "@@ -25,8 +24,8 @@ The IPFIX UDP Parser supports protocol detection.\n [options=\"header, autowidth\"]\n |===\n | Parameter             | Description                                                                    | Required | Default value\n-| `templateTimeout`     | Templates must be re-declared in the given duration or they will be dropped    | no       | 30 minutes\n-| `maxClockSkew`        | The maximum delta in seconds between exporter and Minion timestamps.       | no       | 0\n+| `templateTimeout`     | Templates must be redeclared in the given duration or they will be dropped.    | no       | 30 minutes\n+| `maxClockSkew`        | The maximum delta in seconds between exporter and Minion time stamps.       | no       | 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b01bdcdde6bef1d7cdac586797ffb85cf5b845"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5NjQyMQ==", "bodyText": "I prefer one word, and that's what the Oxford dictionary specifies, but Webster's has two words. (I've been trying to use one dictionary as a standard, and chose Webster's because it is American.) I'll go back to one word, though, as I see that's what Wikipedia uses and it seems to be industry standard. Thanks for pointing this out.\nNow, if we can persuade the Americans to use Canadian/British spelling I can go back to including the letter \"u\" to words like favourite, labour, arbour, honour, etc. :-)", "url": "https://github.com/OpenNMS/opennms/pull/3044#discussion_r446196421", "createdAt": "2020-06-26T13:50:38Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/telemetryd/protocols/ipfix.adoc", "diffHunk": "@@ -25,8 +24,8 @@ The IPFIX UDP Parser supports protocol detection.\n [options=\"header, autowidth\"]\n |===\n | Parameter             | Description                                                                    | Required | Default value\n-| `templateTimeout`     | Templates must be re-declared in the given duration or they will be dropped    | no       | 30 minutes\n-| `maxClockSkew`        | The maximum delta in seconds between exporter and Minion timestamps.       | no       | 0\n+| `templateTimeout`     | Templates must be redeclared in the given duration or they will be dropped.    | no       | 30 minutes\n+| `maxClockSkew`        | The maximum delta in seconds between exporter and Minion time stamps.       | no       | 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxOTcyNg=="}, "originalCommit": {"oid": "79b01bdcdde6bef1d7cdac586797ffb85cf5b845"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzgxODQ2OnYy", "diffSide": "RIGHT", "path": "opennms-doc/guide-admin/src/asciidoc/text/telemetryd/protocols/ipfix.adoc", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDozMDoyMFrOGpKsmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMToxMjowNlrOGpu1wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMDA1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            admin@minion()> config:property-set parsers.0.class-name org.opennms.netmgt.telemetry.protocols.common.parser.ForwardParser\n          \n          \n            \n            admin@minion()> config:property-set parsers.0.class-name org.opennms.netmgt.telemetry.protocols.netflow.parser.IpfixTcpParser", "url": "https://github.com/OpenNMS/opennms/pull/3044#discussion_r445820056", "createdAt": "2020-06-25T20:30:20Z", "author": {"login": "fooker"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/telemetryd/protocols/ipfix.adoc", "diffHunk": "@@ -48,12 +47,31 @@ The IPFIX TCP Parser accepts packets received by a <<telemetryd-listener-tcp, TC\n \n This parser does not currently have any configurable parameters.\n \n+===== Configure IPFIX Listener on a Minion\n+\n+To enable and configure a _TCP Listener_ for IPFIX on Minion, connect to the _Karaf Console_ and set the following properties:\n+\n+[source]\n+----\n+$ ssh -p 8201 admin@localhost\n+...\n+admin@minion()> config:edit --alias tcp-5000 --factory org.opennms.features.telemetry.listeners\n+admin@minion()> config:property-set name IPFIX\n+admin@minion()> config:property-set class-name org.opennms.netmgt.telemetry.listeners.TcpListener\n+admin@minion()> config:property-set parameters.port 50000\n+admin@minion()> config:property-set parsers.0.name IPFIX \n+admin@minion()> config:property-set parsers.0.class-name org.opennms.netmgt.telemetry.protocols.common.parser.ForwardParser", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b01bdcdde6bef1d7cdac586797ffb85cf5b845"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIzNjEyNg==", "bodyText": "to clarify, shouldn't \"netflow\" be \"ipfix\"", "url": "https://github.com/OpenNMS/opennms/pull/3044#discussion_r446236126", "createdAt": "2020-06-26T14:57:42Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/telemetryd/protocols/ipfix.adoc", "diffHunk": "@@ -48,12 +47,31 @@ The IPFIX TCP Parser accepts packets received by a <<telemetryd-listener-tcp, TC\n \n This parser does not currently have any configurable parameters.\n \n+===== Configure IPFIX Listener on a Minion\n+\n+To enable and configure a _TCP Listener_ for IPFIX on Minion, connect to the _Karaf Console_ and set the following properties:\n+\n+[source]\n+----\n+$ ssh -p 8201 admin@localhost\n+...\n+admin@minion()> config:edit --alias tcp-5000 --factory org.opennms.features.telemetry.listeners\n+admin@minion()> config:property-set name IPFIX\n+admin@minion()> config:property-set class-name org.opennms.netmgt.telemetry.listeners.TcpListener\n+admin@minion()> config:property-set parameters.port 50000\n+admin@minion()> config:property-set parsers.0.name IPFIX \n+admin@minion()> config:property-set parsers.0.class-name org.opennms.netmgt.telemetry.protocols.common.parser.ForwardParser", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMDA1Ng=="}, "originalCommit": {"oid": "79b01bdcdde6bef1d7cdac586797ffb85cf5b845"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3MTcyNA==", "bodyText": "No, it all sits in the netflow package. Ipfix is netflow v10 but renamed as netflow is a Cisco product and ipfix is an open standard.", "url": "https://github.com/OpenNMS/opennms/pull/3044#discussion_r446371724", "createdAt": "2020-06-26T19:31:06Z", "author": {"login": "fooker"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/telemetryd/protocols/ipfix.adoc", "diffHunk": "@@ -48,12 +47,31 @@ The IPFIX TCP Parser accepts packets received by a <<telemetryd-listener-tcp, TC\n \n This parser does not currently have any configurable parameters.\n \n+===== Configure IPFIX Listener on a Minion\n+\n+To enable and configure a _TCP Listener_ for IPFIX on Minion, connect to the _Karaf Console_ and set the following properties:\n+\n+[source]\n+----\n+$ ssh -p 8201 admin@localhost\n+...\n+admin@minion()> config:edit --alias tcp-5000 --factory org.opennms.features.telemetry.listeners\n+admin@minion()> config:property-set name IPFIX\n+admin@minion()> config:property-set class-name org.opennms.netmgt.telemetry.listeners.TcpListener\n+admin@minion()> config:property-set parameters.port 50000\n+admin@minion()> config:property-set parsers.0.name IPFIX \n+admin@minion()> config:property-set parsers.0.class-name org.opennms.netmgt.telemetry.protocols.common.parser.ForwardParser", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMDA1Ng=="}, "originalCommit": {"oid": "79b01bdcdde6bef1d7cdac586797ffb85cf5b845"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxMjIyNA==", "bodyText": "Ok. Thanks. Updated!", "url": "https://github.com/OpenNMS/opennms/pull/3044#discussion_r446412224", "createdAt": "2020-06-26T21:12:06Z", "author": {"login": "Bonrob2"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/telemetryd/protocols/ipfix.adoc", "diffHunk": "@@ -48,12 +47,31 @@ The IPFIX TCP Parser accepts packets received by a <<telemetryd-listener-tcp, TC\n \n This parser does not currently have any configurable parameters.\n \n+===== Configure IPFIX Listener on a Minion\n+\n+To enable and configure a _TCP Listener_ for IPFIX on Minion, connect to the _Karaf Console_ and set the following properties:\n+\n+[source]\n+----\n+$ ssh -p 8201 admin@localhost\n+...\n+admin@minion()> config:edit --alias tcp-5000 --factory org.opennms.features.telemetry.listeners\n+admin@minion()> config:property-set name IPFIX\n+admin@minion()> config:property-set class-name org.opennms.netmgt.telemetry.listeners.TcpListener\n+admin@minion()> config:property-set parameters.port 50000\n+admin@minion()> config:property-set parsers.0.name IPFIX \n+admin@minion()> config:property-set parsers.0.class-name org.opennms.netmgt.telemetry.protocols.common.parser.ForwardParser", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMDA1Ng=="}, "originalCommit": {"oid": "79b01bdcdde6bef1d7cdac586797ffb85cf5b845"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 708, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}