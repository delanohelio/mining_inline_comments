{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NjYwMzk4", "number": 3025, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDozODo1OFrOEI6oOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMToyMTo0MlrOEI7aWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Nzg0NjMyOnYy", "diffSide": "RIGHT", "path": "core/cache/src/main/java/org/opennms/core/cache/Cache.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDozODo1OFrOGpK-Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToyNDowMFrOGpsMAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyNDUzNQ==", "bodyText": "There is no need for the try block. If the call throws, it must be a runtime exception and we can just propagate without wrapping.", "url": "https://github.com/OpenNMS/opennms/pull/3025#discussion_r445824535", "createdAt": "2020-06-25T20:38:58Z", "author": {"login": "fooker"}, "path": "core/cache/src/main/java/org/opennms/core/cache/Cache.java", "diffHunk": "@@ -84,6 +85,18 @@ public V get(K key) throws ExecutionException {\n         }\n     }\n \n+    public V get(K key, Callable<? extends V> valueLoader) throws ExecutionException {\n+        Objects.requireNonNull(key);\n+        if (config.isEnabled()) {\n+            return delegate.get(key, valueLoader);\n+        }\n+        try {\n+            return valueLoader.call();\n+        } catch (Throwable t) {\n+            throw new RuntimeException(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a18feec70529160d1f801b13ad7da89d729d732"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIyNzQxNA==", "bodyText": "java.util.concurrent.Callable declares to throw Exception:\nhttps://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Callable.html\nI assume that is the reason for the existing code. Do you have an idea for a more elegant solution?", "url": "https://github.com/OpenNMS/opennms/pull/3025#discussion_r446227414", "createdAt": "2020-06-26T14:43:19Z", "author": {"login": "patrick-schweizer"}, "path": "core/cache/src/main/java/org/opennms/core/cache/Cache.java", "diffHunk": "@@ -84,6 +85,18 @@ public V get(K key) throws ExecutionException {\n         }\n     }\n \n+    public V get(K key, Callable<? extends V> valueLoader) throws ExecutionException {\n+        Objects.requireNonNull(key);\n+        if (config.isEnabled()) {\n+            return delegate.get(key, valueLoader);\n+        }\n+        try {\n+            return valueLoader.call();\n+        } catch (Throwable t) {\n+            throw new RuntimeException(t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyNDUzNQ=="}, "originalCommit": {"oid": "3a18feec70529160d1f801b13ad7da89d729d732"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2ODc3MQ==", "bodyText": "You are totally right. I mixed it up with the Producer interface. But this Callable is more appropriate as an error can happen and should be expected.", "url": "https://github.com/OpenNMS/opennms/pull/3025#discussion_r446368771", "createdAt": "2020-06-26T19:24:00Z", "author": {"login": "fooker"}, "path": "core/cache/src/main/java/org/opennms/core/cache/Cache.java", "diffHunk": "@@ -84,6 +85,18 @@ public V get(K key) throws ExecutionException {\n         }\n     }\n \n+    public V get(K key, Callable<? extends V> valueLoader) throws ExecutionException {\n+        Objects.requireNonNull(key);\n+        if (config.isEnabled()) {\n+            return delegate.get(key, valueLoader);\n+        }\n+        try {\n+            return valueLoader.call();\n+        } catch (Throwable t) {\n+            throw new RuntimeException(t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyNDUzNQ=="}, "originalCommit": {"oid": "3a18feec70529160d1f801b13ad7da89d729d732"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Nzk1MDY2OnYy", "diffSide": "RIGHT", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/meta/TimeSeriesMetaDataDao.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMToxMzowNVrOGpL_oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNDo0NzoxM1rOGpjsrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg0MTMxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Map<String, String> attributesForResource = cache.get(meta.getResourceId(), HashMap::new);\n          \n          \n            \n                        if(attributesForResource.get(meta.getName()) == null) {\n          \n          \n            \n                        Map<String, String> attributesForResource = cache.getIfPresent(meta.getResourceId());\n          \n          \n            \n                        if(attributesForResource != null && attributesForResource.contains(meta.getName())) {\n          \n      \n    \n    \n  \n\nTo save the allocation", "url": "https://github.com/OpenNMS/opennms/pull/3025#discussion_r445841313", "createdAt": "2020-06-25T21:13:05Z", "author": {"login": "fooker"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/meta/TimeSeriesMetaDataDao.java", "diffHunk": "@@ -69,34 +69,35 @@\n \n     private final DataSource dataSource;\n \n-    private final Map<String, Map<String, String>> cache; // resourceId, Map<name, value>\n+    private final Cache<String, Map<String, String>> cache; // resourceId, Map<name, value>\n \n     @Autowired\n     public TimeSeriesMetaDataDao(final DataSource dataSource,\n                                  @Named(\"timeseries.metadata.cache_size\") long cacheSize,\n                                  @Named(\"timeseries.metadata.cache_duration\") long cacheDuration) {\n         this.dataSource = dataSource;\n-        Cache<String, Map<String, String>> cache = CacheBuilder.newBuilder()\n+        this.cache = CacheBuilder.newBuilder()\n                 .maximumSize(cacheSize)\n                 .expireAfterWrite(cacheDuration, TimeUnit.SECONDS) // to make sure cache and db are in sync\n                 .build();\n-        this.cache = cache.asMap();\n     }\n \n-    public void store(final Collection<MetaData> metaDataCollection) throws SQLException {\n+    public void store(final Collection<MetaData> metaDataCollection) throws SQLException, ExecutionException {\n         Objects.requireNonNull(metaDataCollection);\n-        Set<MetaData> uncached = new HashSet<>();\n+        Set<MetaData> writeToDb = new HashSet<>();\n \n         // find all MetaData that is not present in the cache\n         for(MetaData meta : metaDataCollection) {\n-            if(!Optional\n-                    .ofNullable(cache.get(meta.getResourceId()))\n-                    .map(entry -> entry.get(meta.getName()))\n-                    .isPresent()) {\n-                uncached.add(meta);\n+            Map<String, String> attributesForResource = cache.get(meta.getResourceId(), HashMap::new);\n+            if(attributesForResource.get(meta.getName()) == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a18feec70529160d1f801b13ad7da89d729d732"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIyOTY3Ng==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/OpenNMS/opennms/pull/3025#discussion_r446229676", "createdAt": "2020-06-26T14:47:13Z", "author": {"login": "patrick-schweizer"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/meta/TimeSeriesMetaDataDao.java", "diffHunk": "@@ -69,34 +69,35 @@\n \n     private final DataSource dataSource;\n \n-    private final Map<String, Map<String, String>> cache; // resourceId, Map<name, value>\n+    private final Cache<String, Map<String, String>> cache; // resourceId, Map<name, value>\n \n     @Autowired\n     public TimeSeriesMetaDataDao(final DataSource dataSource,\n                                  @Named(\"timeseries.metadata.cache_size\") long cacheSize,\n                                  @Named(\"timeseries.metadata.cache_duration\") long cacheDuration) {\n         this.dataSource = dataSource;\n-        Cache<String, Map<String, String>> cache = CacheBuilder.newBuilder()\n+        this.cache = CacheBuilder.newBuilder()\n                 .maximumSize(cacheSize)\n                 .expireAfterWrite(cacheDuration, TimeUnit.SECONDS) // to make sure cache and db are in sync\n                 .build();\n-        this.cache = cache.asMap();\n     }\n \n-    public void store(final Collection<MetaData> metaDataCollection) throws SQLException {\n+    public void store(final Collection<MetaData> metaDataCollection) throws SQLException, ExecutionException {\n         Objects.requireNonNull(metaDataCollection);\n-        Set<MetaData> uncached = new HashSet<>();\n+        Set<MetaData> writeToDb = new HashSet<>();\n \n         // find all MetaData that is not present in the cache\n         for(MetaData meta : metaDataCollection) {\n-            if(!Optional\n-                    .ofNullable(cache.get(meta.getResourceId()))\n-                    .map(entry -> entry.get(meta.getName()))\n-                    .isPresent()) {\n-                uncached.add(meta);\n+            Map<String, String> attributesForResource = cache.get(meta.getResourceId(), HashMap::new);\n+            if(attributesForResource.get(meta.getName()) == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg0MTMxMw=="}, "originalCommit": {"oid": "3a18feec70529160d1f801b13ad7da89d729d732"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Nzk3MzAxOnYy", "diffSide": "RIGHT", "path": "opennms-model/src/main/java/org/opennms/netmgt/model/RrdGraphAttribute.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMToyMTowNlrOGpMN3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNDo1MjoyM1rOGpj44w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg0NDk1OQ==", "bodyText": "If you call the other side that you should prefix the instance with this. :-)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Objects.equals(m_name, that.m_name) &&\n          \n          \n            \n                            Objects.equals(m_relativePath, that.m_relativePath) &&\n          \n          \n            \n                            Objects.equals(m_rrdFile, that.m_rrdFile) &&\n          \n          \n            \n                            Objects.equals(m_resource, that.m_resource);\n          \n          \n            \n                    return Objects.equals(this.m_name, that.m_name) &&\n          \n          \n            \n                            Objects.equals(this.m_relativePath, that.m_relativePath) &&\n          \n          \n            \n                            Objects.equals(this.m_rrdFile, that.m_rrdFile) &&\n          \n          \n            \n                            Objects.equals(this.m_resource, that.m_resource);", "url": "https://github.com/OpenNMS/opennms/pull/3025#discussion_r445844959", "createdAt": "2020-06-25T21:21:06Z", "author": {"login": "fooker"}, "path": "opennms-model/src/main/java/org/opennms/netmgt/model/RrdGraphAttribute.java", "diffHunk": "@@ -136,4 +137,19 @@ public String toString() {\n     \treturn \"\"+m_resource + '.' + m_name;\n \t}\n \n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        RrdGraphAttribute that = (RrdGraphAttribute) o;\n+        return Objects.equals(m_name, that.m_name) &&\n+                Objects.equals(m_relativePath, that.m_relativePath) &&\n+                Objects.equals(m_rrdFile, that.m_rrdFile) &&\n+                Objects.equals(m_resource, that.m_resource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a18feec70529160d1f801b13ad7da89d729d732"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIzMjgwMw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/OpenNMS/opennms/pull/3025#discussion_r446232803", "createdAt": "2020-06-26T14:52:23Z", "author": {"login": "patrick-schweizer"}, "path": "opennms-model/src/main/java/org/opennms/netmgt/model/RrdGraphAttribute.java", "diffHunk": "@@ -136,4 +137,19 @@ public String toString() {\n     \treturn \"\"+m_resource + '.' + m_name;\n \t}\n \n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        RrdGraphAttribute that = (RrdGraphAttribute) o;\n+        return Objects.equals(m_name, that.m_name) &&\n+                Objects.equals(m_relativePath, that.m_relativePath) &&\n+                Objects.equals(m_rrdFile, that.m_rrdFile) &&\n+                Objects.equals(m_resource, that.m_resource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg0NDk1OQ=="}, "originalCommit": {"oid": "3a18feec70529160d1f801b13ad7da89d729d732"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Nzk3NDY0OnYy", "diffSide": "RIGHT", "path": "opennms-model/src/main/java/org/opennms/netmgt/model/StringPropertyAttribute.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMToyMTo0MlrOGpMO6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMToyMTo0MlrOGpMO6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg0NTIyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Objects.equals(m_name, that.m_name) &&\n          \n          \n            \n                            Objects.equals(m_value, that.m_value) &&\n          \n          \n            \n                            Objects.equals(m_resource, that.m_resource);\n          \n          \n            \n                    return Objects.equals(this.m_name, that.m_name) &&\n          \n          \n            \n                            Objects.equals(this.m_value, that.m_value) &&\n          \n          \n            \n                            Objects.equals(this.m_resource, that.m_resource);", "url": "https://github.com/OpenNMS/opennms/pull/3025#discussion_r445845227", "createdAt": "2020-06-25T21:21:42Z", "author": {"login": "fooker"}, "path": "opennms-model/src/main/java/org/opennms/netmgt/model/StringPropertyAttribute.java", "diffHunk": "@@ -89,4 +91,19 @@ public OnmsResource getResource() {\n     public void setResource(OnmsResource resource) {\n         m_resource = resource;\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        StringPropertyAttribute that = (StringPropertyAttribute) o;\n+        return Objects.equals(m_name, that.m_name) &&\n+                Objects.equals(m_value, that.m_value) &&\n+                Objects.equals(m_resource, that.m_resource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a18feec70529160d1f801b13ad7da89d729d732"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 680, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}