{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMDQzODc1", "number": 3181, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjo0NDoxOVrOErsxFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzoxMTozM1rOErtY9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjU3Njg0OnYy", "diffSide": "RIGHT", "path": "opennms-doc/guide-admin/src/asciidoc/text/performance-data-collection/property-extenders.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjo0NDoxOVrOHenUqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODoxNDo1NFrOHeqwvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2MzU5NQ==", "bodyText": "I don't recall if the Regex Extender is the default one, but I think the docs should explicitly include the class-name for each property to avoid confusion.", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501863595", "createdAt": "2020-10-08T16:44:19Z", "author": {"login": "agalue"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/performance-data-collection/property-extenders.adoc", "diffHunk": "@@ -0,0 +1,487 @@\n+// Allow GitHub image rendering\n+:imagesdir: ../../images\n+\n+When collecting tabular numeric metrics from a given MIB table, it's helpful to include one or more string properties from each conceptual row of the table in question.\n+These properties can be used in the `resourceLabel` attribute of the `resourceType` associated with the collected data.\n+When the string property exists as a column in the same table that contains the numeric metrics, it's easy to associate the string to the correct resource by adding a `mibObj` with the same `instance` attribute and a type of `string`.\n+\n+For example, the Cisco ENVMON MIB's temperature status table contains both a numeric gauge for the temperature value and a string describing the associated temperature sensor.\n+A partial walk of this table illustrates this very direct relationship:\n+\n+[options=\"header, autowidth\"]\n+|===\n+| `ciscoEnvMonTemperatureStatusIndex` | `ciscoEnvMonTemperatureStatusDescr (.1.3.6.1.4.1.9.9.13.1.3.1.2)` | `ciscoEnvMonTemperatureStatusValue (.1.3.6.1.4.1.9.9.13.1.3.1.3)`\n+| `1` | `I/O Cont Inlet` | `22`\n+| `2` | `I/O Cont Outlet` | `23`\n+| `3` | `NPE Inlet` | `22`\n+| `4` | `NPE Outlet` | `24`\n+|===\n+\n+To collect the `ciscoEnvMonTemperatureStatusDescr` and `ciscoEnvMonTemperatureStatusValue` columns within an SNMP data-collection group, all that's needed is a `resourceType` and a `group` to hold the two `mibObj` elements corresponding to these two columns.\n+The `mibObj` aliases are shortened to maintain compatibility with storage engines that limit the length of column names to 19 characters.\n+\n+[source, xml]\n+----\n+<resourceType name=\"ciscoEnvMonTemperatureStatusIndex<1>\" label=\"Cisco Temperature\" resourceLabel=\"${cvmTempStatusDescr} (index ${index})\">\n+   <persistenceSelectorStrategy class=\"org.opennms.netmgt.collection.support.PersistAllSelectorStrategy\"/>\n+   <storageStrategy class=\"org.opennms.netmgt.collection.support.IndexStorageStrategy\"/>\n+</resourceType>\n+...\n+<group name=\"cisco-temperature\" ifType=\"all\">\n+   <mibObj oid=\".1.3.6.1.4.1.9.9.13.1.3.1.2\" instance=\"ciscoEnvMonTemperatureStatusIndex\" alias=\"cvmTempStatusDescr\" type=\"string\"/>\n+   <mibObj oid=\".1.3.6.1.4.1.9.9.13.1.3.1.3\" instance=\"ciscoEnvMonTemperatureStatusIndex\" alias=\"cvmTempStatusValue\" type=\"gauge\"/>\n+</group>\n+----\n+\n+Even in cases where the string property exists in a separate MIB table, it's straightforward to include it as long as the \"source\" table uses an identical set of index variables.\n+For example, the `ifXTable` augments the `ifTable`, meaning the two tables use the same set of instance identifiers \u2013 namely `ifIndex`.\n+Whether or not the MIB definition of the second table declares an `AUGMENTS` relationship to the first table, objects from tables with this kind of relationship can be mixed in the same group.\n+\n+In this contrived configuration example, `ifDescr` (which is from `ifTable`) is freely mixed with `ifName` and `ifAlias` (from `ifXTable`):\n+\n+[source, xml]\n+----\n+<group name=\"mib2-string-properties-example\" ifType=\"all\">\n+   <mibObj oid=\".1.3.6.1.2.1.2.2.1.2\" instance=\"ifIndex\" alias=\"ifDescr\" type=\"string\"/>\n+   <mibObj oid=\".1.3.6.1.2.1.31.1.1.1.1\" instance=\"ifIndex\" alias=\"ifName\" type=\"string\"/>\n+   <mibObj oid=\".1.3.6.1.2.1.31.1.1.1.18\" instance=\"ifIndex\" alias=\"ifAlias\" type=\"string\"/>\n+</group>\n+----\n+\n+Most SNMP property extenders make it possible to include string properties from a \"source\" MIB table that is indexed differently from the table containing most of the relevant data.\n+For purposes of configuring property extenders, the table containing the majority of the data (and into which we want to include the string properties) is called the *target table*, and the table containing the string property is called the *source table*.\n+Several different extenders are available; selecting the right one depends on the relationship between the target table and the source table.\n+\n+A few property extenders also exist whose effect is strictly local to the \"target\" resource.\n+These extenders are useful for dealing in partial indices and other similar operations that do not involve looking outside the target MIB table.\n+\n+SNMP Property Extenders are used in the context of a `property` element inside an SNMP data-collection `group` parent element.\n+The `property` element, when it appears, is a sibling of any `mibObj` elements beneath the same parent `group`.\n+The `instance` and `alias` attributes of the `property` element are both required, and serve the same purpose as the same attributes of `mibObj`.\n+The `class-name` attribute of the `property` element contains the full class name (including package) of the Property Extender class needed to join the source and target tables.\n+The `property` element takes a number of `parameter` child elements; these parameters are used to configure the property extender class named in `class-name`.\n+Each extender class recognizes a different set of parameters.\n+\n+==== Cisco CBQoS Property Extender\n+This property extender is used only in very specific circumstances.\n+\n+===== When to Use Cisco CBQoS Property Extender\n+The Cisco CBQoS Property Extender is designed specifically and exclusively for the purpose of including string properties across `ifXTable` and the several MIB tables that make up the Cisco Class-Based QoS MIB.\n+It is not useful for any other sets of target and source tables.\n+\n+===== Configuring Cisco CBQoS Extended Properties\n+The complex relationships among the various Cisco CBQoS tables are encapsulated in the code of this property extender class.\n+As a result, this extender takes only a single parameter, `target-property`, whose value must be one of `policyName`, `classMapName`, `interfaceAlias`, or `interfaceName`.\n+\n+==== Enum Lookup Property Extender\n+The Enum Lookup property extender provides a mechanism that works like a lookup table for values of a local MIB table column.\n+\n+===== When to use the Enum Lookup Property Extender\n+The Enum Lookup property extender may be used to map an enumerated set of integer values to a corresponding set of human-sensible textual values.\n+For example, the `dot1dStpPortTable` contains two integer columns whose values reflect attributes of a port.\n+\n+[source,text]\n+----\n+   dot1dStpPortState OBJECT-TYPE <1>\n+       SYNTAX      INTEGER {\n+                       disabled(1),\n+                       blocking(2),\n+                       listening(3),\n+                       learning(4),\n+                       forwarding(5),\n+                       broken(6)\n+                   }\n+  -- ...\n+\n+   dot1dStpPortEnable OBJECT-TYPE <2>\n+       SYNTAX      INTEGER {\n+                       enabled(1),\n+                       disabled(2)\n+                   }\n+----\n+<1> Port STP state enumerated type\n+<2> Port enablement status enumerated type\n+\n+This extender enables persisting the values of these enumerated integer columns as text that an operator can easiliy recognize.\n+\n+NOTE: While this extender is intended primarily for translating integer values to more descriptive ones as shown in the example below, it could also be used to translate from one set of alphanumeric values to another set.\n+\n+===== Configuring the Enum Lookup Property Extender\n+The Enum Lookup property extender expects zero or more parameters.\n+Only the `default-value` parameter has a fixed name; if it is present, its value is used any time a lookup cannot be completed.\n+If `default-value` is not provided and a lookup fails, no value will be returned for the property.\n+The remaining parameters are named for the input values, and their values represent the output values.\n+\n+This example shows how to map values of `dot1dStpPortState` and `dot1dStpPortEnable` to their textual equivalents.\n+\n+[source, xml]\n+----\n+<resourceType name=\"dot1dStpPortEntry\" label=\"dot1d STP Port\" resourceLabel=\"${index}\">\n+  <persistenceSelectorStrategy class=\"org.opennms.netmgt.collection.support.PersistAllSelectorStrategy\" />\n+  <storageStrategy class=\"org.opennms.netmgt.collection.support.IndexStorageStrategy\" />\n+</resourceType>\n+\n+...\n+\n+<groups>\n+  <group name=\"dot1dStpPortTable\" ifType=\"all\">\n+    <mibObj oid=\".1.3.6.1.2.1.17.2.15.1.3\"  instance=\"dot1dStpPortEntry\" alias=\"dot1dStpPortState\"  type=\"string\"/> <1>\n+    <mibObj oid=\".1.3.6.1.2.1.17.2.15.1.4\"  instance=\"dot1dStpPortEntry\" alias=\"dot1dStpPortEnable\" type=\"string\"/> <2>\n+    <mibObj oid=\".1.3.6.1.2.1.17.2.15.1.10\" instance=\"dot1dStpPortEntry\" alias=\"dot1dStpPortFwTrans\"   type=\"counter\" />\n+    <property instance=\"dot1dStpPortEntry\" alias=\"dot1dStpPortStateText\" class-name=\"org.opennms.netmgt.collectd.EnumLookupPropertyExtender\"> <3>\n+      <parameter key=\"enum-attribute\" value=\"dot1dStpPortState\"/>\n+      <parameter key=\"1\" value=\"disabled(1)\"/>\n+      <parameter key=\"2\" value=\"blocking(2)\"/>\n+      <parameter key=\"3\" value=\"listening(3)\"/>\n+      <parameter key=\"4\" value=\"learning(4)\"/>\n+      <parameter key=\"5\" value=\"forwarding(5)\"/>\n+      <parameter key=\"6\" value=\"broken(6)\"/>\n+    </property>\n+    <property instance=\"dot1dStpPortEntry\" alias=\"dot1dStpPortEnableText\" class-name=\"org.opennms.netmgt.collectd.EnumLookupPropertyExtender\"> <4>\n+      <!-- Note absence of parenthetical numeric values; they are entirely optional -->\n+      <parameter key=\"1\" value=\"enabled\"/>\n+      <parameter key=\"2\" value=\"disabled\"/>\n+    </property>\n+  </group>\n+</groups>\n+----\n+<1> Port STP state enumerated integer attribute\n+<2> Port enablement status enumerated integer attribute\n+<3> Derived port STP state textual attribute `dot1dStpPortStateText`\n+<4> Derived port enablement status textual attribute `dot1dStpPortEnableText`\n+\n+==== Index Split Property Extender\n+The Index Split property extender enables extraction of part of a resource's local instance identifier.\n+\n+===== When to use the Index Split Property Extender\n+The Index Split property extender is useful when collecting data from tables with compound indices, because it enables extraction of a single index component.\n+For example, the Cisco Airespace `bsnAPIfLoadParametersTable` is indexed using the tuple of `bsnAPDot3MacAdddress` and `bsnAPIfSlotId`.\n+\n+[source, text]\n+----\n+bsnAPIfLoadParametersEntry OBJECT-TYPE\n+    -- ...\n+    DESCRIPTION\n+        \"An entry (conceptual row) in the Table.\n+        Entries in this MIB are indexed by\n+        bsnAPDot3MacAddress and bsnAPIfSlotId\"\n+    INDEX           {\n+                        bsnAPDot3MacAddress,\n+                        bsnAPIfSlotId\n+                    } <1>\n+\n+    -- ...\n+----\n+<1> `bsnAPDot3MacAddress` is the first component of the compound index for the entry type for `bsnAPIfLoadParametersTable`\n+\n+This extender enables extraction of just the `bsnAPIfSlotId` component for use in a resource label.\n+\n+===== Configuring the Index Split Property Extender\n+The Index Split property extender expects a single parameter, `index-pattern`, whose value is a regular expression.\n+The expression must be general enough to match all possible index values for the table at hand, and should include one capturing group.\n+The subpattern matched by the expression's first capturing group will be returned; any further groups are ignored.\n+\n+This example shows how to extract just the `bsnAPIfSlotId` index component as a string property.\n+\n+[source, xml]\n+----\n+<group name=\"bsnAPIfLoadParametersTable\" ifType=\"all\">\n+  <mibObj oid=\".1.3.6.1.4.1.14179.2.2.13.1.4\" instance=\"bsnAPIfLoadParametersEntry\" alias=\"bsnAPIfLoadNumOfCli\" type=\"integer\" />\n+  <property instance=\"bsnAPIfLoadParametersEntry\" alias=\"slotNumber\" class-name=\"org.opennms.netmgt.collectd.IndexSplitPropertyExtender\"> <1>\n+    <parameter key=\"index-pattern\" value=\"^.+\\.(\\d+)$\" /> <2>\n+  </property>\n+</group>\n+----\n+<1> Derived string property `slotNumber`\n+<2> Regular expression; the portion in parentheses is what gets extracted. `\\d+` means \"one or more decimal digit characters\".\n+\n+==== Regex Property Extender\n+The Regex property extender works similarly to the Index Split property extender, with the added capability of importing a string property from a source table.\n+\n+===== When to Use the Regex Property Extender\n+The Regex property extender is useful when some portion of the target MIB table's index can be used as an index to the source MIB table.\n+For example, the Cisco Airespace `bsnAPIfLoadParametersTable` is indexed using the tuple of `bsnAPDot3MacAdddress` and `bsnAPIfSlotId`, whereas the `bsnAPTable` is indexed on `bsnAPDot3MacAddress` alone.\n+\n+[source, text]\n+----\n+bsnAPIfLoadParametersEntry OBJECT-TYPE\n+    -- ...\n+    DESCRIPTION\n+        \"An entry (conceptual row) in the Table.\n+        Entries in this MIB are indexed by\n+        bsnAPDot3MacAddress and bsnAPIfSlotId\"\n+    INDEX           {\n+                        bsnAPDot3MacAddress,\n+                        bsnAPIfSlotId\n+                    } <1>\n+\n+    -- ...\n+\n+bsnAPEntry OBJECT-TYPE\n+    -- ...\n+    DESCRIPTION\n+        \"An entry in the bsnAPTable.\"\n+    INDEX           { bsnAPDot3MacAddress } <2>\n+    -- ...\n+----\n+<1> `bsnAPDot3MacAddress` is the first component of the compound index for the entry type for `bsnAPIfLoadParametersTable`\n+<2> `bsnAPDot3MacAddress` is the sole index for the entry type for `bsnAPTable`\n+\n+By extracting just the first index component and using the result as an index into the source MIB table, it's possible to import the human-sensible `bsnAPName` string property from the source MIB table.\n+\n+===== Configuring the Regex Property Extender\n+The Regex property extender expects three parameters, all of which are required:\n+\n+.Regex Property Extender Parameters\n+[options=\"header, autowidth\"]\n+|===\n+| Name | Description\n+| `source-type` | The name of the `resourceType` associated with the source MIB table\n+| `source-alias` | The alias name of the string property to be imported from the source MIB table\n+| `index-pattern` | A regular expression containing one matching group\n+|===\n+\n+The `index-pattern` expression must meet the same criteria as for the Index Split property extender.\n+The subpattern matched by its first capturing group will be used as an index into the source MIB table; any further groups are ignored.\n+\n+This example shows how to use the value of `bsnAPDot3MacAddress` as an index into the `bsnAPTable`.\n+\n+[source, xml]\n+----\n+<resourceType name=\"bsnAPEntry\" label=\"Cisco Wireless AP\" resourceLabel=\"${bsnAPName} (index ${index})\">\n+  <persistenceSelectorStrategy class=\"org.opennms.netmgt.collection.support.PersistAllSelectorStrategy\" />\n+  <storageStrategy class=\"org.opennms.netmgt.collection.support.IndexStorageStrategy\" />\n+</resourceType>\n+\n+<resourceType name=\"bsnAPIfLoadParametersEntry\" label=\"Cisco Wireless AP Resources\" resourceLabel=\"${bsnAPName} (index ${index})\">\n+  <persistenceSelectorStrategy class=\"org.opennms.netmgt.collection.support.PersistAllSelectorStrategy\" />\n+  <storageStrategy class=\"org.opennms.netmgt.collection.support.IndexStorageStrategy\" />\n+</resourceType>\n+\n+<groups>\n+  <group name=\"bsnAPTable\" ifType=\"all\">\n+    <mibObj oid=\".1.3.6.1.4.1.14179.2.2.1.1.3\" instance=\"bsnAPEntry\" alias=\"bsnAPName\" type=\"string\" /> <1>\n+  </group>\n+\n+  <group name=\"bsnAPIfLoadParametersTable\" ifType=\"all\">\n+    <mibObj oid=\".1.3.6.1.4.1.14179.2.2.13.1.4\" instance=\"bsnAPIfLoadParametersEntry\" alias=\"bsnAPIfLoadNumOfCli\" type=\"integer\" />\n+    <property instance=\"bsnAPIfLoadParametersEntry\" alias=\"bsnAPName\"> <2>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkxOTkzNA==", "bodyText": "It is the default, but I agree all the doc examples need to be explicit. Thanks for catching that.", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501919934", "createdAt": "2020-10-08T18:14:54Z", "author": {"login": "jeffgdotorg"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/performance-data-collection/property-extenders.adoc", "diffHunk": "@@ -0,0 +1,487 @@\n+// Allow GitHub image rendering\n+:imagesdir: ../../images\n+\n+When collecting tabular numeric metrics from a given MIB table, it's helpful to include one or more string properties from each conceptual row of the table in question.\n+These properties can be used in the `resourceLabel` attribute of the `resourceType` associated with the collected data.\n+When the string property exists as a column in the same table that contains the numeric metrics, it's easy to associate the string to the correct resource by adding a `mibObj` with the same `instance` attribute and a type of `string`.\n+\n+For example, the Cisco ENVMON MIB's temperature status table contains both a numeric gauge for the temperature value and a string describing the associated temperature sensor.\n+A partial walk of this table illustrates this very direct relationship:\n+\n+[options=\"header, autowidth\"]\n+|===\n+| `ciscoEnvMonTemperatureStatusIndex` | `ciscoEnvMonTemperatureStatusDescr (.1.3.6.1.4.1.9.9.13.1.3.1.2)` | `ciscoEnvMonTemperatureStatusValue (.1.3.6.1.4.1.9.9.13.1.3.1.3)`\n+| `1` | `I/O Cont Inlet` | `22`\n+| `2` | `I/O Cont Outlet` | `23`\n+| `3` | `NPE Inlet` | `22`\n+| `4` | `NPE Outlet` | `24`\n+|===\n+\n+To collect the `ciscoEnvMonTemperatureStatusDescr` and `ciscoEnvMonTemperatureStatusValue` columns within an SNMP data-collection group, all that's needed is a `resourceType` and a `group` to hold the two `mibObj` elements corresponding to these two columns.\n+The `mibObj` aliases are shortened to maintain compatibility with storage engines that limit the length of column names to 19 characters.\n+\n+[source, xml]\n+----\n+<resourceType name=\"ciscoEnvMonTemperatureStatusIndex<1>\" label=\"Cisco Temperature\" resourceLabel=\"${cvmTempStatusDescr} (index ${index})\">\n+   <persistenceSelectorStrategy class=\"org.opennms.netmgt.collection.support.PersistAllSelectorStrategy\"/>\n+   <storageStrategy class=\"org.opennms.netmgt.collection.support.IndexStorageStrategy\"/>\n+</resourceType>\n+...\n+<group name=\"cisco-temperature\" ifType=\"all\">\n+   <mibObj oid=\".1.3.6.1.4.1.9.9.13.1.3.1.2\" instance=\"ciscoEnvMonTemperatureStatusIndex\" alias=\"cvmTempStatusDescr\" type=\"string\"/>\n+   <mibObj oid=\".1.3.6.1.4.1.9.9.13.1.3.1.3\" instance=\"ciscoEnvMonTemperatureStatusIndex\" alias=\"cvmTempStatusValue\" type=\"gauge\"/>\n+</group>\n+----\n+\n+Even in cases where the string property exists in a separate MIB table, it's straightforward to include it as long as the \"source\" table uses an identical set of index variables.\n+For example, the `ifXTable` augments the `ifTable`, meaning the two tables use the same set of instance identifiers \u2013 namely `ifIndex`.\n+Whether or not the MIB definition of the second table declares an `AUGMENTS` relationship to the first table, objects from tables with this kind of relationship can be mixed in the same group.\n+\n+In this contrived configuration example, `ifDescr` (which is from `ifTable`) is freely mixed with `ifName` and `ifAlias` (from `ifXTable`):\n+\n+[source, xml]\n+----\n+<group name=\"mib2-string-properties-example\" ifType=\"all\">\n+   <mibObj oid=\".1.3.6.1.2.1.2.2.1.2\" instance=\"ifIndex\" alias=\"ifDescr\" type=\"string\"/>\n+   <mibObj oid=\".1.3.6.1.2.1.31.1.1.1.1\" instance=\"ifIndex\" alias=\"ifName\" type=\"string\"/>\n+   <mibObj oid=\".1.3.6.1.2.1.31.1.1.1.18\" instance=\"ifIndex\" alias=\"ifAlias\" type=\"string\"/>\n+</group>\n+----\n+\n+Most SNMP property extenders make it possible to include string properties from a \"source\" MIB table that is indexed differently from the table containing most of the relevant data.\n+For purposes of configuring property extenders, the table containing the majority of the data (and into which we want to include the string properties) is called the *target table*, and the table containing the string property is called the *source table*.\n+Several different extenders are available; selecting the right one depends on the relationship between the target table and the source table.\n+\n+A few property extenders also exist whose effect is strictly local to the \"target\" resource.\n+These extenders are useful for dealing in partial indices and other similar operations that do not involve looking outside the target MIB table.\n+\n+SNMP Property Extenders are used in the context of a `property` element inside an SNMP data-collection `group` parent element.\n+The `property` element, when it appears, is a sibling of any `mibObj` elements beneath the same parent `group`.\n+The `instance` and `alias` attributes of the `property` element are both required, and serve the same purpose as the same attributes of `mibObj`.\n+The `class-name` attribute of the `property` element contains the full class name (including package) of the Property Extender class needed to join the source and target tables.\n+The `property` element takes a number of `parameter` child elements; these parameters are used to configure the property extender class named in `class-name`.\n+Each extender class recognizes a different set of parameters.\n+\n+==== Cisco CBQoS Property Extender\n+This property extender is used only in very specific circumstances.\n+\n+===== When to Use Cisco CBQoS Property Extender\n+The Cisco CBQoS Property Extender is designed specifically and exclusively for the purpose of including string properties across `ifXTable` and the several MIB tables that make up the Cisco Class-Based QoS MIB.\n+It is not useful for any other sets of target and source tables.\n+\n+===== Configuring Cisco CBQoS Extended Properties\n+The complex relationships among the various Cisco CBQoS tables are encapsulated in the code of this property extender class.\n+As a result, this extender takes only a single parameter, `target-property`, whose value must be one of `policyName`, `classMapName`, `interfaceAlias`, or `interfaceName`.\n+\n+==== Enum Lookup Property Extender\n+The Enum Lookup property extender provides a mechanism that works like a lookup table for values of a local MIB table column.\n+\n+===== When to use the Enum Lookup Property Extender\n+The Enum Lookup property extender may be used to map an enumerated set of integer values to a corresponding set of human-sensible textual values.\n+For example, the `dot1dStpPortTable` contains two integer columns whose values reflect attributes of a port.\n+\n+[source,text]\n+----\n+   dot1dStpPortState OBJECT-TYPE <1>\n+       SYNTAX      INTEGER {\n+                       disabled(1),\n+                       blocking(2),\n+                       listening(3),\n+                       learning(4),\n+                       forwarding(5),\n+                       broken(6)\n+                   }\n+  -- ...\n+\n+   dot1dStpPortEnable OBJECT-TYPE <2>\n+       SYNTAX      INTEGER {\n+                       enabled(1),\n+                       disabled(2)\n+                   }\n+----\n+<1> Port STP state enumerated type\n+<2> Port enablement status enumerated type\n+\n+This extender enables persisting the values of these enumerated integer columns as text that an operator can easiliy recognize.\n+\n+NOTE: While this extender is intended primarily for translating integer values to more descriptive ones as shown in the example below, it could also be used to translate from one set of alphanumeric values to another set.\n+\n+===== Configuring the Enum Lookup Property Extender\n+The Enum Lookup property extender expects zero or more parameters.\n+Only the `default-value` parameter has a fixed name; if it is present, its value is used any time a lookup cannot be completed.\n+If `default-value` is not provided and a lookup fails, no value will be returned for the property.\n+The remaining parameters are named for the input values, and their values represent the output values.\n+\n+This example shows how to map values of `dot1dStpPortState` and `dot1dStpPortEnable` to their textual equivalents.\n+\n+[source, xml]\n+----\n+<resourceType name=\"dot1dStpPortEntry\" label=\"dot1d STP Port\" resourceLabel=\"${index}\">\n+  <persistenceSelectorStrategy class=\"org.opennms.netmgt.collection.support.PersistAllSelectorStrategy\" />\n+  <storageStrategy class=\"org.opennms.netmgt.collection.support.IndexStorageStrategy\" />\n+</resourceType>\n+\n+...\n+\n+<groups>\n+  <group name=\"dot1dStpPortTable\" ifType=\"all\">\n+    <mibObj oid=\".1.3.6.1.2.1.17.2.15.1.3\"  instance=\"dot1dStpPortEntry\" alias=\"dot1dStpPortState\"  type=\"string\"/> <1>\n+    <mibObj oid=\".1.3.6.1.2.1.17.2.15.1.4\"  instance=\"dot1dStpPortEntry\" alias=\"dot1dStpPortEnable\" type=\"string\"/> <2>\n+    <mibObj oid=\".1.3.6.1.2.1.17.2.15.1.10\" instance=\"dot1dStpPortEntry\" alias=\"dot1dStpPortFwTrans\"   type=\"counter\" />\n+    <property instance=\"dot1dStpPortEntry\" alias=\"dot1dStpPortStateText\" class-name=\"org.opennms.netmgt.collectd.EnumLookupPropertyExtender\"> <3>\n+      <parameter key=\"enum-attribute\" value=\"dot1dStpPortState\"/>\n+      <parameter key=\"1\" value=\"disabled(1)\"/>\n+      <parameter key=\"2\" value=\"blocking(2)\"/>\n+      <parameter key=\"3\" value=\"listening(3)\"/>\n+      <parameter key=\"4\" value=\"learning(4)\"/>\n+      <parameter key=\"5\" value=\"forwarding(5)\"/>\n+      <parameter key=\"6\" value=\"broken(6)\"/>\n+    </property>\n+    <property instance=\"dot1dStpPortEntry\" alias=\"dot1dStpPortEnableText\" class-name=\"org.opennms.netmgt.collectd.EnumLookupPropertyExtender\"> <4>\n+      <!-- Note absence of parenthetical numeric values; they are entirely optional -->\n+      <parameter key=\"1\" value=\"enabled\"/>\n+      <parameter key=\"2\" value=\"disabled\"/>\n+    </property>\n+  </group>\n+</groups>\n+----\n+<1> Port STP state enumerated integer attribute\n+<2> Port enablement status enumerated integer attribute\n+<3> Derived port STP state textual attribute `dot1dStpPortStateText`\n+<4> Derived port enablement status textual attribute `dot1dStpPortEnableText`\n+\n+==== Index Split Property Extender\n+The Index Split property extender enables extraction of part of a resource's local instance identifier.\n+\n+===== When to use the Index Split Property Extender\n+The Index Split property extender is useful when collecting data from tables with compound indices, because it enables extraction of a single index component.\n+For example, the Cisco Airespace `bsnAPIfLoadParametersTable` is indexed using the tuple of `bsnAPDot3MacAdddress` and `bsnAPIfSlotId`.\n+\n+[source, text]\n+----\n+bsnAPIfLoadParametersEntry OBJECT-TYPE\n+    -- ...\n+    DESCRIPTION\n+        \"An entry (conceptual row) in the Table.\n+        Entries in this MIB are indexed by\n+        bsnAPDot3MacAddress and bsnAPIfSlotId\"\n+    INDEX           {\n+                        bsnAPDot3MacAddress,\n+                        bsnAPIfSlotId\n+                    } <1>\n+\n+    -- ...\n+----\n+<1> `bsnAPDot3MacAddress` is the first component of the compound index for the entry type for `bsnAPIfLoadParametersTable`\n+\n+This extender enables extraction of just the `bsnAPIfSlotId` component for use in a resource label.\n+\n+===== Configuring the Index Split Property Extender\n+The Index Split property extender expects a single parameter, `index-pattern`, whose value is a regular expression.\n+The expression must be general enough to match all possible index values for the table at hand, and should include one capturing group.\n+The subpattern matched by the expression's first capturing group will be returned; any further groups are ignored.\n+\n+This example shows how to extract just the `bsnAPIfSlotId` index component as a string property.\n+\n+[source, xml]\n+----\n+<group name=\"bsnAPIfLoadParametersTable\" ifType=\"all\">\n+  <mibObj oid=\".1.3.6.1.4.1.14179.2.2.13.1.4\" instance=\"bsnAPIfLoadParametersEntry\" alias=\"bsnAPIfLoadNumOfCli\" type=\"integer\" />\n+  <property instance=\"bsnAPIfLoadParametersEntry\" alias=\"slotNumber\" class-name=\"org.opennms.netmgt.collectd.IndexSplitPropertyExtender\"> <1>\n+    <parameter key=\"index-pattern\" value=\"^.+\\.(\\d+)$\" /> <2>\n+  </property>\n+</group>\n+----\n+<1> Derived string property `slotNumber`\n+<2> Regular expression; the portion in parentheses is what gets extracted. `\\d+` means \"one or more decimal digit characters\".\n+\n+==== Regex Property Extender\n+The Regex property extender works similarly to the Index Split property extender, with the added capability of importing a string property from a source table.\n+\n+===== When to Use the Regex Property Extender\n+The Regex property extender is useful when some portion of the target MIB table's index can be used as an index to the source MIB table.\n+For example, the Cisco Airespace `bsnAPIfLoadParametersTable` is indexed using the tuple of `bsnAPDot3MacAdddress` and `bsnAPIfSlotId`, whereas the `bsnAPTable` is indexed on `bsnAPDot3MacAddress` alone.\n+\n+[source, text]\n+----\n+bsnAPIfLoadParametersEntry OBJECT-TYPE\n+    -- ...\n+    DESCRIPTION\n+        \"An entry (conceptual row) in the Table.\n+        Entries in this MIB are indexed by\n+        bsnAPDot3MacAddress and bsnAPIfSlotId\"\n+    INDEX           {\n+                        bsnAPDot3MacAddress,\n+                        bsnAPIfSlotId\n+                    } <1>\n+\n+    -- ...\n+\n+bsnAPEntry OBJECT-TYPE\n+    -- ...\n+    DESCRIPTION\n+        \"An entry in the bsnAPTable.\"\n+    INDEX           { bsnAPDot3MacAddress } <2>\n+    -- ...\n+----\n+<1> `bsnAPDot3MacAddress` is the first component of the compound index for the entry type for `bsnAPIfLoadParametersTable`\n+<2> `bsnAPDot3MacAddress` is the sole index for the entry type for `bsnAPTable`\n+\n+By extracting just the first index component and using the result as an index into the source MIB table, it's possible to import the human-sensible `bsnAPName` string property from the source MIB table.\n+\n+===== Configuring the Regex Property Extender\n+The Regex property extender expects three parameters, all of which are required:\n+\n+.Regex Property Extender Parameters\n+[options=\"header, autowidth\"]\n+|===\n+| Name | Description\n+| `source-type` | The name of the `resourceType` associated with the source MIB table\n+| `source-alias` | The alias name of the string property to be imported from the source MIB table\n+| `index-pattern` | A regular expression containing one matching group\n+|===\n+\n+The `index-pattern` expression must meet the same criteria as for the Index Split property extender.\n+The subpattern matched by its first capturing group will be used as an index into the source MIB table; any further groups are ignored.\n+\n+This example shows how to use the value of `bsnAPDot3MacAddress` as an index into the `bsnAPTable`.\n+\n+[source, xml]\n+----\n+<resourceType name=\"bsnAPEntry\" label=\"Cisco Wireless AP\" resourceLabel=\"${bsnAPName} (index ${index})\">\n+  <persistenceSelectorStrategy class=\"org.opennms.netmgt.collection.support.PersistAllSelectorStrategy\" />\n+  <storageStrategy class=\"org.opennms.netmgt.collection.support.IndexStorageStrategy\" />\n+</resourceType>\n+\n+<resourceType name=\"bsnAPIfLoadParametersEntry\" label=\"Cisco Wireless AP Resources\" resourceLabel=\"${bsnAPName} (index ${index})\">\n+  <persistenceSelectorStrategy class=\"org.opennms.netmgt.collection.support.PersistAllSelectorStrategy\" />\n+  <storageStrategy class=\"org.opennms.netmgt.collection.support.IndexStorageStrategy\" />\n+</resourceType>\n+\n+<groups>\n+  <group name=\"bsnAPTable\" ifType=\"all\">\n+    <mibObj oid=\".1.3.6.1.4.1.14179.2.2.1.1.3\" instance=\"bsnAPEntry\" alias=\"bsnAPName\" type=\"string\" /> <1>\n+  </group>\n+\n+  <group name=\"bsnAPIfLoadParametersTable\" ifType=\"all\">\n+    <mibObj oid=\".1.3.6.1.4.1.14179.2.2.13.1.4\" instance=\"bsnAPIfLoadParametersEntry\" alias=\"bsnAPIfLoadNumOfCli\" type=\"integer\" />\n+    <property instance=\"bsnAPIfLoadParametersEntry\" alias=\"bsnAPName\"> <2>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2MzU5NQ=="}, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 268}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjYzMDI4OnYy", "diffSide": "RIGHT", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/EnumLookupPropertyExtender.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjo1ODoxOVrOHen2OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODoyMToxMFrOHeq_9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MjE4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * OpenNMS(R) is Copyright (C) 1999-2016 The OpenNMS Group, Inc.\n          \n          \n            \n             * OpenNMS(R) is Copyright (C) 1999-{docyear} The OpenNMS Group, Inc.", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501872184", "createdAt": "2020-10-08T16:58:19Z", "author": {"login": "Bonrob2"}, "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/EnumLookupPropertyExtender.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2016 The OpenNMS Group, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyMjQwOA==", "bodyText": "Does this work in Java sources? I thought it would be only for asciidoc.", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501922408", "createdAt": "2020-10-08T18:18:49Z", "author": {"login": "jeffgdotorg"}, "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/EnumLookupPropertyExtender.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2016 The OpenNMS Group, Inc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MjE4NA=="}, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyMzgyOA==", "bodyText": "@jeffgdotorg sorry. You are correct. Please replace {docyear} with 2020.", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501923828", "createdAt": "2020-10-08T18:21:10Z", "author": {"login": "Bonrob2"}, "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/EnumLookupPropertyExtender.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2016 The OpenNMS Group, Inc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MjE4NA=="}, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjYzMjU4OnYy", "diffSide": "RIGHT", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/EnumLookupPropertyExtender.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjo1ODo1MlrOHen3og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODoyMDoyNFrOHeq-LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MjU0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (C) 2020 The OpenNMS Group, Inc.\n          \n          \n            \n             * Copyright (C) {docyear} The OpenNMS Group, Inc.", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501872546", "createdAt": "2020-10-08T16:58:52Z", "author": {"login": "Bonrob2"}, "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/EnumLookupPropertyExtender.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyMzM3Mg==", "bodyText": "Here again, not sure this works in Java source files.", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501923372", "createdAt": "2020-10-08T18:20:24Z", "author": {"login": "jeffgdotorg"}, "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/EnumLookupPropertyExtender.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MjU0Ng=="}, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjYzODUwOnYy", "diffSide": "RIGHT", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/EnumLookupPropertyExtender.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowMDoxOVrOHen7Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowMDoxOVrOHen7Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MzQ5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n          \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501873490", "createdAt": "2020-10-08T17:00:19Z", "author": {"login": "Bonrob2"}, "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/EnumLookupPropertyExtender.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2016 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjYzOTg5OnYy", "diffSide": "RIGHT", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/EnumLookupPropertyExtender.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowMDo0MlrOHen8MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo1MToxNFrOHesEUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MzcxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * along with OpenNMS(R).  If not, see:\n          \n          \n            \n             * along with OpenNMS(R). If you did not, see:", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501873712", "createdAt": "2020-10-08T17:00:42Z", "author": {"login": "Bonrob2"}, "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/EnumLookupPropertyExtender.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2016 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyNTM3OQ==", "bodyText": "This one and the others I haven't committed are boilerplate comment headers. If we're going to mount an effort to improve these blocks, I think it ought to be across the whole corpus of code. I'm nervous about changing it just here and there, since some code-analysis tools might deduct points for inconsistent application of license and copyright header.", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501925379", "createdAt": "2020-10-08T18:23:50Z", "author": {"login": "jeffgdotorg"}, "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/EnumLookupPropertyExtender.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2016 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MzcxMg=="}, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyNjcxNw==", "bodyText": "Here is the reference copy of the Affero GPLv3 copyright boilerplate block. I think it's best if we stick with the one put out by the FSF.", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501926717", "createdAt": "2020-10-08T18:26:04Z", "author": {"login": "jeffgdotorg"}, "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/EnumLookupPropertyExtender.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2016 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MzcxMg=="}, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MTMyOQ==", "bodyText": "@jeffgdotorg no worries. Context is everything. No need to make the changes.", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501941329", "createdAt": "2020-10-08T18:51:14Z", "author": {"login": "Bonrob2"}, "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/EnumLookupPropertyExtender.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2016 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MzcxMg=="}, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY0NTY3OnYy", "diffSide": "RIGHT", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/EnumLookupPropertyExtender.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowMjoxM1rOHen_6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowMjoxM1rOHen_6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NDY2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *     http://www.opennms.org/\n          \n      \n    \n    \n  \n\nI know it redirects, but since this is deprecated we should probably just remove it.", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501874664", "createdAt": "2020-10-08T17:02:13Z", "author": {"login": "Bonrob2"}, "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/EnumLookupPropertyExtender.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2016 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY1MDUxOnYy", "diffSide": "RIGHT", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/InterfaceSnmpPropertyExtender.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowMzo0MFrOHeoDEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowMzo0MFrOHeoDEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NTQ3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (C) 2020 The OpenNMS Group, Inc.\n          \n          \n            \n             * Copyright (C) {docyear} The OpenNMS Group, Inc.", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501875474", "createdAt": "2020-10-08T17:03:40Z", "author": {"login": "Bonrob2"}, "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/InterfaceSnmpPropertyExtender.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY1MjEzOnYy", "diffSide": "RIGHT", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/InterfaceSnmpPropertyExtender.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowNDowNFrOHeoEDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowNDowNFrOHeoEDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NTcyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n          \n          \n            \n             * OpenNMS(R) is Copyright (C) 1999-{docyear} The OpenNMS Group, Inc.", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501875725", "createdAt": "2020-10-08T17:04:04Z", "author": {"login": "Bonrob2"}, "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/InterfaceSnmpPropertyExtender.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY1NTc1OnYy", "diffSide": "RIGHT", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/InterfaceSnmpPropertyExtender.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowNTowN1rOHeoGdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowNTowN1rOHeoGdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NjM0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n          \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501876341", "createdAt": "2020-10-08T17:05:07Z", "author": {"login": "Bonrob2"}, "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/InterfaceSnmpPropertyExtender.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY1NzE1OnYy", "diffSide": "RIGHT", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/InterfaceSnmpPropertyExtender.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowNToyOVrOHeoHSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowNToyOVrOHeoHSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NjU1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * along with OpenNMS(R).  If not, see:\n          \n          \n            \n             * along with OpenNMS(R). If you did not, see:", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501876555", "createdAt": "2020-10-08T17:05:29Z", "author": {"login": "Bonrob2"}, "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/InterfaceSnmpPropertyExtender.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY1ODAxOnYy", "diffSide": "RIGHT", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/InterfaceSnmpPropertyExtender.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowNTo0MlrOHeoH1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowNTo0MlrOHeoH1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NjY5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *     http://www.opennms.org/", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501876692", "createdAt": "2020-10-08T17:05:42Z", "author": {"login": "Bonrob2"}, "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/InterfaceSnmpPropertyExtender.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY2MDg3OnYy", "diffSide": "RIGHT", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/PointerLikeIndexPropertyExtender.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowNjozNFrOHeoJwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowNjozNFrOHeoJwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NzE4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (C) 2020 The OpenNMS Group, Inc.\n          \n          \n            \n             * Copyright (C) {docyear} The OpenNMS Group, Inc.", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501877185", "createdAt": "2020-10-08T17:06:34Z", "author": {"login": "Bonrob2"}, "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/PointerLikeIndexPropertyExtender.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY2MTMyOnYy", "diffSide": "RIGHT", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/PointerLikeIndexPropertyExtender.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowNjo0NVrOHeoKEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowNjo0NVrOHeoKEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NzI2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n          \n          \n            \n             * OpenNMS(R) is Copyright (C) 1999-{docyear} The OpenNMS Group, Inc.", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501877265", "createdAt": "2020-10-08T17:06:45Z", "author": {"login": "Bonrob2"}, "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/PointerLikeIndexPropertyExtender.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY2MjUxOnYy", "diffSide": "RIGHT", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/PointerLikeIndexPropertyExtender.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowNzowMVrOHeoKxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowNzowMVrOHeoKxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NzQ0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n          \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501877447", "createdAt": "2020-10-08T17:07:01Z", "author": {"login": "Bonrob2"}, "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/PointerLikeIndexPropertyExtender.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY2MzE4OnYy", "diffSide": "RIGHT", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/PointerLikeIndexPropertyExtender.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowNzoxNVrOHeoLQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowNzoxNVrOHeoLQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NzU3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * along with OpenNMS(R).  If not, see:\n          \n          \n            \n             * along with OpenNMS(R). If you did not, see:", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501877570", "createdAt": "2020-10-08T17:07:15Z", "author": {"login": "Bonrob2"}, "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/PointerLikeIndexPropertyExtender.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY2MzgyOnYy", "diffSide": "RIGHT", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/PointerLikeIndexPropertyExtender.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowNzoyNVrOHeoLrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowNzoyNVrOHeoLrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NzY3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *     http://www.opennms.org/", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501877676", "createdAt": "2020-10-08T17:07:25Z", "author": {"login": "Bonrob2"}, "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/PointerLikeIndexPropertyExtender.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY2NjA3OnYy", "diffSide": "RIGHT", "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithMibPropertiesIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowODowM1rOHeoNAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowODowM1rOHeoNAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3ODAxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (C) 2006-2020 The OpenNMS Group, Inc.\n          \n          \n            \n             * Copyright (C) 2006-{docyear} The OpenNMS Group, Inc.", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501878017", "createdAt": "2020-10-08T17:08:03Z", "author": {"login": "Bonrob2"}, "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithMibPropertiesIT.java", "diffHunk": "@@ -1,8 +1,8 @@\n /*******************************************************************************\n  * This file is part of OpenNMS(R).\n  *\n- * Copyright (C) 2006-2014 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2014 The OpenNMS Group, Inc.\n+ * Copyright (C) 2006-2020 The OpenNMS Group, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY2NjU3OnYy", "diffSide": "RIGHT", "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithMibPropertiesIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowODoxMlrOHeoNWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowODoxMlrOHeoNWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3ODEwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n          \n          \n            \n             * OpenNMS(R) is Copyright (C) 1999-{docyear} The OpenNMS Group, Inc.", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501878104", "createdAt": "2020-10-08T17:08:12Z", "author": {"login": "Bonrob2"}, "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithMibPropertiesIT.java", "diffHunk": "@@ -1,8 +1,8 @@\n /*******************************************************************************\n  * This file is part of OpenNMS(R).\n  *\n- * Copyright (C) 2006-2014 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2014 The OpenNMS Group, Inc.\n+ * Copyright (C) 2006-2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY2Nzg0OnYy", "diffSide": "RIGHT", "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithMibPropertiesIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowODozM1rOHeoOJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowODozM1rOHeoOJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3ODMxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Test collection for Cisco memory-pool entry with indirectly-referenced property\n          \n          \n            \n                 * Test collection for Cisco memory-pool entry with indirectly referenced property", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501878311", "createdAt": "2020-10-08T17:08:33Z", "author": {"login": "Bonrob2"}, "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithMibPropertiesIT.java", "diffHunk": "@@ -242,6 +242,52 @@ public void testCollectCiscoQoS() throws Exception {\n         assertEquals(\"GESTION-ROUTING\", map.get(\"cbQosClassMapName\"));\n         assertEquals(\"Conexion Valencia\", map.get(\"ifAlias\"));\n     }\n+    \n+    /**\n+     * Test collection for Cisco memory-pool entry with indirectly-referenced property", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY2OTAzOnYy", "diffSide": "RIGHT", "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithPointerLikeExtendedPropertiesIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowODo1NlrOHeoO9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowODo1NlrOHeoO9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3ODUxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (C) 2020 The OpenNMS Group, Inc.\n          \n          \n            \n             * Copyright (C) {docyear} The OpenNMS Group, Inc.", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501878518", "createdAt": "2020-10-08T17:08:56Z", "author": {"login": "Bonrob2"}, "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithPointerLikeExtendedPropertiesIT.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY2OTU5OnYy", "diffSide": "RIGHT", "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithPointerLikeExtendedPropertiesIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowOTowN1rOHeoPYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowOTowN1rOHeoPYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3ODYyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n          \n          \n            \n             * OpenNMS(R) is Copyright (C) 1999-{docyear} The OpenNMS Group, Inc.", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501878625", "createdAt": "2020-10-08T17:09:07Z", "author": {"login": "Bonrob2"}, "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithPointerLikeExtendedPropertiesIT.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY3MDMwOnYy", "diffSide": "RIGHT", "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithPointerLikeExtendedPropertiesIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowOToxOFrOHeoPzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowOToxOFrOHeoPzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3ODczMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n          \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501878733", "createdAt": "2020-10-08T17:09:18Z", "author": {"login": "Bonrob2"}, "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithPointerLikeExtendedPropertiesIT.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY3MTI4OnYy", "diffSide": "RIGHT", "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithPointerLikeExtendedPropertiesIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowOTozM1rOHeoQaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowOTozM1rOHeoQaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3ODg5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * along with OpenNMS(R).  If not, see:\n          \n          \n            \n             * along with OpenNMS(R). If you did not, see:", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501878891", "createdAt": "2020-10-08T17:09:33Z", "author": {"login": "Bonrob2"}, "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithPointerLikeExtendedPropertiesIT.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY3MTg4OnYy", "diffSide": "RIGHT", "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithPointerLikeExtendedPropertiesIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowOTo0NFrOHeoQ0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowOTo0NFrOHeoQ0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3ODk5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *     http://www.opennms.org/", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501878994", "createdAt": "2020-10-08T17:09:44Z", "author": {"login": "Bonrob2"}, "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithPointerLikeExtendedPropertiesIT.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY3NDQ2OnYy", "diffSide": "RIGHT", "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithPointerLikeExtendedPropertiesIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzoxMDoyMFrOHeoSSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzoxMDoyMFrOHeoSSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3OTM3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Test collection for dot1d-bridge base port entry with indirectly-referenced property\n          \n          \n            \n                 * Test collection for dot1d-bridge base port entry with indirectly referenced property", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501879371", "createdAt": "2020-10-08T17:10:20Z", "author": {"login": "Bonrob2"}, "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithPointerLikeExtendedPropertiesIT.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.collectd;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.File;\n+import java.net.InetAddress;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.opennms.core.collection.test.JUnitCollector;\n+import org.opennms.core.spring.BeanUtils;\n+import org.opennms.core.test.MockLogAppender;\n+import org.opennms.core.test.OpenNMSJUnit4ClassRunner;\n+import org.opennms.core.test.TestContextAware;\n+import org.opennms.core.test.db.annotations.JUnitTemporaryDatabase;\n+import org.opennms.core.test.snmp.annotations.JUnitSnmpAgent;\n+import org.opennms.core.utils.InetAddressUtils;\n+import org.opennms.netmgt.collection.api.CollectionSet;\n+import org.opennms.netmgt.collection.api.CollectionStatus;\n+import org.opennms.netmgt.collection.core.CollectionSpecification;\n+import org.opennms.netmgt.collection.test.api.CollectorTestUtils;\n+import org.opennms.netmgt.config.SnmpPeerFactory;\n+import org.opennms.netmgt.config.dao.outages.api.ReadablePollOutagesDao;\n+import org.opennms.netmgt.dao.api.IpInterfaceDao;\n+import org.opennms.netmgt.dao.api.NodeDao;\n+import org.opennms.netmgt.dao.support.FilesystemResourceStorageDao;\n+import org.opennms.netmgt.model.NetworkBuilder;\n+import org.opennms.netmgt.model.OnmsIpInterface;\n+import org.opennms.netmgt.model.OnmsNode;\n+import org.opennms.netmgt.model.ResourcePath;\n+import org.opennms.netmgt.rrd.RrdStrategy;\n+import org.opennms.netmgt.rrd.jrobin.JRobinRrdStrategy;\n+import org.opennms.test.JUnitConfigurationEnvironment;\n+import org.opennms.test.mock.MockUtil;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.TestContext;\n+import org.springframework.transaction.PlatformTransactionManager;\n+\n+/**\n+ * The Test Class for SnmpCollector with MIB Object Properties.\n+ */\n+@RunWith(OpenNMSJUnit4ClassRunner.class)\n+@ContextConfiguration(locations={\n+        \"classpath:/META-INF/opennms/applicationContext-commonConfigs.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-minimal-conf.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-soa.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-mockDao.xml\",\n+        \"classpath*:/META-INF/opennms/component-dao.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-pinger.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-daemon.xml\",\n+        \"classpath:/META-INF/opennms/mockEventIpcManager.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-proxy-snmp.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-testPollerConfigDaos.xml\"\n+})\n+@JUnitConfigurationEnvironment(systemProperties=\"org.opennms.rrd.storeByGroup=false\")\n+@JUnitTemporaryDatabase(reuseDatabase=false) // Relies on records created in @Before so we need a fresh database for each test\n+public class SnmpCollectorWithPointerLikeExtendedPropertiesIT implements InitializingBean, TestContextAware {\n+\n+    /** The Constant TEST_NODE_LABEL. */\n+    private final static String TEST_NODE_LABEL = \"sample.local\"; \n+\n+    /** The platform transaction manager. */\n+    @Autowired\n+    private PlatformTransactionManager m_transactionManager;\n+\n+    /** The Node DAO. */\n+    @Autowired\n+    private NodeDao m_nodeDao;\n+\n+    /** The IP interface DAO. */\n+    @Autowired\n+    private IpInterfaceDao m_ipInterfaceDao;\n+\n+    /** The SNMP peer factory. */\n+    @Autowired\n+    private SnmpPeerFactory m_snmpPeerFactory;\n+\n+    @Autowired\n+    private ReadablePollOutagesDao m_pollOutagesDao;\n+\n+    /** The context. */\n+    private TestContext m_context;\n+\n+    /** The test host name. */\n+    private String m_testHostName;\n+\n+    /** The collection specification. */\n+    private CollectionSpecification m_collectionSpecification;\n+\n+    /** The collection agent. */\n+    private SnmpCollectionAgent m_collectionAgent;\n+\n+    /** The RRD strategy. */\n+    private RrdStrategy<?, ?> m_rrdStrategy;\n+\n+    /** The resource storage DAO. */\n+    private FilesystemResourceStorageDao m_resourceStorageDao;\n+\n+    /* (non-Javadoc)\n+     * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet()\n+     */\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        BeanUtils.assertAutowiring(this);\n+    }\n+\n+    /**\n+     * Sets up the test.\n+     *\n+     * @throws Exception the exception\n+     */\n+    @Before\n+    public void setUp() throws Exception {\n+        MockServiceCollector.setDelegate(null);\n+        MockLogAppender.setupLogging();\n+\n+        m_rrdStrategy = new JRobinRrdStrategy();\n+\n+        m_resourceStorageDao = new FilesystemResourceStorageDao();\n+        File snmpRrdDirectory = (File)m_context.getAttribute(\"rrdDirectory\");\n+        m_resourceStorageDao.setRrdDirectory(snmpRrdDirectory.getParentFile());\n+\n+        m_testHostName = InetAddressUtils.str(InetAddress.getLocalHost());\n+\n+        OnmsIpInterface iface = null;\n+        OnmsNode testNode = null;\n+        Collection<OnmsNode> testNodes = m_nodeDao.findByLabel(TEST_NODE_LABEL);\n+        if (testNodes == null || testNodes.size() < 1) {\n+            NetworkBuilder builder = new NetworkBuilder();\n+            builder.addNode(TEST_NODE_LABEL).setId(1).setSysObjectId(\".1.3.6.1.4.1.9.1.1208\");\n+            builder.addSnmpInterface(1).setIfName(\"Vl1\").setPhysAddr(\"de:ad:be:ef:ca:01\").setIfType(6).setCollectionEnabled(true).addIpInterface(m_testHostName).setIsSnmpPrimary(\"P\");\n+            builder.addSnmpInterface(10146).setIfName(\"Gi1/0/46\").setPhysAddr(\"de:ad:be:ef:ca:32\").setIfType(6).setCollectionEnabled(true).addIpInterface(\"10.0.46.1\").setIsSnmpPrimary(\"N\");\n+            builder.addSnmpInterface(10152).setIfName(\"Gi1/0/52\").setPhysAddr(\"de:ad:be:ef:ca:38\").setIfType(6).setCollectionEnabled(true).addIpInterface(\"10.0.52.1\").setIsSnmpPrimary(\"N\");\n+            testNode = builder.getCurrentNode();\n+            assertNotNull(testNode);\n+            m_nodeDao.save(testNode);\n+            m_nodeDao.flush();\n+        } else {\n+            testNode = testNodes.iterator().next();\n+        }\n+\n+        Set<OnmsIpInterface> ifaces = testNode.getIpInterfaces();\n+        assertEquals(3, ifaces.size());\n+        iface = ifaces.iterator().next();\n+\n+        SnmpPeerFactory.setInstance(m_snmpPeerFactory);\n+\n+        SnmpCollector collector = new SnmpCollector();\n+        collector.initialize();\n+\n+        m_collectionSpecification = CollectorTestUtils.createCollectionSpec(\"SNMP\", collector, \"default\",\n+                m_pollOutagesDao);\n+        m_collectionAgent = DefaultSnmpCollectionAgent.create(iface.getId(), m_ipInterfaceDao, m_transactionManager);\n+    }\n+\n+    /**\n+     * Tears down the test.\n+     *\n+     * @throws Exception the exception\n+     */\n+    @After\n+    public void tearDown() throws Exception {\n+        MockUtil.println(\"------------ End Test --------------------------\");\n+        MockLogAppender.assertNoWarningsOrGreater();\n+    }\n+\n+    /**\n+     * Test collection for dot1d-bridge base port entry with indirectly-referenced property", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY3NTQyOnYy", "diffSide": "RIGHT", "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithPointerLikeExtendedPropertiesIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzoxMDozNFrOHeoS3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzoxMDozNFrOHeoS3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3OTUxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * pulled over from ifTable, using the value of dot1dBasePortIfIndex as a pointer\n          \n          \n            \n                 * pulled over from ifTable, using the value of dot1dBasePortIfIndex as a pointer.", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501879517", "createdAt": "2020-10-08T17:10:34Z", "author": {"login": "Bonrob2"}, "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithPointerLikeExtendedPropertiesIT.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.collectd;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.File;\n+import java.net.InetAddress;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.opennms.core.collection.test.JUnitCollector;\n+import org.opennms.core.spring.BeanUtils;\n+import org.opennms.core.test.MockLogAppender;\n+import org.opennms.core.test.OpenNMSJUnit4ClassRunner;\n+import org.opennms.core.test.TestContextAware;\n+import org.opennms.core.test.db.annotations.JUnitTemporaryDatabase;\n+import org.opennms.core.test.snmp.annotations.JUnitSnmpAgent;\n+import org.opennms.core.utils.InetAddressUtils;\n+import org.opennms.netmgt.collection.api.CollectionSet;\n+import org.opennms.netmgt.collection.api.CollectionStatus;\n+import org.opennms.netmgt.collection.core.CollectionSpecification;\n+import org.opennms.netmgt.collection.test.api.CollectorTestUtils;\n+import org.opennms.netmgt.config.SnmpPeerFactory;\n+import org.opennms.netmgt.config.dao.outages.api.ReadablePollOutagesDao;\n+import org.opennms.netmgt.dao.api.IpInterfaceDao;\n+import org.opennms.netmgt.dao.api.NodeDao;\n+import org.opennms.netmgt.dao.support.FilesystemResourceStorageDao;\n+import org.opennms.netmgt.model.NetworkBuilder;\n+import org.opennms.netmgt.model.OnmsIpInterface;\n+import org.opennms.netmgt.model.OnmsNode;\n+import org.opennms.netmgt.model.ResourcePath;\n+import org.opennms.netmgt.rrd.RrdStrategy;\n+import org.opennms.netmgt.rrd.jrobin.JRobinRrdStrategy;\n+import org.opennms.test.JUnitConfigurationEnvironment;\n+import org.opennms.test.mock.MockUtil;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.TestContext;\n+import org.springframework.transaction.PlatformTransactionManager;\n+\n+/**\n+ * The Test Class for SnmpCollector with MIB Object Properties.\n+ */\n+@RunWith(OpenNMSJUnit4ClassRunner.class)\n+@ContextConfiguration(locations={\n+        \"classpath:/META-INF/opennms/applicationContext-commonConfigs.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-minimal-conf.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-soa.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-mockDao.xml\",\n+        \"classpath*:/META-INF/opennms/component-dao.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-pinger.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-daemon.xml\",\n+        \"classpath:/META-INF/opennms/mockEventIpcManager.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-proxy-snmp.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-testPollerConfigDaos.xml\"\n+})\n+@JUnitConfigurationEnvironment(systemProperties=\"org.opennms.rrd.storeByGroup=false\")\n+@JUnitTemporaryDatabase(reuseDatabase=false) // Relies on records created in @Before so we need a fresh database for each test\n+public class SnmpCollectorWithPointerLikeExtendedPropertiesIT implements InitializingBean, TestContextAware {\n+\n+    /** The Constant TEST_NODE_LABEL. */\n+    private final static String TEST_NODE_LABEL = \"sample.local\"; \n+\n+    /** The platform transaction manager. */\n+    @Autowired\n+    private PlatformTransactionManager m_transactionManager;\n+\n+    /** The Node DAO. */\n+    @Autowired\n+    private NodeDao m_nodeDao;\n+\n+    /** The IP interface DAO. */\n+    @Autowired\n+    private IpInterfaceDao m_ipInterfaceDao;\n+\n+    /** The SNMP peer factory. */\n+    @Autowired\n+    private SnmpPeerFactory m_snmpPeerFactory;\n+\n+    @Autowired\n+    private ReadablePollOutagesDao m_pollOutagesDao;\n+\n+    /** The context. */\n+    private TestContext m_context;\n+\n+    /** The test host name. */\n+    private String m_testHostName;\n+\n+    /** The collection specification. */\n+    private CollectionSpecification m_collectionSpecification;\n+\n+    /** The collection agent. */\n+    private SnmpCollectionAgent m_collectionAgent;\n+\n+    /** The RRD strategy. */\n+    private RrdStrategy<?, ?> m_rrdStrategy;\n+\n+    /** The resource storage DAO. */\n+    private FilesystemResourceStorageDao m_resourceStorageDao;\n+\n+    /* (non-Javadoc)\n+     * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet()\n+     */\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        BeanUtils.assertAutowiring(this);\n+    }\n+\n+    /**\n+     * Sets up the test.\n+     *\n+     * @throws Exception the exception\n+     */\n+    @Before\n+    public void setUp() throws Exception {\n+        MockServiceCollector.setDelegate(null);\n+        MockLogAppender.setupLogging();\n+\n+        m_rrdStrategy = new JRobinRrdStrategy();\n+\n+        m_resourceStorageDao = new FilesystemResourceStorageDao();\n+        File snmpRrdDirectory = (File)m_context.getAttribute(\"rrdDirectory\");\n+        m_resourceStorageDao.setRrdDirectory(snmpRrdDirectory.getParentFile());\n+\n+        m_testHostName = InetAddressUtils.str(InetAddress.getLocalHost());\n+\n+        OnmsIpInterface iface = null;\n+        OnmsNode testNode = null;\n+        Collection<OnmsNode> testNodes = m_nodeDao.findByLabel(TEST_NODE_LABEL);\n+        if (testNodes == null || testNodes.size() < 1) {\n+            NetworkBuilder builder = new NetworkBuilder();\n+            builder.addNode(TEST_NODE_LABEL).setId(1).setSysObjectId(\".1.3.6.1.4.1.9.1.1208\");\n+            builder.addSnmpInterface(1).setIfName(\"Vl1\").setPhysAddr(\"de:ad:be:ef:ca:01\").setIfType(6).setCollectionEnabled(true).addIpInterface(m_testHostName).setIsSnmpPrimary(\"P\");\n+            builder.addSnmpInterface(10146).setIfName(\"Gi1/0/46\").setPhysAddr(\"de:ad:be:ef:ca:32\").setIfType(6).setCollectionEnabled(true).addIpInterface(\"10.0.46.1\").setIsSnmpPrimary(\"N\");\n+            builder.addSnmpInterface(10152).setIfName(\"Gi1/0/52\").setPhysAddr(\"de:ad:be:ef:ca:38\").setIfType(6).setCollectionEnabled(true).addIpInterface(\"10.0.52.1\").setIsSnmpPrimary(\"N\");\n+            testNode = builder.getCurrentNode();\n+            assertNotNull(testNode);\n+            m_nodeDao.save(testNode);\n+            m_nodeDao.flush();\n+        } else {\n+            testNode = testNodes.iterator().next();\n+        }\n+\n+        Set<OnmsIpInterface> ifaces = testNode.getIpInterfaces();\n+        assertEquals(3, ifaces.size());\n+        iface = ifaces.iterator().next();\n+\n+        SnmpPeerFactory.setInstance(m_snmpPeerFactory);\n+\n+        SnmpCollector collector = new SnmpCollector();\n+        collector.initialize();\n+\n+        m_collectionSpecification = CollectorTestUtils.createCollectionSpec(\"SNMP\", collector, \"default\",\n+                m_pollOutagesDao);\n+        m_collectionAgent = DefaultSnmpCollectionAgent.create(iface.getId(), m_ipInterfaceDao, m_transactionManager);\n+    }\n+\n+    /**\n+     * Tears down the test.\n+     *\n+     * @throws Exception the exception\n+     */\n+    @After\n+    public void tearDown() throws Exception {\n+        MockUtil.println(\"------------ End Test --------------------------\");\n+        MockLogAppender.assertNoWarningsOrGreater();\n+    }\n+\n+    /**\n+     * Test collection for dot1d-bridge base port entry with indirectly-referenced property\n+     * pulled over from ifTable, using the value of dot1dBasePortIfIndex as a pointer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY3ODkyOnYy", "diffSide": "RIGHT", "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithMibPropertiesIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzoxMTozM1rOHeoVNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzoxMTozM1rOHeoVNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4MDExOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throwsException the exception\n          \n          \n            \n                 * @throws Exception the exception\n          \n      \n    \n    \n  \n\nElsewhere there is a space between @throws and Exception. Not sure if this is syntactically necessary.", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501880119", "createdAt": "2020-10-08T17:11:33Z", "author": {"login": "Bonrob2"}, "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithMibPropertiesIT.java", "diffHunk": "@@ -242,6 +242,52 @@ public void testCollectCiscoQoS() throws Exception {\n         assertEquals(\"GESTION-ROUTING\", map.get(\"cbQosClassMapName\"));\n         assertEquals(\"Conexion Valencia\", map.get(\"ifAlias\"));\n     }\n+    \n+    /**\n+     * Test collection for Cisco memory-pool entry with indirectly-referenced property\n+     * pulled over from entPhysicalTable\n+     * \n+     * @throwsException the exception\n+     */\n+    @Test\n+    @JUnitCollector(datacollectionType = \"snmp\", datacollectionConfig = \"/org/opennms/netmgt/config/datacollection-config-cisco-mempool.xml\")\n+    @JUnitSnmpAgent(resource = \"/org/opennms/netmgt/snmp/cisco-mempool-snmpwalk.properties\")\n+    public void testCollectionCiscoMemPoolVsEntPhysical() throws Exception {\n+        System.setProperty(\"org.opennms.netmgt.collectd.SnmpCollector.limitCollectionToInstances\", \"true\");\n+        \n+        CollectionSet collectionSet = m_collectionSpecification.collect(m_collectionAgent);\n+        assertEquals(\"collection status\", CollectionStatus.SUCCEEDED, collectionSet.getStatus());\n+        CollectorTestUtils.persistCollectionSet(m_rrdStrategy, m_resourceStorageDao, m_collectionSpecification, collectionSet);\n+        \n+        Map<String, String> map = m_resourceStorageDao.getStringAttributes(ResourcePath.get(\"snmp\", \"1\", \"cempMemoryPool\", \"1.1\"));\n+        assertEquals(\"Processor\", map.get(\"cempMemoryPoolName\"));\n+        assertEquals(\"CISCO2911/K9\", map.get(\"cempMemoryPoolPhysName\"));\n+        assertEquals(\"CISCO2911/K9 chassis, Hw Serial#: FCZ161870SC, Hw Revision: 1.0\", map.get(\"cempMemoryPoolPhysDescr\"));\n+        \n+        map = m_resourceStorageDao.getStringAttributes(ResourcePath.get(\"snmp\", \"1\", \"cempMemoryPool\", \"1.2\"));\n+        assertEquals(\"CISCO2911/K9\", map.get(\"cempMemoryPoolPhysName\"));\n+        assertEquals(\"CISCO2911/K9 chassis, Hw Serial#: FCZ161870SC, Hw Revision: 1.0\", map.get(\"cempMemoryPoolPhysDescr\"));\n+    }\n+\n+    /**\n+     * Test enum-lookup property extender against values of dot1dStpPortState\n+     *\n+     * @throwsException the exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3010, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}