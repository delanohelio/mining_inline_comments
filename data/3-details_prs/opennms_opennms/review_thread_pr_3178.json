{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4ODgwODQy", "number": 3178, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo1MjoyNFrOE0sItA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODozNTo1NVrOE0s-qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjg0NTMyOnYy", "diffSide": "RIGHT", "path": "opennms-base-assembly/src/main/filtered/etc/events/opennms.pollerd.events.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo1MjoyNFrOHsjIlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo1MjoyNFrOHsjIlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3NTAyOQ==", "bodyText": "Maybe \"The not present state\" like in the other definitions.", "url": "https://github.com/OpenNMS/opennms/pull/3178#discussion_r516475029", "createdAt": "2020-11-03T07:52:24Z", "author": {"login": "christianpape"}, "path": "opennms-base-assembly/src/main/filtered/etc/events/opennms.pollerd.events.xml", "diffHunk": "@@ -135,8 +135,91 @@\n             ifindex:%parm[snmpifindex]% ifdescr:%parm[snmpifdescr]%\n         </logmsg>\n       <severity>Minor</severity>\n-      <alarm-data reduction-key=\"%uei%:%dpname%:%nodeid%:%interface%:%parm[snmpifindex]%\" alarm-type=\"1\" auto-clean=\"false\"/>\n-   </event>\n+      <alarm-data reduction-key=\"%uei%:%dpname%:%nodeid%:%parm[snmpifindex]%\" alarm-type=\"1\" auto-clean=\"false\">\n+          <update-field field-name=\"severity\" update-on-reduction=\"true\"/>\n+      </alarm-data>\n+   </event>\n+    <event>\n+        <uei>uei.opennms.org/nodes/snmp/interfaceOperTesting</uei>\n+        <event-label>OpenNMS-defined node event: snmp interface Oper Status Testing</event-label>\n+        <descr>&lt;p>The operational status of interface is testing\n+            &lt;/p> &lt;p>This event is generated when an snmp poll on interface find the operational status testing.\n+            &lt;/p>&lt;p>The testing state indicates that some tests must be performed on the interface. Once completed\n+            the state may change to up, dormant, or down, as appropriate.&lt;/p>\n+            &lt;p>Params %parm[all]% &lt;/p></descr>\n+        <logmsg dest=\"logndisplay\">Operational status Testing on interface ifname:%parm[snmpifname]%\n+            ifindex:%parm[snmpifindex]% ifdescr:%parm[snmpifdescr]%\n+        </logmsg>\n+        <severity>Warning</severity>\n+        <alarm-data reduction-key=\"uei.opennms.org/nodes/snmp/interfaceOperDown:%dpname%:%nodeid%:%parm[snmpifindex]%\" alarm-type=\"1\" auto-clean=\"false\">\n+            <update-field field-name=\"severity\" update-on-reduction=\"true\"/>\n+        </alarm-data>\n+    </event>\n+    <event>\n+        <uei>uei.opennms.org/nodes/snmp/interfaceOperUnknown</uei>\n+        <event-label>OpenNMS-defined node event: snmp interface Oper Status Unknown</event-label>\n+        <descr>&lt;p>The operational status of interface is unknown\n+            &lt;/p> &lt;p>This event is generated when an snmp poll on interface find the operational status unknown.\n+            &lt;/p> &lt;p>The unknown state indicates that the state of the interface can not be\n+            ascertained.&lt;/p>\n+            &lt;p>Params %parm[all]% &lt;/p></descr>\n+        <logmsg dest=\"logndisplay\">Operational status Unknown on interface ifname:%parm[snmpifname]%\n+            ifindex:%parm[snmpifindex]% ifdescr:%parm[snmpifdescr]%\n+        </logmsg>\n+        <severity>Minor</severity>\n+        <alarm-data reduction-key=\"uei.opennms.org/nodes/snmp/interfaceOperDown:%dpname%:%nodeid%:%parm[snmpifindex]%\" alarm-type=\"1\" auto-clean=\"false\">\n+            <update-field field-name=\"severity\" update-on-reduction=\"true\"/>\n+        </alarm-data>\n+    </event>\n+    <event>\n+        <uei>uei.opennms.org/nodes/snmp/interfaceOperDormant</uei>\n+        <event-label>OpenNMS-defined node event: snmp interface Oper Status Dormant</event-label>\n+        <descr>&lt;p>The operational status of interface is dormant\n+            &lt;/p> &lt;p>This event is generated when an snmp poll on interface find the operational status dormant.\n+            &lt;/p>&lt;p>The dormant state indicates that the relevant interface is not actually in a condition\n+            to pass packets but is in a pending state, waiting for some external event.&lt;/p>\n+            &lt;p>Params %parm[all]% &lt;/p></descr>\n+        <logmsg dest=\"logndisplay\">Operational status Dormant on interface ifname:%parm[snmpifname]%\n+            ifindex:%parm[snmpifindex]% ifdescr:%parm[snmpifdescr]%\n+        </logmsg>\n+        <severity>Warning</severity>\n+        <alarm-data reduction-key=\"uei.opennms.org/nodes/snmp/interfaceOperDown:%dpname%:%nodeid%:%parm[snmpifindex]%\" alarm-type=\"1\" auto-clean=\"false\">\n+            <update-field field-name=\"severity\" update-on-reduction=\"true\"/>\n+        </alarm-data>\n+    </event>\n+    <event>\n+        <uei>uei.opennms.org/nodes/snmp/interfaceOperNotPresent</uei>\n+        <event-label>OpenNMS-defined node event: snmp interface Oper Status Not Present</event-label>\n+        <descr>&lt;p>The operational status of interface is not present\n+            &lt;/p> &lt;p>This event is generated when an snmp poll on interface find the operational status not present.\n+            &lt;/p> &lt;p>The notPresent state indicates that the interface is down specifically because", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43b9147d2aa19a23d2eccb5b475c3d8f68dce6b"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjkwMjc0OnYy", "diffSide": "LEFT", "path": "opennms-config-model/src/main/java/org/opennms/netmgt/config/snmpinterfacepoller/Package.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODoxMToxMVrOHsjqbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODoxMToxMVrOHsjqbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4MzY5NA==", "bodyText": "Good catch!", "url": "https://github.com/OpenNMS/opennms/pull/3178#discussion_r516483694", "createdAt": "2020-11-03T08:11:11Z", "author": {"login": "christianpape"}, "path": "opennms-config-model/src/main/java/org/opennms/netmgt/config/snmpinterfacepoller/Package.java", "diffHunk": "@@ -231,7 +231,7 @@ public boolean equals(final Object obj) {\n \n         if (obj instanceof Package) {\n             final Package that = (Package)obj;\n-            return Objects.equals(this.m_name, this.m_name)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43b9147d2aa19a23d2eccb5b475c3d8f68dce6b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjkxOTk5OnYy", "diffSide": "RIGHT", "path": "opennms-config/src/test/java/org/opennms/netmgt/config/SnmpInterfacePollerConfigFactoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODoxNjo0OVrOHsj0vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODoxNjo0OVrOHsj0vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4NjMzMw==", "bodyText": "Copyright (C) 2020 The OpenNMS Group, Inc.", "url": "https://github.com/OpenNMS/opennms/pull/3178#discussion_r516486333", "createdAt": "2020-11-03T08:16:49Z", "author": {"login": "christianpape"}, "path": "opennms-config/src/test/java/org/opennms/netmgt/config/SnmpInterfacePollerConfigFactoryTest.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2006-2014 The OpenNMS Group, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43b9147d2aa19a23d2eccb5b475c3d8f68dce6b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjkyNjM4OnYy", "diffSide": "RIGHT", "path": "opennms-doc/guide-admin/src/asciidoc/text/provisioning/examples.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODoxODo1MFrOHsj4nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODoxODo1MFrOHsj4nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4NzMyNA==", "bodyText": "\"In order for a this daemon\" -> \"In order for this daemon\"", "url": "https://github.com/OpenNMS/opennms/pull/3178#discussion_r516487324", "createdAt": "2020-11-03T08:18:50Z", "author": {"login": "christianpape"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/provisioning/examples.adoc", "diffHunk": "@@ -280,6 +280,13 @@ appropriate action. If during the policy evaluation process any policy\n matches for a \u201cDO_NOT_PERSIST\u201d action, no further policy evaluations\n will happen for that particular entity (IP Interface, SNMP Interface).\n \n+Another use of this policy is to mark interfaces for polling by the SNMP Interface Poller. The SNMP Interface Poller is a separate daemon that is disabled by default. In order for a this daemon to do any work, some SNMP interfaces need to be selected for polling.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43b9147d2aa19a23d2eccb5b475c3d8f68dce6b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjkzMjcxOnYy", "diffSide": "RIGHT", "path": "opennms-doc/guide-admin/src/asciidoc/text/provisioning/examples.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODoyMDo0NFrOHsj8Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODoyMToxMlrOHsj9Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4ODI2Ng==", "bodyText": "What?", "url": "https://github.com/OpenNMS/opennms/pull/3178#discussion_r516488266", "createdAt": "2020-11-03T08:20:44Z", "author": {"login": "christianpape"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/provisioning/examples.adoc", "diffHunk": "@@ -280,6 +280,13 @@ appropriate action. If during the policy evaluation process any policy\n matches for a \u201cDO_NOT_PERSIST\u201d action, no further policy evaluations\n will happen for that particular entity (IP Interface, SNMP Interface).\n \n+Another use of this policy is to mark interfaces for polling by the SNMP Interface Poller. The SNMP Interface Poller is a separate daemon that is disabled by default. In order for a this daemon to do any work, some SNMP interfaces need to be selected for polling.\n+Use the \"ENABLE_POLLING\" and \"DISABLE_POLLING\" actions available in this policy in order to manage which SNMP interfaces are polled by this daemon.\n+Let's create another policy named _pollVoIPDialPeers_ that marks interfaces with _ifType_ _104_. We'll set the _action_ to _ENABLE_POLLING_ and _matchBehavior_ to _ALL_PARAMETERS_.\n+Add a parameter for _ifType_ as the key and _104_ as the value.\n+\n+Decide to move all your meetings to Minecraft and Mumble? Decommission your voice circuits and flip the the action to _DISABLE_POLLING_!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43b9147d2aa19a23d2eccb5b475c3d8f68dce6b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4ODUxNA==", "bodyText": "\"the the\" -> \"the\"", "url": "https://github.com/OpenNMS/opennms/pull/3178#discussion_r516488514", "createdAt": "2020-11-03T08:21:12Z", "author": {"login": "christianpape"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/provisioning/examples.adoc", "diffHunk": "@@ -280,6 +280,13 @@ appropriate action. If during the policy evaluation process any policy\n matches for a \u201cDO_NOT_PERSIST\u201d action, no further policy evaluations\n will happen for that particular entity (IP Interface, SNMP Interface).\n \n+Another use of this policy is to mark interfaces for polling by the SNMP Interface Poller. The SNMP Interface Poller is a separate daemon that is disabled by default. In order for a this daemon to do any work, some SNMP interfaces need to be selected for polling.\n+Use the \"ENABLE_POLLING\" and \"DISABLE_POLLING\" actions available in this policy in order to manage which SNMP interfaces are polled by this daemon.\n+Let's create another policy named _pollVoIPDialPeers_ that marks interfaces with _ifType_ _104_. We'll set the _action_ to _ENABLE_POLLING_ and _matchBehavior_ to _ALL_PARAMETERS_.\n+Add a parameter for _ifType_ as the key and _104_ as the value.\n+\n+Decide to move all your meetings to Minecraft and Mumble? Decommission your voice circuits and flip the the action to _DISABLE_POLLING_!", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4ODI2Ng=="}, "originalCommit": {"oid": "f43b9147d2aa19a23d2eccb5b475c3d8f68dce6b"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjkzNzMwOnYy", "diffSide": "RIGHT", "path": "opennms-doc/guide-admin/src/asciidoc/text/snmp-poller/concepts.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODoyMjoxMlrOHsj_PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODoyMjoxMlrOHsj_PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4OTAyMQ==", "bodyText": "a SNMP GET", "url": "https://github.com/OpenNMS/opennms/pull/3178#discussion_r516489021", "createdAt": "2020-11-03T08:22:12Z", "author": {"login": "christianpape"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/snmp-poller/concepts.adoc", "diffHunk": "@@ -0,0 +1,211 @@\n+\n+// Allow GitHub image rendering\n+:imagesdir: ../../images\n+\n+=== SNMP Interface Poller\n+\n+_{opennms-product-name}_ can monitor the status of an SNMP interface that is not directly monitored by a <<ga-service-assurance, Service Assurance>> monitor.\n+\n+The SNMP Interface Poller is a separate service that uses a node interface, typically a management interface, to get administration and operational status for other interfaces present on the device.\n+On a configurable time interval an SNMP GET request is made for two specific objects in an `ifEntry` of the `ifTable` defined in the `IF-MIB`:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43b9147d2aa19a23d2eccb5b475c3d8f68dce6b"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjk3NDg2OnYy", "diffSide": "RIGHT", "path": "opennms-services/src/main/java/org/opennms/netmgt/snmpinterfacepoller/pollable/PollableSnmpInterface.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODozMzoyNlrOHskWBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODozMzoyNlrOHskWBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NDg1Mg==", "bodyText": "Please use .* imports only for static imports.", "url": "https://github.com/OpenNMS/opennms/pull/3178#discussion_r516494852", "createdAt": "2020-11-03T08:33:26Z", "author": {"login": "christianpape"}, "path": "opennms-services/src/main/java/org/opennms/netmgt/snmpinterfacepoller/pollable/PollableSnmpInterface.java", "diffHunk": "@@ -28,23 +28,21 @@\n \n package org.opennms.netmgt.snmpinterfacepoller.pollable;\n \n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.*;\n \n import org.opennms.netmgt.events.api.EventConstants;\n import org.opennms.netmgt.model.OnmsSnmpInterface;\n import org.opennms.netmgt.poller.PollStatus;\n+import org.opennms.netmgt.snmpinterfacepoller.pollable.SnmpInterfaceStatus.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43b9147d2aa19a23d2eccb5b475c3d8f68dce6b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjk4MzQ2OnYy", "diffSide": "RIGHT", "path": "opennms-services/src/main/java/org/opennms/netmgt/snmpinterfacepoller/pollable/PollableSnmpInterface.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODozNTo1NVrOHskbKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODozNTo1NVrOHskbKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NjE2OQ==", "bodyText": "Please use { ... } for blocks, even for one-line blocks.", "url": "https://github.com/OpenNMS/opennms/pull/3178#discussion_r516496169", "createdAt": "2020-11-03T08:35:55Z", "author": {"login": "christianpape"}, "path": "opennms-services/src/main/java/org/opennms/netmgt/snmpinterfacepoller/pollable/PollableSnmpInterface.java", "diffHunk": "@@ -66,75 +64,105 @@\n     private String m_name;\n         \n     private String m_criteria;\n+\n+    private Set<SnmpInterfaceStatus> m_upValues;\n+\n+    private Set<SnmpInterfaceStatus> m_downValues;\n         \n     private SnmpAgentConfig m_agentConfig;\n     \n     public static class SnmpMinimalPollInterface {\n-        \n-    \tstatic final int IF_UP=1;\n-    \tstatic final int IF_DOWN=2;\n-    \tstatic final int IF_UNKNOWN=0;\n-        \n-        private final String[] s_statusNames = {\"Unknown\",\"InterfaceUp\", \"InterfaceDown\"}; \n-        \n+\n         int ifindex;\n-        int adminstatus;\n-        int operstatus;\n-        \n+        SnmpInterfaceStatus adminstatus;\n+        SnmpInterfaceStatus operstatus;\n+\n         PollStatus m_status;\n-        \n-        public SnmpMinimalPollInterface(int ifindex, int adminstatus,\n-                int operstatus) {\n+\n+        PollStatus m_operPollStatus;\n+        PollStatus m_adminPollStatus;\n+\n+        public SnmpMinimalPollInterface(int ifindex, SnmpInterfaceStatus adminstatus,\n+                SnmpInterfaceStatus operstatus) {\n             this.ifindex = ifindex;\n             this.adminstatus = adminstatus;\n             this.operstatus = operstatus;\n             m_status = PollStatus.unknown();\n         }\n \n-        public String decodeStatus(int status) {\n-            if (status >= 0 && status <= 2) {\n-                return s_statusNames[status];\n-            }\n-            return s_statusNames[0];\n-        }\n-\n         public int getIfindex() {\n             return ifindex;\n         }\n         public void setIfindex(int ifindex) {\n             this.ifindex = ifindex;\n         }\n-        public int getAdminstatus() {\n+        public SnmpInterfaceStatus getAdminstatus() {\n             return adminstatus;\n         }\n-        \n-        public void setAdminstatus(int adminstatus) {\n-            if (adminstatus > 2 )\n-                this.adminstatus = IF_UNKNOWN;\n-            else this.adminstatus = adminstatus;\n+\n+        /**\n+         *\n+         * @param adminstatus valid values are up(1), down(2), testing(3) according to RFC 2863. Value will be set to\n+         *                    invalid(0) in the case where an improper value is attempted to be set.\n+         */\n+        public void setAdminstatus(SnmpInterfaceStatus adminstatus) {\n+            if (adminstatus.getMibValue() > 3 )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43b9147d2aa19a23d2eccb5b475c3d8f68dce6b"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2998, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}