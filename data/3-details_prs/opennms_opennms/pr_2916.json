{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MTkzMTQy", "number": 2916, "title": "NMS-12569: Resolve Hostnames in BMP parser", "bodyText": "This resolves IPs to hostnames while parsing BMP messages.\nIPs are resolved for Initiation messages and for each message containing\na peer header.\nThe DNS resolution is done asynchonous before dispatching the message to\nthe sink module. The behaviour is disabled by default and can be enabled\nusing parsing parameters.\nExternal References\n\nJIRA (Issue Tracker): http://issues.opennms.org/browse/NMS-12569", "createdAt": "2020-03-12T11:37:58Z", "url": "https://github.com/OpenNMS/opennms/pull/2916", "merged": true, "mergeCommit": {"oid": "1746dbeac5542ed99bedb208d9ab419c7624d16e"}, "closed": true, "closedAt": "2020-04-03T15:00:30Z", "author": {"login": "fooker"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcM6D5-AH2gAyMzg3MTkzMTQyOjZiYmZmZDk0OTQ0NGJjNjA5MTk5NGQ1YzFmYjY0YWRlZmYyOGM0MDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcT4Y_AgH2gAyMzg3MTkzMTQyOjAzM2NlYTdhZGYxNDMxMTI5OWUyMmRiZTIzZTU0MGMyNWQ0NjczZTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6bbffd949444bc6091994d5c1fb64adeff28c403", "author": {"user": {"login": "fooker", "name": "Dustin Frisch"}}, "url": "https://github.com/OpenNMS/opennms/commit/6bbffd949444bc6091994d5c1fb64adeff28c403", "committedDate": "2020-03-12T11:31:56Z", "message": "NMS-12569: Resolve Hostnames in BMP parser\n\nThis resolves IPs to hostnames while parsing BMP messages.\nIPs are resolved for Initiation messages and for each message containing\na peer header.\n\nThe DNS resolution is done asynchonous before dispatching the message to\nthe sink module. The behaviour is disabled by default and can be enabled\nusing parsing parameters."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MDA4Mzc3", "url": "https://github.com/OpenNMS/opennms/pull/2916#pullrequestreview-374008377", "createdAt": "2020-03-13T02:20:49Z", "commit": {"oid": "6bbffd949444bc6091994d5c1fb64adeff28c403"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMjoyMDo0OVrOF11kjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMjo0MDo1MlrOF111iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5NjU1OQ==", "bodyText": "Can we enable this by default?", "url": "https://github.com/OpenNMS/opennms/pull/2916#discussion_r391996559", "createdAt": "2020-03-13T02:20:49Z", "author": {"login": "j-white"}, "path": "features/telemetry/protocols/bmp/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/parser/BmpParser.java", "diffHunk": "@@ -130,11 +133,16 @@\n \n     private HashSet<InetAddress> connections = Sets.newHashSet();\n \n+    private final DnsResolver dnsResolver;\n+    private boolean dnsLookupsEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bbffd949444bc6091994d5c1fb64adeff28c403"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5NzA1MQ==", "bodyText": "We haven't necessarily dispatched it yet. We should move this into the thenCompose block above.", "url": "https://github.com/OpenNMS/opennms/pull/2916#discussion_r391997051", "createdAt": "2020-03-13T02:23:04Z", "author": {"login": "j-white"}, "path": "features/telemetry/protocols/bmp/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/parser/BmpParser.java", "diffHunk": "@@ -187,25 +195,39 @@ public Handler accept(final InetSocketAddress remoteAddress,\n \n                 LOG.trace(\"Got packet: {}\", packet);\n \n+                // Build the message from the received packet\n+                final Transport.Message.Builder message = Transport.Message.newBuilder()\n+                                                                           .setVersion(header.version);\n+\n+                packet.accept(new Serializer(message));\n+\n                 packet.accept(new Packet.Visitor.Adapter() {\n                     @Override\n-                    public void visit(InitiationPacket packet) {\n+                    public void visit(final InitiationPacket packet) {\n                         packet.information.first(InformationElement.Type.BGP_ID)\n-                                .map(InetAddressUtils::addr)\n-                                .ifPresent(_bgpId -> bgpId = _bgpId);\n+                                          .map(InetAddressUtils::addr)\n+                                          .ifPresent(_bgpId -> bgpId = _bgpId);\n                     }\n                 });\n \n-                final Transport.Message.Builder message = Transport.Message.newBuilder()\n-                                                                           .setVersion(header.version);\n-\n                 if (bgpId != null) {\n-                    message.setBgpId(address(bgpId));\n+                    message.setBgpId(BmpParser.address(bgpId));\n                 }\n \n-                packet.accept(new Serializer(message));\n \n-                final CompletableFuture<AsyncDispatcher.DispatchStatus> dispatched = dispatcher.send(new TelemetryMessage(remoteAddress, ByteBuffer.wrap(message.build().toByteArray())));\n+                // Enrich the message with resolved hostnames\n+                CompletableFuture<Transport.Message.Builder> enriched = CompletableFuture.completedFuture(message);\n+                if (BmpParser.this.dnsLookupsEnabled) {\n+                    enriched = enriched.thenCompose(BmpParser.this.resolvePeer(packet))\n+                                       .thenCompose(BmpParser.this.resolveSysName(packet, remoteAddress.getAddress()));\n+                }\n+\n+                // Dispatch the final message\n+                final CompletableFuture<AsyncDispatcher.DispatchStatus> dispatched = enriched.thenCompose(msg -> {\n+                    final ByteBuffer payload = ByteBuffer.wrap(msg.build().toByteArray());\n+                    return BmpParser.this.dispatcher.send(new TelemetryMessage(remoteAddress, payload));\n+                });\n+\n                 BmpParser.this.recordsDispatched.mark();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bbffd949444bc6091994d5c1fb64adeff28c403"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAwMDkwNQ==", "bodyText": "We need to find a way to put backpressure on the listener if we're not able to keep up. If there are already K enrichments in flight, then we should block until one of these finishes, otherwise we can OOM.\nWe handle this in org.opennms.netmgt.telemetry.protocols.netflow.parser.ParserBase, rather non-intutively. Maybe we can find a better way here? We already have resilience4j in the class-path - we could try and make use of the bulkhead: https://resilience4j.readme.io/docs/bulkhead", "url": "https://github.com/OpenNMS/opennms/pull/2916#discussion_r392000905", "createdAt": "2020-03-13T02:40:52Z", "author": {"login": "j-white"}, "path": "features/telemetry/protocols/bmp/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/parser/BmpParser.java", "diffHunk": "@@ -187,25 +195,39 @@ public Handler accept(final InetSocketAddress remoteAddress,\n \n                 LOG.trace(\"Got packet: {}\", packet);\n \n+                // Build the message from the received packet\n+                final Transport.Message.Builder message = Transport.Message.newBuilder()\n+                                                                           .setVersion(header.version);\n+\n+                packet.accept(new Serializer(message));\n+\n                 packet.accept(new Packet.Visitor.Adapter() {\n                     @Override\n-                    public void visit(InitiationPacket packet) {\n+                    public void visit(final InitiationPacket packet) {\n                         packet.information.first(InformationElement.Type.BGP_ID)\n-                                .map(InetAddressUtils::addr)\n-                                .ifPresent(_bgpId -> bgpId = _bgpId);\n+                                          .map(InetAddressUtils::addr)\n+                                          .ifPresent(_bgpId -> bgpId = _bgpId);\n                     }\n                 });\n \n-                final Transport.Message.Builder message = Transport.Message.newBuilder()\n-                                                                           .setVersion(header.version);\n-\n                 if (bgpId != null) {\n-                    message.setBgpId(address(bgpId));\n+                    message.setBgpId(BmpParser.address(bgpId));\n                 }\n \n-                packet.accept(new Serializer(message));\n \n-                final CompletableFuture<AsyncDispatcher.DispatchStatus> dispatched = dispatcher.send(new TelemetryMessage(remoteAddress, ByteBuffer.wrap(message.build().toByteArray())));\n+                // Enrich the message with resolved hostnames\n+                CompletableFuture<Transport.Message.Builder> enriched = CompletableFuture.completedFuture(message);\n+                if (BmpParser.this.dnsLookupsEnabled) {\n+                    enriched = enriched.thenCompose(BmpParser.this.resolvePeer(packet))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bbffd949444bc6091994d5c1fb64adeff28c403"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "442ab320bd963f2a1d57df71ba33cb3250b0e7d5", "author": {"user": {"login": "j-white", "name": "Jesse White"}}, "url": "https://github.com/OpenNMS/opennms/commit/442ab320bd963f2a1d57df71ba33cb3250b0e7d5", "committedDate": "2020-04-03T00:11:32Z", "message": "Merge remote-tracking branch 'origin/release-26.0.0' into jira/NMS-12569"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7e0646629dd5cd91ecf6179689853e31b36f579", "author": {"user": {"login": "j-white", "name": "Jesse White"}}, "url": "https://github.com/OpenNMS/opennms/commit/c7e0646629dd5cd91ecf6179689853e31b36f579", "committedDate": "2020-04-03T01:06:31Z", "message": "NMS-12638: Fix ConcurrentModificationException - don't modify map while iterating"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "295284bc16f4021659d1cd1e10cd7a37b96a2038", "author": {"user": {"login": "j-white", "name": "Jesse White"}}, "url": "https://github.com/OpenNMS/opennms/commit/295284bc16f4021659d1cd1e10cd7a37b96a2038", "committedDate": "2020-04-03T03:26:28Z", "message": "NMS-12569: Add bulkhead pattern to BmpParser to gate the number of\npackets in flight pending async DNS resolution."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "033cea7adf14311299e22dbe23e540c25d4673e3", "author": {"user": {"login": "j-white", "name": "Jesse White"}}, "url": "https://github.com/OpenNMS/opennms/commit/033cea7adf14311299e22dbe23e540c25d4673e3", "committedDate": "2020-04-03T03:32:37Z", "message": "NMS-12569: Review feedback."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3792, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}