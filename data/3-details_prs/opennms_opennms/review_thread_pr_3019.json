{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNDM4MDM0", "number": 3019, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxNjo0OTo1NFrOD_Nd8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMTozNzoxM1rOECVPTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjA3NTM2OnYy", "diffSide": "RIGHT", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxNjo0OTo1NFrOGZwC7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMToxOTo1NFrOGaJ0Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDc2NQ==", "bodyText": "Tags are unique by the combination of key and value. Thus we could have category tags like:\nTag(key=\"category\", value=\"myFirstCategory\"), Tag(key=\"category\", value=\"mySecondCategory\") etc.\nThe problem here is that we store the future tags as key value pairs in a Map<String, String>. That disallows us to store the tags with the same key since they have to be unique. I see two ways out of that:\n\nmake the keys unique like: Tag(key=\"category_1\", value=\"myFirstCategory\"), Tag(key=\"category_2\", value=\"mySecondCategory\")\nEnhance (by our own class) or substitute org.opennms.newts.api.Resource to store a set of Tags instead a Map of Strings\n\nThe first is the easier way (currently implemented) the second one more work but I guess the better way. I am not sure how we use the category tags later so it's hard for me to make a call here. @j-white What is your take?", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r429654765", "createdAt": "2020-05-24T16:49:54Z", "author": {"login": "patrick-schweizer"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2006-2015 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2015 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.timeseries.integration.persistence;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+\n+import javax.inject.Inject;\n+\n+import org.opennms.netmgt.collection.api.CollectionResource;\n+import org.opennms.netmgt.dao.api.NodeDao;\n+import org.opennms.netmgt.dao.api.SessionUtils;\n+import org.opennms.netmgt.model.OnmsAssetRecord;\n+import org.opennms.netmgt.model.OnmsCategory;\n+import org.opennms.netmgt.model.OnmsNode;\n+import org.opennms.netmgt.model.ResourceTypeUtils;\n+import org.opennms.netmgt.model.monitoringLocations.OnmsMonitoringLocation;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration.AssetTagKey;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration.MetaTagKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.collect.Maps;\n+\n+public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<String, String>> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MetaTagDataLoader.class);\n+\n+    private final NodeDao nodeDao;\n+    private final SessionUtils sessionUtils;\n+    private MetaTagConfiguration config;\n+\n+    @Inject\n+    public MetaTagDataLoader(final NodeDao nodeDao, final SessionUtils sessionUtils) {\n+        this.nodeDao = nodeDao;\n+        this.sessionUtils = sessionUtils;\n+        setConfig(new MetaTagConfiguration(Maps.fromProperties(System.getProperties())));\n+    }\n+\n+    public void setConfig(final MetaTagConfiguration config) {\n+        this.config = config;\n+    }\n+\n+    public Map<String, String> load(final CollectionResource resource) {\n+        return sessionUtils.withReadOnlyTransaction(() -> {\n+            final Map<String, String> tags = new HashMap<>();\n+            addTag(tags, MetaTagKey.resourceLabel, () -> Optional.ofNullable(resource.getInterfaceLabel()).orElse(null));\n+\n+            if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_NODE)) {\n+                String nodeCriteria = getNodeCriteriaFromResource(resource);\n+                mapNode(tags, nodeCriteria);\n+            } else if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_IF)) {\n+\n+                String nodeCriteria = getNodeCriteriaFromResource(resource);\n+                if (!Strings.isNullOrEmpty(nodeCriteria)) {\n+                    mapNode(tags, nodeCriteria);\n+                }\n+            } else if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_LATENCY)) {\n+                mapResponseTimeResource(resource, tags);\n+            } else {\n+                String nodeCriteria = getNodeCriteriaFromResource(resource);\n+                if (!Strings.isNullOrEmpty(nodeCriteria)) {\n+                    mapNode(tags, nodeCriteria);\n+                }\n+            }\n+\n+            return tags;\n+        });\n+    }\n+\n+    private void mapNode(final Map<String, String> tags, final String nodeCriteria) {\n+        Optional<OnmsNode> node = getNode(nodeCriteria);\n+        addTag(tags, MetaTagKey.nodeCriteria, () -> nodeCriteria);\n+        addTag(tags, MetaTagKey.nodeLabel, () -> node.map(OnmsNode::getLabel).orElse(null));\n+        addTag(tags, MetaTagKey.location, () -> node.map(OnmsNode::getLocation).map(OnmsMonitoringLocation::getLocationName).orElse(null));\n+        addTag(tags, MetaTagKey.sysObjectID, () -> node.map(OnmsNode::getSysObjectId).orElse(null));\n+        addTag(tags, MetaTagKey.foreignSource, () -> node.map(OnmsNode::getForeignSource).orElse(null));\n+        addTag(tags, MetaTagKey.foreignId, () -> node.map(OnmsNode::getForeignId).orElse(null));\n+        // TODO Patrick: map rest of attributes\n+\n+        // categories\n+        if(node.isPresent()) {\n+            AtomicInteger n = new AtomicInteger(1);\n+            // Tags are only unique by key and value\n+            node.get().getCategories().stream()\n+                    .map(OnmsCategory::getName)\n+                    .filter(config::isCategoryEnabled)\n+                    // TODO: Patrick: is this acceptable? Or would we rather create Tags instead of a HashMap?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ed20e23d9c09b9c3ee50355e21c02e23fd40bd"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2MTM5OA==", "bodyText": "I was thinking we could do something like this:\nfor(String categoryName : categoryNames) {\n  if (!enabledCategoryNames.contains(categoryName)) {\n      continue;\n   }\n  addTag(tags, \"cat\" + categoryName, categoryName);\n}", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r429961398", "createdAt": "2020-05-25T14:22:59Z", "author": {"login": "j-white"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2006-2015 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2015 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.timeseries.integration.persistence;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+\n+import javax.inject.Inject;\n+\n+import org.opennms.netmgt.collection.api.CollectionResource;\n+import org.opennms.netmgt.dao.api.NodeDao;\n+import org.opennms.netmgt.dao.api.SessionUtils;\n+import org.opennms.netmgt.model.OnmsAssetRecord;\n+import org.opennms.netmgt.model.OnmsCategory;\n+import org.opennms.netmgt.model.OnmsNode;\n+import org.opennms.netmgt.model.ResourceTypeUtils;\n+import org.opennms.netmgt.model.monitoringLocations.OnmsMonitoringLocation;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration.AssetTagKey;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration.MetaTagKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.collect.Maps;\n+\n+public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<String, String>> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MetaTagDataLoader.class);\n+\n+    private final NodeDao nodeDao;\n+    private final SessionUtils sessionUtils;\n+    private MetaTagConfiguration config;\n+\n+    @Inject\n+    public MetaTagDataLoader(final NodeDao nodeDao, final SessionUtils sessionUtils) {\n+        this.nodeDao = nodeDao;\n+        this.sessionUtils = sessionUtils;\n+        setConfig(new MetaTagConfiguration(Maps.fromProperties(System.getProperties())));\n+    }\n+\n+    public void setConfig(final MetaTagConfiguration config) {\n+        this.config = config;\n+    }\n+\n+    public Map<String, String> load(final CollectionResource resource) {\n+        return sessionUtils.withReadOnlyTransaction(() -> {\n+            final Map<String, String> tags = new HashMap<>();\n+            addTag(tags, MetaTagKey.resourceLabel, () -> Optional.ofNullable(resource.getInterfaceLabel()).orElse(null));\n+\n+            if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_NODE)) {\n+                String nodeCriteria = getNodeCriteriaFromResource(resource);\n+                mapNode(tags, nodeCriteria);\n+            } else if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_IF)) {\n+\n+                String nodeCriteria = getNodeCriteriaFromResource(resource);\n+                if (!Strings.isNullOrEmpty(nodeCriteria)) {\n+                    mapNode(tags, nodeCriteria);\n+                }\n+            } else if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_LATENCY)) {\n+                mapResponseTimeResource(resource, tags);\n+            } else {\n+                String nodeCriteria = getNodeCriteriaFromResource(resource);\n+                if (!Strings.isNullOrEmpty(nodeCriteria)) {\n+                    mapNode(tags, nodeCriteria);\n+                }\n+            }\n+\n+            return tags;\n+        });\n+    }\n+\n+    private void mapNode(final Map<String, String> tags, final String nodeCriteria) {\n+        Optional<OnmsNode> node = getNode(nodeCriteria);\n+        addTag(tags, MetaTagKey.nodeCriteria, () -> nodeCriteria);\n+        addTag(tags, MetaTagKey.nodeLabel, () -> node.map(OnmsNode::getLabel).orElse(null));\n+        addTag(tags, MetaTagKey.location, () -> node.map(OnmsNode::getLocation).map(OnmsMonitoringLocation::getLocationName).orElse(null));\n+        addTag(tags, MetaTagKey.sysObjectID, () -> node.map(OnmsNode::getSysObjectId).orElse(null));\n+        addTag(tags, MetaTagKey.foreignSource, () -> node.map(OnmsNode::getForeignSource).orElse(null));\n+        addTag(tags, MetaTagKey.foreignId, () -> node.map(OnmsNode::getForeignId).orElse(null));\n+        // TODO Patrick: map rest of attributes\n+\n+        // categories\n+        if(node.isPresent()) {\n+            AtomicInteger n = new AtomicInteger(1);\n+            // Tags are only unique by key and value\n+            node.get().getCategories().stream()\n+                    .map(OnmsCategory::getName)\n+                    .filter(config::isCategoryEnabled)\n+                    // TODO: Patrick: is this acceptable? Or would we rather create Tags instead of a HashMap?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDc2NQ=="}, "originalCommit": {"oid": "29ed20e23d9c09b9c3ee50355e21c02e23fd40bd"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA3Njk4Ng==", "bodyText": "\ud83d\udc4d fixed", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r430076986", "createdAt": "2020-05-25T21:19:54Z", "author": {"login": "patrick-schweizer"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2006-2015 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2015 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.timeseries.integration.persistence;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+\n+import javax.inject.Inject;\n+\n+import org.opennms.netmgt.collection.api.CollectionResource;\n+import org.opennms.netmgt.dao.api.NodeDao;\n+import org.opennms.netmgt.dao.api.SessionUtils;\n+import org.opennms.netmgt.model.OnmsAssetRecord;\n+import org.opennms.netmgt.model.OnmsCategory;\n+import org.opennms.netmgt.model.OnmsNode;\n+import org.opennms.netmgt.model.ResourceTypeUtils;\n+import org.opennms.netmgt.model.monitoringLocations.OnmsMonitoringLocation;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration.AssetTagKey;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration.MetaTagKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.collect.Maps;\n+\n+public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<String, String>> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MetaTagDataLoader.class);\n+\n+    private final NodeDao nodeDao;\n+    private final SessionUtils sessionUtils;\n+    private MetaTagConfiguration config;\n+\n+    @Inject\n+    public MetaTagDataLoader(final NodeDao nodeDao, final SessionUtils sessionUtils) {\n+        this.nodeDao = nodeDao;\n+        this.sessionUtils = sessionUtils;\n+        setConfig(new MetaTagConfiguration(Maps.fromProperties(System.getProperties())));\n+    }\n+\n+    public void setConfig(final MetaTagConfiguration config) {\n+        this.config = config;\n+    }\n+\n+    public Map<String, String> load(final CollectionResource resource) {\n+        return sessionUtils.withReadOnlyTransaction(() -> {\n+            final Map<String, String> tags = new HashMap<>();\n+            addTag(tags, MetaTagKey.resourceLabel, () -> Optional.ofNullable(resource.getInterfaceLabel()).orElse(null));\n+\n+            if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_NODE)) {\n+                String nodeCriteria = getNodeCriteriaFromResource(resource);\n+                mapNode(tags, nodeCriteria);\n+            } else if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_IF)) {\n+\n+                String nodeCriteria = getNodeCriteriaFromResource(resource);\n+                if (!Strings.isNullOrEmpty(nodeCriteria)) {\n+                    mapNode(tags, nodeCriteria);\n+                }\n+            } else if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_LATENCY)) {\n+                mapResponseTimeResource(resource, tags);\n+            } else {\n+                String nodeCriteria = getNodeCriteriaFromResource(resource);\n+                if (!Strings.isNullOrEmpty(nodeCriteria)) {\n+                    mapNode(tags, nodeCriteria);\n+                }\n+            }\n+\n+            return tags;\n+        });\n+    }\n+\n+    private void mapNode(final Map<String, String> tags, final String nodeCriteria) {\n+        Optional<OnmsNode> node = getNode(nodeCriteria);\n+        addTag(tags, MetaTagKey.nodeCriteria, () -> nodeCriteria);\n+        addTag(tags, MetaTagKey.nodeLabel, () -> node.map(OnmsNode::getLabel).orElse(null));\n+        addTag(tags, MetaTagKey.location, () -> node.map(OnmsNode::getLocation).map(OnmsMonitoringLocation::getLocationName).orElse(null));\n+        addTag(tags, MetaTagKey.sysObjectID, () -> node.map(OnmsNode::getSysObjectId).orElse(null));\n+        addTag(tags, MetaTagKey.foreignSource, () -> node.map(OnmsNode::getForeignSource).orElse(null));\n+        addTag(tags, MetaTagKey.foreignId, () -> node.map(OnmsNode::getForeignId).orElse(null));\n+        // TODO Patrick: map rest of attributes\n+\n+        // categories\n+        if(node.isPresent()) {\n+            AtomicInteger n = new AtomicInteger(1);\n+            // Tags are only unique by key and value\n+            node.get().getCategories().stream()\n+                    .map(OnmsCategory::getName)\n+                    .filter(config::isCategoryEnabled)\n+                    // TODO: Patrick: is this acceptable? Or would we rather create Tags instead of a HashMap?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDc2NQ=="}, "originalCommit": {"oid": "29ed20e23d9c09b9c3ee50355e21c02e23fd40bd"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjA3NTk5OnYy", "diffSide": "RIGHT", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxNjo1MDo0NFrOGZwDNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDoxNzozOVrOGaCmXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDgzOA==", "bodyText": "@j-white what do you have here in mind? Do we have already something similar?", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r429654838", "createdAt": "2020-05-24T16:50:44Z", "author": {"login": "patrick-schweizer"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+package org.opennms.netmgt.timeseries.integration;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/** Defines which additional meta tags should be exposed to the timeseries integration plugin. */\n+public class MetaTagConfiguration {\n+\n+    final static String PREFIX = \"org.opennms.timeseries.tin.metatags\";\n+\n+    /** properties defined in opennms.properties */\n+    public enum PropertyKey {\n+        assets,\n+        tags,\n+        categories\n+    }\n+\n+    public enum MetaTagKey {\n+        nodeLabel,\n+        location,\n+        sysObjectID,\n+        foreignSource,\n+        foreignId,\n+        nodeCriteria,\n+        ipAddress, // for response time resources\n+        service, // for response time resources\n+        ifDescr, // for interface resources\n+        ifAlias, // for interface resources\n+        resourceLabel\n+    }\n+\n+    // TODO: Patrick: do we want to merge MetaTagKey & AssetTagKey?\n+    public enum AssetTagKey {\n+        admin, additionalHardware, assetNumber,\n+    }\n+\n+    private final Set<MetaTagKey> enabledMetaTags;\n+    private final Set<String> enabledCategories;\n+    private final Set<AssetTagKey> enabledAssets;\n+\n+    public MetaTagConfiguration(final Map<String, String> properties) {\n+\n+        final Set<String> configuredAssets = getAsList(getProperty(properties, PropertyKey.assets));\n+        enabledAssets = Arrays\n+                .stream(AssetTagKey.values())\n+                .filter(key -> configuredAssets.contains(key.name()))\n+                .collect(Collectors.toSet());\n+\n+        enabledCategories = getAsList(getProperty(properties, PropertyKey.categories));\n+\n+        final Set<String> configuredTags = getAsList(getProperty(properties, PropertyKey.tags));\n+        enabledMetaTags = Arrays\n+                .stream(MetaTagKey.values())\n+                .filter(key -> configuredTags.contains(key.name()))\n+                .collect(Collectors.toSet());\n+\n+        // TODO: Patrick Meta-Data DSL expressions to build tags", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ed20e23d9c09b9c3ee50355e21c02e23fd40bd"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1ODc0OA==", "bodyText": "We can evaluate meta-data DSL expressions similarly to what is done here: https://github.com/OpenNMS/opennms/blob/opennms-26.1.0-1/core/ipc/rpc/shell-commands/src/main/java/org/opennms/core/rpc/commands/MetaCommand.java#L95", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r429958748", "createdAt": "2020-05-25T14:17:39Z", "author": {"login": "j-white"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+package org.opennms.netmgt.timeseries.integration;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/** Defines which additional meta tags should be exposed to the timeseries integration plugin. */\n+public class MetaTagConfiguration {\n+\n+    final static String PREFIX = \"org.opennms.timeseries.tin.metatags\";\n+\n+    /** properties defined in opennms.properties */\n+    public enum PropertyKey {\n+        assets,\n+        tags,\n+        categories\n+    }\n+\n+    public enum MetaTagKey {\n+        nodeLabel,\n+        location,\n+        sysObjectID,\n+        foreignSource,\n+        foreignId,\n+        nodeCriteria,\n+        ipAddress, // for response time resources\n+        service, // for response time resources\n+        ifDescr, // for interface resources\n+        ifAlias, // for interface resources\n+        resourceLabel\n+    }\n+\n+    // TODO: Patrick: do we want to merge MetaTagKey & AssetTagKey?\n+    public enum AssetTagKey {\n+        admin, additionalHardware, assetNumber,\n+    }\n+\n+    private final Set<MetaTagKey> enabledMetaTags;\n+    private final Set<String> enabledCategories;\n+    private final Set<AssetTagKey> enabledAssets;\n+\n+    public MetaTagConfiguration(final Map<String, String> properties) {\n+\n+        final Set<String> configuredAssets = getAsList(getProperty(properties, PropertyKey.assets));\n+        enabledAssets = Arrays\n+                .stream(AssetTagKey.values())\n+                .filter(key -> configuredAssets.contains(key.name()))\n+                .collect(Collectors.toSet());\n+\n+        enabledCategories = getAsList(getProperty(properties, PropertyKey.categories));\n+\n+        final Set<String> configuredTags = getAsList(getProperty(properties, PropertyKey.tags));\n+        enabledMetaTags = Arrays\n+                .stream(MetaTagKey.values())\n+                .filter(key -> configuredTags.contains(key.name()))\n+                .collect(Collectors.toSet());\n+\n+        // TODO: Patrick Meta-Data DSL expressions to build tags", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDgzOA=="}, "originalCommit": {"oid": "29ed20e23d9c09b9c3ee50355e21c02e23fd40bd"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjA3NjM4OnYy", "diffSide": "RIGHT", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxNjo1MTo0M1rOGZwDbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDoyNjo0MVrOGaC3fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDg5Mw==", "bodyText": "@j-white how often do we expect the Resource Meta Data to change / what should our eviction policy be?", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r429654893", "createdAt": "2020-05-24T16:51:43Z", "author": {"login": "patrick-schweizer"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java", "diffHunk": "@@ -47,13 +52,19 @@\n public class TimeseriesPersisterFactory implements PersisterFactory {\n \n     private final TimeseriesWriter timeseriesWriter;\n-\n     private final Context context;\n+    private final MetaTagDataLoader metaTagDataLoader;\n+    private final Map<ResourcePath, Map<String, String>> metaCache;\n \n     @Inject\n-    public TimeseriesPersisterFactory(Context context, TimeseriesWriter timeseriesWriter) {\n+    public TimeseriesPersisterFactory(final Context context, final TimeseriesWriter timeseriesWriter, final MetaTagDataLoader metaTagDataLoader) {\n         this.context = Objects.requireNonNull(context);\n         this.timeseriesWriter = timeseriesWriter;\n+        this.metaTagDataLoader = metaTagDataLoader;\n+        Cache<ResourcePath, Map<String, String>> cache = CacheBuilder // TODO Patrick: define with Jesse the eviction policy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ed20e23d9c09b9c3ee50355e21c02e23fd40bd"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2MzEzMw==", "bodyText": "Let's use expireAfterWrite with a default of 5m. (And make it configurable.)", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r429963133", "createdAt": "2020-05-25T14:26:41Z", "author": {"login": "j-white"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java", "diffHunk": "@@ -47,13 +52,19 @@\n public class TimeseriesPersisterFactory implements PersisterFactory {\n \n     private final TimeseriesWriter timeseriesWriter;\n-\n     private final Context context;\n+    private final MetaTagDataLoader metaTagDataLoader;\n+    private final Map<ResourcePath, Map<String, String>> metaCache;\n \n     @Inject\n-    public TimeseriesPersisterFactory(Context context, TimeseriesWriter timeseriesWriter) {\n+    public TimeseriesPersisterFactory(final Context context, final TimeseriesWriter timeseriesWriter, final MetaTagDataLoader metaTagDataLoader) {\n         this.context = Objects.requireNonNull(context);\n         this.timeseriesWriter = timeseriesWriter;\n+        this.metaTagDataLoader = metaTagDataLoader;\n+        Cache<ResourcePath, Map<String, String>> cache = CacheBuilder // TODO Patrick: define with Jesse the eviction policy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDg5Mw=="}, "originalCommit": {"oid": "29ed20e23d9c09b9c3ee50355e21c02e23fd40bd"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjE2NjkzOnYy", "diffSide": "RIGHT", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxOToyNTozNlrOGZwy9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDoxOTowNVrOGaCpOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NzA2MQ==", "bodyText": "@j-white ?", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r429667061", "createdAt": "2020-05-24T19:25:36Z", "author": {"login": "patrick-schweizer"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2006-2015 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2015 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.timeseries.integration.persistence;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.inject.Inject;\n+\n+import org.opennms.netmgt.collection.api.CollectionResource;\n+import org.opennms.netmgt.dao.api.NodeDao;\n+import org.opennms.netmgt.dao.api.SessionUtils;\n+import org.opennms.netmgt.model.OnmsAssetRecord;\n+import org.opennms.netmgt.model.OnmsCategory;\n+import org.opennms.netmgt.model.OnmsNode;\n+import org.opennms.netmgt.model.ResourceTypeUtils;\n+import org.opennms.netmgt.model.monitoringLocations.OnmsMonitoringLocation;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration.AssetTagKey;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration.MetaTagKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.collect.Maps;\n+\n+public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<String, String>> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MetaTagDataLoader.class);\n+\n+    private final NodeDao nodeDao;\n+    private final SessionUtils sessionUtils;\n+    private MetaTagConfiguration config;\n+\n+    @Inject\n+    public MetaTagDataLoader(final NodeDao nodeDao, final SessionUtils sessionUtils) {\n+        this.nodeDao = nodeDao;\n+        this.sessionUtils = sessionUtils;\n+        setConfig(new MetaTagConfiguration(Maps.fromProperties(System.getProperties())));\n+    }\n+\n+    public void setConfig(final MetaTagConfiguration config) {\n+        this.config = config;\n+    }\n+\n+    public Map<String, String> load(final CollectionResource resource) {\n+        return sessionUtils.withReadOnlyTransaction(() -> {\n+            final Map<String, String> tags = new HashMap<>();\n+            addTag(tags, MetaTagKey.resourceLabel, Optional.ofNullable(resource.getInterfaceLabel()).orElse(null));\n+\n+            if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_NODE)) {\n+                String nodeCriteria = getNodeCriteriaFromResource(resource);\n+                mapNode(tags, nodeCriteria);\n+            } else if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_IF)) {\n+                String nodeCriteria = getNodeCriteriaFromResource(resource);\n+                if (!Strings.isNullOrEmpty(nodeCriteria)) {\n+                    mapNode(tags, nodeCriteria);\n+                }\n+                addTag(tags, MetaTagKey.ifDescr, resource.getInterfaceLabel()); // TODO: Patrick: is that correct?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5449bfbe4b996de47c6cc5ebb064ad00aeb9775"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1OTQ4MA==", "bodyText": "We'll need to extract the ifIndex from the resource to be able to get everything we need.", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r429959480", "createdAt": "2020-05-25T14:19:05Z", "author": {"login": "j-white"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2006-2015 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2015 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.timeseries.integration.persistence;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.inject.Inject;\n+\n+import org.opennms.netmgt.collection.api.CollectionResource;\n+import org.opennms.netmgt.dao.api.NodeDao;\n+import org.opennms.netmgt.dao.api.SessionUtils;\n+import org.opennms.netmgt.model.OnmsAssetRecord;\n+import org.opennms.netmgt.model.OnmsCategory;\n+import org.opennms.netmgt.model.OnmsNode;\n+import org.opennms.netmgt.model.ResourceTypeUtils;\n+import org.opennms.netmgt.model.monitoringLocations.OnmsMonitoringLocation;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration.AssetTagKey;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration.MetaTagKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.collect.Maps;\n+\n+public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<String, String>> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MetaTagDataLoader.class);\n+\n+    private final NodeDao nodeDao;\n+    private final SessionUtils sessionUtils;\n+    private MetaTagConfiguration config;\n+\n+    @Inject\n+    public MetaTagDataLoader(final NodeDao nodeDao, final SessionUtils sessionUtils) {\n+        this.nodeDao = nodeDao;\n+        this.sessionUtils = sessionUtils;\n+        setConfig(new MetaTagConfiguration(Maps.fromProperties(System.getProperties())));\n+    }\n+\n+    public void setConfig(final MetaTagConfiguration config) {\n+        this.config = config;\n+    }\n+\n+    public Map<String, String> load(final CollectionResource resource) {\n+        return sessionUtils.withReadOnlyTransaction(() -> {\n+            final Map<String, String> tags = new HashMap<>();\n+            addTag(tags, MetaTagKey.resourceLabel, Optional.ofNullable(resource.getInterfaceLabel()).orElse(null));\n+\n+            if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_NODE)) {\n+                String nodeCriteria = getNodeCriteriaFromResource(resource);\n+                mapNode(tags, nodeCriteria);\n+            } else if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_IF)) {\n+                String nodeCriteria = getNodeCriteriaFromResource(resource);\n+                if (!Strings.isNullOrEmpty(nodeCriteria)) {\n+                    mapNode(tags, nodeCriteria);\n+                }\n+                addTag(tags, MetaTagKey.ifDescr, resource.getInterfaceLabel()); // TODO: Patrick: is that correct?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NzA2MQ=="}, "originalCommit": {"oid": "a5449bfbe4b996de47c6cc5ebb064ad00aeb9775"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjE2NzAzOnYy", "diffSide": "RIGHT", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxOToyNTo0NVrOGZwzAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxOToyNTo0NVrOGZwzAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NzA3NA==", "bodyText": "@j-white", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r429667074", "createdAt": "2020-05-24T19:25:45Z", "author": {"login": "patrick-schweizer"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2006-2015 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2015 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.timeseries.integration.persistence;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.inject.Inject;\n+\n+import org.opennms.netmgt.collection.api.CollectionResource;\n+import org.opennms.netmgt.dao.api.NodeDao;\n+import org.opennms.netmgt.dao.api.SessionUtils;\n+import org.opennms.netmgt.model.OnmsAssetRecord;\n+import org.opennms.netmgt.model.OnmsCategory;\n+import org.opennms.netmgt.model.OnmsNode;\n+import org.opennms.netmgt.model.ResourceTypeUtils;\n+import org.opennms.netmgt.model.monitoringLocations.OnmsMonitoringLocation;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration.AssetTagKey;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration.MetaTagKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.collect.Maps;\n+\n+public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<String, String>> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MetaTagDataLoader.class);\n+\n+    private final NodeDao nodeDao;\n+    private final SessionUtils sessionUtils;\n+    private MetaTagConfiguration config;\n+\n+    @Inject\n+    public MetaTagDataLoader(final NodeDao nodeDao, final SessionUtils sessionUtils) {\n+        this.nodeDao = nodeDao;\n+        this.sessionUtils = sessionUtils;\n+        setConfig(new MetaTagConfiguration(Maps.fromProperties(System.getProperties())));\n+    }\n+\n+    public void setConfig(final MetaTagConfiguration config) {\n+        this.config = config;\n+    }\n+\n+    public Map<String, String> load(final CollectionResource resource) {\n+        return sessionUtils.withReadOnlyTransaction(() -> {\n+            final Map<String, String> tags = new HashMap<>();\n+            addTag(tags, MetaTagKey.resourceLabel, Optional.ofNullable(resource.getInterfaceLabel()).orElse(null));\n+\n+            if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_NODE)) {\n+                String nodeCriteria = getNodeCriteriaFromResource(resource);\n+                mapNode(tags, nodeCriteria);\n+            } else if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_IF)) {\n+                String nodeCriteria = getNodeCriteriaFromResource(resource);\n+                if (!Strings.isNullOrEmpty(nodeCriteria)) {\n+                    mapNode(tags, nodeCriteria);\n+                }\n+                addTag(tags, MetaTagKey.ifDescr, resource.getInterfaceLabel()); // TODO: Patrick: is that correct?\n+                // addTag(tags, MetaTagKey.ifAlias, ); // TODO: Patrick: from where do we get that attribute?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5449bfbe4b996de47c6cc5ebb064ad00aeb9775"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODA0MTMwOnYy", "diffSide": "RIGHT", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDoxNToyMlrOGaCiJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDoxNToyMlrOGaCiJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1NzY3MQ==", "bodyText": "I think we should move this to the Meta-Data DSL instead of defining it here.\nWe could add these to a new \"asset\" context and make them available in expressions like ${asset:operatingSystem}.", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r429957671", "createdAt": "2020-05-25T14:15:22Z", "author": {"login": "j-white"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+package org.opennms.netmgt.timeseries.integration;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/** Defines which additional meta tags should be exposed to the timeseries integration plugin. */\n+public class MetaTagConfiguration {\n+\n+    final static String PREFIX = \"org.opennms.timeseries.tin.metatags\";\n+\n+    /** properties defined in opennms.properties */\n+    public enum PropertyKey {\n+        assets,\n+        tags,\n+        categories\n+    }\n+\n+    public enum MetaTagKey {\n+        nodeLabel,\n+        location,\n+        sysObjectID,\n+        foreignSource,\n+        foreignId,\n+        nodeCriteria,\n+        ipAddress, // for response time resources\n+        service, // for response time resources\n+        ifDescr, // for interface resources\n+        ifAlias, // for interface resources\n+        resourceLabel\n+    }\n+\n+    // TODO: Patrick: do we want to merge MetaTagKey & AssetTagKey?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5449bfbe4b996de47c6cc5ebb064ad00aeb9775"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzAxMjkwOnYy", "diffSide": "RIGHT", "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOTo1MzoxM1rOGba4Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDo0ODo0MFrOGbckgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNTEwMg==", "bodyText": "I would strongly advocate to put this into the \"asset\" context.\nI would like to see the assets stored as meta-data itself. By putting it in its own context we can avoid a rename later on.\nAnd we should update to docs for these additional keys.", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r431405102", "createdAt": "2020-05-27T19:53:13Z", "author": {"login": "fooker"}, "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -87,11 +89,73 @@ public Scope getScopeForNode(final Integer nodeId) {\n                             .map(\"node\", \"sys-location\", (n) -> Optional.ofNullable(n.getSysLocation()))\n                             .map(\"node\", \"sys-contact\", (n) -> Optional.ofNullable(n.getSysContact()))\n                             .map(\"node\", \"sys-description\", (n) -> Optional.ofNullable(n.getSysDescription()))\n+                            .map(\"node\", \"sys-objectid\", (n) -> Optional.ofNullable(n.getSysObjectId()))\n                             .map(\"node\", \"location\", (n) -> Optional.ofNullable(n.getLocation().getLocationName()))\n                             .map(\"node\", \"area\", (n) -> Optional.ofNullable(n.getLocation().getMonitoringArea()))\n-            );\n+                            .map(\"node\", \"category\" , (n) -> Optional.ofNullable(node.getAssetRecord()).map(OnmsAssetRecord::getCategory))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87c3163bbd5405f2f2fe297065420f5631058e98"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwODg2OQ==", "bodyText": "I would strongly advocate to put this into the \"asset\" context.\nSure, I have no strong opinion on that. You propose to create a different scope \"asset\"?\n\n\nAnd we should update to docs for these additional keys.\n\ud83d\udc4d will do that once we have settled on all attributes. There still might be a few missing.", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r431408869", "createdAt": "2020-05-27T20:00:42Z", "author": {"login": "patrick-schweizer"}, "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -87,11 +89,73 @@ public Scope getScopeForNode(final Integer nodeId) {\n                             .map(\"node\", \"sys-location\", (n) -> Optional.ofNullable(n.getSysLocation()))\n                             .map(\"node\", \"sys-contact\", (n) -> Optional.ofNullable(n.getSysContact()))\n                             .map(\"node\", \"sys-description\", (n) -> Optional.ofNullable(n.getSysDescription()))\n+                            .map(\"node\", \"sys-objectid\", (n) -> Optional.ofNullable(n.getSysObjectId()))\n                             .map(\"node\", \"location\", (n) -> Optional.ofNullable(n.getLocation().getLocationName()))\n                             .map(\"node\", \"area\", (n) -> Optional.ofNullable(n.getLocation().getMonitoringArea()))\n-            );\n+                            .map(\"node\", \"category\" , (n) -> Optional.ofNullable(node.getAssetRecord()).map(OnmsAssetRecord::getCategory))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNTEwMg=="}, "originalCommit": {"oid": "87c3163bbd5405f2f2fe297065420f5631058e98"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzMjgzNA==", "bodyText": "@fooker is that how you were envisioning the asset scope?", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r431432834", "createdAt": "2020-05-27T20:48:40Z", "author": {"login": "patrick-schweizer"}, "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -87,11 +89,73 @@ public Scope getScopeForNode(final Integer nodeId) {\n                             .map(\"node\", \"sys-location\", (n) -> Optional.ofNullable(n.getSysLocation()))\n                             .map(\"node\", \"sys-contact\", (n) -> Optional.ofNullable(n.getSysContact()))\n                             .map(\"node\", \"sys-description\", (n) -> Optional.ofNullable(n.getSysDescription()))\n+                            .map(\"node\", \"sys-objectid\", (n) -> Optional.ofNullable(n.getSysObjectId()))\n                             .map(\"node\", \"location\", (n) -> Optional.ofNullable(n.getLocation().getLocationName()))\n                             .map(\"node\", \"area\", (n) -> Optional.ofNullable(n.getLocation().getMonitoringArea()))\n-            );\n+                            .map(\"node\", \"category\" , (n) -> Optional.ofNullable(node.getAssetRecord()).map(OnmsAssetRecord::getCategory))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNTEwMg=="}, "originalCommit": {"oid": "87c3163bbd5405f2f2fe297065420f5631058e98"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDY1NzEzOnYy", "diffSide": "RIGHT", "path": "opennms-doc/guide-admin/src/asciidoc/text/meta-data.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0NDoyNFrOGcmVTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0NDoyNFrOGcmVTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MTM1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | `node:sys-objectid`    | The system id of the node\n          \n          \n            \n            | `node:sys-object-id`    | The system id of the node", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r432641357", "createdAt": "2020-05-29T17:44:24Z", "author": {"login": "j-white"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/meta-data.adoc", "diffHunk": "@@ -29,12 +29,85 @@ The following keys are available under this context:\n | `node:os`              | The node's operating system\n | `node:sys-name`        | The system name of the node\n | `node:sys-location`    | The system location of the node\n+| `node:sys-objectid`    | The system id of the node", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b22e4d3e9e136fffedbb546d13e67d4ab4e3bfa3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDY1OTIzOnYy", "diffSide": "RIGHT", "path": "opennms-doc/guide-admin/src/asciidoc/text/operation/timeseries/configuration.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0NDo1OFrOGcmWeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0NDo1OFrOGcmWeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MTY1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `org.opennms.timeseries.tin.metatags.tag.sysObjectID=${asset:sys-objectid}`\n          \n          \n            \n            `org.opennms.timeseries.tin.metatags.tag.sysObjectID=${node:sys-object-id}`", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r432641656", "createdAt": "2020-05-29T17:44:58Z", "author": {"login": "j-white"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/operation/timeseries/configuration.adoc", "diffHunk": "@@ -78,3 +78,30 @@ If you are collecting data from a large number of resources, you should increase\n The samples gathered by the collectors are temporarily stored in a ring buffer before they are persisted to the _Timeseries Integration Layer_.\n The value of the `ring_buffer_size` should be increased if you expect large peaks of collectors returning at once or latency in persisting these.\n However, note that the memory used by the ring buffer is reserved, and larger values may require an increased heap size.\n+\n+===== Expose additional tags\n+Metrics that are stored via the timeseries plugin contain the minimal set of tags for _{opennms-product-name}_ to work.\n+This might not be sufficient if the data is used outside of _{opennms-product-name}_ as well.\n+Therefor additional meta tags be configured via `${OPENNMS_HOME}/etc/opennms.properties`.\n+\n+The configuration of the tags has the following form:\n+`prefix.tagKey=${query expression}`\n+\n+* The prefix is: `org.opennms.timeseries.tin.metatags.tag`\n+* The tagKey can by an arbitrary string as long as it doesn't break the java property file https://en.wikipedia.org/wiki/.properties[syntax].\n+* The query expression allows to query the value. Hereby we can make use of the link:#ga-meta-data-dsl[Meta-Data-DSL]\n+\n+Examples:\n+`org.opennms.timeseries.tin.metatags.tag.nodelabel=${node:label}`\n+`org.opennms.timeseries.tin.metatags.tag.sysObjectID=${asset:sys-objectid}`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b22e4d3e9e136fffedbb546d13e67d4ab4e3bfa3"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDY2MDE0OnYy", "diffSide": "RIGHT", "path": "opennms-doc/guide-admin/src/asciidoc/text/operation/timeseries/configuration.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0NToxNlrOGcmXEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0NToxNlrOGcmXEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MTgxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Therefor additional meta tags be configured via `${OPENNMS_HOME}/etc/opennms.properties`.\n          \n          \n            \n            Therefore additional meta tags be configured via `${OPENNMS_HOME}/etc/opennms.properties`.", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r432641811", "createdAt": "2020-05-29T17:45:16Z", "author": {"login": "j-white"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/operation/timeseries/configuration.adoc", "diffHunk": "@@ -78,3 +78,30 @@ If you are collecting data from a large number of resources, you should increase\n The samples gathered by the collectors are temporarily stored in a ring buffer before they are persisted to the _Timeseries Integration Layer_.\n The value of the `ring_buffer_size` should be increased if you expect large peaks of collectors returning at once or latency in persisting these.\n However, note that the memory used by the ring buffer is reserved, and larger values may require an increased heap size.\n+\n+===== Expose additional tags\n+Metrics that are stored via the timeseries plugin contain the minimal set of tags for _{opennms-product-name}_ to work.\n+This might not be sufficient if the data is used outside of _{opennms-product-name}_ as well.\n+Therefor additional meta tags be configured via `${OPENNMS_HOME}/etc/opennms.properties`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b22e4d3e9e136fffedbb546d13e67d4ab4e3bfa3"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDY2MzI1OnYy", "diffSide": "RIGHT", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0NjoxN1rOGcmZGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDo1ODozN1rOGcr3jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MjMzMA==", "bodyText": "TODO", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r432642330", "createdAt": "2020-05-29T17:46:17Z", "author": {"login": "j-white"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java", "diffHunk": "@@ -47,13 +53,20 @@\n public class TimeseriesPersisterFactory implements PersisterFactory {\n \n     private final TimeseriesWriter timeseriesWriter;\n-\n     private final Context context;\n+    private final MetaTagDataLoader metaTagDataLoader;\n+    private final Map<ResourcePath, Map<String, String>> metaCache;\n \n     @Inject\n-    public TimeseriesPersisterFactory(Context context, TimeseriesWriter timeseriesWriter) {\n+    public TimeseriesPersisterFactory(final Context context, final TimeseriesWriter timeseriesWriter, final MetaTagDataLoader metaTagDataLoader) {\n         this.context = Objects.requireNonNull(context);\n         this.timeseriesWriter = timeseriesWriter;\n+        this.metaTagDataLoader = metaTagDataLoader;\n+        Cache<ResourcePath, Map<String, String>> cache = CacheBuilder\n+                .newBuilder()\n+                .expireAfterWrite(5, TimeUnit.MINUTES) // TODO Patrick: make configurable - can use CacheBuilder.from(cacheConfig).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b22e4d3e9e136fffedbb546d13e67d4ab4e3bfa3"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczMjA0Nw==", "bodyText": "fixed", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r432732047", "createdAt": "2020-05-29T20:58:37Z", "author": {"login": "patrick-schweizer"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java", "diffHunk": "@@ -47,13 +53,20 @@\n public class TimeseriesPersisterFactory implements PersisterFactory {\n \n     private final TimeseriesWriter timeseriesWriter;\n-\n     private final Context context;\n+    private final MetaTagDataLoader metaTagDataLoader;\n+    private final Map<ResourcePath, Map<String, String>> metaCache;\n \n     @Inject\n-    public TimeseriesPersisterFactory(Context context, TimeseriesWriter timeseriesWriter) {\n+    public TimeseriesPersisterFactory(final Context context, final TimeseriesWriter timeseriesWriter, final MetaTagDataLoader metaTagDataLoader) {\n         this.context = Objects.requireNonNull(context);\n         this.timeseriesWriter = timeseriesWriter;\n+        this.metaTagDataLoader = metaTagDataLoader;\n+        Cache<ResourcePath, Map<String, String>> cache = CacheBuilder\n+                .newBuilder()\n+                .expireAfterWrite(5, TimeUnit.MINUTES) // TODO Patrick: make configurable - can use CacheBuilder.from(cacheConfig).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MjMzMA=="}, "originalCommit": {"oid": "b22e4d3e9e136fffedbb546d13e67d4ab4e3bfa3"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDY3MTExOnYy", "diffSide": "RIGHT", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0ODo1MlrOGcmeRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDowNDowMFrOGcqeaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MzY1Mg==", "bodyText": "Let's store this in the \"node\" context instead (and move it to the EntityScopeProvider).\nThe criteria should also be derived from the OnmsNode object and not the resource. (It's possible that the resource only references the node id, but an FS:FID is present on the node.)", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r432643652", "createdAt": "2020-05-29T17:48:52Z", "author": {"login": "j-white"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2006-2015 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2015 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.timeseries.integration.persistence;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.opennms.core.rpc.utils.mate.EmptyScope;\n+import org.opennms.core.rpc.utils.mate.EntityScopeProvider;\n+import org.opennms.core.rpc.utils.mate.FallbackScope;\n+import org.opennms.core.rpc.utils.mate.Interpolator;\n+import org.opennms.core.rpc.utils.mate.ObjectScope;\n+import org.opennms.core.rpc.utils.mate.Scope;\n+import org.opennms.netmgt.collection.api.CollectionResource;\n+import org.opennms.netmgt.dao.api.NodeDao;\n+import org.opennms.netmgt.dao.api.SessionUtils;\n+import org.opennms.netmgt.model.OnmsCategory;\n+import org.opennms.netmgt.model.OnmsNode;\n+import org.opennms.netmgt.model.ResourceTypeUtils;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.collect.Maps;\n+\n+public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<String, String>> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MetaTagDataLoader.class);\n+\n+    private final NodeDao nodeDao;\n+    private final SessionUtils sessionUtils;\n+    private final EntityScopeProvider entityScopeProvider;\n+    private MetaTagConfiguration config;\n+\n+    @Inject\n+    public MetaTagDataLoader(final NodeDao nodeDao, final SessionUtils sessionUtils, final EntityScopeProvider entityScopeProvider) {\n+        this.nodeDao = nodeDao;\n+        this.sessionUtils = sessionUtils;\n+        this.entityScopeProvider = entityScopeProvider;\n+        setConfig(new MetaTagConfiguration(Maps.fromProperties(System.getProperties())));\n+    }\n+\n+    public void setConfig(final MetaTagConfiguration config) {\n+        this.config = config;\n+    }\n+\n+    public Map<String, String> load(final CollectionResource resource) {\n+        return sessionUtils.withReadOnlyTransaction(() -> {\n+\n+            final Map<String, String> tags = new HashMap<>();\n+            List<Scope> scopes = new ArrayList<>();\n+\n+            // resource related scope\n+            scopes.add(getScopeForResource(resource));\n+\n+            // node related scopes\n+            String nodeCriteria = getNodeCriteriaFromResource(resource);\n+            Optional<OnmsNode> nodeOptional = getNode(nodeCriteria);\n+            if(nodeOptional.isPresent()) {\n+                OnmsNode node = nodeOptional.get();\n+                scopes.add(this.entityScopeProvider.getScopeForNode(node.getId()));\n+                scopes.add(this.entityScopeProvider.getScopeForAssets(node.getId()));\n+                if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_IF)) {\n+                    // We expect #getInstance to return the ifIndex for interface-level resources\n+                    try {\n+                        int ifIndex = Integer.parseInt(resource.getInstance());\n+                        scopes.add(this.entityScopeProvider.getScopeForInterfaceByIfIndex(node.getId(), ifIndex));\n+                    } catch(NumberFormatException nfe) {\n+                        // pass\n+                    }\n+                }\n+                // We cannot retrieve service meta-data - resource time resources contain the IP address and service name, but not the node\n+            }\n+\n+            // create tags for scopes\n+            Scope scope = new FallbackScope(scopes);\n+            Map<String, String> configuredMetaTags = this.config.getConfiguredMetaTags();\n+            for(Map.Entry<String, String> entry: configuredMetaTags.entrySet()) {\n+                final String value = Interpolator.interpolate(entry.getValue(), scope);\n+                // Ignore tags with empty values\n+                if (Strings.isNullOrEmpty(value)) {\n+                    continue;\n+                }\n+                tags.put(entry.getKey(), value);\n+            }\n+\n+            // create tags for categories\n+            nodeOptional.ifPresent(onmsNode -> mapCategories(tags, onmsNode));\n+            return tags;\n+        });\n+    }\n+\n+    private void mapCategories(final Map<String, String> tags, final OnmsNode node) {\n+        Objects.requireNonNull(node);\n+        if(config.isCategoriesEnabled()) {\n+            node.getCategories().stream()\n+                    .map(OnmsCategory::getName)\n+                    .forEach(catName -> tags.put(\"cat_\" + catName, catName));\n+        }\n+    }\n+\n+    public Scope getScopeForResource(final CollectionResource resource) {\n+        if (resource == null) {\n+            return EmptyScope.EMPTY;\n+        }\n+        return new ObjectScope<>(resource)\n+                .map(\"resource\", \"criteria\", (r) -> Optional.ofNullable(getNodeCriteriaFromResource(resource)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b22e4d3e9e136fffedbb546d13e67d4ab4e3bfa3"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcwOTIyNQ==", "bodyText": "done.", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r432709225", "createdAt": "2020-05-29T20:04:00Z", "author": {"login": "patrick-schweizer"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2006-2015 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2015 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.timeseries.integration.persistence;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.opennms.core.rpc.utils.mate.EmptyScope;\n+import org.opennms.core.rpc.utils.mate.EntityScopeProvider;\n+import org.opennms.core.rpc.utils.mate.FallbackScope;\n+import org.opennms.core.rpc.utils.mate.Interpolator;\n+import org.opennms.core.rpc.utils.mate.ObjectScope;\n+import org.opennms.core.rpc.utils.mate.Scope;\n+import org.opennms.netmgt.collection.api.CollectionResource;\n+import org.opennms.netmgt.dao.api.NodeDao;\n+import org.opennms.netmgt.dao.api.SessionUtils;\n+import org.opennms.netmgt.model.OnmsCategory;\n+import org.opennms.netmgt.model.OnmsNode;\n+import org.opennms.netmgt.model.ResourceTypeUtils;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.collect.Maps;\n+\n+public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<String, String>> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MetaTagDataLoader.class);\n+\n+    private final NodeDao nodeDao;\n+    private final SessionUtils sessionUtils;\n+    private final EntityScopeProvider entityScopeProvider;\n+    private MetaTagConfiguration config;\n+\n+    @Inject\n+    public MetaTagDataLoader(final NodeDao nodeDao, final SessionUtils sessionUtils, final EntityScopeProvider entityScopeProvider) {\n+        this.nodeDao = nodeDao;\n+        this.sessionUtils = sessionUtils;\n+        this.entityScopeProvider = entityScopeProvider;\n+        setConfig(new MetaTagConfiguration(Maps.fromProperties(System.getProperties())));\n+    }\n+\n+    public void setConfig(final MetaTagConfiguration config) {\n+        this.config = config;\n+    }\n+\n+    public Map<String, String> load(final CollectionResource resource) {\n+        return sessionUtils.withReadOnlyTransaction(() -> {\n+\n+            final Map<String, String> tags = new HashMap<>();\n+            List<Scope> scopes = new ArrayList<>();\n+\n+            // resource related scope\n+            scopes.add(getScopeForResource(resource));\n+\n+            // node related scopes\n+            String nodeCriteria = getNodeCriteriaFromResource(resource);\n+            Optional<OnmsNode> nodeOptional = getNode(nodeCriteria);\n+            if(nodeOptional.isPresent()) {\n+                OnmsNode node = nodeOptional.get();\n+                scopes.add(this.entityScopeProvider.getScopeForNode(node.getId()));\n+                scopes.add(this.entityScopeProvider.getScopeForAssets(node.getId()));\n+                if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_IF)) {\n+                    // We expect #getInstance to return the ifIndex for interface-level resources\n+                    try {\n+                        int ifIndex = Integer.parseInt(resource.getInstance());\n+                        scopes.add(this.entityScopeProvider.getScopeForInterfaceByIfIndex(node.getId(), ifIndex));\n+                    } catch(NumberFormatException nfe) {\n+                        // pass\n+                    }\n+                }\n+                // We cannot retrieve service meta-data - resource time resources contain the IP address and service name, but not the node\n+            }\n+\n+            // create tags for scopes\n+            Scope scope = new FallbackScope(scopes);\n+            Map<String, String> configuredMetaTags = this.config.getConfiguredMetaTags();\n+            for(Map.Entry<String, String> entry: configuredMetaTags.entrySet()) {\n+                final String value = Interpolator.interpolate(entry.getValue(), scope);\n+                // Ignore tags with empty values\n+                if (Strings.isNullOrEmpty(value)) {\n+                    continue;\n+                }\n+                tags.put(entry.getKey(), value);\n+            }\n+\n+            // create tags for categories\n+            nodeOptional.ifPresent(onmsNode -> mapCategories(tags, onmsNode));\n+            return tags;\n+        });\n+    }\n+\n+    private void mapCategories(final Map<String, String> tags, final OnmsNode node) {\n+        Objects.requireNonNull(node);\n+        if(config.isCategoriesEnabled()) {\n+            node.getCategories().stream()\n+                    .map(OnmsCategory::getName)\n+                    .forEach(catName -> tags.put(\"cat_\" + catName, catName));\n+        }\n+    }\n+\n+    public Scope getScopeForResource(final CollectionResource resource) {\n+        if (resource == null) {\n+            return EmptyScope.EMPTY;\n+        }\n+        return new ObjectScope<>(resource)\n+                .map(\"resource\", \"criteria\", (r) -> Optional.ofNullable(getNodeCriteriaFromResource(resource)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MzY1Mg=="}, "originalCommit": {"oid": "b22e4d3e9e136fffedbb546d13e67d4ab4e3bfa3"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDY3MzIzOnYy", "diffSide": "RIGHT", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0OTo0MFrOGcmftQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0OTo0MFrOGcmftQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0NDAyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOG.error(\"error while trying to match node from {}\", nodeCriteria);\n          \n          \n            \n                        LOG.error(\"Error while trying to load node for criteria: {}. No node will be returned.\", nodeCriteria, e);", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r432644021", "createdAt": "2020-05-29T17:49:40Z", "author": {"login": "j-white"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2006-2015 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2015 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.timeseries.integration.persistence;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.opennms.core.rpc.utils.mate.EmptyScope;\n+import org.opennms.core.rpc.utils.mate.EntityScopeProvider;\n+import org.opennms.core.rpc.utils.mate.FallbackScope;\n+import org.opennms.core.rpc.utils.mate.Interpolator;\n+import org.opennms.core.rpc.utils.mate.ObjectScope;\n+import org.opennms.core.rpc.utils.mate.Scope;\n+import org.opennms.netmgt.collection.api.CollectionResource;\n+import org.opennms.netmgt.dao.api.NodeDao;\n+import org.opennms.netmgt.dao.api.SessionUtils;\n+import org.opennms.netmgt.model.OnmsCategory;\n+import org.opennms.netmgt.model.OnmsNode;\n+import org.opennms.netmgt.model.ResourceTypeUtils;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.collect.Maps;\n+\n+public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<String, String>> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MetaTagDataLoader.class);\n+\n+    private final NodeDao nodeDao;\n+    private final SessionUtils sessionUtils;\n+    private final EntityScopeProvider entityScopeProvider;\n+    private MetaTagConfiguration config;\n+\n+    @Inject\n+    public MetaTagDataLoader(final NodeDao nodeDao, final SessionUtils sessionUtils, final EntityScopeProvider entityScopeProvider) {\n+        this.nodeDao = nodeDao;\n+        this.sessionUtils = sessionUtils;\n+        this.entityScopeProvider = entityScopeProvider;\n+        setConfig(new MetaTagConfiguration(Maps.fromProperties(System.getProperties())));\n+    }\n+\n+    public void setConfig(final MetaTagConfiguration config) {\n+        this.config = config;\n+    }\n+\n+    public Map<String, String> load(final CollectionResource resource) {\n+        return sessionUtils.withReadOnlyTransaction(() -> {\n+\n+            final Map<String, String> tags = new HashMap<>();\n+            List<Scope> scopes = new ArrayList<>();\n+\n+            // resource related scope\n+            scopes.add(getScopeForResource(resource));\n+\n+            // node related scopes\n+            String nodeCriteria = getNodeCriteriaFromResource(resource);\n+            Optional<OnmsNode> nodeOptional = getNode(nodeCriteria);\n+            if(nodeOptional.isPresent()) {\n+                OnmsNode node = nodeOptional.get();\n+                scopes.add(this.entityScopeProvider.getScopeForNode(node.getId()));\n+                scopes.add(this.entityScopeProvider.getScopeForAssets(node.getId()));\n+                if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_IF)) {\n+                    // We expect #getInstance to return the ifIndex for interface-level resources\n+                    try {\n+                        int ifIndex = Integer.parseInt(resource.getInstance());\n+                        scopes.add(this.entityScopeProvider.getScopeForInterfaceByIfIndex(node.getId(), ifIndex));\n+                    } catch(NumberFormatException nfe) {\n+                        // pass\n+                    }\n+                }\n+                // We cannot retrieve service meta-data - resource time resources contain the IP address and service name, but not the node\n+            }\n+\n+            // create tags for scopes\n+            Scope scope = new FallbackScope(scopes);\n+            Map<String, String> configuredMetaTags = this.config.getConfiguredMetaTags();\n+            for(Map.Entry<String, String> entry: configuredMetaTags.entrySet()) {\n+                final String value = Interpolator.interpolate(entry.getValue(), scope);\n+                // Ignore tags with empty values\n+                if (Strings.isNullOrEmpty(value)) {\n+                    continue;\n+                }\n+                tags.put(entry.getKey(), value);\n+            }\n+\n+            // create tags for categories\n+            nodeOptional.ifPresent(onmsNode -> mapCategories(tags, onmsNode));\n+            return tags;\n+        });\n+    }\n+\n+    private void mapCategories(final Map<String, String> tags, final OnmsNode node) {\n+        Objects.requireNonNull(node);\n+        if(config.isCategoriesEnabled()) {\n+            node.getCategories().stream()\n+                    .map(OnmsCategory::getName)\n+                    .forEach(catName -> tags.put(\"cat_\" + catName, catName));\n+        }\n+    }\n+\n+    public Scope getScopeForResource(final CollectionResource resource) {\n+        if (resource == null) {\n+            return EmptyScope.EMPTY;\n+        }\n+        return new ObjectScope<>(resource)\n+                .map(\"resource\", \"criteria\", (r) -> Optional.ofNullable(getNodeCriteriaFromResource(resource)))\n+                .map(\"resource\", \"label\", (r) -> Optional.ofNullable(r.getInterfaceLabel()));\n+    }\n+\n+    private Optional<OnmsNode> getNode(String nodeCriteria) {\n+        if (nodeCriteria == null || nodeCriteria.trim().isEmpty()) {\n+            return Optional.empty();\n+        }\n+        try {\n+            return Optional.ofNullable(nodeDao.get(nodeCriteria));\n+        } catch (Exception e) {\n+            LOG.error(\"error while trying to match node from {}\", nodeCriteria);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b22e4d3e9e136fffedbb546d13e67d4ab4e3bfa3"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTYyMjAyOnYy", "diffSide": "RIGHT", "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzoxMTozMlrOGeO3Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTo0NDo1MlrOGeh-6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM1Mzk0Mg==", "bodyText": "Makes sense. Can you do that for the other context names, too. And maybe move them to the interface?", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434353942", "createdAt": "2020-06-03T07:11:32Z", "author": {"login": "fooker"}, "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -51,12 +55,17 @@\n \n public class EntityScopeProviderImpl implements EntityScopeProvider {\n \n+    private static final String INTERFACE = \"interface\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455f6ad42b897d340361b525ba7d02a5c416d6a4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY2NzI0MQ==", "bodyText": "\ud83d\udc4d done", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434667241", "createdAt": "2020-06-03T15:44:52Z", "author": {"login": "patrick-schweizer"}, "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -51,12 +55,17 @@\n \n public class EntityScopeProviderImpl implements EntityScopeProvider {\n \n+    private static final String INTERFACE = \"interface\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM1Mzk0Mg=="}, "originalCommit": {"oid": "455f6ad42b897d340361b525ba7d02a5c416d6a4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTY0NDQ4OnYy", "diffSide": "RIGHT", "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzoxODo0OVrOGePFUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTo0ODo0MFrOGeiJIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM1NzU4Nw==", "bodyText": "You should use i.getIfAlias() here.", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434357587", "createdAt": "2020-06-03T07:18:49Z", "author": {"login": "fooker"}, "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -108,20 +207,56 @@ public Scope getScopeForInterface(final Integer nodeId, final String ipAddress)\n             }\n \n             return new FallbackScope(transform(ipInterface.getMetaData()),\n-                    new ObjectScope<>(ipInterface)\n-                            .map(\"interface\", \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n-                            .map(\"interface\", \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n-                            .map(\"interface\", \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n-                            .map(\"interface\", \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString))\n-                            .map(\"interface\", \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n-                            .map(\"interface\", \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n-                            .map(\"interface\", \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n+                    mapIpIntefaceKeys(new ObjectScope<>(ipInterface))\n+                            .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n+                            .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n+                            .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n             );\n         });\n \n         return metaDataScope;\n     }\n \n+    private static ObjectScope<OnmsIpInterface> mapIpIntefaceKeys(ObjectScope<OnmsIpInterface> scope) {\n+        return scope.map(INTERFACE, \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n+                .map(INTERFACE, \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n+                .map(INTERFACE, \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n+                .map(INTERFACE, \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString));\n+    }\n+\n+    @Override\n+    public Scope getScopeForInterfaceByIfIndex(final Integer nodeId, final int ifIndex) {\n+        if (nodeId == null) {\n+            return EmptyScope.EMPTY;\n+        }\n+\n+        final Scope metaDataScope = this.sessionUtils.withReadOnlyTransaction(() -> {\n+            final OnmsSnmpInterface snmpInterface = this.snmpInterfaceDao.findByNodeIdAndIfIndex(nodeId, ifIndex);\n+            if (snmpInterface == null) {\n+                return EmptyScope.EMPTY;\n+            }\n+\n+            ArrayList<Scope> scopes = new ArrayList<>();\n+\n+            // SNMP interface facts\n+            scopes.add(new ObjectScope<>(snmpInterface)\n+                    .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(snmpInterface.getIfAlias()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455f6ad42b897d340361b525ba7d02a5c416d6a4"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY2OTg1Ng==", "bodyText": "\ud83d\udc4d done", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434669856", "createdAt": "2020-06-03T15:48:40Z", "author": {"login": "patrick-schweizer"}, "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -108,20 +207,56 @@ public Scope getScopeForInterface(final Integer nodeId, final String ipAddress)\n             }\n \n             return new FallbackScope(transform(ipInterface.getMetaData()),\n-                    new ObjectScope<>(ipInterface)\n-                            .map(\"interface\", \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n-                            .map(\"interface\", \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n-                            .map(\"interface\", \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n-                            .map(\"interface\", \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString))\n-                            .map(\"interface\", \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n-                            .map(\"interface\", \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n-                            .map(\"interface\", \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n+                    mapIpIntefaceKeys(new ObjectScope<>(ipInterface))\n+                            .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n+                            .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n+                            .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n             );\n         });\n \n         return metaDataScope;\n     }\n \n+    private static ObjectScope<OnmsIpInterface> mapIpIntefaceKeys(ObjectScope<OnmsIpInterface> scope) {\n+        return scope.map(INTERFACE, \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n+                .map(INTERFACE, \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n+                .map(INTERFACE, \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n+                .map(INTERFACE, \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString));\n+    }\n+\n+    @Override\n+    public Scope getScopeForInterfaceByIfIndex(final Integer nodeId, final int ifIndex) {\n+        if (nodeId == null) {\n+            return EmptyScope.EMPTY;\n+        }\n+\n+        final Scope metaDataScope = this.sessionUtils.withReadOnlyTransaction(() -> {\n+            final OnmsSnmpInterface snmpInterface = this.snmpInterfaceDao.findByNodeIdAndIfIndex(nodeId, ifIndex);\n+            if (snmpInterface == null) {\n+                return EmptyScope.EMPTY;\n+            }\n+\n+            ArrayList<Scope> scopes = new ArrayList<>();\n+\n+            // SNMP interface facts\n+            scopes.add(new ObjectScope<>(snmpInterface)\n+                    .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(snmpInterface.getIfAlias()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM1NzU4Nw=="}, "originalCommit": {"oid": "455f6ad42b897d340361b525ba7d02a5c416d6a4"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTY1NzgxOnYy", "diffSide": "RIGHT", "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzoyMjo0MFrOGePNHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTo1MTo1M1rOGeiRug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM1OTU4MQ==", "bodyText": "FallbackScope uses a list internally. You can add a constructor which accepts a list (and alter the existing constructor to forward to the new one). If you use an ImmutableList.Builder here, this renders down to a no-op without any allocation.", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434359581", "createdAt": "2020-06-03T07:22:40Z", "author": {"login": "fooker"}, "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -108,20 +207,56 @@ public Scope getScopeForInterface(final Integer nodeId, final String ipAddress)\n             }\n \n             return new FallbackScope(transform(ipInterface.getMetaData()),\n-                    new ObjectScope<>(ipInterface)\n-                            .map(\"interface\", \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n-                            .map(\"interface\", \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n-                            .map(\"interface\", \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n-                            .map(\"interface\", \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString))\n-                            .map(\"interface\", \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n-                            .map(\"interface\", \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n-                            .map(\"interface\", \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n+                    mapIpIntefaceKeys(new ObjectScope<>(ipInterface))\n+                            .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n+                            .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n+                            .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n             );\n         });\n \n         return metaDataScope;\n     }\n \n+    private static ObjectScope<OnmsIpInterface> mapIpIntefaceKeys(ObjectScope<OnmsIpInterface> scope) {\n+        return scope.map(INTERFACE, \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n+                .map(INTERFACE, \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n+                .map(INTERFACE, \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n+                .map(INTERFACE, \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString));\n+    }\n+\n+    @Override\n+    public Scope getScopeForInterfaceByIfIndex(final Integer nodeId, final int ifIndex) {\n+        if (nodeId == null) {\n+            return EmptyScope.EMPTY;\n+        }\n+\n+        final Scope metaDataScope = this.sessionUtils.withReadOnlyTransaction(() -> {\n+            final OnmsSnmpInterface snmpInterface = this.snmpInterfaceDao.findByNodeIdAndIfIndex(nodeId, ifIndex);\n+            if (snmpInterface == null) {\n+                return EmptyScope.EMPTY;\n+            }\n+\n+            ArrayList<Scope> scopes = new ArrayList<>();\n+\n+            // SNMP interface facts\n+            scopes.add(new ObjectScope<>(snmpInterface)\n+                    .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(snmpInterface.getIfAlias()))\n+                    .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(snmpInterface.getIfDescr()))\n+                    .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(snmpInterface.getPhysAddr())));\n+\n+            // IP interface facts w/ meta-data extracted from IP interface\n+            Optional.ofNullable(snmpInterface.getPrimaryIpInterface())\n+                    .ifPresent(ipInterface -> {\n+                        scopes.add(transform(ipInterface.getMetaData()));\n+                        scopes.add(mapIpIntefaceKeys(new ObjectScope<>(ipInterface)));\n+                    });\n+\n+            return new FallbackScope(scopes.toArray(new Scope[0]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455f6ad42b897d340361b525ba7d02a5c416d6a4"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY3MjA1OA==", "bodyText": "done.", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434672058", "createdAt": "2020-06-03T15:51:53Z", "author": {"login": "patrick-schweizer"}, "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -108,20 +207,56 @@ public Scope getScopeForInterface(final Integer nodeId, final String ipAddress)\n             }\n \n             return new FallbackScope(transform(ipInterface.getMetaData()),\n-                    new ObjectScope<>(ipInterface)\n-                            .map(\"interface\", \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n-                            .map(\"interface\", \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n-                            .map(\"interface\", \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n-                            .map(\"interface\", \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString))\n-                            .map(\"interface\", \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n-                            .map(\"interface\", \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n-                            .map(\"interface\", \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n+                    mapIpIntefaceKeys(new ObjectScope<>(ipInterface))\n+                            .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n+                            .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n+                            .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n             );\n         });\n \n         return metaDataScope;\n     }\n \n+    private static ObjectScope<OnmsIpInterface> mapIpIntefaceKeys(ObjectScope<OnmsIpInterface> scope) {\n+        return scope.map(INTERFACE, \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n+                .map(INTERFACE, \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n+                .map(INTERFACE, \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n+                .map(INTERFACE, \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString));\n+    }\n+\n+    @Override\n+    public Scope getScopeForInterfaceByIfIndex(final Integer nodeId, final int ifIndex) {\n+        if (nodeId == null) {\n+            return EmptyScope.EMPTY;\n+        }\n+\n+        final Scope metaDataScope = this.sessionUtils.withReadOnlyTransaction(() -> {\n+            final OnmsSnmpInterface snmpInterface = this.snmpInterfaceDao.findByNodeIdAndIfIndex(nodeId, ifIndex);\n+            if (snmpInterface == null) {\n+                return EmptyScope.EMPTY;\n+            }\n+\n+            ArrayList<Scope> scopes = new ArrayList<>();\n+\n+            // SNMP interface facts\n+            scopes.add(new ObjectScope<>(snmpInterface)\n+                    .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(snmpInterface.getIfAlias()))\n+                    .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(snmpInterface.getIfDescr()))\n+                    .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(snmpInterface.getPhysAddr())));\n+\n+            // IP interface facts w/ meta-data extracted from IP interface\n+            Optional.ofNullable(snmpInterface.getPrimaryIpInterface())\n+                    .ifPresent(ipInterface -> {\n+                        scopes.add(transform(ipInterface.getMetaData()));\n+                        scopes.add(mapIpIntefaceKeys(new ObjectScope<>(ipInterface)));\n+                    });\n+\n+            return new FallbackScope(scopes.toArray(new Scope[0]));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM1OTU4MQ=="}, "originalCommit": {"oid": "455f6ad42b897d340361b525ba7d02a5c416d6a4"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTY2Mjk0OnYy", "diffSide": "RIGHT", "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzoyMzo1OFrOGePP7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjoxNjozM1rOGejcmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MDMwMw==", "bodyText": "Just return a new Scope as the are used in FallbackScopes anyway?", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434360303", "createdAt": "2020-06-03T07:23:58Z", "author": {"login": "fooker"}, "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -108,20 +207,56 @@ public Scope getScopeForInterface(final Integer nodeId, final String ipAddress)\n             }\n \n             return new FallbackScope(transform(ipInterface.getMetaData()),\n-                    new ObjectScope<>(ipInterface)\n-                            .map(\"interface\", \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n-                            .map(\"interface\", \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n-                            .map(\"interface\", \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n-                            .map(\"interface\", \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString))\n-                            .map(\"interface\", \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n-                            .map(\"interface\", \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n-                            .map(\"interface\", \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n+                    mapIpIntefaceKeys(new ObjectScope<>(ipInterface))\n+                            .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n+                            .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n+                            .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n             );\n         });\n \n         return metaDataScope;\n     }\n \n+    private static ObjectScope<OnmsIpInterface> mapIpIntefaceKeys(ObjectScope<OnmsIpInterface> scope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455f6ad42b897d340361b525ba7d02a5c416d6a4"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5MTIyNg==", "bodyText": "\ud83d\udc4d fixed", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434691226", "createdAt": "2020-06-03T16:16:33Z", "author": {"login": "patrick-schweizer"}, "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -108,20 +207,56 @@ public Scope getScopeForInterface(final Integer nodeId, final String ipAddress)\n             }\n \n             return new FallbackScope(transform(ipInterface.getMetaData()),\n-                    new ObjectScope<>(ipInterface)\n-                            .map(\"interface\", \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n-                            .map(\"interface\", \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n-                            .map(\"interface\", \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n-                            .map(\"interface\", \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString))\n-                            .map(\"interface\", \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n-                            .map(\"interface\", \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n-                            .map(\"interface\", \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n+                    mapIpIntefaceKeys(new ObjectScope<>(ipInterface))\n+                            .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n+                            .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n+                            .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n             );\n         });\n \n         return metaDataScope;\n     }\n \n+    private static ObjectScope<OnmsIpInterface> mapIpIntefaceKeys(ObjectScope<OnmsIpInterface> scope) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MDMwMw=="}, "originalCommit": {"oid": "455f6ad42b897d340361b525ba7d02a5c416d6a4"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTY3ODIxOnYy", "diffSide": "RIGHT", "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzoyODoxOVrOGePZJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjoxOTo1NFrOGejlTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MjY2Mg==", "bodyText": "I have mixed feelings about having a new method. If we can merge this with getScopeForNode by just adding the Scope created here to the Nodes FallbackScope, all existing usages would benefit from the available data.", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434362662", "createdAt": "2020-06-03T07:28:19Z", "author": {"login": "fooker"}, "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -87,11 +97,100 @@ public Scope getScopeForNode(final Integer nodeId) {\n                             .map(\"node\", \"sys-location\", (n) -> Optional.ofNullable(n.getSysLocation()))\n                             .map(\"node\", \"sys-contact\", (n) -> Optional.ofNullable(n.getSysContact()))\n                             .map(\"node\", \"sys-description\", (n) -> Optional.ofNullable(n.getSysDescription()))\n+                            .map(\"node\", \"sys-object-id\", (n) -> Optional.ofNullable(n.getSysObjectId()))\n                             .map(\"node\", \"location\", (n) -> Optional.ofNullable(n.getLocation().getLocationName()))\n-                            .map(\"node\", \"area\", (n) -> Optional.ofNullable(n.getLocation().getMonitoringArea()))\n-            );\n+                            .map(\"node\", \"area\", (n) -> Optional.ofNullable(n.getLocation().getMonitoringArea())));\n         });\n+        return metaDataScope;\n+    }\n \n+    private Optional<String> getNodeCriteria(final OnmsNode node) {\n+        Objects.requireNonNull(node, \"Node can not be null\");\n+        if (node.getForeignSource() != null) {\n+            return Optional.of(node.getForeignSource() + \":\" + node.getForeignId());\n+        } else {\n+            return Optional.of(Integer.toString(node.getId()));\n+        }\n+    }\n+\n+    @Override\n+    public Scope getScopeForAssets(final Integer nodeId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455f6ad42b897d340361b525ba7d02a5c416d6a4"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5MzQ1Mw==", "bodyText": "I'm easy here. I merged the 2 methods.", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434693453", "createdAt": "2020-06-03T16:19:54Z", "author": {"login": "patrick-schweizer"}, "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -87,11 +97,100 @@ public Scope getScopeForNode(final Integer nodeId) {\n                             .map(\"node\", \"sys-location\", (n) -> Optional.ofNullable(n.getSysLocation()))\n                             .map(\"node\", \"sys-contact\", (n) -> Optional.ofNullable(n.getSysContact()))\n                             .map(\"node\", \"sys-description\", (n) -> Optional.ofNullable(n.getSysDescription()))\n+                            .map(\"node\", \"sys-object-id\", (n) -> Optional.ofNullable(n.getSysObjectId()))\n                             .map(\"node\", \"location\", (n) -> Optional.ofNullable(n.getLocation().getLocationName()))\n-                            .map(\"node\", \"area\", (n) -> Optional.ofNullable(n.getLocation().getMonitoringArea()))\n-            );\n+                            .map(\"node\", \"area\", (n) -> Optional.ofNullable(n.getLocation().getMonitoringArea())));\n         });\n+        return metaDataScope;\n+    }\n \n+    private Optional<String> getNodeCriteria(final OnmsNode node) {\n+        Objects.requireNonNull(node, \"Node can not be null\");\n+        if (node.getForeignSource() != null) {\n+            return Optional.of(node.getForeignSource() + \":\" + node.getForeignId());\n+        } else {\n+            return Optional.of(Integer.toString(node.getId()));\n+        }\n+    }\n+\n+    @Override\n+    public Scope getScopeForAssets(final Integer nodeId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MjY2Mg=="}, "originalCommit": {"oid": "455f6ad42b897d340361b525ba7d02a5c416d6a4"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTY4MjI0OnYy", "diffSide": "RIGHT", "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzoyOToxNlrOGePbYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDoyNzozN1rOGesKXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MzIzMw==", "bodyText": "By using new ObjectScope<>(node.getAssetRecord()) this can be much less verbose.", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434363233", "createdAt": "2020-06-03T07:29:16Z", "author": {"login": "fooker"}, "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -87,11 +97,100 @@ public Scope getScopeForNode(final Integer nodeId) {\n                             .map(\"node\", \"sys-location\", (n) -> Optional.ofNullable(n.getSysLocation()))\n                             .map(\"node\", \"sys-contact\", (n) -> Optional.ofNullable(n.getSysContact()))\n                             .map(\"node\", \"sys-description\", (n) -> Optional.ofNullable(n.getSysDescription()))\n+                            .map(\"node\", \"sys-object-id\", (n) -> Optional.ofNullable(n.getSysObjectId()))\n                             .map(\"node\", \"location\", (n) -> Optional.ofNullable(n.getLocation().getLocationName()))\n-                            .map(\"node\", \"area\", (n) -> Optional.ofNullable(n.getLocation().getMonitoringArea()))\n-            );\n+                            .map(\"node\", \"area\", (n) -> Optional.ofNullable(n.getLocation().getMonitoringArea())));\n         });\n+        return metaDataScope;\n+    }\n \n+    private Optional<String> getNodeCriteria(final OnmsNode node) {\n+        Objects.requireNonNull(node, \"Node can not be null\");\n+        if (node.getForeignSource() != null) {\n+            return Optional.of(node.getForeignSource() + \":\" + node.getForeignId());\n+        } else {\n+            return Optional.of(Integer.toString(node.getId()));\n+        }\n+    }\n+\n+    @Override\n+    public Scope getScopeForAssets(final Integer nodeId) {\n+        if (nodeId == null) {\n+            return EmptyScope.EMPTY;\n+        }\n+\n+        final Scope metaDataScope = this.sessionUtils.withReadOnlyTransaction(() -> {\n+            final OnmsNode node = nodeDao.get(nodeId);\n+            if (node == null) {\n+                return EmptyScope.EMPTY;\n+            }\n+\n+            return new FallbackScope(transform(node.getMetaData()),\n+                    new ObjectScope<>(node)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455f6ad42b897d340361b525ba7d02a5c416d6a4"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNDAxMw==", "bodyText": "fixed.", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434834013", "createdAt": "2020-06-03T20:27:37Z", "author": {"login": "patrick-schweizer"}, "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -87,11 +97,100 @@ public Scope getScopeForNode(final Integer nodeId) {\n                             .map(\"node\", \"sys-location\", (n) -> Optional.ofNullable(n.getSysLocation()))\n                             .map(\"node\", \"sys-contact\", (n) -> Optional.ofNullable(n.getSysContact()))\n                             .map(\"node\", \"sys-description\", (n) -> Optional.ofNullable(n.getSysDescription()))\n+                            .map(\"node\", \"sys-object-id\", (n) -> Optional.ofNullable(n.getSysObjectId()))\n                             .map(\"node\", \"location\", (n) -> Optional.ofNullable(n.getLocation().getLocationName()))\n-                            .map(\"node\", \"area\", (n) -> Optional.ofNullable(n.getLocation().getMonitoringArea()))\n-            );\n+                            .map(\"node\", \"area\", (n) -> Optional.ofNullable(n.getLocation().getMonitoringArea())));\n         });\n+        return metaDataScope;\n+    }\n \n+    private Optional<String> getNodeCriteria(final OnmsNode node) {\n+        Objects.requireNonNull(node, \"Node can not be null\");\n+        if (node.getForeignSource() != null) {\n+            return Optional.of(node.getForeignSource() + \":\" + node.getForeignId());\n+        } else {\n+            return Optional.of(Integer.toString(node.getId()));\n+        }\n+    }\n+\n+    @Override\n+    public Scope getScopeForAssets(final Integer nodeId) {\n+        if (nodeId == null) {\n+            return EmptyScope.EMPTY;\n+        }\n+\n+        final Scope metaDataScope = this.sessionUtils.withReadOnlyTransaction(() -> {\n+            final OnmsNode node = nodeDao.get(nodeId);\n+            if (node == null) {\n+                return EmptyScope.EMPTY;\n+            }\n+\n+            return new FallbackScope(transform(node.getMetaData()),\n+                    new ObjectScope<>(node)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MzIzMw=="}, "originalCommit": {"oid": "455f6ad42b897d340361b525ba7d02a5c416d6a4"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTY4NzI0OnYy", "diffSide": "RIGHT", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzozMDozNVrOGePeYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDoyOToyMlrOGesN7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2NDAwMA==", "bodyText": "Not used, or did I miss something?", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434364000", "createdAt": "2020-06-03T07:30:35Z", "author": {"login": "fooker"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+package org.opennms.netmgt.timeseries.integration;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Defines which additional meta tags should be exposed to the timeseries integration plugin.\n+ */\n+public class MetaTagConfiguration {\n+\n+    final static String CONFIG_PREFIX = \"org.opennms.timeseries.tin.metatags\";\n+    final static String CONFIG_KEY_FOR_CATEGORIES = CONFIG_PREFIX + \".exposeCategories\";\n+    final static String CONFIG_PREFIX_FOR_TAGS = CONFIG_PREFIX + \".tag.\";\n+\n+    /**\n+     * properties defined in opennms.properties\n+     */\n+    public enum PropertyKey {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455f6ad42b897d340361b525ba7d02a5c416d6a4"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNDkyNA==", "bodyText": "Good catch. It was used but it is not anymore. I removed it...", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434834924", "createdAt": "2020-06-03T20:29:22Z", "author": {"login": "patrick-schweizer"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+package org.opennms.netmgt.timeseries.integration;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Defines which additional meta tags should be exposed to the timeseries integration plugin.\n+ */\n+public class MetaTagConfiguration {\n+\n+    final static String CONFIG_PREFIX = \"org.opennms.timeseries.tin.metatags\";\n+    final static String CONFIG_KEY_FOR_CATEGORIES = CONFIG_PREFIX + \".exposeCategories\";\n+    final static String CONFIG_PREFIX_FOR_TAGS = CONFIG_PREFIX + \".tag.\";\n+\n+    /**\n+     * properties defined in opennms.properties\n+     */\n+    public enum PropertyKey {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2NDAwMA=="}, "originalCommit": {"oid": "455f6ad42b897d340361b525ba7d02a5c416d6a4"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTcyODQ4OnYy", "diffSide": "RIGHT", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzo0Mjo0NFrOGeP4Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzo0Mjo0NFrOGeP4Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM3MDY1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .filter(e -> e.getKey().startsWith(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS))\n          \n          \n            \n                            .forEach((entry) -> filteredMap.put(entry.getKey().substring(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS.length()), entry.getValue()));\n          \n          \n            \n                            .flatMap((entry) -> StringUtils.truncatePrefix(entry.getKey(), MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS)\n          \n          \n            \n                                                           .map(Stream::of)\n          \n          \n            \n                                                           .orElseGet(Stream::empty))\n          \n          \n            \n                            .collect(Collectors.toMap((entry) -> entry.getKey(), (entry) -> entry.getValue()));", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434370651", "createdAt": "2020-06-03T07:42:44Z", "author": {"login": "fooker"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+package org.opennms.netmgt.timeseries.integration;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Defines which additional meta tags should be exposed to the timeseries integration plugin.\n+ */\n+public class MetaTagConfiguration {\n+\n+    final static String CONFIG_PREFIX = \"org.opennms.timeseries.tin.metatags\";\n+    final static String CONFIG_KEY_FOR_CATEGORIES = CONFIG_PREFIX + \".exposeCategories\";\n+    final static String CONFIG_PREFIX_FOR_TAGS = CONFIG_PREFIX + \".tag.\";\n+\n+    /**\n+     * properties defined in opennms.properties\n+     */\n+    public enum PropertyKey {\n+        assets,\n+        tag,\n+        categories\n+    }\n+    private final boolean categoriesEnabled;\n+\n+    private final Map<String, String> configuredMetaTags;\n+\n+    public MetaTagConfiguration(final Map<String, String> properties) {\n+        this.categoriesEnabled = Optional.ofNullable(properties.get(CONFIG_KEY_FOR_CATEGORIES)).map(Boolean::valueOf).orElse(false);\n+        this.configuredMetaTags = findConfiguredMetaTags(properties);\n+    }\n+\n+    public Map<String, String> getConfiguredMetaTags() {\n+        return this.configuredMetaTags;\n+    }\n+\n+    public boolean isCategoriesEnabled() {\n+        return this.categoriesEnabled;\n+    }\n+\n+    private Map<String, String> findConfiguredMetaTags(final Map<String, String> properties) {\n+        Map<String, String> filteredMap = new HashMap<>();\n+        properties\n+                .entrySet()\n+                .stream()\n+                .filter(e -> e.getKey().startsWith(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS))\n+                .forEach((entry) -> filteredMap.put(entry.getKey().substring(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS.length()), entry.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455f6ad42b897d340361b525ba7d02a5c416d6a4"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTc0MDY5OnYy", "diffSide": "RIGHT", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzo0NjoyMFrOGeQAEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzo0NjoyMFrOGeQAEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM3MjYyNw==", "bodyText": "I found a lot of benefit in using Objects.requireNotNull very often. Maybe add it here, too.", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434372627", "createdAt": "2020-06-03T07:46:20Z", "author": {"login": "fooker"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+package org.opennms.netmgt.timeseries.integration;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Defines which additional meta tags should be exposed to the timeseries integration plugin.\n+ */\n+public class MetaTagConfiguration {\n+\n+    final static String CONFIG_PREFIX = \"org.opennms.timeseries.tin.metatags\";\n+    final static String CONFIG_KEY_FOR_CATEGORIES = CONFIG_PREFIX + \".exposeCategories\";\n+    final static String CONFIG_PREFIX_FOR_TAGS = CONFIG_PREFIX + \".tag.\";\n+\n+    /**\n+     * properties defined in opennms.properties\n+     */\n+    public enum PropertyKey {\n+        assets,\n+        tag,\n+        categories\n+    }\n+    private final boolean categoriesEnabled;\n+\n+    private final Map<String, String> configuredMetaTags;\n+\n+    public MetaTagConfiguration(final Map<String, String> properties) {\n+        this.categoriesEnabled = Optional.ofNullable(properties.get(CONFIG_KEY_FOR_CATEGORIES)).map(Boolean::valueOf).orElse(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455f6ad42b897d340361b525ba7d02a5c416d6a4"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTc0NDY2OnYy", "diffSide": "RIGHT", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzo0NzoyNlrOGeQCkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDozMjo0N1rOGesUZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM3MzI2Nw==", "bodyText": "Objects.requireNotNull, too. Especially, if the value is not actively used in the constructor.", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434373267", "createdAt": "2020-06-03T07:47:26Z", "author": {"login": "fooker"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2006-2015 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2015 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.timeseries.integration.persistence;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.opennms.core.rpc.utils.mate.EntityScopeProvider;\n+import org.opennms.core.rpc.utils.mate.FallbackScope;\n+import org.opennms.core.rpc.utils.mate.Interpolator;\n+import org.opennms.core.rpc.utils.mate.Scope;\n+import org.opennms.netmgt.collection.api.CollectionResource;\n+import org.opennms.netmgt.dao.api.NodeDao;\n+import org.opennms.netmgt.dao.api.SessionUtils;\n+import org.opennms.netmgt.model.OnmsCategory;\n+import org.opennms.netmgt.model.OnmsNode;\n+import org.opennms.netmgt.model.ResourceTypeUtils;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.collect.Maps;\n+\n+public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<String, String>> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MetaTagDataLoader.class);\n+\n+    private final NodeDao nodeDao;\n+    private final SessionUtils sessionUtils;\n+    private final EntityScopeProvider entityScopeProvider;\n+    private MetaTagConfiguration config;\n+\n+    @Inject\n+    public MetaTagDataLoader(final NodeDao nodeDao, final SessionUtils sessionUtils, final EntityScopeProvider entityScopeProvider) {\n+        this.nodeDao = nodeDao;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455f6ad42b897d340361b525ba7d02a5c416d6a4"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNjU4MQ==", "bodyText": "\ud83d\udc4d fixed.", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434836581", "createdAt": "2020-06-03T20:32:47Z", "author": {"login": "patrick-schweizer"}, "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2006-2015 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2015 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.timeseries.integration.persistence;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.opennms.core.rpc.utils.mate.EntityScopeProvider;\n+import org.opennms.core.rpc.utils.mate.FallbackScope;\n+import org.opennms.core.rpc.utils.mate.Interpolator;\n+import org.opennms.core.rpc.utils.mate.Scope;\n+import org.opennms.netmgt.collection.api.CollectionResource;\n+import org.opennms.netmgt.dao.api.NodeDao;\n+import org.opennms.netmgt.dao.api.SessionUtils;\n+import org.opennms.netmgt.model.OnmsCategory;\n+import org.opennms.netmgt.model.OnmsNode;\n+import org.opennms.netmgt.model.ResourceTypeUtils;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.collect.Maps;\n+\n+public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<String, String>> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MetaTagDataLoader.class);\n+\n+    private final NodeDao nodeDao;\n+    private final SessionUtils sessionUtils;\n+    private final EntityScopeProvider entityScopeProvider;\n+    private MetaTagConfiguration config;\n+\n+    @Inject\n+    public MetaTagDataLoader(final NodeDao nodeDao, final SessionUtils sessionUtils, final EntityScopeProvider entityScopeProvider) {\n+        this.nodeDao = nodeDao;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM3MzI2Nw=="}, "originalCommit": {"oid": "455f6ad42b897d340361b525ba7d02a5c416d6a4"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODc5NzQ2OnYy", "diffSide": "RIGHT", "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMTozNDowOVrOGeuaPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMjoxOTo0OFrOGevjfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3MDg0NQ==", "bodyText": "To be more clear, it should be called Contexts. The terminology here is that the meta-data consists of (context, key, value) triplets whereas the (context, key) tuple is used to access a value. The scopes are just used be more flexible during interpolation.", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434870845", "createdAt": "2020-06-03T21:34:09Z", "author": {"login": "fooker"}, "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProvider.java", "diffHunk": "@@ -31,9 +31,15 @@\n import java.net.InetAddress;\n \n public interface EntityScopeProvider {\n-    Scope getScopeForNode(final Integer nodeId);\n \n-    Scope getScopeForAssets(final Integer nodeId);\n+    interface ScopeId {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6236b05e3a3599dadc771e7c179fe32cbe829f13"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4OTU5Nw==", "bodyText": "fixed", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434889597", "createdAt": "2020-06-03T22:19:48Z", "author": {"login": "patrick-schweizer"}, "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProvider.java", "diffHunk": "@@ -31,9 +31,15 @@\n import java.net.InetAddress;\n \n public interface EntityScopeProvider {\n-    Scope getScopeForNode(final Integer nodeId);\n \n-    Scope getScopeForAssets(final Integer nodeId);\n+    interface ScopeId {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3MDg0NQ=="}, "originalCommit": {"oid": "6236b05e3a3599dadc771e7c179fe32cbe829f13"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODgwNTkxOnYy", "diffSide": "RIGHT", "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMTozNzoxM1rOGeufjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMjoyMjoyMVrOGevnJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3MjIwNQ==", "bodyText": "Jut a nit: you import all the other context names statically. But not this one.", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434872205", "createdAt": "2020-06-03T21:37:13Z", "author": {"login": "fooker"}, "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -240,21 +233,19 @@ public Scope getScopeForInterfaceByIfIndex(final Integer nodeId, final int ifInd\n \n             // SNMP interface facts\n             scopes.add(new ObjectScope<>(snmpInterface)\n-                    .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(snmpInterface.getIfAlias()))\n-                    .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(snmpInterface.getIfDescr()))\n-                    .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(snmpInterface.getPhysAddr())));\n+                    .map(ScopeId.INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getIfAlias()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6236b05e3a3599dadc771e7c179fe32cbe829f13"}, "originalPosition": 298}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg5MDUzNQ==", "bodyText": "true :-) fixed", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434890535", "createdAt": "2020-06-03T22:22:21Z", "author": {"login": "patrick-schweizer"}, "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -240,21 +233,19 @@ public Scope getScopeForInterfaceByIfIndex(final Integer nodeId, final int ifInd\n \n             // SNMP interface facts\n             scopes.add(new ObjectScope<>(snmpInterface)\n-                    .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(snmpInterface.getIfAlias()))\n-                    .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(snmpInterface.getIfDescr()))\n-                    .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(snmpInterface.getPhysAddr())));\n+                    .map(ScopeId.INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getIfAlias()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3MjIwNQ=="}, "originalCommit": {"oid": "6236b05e3a3599dadc771e7c179fe32cbe829f13"}, "originalPosition": 298}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 673, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}