{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMzkzMzMx", "number": 3021, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDoxODozMlrOEBxG-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDoxODozMlrOEBxG-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjg4NjM0OnYy", "diffSide": "RIGHT", "path": "features/remotepollerng/daemon/src/main/java/org/opennms/netmgt/remotepollerng/RemotePollerd.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDoxODozMlrOGdz-pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTowMTowOVrOGd145Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkxMzUwOA==", "bodyText": "This is basically a duplicate of the code in {{scheduleAllServices}}. Can we deduplicate this?", "url": "https://github.com/OpenNMS/opennms/pull/3021#discussion_r433913508", "createdAt": "2020-06-02T14:18:32Z", "author": {"login": "fooker"}, "path": "features/remotepollerng/daemon/src/main/java/org/opennms/netmgt/remotepollerng/RemotePollerd.java", "diffHunk": "@@ -196,6 +199,88 @@ public void scheduleAllServices() {\n         });\n     }\n \n+    private Map<JobKey, RemotePolledService> getMapOfScheduledServices(final String locationName) {\n+        final Map<JobKey, RemotePolledService> mapOfScheduledServices = new TreeMap<>();\n+        try {\n+            for(final JobKey jobKey : scheduler.getJobKeys(GroupMatcher.jobGroupEquals(locationName))) {\n+                try {\n+                    final JobDetail jobDetail = scheduler.getJobDetail(jobKey);\n+\n+                    if (locationName.equals(jobDetail.getJobDataMap().get(RemotePollJob.LOCATION_NAME)) &&\n+                        jobDetail.getJobDataMap().get(RemotePollJob.REMOTE_POLLER_BACKEND) == this) {\n+                        mapOfScheduledServices.put(jobKey, (RemotePolledService) jobDetail.getJobDataMap().get(RemotePollJob.POLLED_SERVICE));\n+                    }\n+                } catch (SchedulerException e) {\n+                    LOG.warn(\"Failed to retrieve job details {}.\", jobKey, e);\n+                }\n+            }\n+        } catch (SchedulerException e) {\n+            LOG.warn(\"Failed to query scheduled jobs.\", e);\n+        }\n+\n+        return mapOfScheduledServices;\n+    }\n+\n+    public void handleConfigurationChanged() {\n+        final Map<String, List<RemotePolledService>> servicesByPackage = new HashMap<>();\n+\n+        try {\n+            this.pollerConfig.update();\n+        } catch (IOException e) {\n+            LOG.warn(\"Error reloading poller-configuration.xml\");\n+        }\n+\n+        LOG.info(\"Re-scheduling all services...\");\n+        sessionUtils.withReadOnlyTransaction(() -> {\n+            for (final OnmsMonitoringLocation loc : monitoringLocationDao.findAll()) {\n+                final List<String> pollingPackageNames = loc.getPollingPackageNames();\n+                LOG.debug(\"Location '{}' has polling packages: {}\", loc.getLocationName(), pollingPackageNames);\n+\n+                final Set<RemotePolledService> servicesToBeScheduled = new HashSet<>();\n+\n+                for (final String pollingPackageName : pollingPackageNames) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7218f6be03a233c742dc45c972ec0b442904e2f7"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk0NDgwNQ==", "bodyText": "done", "url": "https://github.com/OpenNMS/opennms/pull/3021#discussion_r433944805", "createdAt": "2020-06-02T15:01:09Z", "author": {"login": "christianpape"}, "path": "features/remotepollerng/daemon/src/main/java/org/opennms/netmgt/remotepollerng/RemotePollerd.java", "diffHunk": "@@ -196,6 +199,88 @@ public void scheduleAllServices() {\n         });\n     }\n \n+    private Map<JobKey, RemotePolledService> getMapOfScheduledServices(final String locationName) {\n+        final Map<JobKey, RemotePolledService> mapOfScheduledServices = new TreeMap<>();\n+        try {\n+            for(final JobKey jobKey : scheduler.getJobKeys(GroupMatcher.jobGroupEquals(locationName))) {\n+                try {\n+                    final JobDetail jobDetail = scheduler.getJobDetail(jobKey);\n+\n+                    if (locationName.equals(jobDetail.getJobDataMap().get(RemotePollJob.LOCATION_NAME)) &&\n+                        jobDetail.getJobDataMap().get(RemotePollJob.REMOTE_POLLER_BACKEND) == this) {\n+                        mapOfScheduledServices.put(jobKey, (RemotePolledService) jobDetail.getJobDataMap().get(RemotePollJob.POLLED_SERVICE));\n+                    }\n+                } catch (SchedulerException e) {\n+                    LOG.warn(\"Failed to retrieve job details {}.\", jobKey, e);\n+                }\n+            }\n+        } catch (SchedulerException e) {\n+            LOG.warn(\"Failed to query scheduled jobs.\", e);\n+        }\n+\n+        return mapOfScheduledServices;\n+    }\n+\n+    public void handleConfigurationChanged() {\n+        final Map<String, List<RemotePolledService>> servicesByPackage = new HashMap<>();\n+\n+        try {\n+            this.pollerConfig.update();\n+        } catch (IOException e) {\n+            LOG.warn(\"Error reloading poller-configuration.xml\");\n+        }\n+\n+        LOG.info(\"Re-scheduling all services...\");\n+        sessionUtils.withReadOnlyTransaction(() -> {\n+            for (final OnmsMonitoringLocation loc : monitoringLocationDao.findAll()) {\n+                final List<String> pollingPackageNames = loc.getPollingPackageNames();\n+                LOG.debug(\"Location '{}' has polling packages: {}\", loc.getLocationName(), pollingPackageNames);\n+\n+                final Set<RemotePolledService> servicesToBeScheduled = new HashSet<>();\n+\n+                for (final String pollingPackageName : pollingPackageNames) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkxMzUwOA=="}, "originalCommit": {"oid": "7218f6be03a233c742dc45c972ec0b442904e2f7"}, "originalPosition": 112}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 675, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}