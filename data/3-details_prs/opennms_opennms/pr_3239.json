{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzOTgwMzg4", "number": 3239, "title": "NMS-12963: Enhance routes with ASN/Route info", "bodyText": "External References\n\nJIRA (Issue Tracker): http://issues.opennms.org/browse/NMS-12963\nJIRA (Issue Tracker): https://issues.opennms.org/browse/NMS-12964", "createdAt": "2020-12-07T22:11:48Z", "url": "https://github.com/OpenNMS/opennms/pull/3239", "merged": true, "mergeCommit": {"oid": "50e2c990e099cfa7c21d8b870c1855348644166b"}, "closed": true, "closedAt": "2021-02-03T18:34:45Z", "author": {"login": "cgorantla"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdU0b3KgH2gAyNTMzOTgwMzg4OmIwMmMwYTU0ZWY0MmIwNGY2ZjQxYTgzMGI1NWYyZjkyZGViYzM2ODk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd2g2FdgFqTU4MjM5NTc2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b02c0a54ef42b04f6f41a830b55f2f92debc3689", "author": {"user": {"login": "cgorantla", "name": "Chandra Gorantla"}}, "url": "https://github.com/OpenNMS/opennms/commit/b02c0a54ef42b04f6f41a830b55f2f92debc3689", "committedDate": "2020-10-21T21:41:13Z", "message": "NMS-12949: Persist BMP messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b641d4e6eb9c5e64bf746d28e600447e646fd2c8", "author": {"user": {"login": "cgorantla", "name": "Chandra Gorantla"}}, "url": "https://github.com/OpenNMS/opennms/commit/b641d4e6eb9c5e64bf746d28e600447e646fd2c8", "committedDate": "2020-11-18T14:51:41Z", "message": "NMS-12952: Persist stats for BMP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d876bd790e2967c6448bd666dc04071a73240c97", "author": {"user": {"login": "cgorantla", "name": "Chandra Gorantla"}}, "url": "https://github.com/OpenNMS/opennms/commit/d876bd790e2967c6448bd666dc04071a73240c97", "committedDate": "2020-11-30T21:13:01Z", "message": "NMS-12949: Handle review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90549259dc8416a1fae053f38e8d4b6a3d079204", "author": {"user": {"login": "cgorantla", "name": "Chandra Gorantla"}}, "url": "https://github.com/OpenNMS/opennms/commit/90549259dc8416a1fae053f38e8d4b6a3d079204", "committedDate": "2020-12-01T15:47:04Z", "message": "NMS-12949: Handle review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1e2e9bfb8f8a1cbd34d8d3b03edc8a7740181b0", "author": {"user": {"login": "cgorantla", "name": "Chandra Gorantla"}}, "url": "https://github.com/OpenNMS/opennms/commit/f1e2e9bfb8f8a1cbd34d8d3b03edc8a7740181b0", "committedDate": "2020-12-03T23:03:53Z", "message": "NMS-12963: Add ASN info and path tables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "243519e42f4a3bb5e4d834a1c98b1c2333c761b5", "author": {"user": {"login": "cgorantla", "name": "Chandra Gorantla"}}, "url": "https://github.com/OpenNMS/opennms/commit/243519e42f4a3bb5e4d834a1c98b1c2333c761b5", "committedDate": "2020-12-06T00:41:20Z", "message": "Merge branch 'features/bmp' into jira/NMS-12963"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b54e4e0c94cd9b41cba79abaac5dde0e2d53b7b", "author": {"user": {"login": "cgorantla", "name": "Chandra Gorantla"}}, "url": "https://github.com/OpenNMS/opennms/commit/9b54e4e0c94cd9b41cba79abaac5dde0e2d53b7b", "committedDate": "2020-12-07T22:02:58Z", "message": "NMS-12963: Add asn_path_analysis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7467030aba1188a6b3e79ae24037d204024bd73", "author": {"user": {"login": "cgorantla", "name": "Chandra Gorantla"}}, "url": "https://github.com/OpenNMS/opennms/commit/a7467030aba1188a6b3e79ae24037d204024bd73", "committedDate": "2021-01-05T19:40:56Z", "message": "Merge branch 'features/bmp' into jira/NMS-12963"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe25755a341bb4351f444cf1acd84122d35ed948", "author": {"user": {"login": "cgorantla", "name": "Chandra Gorantla"}}, "url": "https://github.com/OpenNMS/opennms/commit/fe25755a341bb4351f444cf1acd84122d35ed948", "committedDate": "2021-01-05T22:07:34Z", "message": "Merge branch 'features/bmp' into jira/NMS-12963"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7afa55ceba910ea7f2ade0d2f88517ece05c3323", "author": {"user": {"login": "cgorantla", "name": "Chandra Gorantla"}}, "url": "https://github.com/OpenNMS/opennms/commit/7afa55ceba910ea7f2ade0d2f88517ece05c3323", "committedDate": "2021-01-06T14:52:44Z", "message": "NMS-12964: Add BMP route info"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac5cf17fe9802fbf3c243d5ef901da0de2d1b74b", "author": {"user": {"login": "cgorantla", "name": "Chandra Gorantla"}}, "url": "https://github.com/OpenNMS/opennms/commit/ac5cf17fe9802fbf3c243d5ef901da0de2d1b74b", "committedDate": "2021-01-06T14:52:55Z", "message": "NMS-12964: Add RouteInfo table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "302e52f427bda38a6b9f6e081a83ec47594ac836", "author": {"user": {"login": "cgorantla", "name": "Chandra Gorantla"}}, "url": "https://github.com/OpenNMS/opennms/commit/302e52f427bda38a6b9f6e081a83ec47594ac836", "committedDate": "2021-01-13T15:26:12Z", "message": "Merge branch 'develop' into jira/NMS-12963"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146", "author": {"user": {"login": "cgorantla", "name": "Chandra Gorantla"}}, "url": "https://github.com/OpenNMS/opennms/commit/87f009bf7b4014d6c366485c93e794e694d72146", "committedDate": "2021-01-13T17:46:59Z", "message": "Merge branch 'features/bmp' into jira/NMS-12963"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5MDMyNTY3", "url": "https://github.com/OpenNMS/opennms/pull/3239#pullrequestreview-569032567", "createdAt": "2021-01-15T07:57:26Z", "commit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwNzo1NzoyNlrOIUIg4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwODo0MTo1M1rOIUMqrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzk4MTkyMA==", "bodyText": "Maybe this should be updated to 2021 now", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r557981920", "createdAt": "2021-01-15T07:57:26Z", "author": {"login": "christianpape"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/AsnInfo.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzk4OTg4MQ==", "bodyText": "Is OrgName ||\u00a0descr right? Isn't it something like OrgName || orgname?", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r557989881", "createdAt": "2021-01-15T08:01:39Z", "author": {"login": "christianpape"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/AsnInfo.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.bmp.adapter;\n+\n+import java.util.Optional;\n+\n+public class AsnInfo {\n+\n+    private Long asn;\n+    private String asName;\n+    private String orgId;\n+    private String orgName;\n+    private String address;\n+    private String city;\n+    private String stateProv;\n+    private String postalCode;\n+    private String country;\n+    private String source;\n+    private String rawOutput;\n+    private String remarks;\n+\n+    public AsnInfo(Long asn, String source, String rawOutput) {\n+        this.asn = asn;\n+        this.source = source;\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public Long getAsn() {\n+        return asn;\n+    }\n+\n+    public void setAsn(Long asn) {\n+        this.asn = asn;\n+    }\n+\n+    public String getAsName() {\n+        return asName;\n+    }\n+\n+    public void setAsName(String asName) {\n+        this.asName = asName;\n+    }\n+\n+    public String getOrgId() {\n+        return orgId;\n+    }\n+\n+    public void setOrgId(String orgId) {\n+        this.orgId = orgId;\n+    }\n+\n+    public String getOrgName() {\n+        return orgName;\n+    }\n+\n+    public void setOrgName(String orgName) {\n+        this.orgName = orgName;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    public String getCity() {\n+        return city;\n+    }\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public String getStateProv() {\n+        return stateProv;\n+    }\n+\n+    public void setStateProv(String stateProv) {\n+        this.stateProv = stateProv;\n+    }\n+\n+    public String getPostalCode() {\n+        return postalCode;\n+    }\n+\n+    public void setPostalCode(String postalCode) {\n+        this.postalCode = postalCode;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    public void setSource(String source) {\n+        this.source = source;\n+    }\n+\n+    public String getRawOutput() {\n+        return rawOutput;\n+    }\n+\n+    public void setRawOutput(String rawOutput) {\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public String getRemarks() {\n+        return remarks;\n+    }\n+\n+    public void setRemarks(String remarks) {\n+        this.remarks = remarks;\n+    }\n+\n+    public static AsnInfo parseOutput(Long asn, String source, String rawOutput) {\n+        AsnInfo asnInfo = new AsnInfo(asn, source, rawOutput);\n+        // Split output into lines\n+        String[] lines = rawOutput.split(\"\\\\r?\\\\n\");\n+        for (String line : lines) {\n+            if (line.contains(\"ASName\") || line.contains(\"as-name\")) {\n+                getSubStringAfterColon(line).ifPresent(asnInfo::setAsName);\n+                continue;\n+            }\n+            if (line.contains(\"OrgName\") || line.contains(\"descr\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzk5MDI2Ng==", "bodyText": "Same here", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r557990266", "createdAt": "2021-01-15T08:01:52Z", "author": {"login": "christianpape"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/AsnInfo.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.bmp.adapter;\n+\n+import java.util.Optional;\n+\n+public class AsnInfo {\n+\n+    private Long asn;\n+    private String asName;\n+    private String orgId;\n+    private String orgName;\n+    private String address;\n+    private String city;\n+    private String stateProv;\n+    private String postalCode;\n+    private String country;\n+    private String source;\n+    private String rawOutput;\n+    private String remarks;\n+\n+    public AsnInfo(Long asn, String source, String rawOutput) {\n+        this.asn = asn;\n+        this.source = source;\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public Long getAsn() {\n+        return asn;\n+    }\n+\n+    public void setAsn(Long asn) {\n+        this.asn = asn;\n+    }\n+\n+    public String getAsName() {\n+        return asName;\n+    }\n+\n+    public void setAsName(String asName) {\n+        this.asName = asName;\n+    }\n+\n+    public String getOrgId() {\n+        return orgId;\n+    }\n+\n+    public void setOrgId(String orgId) {\n+        this.orgId = orgId;\n+    }\n+\n+    public String getOrgName() {\n+        return orgName;\n+    }\n+\n+    public void setOrgName(String orgName) {\n+        this.orgName = orgName;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    public String getCity() {\n+        return city;\n+    }\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public String getStateProv() {\n+        return stateProv;\n+    }\n+\n+    public void setStateProv(String stateProv) {\n+        this.stateProv = stateProv;\n+    }\n+\n+    public String getPostalCode() {\n+        return postalCode;\n+    }\n+\n+    public void setPostalCode(String postalCode) {\n+        this.postalCode = postalCode;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    public void setSource(String source) {\n+        this.source = source;\n+    }\n+\n+    public String getRawOutput() {\n+        return rawOutput;\n+    }\n+\n+    public void setRawOutput(String rawOutput) {\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public String getRemarks() {\n+        return remarks;\n+    }\n+\n+    public void setRemarks(String remarks) {\n+        this.remarks = remarks;\n+    }\n+\n+    public static AsnInfo parseOutput(Long asn, String source, String rawOutput) {\n+        AsnInfo asnInfo = new AsnInfo(asn, source, rawOutput);\n+        // Split output into lines\n+        String[] lines = rawOutput.split(\"\\\\r?\\\\n\");\n+        for (String line : lines) {\n+            if (line.contains(\"ASName\") || line.contains(\"as-name\")) {\n+                getSubStringAfterColon(line).ifPresent(asnInfo::setAsName);\n+                continue;\n+            }\n+            if (line.contains(\"OrgName\") || line.contains(\"descr\")) {\n+                getSubStringAfterColon(line).ifPresent(asnInfo::setOrgName);\n+                continue;\n+            }\n+            if (line.contains(\"OrgId\") || line.contains(\"org\")) {\n+                getSubStringAfterColon(line).ifPresent(asnInfo::setOrgId);\n+                continue;\n+            }\n+            if (line.contains(\"Address\") || line.contains(\"descr\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzk5OTQyMQ==", "bodyText": "Remarks are missing, right?", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r557999421", "createdAt": "2021-01-15T08:08:26Z", "author": {"login": "christianpape"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpMessagePersister.java", "diffHunk": "@@ -540,6 +600,119 @@ private BmpGlobalIpRib buildGlobalIpRib(PrefixByAS prefixByAS) {\n \n     }\n \n+    private BmpAsnInfo fetchAndBuildAsnInfo(Long asn) {\n+        Optional<AsnInfo> asnInfoOptional = BmpWhoIsClient.getAsnInfo(asn);\n+        if (asnInfoOptional.isPresent()) {\n+            BmpAsnInfo bmpAsnInfo = new BmpAsnInfo();\n+            AsnInfo asnInfo = asnInfoOptional.get();\n+            bmpAsnInfo.setAsn(asnInfo.getAsn());\n+            bmpAsnInfo.setOrgId(asnInfo.getOrgId());\n+            bmpAsnInfo.setAsName(asnInfo.getAsName());\n+            bmpAsnInfo.setOrgName(asnInfo.getOrgName());\n+            bmpAsnInfo.setAddress(asnInfo.getAddress());\n+            bmpAsnInfo.setCity(asnInfo.getCity());\n+            bmpAsnInfo.setStateProv(asnInfo.getStateProv());\n+            bmpAsnInfo.setPostalCode(asnInfo.getPostalCode());\n+            bmpAsnInfo.setCountry(asnInfo.getCountry());\n+            bmpAsnInfo.setSource(asnInfo.getSource());\n+            bmpAsnInfo.setRawOutput(asnInfo.getRawOutput());\n+            bmpAsnInfo.setLastUpdated(Date.from(Instant.now()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODAxNDkyNA==", "bodyText": "This applies to all the other new headers too", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r558014924", "createdAt": "2021-01-15T08:18:25Z", "author": {"login": "christianpape"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/AsnInfo.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzk4MTkyMA=="}, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA0MDg4OA==", "bodyText": "I do not understand why the prefix is tried to be parsed twice. StringUtils.parseInt also uses Integer.parseInt().", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r558040888", "createdAt": "2021-01-15T08:36:14Z", "author": {"login": "christianpape"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/RouteInfo.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.bmp.adapter;\n+\n+import java.net.InetAddress;\n+import java.util.Optional;\n+\n+import org.opennms.core.utils.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class RouteInfo {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(RouteInfo.class);\n+\n+    private String prefix;\n+\n+    private Integer prefixLen;\n+\n+    private String description;\n+\n+    private Long originAs;\n+\n+    private String source;\n+\n+    public String getPrefix() {\n+        return prefix;\n+    }\n+\n+    public void setPrefix(String prefix) {\n+        this.prefix = prefix;\n+    }\n+\n+    public Integer getPrefixLen() {\n+        return prefixLen;\n+    }\n+\n+    public void setPrefixLen(Integer prefixLen) {\n+        this.prefixLen = prefixLen;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public Long getOriginAs() {\n+        return originAs;\n+    }\n+\n+    public void setOriginAs(Long originAs) {\n+        this.originAs = originAs;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    public void setSource(String source) {\n+        this.source = source;\n+    }\n+\n+    public static RouteInfo parseOutput(String rawOutput) {\n+        RouteInfo routeInfo = new RouteInfo();\n+        // Split output into lines\n+        String[] lines = rawOutput.split(\"\\\\r?\\\\n\");\n+        for (String line : lines) {\n+            if (line.contains(\"route\")) {\n+                getSubStringAfterColon(line).ifPresent(route -> {\n+                    if (route.contains(\"/\")) {\n+                        String[] prefixArray = route.split(\"/\", 2);\n+                        if(isValidIpAddress(prefixArray[0])) {\n+                            routeInfo.setPrefix(prefixArray[0]);\n+                        }\n+                        Integer prefixLen = StringUtils.parseInt(prefixArray[1], null);\n+                        if (prefixLen != null) {\n+                            routeInfo.setPrefixLen(Integer.parseInt(prefixArray[1]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA0OTM4Mg==", "bodyText": "should the subCode added here too?", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r558049382", "createdAt": "2021-01-15T08:41:32Z", "author": {"login": "christianpape"}, "path": "features/telemetry/protocols/bmp/persistence/api/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/persistence/api/BmpPeer.java", "diffHunk": "@@ -397,6 +419,7 @@ public boolean equals(Object o) {\n                 Objects.equals(bmpRouter, bmpPeer.bmpRouter) &&\n                 Objects.equals(peerRd, bmpPeer.peerRd) &&\n                 Objects.equals(peerAddr, bmpPeer.peerAddr) &&\n+                Objects.equals(peerAsn, bmpPeer.peerAsn) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA0OTcxMg==", "bodyText": "same here", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r558049712", "createdAt": "2021-01-15T08:41:44Z", "author": {"login": "christianpape"}, "path": "features/telemetry/protocols/bmp/persistence/api/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/persistence/api/BmpPeer.java", "diffHunk": "@@ -419,7 +442,7 @@ public boolean equals(Object o) {\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(hashId, bmpRouter, peerRd, isIpv4, peerAddr, name, peerBgpId, state, isL3VPNPeer, timestamp, isPrePolicy, geoIpStart, localIp, localBgpId, localPort, localHoldTime, localAsn, remotePort, remoteHoldTime, sentCapabilities, receivedCapabilities, bmpReason, bgpErrCode, errorText, isLocRib, isLocRibFiltered, tableName);\n+        return Objects.hash(hashId, bmpRouter, peerRd, isIpv4, peerAddr, peerAsn, name, peerBgpId, state, isL3VPNPeer, timestamp, isPrePolicy, geoIpStart, localIp, localBgpId, localPort, localHoldTime, localAsn, remotePort, remoteHoldTime, sentCapabilities, receivedCapabilities, bmpReason, bgpErrCode, errorText, isLocRib, isLocRibFiltered, tableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA0OTk2NQ==", "bodyText": "...and here", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r558049965", "createdAt": "2021-01-15T08:41:53Z", "author": {"login": "christianpape"}, "path": "features/telemetry/protocols/bmp/persistence/api/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/persistence/api/BmpPeer.java", "diffHunk": "@@ -431,6 +454,7 @@ public String toString() {\n                 \", peerRd='\" + peerRd + '\\'' +\n                 \", isIpv4=\" + isIpv4 +\n                 \", peerAddr='\" + peerAddr + '\\'' +\n+                \", peerAsn='\" + peerAsn + '\\'' +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5MTU0Mzc3", "url": "https://github.com/OpenNMS/opennms/pull/3239#pullrequestreview-569154377", "createdAt": "2021-01-15T10:49:38Z", "commit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMDo0OTozOFrOIUXeVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMDo0OTozOFrOIUXeVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyNzAzMA==", "bodyText": "As far as I know, there can be entries can appear more than once. For instance there can be multiple address entries if the address is more than one line. The OpenBMP-implementation concatenates these strings before persisting them. So, this is missing here.", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r558227030", "createdAt": "2021-01-15T10:49:38Z", "author": {"login": "christianpape"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/AsnInfo.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.bmp.adapter;\n+\n+import java.util.Optional;\n+\n+public class AsnInfo {\n+\n+    private Long asn;\n+    private String asName;\n+    private String orgId;\n+    private String orgName;\n+    private String address;\n+    private String city;\n+    private String stateProv;\n+    private String postalCode;\n+    private String country;\n+    private String source;\n+    private String rawOutput;\n+    private String remarks;\n+\n+    public AsnInfo(Long asn, String source, String rawOutput) {\n+        this.asn = asn;\n+        this.source = source;\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public Long getAsn() {\n+        return asn;\n+    }\n+\n+    public void setAsn(Long asn) {\n+        this.asn = asn;\n+    }\n+\n+    public String getAsName() {\n+        return asName;\n+    }\n+\n+    public void setAsName(String asName) {\n+        this.asName = asName;\n+    }\n+\n+    public String getOrgId() {\n+        return orgId;\n+    }\n+\n+    public void setOrgId(String orgId) {\n+        this.orgId = orgId;\n+    }\n+\n+    public String getOrgName() {\n+        return orgName;\n+    }\n+\n+    public void setOrgName(String orgName) {\n+        this.orgName = orgName;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    public String getCity() {\n+        return city;\n+    }\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public String getStateProv() {\n+        return stateProv;\n+    }\n+\n+    public void setStateProv(String stateProv) {\n+        this.stateProv = stateProv;\n+    }\n+\n+    public String getPostalCode() {\n+        return postalCode;\n+    }\n+\n+    public void setPostalCode(String postalCode) {\n+        this.postalCode = postalCode;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    public void setSource(String source) {\n+        this.source = source;\n+    }\n+\n+    public String getRawOutput() {\n+        return rawOutput;\n+    }\n+\n+    public void setRawOutput(String rawOutput) {\n+        this.rawOutput = rawOutput;\n+    }\n+\n+    public String getRemarks() {\n+        return remarks;\n+    }\n+\n+    public void setRemarks(String remarks) {\n+        this.remarks = remarks;\n+    }\n+\n+    public static AsnInfo parseOutput(Long asn, String source, String rawOutput) {\n+        AsnInfo asnInfo = new AsnInfo(asn, source, rawOutput);\n+        // Split output into lines\n+        String[] lines = rawOutput.split(\"\\\\r?\\\\n\");\n+        for (String line : lines) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87f009bf7b4014d6c366485c93e794e694d72146"}, "originalPosition": 154}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d729427d26fee7a31642f9dc3fa20b71d3dda3c7", "author": {"user": {"login": "cgorantla", "name": "Chandra Gorantla"}}, "url": "https://github.com/OpenNMS/opennms/commit/d729427d26fee7a31642f9dc3fa20b71d3dda3c7", "committedDate": "2021-01-20T01:38:01Z", "message": "NMS-12963: Handle review comments"}, "afterCommit": {"oid": "9b529b5e499a96ec8c6087694bd59c3e5911fe9c", "author": {"user": {"login": "cgorantla", "name": "Chandra Gorantla"}}, "url": "https://github.com/OpenNMS/opennms/commit/9b529b5e499a96ec8c6087694bd59c3e5911fe9c", "committedDate": "2021-01-20T01:46:41Z", "message": "NMS-12963: Handle review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0e49e8b033f585eab78160db5fa6e83a25e6b01", "author": {"user": {"login": "cgorantla", "name": "Chandra Gorantla"}}, "url": "https://github.com/OpenNMS/opennms/commit/d0e49e8b033f585eab78160db5fa6e83a25e6b01", "committedDate": "2021-01-21T16:04:56Z", "message": "NMS-12963: Handle review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9b529b5e499a96ec8c6087694bd59c3e5911fe9c", "author": {"user": {"login": "cgorantla", "name": "Chandra Gorantla"}}, "url": "https://github.com/OpenNMS/opennms/commit/9b529b5e499a96ec8c6087694bd59c3e5911fe9c", "committedDate": "2021-01-20T01:46:41Z", "message": "NMS-12963: Handle review comments"}, "afterCommit": {"oid": "d0e49e8b033f585eab78160db5fa6e83a25e6b01", "author": {"user": {"login": "cgorantla", "name": "Chandra Gorantla"}}, "url": "https://github.com/OpenNMS/opennms/commit/d0e49e8b033f585eab78160db5fa6e83a25e6b01", "committedDate": "2021-01-21T16:04:56Z", "message": "NMS-12963: Handle review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0MDUwMjY4", "url": "https://github.com/OpenNMS/opennms/pull/3239#pullrequestreview-574050268", "createdAt": "2021-01-22T08:41:03Z", "commit": {"oid": "d0e49e8b033f585eab78160db5fa6e83a25e6b01"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc3c5b6fb7a86fc012d0719c2cdee6aba5cc34ff", "author": {"user": {"login": "cgorantla", "name": "Chandra Gorantla"}}, "url": "https://github.com/OpenNMS/opennms/commit/dc3c5b6fb7a86fc012d0719c2cdee6aba5cc34ff", "committedDate": "2021-01-22T17:30:57Z", "message": "NMS-12963: Handle review comments\n\nremove a for AS query.\nHandle multiple lines in address/remarks/orgId"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34e49f4cb8ca5ba1010b4747a7497c82b11d5e0b", "author": {"user": {"login": "cgorantla", "name": "Chandra Gorantla"}}, "url": "https://github.com/OpenNMS/opennms/commit/34e49f4cb8ca5ba1010b4747a7497c82b11d5e0b", "committedDate": "2021-01-26T13:55:02Z", "message": "Merge branch 'develop' into jira/NMS-12963"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89f2214ddb4c883f05780435c9ee9d051c9daf46", "author": {"user": {"login": "cgorantla", "name": "Chandra Gorantla"}}, "url": "https://github.com/OpenNMS/opennms/commit/89f2214ddb4c883f05780435c9ee9d051c9daf46", "committedDate": "2021-01-26T13:55:17Z", "message": "Merge branch 'features/bmp' into jira/NMS-12963"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxMTk3MDU0", "url": "https://github.com/OpenNMS/opennms/pull/3239#pullrequestreview-581197054", "createdAt": "2021-02-02T10:28:06Z", "commit": {"oid": "89f2214ddb4c883f05780435c9ee9d051c9daf46"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMDoyODowN1rOIeJ5cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMDozNjoyM1rOIeKPBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODQ5MDM1NQ==", "bodyText": "Can we have a test for this?", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r568490355", "createdAt": "2021-02-02T10:28:07Z", "author": {"login": "fooker"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpMessagePersister.java", "diffHunk": "@@ -540,6 +600,120 @@ private BmpGlobalIpRib buildGlobalIpRib(PrefixByAS prefixByAS) {\n \n     }\n \n+    private BmpAsnInfo fetchAndBuildAsnInfo(Long asn) {\n+        Optional<AsnInfo> asnInfoOptional = BmpWhoIsClient.getAsnInfo(asn);\n+        if (asnInfoOptional.isPresent()) {\n+            BmpAsnInfo bmpAsnInfo = new BmpAsnInfo();\n+            AsnInfo asnInfo = asnInfoOptional.get();\n+            bmpAsnInfo.setAsn(asnInfo.getAsn());\n+            bmpAsnInfo.setOrgId(asnInfo.getOrgId());\n+            bmpAsnInfo.setAsName(asnInfo.getAsName());\n+            bmpAsnInfo.setOrgName(asnInfo.getOrgName());\n+            bmpAsnInfo.setAddress(asnInfo.getAddress());\n+            bmpAsnInfo.setCity(asnInfo.getCity());\n+            bmpAsnInfo.setStateProv(asnInfo.getStateProv());\n+            bmpAsnInfo.setPostalCode(asnInfo.getPostalCode());\n+            bmpAsnInfo.setCountry(asnInfo.getCountry());\n+            bmpAsnInfo.setSource(asnInfo.getSource());\n+            bmpAsnInfo.setRawOutput(asnInfo.getRawOutput());\n+            bmpAsnInfo.setRemarks(asnInfo.getRemarks());\n+            bmpAsnInfo.setLastUpdated(Date.from(Instant.now()));\n+            return bmpAsnInfo;\n+        }\n+        return null;\n+    }\n+\n+    private BmpRouteInfo fetchAndBuildRouteInfo(String prefix) {\n+        Optional<RouteInfo> routeInfoOptional = BmpWhoIsClient.getRouteInfo(prefix);\n+        if (routeInfoOptional.isPresent() && routeInfoOptional.get().getPrefix() != null) {\n+            RouteInfo routeInfo = routeInfoOptional.get();\n+            Integer prefixLen = routeInfo.getPrefixLen();\n+            Long originAs = routeInfo.getOriginAs();\n+            BmpRouteInfo bmpRouteInfo = bmpRouteInfoDao.findByPrefix(routeInfo.getPrefix(), prefixLen, originAs);\n+            if (bmpRouteInfo == null) {\n+                bmpRouteInfo = new BmpRouteInfo();\n+                bmpRouteInfo.setPrefix(routeInfo.getPrefix());\n+                bmpRouteInfo.setPrefixLen(routeInfo.getPrefixLen());\n+                bmpRouteInfo.setDescr(routeInfo.getDescription());\n+                bmpRouteInfo.setOriginAs(routeInfo.getOriginAs());\n+                bmpRouteInfo.setSource(routeInfo.getSource());\n+            }\n+            bmpRouteInfo.setLastUpdated(Date.from(Instant.now()));\n+            return bmpRouteInfo;\n+        }\n+        return null;\n+    }\n+\n+    private List<BmpAsnPathAnalysis> buildBmpAsnPath(String asnPath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f2214ddb4c883f05780435c9ee9d051c9daf46"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODQ5MTY2NQ==", "bodyText": "This code path is never taken if i == 0 because asn will always be 0 on the first iteration.", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r568491665", "createdAt": "2021-02-02T10:29:58Z", "author": {"login": "fooker"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpMessagePersister.java", "diffHunk": "@@ -540,6 +600,120 @@ private BmpGlobalIpRib buildGlobalIpRib(PrefixByAS prefixByAS) {\n \n     }\n \n+    private BmpAsnInfo fetchAndBuildAsnInfo(Long asn) {\n+        Optional<AsnInfo> asnInfoOptional = BmpWhoIsClient.getAsnInfo(asn);\n+        if (asnInfoOptional.isPresent()) {\n+            BmpAsnInfo bmpAsnInfo = new BmpAsnInfo();\n+            AsnInfo asnInfo = asnInfoOptional.get();\n+            bmpAsnInfo.setAsn(asnInfo.getAsn());\n+            bmpAsnInfo.setOrgId(asnInfo.getOrgId());\n+            bmpAsnInfo.setAsName(asnInfo.getAsName());\n+            bmpAsnInfo.setOrgName(asnInfo.getOrgName());\n+            bmpAsnInfo.setAddress(asnInfo.getAddress());\n+            bmpAsnInfo.setCity(asnInfo.getCity());\n+            bmpAsnInfo.setStateProv(asnInfo.getStateProv());\n+            bmpAsnInfo.setPostalCode(asnInfo.getPostalCode());\n+            bmpAsnInfo.setCountry(asnInfo.getCountry());\n+            bmpAsnInfo.setSource(asnInfo.getSource());\n+            bmpAsnInfo.setRawOutput(asnInfo.getRawOutput());\n+            bmpAsnInfo.setRemarks(asnInfo.getRemarks());\n+            bmpAsnInfo.setLastUpdated(Date.from(Instant.now()));\n+            return bmpAsnInfo;\n+        }\n+        return null;\n+    }\n+\n+    private BmpRouteInfo fetchAndBuildRouteInfo(String prefix) {\n+        Optional<RouteInfo> routeInfoOptional = BmpWhoIsClient.getRouteInfo(prefix);\n+        if (routeInfoOptional.isPresent() && routeInfoOptional.get().getPrefix() != null) {\n+            RouteInfo routeInfo = routeInfoOptional.get();\n+            Integer prefixLen = routeInfo.getPrefixLen();\n+            Long originAs = routeInfo.getOriginAs();\n+            BmpRouteInfo bmpRouteInfo = bmpRouteInfoDao.findByPrefix(routeInfo.getPrefix(), prefixLen, originAs);\n+            if (bmpRouteInfo == null) {\n+                bmpRouteInfo = new BmpRouteInfo();\n+                bmpRouteInfo.setPrefix(routeInfo.getPrefix());\n+                bmpRouteInfo.setPrefixLen(routeInfo.getPrefixLen());\n+                bmpRouteInfo.setDescr(routeInfo.getDescription());\n+                bmpRouteInfo.setOriginAs(routeInfo.getOriginAs());\n+                bmpRouteInfo.setSource(routeInfo.getSource());\n+            }\n+            bmpRouteInfo.setLastUpdated(Date.from(Instant.now()));\n+            return bmpRouteInfo;\n+        }\n+        return null;\n+    }\n+\n+    private List<BmpAsnPathAnalysis> buildBmpAsnPath(String asnPath) {\n+\n+        List<BmpAsnPathAnalysis> bmpAsnPathAnalyses = new ArrayList<>();\n+        String[] asnArray = asnPath.split(\" \");\n+\n+        Long leftAsn = 0L;\n+        Long rightAsn = 0L;\n+        Long asn = 0L;\n+        for (int i = 0; i < asnArray.length; i++) {\n+            if (asnArray[i].length() <= 0)\n+                break;\n+\n+            try {\n+                asn = Long.valueOf(asnArray[i]);\n+            } catch (NumberFormatException e) {\n+                e.printStackTrace();\n+                break;\n+            }\n+\n+            if (asn > 0) {\n+                if (i + 1 < asnArray.length) {\n+\n+                    if (asnArray[i + 1].length() <= 0)\n+                        break;\n+\n+                    try {\n+                        rightAsn = Long.valueOf(asnArray[i + 1]);\n+\n+                    } catch (NumberFormatException e) {\n+                        e.printStackTrace();\n+                        break;\n+                    }\n+\n+                    if (rightAsn.equals(asn)) {\n+                        continue;\n+                    }\n+\n+                    Boolean isPeeringAsn = (i == 0 || i == 1) ? TRUE : FALSE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f2214ddb4c883f05780435c9ee9d051c9daf46"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODQ5Mzc5NA==", "bodyText": "Why not parse the ASNs into longs here? this would save some error handling in the loop.\nBy doing so, we can skip the whole update if the path in invalid.", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r568493794", "createdAt": "2021-02-02T10:33:12Z", "author": {"login": "fooker"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpMessagePersister.java", "diffHunk": "@@ -540,6 +600,120 @@ private BmpGlobalIpRib buildGlobalIpRib(PrefixByAS prefixByAS) {\n \n     }\n \n+    private BmpAsnInfo fetchAndBuildAsnInfo(Long asn) {\n+        Optional<AsnInfo> asnInfoOptional = BmpWhoIsClient.getAsnInfo(asn);\n+        if (asnInfoOptional.isPresent()) {\n+            BmpAsnInfo bmpAsnInfo = new BmpAsnInfo();\n+            AsnInfo asnInfo = asnInfoOptional.get();\n+            bmpAsnInfo.setAsn(asnInfo.getAsn());\n+            bmpAsnInfo.setOrgId(asnInfo.getOrgId());\n+            bmpAsnInfo.setAsName(asnInfo.getAsName());\n+            bmpAsnInfo.setOrgName(asnInfo.getOrgName());\n+            bmpAsnInfo.setAddress(asnInfo.getAddress());\n+            bmpAsnInfo.setCity(asnInfo.getCity());\n+            bmpAsnInfo.setStateProv(asnInfo.getStateProv());\n+            bmpAsnInfo.setPostalCode(asnInfo.getPostalCode());\n+            bmpAsnInfo.setCountry(asnInfo.getCountry());\n+            bmpAsnInfo.setSource(asnInfo.getSource());\n+            bmpAsnInfo.setRawOutput(asnInfo.getRawOutput());\n+            bmpAsnInfo.setRemarks(asnInfo.getRemarks());\n+            bmpAsnInfo.setLastUpdated(Date.from(Instant.now()));\n+            return bmpAsnInfo;\n+        }\n+        return null;\n+    }\n+\n+    private BmpRouteInfo fetchAndBuildRouteInfo(String prefix) {\n+        Optional<RouteInfo> routeInfoOptional = BmpWhoIsClient.getRouteInfo(prefix);\n+        if (routeInfoOptional.isPresent() && routeInfoOptional.get().getPrefix() != null) {\n+            RouteInfo routeInfo = routeInfoOptional.get();\n+            Integer prefixLen = routeInfo.getPrefixLen();\n+            Long originAs = routeInfo.getOriginAs();\n+            BmpRouteInfo bmpRouteInfo = bmpRouteInfoDao.findByPrefix(routeInfo.getPrefix(), prefixLen, originAs);\n+            if (bmpRouteInfo == null) {\n+                bmpRouteInfo = new BmpRouteInfo();\n+                bmpRouteInfo.setPrefix(routeInfo.getPrefix());\n+                bmpRouteInfo.setPrefixLen(routeInfo.getPrefixLen());\n+                bmpRouteInfo.setDescr(routeInfo.getDescription());\n+                bmpRouteInfo.setOriginAs(routeInfo.getOriginAs());\n+                bmpRouteInfo.setSource(routeInfo.getSource());\n+            }\n+            bmpRouteInfo.setLastUpdated(Date.from(Instant.now()));\n+            return bmpRouteInfo;\n+        }\n+        return null;\n+    }\n+\n+    private List<BmpAsnPathAnalysis> buildBmpAsnPath(String asnPath) {\n+\n+        List<BmpAsnPathAnalysis> bmpAsnPathAnalyses = new ArrayList<>();\n+        String[] asnArray = asnPath.split(\" \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f2214ddb4c883f05780435c9ee9d051c9daf46"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODQ5NTg3Nw==", "bodyText": "The loop can be simplified by iterating from i = 1 to i = asnArray.length - . The  you can use i-1 and i+1 for left and right ASN inside the loop.\nIn addition, the Origin AS handling can be done out of loop at the end.", "url": "https://github.com/OpenNMS/opennms/pull/3239#discussion_r568495877", "createdAt": "2021-02-02T10:36:23Z", "author": {"login": "fooker"}, "path": "features/telemetry/protocols/bmp/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/adapter/BmpMessagePersister.java", "diffHunk": "@@ -540,6 +600,120 @@ private BmpGlobalIpRib buildGlobalIpRib(PrefixByAS prefixByAS) {\n \n     }\n \n+    private BmpAsnInfo fetchAndBuildAsnInfo(Long asn) {\n+        Optional<AsnInfo> asnInfoOptional = BmpWhoIsClient.getAsnInfo(asn);\n+        if (asnInfoOptional.isPresent()) {\n+            BmpAsnInfo bmpAsnInfo = new BmpAsnInfo();\n+            AsnInfo asnInfo = asnInfoOptional.get();\n+            bmpAsnInfo.setAsn(asnInfo.getAsn());\n+            bmpAsnInfo.setOrgId(asnInfo.getOrgId());\n+            bmpAsnInfo.setAsName(asnInfo.getAsName());\n+            bmpAsnInfo.setOrgName(asnInfo.getOrgName());\n+            bmpAsnInfo.setAddress(asnInfo.getAddress());\n+            bmpAsnInfo.setCity(asnInfo.getCity());\n+            bmpAsnInfo.setStateProv(asnInfo.getStateProv());\n+            bmpAsnInfo.setPostalCode(asnInfo.getPostalCode());\n+            bmpAsnInfo.setCountry(asnInfo.getCountry());\n+            bmpAsnInfo.setSource(asnInfo.getSource());\n+            bmpAsnInfo.setRawOutput(asnInfo.getRawOutput());\n+            bmpAsnInfo.setRemarks(asnInfo.getRemarks());\n+            bmpAsnInfo.setLastUpdated(Date.from(Instant.now()));\n+            return bmpAsnInfo;\n+        }\n+        return null;\n+    }\n+\n+    private BmpRouteInfo fetchAndBuildRouteInfo(String prefix) {\n+        Optional<RouteInfo> routeInfoOptional = BmpWhoIsClient.getRouteInfo(prefix);\n+        if (routeInfoOptional.isPresent() && routeInfoOptional.get().getPrefix() != null) {\n+            RouteInfo routeInfo = routeInfoOptional.get();\n+            Integer prefixLen = routeInfo.getPrefixLen();\n+            Long originAs = routeInfo.getOriginAs();\n+            BmpRouteInfo bmpRouteInfo = bmpRouteInfoDao.findByPrefix(routeInfo.getPrefix(), prefixLen, originAs);\n+            if (bmpRouteInfo == null) {\n+                bmpRouteInfo = new BmpRouteInfo();\n+                bmpRouteInfo.setPrefix(routeInfo.getPrefix());\n+                bmpRouteInfo.setPrefixLen(routeInfo.getPrefixLen());\n+                bmpRouteInfo.setDescr(routeInfo.getDescription());\n+                bmpRouteInfo.setOriginAs(routeInfo.getOriginAs());\n+                bmpRouteInfo.setSource(routeInfo.getSource());\n+            }\n+            bmpRouteInfo.setLastUpdated(Date.from(Instant.now()));\n+            return bmpRouteInfo;\n+        }\n+        return null;\n+    }\n+\n+    private List<BmpAsnPathAnalysis> buildBmpAsnPath(String asnPath) {\n+\n+        List<BmpAsnPathAnalysis> bmpAsnPathAnalyses = new ArrayList<>();\n+        String[] asnArray = asnPath.split(\" \");\n+\n+        Long leftAsn = 0L;\n+        Long rightAsn = 0L;\n+        Long asn = 0L;\n+        for (int i = 0; i < asnArray.length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f2214ddb4c883f05780435c9ee9d051c9daf46"}, "originalPosition": 209}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15b6f07c83165fa93cd0c8129ccfedffd08e4973", "author": {"user": {"login": "cgorantla", "name": "Chandra Gorantla"}}, "url": "https://github.com/OpenNMS/opennms/commit/15b6f07c83165fa93cd0c8129ccfedffd08e4973", "committedDate": "2021-02-03T13:59:03Z", "message": "NMS-12963: Handle review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgyMzk1NzY3", "url": "https://github.com/OpenNMS/opennms/pull/3239#pullrequestreview-582395767", "createdAt": "2021-02-03T14:05:11Z", "commit": {"oid": "15b6f07c83165fa93cd0c8129ccfedffd08e4973"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3873, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}