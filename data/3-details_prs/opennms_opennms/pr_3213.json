{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwODQ4OTI4", "number": 3213, "title": "NMS 12810: Update Provisioning chapter", "bodyText": "All Contributors\n\n[ x] Have you read and followed our Contribution Guidelines?\n Have you made an issue in the OpenNMS issue tracker?If so, you should:\n\nupdate the title of this PR to be of the format: ${JIRA-ISSUE-NUMBER}: subject of pull request\nupdate the JIRA link at the bottom of this comment to refer to the real issue number\nprefix your commit messages with the issue number, if possible\n\n\n[ x] Have you made a comment in that issue which points back to this PR?\n[ x] Have you updated the JIRA link at the bottom of this comment to link to your issue?\n If this is a new or updated feature, is there documentation for the new behavior?\n If this is new code, are there unit and/or integration tests?\n If this PR targets a foundation-* branch, does it avoid changing files in $OPENNMS_HOME/etc/?\n\nPull Request Process\nOne or more reviewers should be assigned to each PR.\nIf you know that a particular person is subject matter expert in the area your PR affects, feel free to assign one or more reviewers when you create this PR, otherwise reviewers will be assigned for you.\nIf you have made additions or changes to the documentation, or if you need documentation for these code changes, please make sure a technical writer has looked it over.\nOnce the reviewer(s) accept the PR and the branch passes continuous integration, the PR is eligible for merge.\nAt that time, if you have commit access (are an OpenNMS Group employee or a member of the Order of the Green Polo) you are welcome to merge the PR.\nOtherwise, a reviewer can merge it for you.\nThanks for taking time to contribute!\nExternal References\n\nJIRA (Issue Tracker): http://issues.opennms.org/browse/NMS-12810", "createdAt": "2020-11-13T20:58:31Z", "url": "https://github.com/OpenNMS/opennms/pull/3213", "merged": true, "mergeCommit": {"oid": "2d57acc49a8f849e0761eb62ab9b621e20a70dbb"}, "closed": true, "closedAt": "2020-11-18T15:48:41Z", "author": {"login": "Bonrob2"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdBKbJsAH2gAyNTIwODQ4OTI4OjM0ZTVhNDAwNTNkNDhhOWI0NGMyOTNhODZmYmVjNWYxNTMyZmEzNjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddwAXggFqTUzMzU3MTgwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "34e5a40053d48a9b44c293a86fbec5f1532fa361", "author": {"user": {"login": "Bonrob2", "name": null}}, "url": "https://github.com/OpenNMS/opennms/commit/34e5a40053d48a9b44c293a86fbec5f1532fa361", "committedDate": "2020-08-21T19:59:52Z", "message": "NMS:12810: Updated Provisioning chapter\n\nNMS-12810: restructured TOC in preparation for rewrite of provisioning chapter."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "280c03f0d8709c4b5ab47499fc632fa40081b51e", "author": {"user": {"login": "Bonrob2", "name": null}}, "url": "https://github.com/OpenNMS/opennms/commit/280c03f0d8709c4b5ab47499fc632fa40081b51e", "committedDate": "2020-08-24T21:18:10Z", "message": "NMS-12810: Update provisioning chapter\n\nNMS-12810: Reworking the provisioning chapter to be leaner and up to date."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "563a30de6388a6c3aea6e88b15e615e0d53272cb", "author": {"user": {"login": "Bonrob2", "name": null}}, "url": "https://github.com/OpenNMS/opennms/commit/563a30de6388a6c3aea6e88b15e615e0d53272cb", "committedDate": "2020-08-31T20:00:15Z", "message": "NMS-12810: Update Provisioning chapter\n\nNMS-12810: made updates to provisioning chapter."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "caad77e31b478c1a268ccc85fe7adc173ed5c371", "author": {"user": {"login": "Bonrob2", "name": null}}, "url": "https://github.com/OpenNMS/opennms/commit/caad77e31b478c1a268ccc85fe7adc173ed5c371", "committedDate": "2020-09-01T20:10:59Z", "message": "NMS-12810: Update provisioning chapter\n\nNMS-12810: updates to provisioning chapter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e194a2785267fa1713c2b1611f1c81fddf2c875", "author": {"user": {"login": "Bonrob2", "name": null}}, "url": "https://github.com/OpenNMS/opennms/commit/3e194a2785267fa1713c2b1611f1c81fddf2c875", "committedDate": "2020-09-04T18:16:56Z", "message": "NMS-12810: Update provisioning chapter\n\nadditional changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1da913d03134b6ebe15143893ed000bcb337ca74", "author": {"user": {"login": "Bonrob2", "name": null}}, "url": "https://github.com/OpenNMS/opennms/commit/1da913d03134b6ebe15143893ed000bcb337ca74", "committedDate": "2020-09-17T13:46:23Z", "message": "NMS-12810: update to provisioning chapter\n\nNMS-12810: document update to provisioning chapter ... note re: structure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b1535b6d51ec69c948ca959c68402f915949f3c", "author": {"user": {"login": "Bonrob2", "name": null}}, "url": "https://github.com/OpenNMS/opennms/commit/0b1535b6d51ec69c948ca959c68402f915949f3c", "committedDate": "2020-10-21T22:22:39Z", "message": "NMS-12810: Updates to provisioing chapter\n\nNMS-12810: Updates to provisioing chapter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5cf59764f9dc60e9345586a06e75d9b23da1888", "author": {"user": {"login": "Bonrob2", "name": null}}, "url": "https://github.com/OpenNMS/opennms/commit/e5cf59764f9dc60e9345586a06e75d9b23da1888", "committedDate": "2020-10-22T21:26:13Z", "message": "NMS-12810: Updates to provisioning chapter\n\nNMS-12810: Updates to provisioning chapter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4843981a5c818cab321559f51fa5ad58c6e3bcaf", "author": {"user": {"login": "Bonrob2", "name": null}}, "url": "https://github.com/OpenNMS/opennms/commit/4843981a5c818cab321559f51fa5ad58c6e3bcaf", "committedDate": "2020-10-27T21:15:48Z", "message": "NMS:12810: Provisioning chapter updates\n\nNMS:12810: Provisioning chapter updates, new content"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2cf58cbc58bcdab53bfc60edde89c907b5575d0", "author": {"user": {"login": "Bonrob2", "name": null}}, "url": "https://github.com/OpenNMS/opennms/commit/b2cf58cbc58bcdab53bfc60edde89c907b5575d0", "committedDate": "2020-10-28T21:12:03Z", "message": "NMS-12810: provisioning documentation updates\n\nNMS-12810: provisioning documentation updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94214bf6ea53f0da77efd0bb35ed9a8e2162f849", "author": {"user": {"login": "Bonrob2", "name": null}}, "url": "https://github.com/OpenNMS/opennms/commit/94214bf6ea53f0da77efd0bb35ed9a8e2162f849", "committedDate": "2020-10-29T19:52:30Z", "message": "NMS-12810: Update Provisioning chapter\n\nNMS-12810: rewrote introduction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f345027eb2ec77f902f8113283bb5c2fa72b575", "author": {"user": {"login": "Bonrob2", "name": null}}, "url": "https://github.com/OpenNMS/opennms/commit/9f345027eb2ec77f902f8113283bb5c2fa72b575", "committedDate": "2020-10-29T22:22:07Z", "message": "NMS-12810: provisioning chapter updates\n\nNMS-12810: provisioning chapter updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c66a27290fbfe505ae8c6d3f8b4b12ff894933ed", "author": {"user": {"login": "Bonrob2", "name": null}}, "url": "https://github.com/OpenNMS/opennms/commit/c66a27290fbfe505ae8c6d3f8b4b12ff894933ed", "committedDate": "2020-10-30T20:35:41Z", "message": "NMS-12810: Update provisioning chapter\n\nNMS-12810: Update provisioning chapter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ae4ac9352e4e0a7724cbc3b57664d0bb5ac2bba", "author": {"user": {"login": "Bonrob2", "name": null}}, "url": "https://github.com/OpenNMS/opennms/commit/1ae4ac9352e4e0a7724cbc3b57664d0bb5ac2bba", "committedDate": "2020-11-05T21:33:47Z", "message": "NMS-12810: Update provisioning chapter\n\nNMS-12810: added procedure for editing default foreign source definition in the UI."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c911cf97bdce97e7b39b3329faae7d3c065e7ca6", "author": {"user": {"login": "Bonrob2", "name": null}}, "url": "https://github.com/OpenNMS/opennms/commit/c911cf97bdce97e7b39b3329faae7d3c065e7ca6", "committedDate": "2020-11-09T22:11:58Z", "message": "NMS-12810: Update Provisioning chapter\n\nNMS-12810: Updated getting started and introduction in provisioning chapter."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e9c7a7e06c9e42296be4030b400a4e46126d21b", "author": {"user": {"login": "Bonrob2", "name": null}}, "url": "https://github.com/OpenNMS/opennms/commit/4e9c7a7e06c9e42296be4030b400a4e46126d21b", "committedDate": "2020-11-10T21:40:13Z", "message": "NMS-12810: updates to provisioning chapter\n\nNMS-12810: additional updates to provisioning chapter, requisition section"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7896d33ec6f4b390bd0f39d21c7d054b04e72bbe", "author": {"user": {"login": "Bonrob2", "name": null}}, "url": "https://github.com/OpenNMS/opennms/commit/7896d33ec6f4b390bd0f39d21c7d054b04e72bbe", "committedDate": "2020-11-11T20:26:50Z", "message": "NMS-12810: updating provisioning chapter\n\nNMS-12810: added requisition section."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef648534cfafe8b94ed292a5735efd9b052861c3", "author": {"user": {"login": "Bonrob2", "name": null}}, "url": "https://github.com/OpenNMS/opennms/commit/ef648534cfafe8b94ed292a5735efd9b052861c3", "committedDate": "2020-11-12T18:59:55Z", "message": "NMS-12810: update provisioning chapter\n\nNMS-12810: added directed discovery section to provisioning chapter."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a83274f824987acfac9dd8e6825089ac4ffaac1", "author": {"user": {"login": "Bonrob2", "name": null}}, "url": "https://github.com/OpenNMS/opennms/commit/1a83274f824987acfac9dd8e6825089ac4ffaac1", "committedDate": "2020-11-13T20:56:23Z", "message": "NMS-12810: update provisioning chapter\n\nNMS-12810: updated provisioning chapter to document discovery process."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNTQ2NDE3", "url": "https://github.com/OpenNMS/opennms/pull/3213#pullrequestreview-532546417", "createdAt": "2020-11-17T16:21:51Z", "commit": {"oid": "1a83274f824987acfac9dd8e6825089ac4ffaac1"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjoyMTo1MVrOH09dyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjo1OTowNVrOH0_SFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5NTA1MA==", "bodyText": "No blocker, just as an idea. We describe the Path Outage in Service Assurance/Path Outages maybe just make a hint here?", "url": "https://github.com/OpenNMS/opennms/pull/3213#discussion_r525295050", "createdAt": "2020-11-17T16:21:51Z", "author": {"login": "indigo423"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/provisioning/directed-discover.adoc", "diffHunk": "@@ -0,0 +1,80 @@\n+\n+// Allow GitHub image rendering\n+:imagesdir: ../../../images\n+\n+[[directed-discovery]]\n+=== Directed Discovery\n+\n+Directed discovery is the process of manually adding nodes to {opennms-product-name}.\n+There are three ways to do this:\n+\n+* xref:requisition-add-nodes[directly in the requisition UI]\n+* xref:quick-add-node [quick add node]\n+* manually adding an interface\n+\n+Make sure you complete the tasks in the xref:getting-started.adoc[Getting Started] section before adding nodes. \n+\n+[[requisition-add-nodes]]\n+==== Add Nodes through the Requisition UI\n+\n+Before adding nodes to a requisition, you must xref:requisition-create[create a requisition].\n+\n+. In the web UI, click the gear icon in the top right. \n+. In the *Provisioning* area, choose *Manage Provisioning Requisition*.\n+. Click the edit icon beside the requisition you want to add nodes to. \n+. Click *Add Node*. \n+.. {opennms-product-name} auto-generates the foreign ID used to identify this node. \n+. Fill out information in each of the tabs and click *Save*. \n++\n+* basic information (node label, auto-generated foreign ID, location)\n+* path outage (configure network path to limit notifications from nodes behind other nodes)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a83274f824987acfac9dd8e6825089ac4ffaac1"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMwMDM4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            . Fill in optional information in the apporpriate fields:\n          \n          \n            \n            . Fill in optional information in the appropriate fields:", "url": "https://github.com/OpenNMS/opennms/pull/3213#discussion_r525300384", "createdAt": "2020-11-17T16:28:29Z", "author": {"login": "indigo423"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/provisioning/directed-discover.adoc", "diffHunk": "@@ -0,0 +1,80 @@\n+\n+// Allow GitHub image rendering\n+:imagesdir: ../../../images\n+\n+[[directed-discovery]]\n+=== Directed Discovery\n+\n+Directed discovery is the process of manually adding nodes to {opennms-product-name}.\n+There are three ways to do this:\n+\n+* xref:requisition-add-nodes[directly in the requisition UI]\n+* xref:quick-add-node [quick add node]\n+* manually adding an interface\n+\n+Make sure you complete the tasks in the xref:getting-started.adoc[Getting Started] section before adding nodes. \n+\n+[[requisition-add-nodes]]\n+==== Add Nodes through the Requisition UI\n+\n+Before adding nodes to a requisition, you must xref:requisition-create[create a requisition].\n+\n+. In the web UI, click the gear icon in the top right. \n+. In the *Provisioning* area, choose *Manage Provisioning Requisition*.\n+. Click the edit icon beside the requisition you want to add nodes to. \n+. Click *Add Node*. \n+.. {opennms-product-name} auto-generates the foreign ID used to identify this node. \n+. Fill out information in each of the tabs and click *Save*. \n++\n+* basic information (node label, auto-generated foreign ID, location)\n+* path outage (configure network path to limit notifications from nodes behind other nodes)\n+* interfaces (add interface IP addresses and services)\n+* assets (pre-defined metadata types)\n+* categories (label/tag for type of node, e.g., routers, production, switches)\n+* meta-data (customized asset information)\n+\n+. Repeat for each node you want to add. \n+. Click *Return* to view the list of nodes you have added. \n+. Click *Synchronize* to provision them to the {opennms-product-name} database. \n+\n+[[quick-add-node]]\n+==== Add a Single Node to a Requsition\n+\n+The quick-add node feature allows you to add a single node to an existing provisioning requisition, and set the community string at the same time the node is provisioned.  \n+\n+When you configure an individual IP address within an existing range, {opennms-product-name} will split the range into two, and add a specific entry for the IP address. \n+See xref:quick-add-xml[Quick-Add Node Configuration] for the resulting XML configuration.\n+\n+To use the quick-add node feature, follow these steps:\n+\n+. Make sure you have xref:requisition-create[created a requisition]. \n+. In the web UI, click the *+* sign beside the gear icon.\n+. Specify the requisition to which you want to add the node. \n+\n++\n+IMPORTANT: This operation overrides any un-synchronized modifications in the selected requisition.\n+\n+. Add the IP address and node label. \n+. Fill in optional information in the apporpriate fields:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a83274f824987acfac9dd8e6825089ac4ffaac1"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMwMzMyNQ==", "bodyText": "To my knowledge and I'm not 100% sure here, this whole input field section is just used with the Rancid plugin. Which we don't have by default installed. Nothing will work here. We shouldn't mention it and probably remove it. @agalue @jeffgdotorg Can you give some input here, what do you think?", "url": "https://github.com/OpenNMS/opennms/pull/3213#discussion_r525303325", "createdAt": "2020-11-17T16:31:57Z", "author": {"login": "indigo423"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/provisioning/directed-discover.adoc", "diffHunk": "@@ -0,0 +1,80 @@\n+\n+// Allow GitHub image rendering\n+:imagesdir: ../../../images\n+\n+[[directed-discovery]]\n+=== Directed Discovery\n+\n+Directed discovery is the process of manually adding nodes to {opennms-product-name}.\n+There are three ways to do this:\n+\n+* xref:requisition-add-nodes[directly in the requisition UI]\n+* xref:quick-add-node [quick add node]\n+* manually adding an interface\n+\n+Make sure you complete the tasks in the xref:getting-started.adoc[Getting Started] section before adding nodes. \n+\n+[[requisition-add-nodes]]\n+==== Add Nodes through the Requisition UI\n+\n+Before adding nodes to a requisition, you must xref:requisition-create[create a requisition].\n+\n+. In the web UI, click the gear icon in the top right. \n+. In the *Provisioning* area, choose *Manage Provisioning Requisition*.\n+. Click the edit icon beside the requisition you want to add nodes to. \n+. Click *Add Node*. \n+.. {opennms-product-name} auto-generates the foreign ID used to identify this node. \n+. Fill out information in each of the tabs and click *Save*. \n++\n+* basic information (node label, auto-generated foreign ID, location)\n+* path outage (configure network path to limit notifications from nodes behind other nodes)\n+* interfaces (add interface IP addresses and services)\n+* assets (pre-defined metadata types)\n+* categories (label/tag for type of node, e.g., routers, production, switches)\n+* meta-data (customized asset information)\n+\n+. Repeat for each node you want to add. \n+. Click *Return* to view the list of nodes you have added. \n+. Click *Synchronize* to provision them to the {opennms-product-name} database. \n+\n+[[quick-add-node]]\n+==== Add a Single Node to a Requsition\n+\n+The quick-add node feature allows you to add a single node to an existing provisioning requisition, and set the community string at the same time the node is provisioned.  \n+\n+When you configure an individual IP address within an existing range, {opennms-product-name} will split the range into two, and add a specific entry for the IP address. \n+See xref:quick-add-xml[Quick-Add Node Configuration] for the resulting XML configuration.\n+\n+To use the quick-add node feature, follow these steps:\n+\n+. Make sure you have xref:requisition-create[created a requisition]. \n+. In the web UI, click the *+* sign beside the gear icon.\n+. Specify the requisition to which you want to add the node. \n+\n++\n+IMPORTANT: This operation overrides any un-synchronized modifications in the selected requisition.\n+\n+. Add the IP address and node label. \n+. Fill in optional information in the apporpriate fields:\n+\n++\n+* SNMP parameters (apply only to the node being requisitioned)\n+* surveillance category membership (like a tag for the type of node, e.g., router, production, switch)\n+* CLI authentication parameters (used only if one or more provisioning adapters are configured to use them)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a83274f824987acfac9dd8e6825089ac4ffaac1"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMxMDQxMw==", "bodyText": "The Manually Add An Interface topic is a little bit toxic and some baggage we carry from history we haven't cleaned up. It is like a Single IP discovery without adding a node into a requisition. @jeffgdotorg @agalue maybe we shouldn't highlight this function in the documentation and encourage people to always use requisitions.", "url": "https://github.com/OpenNMS/opennms/pull/3213#discussion_r525310413", "createdAt": "2020-11-17T16:40:04Z", "author": {"login": "indigo423"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/provisioning/directed-discover.adoc", "diffHunk": "@@ -0,0 +1,80 @@\n+\n+// Allow GitHub image rendering\n+:imagesdir: ../../../images\n+\n+[[directed-discovery]]\n+=== Directed Discovery\n+\n+Directed discovery is the process of manually adding nodes to {opennms-product-name}.\n+There are three ways to do this:\n+\n+* xref:requisition-add-nodes[directly in the requisition UI]\n+* xref:quick-add-node [quick add node]\n+* manually adding an interface\n+\n+Make sure you complete the tasks in the xref:getting-started.adoc[Getting Started] section before adding nodes. \n+\n+[[requisition-add-nodes]]\n+==== Add Nodes through the Requisition UI\n+\n+Before adding nodes to a requisition, you must xref:requisition-create[create a requisition].\n+\n+. In the web UI, click the gear icon in the top right. \n+. In the *Provisioning* area, choose *Manage Provisioning Requisition*.\n+. Click the edit icon beside the requisition you want to add nodes to. \n+. Click *Add Node*. \n+.. {opennms-product-name} auto-generates the foreign ID used to identify this node. \n+. Fill out information in each of the tabs and click *Save*. \n++\n+* basic information (node label, auto-generated foreign ID, location)\n+* path outage (configure network path to limit notifications from nodes behind other nodes)\n+* interfaces (add interface IP addresses and services)\n+* assets (pre-defined metadata types)\n+* categories (label/tag for type of node, e.g., routers, production, switches)\n+* meta-data (customized asset information)\n+\n+. Repeat for each node you want to add. \n+. Click *Return* to view the list of nodes you have added. \n+. Click *Synchronize* to provision them to the {opennms-product-name} database. \n+\n+[[quick-add-node]]\n+==== Add a Single Node to a Requsition\n+\n+The quick-add node feature allows you to add a single node to an existing provisioning requisition, and set the community string at the same time the node is provisioned.  \n+\n+When you configure an individual IP address within an existing range, {opennms-product-name} will split the range into two, and add a specific entry for the IP address. \n+See xref:quick-add-xml[Quick-Add Node Configuration] for the resulting XML configuration.\n+\n+To use the quick-add node feature, follow these steps:\n+\n+. Make sure you have xref:requisition-create[created a requisition]. \n+. In the web UI, click the *+* sign beside the gear icon.\n+. Specify the requisition to which you want to add the node. \n+\n++\n+IMPORTANT: This operation overrides any un-synchronized modifications in the selected requisition.\n+\n+. Add the IP address and node label. \n+. Fill in optional information in the apporpriate fields:\n+\n++\n+* SNMP parameters (apply only to the node being requisitioned)\n+* surveillance category membership (like a tag for the type of node, e.g., router, production, switch)\n+* CLI authentication parameters (used only if one or more provisioning adapters are configured to use them)\n+ \n+. Click *Provision*. \n+. Go to *Manage Provisioning Requisiton* and click *Synchronize* beside the requisition wo which you added to provision it to the {opennms-product-name} database.\n+\n+[[interface-manual-add]]\n+==== Manually Add an Interface", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a83274f824987acfac9dd8e6825089ac4ffaac1"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMxNDk0Nw==", "bodyText": "The information where the configuration is stored is nice to know for backups. The optimized thing? Is this really important for the user at this point? Just wondering, no blocker for merge :)", "url": "https://github.com/OpenNMS/opennms/pull/3213#discussion_r525314947", "createdAt": "2020-11-17T16:45:47Z", "author": {"login": "indigo423"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/provisioning/getting-started.adoc", "diffHunk": "@@ -1,178 +1,138 @@\n \n // Allow GitHub image rendering\n-:imagesdir: ../images\n+:imagesdir: ../../../images\n \n === Getting Started\n \n-An NMS is of no use until it is setup for monitoring and entities are added to the system.\n-{opennms-product-name} installs with a base configuration with a configuration that is sufficient get service level monitoring and performance management quickly up and running.\n-As soon as managed entities are provisioned, the base configuration will automatically begin monitoring and reporting.\n+{opennms-product-name} installs with a base configuration that automatically begins service-level monitoring and reporting as soon as you provision managed entities (nodes, IP interfaces, SNMP interfaces, and services).\n \n-Generally speaking, there are two methods of provisioning in {opennms-product-name}: _Auto Discovery_ and _Directed Discovery_.\n-We'll start with _Auto Discovery_, but first, we should quickly review the configuration of SNMP so that newly discovered devices can be immediately scanned for entities as well as have reporting and thresholding available.\n+{opennms-product-name} has three methods of provisioining:\n \n-[[provision-snmp-configuration]]\n-==== Provisioning the SNMP Configuration\n-\n-{opennms-product-name} requires SNMP configuration to be properly setup for your network in order to properly understand Network and Node topology as well as to automatically enable performance data collection.\n-Network topology is updated as nodes (a.k.a. devices or hosts) are provisioned.\n-Navigate to the _Admin/Configure SNMP Community Names by IP address_ as shown below.\n-\n-.Configuring SNMP community names\n-image:../images/provisioning/00029.png[]\n-\n-NOTE: Provisiond includes an option to add community information in the _Single Node_ provisioning interface.\n-This, is equivalent of entering a single IP address in the screen with the convenience of setting the community string at the same time a node is provisioned.\n-See the _Quick Node Add_ feature below for more details about this capability.\n-\n-This screen sets up SNMP within {opennms-product-name} for agents listening on IP addresses 10.1.1.1 through 10.254.254.254.\n-These settings are optimized into the `snmp-configuration.xml` file.\n-Optimization means that the minimal configuration possible will be written.\n-Any IP addresses already configured that are eclipsed by this range will be removed.\n-Here is the resulting configuration.\n-\n-[source, xml]\n-.Sample snmp-config.xml\n-----\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-\n-<snmp-config\n-xmlns=\"http://xmlns.opennms.org/xsd/config/snmp[http://xmlns.opennms.org/xsd/config/snmp]\"\n-port=\"161\" retry=\"3\" timeout=\"800\" read-community=\"public\"\n+* xref:discovery-auto[auto discovery]\n+* xref:discovery-directed[directed discovery]\n+* xref:integration.adoc[asset import] through the RestAPI \n \n-version=\"v1\" max-vars-per-pdu=\"10\">\n+Use auto discovery if you do not have a \"source of truth\" for your network inventory; auto discovery can become that source. \n+Be aware that auto discovery can generate too much information, including entities you do not want to monitor. \n \n-<definition retry=\"1\" timeout=\"2000\"\n+Directed discovery is effective if you know your inventory, particularly with smaller networks (i.e., 100\u2013200 nodes). \n+It is also useful for areas of your network that you cannot auto discover.\n \n-read-community=\"public\" version=\"v2c\">\n+See the link:#provisioning-works[how it works] section of the introdution for more information on the provisioning process. \n \n-<specific>10.12.23.32</specific>\n+Regardless of the method, provisioning is an iterative process: you will need to fine-tune your results to exclude or add things to what you monitor.\n \n-</definition>\n+==== Before You Begin\n \n-</snmp-config>\n-----\n+If you collect data via SNMP or are monitoring the availability of the SNMP service on a node, you must xref:provision-snmp-configuration [configure SNMP for provisioning] before using auto or directed discovery. \n+This ensures that {opennms-product-name} can immediately scan newly discovered devices for entities.\n+It also makes reporting and thresholding available for these devices.\n \n-However, If an IP address is then configured that is within the range,\n-the range will be split into two separate ranges and a specific entry will\n-be added. For example, if a configuration was added through the same UI for\n-the IP: 10.12.23.32 having the community name `public`, then the\n-resulting configuration will be:\n+In addition, you may want to xref:foreign-source-definition[edit the default foreign source definition] to specify the services to detect and policies to apply during discovery. \n \n-[source,xml]\n-----\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<snmp-config xmlns=\"http://xmlns.opennms.org/xsd/config/snmp\"\n-             port=\"161\"\n-             retry=\"3\"\n-             timeout=\"800\"\n-             read-community=\"public\"\n-             version=\"v1\"\n-             max-vars-per-pdu=\"10\">\n+[[provision-snmp-configuration]]\n+==== Configuring SNMP for Provisioning\n \n-    <definition retry=\"1\" timeout=\"2000\" read-community=\"YrusoNoz\" version=\"v2c\">\n-        <range begin=\"10.1.1.1\" end=\"10.12.23.31\"/>\n-        <range begin=\"10.12.23.33\" end=\"10.254.254.254\"/>\n-    </definition>\n+Proper SNMP configuration allows {opennms-product-name} to understand network and node topology as well as to automatically enable performance data collection.\n+{opennms-product-name} updates network topology as it provisions nodes.\n \n-    <definition retry=\"1\" timeout=\"2000\" read-community=\"public\" version=\"v2c\">\n-        <specific>10.12.23.32</specific>\n-    </definition>\n-</snmp-config>\n-----\n+. In the web UI, click the gear icon in the top right. \n+. In the *Provisioning* area, choose *Configure SNMP Community Names by IP Address*, and fill in the fields as desired: \n \n-NOTE: the bold IP addresses show where the range was split and the specific with community name \"public\" was added.\n+.Configuring SNMP community names\n+image:provisioning/SNMP_Config.png[]\n \n-Now, with SNMP configuration provisioned for our 10 networks, we are ready to begin adding nodes.\n-Our first example will be to automatically discover and add all managed entities (nodes, IP interfaces, SNMP Interfaces, and Monitored IP based Services).\n-We will then give an example of how to be more _directed_ and deliberate about your discovery by using _Provisioning Groups_.\n+This screen sets up SNMP within {opennms-product-name} for agents listening on IP addresses 10.1.1.1 through 10.254.254.254.\n+These settings are optimized into the `snmp-configuration.xml` file.\n+Optimization means that the minimal configuration possible will be written.\n+Any IP addresses already configured that are eclipsed by this range will be removed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a83274f824987acfac9dd8e6825089ac4ffaac1"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMxNzYyMw==", "bodyText": "... nodes than th, then a ...\nThe \"th\" is weird :)", "url": "https://github.com/OpenNMS/opennms/pull/3213#discussion_r525317623", "createdAt": "2020-11-17T16:49:27Z", "author": {"login": "indigo423"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/provisioning/integration.adoc", "diffHunk": "@@ -2,25 +2,26 @@\n // Allow GitHub image rendering\n :imagesdir: ../images\n \n+[[provisiond-integration]]\n === Integrating with Provisiond\n \n-The ReST API should be used for integration from other provisioning systems with {opennms-product-name}.\n+Use the ReST API for integration from other provisioning systems with {opennms-product-name}.\n The ReST API provides an interface for defining foreign sources and requisitions.\n \n ==== Provisioning Groups of Nodes\n \n-Just as with the WebUI, groups of nodes can be managed via the ReST API from an external system.\n+Just as with the web UI, groups of nodes can be managed via the ReST API from an external system.\n The steps are:\n \n-. Create a Foreign Source (if not using the default) for the group\n+. Update the default foreign source defintion (if not using the default) for the group\n . Update the SNMP configuration for each node in the group\n-. Create/Update the group of nodes\n+. Create/update the group of nodes\n \n ==== Example\n \n ===== Step 1 - Create a Foreign Source\n \n-If policies for this group of nodes are going to be specified differently than the default policy, then a foreign source should be created for the group.\n+To change the policies for this group of nodes than th, then a foreign source should be created for the group.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a83274f824987acfac9dd8e6825089ac4ffaac1"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMxODU1MA==", "bodyText": "Suggestion, I would replace CRM with CMDB.", "url": "https://github.com/OpenNMS/opennms/pull/3213#discussion_r525318550", "createdAt": "2020-11-17T16:50:40Z", "author": {"login": "indigo423"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/provisioning/introduction.adoc", "diffHunk": "@@ -5,19 +5,73 @@\n [[ga-provisioning-introduction]]\n === Introduction\n \n-The introduction of OpenNMS version 1.8 empowers enterprises and services providers like never before with a new service daemon for maintaining the managed entity inventory in OpenNMS.\n-This new daemon, _Provisiond_, unifies all previous entity control mechanisms available in 1.6 (_Capsd_ and the _Importer_), into a new and improved, massively parallel, policy based provisioning system.\n-System integrators should note, _Provisiond_ comes complete with a _RESTFul Web Service API_ for easy integration with external systems such as CRM or external inventory systems as well as an adapter API for interfacing with other management systems such as configuration management.\n-\n-OpenNMS 1.0, introduced almost a decade ago now, provided a capabilities scanning daemon, Capsd, as the mechanism for provisioning managed entities.\n-_Capsd_, deprecated with the release of 1.8.0, provided a rich automatic provisioning mechanism that simply required an IP address to seed its algorithm for creating and maintaining the managed entities (nodes, interfaces, and IP based services).\n-Version 1.2 added and _XML-RPC API_ as a more controlled (directed) strategy for provisioning services that was mainly used by non telco based service providers (i.e. managed hosting companies).\n-Version 1.6 followed this up with yet another and more advanced mechanism called the _Importer service daemon_.\n-The _Importer_ provided large service providers with the ability to strictly control the OpenNMS entity provisioning with an XML based API for completely defining and controlling the entities where no discovery and service scanning scanning was feasible.\n-\n-The Importer service improved OpenNMS' scalability for maintaining managed entity databases by an order of magnitude.\n-This daemon, while very simple in concept and yet extremely powerful and flexible provisioning improvement, has blazed the trail for Provisiond.\n-The Importer service has been in production for 3 years in service provider networks maintaining entity counts of more than 50,000 node level entities on a single instances of OpenNMS.\n-It is a rock solid provisioning tool.\n-\n-_Provisiond_ begins a new era of managed entity provisioning in OpenNMS.\n+Provisioning is a mechanism to import node and service definitions either from an external source such as DNS or HTTP or via the {opennms-product-name} web UI.\n+The _Provisiond_ daemon maintains your managed entity inventory through policy-based provisioning. \n+\n+Provisiond comes with a RESTful Web Service API for easy integration with external systems such as CRM or external inventory systems.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a83274f824987acfac9dd8e6825089ac4ffaac1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMyMDg4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * link:#asset-import[asset import] through the RestAPI or the https://docs.opennms.org/pris/branches/master/pris/pris.html[provisioning integration server] (PRIS)\n          \n          \n            \n            * link:#asset-import[asset import] through the RestAPI or the https://docs.opennms.com/pris/1.2.0/index.html[provisioning integration server] (PRIS)", "url": "https://github.com/OpenNMS/opennms/pull/3213#discussion_r525320883", "createdAt": "2020-11-17T16:53:52Z", "author": {"login": "indigo423"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/provisioning/introduction.adoc", "diffHunk": "@@ -5,19 +5,73 @@\n [[ga-provisioning-introduction]]\n === Introduction\n \n-The introduction of OpenNMS version 1.8 empowers enterprises and services providers like never before with a new service daemon for maintaining the managed entity inventory in OpenNMS.\n-This new daemon, _Provisiond_, unifies all previous entity control mechanisms available in 1.6 (_Capsd_ and the _Importer_), into a new and improved, massively parallel, policy based provisioning system.\n-System integrators should note, _Provisiond_ comes complete with a _RESTFul Web Service API_ for easy integration with external systems such as CRM or external inventory systems as well as an adapter API for interfacing with other management systems such as configuration management.\n-\n-OpenNMS 1.0, introduced almost a decade ago now, provided a capabilities scanning daemon, Capsd, as the mechanism for provisioning managed entities.\n-_Capsd_, deprecated with the release of 1.8.0, provided a rich automatic provisioning mechanism that simply required an IP address to seed its algorithm for creating and maintaining the managed entities (nodes, interfaces, and IP based services).\n-Version 1.2 added and _XML-RPC API_ as a more controlled (directed) strategy for provisioning services that was mainly used by non telco based service providers (i.e. managed hosting companies).\n-Version 1.6 followed this up with yet another and more advanced mechanism called the _Importer service daemon_.\n-The _Importer_ provided large service providers with the ability to strictly control the OpenNMS entity provisioning with an XML based API for completely defining and controlling the entities where no discovery and service scanning scanning was feasible.\n-\n-The Importer service improved OpenNMS' scalability for maintaining managed entity databases by an order of magnitude.\n-This daemon, while very simple in concept and yet extremely powerful and flexible provisioning improvement, has blazed the trail for Provisiond.\n-The Importer service has been in production for 3 years in service provider networks maintaining entity counts of more than 50,000 node level entities on a single instances of OpenNMS.\n-It is a rock solid provisioning tool.\n-\n-_Provisiond_ begins a new era of managed entity provisioning in OpenNMS.\n+Provisioning is a mechanism to import node and service definitions either from an external source such as DNS or HTTP or via the {opennms-product-name} web UI.\n+The _Provisiond_ daemon maintains your managed entity inventory through policy-based provisioning. \n+\n+Provisiond comes with a RESTful Web Service API for easy integration with external systems such as CRM or external inventory systems.\n+It also includes an adapter API for interfacing with other management systems such as configuration management.\n+\n+[[provisioning-works]]\n+==== How It Works\n+\n+Provisiond receives requests to add managed entities (nodes, IP interfaces, SNMP interfaces, services) via three basic mechanisms: \n+\n+* link:#discovery-auto[automatic discovery] (typically via the Discovery daemon)\n+* link:#discovery-directed[directed discovery] using an import requisition (typically via the Provisioning UI)\n+* link:#asset-import[asset import] through the RestAPI or the https://docs.opennms.org/pris/branches/master/pris/pris.html[provisioning integration server] (PRIS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a83274f824987acfac9dd8e6825089ac4ffaac1"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMyMzA3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            See the http://xmlns.opennms.org/xsd/config/model-import[requisition schema] (XSD) for more information. \n          \n          \n            \n            See the https://xmlns.opennms.org/xsd/config/model-import[requisition schema] (XSD) for more information.", "url": "https://github.com/OpenNMS/opennms/pull/3213#discussion_r525323079", "createdAt": "2020-11-17T16:56:39Z", "author": {"login": "indigo423"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/provisioning/introduction.adoc", "diffHunk": "@@ -5,19 +5,73 @@\n [[ga-provisioning-introduction]]\n === Introduction\n \n-The introduction of OpenNMS version 1.8 empowers enterprises and services providers like never before with a new service daemon for maintaining the managed entity inventory in OpenNMS.\n-This new daemon, _Provisiond_, unifies all previous entity control mechanisms available in 1.6 (_Capsd_ and the _Importer_), into a new and improved, massively parallel, policy based provisioning system.\n-System integrators should note, _Provisiond_ comes complete with a _RESTFul Web Service API_ for easy integration with external systems such as CRM or external inventory systems as well as an adapter API for interfacing with other management systems such as configuration management.\n-\n-OpenNMS 1.0, introduced almost a decade ago now, provided a capabilities scanning daemon, Capsd, as the mechanism for provisioning managed entities.\n-_Capsd_, deprecated with the release of 1.8.0, provided a rich automatic provisioning mechanism that simply required an IP address to seed its algorithm for creating and maintaining the managed entities (nodes, interfaces, and IP based services).\n-Version 1.2 added and _XML-RPC API_ as a more controlled (directed) strategy for provisioning services that was mainly used by non telco based service providers (i.e. managed hosting companies).\n-Version 1.6 followed this up with yet another and more advanced mechanism called the _Importer service daemon_.\n-The _Importer_ provided large service providers with the ability to strictly control the OpenNMS entity provisioning with an XML based API for completely defining and controlling the entities where no discovery and service scanning scanning was feasible.\n-\n-The Importer service improved OpenNMS' scalability for maintaining managed entity databases by an order of magnitude.\n-This daemon, while very simple in concept and yet extremely powerful and flexible provisioning improvement, has blazed the trail for Provisiond.\n-The Importer service has been in production for 3 years in service provider networks maintaining entity counts of more than 50,000 node level entities on a single instances of OpenNMS.\n-It is a rock solid provisioning tool.\n-\n-_Provisiond_ begins a new era of managed entity provisioning in OpenNMS.\n+Provisioning is a mechanism to import node and service definitions either from an external source such as DNS or HTTP or via the {opennms-product-name} web UI.\n+The _Provisiond_ daemon maintains your managed entity inventory through policy-based provisioning. \n+\n+Provisiond comes with a RESTful Web Service API for easy integration with external systems such as CRM or external inventory systems.\n+It also includes an adapter API for interfacing with other management systems such as configuration management.\n+\n+[[provisioning-works]]\n+==== How It Works\n+\n+Provisiond receives requests to add managed entities (nodes, IP interfaces, SNMP interfaces, services) via three basic mechanisms: \n+\n+* link:#discovery-auto[automatic discovery] (typically via the Discovery daemon)\n+* link:#discovery-directed[directed discovery] using an import requisition (typically via the Provisioning UI)\n+* link:#asset-import[asset import] through the RestAPI or the https://docs.opennms.org/pris/branches/master/pris/pris.html[provisioning integration server] (PRIS)\n+\n+{opennms-product-name} enables you to control Provisiond behavior by creating provisioning policies that include scanning frequency, IP ranges, and which services to detect. \n+\n+Regardless of the method, provisioning is an iterative process: you will need to fine-tune your results to exclude or add things to what you monitor.\n+\n+[[discovery-auto]]\n+==== Automatic Discovery\n+\n+{opennms-product-name} uses an ICMP ping sweep to find IP addresses on the network and provision node entities.\n+Using link:#ga-provisioning-auto-discovery-detectors[auto discovery with detectors] allows you to specify services that you need to detect in addition to the ICMP IP address ping. \n+link:#import-handlers[Import handlers] allow you to further control provisioning. #is this just through directed discovery?#\n+\n+Automatically discovered entities are analyzed, persisted to the relational data store, and managed based on the policies defined in the link:#foreign-source-definition[default foreign source definition]:\n+\n+* scanned to discover node entity\u2019s interfaces (SNMP and IP)\n+* interfaces are persisted\n+* service detection of each IP interface\n+* node merging\n+\n+NOTE: Merging occurs only when two automatically discovered nodes appear to be the same node.\n+Nodes link:#discovery-directed[discovered directly] are not included in the node merging process.\n+\n+[[discovery-directed]]\n+==== Directed Discovery\n+Directed discovery allows you to specify what you want to provision based on an existing data source such as an in-house inventory, stand-alone provisioning system, or set of element management systems. \n+Using an import requisition, this mechanism directs {opennms-product-name} to add, update, or delete a node entity exactly as defined by the external source. \n+No discovery process is used for finding more interfaces or services.\n+\n+IMPORTANT: An import requisition is an XML definition of node entities to be provisioned from an external source into {opennms-product-name}.\n+See the http://xmlns.opennms.org/xsd/config/model-import[requisition schema] (XSD) for more information. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a83274f824987acfac9dd8e6825089ac4ffaac1"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMyNDgyMg==", "bodyText": "We should not reference the white paper. It was originally the starting point for the provisioning section in the admin guide. The admin guide got some improvements over time whereas the PDF wasn't changed since it was used as our documentation base.\nWe have to be careful with external links, every time we add an external link we add a little pet which needs love, food, and maintenance :)", "url": "https://github.com/OpenNMS/opennms/pull/3213#discussion_r525324822", "createdAt": "2020-11-17T16:59:05Z", "author": {"login": "indigo423"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/provisioning/introduction.adoc", "diffHunk": "@@ -5,19 +5,73 @@\n [[ga-provisioning-introduction]]\n === Introduction\n \n-The introduction of OpenNMS version 1.8 empowers enterprises and services providers like never before with a new service daemon for maintaining the managed entity inventory in OpenNMS.\n-This new daemon, _Provisiond_, unifies all previous entity control mechanisms available in 1.6 (_Capsd_ and the _Importer_), into a new and improved, massively parallel, policy based provisioning system.\n-System integrators should note, _Provisiond_ comes complete with a _RESTFul Web Service API_ for easy integration with external systems such as CRM or external inventory systems as well as an adapter API for interfacing with other management systems such as configuration management.\n-\n-OpenNMS 1.0, introduced almost a decade ago now, provided a capabilities scanning daemon, Capsd, as the mechanism for provisioning managed entities.\n-_Capsd_, deprecated with the release of 1.8.0, provided a rich automatic provisioning mechanism that simply required an IP address to seed its algorithm for creating and maintaining the managed entities (nodes, interfaces, and IP based services).\n-Version 1.2 added and _XML-RPC API_ as a more controlled (directed) strategy for provisioning services that was mainly used by non telco based service providers (i.e. managed hosting companies).\n-Version 1.6 followed this up with yet another and more advanced mechanism called the _Importer service daemon_.\n-The _Importer_ provided large service providers with the ability to strictly control the OpenNMS entity provisioning with an XML based API for completely defining and controlling the entities where no discovery and service scanning scanning was feasible.\n-\n-The Importer service improved OpenNMS' scalability for maintaining managed entity databases by an order of magnitude.\n-This daemon, while very simple in concept and yet extremely powerful and flexible provisioning improvement, has blazed the trail for Provisiond.\n-The Importer service has been in production for 3 years in service provider networks maintaining entity counts of more than 50,000 node level entities on a single instances of OpenNMS.\n-It is a rock solid provisioning tool.\n-\n-_Provisiond_ begins a new era of managed entity provisioning in OpenNMS.\n+Provisioning is a mechanism to import node and service definitions either from an external source such as DNS or HTTP or via the {opennms-product-name} web UI.\n+The _Provisiond_ daemon maintains your managed entity inventory through policy-based provisioning. \n+\n+Provisiond comes with a RESTful Web Service API for easy integration with external systems such as CRM or external inventory systems.\n+It also includes an adapter API for interfacing with other management systems such as configuration management.\n+\n+[[provisioning-works]]\n+==== How It Works\n+\n+Provisiond receives requests to add managed entities (nodes, IP interfaces, SNMP interfaces, services) via three basic mechanisms: \n+\n+* link:#discovery-auto[automatic discovery] (typically via the Discovery daemon)\n+* link:#discovery-directed[directed discovery] using an import requisition (typically via the Provisioning UI)\n+* link:#asset-import[asset import] through the RestAPI or the https://docs.opennms.org/pris/branches/master/pris/pris.html[provisioning integration server] (PRIS)\n+\n+{opennms-product-name} enables you to control Provisiond behavior by creating provisioning policies that include scanning frequency, IP ranges, and which services to detect. \n+\n+Regardless of the method, provisioning is an iterative process: you will need to fine-tune your results to exclude or add things to what you monitor.\n+\n+[[discovery-auto]]\n+==== Automatic Discovery\n+\n+{opennms-product-name} uses an ICMP ping sweep to find IP addresses on the network and provision node entities.\n+Using link:#ga-provisioning-auto-discovery-detectors[auto discovery with detectors] allows you to specify services that you need to detect in addition to the ICMP IP address ping. \n+link:#import-handlers[Import handlers] allow you to further control provisioning. #is this just through directed discovery?#\n+\n+Automatically discovered entities are analyzed, persisted to the relational data store, and managed based on the policies defined in the link:#foreign-source-definition[default foreign source definition]:\n+\n+* scanned to discover node entity\u2019s interfaces (SNMP and IP)\n+* interfaces are persisted\n+* service detection of each IP interface\n+* node merging\n+\n+NOTE: Merging occurs only when two automatically discovered nodes appear to be the same node.\n+Nodes link:#discovery-directed[discovered directly] are not included in the node merging process.\n+\n+[[discovery-directed]]\n+==== Directed Discovery\n+Directed discovery allows you to specify what you want to provision based on an existing data source such as an in-house inventory, stand-alone provisioning system, or set of element management systems. \n+Using an import requisition, this mechanism directs {opennms-product-name} to add, update, or delete a node entity exactly as defined by the external source. \n+No discovery process is used for finding more interfaces or services.\n+\n+IMPORTANT: An import requisition is an XML definition of node entities to be provisioned from an external source into {opennms-product-name}.\n+See the http://xmlns.opennms.org/xsd/config/model-import[requisition schema] (XSD) for more information. \n+\n+===== Understanding the Process\n+\n+Directed disovery involves three phases:\n+\n+* import (with three sub-phases)\n+** marshal\n+** audit\n+** limited SNMP scan\n+* node scan\n+* service scan\n+\n+The import phase begins when Provisiond receives a request to import a requisition from a URL.\n+The requisition is marshalled into Java objects for processing. \n+An audit, based on the unique foreign ID of the foreign source, determines whether the node already exists; the imported object is then added, updated, or deleted from the inventory.  \n+\n+NOTE: If any syntactical or XML structural problems occur in the requisition, the entire import is abandoned and no import operations are completed.\n+\n+If a requisition node has an interface defined as the primary SNMP interface, then during the update and add operations the node is scanned for minimal SNMP attribute information.\n+\n+The node scan phase discovers details about the node and interfaces that were not directly provisioned.\n+All physical (SNMP) and logical (IP) interfaces are discovered and persisted based on any provisioning policies that may have been defined for the foreign source associated with the import requisition.\n+\n+After interface discovery, Provisiond moves to service detection on each IP interface entity.\n+\n+For more details on how provisioning works in {opennms-product-name}, see this archived https://wiki.opennms.org/wiki/images/c/ca/ProvisioningUsersGuide.pdf[provisioning white paper]. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a83274f824987acfac9dd8e6825089ac4ffaac1"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1e5bd532932389ed22665a668c5d06b150865d1", "author": {"user": {"login": "Bonrob2", "name": null}}, "url": "https://github.com/OpenNMS/opennms/commit/a1e5bd532932389ed22665a668c5d06b150865d1", "committedDate": "2020-11-17T21:39:20Z", "message": "Update opennms-doc/guide-admin/src/asciidoc/text/provisioning/directed-discover.adoc\n\nCo-authored-by: Ronny Trommer <ronny@opennms.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9d966b5587fbc1fbd859e1c70c8af21be83911e", "author": {"user": {"login": "Bonrob2", "name": null}}, "url": "https://github.com/OpenNMS/opennms/commit/c9d966b5587fbc1fbd859e1c70c8af21be83911e", "committedDate": "2020-11-17T21:40:01Z", "message": "Update opennms-doc/guide-admin/src/asciidoc/text/provisioning/introduction.adoc\n\nCo-authored-by: Ronny Trommer <ronny@opennms.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b1ac330b929fe796fea6e9ae6becbc8a4751a3c", "author": {"user": {"login": "Bonrob2", "name": null}}, "url": "https://github.com/OpenNMS/opennms/commit/5b1ac330b929fe796fea6e9ae6becbc8a4751a3c", "committedDate": "2020-11-17T21:57:11Z", "message": "NMS-12810: updates to provisioning chapter\n\nNMS-12810: updates based on feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b086ebf5af3379f946e34cce8df31a6eecfa2b6f", "author": {"user": {"login": "Bonrob2", "name": null}}, "url": "https://github.com/OpenNMS/opennms/commit/b086ebf5af3379f946e34cce8df31a6eecfa2b6f", "committedDate": "2020-11-17T22:11:30Z", "message": "NMS-12810: update provisioning chapter\n\nNMS-12810: fixed broken link"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNTcxODA3", "url": "https://github.com/OpenNMS/opennms/pull/3213#pullrequestreview-533571807", "createdAt": "2020-11-18T15:36:53Z", "commit": {"oid": "b086ebf5af3379f946e34cce8df31a6eecfa2b6f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3849, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}