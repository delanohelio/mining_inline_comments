{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MjE2NTEy", "number": 2982, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMToxNDowNVrOD0s0lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODoyMToyMVrOD1KItw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTg2OTAzOnYy", "diffSide": "RIGHT", "path": "opennms-doc/guide-admin/src/asciidoc/text/performance-data-collection/collectors/prometheus.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMToxNDowNVrOGJw4vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzozNjozOFrOGJ21DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg5MTMyNw==", "bodyText": "PrometheusCollector vs. WsManCollector", "url": "https://github.com/OpenNMS/opennms/pull/2982#discussion_r412891327", "createdAt": "2020-04-22T11:14:05Z", "author": {"login": "indigo423"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/performance-data-collection/collectors/prometheus.adoc", "diffHunk": "@@ -0,0 +1,132 @@\n+\n+// Allow GitHub image rendering\n+:imagesdir: ../../../images\n+\n+[[ga-performance-mgmt-collectors-prometheus-collector]]\n+==== PrometheusCollector\n+\n+The _PrometheusCollector_ collects peformance metrics via HTTP(S) using the text-based link:https://github.com/prometheus/docs/blob/master/content/docs/instrumenting/exposition_formats.md#text-based-format[Prometheus Exposition format].\n+This has been adopted by many applications and is in the process of being standardized in the link:https://openmetrics.io/[OpenMetrics] project.\n+\n+This collector provides tools for parsing and mapping the metrics to the collection model used by {opennms-product-name}.\n+\n+===== Collector Facts\n+\n+[options=\"autowidth\"]\n+|===\n+| Class Name          | `org.opennms.netmgt.collectd.prometheus.PrometheusCollector`\n+| Package             | core\n+| Supported on Minion | `Yes`\n+|===\n+\n+===== Collector Parameters\n+\n+.Collector specific parameters for the WsManCollector", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e35a57d8c53cc6e55328744eb20c33e912a4bc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk4ODY4NA==", "bodyText": "Fixed", "url": "https://github.com/OpenNMS/opennms/pull/2982#discussion_r412988684", "createdAt": "2020-04-22T13:36:38Z", "author": {"login": "j-white"}, "path": "opennms-doc/guide-admin/src/asciidoc/text/performance-data-collection/collectors/prometheus.adoc", "diffHunk": "@@ -0,0 +1,132 @@\n+\n+// Allow GitHub image rendering\n+:imagesdir: ../../../images\n+\n+[[ga-performance-mgmt-collectors-prometheus-collector]]\n+==== PrometheusCollector\n+\n+The _PrometheusCollector_ collects peformance metrics via HTTP(S) using the text-based link:https://github.com/prometheus/docs/blob/master/content/docs/instrumenting/exposition_formats.md#text-based-format[Prometheus Exposition format].\n+This has been adopted by many applications and is in the process of being standardized in the link:https://openmetrics.io/[OpenMetrics] project.\n+\n+This collector provides tools for parsing and mapping the metrics to the collection model used by {opennms-product-name}.\n+\n+===== Collector Facts\n+\n+[options=\"autowidth\"]\n+|===\n+| Class Name          | `org.opennms.netmgt.collectd.prometheus.PrometheusCollector`\n+| Package             | core\n+| Supported on Minion | `Yes`\n+|===\n+\n+===== Collector Parameters\n+\n+.Collector specific parameters for the WsManCollector", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg5MTMyNw=="}, "originalCommit": {"oid": "74e35a57d8c53cc6e55328744eb20c33e912a4bc"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTg3NjY3OnYy", "diffSide": "RIGHT", "path": "features/prometheus-collector/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMToxNjowNlrOGJw9QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzozNjo1NlrOGJ217g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg5MjQ4MA==", "bodyText": "Do we need comment?", "url": "https://github.com/OpenNMS/opennms/pull/2982#discussion_r412892480", "createdAt": "2020-04-22T11:16:06Z", "author": {"login": "indigo423"}, "path": "features/prometheus-collector/pom.xml", "diffHunk": "@@ -0,0 +1,145 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+  <parent>\n+    <groupId>org.opennms</groupId>\n+    <artifactId>org.opennms.features</artifactId>\n+    <version>26.1.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+  <groupId>org.opennms.features</groupId>\n+  <artifactId>org.opennms.features.prometheus-collector</artifactId>\n+  <name>OpenNMS :: Features :: Prometheus Collector</name>\n+  <packaging>bundle</packaging>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.felix</groupId>\n+        <artifactId>maven-bundle-plugin</artifactId>\n+        <extensions>true</extensions>\n+        <configuration>\n+          <instructions>\n+            <Bundle-RequiredExecutionEnvironment>JavaSE-1.8</Bundle-RequiredExecutionEnvironment>\n+            <Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>\n+            <Bundle-Version>${project.version}</Bundle-Version>\n+            <Import-Package>\n+              org.eclipse.persistence.internal.jaxb;resolution:=optional,\n+              org.eclipse.persistence.internal.jaxb.many;resolution:=optional,\n+              org.opennms.netmgt.collection.adapters,\n+              *\n+            </Import-Package>\n+          </instructions>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <artifactId>maven-assembly-plugin</artifactId>\n+        <extensions>true</extensions>\n+        <configuration>\n+          <descriptors>\n+            <descriptor>src/assembly/xsds.xml</descriptor>\n+          </descriptors>\n+          <tarLongFileMode>posix</tarLongFileMode>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <phase>package</phase>\n+            <goals>\n+              <goal>single</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+<!-- ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e35a57d8c53cc6e55328744eb20c33e912a4bc"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk4ODkxMA==", "bodyText": "Worth keeping, adding a comment to explain.", "url": "https://github.com/OpenNMS/opennms/pull/2982#discussion_r412988910", "createdAt": "2020-04-22T13:36:56Z", "author": {"login": "j-white"}, "path": "features/prometheus-collector/pom.xml", "diffHunk": "@@ -0,0 +1,145 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+  <parent>\n+    <groupId>org.opennms</groupId>\n+    <artifactId>org.opennms.features</artifactId>\n+    <version>26.1.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+  <groupId>org.opennms.features</groupId>\n+  <artifactId>org.opennms.features.prometheus-collector</artifactId>\n+  <name>OpenNMS :: Features :: Prometheus Collector</name>\n+  <packaging>bundle</packaging>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.felix</groupId>\n+        <artifactId>maven-bundle-plugin</artifactId>\n+        <extensions>true</extensions>\n+        <configuration>\n+          <instructions>\n+            <Bundle-RequiredExecutionEnvironment>JavaSE-1.8</Bundle-RequiredExecutionEnvironment>\n+            <Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>\n+            <Bundle-Version>${project.version}</Bundle-Version>\n+            <Import-Package>\n+              org.eclipse.persistence.internal.jaxb;resolution:=optional,\n+              org.eclipse.persistence.internal.jaxb.many;resolution:=optional,\n+              org.opennms.netmgt.collection.adapters,\n+              *\n+            </Import-Package>\n+          </instructions>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <artifactId>maven-assembly-plugin</artifactId>\n+        <extensions>true</extensions>\n+        <configuration>\n+          <descriptors>\n+            <descriptor>src/assembly/xsds.xml</descriptor>\n+          </descriptors>\n+          <tarLongFileMode>posix</tarLongFileMode>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <phase>package</phase>\n+            <goals>\n+              <goal>single</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+<!-- ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg5MjQ4MA=="}, "originalCommit": {"oid": "74e35a57d8c53cc6e55328744eb20c33e912a4bc"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTkxMDA1OnYy", "diffSide": "RIGHT", "path": "opennms-config-tester/src/test/java/org/opennms/netmgt/config/tester/ConfigTesterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMToyNTowM1rOGJxRHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMToyNTowM1rOGJxRHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg5NzU2NA==", "bodyText": "Thank you very much! :D", "url": "https://github.com/OpenNMS/opennms/pull/2982#discussion_r412897564", "createdAt": "2020-04-22T11:25:03Z", "author": {"login": "indigo423"}, "path": "opennms-config-tester/src/test/java/org/opennms/netmgt/config/tester/ConfigTesterTest.java", "diffHunk": "@@ -375,6 +375,11 @@ public void testPollerConfiguration() {\n         testConfigFile(\"poller-configuration.xml\");\n     }\n \n+    @Test\n+    public void testPrometheusConfigFiles() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e35a57d8c53cc6e55328744eb20c33e912a4bc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDY3MTkxOnYy", "diffSide": "RIGHT", "path": "features/prometheus-collector/src/main/java/org/opennms/netmgt/collectd/prometheus/PrometheusCollector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODoyMToyMVrOGKc5PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODoyMToyMVrOGKc5PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxMjM0OQ==", "bodyText": "Counter and Gauge are the only metrics we have ways to handle on our side.", "url": "https://github.com/OpenNMS/opennms/pull/2982#discussion_r413612349", "createdAt": "2020-04-23T08:21:21Z", "author": {"login": "indigo423"}, "path": "features/prometheus-collector/src/main/java/org/opennms/netmgt/collectd/prometheus/PrometheusCollector.java", "diffHunk": "@@ -0,0 +1,361 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2017-2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.collectd.prometheus;\n+\n+import static org.opennms.core.utils.ConfigFileConstants.RRD_DS_MAX_SIZE;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Function;\n+\n+import org.hawkular.agent.prometheus.text.TextSample;\n+import org.hawkular.agent.prometheus.types.Counter;\n+import org.hawkular.agent.prometheus.types.Gauge;\n+import org.hawkular.agent.prometheus.types.Histogram;\n+import org.hawkular.agent.prometheus.types.Metric;\n+import org.hawkular.agent.prometheus.types.MetricVisitor;\n+import org.hawkular.agent.prometheus.types.Summary;\n+import org.hawkular.agent.prometheus.walkers.MetricCollectingWalker;\n+import org.opennms.core.spring.BeanUtils;\n+import org.opennms.core.utils.ParameterMap;\n+import org.opennms.netmgt.collection.api.AbstractRemoteServiceCollector;\n+import org.opennms.netmgt.collection.api.AttributeType;\n+import org.opennms.netmgt.collection.api.CollectionAgent;\n+import org.opennms.netmgt.collection.api.CollectionException;\n+import org.opennms.netmgt.collection.api.CollectionSet;\n+import org.opennms.netmgt.collection.api.ServiceParameters.ParameterName;\n+import org.opennms.netmgt.collection.support.builder.CollectionSetBuilder;\n+import org.opennms.netmgt.collection.support.builder.DeferredGenericTypeResource;\n+import org.opennms.netmgt.collection.support.builder.GenericTypeResource;\n+import org.opennms.netmgt.collection.support.builder.NodeLevelResource;\n+import org.opennms.netmgt.collection.support.builder.Resource;\n+import org.opennms.netmgt.config.prometheus.Collection;\n+import org.opennms.netmgt.config.prometheus.Group;\n+import org.opennms.netmgt.config.prometheus.NumericAttribute;\n+import org.opennms.netmgt.config.prometheus.PrometheusDatacollectionConfig;\n+import org.opennms.netmgt.config.prometheus.StringAttribute;\n+import org.opennms.netmgt.dao.prometheus.PrometheusDataCollectionConfigDao;\n+import org.opennms.netmgt.rrd.RrdRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.expression.Expression;\n+import org.springframework.expression.ExpressionParser;\n+import org.springframework.expression.spel.standard.SpelExpressionParser;\n+import org.springframework.expression.spel.support.StandardEvaluationContext;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Collects metrics exposed via HTTP(S) using the Prometheus exposition format.\n+ *\n+ * We leverage the Prometheus parser code (APLv2 licensed) written by RedHat\n+ * as part of the hawkular-agent. See https://github.com/hawkular/hawkular-agent/tree/0.23.0.Final.\n+ * (The code was removed from their tree in 0.24.0).\n+ *\n+ * Further details on the format are available at: https://prometheus.io/docs/instrumenting/exposition_formats/\n+ *\n+ * @author jwhite\n+ */\n+public class PrometheusCollector extends AbstractRemoteServiceCollector {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PrometheusCollector.class);\n+\n+    private static final String INTERFACE_ADDRESS_PLACEHOLDER = \"INTERFACE_ADDRESS\";\n+\n+    private static final String COLLECTION_REQUEST_KEY = \"collection-request\";\n+\n+    private static final Map<String, Class<?>> TYPE_MAP = new ImmutableMap.Builder<String, Class<?>>()\n+            .put(COLLECTION_REQUEST_KEY, PrometheusCollectionRequestDTO.class)\n+            .build();\n+\n+    private PrometheusDataCollectionConfigDao prometheusCollectionDao;\n+\n+    public PrometheusCollector() {\n+        super(TYPE_MAP);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Retrieve the configuration DAOs\n+        if (prometheusCollectionDao == null) {\n+            prometheusCollectionDao = BeanUtils.getBean(\"daoContext\", \"prometheusDataCollectionConfigDao\", PrometheusDataCollectionConfigDao.class);\n+        }\n+    }\n+ \n+    @Override\n+    public Map<String, Object> getRuntimeAttributes(CollectionAgent agent, Map<String, Object> parameters) {\n+        final Map<String, Object> runtimeAttributes = new HashMap<>();\n+\n+        // Retrieve the collection by name\n+        final String collectionName = ParameterMap.getKeyedString(parameters, ParameterName.COLLECTION.toString(), null);\n+        final Collection collection = prometheusCollectionDao.getCollectionByName(collectionName);\n+        if (collection == null) {\n+            throw new IllegalArgumentException(String.format(\"PrometheusCollector: No collection found with name '%s'.\", collectionName));\n+        }\n+\n+        // Fetch the list of groups that belong to the collection\n+        final List<Group> groups = prometheusCollectionDao.getGroupsForCollection(collection);\n+        PrometheusCollectionRequestDTO request = new PrometheusCollectionRequestDTO();\n+        request.setGroups(groups);\n+        runtimeAttributes.put(COLLECTION_REQUEST_KEY, request);\n+\n+        return runtimeAttributes;\n+    }\n+\n+    @Override\n+    public CollectionSet collect(CollectionAgent agent, Map<String, Object> map) throws CollectionException {\n+        // Pull the URL from the the request\n+        final PrometheusCollectionRequestDTO request = (PrometheusCollectionRequestDTO)map.get(COLLECTION_REQUEST_KEY);\n+        String url = ParameterMap.getKeyedString(map, \"url\", null);\n+        if (Strings.isNullOrEmpty(url)) {\n+            throw new IllegalArgumentException(\"url parameter is required.\");\n+        }\n+\n+        // Replace the IP address placeholder\n+        url = url.replace(INTERFACE_ADDRESS_PLACEHOLDER, agent.getHostAddress());\n+        final URI parsedUri;\n+        try {\n+            parsedUri = URI.create(url);\n+        } catch (IllegalArgumentException e) {\n+            throw new CollectionException(\"Invalid URL: \" + url, e);\n+        }\n+\n+        final MetricCollectingWalker walker = new MetricCollectingWalker();\n+        try {\n+            PrometheusScraper.scrape(parsedUri, map, walker);\n+        } catch (IOException e) {\n+            throw new CollectionException(\"Failed to scrape metrics for: \" + parsedUri, e);\n+        }\n+\n+        return toCollectionSet(agent, request, walker.getMetrics());\n+    }\n+\n+    protected static CollectionSet toCollectionSet(CollectionAgent agent, PrometheusCollectionRequestDTO request, List<Metric> metrics) {\n+        final CollectionSetBuilder builder = new CollectionSetBuilder(agent);\n+        \n+        for (Group group : request.getGroups()) {\n+            // First, we find the metrics that belong to this group\n+            final List<Metric> metricsForGroup = filterMetrics(group.getFilterExp(), metrics);\n+            if (metricsForGroup.isEmpty()) {\n+                // Don't bother continuing if we have no metrics\n+                LOG.debug(\"No metrics found in group named '{}' on agent {}.\", group.getName(), agent);\n+                continue;\n+            }\n+\n+            // Next, group the metrics by instance\n+            final Map<String, List<Metric>> metricsByInstance = groupMetrics(group, metricsForGroup);\n+\n+            // Build the resource mapper\n+            final NodeLevelResource nodeLevelResource = new NodeLevelResource(agent.getNodeId());\n+            Function<String, Resource> resourceMapper = (instance) -> nodeLevelResource;\n+            if (!\"node\".equalsIgnoreCase(group.getResourceType())) {\n+                resourceMapper = (instance) -> {\n+                    final String sanitizedInstance = GenericTypeResource.sanitizeInstanceStrict(instance);\n+                    return new DeferredGenericTypeResource(nodeLevelResource, group.getResourceType(), sanitizedInstance);\n+                };\n+            }\n+\n+            // Process the metrics by instance\n+            for (Entry<String, List<Metric>> entry : metricsByInstance.entrySet()) {\n+                final Resource resource = resourceMapper.apply(entry.getKey());\n+\n+                // First, process the numeric attributes\n+                for (NumericAttribute attribute : group.getNumericAttribute()) {\n+                    // Filter\n+                    final List<Metric> metricsForAttribute = filterMetrics(attribute.getFilterExp(), entry.getValue());\n+\n+                    ExpressionParser parser = new SpelExpressionParser();\n+                    Expression exp = parser.parseExpression(attribute.getAliasExp());\n+                    Function<Metric, String> attributeNameMapper = (metric) -> {\n+                        StandardEvaluationContext context = new StandardEvaluationContext(metric);\n+                        String name = exp.getValue(context, String.class);\n+                        if (attribute.isCompressAlias()) {\n+                            name = CamelCaseCompressor.compress(name, RRD_DS_MAX_SIZE);\n+                        }\n+                        return name;\n+                    };\n+                    Function<AttributeType, AttributeType> attributeTypeMapper = (knownType) -> {\n+                        // Use the configured type if set\n+                        if (attribute.getType() != null) {\n+                            return attribute.getType();\n+                        }\n+                        // If none set, use the given type\n+                        return knownType;\n+                    };\n+\n+                    for (Metric metric : metricsForAttribute) {\n+                        final String attributeName = attributeNameMapper.apply(metric);\n+                        if (attributeName == null) {\n+                            LOG.info(\"Skipping metric with null attribute name: {}\", metric);\n+                            continue;\n+                        }\n+\n+                        metric.visit(new MetricVisitor() {\n+                            @Override\n+                            public void visitCounter(Counter counter) {\n+                                builder.withNumericAttribute(resource, group.getName(), attributeName, counter.getValue(), attributeTypeMapper.apply(AttributeType.COUNTER));\n+                            }\n+\n+                            @Override\n+                            public void visitGauge(Gauge gauge) {\n+                                builder.withNumericAttribute(resource, group.getName(), attributeName, gauge.getValue(), attributeTypeMapper.apply(AttributeType.GAUGE));\n+                            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c71574ec893ae1fe611296ffba4d704f3b92e3"}, "originalPosition": 237}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 625, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}