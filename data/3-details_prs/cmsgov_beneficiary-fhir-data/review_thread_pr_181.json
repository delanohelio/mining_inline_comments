{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NTQ5MjQ0", "number": 181, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNDo0MDo0OFrODZg-iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNDoxMDo1M1rODfjzQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDgxMjg5OnYy", "diffSide": "RIGHT", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/Operation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNDo0MDo0OFrOFf8Xnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwMTowNzo1M1rOFnSxsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzOTI2Mw==", "bodyText": "I like this class. I suggest that it may be improved by defining common options like \"id\". To avoid inconsistency for in calls to setOption(\"id\", ...) or setOption(\"Id\", ...) etc. This thinking is similar to the reason for an Endpoint enumeration.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/181#discussion_r369039263", "createdAt": "2020-01-21T14:40:48Z", "author": {"login": "RickHawesUSDS"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/Operation.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package gov.cms.bfd.server.war;\n+\n+import com.codahale.metrics.servlets.HealthCheckServlet;\n+import com.codahale.metrics.servlets.MetricsServlet;\n+import com.codahale.metrics.servlets.PingServlet;\n+import com.codahale.metrics.servlets.ThreadDumpServlet;\n+import com.newrelic.api.agent.NewRelic;\n+import gov.cms.bfd.server.war.stu3.providers.CoverageResourceProvider;\n+import gov.cms.bfd.server.war.stu3.providers.ExplanationOfBenefitResourceProvider;\n+import gov.cms.bfd.server.war.stu3.providers.PatientResourceProvider;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import javax.servlet.http.HttpServletRequest;\n+import org.hl7.fhir.dstu3.hapi.rest.server.ServerCapabilityStatementProvider;\n+import org.slf4j.MDC;\n+\n+/**\n+ * Models the canonical \"operations\" supported by this application, such that each meaningfully\n+ * distinct operation can be assigned a unique canonical name, for use in monitoring systems.\n+ *\n+ * <p>Also handles the publishing of those canonical names to the places they need to be published,\n+ * via the {@link #publishOperationName()} method.\n+ */\n+public final class Operation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "168bbecbb6b55653ac13a83f60b312ff72bf7b54"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc0NjQxNw==", "bodyText": "Thought about doing that but decided that, if I wanted to go there, it'd be better to create types or subtypes for every operation. Decided that wasn't worth the effort right now.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/181#discussion_r376746417", "createdAt": "2020-02-09T01:07:53Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/Operation.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package gov.cms.bfd.server.war;\n+\n+import com.codahale.metrics.servlets.HealthCheckServlet;\n+import com.codahale.metrics.servlets.MetricsServlet;\n+import com.codahale.metrics.servlets.PingServlet;\n+import com.codahale.metrics.servlets.ThreadDumpServlet;\n+import com.newrelic.api.agent.NewRelic;\n+import gov.cms.bfd.server.war.stu3.providers.CoverageResourceProvider;\n+import gov.cms.bfd.server.war.stu3.providers.ExplanationOfBenefitResourceProvider;\n+import gov.cms.bfd.server.war.stu3.providers.PatientResourceProvider;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import javax.servlet.http.HttpServletRequest;\n+import org.hl7.fhir.dstu3.hapi.rest.server.ServerCapabilityStatementProvider;\n+import org.slf4j.MDC;\n+\n+/**\n+ * Models the canonical \"operations\" supported by this application, such that each meaningfully\n+ * distinct operation can be assigned a unique canonical name, for use in monitoring systems.\n+ *\n+ * <p>Also handles the publishing of those canonical names to the places they need to be published,\n+ * via the {@link #publishOperationName()} method.\n+ */\n+public final class Operation {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzOTI2Mw=="}, "originalCommit": {"oid": "168bbecbb6b55653ac13a83f60b312ff72bf7b54"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzA4NTM0OnYy", "diffSide": "RIGHT", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/RequestResponseLoggingFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNTozODozOVrOFnqw3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjoyNjo0NFrOFoP2Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEzOTQyMg==", "bodyText": "Can't request in request.header. be omitted from the computeMdcRequestKey function call?", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/181#discussion_r377139422", "createdAt": "2020-02-10T15:38:39Z", "author": {"login": "njdister"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/RequestResponseLoggingFilter.java", "diffHunk": "@@ -60,29 +60,37 @@ private static void handleRequest(ServletRequest request) {\n     // Record the request type.\n     MDC.put(computeMdcKey(\"request_type\"), request.getClass().getName());\n \n+    // Set the default Operation (will hopefully be customized further in specific handler methods).\n+    Operation operation = new Operation(Operation.Endpoint.OTHER);\n+\n     if (request instanceof HttpServletRequest) {\n       HttpServletRequest servletRequest = (HttpServletRequest) request;\n \n       // Record the basic request components.\n-      MDC.put(computeMdcKey(\"request.http_method\"), servletRequest.getMethod());\n-      MDC.put(computeMdcKey(\"request.url\"), servletRequest.getRequestURL().toString());\n-      MDC.put(computeMdcKey(\"request.uri\"), servletRequest.getRequestURI());\n-      MDC.put(computeMdcKey(\"request.query_string\"), servletRequest.getQueryString());\n+      operation = new Operation(Operation.Endpoint.matchByHttpUri(servletRequest));\n+      MDC.put(computeMdcRequestKey(\"http_method\"), servletRequest.getMethod());\n+      MDC.put(computeMdcRequestKey(\"url\"), servletRequest.getRequestURL().toString());\n+      MDC.put(computeMdcRequestKey(\"uri\"), servletRequest.getRequestURI());\n+      MDC.put(computeMdcRequestKey(\"query_string\"), servletRequest.getQueryString());\n       MDC.put(\n-          computeMdcKey(\"request.clientSSL.DN\"),\n+          computeMdcRequestKey(\"clientSSL.DN\"),\n           getClientSslPrincipalDistinguishedName(servletRequest));\n \n       // Record the request headers.\n       Enumeration<String> headerNames = servletRequest.getHeaderNames();\n       while (headerNames.hasMoreElements()) {\n         String headerName = headerNames.nextElement();\n         List<String> headerValues = Collections.list(servletRequest.getHeaders(headerName));\n-        if (headerValues.isEmpty()) MDC.put(computeMdcKey(\"request.header.\" + headerName), \"\");\n+        if (headerValues.isEmpty())\n+          MDC.put(computeMdcRequestKey(\"request.header.\" + headerName), \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "264f0afd19c515c991466a7557664e8e8c67149d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc0NzAxMA==", "bodyText": "Yup -- thanks! Fixed.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/181#discussion_r377747010", "createdAt": "2020-02-11T16:26:44Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/RequestResponseLoggingFilter.java", "diffHunk": "@@ -60,29 +60,37 @@ private static void handleRequest(ServletRequest request) {\n     // Record the request type.\n     MDC.put(computeMdcKey(\"request_type\"), request.getClass().getName());\n \n+    // Set the default Operation (will hopefully be customized further in specific handler methods).\n+    Operation operation = new Operation(Operation.Endpoint.OTHER);\n+\n     if (request instanceof HttpServletRequest) {\n       HttpServletRequest servletRequest = (HttpServletRequest) request;\n \n       // Record the basic request components.\n-      MDC.put(computeMdcKey(\"request.http_method\"), servletRequest.getMethod());\n-      MDC.put(computeMdcKey(\"request.url\"), servletRequest.getRequestURL().toString());\n-      MDC.put(computeMdcKey(\"request.uri\"), servletRequest.getRequestURI());\n-      MDC.put(computeMdcKey(\"request.query_string\"), servletRequest.getQueryString());\n+      operation = new Operation(Operation.Endpoint.matchByHttpUri(servletRequest));\n+      MDC.put(computeMdcRequestKey(\"http_method\"), servletRequest.getMethod());\n+      MDC.put(computeMdcRequestKey(\"url\"), servletRequest.getRequestURL().toString());\n+      MDC.put(computeMdcRequestKey(\"uri\"), servletRequest.getRequestURI());\n+      MDC.put(computeMdcRequestKey(\"query_string\"), servletRequest.getQueryString());\n       MDC.put(\n-          computeMdcKey(\"request.clientSSL.DN\"),\n+          computeMdcRequestKey(\"clientSSL.DN\"),\n           getClientSslPrincipalDistinguishedName(servletRequest));\n \n       // Record the request headers.\n       Enumeration<String> headerNames = servletRequest.getHeaderNames();\n       while (headerNames.hasMoreElements()) {\n         String headerName = headerNames.nextElement();\n         List<String> headerValues = Collections.list(servletRequest.getHeaders(headerName));\n-        if (headerValues.isEmpty()) MDC.put(computeMdcKey(\"request.header.\" + headerName), \"\");\n+        if (headerValues.isEmpty())\n+          MDC.put(computeMdcRequestKey(\"request.header.\" + headerName), \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEzOTQyMg=="}, "originalCommit": {"oid": "264f0afd19c515c991466a7557664e8e8c67149d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjk3MTQwOnYy", "diffSide": "RIGHT", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/RequestResponseLoggingFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjoyNTo0N1rOFoPz1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjoyNTo0N1rOFoPz1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc0NjM5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      MDC.put(computeMdcRequestKey(\"request.header.\" + headerName), \"\");\n          \n          \n            \n                      MDC.put(computeMdcRequestKey(\"header.\" + headerName), \"\");", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/181#discussion_r377746391", "createdAt": "2020-02-11T16:25:47Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/RequestResponseLoggingFilter.java", "diffHunk": "@@ -60,29 +60,37 @@ private static void handleRequest(ServletRequest request) {\n     // Record the request type.\n     MDC.put(computeMdcKey(\"request_type\"), request.getClass().getName());\n \n+    // Set the default Operation (will hopefully be customized further in specific handler methods).\n+    Operation operation = new Operation(Operation.Endpoint.OTHER);\n+\n     if (request instanceof HttpServletRequest) {\n       HttpServletRequest servletRequest = (HttpServletRequest) request;\n \n       // Record the basic request components.\n-      MDC.put(computeMdcKey(\"request.http_method\"), servletRequest.getMethod());\n-      MDC.put(computeMdcKey(\"request.url\"), servletRequest.getRequestURL().toString());\n-      MDC.put(computeMdcKey(\"request.uri\"), servletRequest.getRequestURI());\n-      MDC.put(computeMdcKey(\"request.query_string\"), servletRequest.getQueryString());\n+      operation = new Operation(Operation.Endpoint.matchByHttpUri(servletRequest));\n+      MDC.put(computeMdcRequestKey(\"http_method\"), servletRequest.getMethod());\n+      MDC.put(computeMdcRequestKey(\"url\"), servletRequest.getRequestURL().toString());\n+      MDC.put(computeMdcRequestKey(\"uri\"), servletRequest.getRequestURI());\n+      MDC.put(computeMdcRequestKey(\"query_string\"), servletRequest.getQueryString());\n       MDC.put(\n-          computeMdcKey(\"request.clientSSL.DN\"),\n+          computeMdcRequestKey(\"clientSSL.DN\"),\n           getClientSslPrincipalDistinguishedName(servletRequest));\n \n       // Record the request headers.\n       Enumeration<String> headerNames = servletRequest.getHeaderNames();\n       while (headerNames.hasMoreElements()) {\n         String headerName = headerNames.nextElement();\n         List<String> headerValues = Collections.list(servletRequest.getHeaders(headerName));\n-        if (headerValues.isEmpty()) MDC.put(computeMdcKey(\"request.header.\" + headerName), \"\");\n+        if (headerValues.isEmpty())\n+          MDC.put(computeMdcRequestKey(\"request.header.\" + headerName), \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "264f0afd19c515c991466a7557664e8e8c67149d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDE3OTU4OnYy", "diffSide": "RIGHT", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/CoverageResourceProvider.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNDowNzo1N1rOFpVEdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxOTo1MTowM1rOFphaPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg4MTE0MA==", "bodyText": "To check my understanding this will log an operation of V1_COVERAGE twice. Once here and once in RequestResponseLoggingFilter", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/181#discussion_r378881140", "createdAt": "2020-02-13T14:07:57Z", "author": {"login": "whytheplatypus"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/CoverageResourceProvider.java", "diffHunk": "@@ -83,6 +86,10 @@ public Coverage read(@IdParam IdType coverageId) {\n     if (coverageIdText == null || coverageIdText.trim().isEmpty())\n       throw new IllegalArgumentException();\n \n+    Operation operation = new Operation(Operation.Endpoint.V1_COVERAGE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d60a13a05a5b603b18b0b81fda68abaefe52b3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzNzY4Mg==", "bodyText": "Sort of. The RequestResponseLoggingFilter sets the default operation name at the start of each request to new Operation(Operation.Endpoint.OTHER). That gets set in the MDC, which is a single-valued Map.\nAny handler/endpoint that wants to customize that can override it by creating a more specific Operation and calling publishOperationName() on it. That publish call overrides the default value in the MDC.\nThat make sense?", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/181#discussion_r378937682", "createdAt": "2020-02-13T15:35:51Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/CoverageResourceProvider.java", "diffHunk": "@@ -83,6 +86,10 @@ public Coverage read(@IdParam IdType coverageId) {\n     if (coverageIdText == null || coverageIdText.trim().isEmpty())\n       throw new IllegalArgumentException();\n \n+    Operation operation = new Operation(Operation.Endpoint.V1_COVERAGE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg4MTE0MA=="}, "originalCommit": {"oid": "c3d60a13a05a5b603b18b0b81fda68abaefe52b3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk0NDkxMw==", "bodyText": "it's using matchByHttpUri in the default, so I'd expect that to return V1_COVERAGE since it's a listed endpoint?\nThe default logic goes from requestHttpUri -> Endpoint enum -> requestHttpUri", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/181#discussion_r378944913", "createdAt": "2020-02-13T15:46:25Z", "author": {"login": "whytheplatypus"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/CoverageResourceProvider.java", "diffHunk": "@@ -83,6 +86,10 @@ public Coverage read(@IdParam IdType coverageId) {\n     if (coverageIdText == null || coverageIdText.trim().isEmpty())\n       throw new IllegalArgumentException();\n \n+    Operation operation = new Operation(Operation.Endpoint.V1_COVERAGE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg4MTE0MA=="}, "originalCommit": {"oid": "c3d60a13a05a5b603b18b0b81fda68abaefe52b3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA4MzMyNw==", "bodyText": "Ahh, yes -- had forgotten about the matching. That's correct, though it won't have the params -- just the operation name.\nRegardless, it won't get logged twice -- the access log is only written to once per response, in gov.cms.bfd.server.war.RequestResponseLoggingFilter.addToHttpAccessLog().\n(Being pedantic: note that I said it only gets logged to the access log once. The other message/event log will also include whichever values the MDC happens to have at the time of any logging event. It doesn't particularly matter and there's not a lot we can do about it, given SLF4J's API -- short of replacing the MDC entirely, ourselves, which feels like a bad idea.)", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/181#discussion_r379083327", "createdAt": "2020-02-13T19:51:03Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/CoverageResourceProvider.java", "diffHunk": "@@ -83,6 +86,10 @@ public Coverage read(@IdParam IdType coverageId) {\n     if (coverageIdText == null || coverageIdText.trim().isEmpty())\n       throw new IllegalArgumentException();\n \n+    Operation operation = new Operation(Operation.Endpoint.V1_COVERAGE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg4MTE0MA=="}, "originalCommit": {"oid": "c3d60a13a05a5b603b18b0b81fda68abaefe52b3"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDE5MDA5OnYy", "diffSide": "RIGHT", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNDoxMDo1M1rOFpVLHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTozMjowMVrOFpYXiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg4Mjg0NA==", "bodyText": "These look like they're custom versions of the query params and headers sent to the system. It looks like these are also tracked in RequestResponseLoggingFilter.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/181#discussion_r378882844", "createdAt": "2020-02-13T14:10:53Z", "author": {"login": "whytheplatypus"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java", "diffHunk": "@@ -105,6 +108,11 @@ public Patient read(@IdParam IdType patientId, RequestDetails requestDetails) {\n \n     List<String> includeIdentifiersValues = returnIncludeIdentifiersValues(requestDetails);\n \n+    Operation operation = new Operation(Operation.Endpoint.V1_PATIENT);\n+    operation.setOption(\"by\", \"id\");\n+    operation.setOption(\"IncludeIdentifiers\", includeIdentifiersValues.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d60a13a05a5b603b18b0b81fda68abaefe52b3"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzNTE3OQ==", "bodyText": "Correct, but separated out to make NDJSON searches/filtering easier.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/181#discussion_r378935179", "createdAt": "2020-02-13T15:32:01Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java", "diffHunk": "@@ -105,6 +108,11 @@ public Patient read(@IdParam IdType patientId, RequestDetails requestDetails) {\n \n     List<String> includeIdentifiersValues = returnIncludeIdentifiersValues(requestDetails);\n \n+    Operation operation = new Operation(Operation.Endpoint.V1_PATIENT);\n+    operation.setOption(\"by\", \"id\");\n+    operation.setOption(\"IncludeIdentifiers\", includeIdentifiersValues.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg4Mjg0NA=="}, "originalCommit": {"oid": "c3d60a13a05a5b603b18b0b81fda68abaefe52b3"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 367, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}