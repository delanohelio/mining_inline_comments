{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNTk0OTAz", "number": 305, "title": "Cbrune/bfd 189 beneficiary table", "bodyText": "Change Details\n\nAdded a check in the rifloader when beneficiary history needs to be updated to check with the old beneficiary against the hicn, hicnunhashed,birthdate, and sex.  The beneficiary id wont change so i didnt compare that field.\n\nAcceptance Validation\n\nThat when a a old history and a new history are compared the right and correct amount of fields are being compared.\n\nFeedback Requested\n\nMake sure the right fields are compared between beneficiary history entities.\nExternal References\n\n\nBFD-189 (https://jira.cms.gov/browse/BFD-189)\n\nSecurity Implications\n\n\n new software dependencies\nNo\n\n\n\n altered security controls\nNo\n\n\n\n new data stored or transmitted\nnew data is being stored in terms of a mbi hash for the beneficiary history table.\n\n\nmbi hash and not PII/PHI\n\n security checklist is completed for this change\n\n\n\n requires more information or team discussion to evaluate security implications\n\n\nTesting scenarios:\nWas able to reproduce the problem in the old code.  It would just persist a new record to the beneficiary history table if they're were any changes.  It was just checking to see if the entity existed before and if it did based on the null check it would create another record.\nI was able to test the change in the code with our integration test and make sure the record if it found the same Birthdate, Hicn, HicnUnhashed, Sex, MbiHash, and medicarebeneficiaryId it will not insert into the beneficiary history table.", "createdAt": "2020-06-29T19:05:13Z", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305", "merged": true, "mergeCommit": {"oid": "66d23974ff86d82ce0981be76f1b1fc14b33532f"}, "closed": true, "closedAt": "2020-07-15T19:06:22Z", "author": {"login": "cbrunefearless"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjMt76AH2gAyNDQxNTk0OTAzOmEyM2Q5OWQ3NzU1ZmYxZTBmMjFhMzg2NzEwMWZlZWE4ZjZlZDNlNGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc_2c0qAFqTQ2ODU2MTMyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a23d99d7755ff1e0f21a3867101feea8f6ed3e4b", "author": {"user": null}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/a23d99d7755ff1e0f21a3867101feea8f6ed3e4b", "committedDate": "2020-05-20T17:42:28Z", "message": "Changed version of hapi fihr from v4.1 to v4.2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "384682569e98865b5a0153331c34fb00972522a9", "author": {"user": null}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/384682569e98865b5a0153331c34fb00972522a9", "committedDate": "2020-06-05T16:49:15Z", "message": "Merge branch 'master' of github.com:CMSgov/beneficiary-fhir-data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c1ec0adac797862b92c3f2d0a700733aecd6d58", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/2c1ec0adac797862b92c3f2d0a700733aecd6d58", "committedDate": "2020-06-06T03:03:16Z", "message": "Merge branch 'master' of github.com:CMSgov/beneficiary-fhir-data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b2b4462567cc460d442d4b22a045607ded37ddb", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/1b2b4462567cc460d442d4b22a045607ded37ddb", "committedDate": "2020-06-16T01:05:05Z", "message": "Merge branch 'master' of github.com:CMSgov/beneficiary-fhir-data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b8916b8ed830704e1ab607ca7ec35ec0973fcf3", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/1b8916b8ed830704e1ab607ca7ec35ec0973fcf3", "committedDate": "2020-06-25T18:02:11Z", "message": "Merge branch 'master' of github.com:CMSgov/beneficiary-fhir-data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf945afe63bc8e318a93bb52f18cc54320b8eae9", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/bf945afe63bc8e318a93bb52f18cc54320b8eae9", "committedDate": "2020-06-26T04:03:19Z", "message": "Added a beneficiaryhistoryequals function to check whether the old and new records are equal."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43df584d5137f84017cf26727458559f051184b7", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/43df584d5137f84017cf26727458559f051184b7", "committedDate": "2020-06-26T04:24:21Z", "message": "Added a beneficiaryhistoryequals function to check whether the old and new records are equal."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67c213cf4a3a7fe156fa15289a264314e6e9d215", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/67c213cf4a3a7fe156fa15289a264314e6e9d215", "committedDate": "2020-06-28T23:50:38Z", "message": "Added unit tests and integration tests for beneficiary history entries that dont change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6905c72d63686adc5ed0b9c88e50d2972c5f77f", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/e6905c72d63686adc5ed0b9c88e50d2972c5f77f", "committedDate": "2020-06-29T02:06:13Z", "message": "Added integration test for unchanged beneficiary history records"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMDI3MDkz", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#pullrequestreview-441027093", "createdAt": "2020-07-01T16:31:46Z", "commit": {"oid": "e6905c72d63686adc5ed0b9c88e50d2972c5f77f"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a07518b026ea30b4829487af31948c26c2b0e4f6", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/a07518b026ea30b4829487af31948c26c2b0e4f6", "committedDate": "2020-07-01T18:06:00Z", "message": "Added check to see if mbihash is equal"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MTM4Mjcz", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#pullrequestreview-449138273", "createdAt": "2020-07-15T16:54:27Z", "commit": {"oid": "a07518b026ea30b4829487af31948c26c2b0e4f6"}, "state": "DISMISSED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNjo1NDoyOFrOGyGz0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzowNzoxOVrOGyHSiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE5MzU1NA==", "bodyText": "Looks good, but seeing some comments not describing what is being asserted starting at this section of the file.  Also some typos, like \"unleashed\" and \"hicnUnhased\".", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#discussion_r455193554", "createdAt": "2020-07-15T16:54:28Z", "author": {"login": "dtisza1"}, "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/test/java/gov/cms/bfd/pipeline/rif/load/RifLoaderTest.java", "diffHunk": "@@ -86,4 +89,111 @@ public void computeMbiHash() {\n         \"742086db6bf338dedda6175ea3af8ca5e85b81fda9cc7078004a4d3e4792494b\",\n         RifLoader.computeMbiHash(options, secretKeyFactory, \"2456689\"));\n   }\n+\n+  /**\n+   * Runs a couple of fake HICNs through {@link\n+   * gov.cms.bfd.pipeline.rif.load.RifLoader#computeHicnHash(LoadAppOptions, SecretKeyFactory,\n+   * String)} to verify that the expected result is produced.\n+   */\n+  @Test\n+  public void isBeneficiaryHistoryEqual() {\n+    Beneficiary newBene = new Beneficiary();\n+    LocalDate birthDate = LocalDate.of(1960, 1, 8);\n+    String hicn = \"2332j3l2\";\n+    Optional<String> hicnUnhased = Optional.of(\"323232\");\n+    char sex = 'M';\n+    Optional<String> medicareBeneficiaryId = Optional.of(\"beneficiaryId\");\n+    Optional<String> mbiHash = Optional.of(\"mbiHash\");\n+\n+    newBene.setBirthDate(birthDate);\n+    newBene.setHicn(hicn);\n+    newBene.setHicnUnhashed(hicnUnhased);\n+    newBene.setSex(sex);\n+    newBene.setMedicareBeneficiaryId(medicareBeneficiaryId);\n+    newBene.setMbiHash(mbiHash);\n+\n+    Beneficiary oldBene = new Beneficiary();\n+    oldBene.setBirthDate(birthDate);\n+    oldBene.setHicn(hicn);\n+    oldBene.setHicnUnhashed(hicnUnhased);\n+    oldBene.setSex(sex);\n+    oldBene.setMedicareBeneficiaryId(medicareBeneficiaryId);\n+    oldBene.setMbiHash(mbiHash);\n+\n+    // Both old and new beneficiary have the same values return true\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary birth date is not the same as old should assert false\n+    newBene.setBirthDate(LocalDate.of(1950, 1, 8));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary birth date and set it back to old should assert true\n+    newBene.setBirthDate(birthDate);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn is not the same as old should assert false\n+    newBene.setHicn(\"difHicn\");\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary hicn and set it back to old should assert true\n+    newBene.setHicn(hicn);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn unleashed is not the same as old should assert false\n+    newBene.setHicnUnhashed(Optional.of(\"difHicn\"));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary hicn unleashed and set it back to old should assert true\n+    newBene.setHicnUnhashed(hicnUnhased);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn unleashed is not the same as old should assert false\n+    newBene.setSex('F');\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07518b026ea30b4829487af31948c26c2b0e4f6"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwMDIyMA==", "bodyText": "comment mismatch?", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#discussion_r455200220", "createdAt": "2020-07-15T17:05:15Z", "author": {"login": "dtisza1"}, "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/test/java/gov/cms/bfd/pipeline/rif/load/RifLoaderTest.java", "diffHunk": "@@ -86,4 +89,111 @@ public void computeMbiHash() {\n         \"742086db6bf338dedda6175ea3af8ca5e85b81fda9cc7078004a4d3e4792494b\",\n         RifLoader.computeMbiHash(options, secretKeyFactory, \"2456689\"));\n   }\n+\n+  /**\n+   * Runs a couple of fake HICNs through {@link\n+   * gov.cms.bfd.pipeline.rif.load.RifLoader#computeHicnHash(LoadAppOptions, SecretKeyFactory,\n+   * String)} to verify that the expected result is produced.\n+   */\n+  @Test\n+  public void isBeneficiaryHistoryEqual() {\n+    Beneficiary newBene = new Beneficiary();\n+    LocalDate birthDate = LocalDate.of(1960, 1, 8);\n+    String hicn = \"2332j3l2\";\n+    Optional<String> hicnUnhased = Optional.of(\"323232\");\n+    char sex = 'M';\n+    Optional<String> medicareBeneficiaryId = Optional.of(\"beneficiaryId\");\n+    Optional<String> mbiHash = Optional.of(\"mbiHash\");\n+\n+    newBene.setBirthDate(birthDate);\n+    newBene.setHicn(hicn);\n+    newBene.setHicnUnhashed(hicnUnhased);\n+    newBene.setSex(sex);\n+    newBene.setMedicareBeneficiaryId(medicareBeneficiaryId);\n+    newBene.setMbiHash(mbiHash);\n+\n+    Beneficiary oldBene = new Beneficiary();\n+    oldBene.setBirthDate(birthDate);\n+    oldBene.setHicn(hicn);\n+    oldBene.setHicnUnhashed(hicnUnhased);\n+    oldBene.setSex(sex);\n+    oldBene.setMedicareBeneficiaryId(medicareBeneficiaryId);\n+    oldBene.setMbiHash(mbiHash);\n+\n+    // Both old and new beneficiary have the same values return true\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary birth date is not the same as old should assert false\n+    newBene.setBirthDate(LocalDate.of(1950, 1, 8));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary birth date and set it back to old should assert true\n+    newBene.setBirthDate(birthDate);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn is not the same as old should assert false\n+    newBene.setHicn(\"difHicn\");\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary hicn and set it back to old should assert true\n+    newBene.setHicn(hicn);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn unleashed is not the same as old should assert false\n+    newBene.setHicnUnhashed(Optional.of(\"difHicn\"));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary hicn unleashed and set it back to old should assert true\n+    newBene.setHicnUnhashed(hicnUnhased);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn unleashed is not the same as old should assert false\n+    newBene.setSex('F');\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary sex and set it back to old should assert true\n+    newBene.setSex(sex);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary mediciarybeneficiaryid is not the same as old should assert false\n+    newBene.setMedicareBeneficiaryId(Optional.of(\"diff\"));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary sex and set it back to old should assert true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07518b026ea30b4829487af31948c26c2b0e4f6"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwMDU5OA==", "bodyText": "comment mismatch?", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#discussion_r455200598", "createdAt": "2020-07-15T17:05:50Z", "author": {"login": "dtisza1"}, "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/test/java/gov/cms/bfd/pipeline/rif/load/RifLoaderTest.java", "diffHunk": "@@ -86,4 +89,111 @@ public void computeMbiHash() {\n         \"742086db6bf338dedda6175ea3af8ca5e85b81fda9cc7078004a4d3e4792494b\",\n         RifLoader.computeMbiHash(options, secretKeyFactory, \"2456689\"));\n   }\n+\n+  /**\n+   * Runs a couple of fake HICNs through {@link\n+   * gov.cms.bfd.pipeline.rif.load.RifLoader#computeHicnHash(LoadAppOptions, SecretKeyFactory,\n+   * String)} to verify that the expected result is produced.\n+   */\n+  @Test\n+  public void isBeneficiaryHistoryEqual() {\n+    Beneficiary newBene = new Beneficiary();\n+    LocalDate birthDate = LocalDate.of(1960, 1, 8);\n+    String hicn = \"2332j3l2\";\n+    Optional<String> hicnUnhased = Optional.of(\"323232\");\n+    char sex = 'M';\n+    Optional<String> medicareBeneficiaryId = Optional.of(\"beneficiaryId\");\n+    Optional<String> mbiHash = Optional.of(\"mbiHash\");\n+\n+    newBene.setBirthDate(birthDate);\n+    newBene.setHicn(hicn);\n+    newBene.setHicnUnhashed(hicnUnhased);\n+    newBene.setSex(sex);\n+    newBene.setMedicareBeneficiaryId(medicareBeneficiaryId);\n+    newBene.setMbiHash(mbiHash);\n+\n+    Beneficiary oldBene = new Beneficiary();\n+    oldBene.setBirthDate(birthDate);\n+    oldBene.setHicn(hicn);\n+    oldBene.setHicnUnhashed(hicnUnhased);\n+    oldBene.setSex(sex);\n+    oldBene.setMedicareBeneficiaryId(medicareBeneficiaryId);\n+    oldBene.setMbiHash(mbiHash);\n+\n+    // Both old and new beneficiary have the same values return true\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary birth date is not the same as old should assert false\n+    newBene.setBirthDate(LocalDate.of(1950, 1, 8));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary birth date and set it back to old should assert true\n+    newBene.setBirthDate(birthDate);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn is not the same as old should assert false\n+    newBene.setHicn(\"difHicn\");\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary hicn and set it back to old should assert true\n+    newBene.setHicn(hicn);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn unleashed is not the same as old should assert false\n+    newBene.setHicnUnhashed(Optional.of(\"difHicn\"));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary hicn unleashed and set it back to old should assert true\n+    newBene.setHicnUnhashed(hicnUnhased);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn unleashed is not the same as old should assert false\n+    newBene.setSex('F');\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary sex and set it back to old should assert true\n+    newBene.setSex(sex);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary mediciarybeneficiaryid is not the same as old should assert false\n+    newBene.setMedicareBeneficiaryId(Optional.of(\"diff\"));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary sex and set it back to old should assert true\n+    newBene.setMedicareBeneficiaryId(medicareBeneficiaryId);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary mbihash is not the same as old should assert false\n+    newBene.setMbiHash(Optional.of(\"mbihashdiff\"));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary mbihash and set it back to old should assert true\n+    newBene.setMbiHash(mbiHash);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Check for nulls\n+    // New beneficiary hicn unleashed is null and the return result should assert false\n+    newBene.setHicnUnhashed(Optional.empty());\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary hicn unleashed and set it back to old should assert true\n+    newBene.setHicnUnhashed(hicnUnhased);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn unleashed is null and the return result should assert false\n+    newBene.setSex(Character.MIN_VALUE);\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary sex and set it back to old should assert true\n+    newBene.setSex(sex);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary mediciarybeneficiaryid is null and the return result should assert false\n+    newBene.setMedicareBeneficiaryId(Optional.empty());\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary sex and set it back to old should assert true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07518b026ea30b4829487af31948c26c2b0e4f6"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwMTQxNw==", "bodyText": "comment mismatch?", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#discussion_r455201417", "createdAt": "2020-07-15T17:07:19Z", "author": {"login": "dtisza1"}, "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/test/java/gov/cms/bfd/pipeline/rif/load/RifLoaderTest.java", "diffHunk": "@@ -86,4 +89,111 @@ public void computeMbiHash() {\n         \"742086db6bf338dedda6175ea3af8ca5e85b81fda9cc7078004a4d3e4792494b\",\n         RifLoader.computeMbiHash(options, secretKeyFactory, \"2456689\"));\n   }\n+\n+  /**\n+   * Runs a couple of fake HICNs through {@link\n+   * gov.cms.bfd.pipeline.rif.load.RifLoader#computeHicnHash(LoadAppOptions, SecretKeyFactory,\n+   * String)} to verify that the expected result is produced.\n+   */\n+  @Test\n+  public void isBeneficiaryHistoryEqual() {\n+    Beneficiary newBene = new Beneficiary();\n+    LocalDate birthDate = LocalDate.of(1960, 1, 8);\n+    String hicn = \"2332j3l2\";\n+    Optional<String> hicnUnhased = Optional.of(\"323232\");\n+    char sex = 'M';\n+    Optional<String> medicareBeneficiaryId = Optional.of(\"beneficiaryId\");\n+    Optional<String> mbiHash = Optional.of(\"mbiHash\");\n+\n+    newBene.setBirthDate(birthDate);\n+    newBene.setHicn(hicn);\n+    newBene.setHicnUnhashed(hicnUnhased);\n+    newBene.setSex(sex);\n+    newBene.setMedicareBeneficiaryId(medicareBeneficiaryId);\n+    newBene.setMbiHash(mbiHash);\n+\n+    Beneficiary oldBene = new Beneficiary();\n+    oldBene.setBirthDate(birthDate);\n+    oldBene.setHicn(hicn);\n+    oldBene.setHicnUnhashed(hicnUnhased);\n+    oldBene.setSex(sex);\n+    oldBene.setMedicareBeneficiaryId(medicareBeneficiaryId);\n+    oldBene.setMbiHash(mbiHash);\n+\n+    // Both old and new beneficiary have the same values return true\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary birth date is not the same as old should assert false\n+    newBene.setBirthDate(LocalDate.of(1950, 1, 8));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary birth date and set it back to old should assert true\n+    newBene.setBirthDate(birthDate);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn is not the same as old should assert false\n+    newBene.setHicn(\"difHicn\");\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary hicn and set it back to old should assert true\n+    newBene.setHicn(hicn);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn unleashed is not the same as old should assert false\n+    newBene.setHicnUnhashed(Optional.of(\"difHicn\"));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary hicn unleashed and set it back to old should assert true\n+    newBene.setHicnUnhashed(hicnUnhased);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn unleashed is not the same as old should assert false\n+    newBene.setSex('F');\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary sex and set it back to old should assert true\n+    newBene.setSex(sex);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary mediciarybeneficiaryid is not the same as old should assert false\n+    newBene.setMedicareBeneficiaryId(Optional.of(\"diff\"));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary sex and set it back to old should assert true\n+    newBene.setMedicareBeneficiaryId(medicareBeneficiaryId);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary mbihash is not the same as old should assert false\n+    newBene.setMbiHash(Optional.of(\"mbihashdiff\"));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary mbihash and set it back to old should assert true\n+    newBene.setMbiHash(mbiHash);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Check for nulls\n+    // New beneficiary hicn unleashed is null and the return result should assert false\n+    newBene.setHicnUnhashed(Optional.empty());\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary hicn unleashed and set it back to old should assert true\n+    newBene.setHicnUnhashed(hicnUnhased);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn unleashed is null and the return result should assert false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07518b026ea30b4829487af31948c26c2b0e4f6"}, "originalPosition": 107}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a68745f34016320c7064e15c3c7cce6613db30a", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/8a68745f34016320c7064e15c3c7cce6613db30a", "committedDate": "2020-07-15T17:18:27Z", "message": "Changed comments on tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32dfb84fad81b24e021cb20c6e692f58695e8397", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/32dfb84fad81b24e021cb20c6e692f58695e8397", "committedDate": "2020-07-15T17:22:23Z", "message": "Changed comments on tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MjMwNDY1", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#pullrequestreview-449230465", "createdAt": "2020-07-15T18:38:13Z", "commit": {"oid": "32dfb84fad81b24e021cb20c6e692f58695e8397"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MjMzMzkw", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#pullrequestreview-449233390", "createdAt": "2020-07-15T18:42:21Z", "commit": {"oid": "32dfb84fad81b24e021cb20c6e692f58695e8397"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MjUwMDg1", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#pullrequestreview-449250085", "createdAt": "2020-07-15T19:05:49Z", "commit": {"oid": "32dfb84fad81b24e021cb20c6e692f58695e8397"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NTYxMzI2", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#pullrequestreview-468561326", "createdAt": "2020-08-17T15:22:04Z", "commit": {"oid": "32dfb84fad81b24e021cb20c6e692f58695e8397"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNToyMjowNFrOHBtXYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjozMDo0NVrOHBwCfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1Mzg4OQ==", "bodyText": "This line missing before: oof!\nThis possibly adds extra work to our de-dupe, @keithdadkins: we should consider also merging history records where the only difference is that the MBI hash is missing in one of them.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#discussion_r471553889", "createdAt": "2020-08-17T15:22:04Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/main/java/gov/cms/bfd/pipeline/rif/load/RifLoader.java", "diffHunk": "@@ -609,20 +609,46 @@ private static void updateBeneficaryHistory(\n     Beneficiary oldBeneficiaryRecord =\n         entityManager.find(Beneficiary.class, newBeneficiaryRecord.getBeneficiaryId());\n \n-    if (oldBeneficiaryRecord != null) {\n+    if (oldBeneficiaryRecord != null\n+        && !isBeneficiaryHistoryEqual(newBeneficiaryRecord, oldBeneficiaryRecord)) {\n       BeneficiaryHistory oldBeneCopy = new BeneficiaryHistory();\n       oldBeneCopy.setBeneficiaryId(oldBeneficiaryRecord.getBeneficiaryId());\n       oldBeneCopy.setBirthDate(oldBeneficiaryRecord.getBirthDate());\n       oldBeneCopy.setHicn(oldBeneficiaryRecord.getHicn());\n       oldBeneCopy.setHicnUnhashed(oldBeneficiaryRecord.getHicnUnhashed());\n       oldBeneCopy.setSex(oldBeneficiaryRecord.getSex());\n       oldBeneCopy.setMedicareBeneficiaryId(oldBeneficiaryRecord.getMedicareBeneficiaryId());\n+      oldBeneCopy.setMbiHash(oldBeneficiaryRecord.getMbiHash());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32dfb84fad81b24e021cb20c6e692f58695e8397"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1NTI4OA==", "bodyText": "The inconsistent field names here make me sad (and make this harder to read), but that's not this PR's fault.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#discussion_r471555288", "createdAt": "2020-08-17T15:24:13Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/main/java/gov/cms/bfd/pipeline/rif/load/RifLoader.java", "diffHunk": "@@ -609,20 +609,46 @@ private static void updateBeneficaryHistory(\n     Beneficiary oldBeneficiaryRecord =\n         entityManager.find(Beneficiary.class, newBeneficiaryRecord.getBeneficiaryId());\n \n-    if (oldBeneficiaryRecord != null) {\n+    if (oldBeneficiaryRecord != null\n+        && !isBeneficiaryHistoryEqual(newBeneficiaryRecord, oldBeneficiaryRecord)) {\n       BeneficiaryHistory oldBeneCopy = new BeneficiaryHistory();\n       oldBeneCopy.setBeneficiaryId(oldBeneficiaryRecord.getBeneficiaryId());\n       oldBeneCopy.setBirthDate(oldBeneficiaryRecord.getBirthDate());\n       oldBeneCopy.setHicn(oldBeneficiaryRecord.getHicn());\n       oldBeneCopy.setHicnUnhashed(oldBeneficiaryRecord.getHicnUnhashed());\n       oldBeneCopy.setSex(oldBeneficiaryRecord.getSex());\n       oldBeneCopy.setMedicareBeneficiaryId(oldBeneficiaryRecord.getMedicareBeneficiaryId());\n+      oldBeneCopy.setMbiHash(oldBeneficiaryRecord.getMbiHash());\n       oldBeneCopy.setLastUpdated(batchTimestamp);\n \n       entityManager.persist(oldBeneCopy);\n     }\n   }\n \n+  /**\n+   * Ensures that a {@link Beneficiary} records for old and new benificiaries are equal or not\n+   * equal.\n+   *\n+   * @param newBeneficiaryRecord the {@link Beneficiary} new record being processed\n+   * @param oldBeneficiaryRecord the {@link Beneficiary} old record that was processed\n+   */\n+  static boolean isBeneficiaryHistoryEqual(\n+      Beneficiary newBeneficiaryRecord, Beneficiary oldBeneficiaryRecord) {\n+\n+    if (newBeneficiaryRecord.getBirthDate().equals(oldBeneficiaryRecord.getBirthDate())\n+        && newBeneficiaryRecord.getHicn().equals(oldBeneficiaryRecord.getHicn())\n+        && newBeneficiaryRecord.getHicnUnhashed().equals(oldBeneficiaryRecord.getHicnUnhashed())\n+        && newBeneficiaryRecord.getSex() == oldBeneficiaryRecord.getSex()\n+        && newBeneficiaryRecord.getMbiHash().equals(oldBeneficiaryRecord.getMbiHash())\n+        && newBeneficiaryRecord\n+            .getMedicareBeneficiaryId()\n+            .equals(oldBeneficiaryRecord.getMedicareBeneficiaryId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32dfb84fad81b24e021cb20c6e692f58695e8397"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5NzY5Mw==", "bodyText": "Shouldn't this just be checking to see if lastUpdated is less than or equal to start?\nAlso: you could just pull the lastUpdated from the record after the first load, run the second load, and then verify that it's unchanged. That seems simplest+clearest.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#discussion_r471597693", "createdAt": "2020-08-17T16:30:45Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/test/java/gov/cms/bfd/pipeline/rif/load/RifLoaderIT.java", "diffHunk": "@@ -258,6 +259,63 @@ public void loadSampleU() {\n     }\n   }\n \n+  /**\n+   * Runs {@link gov.cms.bfd.pipeline.rif.load.RifLoader} against the {@link\n+   * StaticRifResourceGroup#SAMPLE_U} data.\n+   */\n+  @Test\n+  public void loadSampleUUnchanged() {\n+    DataSource dataSource = DatabaseTestHelper.getTestDatabaseAfterClean();\n+    loadSample(dataSource, Arrays.asList(StaticRifResourceGroup.SAMPLE_A.getResources()));\n+    // this should insert a new beneficiary history record\n+    loadSample(dataSource, Arrays.asList(StaticRifResource.SAMPLE_U_BENES_UNCHANGED));\n+\n+    long start = System.currentTimeMillis();\n+    // this should bypass inserting a new beneficiary history record because it already exists\n+    loadSample(dataSource, Arrays.asList(StaticRifResource.SAMPLE_U_BENES_UNCHANGED));\n+\n+    /*\n+     * Verify that the updates worked as expected by manually checking some fields.\n+     */\n+    LoadAppOptions options = RifLoaderTestUtils.getLoadOptions(dataSource);\n+    EntityManagerFactory entityManagerFactory =\n+        RifLoaderTestUtils.createEntityManagerFactory(options);\n+    EntityManager entityManager = null;\n+    try {\n+      entityManager = entityManagerFactory.createEntityManager();\n+\n+      CriteriaQuery<BeneficiaryHistory> beneficiaryHistoryCriteria =\n+          entityManager.getCriteriaBuilder().createQuery(BeneficiaryHistory.class);\n+      List<BeneficiaryHistory> beneficiaryHistoryEntries =\n+          entityManager\n+              .createQuery(\n+                  beneficiaryHistoryCriteria.select(\n+                      beneficiaryHistoryCriteria.from(BeneficiaryHistory.class)))\n+              .getResultList();\n+      for (BeneficiaryHistory beneHistory : beneficiaryHistoryEntries) {\n+        Assert.assertEquals(\"567834\", beneHistory.getBeneficiaryId());\n+        // A recent lastUpdated timestamp\n+        Assert.assertTrue(\"Expected a lastUpdated field\", beneHistory.getLastUpdated().isPresent());\n+        long end = System.currentTimeMillis();\n+        // finding the time difference and converting it into seconds\n+        long secs = (end - start) / 1000L;\n+        beneHistory\n+            .getLastUpdated()\n+            .ifPresent(\n+                lastUpdated -> {\n+                  Assert.assertFalse(\n+                      \"Expected not a recent lastUpdated timestamp\",\n+                      lastUpdated.after(Date.from(Instant.now().minusSeconds(secs))));\n+                });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32dfb84fad81b24e021cb20c6e692f58695e8397"}, "originalPosition": 143}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 567, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}