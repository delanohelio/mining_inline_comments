{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5OTY1NjUz", "number": 341, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMTozNjowNFrOEbIuqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMTozNjowNFrOEbIuqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODkwMDI2OnYy", "diffSide": "RIGHT", "path": "apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/utils/EndpointJsonResponseComparatorIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMTozNjowNFrOHE-f9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMTozNjowNFrOHE-f9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk4MDM0MA==", "bodyText": "Just an FYI that using APIs from recent versions of Java, you can make this stuff cleaner: https://www.baeldung.com/java-8-comparator-comparing#1-key-selector-variant", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/341#discussion_r474980340", "createdAt": "2020-08-21T21:36:04Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/utils/EndpointJsonResponseComparatorIT.java", "diffHunk": "@@ -297,6 +297,77 @@ public int compare(JsonNode node1, JsonNode node2) {\n     return jsonResponse;\n   }\n \n+  /**\n+   * FIXME: Additional workaround due to HAPI not always returning array elements in the same order\n+   * for a specific searchParam {@link JsonArray} in the capability statement. This method is only\n+   * necessary until the following issue has been resolved with HAPI:\n+   * https://github.com/jamesagnew/hapi-fhir/issues/1183\n+   *\n+   * <p>Before: { \"type\" : [ {\"coding\" : [ {\"system\" :\n+   * \"https://bluebutton.cms.gov/resources/codesystem/diagnosis-type\", \"code\" : \"principal\",\n+   * \"display\" : \"The single medical diagnosis that is most relevant to the patient's chief\n+   * complaint or need for treatment.\" ] }, {\"coding\" : [ {\"system\" :\n+   * \"https://bluebutton.cms.gov/resources/codesystem/diagnosis-type\", \"code\" :\n+   * \"external-first\",\"display\" : \"The code used to identify the 1st external cause of injury,\n+   * poisoning, or other adverse effect.\"} } ]} ]}\n+   *\n+   * <p>After: { \"type\" : [ {\"coding\" : [ {\"system\" :\n+   * \"https://bluebutton.cms.gov/resources/codesystem/diagnosis-type\", \"code\" :\n+   * \"external-first\",\"display\" : \"The code used to identify the 1st external cause of injury,\n+   * poisoning, or other adverse effect.\"} ] }, {\"coding\" : [ {\"system\" :\n+   * \"https://bluebutton.cms.gov/resources/codesystem/diagnosis-type\",\"code\" : \"principal\",\n+   * \"display\" : \"The single medical diagnosis that is most relevant to the patient's chief\n+   * complaint or need for treatment.\"} ]} ]}\n+   *\n+   * @param unsortedResponse the JSON string with an unsorted diagnosisType array\n+   * @param parseStringAt the JSON string with the search string\n+   * @return the JSON string with the sorted diagnosis type array\n+   */\n+  private static String sortDiagnosisTypes(String unsortedResponse, String parseStringAt) {\n+    ObjectMapper mapper = new ObjectMapper();\n+    mapper.writerWithDefaultPrettyPrinter();\n+    JsonNode parsedJson = null;\n+    try {\n+      parsedJson = mapper.readTree(unsortedResponse);\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(\n+          \"Unable to deserialize the following JSON content as tree: \" + unsortedResponse, e);\n+    }\n+\n+    // This returns the DiagnosisType array node for the resource\n+    JsonNode diagnosisTypeArray = parsedJson.at(parseStringAt);\n+\n+    Iterator<JsonNode> diagnosisTypeArrayIterator = diagnosisTypeArray.elements();\n+    List<JsonNode> diagnosisTypes = new ArrayList<JsonNode>();\n+    while (diagnosisTypeArrayIterator.hasNext()) {\n+      diagnosisTypes.add(diagnosisTypeArrayIterator.next());\n+    }\n+\n+    Collections.sort(\n+        diagnosisTypes,\n+        new Comparator<JsonNode>() {\n+          public int compare(JsonNode node1, JsonNode node2) {\n+            String name1 = node1.get(\"coding\").get(0).get(\"code\").toString();\n+            String name2 = node2.get(\"coding\").get(0).get(\"code\").toString();\n+            return name1.compareTo(name2);\n+          }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eeddaa244047e659fe581c6c9dcafed3fdf8b270"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 240, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}