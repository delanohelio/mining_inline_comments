{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5OTEzNzU3", "number": 421, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMTo0OToyNFrOFO3Zxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxOTo1Mzo0NlrOFQIv4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTMyMTAyOnYy", "diffSide": "LEFT", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/V2Server.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMTo0OToyNFrOIT4j-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMTo0OToyNFrOIT4j-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcyMDU3MA==", "bodyText": "Arg constructor is deprecated. Use no args construct.\nref: https://hapifhir.io/hapi-fhir/apidocs/hapi-fhir-structures-r4/org/hl7/fhir/r4/hapi/rest/server/ServerCapabilityStatementProvider.html", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/421#discussion_r557720570", "createdAt": "2021-01-14T21:49:24Z", "author": {"login": "jzulim"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/V2Server.java", "diffHunk": "@@ -66,7 +66,7 @@ private void configureServerInfoMetadata() {\n \n     // Lightly customize the capability provider to set publisher name.\n     ServerCapabilityStatementProvider capabilityStatementProvider =\n-        new ServerCapabilityStatementProvider(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0cf33d8984f45b769dfd186f37e6e70947852ac"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTM0ODkxOnYy", "diffSide": "RIGHT", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4ExplanationOfBenefitResourceProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMTo1Nzo1M1rOIT406A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMTo1Nzo1M1rOIT406A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcyNDkwNA==", "bodyText": "Should be V2_EOB", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/421#discussion_r557724904", "createdAt": "2021-01-14T21:57:53Z", "author": {"login": "jzulim"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4ExplanationOfBenefitResourceProvider.java", "diffHunk": "@@ -0,0 +1,491 @@\n+package gov.cms.bfd.server.war.r4.providers;\n+\n+import ca.uhn.fhir.model.api.annotation.Description;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.annotation.IdParam;\n+import ca.uhn.fhir.rest.annotation.OptionalParam;\n+import ca.uhn.fhir.rest.annotation.Read;\n+import ca.uhn.fhir.rest.annotation.RequiredParam;\n+import ca.uhn.fhir.rest.annotation.Search;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.ParamPrefixEnum;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.TokenAndListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import com.codahale.metrics.MetricRegistry;\n+import com.codahale.metrics.Timer;\n+import com.newrelic.api.agent.Trace;\n+import gov.cms.bfd.model.rif.Beneficiary;\n+import gov.cms.bfd.server.war.Operation;\n+import gov.cms.bfd.server.war.commons.LoadedFilterManager;\n+import gov.cms.bfd.server.war.commons.OffsetLinkBuilder;\n+import gov.cms.bfd.server.war.commons.QueryUtils;\n+import gov.cms.bfd.server.war.commons.TransformerConstants;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import javax.inject.Inject;\n+import javax.persistence.EntityManager;\n+import javax.persistence.NoResultException;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.Bundle;\n+import org.hl7.fhir.r4.model.ExplanationOfBenefit;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This FHIR {@link IResourceProvider} adds support for R4 {@link ExplanationOfBenefit} resources,\n+ * derived from the CCW claims.\n+ */\n+@Component\n+public final class R4ExplanationOfBenefitResourceProvider implements IResourceProvider {\n+  private static final Logger LOGGER =\n+      LoggerFactory.getLogger(R4ExplanationOfBenefitResourceProvider.class);\n+\n+  /**\n+   * A {@link Pattern} that will match the {@link ExplanationOfBenefit#getId()}s used in this\n+   * application, e.g. <code>pde-1234</code> or <code>pde--1234</code> (for negative IDs).\n+   */\n+  private static final Pattern EOB_ID_PATTERN = Pattern.compile(\"(\\\\p{Alpha}+)-(-?\\\\p{Alnum}+)\");\n+\n+  private EntityManager entityManager;\n+  private MetricRegistry metricRegistry;\n+  private R4SamhsaMatcher samhsaMatcher;\n+  private LoadedFilterManager loadedFilterManager;\n+\n+  /** @param entityManager a JPA {@link EntityManager} connected to the application's database */\n+  @PersistenceContext\n+  public void setEntityManager(EntityManager entityManager) {\n+    this.entityManager = entityManager;\n+  }\n+\n+  /** @param metricRegistry the {@link MetricRegistry} to use */\n+  @Inject\n+  public void setMetricRegistry(MetricRegistry metricRegistry) {\n+    this.metricRegistry = metricRegistry;\n+  }\n+\n+  /** @param samhsaMatcher the {@link R4SamhsaMatcher} to use */\n+  @Inject\n+  public void setSamhsaFilterer(R4SamhsaMatcher samhsaMatcher) {\n+    this.samhsaMatcher = samhsaMatcher;\n+  }\n+\n+  /** @param loadedFilterManager the {@link LoadedFilterManager} to use */\n+  @Inject\n+  public void setLoadedFilterManager(LoadedFilterManager loadedFilterManager) {\n+    this.loadedFilterManager = loadedFilterManager;\n+  }\n+\n+  /** @see ca.uhn.fhir.rest.server.IResourceProvider#getResourceType() */\n+  @Override\n+  public Class<? extends IBaseResource> getResourceType() {\n+    return ExplanationOfBenefit.class;\n+  }\n+\n+  /**\n+   * Adds support for the FHIR \"read\" operation, for {@link ExplanationOfBenefit}s. The {@link Read}\n+   * annotation indicates that this method supports the read operation.\n+   *\n+   * <p>Read operations take a single parameter annotated with {@link IdParam}, and should return a\n+   * single resource instance.\n+   *\n+   * @param eobId The read operation takes one parameter, which must be of type {@link IdType} and\n+   *     must be annotated with the {@link IdParam} annotation.\n+   * @return Returns a resource matching the specified {@link IdDt}, or <code>null</code> if none\n+   *     exists.\n+   */\n+  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+  @Read(version = false)\n+  @Trace\n+  public ExplanationOfBenefit read(@IdParam IdType eobId) {\n+    if (eobId == null) throw new IllegalArgumentException();\n+    if (eobId.getVersionIdPartAsLong() != null) throw new IllegalArgumentException();\n+\n+    String eobIdText = eobId.getIdPart();\n+    if (eobIdText == null || eobIdText.trim().isEmpty()) throw new IllegalArgumentException();\n+\n+    Matcher eobIdMatcher = EOB_ID_PATTERN.matcher(eobIdText);\n+    if (!eobIdMatcher.matches())\n+      throw new IllegalArgumentException(\"Unsupported ID pattern: \" + eobIdText);\n+\n+    String eobIdTypeText = eobIdMatcher.group(1);\n+    Optional<ClaimType> eobIdType = ClaimType.parse(eobIdTypeText);\n+    if (!eobIdType.isPresent()) throw new ResourceNotFoundException(eobId);\n+    String eobIdClaimIdText = eobIdMatcher.group(2);\n+\n+    Operation operation = new Operation(Operation.Endpoint.V1_EOB);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0cf33d8984f45b769dfd186f37e6e70947852ac"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTQwMzUwOnYy", "diffSide": "RIGHT", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/ClaimType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMjoxNToyOFrOIT5V9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMjoxNToyOFrOIT5V9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzczMzM2NQ==", "bodyText": "BFD", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/421#discussion_r557733365", "createdAt": "2021-01-14T22:15:28Z", "author": {"login": "jzulim"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/ClaimType.java", "diffHunk": "@@ -0,0 +1,123 @@\n+package gov.cms.bfd.server.war.r4.providers;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import gov.cms.bfd.model.rif.Beneficiary;\n+import gov.cms.bfd.model.rif.PartDEvent;\n+import gov.cms.bfd.model.rif.PartDEvent_;\n+import java.time.LocalDate;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.metamodel.PluralAttribute;\n+import javax.persistence.metamodel.SingularAttribute;\n+import org.hl7.fhir.r4.model.ExplanationOfBenefit;\n+\n+/**\n+ * Enumerates the various Blue Button claim types that are supported by {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0cf33d8984f45b769dfd186f37e6e70947852ac"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNDY0ODY0OnYy", "diffSide": "RIGHT", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/PartDEventTransformerV2.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxOTo1Mzo0NlrOIV1stQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxOTo1Mzo0NlrOIV1stQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc3MDgwNQ==", "bodyText": "@jarwilliams1971 Here's the PDE Mapping", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/421#discussion_r559770805", "createdAt": "2021-01-18T19:53:46Z", "author": {"login": "jzulim"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/PartDEventTransformerV2.java", "diffHunk": "@@ -0,0 +1,406 @@\n+package gov.cms.bfd.server.war.r4.providers;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.codahale.metrics.Timer;\n+import com.newrelic.api.agent.Trace;\n+import gov.cms.bfd.model.codebook.data.CcwCodebookVariable;\n+import gov.cms.bfd.model.rif.PartDEvent;\n+import gov.cms.bfd.model.rif.parse.InvalidRifValueException;\n+import gov.cms.bfd.server.war.commons.IdentifierType;\n+import gov.cms.bfd.server.war.commons.MedicareSegment;\n+import gov.cms.bfd.server.war.commons.TransformerConstants;\n+import gov.cms.bfd.sharedutils.exceptions.BadCodeMonkeyException;\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.DateType;\n+import org.hl7.fhir.r4.model.ExplanationOfBenefit;\n+import org.hl7.fhir.r4.model.ExplanationOfBenefit.ItemComponent;\n+import org.hl7.fhir.r4.model.SimpleQuantity;\n+import org.hl7.fhir.r4.model.codesystems.ClaimCareteamrole;\n+import org.hl7.fhir.r4.model.codesystems.V3ActCode;\n+\n+/** Transforms CCW {@link PartDEvent} instances into FHIR {@link ExplanationOfBenefit} resources. */\n+final class PartDEventTransformerV2 {\n+  /**\n+   * @param metricRegistry the {@link MetricRegistry} to use\n+   * @param claim the CCW {@link PartDEvent} to transform\n+   * @return a FHIR {@link ExplanationOfBenefit} resource that represents the specified {@link\n+   *     PartDEvent}\n+   */\n+  @Trace\n+  static ExplanationOfBenefit transform(MetricRegistry metricRegistry, Object claim) {\n+    Timer.Context timer =\n+        metricRegistry\n+            .timer(MetricRegistry.name(PartDEventTransformerV2.class.getSimpleName(), \"transform\"))\n+            .time();\n+\n+    if (!(claim instanceof PartDEvent)) throw new BadCodeMonkeyException();\n+    ExplanationOfBenefit eob = transformClaim((PartDEvent) claim);\n+\n+    timer.stop();\n+    return eob;\n+  }\n+\n+  /**\n+   * @param claimGroup the CCW {@link PartDEvent} to transform", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0cf33d8984f45b769dfd186f37e6e70947852ac"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 200, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}