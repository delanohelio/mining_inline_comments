{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0ODU5MjU0", "number": 419, "title": "Cbrune/bfd549 enrollmentdata", "bodyText": "Change Details\nAdded enrollment data schema to keep track by year and month.\n\n\nAcceptance Validation\n\nReview schema and also the code and Integration tests\n\nFeedback Requested\n\nIntegration tests test the features being changed.\nExternal References\n\n\nBFD-549\n\nSecurity Implications\n\n\n new software dependencies\nN/A\n\n\n\n altered security controls\n\n\n\n new data stored or transmitted\n\n\n\n security checklist is completed for this change\n\n\n\n requires more information or team discussion to evaluate security implications", "createdAt": "2020-12-09T02:56:36Z", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419", "merged": true, "mergeCommit": {"oid": "f52165e3f3455dde704ffd72dbf227f31f349e5a"}, "closed": true, "closedAt": "2020-12-30T20:05:24Z", "author": {"login": "cbrunefearless"}, "timelineItems": {"totalCount": 57, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiBpI5AH2gAyNTM0ODU5MjU0OjBjZTNlZjE3MGMyY2MyNDU3ZmJlZTg5ZWM4YzU3ZThmNTU5MjM2MjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdrU8KyAFqTU2MDE4MzY1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0ce3ef170c2cc2457fbee89ec8c57e8f55923626", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/0ce3ef170c2cc2457fbee89ec8c57e8f55923626", "committedDate": "2020-12-01T22:25:30Z", "message": "Added enrollment jpa and sql file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86fe5b2a49cc669ad6085b70fe6ade174bd5613a", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/86fe5b2a49cc669ad6085b70fe6ade174bd5613a", "committedDate": "2020-12-03T14:46:25Z", "message": "Changed the primary key"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5df4baead5c5c18f16ba708126bfa9de41fc8e9e", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/5df4baead5c5c18f16ba708126bfa9de41fc8e9e", "committedDate": "2020-12-03T16:17:31Z", "message": "Changed my rif loader and sql files around"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92265c5b7b5737530adba2ad130318b1bb916c18", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/92265c5b7b5737530adba2ad130318b1bb916c18", "committedDate": "2020-12-04T03:33:26Z", "message": "changed date to yearMonth"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc3138094524386f146bcbbc020288529eb41302", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/fc3138094524386f146bcbbc020288529eb41302", "committedDate": "2020-12-05T01:55:22Z", "message": "Fixed sql"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cc117cee17cb8c611b8d4c4e1f00a9c17a9f147", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/0cc117cee17cb8c611b8d4c4e1f00a9c17a9f147", "committedDate": "2020-12-05T02:12:32Z", "message": "Changed jpa"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "960d123bc2d6ee687b077333b498ccd20d80decc", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/960d123bc2d6ee687b077333b498ccd20d80decc", "committedDate": "2020-12-05T05:32:16Z", "message": "Added annotation to beneficiary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9a73c7ab3c9d359e94847967153f8f4a57f6f88", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/a9a73c7ab3c9d359e94847967153f8f4a57f6f88", "committedDate": "2020-12-07T16:47:41Z", "message": "Added code to riflayouts processor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c73bb129806fa392b210f104fae1811d1581fdf3", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/c73bb129806fa392b210f104fae1811d1581fdf3", "committedDate": "2020-12-07T18:50:20Z", "message": "Changed to a different drug code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47287a150180aa5db990bb5e7e7f100fad2e3415", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/47287a150180aa5db990bb5e7e7f100fad2e3415", "committedDate": "2020-12-07T22:25:27Z", "message": "Added function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b93edb7d449855bd571d005c4ddf5aef616904d3", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/b93edb7d449855bd571d005c4ddf5aef616904d3", "committedDate": "2020-12-08T07:59:08Z", "message": "Added code to rif loader to take the different months"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ea6ce2f202c8e7910d563c0ce7d861f0c795090", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/8ea6ce2f202c8e7910d563c0ce7d861f0c795090", "committedDate": "2020-12-08T21:24:46Z", "message": "Added integration tests for new schema"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffbf7a4dc60e9c92ad4036533387eeca420ad48d", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/ffbf7a4dc60e9c92ad4036533387eeca420ad48d", "committedDate": "2020-12-09T02:56:50Z", "message": "Merge branch 'master' into cbrune/BFD549-enrollmentdata"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "193a5a91734bd370f5025699d00caf24b47bb77a", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/193a5a91734bd370f5025699d00caf24b47bb77a", "committedDate": "2020-12-14T23:20:42Z", "message": "Changed the rif loader to take one record"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyODAyNjQz", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#pullrequestreview-552802643", "createdAt": "2020-12-15T19:34:52Z", "commit": {"oid": "193a5a91734bd370f5025699d00caf24b47bb77a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTozNDo1MlrOIGclkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTo0ODowOVrOIGdGmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYzMDczOQ==", "bodyText": "Not sure we want this to be lazy-loaded. Any thoughts?", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r543630739", "createdAt": "2020-12-15T19:34:52Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-model/bfd-model-codegen/src/main/java/gov/cms/bfd/model/codegen/RifLayoutsProcessor.java", "diffHunk": "@@ -707,6 +982,47 @@ private TypeSpec generateHeaderEntity(MappingSpec mappingSpec) throws IOExceptio\n       headerEntityClass.addMethod(childGetter);\n     }\n \n+    // Add the parent-to-child join field and accessor, if appropriate.\n+    if (mappingSpec.getHasEnrollments()) {\n+\n+      ParameterizedTypeName childFieldType =\n+          ParameterizedTypeName.get(ClassName.get(List.class), mappingSpec.getEnrollmentEntity());\n+\n+      FieldSpec.Builder childField =\n+          FieldSpec.builder(childFieldType, \"enrollments\", Modifier.PRIVATE)\n+              .initializer(\"new $T<>()\", LinkedList.class);\n+\n+      childField.addAnnotation(\n+          AnnotationSpec.builder(OneToMany.class)\n+              .addMember(\"mappedBy\", \"$S\", mappingSpec.getEnrollmentEntityParentField())\n+              .addMember(\"orphanRemoval\", \"$L\", true)\n+              .addMember(\"fetch\", \"$T.LAZY\", FetchType.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "193a5a91734bd370f5025699d00caf24b47bb77a"}, "originalPosition": 406}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYzMjczOQ==", "bodyText": "Can the pre-existing selectJavaFieldType(...) and selectJavaPropertyType(...) methods be refactored to call these under the hood? If so, we should definitely do that, to cut down on maintenance reqs.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r543632739", "createdAt": "2020-12-15T19:38:02Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-model/bfd-model-codegen/src/main/java/gov/cms/bfd/model/codegen/RifLayoutsProcessor.java", "diffHunk": "@@ -1503,4 +1819,157 @@ private void writeDebugLogMessages() {\n       throw new UncheckedIOException(e);\n     }\n   }\n+\n+  private static void createEnrollmentFields(\n+      TypeSpec.Builder lineEntity,\n+      boolean isId,\n+      boolean isTransient,\n+      boolean isColumnOptional,\n+      TypeName fieldType,\n+      String fieldName,\n+      RifColumnType type,\n+      Optional<Integer> columnLength,\n+      Optional<Integer> columnScale) {\n+    FieldSpec lineField =\n+        FieldSpec.builder(\n+                selectJavaFieldType(type, isColumnOptional, columnLength, columnScale),\n+                fieldName,\n+                Modifier.PRIVATE)\n+            .addAnnotations(\n+                createEnrollmentAnnotations(\n+                    isId,\n+                    isTransient,\n+                    isColumnOptional,\n+                    fieldName,\n+                    type,\n+                    columnLength,\n+                    columnScale))\n+            .build();\n+    lineEntity.addField(lineField);\n+\n+    MethodSpec.Builder lineFieldGetter =\n+        MethodSpec.methodBuilder(calculateGetterName(lineField))\n+            .addModifiers(Modifier.PUBLIC)\n+            .returns(selectJavaPropertyType(type, isColumnOptional, columnLength, columnScale));\n+    addGetterStatement(isColumnOptional, lineField, lineFieldGetter);\n+    lineEntity.addMethod(lineFieldGetter.build());\n+\n+    MethodSpec.Builder lineFieldSetter =\n+        MethodSpec.methodBuilder(calculateSetterName(lineField))\n+            .addModifiers(Modifier.PUBLIC)\n+            .returns(void.class)\n+            .addParameter(\n+                selectJavaPropertyType(type, isColumnOptional, columnLength, columnScale),\n+                lineField.name);\n+    addSetterStatement(isColumnOptional, lineField, lineFieldSetter);\n+    lineEntity.addMethod(lineFieldSetter.build());\n+  }\n+\n+  private static List<AnnotationSpec> createEnrollmentAnnotations(\n+      boolean isId,\n+      boolean isTransient,\n+      boolean isColumnOptional,\n+      String fieldName,\n+      RifColumnType type,\n+      Optional<Integer> columnLength,\n+      Optional<Integer> columnScale) {\n+    LinkedList<AnnotationSpec> annotations = new LinkedList<>();\n+\n+    // Add an @Id annotation, if appropriate.\n+    if (isId) {\n+      AnnotationSpec.Builder idAnnotation = AnnotationSpec.builder(Id.class);\n+      annotations.add(idAnnotation.build());\n+    }\n+    // Add an @Column annotation to every non-transient column.\n+    if (!isTransient) {\n+      AnnotationSpec.Builder columnAnnotation =\n+          AnnotationSpec.builder(Column.class)\n+              .addMember(\"name\", \"$S\", \"`\" + fieldName + \"`\")\n+              .addMember(\"nullable\", \"$L\", isColumnOptional);\n+      if (type == RifColumnType.CHAR && columnLength.isPresent()) {\n+        columnAnnotation.addMember(\"length\", \"$L\", columnLength.get());\n+      } else if (type == RifColumnType.NUM) {\n+        /*\n+         * In SQL, the precision is the number of digits in the unscaled value, e.g.\n+         * \"123.45\" has a precision of 5. The scale is the number of digits to the right\n+         * of the decimal point, e.g. \"123.45\" has a scale of 2.\n+         */\n+\n+        if (columnLength.isPresent() && columnScale.isPresent()) {\n+          columnAnnotation.addMember(\"precision\", \"$L\", columnLength.get());\n+          columnAnnotation.addMember(\"scale\", \"$L\", columnScale.get());\n+        } else {\n+          /*\n+           * Unfortunately, Hibernate's SQL schema generation (HBM2DDL) doesn't correctly\n+           * handle SQL numeric datatypes that don't have a defined precision and scale.\n+           * What it _should_ do is represent those types in PostgreSQL as a \"NUMERIC\",\n+           * but what it does instead is insert a default precision and scale as\n+           * \"NUMBER(19, 2)\". The only way to force the correct behavior is to specify a\n+           * columnDefinition, so we do that. This leads to incorrect behavior with HSQL\n+           * (for different reasons), but fortunately that doesn't happen to cause\n+           * problems with our tests.\n+           */\n+          StringBuilder columnDefinition = new StringBuilder();\n+          columnDefinition.append(\"numeric\");\n+          if (columnLength.isPresent() || columnScale.isPresent()) {\n+            columnDefinition.append('(');\n+            if (columnLength.isPresent()) {\n+              columnDefinition.append(columnLength.get());\n+            }\n+            if (columnScale.isPresent()) {\n+              columnDefinition.append(\", \");\n+              columnDefinition.append(columnScale.get());\n+            }\n+            columnDefinition.append(')');\n+          }\n+          columnAnnotation.addMember(\"columnDefinition\", \"$S\", columnDefinition.toString());\n+        }\n+      }\n+      annotations.add(columnAnnotation.build());\n+    } else {\n+      annotations.add(AnnotationSpec.builder(Transient.class).build());\n+    }\n+\n+    return annotations;\n+  }\n+\n+  private static TypeName selectJavaFieldType(\n+      RifColumnType type,\n+      boolean isColumnOptional,\n+      Optional<Integer> columnLength,\n+      Optional<Integer> columnScale) {\n+    if (type == RifColumnType.CHAR\n+        && columnLength.orElse(Integer.MAX_VALUE) == 1\n+        && !isColumnOptional) return TypeName.CHAR;\n+    else if (type == RifColumnType.CHAR\n+        && columnLength.orElse(Integer.MAX_VALUE) == 1\n+        && isColumnOptional) return ClassName.get(Character.class);\n+    else if (type == RifColumnType.CHAR) return ClassName.get(String.class);\n+    else if (type == RifColumnType.DATE && columnLength.orElse(0) == 8)\n+      return ClassName.get(LocalDate.class);\n+    else if (type == RifColumnType.TIMESTAMP && columnLength.orElse(0) == 20)\n+      return ClassName.get(Instant.class);\n+    else if (type == RifColumnType.NUM && columnScale.orElse(Integer.MAX_VALUE) > 0)\n+      return ClassName.get(BigDecimal.class);\n+    else if (type == RifColumnType.NUM\n+        && columnScale.orElse(Integer.MAX_VALUE) == 0\n+        && !isColumnOptional) return TypeName.INT;\n+    else if (type == RifColumnType.NUM\n+        && columnScale.orElse(Integer.MAX_VALUE) == 0\n+        && isColumnOptional) return ClassName.get(Integer.class);\n+    else throw new IllegalArgumentException(\"Unhandled field type: \" + type.name());\n+  }\n+\n+  private static TypeName selectJavaPropertyType(\n+      RifColumnType type,\n+      boolean isColumnOptional,\n+      Optional<Integer> columnLength,\n+      Optional<Integer> columnScale) {\n+    if (!isColumnOptional)\n+      return selectJavaFieldType(type, isColumnOptional, columnLength, columnScale);\n+    else\n+      return ParameterizedTypeName.get(\n+          ClassName.get(Optional.class),\n+          selectJavaFieldType(type, isColumnOptional, columnLength, columnScale));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "193a5a91734bd370f5025699d00caf24b47bb77a"}, "originalPosition": 592}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYzMzczMg==", "bodyText": "Are there any Beneficiaries records where beneEnrollmentReferenceYear is NULL? If so, what does that indicate about the bene record and how should we handle it here?", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r543633732", "createdAt": "2020-12-15T19:39:34Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-model/bfd-model-rif/src/main/resources/db/migration/V27__Create_Enrollmenttable.sql", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * The column doesn't have a default value to avoid updating the column on migration. The pipeline server\n+ * will populate the column as new beneficaries are added or existing beneficaries are updated. \n+ */\n+\n+${logic.tablespaces-escape} SET default_tablespace = fhirdb_ts2;\n+\n+create table \"Enrollments\" (\n+    \"parentBeneficiary\" varchar(255) not null,\n+    \"yearMonth\" varchar(7) not null,\n+    \"fipsStateCntyCode\" varchar(5),\n+    \"medicareStatusCode\" varchar(2),\n+    \"entitlementBuyInInd\" char(1),\n+    \"hmoIndicatorInd\" char(1),\n+    \"partCContractNumberId\" varchar(5),\n+    \"partCPbpNumberId\" varchar(3),\n+    \"partCPlanTypeCode\" varchar(3),\n+    \"partDContractNumberId\" varchar(5),\n+    \"partDPbpNumberId\" varchar(3),\n+    \"partDSegmentNumberId\" varchar(3),\n+    \"partDRetireeDrugSubsidyInd\" char(1),\n+    \"medicaidDualEligibilityCode\" varchar(2),\n+    \"partDLowIncomeCostShareGroupCode\" varchar(2),\n+    constraint \"Enrollment_pkey\" primary key (\"parentBeneficiary\", \"yearMonth\")\n+)\n+${logic.tablespaces-escape} tablespace \"enrollment_ts\"\n+;\n+\n+\n+\n+INSERT INTO \"Enrollments\"\n+    SELECT  \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-01') as \"yearMonth\", \"fipsStateCntyJanCode\",\n+    \"medicareStatusJanCode\", \"entitlementBuyInJanInd\", \"hmoIndicatorJanInd\",\n+    \"partCContractNumberJanId\", \"partCPbpNumberJanId\", \"partCPlanTypeJanCode\",\n+    \"partDContractNumberJanId\", \"partDPbpNumberJanId\", \"partDSegmentNumberJanId\",\n+    \"partDRetireeDrugSubsidyJanInd\", \"medicaidDualEligibilityJanCode\", \"partDLowIncomeCostShareGroupJanCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;\n+\n+INSERT INTO \"Enrollments\"\n+    SELECT  \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-02') as \"yearMonth\", \"fipsStateCntyFebCode\",\n+    \"medicareStatusFebCode\", \"entitlementBuyInFebInd\", \"hmoIndicatorFebInd\",\n+    \"partCContractNumberFebId\", \"partCPbpNumberFebId\", \"partCPlanTypeFebCode\",\n+    \"partDContractNumberFebId\", \"partDPbpNumberFebId\", \"partDSegmentNumberFebId\",\n+    \"partDRetireeDrugSubsidyFebInd\", \"medicaidDualEligibilityFebCode\", \"partDLowIncomeCostShareGroupFebCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;\n+\n+INSERT INTO \"Enrollments\"\n+    SELECT \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-03') as \"yearMonth\", \"fipsStateCntyMarCode\",\n+    \"medicareStatusMarCode\", \"entitlementBuyInMarInd\", \"hmoIndicatorMarInd\",\n+    \"partCContractNumberMarId\", \"partCPbpNumberMarId\", \"partCPlanTypeMarCode\",\n+    \"partDContractNumberMarId\", \"partDPbpNumberMarId\", \"partDSegmentNumberMarId\",\n+    \"partDRetireeDrugSubsidyMarInd\", \"medicaidDualEligibilityMarCode\", \"partDLowIncomeCostShareGroupMarCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;\n+\n+INSERT INTO \"Enrollments\"\n+    SELECT  \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-04') as \"yearMonth\", \"fipsStateCntyAprCode\",\n+    \"medicareStatusAprCode\", \"entitlementBuyInAprInd\", \"hmoIndicatorAprInd\",\n+    \"partCContractNumberAprId\", \"partCPbpNumberAprId\", \"partCPlanTypeAprCode\",\n+    \"partDContractNumberAprId\", \"partDPbpNumberAprId\", \"partDSegmentNumberAprId\",\n+    \"partDRetireeDrugSubsidyAprInd\", \"medicaidDualEligibilityAprCode\", \"partDLowIncomeCostShareGroupAprCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;\n+\n+INSERT INTO \"Enrollments\"\n+    SELECT  \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-05') as \"yearMonth\", \"fipsStateCntyMayCode\",\n+    \"medicareStatusMayCode\", \"entitlementBuyInMayInd\", \"hmoIndicatorMayInd\",\n+    \"partCContractNumberMayId\", \"partCPbpNumberMayId\", \"partCPlanTypeMayCode\",\n+    \"partDContractNumberMayId\", \"partDPbpNumberMayId\", \"partDSegmentNumberMayId\",\n+    \"partDRetireeDrugSubsidyMayInd\", \"medicaidDualEligibilityMayCode\", \"partDLowIncomeCostShareGroupMayCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;\n+\n+INSERT INTO \"Enrollments\"\n+    SELECT  \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-06') as \"yearMonth\", \"fipsStateCntyJunCode\",\n+    \"medicareStatusJunCode\", \"entitlementBuyInJunInd\", \"hmoIndicatorJunInd\",\n+    \"partCContractNumberJunId\", \"partCPbpNumberJunId\", \"partCPlanTypeJunCode\",\n+    \"partDContractNumberJunId\", \"partDPbpNumberJunId\", \"partDSegmentNumberJunId\",\n+    \"partDRetireeDrugSubsidyJunInd\", \"medicaidDualEligibilityJunCode\", \"partDLowIncomeCostShareGroupJunCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;\n+\n+INSERT INTO \"Enrollments\"\n+    SELECT  \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-07') as \"yearMonth\", \"fipsStateCntyJulCode\",\n+    \"medicareStatusJulCode\", \"entitlementBuyInJulInd\", \"hmoIndicatorJulInd\",\n+    \"partCContractNumberJulId\", \"partCPbpNumberJulId\", \"partCPlanTypeJulCode\",\n+    \"partDContractNumberJulId\", \"partDPbpNumberJulId\", \"partDSegmentNumberJulId\",\n+    \"partDRetireeDrugSubsidyJulInd\", \"medicaidDualEligibilityJulCode\", \"partDLowIncomeCostShareGroupJulCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;\n+\n+INSERT INTO \"Enrollments\"\n+    SELECT  \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-08') as \"yearMonth\", \"fipsStateCntyAugCode\",\n+    \"medicareStatusAugCode\", \"entitlementBuyInAugInd\", \"hmoIndicatorAugInd\",\n+    \"partCContractNumberAugId\", \"partCPbpNumberAugId\", \"partCPlanTypeAugCode\",\n+    \"partDContractNumberAugId\", \"partDPbpNumberAugId\", \"partDSegmentNumberAugId\",\n+    \"partDRetireeDrugSubsidyAugInd\", \"medicaidDualEligibilityAugCode\", \"partDLowIncomeCostShareGroupAugCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;\n+\n+INSERT INTO \"Enrollments\"\n+    SELECT  \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-09') as \"yearMonth\", \"fipsStateCntySeptCode\",\n+    \"medicareStatusSeptCode\", \"entitlementBuyInSeptInd\", \"hmoIndicatorSeptInd\",\n+    \"partCContractNumberSeptId\", \"partCPbpNumberSeptId\", \"partCPlanTypeSeptCode\",\n+    \"partDContractNumberSeptId\", \"partDPbpNumberSeptId\", \"partDSegmentNumberSeptId\",\n+    \"partDRetireeDrugSubsidySeptInd\", \"medicaidDualEligibilitySeptCode\", \"partDLowIncomeCostShareGroupSeptCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;\n+\n+INSERT INTO \"Enrollments\"\n+   SELECT  \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-10') as \"yearMonth\", \"fipsStateCntyOctCode\",\n+    \"medicareStatusOctCode\", \"entitlementBuyInOctInd\", \"hmoIndicatorOctInd\",\n+    \"partCContractNumberOctId\", \"partCPbpNumberOctId\", \"partCPlanTypeOctCode\",\n+    \"partDContractNumberOctId\", \"partDPbpNumberOctId\", \"partDSegmentNumberOctId\",\n+    \"partDRetireeDrugSubsidyOctInd\", \"medicaidDualEligibilityOctCode\", \"partDLowIncomeCostShareGroupOctCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;  \n+\n+INSERT INTO \"Enrollments\"\n+    SELECT  \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-11') as \"yearMonth\", \"fipsStateCntyNovCode\",\n+    \"medicareStatusNovCode\", \"entitlementBuyInNovInd\", \"hmoIndicatorNovInd\",\n+    \"partCContractNumberNovId\", \"partCPbpNumberNovId\", \"partCPlanTypeNovCode\",\n+    \"partDContractNumberNovId\", \"partDPbpNumberNovId\", \"partDSegmentNumberNovId\",\n+    \"partDRetireeDrugSubsidyNovInd\", \"medicaidDualEligibilityNovCode\", \"partDLowIncomeCostShareGroupNovCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;  \n+\n+INSERT INTO \"Enrollments\"\n+    SELECT  \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-12') as \"yearMonth\", \"fipsStateCntyDecCode\",\n+    \"medicareStatusDecCode\", \"entitlementBuyInDecInd\", \"hmoIndicatorDecInd\",\n+    \"partCContractNumberDecId\", \"partCPbpNumberDecId\", \"partCPlanTypeDecCode\",\n+    \"partDContractNumberDecId\", \"partDPbpNumberDecId\", \"partDSegmentNumberDecId\",\n+    \"partDRetireeDrugSubsidyDecInd\", \"medicaidDualEligibilityDecCode\", \"partDLowIncomeCostShareGroupDecCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "193a5a91734bd370f5025699d00caf24b47bb77a"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYzNjI1OQ==", "bodyText": "I think this will overwrite all enrollment records, instead of just the current year's won't it? If you want to avoid that, you need to merge the new/current records into the existing list, avoiding duplicates (which would likely cause PK errors).\nMore importantly, if this wasn't caught by your tests, then I think you need more ITs to ensure that all of this is actually accomplishing the thing we need it to.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r543636259", "createdAt": "2020-12-15T19:43:35Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/main/java/gov/cms/bfd/pipeline/rif/load/RifLoader.java", "diffHunk": "@@ -596,6 +616,240 @@ private void processAsync(\n     }\n   }\n \n+  /**\n+   * Ensures that a {@link Enrollment} record is created or updated for the specified {@link\n+   * Beneficiary}, if that {@link Beneficiary} already exists and is just being updated.\n+   *\n+   * @param entityManager the {@link EntityManager} to use\n+   * @param loadAction the {@link Loadaction} record being processed\n+   * @param beneficiaryRecord the {@link Beneficiary} record being processed\n+   */\n+  private static void updateEnrollment(EntityManager entityManager, Beneficiary beneficiaryRecord) {\n+\n+    if (beneficiaryRecord.getBeneEnrollmentReferenceYear().isPresent()) {\n+      String date = beneficiaryRecord.getBeneEnrollmentReferenceYear().get().toString();\n+      List<Enrollment> enrollments = new LinkedList<Enrollment>();\n+\n+      enrollments.add(\n+          getEnrollment(\n+              beneficiaryRecord,\n+              String.format(\"%s-%s\", date, \"01\"),\n+              beneficiaryRecord.getEntitlementBuyInJanInd(),\n+              beneficiaryRecord.getFipsStateCntyJanCode(),\n+              beneficiaryRecord.getHmoIndicatorJanInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityJanCode(),\n+              beneficiaryRecord.getMedicareStatusJanCode(),\n+              beneficiaryRecord.getPartCContractNumberJanId(),\n+              beneficiaryRecord.getPartCPbpNumberJanId(),\n+              beneficiaryRecord.getPartCPlanTypeJanCode(),\n+              beneficiaryRecord.getPartDContractNumberJanId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupJanCode(),\n+              beneficiaryRecord.getPartDPbpNumberJanId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyJanInd(),\n+              beneficiaryRecord.getPartDSegmentNumberJanId()));\n+\n+      enrollments.add(\n+          getEnrollment(\n+              beneficiaryRecord,\n+              String.format(\"%s-%s\", date, \"02\"),\n+              beneficiaryRecord.getEntitlementBuyInFebInd(),\n+              beneficiaryRecord.getFipsStateCntyFebCode(),\n+              beneficiaryRecord.getHmoIndicatorFebInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityFebCode(),\n+              beneficiaryRecord.getMedicareStatusFebCode(),\n+              beneficiaryRecord.getPartCContractNumberFebId(),\n+              beneficiaryRecord.getPartCPbpNumberFebId(),\n+              beneficiaryRecord.getPartCPlanTypeFebCode(),\n+              beneficiaryRecord.getPartDContractNumberFebId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupFebCode(),\n+              beneficiaryRecord.getPartDPbpNumberFebId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyFebInd(),\n+              beneficiaryRecord.getPartDSegmentNumberFebId()));\n+\n+      enrollments.add(\n+          getEnrollment(\n+              beneficiaryRecord,\n+              String.format(\"%s-%s\", date, \"03\"),\n+              beneficiaryRecord.getEntitlementBuyInMarInd(),\n+              beneficiaryRecord.getFipsStateCntyMarCode(),\n+              beneficiaryRecord.getHmoIndicatorMarInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityMarCode(),\n+              beneficiaryRecord.getMedicareStatusMarCode(),\n+              beneficiaryRecord.getPartCContractNumberMarId(),\n+              beneficiaryRecord.getPartCPbpNumberMarId(),\n+              beneficiaryRecord.getPartCPlanTypeMarCode(),\n+              beneficiaryRecord.getPartDContractNumberMarId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupMarCode(),\n+              beneficiaryRecord.getPartDPbpNumberMarId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyMarInd(),\n+              beneficiaryRecord.getPartDSegmentNumberMarId()));\n+\n+      enrollments.add(\n+          getEnrollment(\n+              beneficiaryRecord,\n+              String.format(\"%s-%s\", date, \"04\"),\n+              beneficiaryRecord.getEntitlementBuyInAprInd(),\n+              beneficiaryRecord.getFipsStateCntyAprCode(),\n+              beneficiaryRecord.getHmoIndicatorAprInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityAprCode(),\n+              beneficiaryRecord.getMedicareStatusAprCode(),\n+              beneficiaryRecord.getPartCContractNumberAprId(),\n+              beneficiaryRecord.getPartCPbpNumberAprId(),\n+              beneficiaryRecord.getPartCPlanTypeAprCode(),\n+              beneficiaryRecord.getPartDContractNumberAprId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupAprCode(),\n+              beneficiaryRecord.getPartDPbpNumberAprId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyAprInd(),\n+              beneficiaryRecord.getPartDSegmentNumberAprId()));\n+\n+      enrollments.add(\n+          getEnrollment(\n+              beneficiaryRecord,\n+              String.format(\"%s-%s\", date, \"05\"),\n+              beneficiaryRecord.getEntitlementBuyInMayInd(),\n+              beneficiaryRecord.getFipsStateCntyMayCode(),\n+              beneficiaryRecord.getHmoIndicatorMayInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityMayCode(),\n+              beneficiaryRecord.getMedicareStatusMayCode(),\n+              beneficiaryRecord.getPartCContractNumberMayId(),\n+              beneficiaryRecord.getPartCPbpNumberMayId(),\n+              beneficiaryRecord.getPartCPlanTypeMayCode(),\n+              beneficiaryRecord.getPartDContractNumberMayId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupMayCode(),\n+              beneficiaryRecord.getPartDPbpNumberMayId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyMayInd(),\n+              beneficiaryRecord.getPartDSegmentNumberMayId()));\n+\n+      enrollments.add(\n+          getEnrollment(\n+              beneficiaryRecord,\n+              String.format(\"%s-%s\", date, \"06\"),\n+              beneficiaryRecord.getEntitlementBuyInJunInd(),\n+              beneficiaryRecord.getFipsStateCntyJunCode(),\n+              beneficiaryRecord.getHmoIndicatorJunInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityJunCode(),\n+              beneficiaryRecord.getMedicareStatusJunCode(),\n+              beneficiaryRecord.getPartCContractNumberJunId(),\n+              beneficiaryRecord.getPartCPbpNumberJunId(),\n+              beneficiaryRecord.getPartCPlanTypeJunCode(),\n+              beneficiaryRecord.getPartDContractNumberJunId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupJunCode(),\n+              beneficiaryRecord.getPartDPbpNumberJunId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyJunInd(),\n+              beneficiaryRecord.getPartDSegmentNumberJunId()));\n+\n+      enrollments.add(\n+          getEnrollment(\n+              beneficiaryRecord,\n+              String.format(\"%s-%s\", date, \"07\"),\n+              beneficiaryRecord.getEntitlementBuyInJulInd(),\n+              beneficiaryRecord.getFipsStateCntyJulCode(),\n+              beneficiaryRecord.getHmoIndicatorJulInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityJulCode(),\n+              beneficiaryRecord.getMedicareStatusJulCode(),\n+              beneficiaryRecord.getPartCContractNumberJulId(),\n+              beneficiaryRecord.getPartCPbpNumberJulId(),\n+              beneficiaryRecord.getPartCPlanTypeJulCode(),\n+              beneficiaryRecord.getPartDContractNumberJulId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupJulCode(),\n+              beneficiaryRecord.getPartDPbpNumberJulId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyJulInd(),\n+              beneficiaryRecord.getPartDSegmentNumberJulId()));\n+\n+      enrollments.add(\n+          getEnrollment(\n+              beneficiaryRecord,\n+              String.format(\"%s-%s\", date, \"08\"),\n+              beneficiaryRecord.getEntitlementBuyInAugInd(),\n+              beneficiaryRecord.getFipsStateCntyAugCode(),\n+              beneficiaryRecord.getHmoIndicatorAugInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityAugCode(),\n+              beneficiaryRecord.getMedicareStatusAugCode(),\n+              beneficiaryRecord.getPartCContractNumberAugId(),\n+              beneficiaryRecord.getPartCPbpNumberAugId(),\n+              beneficiaryRecord.getPartCPlanTypeAugCode(),\n+              beneficiaryRecord.getPartDContractNumberAugId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupAugCode(),\n+              beneficiaryRecord.getPartDPbpNumberAugId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyAugInd(),\n+              beneficiaryRecord.getPartDSegmentNumberAugId()));\n+\n+      enrollments.add(\n+          getEnrollment(\n+              beneficiaryRecord,\n+              String.format(\"%s-%s\", date, \"09\"),\n+              beneficiaryRecord.getEntitlementBuyInSeptInd(),\n+              beneficiaryRecord.getFipsStateCntySeptCode(),\n+              beneficiaryRecord.getHmoIndicatorSeptInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilitySeptCode(),\n+              beneficiaryRecord.getMedicareStatusSeptCode(),\n+              beneficiaryRecord.getPartCContractNumberSeptId(),\n+              beneficiaryRecord.getPartCPbpNumberSeptId(),\n+              beneficiaryRecord.getPartCPlanTypeSeptCode(),\n+              beneficiaryRecord.getPartDContractNumberSeptId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupSeptCode(),\n+              beneficiaryRecord.getPartDPbpNumberSeptId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidySeptInd(),\n+              beneficiaryRecord.getPartDSegmentNumberSeptId()));\n+\n+      enrollments.add(\n+          getEnrollment(\n+              beneficiaryRecord,\n+              String.format(\"%s-%s\", date, \"10\"),\n+              beneficiaryRecord.getEntitlementBuyInOctInd(),\n+              beneficiaryRecord.getFipsStateCntyOctCode(),\n+              beneficiaryRecord.getHmoIndicatorOctInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityOctCode(),\n+              beneficiaryRecord.getMedicareStatusOctCode(),\n+              beneficiaryRecord.getPartCContractNumberOctId(),\n+              beneficiaryRecord.getPartCPbpNumberOctId(),\n+              beneficiaryRecord.getPartCPlanTypeOctCode(),\n+              beneficiaryRecord.getPartDContractNumberOctId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupOctCode(),\n+              beneficiaryRecord.getPartDPbpNumberOctId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyOctInd(),\n+              beneficiaryRecord.getPartDSegmentNumberOctId()));\n+\n+      enrollments.add(\n+          getEnrollment(\n+              beneficiaryRecord,\n+              String.format(\"%s-%s\", date, \"11\"),\n+              beneficiaryRecord.getEntitlementBuyInNovInd(),\n+              beneficiaryRecord.getFipsStateCntyNovCode(),\n+              beneficiaryRecord.getHmoIndicatorNovInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityNovCode(),\n+              beneficiaryRecord.getMedicareStatusNovCode(),\n+              beneficiaryRecord.getPartCContractNumberNovId(),\n+              beneficiaryRecord.getPartCPbpNumberNovId(),\n+              beneficiaryRecord.getPartCPlanTypeNovCode(),\n+              beneficiaryRecord.getPartDContractNumberNovId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupNovCode(),\n+              beneficiaryRecord.getPartDPbpNumberNovId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyNovInd(),\n+              beneficiaryRecord.getPartDSegmentNumberNovId()));\n+\n+      enrollments.add(\n+          getEnrollment(\n+              beneficiaryRecord,\n+              String.format(\"%s-%s\", date, \"12\"),\n+              beneficiaryRecord.getEntitlementBuyInDecInd(),\n+              beneficiaryRecord.getFipsStateCntyDecCode(),\n+              beneficiaryRecord.getHmoIndicatorDecInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityDecCode(),\n+              beneficiaryRecord.getMedicareStatusDecCode(),\n+              beneficiaryRecord.getPartCContractNumberDecId(),\n+              beneficiaryRecord.getPartCPbpNumberDecId(),\n+              beneficiaryRecord.getPartCPlanTypeDecCode(),\n+              beneficiaryRecord.getPartDContractNumberDecId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupDecCode(),\n+              beneficiaryRecord.getPartDPbpNumberDecId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyDecInd(),\n+              beneficiaryRecord.getPartDSegmentNumberDecId()));\n+\n+      beneficiaryRecord.setEnrollments(enrollments);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "193a5a91734bd370f5025699d00caf24b47bb77a"}, "originalPosition": 297}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYzOTE5NQ==", "bodyText": "As mentioned above, I think you'll want to have several test cases here, covering the following scenarios:\n\nIf we insert a bene, do the resulting DB records have only the correct months' data populated, or does it end up with a lot of weird null-ish entries?\nIf we update a bene with the current year's data and just more months filled in, does the resulting Enrollments data look as expected?\nIf we update a bene with the current year's data and less months filled in (shouldn't happen but the schema allows it so we should ahndle it just in case), do the resulting DB records look as expected?\nIf we update a bene with a new year's data, is it appended to the previous years' data, or does it overwrite it?", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r543639195", "createdAt": "2020-12-15T19:48:09Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/test/java/gov/cms/bfd/pipeline/rif/load/RifLoaderIT.java", "diffHunk": "@@ -233,6 +234,8 @@ public void loadSampleU() {\n                     lastUpdated.after(Date.from(Instant.now().minus(1, ChronoUnit.MINUTES))));\n               });\n \n+      assertEnrollments(beneficiaryFromDb);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "193a5a91734bd370f5025699d00caf24b47bb77a"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "312dc84b400dbbbdaf26a3f66eaee3339c8ea621", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/312dc84b400dbbbdaf26a3f66eaee3339c8ea621", "committedDate": "2020-12-16T19:45:07Z", "message": "refactored some code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82433ba67b93b06e00b8e2d9eee064fc8e81b259", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/82433ba67b93b06e00b8e2d9eee064fc8e81b259", "committedDate": "2020-12-18T19:05:59Z", "message": "CHanges to rifloader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b4ee865d3f1ebfd1327ed0821b947b80faac889", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/9b4ee865d3f1ebfd1327ed0821b947b80faac889", "committedDate": "2020-12-18T19:48:10Z", "message": "Changed year"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdf805a5a67b8bda8368c7390497f656dd65900f", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/cdf805a5a67b8bda8368c7390497f656dd65900f", "committedDate": "2020-12-18T22:05:16Z", "message": "added benefiicary check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af3ad7d003a4305a817b1de55fa3a95e33685976", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/af3ad7d003a4305a817b1de55fa3a95e33685976", "committedDate": "2020-12-18T22:09:00Z", "message": "added benefiicary check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c89ef7da0abef49a2f29eb9772c3ec951d9bc6e8", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/c89ef7da0abef49a2f29eb9772c3ec951d9bc6e8", "committedDate": "2020-12-19T03:32:32Z", "message": "Added three integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6b8b6ef44e33a316033f02da5f3c177b2e7c612", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/e6b8b6ef44e33a316033f02da5f3c177b2e7c612", "committedDate": "2020-12-19T03:59:23Z", "message": "UPdated json responses"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2Njg4Nzgy", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#pullrequestreview-556688782", "createdAt": "2020-12-21T21:55:33Z", "commit": {"oid": "e6b8b6ef44e33a316033f02da5f3c177b2e7c612"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMTo1NTozM1rOIJnH1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMjoxMDo0M1rOIJneaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk0OTA3Ng==", "bodyText": "Do you still have anything using this method?", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r546949076", "createdAt": "2020-12-21T21:55:33Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/test/java/gov/cms/bfd/pipeline/rif/load/RifLoaderIT.java", "diffHunk": "@@ -680,6 +743,262 @@ private static RifLoader createLoader(DataSource dataSource, boolean fixupsEnabl\n             defaultOptions.getFixupThreads()));\n   }\n \n+  public static void assertEnrollments(Beneficiary beneficiaryFromDb, int enrollmentSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b8b6ef44e33a316033f02da5f3c177b2e7c612"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk0OTMwOQ==", "bodyText": "Other than assertEnrollments(...) above, do you have anything using this method?", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r546949309", "createdAt": "2020-12-21T21:56:06Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/test/java/gov/cms/bfd/pipeline/rif/load/RifLoaderIT.java", "diffHunk": "@@ -680,6 +743,262 @@ private static RifLoader createLoader(DataSource dataSource, boolean fixupsEnabl\n             defaultOptions.getFixupThreads()));\n   }\n \n+  public static void assertEnrollments(Beneficiary beneficiaryFromDb, int enrollmentSize) {\n+    List<Enrollment> enrollments = beneficiaryFromDb.getEnrollments();\n+\n+    checkEnrollments(\n+        beneficiaryFromDb.getBeneEnrollmentReferenceYear().get().toString(),\n+        \"01\",\n+        enrollments.get(0),\n+        beneficiaryFromDb.getEntitlementBuyInJanInd().get(),\n+        beneficiaryFromDb.getFipsStateCntyJanCode().get(),\n+        beneficiaryFromDb.getHmoIndicatorJanInd().get(),\n+        beneficiaryFromDb.getMedicaidDualEligibilityJanCode().get(),\n+        beneficiaryFromDb.getMedicareStatusJanCode().get(),\n+        beneficiaryFromDb.getPartCContractNumberJanId().get(),\n+        beneficiaryFromDb.getPartCPbpNumberJanId().get(),\n+        beneficiaryFromDb.getPartCPlanTypeJanCode().get(),\n+        beneficiaryFromDb.getPartDContractNumberJanId().get(),\n+        beneficiaryFromDb.getPartDLowIncomeCostShareGroupJanCode().get(),\n+        beneficiaryFromDb.getPartDPbpNumberJanId().get(),\n+        beneficiaryFromDb.getPartDRetireeDrugSubsidyJanInd().get(),\n+        beneficiaryFromDb.getPartDSegmentNumberJanId().get());\n+\n+    checkEnrollments(\n+        beneficiaryFromDb.getBeneEnrollmentReferenceYear().get().toString(),\n+        \"02\",\n+        enrollments.get(1),\n+        beneficiaryFromDb.getEntitlementBuyInFebInd().get(),\n+        beneficiaryFromDb.getFipsStateCntyFebCode().get(),\n+        beneficiaryFromDb.getHmoIndicatorFebInd().get(),\n+        beneficiaryFromDb.getMedicaidDualEligibilityFebCode().get(),\n+        beneficiaryFromDb.getMedicareStatusFebCode().get(),\n+        beneficiaryFromDb.getPartCContractNumberFebId().get(),\n+        beneficiaryFromDb.getPartCPbpNumberFebId().get(),\n+        beneficiaryFromDb.getPartCPlanTypeFebCode().get(),\n+        beneficiaryFromDb.getPartDContractNumberFebId().get(),\n+        beneficiaryFromDb.getPartDLowIncomeCostShareGroupFebCode().get(),\n+        beneficiaryFromDb.getPartDPbpNumberFebId().get(),\n+        beneficiaryFromDb.getPartDRetireeDrugSubsidyFebInd().get(),\n+        beneficiaryFromDb.getPartDSegmentNumberFebId().get());\n+\n+    checkEnrollments(\n+        beneficiaryFromDb.getBeneEnrollmentReferenceYear().get().toString(),\n+        \"03\",\n+        enrollments.get(2),\n+        beneficiaryFromDb.getEntitlementBuyInMarInd().get(),\n+        beneficiaryFromDb.getFipsStateCntyMarCode().get(),\n+        beneficiaryFromDb.getHmoIndicatorMarInd().get(),\n+        beneficiaryFromDb.getMedicaidDualEligibilityMarCode().get(),\n+        beneficiaryFromDb.getMedicareStatusMarCode().get(),\n+        beneficiaryFromDb.getPartCContractNumberMarId().get(),\n+        beneficiaryFromDb.getPartCPbpNumberMarId().get(),\n+        beneficiaryFromDb.getPartCPlanTypeMarCode().get(),\n+        beneficiaryFromDb.getPartDContractNumberMarId().get(),\n+        beneficiaryFromDb.getPartDLowIncomeCostShareGroupMarCode().get(),\n+        beneficiaryFromDb.getPartDPbpNumberMarId().get(),\n+        beneficiaryFromDb.getPartDRetireeDrugSubsidyMarInd().get(),\n+        beneficiaryFromDb.getPartDSegmentNumberMarId().get());\n+\n+    checkEnrollments(\n+        beneficiaryFromDb.getBeneEnrollmentReferenceYear().get().toString(),\n+        \"04\",\n+        enrollments.get(3),\n+        beneficiaryFromDb.getEntitlementBuyInAprInd().get(),\n+        beneficiaryFromDb.getFipsStateCntyAprCode().get(),\n+        beneficiaryFromDb.getHmoIndicatorAprInd().get(),\n+        beneficiaryFromDb.getMedicaidDualEligibilityAprCode().get(),\n+        beneficiaryFromDb.getMedicareStatusAprCode().get(),\n+        beneficiaryFromDb.getPartCContractNumberAprId().get(),\n+        beneficiaryFromDb.getPartCPbpNumberAprId().get(),\n+        beneficiaryFromDb.getPartCPlanTypeAprCode().get(),\n+        beneficiaryFromDb.getPartDContractNumberAprId().get(),\n+        beneficiaryFromDb.getPartDLowIncomeCostShareGroupAprCode().get(),\n+        beneficiaryFromDb.getPartDPbpNumberAprId().get(),\n+        beneficiaryFromDb.getPartDRetireeDrugSubsidyAprInd().get(),\n+        beneficiaryFromDb.getPartDSegmentNumberAprId().get());\n+\n+    checkEnrollments(\n+        beneficiaryFromDb.getBeneEnrollmentReferenceYear().get().toString(),\n+        \"05\",\n+        enrollments.get(4),\n+        beneficiaryFromDb.getEntitlementBuyInMayInd().get(),\n+        beneficiaryFromDb.getFipsStateCntyMayCode().get(),\n+        beneficiaryFromDb.getHmoIndicatorMayInd().get(),\n+        beneficiaryFromDb.getMedicaidDualEligibilityMayCode().get(),\n+        beneficiaryFromDb.getMedicareStatusMayCode().get(),\n+        beneficiaryFromDb.getPartCContractNumberMayId().get(),\n+        beneficiaryFromDb.getPartCPbpNumberMayId().get(),\n+        beneficiaryFromDb.getPartCPlanTypeMayCode().get(),\n+        beneficiaryFromDb.getPartDContractNumberMayId().get(),\n+        beneficiaryFromDb.getPartDLowIncomeCostShareGroupMayCode().get(),\n+        beneficiaryFromDb.getPartDPbpNumberMayId().get(),\n+        beneficiaryFromDb.getPartDRetireeDrugSubsidyMayInd().get(),\n+        beneficiaryFromDb.getPartDSegmentNumberMayId().get());\n+\n+    checkEnrollments(\n+        beneficiaryFromDb.getBeneEnrollmentReferenceYear().get().toString(),\n+        \"06\",\n+        enrollments.get(5),\n+        beneficiaryFromDb.getEntitlementBuyInJunInd().get(),\n+        beneficiaryFromDb.getFipsStateCntyJunCode().get(),\n+        beneficiaryFromDb.getHmoIndicatorJunInd().get(),\n+        beneficiaryFromDb.getMedicaidDualEligibilityJunCode().get(),\n+        beneficiaryFromDb.getMedicareStatusJunCode().get(),\n+        beneficiaryFromDb.getPartCContractNumberJunId().get(),\n+        beneficiaryFromDb.getPartCPbpNumberJunId().get(),\n+        beneficiaryFromDb.getPartCPlanTypeJunCode().get(),\n+        beneficiaryFromDb.getPartDContractNumberJunId().get(),\n+        beneficiaryFromDb.getPartDLowIncomeCostShareGroupJunCode().get(),\n+        beneficiaryFromDb.getPartDPbpNumberJunId().get(),\n+        beneficiaryFromDb.getPartDRetireeDrugSubsidyJunInd().get(),\n+        beneficiaryFromDb.getPartDSegmentNumberJunId().get());\n+\n+    checkEnrollments(\n+        beneficiaryFromDb.getBeneEnrollmentReferenceYear().get().toString(),\n+        \"07\",\n+        enrollments.get(6),\n+        beneficiaryFromDb.getEntitlementBuyInJulInd().get(),\n+        beneficiaryFromDb.getFipsStateCntyJulCode().get(),\n+        beneficiaryFromDb.getHmoIndicatorJulInd().get(),\n+        beneficiaryFromDb.getMedicaidDualEligibilityJulCode().get(),\n+        beneficiaryFromDb.getMedicareStatusJulCode().get(),\n+        beneficiaryFromDb.getPartCContractNumberJulId().get(),\n+        beneficiaryFromDb.getPartCPbpNumberJulId().get(),\n+        beneficiaryFromDb.getPartCPlanTypeJulCode().get(),\n+        beneficiaryFromDb.getPartDContractNumberJulId().get(),\n+        beneficiaryFromDb.getPartDLowIncomeCostShareGroupJulCode().get(),\n+        beneficiaryFromDb.getPartDPbpNumberJulId().get(),\n+        beneficiaryFromDb.getPartDRetireeDrugSubsidyJulInd().get(),\n+        beneficiaryFromDb.getPartDSegmentNumberJulId().get());\n+\n+    checkEnrollments(\n+        beneficiaryFromDb.getBeneEnrollmentReferenceYear().get().toString(),\n+        \"08\",\n+        enrollments.get(7),\n+        beneficiaryFromDb.getEntitlementBuyInAugInd().get(),\n+        beneficiaryFromDb.getFipsStateCntyAugCode().get(),\n+        beneficiaryFromDb.getHmoIndicatorAugInd().get(),\n+        beneficiaryFromDb.getMedicaidDualEligibilityAugCode().get(),\n+        beneficiaryFromDb.getMedicareStatusAugCode().get(),\n+        beneficiaryFromDb.getPartCContractNumberAugId().get(),\n+        beneficiaryFromDb.getPartCPbpNumberAugId().get(),\n+        beneficiaryFromDb.getPartCPlanTypeAugCode().get(),\n+        beneficiaryFromDb.getPartDContractNumberAugId().get(),\n+        beneficiaryFromDb.getPartDLowIncomeCostShareGroupAugCode().get(),\n+        beneficiaryFromDb.getPartDPbpNumberAugId().get(),\n+        beneficiaryFromDb.getPartDRetireeDrugSubsidyAugInd().get(),\n+        beneficiaryFromDb.getPartDSegmentNumberAugId().get());\n+\n+    checkEnrollments(\n+        beneficiaryFromDb.getBeneEnrollmentReferenceYear().get().toString(),\n+        \"09\",\n+        enrollments.get(8),\n+        beneficiaryFromDb.getEntitlementBuyInSeptInd().get(),\n+        beneficiaryFromDb.getFipsStateCntySeptCode().get(),\n+        beneficiaryFromDb.getHmoIndicatorSeptInd().get(),\n+        beneficiaryFromDb.getMedicaidDualEligibilitySeptCode().get(),\n+        beneficiaryFromDb.getMedicareStatusSeptCode().get(),\n+        beneficiaryFromDb.getPartCContractNumberSeptId().get(),\n+        beneficiaryFromDb.getPartCPbpNumberSeptId().get(),\n+        beneficiaryFromDb.getPartCPlanTypeSeptCode().get(),\n+        beneficiaryFromDb.getPartDContractNumberSeptId().get(),\n+        beneficiaryFromDb.getPartDLowIncomeCostShareGroupSeptCode().get(),\n+        beneficiaryFromDb.getPartDPbpNumberSeptId().get(),\n+        beneficiaryFromDb.getPartDRetireeDrugSubsidySeptInd().get(),\n+        beneficiaryFromDb.getPartDSegmentNumberSeptId().get());\n+\n+    checkEnrollments(\n+        beneficiaryFromDb.getBeneEnrollmentReferenceYear().get().toString(),\n+        \"10\",\n+        enrollments.get(9),\n+        beneficiaryFromDb.getEntitlementBuyInOctInd().get(),\n+        beneficiaryFromDb.getFipsStateCntyOctCode().get(),\n+        beneficiaryFromDb.getHmoIndicatorOctInd().get(),\n+        beneficiaryFromDb.getMedicaidDualEligibilityOctCode().get(),\n+        beneficiaryFromDb.getMedicareStatusOctCode().get(),\n+        beneficiaryFromDb.getPartCContractNumberOctId().get(),\n+        beneficiaryFromDb.getPartCPbpNumberOctId().get(),\n+        beneficiaryFromDb.getPartCPlanTypeOctCode().get(),\n+        beneficiaryFromDb.getPartDContractNumberOctId().get(),\n+        beneficiaryFromDb.getPartDLowIncomeCostShareGroupOctCode().get(),\n+        beneficiaryFromDb.getPartDPbpNumberOctId().get(),\n+        beneficiaryFromDb.getPartDRetireeDrugSubsidyOctInd().get(),\n+        beneficiaryFromDb.getPartDSegmentNumberOctId().get());\n+\n+    checkEnrollments(\n+        beneficiaryFromDb.getBeneEnrollmentReferenceYear().get().toString(),\n+        \"11\",\n+        enrollments.get(10),\n+        beneficiaryFromDb.getEntitlementBuyInNovInd().get(),\n+        beneficiaryFromDb.getFipsStateCntyNovCode().get(),\n+        beneficiaryFromDb.getHmoIndicatorNovInd().get(),\n+        beneficiaryFromDb.getMedicaidDualEligibilityNovCode().get(),\n+        beneficiaryFromDb.getMedicareStatusNovCode().get(),\n+        beneficiaryFromDb.getPartCContractNumberNovId().get(),\n+        beneficiaryFromDb.getPartCPbpNumberNovId().get(),\n+        beneficiaryFromDb.getPartCPlanTypeNovCode().get(),\n+        beneficiaryFromDb.getPartDContractNumberNovId().get(),\n+        beneficiaryFromDb.getPartDLowIncomeCostShareGroupNovCode().get(),\n+        beneficiaryFromDb.getPartDPbpNumberNovId().get(),\n+        beneficiaryFromDb.getPartDRetireeDrugSubsidyNovInd().get(),\n+        beneficiaryFromDb.getPartDSegmentNumberNovId().get());\n+\n+    checkEnrollments(\n+        beneficiaryFromDb.getBeneEnrollmentReferenceYear().get().toString(),\n+        \"12\",\n+        enrollments.get(11),\n+        beneficiaryFromDb.getEntitlementBuyInDecInd().get(),\n+        beneficiaryFromDb.getFipsStateCntyDecCode().get(),\n+        beneficiaryFromDb.getHmoIndicatorDecInd().get(),\n+        beneficiaryFromDb.getMedicaidDualEligibilityDecCode().get(),\n+        beneficiaryFromDb.getMedicareStatusDecCode().get(),\n+        beneficiaryFromDb.getPartCContractNumberDecId().get(),\n+        beneficiaryFromDb.getPartCPbpNumberDecId().get(),\n+        beneficiaryFromDb.getPartCPlanTypeDecCode().get(),\n+        beneficiaryFromDb.getPartDContractNumberDecId().get(),\n+        beneficiaryFromDb.getPartDLowIncomeCostShareGroupDecCode().get(),\n+        beneficiaryFromDb.getPartDPbpNumberDecId().get(),\n+        beneficiaryFromDb.getPartDRetireeDrugSubsidyDecInd().get(),\n+        beneficiaryFromDb.getPartDSegmentNumberDecId().get());\n+  }\n+\n+  public static void checkEnrollments(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b8b6ef44e33a316033f02da5f3c177b2e7c612"}, "originalPosition": 301}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk1MTY0Nw==", "bodyText": "Why this column type instead of an actual date type? I'd think an actual date type would make it easier to query against and work with, though I haven't thought about it too hard.\nI did some quick research, which you should absolutely double-check me on, and it looks like the general recommendation here is to use a date column with the day component pinned to 1.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r546951647", "createdAt": "2020-12-21T22:02:19Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-model/bfd-model-rif/src/main/resources/db/migration/V27__Create_Enrollmenttable.sql", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * The column doesn't have a default value to avoid updating the column on migration. The pipeline server\n+ * will populate the column as new beneficaries are added or existing beneficaries are updated. \n+ */\n+\n+${logic.tablespaces-escape} SET default_tablespace = fhirdb_ts2;\n+\n+create table \"Enrollments\" (\n+    \"parentBeneficiary\" varchar(255) not null,\n+    \"yearMonth\" varchar(7) not null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b8b6ef44e33a316033f02da5f3c177b2e7c612"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk1MTgxNA==", "bodyText": "Dunno! Depends on why it's null.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r546951814", "createdAt": "2020-12-21T22:02:49Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-model/bfd-model-rif/src/main/resources/db/migration/V27__Create_Enrollmenttable.sql", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * The column doesn't have a default value to avoid updating the column on migration. The pipeline server\n+ * will populate the column as new beneficaries are added or existing beneficaries are updated. \n+ */\n+\n+${logic.tablespaces-escape} SET default_tablespace = fhirdb_ts2;\n+\n+create table \"Enrollments\" (\n+    \"parentBeneficiary\" varchar(255) not null,\n+    \"yearMonth\" varchar(7) not null,\n+    \"fipsStateCntyCode\" varchar(5),\n+    \"medicareStatusCode\" varchar(2),\n+    \"entitlementBuyInInd\" char(1),\n+    \"hmoIndicatorInd\" char(1),\n+    \"partCContractNumberId\" varchar(5),\n+    \"partCPbpNumberId\" varchar(3),\n+    \"partCPlanTypeCode\" varchar(3),\n+    \"partDContractNumberId\" varchar(5),\n+    \"partDPbpNumberId\" varchar(3),\n+    \"partDSegmentNumberId\" varchar(3),\n+    \"partDRetireeDrugSubsidyInd\" char(1),\n+    \"medicaidDualEligibilityCode\" varchar(2),\n+    \"partDLowIncomeCostShareGroupCode\" varchar(2),\n+    constraint \"Enrollment_pkey\" primary key (\"parentBeneficiary\", \"yearMonth\")\n+)\n+${logic.tablespaces-escape} tablespace \"enrollment_ts\"\n+;\n+\n+\n+\n+INSERT INTO \"Enrollments\"\n+    SELECT  \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-01') as \"yearMonth\", \"fipsStateCntyJanCode\",\n+    \"medicareStatusJanCode\", \"entitlementBuyInJanInd\", \"hmoIndicatorJanInd\",\n+    \"partCContractNumberJanId\", \"partCPbpNumberJanId\", \"partCPlanTypeJanCode\",\n+    \"partDContractNumberJanId\", \"partDPbpNumberJanId\", \"partDSegmentNumberJanId\",\n+    \"partDRetireeDrugSubsidyJanInd\", \"medicaidDualEligibilityJanCode\", \"partDLowIncomeCostShareGroupJanCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;\n+\n+INSERT INTO \"Enrollments\"\n+    SELECT  \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-02') as \"yearMonth\", \"fipsStateCntyFebCode\",\n+    \"medicareStatusFebCode\", \"entitlementBuyInFebInd\", \"hmoIndicatorFebInd\",\n+    \"partCContractNumberFebId\", \"partCPbpNumberFebId\", \"partCPlanTypeFebCode\",\n+    \"partDContractNumberFebId\", \"partDPbpNumberFebId\", \"partDSegmentNumberFebId\",\n+    \"partDRetireeDrugSubsidyFebInd\", \"medicaidDualEligibilityFebCode\", \"partDLowIncomeCostShareGroupFebCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;\n+\n+INSERT INTO \"Enrollments\"\n+    SELECT \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-03') as \"yearMonth\", \"fipsStateCntyMarCode\",\n+    \"medicareStatusMarCode\", \"entitlementBuyInMarInd\", \"hmoIndicatorMarInd\",\n+    \"partCContractNumberMarId\", \"partCPbpNumberMarId\", \"partCPlanTypeMarCode\",\n+    \"partDContractNumberMarId\", \"partDPbpNumberMarId\", \"partDSegmentNumberMarId\",\n+    \"partDRetireeDrugSubsidyMarInd\", \"medicaidDualEligibilityMarCode\", \"partDLowIncomeCostShareGroupMarCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;\n+\n+INSERT INTO \"Enrollments\"\n+    SELECT  \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-04') as \"yearMonth\", \"fipsStateCntyAprCode\",\n+    \"medicareStatusAprCode\", \"entitlementBuyInAprInd\", \"hmoIndicatorAprInd\",\n+    \"partCContractNumberAprId\", \"partCPbpNumberAprId\", \"partCPlanTypeAprCode\",\n+    \"partDContractNumberAprId\", \"partDPbpNumberAprId\", \"partDSegmentNumberAprId\",\n+    \"partDRetireeDrugSubsidyAprInd\", \"medicaidDualEligibilityAprCode\", \"partDLowIncomeCostShareGroupAprCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;\n+\n+INSERT INTO \"Enrollments\"\n+    SELECT  \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-05') as \"yearMonth\", \"fipsStateCntyMayCode\",\n+    \"medicareStatusMayCode\", \"entitlementBuyInMayInd\", \"hmoIndicatorMayInd\",\n+    \"partCContractNumberMayId\", \"partCPbpNumberMayId\", \"partCPlanTypeMayCode\",\n+    \"partDContractNumberMayId\", \"partDPbpNumberMayId\", \"partDSegmentNumberMayId\",\n+    \"partDRetireeDrugSubsidyMayInd\", \"medicaidDualEligibilityMayCode\", \"partDLowIncomeCostShareGroupMayCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;\n+\n+INSERT INTO \"Enrollments\"\n+    SELECT  \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-06') as \"yearMonth\", \"fipsStateCntyJunCode\",\n+    \"medicareStatusJunCode\", \"entitlementBuyInJunInd\", \"hmoIndicatorJunInd\",\n+    \"partCContractNumberJunId\", \"partCPbpNumberJunId\", \"partCPlanTypeJunCode\",\n+    \"partDContractNumberJunId\", \"partDPbpNumberJunId\", \"partDSegmentNumberJunId\",\n+    \"partDRetireeDrugSubsidyJunInd\", \"medicaidDualEligibilityJunCode\", \"partDLowIncomeCostShareGroupJunCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;\n+\n+INSERT INTO \"Enrollments\"\n+    SELECT  \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-07') as \"yearMonth\", \"fipsStateCntyJulCode\",\n+    \"medicareStatusJulCode\", \"entitlementBuyInJulInd\", \"hmoIndicatorJulInd\",\n+    \"partCContractNumberJulId\", \"partCPbpNumberJulId\", \"partCPlanTypeJulCode\",\n+    \"partDContractNumberJulId\", \"partDPbpNumberJulId\", \"partDSegmentNumberJulId\",\n+    \"partDRetireeDrugSubsidyJulInd\", \"medicaidDualEligibilityJulCode\", \"partDLowIncomeCostShareGroupJulCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;\n+\n+INSERT INTO \"Enrollments\"\n+    SELECT  \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-08') as \"yearMonth\", \"fipsStateCntyAugCode\",\n+    \"medicareStatusAugCode\", \"entitlementBuyInAugInd\", \"hmoIndicatorAugInd\",\n+    \"partCContractNumberAugId\", \"partCPbpNumberAugId\", \"partCPlanTypeAugCode\",\n+    \"partDContractNumberAugId\", \"partDPbpNumberAugId\", \"partDSegmentNumberAugId\",\n+    \"partDRetireeDrugSubsidyAugInd\", \"medicaidDualEligibilityAugCode\", \"partDLowIncomeCostShareGroupAugCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;\n+\n+INSERT INTO \"Enrollments\"\n+    SELECT  \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-09') as \"yearMonth\", \"fipsStateCntySeptCode\",\n+    \"medicareStatusSeptCode\", \"entitlementBuyInSeptInd\", \"hmoIndicatorSeptInd\",\n+    \"partCContractNumberSeptId\", \"partCPbpNumberSeptId\", \"partCPlanTypeSeptCode\",\n+    \"partDContractNumberSeptId\", \"partDPbpNumberSeptId\", \"partDSegmentNumberSeptId\",\n+    \"partDRetireeDrugSubsidySeptInd\", \"medicaidDualEligibilitySeptCode\", \"partDLowIncomeCostShareGroupSeptCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;\n+\n+INSERT INTO \"Enrollments\"\n+   SELECT  \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-10') as \"yearMonth\", \"fipsStateCntyOctCode\",\n+    \"medicareStatusOctCode\", \"entitlementBuyInOctInd\", \"hmoIndicatorOctInd\",\n+    \"partCContractNumberOctId\", \"partCPbpNumberOctId\", \"partCPlanTypeOctCode\",\n+    \"partDContractNumberOctId\", \"partDPbpNumberOctId\", \"partDSegmentNumberOctId\",\n+    \"partDRetireeDrugSubsidyOctInd\", \"medicaidDualEligibilityOctCode\", \"partDLowIncomeCostShareGroupOctCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;  \n+\n+INSERT INTO \"Enrollments\"\n+    SELECT  \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-11') as \"yearMonth\", \"fipsStateCntyNovCode\",\n+    \"medicareStatusNovCode\", \"entitlementBuyInNovInd\", \"hmoIndicatorNovInd\",\n+    \"partCContractNumberNovId\", \"partCPbpNumberNovId\", \"partCPlanTypeNovCode\",\n+    \"partDContractNumberNovId\", \"partDPbpNumberNovId\", \"partDSegmentNumberNovId\",\n+    \"partDRetireeDrugSubsidyNovInd\", \"medicaidDualEligibilityNovCode\", \"partDLowIncomeCostShareGroupNovCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;  \n+\n+INSERT INTO \"Enrollments\"\n+    SELECT  \"beneficiaryId\", CONCAT(\"beneEnrollmentReferenceYear\", '-12') as \"yearMonth\", \"fipsStateCntyDecCode\",\n+    \"medicareStatusDecCode\", \"entitlementBuyInDecInd\", \"hmoIndicatorDecInd\",\n+    \"partCContractNumberDecId\", \"partCPbpNumberDecId\", \"partCPlanTypeDecCode\",\n+    \"partDContractNumberDecId\", \"partDPbpNumberDecId\", \"partDSegmentNumberDecId\",\n+    \"partDRetireeDrugSubsidyDecInd\", \"medicaidDualEligibilityDecCode\", \"partDLowIncomeCostShareGroupDecCode\"\n+\tFROM \"Beneficiaries\"\n+\tWHERE \"beneEnrollmentReferenceYear\" is not null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYzMzczMg=="}, "originalCommit": {"oid": "193a5a91734bd370f5025699d00caf24b47bb77a"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk1NDg1OQ==", "bodyText": "I can't quite work out in my head if your logic above will correctly handle adding a month or two of data to the current year correctly...\nYou don't really have test coverage for that, so I'd suggest adding it. Maybe just as another step in this test case: what happens when one of the fields moves up to having ten months of data?", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r546954859", "createdAt": "2020-12-21T22:10:43Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/test/java/gov/cms/bfd/pipeline/rif/load/RifLoaderIT.java", "diffHunk": "@@ -316,6 +317,68 @@ public void loadSampleUUnchanged() {\n       if (entityManager != null) entityManager.close();\n     }\n   }\n+\n+  @Test\n+  public void loadInitialEnrollmentShouldCount12() {\n+    DataSource dataSource = DatabaseTestHelper.getTestDatabaseAfterClean();\n+    loadSample(dataSource, Arrays.asList(StaticRifResourceGroup.SAMPLE_A.getResources()));\n+\n+    LoadAppOptions options = RifLoaderTestUtils.getLoadOptions(dataSource);\n+    EntityManagerFactory entityManagerFactory =\n+        RifLoaderTestUtils.createEntityManagerFactory(options);\n+    EntityManager entityManager = null;\n+    try {\n+      entityManager = entityManagerFactory.createEntityManager();\n+      Beneficiary beneficiaryFromDb = entityManager.find(Beneficiary.class, \"567834\");\n+      Assert.assertEquals(12, beneficiaryFromDb.getEnrollments().size());\n+\n+    } finally {\n+      if (entityManager != null) entityManager.close();\n+    }\n+  }\n+\n+  @Test\n+  public void loadInitialEnrollmentShouldCount24() {\n+    DataSource dataSource = DatabaseTestHelper.getTestDatabaseAfterClean();\n+    loadSample(dataSource, Arrays.asList(StaticRifResourceGroup.SAMPLE_A.getResources()));\n+    loadSample(dataSource, Arrays.asList(StaticRifResourceGroup.SAMPLE_U.getResources()));\n+\n+    LoadAppOptions options = RifLoaderTestUtils.getLoadOptions(dataSource);\n+    EntityManagerFactory entityManagerFactory =\n+        RifLoaderTestUtils.createEntityManagerFactory(options);\n+    EntityManager entityManager = null;\n+    try {\n+      entityManager = entityManagerFactory.createEntityManager();\n+\n+      Beneficiary beneficiaryFromDb = entityManager.find(Beneficiary.class, \"567834\");\n+      Assert.assertEquals(24, beneficiaryFromDb.getEnrollments().size());\n+    } finally {\n+      if (entityManager != null) entityManager.close();\n+    }\n+  }\n+\n+  @Test\n+  public void loadInitialEnrollmentShouldCount20SinceThereIsAUpdateOf8Months() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b8b6ef44e33a316033f02da5f3c177b2e7c612"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f34efe64addf5fd899b01913c289c053bd96eed", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/0f34efe64addf5fd899b01913c289c053bd96eed", "committedDate": "2020-12-22T16:29:09Z", "message": "Changes to yearMonth"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "665bbc2645e50cc7669d7863118ebfcdae08fcbe", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/665bbc2645e50cc7669d7863118ebfcdae08fcbe", "committedDate": "2020-12-22T18:02:58Z", "message": "Push changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cfb811236d69505ae01b4a6d695dda28a105f00", "author": {"user": {"login": "karlmdavis", "name": "Karl M. Davis"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/9cfb811236d69505ae01b4a6d695dda28a105f00", "committedDate": "2020-12-22T18:43:08Z", "message": "Fixed Enrollment date types.\n\nBFD-549"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02315889d45e6bde459c68591c18e215443f8be4", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/02315889d45e6bde459c68591c18e215443f8be4", "committedDate": "2020-12-22T21:56:18Z", "message": "Added tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "071f7b1669fe94eccdbc1e3cfc86df671e8b114d", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/071f7b1669fe94eccdbc1e3cfc86df671e8b114d", "committedDate": "2020-12-22T22:32:08Z", "message": "Added integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "329c8fa55b30efc7c55bde08af758890f0fffafa", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/329c8fa55b30efc7c55bde08af758890f0fffafa", "committedDate": "2020-12-22T22:40:10Z", "message": "Deleted a test file i committed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "debc33cd5ea95d6af6c6de0962eaef8e03c84137", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/debc33cd5ea95d6af6c6de0962eaef8e03c84137", "committedDate": "2020-12-22T23:19:56Z", "message": "Changed database format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef59aff92a646a5321e7834cf1f69e10254b65ad", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/ef59aff92a646a5321e7834cf1f69e10254b65ad", "committedDate": "2020-12-22T23:26:22Z", "message": "Changed database format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "131f0868a23302d7618561539e04ebccb4fd6cca", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/131f0868a23302d7618561539e04ebccb4fd6cca", "committedDate": "2020-12-22T23:28:08Z", "message": "Merge branch 'master' into cbrune/BFD549-enrollmentdata"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c9a4f5698899c47c1eb88a9b15e7932f86a63f2", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/5c9a4f5698899c47c1eb88a9b15e7932f86a63f2", "committedDate": "2020-12-23T00:43:57Z", "message": "Changed format of sql script"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "131f0868a23302d7618561539e04ebccb4fd6cca", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/131f0868a23302d7618561539e04ebccb4fd6cca", "committedDate": "2020-12-22T23:28:08Z", "message": "Merge branch 'master' into cbrune/BFD549-enrollmentdata"}, "afterCommit": {"oid": "5c9a4f5698899c47c1eb88a9b15e7932f86a63f2", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/5c9a4f5698899c47c1eb88a9b15e7932f86a63f2", "committedDate": "2020-12-23T00:43:57Z", "message": "Changed format of sql script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1af552ea61be2b064aef1a724cf091b9ce40ce2f", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/1af552ea61be2b064aef1a724cf091b9ce40ce2f", "committedDate": "2020-12-23T00:45:25Z", "message": "Changed format of sql script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dbcf3b3a1009899b9dec3d595ee22ac680a077a", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/9dbcf3b3a1009899b9dec3d595ee22ac680a077a", "committedDate": "2020-12-23T03:53:06Z", "message": "Reformatted sql"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8fb96e5b45b3dfaadbf7e7bc8223c3b681a7f00", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/f8fb96e5b45b3dfaadbf7e7bc8223c3b681a7f00", "committedDate": "2020-12-23T22:46:24Z", "message": "Changed enrollments to BeneficiaryMonthly"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MzY4NDQ5", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#pullrequestreview-559368449", "createdAt": "2020-12-29T03:44:07Z", "commit": {"oid": "f8fb96e5b45b3dfaadbf7e7bc8223c3b681a7f00"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMzo0NDowN1rOIMGUFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNDoxNjoyNVrOIMGmmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1NzI3MQ==", "bodyText": "This file can't be in both PRs, but does appear to be. You should remove it.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r549557271", "createdAt": "2020-12-29T03:44:07Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-model/bfd-model-rif/src/main/resources/db/migration/V27__Create_BeneficiaryMonthlytable.sql", "diffHunk": "@@ -0,0 +1,141 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8fb96e5b45b3dfaadbf7e7bc8223c3b681a7f00"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1Nzc2Ng==", "bodyText": "Did the auto-formatter get run on this? If so, it behaved a bit goofy here.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r549557766", "createdAt": "2020-12-29T03:47:36Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-model/bfd-model-codegen/src/main/java/gov/cms/bfd/model/codegen/RifLayoutsProcessor.java", "diffHunk": "@@ -511,23 +536,40 @@ private TypeSpec generateLineEntity(MappingSpec mappingSpec) throws IOException\n \n       FieldSpec lineField =\n           FieldSpec.builder(\n-                  selectJavaFieldType(rifField), rifField.getJavaFieldName(), Modifier.PRIVATE)\n+                  selectJavaFieldType(\n+                      rifField.getRifColumnType(),\n+                      rifField.isRifColumnOptional(),\n+                      rifField.getRifColumnLength(),\n+                      rifField.getRifColumnScale()),\n+                  rifField.getJavaFieldName(),\n+                  Modifier.PRIVATE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8fb96e5b45b3dfaadbf7e7bc8223c3b681a7f00"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1Nzk4Mw==", "bodyText": "I think the JavaDoc links here are broken. I just ctrl+f'd for \"enroll\" to see what came up and found them.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r549557983", "createdAt": "2020-12-29T03:49:04Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-model/bfd-model-codegen/src/main/java/gov/cms/bfd/model/codegen/MappingSpec.java", "diffHunk": "@@ -218,6 +242,16 @@ public String getLineEntityParentField() {\n     return \"parentClaim\";\n   }\n \n+  /**\n+   * @return the name of the field in the {@link #getEnrollmentEntity()} {@link Entity} that should\n+   *     be used to store and refer to the child {@link #getEnrollmentEntity()} {@link Entity}s, if", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8fb96e5b45b3dfaadbf7e7bc8223c3b681a7f00"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1ODA0MA==", "bodyText": "I think the JavaDoc link here is broken. I just ctrl+f'd for \"enroll\" to see what came up and found it.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r549558040", "createdAt": "2020-12-29T03:49:23Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-model/bfd-model-codegen/src/main/java/gov/cms/bfd/model/codegen/MappingSpec.java", "diffHunk": "@@ -227,6 +261,15 @@ public String getLineEntityLineNumberField() {\n     return \"lineNumber\";\n   }\n \n+  /**\n+   * @return the name of the field in the {@link #getEntityEnrollmentField()} {@link Entity} that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8fb96e5b45b3dfaadbf7e7bc8223c3b681a7f00"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU2MDI1NA==", "bodyText": "FWIW, I'd suggest JavaDoc'ing this, as it's not entirely obvious what some of those parameters mean (I can never quite remember what scale means, for instance).", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r549560254", "createdAt": "2020-12-29T04:04:22Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-model/bfd-model-codegen/src/main/java/gov/cms/bfd/model/codegen/RifLayoutsProcessor.java", "diffHunk": "@@ -1503,4 +1828,156 @@ private void writeDebugLogMessages() {\n       throw new UncheckedIOException(e);\n     }\n   }\n+\n+  private static void createBeneficiaryMonthlyFields(\n+      TypeSpec.Builder lineEntity,\n+      boolean isId,\n+      boolean isTransient,\n+      boolean isColumnOptional,\n+      String fieldName,\n+      RifColumnType type,\n+      Optional<Integer> columnLength,\n+      Optional<Integer> columnScale) {\n+    FieldSpec lineField =\n+        FieldSpec.builder(\n+                selectJavaFieldType(type, isColumnOptional, columnLength, columnScale),\n+                fieldName,\n+                Modifier.PRIVATE)\n+            .addAnnotations(\n+                createBeneficiaryMonthlyAnnotations(\n+                    isId,\n+                    isTransient,\n+                    isColumnOptional,\n+                    fieldName,\n+                    type,\n+                    columnLength,\n+                    columnScale))\n+            .build();\n+    lineEntity.addField(lineField);\n+\n+    MethodSpec.Builder lineFieldGetter =\n+        MethodSpec.methodBuilder(calculateGetterName(lineField))\n+            .addModifiers(Modifier.PUBLIC)\n+            .returns(selectJavaPropertyType(type, isColumnOptional, columnLength, columnScale));\n+    addGetterStatement(isColumnOptional, lineField, lineFieldGetter);\n+    lineEntity.addMethod(lineFieldGetter.build());\n+\n+    MethodSpec.Builder lineFieldSetter =\n+        MethodSpec.methodBuilder(calculateSetterName(lineField))\n+            .addModifiers(Modifier.PUBLIC)\n+            .returns(void.class)\n+            .addParameter(\n+                selectJavaPropertyType(type, isColumnOptional, columnLength, columnScale),\n+                lineField.name);\n+    addSetterStatement(isColumnOptional, lineField, lineFieldSetter);\n+    lineEntity.addMethod(lineFieldSetter.build());\n+  }\n+\n+  private static List<AnnotationSpec> createBeneficiaryMonthlyAnnotations(\n+      boolean isId,\n+      boolean isTransient,\n+      boolean isColumnOptional,\n+      String fieldName,\n+      RifColumnType type,\n+      Optional<Integer> columnLength,\n+      Optional<Integer> columnScale) {\n+    LinkedList<AnnotationSpec> annotations = new LinkedList<>();\n+\n+    // Add an @Id annotation, if appropriate.\n+    if (isId) {\n+      AnnotationSpec.Builder idAnnotation = AnnotationSpec.builder(Id.class);\n+      annotations.add(idAnnotation.build());\n+    }\n+    // Add an @Column annotation to every non-transient column.\n+    if (!isTransient) {\n+      AnnotationSpec.Builder columnAnnotation =\n+          AnnotationSpec.builder(Column.class)\n+              .addMember(\"name\", \"$S\", \"`\" + fieldName + \"`\")\n+              .addMember(\"nullable\", \"$L\", isColumnOptional);\n+      if (type == RifColumnType.CHAR && columnLength.isPresent()) {\n+        columnAnnotation.addMember(\"length\", \"$L\", columnLength.get());\n+      } else if (type == RifColumnType.NUM) {\n+        /*\n+         * In SQL, the precision is the number of digits in the unscaled value, e.g.\n+         * \"123.45\" has a precision of 5. The scale is the number of digits to the right\n+         * of the decimal point, e.g. \"123.45\" has a scale of 2.\n+         */\n+\n+        if (columnLength.isPresent() && columnScale.isPresent()) {\n+          columnAnnotation.addMember(\"precision\", \"$L\", columnLength.get());\n+          columnAnnotation.addMember(\"scale\", \"$L\", columnScale.get());\n+        } else {\n+          /*\n+           * Unfortunately, Hibernate's SQL schema generation (HBM2DDL) doesn't correctly\n+           * handle SQL numeric datatypes that don't have a defined precision and scale.\n+           * What it _should_ do is represent those types in PostgreSQL as a \"NUMERIC\",\n+           * but what it does instead is insert a default precision and scale as\n+           * \"NUMBER(19, 2)\". The only way to force the correct behavior is to specify a\n+           * columnDefinition, so we do that. This leads to incorrect behavior with HSQL\n+           * (for different reasons), but fortunately that doesn't happen to cause\n+           * problems with our tests.\n+           */\n+          StringBuilder columnDefinition = new StringBuilder();\n+          columnDefinition.append(\"numeric\");\n+          if (columnLength.isPresent() || columnScale.isPresent()) {\n+            columnDefinition.append('(');\n+            if (columnLength.isPresent()) {\n+              columnDefinition.append(columnLength.get());\n+            }\n+            if (columnScale.isPresent()) {\n+              columnDefinition.append(\", \");\n+              columnDefinition.append(columnScale.get());\n+            }\n+            columnDefinition.append(')');\n+          }\n+          columnAnnotation.addMember(\"columnDefinition\", \"$S\", columnDefinition.toString());\n+        }\n+      }\n+      annotations.add(columnAnnotation.build());\n+    } else {\n+      annotations.add(AnnotationSpec.builder(Transient.class).build());\n+    }\n+\n+    return annotations;\n+  }\n+\n+  private static TypeName selectJavaFieldType(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8fb96e5b45b3dfaadbf7e7bc8223c3b681a7f00"}, "originalPosition": 750}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU2MDI5OQ==", "bodyText": "FWIW, I'd suggest JavaDoc'ing this, as it's not entirely obvious what some of those parameters mean (I can never quite remember what scale means, for instance).", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r549560299", "createdAt": "2020-12-29T04:04:37Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-model/bfd-model-codegen/src/main/java/gov/cms/bfd/model/codegen/RifLayoutsProcessor.java", "diffHunk": "@@ -1503,4 +1828,156 @@ private void writeDebugLogMessages() {\n       throw new UncheckedIOException(e);\n     }\n   }\n+\n+  private static void createBeneficiaryMonthlyFields(\n+      TypeSpec.Builder lineEntity,\n+      boolean isId,\n+      boolean isTransient,\n+      boolean isColumnOptional,\n+      String fieldName,\n+      RifColumnType type,\n+      Optional<Integer> columnLength,\n+      Optional<Integer> columnScale) {\n+    FieldSpec lineField =\n+        FieldSpec.builder(\n+                selectJavaFieldType(type, isColumnOptional, columnLength, columnScale),\n+                fieldName,\n+                Modifier.PRIVATE)\n+            .addAnnotations(\n+                createBeneficiaryMonthlyAnnotations(\n+                    isId,\n+                    isTransient,\n+                    isColumnOptional,\n+                    fieldName,\n+                    type,\n+                    columnLength,\n+                    columnScale))\n+            .build();\n+    lineEntity.addField(lineField);\n+\n+    MethodSpec.Builder lineFieldGetter =\n+        MethodSpec.methodBuilder(calculateGetterName(lineField))\n+            .addModifiers(Modifier.PUBLIC)\n+            .returns(selectJavaPropertyType(type, isColumnOptional, columnLength, columnScale));\n+    addGetterStatement(isColumnOptional, lineField, lineFieldGetter);\n+    lineEntity.addMethod(lineFieldGetter.build());\n+\n+    MethodSpec.Builder lineFieldSetter =\n+        MethodSpec.methodBuilder(calculateSetterName(lineField))\n+            .addModifiers(Modifier.PUBLIC)\n+            .returns(void.class)\n+            .addParameter(\n+                selectJavaPropertyType(type, isColumnOptional, columnLength, columnScale),\n+                lineField.name);\n+    addSetterStatement(isColumnOptional, lineField, lineFieldSetter);\n+    lineEntity.addMethod(lineFieldSetter.build());\n+  }\n+\n+  private static List<AnnotationSpec> createBeneficiaryMonthlyAnnotations(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8fb96e5b45b3dfaadbf7e7bc8223c3b681a7f00"}, "originalPosition": 682}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU2MDMxMw==", "bodyText": "FWIW, I'd suggest JavaDoc'ing this, as it's not entirely obvious what some of those parameters mean (I can never quite remember what scale means, for instance).", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r549560313", "createdAt": "2020-12-29T04:04:48Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-model/bfd-model-codegen/src/main/java/gov/cms/bfd/model/codegen/RifLayoutsProcessor.java", "diffHunk": "@@ -1503,4 +1828,156 @@ private void writeDebugLogMessages() {\n       throw new UncheckedIOException(e);\n     }\n   }\n+\n+  private static void createBeneficiaryMonthlyFields(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8fb96e5b45b3dfaadbf7e7bc8223c3b681a7f00"}, "originalPosition": 638}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU2MDM0Nw==", "bodyText": "FWIW, I'd suggest JavaDoc'ing this, as it's not entirely obvious what some of those parameters mean (I can never quite remember what scale means, for instance).", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r549560347", "createdAt": "2020-12-29T04:05:00Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-model/bfd-model-codegen/src/main/java/gov/cms/bfd/model/codegen/RifLayoutsProcessor.java", "diffHunk": "@@ -1503,4 +1828,156 @@ private void writeDebugLogMessages() {\n       throw new UncheckedIOException(e);\n     }\n   }\n+\n+  private static void createBeneficiaryMonthlyFields(\n+      TypeSpec.Builder lineEntity,\n+      boolean isId,\n+      boolean isTransient,\n+      boolean isColumnOptional,\n+      String fieldName,\n+      RifColumnType type,\n+      Optional<Integer> columnLength,\n+      Optional<Integer> columnScale) {\n+    FieldSpec lineField =\n+        FieldSpec.builder(\n+                selectJavaFieldType(type, isColumnOptional, columnLength, columnScale),\n+                fieldName,\n+                Modifier.PRIVATE)\n+            .addAnnotations(\n+                createBeneficiaryMonthlyAnnotations(\n+                    isId,\n+                    isTransient,\n+                    isColumnOptional,\n+                    fieldName,\n+                    type,\n+                    columnLength,\n+                    columnScale))\n+            .build();\n+    lineEntity.addField(lineField);\n+\n+    MethodSpec.Builder lineFieldGetter =\n+        MethodSpec.methodBuilder(calculateGetterName(lineField))\n+            .addModifiers(Modifier.PUBLIC)\n+            .returns(selectJavaPropertyType(type, isColumnOptional, columnLength, columnScale));\n+    addGetterStatement(isColumnOptional, lineField, lineFieldGetter);\n+    lineEntity.addMethod(lineFieldGetter.build());\n+\n+    MethodSpec.Builder lineFieldSetter =\n+        MethodSpec.methodBuilder(calculateSetterName(lineField))\n+            .addModifiers(Modifier.PUBLIC)\n+            .returns(void.class)\n+            .addParameter(\n+                selectJavaPropertyType(type, isColumnOptional, columnLength, columnScale),\n+                lineField.name);\n+    addSetterStatement(isColumnOptional, lineField, lineFieldSetter);\n+    lineEntity.addMethod(lineFieldSetter.build());\n+  }\n+\n+  private static List<AnnotationSpec> createBeneficiaryMonthlyAnnotations(\n+      boolean isId,\n+      boolean isTransient,\n+      boolean isColumnOptional,\n+      String fieldName,\n+      RifColumnType type,\n+      Optional<Integer> columnLength,\n+      Optional<Integer> columnScale) {\n+    LinkedList<AnnotationSpec> annotations = new LinkedList<>();\n+\n+    // Add an @Id annotation, if appropriate.\n+    if (isId) {\n+      AnnotationSpec.Builder idAnnotation = AnnotationSpec.builder(Id.class);\n+      annotations.add(idAnnotation.build());\n+    }\n+    // Add an @Column annotation to every non-transient column.\n+    if (!isTransient) {\n+      AnnotationSpec.Builder columnAnnotation =\n+          AnnotationSpec.builder(Column.class)\n+              .addMember(\"name\", \"$S\", \"`\" + fieldName + \"`\")\n+              .addMember(\"nullable\", \"$L\", isColumnOptional);\n+      if (type == RifColumnType.CHAR && columnLength.isPresent()) {\n+        columnAnnotation.addMember(\"length\", \"$L\", columnLength.get());\n+      } else if (type == RifColumnType.NUM) {\n+        /*\n+         * In SQL, the precision is the number of digits in the unscaled value, e.g.\n+         * \"123.45\" has a precision of 5. The scale is the number of digits to the right\n+         * of the decimal point, e.g. \"123.45\" has a scale of 2.\n+         */\n+\n+        if (columnLength.isPresent() && columnScale.isPresent()) {\n+          columnAnnotation.addMember(\"precision\", \"$L\", columnLength.get());\n+          columnAnnotation.addMember(\"scale\", \"$L\", columnScale.get());\n+        } else {\n+          /*\n+           * Unfortunately, Hibernate's SQL schema generation (HBM2DDL) doesn't correctly\n+           * handle SQL numeric datatypes that don't have a defined precision and scale.\n+           * What it _should_ do is represent those types in PostgreSQL as a \"NUMERIC\",\n+           * but what it does instead is insert a default precision and scale as\n+           * \"NUMBER(19, 2)\". The only way to force the correct behavior is to specify a\n+           * columnDefinition, so we do that. This leads to incorrect behavior with HSQL\n+           * (for different reasons), but fortunately that doesn't happen to cause\n+           * problems with our tests.\n+           */\n+          StringBuilder columnDefinition = new StringBuilder();\n+          columnDefinition.append(\"numeric\");\n+          if (columnLength.isPresent() || columnScale.isPresent()) {\n+            columnDefinition.append('(');\n+            if (columnLength.isPresent()) {\n+              columnDefinition.append(columnLength.get());\n+            }\n+            if (columnScale.isPresent()) {\n+              columnDefinition.append(\", \");\n+              columnDefinition.append(columnScale.get());\n+            }\n+            columnDefinition.append(')');\n+          }\n+          columnAnnotation.addMember(\"columnDefinition\", \"$S\", columnDefinition.toString());\n+        }\n+      }\n+      annotations.add(columnAnnotation.build());\n+    } else {\n+      annotations.add(AnnotationSpec.builder(Transient.class).build());\n+    }\n+\n+    return annotations;\n+  }\n+\n+  private static TypeName selectJavaFieldType(\n+      RifColumnType type,\n+      boolean isColumnOptional,\n+      Optional<Integer> columnLength,\n+      Optional<Integer> columnScale) {\n+    if (type == RifColumnType.CHAR\n+        && columnLength.orElse(Integer.MAX_VALUE) == 1\n+        && !isColumnOptional) return TypeName.CHAR;\n+    else if (type == RifColumnType.CHAR\n+        && columnLength.orElse(Integer.MAX_VALUE) == 1\n+        && isColumnOptional) return ClassName.get(Character.class);\n+    else if (type == RifColumnType.CHAR) return ClassName.get(String.class);\n+    else if (type == RifColumnType.DATE && columnLength.orElse(0) == 8)\n+      return ClassName.get(LocalDate.class);\n+    else if (type == RifColumnType.TIMESTAMP && columnLength.orElse(0) == 20)\n+      return ClassName.get(Instant.class);\n+    else if (type == RifColumnType.NUM && columnScale.orElse(Integer.MAX_VALUE) > 0)\n+      return ClassName.get(BigDecimal.class);\n+    else if (type == RifColumnType.NUM\n+        && columnScale.orElse(Integer.MAX_VALUE) == 0\n+        && !isColumnOptional) return TypeName.INT;\n+    else if (type == RifColumnType.NUM\n+        && columnScale.orElse(Integer.MAX_VALUE) == 0\n+        && isColumnOptional) return ClassName.get(Integer.class);\n+    else throw new IllegalArgumentException(\"Unhandled field type: \" + type.name());\n+  }\n+\n+  private static TypeName selectJavaPropertyType(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8fb96e5b45b3dfaadbf7e7bc8223c3b681a7f00"}, "originalPosition": 777}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU2MTAyMQ==", "bodyText": "FWIW, you don't need this if -- the for loop just won't run if the list is empty.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r549561021", "createdAt": "2020-12-29T04:09:11Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/main/java/gov/cms/bfd/pipeline/rif/load/RifLoader.java", "diffHunk": "@@ -596,6 +614,313 @@ private void processAsync(\n     }\n   }\n \n+  /**\n+   * Ensures that a {@link BeneficiaryMonthly} record is created or updated for the specified {@link\n+   * Beneficiary}, if that {@link Beneficiary} already exists and is just being updated.\n+   *\n+   * @param entityManager the {@link EntityManager} to use\n+   * @param loadAction the {@link Loadaction} record being processed\n+   * @param beneficiaryRecord the {@link Beneficiary} record being processed\n+   */\n+  private static void updateBeneficiaryMonthly(\n+      EntityManager entityManager, Beneficiary beneficiaryRecord) {\n+\n+    if (beneficiaryRecord.getBeneEnrollmentReferenceYear().isPresent()) {\n+\n+      int year = beneficiaryRecord.getBeneEnrollmentReferenceYear().get().intValue();\n+      List<BeneficiaryMonthly> currentYearBeneficiaryMonthly = new ArrayList<BeneficiaryMonthly>();\n+\n+      BeneficiaryMonthly beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 1, 1),\n+              beneficiaryRecord.getEntitlementBuyInJanInd(),\n+              beneficiaryRecord.getFipsStateCntyJanCode(),\n+              beneficiaryRecord.getHmoIndicatorJanInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityJanCode(),\n+              beneficiaryRecord.getMedicareStatusJanCode(),\n+              beneficiaryRecord.getPartCContractNumberJanId(),\n+              beneficiaryRecord.getPartCPbpNumberJanId(),\n+              beneficiaryRecord.getPartCPlanTypeJanCode(),\n+              beneficiaryRecord.getPartDContractNumberJanId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupJanCode(),\n+              beneficiaryRecord.getPartDPbpNumberJanId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyJanInd(),\n+              beneficiaryRecord.getPartDSegmentNumberJanId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+\n+      beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 2, 1),\n+              beneficiaryRecord.getEntitlementBuyInFebInd(),\n+              beneficiaryRecord.getFipsStateCntyFebCode(),\n+              beneficiaryRecord.getHmoIndicatorFebInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityFebCode(),\n+              beneficiaryRecord.getMedicareStatusFebCode(),\n+              beneficiaryRecord.getPartCContractNumberFebId(),\n+              beneficiaryRecord.getPartCPbpNumberFebId(),\n+              beneficiaryRecord.getPartCPlanTypeFebCode(),\n+              beneficiaryRecord.getPartDContractNumberFebId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupFebCode(),\n+              beneficiaryRecord.getPartDPbpNumberFebId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyFebInd(),\n+              beneficiaryRecord.getPartDSegmentNumberFebId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+\n+      beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 3, 1),\n+              beneficiaryRecord.getEntitlementBuyInMarInd(),\n+              beneficiaryRecord.getFipsStateCntyMarCode(),\n+              beneficiaryRecord.getHmoIndicatorMarInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityMarCode(),\n+              beneficiaryRecord.getMedicareStatusMarCode(),\n+              beneficiaryRecord.getPartCContractNumberMarId(),\n+              beneficiaryRecord.getPartCPbpNumberMarId(),\n+              beneficiaryRecord.getPartCPlanTypeMarCode(),\n+              beneficiaryRecord.getPartDContractNumberMarId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupMarCode(),\n+              beneficiaryRecord.getPartDPbpNumberMarId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyMarInd(),\n+              beneficiaryRecord.getPartDSegmentNumberMarId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+\n+      beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 4, 1),\n+              beneficiaryRecord.getEntitlementBuyInAprInd(),\n+              beneficiaryRecord.getFipsStateCntyAprCode(),\n+              beneficiaryRecord.getHmoIndicatorAprInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityAprCode(),\n+              beneficiaryRecord.getMedicareStatusAprCode(),\n+              beneficiaryRecord.getPartCContractNumberAprId(),\n+              beneficiaryRecord.getPartCPbpNumberAprId(),\n+              beneficiaryRecord.getPartCPlanTypeAprCode(),\n+              beneficiaryRecord.getPartDContractNumberAprId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupAprCode(),\n+              beneficiaryRecord.getPartDPbpNumberAprId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyAprInd(),\n+              beneficiaryRecord.getPartDSegmentNumberAprId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+\n+      beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 5, 1),\n+              beneficiaryRecord.getEntitlementBuyInMayInd(),\n+              beneficiaryRecord.getFipsStateCntyMayCode(),\n+              beneficiaryRecord.getHmoIndicatorMayInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityMayCode(),\n+              beneficiaryRecord.getMedicareStatusMayCode(),\n+              beneficiaryRecord.getPartCContractNumberMayId(),\n+              beneficiaryRecord.getPartCPbpNumberMayId(),\n+              beneficiaryRecord.getPartCPlanTypeMayCode(),\n+              beneficiaryRecord.getPartDContractNumberMayId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupMayCode(),\n+              beneficiaryRecord.getPartDPbpNumberMayId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyMayInd(),\n+              beneficiaryRecord.getPartDSegmentNumberMayId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+      beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 6, 1),\n+              beneficiaryRecord.getEntitlementBuyInJunInd(),\n+              beneficiaryRecord.getFipsStateCntyJunCode(),\n+              beneficiaryRecord.getHmoIndicatorJunInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityJunCode(),\n+              beneficiaryRecord.getMedicareStatusJunCode(),\n+              beneficiaryRecord.getPartCContractNumberJunId(),\n+              beneficiaryRecord.getPartCPbpNumberJunId(),\n+              beneficiaryRecord.getPartCPlanTypeJunCode(),\n+              beneficiaryRecord.getPartDContractNumberJunId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupJunCode(),\n+              beneficiaryRecord.getPartDPbpNumberJunId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyJunInd(),\n+              beneficiaryRecord.getPartDSegmentNumberJunId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+\n+      beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 7, 1),\n+              beneficiaryRecord.getEntitlementBuyInJulInd(),\n+              beneficiaryRecord.getFipsStateCntyJulCode(),\n+              beneficiaryRecord.getHmoIndicatorJulInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityJulCode(),\n+              beneficiaryRecord.getMedicareStatusJulCode(),\n+              beneficiaryRecord.getPartCContractNumberJulId(),\n+              beneficiaryRecord.getPartCPbpNumberJulId(),\n+              beneficiaryRecord.getPartCPlanTypeJulCode(),\n+              beneficiaryRecord.getPartDContractNumberJulId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupJulCode(),\n+              beneficiaryRecord.getPartDPbpNumberJulId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyJulInd(),\n+              beneficiaryRecord.getPartDSegmentNumberJulId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+\n+      beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 8, 1),\n+              beneficiaryRecord.getEntitlementBuyInAugInd(),\n+              beneficiaryRecord.getFipsStateCntyAugCode(),\n+              beneficiaryRecord.getHmoIndicatorAugInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityAugCode(),\n+              beneficiaryRecord.getMedicareStatusAugCode(),\n+              beneficiaryRecord.getPartCContractNumberAugId(),\n+              beneficiaryRecord.getPartCPbpNumberAugId(),\n+              beneficiaryRecord.getPartCPlanTypeAugCode(),\n+              beneficiaryRecord.getPartDContractNumberAugId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupAugCode(),\n+              beneficiaryRecord.getPartDPbpNumberAugId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyAugInd(),\n+              beneficiaryRecord.getPartDSegmentNumberAugId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+\n+      beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 9, 1),\n+              beneficiaryRecord.getEntitlementBuyInSeptInd(),\n+              beneficiaryRecord.getFipsStateCntySeptCode(),\n+              beneficiaryRecord.getHmoIndicatorSeptInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilitySeptCode(),\n+              beneficiaryRecord.getMedicareStatusSeptCode(),\n+              beneficiaryRecord.getPartCContractNumberSeptId(),\n+              beneficiaryRecord.getPartCPbpNumberSeptId(),\n+              beneficiaryRecord.getPartCPlanTypeSeptCode(),\n+              beneficiaryRecord.getPartDContractNumberSeptId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupSeptCode(),\n+              beneficiaryRecord.getPartDPbpNumberSeptId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidySeptInd(),\n+              beneficiaryRecord.getPartDSegmentNumberSeptId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+\n+      beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 10, 1),\n+              beneficiaryRecord.getEntitlementBuyInOctInd(),\n+              beneficiaryRecord.getFipsStateCntyOctCode(),\n+              beneficiaryRecord.getHmoIndicatorOctInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityOctCode(),\n+              beneficiaryRecord.getMedicareStatusOctCode(),\n+              beneficiaryRecord.getPartCContractNumberOctId(),\n+              beneficiaryRecord.getPartCPbpNumberOctId(),\n+              beneficiaryRecord.getPartCPlanTypeOctCode(),\n+              beneficiaryRecord.getPartDContractNumberOctId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupOctCode(),\n+              beneficiaryRecord.getPartDPbpNumberOctId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyOctInd(),\n+              beneficiaryRecord.getPartDSegmentNumberOctId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+\n+      beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 11, 1),\n+              beneficiaryRecord.getEntitlementBuyInNovInd(),\n+              beneficiaryRecord.getFipsStateCntyNovCode(),\n+              beneficiaryRecord.getHmoIndicatorNovInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityNovCode(),\n+              beneficiaryRecord.getMedicareStatusNovCode(),\n+              beneficiaryRecord.getPartCContractNumberNovId(),\n+              beneficiaryRecord.getPartCPbpNumberNovId(),\n+              beneficiaryRecord.getPartCPlanTypeNovCode(),\n+              beneficiaryRecord.getPartDContractNumberNovId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupNovCode(),\n+              beneficiaryRecord.getPartDPbpNumberNovId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyNovInd(),\n+              beneficiaryRecord.getPartDSegmentNumberNovId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+\n+      beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 12, 1),\n+              beneficiaryRecord.getEntitlementBuyInDecInd(),\n+              beneficiaryRecord.getFipsStateCntyDecCode(),\n+              beneficiaryRecord.getHmoIndicatorDecInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityDecCode(),\n+              beneficiaryRecord.getMedicareStatusDecCode(),\n+              beneficiaryRecord.getPartCContractNumberDecId(),\n+              beneficiaryRecord.getPartCPbpNumberDecId(),\n+              beneficiaryRecord.getPartCPlanTypeDecCode(),\n+              beneficiaryRecord.getPartDContractNumberDecId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupDecCode(),\n+              beneficiaryRecord.getPartDPbpNumberDecId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyDecInd(),\n+              beneficiaryRecord.getPartDSegmentNumberDecId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+\n+      if (currentYearBeneficiaryMonthly.size() > 0) {\n+        List<BeneficiaryMonthly> currentBeneficiaryMonthlyWithUpdates;\n+\n+        Beneficiary beneficiaryFromDb =\n+            entityManager.find(Beneficiary.class, beneficiaryRecord.getBeneficiaryId());\n+\n+        if (beneficiaryFromDb != null && beneficiaryFromDb.getBeneficiaryMonthlys().size() > 0) {\n+          currentBeneficiaryMonthlyWithUpdates = beneficiaryFromDb.getBeneficiaryMonthlys();\n+          List<BeneficiaryMonthly> currentYearBeneficiaryMonthlyPrevious =\n+              beneficiaryFromDb.getBeneficiaryMonthlys().stream()\n+                  .filter(e -> year == e.getYearMonth().getYear())\n+                  .collect(Collectors.toList());\n+\n+          if (currentYearBeneficiaryMonthlyPrevious.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8fb96e5b45b3dfaadbf7e7bc8223c3b681a7f00"}, "originalPosition": 364}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU2MTQ0Ng==", "bodyText": "I'm tired and can't quite think my way through it, but I think this might open us up to a race condition if we ever got a RIF file that listed the same bene multiople times? CSV records are processed in parallel, so there's a chance that you have two threads working on and trying to update the same bene record at the same time.\nThat'd be weird and bad, but perhaps worth thinking about and at least adding a \"TODO enforce RIF invariant elsewhere: no repeats of same record/PK in same RIF file allowed\".", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r549561446", "createdAt": "2020-12-29T04:12:36Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/main/java/gov/cms/bfd/pipeline/rif/load/RifLoader.java", "diffHunk": "@@ -596,6 +614,313 @@ private void processAsync(\n     }\n   }\n \n+  /**\n+   * Ensures that a {@link BeneficiaryMonthly} record is created or updated for the specified {@link\n+   * Beneficiary}, if that {@link Beneficiary} already exists and is just being updated.\n+   *\n+   * @param entityManager the {@link EntityManager} to use\n+   * @param loadAction the {@link Loadaction} record being processed\n+   * @param beneficiaryRecord the {@link Beneficiary} record being processed\n+   */\n+  private static void updateBeneficiaryMonthly(\n+      EntityManager entityManager, Beneficiary beneficiaryRecord) {\n+\n+    if (beneficiaryRecord.getBeneEnrollmentReferenceYear().isPresent()) {\n+\n+      int year = beneficiaryRecord.getBeneEnrollmentReferenceYear().get().intValue();\n+      List<BeneficiaryMonthly> currentYearBeneficiaryMonthly = new ArrayList<BeneficiaryMonthly>();\n+\n+      BeneficiaryMonthly beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 1, 1),\n+              beneficiaryRecord.getEntitlementBuyInJanInd(),\n+              beneficiaryRecord.getFipsStateCntyJanCode(),\n+              beneficiaryRecord.getHmoIndicatorJanInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityJanCode(),\n+              beneficiaryRecord.getMedicareStatusJanCode(),\n+              beneficiaryRecord.getPartCContractNumberJanId(),\n+              beneficiaryRecord.getPartCPbpNumberJanId(),\n+              beneficiaryRecord.getPartCPlanTypeJanCode(),\n+              beneficiaryRecord.getPartDContractNumberJanId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupJanCode(),\n+              beneficiaryRecord.getPartDPbpNumberJanId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyJanInd(),\n+              beneficiaryRecord.getPartDSegmentNumberJanId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+\n+      beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 2, 1),\n+              beneficiaryRecord.getEntitlementBuyInFebInd(),\n+              beneficiaryRecord.getFipsStateCntyFebCode(),\n+              beneficiaryRecord.getHmoIndicatorFebInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityFebCode(),\n+              beneficiaryRecord.getMedicareStatusFebCode(),\n+              beneficiaryRecord.getPartCContractNumberFebId(),\n+              beneficiaryRecord.getPartCPbpNumberFebId(),\n+              beneficiaryRecord.getPartCPlanTypeFebCode(),\n+              beneficiaryRecord.getPartDContractNumberFebId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupFebCode(),\n+              beneficiaryRecord.getPartDPbpNumberFebId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyFebInd(),\n+              beneficiaryRecord.getPartDSegmentNumberFebId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+\n+      beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 3, 1),\n+              beneficiaryRecord.getEntitlementBuyInMarInd(),\n+              beneficiaryRecord.getFipsStateCntyMarCode(),\n+              beneficiaryRecord.getHmoIndicatorMarInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityMarCode(),\n+              beneficiaryRecord.getMedicareStatusMarCode(),\n+              beneficiaryRecord.getPartCContractNumberMarId(),\n+              beneficiaryRecord.getPartCPbpNumberMarId(),\n+              beneficiaryRecord.getPartCPlanTypeMarCode(),\n+              beneficiaryRecord.getPartDContractNumberMarId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupMarCode(),\n+              beneficiaryRecord.getPartDPbpNumberMarId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyMarInd(),\n+              beneficiaryRecord.getPartDSegmentNumberMarId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+\n+      beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 4, 1),\n+              beneficiaryRecord.getEntitlementBuyInAprInd(),\n+              beneficiaryRecord.getFipsStateCntyAprCode(),\n+              beneficiaryRecord.getHmoIndicatorAprInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityAprCode(),\n+              beneficiaryRecord.getMedicareStatusAprCode(),\n+              beneficiaryRecord.getPartCContractNumberAprId(),\n+              beneficiaryRecord.getPartCPbpNumberAprId(),\n+              beneficiaryRecord.getPartCPlanTypeAprCode(),\n+              beneficiaryRecord.getPartDContractNumberAprId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupAprCode(),\n+              beneficiaryRecord.getPartDPbpNumberAprId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyAprInd(),\n+              beneficiaryRecord.getPartDSegmentNumberAprId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+\n+      beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 5, 1),\n+              beneficiaryRecord.getEntitlementBuyInMayInd(),\n+              beneficiaryRecord.getFipsStateCntyMayCode(),\n+              beneficiaryRecord.getHmoIndicatorMayInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityMayCode(),\n+              beneficiaryRecord.getMedicareStatusMayCode(),\n+              beneficiaryRecord.getPartCContractNumberMayId(),\n+              beneficiaryRecord.getPartCPbpNumberMayId(),\n+              beneficiaryRecord.getPartCPlanTypeMayCode(),\n+              beneficiaryRecord.getPartDContractNumberMayId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupMayCode(),\n+              beneficiaryRecord.getPartDPbpNumberMayId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyMayInd(),\n+              beneficiaryRecord.getPartDSegmentNumberMayId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+      beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 6, 1),\n+              beneficiaryRecord.getEntitlementBuyInJunInd(),\n+              beneficiaryRecord.getFipsStateCntyJunCode(),\n+              beneficiaryRecord.getHmoIndicatorJunInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityJunCode(),\n+              beneficiaryRecord.getMedicareStatusJunCode(),\n+              beneficiaryRecord.getPartCContractNumberJunId(),\n+              beneficiaryRecord.getPartCPbpNumberJunId(),\n+              beneficiaryRecord.getPartCPlanTypeJunCode(),\n+              beneficiaryRecord.getPartDContractNumberJunId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupJunCode(),\n+              beneficiaryRecord.getPartDPbpNumberJunId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyJunInd(),\n+              beneficiaryRecord.getPartDSegmentNumberJunId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+\n+      beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 7, 1),\n+              beneficiaryRecord.getEntitlementBuyInJulInd(),\n+              beneficiaryRecord.getFipsStateCntyJulCode(),\n+              beneficiaryRecord.getHmoIndicatorJulInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityJulCode(),\n+              beneficiaryRecord.getMedicareStatusJulCode(),\n+              beneficiaryRecord.getPartCContractNumberJulId(),\n+              beneficiaryRecord.getPartCPbpNumberJulId(),\n+              beneficiaryRecord.getPartCPlanTypeJulCode(),\n+              beneficiaryRecord.getPartDContractNumberJulId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupJulCode(),\n+              beneficiaryRecord.getPartDPbpNumberJulId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyJulInd(),\n+              beneficiaryRecord.getPartDSegmentNumberJulId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+\n+      beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 8, 1),\n+              beneficiaryRecord.getEntitlementBuyInAugInd(),\n+              beneficiaryRecord.getFipsStateCntyAugCode(),\n+              beneficiaryRecord.getHmoIndicatorAugInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityAugCode(),\n+              beneficiaryRecord.getMedicareStatusAugCode(),\n+              beneficiaryRecord.getPartCContractNumberAugId(),\n+              beneficiaryRecord.getPartCPbpNumberAugId(),\n+              beneficiaryRecord.getPartCPlanTypeAugCode(),\n+              beneficiaryRecord.getPartDContractNumberAugId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupAugCode(),\n+              beneficiaryRecord.getPartDPbpNumberAugId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyAugInd(),\n+              beneficiaryRecord.getPartDSegmentNumberAugId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+\n+      beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 9, 1),\n+              beneficiaryRecord.getEntitlementBuyInSeptInd(),\n+              beneficiaryRecord.getFipsStateCntySeptCode(),\n+              beneficiaryRecord.getHmoIndicatorSeptInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilitySeptCode(),\n+              beneficiaryRecord.getMedicareStatusSeptCode(),\n+              beneficiaryRecord.getPartCContractNumberSeptId(),\n+              beneficiaryRecord.getPartCPbpNumberSeptId(),\n+              beneficiaryRecord.getPartCPlanTypeSeptCode(),\n+              beneficiaryRecord.getPartDContractNumberSeptId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupSeptCode(),\n+              beneficiaryRecord.getPartDPbpNumberSeptId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidySeptInd(),\n+              beneficiaryRecord.getPartDSegmentNumberSeptId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+\n+      beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 10, 1),\n+              beneficiaryRecord.getEntitlementBuyInOctInd(),\n+              beneficiaryRecord.getFipsStateCntyOctCode(),\n+              beneficiaryRecord.getHmoIndicatorOctInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityOctCode(),\n+              beneficiaryRecord.getMedicareStatusOctCode(),\n+              beneficiaryRecord.getPartCContractNumberOctId(),\n+              beneficiaryRecord.getPartCPbpNumberOctId(),\n+              beneficiaryRecord.getPartCPlanTypeOctCode(),\n+              beneficiaryRecord.getPartDContractNumberOctId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupOctCode(),\n+              beneficiaryRecord.getPartDPbpNumberOctId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyOctInd(),\n+              beneficiaryRecord.getPartDSegmentNumberOctId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+\n+      beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 11, 1),\n+              beneficiaryRecord.getEntitlementBuyInNovInd(),\n+              beneficiaryRecord.getFipsStateCntyNovCode(),\n+              beneficiaryRecord.getHmoIndicatorNovInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityNovCode(),\n+              beneficiaryRecord.getMedicareStatusNovCode(),\n+              beneficiaryRecord.getPartCContractNumberNovId(),\n+              beneficiaryRecord.getPartCPbpNumberNovId(),\n+              beneficiaryRecord.getPartCPlanTypeNovCode(),\n+              beneficiaryRecord.getPartDContractNumberNovId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupNovCode(),\n+              beneficiaryRecord.getPartDPbpNumberNovId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyNovInd(),\n+              beneficiaryRecord.getPartDSegmentNumberNovId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+\n+      beneficiaryMonthly =\n+          getBeneficiaryMonthly(\n+              beneficiaryRecord,\n+              LocalDate.of(year, 12, 1),\n+              beneficiaryRecord.getEntitlementBuyInDecInd(),\n+              beneficiaryRecord.getFipsStateCntyDecCode(),\n+              beneficiaryRecord.getHmoIndicatorDecInd(),\n+              beneficiaryRecord.getMedicaidDualEligibilityDecCode(),\n+              beneficiaryRecord.getMedicareStatusDecCode(),\n+              beneficiaryRecord.getPartCContractNumberDecId(),\n+              beneficiaryRecord.getPartCPbpNumberDecId(),\n+              beneficiaryRecord.getPartCPlanTypeDecCode(),\n+              beneficiaryRecord.getPartDContractNumberDecId(),\n+              beneficiaryRecord.getPartDLowIncomeCostShareGroupDecCode(),\n+              beneficiaryRecord.getPartDPbpNumberDecId(),\n+              beneficiaryRecord.getPartDRetireeDrugSubsidyDecInd(),\n+              beneficiaryRecord.getPartDSegmentNumberDecId());\n+\n+      if (beneficiaryMonthly != null) {\n+        currentYearBeneficiaryMonthly.add(beneficiaryMonthly);\n+      }\n+\n+      if (currentYearBeneficiaryMonthly.size() > 0) {\n+        List<BeneficiaryMonthly> currentBeneficiaryMonthlyWithUpdates;\n+\n+        Beneficiary beneficiaryFromDb =\n+            entityManager.find(Beneficiary.class, beneficiaryRecord.getBeneficiaryId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8fb96e5b45b3dfaadbf7e7bc8223c3b681a7f00"}, "originalPosition": 355}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU2MjAwOQ==", "bodyText": "I think I said something like, \"if I were you and could reason my way to having a lot of confidence in the above logic, I might skip adding the test -- otherwise, I'd double-check myself by adding a test case for it: what happens when we go from having just monthly data for 2020-01 to also having the data for 2020-02?\"", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r549562009", "createdAt": "2020-12-29T04:16:25Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/test/java/gov/cms/bfd/pipeline/rif/load/RifLoaderIT.java", "diffHunk": "@@ -316,6 +317,68 @@ public void loadSampleUUnchanged() {\n       if (entityManager != null) entityManager.close();\n     }\n   }\n+\n+  @Test\n+  public void loadInitialEnrollmentShouldCount12() {\n+    DataSource dataSource = DatabaseTestHelper.getTestDatabaseAfterClean();\n+    loadSample(dataSource, Arrays.asList(StaticRifResourceGroup.SAMPLE_A.getResources()));\n+\n+    LoadAppOptions options = RifLoaderTestUtils.getLoadOptions(dataSource);\n+    EntityManagerFactory entityManagerFactory =\n+        RifLoaderTestUtils.createEntityManagerFactory(options);\n+    EntityManager entityManager = null;\n+    try {\n+      entityManager = entityManagerFactory.createEntityManager();\n+      Beneficiary beneficiaryFromDb = entityManager.find(Beneficiary.class, \"567834\");\n+      Assert.assertEquals(12, beneficiaryFromDb.getEnrollments().size());\n+\n+    } finally {\n+      if (entityManager != null) entityManager.close();\n+    }\n+  }\n+\n+  @Test\n+  public void loadInitialEnrollmentShouldCount24() {\n+    DataSource dataSource = DatabaseTestHelper.getTestDatabaseAfterClean();\n+    loadSample(dataSource, Arrays.asList(StaticRifResourceGroup.SAMPLE_A.getResources()));\n+    loadSample(dataSource, Arrays.asList(StaticRifResourceGroup.SAMPLE_U.getResources()));\n+\n+    LoadAppOptions options = RifLoaderTestUtils.getLoadOptions(dataSource);\n+    EntityManagerFactory entityManagerFactory =\n+        RifLoaderTestUtils.createEntityManagerFactory(options);\n+    EntityManager entityManager = null;\n+    try {\n+      entityManager = entityManagerFactory.createEntityManager();\n+\n+      Beneficiary beneficiaryFromDb = entityManager.find(Beneficiary.class, \"567834\");\n+      Assert.assertEquals(24, beneficiaryFromDb.getEnrollments().size());\n+    } finally {\n+      if (entityManager != null) entityManager.close();\n+    }\n+  }\n+\n+  @Test\n+  public void loadInitialEnrollmentShouldCount20SinceThereIsAUpdateOf8Months() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk1NDg1OQ=="}, "originalCommit": {"oid": "e6b8b6ef44e33a316033f02da5f3c177b2e7c612"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccf6dbc202b796476de5e622f717f034d66c1711", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/ccf6dbc202b796476de5e622f717f034d66c1711", "committedDate": "2020-12-29T07:07:42Z", "message": "Added extra test to test monthly updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NjYyNjUw", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#pullrequestreview-559662650", "createdAt": "2020-12-29T19:02:19Z", "commit": {"oid": "ccf6dbc202b796476de5e622f717f034d66c1711"}, "state": "DISMISSED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxOTowMjoxOVrOIMWAmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxOTowODoxMlrOIMWG_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxNDQyNw==", "bodyText": "Would you mind applying this suggestion?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param columnLength specifies the column length {@link Optional<Integer>}\n          \n          \n            \n               * @param columnScale specifies the column scale {@link Optional<Integer>}\n          \n          \n            \n               * @param columnLength specifies the column length {@link Optional<Integer>}, for numeric types this represents the total number of digits that can be stored\n          \n          \n            \n               * @param columnScale specifies the column scale {@link Optional<Integer>}, for numeric types this represents how many of the total digits (see `columnLength`) are to the right of the decimal point", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r549814427", "createdAt": "2020-12-29T19:02:19Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-model/bfd-model-codegen/src/main/java/gov/cms/bfd/model/codegen/RifLayoutsProcessor.java", "diffHunk": "@@ -1503,4 +1828,195 @@ private void writeDebugLogMessages() {\n       throw new UncheckedIOException(e);\n     }\n   }\n+\n+  /**\n+   * Creates the fields for the BeneficiaryMonthly class in the model rif\n+   *\n+   * @param lineEntity helps build the entity {@link TypeSpec.Builder}\n+   * @param isId determines if the field is an id field\n+   * @param isTransient determines if the field is transient {@link boolean}\n+   * @param isColumnOptional determines if the field is optional {@link boolean}\n+   * @param fieldName specifies the fieldname {@link String}\n+   * @param type specifies the field type {@link RifColumnType}\n+   * @param columnLength specifies the column length {@link Optional<Integer>}\n+   * @param columnScale specifies the column scale {@link Optional<Integer>}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccf6dbc202b796476de5e622f717f034d66c1711"}, "originalPosition": 648}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxNDY5Mw==", "bodyText": "Would you mind applying this suggestion?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param columnLength specifies the column length {@link Optional<Integer>}\n          \n          \n            \n               * @param columnScale specifies the column scale {@link Optional<Integer>}\n          \n          \n            \n               * @param columnLength specifies the column length {@link Optional<Integer>}, for numeric types this represents the total number of digits that can be stored\n          \n          \n            \n               * @param columnScale specifies the column scale {@link Optional<Integer>}, for numeric types this represents how many of the total digits (see `columnLength`) are to the right of the decimal point", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r549814693", "createdAt": "2020-12-29T19:03:21Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-model/bfd-model-codegen/src/main/java/gov/cms/bfd/model/codegen/RifLayoutsProcessor.java", "diffHunk": "@@ -1503,4 +1828,195 @@ private void writeDebugLogMessages() {\n       throw new UncheckedIOException(e);\n     }\n   }\n+\n+  /**\n+   * Creates the fields for the BeneficiaryMonthly class in the model rif\n+   *\n+   * @param lineEntity helps build the entity {@link TypeSpec.Builder}\n+   * @param isId determines if the field is an id field\n+   * @param isTransient determines if the field is transient {@link boolean}\n+   * @param isColumnOptional determines if the field is optional {@link boolean}\n+   * @param fieldName specifies the fieldname {@link String}\n+   * @param type specifies the field type {@link RifColumnType}\n+   * @param columnLength specifies the column length {@link Optional<Integer>}\n+   * @param columnScale specifies the column scale {@link Optional<Integer>}\n+   */\n+  private static void createBeneficiaryMonthlyFields(\n+      TypeSpec.Builder lineEntity,\n+      boolean isId,\n+      boolean isTransient,\n+      boolean isColumnOptional,\n+      String fieldName,\n+      RifColumnType type,\n+      Optional<Integer> columnLength,\n+      Optional<Integer> columnScale) {\n+    FieldSpec lineField =\n+        FieldSpec.builder(\n+                selectJavaFieldType(type, isColumnOptional, columnLength, columnScale),\n+                fieldName,\n+                Modifier.PRIVATE)\n+            .addAnnotations(\n+                createBeneficiaryMonthlyAnnotations(\n+                    isId,\n+                    isTransient,\n+                    isColumnOptional,\n+                    fieldName,\n+                    type,\n+                    columnLength,\n+                    columnScale))\n+            .build();\n+    lineEntity.addField(lineField);\n+\n+    MethodSpec.Builder lineFieldGetter =\n+        MethodSpec.methodBuilder(calculateGetterName(lineField))\n+            .addModifiers(Modifier.PUBLIC)\n+            .returns(selectJavaPropertyType(type, isColumnOptional, columnLength, columnScale));\n+    addGetterStatement(isColumnOptional, lineField, lineFieldGetter);\n+    lineEntity.addMethod(lineFieldGetter.build());\n+\n+    MethodSpec.Builder lineFieldSetter =\n+        MethodSpec.methodBuilder(calculateSetterName(lineField))\n+            .addModifiers(Modifier.PUBLIC)\n+            .returns(void.class)\n+            .addParameter(\n+                selectJavaPropertyType(type, isColumnOptional, columnLength, columnScale),\n+                lineField.name);\n+    addSetterStatement(isColumnOptional, lineField, lineFieldSetter);\n+    lineEntity.addMethod(lineFieldSetter.build());\n+  }\n+\n+  /**\n+   * Creates the fields for the BeneficiaryMonthly annotations in the model rif\n+   *\n+   * @param isId determines if the field is an id field\n+   * @param isTransient determines if the field is transient {@link boolean}\n+   * @param isColumnOptional determines if the field is optional {@link boolean}\n+   * @param fieldName specifies the fieldname {@link String}\n+   * @param type specifies the field type {@link RifColumnType}\n+   * @param columnLength specifies the column length {@link Optional<Integer>}\n+   * @param columnScale specifies the column scale {@link Optional<Integer>}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccf6dbc202b796476de5e622f717f034d66c1711"}, "originalPosition": 703}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxNDgzOQ==", "bodyText": "Would you mind applying this suggestion?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param columnLength specifies the column length {@link Optional<Integer>}\n          \n          \n            \n               * @param columnScale specifies the column scale {@link Optional<Integer>}\n          \n          \n            \n               * @param columnLength specifies the column length {@link Optional<Integer>}, for numeric types this represents the total number of digits that can be stored\n          \n          \n            \n               * @param columnScale specifies the column scale {@link Optional<Integer>}, for numeric types this represents how many of the total digits (see `columnLength`) are to the right of the decimal point", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r549814839", "createdAt": "2020-12-29T19:03:55Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-model/bfd-model-codegen/src/main/java/gov/cms/bfd/model/codegen/RifLayoutsProcessor.java", "diffHunk": "@@ -1503,4 +1828,195 @@ private void writeDebugLogMessages() {\n       throw new UncheckedIOException(e);\n     }\n   }\n+\n+  /**\n+   * Creates the fields for the BeneficiaryMonthly class in the model rif\n+   *\n+   * @param lineEntity helps build the entity {@link TypeSpec.Builder}\n+   * @param isId determines if the field is an id field\n+   * @param isTransient determines if the field is transient {@link boolean}\n+   * @param isColumnOptional determines if the field is optional {@link boolean}\n+   * @param fieldName specifies the fieldname {@link String}\n+   * @param type specifies the field type {@link RifColumnType}\n+   * @param columnLength specifies the column length {@link Optional<Integer>}\n+   * @param columnScale specifies the column scale {@link Optional<Integer>}\n+   */\n+  private static void createBeneficiaryMonthlyFields(\n+      TypeSpec.Builder lineEntity,\n+      boolean isId,\n+      boolean isTransient,\n+      boolean isColumnOptional,\n+      String fieldName,\n+      RifColumnType type,\n+      Optional<Integer> columnLength,\n+      Optional<Integer> columnScale) {\n+    FieldSpec lineField =\n+        FieldSpec.builder(\n+                selectJavaFieldType(type, isColumnOptional, columnLength, columnScale),\n+                fieldName,\n+                Modifier.PRIVATE)\n+            .addAnnotations(\n+                createBeneficiaryMonthlyAnnotations(\n+                    isId,\n+                    isTransient,\n+                    isColumnOptional,\n+                    fieldName,\n+                    type,\n+                    columnLength,\n+                    columnScale))\n+            .build();\n+    lineEntity.addField(lineField);\n+\n+    MethodSpec.Builder lineFieldGetter =\n+        MethodSpec.methodBuilder(calculateGetterName(lineField))\n+            .addModifiers(Modifier.PUBLIC)\n+            .returns(selectJavaPropertyType(type, isColumnOptional, columnLength, columnScale));\n+    addGetterStatement(isColumnOptional, lineField, lineFieldGetter);\n+    lineEntity.addMethod(lineFieldGetter.build());\n+\n+    MethodSpec.Builder lineFieldSetter =\n+        MethodSpec.methodBuilder(calculateSetterName(lineField))\n+            .addModifiers(Modifier.PUBLIC)\n+            .returns(void.class)\n+            .addParameter(\n+                selectJavaPropertyType(type, isColumnOptional, columnLength, columnScale),\n+                lineField.name);\n+    addSetterStatement(isColumnOptional, lineField, lineFieldSetter);\n+    lineEntity.addMethod(lineFieldSetter.build());\n+  }\n+\n+  /**\n+   * Creates the fields for the BeneficiaryMonthly annotations in the model rif\n+   *\n+   * @param isId determines if the field is an id field\n+   * @param isTransient determines if the field is transient {@link boolean}\n+   * @param isColumnOptional determines if the field is optional {@link boolean}\n+   * @param fieldName specifies the fieldname {@link String}\n+   * @param type specifies the field type {@link RifColumnType}\n+   * @param columnLength specifies the column length {@link Optional<Integer>}\n+   * @param columnScale specifies the column scale {@link Optional<Integer>}\n+   */\n+  private static List<AnnotationSpec> createBeneficiaryMonthlyAnnotations(\n+      boolean isId,\n+      boolean isTransient,\n+      boolean isColumnOptional,\n+      String fieldName,\n+      RifColumnType type,\n+      Optional<Integer> columnLength,\n+      Optional<Integer> columnScale) {\n+    LinkedList<AnnotationSpec> annotations = new LinkedList<>();\n+\n+    // Add an @Id annotation, if appropriate.\n+    if (isId) {\n+      AnnotationSpec.Builder idAnnotation = AnnotationSpec.builder(Id.class);\n+      annotations.add(idAnnotation.build());\n+    }\n+    // Add an @Column annotation to every non-transient column.\n+    if (!isTransient) {\n+      AnnotationSpec.Builder columnAnnotation =\n+          AnnotationSpec.builder(Column.class)\n+              .addMember(\"name\", \"$S\", \"`\" + fieldName + \"`\")\n+              .addMember(\"nullable\", \"$L\", isColumnOptional);\n+      if (type == RifColumnType.CHAR && columnLength.isPresent()) {\n+        columnAnnotation.addMember(\"length\", \"$L\", columnLength.get());\n+      } else if (type == RifColumnType.NUM) {\n+        /*\n+         * In SQL, the precision is the number of digits in the unscaled value, e.g.\n+         * \"123.45\" has a precision of 5. The scale is the number of digits to the right\n+         * of the decimal point, e.g. \"123.45\" has a scale of 2.\n+         */\n+\n+        if (columnLength.isPresent() && columnScale.isPresent()) {\n+          columnAnnotation.addMember(\"precision\", \"$L\", columnLength.get());\n+          columnAnnotation.addMember(\"scale\", \"$L\", columnScale.get());\n+        } else {\n+          /*\n+           * Unfortunately, Hibernate's SQL schema generation (HBM2DDL) doesn't correctly\n+           * handle SQL numeric datatypes that don't have a defined precision and scale.\n+           * What it _should_ do is represent those types in PostgreSQL as a \"NUMERIC\",\n+           * but what it does instead is insert a default precision and scale as\n+           * \"NUMBER(19, 2)\". The only way to force the correct behavior is to specify a\n+           * columnDefinition, so we do that. This leads to incorrect behavior with HSQL\n+           * (for different reasons), but fortunately that doesn't happen to cause\n+           * problems with our tests.\n+           */\n+          StringBuilder columnDefinition = new StringBuilder();\n+          columnDefinition.append(\"numeric\");\n+          if (columnLength.isPresent() || columnScale.isPresent()) {\n+            columnDefinition.append('(');\n+            if (columnLength.isPresent()) {\n+              columnDefinition.append(columnLength.get());\n+            }\n+            if (columnScale.isPresent()) {\n+              columnDefinition.append(\", \");\n+              columnDefinition.append(columnScale.get());\n+            }\n+            columnDefinition.append(')');\n+          }\n+          columnAnnotation.addMember(\"columnDefinition\", \"$S\", columnDefinition.toString());\n+        }\n+      }\n+      annotations.add(columnAnnotation.build());\n+    } else {\n+      annotations.add(AnnotationSpec.builder(Transient.class).build());\n+    }\n+\n+    return annotations;\n+  }\n+\n+  /**\n+   * Selects the java field type\n+   *\n+   * @param type specifies the field type {@link RifColumnType}\n+   * @param isColumnOptional determines if the field is optional {@link boolean}\n+   * @param columnLength specifies the column length {@link Optional<Integer>}\n+   * @param columnScale specifies the column scale {@link Optional<Integer>}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccf6dbc202b796476de5e622f717f034d66c1711"}, "originalPosition": 779}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxNDkyNA==", "bodyText": "Would you mind applying this suggestion?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param columnLength specifies the column length {@link Optional<Integer>}\n          \n          \n            \n               * @param columnScale specifies the column scale {@link Optional<Integer>}\n          \n          \n            \n               * @param columnLength specifies the column length {@link Optional<Integer>}, for numeric types this represents the total number of digits that can be stored\n          \n          \n            \n               * @param columnScale specifies the column scale {@link Optional<Integer>}, for numeric types this represents how many of the total digits (see `columnLength`) are to the right of the decimal point", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r549814924", "createdAt": "2020-12-29T19:04:13Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-model/bfd-model-codegen/src/main/java/gov/cms/bfd/model/codegen/RifLayoutsProcessor.java", "diffHunk": "@@ -1503,4 +1828,195 @@ private void writeDebugLogMessages() {\n       throw new UncheckedIOException(e);\n     }\n   }\n+\n+  /**\n+   * Creates the fields for the BeneficiaryMonthly class in the model rif\n+   *\n+   * @param lineEntity helps build the entity {@link TypeSpec.Builder}\n+   * @param isId determines if the field is an id field\n+   * @param isTransient determines if the field is transient {@link boolean}\n+   * @param isColumnOptional determines if the field is optional {@link boolean}\n+   * @param fieldName specifies the fieldname {@link String}\n+   * @param type specifies the field type {@link RifColumnType}\n+   * @param columnLength specifies the column length {@link Optional<Integer>}\n+   * @param columnScale specifies the column scale {@link Optional<Integer>}\n+   */\n+  private static void createBeneficiaryMonthlyFields(\n+      TypeSpec.Builder lineEntity,\n+      boolean isId,\n+      boolean isTransient,\n+      boolean isColumnOptional,\n+      String fieldName,\n+      RifColumnType type,\n+      Optional<Integer> columnLength,\n+      Optional<Integer> columnScale) {\n+    FieldSpec lineField =\n+        FieldSpec.builder(\n+                selectJavaFieldType(type, isColumnOptional, columnLength, columnScale),\n+                fieldName,\n+                Modifier.PRIVATE)\n+            .addAnnotations(\n+                createBeneficiaryMonthlyAnnotations(\n+                    isId,\n+                    isTransient,\n+                    isColumnOptional,\n+                    fieldName,\n+                    type,\n+                    columnLength,\n+                    columnScale))\n+            .build();\n+    lineEntity.addField(lineField);\n+\n+    MethodSpec.Builder lineFieldGetter =\n+        MethodSpec.methodBuilder(calculateGetterName(lineField))\n+            .addModifiers(Modifier.PUBLIC)\n+            .returns(selectJavaPropertyType(type, isColumnOptional, columnLength, columnScale));\n+    addGetterStatement(isColumnOptional, lineField, lineFieldGetter);\n+    lineEntity.addMethod(lineFieldGetter.build());\n+\n+    MethodSpec.Builder lineFieldSetter =\n+        MethodSpec.methodBuilder(calculateSetterName(lineField))\n+            .addModifiers(Modifier.PUBLIC)\n+            .returns(void.class)\n+            .addParameter(\n+                selectJavaPropertyType(type, isColumnOptional, columnLength, columnScale),\n+                lineField.name);\n+    addSetterStatement(isColumnOptional, lineField, lineFieldSetter);\n+    lineEntity.addMethod(lineFieldSetter.build());\n+  }\n+\n+  /**\n+   * Creates the fields for the BeneficiaryMonthly annotations in the model rif\n+   *\n+   * @param isId determines if the field is an id field\n+   * @param isTransient determines if the field is transient {@link boolean}\n+   * @param isColumnOptional determines if the field is optional {@link boolean}\n+   * @param fieldName specifies the fieldname {@link String}\n+   * @param type specifies the field type {@link RifColumnType}\n+   * @param columnLength specifies the column length {@link Optional<Integer>}\n+   * @param columnScale specifies the column scale {@link Optional<Integer>}\n+   */\n+  private static List<AnnotationSpec> createBeneficiaryMonthlyAnnotations(\n+      boolean isId,\n+      boolean isTransient,\n+      boolean isColumnOptional,\n+      String fieldName,\n+      RifColumnType type,\n+      Optional<Integer> columnLength,\n+      Optional<Integer> columnScale) {\n+    LinkedList<AnnotationSpec> annotations = new LinkedList<>();\n+\n+    // Add an @Id annotation, if appropriate.\n+    if (isId) {\n+      AnnotationSpec.Builder idAnnotation = AnnotationSpec.builder(Id.class);\n+      annotations.add(idAnnotation.build());\n+    }\n+    // Add an @Column annotation to every non-transient column.\n+    if (!isTransient) {\n+      AnnotationSpec.Builder columnAnnotation =\n+          AnnotationSpec.builder(Column.class)\n+              .addMember(\"name\", \"$S\", \"`\" + fieldName + \"`\")\n+              .addMember(\"nullable\", \"$L\", isColumnOptional);\n+      if (type == RifColumnType.CHAR && columnLength.isPresent()) {\n+        columnAnnotation.addMember(\"length\", \"$L\", columnLength.get());\n+      } else if (type == RifColumnType.NUM) {\n+        /*\n+         * In SQL, the precision is the number of digits in the unscaled value, e.g.\n+         * \"123.45\" has a precision of 5. The scale is the number of digits to the right\n+         * of the decimal point, e.g. \"123.45\" has a scale of 2.\n+         */\n+\n+        if (columnLength.isPresent() && columnScale.isPresent()) {\n+          columnAnnotation.addMember(\"precision\", \"$L\", columnLength.get());\n+          columnAnnotation.addMember(\"scale\", \"$L\", columnScale.get());\n+        } else {\n+          /*\n+           * Unfortunately, Hibernate's SQL schema generation (HBM2DDL) doesn't correctly\n+           * handle SQL numeric datatypes that don't have a defined precision and scale.\n+           * What it _should_ do is represent those types in PostgreSQL as a \"NUMERIC\",\n+           * but what it does instead is insert a default precision and scale as\n+           * \"NUMBER(19, 2)\". The only way to force the correct behavior is to specify a\n+           * columnDefinition, so we do that. This leads to incorrect behavior with HSQL\n+           * (for different reasons), but fortunately that doesn't happen to cause\n+           * problems with our tests.\n+           */\n+          StringBuilder columnDefinition = new StringBuilder();\n+          columnDefinition.append(\"numeric\");\n+          if (columnLength.isPresent() || columnScale.isPresent()) {\n+            columnDefinition.append('(');\n+            if (columnLength.isPresent()) {\n+              columnDefinition.append(columnLength.get());\n+            }\n+            if (columnScale.isPresent()) {\n+              columnDefinition.append(\", \");\n+              columnDefinition.append(columnScale.get());\n+            }\n+            columnDefinition.append(')');\n+          }\n+          columnAnnotation.addMember(\"columnDefinition\", \"$S\", columnDefinition.toString());\n+        }\n+      }\n+      annotations.add(columnAnnotation.build());\n+    } else {\n+      annotations.add(AnnotationSpec.builder(Transient.class).build());\n+    }\n+\n+    return annotations;\n+  }\n+\n+  /**\n+   * Selects the java field type\n+   *\n+   * @param type specifies the field type {@link RifColumnType}\n+   * @param isColumnOptional determines if the field is optional {@link boolean}\n+   * @param columnLength specifies the column length {@link Optional<Integer>}\n+   * @param columnScale specifies the column scale {@link Optional<Integer>}\n+   */\n+  private static TypeName selectJavaFieldType(\n+      RifColumnType type,\n+      boolean isColumnOptional,\n+      Optional<Integer> columnLength,\n+      Optional<Integer> columnScale) {\n+    if (type == RifColumnType.CHAR\n+        && columnLength.orElse(Integer.MAX_VALUE) == 1\n+        && !isColumnOptional) return TypeName.CHAR;\n+    else if (type == RifColumnType.CHAR\n+        && columnLength.orElse(Integer.MAX_VALUE) == 1\n+        && isColumnOptional) return ClassName.get(Character.class);\n+    else if (type == RifColumnType.CHAR) return ClassName.get(String.class);\n+    else if (type == RifColumnType.DATE && columnLength.orElse(0) == 8)\n+      return ClassName.get(LocalDate.class);\n+    else if (type == RifColumnType.TIMESTAMP && columnLength.orElse(0) == 20)\n+      return ClassName.get(Instant.class);\n+    else if (type == RifColumnType.NUM && columnScale.orElse(Integer.MAX_VALUE) > 0)\n+      return ClassName.get(BigDecimal.class);\n+    else if (type == RifColumnType.NUM\n+        && columnScale.orElse(Integer.MAX_VALUE) == 0\n+        && !isColumnOptional) return TypeName.INT;\n+    else if (type == RifColumnType.NUM\n+        && columnScale.orElse(Integer.MAX_VALUE) == 0\n+        && isColumnOptional) return ClassName.get(Integer.class);\n+    else throw new IllegalArgumentException(\"Unhandled field type: \" + type.name());\n+  }\n+\n+  /**\n+   * Selects the java property type\n+   *\n+   * @param type specifies the field type {@link RifColumnType}\n+   * @param isColumnOptional determines if the field is optional {@link boolean}\n+   * @param columnLength specifies the column length {@link Optional<Integer>}\n+   * @param columnScale specifies the column scale {@link Optional<Integer>}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccf6dbc202b796476de5e622f717f034d66c1711"}, "originalPosition": 814}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxNTcxOA==", "bodyText": "What is this assertion doing?", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r549815718", "createdAt": "2020-12-29T19:06:59Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/test/java/gov/cms/bfd/pipeline/rif/load/RifLoaderIT.java", "diffHunk": "@@ -532,6 +685,7 @@ private void loadSample(DataSource dataSource, List<StaticRifResource> sampleRes\n           rifFileRecords,\n           error -> {\n             failureCount.incrementAndGet();\n+            Assert.assertEquals(\"\", error.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccf6dbc202b796476de5e622f717f034d66c1711"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxNjA2MQ==", "bodyText": "Great! Glad this passes, too!", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r549816061", "createdAt": "2020-12-29T19:08:12Z", "author": {"login": "karlmdavis"}, "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/test/java/gov/cms/bfd/pipeline/rif/load/RifLoaderIT.java", "diffHunk": "@@ -316,6 +317,158 @@ public void loadSampleUUnchanged() {\n       if (entityManager != null) entityManager.close();\n     }\n   }\n+\n+  @Test\n+  public void loadInitialEnrollmentShouldCount12() {\n+    DataSource dataSource = DatabaseTestHelper.getTestDatabaseAfterClean();\n+    loadSample(dataSource, Arrays.asList(StaticRifResourceGroup.SAMPLE_A.getResources()));\n+\n+    LoadAppOptions options = RifLoaderTestUtils.getLoadOptions(dataSource);\n+    EntityManagerFactory entityManagerFactory =\n+        RifLoaderTestUtils.createEntityManagerFactory(options);\n+    EntityManager entityManager = null;\n+    try {\n+      entityManager = entityManagerFactory.createEntityManager();\n+      Beneficiary beneficiaryFromDb = entityManager.find(Beneficiary.class, \"567834\");\n+      Assert.assertEquals(12, beneficiaryFromDb.getBeneficiaryMonthlys().size());\n+      assertBeneficiaryMonthly(beneficiaryFromDb);\n+\n+    } finally {\n+      if (entityManager != null) entityManager.close();\n+    }\n+  }\n+\n+  @Test\n+  public void loadInitialEnrollmentShouldCount24() {\n+    DataSource dataSource = DatabaseTestHelper.getTestDatabaseAfterClean();\n+    loadSample(dataSource, Arrays.asList(StaticRifResourceGroup.SAMPLE_A.getResources()));\n+    loadSample(dataSource, Arrays.asList(StaticRifResourceGroup.SAMPLE_U.getResources()));\n+\n+    LoadAppOptions options = RifLoaderTestUtils.getLoadOptions(dataSource);\n+    EntityManagerFactory entityManagerFactory =\n+        RifLoaderTestUtils.createEntityManagerFactory(options);\n+    EntityManager entityManager = null;\n+    try {\n+      entityManager = entityManagerFactory.createEntityManager();\n+\n+      Beneficiary beneficiaryFromDb = entityManager.find(Beneficiary.class, \"567834\");\n+      Assert.assertEquals(24, beneficiaryFromDb.getBeneficiaryMonthlys().size());\n+    } finally {\n+      if (entityManager != null) entityManager.close();\n+    }\n+  }\n+\n+  @Test\n+  public void loadInitialEnrollmentShouldCount20SinceThereIsAUpdateOf8Months() {\n+    DataSource dataSource = DatabaseTestHelper.getTestDatabaseAfterClean();\n+    loadSample(dataSource, Arrays.asList(StaticRifResourceGroup.SAMPLE_A.getResources()));\n+    loadSample(dataSource, Arrays.asList(StaticRifResourceGroup.SAMPLE_U.getResources()));\n+    loadSample(\n+        dataSource,\n+        Arrays.asList(StaticRifResourceGroup.SAMPLE_U_BENES_CHANGED_WITH_8_MONTHS.getResources()));\n+\n+    LoadAppOptions options = RifLoaderTestUtils.getLoadOptions(dataSource);\n+    EntityManagerFactory entityManagerFactory =\n+        RifLoaderTestUtils.createEntityManagerFactory(options);\n+    EntityManager entityManager = null;\n+    try {\n+      entityManager = entityManagerFactory.createEntityManager();\n+\n+      Beneficiary beneficiaryFromDb = entityManager.find(Beneficiary.class, \"567834\");\n+      Assert.assertEquals(20, beneficiaryFromDb.getBeneficiaryMonthlys().size());\n+    } finally {\n+      if (entityManager != null) entityManager.close();\n+    }\n+  }\n+\n+  @Test\n+  public void loadInitialEnrollmentShouldCount21SinceThereIsAUpdateOf8MonthsAndAUpdateOf9Months() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccf6dbc202b796476de5e622f717f034d66c1711"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3345d93b28ff70dd1c1ed6820c0910941724115e", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/3345d93b28ff70dd1c1ed6820c0910941724115e", "committedDate": "2020-12-29T22:28:10Z", "message": "Merge branch 'master' into cbrune/BFD549-enrollmentdata"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "148d2587022acbf516a4a2ff5e98cbbd7c70ebe2", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/148d2587022acbf516a4a2ff5e98cbbd7c70ebe2", "committedDate": "2020-12-29T23:01:22Z", "message": "Update apps/bfd-model/bfd-model-codegen/src/main/java/gov/cms/bfd/model/codegen/RifLayoutsProcessor.java\n\nCo-authored-by: Karl M. Davis <karl@justdavis.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61956e52e5c6f21c5f0c0e46b45676c25302cde4", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/61956e52e5c6f21c5f0c0e46b45676c25302cde4", "committedDate": "2020-12-29T23:01:41Z", "message": "Update apps/bfd-model/bfd-model-codegen/src/main/java/gov/cms/bfd/model/codegen/RifLayoutsProcessor.java\n\nCo-authored-by: Karl M. Davis <karl@justdavis.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "176aefd628e91b5b7352c6a4ba6cb784a8ef97b1", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/176aefd628e91b5b7352c6a4ba6cb784a8ef97b1", "committedDate": "2020-12-29T23:07:10Z", "message": "Pr changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52561a672c4494913b48b46416bae9d5da353181", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/52561a672c4494913b48b46416bae9d5da353181", "committedDate": "2020-12-29T23:08:34Z", "message": "Pr changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbf04f2800fa05f62631402ff7e532b8d6b39d29", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/dbf04f2800fa05f62631402ff7e532b8d6b39d29", "committedDate": "2020-12-29T23:09:03Z", "message": "Pr changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49ad5b80ad13a006c340af8d9632c054d4178e23", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/49ad5b80ad13a006c340af8d9632c054d4178e23", "committedDate": "2020-12-29T23:35:13Z", "message": "Update apps/bfd-model/bfd-model-codegen/src/main/java/gov/cms/bfd/model/codegen/RifLayoutsProcessor.java\n\nCo-authored-by: Karl M. Davis <karl@justdavis.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8391763a4991ec98894f3e40d6f39884b4235f5", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/d8391763a4991ec98894f3e40d6f39884b4235f5", "committedDate": "2020-12-29T23:37:59Z", "message": ".sql file formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0db992f302646824a41c835342a05e971e1bc151", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/0db992f302646824a41c835342a05e971e1bc151", "committedDate": "2020-12-29T23:40:20Z", "message": ".sql file formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e61466a6a2fb5c675f77be1bad5c49c70822ed31", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/e61466a6a2fb5c675f77be1bad5c49c70822ed31", "committedDate": "2020-12-29T23:44:01Z", "message": "Sql formatted"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cd87a7a088d4f9fb1d09e0905505b3aec049a1c", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/8cd87a7a088d4f9fb1d09e0905505b3aec049a1c", "committedDate": "2020-12-29T23:45:35Z", "message": "Update apps/bfd-model/bfd-model-codegen/src/main/java/gov/cms/bfd/model/codegen/RifLayoutsProcessor.java\n\nCo-authored-by: Karl M. Davis <karl@justdavis.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ea161ee2f878348bec572954d9221e7917d294e", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/2ea161ee2f878348bec572954d9221e7917d294e", "committedDate": "2020-12-30T03:20:53Z", "message": "Ran mvn format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d902e4d41a060ab4b5a11d24450924773e7607e8", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/d902e4d41a060ab4b5a11d24450924773e7607e8", "committedDate": "2020-12-30T18:58:35Z", "message": "Added comments to rifloaderit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NzM1NDM0", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#pullrequestreview-559735434", "createdAt": "2020-12-29T23:14:18Z", "commit": {"oid": "dbf04f2800fa05f62631402ff7e532b8d6b39d29"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMzoxNDoxOFrOIMaOtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxODowNTowMFrOIMycKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4MzU3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** @param hasLines the new value for {@link #setHasBeneficiaryMonthly()} */\n          \n          \n            \n              /** @param hasBeneficiaryMonthly the new value for {@link #setHasBeneficiaryMonthly()} */", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r549883572", "createdAt": "2020-12-29T23:14:18Z", "author": {"login": "jzulim"}, "path": "apps/bfd-model/bfd-model-codegen/src/main/java/gov/cms/bfd/model/codegen/MappingSpec.java", "diffHunk": "@@ -158,6 +159,20 @@ public MappingSpec setHasLines(boolean hasLines) {\n     return this;\n   }\n \n+  /**\n+   * @return <code>true</code> if the RIF layout has child line fields that should be stored\n+   *     separately from its parent header fields, <code>false</code> if not\n+   */\n+  public boolean getHasBeneficiaryMonthly() {\n+    return hasBeneficiaryMonthly;\n+  }\n+\n+  /** @param hasLines the new value for {@link #setHasBeneficiaryMonthly()} */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbf04f2800fa05f62631402ff7e532b8d6b39d29"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI3MTk5Ng==", "bodyText": "This is helpful.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r550271996", "createdAt": "2020-12-30T17:35:42Z", "author": {"login": "jzulim"}, "path": "apps/bfd-model/bfd-model-codegen/src/main/java/gov/cms/bfd/model/codegen/RifLayoutsProcessor.java", "diffHunk": "@@ -1503,4 +1828,156 @@ private void writeDebugLogMessages() {\n       throw new UncheckedIOException(e);\n     }\n   }\n+\n+  private static void createBeneficiaryMonthlyFields(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU2MDMxMw=="}, "originalCommit": {"oid": "f8fb96e5b45b3dfaadbf7e7bc8223c3b681a7f00"}, "originalPosition": 638}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI3NDc3Ng==", "bodyText": "this definition makes the code easier to read down the line. thx.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r550274776", "createdAt": "2020-12-30T17:45:44Z", "author": {"login": "jzulim"}, "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/main/java/gov/cms/bfd/pipeline/rif/load/RifLoader.java", "diffHunk": "@@ -506,6 +508,9 @@ private void processAsync(\n \n         LoadStrategy strategy = selectStrategy(recordAction);\n         LoadAction loadAction;\n+\n+        boolean recordsIsBeneficiary = (record instanceof Beneficiary) ? true : false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea161ee2f878348bec572954d9221e7917d294e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI4MDIzNQ==", "bodyText": "Would you consider also JavaDoc'ing this?", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#discussion_r550280235", "createdAt": "2020-12-30T18:05:00Z", "author": {"login": "jzulim"}, "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/main/java/gov/cms/bfd/pipeline/rif/load/RifLoader.java", "diffHunk": "@@ -657,6 +982,59 @@ static boolean isBeneficiaryHistoryEqual(\n     return false;\n   }\n \n+  public static BeneficiaryMonthly getBeneficiaryMonthly(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea161ee2f878348bec572954d9221e7917d294e"}, "originalPosition": 386}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fb9fb76d1d69b3dca512700dc0465dc287276e2", "author": {"user": {"login": "cbrunefearless", "name": "Chris Brune"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/1fb9fb76d1d69b3dca512700dc0465dc287276e2", "committedDate": "2020-12-30T19:10:24Z", "message": "Update apps/bfd-model/bfd-model-codegen/src/main/java/gov/cms/bfd/model/codegen/MappingSpec.java\n\nCo-authored-by: John Zulim <john.zulim@adhocteam.us>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMTY5NjEz", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#pullrequestreview-560169613", "createdAt": "2020-12-30T19:11:36Z", "commit": {"oid": "1fb9fb76d1d69b3dca512700dc0465dc287276e2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMTgzNjUy", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/419#pullrequestreview-560183652", "createdAt": "2020-12-30T19:59:48Z", "commit": {"oid": "1fb9fb76d1d69b3dca512700dc0465dc287276e2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 536, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}