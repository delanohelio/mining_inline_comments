{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0NTA1MTc1", "number": 378, "title": "Dshekhar/bfd 293 v2 patient poc", "bodyText": "JIRA Ticket:\nBFD-461\nUser Story or Bug Summary:\nBFD V2: Implement POC for Patient V2 FHIR R4 resource.\nWhat Does This PR Do?\nMakes Patient v2 (FHIR R4) available to peer partners in Production Sandbox.\nAll functional and integration tests pass for lower environments and a test deploy is done before deploying to prod\nWhat Should Reviewers Watch For?\nN/A\nWhat Security Implications Does This PR Have?\nSubmitters should complete the following questionnaire:\n\nIf the answer to any of the questions below is Yes, then here's a link to the associated Security Impact Assessment (SIA), security checklist, or other similar document in Confluence: N/A.\n\nDoes this PR add any new software dependencies?  No.\nDoes this PR modify or invalidate any of our security controls? No.\nDoes this PR store or transmit data that was not stored or transmitted before? No.\n\n\nIf the answer to any of the questions below is Yes, then please add @StewGoin as a reviewer, and note that this PR should not be merged unless/until he also approves it.\n\nDo you think this PR requires additional review of its security implications for other reasons? No.\n\n\n\nWhat Needs to Be Merged and Deployed Before this PR?\nN/A\nSubmitter Checklist\n\nI have gone through and verified that...:\n\n This PR is reasonably limited in scope, to help ensure that:\n\nIt doesn't unnecessarily tie a bunch of disparate features, fixes, refactorings, etc. together.\nThere isn't too much of a burden on reviewers.\nAny problems it causes have a small \"blast radius\".\nIt'll be easier to rollback if that becomes necessary.\n\n\n I have named this PR and its branch such that they'll be automatically be linked to the (most) relevant Jira issue, per: https://confluence.atlassian.com/adminjiracloud/integrating-with-development-tools-776636216.html.\n This PR includes any required documentation changes, including README updates and changelog / release notes entries.\n All new and modified code is appropriately commented, such that the what and why of its design would be reasonably clear to engineers, preferably ones unfamiliar with the project.\n All tech debt and/or shortcomings introduced by this PR are detailed in TODO and/or FIXME comments, which include a JIRA ticket ID for any items that require urgent attention.\n Reviews are requested from both:\n\nAt least two other engineers on this project, at least one of whom is a senior engineer or owns the relevant component(s) here.\nAny relevant engineers on other projects (e.g. BCDA, BB2, etc.).\n\n\n Any deviations from the other policies in the DASG Engineering Standards are specifically called out in this PR, above.\n\nPlease review the standards every few months to ensure you're familiar with them.", "createdAt": "2020-10-16T02:36:28Z", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378", "merged": true, "mergeCommit": {"oid": "3e28017ed2bff6e03028da2f41bc368cab946c62"}, "closed": true, "closedAt": "2020-10-29T14:02:49Z", "author": {"login": "dshekhar18"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdS5c4AAH2gAyNTA0NTA1MTc1OmFhMDQ4ZmI1MTRiZTk1YTAxZDI3ZjY2YzI5NjhmZWZhYWNiMmY1Nzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXScp6gFqTUxOTY4MDc0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "aa048fb514be95a01d27f66c2968fefaacb2f578", "author": {"user": {"login": "dshekhar18", "name": "Dave Shekhar"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/aa048fb514be95a01d27f66c2968fefaacb2f578", "committedDate": "2020-10-15T22:24:00Z", "message": "Patient V2 POC"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4c2829391a24014984d9f9674abfd84c6164129", "author": {"user": {"login": "dshekhar18", "name": "Dave Shekhar"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/f4c2829391a24014984d9f9674abfd84c6164129", "committedDate": "2020-10-16T00:19:56Z", "message": "V2 ENBALED ENV FLAG"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "954244e00f9d1dec9812b23ca07827e65af3ee31", "author": {"user": {"login": "dshekhar18", "name": "Dave Shekhar"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/954244e00f9d1dec9812b23ca07827e65af3ee31", "committedDate": "2020-10-16T00:24:37Z", "message": "Update env_specific.yml\n\nEnabling BFD V2 ENV FLAG in BFD-TEST"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6", "author": {"user": {"login": "dshekhar18", "name": "Dave Shekhar"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6", "committedDate": "2020-10-16T01:47:49Z", "message": "Update env_specific.yml\n\nBFD V2 ENABLED FOR PROD-SBX"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNjE1MDQ4", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#pullrequestreview-510615048", "createdAt": "2020-10-16T16:15:08Z", "commit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNjoxNTowOFrOHjHK-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNzowNzo0NVrOHjI6XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU3OTcwNw==", "bodyText": "I would use !Strings.isNullOrEmpty(v2EnabledText) here", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r506579707", "createdAt": "2020-10-16T16:15:08Z", "author": {"login": "cbrunefearless"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/FhirAppConfiguration.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package gov.cms.bfd.server.war;\n+\n+import java.io.Serializable;\n+import java.util.Optional;\n+\n+/** Models the configuration options for the application. */\n+public final class FhirAppConfiguration implements Serializable {\n+  private static final long serialVersionUID = -6845504165285244536L;\n+\n+  /**\n+   * The name of the environment variable that should be used to provide the {@link\n+   * #getLoadOptions()} {@link LoadFhirAppOptions#isV2Enabled()} value.\n+   */\n+  public static final String ENV_VAR_KEY_V2_ENABLED = \"V2_ENABLED\";\n+\n+  private final LoadFhirAppOptions loadOptions;\n+\n+  /**\n+   * Constructs a new {@link FhirAppConfiguration} instance.\n+   *\n+   * @param loadOptions the value to use for {@link #getLoadOptions()}\n+   */\n+  public FhirAppConfiguration(LoadFhirAppOptions loadOptions) {\n+\n+    this.loadOptions = loadOptions;\n+  }\n+\n+  /** @return the {@link LoadFhirAppOptions} that the application will use */\n+  public LoadFhirAppOptions getLoadOptions() {\n+    return loadOptions;\n+  }\n+\n+  /** @see java.lang.Object#toString() */\n+  @Override\n+  public String toString() {\n+    StringBuilder builder = new StringBuilder();\n+    builder.append(\"FhirAppConfiguration [=\");\n+    builder.append(\", loadOptions=\");\n+    builder.append(loadOptions);\n+    builder.append(\"]\");\n+    return builder.toString();\n+  }\n+\n+  /**\n+   * Per <code>/dev/design-decisions-readme.md</code>, this application accepts its configuration\n+   * via environment variables. Read those in, and build an {@link FhirAppConfiguration} instance\n+   * from them.\n+   *\n+   * @return the {@link FhirAppConfiguration} instance represented by the configuration provided to\n+   *     this application via the environment variables\n+   */\n+  static FhirAppConfiguration readConfigFromEnvironmentVariables() {\n+\n+    String v2EnabledText = System.getenv(ENV_VAR_KEY_V2_ENABLED);\n+    boolean v2Enabled = false;\n+    if (v2EnabledText != null && !v2EnabledText.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU4NzIzOA==", "bodyText": "is this our default now?", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r506587238", "createdAt": "2020-10-16T16:28:03Z", "author": {"login": "cbrunefearless"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/R4Server.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package gov.cms.bfd.server.war;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.rest.api.EncodingEnum;\n+import ca.uhn.fhir.rest.server.ApacheProxyAddressStrategy;\n+import ca.uhn.fhir.rest.server.ETagSupportEnum;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.RestfulServer;\n+import ca.uhn.fhir.rest.server.interceptor.CorsInterceptor;\n+import ca.uhn.fhir.rest.server.interceptor.IServerInterceptor;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Properties;\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletException;\n+import org.hl7.fhir.r4.hapi.rest.server.ServerCapabilityStatementProvider;\n+import org.hl7.fhir.r4.model.CapabilityStatement;\n+import org.springframework.web.context.ContextLoaderListener;\n+import org.springframework.web.context.WebApplicationContext;\n+import org.springframework.web.cors.CorsConfiguration;\n+\n+/**\n+ * The primary {@link Servlet} for this web application. Uses the <a href=\"http://hapifhir.io/\">HAPI\n+ * FHIR</a> framework to provide a fully functional FHIR API server that queries stored RIF data\n+ * from the CCW and converts it to the proper FHIR format \"on the fly\".\n+ */\n+public class R4Server extends RestfulServer {\n+\n+  private static final long serialVersionUID = 1L;\n+\n+  static final String CAPABILITIES_PUBLISHER = \"Centers for Medicare & Medicaid Services\";\n+  static final String CAPABILITIES_SERVER_NAME = \"Blue Button API: Direct\";\n+\n+  /** Constructs a new {@link R4Server} instance. */\n+  public R4Server() {\n+    super(FhirContext.forR4());\n+    setServerAddressStrategy(ApacheProxyAddressStrategy.forHttp());\n+    configureServerInfoMetadata();\n+  }\n+\n+  /**\n+   * Configures various metadata fields that will be included in this server's {@link\n+   * CapabilityStatement}.\n+   */\n+  private void configureServerInfoMetadata() {\n+    setServerName(CAPABILITIES_SERVER_NAME);\n+\n+    /*\n+     * Read in some of the project metadata from a Maven-filtered properties\n+     * file, which ensures that it's always up to date.\n+     */\n+    Properties projectProps = new Properties();\n+    try (InputStream projectPropsStream =\n+        Thread.currentThread()\n+            .getContextClassLoader()\n+            .getResourceAsStream(\"project.properties\"); ) {\n+      projectProps.load(projectPropsStream);\n+\n+      setImplementationDescription(projectProps.getProperty(\"project.id\"));\n+      setServerVersion(projectProps.getProperty(\"project.version\"));\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(e);\n+    }\n+\n+    // Lightly customize the capability provider to set publisher name.\n+    ServerCapabilityStatementProvider capabilityStatementProvider =\n+        new ServerCapabilityStatementProvider(this);\n+    capabilityStatementProvider.setPublisher(CAPABILITIES_PUBLISHER);\n+    setServerConformanceProvider(capabilityStatementProvider);\n+  }\n+\n+  /** @see ca.uhn.fhir.rest.server.RestfulServer#initialize() */\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  protected void initialize() throws ServletException {\n+    /*\n+     * Grab the application's Spring WebApplicationContext from the web\n+     * container. We can use this to retrieve beans (and anything that needs\n+     * Spring injection/autowiring, e.g. anything that accesses the DB, must\n+     * be a bean).\n+     */\n+    WebApplicationContext springContext = ContextLoaderListener.getCurrentWebApplicationContext();\n+\n+    // Each IResourceProvider adds support for a specific FHIR resource.\n+    List<IResourceProvider> resourceProviders =\n+        springContext.getBean(SpringConfiguration.BLUEBUTTON_R4_RESOURCE_PROVIDERS, List.class);\n+    setResourceProviders(resourceProviders);\n+\n+    /*\n+     * Each \"plain\" provider has one or more annotated methods that provides\n+     * support for non-resource-type methods, such as transaction, and\n+     * global history.\n+     */\n+    List<Object> plainProviders = new ArrayList<>();\n+    setPlainProviders(plainProviders);\n+\n+    /*\n+     * Register the HAPI server interceptors that have been configured in\n+     * Spring.\n+     */\n+    Collection<IServerInterceptor> hapiInterceptors =\n+        springContext.getBeansOfType(IServerInterceptor.class).values();\n+    for (IServerInterceptor hapiInterceptor : hapiInterceptors) {\n+      this.registerInterceptor(hapiInterceptor);\n+    }\n+    /*\n+     * Enable CORS.\n+     */\n+    CorsConfiguration config = new CorsConfiguration();\n+    CorsInterceptor corsInterceptor = new CorsInterceptor(config);\n+    config.addAllowedHeader(\"Accept\");\n+    config.addAllowedHeader(\"Content-Type\");\n+    config.addAllowedOrigin(\"*\");\n+    config.addExposedHeader(\"Location\");\n+    config.addExposedHeader(\"Content-Location\");\n+    config.setAllowedMethods(Arrays.asList(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"));\n+    registerInterceptor(corsInterceptor);\n+\n+    // Enable ETag Support (this is already the default)\n+    setETagSupport(ETagSupportEnum.ENABLED);\n+\n+    // Default to XML and pretty printing.\n+    setDefaultResponseEncoding(EncodingEnum.XML);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU4Nzc0MA==", "bodyText": "should we check to see if this is set or default to something if it isnt?", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r506587740", "createdAt": "2020-10-16T16:28:55Z", "author": {"login": "cbrunefearless"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/ServerInitializer.java", "diffHunk": "@@ -36,6 +38,8 @@\n   public void onStartup(ServletContext servletContext) throws ServletException {\n     LOGGER.info(\"Initializing Blue Button API backend server...\");\n \n+    appConfig = FhirAppConfiguration.readConfigFromEnvironmentVariables();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwMTg1OQ==", "bodyText": "Strings.isNullOrEmpty", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r506601859", "createdAt": "2020-10-16T16:55:20Z", "author": {"login": "cbrunefearless"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java", "diffHunk": "@@ -0,0 +1,838 @@\n+package gov.cms.bfd.server.war.r4.providers;\n+\n+import ca.uhn.fhir.model.api.annotation.Description;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.annotation.IdParam;\n+import ca.uhn.fhir.rest.annotation.OptionalParam;\n+import ca.uhn.fhir.rest.annotation.Read;\n+import ca.uhn.fhir.rest.annotation.RequiredParam;\n+import ca.uhn.fhir.rest.annotation.Search;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import com.codahale.metrics.MetricRegistry;\n+import com.codahale.metrics.Timer;\n+import com.newrelic.api.agent.Trace;\n+import gov.cms.bfd.model.codebook.data.CcwCodebookVariable;\n+import gov.cms.bfd.model.rif.Beneficiary;\n+import gov.cms.bfd.model.rif.BeneficiaryHistory;\n+import gov.cms.bfd.model.rif.BeneficiaryHistory_;\n+import gov.cms.bfd.model.rif.Beneficiary_;\n+import gov.cms.bfd.server.war.Operation;\n+import gov.cms.bfd.server.war.commons.LinkBuilder;\n+import gov.cms.bfd.server.war.commons.LoadedFilterManager;\n+import gov.cms.bfd.server.war.commons.OffsetLinkBuilder;\n+import gov.cms.bfd.server.war.commons.PatientLinkBuilder;\n+import gov.cms.bfd.server.war.commons.QueryUtils;\n+import gov.cms.bfd.server.war.commons.TransformerConstants;\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.persistence.EntityManager;\n+import javax.persistence.NoResultException;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.JoinType;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+import javax.persistence.metamodel.SingularAttribute;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.Bundle;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.hl7.fhir.r4.model.Identifier;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.slf4j.MDC;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This FHIR {@link IResourceProvider} adds support for STU3 {@link Patient} resources, derived from\n+ * the CCW beneficiaries.\n+ */\n+@Component\n+public final class R4PatientResourceProvider implements IResourceProvider {\n+  /**\n+   * The {@link Identifier#getSystem()} values that are supported by {@link #searchByIdentifier}.\n+   */\n+  private static final List<String> SUPPORTED_HASH_IDENTIFIER_SYSTEMS =\n+      Arrays.asList(\n+          TransformerConstants.CODING_BBAPI_BENE_MBI_HASH,\n+          TransformerConstants.CODING_BBAPI_BENE_HICN_HASH,\n+          TransformerConstants.CODING_BBAPI_BENE_HICN_HASH_OLD);\n+\n+  private EntityManager entityManager;\n+  private MetricRegistry metricRegistry;\n+  private LoadedFilterManager loadedFilterManager;\n+\n+  /** @param entityManager a JPA {@link EntityManager} connected to the application's database */\n+  @PersistenceContext\n+  public void setEntityManager(EntityManager entityManager) {\n+    this.entityManager = entityManager;\n+  }\n+\n+  /** @param metricRegistry the {@link MetricRegistry} to use */\n+  @Inject\n+  public void setMetricRegistry(MetricRegistry metricRegistry) {\n+    this.metricRegistry = metricRegistry;\n+  }\n+\n+  /** @param loadedFilterManager the {@link R4LoadedFilterManager} to use */\n+  @Inject\n+  public void setLoadedFilterManager(LoadedFilterManager loadedFilterManager) {\n+    this.loadedFilterManager = loadedFilterManager;\n+  }\n+\n+  /** @see ca.uhn.fhir.rest.server.IResourceProvider#getResourceType() */\n+  @Override\n+  public Class<? extends IBaseResource> getResourceType() {\n+    return Patient.class;\n+  }\n+\n+  /**\n+   * Adds support for the FHIR \"read\" operation, for {@link Patient}s. The {@link Read} annotation\n+   * indicates that this method supports the read operation.\n+   *\n+   * <p>Read operations take a single parameter annotated with {@link IdParam}, and should return a\n+   * single resource instance.\n+   *\n+   * @param patientId The read operation takes one parameter, which must be of type {@link IdType}\n+   *     and must be annotated with the {@link IdParam} annotation.\n+   * @param requestDetails a {@link RequestDetails} containing the details of the request URL, used\n+   *     to parse out pagination values\n+   * @return Returns a resource matching the specified {@link IdDt}, or <code>null</code> if none\n+   *     exists.\n+   */\n+  @Read(version = false)\n+  @Trace\n+  public Patient read(@IdParam IdType patientId, RequestDetails requestDetails) {\n+    if (patientId == null) throw new IllegalArgumentException();\n+    if (patientId.getVersionIdPartAsLong() != null) throw new IllegalArgumentException();\n+\n+    String beneIdText = patientId.getIdPart();\n+    if (beneIdText == null || beneIdText.trim().isEmpty()) throw new IllegalArgumentException();\n+\n+    List<String> includeIdentifiersValues = returnIncludeIdentifiersValues(requestDetails);\n+\n+    Operation operation = new Operation(Operation.Endpoint.V2_PATIENT);\n+    operation.setOption(\"by\", \"id\");\n+    operation.setOption(\"IncludeIdentifiers\", includeIdentifiersValues.toString());\n+    operation.publishOperationName();\n+\n+    CriteriaBuilder builder = entityManager.getCriteriaBuilder();\n+    CriteriaQuery<Beneficiary> criteria = builder.createQuery(Beneficiary.class);\n+    Root<Beneficiary> root = criteria.from(Beneficiary.class);\n+\n+    if (hasHICN(includeIdentifiersValues))\n+      root.fetch(Beneficiary_.beneficiaryHistories, JoinType.LEFT);\n+\n+    // if (hasMBI(includeIdentifiersValues))\n+    root.fetch(Beneficiary_.medicareBeneficiaryIdHistories, JoinType.LEFT);\n+\n+    criteria.select(root);\n+    criteria.where(builder.equal(root.get(Beneficiary_.beneficiaryId), beneIdText));\n+\n+    Beneficiary beneficiary = null;\n+    Long beneByIdQueryNanoSeconds = null;\n+    Timer.Context timerBeneQuery =\n+        metricRegistry\n+            .timer(MetricRegistry.name(getClass().getSimpleName(), \"query\", \"bene_by_id\"))\n+            .time();\n+    try {\n+      beneficiary = entityManager.createQuery(criteria).getSingleResult();\n+    } catch (NoResultException e) {\n+      throw new ResourceNotFoundException(patientId);\n+    } finally {\n+      beneByIdQueryNanoSeconds = timerBeneQuery.stop();\n+\n+      TransformerUtilsV2.recordQueryInMdc(\n+          String.format(\"bene_by_id.include_%s\", String.join(\"_\", includeIdentifiersValues)),\n+          beneByIdQueryNanoSeconds,\n+          beneficiary == null ? 0 : 1);\n+    }\n+\n+    // Null out the unhashed HICNs if we're not supposed to be returning them\n+    if (!hasHICN(includeIdentifiersValues)) {\n+      beneficiary.setHicnUnhashed(Optional.empty());\n+    }\n+\n+    Patient patient =\n+        BeneficiaryTransformerV2.transform(metricRegistry, beneficiary, includeIdentifiersValues);\n+    return patient;\n+  }\n+\n+  /**\n+   * Adds support for the FHIR \"search\" operation for {@link Patient}s, allowing users to search by\n+   * {@link Patient#getId()}.\n+   *\n+   * <p>The {@link Search} annotation indicates that this method supports the search operation.\n+   * There may be many different methods annotated with this {@link Search} annotation, to support\n+   * many different search criteria.\n+   *\n+   * @param logicalId a {@link TokenParam} (with no system, per the spec) for the {@link\n+   *     Patient#getId()} to try and find a matching {@link Patient} for\n+   * @param startIndex an {@link OptionalParam} for the startIndex (or offset) used to determine\n+   *     pagination\n+   * @param lastUpdated an {@link OptionalParam} to filter the results based on the passed date\n+   *     range\n+   * @param requestDetails a {@link RequestDetails} containing the details of the request URL, used\n+   *     to parse out pagination values\n+   * @return Returns a {@link List} of {@link Patient}s, which may contain multiple matching\n+   *     resources, or may also be empty.\n+   */\n+  @Search\n+  @Trace\n+  public Bundle searchByLogicalId(\n+      @RequiredParam(name = Patient.SP_RES_ID)\n+          @Description(shortDefinition = \"The patient identifier to search for\")\n+          TokenParam logicalId,\n+      @OptionalParam(name = \"startIndex\")\n+          @Description(shortDefinition = \"The offset used for result pagination\")\n+          String startIndex,\n+      @OptionalParam(name = \"_lastUpdated\")\n+          @Description(shortDefinition = \"Include resources last updated in the given range\")\n+          DateRangeParam lastUpdated,\n+      RequestDetails requestDetails) {\n+    if (logicalId.getQueryParameterQualifier() != null)\n+      throw new InvalidRequestException(\n+          \"Unsupported query parameter qualifier: \" + logicalId.getQueryParameterQualifier());\n+    if (logicalId.getSystem() != null && !logicalId.getSystem().isEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwMjQ1OQ==", "bodyText": "might be better to do a switch statement here", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r506602459", "createdAt": "2020-10-16T16:56:30Z", "author": {"login": "cbrunefearless"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java", "diffHunk": "@@ -0,0 +1,838 @@\n+package gov.cms.bfd.server.war.r4.providers;\n+\n+import ca.uhn.fhir.model.api.annotation.Description;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.annotation.IdParam;\n+import ca.uhn.fhir.rest.annotation.OptionalParam;\n+import ca.uhn.fhir.rest.annotation.Read;\n+import ca.uhn.fhir.rest.annotation.RequiredParam;\n+import ca.uhn.fhir.rest.annotation.Search;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import com.codahale.metrics.MetricRegistry;\n+import com.codahale.metrics.Timer;\n+import com.newrelic.api.agent.Trace;\n+import gov.cms.bfd.model.codebook.data.CcwCodebookVariable;\n+import gov.cms.bfd.model.rif.Beneficiary;\n+import gov.cms.bfd.model.rif.BeneficiaryHistory;\n+import gov.cms.bfd.model.rif.BeneficiaryHistory_;\n+import gov.cms.bfd.model.rif.Beneficiary_;\n+import gov.cms.bfd.server.war.Operation;\n+import gov.cms.bfd.server.war.commons.LinkBuilder;\n+import gov.cms.bfd.server.war.commons.LoadedFilterManager;\n+import gov.cms.bfd.server.war.commons.OffsetLinkBuilder;\n+import gov.cms.bfd.server.war.commons.PatientLinkBuilder;\n+import gov.cms.bfd.server.war.commons.QueryUtils;\n+import gov.cms.bfd.server.war.commons.TransformerConstants;\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.persistence.EntityManager;\n+import javax.persistence.NoResultException;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.JoinType;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+import javax.persistence.metamodel.SingularAttribute;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.Bundle;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.hl7.fhir.r4.model.Identifier;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.slf4j.MDC;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This FHIR {@link IResourceProvider} adds support for STU3 {@link Patient} resources, derived from\n+ * the CCW beneficiaries.\n+ */\n+@Component\n+public final class R4PatientResourceProvider implements IResourceProvider {\n+  /**\n+   * The {@link Identifier#getSystem()} values that are supported by {@link #searchByIdentifier}.\n+   */\n+  private static final List<String> SUPPORTED_HASH_IDENTIFIER_SYSTEMS =\n+      Arrays.asList(\n+          TransformerConstants.CODING_BBAPI_BENE_MBI_HASH,\n+          TransformerConstants.CODING_BBAPI_BENE_HICN_HASH,\n+          TransformerConstants.CODING_BBAPI_BENE_HICN_HASH_OLD);\n+\n+  private EntityManager entityManager;\n+  private MetricRegistry metricRegistry;\n+  private LoadedFilterManager loadedFilterManager;\n+\n+  /** @param entityManager a JPA {@link EntityManager} connected to the application's database */\n+  @PersistenceContext\n+  public void setEntityManager(EntityManager entityManager) {\n+    this.entityManager = entityManager;\n+  }\n+\n+  /** @param metricRegistry the {@link MetricRegistry} to use */\n+  @Inject\n+  public void setMetricRegistry(MetricRegistry metricRegistry) {\n+    this.metricRegistry = metricRegistry;\n+  }\n+\n+  /** @param loadedFilterManager the {@link R4LoadedFilterManager} to use */\n+  @Inject\n+  public void setLoadedFilterManager(LoadedFilterManager loadedFilterManager) {\n+    this.loadedFilterManager = loadedFilterManager;\n+  }\n+\n+  /** @see ca.uhn.fhir.rest.server.IResourceProvider#getResourceType() */\n+  @Override\n+  public Class<? extends IBaseResource> getResourceType() {\n+    return Patient.class;\n+  }\n+\n+  /**\n+   * Adds support for the FHIR \"read\" operation, for {@link Patient}s. The {@link Read} annotation\n+   * indicates that this method supports the read operation.\n+   *\n+   * <p>Read operations take a single parameter annotated with {@link IdParam}, and should return a\n+   * single resource instance.\n+   *\n+   * @param patientId The read operation takes one parameter, which must be of type {@link IdType}\n+   *     and must be annotated with the {@link IdParam} annotation.\n+   * @param requestDetails a {@link RequestDetails} containing the details of the request URL, used\n+   *     to parse out pagination values\n+   * @return Returns a resource matching the specified {@link IdDt}, or <code>null</code> if none\n+   *     exists.\n+   */\n+  @Read(version = false)\n+  @Trace\n+  public Patient read(@IdParam IdType patientId, RequestDetails requestDetails) {\n+    if (patientId == null) throw new IllegalArgumentException();\n+    if (patientId.getVersionIdPartAsLong() != null) throw new IllegalArgumentException();\n+\n+    String beneIdText = patientId.getIdPart();\n+    if (beneIdText == null || beneIdText.trim().isEmpty()) throw new IllegalArgumentException();\n+\n+    List<String> includeIdentifiersValues = returnIncludeIdentifiersValues(requestDetails);\n+\n+    Operation operation = new Operation(Operation.Endpoint.V2_PATIENT);\n+    operation.setOption(\"by\", \"id\");\n+    operation.setOption(\"IncludeIdentifiers\", includeIdentifiersValues.toString());\n+    operation.publishOperationName();\n+\n+    CriteriaBuilder builder = entityManager.getCriteriaBuilder();\n+    CriteriaQuery<Beneficiary> criteria = builder.createQuery(Beneficiary.class);\n+    Root<Beneficiary> root = criteria.from(Beneficiary.class);\n+\n+    if (hasHICN(includeIdentifiersValues))\n+      root.fetch(Beneficiary_.beneficiaryHistories, JoinType.LEFT);\n+\n+    // if (hasMBI(includeIdentifiersValues))\n+    root.fetch(Beneficiary_.medicareBeneficiaryIdHistories, JoinType.LEFT);\n+\n+    criteria.select(root);\n+    criteria.where(builder.equal(root.get(Beneficiary_.beneficiaryId), beneIdText));\n+\n+    Beneficiary beneficiary = null;\n+    Long beneByIdQueryNanoSeconds = null;\n+    Timer.Context timerBeneQuery =\n+        metricRegistry\n+            .timer(MetricRegistry.name(getClass().getSimpleName(), \"query\", \"bene_by_id\"))\n+            .time();\n+    try {\n+      beneficiary = entityManager.createQuery(criteria).getSingleResult();\n+    } catch (NoResultException e) {\n+      throw new ResourceNotFoundException(patientId);\n+    } finally {\n+      beneByIdQueryNanoSeconds = timerBeneQuery.stop();\n+\n+      TransformerUtilsV2.recordQueryInMdc(\n+          String.format(\"bene_by_id.include_%s\", String.join(\"_\", includeIdentifiersValues)),\n+          beneByIdQueryNanoSeconds,\n+          beneficiary == null ? 0 : 1);\n+    }\n+\n+    // Null out the unhashed HICNs if we're not supposed to be returning them\n+    if (!hasHICN(includeIdentifiersValues)) {\n+      beneficiary.setHicnUnhashed(Optional.empty());\n+    }\n+\n+    Patient patient =\n+        BeneficiaryTransformerV2.transform(metricRegistry, beneficiary, includeIdentifiersValues);\n+    return patient;\n+  }\n+\n+  /**\n+   * Adds support for the FHIR \"search\" operation for {@link Patient}s, allowing users to search by\n+   * {@link Patient#getId()}.\n+   *\n+   * <p>The {@link Search} annotation indicates that this method supports the search operation.\n+   * There may be many different methods annotated with this {@link Search} annotation, to support\n+   * many different search criteria.\n+   *\n+   * @param logicalId a {@link TokenParam} (with no system, per the spec) for the {@link\n+   *     Patient#getId()} to try and find a matching {@link Patient} for\n+   * @param startIndex an {@link OptionalParam} for the startIndex (or offset) used to determine\n+   *     pagination\n+   * @param lastUpdated an {@link OptionalParam} to filter the results based on the passed date\n+   *     range\n+   * @param requestDetails a {@link RequestDetails} containing the details of the request URL, used\n+   *     to parse out pagination values\n+   * @return Returns a {@link List} of {@link Patient}s, which may contain multiple matching\n+   *     resources, or may also be empty.\n+   */\n+  @Search\n+  @Trace\n+  public Bundle searchByLogicalId(\n+      @RequiredParam(name = Patient.SP_RES_ID)\n+          @Description(shortDefinition = \"The patient identifier to search for\")\n+          TokenParam logicalId,\n+      @OptionalParam(name = \"startIndex\")\n+          @Description(shortDefinition = \"The offset used for result pagination\")\n+          String startIndex,\n+      @OptionalParam(name = \"_lastUpdated\")\n+          @Description(shortDefinition = \"Include resources last updated in the given range\")\n+          DateRangeParam lastUpdated,\n+      RequestDetails requestDetails) {\n+    if (logicalId.getQueryParameterQualifier() != null)\n+      throw new InvalidRequestException(\n+          \"Unsupported query parameter qualifier: \" + logicalId.getQueryParameterQualifier());\n+    if (logicalId.getSystem() != null && !logicalId.getSystem().isEmpty())\n+      throw new InvalidRequestException(\n+          \"Unsupported query parameter system: \" + logicalId.getSystem());\n+    if (logicalId.getValueNotNull().isEmpty())\n+      throw new InvalidRequestException(\n+          \"Unsupported query parameter value: \" + logicalId.getValue());\n+\n+    List<IBaseResource> patients;\n+    if (loadedFilterManager.isResultSetEmpty(logicalId.getValue(), lastUpdated)) {\n+      patients = Collections.emptyList();\n+    } else {\n+      try {\n+        patients =\n+            Optional.of(read(new IdType(logicalId.getValue()), requestDetails))\n+                .filter(p -> QueryUtils.isInRange(p.getMeta().getLastUpdated(), lastUpdated))\n+                .map(p -> Collections.singletonList((IBaseResource) p))\n+                .orElse(Collections.emptyList());\n+      } catch (ResourceNotFoundException e) {\n+        patients = Collections.emptyList();\n+      }\n+    }\n+\n+    OffsetLinkBuilder paging = new OffsetLinkBuilder(requestDetails, \"/Patient?\");\n+    Bundle bundle =\n+        TransformerUtilsV2.createBundle(paging, patients, loadedFilterManager.getTransactionTime());\n+    return bundle;\n+  }\n+\n+  @Search\n+  public Bundle searchByCoverageContract(\n+      // This is very explicit as a place holder until this kind\n+      // of relational search is more common.\n+      @RequiredParam(name = \"_has:Coverage.extension\")\n+          @Description(shortDefinition = \"Part D coverage type\")\n+          TokenParam coverageId,\n+      @OptionalParam(name = \"cursor\")\n+          @Description(shortDefinition = \"The cursor used for result pagination\")\n+          String cursor,\n+      RequestDetails requestDetails) {\n+    checkCoverageId(coverageId);\n+    List<String> includeIdentifiersValues = returnIncludeIdentifiersValues(requestDetails);\n+    PatientLinkBuilder paging = new PatientLinkBuilder(requestDetails.getCompleteUrl());\n+    checkPageSize(paging);\n+\n+    Operation operation = new Operation(Operation.Endpoint.V2_PATIENT);\n+    operation.setOption(\"by\", \"coverageContract\");\n+    operation.setOption(\"IncludeIdentifiers\", includeIdentifiersValues.toString());\n+    operation.publishOperationName();\n+\n+    List<Beneficiary> matchingBeneficiaries =\n+        fetchBeneficiaries(coverageId, includeIdentifiersValues, paging);\n+\n+    List<IBaseResource> patients =\n+        matchingBeneficiaries.stream()\n+            .map(\n+                beneficiary -> {\n+                  // Null out the unhashed HICNs if we're not supposed to be returning them\n+                  if (!hasHICN(includeIdentifiersValues)) {\n+                    beneficiary.setHicnUnhashed(Optional.empty());\n+                  }\n+\n+                  Patient patient =\n+                      BeneficiaryTransformerV2.transform(\n+                          metricRegistry, beneficiary, includeIdentifiersValues);\n+                  return patient;\n+                })\n+            .collect(Collectors.toList());\n+\n+    Bundle bundle =\n+        TransformerUtilsV2.createBundle(patients, paging, loadedFilterManager.getTransactionTime());\n+    TransformerUtilsV2.workAroundHAPIIssue1585(requestDetails);\n+    return bundle;\n+  }\n+\n+  private CcwCodebookVariable partDCwVariableFor(String system) {\n+    try {\n+      return CcwCodebookVariable.valueOf(system.toUpperCase());\n+    } catch (IllegalArgumentException e) {\n+      throw new InvalidRequestException(\"Unsupported extension system: \" + system);\n+    }\n+  }\n+\n+  private String partDFieldFor(CcwCodebookVariable month) {\n+    if (month == CcwCodebookVariable.PTDCNTRCT01) return \"partDContractNumberJanId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT02) return \"partDContractNumberFebId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT03) return \"partDContractNumberMarId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT04) return \"partDContractNumberAprId\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "originalPosition": 294}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwMzg4NA==", "bodyText": "As long as sql injection is prevented i am fine with this", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r506603884", "createdAt": "2020-10-16T16:59:05Z", "author": {"login": "cbrunefearless"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java", "diffHunk": "@@ -0,0 +1,838 @@\n+package gov.cms.bfd.server.war.r4.providers;\n+\n+import ca.uhn.fhir.model.api.annotation.Description;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.annotation.IdParam;\n+import ca.uhn.fhir.rest.annotation.OptionalParam;\n+import ca.uhn.fhir.rest.annotation.Read;\n+import ca.uhn.fhir.rest.annotation.RequiredParam;\n+import ca.uhn.fhir.rest.annotation.Search;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import com.codahale.metrics.MetricRegistry;\n+import com.codahale.metrics.Timer;\n+import com.newrelic.api.agent.Trace;\n+import gov.cms.bfd.model.codebook.data.CcwCodebookVariable;\n+import gov.cms.bfd.model.rif.Beneficiary;\n+import gov.cms.bfd.model.rif.BeneficiaryHistory;\n+import gov.cms.bfd.model.rif.BeneficiaryHistory_;\n+import gov.cms.bfd.model.rif.Beneficiary_;\n+import gov.cms.bfd.server.war.Operation;\n+import gov.cms.bfd.server.war.commons.LinkBuilder;\n+import gov.cms.bfd.server.war.commons.LoadedFilterManager;\n+import gov.cms.bfd.server.war.commons.OffsetLinkBuilder;\n+import gov.cms.bfd.server.war.commons.PatientLinkBuilder;\n+import gov.cms.bfd.server.war.commons.QueryUtils;\n+import gov.cms.bfd.server.war.commons.TransformerConstants;\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.persistence.EntityManager;\n+import javax.persistence.NoResultException;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.JoinType;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+import javax.persistence.metamodel.SingularAttribute;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.Bundle;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.hl7.fhir.r4.model.Identifier;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.slf4j.MDC;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This FHIR {@link IResourceProvider} adds support for STU3 {@link Patient} resources, derived from\n+ * the CCW beneficiaries.\n+ */\n+@Component\n+public final class R4PatientResourceProvider implements IResourceProvider {\n+  /**\n+   * The {@link Identifier#getSystem()} values that are supported by {@link #searchByIdentifier}.\n+   */\n+  private static final List<String> SUPPORTED_HASH_IDENTIFIER_SYSTEMS =\n+      Arrays.asList(\n+          TransformerConstants.CODING_BBAPI_BENE_MBI_HASH,\n+          TransformerConstants.CODING_BBAPI_BENE_HICN_HASH,\n+          TransformerConstants.CODING_BBAPI_BENE_HICN_HASH_OLD);\n+\n+  private EntityManager entityManager;\n+  private MetricRegistry metricRegistry;\n+  private LoadedFilterManager loadedFilterManager;\n+\n+  /** @param entityManager a JPA {@link EntityManager} connected to the application's database */\n+  @PersistenceContext\n+  public void setEntityManager(EntityManager entityManager) {\n+    this.entityManager = entityManager;\n+  }\n+\n+  /** @param metricRegistry the {@link MetricRegistry} to use */\n+  @Inject\n+  public void setMetricRegistry(MetricRegistry metricRegistry) {\n+    this.metricRegistry = metricRegistry;\n+  }\n+\n+  /** @param loadedFilterManager the {@link R4LoadedFilterManager} to use */\n+  @Inject\n+  public void setLoadedFilterManager(LoadedFilterManager loadedFilterManager) {\n+    this.loadedFilterManager = loadedFilterManager;\n+  }\n+\n+  /** @see ca.uhn.fhir.rest.server.IResourceProvider#getResourceType() */\n+  @Override\n+  public Class<? extends IBaseResource> getResourceType() {\n+    return Patient.class;\n+  }\n+\n+  /**\n+   * Adds support for the FHIR \"read\" operation, for {@link Patient}s. The {@link Read} annotation\n+   * indicates that this method supports the read operation.\n+   *\n+   * <p>Read operations take a single parameter annotated with {@link IdParam}, and should return a\n+   * single resource instance.\n+   *\n+   * @param patientId The read operation takes one parameter, which must be of type {@link IdType}\n+   *     and must be annotated with the {@link IdParam} annotation.\n+   * @param requestDetails a {@link RequestDetails} containing the details of the request URL, used\n+   *     to parse out pagination values\n+   * @return Returns a resource matching the specified {@link IdDt}, or <code>null</code> if none\n+   *     exists.\n+   */\n+  @Read(version = false)\n+  @Trace\n+  public Patient read(@IdParam IdType patientId, RequestDetails requestDetails) {\n+    if (patientId == null) throw new IllegalArgumentException();\n+    if (patientId.getVersionIdPartAsLong() != null) throw new IllegalArgumentException();\n+\n+    String beneIdText = patientId.getIdPart();\n+    if (beneIdText == null || beneIdText.trim().isEmpty()) throw new IllegalArgumentException();\n+\n+    List<String> includeIdentifiersValues = returnIncludeIdentifiersValues(requestDetails);\n+\n+    Operation operation = new Operation(Operation.Endpoint.V2_PATIENT);\n+    operation.setOption(\"by\", \"id\");\n+    operation.setOption(\"IncludeIdentifiers\", includeIdentifiersValues.toString());\n+    operation.publishOperationName();\n+\n+    CriteriaBuilder builder = entityManager.getCriteriaBuilder();\n+    CriteriaQuery<Beneficiary> criteria = builder.createQuery(Beneficiary.class);\n+    Root<Beneficiary> root = criteria.from(Beneficiary.class);\n+\n+    if (hasHICN(includeIdentifiersValues))\n+      root.fetch(Beneficiary_.beneficiaryHistories, JoinType.LEFT);\n+\n+    // if (hasMBI(includeIdentifiersValues))\n+    root.fetch(Beneficiary_.medicareBeneficiaryIdHistories, JoinType.LEFT);\n+\n+    criteria.select(root);\n+    criteria.where(builder.equal(root.get(Beneficiary_.beneficiaryId), beneIdText));\n+\n+    Beneficiary beneficiary = null;\n+    Long beneByIdQueryNanoSeconds = null;\n+    Timer.Context timerBeneQuery =\n+        metricRegistry\n+            .timer(MetricRegistry.name(getClass().getSimpleName(), \"query\", \"bene_by_id\"))\n+            .time();\n+    try {\n+      beneficiary = entityManager.createQuery(criteria).getSingleResult();\n+    } catch (NoResultException e) {\n+      throw new ResourceNotFoundException(patientId);\n+    } finally {\n+      beneByIdQueryNanoSeconds = timerBeneQuery.stop();\n+\n+      TransformerUtilsV2.recordQueryInMdc(\n+          String.format(\"bene_by_id.include_%s\", String.join(\"_\", includeIdentifiersValues)),\n+          beneByIdQueryNanoSeconds,\n+          beneficiary == null ? 0 : 1);\n+    }\n+\n+    // Null out the unhashed HICNs if we're not supposed to be returning them\n+    if (!hasHICN(includeIdentifiersValues)) {\n+      beneficiary.setHicnUnhashed(Optional.empty());\n+    }\n+\n+    Patient patient =\n+        BeneficiaryTransformerV2.transform(metricRegistry, beneficiary, includeIdentifiersValues);\n+    return patient;\n+  }\n+\n+  /**\n+   * Adds support for the FHIR \"search\" operation for {@link Patient}s, allowing users to search by\n+   * {@link Patient#getId()}.\n+   *\n+   * <p>The {@link Search} annotation indicates that this method supports the search operation.\n+   * There may be many different methods annotated with this {@link Search} annotation, to support\n+   * many different search criteria.\n+   *\n+   * @param logicalId a {@link TokenParam} (with no system, per the spec) for the {@link\n+   *     Patient#getId()} to try and find a matching {@link Patient} for\n+   * @param startIndex an {@link OptionalParam} for the startIndex (or offset) used to determine\n+   *     pagination\n+   * @param lastUpdated an {@link OptionalParam} to filter the results based on the passed date\n+   *     range\n+   * @param requestDetails a {@link RequestDetails} containing the details of the request URL, used\n+   *     to parse out pagination values\n+   * @return Returns a {@link List} of {@link Patient}s, which may contain multiple matching\n+   *     resources, or may also be empty.\n+   */\n+  @Search\n+  @Trace\n+  public Bundle searchByLogicalId(\n+      @RequiredParam(name = Patient.SP_RES_ID)\n+          @Description(shortDefinition = \"The patient identifier to search for\")\n+          TokenParam logicalId,\n+      @OptionalParam(name = \"startIndex\")\n+          @Description(shortDefinition = \"The offset used for result pagination\")\n+          String startIndex,\n+      @OptionalParam(name = \"_lastUpdated\")\n+          @Description(shortDefinition = \"Include resources last updated in the given range\")\n+          DateRangeParam lastUpdated,\n+      RequestDetails requestDetails) {\n+    if (logicalId.getQueryParameterQualifier() != null)\n+      throw new InvalidRequestException(\n+          \"Unsupported query parameter qualifier: \" + logicalId.getQueryParameterQualifier());\n+    if (logicalId.getSystem() != null && !logicalId.getSystem().isEmpty())\n+      throw new InvalidRequestException(\n+          \"Unsupported query parameter system: \" + logicalId.getSystem());\n+    if (logicalId.getValueNotNull().isEmpty())\n+      throw new InvalidRequestException(\n+          \"Unsupported query parameter value: \" + logicalId.getValue());\n+\n+    List<IBaseResource> patients;\n+    if (loadedFilterManager.isResultSetEmpty(logicalId.getValue(), lastUpdated)) {\n+      patients = Collections.emptyList();\n+    } else {\n+      try {\n+        patients =\n+            Optional.of(read(new IdType(logicalId.getValue()), requestDetails))\n+                .filter(p -> QueryUtils.isInRange(p.getMeta().getLastUpdated(), lastUpdated))\n+                .map(p -> Collections.singletonList((IBaseResource) p))\n+                .orElse(Collections.emptyList());\n+      } catch (ResourceNotFoundException e) {\n+        patients = Collections.emptyList();\n+      }\n+    }\n+\n+    OffsetLinkBuilder paging = new OffsetLinkBuilder(requestDetails, \"/Patient?\");\n+    Bundle bundle =\n+        TransformerUtilsV2.createBundle(paging, patients, loadedFilterManager.getTransactionTime());\n+    return bundle;\n+  }\n+\n+  @Search\n+  public Bundle searchByCoverageContract(\n+      // This is very explicit as a place holder until this kind\n+      // of relational search is more common.\n+      @RequiredParam(name = \"_has:Coverage.extension\")\n+          @Description(shortDefinition = \"Part D coverage type\")\n+          TokenParam coverageId,\n+      @OptionalParam(name = \"cursor\")\n+          @Description(shortDefinition = \"The cursor used for result pagination\")\n+          String cursor,\n+      RequestDetails requestDetails) {\n+    checkCoverageId(coverageId);\n+    List<String> includeIdentifiersValues = returnIncludeIdentifiersValues(requestDetails);\n+    PatientLinkBuilder paging = new PatientLinkBuilder(requestDetails.getCompleteUrl());\n+    checkPageSize(paging);\n+\n+    Operation operation = new Operation(Operation.Endpoint.V2_PATIENT);\n+    operation.setOption(\"by\", \"coverageContract\");\n+    operation.setOption(\"IncludeIdentifiers\", includeIdentifiersValues.toString());\n+    operation.publishOperationName();\n+\n+    List<Beneficiary> matchingBeneficiaries =\n+        fetchBeneficiaries(coverageId, includeIdentifiersValues, paging);\n+\n+    List<IBaseResource> patients =\n+        matchingBeneficiaries.stream()\n+            .map(\n+                beneficiary -> {\n+                  // Null out the unhashed HICNs if we're not supposed to be returning them\n+                  if (!hasHICN(includeIdentifiersValues)) {\n+                    beneficiary.setHicnUnhashed(Optional.empty());\n+                  }\n+\n+                  Patient patient =\n+                      BeneficiaryTransformerV2.transform(\n+                          metricRegistry, beneficiary, includeIdentifiersValues);\n+                  return patient;\n+                })\n+            .collect(Collectors.toList());\n+\n+    Bundle bundle =\n+        TransformerUtilsV2.createBundle(patients, paging, loadedFilterManager.getTransactionTime());\n+    TransformerUtilsV2.workAroundHAPIIssue1585(requestDetails);\n+    return bundle;\n+  }\n+\n+  private CcwCodebookVariable partDCwVariableFor(String system) {\n+    try {\n+      return CcwCodebookVariable.valueOf(system.toUpperCase());\n+    } catch (IllegalArgumentException e) {\n+      throw new InvalidRequestException(\"Unsupported extension system: \" + system);\n+    }\n+  }\n+\n+  private String partDFieldFor(CcwCodebookVariable month) {\n+    if (month == CcwCodebookVariable.PTDCNTRCT01) return \"partDContractNumberJanId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT02) return \"partDContractNumberFebId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT03) return \"partDContractNumberMarId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT04) return \"partDContractNumberAprId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT05) return \"partDContractNumberMayId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT06) return \"partDContractNumberJunId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT07) return \"partDContractNumberJulId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT08) return \"partDContractNumberAugId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT09) return \"partDContractNumberSeptId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT10) return \"partDContractNumberOctId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT11) return \"partDContractNumberNovId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT12) return \"partDContractNumberDecId\";\n+    throw new InvalidRequestException(\n+        \"Unsupported extension system: \" + month.getVariable().getId().toLowerCase());\n+  }\n+\n+  /**\n+   * Fetch beneficiaries for the PartD coverage parameter. If includeIdentiers are present then the\n+   * entity mappings are fetched as well\n+   *\n+   * @param coverageId coverage type\n+   * @param includedIdentifiers list from the includeIdentifier header\n+   * @param paging specified\n+   * @return the beneficiaries\n+   */\n+  private List<Beneficiary> fetchBeneficiaries(\n+      TokenParam coverageId, List<String> includedIdentifiers, PatientLinkBuilder paging) {\n+    String contractMonth =\n+        coverageId.getSystem().substring(coverageId.getSystem().lastIndexOf('/') + 1);\n+    CcwCodebookVariable partDContractMonth = partDCwVariableFor(contractMonth);\n+    String contractMonthField = partDFieldFor(partDContractMonth);\n+    String contractCode = coverageId.getValueNotNull();\n+\n+    // Fetching with joins is not compatible with setMaxResults as explained in this post:\n+    // https://stackoverflow.com/questions/53569908/jpa-eager-fetching-and-pagination-best-practices\n+    // So, in cases where there are joins and paging, we query in two steps: first fetch bene-ids\n+    // with paging and then fetch full benes with joins.\n+    boolean useTwoSteps =\n+        (hasHICN(includedIdentifiers) || hasMBI(includedIdentifiers)) && paging.isPagingRequested();\n+    if (useTwoSteps) {\n+      // Fetch ids\n+      List<String> ids =\n+          queryBeneficiaryIds(contractMonthField, contractCode, paging)\n+              .setMaxResults(paging.getPageSize())\n+              .getResultList();\n+\n+      // Fetch the benes using the ids\n+      return queryBeneficiariesByIds(ids, includedIdentifiers).getResultList();\n+    } else {\n+      // Fetch benes and their histories in one query\n+      return queryBeneficiariesBy(contractMonthField, contractCode, paging, includedIdentifiers)\n+          .setMaxResults(paging.getPageSize())\n+          .getResultList();\n+    }\n+  }\n+\n+  /**\n+   * Build a criteria for a general Beneficiary query\n+   *\n+   * @param field to match on\n+   * @param value to match on\n+   * @param paging to use for the result set\n+   * @param identifiers to add for many-to-one relations\n+   * @return the criteria\n+   */\n+  private TypedQuery<Beneficiary> queryBeneficiariesBy(\n+      String field, String value, PatientLinkBuilder paging, List<String> identifiers) {\n+    String joinsClause = \"\";\n+    joinsClause += \"left join fetch b.medicareBeneficiaryIdHistories \";\n+    if (hasHICN(identifiers)) joinsClause += \"left join fetch b.beneficiaryHistories \";\n+\n+    if (paging.isPagingRequested() && !paging.isFirstPage()) {\n+      String query =\n+          \"select b from Beneficiary b \"\n+              + joinsClause\n+              + \"where b.\"\n+              + field", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "originalPosition": 367}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwNDk1Mw==", "bodyText": "Strings.isNullOrEmpty", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r506604953", "createdAt": "2020-10-16T17:01:06Z", "author": {"login": "cbrunefearless"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java", "diffHunk": "@@ -0,0 +1,838 @@\n+package gov.cms.bfd.server.war.r4.providers;\n+\n+import ca.uhn.fhir.model.api.annotation.Description;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.annotation.IdParam;\n+import ca.uhn.fhir.rest.annotation.OptionalParam;\n+import ca.uhn.fhir.rest.annotation.Read;\n+import ca.uhn.fhir.rest.annotation.RequiredParam;\n+import ca.uhn.fhir.rest.annotation.Search;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import com.codahale.metrics.MetricRegistry;\n+import com.codahale.metrics.Timer;\n+import com.newrelic.api.agent.Trace;\n+import gov.cms.bfd.model.codebook.data.CcwCodebookVariable;\n+import gov.cms.bfd.model.rif.Beneficiary;\n+import gov.cms.bfd.model.rif.BeneficiaryHistory;\n+import gov.cms.bfd.model.rif.BeneficiaryHistory_;\n+import gov.cms.bfd.model.rif.Beneficiary_;\n+import gov.cms.bfd.server.war.Operation;\n+import gov.cms.bfd.server.war.commons.LinkBuilder;\n+import gov.cms.bfd.server.war.commons.LoadedFilterManager;\n+import gov.cms.bfd.server.war.commons.OffsetLinkBuilder;\n+import gov.cms.bfd.server.war.commons.PatientLinkBuilder;\n+import gov.cms.bfd.server.war.commons.QueryUtils;\n+import gov.cms.bfd.server.war.commons.TransformerConstants;\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.persistence.EntityManager;\n+import javax.persistence.NoResultException;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.JoinType;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+import javax.persistence.metamodel.SingularAttribute;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.Bundle;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.hl7.fhir.r4.model.Identifier;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.slf4j.MDC;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This FHIR {@link IResourceProvider} adds support for STU3 {@link Patient} resources, derived from\n+ * the CCW beneficiaries.\n+ */\n+@Component\n+public final class R4PatientResourceProvider implements IResourceProvider {\n+  /**\n+   * The {@link Identifier#getSystem()} values that are supported by {@link #searchByIdentifier}.\n+   */\n+  private static final List<String> SUPPORTED_HASH_IDENTIFIER_SYSTEMS =\n+      Arrays.asList(\n+          TransformerConstants.CODING_BBAPI_BENE_MBI_HASH,\n+          TransformerConstants.CODING_BBAPI_BENE_HICN_HASH,\n+          TransformerConstants.CODING_BBAPI_BENE_HICN_HASH_OLD);\n+\n+  private EntityManager entityManager;\n+  private MetricRegistry metricRegistry;\n+  private LoadedFilterManager loadedFilterManager;\n+\n+  /** @param entityManager a JPA {@link EntityManager} connected to the application's database */\n+  @PersistenceContext\n+  public void setEntityManager(EntityManager entityManager) {\n+    this.entityManager = entityManager;\n+  }\n+\n+  /** @param metricRegistry the {@link MetricRegistry} to use */\n+  @Inject\n+  public void setMetricRegistry(MetricRegistry metricRegistry) {\n+    this.metricRegistry = metricRegistry;\n+  }\n+\n+  /** @param loadedFilterManager the {@link R4LoadedFilterManager} to use */\n+  @Inject\n+  public void setLoadedFilterManager(LoadedFilterManager loadedFilterManager) {\n+    this.loadedFilterManager = loadedFilterManager;\n+  }\n+\n+  /** @see ca.uhn.fhir.rest.server.IResourceProvider#getResourceType() */\n+  @Override\n+  public Class<? extends IBaseResource> getResourceType() {\n+    return Patient.class;\n+  }\n+\n+  /**\n+   * Adds support for the FHIR \"read\" operation, for {@link Patient}s. The {@link Read} annotation\n+   * indicates that this method supports the read operation.\n+   *\n+   * <p>Read operations take a single parameter annotated with {@link IdParam}, and should return a\n+   * single resource instance.\n+   *\n+   * @param patientId The read operation takes one parameter, which must be of type {@link IdType}\n+   *     and must be annotated with the {@link IdParam} annotation.\n+   * @param requestDetails a {@link RequestDetails} containing the details of the request URL, used\n+   *     to parse out pagination values\n+   * @return Returns a resource matching the specified {@link IdDt}, or <code>null</code> if none\n+   *     exists.\n+   */\n+  @Read(version = false)\n+  @Trace\n+  public Patient read(@IdParam IdType patientId, RequestDetails requestDetails) {\n+    if (patientId == null) throw new IllegalArgumentException();\n+    if (patientId.getVersionIdPartAsLong() != null) throw new IllegalArgumentException();\n+\n+    String beneIdText = patientId.getIdPart();\n+    if (beneIdText == null || beneIdText.trim().isEmpty()) throw new IllegalArgumentException();\n+\n+    List<String> includeIdentifiersValues = returnIncludeIdentifiersValues(requestDetails);\n+\n+    Operation operation = new Operation(Operation.Endpoint.V2_PATIENT);\n+    operation.setOption(\"by\", \"id\");\n+    operation.setOption(\"IncludeIdentifiers\", includeIdentifiersValues.toString());\n+    operation.publishOperationName();\n+\n+    CriteriaBuilder builder = entityManager.getCriteriaBuilder();\n+    CriteriaQuery<Beneficiary> criteria = builder.createQuery(Beneficiary.class);\n+    Root<Beneficiary> root = criteria.from(Beneficiary.class);\n+\n+    if (hasHICN(includeIdentifiersValues))\n+      root.fetch(Beneficiary_.beneficiaryHistories, JoinType.LEFT);\n+\n+    // if (hasMBI(includeIdentifiersValues))\n+    root.fetch(Beneficiary_.medicareBeneficiaryIdHistories, JoinType.LEFT);\n+\n+    criteria.select(root);\n+    criteria.where(builder.equal(root.get(Beneficiary_.beneficiaryId), beneIdText));\n+\n+    Beneficiary beneficiary = null;\n+    Long beneByIdQueryNanoSeconds = null;\n+    Timer.Context timerBeneQuery =\n+        metricRegistry\n+            .timer(MetricRegistry.name(getClass().getSimpleName(), \"query\", \"bene_by_id\"))\n+            .time();\n+    try {\n+      beneficiary = entityManager.createQuery(criteria).getSingleResult();\n+    } catch (NoResultException e) {\n+      throw new ResourceNotFoundException(patientId);\n+    } finally {\n+      beneByIdQueryNanoSeconds = timerBeneQuery.stop();\n+\n+      TransformerUtilsV2.recordQueryInMdc(\n+          String.format(\"bene_by_id.include_%s\", String.join(\"_\", includeIdentifiersValues)),\n+          beneByIdQueryNanoSeconds,\n+          beneficiary == null ? 0 : 1);\n+    }\n+\n+    // Null out the unhashed HICNs if we're not supposed to be returning them\n+    if (!hasHICN(includeIdentifiersValues)) {\n+      beneficiary.setHicnUnhashed(Optional.empty());\n+    }\n+\n+    Patient patient =\n+        BeneficiaryTransformerV2.transform(metricRegistry, beneficiary, includeIdentifiersValues);\n+    return patient;\n+  }\n+\n+  /**\n+   * Adds support for the FHIR \"search\" operation for {@link Patient}s, allowing users to search by\n+   * {@link Patient#getId()}.\n+   *\n+   * <p>The {@link Search} annotation indicates that this method supports the search operation.\n+   * There may be many different methods annotated with this {@link Search} annotation, to support\n+   * many different search criteria.\n+   *\n+   * @param logicalId a {@link TokenParam} (with no system, per the spec) for the {@link\n+   *     Patient#getId()} to try and find a matching {@link Patient} for\n+   * @param startIndex an {@link OptionalParam} for the startIndex (or offset) used to determine\n+   *     pagination\n+   * @param lastUpdated an {@link OptionalParam} to filter the results based on the passed date\n+   *     range\n+   * @param requestDetails a {@link RequestDetails} containing the details of the request URL, used\n+   *     to parse out pagination values\n+   * @return Returns a {@link List} of {@link Patient}s, which may contain multiple matching\n+   *     resources, or may also be empty.\n+   */\n+  @Search\n+  @Trace\n+  public Bundle searchByLogicalId(\n+      @RequiredParam(name = Patient.SP_RES_ID)\n+          @Description(shortDefinition = \"The patient identifier to search for\")\n+          TokenParam logicalId,\n+      @OptionalParam(name = \"startIndex\")\n+          @Description(shortDefinition = \"The offset used for result pagination\")\n+          String startIndex,\n+      @OptionalParam(name = \"_lastUpdated\")\n+          @Description(shortDefinition = \"Include resources last updated in the given range\")\n+          DateRangeParam lastUpdated,\n+      RequestDetails requestDetails) {\n+    if (logicalId.getQueryParameterQualifier() != null)\n+      throw new InvalidRequestException(\n+          \"Unsupported query parameter qualifier: \" + logicalId.getQueryParameterQualifier());\n+    if (logicalId.getSystem() != null && !logicalId.getSystem().isEmpty())\n+      throw new InvalidRequestException(\n+          \"Unsupported query parameter system: \" + logicalId.getSystem());\n+    if (logicalId.getValueNotNull().isEmpty())\n+      throw new InvalidRequestException(\n+          \"Unsupported query parameter value: \" + logicalId.getValue());\n+\n+    List<IBaseResource> patients;\n+    if (loadedFilterManager.isResultSetEmpty(logicalId.getValue(), lastUpdated)) {\n+      patients = Collections.emptyList();\n+    } else {\n+      try {\n+        patients =\n+            Optional.of(read(new IdType(logicalId.getValue()), requestDetails))\n+                .filter(p -> QueryUtils.isInRange(p.getMeta().getLastUpdated(), lastUpdated))\n+                .map(p -> Collections.singletonList((IBaseResource) p))\n+                .orElse(Collections.emptyList());\n+      } catch (ResourceNotFoundException e) {\n+        patients = Collections.emptyList();\n+      }\n+    }\n+\n+    OffsetLinkBuilder paging = new OffsetLinkBuilder(requestDetails, \"/Patient?\");\n+    Bundle bundle =\n+        TransformerUtilsV2.createBundle(paging, patients, loadedFilterManager.getTransactionTime());\n+    return bundle;\n+  }\n+\n+  @Search\n+  public Bundle searchByCoverageContract(\n+      // This is very explicit as a place holder until this kind\n+      // of relational search is more common.\n+      @RequiredParam(name = \"_has:Coverage.extension\")\n+          @Description(shortDefinition = \"Part D coverage type\")\n+          TokenParam coverageId,\n+      @OptionalParam(name = \"cursor\")\n+          @Description(shortDefinition = \"The cursor used for result pagination\")\n+          String cursor,\n+      RequestDetails requestDetails) {\n+    checkCoverageId(coverageId);\n+    List<String> includeIdentifiersValues = returnIncludeIdentifiersValues(requestDetails);\n+    PatientLinkBuilder paging = new PatientLinkBuilder(requestDetails.getCompleteUrl());\n+    checkPageSize(paging);\n+\n+    Operation operation = new Operation(Operation.Endpoint.V2_PATIENT);\n+    operation.setOption(\"by\", \"coverageContract\");\n+    operation.setOption(\"IncludeIdentifiers\", includeIdentifiersValues.toString());\n+    operation.publishOperationName();\n+\n+    List<Beneficiary> matchingBeneficiaries =\n+        fetchBeneficiaries(coverageId, includeIdentifiersValues, paging);\n+\n+    List<IBaseResource> patients =\n+        matchingBeneficiaries.stream()\n+            .map(\n+                beneficiary -> {\n+                  // Null out the unhashed HICNs if we're not supposed to be returning them\n+                  if (!hasHICN(includeIdentifiersValues)) {\n+                    beneficiary.setHicnUnhashed(Optional.empty());\n+                  }\n+\n+                  Patient patient =\n+                      BeneficiaryTransformerV2.transform(\n+                          metricRegistry, beneficiary, includeIdentifiersValues);\n+                  return patient;\n+                })\n+            .collect(Collectors.toList());\n+\n+    Bundle bundle =\n+        TransformerUtilsV2.createBundle(patients, paging, loadedFilterManager.getTransactionTime());\n+    TransformerUtilsV2.workAroundHAPIIssue1585(requestDetails);\n+    return bundle;\n+  }\n+\n+  private CcwCodebookVariable partDCwVariableFor(String system) {\n+    try {\n+      return CcwCodebookVariable.valueOf(system.toUpperCase());\n+    } catch (IllegalArgumentException e) {\n+      throw new InvalidRequestException(\"Unsupported extension system: \" + system);\n+    }\n+  }\n+\n+  private String partDFieldFor(CcwCodebookVariable month) {\n+    if (month == CcwCodebookVariable.PTDCNTRCT01) return \"partDContractNumberJanId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT02) return \"partDContractNumberFebId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT03) return \"partDContractNumberMarId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT04) return \"partDContractNumberAprId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT05) return \"partDContractNumberMayId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT06) return \"partDContractNumberJunId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT07) return \"partDContractNumberJulId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT08) return \"partDContractNumberAugId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT09) return \"partDContractNumberSeptId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT10) return \"partDContractNumberOctId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT11) return \"partDContractNumberNovId\";\n+    if (month == CcwCodebookVariable.PTDCNTRCT12) return \"partDContractNumberDecId\";\n+    throw new InvalidRequestException(\n+        \"Unsupported extension system: \" + month.getVariable().getId().toLowerCase());\n+  }\n+\n+  /**\n+   * Fetch beneficiaries for the PartD coverage parameter. If includeIdentiers are present then the\n+   * entity mappings are fetched as well\n+   *\n+   * @param coverageId coverage type\n+   * @param includedIdentifiers list from the includeIdentifier header\n+   * @param paging specified\n+   * @return the beneficiaries\n+   */\n+  private List<Beneficiary> fetchBeneficiaries(\n+      TokenParam coverageId, List<String> includedIdentifiers, PatientLinkBuilder paging) {\n+    String contractMonth =\n+        coverageId.getSystem().substring(coverageId.getSystem().lastIndexOf('/') + 1);\n+    CcwCodebookVariable partDContractMonth = partDCwVariableFor(contractMonth);\n+    String contractMonthField = partDFieldFor(partDContractMonth);\n+    String contractCode = coverageId.getValueNotNull();\n+\n+    // Fetching with joins is not compatible with setMaxResults as explained in this post:\n+    // https://stackoverflow.com/questions/53569908/jpa-eager-fetching-and-pagination-best-practices\n+    // So, in cases where there are joins and paging, we query in two steps: first fetch bene-ids\n+    // with paging and then fetch full benes with joins.\n+    boolean useTwoSteps =\n+        (hasHICN(includedIdentifiers) || hasMBI(includedIdentifiers)) && paging.isPagingRequested();\n+    if (useTwoSteps) {\n+      // Fetch ids\n+      List<String> ids =\n+          queryBeneficiaryIds(contractMonthField, contractCode, paging)\n+              .setMaxResults(paging.getPageSize())\n+              .getResultList();\n+\n+      // Fetch the benes using the ids\n+      return queryBeneficiariesByIds(ids, includedIdentifiers).getResultList();\n+    } else {\n+      // Fetch benes and their histories in one query\n+      return queryBeneficiariesBy(contractMonthField, contractCode, paging, includedIdentifiers)\n+          .setMaxResults(paging.getPageSize())\n+          .getResultList();\n+    }\n+  }\n+\n+  /**\n+   * Build a criteria for a general Beneficiary query\n+   *\n+   * @param field to match on\n+   * @param value to match on\n+   * @param paging to use for the result set\n+   * @param identifiers to add for many-to-one relations\n+   * @return the criteria\n+   */\n+  private TypedQuery<Beneficiary> queryBeneficiariesBy(\n+      String field, String value, PatientLinkBuilder paging, List<String> identifiers) {\n+    String joinsClause = \"\";\n+    joinsClause += \"left join fetch b.medicareBeneficiaryIdHistories \";\n+    if (hasHICN(identifiers)) joinsClause += \"left join fetch b.beneficiaryHistories \";\n+\n+    if (paging.isPagingRequested() && !paging.isFirstPage()) {\n+      String query =\n+          \"select b from Beneficiary b \"\n+              + joinsClause\n+              + \"where b.\"\n+              + field\n+              + \" = :value and b.beneficiaryId > :cursor \"\n+              + \"order by b.beneficiaryId asc\";\n+\n+      return entityManager\n+          .createQuery(query, Beneficiary.class)\n+          .setParameter(\"value\", value)\n+          .setParameter(\"cursor\", paging.getCursor());\n+    } else {\n+      String query =\n+          \"select b from Beneficiary b \"\n+              + joinsClause\n+              + \"where b.\"\n+              + field\n+              + \" = :value \"\n+              + \"order by b.beneficiaryId asc\";\n+\n+      return entityManager.createQuery(query, Beneficiary.class).setParameter(\"value\", value);\n+    }\n+  }\n+\n+  /**\n+   * Build a criteria for a general beneficiaryId query\n+   *\n+   * @param field to match on\n+   * @param value to match on\n+   * @param paging to use for the result set\n+   * @return the criteria\n+   */\n+  private TypedQuery<String> queryBeneficiaryIds(\n+      String field, String value, PatientLinkBuilder paging) {\n+    if (paging.isPagingRequested() && !paging.isFirstPage()) {\n+      String query =\n+          \"select b.beneficiaryId from Beneficiary b \"\n+              + \"where b.\"\n+              + field\n+              + \" = :value and b.beneficiaryId > :cursor \"\n+              + \"order by b.beneficiaryId asc\";\n+\n+      return entityManager\n+          .createQuery(query, String.class)\n+          .setParameter(\"value\", value)\n+          .setParameter(\"cursor\", paging.getCursor());\n+    } else {\n+      String query =\n+          \"select b.beneficiaryId from Beneficiary b \"\n+              + \"where b.\"\n+              + field\n+              + \" = :value \"\n+              + \"order by b.beneficiaryId asc\";\n+\n+      return entityManager.createQuery(query, String.class).setParameter(\"value\", value);\n+    }\n+  }\n+\n+  /**\n+   * Build a criteria for a beneficiary query using the passed in list of ids\n+   *\n+   * @param ids to use\n+   * @param identifiers to add for many-to-one relations\n+   * @return the criteria\n+   */\n+  private TypedQuery<Beneficiary> queryBeneficiariesByIds(\n+      List<String> ids, List<String> identifiers) {\n+    String joinsClause = \"\";\n+    joinsClause += \"left join fetch b.medicareBeneficiaryIdHistories \";\n+    if (hasHICN(identifiers)) joinsClause += \"left join fetch b.beneficiaryHistories \";\n+\n+    String query =\n+        \"select b from Beneficiary b \"\n+            + joinsClause\n+            + \"where b.beneficiaryId in :ids \"\n+            + \"order by b.beneficiaryId asc\";\n+    return entityManager.createQuery(query, Beneficiary.class).setParameter(\"ids\", ids);\n+  }\n+\n+  /**\n+   * Adds support for the FHIR \"search\" operation for {@link Patient}s, allowing users to search by\n+   * {@link Patient#getIdentifier()}. Specifically, the following criteria are supported:\n+   *\n+   * <ul>\n+   *   <li>Matching a {@link Beneficiary#getHicn()} hash value: when {@link TokenParam#getSystem()}\n+   *       matches one of the {@link #SUPPORTED_HASH_IDENTIFIER_SYSTEMS} entries.\n+   * </ul>\n+   *\n+   * <p>Searches that don't match one of the above forms are not supported.\n+   *\n+   * <p>The {@link Search} annotation indicates that this method supports the search operation.\n+   * There may be many different methods annotated with this {@link Search} annotation, to support\n+   * many different search criteria.\n+   *\n+   * @param identifier an {@link Identifier} {@link TokenParam} for the {@link\n+   *     Patient#getIdentifier()} to try and find a matching {@link Patient} for\n+   * @param startIndex an {@link OptionalParam} for the startIndex (or offset) used to determine\n+   *     pagination\n+   * @param lastUpdated an {@link OptionalParam} to filter the results based on the passed date\n+   *     range\n+   * @param requestDetails a {@link RequestDetails} containing the details of the request URL, used\n+   *     to parse out pagination values\n+   * @return Returns a {@link List} of {@link Patient}s, which may contain multiple matching\n+   *     resources, or may also be empty.\n+   */\n+  @Search\n+  @Trace\n+  public Bundle searchByIdentifier(\n+      @RequiredParam(name = Patient.SP_IDENTIFIER)\n+          @Description(shortDefinition = \"The patient identifier to search for\")\n+          TokenParam identifier,\n+      @OptionalParam(name = \"startIndex\")\n+          @Description(shortDefinition = \"The offset used for result pagination\")\n+          String startIndex,\n+      @OptionalParam(name = \"_lastUpdated\")\n+          @Description(shortDefinition = \"Include resources last updated in the given range\")\n+          DateRangeParam lastUpdated,\n+      RequestDetails requestDetails) {\n+    if (identifier.getQueryParameterQualifier() != null)\n+      throw new InvalidRequestException(\n+          \"Unsupported query parameter qualifier: \" + identifier.getQueryParameterQualifier());\n+\n+    if (!SUPPORTED_HASH_IDENTIFIER_SYSTEMS.contains(identifier.getSystem()))\n+      throw new InvalidRequestException(\"Unsupported identifier system: \" + identifier.getSystem());\n+\n+    List<String> includeIdentifiersValues = returnIncludeIdentifiersValues(requestDetails);\n+\n+    Operation operation = new Operation(Operation.Endpoint.V2_PATIENT);\n+    operation.setOption(\"by\", \"identifier\");\n+    operation.setOption(\"IncludeIdentifiers\", includeIdentifiersValues.toString());\n+    operation.publishOperationName();\n+\n+    List<IBaseResource> patients;\n+    try {\n+      Patient patient;\n+      switch (identifier.getSystem()) {\n+        case TransformerConstants.CODING_BBAPI_BENE_HICN_HASH:\n+        case TransformerConstants.CODING_BBAPI_BENE_HICN_HASH_OLD:\n+          patient = queryDatabaseByHicnHash(identifier.getValue(), includeIdentifiersValues);\n+          break;\n+        case TransformerConstants.CODING_BBAPI_BENE_MBI_HASH:\n+          patient = queryDatabaseByMbiHash(identifier.getValue(), includeIdentifiersValues);\n+          break;\n+        default:\n+          throw new InvalidRequestException(\n+              \"Unsupported identifier system: \" + identifier.getSystem());\n+      }\n+\n+      patients =\n+          QueryUtils.isInRange(patient.getMeta().getLastUpdated(), lastUpdated)\n+              ? Collections.singletonList(patient)\n+              : Collections.emptyList();\n+    } catch (NoResultException e) {\n+      patients = new LinkedList<>();\n+    }\n+\n+    OffsetLinkBuilder paging = new OffsetLinkBuilder(requestDetails, \"/Patient?\");\n+    Bundle bundle =\n+        TransformerUtilsV2.createBundle(paging, patients, loadedFilterManager.getTransactionTime());\n+    return bundle;\n+  }\n+\n+  /**\n+   * @param hicnHash the {@link Beneficiary#getHicn()} hash value to match\n+   * @param includeIdentifiersValues the {@link #returnIncludeIdentifiersValues(RequestDetails)}\n+   *     value to use\n+   * @return a FHIR {@link Patient} for the CCW {@link Beneficiary} that matches the specified\n+   *     {@link Beneficiary#getHicn()} hash value\n+   * @throws NoResultException A {@link NoResultException} will be thrown if no matching {@link\n+   *     Beneficiary} can be found\n+   */\n+  @Trace\n+  private Patient queryDatabaseByHicnHash(String hicnHash, List<String> includeIdentifiersValues) {\n+    return queryDatabaseByHash(\n+        hicnHash, \"hicn\", includeIdentifiersValues, Beneficiary_.hicn, BeneficiaryHistory_.hicn);\n+  }\n+\n+  /**\n+   * @param mbiHash the {@link Beneficiary#getMbiHash()} ()} hash value to match\n+   * @param includeIdentifiersValues the {@link #returnIncludeIdentifiersValues(RequestDetails)}\n+   *     value to use\n+   * @return a FHIR {@link Patient} for the CCW {@link Beneficiary} that matches the specified\n+   *     {@link Beneficiary#getMbiHash()} ()} hash value\n+   * @throws NoResultException A {@link NoResultException} will be thrown if no matching {@link\n+   *     Beneficiary} can be found\n+   */\n+  @Trace\n+  private Patient queryDatabaseByMbiHash(String mbiHash, List<String> includeIdentifiersValues) {\n+    return queryDatabaseByHash(\n+        mbiHash,\n+        \"mbi\",\n+        includeIdentifiersValues,\n+        Beneficiary_.mbiHash,\n+        BeneficiaryHistory_.mbiHash);\n+  }\n+\n+  /**\n+   * @param hash the {@link Beneficiary} hash value to match\n+   * @param hashType a string to represent the hash type (used for logging purposes)\n+   * @param includeIdentifiersValues the {@link #returnIncludeIdentifiersValues(RequestDetails)}\n+   *     value to use\n+   * @param beneficiaryHashField the JPA location of the beneficiary hash field\n+   * @param beneficiaryHistoryHashField the JPA location of the beneficiary history hash field\n+   * @return a FHIR {@link Patient} for the CCW {@link Beneficiary} that matches the specified\n+   *     {@link Beneficiary} hash value\n+   * @throws NoResultException A {@link NoResultException} will be thrown if no matching {@link\n+   *     Beneficiary} can be found\n+   */\n+  @Trace\n+  private Patient queryDatabaseByHash(\n+      String hash,\n+      String hashType,\n+      List<String> includeIdentifiersValues,\n+      SingularAttribute<Beneficiary, String> beneficiaryHashField,\n+      SingularAttribute<BeneficiaryHistory, String> beneficiaryHistoryHashField) {\n+    if (hash == null || hash.trim().isEmpty()) throw new IllegalArgumentException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "originalPosition": 579}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwODIyMA==", "bodyText": "can it be empty?", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r506608220", "createdAt": "2020-10-16T17:07:45Z", "author": {"login": "cbrunefearless"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/TransformerUtilsV2.java", "diffHunk": "@@ -0,0 +1,1332 @@\n+package gov.cms.bfd.server.war.r4.providers;\n+\n+import ca.uhn.fhir.model.api.TemporalPrecisionEnum;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.api.Constants;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import com.justdavis.karl.misc.exceptions.BadCodeMonkeyException;\n+import gov.cms.bfd.model.codebook.data.CcwCodebookVariable;\n+import gov.cms.bfd.model.codebook.model.Value;\n+import gov.cms.bfd.model.codebook.model.Variable;\n+import gov.cms.bfd.model.rif.Beneficiary;\n+import gov.cms.bfd.model.rif.parse.InvalidRifValueException;\n+import gov.cms.bfd.server.war.FDADrugDataUtilityApp;\n+import gov.cms.bfd.server.war.commons.LinkBuilder;\n+import gov.cms.bfd.server.war.commons.OffsetLinkBuilder;\n+import gov.cms.bfd.server.war.commons.TransformerConstants;\n+import gov.cms.bfd.server.war.r4.providers.BeneficiaryTransformerV2.CurrencyIdentifier;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.UncheckedIOException;\n+import java.io.UnsupportedEncodingException;\n+import java.math.BigDecimal;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBaseExtension;\n+import org.hl7.fhir.instance.model.api.IBaseHasExtensions;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.Bundle;\n+import org.hl7.fhir.r4.model.Bundle.BundleEntryComponent;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Coverage;\n+import org.hl7.fhir.r4.model.DateType;\n+import org.hl7.fhir.r4.model.DomainResource;\n+import org.hl7.fhir.r4.model.ExplanationOfBenefit;\n+import org.hl7.fhir.r4.model.ExplanationOfBenefit.AdjudicationComponent;\n+import org.hl7.fhir.r4.model.ExplanationOfBenefit.ItemComponent;\n+import org.hl7.fhir.r4.model.Extension;\n+import org.hl7.fhir.r4.model.Identifier;\n+import org.hl7.fhir.r4.model.Organization;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.hl7.fhir.r4.model.Period;\n+import org.hl7.fhir.r4.model.Practitioner;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.hl7.fhir.r4.model.Resource;\n+import org.hl7.fhir.r4.model.UnsignedIntType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.MDC;\n+\n+/**\n+ * Contains shared methods used to transform CCW JPA entities (e.g. {@link Beneficiary}) into FHIR\n+ * resources (e.g. {@link Patient}).\n+ */\n+public final class TransformerUtilsV2 {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TransformerUtilsV2.class);\n+\n+  /**\n+   * Tracks the {@link CcwCodebookVariable}s that have already had code lookup failures due to\n+   * missing {@link Value} matches. Why track this? To ensure that we don't spam log events for\n+   * failed lookups over and over and over. This was needed to fix CBBF-162, where those log events\n+   * were flooding our logs and filling up the drive.\n+   *\n+   * @see #calculateCodingDisplay(IAnyResource, CcwCodebookVariable, String)\n+   */\n+  private static final Set<CcwCodebookVariable> codebookLookupMissingFailures = new HashSet<>();\n+\n+  /**\n+   * Tracks the {@link CcwCodebookVariable}s that have already had code lookup failures due to\n+   * duplicate {@link Value} matches. Why track this? To ensure that we don't spam log events for\n+   * failed lookups over and over and over. This was needed to fix CBBF-162, where those log events\n+   * were flooding our logs and filling up the drive.\n+   *\n+   * @see #calculateCodingDisplay(IAnyResource, CcwCodebookVariable, String)\n+   */\n+  private static final Set<CcwCodebookVariable> codebookLookupDuplicateFailures = new HashSet<>();\n+\n+  /** Stores the PRODUCTNDC and SUBSTANCENAME from the downloaded NDC file. */\n+  private static Map<String, String> ndcProductMap = null;\n+\n+  /** Tracks the national drug codes that have already had code lookup failures. */\n+  private static final Set<String> drugCodeLookupMissingFailures = new HashSet<>();\n+\n+  /** Stores the diagnosis ICD codes and their display values */\n+  private static Map<String, String> icdMap = null;\n+\n+  /** Stores the procedure codes and their display values */\n+  private static Map<String, String> procedureMap = null;\n+\n+  /** Tracks the procedure codes that have already had code lookup failures. */\n+  private static final Set<String> procedureLookupMissingFailures = new HashSet<>();\n+\n+  /** Stores the NPI codes and their display values */\n+  private static Map<String, String> npiMap = null;\n+\n+  /** Tracks the NPI codes that have already had code lookup failures. */\n+  private static final Set<String> npiCodeLookupMissingFailures = new HashSet<>();\n+\n+  /**\n+   * Adds an {@link Extension} to the specified {@link DomainResource}. {@link Extension#getValue()}\n+   * will be set to a {@link CodeableConcept} containing a single {@link Coding}, with the specified\n+   * system and code.\n+   *\n+   * <p>Data Architecture Note: The {@link CodeableConcept} might seem extraneous -- why not just\n+   * add the {@link Coding} directly to the {@link Extension}? The main reason for doing it this way\n+   * is consistency: this is what FHIR seems to do everywhere.\n+   *\n+   * @param fhirElement the FHIR element to add the {@link Extension} to\n+   * @param extensionUrl the {@link Extension#getUrl()} to use\n+   * @param codingSystem the {@link Coding#getSystem()} to use\n+   * @param codingDisplay the {@link Coding#getDisplay()} to use\n+   * @param codingCode the {@link Coding#getCode()} to use\n+   */\n+  static void addExtensionCoding(\n+      IBaseHasExtensions fhirElement,\n+      String extensionUrl,\n+      String codingSystem,\n+      String codingDisplay,\n+      String codingCode) {\n+    IBaseExtension<?, ?> extension = fhirElement.addExtension();\n+    extension.setUrl(extensionUrl);\n+    if (codingDisplay == null)\n+      extension.setValue(new Coding().setSystem(codingSystem).setCode(codingCode));\n+    else\n+      extension.setValue(\n+          new Coding().setSystem(codingSystem).setCode(codingCode).setDisplay(codingDisplay));\n+  }\n+\n+  /**\n+   * Adds an {@link Extension} to the specified {@link DomainResource}. {@link Extension#getValue()}\n+   * will be set to a {@link Quantity} with the specified system and value.\n+   *\n+   * @param fhirElement the FHIR element to add the {@link Extension} to\n+   * @param extensionUrl the {@link Extension#getUrl()} to use\n+   * @param quantitySystem the {@link Quantity#getSystem()} to use\n+   * @param quantityValue the {@link Quantity#getValue()} to use\n+   */\n+  static void addExtensionValueQuantity(\n+      IBaseHasExtensions fhirElement,\n+      String extensionUrl,\n+      String quantitySystem,\n+      BigDecimal quantityValue) {\n+    IBaseExtension<?, ?> extension = fhirElement.addExtension();\n+    extension.setUrl(extensionUrl);\n+    extension.setValue(new Quantity().setSystem(extensionUrl).setValue(quantityValue));\n+\n+    // CodeableConcept codeableConcept = new CodeableConcept();\n+    // extension.setValue(codeableConcept);\n+    //\n+    // Coding coding = codeableConcept.addCoding();\n+    // coding.setSystem(codingSystem).setCode(codingCode);\n+  }\n+\n+  /**\n+   * Adds an {@link Extension} to the specified {@link DomainResource}. {@link Extension#getValue()}\n+   * will be set to a {@link Identifier} with the specified url, system, and value.\n+   *\n+   * @param fhirElement the FHIR element to add the {@link Extension} to\n+   * @param extensionUrl the {@link Extension#getUrl()} to use\n+   * @param extensionSystem the {@link Identifier#getSystem()} to use\n+   * @param extensionValue the {@link Identifier#getValue()} to use\n+   */\n+  static void addExtensionValueIdentifier(\n+      IBaseHasExtensions fhirElement,\n+      String extensionUrl,\n+      String extensionSystem,\n+      String extensionValue) {\n+    IBaseExtension<?, ?> extension = fhirElement.addExtension();\n+    extension.setUrl(extensionUrl);\n+\n+    Identifier valueIdentifier = new Identifier();\n+    valueIdentifier.setSystem(extensionSystem).setValue(extensionValue);\n+\n+    extension.setValue(valueIdentifier);\n+  }\n+\n+  /**\n+   * @param beneficiary the {@link Beneficiary} to calculate the {@link Patient#getId()} value for\n+   * @return the {@link Patient#getId()} value that will be used for the specified {@link\n+   *     Beneficiary}\n+   */\n+  public static IdDt buildPatientId(Beneficiary beneficiary) {\n+    return buildPatientId(beneficiary.getBeneficiaryId());\n+  }\n+\n+  /**\n+   * @param beneficiaryId the {@link Beneficiary#getBeneficiaryId()} to calculate the {@link\n+   *     Patient#getId()} value for\n+   * @return the {@link Patient#getId()} value that will be used for the specified {@link\n+   *     Beneficiary}\n+   */\n+  public static IdDt buildPatientId(String beneficiaryId) {\n+    return new IdDt(Patient.class.getSimpleName(), beneficiaryId);\n+  }\n+\n+  /**\n+   * @param localDate the {@link LocalDate} to convert\n+   * @return a {@link Date} version of the specified {@link LocalDate}\n+   */\n+  static Date convertToDate(LocalDate localDate) {\n+    /*\n+     * We use the system TZ here to ensure that the date doesn't shift at all, as FHIR will just use\n+     * this as an unzoned Date (I think, and if not, it's almost certainly using the same TZ as this\n+     * system).\n+     */\n+    return Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant());\n+  }\n+\n+  /**\n+   * @param codingSystem the {@link Coding#getSystem()} to use\n+   * @param codingCode the {@link Coding#getCode()} to use\n+   * @return a {@link CodeableConcept} with the specified {@link Coding}\n+   */\n+  static CodeableConcept createCodeableConcept(String codingSystem, String codingCode) {\n+    return createCodeableConcept(codingSystem, null, null, codingCode);\n+  }\n+\n+  /**\n+   * @param codingSystem the {@link Coding#getSystem()} to use\n+   * @param codingVersion the {@link Coding#getVersion()} to use\n+   * @param codingDisplay the {@link Coding#getDisplay()} to use\n+   * @param codingCode the {@link Coding#getCode()} to use\n+   * @return a {@link CodeableConcept} with the specified {@link Coding}\n+   */\n+  static CodeableConcept createCodeableConcept(\n+      String codingSystem, String codingVersion, String codingDisplay, String codingCode) {\n+    CodeableConcept codeableConcept = new CodeableConcept();\n+    Coding coding = codeableConcept.addCoding().setSystem(codingSystem).setCode(codingCode);\n+    if (codingVersion != null) coding.setVersion(codingVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "originalPosition": 250}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNzM2NjAy", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#pullrequestreview-510736602", "createdAt": "2020-10-16T19:12:50Z", "commit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTIzOTg4", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#pullrequestreview-511923988", "createdAt": "2020-10-19T16:04:10Z", "commit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjowNDoxMFrOHkWGvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjowNDoxMFrOHkWGvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3Mjk1Nw==", "bodyText": "From previous PR, notes from @karlmdavis\n\nThe application's configuration is all currently handled by the SpringConfiguration class. If you look, you can note that several of the properties in there are injected via environment variables.\nI think you should probably remove this class, and just use something new in SpringConfiguration, instead.\n\nFeels like a great suggestion, so we don't duplicate how / where we are supplying app configuration. I was previously unaware of this piece of the code. Here's a link to the relevant code: \n  \n    \n      beneficiary-fhir-data/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/SpringConfiguration.java\n    \n    \n         Line 50\n      in\n      af23b39\n    \n    \n    \n    \n\n        \n          \n           public class SpringConfiguration {", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507872957", "createdAt": "2020-10-19T16:04:10Z", "author": {"login": "jzulim"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/FhirAppConfiguration.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package gov.cms.bfd.server.war;\n+\n+import java.io.Serializable;\n+import java.util.Optional;\n+\n+/** Models the configuration options for the application. */\n+public final class FhirAppConfiguration implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTI0NTk1", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#pullrequestreview-511924595", "createdAt": "2020-10-19T16:04:52Z", "commit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjowNDo1MlrOHkWIdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjowNDo1MlrOHkWIdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3MzM5OA==", "bodyText": "From previous PR, notes from @karlmdavis\n\nThe application's configuration is all currently handled by the SpringConfiguration class. If you look, you can note that several of the properties in there are injected via environment variables.\nI think you should probably remove this class, and just use something new in SpringConfiguration, instead.\n\nFeels like a great suggestion, so we don't duplicate how / where we are supplying app configuration. I was previously unaware of this piece of the code. Here's a link to the relevant code: \n  \n    \n      beneficiary-fhir-data/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/SpringConfiguration.java\n    \n    \n         Line 50\n      in\n      af23b39\n    \n    \n    \n    \n\n        \n          \n           public class SpringConfiguration {", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507873398", "createdAt": "2020-10-19T16:04:52Z", "author": {"login": "jzulim"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/LoadFhirAppOptions.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package gov.cms.bfd.server.war;\n+\n+import java.io.Serializable;\n+\n+/** Models the user-configurable application options. */\n+public class LoadFhirAppOptions implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTM3OTAz", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#pullrequestreview-511937903", "createdAt": "2020-10-19T16:19:49Z", "commit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoxOTo0OVrOHkWvyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoxOTo0OVrOHkWvyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4MzQ2NQ==", "bodyText": "I would consider naming this file simply BeneficiaryTransformer.java - as it already resides in the r4 folder.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507883465", "createdAt": "2020-10-19T16:19:49Z", "author": {"login": "jzulim"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/BeneficiaryTransformerV2.java", "diffHunk": "@@ -0,0 +1,340 @@\n+package gov.cms.bfd.server.war.r4.providers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTM5MDAy", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#pullrequestreview-511939002", "createdAt": "2020-10-19T16:21:04Z", "commit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoyMTowNFrOHkWzIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoyMTowNFrOHkWzIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4NDMyMg==", "bodyText": "Same as above, I would consider removing version indicators from the filenames.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507884322", "createdAt": "2020-10-19T16:21:04Z", "author": {"login": "jzulim"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java", "diffHunk": "@@ -0,0 +1,838 @@\n+package gov.cms.bfd.server.war.r4.providers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTM5NDM2", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#pullrequestreview-511939436", "createdAt": "2020-10-19T16:21:38Z", "commit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoyMTozOFrOHkW0jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoyMTozOFrOHkW0jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4NDY4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This FHIR {@link IResourceProvider} adds support for STU3 {@link Patient} resources, derived from\n          \n          \n            \n             * This FHIR {@link IResourceProvider} adds support for R4 {@link Patient} resources, derived from", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507884686", "createdAt": "2020-10-19T16:21:38Z", "author": {"login": "jzulim"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/R4PatientResourceProvider.java", "diffHunk": "@@ -0,0 +1,838 @@\n+package gov.cms.bfd.server.war.r4.providers;\n+\n+import ca.uhn.fhir.model.api.annotation.Description;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.annotation.IdParam;\n+import ca.uhn.fhir.rest.annotation.OptionalParam;\n+import ca.uhn.fhir.rest.annotation.Read;\n+import ca.uhn.fhir.rest.annotation.RequiredParam;\n+import ca.uhn.fhir.rest.annotation.Search;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import com.codahale.metrics.MetricRegistry;\n+import com.codahale.metrics.Timer;\n+import com.newrelic.api.agent.Trace;\n+import gov.cms.bfd.model.codebook.data.CcwCodebookVariable;\n+import gov.cms.bfd.model.rif.Beneficiary;\n+import gov.cms.bfd.model.rif.BeneficiaryHistory;\n+import gov.cms.bfd.model.rif.BeneficiaryHistory_;\n+import gov.cms.bfd.model.rif.Beneficiary_;\n+import gov.cms.bfd.server.war.Operation;\n+import gov.cms.bfd.server.war.commons.LinkBuilder;\n+import gov.cms.bfd.server.war.commons.LoadedFilterManager;\n+import gov.cms.bfd.server.war.commons.OffsetLinkBuilder;\n+import gov.cms.bfd.server.war.commons.PatientLinkBuilder;\n+import gov.cms.bfd.server.war.commons.QueryUtils;\n+import gov.cms.bfd.server.war.commons.TransformerConstants;\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.persistence.EntityManager;\n+import javax.persistence.NoResultException;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.JoinType;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+import javax.persistence.metamodel.SingularAttribute;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.Bundle;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.hl7.fhir.r4.model.Identifier;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.slf4j.MDC;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This FHIR {@link IResourceProvider} adds support for STU3 {@link Patient} resources, derived from", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTQyNzM5", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#pullrequestreview-511942739", "createdAt": "2020-10-19T16:25:29Z", "commit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoyNTozMFrOHkW_Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoyNTozMFrOHkW_Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4NzQyNw==", "bodyText": "Looks like this file was committed on accident.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507887427", "createdAt": "2020-10-19T16:25:30Z", "author": {"login": "jzulim"}, "path": "apps/dependencies/dependency-check-10-12-2020.csv", "diffHunk": "@@ -0,0 +1,195 @@\n+\"Project\",\"ScanDate\",\"DependencyName\",\"DependencyPath\",\"Description\",\"License\",\"Md5\",\"Sha1\",\"Identifiers\",\"CPE\",\"CVE\",\"CWE\",\"Vulnerability\",\"Source\",\"CVSSv2_Severity\",\"CVSSv2_Score\",\"CVSSv2\",\"CVSSv3_BaseSeverity\",\"CVSSv3_BaseScore\",\"CVSSv3\",\"CPE Confidence\",\"Evidence Count\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTU0Mjcw", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#pullrequestreview-511954270", "createdAt": "2020-10-19T16:39:17Z", "commit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjozOToxN1rOHkXiFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjozOToxN1rOHkXiFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NjM0Mg==", "bodyText": "Another useful suggestion from @karlmdavis , pulled from previous PR:\n\nPersonally, I'd disagree: this should be modified in both RestfulServer implementations. It's entirely possible that we will never touch this code again: if we don't clean things up as we encounter them, who will? We should always strive to leave things a little better than we found them.\nIn this specific case, I don't see why a backend API like BFD needs CORS headers at all? I'd ask in #bfd-users and see if anyone objects to us removing it.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507896342", "createdAt": "2020-10-19T16:39:17Z", "author": {"login": "jzulim"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/R4Server.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package gov.cms.bfd.server.war;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.rest.api.EncodingEnum;\n+import ca.uhn.fhir.rest.server.ApacheProxyAddressStrategy;\n+import ca.uhn.fhir.rest.server.ETagSupportEnum;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.RestfulServer;\n+import ca.uhn.fhir.rest.server.interceptor.CorsInterceptor;\n+import ca.uhn.fhir.rest.server.interceptor.IServerInterceptor;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Properties;\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletException;\n+import org.hl7.fhir.r4.hapi.rest.server.ServerCapabilityStatementProvider;\n+import org.hl7.fhir.r4.model.CapabilityStatement;\n+import org.springframework.web.context.ContextLoaderListener;\n+import org.springframework.web.context.WebApplicationContext;\n+import org.springframework.web.cors.CorsConfiguration;\n+\n+/**\n+ * The primary {@link Servlet} for this web application. Uses the <a href=\"http://hapifhir.io/\">HAPI\n+ * FHIR</a> framework to provide a fully functional FHIR API server that queries stored RIF data\n+ * from the CCW and converts it to the proper FHIR format \"on the fly\".\n+ */\n+public class R4Server extends RestfulServer {\n+\n+  private static final long serialVersionUID = 1L;\n+\n+  static final String CAPABILITIES_PUBLISHER = \"Centers for Medicare & Medicaid Services\";\n+  static final String CAPABILITIES_SERVER_NAME = \"Blue Button API: Direct\";\n+\n+  /** Constructs a new {@link R4Server} instance. */\n+  public R4Server() {\n+    super(FhirContext.forR4());\n+    setServerAddressStrategy(ApacheProxyAddressStrategy.forHttp());\n+    configureServerInfoMetadata();\n+  }\n+\n+  /**\n+   * Configures various metadata fields that will be included in this server's {@link\n+   * CapabilityStatement}.\n+   */\n+  private void configureServerInfoMetadata() {\n+    setServerName(CAPABILITIES_SERVER_NAME);\n+\n+    /*\n+     * Read in some of the project metadata from a Maven-filtered properties\n+     * file, which ensures that it's always up to date.\n+     */\n+    Properties projectProps = new Properties();\n+    try (InputStream projectPropsStream =\n+        Thread.currentThread()\n+            .getContextClassLoader()\n+            .getResourceAsStream(\"project.properties\"); ) {\n+      projectProps.load(projectPropsStream);\n+\n+      setImplementationDescription(projectProps.getProperty(\"project.id\"));\n+      setServerVersion(projectProps.getProperty(\"project.version\"));\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(e);\n+    }\n+\n+    // Lightly customize the capability provider to set publisher name.\n+    ServerCapabilityStatementProvider capabilityStatementProvider =\n+        new ServerCapabilityStatementProvider(this);\n+    capabilityStatementProvider.setPublisher(CAPABILITIES_PUBLISHER);\n+    setServerConformanceProvider(capabilityStatementProvider);\n+  }\n+\n+  /** @see ca.uhn.fhir.rest.server.RestfulServer#initialize() */\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  protected void initialize() throws ServletException {\n+    /*\n+     * Grab the application's Spring WebApplicationContext from the web\n+     * container. We can use this to retrieve beans (and anything that needs\n+     * Spring injection/autowiring, e.g. anything that accesses the DB, must\n+     * be a bean).\n+     */\n+    WebApplicationContext springContext = ContextLoaderListener.getCurrentWebApplicationContext();\n+\n+    // Each IResourceProvider adds support for a specific FHIR resource.\n+    List<IResourceProvider> resourceProviders =\n+        springContext.getBean(SpringConfiguration.BLUEBUTTON_R4_RESOURCE_PROVIDERS, List.class);\n+    setResourceProviders(resourceProviders);\n+\n+    /*\n+     * Each \"plain\" provider has one or more annotated methods that provides\n+     * support for non-resource-type methods, such as transaction, and\n+     * global history.\n+     */\n+    List<Object> plainProviders = new ArrayList<>();\n+    setPlainProviders(plainProviders);\n+\n+    /*\n+     * Register the HAPI server interceptors that have been configured in\n+     * Spring.\n+     */\n+    Collection<IServerInterceptor> hapiInterceptors =\n+        springContext.getBeansOfType(IServerInterceptor.class).values();\n+    for (IServerInterceptor hapiInterceptor : hapiInterceptors) {\n+      this.registerInterceptor(hapiInterceptor);\n+    }\n+    /*\n+     * Enable CORS.\n+     */\n+    CorsConfiguration config = new CorsConfiguration();\n+    CorsInterceptor corsInterceptor = new CorsInterceptor(config);\n+    config.addAllowedHeader(\"Accept\");\n+    config.addAllowedHeader(\"Content-Type\");\n+    config.addAllowedOrigin(\"*\");\n+    config.addExposedHeader(\"Location\");\n+    config.addExposedHeader(\"Content-Location\");\n+    config.setAllowedMethods(Arrays.asList(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "originalPosition": 121}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTU0OTY2", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#pullrequestreview-511954966", "createdAt": "2020-10-19T16:40:09Z", "commit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjo0MDowOVrOHkXkQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjo0MDowOVrOHkXkQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5Njg5OA==", "bodyText": "I'd stick with the \"v1\" and \"v2\" naming here, too.", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507896898", "createdAt": "2020-10-19T16:40:09Z", "author": {"login": "jzulim"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/SpringConfiguration.java", "diffHunk": "@@ -61,6 +62,8 @@\n    */\n   static final String BLUEBUTTON_STU3_RESOURCE_PROVIDERS = \"bluebuttonStu3ResourceProviders\";\n \n+  static final String BLUEBUTTON_R4_RESOURCE_PROVIDERS = \"bluebuttonR4ResourceProviders\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTU1NTI5", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#pullrequestreview-511955529", "createdAt": "2020-10-19T16:40:56Z", "commit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjo0MDo1NlrOHkXmCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjo0MDo1NlrOHkXmCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NzM1NA==", "bodyText": "Naming here, too: \"v1\" and \"v2\".", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#discussion_r507897354", "createdAt": "2020-10-19T16:40:56Z", "author": {"login": "jzulim"}, "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/SpringConfiguration.java", "diffHunk": "@@ -324,6 +327,19 @@ public PersistenceAnnotationBeanPostProcessor persistenceAnnotationProcessor() {\n     return stu3ResourceProviders;\n   }\n \n+  /**\n+   * @param r4PatientResourceProvider the application's {@link R4PatientResourceProvider} bean\n+   * @return the {@link List} of R4 {@link IResourceProvider} beans for the application\n+   */\n+  @Bean(name = BLUEBUTTON_R4_RESOURCE_PROVIDERS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTU4NzQw", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#pullrequestreview-511958740", "createdAt": "2020-10-19T16:44:58Z", "commit": {"oid": "e316b2bb0753ecc4e7cd534b66e9fa7cc05635b6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "265ea9672c7f3b8a04c70e2c78fc3b2ff1fb2c60", "author": {"user": {"login": "dshekhar18", "name": "Dave Shekhar"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/265ea9672c7f3b8a04c70e2c78fc3b2ff1fb2c60", "committedDate": "2020-10-20T00:58:20Z", "message": "PR Comments for Patient V2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7b75e5997e97201302453fe4a138ff3cc4db36c", "author": {"user": {"login": "dshekhar18", "name": "Dave Shekhar"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/c7b75e5997e97201302453fe4a138ff3cc4db36c", "committedDate": "2020-10-20T00:59:16Z", "message": "Merge branch 'dshekhar/BFD-293-v2_Patient_POC' of https://github.com/CMSgov/beneficiary-fhir-data into dshekhar/BFD-293-v2_Patient_POC"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "623e51af94b16c2bae6840531ab266b91a949ee3", "author": {"user": {"login": "dshekhar18", "name": "Dave Shekhar"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/623e51af94b16c2bae6840531ab266b91a949ee3", "committedDate": "2020-10-20T02:05:48Z", "message": "Update bfd-server.sh.j2\n\nV2 ENABLED Flag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "696841c6217f1ca6b70fb23a03688905eea05f74", "author": {"user": {"login": "dshekhar18", "name": "Dave Shekhar"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/696841c6217f1ca6b70fb23a03688905eea05f74", "committedDate": "2020-10-20T04:17:34Z", "message": "Update bfd-server.sh.j2\n\nV2 Flag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c303090fc57e1db4b53b5a4e186a02519a65b03", "author": {"user": {"login": "dshekhar18", "name": "Dave Shekhar"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/0c303090fc57e1db4b53b5a4e186a02519a65b03", "committedDate": "2020-10-20T13:33:13Z", "message": "Update bfd-server.sh.j2\n\nV2 flag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8736126d279cbf2658589b69e36ddaf4905ed133", "author": {"user": {"login": "dshekhar18", "name": "Dave Shekhar"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/8736126d279cbf2658589b69e36ddaf4905ed133", "committedDate": "2020-10-20T14:05:55Z", "message": "v2 flah injection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1273bc88ef8c3d709acef6e9b3f6836b7585a16", "author": {"user": {"login": "dshekhar18", "name": "Dave Shekhar"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/e1273bc88ef8c3d709acef6e9b3f6836b7585a16", "committedDate": "2020-10-20T16:17:26Z", "message": "V2 Flag changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ecd2dc805bfa1d8d7993880cd5c9db4a68eca15", "author": {"user": {"login": "dshekhar18", "name": "Dave Shekhar"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/7ecd2dc805bfa1d8d7993880cd5c9db4a68eca15", "committedDate": "2020-10-20T19:34:17Z", "message": "V2 flag enhancement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d0b7868974daedd3416ad337f6331e759526582", "author": {"user": {"login": "dshekhar18", "name": "Dave Shekhar"}}, "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/6d0b7868974daedd3416ad337f6331e759526582", "committedDate": "2020-10-28T17:12:41Z", "message": "V2 Flag fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MDcyOTY2", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#pullrequestreview-519072966", "createdAt": "2020-10-28T20:51:24Z", "commit": {"oid": "6d0b7868974daedd3416ad337f6331e759526582"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NjgwNzQ0", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/378#pullrequestreview-519680744", "createdAt": "2020-10-29T13:47:05Z", "commit": {"oid": "6d0b7868974daedd3416ad337f6331e759526582"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 633, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}