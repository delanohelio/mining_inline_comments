{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NDI3MTQ1", "number": 6048, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTo0MTowOVrOEAb1iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTo0MzoyMlrOEAb4cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODkxNTI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/nextcloud/client/files/downloader/DownloadTask.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTo0MTowOVrOGbtggQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo0OToxMVrOGfZN_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcxMDMzNw==", "bodyText": "This and the next 2 lines is only needed in one special case (FDA:2255), but it should not be hardcoded.", "url": "https://github.com/nextcloud/android/pull/6048#discussion_r431710337", "createdAt": "2020-05-28T09:41:09Z", "author": {"login": "tobiasKaminsky"}, "path": "src/main/java/com/nextcloud/client/files/downloader/DownloadTask.kt", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Nextcloud Android client application\n+ *\n+ * @author Chris Narkiewicz\n+ * Copyright (C) 2020 Chris Narkiewicz <hello@ezaquarii.com>\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package com.nextcloud.client.files.downloader\n+\n+import android.content.ContentResolver\n+import android.content.Context\n+import com.nextcloud.client.core.IsCancelled\n+import com.owncloud.android.datamodel.FileDataStorageManager\n+import com.owncloud.android.datamodel.OCFile\n+import com.owncloud.android.lib.common.OwnCloudClient\n+import com.owncloud.android.operations.DownloadFileOperation\n+import com.owncloud.android.ui.fragment.OCFileListFragment\n+import com.owncloud.android.utils.MimeTypeUtil\n+import java.io.File\n+\n+/**\n+ * This runnable object encapsulates file download logic. It has been extracted to wrap\n+ * network operation and storage manager interactions, as those pose testing challenges\n+ * that cannot be addressed due to large number of dependencies.\n+ *\n+ * This design can be regarded as intermediary refactoring step.\n+ */\n+class DownloadTask(\n+    val context: Context,\n+    val contentResolver: ContentResolver,\n+    val clientProvider: () -> OwnCloudClient\n+) {\n+\n+    /**\n+     * This class is a helper factory to to keep static dependencies\n+     * injection out of the downloader instance.\n+     *\n+     * @param context Context\n+     * @param clientProvider Provide client - this must be called on background thread\n+     * @param contentResolver content resovler used to access file storage\n+     */\n+    class Factory(\n+        private val context: Context,\n+        private val clientProvider: () -> OwnCloudClient,\n+        private val contentResolver: ContentResolver\n+    ) {\n+        fun create(): DownloadTask {\n+            return DownloadTask(context, contentResolver, clientProvider)\n+        }\n+    }\n+\n+    fun download(request: Request, progress: (Int) -> Unit, isCancelled: IsCancelled): Boolean {\n+        val op = DownloadFileOperation(\n+            request.user.toPlatformAccount(),\n+            request.file,\n+            OCFileListFragment.DOWNLOAD_SEND,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70ab37d17d5862a3e611344bf630e968baf61d32"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2MzY0Mg==", "bodyText": "@tobiasKaminsky\nThe thing is that DownloadFileOperation does not use those values for anything.\nIt seems to me that it just carries them around so FileDownloader can action finished operation.\nThere is nothing wrong with that approach, but since new downloader implementation does not support sending downloaded files anywhere at this moment, we don't need those values.\nI'm also pretty sure that we won't use them in the future, because new implementation splits request, download state and download code into separate entitites and it doesn't have access to DownloadFileOperation instance, becuase download mechanism is hidden behind opaque function/lambda interface.\nAt first glance, information about post-download actions should be carried by Request and actioned in DownloaderService when downloader signals completion or failure.\nHowever, it's pretty pointless to put those hardcoded values here, so I'll add an overloaded constructor for this case.", "url": "https://github.com/nextcloud/android/pull/6048#discussion_r435563642", "createdAt": "2020-06-04T21:29:13Z", "author": {"login": "ezaquarii"}, "path": "src/main/java/com/nextcloud/client/files/downloader/DownloadTask.kt", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Nextcloud Android client application\n+ *\n+ * @author Chris Narkiewicz\n+ * Copyright (C) 2020 Chris Narkiewicz <hello@ezaquarii.com>\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package com.nextcloud.client.files.downloader\n+\n+import android.content.ContentResolver\n+import android.content.Context\n+import com.nextcloud.client.core.IsCancelled\n+import com.owncloud.android.datamodel.FileDataStorageManager\n+import com.owncloud.android.datamodel.OCFile\n+import com.owncloud.android.lib.common.OwnCloudClient\n+import com.owncloud.android.operations.DownloadFileOperation\n+import com.owncloud.android.ui.fragment.OCFileListFragment\n+import com.owncloud.android.utils.MimeTypeUtil\n+import java.io.File\n+\n+/**\n+ * This runnable object encapsulates file download logic. It has been extracted to wrap\n+ * network operation and storage manager interactions, as those pose testing challenges\n+ * that cannot be addressed due to large number of dependencies.\n+ *\n+ * This design can be regarded as intermediary refactoring step.\n+ */\n+class DownloadTask(\n+    val context: Context,\n+    val contentResolver: ContentResolver,\n+    val clientProvider: () -> OwnCloudClient\n+) {\n+\n+    /**\n+     * This class is a helper factory to to keep static dependencies\n+     * injection out of the downloader instance.\n+     *\n+     * @param context Context\n+     * @param clientProvider Provide client - this must be called on background thread\n+     * @param contentResolver content resovler used to access file storage\n+     */\n+    class Factory(\n+        private val context: Context,\n+        private val clientProvider: () -> OwnCloudClient,\n+        private val contentResolver: ContentResolver\n+    ) {\n+        fun create(): DownloadTask {\n+            return DownloadTask(context, contentResolver, clientProvider)\n+        }\n+    }\n+\n+    fun download(request: Request, progress: (Int) -> Unit, isCancelled: IsCancelled): Boolean {\n+        val op = DownloadFileOperation(\n+            request.user.toPlatformAccount(),\n+            request.file,\n+            OCFileListFragment.DOWNLOAD_SEND,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcxMDMzNw=="}, "originalCommit": {"oid": "70ab37d17d5862a3e611344bf630e968baf61d32"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MjIyMQ==", "bodyText": "@tobiasKaminsky Let me know if you'd like to migrate more use cases to the downloader as part of this PR - in such case, we'll need to add this functionality. If this is not the case, I think we can skip it. I'm confident that the design is ready to support this feature with minimal effort when we decide migrate preview functionality to the new API.", "url": "https://github.com/nextcloud/android/pull/6048#discussion_r435572221", "createdAt": "2020-06-04T21:49:11Z", "author": {"login": "ezaquarii"}, "path": "src/main/java/com/nextcloud/client/files/downloader/DownloadTask.kt", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Nextcloud Android client application\n+ *\n+ * @author Chris Narkiewicz\n+ * Copyright (C) 2020 Chris Narkiewicz <hello@ezaquarii.com>\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package com.nextcloud.client.files.downloader\n+\n+import android.content.ContentResolver\n+import android.content.Context\n+import com.nextcloud.client.core.IsCancelled\n+import com.owncloud.android.datamodel.FileDataStorageManager\n+import com.owncloud.android.datamodel.OCFile\n+import com.owncloud.android.lib.common.OwnCloudClient\n+import com.owncloud.android.operations.DownloadFileOperation\n+import com.owncloud.android.ui.fragment.OCFileListFragment\n+import com.owncloud.android.utils.MimeTypeUtil\n+import java.io.File\n+\n+/**\n+ * This runnable object encapsulates file download logic. It has been extracted to wrap\n+ * network operation and storage manager interactions, as those pose testing challenges\n+ * that cannot be addressed due to large number of dependencies.\n+ *\n+ * This design can be regarded as intermediary refactoring step.\n+ */\n+class DownloadTask(\n+    val context: Context,\n+    val contentResolver: ContentResolver,\n+    val clientProvider: () -> OwnCloudClient\n+) {\n+\n+    /**\n+     * This class is a helper factory to to keep static dependencies\n+     * injection out of the downloader instance.\n+     *\n+     * @param context Context\n+     * @param clientProvider Provide client - this must be called on background thread\n+     * @param contentResolver content resovler used to access file storage\n+     */\n+    class Factory(\n+        private val context: Context,\n+        private val clientProvider: () -> OwnCloudClient,\n+        private val contentResolver: ContentResolver\n+    ) {\n+        fun create(): DownloadTask {\n+            return DownloadTask(context, contentResolver, clientProvider)\n+        }\n+    }\n+\n+    fun download(request: Request, progress: (Int) -> Unit, isCancelled: IsCancelled): Boolean {\n+        val op = DownloadFileOperation(\n+            request.user.toPlatformAccount(),\n+            request.file,\n+            OCFileListFragment.DOWNLOAD_SEND,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcxMDMzNw=="}, "originalCommit": {"oid": "70ab37d17d5862a3e611344bf630e968baf61d32"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODkyMjczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/owncloud/android/ui/fragment/contactsbackup/ContactListFragment.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTo0MzoyMlrOGbtlag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTowNzowMVrOGfXz8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcxMTU5NA==", "bodyText": "With the new approach, is this roundtrip via FDSM needed, as we already have the OCFile?", "url": "https://github.com/nextcloud/android/pull/6048#discussion_r431711594", "createdAt": "2020-05-28T09:43:22Z", "author": {"login": "tobiasKaminsky"}, "path": "src/main/java/com/owncloud/android/ui/fragment/contactsbackup/ContactListFragment.java", "diffHunk": "@@ -497,19 +503,16 @@ public int hashCode() {\n         }\n     }\n \n-    private class DownloadFinishReceiver extends BroadcastReceiver {\n-\n-        @Override\n-        public void onReceive(Context context, Intent intent) {\n-            if (FileDownloader.getDownloadFinishMessage().equalsIgnoreCase(intent.getAction())) {\n-                String downloadedRemotePath = intent.getStringExtra(FileDownloader.EXTRA_REMOTE_PATH);\n-\n-                FileDataStorageManager storageManager = new FileDataStorageManager(user.toPlatformAccount(),\n-                                                                                   context.getContentResolver());\n-                ocFile = storageManager.getFileByPath(downloadedRemotePath);\n-                loadContactsTask.execute();\n-            }\n+    private Unit onDownloadUpdate(Download download) {\n+        final Activity activity = getActivity();\n+        if (download.getState() == DownloadState.COMPLETED && activity != null) {\n+            String downloadedRemotePath = download.getRequest().getFile().getRemotePath();\n+            FileDataStorageManager storageManager = new FileDataStorageManager(user.toPlatformAccount(),\n+                                                                               activity.getContentResolver());\n+            ocFile = storageManager.getFileByPath(downloadedRemotePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70ab37d17d5862a3e611344bf630e968baf61d32"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzNDQ2Nw==", "bodyText": "OCFile in download status is part of the Request, so it's not updated.\nDownloadStatus does not carry result OCFile, but this can be changed.", "url": "https://github.com/nextcloud/android/pull/6048#discussion_r432134467", "createdAt": "2020-05-28T21:28:45Z", "author": {"login": "ezaquarii"}, "path": "src/main/java/com/owncloud/android/ui/fragment/contactsbackup/ContactListFragment.java", "diffHunk": "@@ -497,19 +503,16 @@ public int hashCode() {\n         }\n     }\n \n-    private class DownloadFinishReceiver extends BroadcastReceiver {\n-\n-        @Override\n-        public void onReceive(Context context, Intent intent) {\n-            if (FileDownloader.getDownloadFinishMessage().equalsIgnoreCase(intent.getAction())) {\n-                String downloadedRemotePath = intent.getStringExtra(FileDownloader.EXTRA_REMOTE_PATH);\n-\n-                FileDataStorageManager storageManager = new FileDataStorageManager(user.toPlatformAccount(),\n-                                                                                   context.getContentResolver());\n-                ocFile = storageManager.getFileByPath(downloadedRemotePath);\n-                loadContactsTask.execute();\n-            }\n+    private Unit onDownloadUpdate(Download download) {\n+        final Activity activity = getActivity();\n+        if (download.getState() == DownloadState.COMPLETED && activity != null) {\n+            String downloadedRemotePath = download.getRequest().getFile().getRemotePath();\n+            FileDataStorageManager storageManager = new FileDataStorageManager(user.toPlatformAccount(),\n+                                                                               activity.getContentResolver());\n+            ocFile = storageManager.getFileByPath(downloadedRemotePath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcxMTU5NA=="}, "originalCommit": {"oid": "70ab37d17d5862a3e611344bf630e968baf61d32"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0OTE3MA==", "bodyText": "@tobiasKaminsky Downloaded OCFile is now exposed in the download status.", "url": "https://github.com/nextcloud/android/pull/6048#discussion_r435549170", "createdAt": "2020-06-04T21:07:01Z", "author": {"login": "ezaquarii"}, "path": "src/main/java/com/owncloud/android/ui/fragment/contactsbackup/ContactListFragment.java", "diffHunk": "@@ -497,19 +503,16 @@ public int hashCode() {\n         }\n     }\n \n-    private class DownloadFinishReceiver extends BroadcastReceiver {\n-\n-        @Override\n-        public void onReceive(Context context, Intent intent) {\n-            if (FileDownloader.getDownloadFinishMessage().equalsIgnoreCase(intent.getAction())) {\n-                String downloadedRemotePath = intent.getStringExtra(FileDownloader.EXTRA_REMOTE_PATH);\n-\n-                FileDataStorageManager storageManager = new FileDataStorageManager(user.toPlatformAccount(),\n-                                                                                   context.getContentResolver());\n-                ocFile = storageManager.getFileByPath(downloadedRemotePath);\n-                loadContactsTask.execute();\n-            }\n+    private Unit onDownloadUpdate(Download download) {\n+        final Activity activity = getActivity();\n+        if (download.getState() == DownloadState.COMPLETED && activity != null) {\n+            String downloadedRemotePath = download.getRequest().getFile().getRemotePath();\n+            FileDataStorageManager storageManager = new FileDataStorageManager(user.toPlatformAccount(),\n+                                                                               activity.getContentResolver());\n+            ocFile = storageManager.getFileByPath(downloadedRemotePath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcxMTU5NA=="}, "originalCommit": {"oid": "70ab37d17d5862a3e611344bf630e968baf61d32"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3016, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}