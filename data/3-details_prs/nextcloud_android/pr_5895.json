{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0ODIyMDM0", "number": 5895, "title": "Migrate remaining jobs to work manager api", "bodyText": "migrated remaining jobs to work manager\nremoved all refecences of old *Job classes", "createdAt": "2020-04-16T23:09:22Z", "url": "https://github.com/nextcloud/android/pull/5895", "merged": true, "mergeCommit": {"oid": "f9a2223b325610b62f4a6f30fc81164dc6fc575e"}, "closed": true, "closedAt": "2020-04-30T14:09:48Z", "author": {"login": "ezaquarii"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYXPMygFqTM5NTEwODcyMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcctrDfgFqTQwMzU1NjY4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MTA4NzIz", "url": "https://github.com/nextcloud/android/pull/5895#pullrequestreview-395108723", "createdAt": "2020-04-17T01:44:40Z", "commit": {"oid": "5733d24a625300a8627c4a0c673c7f5432585de5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMTo0NDo0MFrOGG9DxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMTo0NDo0MFrOGG9DxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0NTAyOA==", "bodyText": "Issue found: LongParameterList - 7/6 - [AccountRemovalWork] at /src/src/main/java/com/nextcloud/client/jobs/AccountRemovalWork.kt:64:25", "url": "https://github.com/nextcloud/android/pull/5895#discussion_r409945028", "createdAt": "2020-04-17T01:44:40Z", "author": {"login": "nextcloud-android-bot"}, "path": "src/main/java/com/nextcloud/client/jobs/AccountRemovalWork.kt", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+* Nextcloud Android client application\n+*\n+* @author Tobias Kaminsky\n+* @author Chris Narkiewicz\n+*\n+* Copyright (C) 2017 Tobias Kaminsky\n+* Copyright (C) 2017 Nextcloud GmbH.\n+* Copyright (C) 2020 Chris Narkiewicz <hello@ezaquarii.com>\n+*\n+* This program is free software: you can redistribute it and/or modify\n+* it under the terms of the GNU Affero General Public License as published by\n+* the Free Software Foundation, either version 3 of the License, or\n+* at your option) any later version.\n+*\n+* This program is distributed in the hope that it will be useful,\n+* but WITHOUT ANY WARRANTY; without even the implied warranty of\n+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+* GNU Affero General Public License for more details.\n+*\n+* You should have received a copy of the GNU Affero General Public License\n+* along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+package com.nextcloud.client.jobs\n+\n+import android.accounts.Account\n+import android.content.Context\n+import android.os.Build\n+import android.provider.DocumentsContract\n+import android.text.TextUtils\n+import androidx.work.Worker\n+import androidx.work.WorkerParameters\n+import com.google.gson.Gson\n+import com.nextcloud.client.account.User\n+import com.nextcloud.client.account.UserAccountManager\n+import com.nextcloud.client.core.Clock\n+import com.nextcloud.client.preferences.AppPreferencesImpl\n+import com.nextcloud.java.util.Optional\n+import com.owncloud.android.MainApp\n+import com.owncloud.android.R\n+import com.owncloud.android.datamodel.ArbitraryDataProvider\n+import com.owncloud.android.datamodel.FileDataStorageManager\n+import com.owncloud.android.datamodel.FilesystemDataProvider\n+import com.owncloud.android.datamodel.PushConfigurationState\n+import com.owncloud.android.datamodel.SyncedFolderProvider\n+import com.owncloud.android.datamodel.UploadsStorageManager\n+import com.owncloud.android.lib.common.OwnCloudClient\n+import com.owncloud.android.lib.common.OwnCloudClientManagerFactory\n+import com.owncloud.android.lib.common.utils.Log_OC\n+import com.owncloud.android.lib.resources.users.RemoteWipeSuccessRemoteOperation\n+import com.owncloud.android.ui.activity.ContactsPreferenceActivity\n+import com.owncloud.android.ui.activity.ManageAccountsActivity\n+import com.owncloud.android.ui.events.AccountRemovedEvent\n+import com.owncloud.android.utils.EncryptionUtils\n+import com.owncloud.android.utils.FileStorageUtils\n+import com.owncloud.android.utils.PushUtils\n+import org.greenrobot.eventbus.EventBus\n+import java.io.File\n+import java.util.ArrayList\n+\n+/**\n+ * Removes account and all local files\n+ */\n+class AccountRemovalWork(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5733d24a625300a8627c4a0c673c7f5432585de5"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MTA4NzMx", "url": "https://github.com/nextcloud/android/pull/5895#pullrequestreview-395108731", "createdAt": "2020-04-17T01:44:41Z", "commit": {"oid": "5733d24a625300a8627c4a0c673c7f5432585de5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMTo0NDo0MVrOGG9DzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMTo0NDo0MVrOGG9DzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0NTAzNg==", "bodyText": "Issue found: ComplexMethod - 16/10 - [onReceive] at /src/src/main/java/com/nextcloud/client/jobs/NotificationWork.kt:236:22", "url": "https://github.com/nextcloud/android/pull/5895#discussion_r409945036", "createdAt": "2020-04-17T01:44:41Z", "author": {"login": "nextcloud-android-bot"}, "path": "src/main/java/com/nextcloud/client/jobs/NotificationWork.kt", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+* Nextcloud application\n+*\n+* @author Mario Danic\n+* @author Chris Narkiewicz\n+* Copyright (C) 2017-2018 Mario Danic <mario@lovelyhq.com>\n+* Copyright (C) 2020 Chris Narkiewicz <hello@ezaquarii.com>\n+*\n+* This program is free software: you can redistribute it and/or modify\n+* it under the terms of the GNU General Public License as published by\n+* the Free Software Foundation, either version 3 of the License, or\n+* at your option) any later version.\n+*\n+* This program is distributed in the hope that it will be useful,\n+* but WITHOUT ANY WARRANTY; without even the implied warranty of\n+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+* GNU General Public License for more details.\n+*\n+* You should have received a copy of the GNU General Public License\n+* along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+package com.nextcloud.client.jobs\n+\n+import android.accounts.AuthenticatorException\n+import android.accounts.OperationCanceledException\n+import android.app.Activity\n+import android.app.NotificationManager\n+import android.app.PendingIntent\n+import android.content.BroadcastReceiver\n+import android.content.Context\n+import android.content.Intent\n+import android.graphics.BitmapFactory\n+import android.media.RingtoneManager\n+import android.os.Build\n+import android.text.TextUtils\n+import android.util.Base64\n+import android.util.Log\n+import androidx.core.app.NotificationCompat\n+import androidx.core.app.NotificationManagerCompat\n+import androidx.work.Worker\n+import androidx.work.WorkerParameters\n+import com.google.gson.Gson\n+import com.nextcloud.client.account.User\n+import com.nextcloud.client.account.UserAccountManager\n+import com.owncloud.android.R\n+import com.owncloud.android.datamodel.DecryptedPushMessage\n+import com.owncloud.android.lib.common.OwnCloudClient\n+import com.owncloud.android.lib.common.OwnCloudClientManagerFactory\n+import com.owncloud.android.lib.common.operations.RemoteOperation\n+import com.owncloud.android.lib.common.utils.Log_OC\n+import com.owncloud.android.lib.resources.notifications.DeleteNotificationRemoteOperation\n+import com.owncloud.android.lib.resources.notifications.GetNotificationRemoteOperation\n+import com.owncloud.android.lib.resources.notifications.models.Notification\n+import com.owncloud.android.ui.activity.FileDisplayActivity\n+import com.owncloud.android.ui.activity.NotificationsActivity\n+import com.owncloud.android.ui.notifications.NotificationUtils\n+import com.owncloud.android.utils.PushUtils\n+import com.owncloud.android.utils.ThemeUtils\n+import dagger.android.AndroidInjection\n+import org.apache.commons.httpclient.HttpMethod\n+import org.apache.commons.httpclient.HttpStatus\n+import org.apache.commons.httpclient.methods.DeleteMethod\n+import org.apache.commons.httpclient.methods.GetMethod\n+import org.apache.commons.httpclient.methods.PutMethod\n+import org.apache.commons.httpclient.methods.Utf8PostMethod\n+import java.io.IOException\n+import java.security.GeneralSecurityException\n+import java.security.PrivateKey\n+import java.security.SecureRandom\n+import javax.crypto.Cipher\n+import javax.inject.Inject\n+\n+class NotificationWork constructor(\n+    private val context: Context,\n+    params: WorkerParameters,\n+    private val notificationManager: NotificationManager,\n+    private val accountManager: UserAccountManager\n+) : Worker(context, params) {\n+\n+    companion object {\n+        const val TAG = \"NotificationJob\"\n+        const val KEY_NOTIFICATION_ACCOUNT = \"KEY_NOTIFICATION_ACCOUNT\"\n+        const val KEY_NOTIFICATION_SUBJECT = \"subject\"\n+        const val KEY_NOTIFICATION_SIGNATURE = \"signature\"\n+        private const val KEY_NOTIFICATION_ACTION_LINK = \"KEY_NOTIFICATION_ACTION_LINK\"\n+        private const val KEY_NOTIFICATION_ACTION_TYPE = \"KEY_NOTIFICATION_ACTION_TYPE\"\n+        private const val PUSH_NOTIFICATION_ID = \"PUSH_NOTIFICATION_ID\"\n+        private const val NUMERIC_NOTIFICATION_ID = \"NUMERIC_NOTIFICATION_ID\"\n+    }\n+\n+    @Suppress(\"NestedBlockDepth\", \"ComplexMethod\", \"LongMethod\") // legacy code\n+    override fun doWork(): Result {\n+        val subject = inputData.getString(KEY_NOTIFICATION_SUBJECT) ?: \"\"\n+        val signature = inputData.getString(KEY_NOTIFICATION_SIGNATURE) ?: \"\"\n+        if (!TextUtils.isEmpty(subject) && !TextUtils.isEmpty(signature)) {\n+            @Suppress(\"TooGenericExceptionCaught\") // legacy code\n+            try {\n+                val base64DecodedSubject = Base64.decode(subject, Base64.DEFAULT)\n+                val base64DecodedSignature = Base64.decode(signature, Base64.DEFAULT)\n+                val privateKey = PushUtils.readKeyFromFile(false) as PrivateKey\n+                try {\n+                    val signatureVerification = PushUtils.verifySignature(context,\n+                        accountManager,\n+                        base64DecodedSignature,\n+                        base64DecodedSubject)\n+                    if (signatureVerification != null && signatureVerification.isSignatureValid) {\n+                        val cipher = Cipher.getInstance(\"RSA/None/PKCS1Padding\")\n+                        cipher.init(Cipher.DECRYPT_MODE, privateKey)\n+                        val decryptedSubject = cipher.doFinal(base64DecodedSubject)\n+                        val gson = Gson()\n+                        val decryptedPushMessage = gson.fromJson(String(decryptedSubject),\n+                            DecryptedPushMessage::class.java)\n+                        if (decryptedPushMessage.delete) {\n+                            notificationManager.cancel(decryptedPushMessage.nid)\n+                        } else if (decryptedPushMessage.deleteAll) {\n+                            notificationManager.cancelAll()\n+                        } else {\n+                            val user = accountManager.getUser(signatureVerification.getAccount().name)\n+                                .orElseThrow { RuntimeException() }\n+                            fetchCompleteNotification(user, decryptedPushMessage)\n+                        }\n+                    }\n+                } catch (e1: GeneralSecurityException) {\n+                    Log.d(TAG, \"Error decrypting message ${e1.javaClass.name} ${e1.localizedMessage}\")\n+                }\n+            } catch (exception: Exception) {\n+                Log.d(TAG, \"Something went very wrong\" + exception.localizedMessage)\n+            }\n+        }\n+        return Result.success()\n+    }\n+\n+    private fun sendNotification(notification: Notification, user: User) {\n+        val randomId = SecureRandom()\n+        val file = notification.subjectRichParameters[\"file\"]\n+        val intent: Intent\n+        if (file == null) {\n+            intent = Intent(context, NotificationsActivity::class.java)\n+        } else {\n+            intent = Intent(context, FileDisplayActivity::class.java)\n+            intent.action = Intent.ACTION_VIEW\n+            intent.putExtra(FileDisplayActivity.KEY_FILE_ID, file.id)\n+        }\n+        intent.putExtra(KEY_NOTIFICATION_ACCOUNT, user.accountName)\n+        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\n+        val pendingIntent = PendingIntent.getActivity(context, 0, intent, PendingIntent.FLAG_ONE_SHOT)\n+        val pushNotificationId = randomId.nextInt()\n+        val notificationBuilder = NotificationCompat.Builder(context, NotificationUtils.NOTIFICATION_CHANNEL_PUSH)\n+            .setSmallIcon(R.drawable.notification_icon)\n+            .setLargeIcon(BitmapFactory.decodeResource(context.resources, R.drawable.notification_icon))\n+            .setColor(ThemeUtils.primaryColor(user.toPlatformAccount(), false, context))\n+            .setShowWhen(true)\n+            .setSubText(user.accountName)\n+            .setContentTitle(notification.getSubject())\n+            .setContentText(notification.getMessage())\n+            .setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION))\n+            .setAutoCancel(true)\n+            .setVisibility(NotificationCompat.VISIBILITY_PRIVATE)\n+            .setContentIntent(pendingIntent)\n+        // Remove\n+        if (notification.getActions().isEmpty()) {\n+            val disableDetection = Intent(context, NotificationReceiver::class.java)\n+            disableDetection.putExtra(NUMERIC_NOTIFICATION_ID, notification.getNotificationId())\n+            disableDetection.putExtra(PUSH_NOTIFICATION_ID, pushNotificationId)\n+            disableDetection.putExtra(KEY_NOTIFICATION_ACCOUNT, user.accountName)\n+            val disableIntent = PendingIntent.getBroadcast(context, pushNotificationId, disableDetection,\n+                PendingIntent.FLAG_CANCEL_CURRENT)\n+            notificationBuilder.addAction(NotificationCompat.Action(R.drawable.ic_close,\n+                context.getString(R.string.remove_push_notification), disableIntent))\n+        } else { // Actions\n+            for (action in notification.getActions()) {\n+                val actionIntent = Intent(context, NotificationReceiver::class.java)\n+                actionIntent.putExtra(NUMERIC_NOTIFICATION_ID, notification.getNotificationId())\n+                actionIntent.putExtra(PUSH_NOTIFICATION_ID, pushNotificationId)\n+                actionIntent.putExtra(KEY_NOTIFICATION_ACCOUNT, user.accountName)\n+                actionIntent.putExtra(KEY_NOTIFICATION_ACTION_LINK, action.link)\n+                actionIntent.putExtra(KEY_NOTIFICATION_ACTION_TYPE, action.type)\n+                val actionPendingIntent = PendingIntent.getBroadcast(context, randomId.nextInt(),\n+                    actionIntent,\n+                    PendingIntent.FLAG_CANCEL_CURRENT)\n+                var icon: Int\n+                icon = if (action.primary) {\n+                    R.drawable.ic_check_circle\n+                } else {\n+                    R.drawable.ic_check_circle_outline\n+                }\n+                notificationBuilder.addAction(NotificationCompat.Action(icon, action.label, actionPendingIntent))\n+            }\n+        }\n+        notificationBuilder.setPublicVersion(\n+            NotificationCompat.Builder(context, NotificationUtils.NOTIFICATION_CHANNEL_PUSH)\n+                .setSmallIcon(R.drawable.notification_icon)\n+                .setLargeIcon(BitmapFactory.decodeResource(context.resources, R.drawable.notification_icon))\n+                .setColor(ThemeUtils.primaryColor(user.toPlatformAccount(), false, context))\n+                .setShowWhen(true)\n+                .setSubText(user.accountName)\n+                .setContentTitle(context.getString(R.string.new_notification))\n+                .setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION))\n+                .setAutoCancel(true)\n+                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\n+                .setContentIntent(pendingIntent).build())\n+        val notificationManager = NotificationManagerCompat.from(context)\n+        notificationManager.notify(notification.getNotificationId(), notificationBuilder.build())\n+    }\n+\n+    private fun fetchCompleteNotification(account: User, decryptedPushMessage: DecryptedPushMessage) {\n+        val optionalUser = accountManager.getUser(account.accountName)\n+        if (!optionalUser.isPresent) {\n+            Log_OC.e(this, \"Account may not be null\")\n+            return\n+        }\n+        val user = optionalUser.get()\n+        @Suppress(\"TooGenericExceptionCaught\") // legacy code\n+        try {\n+            val client = OwnCloudClientManagerFactory.getDefaultSingleton()\n+                .getClientFor(user.toOwnCloudAccount(), context)\n+            val result = GetNotificationRemoteOperation(decryptedPushMessage.nid)\n+                .execute(client)\n+            if (result.isSuccess) {\n+                val notification = result.notificationData[0]\n+                sendNotification(notification, account)\n+            }\n+        } catch (e: Exception) {\n+            Log_OC.e(this, \"Error creating account\", e)\n+        }\n+    }\n+\n+    class NotificationReceiver : BroadcastReceiver() {\n+        private var userAccountManager: UserAccountManager? = null\n+\n+        @Inject\n+        fun setUserAccountManager(uac: UserAccountManager) {\n+            this.userAccountManager = uac\n+        }\n+\n+        override fun onReceive(context: Context, intent: Intent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5733d24a625300a8627c4a0c673c7f5432585de5"}, "originalPosition": 236}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MTA4NzM3", "url": "https://github.com/nextcloud/android/pull/5895#pullrequestreview-395108737", "createdAt": "2020-04-17T01:44:42Z", "commit": {"oid": "5733d24a625300a8627c4a0c673c7f5432585de5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMTo0NDo0MlrOGG9D0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMTo0NDo0MlrOGG9D0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0NTA0MA==", "bodyText": "Issue found: LongMethod - 71/60 - [sendNotification] at /src/src/main/java/com/nextcloud/client/jobs/NotificationWork.kt:133:17", "url": "https://github.com/nextcloud/android/pull/5895#discussion_r409945040", "createdAt": "2020-04-17T01:44:42Z", "author": {"login": "nextcloud-android-bot"}, "path": "src/main/java/com/nextcloud/client/jobs/NotificationWork.kt", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+* Nextcloud application\n+*\n+* @author Mario Danic\n+* @author Chris Narkiewicz\n+* Copyright (C) 2017-2018 Mario Danic <mario@lovelyhq.com>\n+* Copyright (C) 2020 Chris Narkiewicz <hello@ezaquarii.com>\n+*\n+* This program is free software: you can redistribute it and/or modify\n+* it under the terms of the GNU General Public License as published by\n+* the Free Software Foundation, either version 3 of the License, or\n+* at your option) any later version.\n+*\n+* This program is distributed in the hope that it will be useful,\n+* but WITHOUT ANY WARRANTY; without even the implied warranty of\n+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+* GNU General Public License for more details.\n+*\n+* You should have received a copy of the GNU General Public License\n+* along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+package com.nextcloud.client.jobs\n+\n+import android.accounts.AuthenticatorException\n+import android.accounts.OperationCanceledException\n+import android.app.Activity\n+import android.app.NotificationManager\n+import android.app.PendingIntent\n+import android.content.BroadcastReceiver\n+import android.content.Context\n+import android.content.Intent\n+import android.graphics.BitmapFactory\n+import android.media.RingtoneManager\n+import android.os.Build\n+import android.text.TextUtils\n+import android.util.Base64\n+import android.util.Log\n+import androidx.core.app.NotificationCompat\n+import androidx.core.app.NotificationManagerCompat\n+import androidx.work.Worker\n+import androidx.work.WorkerParameters\n+import com.google.gson.Gson\n+import com.nextcloud.client.account.User\n+import com.nextcloud.client.account.UserAccountManager\n+import com.owncloud.android.R\n+import com.owncloud.android.datamodel.DecryptedPushMessage\n+import com.owncloud.android.lib.common.OwnCloudClient\n+import com.owncloud.android.lib.common.OwnCloudClientManagerFactory\n+import com.owncloud.android.lib.common.operations.RemoteOperation\n+import com.owncloud.android.lib.common.utils.Log_OC\n+import com.owncloud.android.lib.resources.notifications.DeleteNotificationRemoteOperation\n+import com.owncloud.android.lib.resources.notifications.GetNotificationRemoteOperation\n+import com.owncloud.android.lib.resources.notifications.models.Notification\n+import com.owncloud.android.ui.activity.FileDisplayActivity\n+import com.owncloud.android.ui.activity.NotificationsActivity\n+import com.owncloud.android.ui.notifications.NotificationUtils\n+import com.owncloud.android.utils.PushUtils\n+import com.owncloud.android.utils.ThemeUtils\n+import dagger.android.AndroidInjection\n+import org.apache.commons.httpclient.HttpMethod\n+import org.apache.commons.httpclient.HttpStatus\n+import org.apache.commons.httpclient.methods.DeleteMethod\n+import org.apache.commons.httpclient.methods.GetMethod\n+import org.apache.commons.httpclient.methods.PutMethod\n+import org.apache.commons.httpclient.methods.Utf8PostMethod\n+import java.io.IOException\n+import java.security.GeneralSecurityException\n+import java.security.PrivateKey\n+import java.security.SecureRandom\n+import javax.crypto.Cipher\n+import javax.inject.Inject\n+\n+class NotificationWork constructor(\n+    private val context: Context,\n+    params: WorkerParameters,\n+    private val notificationManager: NotificationManager,\n+    private val accountManager: UserAccountManager\n+) : Worker(context, params) {\n+\n+    companion object {\n+        const val TAG = \"NotificationJob\"\n+        const val KEY_NOTIFICATION_ACCOUNT = \"KEY_NOTIFICATION_ACCOUNT\"\n+        const val KEY_NOTIFICATION_SUBJECT = \"subject\"\n+        const val KEY_NOTIFICATION_SIGNATURE = \"signature\"\n+        private const val KEY_NOTIFICATION_ACTION_LINK = \"KEY_NOTIFICATION_ACTION_LINK\"\n+        private const val KEY_NOTIFICATION_ACTION_TYPE = \"KEY_NOTIFICATION_ACTION_TYPE\"\n+        private const val PUSH_NOTIFICATION_ID = \"PUSH_NOTIFICATION_ID\"\n+        private const val NUMERIC_NOTIFICATION_ID = \"NUMERIC_NOTIFICATION_ID\"\n+    }\n+\n+    @Suppress(\"NestedBlockDepth\", \"ComplexMethod\", \"LongMethod\") // legacy code\n+    override fun doWork(): Result {\n+        val subject = inputData.getString(KEY_NOTIFICATION_SUBJECT) ?: \"\"\n+        val signature = inputData.getString(KEY_NOTIFICATION_SIGNATURE) ?: \"\"\n+        if (!TextUtils.isEmpty(subject) && !TextUtils.isEmpty(signature)) {\n+            @Suppress(\"TooGenericExceptionCaught\") // legacy code\n+            try {\n+                val base64DecodedSubject = Base64.decode(subject, Base64.DEFAULT)\n+                val base64DecodedSignature = Base64.decode(signature, Base64.DEFAULT)\n+                val privateKey = PushUtils.readKeyFromFile(false) as PrivateKey\n+                try {\n+                    val signatureVerification = PushUtils.verifySignature(context,\n+                        accountManager,\n+                        base64DecodedSignature,\n+                        base64DecodedSubject)\n+                    if (signatureVerification != null && signatureVerification.isSignatureValid) {\n+                        val cipher = Cipher.getInstance(\"RSA/None/PKCS1Padding\")\n+                        cipher.init(Cipher.DECRYPT_MODE, privateKey)\n+                        val decryptedSubject = cipher.doFinal(base64DecodedSubject)\n+                        val gson = Gson()\n+                        val decryptedPushMessage = gson.fromJson(String(decryptedSubject),\n+                            DecryptedPushMessage::class.java)\n+                        if (decryptedPushMessage.delete) {\n+                            notificationManager.cancel(decryptedPushMessage.nid)\n+                        } else if (decryptedPushMessage.deleteAll) {\n+                            notificationManager.cancelAll()\n+                        } else {\n+                            val user = accountManager.getUser(signatureVerification.getAccount().name)\n+                                .orElseThrow { RuntimeException() }\n+                            fetchCompleteNotification(user, decryptedPushMessage)\n+                        }\n+                    }\n+                } catch (e1: GeneralSecurityException) {\n+                    Log.d(TAG, \"Error decrypting message ${e1.javaClass.name} ${e1.localizedMessage}\")\n+                }\n+            } catch (exception: Exception) {\n+                Log.d(TAG, \"Something went very wrong\" + exception.localizedMessage)\n+            }\n+        }\n+        return Result.success()\n+    }\n+\n+    private fun sendNotification(notification: Notification, user: User) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5733d24a625300a8627c4a0c673c7f5432585de5"}, "originalPosition": 133}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5733d24a625300a8627c4a0c673c7f5432585de5", "author": {"user": {"login": "ezaquarii", "name": "Chris Narkiewicz"}}, "url": "https://github.com/nextcloud/android/commit/5733d24a625300a8627c4a0c673c7f5432585de5", "committedDate": "2020-04-16T23:08:00Z", "message": "WIP\n\nSigned-off-by: Chris Narkiewicz <hello@ezaquarii.com>"}, "afterCommit": {"oid": "67b8e24d008060186f1177a561e04d2d45e8e3b4", "author": {"user": {"login": "ezaquarii", "name": "Chris Narkiewicz"}}, "url": "https://github.com/nextcloud/android/commit/67b8e24d008060186f1177a561e04d2d45e8e3b4", "committedDate": "2020-04-29T23:44:17Z", "message": "Migrate remaining jobs to WorkManager\n\nSigned-off-by: Chris Narkiewicz <hello@ezaquarii.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a2d85a9cb8c22bbb8c2d020e5266ed061635fba", "author": {"user": {"login": "ezaquarii", "name": "Chris Narkiewicz"}}, "url": "https://github.com/nextcloud/android/commit/1a2d85a9cb8c22bbb8c2d020e5266ed061635fba", "committedDate": "2020-04-29T23:50:54Z", "message": "Migrate remaining jobs to WorkManager\n\nSigned-off-by: Chris Narkiewicz <hello@ezaquarii.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "67b8e24d008060186f1177a561e04d2d45e8e3b4", "author": {"user": {"login": "ezaquarii", "name": "Chris Narkiewicz"}}, "url": "https://github.com/nextcloud/android/commit/67b8e24d008060186f1177a561e04d2d45e8e3b4", "committedDate": "2020-04-29T23:44:17Z", "message": "Migrate remaining jobs to WorkManager\n\nSigned-off-by: Chris Narkiewicz <hello@ezaquarii.com>"}, "afterCommit": {"oid": "1a2d85a9cb8c22bbb8c2d020e5266ed061635fba", "author": {"user": {"login": "ezaquarii", "name": "Chris Narkiewicz"}}, "url": "https://github.com/nextcloud/android/commit/1a2d85a9cb8c22bbb8c2d020e5266ed061635fba", "committedDate": "2020-04-29T23:50:54Z", "message": "Migrate remaining jobs to WorkManager\n\nSigned-off-by: Chris Narkiewicz <hello@ezaquarii.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f22c34e4328d3d9e57650e3004396a8b70e9d94a", "author": {"user": null}, "url": "https://github.com/nextcloud/android/commit/f22c34e4328d3d9e57650e3004396a8b70e9d94a", "committedDate": "2020-04-30T00:03:39Z", "message": "Drone: update FindBugs results to reflect reduced error/warning count [skip ci]\n\nSigned-off-by: nextcloud-android-bot <android@nextcloud.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3aa25cc7a527c0d1384912352028801a7393e660", "author": {"user": {"login": "tobiasKaminsky", "name": "Tobias Kaminsky"}}, "url": "https://github.com/nextcloud/android/commit/3aa25cc7a527c0d1384912352028801a7393e660", "committedDate": "2020-04-30T09:41:38Z", "message": "fix typo\norganized imports\n\nSigned-off-by: tobiasKaminsky <tobias@kaminsky.me>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMzYzMTI5", "url": "https://github.com/nextcloud/android/pull/5895#pullrequestreview-403363129", "createdAt": "2020-04-30T09:43:28Z", "commit": {"oid": "3aa25cc7a527c0d1384912352028801a7393e660"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTU2Njg2", "url": "https://github.com/nextcloud/android/pull/5895#pullrequestreview-403556686", "createdAt": "2020-04-30T14:08:43Z", "commit": {"oid": "3aa25cc7a527c0d1384912352028801a7393e660"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4704, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}