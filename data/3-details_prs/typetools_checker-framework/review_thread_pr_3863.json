{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MjA3NjIw", "number": 3863, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzowMTo1M1rOE14W8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzowMjoxOVrOE14XdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTMzMzYwOnYy", "diffSide": "RIGHT", "path": "checker/src/main/java/org/checkerframework/checker/lock/LockAnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzowMTo1M1rOHuaADQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzowMTo1M1rOHuaADQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQyMjU0MQ==", "bodyText": "This should only return null if removeErroneousExpressions is true.", "url": "https://github.com/typetools/checker-framework/pull/3863#discussion_r518422541", "createdAt": "2020-11-05T23:01:53Z", "author": {"login": "smillst"}, "path": "checker/src/main/java/org/checkerframework/checker/lock/LockAnnotatedTypeFactory.java", "diffHunk": "@@ -170,9 +170,10 @@ protected String standardizeString(\n                     String expression,\n                     FlowExpressionContext context,\n                     TreePath localScope,\n-                    boolean useLocalScope) {\n+                    boolean useLocalScope,\n+                    boolean removeErroneousExpressions) {\n                 if (DependentTypesError.isExpressionError(expression)) {\n-                    return expression;\n+                    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e216e365fc3273e2f79be892f82e08cda20aa74"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTMzNDkzOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/util/dependenttypes/DependentTypesHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzowMjoxOVrOHuaAzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzowMjoxOVrOHuaAzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQyMjczMg==", "bodyText": "Instead of passing removeErroneousExpressions to standardizeString, this if statement could check if standardized is an error string via DependentTypesError#isExpressionError.", "url": "https://github.com/typetools/checker-framework/pull/3863#discussion_r518422732", "createdAt": "2020-11-05T23:02:19Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/util/dependenttypes/DependentTypesHelper.java", "diffHunk": "@@ -600,8 +684,18 @@ private AnnotationMirror standardizeDependentTypeAnnotation(\n                     AnnotationUtils.getElementValueArray(anno, value, String.class, true);\n             List<String> standardizedStrings = new ArrayList<>();\n             for (String expression : expressionStrings) {\n-                standardizedStrings.add(\n-                        standardizeString(expression, context, localScope, useLocalScope));\n+                String standardized =\n+                        standardizeString(\n+                                expression,\n+                                context,\n+                                localScope,\n+                                useLocalScope,\n+                                removeErroneousExpressions);\n+                if (standardized == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e216e365fc3273e2f79be892f82e08cda20aa74"}, "originalPosition": 205}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 896, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}