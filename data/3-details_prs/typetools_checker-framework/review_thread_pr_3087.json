{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNDIwNDE1", "number": 3087, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoyMDozOFrODfob9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoyMDozOFrODfob9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDk0OTY3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/value/ValueAnnotatedTypeFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoyMDozOFrOFpcoWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoyMDozOFrOFpcoWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwNTAxNg==", "bodyText": "This should mention that type must be a boxed integral type.", "url": "https://github.com/typetools/checker-framework/pull/3087#discussion_r379005016", "createdAt": "2020-02-13T17:20:38Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/common/value/ValueAnnotatedTypeFactory.java", "diffHunk": "@@ -437,54 +390,22 @@ public long getToValueFromIntRange(AnnotatedTypeMirror atm) {\n             return AnnotationUtils.getElementValue(anno, \"to\", Long.class, false);\n         }\n \n-        long to;\n         TypeMirror type = atm.getUnderlyingType();\n-        switch (type.getKind()) {\n-            case INT:\n-                to = Integer.MAX_VALUE;\n-                break;\n-            case SHORT:\n-                to = Short.MAX_VALUE;\n-                break;\n-            case BYTE:\n-                to = Byte.MAX_VALUE;\n-                break;\n-            case CHAR:\n-                to = Character.MAX_VALUE;\n-                break;\n-            case LONG:\n-                to = Long.MAX_VALUE;\n-                break;\n-            case DECLARED:\n-                String qualifiedName = TypesUtils.getQualifiedName((DeclaredType) type).toString();\n-                switch (qualifiedName) {\n-                    case \"java.lang.Integer\":\n-                        to = Integer.MAX_VALUE;\n-                        break;\n-                    case \"java.lang.Short\":\n-                        to = Short.MAX_VALUE;\n-                        break;\n-                    case \"java.lang.Byte\":\n-                        to = Byte.MAX_VALUE;\n-                        break;\n-                    case \"java.lang.Character\":\n-                        to = Character.MAX_VALUE;\n-                        break;\n-                    case \"java.lang.Long\":\n-                        to = Long.MAX_VALUE;\n-                        break;\n-                    default:\n-                        throw new UserError(\n-                                \"Illegal type \\\"@IntRange \"\n-                                        + qualifiedName\n-                                        + \"\\\". @IntRange can be applied to Java integral types.\");\n-                }\n-                break;\n-            default:\n-                throw new BugInCF(\n-                        \"Tried to apply a default to an IntRange annotation that was neither an integral primitive nor a declared type.\");\n+        return Range.create(toPrimitiveIntegralTypeKind(type)).to;\n+    }\n+\n+    /**\n+     * Determine the primitive integral TypeKind for the given type.\n+     *\n+     * @param type the type to convert", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea0e0630648a4959d792fa5b72f8429074c0af8f"}, "originalPosition": 127}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1855, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}