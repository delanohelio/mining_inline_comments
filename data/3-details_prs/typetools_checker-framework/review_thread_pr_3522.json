{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MTg5ODg0", "number": 3522, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzo1Njo1OFrOETeABQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjozOTo0NFrOEVMUHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODQ5OTI1OnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzo1Njo1OFrOG5OQNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMjo1MzoxM1rOG6Y4RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NTU0Mg==", "bodyText": "Is there a reason to not simply override toString? That would be easier to find for people.", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r462655542", "createdAt": "2020-07-29T23:56:58Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -443,4 +445,124 @@ public S getStoreAfter(Block block) {\n         return transferInput.analysis.runAnalysisFor(\n                 node, before, transferInput, nodeValues, analysisCaches);\n     }\n+\n+    /**\n+     * Returns a string representation of this.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MjczOQ==", "bodyText": "This is much more verbose.  It would clutter most output and is useful for debugging.  I have updated the description.", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r463192739", "createdAt": "2020-07-30T18:32:41Z", "author": {"login": "mernst"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -443,4 +445,124 @@ public S getStoreAfter(Block block) {\n         return transferInput.analysis.runAnalysisFor(\n                 node, before, transferInput, nodeValues, analysisCaches);\n     }\n+\n+    /**\n+     * Returns a string representation of this.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NTU0Mg=="}, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNDIyNg==", "bodyText": "At the moment there is no toString method, so currently nothing useful is output at all.\nSo it's not clear what output this would clutter - at the moment any output is brief but useless.\nWhat output are you concerned about?", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r463334226", "createdAt": "2020-07-30T23:57:05Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -443,4 +445,124 @@ public S getStoreAfter(Block block) {\n         return transferInput.analysis.runAnalysisFor(\n                 node, before, transferInput, nodeValues, analysisCaches);\n     }\n+\n+    /**\n+     * Returns a string representation of this.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NTU0Mg=="}, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NTIwNg==", "bodyText": "It is not the case that nothing useful is output.  Object.toString outputs the run-time class name and a unique identifier.  Users may prefer that to dozens of lines of output.  If toString is overridden, users don't have a way to get less information.  Creating a different method gives each user the option of how much output to put in logs.", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r463345206", "createdAt": "2020-07-31T00:38:09Z", "author": {"login": "mernst"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -443,4 +445,124 @@ public S getStoreAfter(Block block) {\n         return transferInput.analysis.runAnalysisFor(\n                 node, before, transferInput, nodeValues, analysisCaches);\n     }\n+\n+    /**\n+     * Returns a string representation of this.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NTU0Mg=="}, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NjcxNQ==", "bodyText": "Another customary difference between toString() and repr() is that toString() reflects the abstraction or client view, whereas repr() shows the implementation or representation.  (Not every implementation of toString() and repr() follows the convention perfectly.)", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r463346715", "createdAt": "2020-07-31T00:44:24Z", "author": {"login": "mernst"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -443,4 +445,124 @@ public S getStoreAfter(Block block) {\n         return transferInput.analysis.runAnalysisFor(\n                 node, before, transferInput, nodeValues, analysisCaches);\n     }\n+\n+    /**\n+     * Returns a string representation of this.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NTU0Mg=="}, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxMzA2Ng==", "bodyText": "This is the first class where we add a repr method, so I would like to understand what the motivation is and don't understand what you mean with \"customary\".\nI see 483 matches for such a repr function on GitHub for Java code. This seems popular in Python code.\nIn general it seems more useful to output concrete information instead of what Object.toString gives. If the behavior of Object.toString is really desired in some place, one can simply call getClass and hashCode instead.\nSo far in similar classes we have overriden toString. What makes these classes special to not do the same?", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r463813066", "createdAt": "2020-07-31T20:11:01Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -443,4 +445,124 @@ public S getStoreAfter(Block block) {\n         return transferInput.analysis.runAnalysisFor(\n                 node, before, transferInput, nodeValues, analysisCaches);\n     }\n+\n+    /**\n+     * Returns a string representation of this.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NTU0Mg=="}, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3ODIxMw==", "bodyText": "This is the first class where we add a repr method, so I would like to understand what the motivation is\n\nI added text from this conversation to the developer manual.\n\nIn general it seems more useful to output concrete information instead of what Object.toString gives.\n\nIt is useful to give clients a choice about what information to output.\n\nSo far in similar classes we have overriden toString. What makes these classes special to not do the same?\n\nThe difference is not the classes, the difference is the methods.", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r463878213", "createdAt": "2020-07-31T22:53:13Z", "author": {"login": "mernst"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -443,4 +445,124 @@ public S getStoreAfter(Block block) {\n         return transferInput.analysis.runAnalysisFor(\n                 node, before, transferInput, nodeValues, analysisCaches);\n     }\n+\n+    /**\n+     * Returns a string representation of this.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NTU0Mg=="}, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODUwNjc4OnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMDowMDo1NlrOG5OVBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMzo1ODowNVrOG53sUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1Njc3Mw==", "bodyText": "Any reason for not making this Node.toString?", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r462656773", "createdAt": "2020-07-30T00:00:56Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -443,4 +445,124 @@ public S getStoreAfter(Block block) {\n         return transferInput.analysis.runAnalysisFor(\n                 node, before, transferInput, nodeValues, analysisCaches);\n     }\n+\n+    /**\n+     * Returns a string representation of this.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {\n+        StringJoiner result =\n+                new StringJoiner(\n+                        String.format(\"%n  \"),\n+                        String.format(\"AnalysisResult{%n  \"),\n+                        String.format(\"%n}\"));\n+        result.add(\"nodeValues = \" + nodeValuesRepr(nodeValues));\n+        result.add(\"treeLookup = \" + treeLookupRepr(treeLookup));\n+        result.add(\"unaryAssignNodeLookup = \" + unaryAssignNodeLookup);\n+        result.add(\"finalLocalValues = \" + finalLocalValues);\n+        result.add(\"stores = \" + stores);\n+        result.add(\"analysisCaches = \" + analysisCaches);\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a map with the same type as the {@code nodeValues} field.\n+     *\n+     * @param <V> the type of values in the map\n+     * @param nodeValues a map to format\n+     * @return a printed representation of the given map\n+     */\n+    public static <V> String nodeValuesRepr(Map<Node, V> nodeValues) {\n+        if (nodeValues.isEmpty()) {\n+            return \"{}\";\n+        }\n+        StringJoiner result = new StringJoiner(String.format(\"%n    \"));\n+        result.add(\"{\");\n+        for (Map.Entry<Node, V> entry : nodeValues.entrySet()) {\n+            Node key = entry.getKey();\n+            result.add(String.format(\"%s => %s\", nodeRepr(key), entry.getValue()));\n+        }\n+        result.add(\"}\");\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a node.\n+     *\n+     * @param n a node to format\n+     * @return a printed representation of the given node\n+     */\n+    public static String nodeRepr(Node n) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5Mjc1OA==", "bodyText": "Same reason.", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r463192758", "createdAt": "2020-07-30T18:32:43Z", "author": {"login": "mernst"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -443,4 +445,124 @@ public S getStoreAfter(Block block) {\n         return transferInput.analysis.runAnalysisFor(\n                 node, before, transferInput, nodeValues, analysisCaches);\n     }\n+\n+    /**\n+     * Returns a string representation of this.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {\n+        StringJoiner result =\n+                new StringJoiner(\n+                        String.format(\"%n  \"),\n+                        String.format(\"AnalysisResult{%n  \"),\n+                        String.format(\"%n}\"));\n+        result.add(\"nodeValues = \" + nodeValuesRepr(nodeValues));\n+        result.add(\"treeLookup = \" + treeLookupRepr(treeLookup));\n+        result.add(\"unaryAssignNodeLookup = \" + unaryAssignNodeLookup);\n+        result.add(\"finalLocalValues = \" + finalLocalValues);\n+        result.add(\"stores = \" + stores);\n+        result.add(\"analysisCaches = \" + analysisCaches);\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a map with the same type as the {@code nodeValues} field.\n+     *\n+     * @param <V> the type of values in the map\n+     * @param nodeValues a map to format\n+     * @return a printed representation of the given map\n+     */\n+    public static <V> String nodeValuesRepr(Map<Node, V> nodeValues) {\n+        if (nodeValues.isEmpty()) {\n+            return \"{}\";\n+        }\n+        StringJoiner result = new StringJoiner(String.format(\"%n    \"));\n+        result.add(\"{\");\n+        for (Map.Entry<Node, V> entry : nodeValues.entrySet()) {\n+            Node key = entry.getKey();\n+            result.add(String.format(\"%s => %s\", nodeRepr(key), entry.getValue()));\n+        }\n+        result.add(\"}\");\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a node.\n+     *\n+     * @param n a node to format\n+     * @return a printed representation of the given node\n+     */\n+    public static String nodeRepr(Node n) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1Njc3Mw=="}, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNDQ4Mg==", "bodyText": "Node currently doesn't have a toString method and nobody will look for a method here.\nI would be for either moving this to Node.toString or at least to Node.repr to have the implementation in the corresponding class.", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r463334482", "createdAt": "2020-07-30T23:58:05Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -443,4 +445,124 @@ public S getStoreAfter(Block block) {\n         return transferInput.analysis.runAnalysisFor(\n                 node, before, transferInput, nodeValues, analysisCaches);\n     }\n+\n+    /**\n+     * Returns a string representation of this.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {\n+        StringJoiner result =\n+                new StringJoiner(\n+                        String.format(\"%n  \"),\n+                        String.format(\"AnalysisResult{%n  \"),\n+                        String.format(\"%n}\"));\n+        result.add(\"nodeValues = \" + nodeValuesRepr(nodeValues));\n+        result.add(\"treeLookup = \" + treeLookupRepr(treeLookup));\n+        result.add(\"unaryAssignNodeLookup = \" + unaryAssignNodeLookup);\n+        result.add(\"finalLocalValues = \" + finalLocalValues);\n+        result.add(\"stores = \" + stores);\n+        result.add(\"analysisCaches = \" + analysisCaches);\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a map with the same type as the {@code nodeValues} field.\n+     *\n+     * @param <V> the type of values in the map\n+     * @param nodeValues a map to format\n+     * @return a printed representation of the given map\n+     */\n+    public static <V> String nodeValuesRepr(Map<Node, V> nodeValues) {\n+        if (nodeValues.isEmpty()) {\n+            return \"{}\";\n+        }\n+        StringJoiner result = new StringJoiner(String.format(\"%n    \"));\n+        result.add(\"{\");\n+        for (Map.Entry<Node, V> entry : nodeValues.entrySet()) {\n+            Node key = entry.getKey();\n+            result.add(String.format(\"%s => %s\", nodeRepr(key), entry.getValue()));\n+        }\n+        result.add(\"}\");\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a node.\n+     *\n+     * @param n a node to format\n+     * @return a printed representation of the given node\n+     */\n+    public static String nodeRepr(Node n) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1Njc3Mw=="}, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODUwODI2OnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMDowMTo0MVrOG5OV6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMzo1ODo0MVrOG53s-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NzAwMg==", "bodyText": "You wouldn't need this if you moved nodeRepr into Node.toString, right?", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r462657002", "createdAt": "2020-07-30T00:01:41Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -443,4 +445,124 @@ public S getStoreAfter(Block block) {\n         return transferInput.analysis.runAnalysisFor(\n                 node, before, transferInput, nodeValues, analysisCaches);\n     }\n+\n+    /**\n+     * Returns a string representation of this.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {\n+        StringJoiner result =\n+                new StringJoiner(\n+                        String.format(\"%n  \"),\n+                        String.format(\"AnalysisResult{%n  \"),\n+                        String.format(\"%n}\"));\n+        result.add(\"nodeValues = \" + nodeValuesRepr(nodeValues));\n+        result.add(\"treeLookup = \" + treeLookupRepr(treeLookup));\n+        result.add(\"unaryAssignNodeLookup = \" + unaryAssignNodeLookup);\n+        result.add(\"finalLocalValues = \" + finalLocalValues);\n+        result.add(\"stores = \" + stores);\n+        result.add(\"analysisCaches = \" + analysisCaches);\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a map with the same type as the {@code nodeValues} field.\n+     *\n+     * @param <V> the type of values in the map\n+     * @param nodeValues a map to format\n+     * @return a printed representation of the given map\n+     */\n+    public static <V> String nodeValuesRepr(Map<Node, V> nodeValues) {\n+        if (nodeValues.isEmpty()) {\n+            return \"{}\";\n+        }\n+        StringJoiner result = new StringJoiner(String.format(\"%n    \"));\n+        result.add(\"{\");\n+        for (Map.Entry<Node, V> entry : nodeValues.entrySet()) {\n+            Node key = entry.getKey();\n+            result.add(String.format(\"%s => %s\", nodeRepr(key), entry.getValue()));\n+        }\n+        result.add(\"}\");\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a node.\n+     *\n+     * @param n a node to format\n+     * @return a printed representation of the given node\n+     */\n+    public static String nodeRepr(Node n) {\n+        return String.format(\n+                \"%s [%s %s %s]\",\n+                n, n.getClass().getSimpleName(), n.hashCode(), System.identityHashCode(n));\n+    }\n+\n+    /**\n+     * Return a printed representation of a collection of nodes.\n+     *\n+     * @param nodes a collection of nodes to format\n+     * @return a printed representation of the given collection\n+     */\n+    public static String nodeCollectionRepr(Collection<? extends Node> nodes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MjYzOQ==", "bodyText": "Yes, I agree.  However, that would make general use of toString excessively verbose.", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r463192639", "createdAt": "2020-07-30T18:32:27Z", "author": {"login": "mernst"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -443,4 +445,124 @@ public S getStoreAfter(Block block) {\n         return transferInput.analysis.runAnalysisFor(\n                 node, before, transferInput, nodeValues, analysisCaches);\n     }\n+\n+    /**\n+     * Returns a string representation of this.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {\n+        StringJoiner result =\n+                new StringJoiner(\n+                        String.format(\"%n  \"),\n+                        String.format(\"AnalysisResult{%n  \"),\n+                        String.format(\"%n}\"));\n+        result.add(\"nodeValues = \" + nodeValuesRepr(nodeValues));\n+        result.add(\"treeLookup = \" + treeLookupRepr(treeLookup));\n+        result.add(\"unaryAssignNodeLookup = \" + unaryAssignNodeLookup);\n+        result.add(\"finalLocalValues = \" + finalLocalValues);\n+        result.add(\"stores = \" + stores);\n+        result.add(\"analysisCaches = \" + analysisCaches);\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a map with the same type as the {@code nodeValues} field.\n+     *\n+     * @param <V> the type of values in the map\n+     * @param nodeValues a map to format\n+     * @return a printed representation of the given map\n+     */\n+    public static <V> String nodeValuesRepr(Map<Node, V> nodeValues) {\n+        if (nodeValues.isEmpty()) {\n+            return \"{}\";\n+        }\n+        StringJoiner result = new StringJoiner(String.format(\"%n    \"));\n+        result.add(\"{\");\n+        for (Map.Entry<Node, V> entry : nodeValues.entrySet()) {\n+            Node key = entry.getKey();\n+            result.add(String.format(\"%s => %s\", nodeRepr(key), entry.getValue()));\n+        }\n+        result.add(\"}\");\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a node.\n+     *\n+     * @param n a node to format\n+     * @return a printed representation of the given node\n+     */\n+    public static String nodeRepr(Node n) {\n+        return String.format(\n+                \"%s [%s %s %s]\",\n+                n, n.getClass().getSimpleName(), n.hashCode(), System.identityHashCode(n));\n+    }\n+\n+    /**\n+     * Return a printed representation of a collection of nodes.\n+     *\n+     * @param nodes a collection of nodes to format\n+     * @return a printed representation of the given collection\n+     */\n+    public static String nodeCollectionRepr(Collection<? extends Node> nodes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NzAwMg=="}, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNDY0OA==", "bodyText": "What \"general uses\" are you concerned about?", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r463334648", "createdAt": "2020-07-30T23:58:41Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -443,4 +445,124 @@ public S getStoreAfter(Block block) {\n         return transferInput.analysis.runAnalysisFor(\n                 node, before, transferInput, nodeValues, analysisCaches);\n     }\n+\n+    /**\n+     * Returns a string representation of this.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {\n+        StringJoiner result =\n+                new StringJoiner(\n+                        String.format(\"%n  \"),\n+                        String.format(\"AnalysisResult{%n  \"),\n+                        String.format(\"%n}\"));\n+        result.add(\"nodeValues = \" + nodeValuesRepr(nodeValues));\n+        result.add(\"treeLookup = \" + treeLookupRepr(treeLookup));\n+        result.add(\"unaryAssignNodeLookup = \" + unaryAssignNodeLookup);\n+        result.add(\"finalLocalValues = \" + finalLocalValues);\n+        result.add(\"stores = \" + stores);\n+        result.add(\"analysisCaches = \" + analysisCaches);\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a map with the same type as the {@code nodeValues} field.\n+     *\n+     * @param <V> the type of values in the map\n+     * @param nodeValues a map to format\n+     * @return a printed representation of the given map\n+     */\n+    public static <V> String nodeValuesRepr(Map<Node, V> nodeValues) {\n+        if (nodeValues.isEmpty()) {\n+            return \"{}\";\n+        }\n+        StringJoiner result = new StringJoiner(String.format(\"%n    \"));\n+        result.add(\"{\");\n+        for (Map.Entry<Node, V> entry : nodeValues.entrySet()) {\n+            Node key = entry.getKey();\n+            result.add(String.format(\"%s => %s\", nodeRepr(key), entry.getValue()));\n+        }\n+        result.add(\"}\");\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a node.\n+     *\n+     * @param n a node to format\n+     * @return a printed representation of the given node\n+     */\n+    public static String nodeRepr(Node n) {\n+        return String.format(\n+                \"%s [%s %s %s]\",\n+                n, n.getClass().getSimpleName(), n.hashCode(), System.identityHashCode(n));\n+    }\n+\n+    /**\n+     * Return a printed representation of a collection of nodes.\n+     *\n+     * @param nodes a collection of nodes to format\n+     * @return a printed representation of the given collection\n+     */\n+    public static String nodeCollectionRepr(Collection<? extends Node> nodes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NzAwMg=="}, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODUxNTE3OnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMDowNToxNVrOG5OaBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDowMjozNFrOG53xbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1ODA1NQ==", "bodyText": "I'm a bit confused why you would need that here. We throw BugInCF in many places, so if this is a general problem, should that be solved where BugInCF is output?", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r462658055", "createdAt": "2020-07-30T00:05:15Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -443,4 +445,124 @@ public S getStoreAfter(Block block) {\n         return transferInput.analysis.runAnalysisFor(\n                 node, before, transferInput, nodeValues, analysisCaches);\n     }\n+\n+    /**\n+     * Returns a string representation of this.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {\n+        StringJoiner result =\n+                new StringJoiner(\n+                        String.format(\"%n  \"),\n+                        String.format(\"AnalysisResult{%n  \"),\n+                        String.format(\"%n}\"));\n+        result.add(\"nodeValues = \" + nodeValuesRepr(nodeValues));\n+        result.add(\"treeLookup = \" + treeLookupRepr(treeLookup));\n+        result.add(\"unaryAssignNodeLookup = \" + unaryAssignNodeLookup);\n+        result.add(\"finalLocalValues = \" + finalLocalValues);\n+        result.add(\"stores = \" + stores);\n+        result.add(\"analysisCaches = \" + analysisCaches);\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a map with the same type as the {@code nodeValues} field.\n+     *\n+     * @param <V> the type of values in the map\n+     * @param nodeValues a map to format\n+     * @return a printed representation of the given map\n+     */\n+    public static <V> String nodeValuesRepr(Map<Node, V> nodeValues) {\n+        if (nodeValues.isEmpty()) {\n+            return \"{}\";\n+        }\n+        StringJoiner result = new StringJoiner(String.format(\"%n    \"));\n+        result.add(\"{\");\n+        for (Map.Entry<Node, V> entry : nodeValues.entrySet()) {\n+            Node key = entry.getKey();\n+            result.add(String.format(\"%s => %s\", nodeRepr(key), entry.getValue()));\n+        }\n+        result.add(\"}\");\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a node.\n+     *\n+     * @param n a node to format\n+     * @return a printed representation of the given node\n+     */\n+    public static String nodeRepr(Node n) {\n+        return String.format(\n+                \"%s [%s %s %s]\",\n+                n, n.getClass().getSimpleName(), n.hashCode(), System.identityHashCode(n));\n+    }\n+\n+    /**\n+     * Return a printed representation of a collection of nodes.\n+     *\n+     * @param nodes a collection of nodes to format\n+     * @return a printed representation of the given collection\n+     */\n+    public static String nodeCollectionRepr(Collection<? extends Node> nodes) {\n+        StringJoiner result = new StringJoiner(\", \", \"[\", \"]\");\n+        for (Node n : nodes) {\n+            result.add(nodeRepr(n));\n+        }\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a map with the same type as the {@code treeLookup} field.\n+     *\n+     * @param treeLookup a map to format\n+     * @return a printed representation of the given map\n+     */\n+    public static String treeLookupRepr(Map<Tree, Set<Node>> treeLookup) {\n+        if (treeLookup.isEmpty()) {\n+            return \"{}\";\n+        }\n+        StringJoiner result = new StringJoiner(String.format(\"%n    \"));\n+        result.add(\"{\");\n+        for (Map.Entry<Tree, Set<Node>> entry : treeLookup.entrySet()) {\n+            Tree key = entry.getKey();\n+            String treeString = key.toString().replaceAll(\"[ \\n\\t]+\", \" \");\n+            if (treeString.length() > 65) {\n+                treeString = \"\\\"\" + treeString.substring(0, 60) + \"...\\\"\";\n+            }\n+            result.add(treeString + \" => \" + nodeCollectionRepr(entry.getValue()));\n+        }\n+        result.add(\"}\");\n+        return result.toString();\n+    }\n+\n+    /** Checks representation invariants on this. */\n+    public void checkRep() {\n+        // Require that each node in treeLookup exists in nodeValues.\n+        for (Map.Entry<Tree, Set<Node>> entry : treeLookup.entrySet()) {\n+            for (Node n : entry.getValue()) {\n+                if (!nodeValues.containsKey(n)) {\n+                    sleep(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MjUwMg==", "bodyText": "That doesn't work.  I'm not sure why.  Without this, printf output is interspersed.  Understanding why would be useful, but is outside the scope of this pull request.", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r463192502", "createdAt": "2020-07-30T18:32:07Z", "author": {"login": "mernst"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -443,4 +445,124 @@ public S getStoreAfter(Block block) {\n         return transferInput.analysis.runAnalysisFor(\n                 node, before, transferInput, nodeValues, analysisCaches);\n     }\n+\n+    /**\n+     * Returns a string representation of this.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {\n+        StringJoiner result =\n+                new StringJoiner(\n+                        String.format(\"%n  \"),\n+                        String.format(\"AnalysisResult{%n  \"),\n+                        String.format(\"%n}\"));\n+        result.add(\"nodeValues = \" + nodeValuesRepr(nodeValues));\n+        result.add(\"treeLookup = \" + treeLookupRepr(treeLookup));\n+        result.add(\"unaryAssignNodeLookup = \" + unaryAssignNodeLookup);\n+        result.add(\"finalLocalValues = \" + finalLocalValues);\n+        result.add(\"stores = \" + stores);\n+        result.add(\"analysisCaches = \" + analysisCaches);\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a map with the same type as the {@code nodeValues} field.\n+     *\n+     * @param <V> the type of values in the map\n+     * @param nodeValues a map to format\n+     * @return a printed representation of the given map\n+     */\n+    public static <V> String nodeValuesRepr(Map<Node, V> nodeValues) {\n+        if (nodeValues.isEmpty()) {\n+            return \"{}\";\n+        }\n+        StringJoiner result = new StringJoiner(String.format(\"%n    \"));\n+        result.add(\"{\");\n+        for (Map.Entry<Node, V> entry : nodeValues.entrySet()) {\n+            Node key = entry.getKey();\n+            result.add(String.format(\"%s => %s\", nodeRepr(key), entry.getValue()));\n+        }\n+        result.add(\"}\");\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a node.\n+     *\n+     * @param n a node to format\n+     * @return a printed representation of the given node\n+     */\n+    public static String nodeRepr(Node n) {\n+        return String.format(\n+                \"%s [%s %s %s]\",\n+                n, n.getClass().getSimpleName(), n.hashCode(), System.identityHashCode(n));\n+    }\n+\n+    /**\n+     * Return a printed representation of a collection of nodes.\n+     *\n+     * @param nodes a collection of nodes to format\n+     * @return a printed representation of the given collection\n+     */\n+    public static String nodeCollectionRepr(Collection<? extends Node> nodes) {\n+        StringJoiner result = new StringJoiner(\", \", \"[\", \"]\");\n+        for (Node n : nodes) {\n+            result.add(nodeRepr(n));\n+        }\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a map with the same type as the {@code treeLookup} field.\n+     *\n+     * @param treeLookup a map to format\n+     * @return a printed representation of the given map\n+     */\n+    public static String treeLookupRepr(Map<Tree, Set<Node>> treeLookup) {\n+        if (treeLookup.isEmpty()) {\n+            return \"{}\";\n+        }\n+        StringJoiner result = new StringJoiner(String.format(\"%n    \"));\n+        result.add(\"{\");\n+        for (Map.Entry<Tree, Set<Node>> entry : treeLookup.entrySet()) {\n+            Tree key = entry.getKey();\n+            String treeString = key.toString().replaceAll(\"[ \\n\\t]+\", \" \");\n+            if (treeString.length() > 65) {\n+                treeString = \"\\\"\" + treeString.substring(0, 60) + \"...\\\"\";\n+            }\n+            result.add(treeString + \" => \" + nodeCollectionRepr(entry.getValue()));\n+        }\n+        result.add(\"}\");\n+        return result.toString();\n+    }\n+\n+    /** Checks representation invariants on this. */\n+    public void checkRep() {\n+        // Require that each node in treeLookup exists in nodeValues.\n+        for (Map.Entry<Tree, Set<Node>> entry : treeLookup.entrySet()) {\n+            for (Node n : entry.getValue()) {\n+                if (!nodeValues.containsKey(n)) {\n+                    sleep(100);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1ODA1NQ=="}, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNTc4OA==", "bodyText": "Can you at least add a TODO comment here to remark why it is here? This is very surprising and should be highlighted and fixed.", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r463335788", "createdAt": "2020-07-31T00:02:34Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -443,4 +445,124 @@ public S getStoreAfter(Block block) {\n         return transferInput.analysis.runAnalysisFor(\n                 node, before, transferInput, nodeValues, analysisCaches);\n     }\n+\n+    /**\n+     * Returns a string representation of this.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {\n+        StringJoiner result =\n+                new StringJoiner(\n+                        String.format(\"%n  \"),\n+                        String.format(\"AnalysisResult{%n  \"),\n+                        String.format(\"%n}\"));\n+        result.add(\"nodeValues = \" + nodeValuesRepr(nodeValues));\n+        result.add(\"treeLookup = \" + treeLookupRepr(treeLookup));\n+        result.add(\"unaryAssignNodeLookup = \" + unaryAssignNodeLookup);\n+        result.add(\"finalLocalValues = \" + finalLocalValues);\n+        result.add(\"stores = \" + stores);\n+        result.add(\"analysisCaches = \" + analysisCaches);\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a map with the same type as the {@code nodeValues} field.\n+     *\n+     * @param <V> the type of values in the map\n+     * @param nodeValues a map to format\n+     * @return a printed representation of the given map\n+     */\n+    public static <V> String nodeValuesRepr(Map<Node, V> nodeValues) {\n+        if (nodeValues.isEmpty()) {\n+            return \"{}\";\n+        }\n+        StringJoiner result = new StringJoiner(String.format(\"%n    \"));\n+        result.add(\"{\");\n+        for (Map.Entry<Node, V> entry : nodeValues.entrySet()) {\n+            Node key = entry.getKey();\n+            result.add(String.format(\"%s => %s\", nodeRepr(key), entry.getValue()));\n+        }\n+        result.add(\"}\");\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a node.\n+     *\n+     * @param n a node to format\n+     * @return a printed representation of the given node\n+     */\n+    public static String nodeRepr(Node n) {\n+        return String.format(\n+                \"%s [%s %s %s]\",\n+                n, n.getClass().getSimpleName(), n.hashCode(), System.identityHashCode(n));\n+    }\n+\n+    /**\n+     * Return a printed representation of a collection of nodes.\n+     *\n+     * @param nodes a collection of nodes to format\n+     * @return a printed representation of the given collection\n+     */\n+    public static String nodeCollectionRepr(Collection<? extends Node> nodes) {\n+        StringJoiner result = new StringJoiner(\", \", \"[\", \"]\");\n+        for (Node n : nodes) {\n+            result.add(nodeRepr(n));\n+        }\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a map with the same type as the {@code treeLookup} field.\n+     *\n+     * @param treeLookup a map to format\n+     * @return a printed representation of the given map\n+     */\n+    public static String treeLookupRepr(Map<Tree, Set<Node>> treeLookup) {\n+        if (treeLookup.isEmpty()) {\n+            return \"{}\";\n+        }\n+        StringJoiner result = new StringJoiner(String.format(\"%n    \"));\n+        result.add(\"{\");\n+        for (Map.Entry<Tree, Set<Node>> entry : treeLookup.entrySet()) {\n+            Tree key = entry.getKey();\n+            String treeString = key.toString().replaceAll(\"[ \\n\\t]+\", \" \");\n+            if (treeString.length() > 65) {\n+                treeString = \"\\\"\" + treeString.substring(0, 60) + \"...\\\"\";\n+            }\n+            result.add(treeString + \" => \" + nodeCollectionRepr(entry.getValue()));\n+        }\n+        result.add(\"}\");\n+        return result.toString();\n+    }\n+\n+    /** Checks representation invariants on this. */\n+    public void checkRep() {\n+        // Require that each node in treeLookup exists in nodeValues.\n+        for (Map.Entry<Tree, Set<Node>> entry : treeLookup.entrySet()) {\n+            for (Node n : entry.getValue()) {\n+                if (!nodeValues.containsKey(n)) {\n+                    sleep(100);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1ODA1NQ=="}, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODUyMDk3OnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/ControlFlowGraph.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMDowODowM1rOG5OdWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODozMjowMFrOG5vBfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1ODkwNg==", "bodyText": "I don't understand the new comment. The method returns a copy of that one field, like getUnaryAssignNodeLookup returns a copy of that field.\nIs this more a to-do comment that we need a method to also access the convertedTreeLookup?", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r462658906", "createdAt": "2020-07-30T00:08:03Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/ControlFlowGraph.java", "diffHunk": "@@ -235,7 +237,7 @@ public UnderlyingAST getUnderlyingAST() {\n     }\n \n     /**\n-     * Returns the copied tree-lookup map.\n+     * Returns the copied tree-lookup map. Ignores convertedTreeLookup.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MjQ0Ng==", "bodyText": "The way that the tree-lookup map is accessed is via getNodesCorrespondingToTree.  That method makes use of both convertedTreeLookup and treeLookup.  I'm not sure why there is a need for a public method that makes a copy of treeLookup, but any client will be inconsistent with getNodesCorrespondingToTree.  So it is useful to provide a warning to clients.", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r463192446", "createdAt": "2020-07-30T18:32:00Z", "author": {"login": "mernst"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/ControlFlowGraph.java", "diffHunk": "@@ -235,7 +237,7 @@ public UnderlyingAST getUnderlyingAST() {\n     }\n \n     /**\n-     * Returns the copied tree-lookup map.\n+     * Returns the copied tree-lookup map. Ignores convertedTreeLookup.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1ODkwNg=="}, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODUyNDYzOnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/ControlFlowGraph.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMDoxMDowNVrOG5Offw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDo0NjozOFrOG54eww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1OTQ1NQ==", "bodyText": "If stringGraph is null, you could use repr instead of the un-helpful super implementation.", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r462659455", "createdAt": "2020-07-30T00:10:05Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/ControlFlowGraph.java", "diffHunk": "@@ -303,4 +305,32 @@ public String toString() {\n         String stringGraph = (String) res.get(\"stringGraph\");\n         return stringGraph == null ? super.toString() : stringGraph;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NzM5NQ==", "bodyText": "That's a change to toString(), and repr() is more about the internal implementation.  (Also, this pull request doesn't make any changes to toString().)  Should the code instead throw BugInCF if stringGraph is null?  A separate pull request could do that.", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r463347395", "createdAt": "2020-07-31T00:46:38Z", "author": {"login": "mernst"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/ControlFlowGraph.java", "diffHunk": "@@ -303,4 +305,32 @@ public String toString() {\n         String stringGraph = (String) res.get(\"stringGraph\");\n         return stringGraph == null ? super.toString() : stringGraph;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1OTQ1NQ=="}, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODUyNDgyOnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/ControlFlowGraph.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMDoxMDoxMFrOG5OfmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMDoxMDoxMFrOG5OfmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1OTQ4MQ==", "bodyText": "There already is a toString method in this class. Can you add cross-references and explain when to use which?", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r462659481", "createdAt": "2020-07-30T00:10:10Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/ControlFlowGraph.java", "diffHunk": "@@ -303,4 +305,32 @@ public String toString() {\n         String stringGraph = (String) res.get(\"stringGraph\");\n         return stringGraph == null ? super.toString() : stringGraph;\n     }\n+\n+    /**\n+     * Returns a string representation of this.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTkzNTczOnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDowNDoxMlrOG6UpQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDowNDoxMlrOG6UpQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwODgzNA==", "bodyText": "What printf output is this referring to? Throwing a BugInCF outputs the message using the compiler messager and should happen one at a time. In general, the compiler is single-threaded and a sleep seems very inappropriate.\nIs this maybe from running gradle concurrently?\nHow can I reproduce this issue?\nAs this checkRep method isn't called anywhere, how about moving this method to a separate PR?", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r463808834", "createdAt": "2020-07-31T20:04:12Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -443,4 +445,85 @@ public S getStoreAfter(Block block) {\n         return transferInput.analysis.runAnalysisFor(\n                 node, before, transferInput, nodeValues, analysisCaches);\n     }\n+\n+    /**\n+     * Returns a verbose string representation of this, useful for debugging.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {\n+        StringJoiner result =\n+                new StringJoiner(\n+                        String.format(\"%n  \"),\n+                        String.format(\"AnalysisResult{%n  \"),\n+                        String.format(\"%n}\"));\n+        result.add(\"nodeValues = \" + nodeValuesRepr(nodeValues));\n+        result.add(\"treeLookup = \" + treeLookupRepr(treeLookup));\n+        result.add(\"unaryAssignNodeLookup = \" + unaryAssignNodeLookup);\n+        result.add(\"finalLocalValues = \" + finalLocalValues);\n+        result.add(\"stores = \" + stores);\n+        result.add(\"analysisCaches = \" + analysisCaches);\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Returns a verbose printed representation, useful for debugging. The map has the same type as\n+     * the {@code nodeValues} field.\n+     *\n+     * @param <V> the type of values in the map\n+     * @param nodeValues a map to format\n+     * @return a printed representation of the given map\n+     */\n+    public static <V> String nodeValuesRepr(Map<Node, V> nodeValues) {\n+        if (nodeValues.isEmpty()) {\n+            return \"{}\";\n+        }\n+        StringJoiner result = new StringJoiner(String.format(\"%n    \"));\n+        result.add(\"{\");\n+        for (Map.Entry<Node, V> entry : nodeValues.entrySet()) {\n+            Node key = entry.getKey();\n+            result.add(String.format(\"%s => %s\", key.repr(), entry.getValue()));\n+        }\n+        result.add(\"}\");\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Returns a verbose printed representation of a map, useful for debugging. The map has the same\n+     * type as the {@code treeLookup} field.\n+     *\n+     * @param treeLookup a map to format\n+     * @return a printed representation of the given map\n+     */\n+    public static String treeLookupRepr(Map<Tree, Set<Node>> treeLookup) {\n+        if (treeLookup.isEmpty()) {\n+            return \"{}\";\n+        }\n+        StringJoiner result = new StringJoiner(String.format(\"%n    \"));\n+        result.add(\"{\");\n+        for (Map.Entry<Tree, Set<Node>> entry : treeLookup.entrySet()) {\n+            Tree key = entry.getKey();\n+            String treeString = key.toString().replaceAll(\"[ \\n\\t]+\", \" \");\n+            if (treeString.length() > 65) {\n+                treeString = \"\\\"\" + treeString.substring(0, 60) + \"...\\\"\";\n+            }\n+            result.add(treeString + \" => \" + Node.nodeCollectionRepr(entry.getValue()));\n+        }\n+        result.add(\"}\");\n+        return result.toString();\n+    }\n+\n+    /** Checks representation invariants on this. */\n+    public void checkRep() {\n+        // Require that each node in treeLookup exists in nodeValues.\n+        for (Map.Entry<Tree, Set<Node>> entry : treeLookup.entrySet()) {\n+            for (Node n : entry.getValue()) {\n+                if (!nodeValues.containsKey(n)) {\n+                    SystemUtil.sleep(100); // without this, printf output is sometimes interleaved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f244c9e235dd2d2a7399147dc2d132db133371"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjU3MzEwOnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/node/Node.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjozOTo0NFrOG7z5vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTo0Njo0OFrOG73OoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2OTUzNA==", "bodyText": "For consistency, in a few places in this PR, I would replace the printed with string.", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r465369534", "createdAt": "2020-08-04T22:39:44Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/node/Node.java", "diffHunk": "@@ -157,4 +158,32 @@ public void setAssignmentContext(AssignmentContext assignmentContext) {\n         }\n         return transitiveOperands;\n     }\n+\n+    /**\n+     * Returns a verbose printed representation of this, useful for debugging.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49548c0a8a64087f88d93a16a0536a0d04464f4e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNDAzMg==", "bodyText": "I agree.  That was for consistency with existing methods' documentation, but I have changed those too.", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r465424032", "createdAt": "2020-08-05T01:46:48Z", "author": {"login": "mernst"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/node/Node.java", "diffHunk": "@@ -157,4 +158,32 @@ public void setAssignmentContext(AssignmentContext assignmentContext) {\n         }\n         return transitiveOperands;\n     }\n+\n+    /**\n+     * Returns a verbose printed representation of this, useful for debugging.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2OTUzNA=="}, "originalCommit": {"oid": "49548c0a8a64087f88d93a16a0536a0d04464f4e"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1605, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}