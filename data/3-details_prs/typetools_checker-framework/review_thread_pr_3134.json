{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MDQzNjQw", "number": 3134, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjo0NjoxN1rODl9uOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDozNzoxOFrODmtSdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTM1MTYxOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjo0NjoxN1rOFzJsSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoxMzowOVrOFzK-vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4MDQ5MQ==", "bodyText": "What do you think of introducing two methods reportError and reportWarning and discouraging the use of  the version with a javax.tools.Diagnostic.Kind dependency? That would make it easier to use the API, removing the need for many of the imports this PR adds.", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r389180491", "createdAt": "2020-03-06T22:46:17Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -879,71 +877,34 @@ public void typeProcess(TypeElement e, TreePath p) {\n     ///\n \n     /**\n-     * Reports a result. By default, it prints it to the screen via the compiler's internal messager\n-     * if the result is non-success; otherwise, the method returns with no side effects.\n+     * Reports a diagnostic message. By default, it prints it to the screen via the compiler's\n+     * internal messager; otherwise, the method returns with no side effects.\n      *\n-     * @param r the result to report\n-     * @param src the position object associated with the result; may be an Element, a Tree, or null\n+     * @param source the source position information; may be an Element, a Tree, or null\n+     * @param kind the type of message\n+     * @param messageKey the message key\n+     * @param args arguments for interpolation in the string corresponding to the given message key\n      */\n-    public void report(final Result r, final Object src) {\n-        if (r.isSuccess()) {\n-            return;\n-        }\n+    public void report(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "165b7a1f5ba6e5f5145c05d1b21c7b29841ffcc7"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5NjM2OQ==", "bodyText": "I considered that and thought this variant a bit cleaner.  But I'll change it to your suggestion.  You are right that it will limit the number of imports needed.", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r389196369", "createdAt": "2020-03-06T23:47:17Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -879,71 +877,34 @@ public void typeProcess(TypeElement e, TreePath p) {\n     ///\n \n     /**\n-     * Reports a result. By default, it prints it to the screen via the compiler's internal messager\n-     * if the result is non-success; otherwise, the method returns with no side effects.\n+     * Reports a diagnostic message. By default, it prints it to the screen via the compiler's\n+     * internal messager; otherwise, the method returns with no side effects.\n      *\n-     * @param r the result to report\n-     * @param src the position object associated with the result; may be an Element, a Tree, or null\n+     * @param source the source position information; may be an Element, a Tree, or null\n+     * @param kind the type of message\n+     * @param messageKey the message key\n+     * @param args arguments for interpolation in the string corresponding to the given message key\n      */\n-    public void report(final Result r, final Object src) {\n-        if (r.isSuccess()) {\n-            return;\n-        }\n+    public void report(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4MDQ5MQ=="}, "originalCommit": {"oid": "165b7a1f5ba6e5f5145c05d1b21c7b29841ffcc7"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMTU5OA==", "bodyText": "I have done this and I agree it's better.  Thanks for the suggestion.\nPlease go ahead and re-review.", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r389201598", "createdAt": "2020-03-07T00:13:09Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -879,71 +877,34 @@ public void typeProcess(TypeElement e, TreePath p) {\n     ///\n \n     /**\n-     * Reports a result. By default, it prints it to the screen via the compiler's internal messager\n-     * if the result is non-success; otherwise, the method returns with no side effects.\n+     * Reports a diagnostic message. By default, it prints it to the screen via the compiler's\n+     * internal messager; otherwise, the method returns with no side effects.\n      *\n-     * @param r the result to report\n-     * @param src the position object associated with the result; may be an Element, a Tree, or null\n+     * @param source the source position information; may be an Element, a Tree, or null\n+     * @param kind the type of message\n+     * @param messageKey the message key\n+     * @param args arguments for interpolation in the string corresponding to the given message key\n      */\n-    public void report(final Result r, final Object src) {\n-        if (r.isSuccess()) {\n-            return;\n-        }\n+    public void report(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4MDQ5MQ=="}, "originalCommit": {"oid": "165b7a1f5ba6e5f5145c05d1b21c7b29841ffcc7"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTIxMTMwOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo1NjoyOFrOFzsHeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODo0MToxMlrOFz01zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0NDUwNg==", "bodyText": "I'm using the Result class in #2883 to collect multiple errors and report them once:\nhttps://github.com/typetools/checker-framework/pull/2883/files#diff-31033326203125d5a0af0323436d39f4R463\nSo, I would like to keep the class.\nI support changing the report methods so that you don't have to create a Result object only to pass it to this method.  I do think we should deprecate the previous methods though as this is a rather large breaking change.", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r389744506", "createdAt": "2020-03-09T14:56:28Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -875,75 +874,77 @@ public void typeProcess(TypeElement e, TreePath p) {\n     }\n \n     ///////////////////////////////////////////////////////////////////////////\n-    /// Reporting type-checking errors; the main entry point is report()\n+    /// Reporting type-checking errors; most clients use reportError() or reportWarning()\n     ///\n \n     /**\n-     * Reports a result. By default, it prints it to the screen via the compiler's internal messager\n-     * if the result is non-success; otherwise, the method returns with no side effects.\n+     * Reports an error. By default, prints it to the screen via the compiler's internal messager.\n      *\n-     * @param r the result to report\n-     * @param src the position object associated with the result; may be an Element, a Tree, or null\n+     * @param source the source position information; may be an Element, a Tree, or null\n+     * @param messageKey the message key\n+     * @param args arguments for interpolation in the string corresponding to the given message key\n      */\n-    public void report(final Result r, final Object src) {\n-        if (r.isSuccess()) {\n-            return;\n-        }\n+    public void reportError(Object source, @CompilerMessageKey String messageKey, Object... args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "460600352c4d8902a960a955c27242ee10fd1c86"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg4NzQzNw==", "bodyText": "@smillst I deprecated the Result class instead of removing it.\nInstead of Result, use List<DiagMessage>.  (Currently a Result is essentially just a List<DiagMessage> plus some baggage.)\nThe refactoring is easy.  It's two commands in Emacs; I will make a pull request for you.  I'm happy to do it for any other branches or forks where people are concerned about merge conflicts.", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r389887437", "createdAt": "2020-03-09T18:41:12Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -875,75 +874,77 @@ public void typeProcess(TypeElement e, TreePath p) {\n     }\n \n     ///////////////////////////////////////////////////////////////////////////\n-    /// Reporting type-checking errors; the main entry point is report()\n+    /// Reporting type-checking errors; most clients use reportError() or reportWarning()\n     ///\n \n     /**\n-     * Reports a result. By default, it prints it to the screen via the compiler's internal messager\n-     * if the result is non-success; otherwise, the method returns with no side effects.\n+     * Reports an error. By default, prints it to the screen via the compiler's internal messager.\n      *\n-     * @param r the result to report\n-     * @param src the position object associated with the result; may be an Element, a Tree, or null\n+     * @param source the source position information; may be an Element, a Tree, or null\n+     * @param messageKey the message key\n+     * @param args arguments for interpolation in the string corresponding to the given message key\n      */\n-    public void report(final Result r, final Object src) {\n-        if (r.isSuccess()) {\n-            return;\n-        }\n+    public void reportError(Object source, @CompilerMessageKey String messageKey, Object... args) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0NDUwNg=="}, "originalCommit": {"oid": "460600352c4d8902a960a955c27242ee10fd1c86"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjc5Nzc5OnYy", "diffSide": "RIGHT", "path": "checker/src/main/java/org/checkerframework/checker/formatter/FormatterTreeUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjoyNzozN1rOFz7dlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDozNjoyN1rOFz908A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5NTkyNw==", "bodyText": "Shouldn't the uses of the deprecated Result be removed? Are these two methods at all useful?", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r389995927", "createdAt": "2020-03-09T22:27:37Z", "author": {"login": "wmdietl"}, "path": "checker/src/main/java/org/checkerframework/checker/formatter/FormatterTreeUtil.java", "diffHunk": "@@ -351,16 +351,26 @@ public Boolean visitNull(NullType t, Class<Void> p) {\n         }\n     }\n \n-    /** Reports an error. Takes a {@link Result} to report the location. */\n-    public final <E> void failure(Result<E> res, @CompilerMessageKey String msg, Object... args) {\n-        checker.report(\n-                org.checkerframework.framework.source.Result.failure(msg, args), res.location);\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a075693ab23b3ec1c2101ff912f42ee83808db32"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzNDY3Mg==", "bodyText": "This class contains Result<E> which is a different Result than org.checkerframework.framework.source.Result.failure which has been removed.  (Yes, that's very confusing.)\nIn the future, maybe Result<E> should be refactored, but that is not a matter for this pull request.", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r390034672", "createdAt": "2020-03-10T00:36:27Z", "author": {"login": "mernst"}, "path": "checker/src/main/java/org/checkerframework/checker/formatter/FormatterTreeUtil.java", "diffHunk": "@@ -351,16 +351,26 @@ public Boolean visitNull(NullType t, Class<Void> p) {\n         }\n     }\n \n-    /** Reports an error. Takes a {@link Result} to report the location. */\n-    public final <E> void failure(Result<E> res, @CompilerMessageKey String msg, Object... args) {\n-        checker.report(\n-                org.checkerframework.framework.source.Result.failure(msg, args), res.location);\n+    /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5NTkyNw=="}, "originalCommit": {"oid": "a075693ab23b3ec1c2101ff912f42ee83808db32"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjgwMzc0OnYy", "diffSide": "RIGHT", "path": "checker/src/main/java/org/checkerframework/checker/i18nformatter/I18nFormatterTreeUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjozMDoxMVrOFz7hIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjozMDoxMVrOFz7hIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5NjgzNA==", "bodyText": "Same comments as for FormatterTreeUtil above.", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r389996834", "createdAt": "2020-03-09T22:30:11Z", "author": {"login": "wmdietl"}, "path": "checker/src/main/java/org/checkerframework/checker/i18nformatter/I18nFormatterTreeUtil.java", "diffHunk": "@@ -151,16 +151,26 @@ public boolean isMakeFormatCall(MethodInvocationNode node, AnnotatedTypeFactory\n         return anno != null;\n     }\n \n-    /** Reports an error. Takes a {@link Result} to report the location. */\n-    public final <E> void failure(Result<E> res, @CompilerMessageKey String msg, Object... args) {\n-        checker.report(\n-                org.checkerframework.framework.source.Result.failure(msg, args), res.location);\n+    /**\n+     * Reports an error.\n+     *\n+     * @param res used for source location information\n+     * @param msgKey the diagnostic message key\n+     * @param args arguments to the diagnostic message\n+     */\n+    public final void failure(Result<?> res, @CompilerMessageKey String msgKey, Object... args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a075693ab23b3ec1c2101ff912f42ee83808db32"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjg0MDI4OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo0NToyN1rOFz72iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo0NToyN1rOFz72iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwMjMxMw==", "bodyText": "Here and above on line 146, instead of null shouldn't it \"an empty list\", bc the code does Collections.emptyList(); in the success case on line 176.", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r390002313", "createdAt": "2020-03-09T22:45:27Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeValidator.java", "diffHunk": "@@ -112,41 +118,48 @@ protected boolean shouldCheckTopLevelDeclaredType(AnnotatedTypeMirror type, Tree\n      *   <li>These properties should also hold recursively for component types of arrays, as wells\n      *       as bounds of type variables and wildcards.\n      * </ol>\n+     *\n+     * @param qualifierHierarchy the qualifier hierachy\n+     * @param type the type to test\n+     * @return list of reasons the type is invalid, or empty list if the type is valid\n      */\n-    protected Result isValidType(QualifierHierarchy qualifierHierarchy, AnnotatedTypeMirror type) {\n-        SimpleAnnotatedTypeScanner<Result, Void> scanner =\n-                new SimpleAnnotatedTypeScanner<Result, Void>() {\n+    protected List<DiagMessage> isValidType(\n+            QualifierHierarchy qualifierHierarchy, AnnotatedTypeMirror type) {\n+        SimpleAnnotatedTypeScanner<List<DiagMessage>, Void> scanner =\n+                new SimpleAnnotatedTypeScanner<List<DiagMessage>, Void>() {\n                     @Override\n-                    protected Result defaultAction(AnnotatedTypeMirror type, Void aVoid) {\n+                    protected List<DiagMessage> defaultAction(\n+                            AnnotatedTypeMirror type, Void aVoid) {\n                         return isTopLevelValidType(qualifierHierarchy, type);\n                     }\n \n                     @Override\n-                    protected Result reduce(Result r1, Result r2) {\n-                        if (r1 == null) {\n-                            if (r2 == null) {\n-                                return Result.SUCCESS;\n-                            }\n-                            return r2;\n-                        } else if (r2 == null) {\n-                            return r1;\n-                        }\n-                        return r1.merge(r2);\n+                    protected List<DiagMessage> reduce(List<DiagMessage> r1, List<DiagMessage> r2) {\n+                        return DiagMessage.mergeLists(r1, r2);\n                     }\n                 };\n         return scanner.visit(type);\n     }\n \n-    /** Checks every property listed in {@link #isValidType}, but only for the top level type. */\n-    protected Result isTopLevelValidType(\n+    /**\n+     * Checks every property listed in {@link #isValidType}, but only for the top level type. If\n+     * successful, returns null. If not successful, returns diagnostics.\n+     *\n+     * @param qualifierHierarchy the qualifier hierarchy\n+     * @param type the type to be checked\n+     * @return the diagnostics indicating failure, or null if successful", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ebe9e3037e22f30e0926f73a407fbb7cc2bdc0"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjg1NDgxOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/AggregateChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo1MjoyMFrOFz7_HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDo0NDowMlrOFz987w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNDUwOA==", "bodyText": "I'm not a big fan of static imports in general... for the single use here it seems unnecessary to change.", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r390004508", "createdAt": "2020-03-09T22:52:20Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/AggregateChecker.java", "diffHunk": "@@ -1,5 +1,7 @@\n package org.checkerframework.framework.source;\n \n+import static javax.tools.Diagnostic.Kind.ERROR;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ebe9e3037e22f30e0926f73a407fbb7cc2bdc0"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzNjcxOQ==", "bodyText": "I'd prefer to keep this, if possible, because it makes all uses consistent throughout the codebase.\nUsing static imports was necessary in places because the codebase and its libraries contain multiple Diagnostic classes and multiple Kind classes, so only a static import would work.  So then I used it throughout.\nI'll change it in this class, though.", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r390036719", "createdAt": "2020-03-10T00:44:02Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/AggregateChecker.java", "diffHunk": "@@ -1,5 +1,7 @@\n package org.checkerframework.framework.source;\n \n+import static javax.tools.Diagnostic.Kind.ERROR;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNDUwOA=="}, "originalCommit": {"oid": "92ebe9e3037e22f30e0926f73a407fbb7cc2bdc0"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjg2MDU0OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/Result.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo1NTowNFrOFz8CgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTozMjoyMlrOF0UY5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNTM3Nw==", "bodyText": "Why the List part? For a single Result isn't a single DiagMessage the replacement?", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r390005377", "createdAt": "2020-03-09T22:55:04Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/Result.java", "diffHunk": "@@ -19,7 +20,9 @@\n  * compiler interface.\n  *\n  * @see SourceChecker#report\n+ * @deprecated use {@code List<DiagMessage>} instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb367b2809394dd132762f763480c822ea1d0248"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMzM1NQ==", "bodyText": "A Result contains a list of DiagMessage.  (Result.failure returns a Result that contains only a single DiagMessage, but other methods create non-singletons.)", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r390033355", "createdAt": "2020-03-10T00:31:23Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/Result.java", "diffHunk": "@@ -19,7 +20,9 @@\n  * compiler interface.\n  *\n  * @see SourceChecker#report\n+ * @deprecated use {@code List<DiagMessage>} instead", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNTM3Nw=="}, "originalCommit": {"oid": "fb367b2809394dd132762f763480c822ea1d0248"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM1OTU1NQ==", "bodyText": "I found a single method org.checkerframework.common.basetype.BaseTypeValidator#isValidType that possibly returns a non-singleton list. The default suggestion should be to use a DiagMessage instead and exceptional places might use a List<DiagMessage>. It seems rather confusing to always suggest List<DiagMessage>.", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r390359555", "createdAt": "2020-03-10T14:35:16Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/Result.java", "diffHunk": "@@ -19,7 +20,9 @@\n  * compiler interface.\n  *\n  * @see SourceChecker#report\n+ * @deprecated use {@code List<DiagMessage>} instead", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNTM3Nw=="}, "originalCommit": {"oid": "fb367b2809394dd132762f763480c822ea1d0248"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQwNDMyNA==", "bodyText": "I see your point.  I have made this change.", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r390404324", "createdAt": "2020-03-10T15:32:22Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/Result.java", "diffHunk": "@@ -19,7 +20,9 @@\n  * compiler interface.\n  *\n  * @see SourceChecker#report\n+ * @deprecated use {@code List<DiagMessage>} instead", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNTM3Nw=="}, "originalCommit": {"oid": "fb367b2809394dd132762f763480c822ea1d0248"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjg3Mjk5OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzowMDo1MlrOFz8J4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzowMDo1MlrOFz8J4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNzI2NQ==", "bodyText": "As this is a private method, no external clients can use this.\nSo maybe this comment is better on the public void report(Object source, DiagMessage d) above?", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r390007265", "createdAt": "2020-03-09T23:00:52Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -894,56 +895,79 @@ public void report(final Result r, final Object src) {\n             return;\n         }\n \n-        for (Result.DiagMessage msg : r.getDiagMessages()) {\n-            if (r.isFailure()) {\n-                this.message(\n-                        hasOption(\"warns\")\n-                                ? Diagnostic.Kind.MANDATORY_WARNING\n-                                : Diagnostic.Kind.ERROR,\n-                        src,\n-                        msg.getMessageKey(),\n-                        msg.getArgs());\n-            } else if (r.isWarning()) {\n-                this.message(\n-                        Diagnostic.Kind.MANDATORY_WARNING, src, msg.getMessageKey(), msg.getArgs());\n-            } else {\n-                this.message(Diagnostic.Kind.NOTE, src, msg.getMessageKey(), msg.getArgs());\n-            }\n+        for (DiagMessage dmsg : r.getDiagMessages()) {\n+            report(src, dmsg);\n         }\n     }\n \n     /**\n-     * Prints a message (error, warning, note, etc.) via JSR-269.\n+     * Reports an error. By default, prints it to the screen via the compiler's internal messager.\n      *\n-     * @param kind the type of message to print\n-     * @param source the object from which to obtain source position information; may be an Element,\n-     *     a Tree, or null\n-     * @param msgKey the message key to print\n+     * @param source the source position information; may be an Element, a Tree, or null\n+     * @param messageKey the message key\n      * @param args arguments for interpolation in the string corresponding to the given message key\n-     * @see Diagnostic\n-     * @throws IllegalArgumentException if {@code source} is neither a {@link Tree} nor an {@link\n-     *     Element}\n-     */\n-    private void message(\n-            Diagnostic.Kind kind,\n-            @Nullable Object source,\n-            @CompilerMessageKey String msgKey,\n-            Object... args) {\n+     */\n+    public void reportError(Object source, @CompilerMessageKey String messageKey, Object... args) {\n+        report(source, ERROR, messageKey, args);\n+    }\n+\n+    /**\n+     * Reports a warning. By default, prints it to the screen via the compiler's internal messager.\n+     *\n+     * @param source the source position information; may be an Element, a Tree, or null\n+     * @param messageKey the message key\n+     * @param args arguments for interpolation in the string corresponding to the given message key\n+     */\n+    public void reportWarning(\n+            Object source, @CompilerMessageKey String messageKey, Object... args) {\n+        report(source, MANDATORY_WARNING, messageKey, args);\n+    }\n \n+    /**\n+     * Reports a diagnostic message. By default, prints it to the screen via the compiler's internal\n+     * messager.\n+     *\n+     * @param source the source position information; may be an Element, a Tree, or null\n+     * @param d the diagnostic message\n+     */\n+    public void report(Object source, DiagMessage d) {\n+        report(source, d.getKind(), d.getMessageKey(), d.getArgs());\n+    }\n+\n+    /**\n+     * Reports a diagnostic message. By default, it prints it to the screen via the compiler's\n+     * internal messager; otherwise, the method returns with no side effects.\n+     *\n+     * <p>Most clients should use {@link #reportError} or {@link #reportWarning}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb367b2809394dd132762f763480c822ea1d0248"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjg3ODYzOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzowMzozMVrOFz8NYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDozMDowMFrOFz9ucw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwODE2Mw==", "bodyText": "I'm a bit confused about the By default and otherwise text. This is a private method, so subclasses can't adapt it. How/when do I reach the otherwise case?", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r390008163", "createdAt": "2020-03-09T23:03:31Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -894,56 +895,79 @@ public void report(final Result r, final Object src) {\n             return;\n         }\n \n-        for (Result.DiagMessage msg : r.getDiagMessages()) {\n-            if (r.isFailure()) {\n-                this.message(\n-                        hasOption(\"warns\")\n-                                ? Diagnostic.Kind.MANDATORY_WARNING\n-                                : Diagnostic.Kind.ERROR,\n-                        src,\n-                        msg.getMessageKey(),\n-                        msg.getArgs());\n-            } else if (r.isWarning()) {\n-                this.message(\n-                        Diagnostic.Kind.MANDATORY_WARNING, src, msg.getMessageKey(), msg.getArgs());\n-            } else {\n-                this.message(Diagnostic.Kind.NOTE, src, msg.getMessageKey(), msg.getArgs());\n-            }\n+        for (DiagMessage dmsg : r.getDiagMessages()) {\n+            report(src, dmsg);\n         }\n     }\n \n     /**\n-     * Prints a message (error, warning, note, etc.) via JSR-269.\n+     * Reports an error. By default, prints it to the screen via the compiler's internal messager.\n      *\n-     * @param kind the type of message to print\n-     * @param source the object from which to obtain source position information; may be an Element,\n-     *     a Tree, or null\n-     * @param msgKey the message key to print\n+     * @param source the source position information; may be an Element, a Tree, or null\n+     * @param messageKey the message key\n      * @param args arguments for interpolation in the string corresponding to the given message key\n-     * @see Diagnostic\n-     * @throws IllegalArgumentException if {@code source} is neither a {@link Tree} nor an {@link\n-     *     Element}\n-     */\n-    private void message(\n-            Diagnostic.Kind kind,\n-            @Nullable Object source,\n-            @CompilerMessageKey String msgKey,\n-            Object... args) {\n+     */\n+    public void reportError(Object source, @CompilerMessageKey String messageKey, Object... args) {\n+        report(source, ERROR, messageKey, args);\n+    }\n+\n+    /**\n+     * Reports a warning. By default, prints it to the screen via the compiler's internal messager.\n+     *\n+     * @param source the source position information; may be an Element, a Tree, or null\n+     * @param messageKey the message key\n+     * @param args arguments for interpolation in the string corresponding to the given message key\n+     */\n+    public void reportWarning(\n+            Object source, @CompilerMessageKey String messageKey, Object... args) {\n+        report(source, MANDATORY_WARNING, messageKey, args);\n+    }\n \n+    /**\n+     * Reports a diagnostic message. By default, prints it to the screen via the compiler's internal\n+     * messager.\n+     *\n+     * @param source the source position information; may be an Element, a Tree, or null\n+     * @param d the diagnostic message\n+     */\n+    public void report(Object source, DiagMessage d) {\n+        report(source, d.getKind(), d.getMessageKey(), d.getArgs());\n+    }\n+\n+    /**\n+     * Reports a diagnostic message. By default, it prints it to the screen via the compiler's\n+     * internal messager; otherwise, the method returns with no side effects.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb367b2809394dd132762f763480c822ea1d0248"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMzAxMQ==", "bodyText": "Via printOrStoreMessage.  I'll clarify the comment.", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r390033011", "createdAt": "2020-03-10T00:30:00Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -894,56 +895,79 @@ public void report(final Result r, final Object src) {\n             return;\n         }\n \n-        for (Result.DiagMessage msg : r.getDiagMessages()) {\n-            if (r.isFailure()) {\n-                this.message(\n-                        hasOption(\"warns\")\n-                                ? Diagnostic.Kind.MANDATORY_WARNING\n-                                : Diagnostic.Kind.ERROR,\n-                        src,\n-                        msg.getMessageKey(),\n-                        msg.getArgs());\n-            } else if (r.isWarning()) {\n-                this.message(\n-                        Diagnostic.Kind.MANDATORY_WARNING, src, msg.getMessageKey(), msg.getArgs());\n-            } else {\n-                this.message(Diagnostic.Kind.NOTE, src, msg.getMessageKey(), msg.getArgs());\n-            }\n+        for (DiagMessage dmsg : r.getDiagMessages()) {\n+            report(src, dmsg);\n         }\n     }\n \n     /**\n-     * Prints a message (error, warning, note, etc.) via JSR-269.\n+     * Reports an error. By default, prints it to the screen via the compiler's internal messager.\n      *\n-     * @param kind the type of message to print\n-     * @param source the object from which to obtain source position information; may be an Element,\n-     *     a Tree, or null\n-     * @param msgKey the message key to print\n+     * @param source the source position information; may be an Element, a Tree, or null\n+     * @param messageKey the message key\n      * @param args arguments for interpolation in the string corresponding to the given message key\n-     * @see Diagnostic\n-     * @throws IllegalArgumentException if {@code source} is neither a {@link Tree} nor an {@link\n-     *     Element}\n-     */\n-    private void message(\n-            Diagnostic.Kind kind,\n-            @Nullable Object source,\n-            @CompilerMessageKey String msgKey,\n-            Object... args) {\n+     */\n+    public void reportError(Object source, @CompilerMessageKey String messageKey, Object... args) {\n+        report(source, ERROR, messageKey, args);\n+    }\n+\n+    /**\n+     * Reports a warning. By default, prints it to the screen via the compiler's internal messager.\n+     *\n+     * @param source the source position information; may be an Element, a Tree, or null\n+     * @param messageKey the message key\n+     * @param args arguments for interpolation in the string corresponding to the given message key\n+     */\n+    public void reportWarning(\n+            Object source, @CompilerMessageKey String messageKey, Object... args) {\n+        report(source, MANDATORY_WARNING, messageKey, args);\n+    }\n \n+    /**\n+     * Reports a diagnostic message. By default, prints it to the screen via the compiler's internal\n+     * messager.\n+     *\n+     * @param source the source position information; may be an Element, a Tree, or null\n+     * @param d the diagnostic message\n+     */\n+    public void report(Object source, DiagMessage d) {\n+        report(source, d.getKind(), d.getMessageKey(), d.getArgs());\n+    }\n+\n+    /**\n+     * Reports a diagnostic message. By default, it prints it to the screen via the compiler's\n+     * internal messager; otherwise, the method returns with no side effects.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwODE2Mw=="}, "originalCommit": {"oid": "fb367b2809394dd132762f763480c822ea1d0248"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjg4MjIyOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzowNToxMlrOFz8Pew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDo0NzoyNFrOFz-AVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwODY5OQ==", "bodyText": "Am I missing where this is used in this file?", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r390008699", "createdAt": "2020-03-09T23:05:12Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -3,6 +3,8 @@\n // The imports from com.sun are all @jdk.Exported and therefore somewhat safe to use.\n // Try to avoid using non-@jdk.Exported classes.\n \n+import static javax.tools.Diagnostic.Kind.ERROR;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb367b2809394dd132762f763480c822ea1d0248"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzNzU5MQ==", "bodyText": "It's used in a switch statement where the import isn't needed.  Thanks for catching that.", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r390037591", "createdAt": "2020-03-10T00:47:24Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -3,6 +3,8 @@\n // The imports from com.sun are all @jdk.Exported and therefore somewhat safe to use.\n // Try to avoid using non-@jdk.Exported classes.\n \n+import static javax.tools.Diagnostic.Kind.ERROR;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwODY5OQ=="}, "originalCommit": {"oid": "fb367b2809394dd132762f763480c822ea1d0248"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTE0NDg3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDozNzoxOFrOF0RwVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTozMjoxM1rOF0UYhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM2MTE3Mg==", "bodyText": "This method either returns a singleton list or the empty list, right?\nIf so, I would rather model it like FieldInvariants.isSuperInvariant and return DiagMessage or null.\nThis makes the code and logic simpler, and the Result to DiagMessage transition more uniform.", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r390361172", "createdAt": "2020-03-10T14:37:18Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeValidator.java", "diffHunk": "@@ -112,41 +118,48 @@ protected boolean shouldCheckTopLevelDeclaredType(AnnotatedTypeMirror type, Tree\n      *   <li>These properties should also hold recursively for component types of arrays, as wells\n      *       as bounds of type variables and wildcards.\n      * </ol>\n+     *\n+     * @param qualifierHierarchy the qualifier hierachy\n+     * @param type the type to test\n+     * @return list of reasons the type is invalid, or empty list if the type is valid\n      */\n-    protected Result isValidType(QualifierHierarchy qualifierHierarchy, AnnotatedTypeMirror type) {\n-        SimpleAnnotatedTypeScanner<Result, Void> scanner =\n-                new SimpleAnnotatedTypeScanner<Result, Void>() {\n+    protected List<DiagMessage> isValidType(\n+            QualifierHierarchy qualifierHierarchy, AnnotatedTypeMirror type) {\n+        SimpleAnnotatedTypeScanner<List<DiagMessage>, Void> scanner =\n+                new SimpleAnnotatedTypeScanner<List<DiagMessage>, Void>() {\n                     @Override\n-                    protected Result defaultAction(AnnotatedTypeMirror type, Void aVoid) {\n+                    protected List<DiagMessage> defaultAction(\n+                            AnnotatedTypeMirror type, Void aVoid) {\n                         return isTopLevelValidType(qualifierHierarchy, type);\n                     }\n \n                     @Override\n-                    protected Result reduce(Result r1, Result r2) {\n-                        if (r1 == null) {\n-                            if (r2 == null) {\n-                                return Result.SUCCESS;\n-                            }\n-                            return r2;\n-                        } else if (r2 == null) {\n-                            return r1;\n-                        }\n-                        return r1.merge(r2);\n+                    protected List<DiagMessage> reduce(List<DiagMessage> r1, List<DiagMessage> r2) {\n+                        return DiagMessage.mergeLists(r1, r2);\n                     }\n                 };\n         return scanner.visit(type);\n     }\n \n-    /** Checks every property listed in {@link #isValidType}, but only for the top level type. */\n-    protected Result isTopLevelValidType(\n+    /**\n+     * Checks every property listed in {@link #isValidType}, but only for the top level type. If\n+     * successful, returns an empty list. If not successful, returns diagnostics.\n+     *\n+     * @param qualifierHierarchy the qualifier hierarchy\n+     * @param type the type to be checked\n+     * @return the diagnostics indicating failure, or an empty list if successful\n+     */\n+    protected List<DiagMessage> isTopLevelValidType(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8057f49d8b65e9dd00d7fb8413a633f0827eb446"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQwNDIzMA==", "bodyText": "Yes, you are right that the method returns a singleton list or the empty list.\nChanging its type would make it slightly simpler, but would complicate its caller isValidType, which would need to immediately convert the null or DiagMessage into a list.  Take a look and let me know if you agree.", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r390404230", "createdAt": "2020-03-10T15:32:13Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeValidator.java", "diffHunk": "@@ -112,41 +118,48 @@ protected boolean shouldCheckTopLevelDeclaredType(AnnotatedTypeMirror type, Tree\n      *   <li>These properties should also hold recursively for component types of arrays, as wells\n      *       as bounds of type variables and wildcards.\n      * </ol>\n+     *\n+     * @param qualifierHierarchy the qualifier hierachy\n+     * @param type the type to test\n+     * @return list of reasons the type is invalid, or empty list if the type is valid\n      */\n-    protected Result isValidType(QualifierHierarchy qualifierHierarchy, AnnotatedTypeMirror type) {\n-        SimpleAnnotatedTypeScanner<Result, Void> scanner =\n-                new SimpleAnnotatedTypeScanner<Result, Void>() {\n+    protected List<DiagMessage> isValidType(\n+            QualifierHierarchy qualifierHierarchy, AnnotatedTypeMirror type) {\n+        SimpleAnnotatedTypeScanner<List<DiagMessage>, Void> scanner =\n+                new SimpleAnnotatedTypeScanner<List<DiagMessage>, Void>() {\n                     @Override\n-                    protected Result defaultAction(AnnotatedTypeMirror type, Void aVoid) {\n+                    protected List<DiagMessage> defaultAction(\n+                            AnnotatedTypeMirror type, Void aVoid) {\n                         return isTopLevelValidType(qualifierHierarchy, type);\n                     }\n \n                     @Override\n-                    protected Result reduce(Result r1, Result r2) {\n-                        if (r1 == null) {\n-                            if (r2 == null) {\n-                                return Result.SUCCESS;\n-                            }\n-                            return r2;\n-                        } else if (r2 == null) {\n-                            return r1;\n-                        }\n-                        return r1.merge(r2);\n+                    protected List<DiagMessage> reduce(List<DiagMessage> r1, List<DiagMessage> r2) {\n+                        return DiagMessage.mergeLists(r1, r2);\n                     }\n                 };\n         return scanner.visit(type);\n     }\n \n-    /** Checks every property listed in {@link #isValidType}, but only for the top level type. */\n-    protected Result isTopLevelValidType(\n+    /**\n+     * Checks every property listed in {@link #isValidType}, but only for the top level type. If\n+     * successful, returns an empty list. If not successful, returns diagnostics.\n+     *\n+     * @param qualifierHierarchy the qualifier hierarchy\n+     * @param type the type to be checked\n+     * @return the diagnostics indicating failure, or an empty list if successful\n+     */\n+    protected List<DiagMessage> isTopLevelValidType(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM2MTE3Mg=="}, "originalCommit": {"oid": "8057f49d8b65e9dd00d7fb8413a633f0827eb446"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1885, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}