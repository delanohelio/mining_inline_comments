{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzOTYzMzQz", "number": 3371, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOToxMTozMlrOEKPa_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDoyMTozOVrOEKQ06g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTczODg3OnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOToxMTozMlrOGrKz7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOToxMTozMlrOGrKz7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxOTA4NA==", "bodyText": "This will be improved by https://github.com/typetools/checker-framework/pull/3395/files#diff-b5fa6abf87cb7ac00c95e235720bfa66R50-R56. .trim() seems not the best solution here.\nThe reason I added trim() is to remove the extra blank line at the end of the string graph. This blank line is generated by visualizing special blocks (exit or special-exit). If we left this extra blank line, Excepted.txt will fail the basic style test (too many blank lines at the end of the file).", "url": "https://github.com/typetools/checker-framework/pull/3371#discussion_r447919084", "createdAt": "2020-06-30T19:11:32Z", "author": {"login": "xingweitian"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java", "diffHunk": "@@ -25,7 +25,7 @@\n     @Override\n     public Map<String, Object> visualize(\n             ControlFlowGraph cfg, Block entry, @Nullable Analysis<V, S, T> analysis) {\n-        String stringGraph = visualizeGraph(cfg, entry, analysis);\n+        String stringGraph = visualizeGraph(cfg, entry, analysis).trim();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c97eb5dbe49074b482779a8cdaee09a42920600c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTc3ODk3OnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/livevariable/package-info.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOToyMzoyN1rOGrLMZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNToyNDoyOFrOGrqqzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyNTM1MA==", "bodyText": "I think this should just show the code in LiveVariablePlayground.  This is a link to the Javadoc which doesn't explain how to use the analysis.  The just delete LiveVariablePlayground as it contents are identical to LiveVariable in the test directory.\nMore generally, do you expect people to use this analysis or this just for testing?  If it's for testing, it should be moved to src/test/java.  If it's for general use, should it be mentioned in the dataflow manual?", "url": "https://github.com/typetools/checker-framework/pull/3371#discussion_r447925350", "createdAt": "2020-06-30T19:23:27Z", "author": {"login": "smillst"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/livevariable/package-info.java", "diffHunk": "@@ -0,0 +1,9 @@\n+/**\n+ * Classes using for live variable analysis. Live variable analysis is a backward analysis to\n+ * calculate the variables that are live at each point in the program. To run live variable\n+ * analysis, see {@link org.checkerframework.dataflow.cfg.playground.LiveVariablePlayground}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c97eb5dbe49074b482779a8cdaee09a42920600c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA5ODgyMg==", "bodyText": "Thanks for the comment! I would expect people to run the LiveVariablePlayground. It now has been mentioned in the manual.\nI am not sure what to do with this package-info.java, I just wanted to point the users to LiveVariablePlayground. Do you mean that I need to copy and paste LiveVariablePlayground's code here?", "url": "https://github.com/typetools/checker-framework/pull/3371#discussion_r448098822", "createdAt": "2020-07-01T03:45:52Z", "author": {"login": "xingweitian"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/livevariable/package-info.java", "diffHunk": "@@ -0,0 +1,9 @@\n+/**\n+ * Classes using for live variable analysis. Live variable analysis is a backward analysis to\n+ * calculate the variables that are live at each point in the program. To run live variable\n+ * analysis, see {@link org.checkerframework.dataflow.cfg.playground.LiveVariablePlayground}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyNTM1MA=="}, "originalCommit": {"oid": "c97eb5dbe49074b482779a8cdaee09a42920600c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQzOTgwOQ==", "bodyText": "I see the livevariable backwards analysis like the constantpropagation forward analyses: demo analyses for the dataflow framework that are only used in their respective playgrounds. Either one could be useful to users.\nIf we decide to move the livevariable implementation we should also move the constantpropagation and the playgrounds to a test directory.\nI like the suggestion of adding a section to the dataflow manual, like for constantpropagation: https://github.com/typetools/checker-framework/blob/master/dataflow/manual/content.tex#L1699\nAs this PR contains the tests for the backwards analysis implementation, it might be good to merge it and work on the manual in a separate PR. But it's also not critical to get this PR into the release, so we can work on the manual section in this PR.", "url": "https://github.com/typetools/checker-framework/pull/3371#discussion_r448439809", "createdAt": "2020-07-01T15:22:33Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/livevariable/package-info.java", "diffHunk": "@@ -0,0 +1,9 @@\n+/**\n+ * Classes using for live variable analysis. Live variable analysis is a backward analysis to\n+ * calculate the variables that are live at each point in the program. To run live variable\n+ * analysis, see {@link org.checkerframework.dataflow.cfg.playground.LiveVariablePlayground}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyNTM1MA=="}, "originalCommit": {"oid": "c97eb5dbe49074b482779a8cdaee09a42920600c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0MTAzOA==", "bodyText": "Oh, this PR already adds it to the dataflow manual. So that's not a blocker.", "url": "https://github.com/typetools/checker-framework/pull/3371#discussion_r448441038", "createdAt": "2020-07-01T15:24:28Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/livevariable/package-info.java", "diffHunk": "@@ -0,0 +1,9 @@\n+/**\n+ * Classes using for live variable analysis. Live variable analysis is a backward analysis to\n+ * calculate the variables that are live at each point in the program. To run live variable\n+ * analysis, see {@link org.checkerframework.dataflow.cfg.playground.LiveVariablePlayground}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyNTM1MA=="}, "originalCommit": {"oid": "c97eb5dbe49074b482779a8cdaee09a42920600c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTkzMjI2OnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/livevariable/LiveVar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDoxMDowNlrOGrMsWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDoxMDowNlrOGrMsWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0OTkxMw==", "bodyText": "This should be named LiveVarValue.", "url": "https://github.com/typetools/checker-framework/pull/3371#discussion_r447949913", "createdAt": "2020-06-30T20:10:06Z", "author": {"login": "smillst"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/livevariable/LiveVar.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.checkerframework.dataflow.livevariable;\n+\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.checkerframework.dataflow.analysis.AbstractValue;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.javacutil.BugInCF;\n+\n+/** A live variable wrapper turning node into abstract value. */\n+public class LiveVar implements AbstractValue<LiveVar> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15b652df627b473a9fd59c016f51cec891be0b36"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTkzNTk1OnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/livevariable/LiveVar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDoxMToyM1rOGrMuzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDoxMToyM1rOGrMuzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk1MDU0Mg==", "bodyText": "A \"live variable wrapper\" would wrap a live variable, but this is wrapping a node.  Could you please improve this documentation?", "url": "https://github.com/typetools/checker-framework/pull/3371#discussion_r447950542", "createdAt": "2020-06-30T20:11:23Z", "author": {"login": "smillst"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/livevariable/LiveVar.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.checkerframework.dataflow.livevariable;\n+\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.checkerframework.dataflow.analysis.AbstractValue;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.javacutil.BugInCF;\n+\n+/** A live variable wrapper turning node into abstract value. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15b652df627b473a9fd59c016f51cec891be0b36"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTk2OTA2OnYy", "diffSide": "RIGHT", "path": "dataflow/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDoyMTozOVrOGrNDTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDoyMTozOVrOGrNDTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk1NTc4OA==", "bodyText": "FYI, I rewrote the Makefile test to a Gradle test.", "url": "https://github.com/typetools/checker-framework/pull/3371#discussion_r447955788", "createdAt": "2020-06-30T20:21:39Z", "author": {"login": "smillst"}, "path": "dataflow/build.gradle", "diffHunk": "@@ -31,3 +31,31 @@ task deployArtifactsToSonatype {\n         mvnSignAndDeployMultipleToSonatype(shadowJar.archiveFile.get().toString(), sourcesJar.archiveFile.get().toString(), javadocJar.archiveFile.get().toString(), \"${pomFiles}/dataflow-shaded-pom.xml\")\n     }\n }\n+\n+task liveVariableTest(dependsOn: compileTestJava, group: 'Verification') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a178adedbcb32f33af570ace45e78f7df76e5f02"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1692, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}