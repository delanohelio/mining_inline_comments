{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NjE0MDAy", "number": 3107, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTozNTo0MVrODi3Dtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTozNzowN1rODi3FZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODgwMjQ3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/TypeFromExpressionVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTozNTo0MVrOFuWDUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTozNTo0MVrOFuWDUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE0MDExNA==", "bodyText": "Should this is TypeKinds instead of instanceof?", "url": "https://github.com/typetools/checker-framework/pull/3107#discussion_r384140114", "createdAt": "2020-02-25T21:35:41Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/TypeFromExpressionVisitor.java", "diffHunk": "@@ -224,8 +225,17 @@ public AnnotatedTypeMirror visitArrayAccess(ArrayAccessTree node, AnnotatedTypeF\n             f.visitorState.setAssignmentContext(null);\n \n             AnnotatedTypeMirror type = f.getAnnotatedType(node.getExpression());\n-            assert type instanceof AnnotatedArrayType;\n-            return ((AnnotatedArrayType) type).getComponentType();\n+            if (type instanceof AnnotatedArrayType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "259ac1dcaff0b244d88f957d40e7e7a4450325de"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODgwNjc3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/TypeFromExpressionVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTozNzowN1rOFuWGAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTozNzowN1rOFuWGAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE0MDgwMA==", "bodyText": "Do you expect this to be an uninferred type argument? If so should we check that it is?", "url": "https://github.com/typetools/checker-framework/pull/3107#discussion_r384140800", "createdAt": "2020-02-25T21:37:07Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/TypeFromExpressionVisitor.java", "diffHunk": "@@ -224,8 +225,17 @@ public AnnotatedTypeMirror visitArrayAccess(ArrayAccessTree node, AnnotatedTypeF\n             f.visitorState.setAssignmentContext(null);\n \n             AnnotatedTypeMirror type = f.getAnnotatedType(node.getExpression());\n-            assert type instanceof AnnotatedArrayType;\n-            return ((AnnotatedArrayType) type).getComponentType();\n+            if (type instanceof AnnotatedArrayType) {\n+                return ((AnnotatedArrayType) type).getComponentType();\n+            } else if (type instanceof AnnotatedWildcardType) {\n+                // Clean-up after Issue #979.\n+                AnnotatedWildcardType wc = (AnnotatedWildcardType) type;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "259ac1dcaff0b244d88f957d40e7e7a4450325de"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1861, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}