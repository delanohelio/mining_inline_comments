{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMzk4OTE1", "number": 3552, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMzoxNjo0MlrOEVMz4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMzoyMTo1MlrOEVM4Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjY1NDQxOnYy", "diffSide": "RIGHT", "path": "dataflow/build.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMzoxNjo0MlrOG70p5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxOToyOToyMVrOG8XkjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4MTg2MA==", "bodyText": "I guess these are leftovers that are already in master?", "url": "https://github.com/typetools/checker-framework/pull/3552#discussion_r465381860", "createdAt": "2020-08-04T23:16:42Z", "author": {"login": "wmdietl"}, "path": "dataflow/build.gradle", "diffHunk": "@@ -48,7 +48,7 @@ task liveVariableTest(dependsOn: compileTestJava, group: 'Verification') {\n             if (!JavaVersion.current().java9Compatible) {\n                 jvmArgs += \"-Xbootclasspath/p:${configurations.javacJar.asPath}\"\n             }\n-            classpath = sourceSets.test.compileClasspath\n+            classpath = sourceSets.test.runtimeClasspath", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdb29218c88998dba9023ee6b20bb23f7a2a773a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5MjI0Nw==", "bodyText": "No, this is a bug fix for a bug that was exposed by these changes.  It could be committed separately, but that would create another pull request.  Should we do so?", "url": "https://github.com/typetools/checker-framework/pull/3552#discussion_r465392247", "createdAt": "2020-08-04T23:50:42Z", "author": {"login": "mernst"}, "path": "dataflow/build.gradle", "diffHunk": "@@ -48,7 +48,7 @@ task liveVariableTest(dependsOn: compileTestJava, group: 'Verification') {\n             if (!JavaVersion.current().java9Compatible) {\n                 jvmArgs += \"-Xbootclasspath/p:${configurations.javacJar.asPath}\"\n             }\n-            classpath = sourceSets.test.compileClasspath\n+            classpath = sourceSets.test.runtimeClasspath", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4MTg2MA=="}, "originalCommit": {"oid": "fdb29218c88998dba9023ee6b20bb23f7a2a773a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk1MzkzMg==", "bodyText": "These fixes were already merged to master, but master had not been merged into this branch.  I fixed that.", "url": "https://github.com/typetools/checker-framework/pull/3552#discussion_r465953932", "createdAt": "2020-08-05T19:29:21Z", "author": {"login": "smillst"}, "path": "dataflow/build.gradle", "diffHunk": "@@ -48,7 +48,7 @@ task liveVariableTest(dependsOn: compileTestJava, group: 'Verification') {\n             if (!JavaVersion.current().java9Compatible) {\n                 jvmArgs += \"-Xbootclasspath/p:${configurations.javacJar.asPath}\"\n             }\n-            classpath = sourceSets.test.compileClasspath\n+            classpath = sourceSets.test.runtimeClasspath", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4MTg2MA=="}, "originalCommit": {"oid": "fdb29218c88998dba9023ee6b20bb23f7a2a773a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjY2MzYwOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/stub/StubGenerator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMzoyMToxN1rOG70vPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoyMzowN1rOG8_MBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4MzIzMA==", "bodyText": "Why can this one not use SystemUtil.join? Should we add a corresponding overload, to have one place to look for such join methods, instead of looking for either SystemUtil or UtilPlume?", "url": "https://github.com/typetools/checker-framework/pull/3552#discussion_r465383230", "createdAt": "2020-08-04T23:21:17Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/StubGenerator.java", "diffHunk": "@@ -367,21 +368,14 @@ private void indent() {\n     }\n \n     /**\n-     * Return a string representation of the list in the form of {@code item1, item2, item3, ...}.\n+     * Return a string representation of the list in the form of {@code item1, item2, item3, ...},\n+     * without surrounding square brackets as the default representation has.\n      *\n-     * <p>instead of the default representation, {@code [item1, item2, item3, ...]}\n+     * @param lst a list to format\n+     * @return a string representation of the list, without surrounding square brackets\n      */\n     private String formatList(List<?> lst) {\n-        StringBuilder sb = new StringBuilder();\n-        boolean isFirst = true;\n-        for (Object o : lst) {\n-            if (!isFirst) {\n-                sb.append(\", \");\n-            }\n-            sb.append(o);\n-            isFirst = false;\n-        }\n-        return sb.toString();\n+        return UtilPlume.join(\", \", lst);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdb29218c88998dba9023ee6b20bb23f7a2a773a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5Mzc2OQ==", "bodyText": "Yes, it can use SystemUtil.join, but SystemUtil.join delegates to UtilPlume and this avoids the extra step.  I feel that eventually it would be good to remove the duplication and have only one version of the method.", "url": "https://github.com/typetools/checker-framework/pull/3552#discussion_r465393769", "createdAt": "2020-08-04T23:55:37Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/StubGenerator.java", "diffHunk": "@@ -367,21 +368,14 @@ private void indent() {\n     }\n \n     /**\n-     * Return a string representation of the list in the form of {@code item1, item2, item3, ...}.\n+     * Return a string representation of the list in the form of {@code item1, item2, item3, ...},\n+     * without surrounding square brackets as the default representation has.\n      *\n-     * <p>instead of the default representation, {@code [item1, item2, item3, ...]}\n+     * @param lst a list to format\n+     * @return a string representation of the list, without surrounding square brackets\n      */\n     private String formatList(List<?> lst) {\n-        StringBuilder sb = new StringBuilder();\n-        boolean isFirst = true;\n-        for (Object o : lst) {\n-            if (!isFirst) {\n-                sb.append(\", \");\n-            }\n-            sb.append(o);\n-            isFirst = false;\n-        }\n-        return sb.toString();\n+        return UtilPlume.join(\", \", lst);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4MzIzMA=="}, "originalCommit": {"oid": "fdb29218c88998dba9023ee6b20bb23f7a2a773a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMzAxMw==", "bodyText": "#3564 takes a step toward that.  I would like to reduce usage of plume-util in favor of Guava, in the future.", "url": "https://github.com/typetools/checker-framework/pull/3552#discussion_r466603013", "createdAt": "2020-08-06T18:23:07Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/StubGenerator.java", "diffHunk": "@@ -367,21 +368,14 @@ private void indent() {\n     }\n \n     /**\n-     * Return a string representation of the list in the form of {@code item1, item2, item3, ...}.\n+     * Return a string representation of the list in the form of {@code item1, item2, item3, ...},\n+     * without surrounding square brackets as the default representation has.\n      *\n-     * <p>instead of the default representation, {@code [item1, item2, item3, ...]}\n+     * @param lst a list to format\n+     * @return a string representation of the list, without surrounding square brackets\n      */\n     private String formatList(List<?> lst) {\n-        StringBuilder sb = new StringBuilder();\n-        boolean isFirst = true;\n-        for (Object o : lst) {\n-            if (!isFirst) {\n-                sb.append(\", \");\n-            }\n-            sb.append(o);\n-            isFirst = false;\n-        }\n-        return sb.toString();\n+        return UtilPlume.join(\", \", lst);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4MzIzMA=="}, "originalCommit": {"oid": "fdb29218c88998dba9023ee6b20bb23f7a2a773a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjY2NDk5OnYy", "diffSide": "RIGHT", "path": "javacutil/src/main/java/org/checkerframework/javacutil/AnnotationBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMzoyMTo1MlrOG70wEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMzoyMTo1MlrOG70wEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4MzQ0MA==", "bodyText": "Same question about UtilPlume.", "url": "https://github.com/typetools/checker-framework/pull/3552#discussion_r465383440", "createdAt": "2020-08-04T23:21:52Z", "author": {"login": "wmdietl"}, "path": "javacutil/src/main/java/org/checkerframework/javacutil/AnnotationBuilder.java", "diffHunk": "@@ -31,6 +31,7 @@\n import org.checkerframework.checker.interning.qual.Interned;\n import org.checkerframework.checker.nullness.qual.Nullable;\n import org.checkerframework.dataflow.qual.SideEffectFree;\n+import org.plumelib.util.UtilPlume;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdb29218c88998dba9023ee6b20bb23f7a2a773a"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1634, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}