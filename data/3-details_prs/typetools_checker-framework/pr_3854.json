{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MTI4NjQ2", "number": 3854, "title": "Define glb more precisely for the Nullness Checker", "bodyText": "This is important for whole-program inference, which uses GLB to combine stubs and source code.\nThe code for new method greatestLowerBoundInitialization is very similar to that for existing method leastUpperBoundInitialization.", "createdAt": "2020-11-04T04:40:14Z", "url": "https://github.com/typetools/checker-framework/pull/3854", "merged": true, "mergeCommit": {"oid": "938848df7cfbbac1881dc1b57843284b1e8f5682"}, "closed": true, "closedAt": "2020-11-05T16:52:21Z", "author": {"login": "mernst"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZFlOyAH2gAyNTE1MTI4NjQ2OjBlZjEzNzFkNTVkNTNmNWVkMDBhYWQ5OWJkYjYxNDhlNjg3NTk0NzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZlSgzgFqTUyNDQ2MzYxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0ef1371d55d53f5ed00aad99bdb6148e68759471", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/0ef1371d55d53f5ed00aad99bdb6148e68759471", "committedDate": "2020-11-04T03:55:32Z", "message": "Define glb more precisely for the Nullness Checker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "085c21389f84fd023aaf8ecf44887fe06887b973", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/085c21389f84fd023aaf8ecf44887fe06887b973", "committedDate": "2020-11-04T04:06:39Z", "message": "Fix cut-and-paste typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNjEyNDU5", "url": "https://github.com/typetools/checker-framework/pull/3854#pullrequestreview-523612459", "createdAt": "2020-11-04T18:06:57Z", "commit": {"oid": "085c21389f84fd023aaf8ecf44887fe06887b973"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODowNjo1N1rOHtj05w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODowODoxNlrOHtj3wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzNDk1MQ==", "bodyText": "If a and b are unrelated, then this will return an intersection type or an error type.  createUnderInitializationAnnotation uses the erased type of the intersection type and will throw an exception on the error type (I think).  Should bottom be returned instead?", "url": "https://github.com/typetools/checker-framework/pull/3854#discussion_r517534951", "createdAt": "2020-11-04T18:06:57Z", "author": {"login": "smillst"}, "path": "checker/src/main/java/org/checkerframework/checker/initialization/InitializationAnnotatedTypeFactory.java", "diffHunk": "@@ -888,5 +888,75 @@ protected TypeMirror lubTypeFrame(TypeMirror a, TypeMirror b) {\n \n             return TypesUtils.leastUpperBound(a, b, processingEnv);\n         }\n+\n+        /**\n+         * Compute the greatest lower bound of two initialization qualifiers. Returns null if one of\n+         * the qualifiers is not in the initialization hierarachy. Subclasses should override\n+         * greatestLowerBound and call this method for initialization qualifiers.\n+         *\n+         * @param anno1 an initialization qualifier\n+         * @param qual1 a qualifier kind\n+         * @param anno2 an initialization qualifier\n+         * @param qual2 a qualifier kind\n+         * @return the glb of anno1 and anno2\n+         */\n+        protected AnnotationMirror greatestLowerBoundInitialization(\n+                AnnotationMirror anno1,\n+                QualifierKind qual1,\n+                AnnotationMirror anno2,\n+                QualifierKind qual2) {\n+            if (!isInitializationAnnotation(anno1) || !isInitializationAnnotation(anno2)) {\n+                return null;\n+            }\n+\n+            // Handle the case where one is a subtype of the other.\n+            if (isSubtypeInitialization(anno1, qual1, anno2, qual2)) {\n+                return anno1;\n+            } else if (isSubtypeInitialization(anno2, qual2, anno1, qual1)) {\n+                return anno2;\n+            }\n+            boolean unknowninit1 = isUnknownInitialization(anno1);\n+            boolean unknowninit2 = isUnknownInitialization(anno2);\n+            boolean underinit1 = isUnderInitialization(anno1);\n+            boolean underinit2 = isUnderInitialization(anno2);\n+\n+            // Handle @Initialized.\n+            if (isInitialized(anno1)) {\n+                assert underinit2;\n+                return FBCBOTTOM;\n+            } else if (isInitialized(anno2)) {\n+                assert underinit1;\n+                return FBCBOTTOM;\n+            }\n+\n+            if (underinit1 && underinit2) {\n+                return createUnderInitializationAnnotation(\n+                        glbTypeFrame(\n+                                getTypeFrameFromAnnotation(anno1),\n+                                getTypeFrameFromAnnotation(anno2)));\n+            }\n+\n+            assert (unknowninit1 || underinit1) && (unknowninit2 || underinit2);\n+            return createUnderInitializationAnnotation(\n+                    glbTypeFrame(\n+                            getTypeFrameFromAnnotation(anno1), getTypeFrameFromAnnotation(anno2)));\n+        }\n+\n+        /**\n+         * Returns the greatest lower bound of two types.\n+         *\n+         * @param a the first argument\n+         * @param b the second argument\n+         * @return the glb of the two arguments\n+         */\n+        protected TypeMirror glbTypeFrame(TypeMirror a, TypeMirror b) {\n+            if (types.isSubtype(a, b)) {\n+                return a;\n+            } else if (types.isSubtype(b, a)) {\n+                return b;\n+            }\n+\n+            return TypesUtils.greatestLowerBound(a, b, processingEnv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "085c21389f84fd023aaf8ecf44887fe06887b973"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzNTY4MQ==", "bodyText": "This is duplicated in TypesUtils.greatestLowerBound, so you could just call it directly.", "url": "https://github.com/typetools/checker-framework/pull/3854#discussion_r517535681", "createdAt": "2020-11-04T18:08:16Z", "author": {"login": "smillst"}, "path": "checker/src/main/java/org/checkerframework/checker/initialization/InitializationAnnotatedTypeFactory.java", "diffHunk": "@@ -888,5 +888,75 @@ protected TypeMirror lubTypeFrame(TypeMirror a, TypeMirror b) {\n \n             return TypesUtils.leastUpperBound(a, b, processingEnv);\n         }\n+\n+        /**\n+         * Compute the greatest lower bound of two initialization qualifiers. Returns null if one of\n+         * the qualifiers is not in the initialization hierarachy. Subclasses should override\n+         * greatestLowerBound and call this method for initialization qualifiers.\n+         *\n+         * @param anno1 an initialization qualifier\n+         * @param qual1 a qualifier kind\n+         * @param anno2 an initialization qualifier\n+         * @param qual2 a qualifier kind\n+         * @return the glb of anno1 and anno2\n+         */\n+        protected AnnotationMirror greatestLowerBoundInitialization(\n+                AnnotationMirror anno1,\n+                QualifierKind qual1,\n+                AnnotationMirror anno2,\n+                QualifierKind qual2) {\n+            if (!isInitializationAnnotation(anno1) || !isInitializationAnnotation(anno2)) {\n+                return null;\n+            }\n+\n+            // Handle the case where one is a subtype of the other.\n+            if (isSubtypeInitialization(anno1, qual1, anno2, qual2)) {\n+                return anno1;\n+            } else if (isSubtypeInitialization(anno2, qual2, anno1, qual1)) {\n+                return anno2;\n+            }\n+            boolean unknowninit1 = isUnknownInitialization(anno1);\n+            boolean unknowninit2 = isUnknownInitialization(anno2);\n+            boolean underinit1 = isUnderInitialization(anno1);\n+            boolean underinit2 = isUnderInitialization(anno2);\n+\n+            // Handle @Initialized.\n+            if (isInitialized(anno1)) {\n+                assert underinit2;\n+                return FBCBOTTOM;\n+            } else if (isInitialized(anno2)) {\n+                assert underinit1;\n+                return FBCBOTTOM;\n+            }\n+\n+            if (underinit1 && underinit2) {\n+                return createUnderInitializationAnnotation(\n+                        glbTypeFrame(\n+                                getTypeFrameFromAnnotation(anno1),\n+                                getTypeFrameFromAnnotation(anno2)));\n+            }\n+\n+            assert (unknowninit1 || underinit1) && (unknowninit2 || underinit2);\n+            return createUnderInitializationAnnotation(\n+                    glbTypeFrame(\n+                            getTypeFrameFromAnnotation(anno1), getTypeFrameFromAnnotation(anno2)));\n+        }\n+\n+        /**\n+         * Returns the greatest lower bound of two types.\n+         *\n+         * @param a the first argument\n+         * @param b the second argument\n+         * @return the glb of the two arguments\n+         */\n+        protected TypeMirror glbTypeFrame(TypeMirror a, TypeMirror b) {\n+            if (types.isSubtype(a, b)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "085c21389f84fd023aaf8ecf44887fe06887b973"}, "originalPosition": 66}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a76880f8ea9a0f5c8fd99d2fcdcd23ced1f51dd", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/1a76880f8ea9a0f5c8fd99d2fcdcd23ced1f51dd", "committedDate": "2020-11-04T21:08:55Z", "message": "Address code review feedback"}, "afterCommit": {"oid": "085c21389f84fd023aaf8ecf44887fe06887b973", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/085c21389f84fd023aaf8ecf44887fe06887b973", "committedDate": "2020-11-04T04:06:39Z", "message": "Fix cut-and-paste typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de9d5b467d60d5b646988cd4f07585630f96b497", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/de9d5b467d60d5b646988cd4f07585630f96b497", "committedDate": "2020-11-05T02:49:21Z", "message": "Simplify code, handle when glb is not a typeframe"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a39ad0d5e0628a81d1a2dc8ebd2f3fd165211b1", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/5a39ad0d5e0628a81d1a2dc8ebd2f3fd165211b1", "committedDate": "2020-11-05T02:45:11Z", "message": "Simplify code, handle when glb is not a typeframe"}, "afterCommit": {"oid": "de9d5b467d60d5b646988cd4f07585630f96b497", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/de9d5b467d60d5b646988cd4f07585630f96b497", "committedDate": "2020-11-05T02:49:21Z", "message": "Simplify code, handle when glb is not a typeframe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df543899fda14bb2bfeea74bed737f7e6cc6f44c", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/df543899fda14bb2bfeea74bed737f7e6cc6f44c", "committedDate": "2020-11-05T07:30:25Z", "message": "Merge ../checker-framework-branch-master into nullness-glb"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NDYzNjE5", "url": "https://github.com/typetools/checker-framework/pull/3854#pullrequestreview-524463619", "createdAt": "2020-11-05T16:52:03Z", "commit": {"oid": "df543899fda14bb2bfeea74bed737f7e6cc6f44c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2483, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}