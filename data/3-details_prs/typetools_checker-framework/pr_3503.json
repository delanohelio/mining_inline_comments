{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MDUxNjgy", "number": 3503, "title": "Improve defaults for local variables with a qualifier parameter", "bodyText": "This pull request fixes the following issue. Consider this class,\nimport org.checkerframework.checker.tainting.qual.*;\nimport org.checkerframework.framework.qual.*;\n\npublic class QualParamLocals {\n    public void method(@Untainted C param) {\n        C local = param;\n        requiresUntainted(local);\n    }\n\n    public void requiresUntainted(@Untainted C param) {\n    }\n\n    @HasQualifierParameter(Tainted.class)\n    static class C {\n    }\n}\nCurrently, the framework produces two errors for this code:\nQualParamLocals.java:6: error: [assignment.type.incompatible] incompatible types in assignment.\n        C local = param;\n                  ^\n  found   : @Untainted C\n  required: @Tainted C\nQualParamLocals.java:7: error: [argument.type.incompatible] incompatible types in argument.\n        requiresUntainted(local);\n                          ^\n  found   : @Tainted C\n  required: @Untainted C\n2 errors\n\nThis shows that dataflow doesn't work as expected in the presence of qualifier parameters. There are two issues here. The first is that assignments are checked using the declared type of the left hand side, which will fail whenever the left-hand side is unnanotated (defaulting to top), and the right-hand side is not top. This causes the first error. The second error is that though dataflow can determine that local should have type @Untainted, dataflow prevents using that refined value because it compares it to the declared type (which by default has top), and rejects the refined value because it's not a subtype.\nAs a result, local variables must be manually annotated, which increases the annotation burden on programmers. In my experience with the determinism checker, which heavily uses qualifier parameters, this issue has been a nuisance.\nThis resolves these issues by changing the defaulting for local variables with a qualifier parameter. Instead of defaulting to top, local variables with an initialializer default to the type of the right hand side of the assignment.", "createdAt": "2020-07-24T03:13:57Z", "url": "https://github.com/typetools/checker-framework/pull/3503", "merged": true, "mergeCommit": {"oid": "d9e984f491bf9f7ab4788c6ae519d88c4e2cfc40"}, "closed": true, "closedAt": "2020-07-31T15:31:21Z", "author": {"login": "jwaataja"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1QezuAH2gAyNDU2MDUxNjgyOjczMzU3YmQ3ZTk0NjNjNGQzNmZlZjJjYmViZTI2OTQ1ZjBiZTllMjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6JR6YAFqTQ1ODg1MTM1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "73357bd7e9463c4d36fef2cbebe26945f0be9e24", "author": {"user": {"login": "jwaataja", "name": "Jason Waataja"}}, "url": "https://github.com/typetools/checker-framework/commit/73357bd7e9463c4d36fef2cbebe26945f0be9e24", "committedDate": "2020-07-15T20:16:12Z", "message": "Change initial values for qual param classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92297be8dba5d37a0cb64d3fca2cd9774cee8b6b", "author": {"user": {"login": "jwaataja", "name": "Jason Waataja"}}, "url": "https://github.com/typetools/checker-framework/commit/92297be8dba5d37a0cb64d3fca2cd9774cee8b6b", "committedDate": "2020-07-15T20:24:10Z", "message": "Add check for local variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "717a395a402663ed5a0189cbb39b6f4088631220", "author": {"user": {"login": "jwaataja", "name": "Jason Waataja"}}, "url": "https://github.com/typetools/checker-framework/commit/717a395a402663ed5a0189cbb39b6f4088631220", "committedDate": "2020-07-21T04:57:51Z", "message": "Merge branch 'master' into var-init"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c324793331bb46af4ad940f1860b0a0015cc13d1", "author": {"user": {"login": "jwaataja", "name": "Jason Waataja"}}, "url": "https://github.com/typetools/checker-framework/commit/c324793331bb46af4ad940f1860b0a0015cc13d1", "committedDate": "2020-07-22T02:02:44Z", "message": "Fix defaulting for local variables with a qualifier parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d1b46552947296b6e180acba86ddfd858f68c85", "author": {"user": {"login": "jwaataja", "name": "Jason Waataja"}}, "url": "https://github.com/typetools/checker-framework/commit/0d1b46552947296b6e180acba86ddfd858f68c85", "committedDate": "2020-07-22T02:10:33Z", "message": "Add documentation for qualifier parameter methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79abcbbc11e6ac3c8918b5fa533321969b299ebe", "author": {"user": {"login": "jwaataja", "name": "Jason Waataja"}}, "url": "https://github.com/typetools/checker-framework/commit/79abcbbc11e6ac3c8918b5fa533321969b299ebe", "committedDate": "2020-07-22T02:10:46Z", "message": "Merge branch 'master' into var-init"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d62094e46ae5d6b78a8bf150ba80aa64d7e961c", "author": {"user": {"login": "jwaataja", "name": "Jason Waataja"}}, "url": "https://github.com/typetools/checker-framework/commit/2d62094e46ae5d6b78a8bf150ba80aa64d7e961c", "committedDate": "2020-07-22T02:17:44Z", "message": "Fix wording"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c2d72d25abf19440d67a151f3071c0935366de3", "author": {"user": {"login": "jwaataja", "name": "Jason Waataja"}}, "url": "https://github.com/typetools/checker-framework/commit/6c2d72d25abf19440d67a151f3071c0935366de3", "committedDate": "2020-07-24T02:55:30Z", "message": "Finish defaulting feature for qualifier parameters\n\nUse new mechanism for preventing circular dependencies when calculating\ntypes that works in all cases.\n\nWrite manual section"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e754f50d43cf9ba64273671f17c0f56ad0503029", "author": {"user": {"login": "jwaataja", "name": "Jason Waataja"}}, "url": "https://github.com/typetools/checker-framework/commit/e754f50d43cf9ba64273671f17c0f56ad0503029", "committedDate": "2020-07-24T03:11:55Z", "message": "Rename variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d005f353fa769ab376b87258f73c0197e9e2cc61", "author": {"user": {"login": "jwaataja", "name": "Jason Waataja"}}, "url": "https://github.com/typetools/checker-framework/commit/d005f353fa769ab376b87258f73c0197e9e2cc61", "committedDate": "2020-07-24T20:45:25Z", "message": "Add check to improve efficiency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d85ec170e62e52f1270531dc665b615d119e34a", "author": {"user": {"login": "jwaataja", "name": "Jason Waataja"}}, "url": "https://github.com/typetools/checker-framework/commit/7d85ec170e62e52f1270531dc665b615d119e34a", "committedDate": "2020-07-24T21:14:58Z", "message": "Add a cache for initializer types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de3e93440f1f7c69bb4a0870ce6a4e48a5d202f3", "author": {"user": {"login": "jwaataja", "name": "Jason Waataja"}}, "url": "https://github.com/typetools/checker-framework/commit/de3e93440f1f7c69bb4a0870ce6a4e48a5d202f3", "committedDate": "2020-07-24T22:46:12Z", "message": "Merge branch 'master' into var-init"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dca7438bfd3cf364a2b06d34668e5dcff4995fc", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/8dca7438bfd3cf364a2b06d34668e5dcff4995fc", "committedDate": "2020-07-28T21:03:17Z", "message": "Use dataflow results when getting the initializer."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MDUyNjQ0", "url": "https://github.com/typetools/checker-framework/pull/3503#pullrequestreview-457052644", "createdAt": "2020-07-28T21:47:48Z", "commit": {"oid": "8dca7438bfd3cf364a2b06d34668e5dcff4995fc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTo0Nzo0OFrOG4gQwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTo0OToyM1rOG4gVMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkwMjAxOA==", "bodyText": "Did you have to add this cache so that the Daikon test would not time-out?  We have avoided caching expressions because dataflow can change the type of an expression; see #602.  I don't think this cache makes the problem worse than it already is though.", "url": "https://github.com/typetools/checker-framework/pull/3503#discussion_r461902018", "createdAt": "2020-07-28T21:47:48Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -162,6 +162,29 @@\n      */\n     private boolean shouldDefaultTypeVarLocals;\n \n+    /**\n+     * Elements representing variables for which the type of the initializer is being determined in\n+     * order to apply qualifier parameter defaults.\n+     *\n+     * <p>Local variables with a qualifier parameter get their declared type from the type of their\n+     * initializer. Sometimes the initializer's type depends on the type of the variable, such as\n+     * during type variable inference or when a variable is used in its own initializer as in\n+     * \"Object o = (o = null)\". This creates a circular dependency resulting in infinite recursion.\n+     * To prevent this, variables in this set should not be typed based on their initializer, but by\n+     * using normal defaults.\n+     *\n+     * @see GenericAnnotatedTypeFactory#applyLocalVariableQualifierParameterDefaults\n+     */\n+    private Set<Element> variablesUnderInitialization;\n+\n+    /**\n+     * Caches types of initializers for local variables with a qualifier parameter, so that they\n+     * aren't computed each time the type of a variable is looked up.\n+     *\n+     * @see GenericAnnotatedTypeFactory#applyLocalVariableQualifierParameterDefaults\n+     */\n+    private Map<Tree, AnnotatedTypeMirror> initializerCache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dca7438bfd3cf364a2b06d34668e5dcff4995fc"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkwMzE1Mg==", "bodyText": "types are written should be annotations are written.", "url": "https://github.com/typetools/checker-framework/pull/3503#discussion_r461903152", "createdAt": "2020-07-28T21:49:23Z", "author": {"login": "smillst"}, "path": "docs/manual/generics.tex", "diffHunk": "@@ -950,6 +950,40 @@\n qualifier on the upper bound).  That is, the qualifier on \\<myBuffer.field>\n is that same as that on \\<myBuffer>.\n \n+\\subsectionAndLabel{Local variable defaults for types with qualifier parameters}{local-vars-qual-param-defaults}\n+\n+Normally, local variables default to the top type. Type refinement determines if\n+a variable can be treated as a suitable subtype, and annotations on local\n+variables are rarely needed as a result. However, since qualifier parameters add\n+invariant subtyping, type refinement is no longer valid. For example, suppose in\n+the following code that \\<StringBuffer> is annotated with\n+\\<@HasQualifierParameter(Tainted.class)>.\n+\n+\\begin{Verbatim}\n+    void method(@Untainted StringBuffer buffer) {\n+        StringBuffer local = buffer;\n+        executeSql(local.toString());\n+    }\n+\n+    void executeSql(@Untainted String code) {\n+        // ...\n+    }\n+\\end{Verbatim}\n+\n+Normally, the framework would determine that \\<local> has type \\<@Untainted\n+StringBuffer> and the call to \\<executeSql> would be valid. However, since by\n+default \\<local> has type \\<@Tainted StringBuffer>, and\n+\\<@Untainted StringBuffer> is not a subtype, no type refinement would be\n+performed, leading to an error. Fixing this would require manually annotating\n+\\<local> as an \\<@Untainted StringBuffer>, increasing the annotation burden on\n+programmers.\n+\n+For this reason, local variables with types that have a qualifier parameter use\n+different defaulting rules. When a local variable has an initializer, the type\n+of that initializer is used as the default type of that variable if no other\n+types are written. For example, in the above code, the type of \\<local> would be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dca7438bfd3cf364a2b06d34668e5dcff4995fc"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18ab206dacacac51fba54e312534543a290dead9", "author": {"user": {"login": "jwaataja", "name": "Jason Waataja"}}, "url": "https://github.com/typetools/checker-framework/commit/18ab206dacacac51fba54e312534543a290dead9", "committedDate": "2020-07-28T22:28:12Z", "message": "Fix phrasing in manual"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e8296f15ec129f3624a70e2d1ba5df947109b07", "author": {"user": {"login": "jwaataja", "name": "Jason Waataja"}}, "url": "https://github.com/typetools/checker-framework/commit/6e8296f15ec129f3624a70e2d1ba5df947109b07", "committedDate": "2020-07-28T22:28:21Z", "message": "Merge branch 'var-init' of https://github.com/jwaataja/checker-framework into var-init"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3Njc2NDE1", "url": "https://github.com/typetools/checker-framework/pull/3503#pullrequestreview-457676415", "createdAt": "2020-07-29T16:11:13Z", "commit": {"oid": "6e8296f15ec129f3624a70e2d1ba5df947109b07"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjoxMToxM1rOG4_zLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjoxMToxM1rOG4_zLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxODczNQ==", "bodyText": "Move this call to line 1666 and pass in tops rather than recomputing it.   Then in applyLocalVariableQualifierParameterDefaults you don't need to check that type has a qualifier parameter.", "url": "https://github.com/typetools/checker-framework/pull/3503#discussion_r462418735", "createdAt": "2020-07-29T16:11:13Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -1617,6 +1652,8 @@ protected void applyQualifierParameterDefaults(\n                 return;\n         }\n \n+        applyLocalVariableQualifierParameterDefaults(elt, type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e8296f15ec129f3624a70e2d1ba5df947109b07"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODY1MzE2", "url": "https://github.com/typetools/checker-framework/pull/3503#pullrequestreview-457865316", "createdAt": "2020-07-29T20:18:44Z", "commit": {"oid": "6e8296f15ec129f3624a70e2d1ba5df947109b07"}, "state": "APPROVED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDoxODo0NFrOG5InzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMTo0MDozNFrOG5LOuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2MzI3Ng==", "bodyText": "The differenting defaulting sounds odd. How about different defaulting?", "url": "https://github.com/typetools/checker-framework/pull/3503#discussion_r462563276", "createdAt": "2020-07-29T20:18:44Z", "author": {"login": "wmdietl"}, "path": "checker/tests/tainting/HasQualParamDefaults.java", "diffHunk": "@@ -83,4 +98,39 @@ void creation() {\n             @PolyTainted Buffer b3 = new @PolyTainted Buffer();\n         }\n     }\n+\n+    // For classes with @HasQualifierParameter, differenting defaulting rules are applied on that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e8296f15ec129f3624a70e2d1ba5df947109b07"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2ODcxNQ==", "bodyText": "Add a cross-reference to the CLIMB section?", "url": "https://github.com/typetools/checker-framework/pull/3503#discussion_r462568715", "createdAt": "2020-07-29T20:28:55Z", "author": {"login": "wmdietl"}, "path": "docs/manual/generics.tex", "diffHunk": "@@ -950,6 +950,41 @@\n qualifier on the upper bound).  That is, the qualifier on \\<myBuffer.field>\n is that same as that on \\<myBuffer>.\n \n+\\subsectionAndLabel{Local variable defaults for types with qualifier parameters}{local-vars-qual-param-defaults}\n+\n+Normally, local variables default to the top type. Type refinement determines if", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e8296f15ec129f3624a70e2d1ba5df947109b07"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5ODEzOA==", "bodyText": "Can you use the more precise VariableElement?", "url": "https://github.com/typetools/checker-framework/pull/3503#discussion_r462598138", "createdAt": "2020-07-29T21:24:28Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -162,6 +162,29 @@\n      */\n     private boolean shouldDefaultTypeVarLocals;\n \n+    /**\n+     * Elements representing variables for which the type of the initializer is being determined in\n+     * order to apply qualifier parameter defaults.\n+     *\n+     * <p>Local variables with a qualifier parameter get their declared type from the type of their\n+     * initializer. Sometimes the initializer's type depends on the type of the variable, such as\n+     * during type variable inference or when a variable is used in its own initializer as in\n+     * \"Object o = (o = null)\". This creates a circular dependency resulting in infinite recursion.\n+     * To prevent this, variables in this set should not be typed based on their initializer, but by\n+     * using normal defaults.\n+     *\n+     * @see GenericAnnotatedTypeFactory#applyLocalVariableQualifierParameterDefaults\n+     */\n+    private Set<Element> variablesUnderInitialization;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e8296f15ec129f3624a70e2d1ba5df947109b07"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5OTgyMg==", "bodyText": "How about adding a test with a local variable without initializer, showing how that will produce an expected error when the default and the RHS-type mismatch?", "url": "https://github.com/typetools/checker-framework/pull/3503#discussion_r462599822", "createdAt": "2020-07-29T21:27:50Z", "author": {"login": "wmdietl"}, "path": "checker/tests/tainting/HasQualParamDefaults.java", "diffHunk": "@@ -44,6 +44,21 @@ public Buffer append(@PolyTainted String s) {\n             someString = s;\n             return s;\n         }\n+\n+        void initializeLocalTainted(@Tainted Buffer b) {\n+            Buffer local = b;\n+            @Tainted Buffer copy = local;\n+        }\n+\n+        void initializeLocalUntainted(@Untainted Buffer b) {\n+            Buffer local = b;\n+            @Untainted Buffer copy = local;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e8296f15ec129f3624a70e2d1ba5df947109b07"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYwMDEyNA==", "bodyText": "More generally, maybe a test with an expected error would be good, to show that the expected type is inferred.", "url": "https://github.com/typetools/checker-framework/pull/3503#discussion_r462600124", "createdAt": "2020-07-29T21:28:27Z", "author": {"login": "wmdietl"}, "path": "checker/tests/tainting/HasQualParamDefaults.java", "diffHunk": "@@ -44,6 +44,21 @@ public Buffer append(@PolyTainted String s) {\n             someString = s;\n             return s;\n         }\n+\n+        void initializeLocalTainted(@Tainted Buffer b) {\n+            Buffer local = b;\n+            @Tainted Buffer copy = local;\n+        }\n+\n+        void initializeLocalUntainted(@Untainted Buffer b) {\n+            Buffer local = b;\n+            @Untainted Buffer copy = local;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5OTgyMg=="}, "originalCommit": {"oid": "6e8296f15ec129f3624a70e2d1ba5df947109b07"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYwMTUwOQ==", "bodyText": "Maybe instead of top say the default for local variables, as a type system could change that default.", "url": "https://github.com/typetools/checker-framework/pull/3503#discussion_r462601509", "createdAt": "2020-07-29T21:31:04Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -1588,6 +1615,10 @@ protected void applyInferredAnnotations(AnnotatedTypeMirror type, Value as) {\n     /**\n      * Applies defaults for types in a class with an qualifier parameter.\n      *\n+     * <p>Within a class with {@code @HasQualifierParameter}, types with that class default to the\n+     * polymorphic qualifier rather than the typical default. Local variables with a type that has a\n+     * qualifier parameter are initialized to the type of their initializer, rather than top.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e8296f15ec129f3624a70e2d1ba5df947109b07"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYwMTczNw==", "bodyText": "Same comment about top.", "url": "https://github.com/typetools/checker-framework/pull/3503#discussion_r462601737", "createdAt": "2020-07-29T21:31:32Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -1598,6 +1629,10 @@ protected void applyQualifierParameterDefaults(Tree tree, AnnotatedTypeMirror ty\n     /**\n      * Applies defaults for types in a class with an qualifier parameter.\n      *\n+     * <p>Within a class with {@code @HasQualifierParameter}, types with that class default to the\n+     * polymorphic qualifier rather than the typical default. Local variables with a type that has a\n+     * qualifier parameter are initialized to the type of their initializer, rather than top.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e8296f15ec129f3624a70e2d1ba5df947109b07"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYwMjQyNA==", "bodyText": "\"to type\" should be \"to the type\".", "url": "https://github.com/typetools/checker-framework/pull/3503#discussion_r462602424", "createdAt": "2020-07-29T21:33:03Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -1645,6 +1682,59 @@ public Void visitDeclared(AnnotatedDeclaredType type, Void aVoid) {\n         }.visit(type);\n     }\n \n+    /**\n+     * Defaults local variables with types that have a qualifier parameter to type of their", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e8296f15ec129f3624a70e2d1ba5df947109b07"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYwMjcwOA==", "bodyText": "Add \", if an initializer is present\" and explain what happens for local variables without initializers?", "url": "https://github.com/typetools/checker-framework/pull/3503#discussion_r462602708", "createdAt": "2020-07-29T21:33:37Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -1645,6 +1682,59 @@ public Void visitDeclared(AnnotatedDeclaredType type, Void aVoid) {\n         }.visit(type);\n     }\n \n+    /**\n+     * Defaults local variables with types that have a qualifier parameter to type of their\n+     * initializer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e8296f15ec129f3624a70e2d1ba5df947109b07"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYwMzI2MA==", "bodyText": "\"call\" -> \"called\".", "url": "https://github.com/typetools/checker-framework/pull/3503#discussion_r462603260", "createdAt": "2020-07-29T21:34:50Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -1645,6 +1682,59 @@ public Void visitDeclared(AnnotatedDeclaredType type, Void aVoid) {\n         }.visit(type);\n     }\n \n+    /**\n+     * Defaults local variables with types that have a qualifier parameter to type of their\n+     * initializer.\n+     *\n+     * @param elt Element whose type is {@code type}\n+     * @param type where the defaults are applied\n+     */\n+    private void applyLocalVariableQualifierParameterDefaults(\n+            Element elt, AnnotatedTypeMirror type) {\n+        if (elt.getKind() != ElementKind.LOCAL_VARIABLE\n+                || getQualifierParameterHierarchies(type).isEmpty()\n+                || variablesUnderInitialization.contains(elt)) {\n+            return;\n+        }\n+\n+        Tree declTree = declarationFromElement(elt);\n+        if (declTree == null || declTree.getKind() != Kind.VARIABLE) {\n+            return;\n+        }\n+\n+        ExpressionTree initializer = ((VariableTree) declTree).getInitializer();\n+        if (initializer == null) {\n+            return;\n+        }\n+\n+        variablesUnderInitialization.add(elt);\n+        AnnotatedTypeMirror initializerType;\n+        if (shouldCache && initializerCache.containsKey(initializer)) {\n+            initializerType = initializerCache.get(initializer);\n+        } else {\n+            // When this method is call by getAnnotatedTypeLhs, flow is turned off.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e8296f15ec129f3624a70e2d1ba5df947109b07"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYwMzgxMg==", "bodyText": "We're usually careful and put such code in try/finally blocks, to ensure that the pre-state is restored even if there is an error.", "url": "https://github.com/typetools/checker-framework/pull/3503#discussion_r462603812", "createdAt": "2020-07-29T21:35:58Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -1645,6 +1682,59 @@ public Void visitDeclared(AnnotatedDeclaredType type, Void aVoid) {\n         }.visit(type);\n     }\n \n+    /**\n+     * Defaults local variables with types that have a qualifier parameter to type of their\n+     * initializer.\n+     *\n+     * @param elt Element whose type is {@code type}\n+     * @param type where the defaults are applied\n+     */\n+    private void applyLocalVariableQualifierParameterDefaults(\n+            Element elt, AnnotatedTypeMirror type) {\n+        if (elt.getKind() != ElementKind.LOCAL_VARIABLE\n+                || getQualifierParameterHierarchies(type).isEmpty()\n+                || variablesUnderInitialization.contains(elt)) {\n+            return;\n+        }\n+\n+        Tree declTree = declarationFromElement(elt);\n+        if (declTree == null || declTree.getKind() != Kind.VARIABLE) {\n+            return;\n+        }\n+\n+        ExpressionTree initializer = ((VariableTree) declTree).getInitializer();\n+        if (initializer == null) {\n+            return;\n+        }\n+\n+        variablesUnderInitialization.add(elt);\n+        AnnotatedTypeMirror initializerType;\n+        if (shouldCache && initializerCache.containsKey(initializer)) {\n+            initializerType = initializerCache.get(initializer);\n+        } else {\n+            // When this method is call by getAnnotatedTypeLhs, flow is turned off.\n+            // Turn it back on so the type of the initializer is the refined type.\n+            boolean oldUseFlow = useFlow;\n+            useFlow = everUseFlow;\n+            initializerType = getAnnotatedType(initializer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e8296f15ec129f3624a70e2d1ba5df947109b07"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYwNjAwOA==", "bodyText": "Maybe add a comment why this set doesn't need to be cleared out: it's expected to be empty outside an variable initializer, right?", "url": "https://github.com/typetools/checker-framework/pull/3503#discussion_r462606008", "createdAt": "2020-07-29T21:40:34Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -162,6 +162,29 @@\n      */\n     private boolean shouldDefaultTypeVarLocals;\n \n+    /**\n+     * Elements representing variables for which the type of the initializer is being determined in\n+     * order to apply qualifier parameter defaults.\n+     *\n+     * <p>Local variables with a qualifier parameter get their declared type from the type of their\n+     * initializer. Sometimes the initializer's type depends on the type of the variable, such as\n+     * during type variable inference or when a variable is used in its own initializer as in\n+     * \"Object o = (o = null)\". This creates a circular dependency resulting in infinite recursion.\n+     * To prevent this, variables in this set should not be typed based on their initializer, but by\n+     * using normal defaults.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e8296f15ec129f3624a70e2d1ba5df947109b07"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7651b84c58f975405ff96a3351070c8bb899187a", "author": {"user": {"login": "jwaataja", "name": "Jason Waataja"}}, "url": "https://github.com/typetools/checker-framework/commit/7651b84c58f975405ff96a3351070c8bb899187a", "committedDate": "2020-07-30T01:40:13Z", "message": "Address code review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODUxMzUw", "url": "https://github.com/typetools/checker-framework/pull/3503#pullrequestreview-458851350", "createdAt": "2020-07-31T00:42:24Z", "commit": {"oid": "7651b84c58f975405ff96a3351070c8bb899187a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2705, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}