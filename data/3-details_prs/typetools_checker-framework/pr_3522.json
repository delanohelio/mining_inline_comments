{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MTg5ODg0", "number": 3522, "title": "Routines to format AnalysisResult objects for debugging/logging", "bodyText": "Incorporates changes from #3527, which should be merged first.", "createdAt": "2020-07-29T04:45:13Z", "url": "https://github.com/typetools/checker-framework/pull/3522", "merged": true, "mergeCommit": {"oid": "a74139468e65c8810ae61a9bac1f22b93795b421"}, "closed": true, "closedAt": "2020-08-05T19:21:18Z", "author": {"login": "mernst"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5gqq0AH2gAyNDU4MTg5ODg0OjkwY2RjNjBjM2Y4ZGEyYjIwMGY2N2Q3YTM3OGQ1ODkwZDBiMjc4MmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc74lHJAH2gAyNDU4MTg5ODg0OjA3YTQzMTMzNGJmZTgzYmVhNzM2YTliZGNmNzQzODJkNzIxZjFlYWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "90cdc60c3f8da2b200f67d7a378d5890d0b2782a", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/90cdc60c3f8da2b200f67d7a378d5890d0b2782a", "committedDate": "2020-07-29T01:23:20Z", "message": "Routines to format AnalysisResult objects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62376b72e828ddcd2e1d86abe4111e64f3499666", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/62376b72e828ddcd2e1d86abe4111e64f3499666", "committedDate": "2020-07-29T01:26:53Z", "message": "Merge ../checker-framework-branch-master into analysisresult-repr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c057cdf2b15de8ab67a8bc488c2831acef81f16b", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/c057cdf2b15de8ab67a8bc488c2831acef81f16b", "committedDate": "2020-07-29T03:50:21Z", "message": "Fix issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe18877d5c2d1d9b7d8bbae0f415f590d5be0d25", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/fe18877d5c2d1d9b7d8bbae0f415f590d5be0d25", "committedDate": "2020-07-29T04:24:37Z", "message": "Javadoc fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "702f803d8d4afa900a0bdd5be907b8a68e05c3c3", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/702f803d8d4afa900a0bdd5be907b8a68e05c3c3", "committedDate": "2020-07-29T20:49:15Z", "message": "Add a repr() method for ControlFlowGraph"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f6efa5b7525c0b0fbb629b54541ede2ec4648cf", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/2f6efa5b7525c0b0fbb629b54541ede2ec4648cf", "committedDate": "2020-07-29T21:35:13Z", "message": "Add SystemUtil.sleep method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/d1045e1f5b2e7b01f51a3feab1f06c1486712949", "committedDate": "2020-07-29T23:31:14Z", "message": "Remove stray character"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3OTc1MzQ1", "url": "https://github.com/typetools/checker-framework/pull/3522#pullrequestreview-457975345", "createdAt": "2020-07-29T23:56:58Z", "commit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzo1Njo1OFrOG5OQNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMDoxMDoxMFrOG5OfmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NTU0Mg==", "bodyText": "Is there a reason to not simply override toString? That would be easier to find for people.", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r462655542", "createdAt": "2020-07-29T23:56:58Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -443,4 +445,124 @@ public S getStoreAfter(Block block) {\n         return transferInput.analysis.runAnalysisFor(\n                 node, before, transferInput, nodeValues, analysisCaches);\n     }\n+\n+    /**\n+     * Returns a string representation of this.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1Njc3Mw==", "bodyText": "Any reason for not making this Node.toString?", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r462656773", "createdAt": "2020-07-30T00:00:56Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -443,4 +445,124 @@ public S getStoreAfter(Block block) {\n         return transferInput.analysis.runAnalysisFor(\n                 node, before, transferInput, nodeValues, analysisCaches);\n     }\n+\n+    /**\n+     * Returns a string representation of this.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {\n+        StringJoiner result =\n+                new StringJoiner(\n+                        String.format(\"%n  \"),\n+                        String.format(\"AnalysisResult{%n  \"),\n+                        String.format(\"%n}\"));\n+        result.add(\"nodeValues = \" + nodeValuesRepr(nodeValues));\n+        result.add(\"treeLookup = \" + treeLookupRepr(treeLookup));\n+        result.add(\"unaryAssignNodeLookup = \" + unaryAssignNodeLookup);\n+        result.add(\"finalLocalValues = \" + finalLocalValues);\n+        result.add(\"stores = \" + stores);\n+        result.add(\"analysisCaches = \" + analysisCaches);\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a map with the same type as the {@code nodeValues} field.\n+     *\n+     * @param <V> the type of values in the map\n+     * @param nodeValues a map to format\n+     * @return a printed representation of the given map\n+     */\n+    public static <V> String nodeValuesRepr(Map<Node, V> nodeValues) {\n+        if (nodeValues.isEmpty()) {\n+            return \"{}\";\n+        }\n+        StringJoiner result = new StringJoiner(String.format(\"%n    \"));\n+        result.add(\"{\");\n+        for (Map.Entry<Node, V> entry : nodeValues.entrySet()) {\n+            Node key = entry.getKey();\n+            result.add(String.format(\"%s => %s\", nodeRepr(key), entry.getValue()));\n+        }\n+        result.add(\"}\");\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a node.\n+     *\n+     * @param n a node to format\n+     * @return a printed representation of the given node\n+     */\n+    public static String nodeRepr(Node n) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NzAwMg==", "bodyText": "You wouldn't need this if you moved nodeRepr into Node.toString, right?", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r462657002", "createdAt": "2020-07-30T00:01:41Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -443,4 +445,124 @@ public S getStoreAfter(Block block) {\n         return transferInput.analysis.runAnalysisFor(\n                 node, before, transferInput, nodeValues, analysisCaches);\n     }\n+\n+    /**\n+     * Returns a string representation of this.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {\n+        StringJoiner result =\n+                new StringJoiner(\n+                        String.format(\"%n  \"),\n+                        String.format(\"AnalysisResult{%n  \"),\n+                        String.format(\"%n}\"));\n+        result.add(\"nodeValues = \" + nodeValuesRepr(nodeValues));\n+        result.add(\"treeLookup = \" + treeLookupRepr(treeLookup));\n+        result.add(\"unaryAssignNodeLookup = \" + unaryAssignNodeLookup);\n+        result.add(\"finalLocalValues = \" + finalLocalValues);\n+        result.add(\"stores = \" + stores);\n+        result.add(\"analysisCaches = \" + analysisCaches);\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a map with the same type as the {@code nodeValues} field.\n+     *\n+     * @param <V> the type of values in the map\n+     * @param nodeValues a map to format\n+     * @return a printed representation of the given map\n+     */\n+    public static <V> String nodeValuesRepr(Map<Node, V> nodeValues) {\n+        if (nodeValues.isEmpty()) {\n+            return \"{}\";\n+        }\n+        StringJoiner result = new StringJoiner(String.format(\"%n    \"));\n+        result.add(\"{\");\n+        for (Map.Entry<Node, V> entry : nodeValues.entrySet()) {\n+            Node key = entry.getKey();\n+            result.add(String.format(\"%s => %s\", nodeRepr(key), entry.getValue()));\n+        }\n+        result.add(\"}\");\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a node.\n+     *\n+     * @param n a node to format\n+     * @return a printed representation of the given node\n+     */\n+    public static String nodeRepr(Node n) {\n+        return String.format(\n+                \"%s [%s %s %s]\",\n+                n, n.getClass().getSimpleName(), n.hashCode(), System.identityHashCode(n));\n+    }\n+\n+    /**\n+     * Return a printed representation of a collection of nodes.\n+     *\n+     * @param nodes a collection of nodes to format\n+     * @return a printed representation of the given collection\n+     */\n+    public static String nodeCollectionRepr(Collection<? extends Node> nodes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1ODA1NQ==", "bodyText": "I'm a bit confused why you would need that here. We throw BugInCF in many places, so if this is a general problem, should that be solved where BugInCF is output?", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r462658055", "createdAt": "2020-07-30T00:05:15Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -443,4 +445,124 @@ public S getStoreAfter(Block block) {\n         return transferInput.analysis.runAnalysisFor(\n                 node, before, transferInput, nodeValues, analysisCaches);\n     }\n+\n+    /**\n+     * Returns a string representation of this.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {\n+        StringJoiner result =\n+                new StringJoiner(\n+                        String.format(\"%n  \"),\n+                        String.format(\"AnalysisResult{%n  \"),\n+                        String.format(\"%n}\"));\n+        result.add(\"nodeValues = \" + nodeValuesRepr(nodeValues));\n+        result.add(\"treeLookup = \" + treeLookupRepr(treeLookup));\n+        result.add(\"unaryAssignNodeLookup = \" + unaryAssignNodeLookup);\n+        result.add(\"finalLocalValues = \" + finalLocalValues);\n+        result.add(\"stores = \" + stores);\n+        result.add(\"analysisCaches = \" + analysisCaches);\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a map with the same type as the {@code nodeValues} field.\n+     *\n+     * @param <V> the type of values in the map\n+     * @param nodeValues a map to format\n+     * @return a printed representation of the given map\n+     */\n+    public static <V> String nodeValuesRepr(Map<Node, V> nodeValues) {\n+        if (nodeValues.isEmpty()) {\n+            return \"{}\";\n+        }\n+        StringJoiner result = new StringJoiner(String.format(\"%n    \"));\n+        result.add(\"{\");\n+        for (Map.Entry<Node, V> entry : nodeValues.entrySet()) {\n+            Node key = entry.getKey();\n+            result.add(String.format(\"%s => %s\", nodeRepr(key), entry.getValue()));\n+        }\n+        result.add(\"}\");\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a node.\n+     *\n+     * @param n a node to format\n+     * @return a printed representation of the given node\n+     */\n+    public static String nodeRepr(Node n) {\n+        return String.format(\n+                \"%s [%s %s %s]\",\n+                n, n.getClass().getSimpleName(), n.hashCode(), System.identityHashCode(n));\n+    }\n+\n+    /**\n+     * Return a printed representation of a collection of nodes.\n+     *\n+     * @param nodes a collection of nodes to format\n+     * @return a printed representation of the given collection\n+     */\n+    public static String nodeCollectionRepr(Collection<? extends Node> nodes) {\n+        StringJoiner result = new StringJoiner(\", \", \"[\", \"]\");\n+        for (Node n : nodes) {\n+            result.add(nodeRepr(n));\n+        }\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Return a printed representation of a map with the same type as the {@code treeLookup} field.\n+     *\n+     * @param treeLookup a map to format\n+     * @return a printed representation of the given map\n+     */\n+    public static String treeLookupRepr(Map<Tree, Set<Node>> treeLookup) {\n+        if (treeLookup.isEmpty()) {\n+            return \"{}\";\n+        }\n+        StringJoiner result = new StringJoiner(String.format(\"%n    \"));\n+        result.add(\"{\");\n+        for (Map.Entry<Tree, Set<Node>> entry : treeLookup.entrySet()) {\n+            Tree key = entry.getKey();\n+            String treeString = key.toString().replaceAll(\"[ \\n\\t]+\", \" \");\n+            if (treeString.length() > 65) {\n+                treeString = \"\\\"\" + treeString.substring(0, 60) + \"...\\\"\";\n+            }\n+            result.add(treeString + \" => \" + nodeCollectionRepr(entry.getValue()));\n+        }\n+        result.add(\"}\");\n+        return result.toString();\n+    }\n+\n+    /** Checks representation invariants on this. */\n+    public void checkRep() {\n+        // Require that each node in treeLookup exists in nodeValues.\n+        for (Map.Entry<Tree, Set<Node>> entry : treeLookup.entrySet()) {\n+            for (Node n : entry.getValue()) {\n+                if (!nodeValues.containsKey(n)) {\n+                    sleep(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1ODkwNg==", "bodyText": "I don't understand the new comment. The method returns a copy of that one field, like getUnaryAssignNodeLookup returns a copy of that field.\nIs this more a to-do comment that we need a method to also access the convertedTreeLookup?", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r462658906", "createdAt": "2020-07-30T00:08:03Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/ControlFlowGraph.java", "diffHunk": "@@ -235,7 +237,7 @@ public UnderlyingAST getUnderlyingAST() {\n     }\n \n     /**\n-     * Returns the copied tree-lookup map.\n+     * Returns the copied tree-lookup map. Ignores convertedTreeLookup.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1OTQ1NQ==", "bodyText": "If stringGraph is null, you could use repr instead of the un-helpful super implementation.", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r462659455", "createdAt": "2020-07-30T00:10:05Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/ControlFlowGraph.java", "diffHunk": "@@ -303,4 +305,32 @@ public String toString() {\n         String stringGraph = (String) res.get(\"stringGraph\");\n         return stringGraph == null ? super.toString() : stringGraph;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1OTQ4MQ==", "bodyText": "There already is a toString method in this class. Can you add cross-references and explain when to use which?", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r462659481", "createdAt": "2020-07-30T00:10:10Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/ControlFlowGraph.java", "diffHunk": "@@ -303,4 +305,32 @@ public String toString() {\n         String stringGraph = (String) res.get(\"stringGraph\");\n         return stringGraph == null ? super.toString() : stringGraph;\n     }\n+\n+    /**\n+     * Returns a string representation of this.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c9b3cdeb7d4aaa34c2d0bc4725e4a35819df448", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/4c9b3cdeb7d4aaa34c2d0bc4725e4a35819df448", "committedDate": "2020-07-30T17:58:12Z", "message": "Address code review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4a3db74a8ea70ae6f649ee99a86841422b729d5", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/b4a3db74a8ea70ae6f649ee99a86841422b729d5", "committedDate": "2020-07-30T17:58:31Z", "message": "Merge ../checker-framework-branch-master into analysisresult-repr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e37f6f38c46ab6e04e5d347a83142787ae0e1e5", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/3e37f6f38c46ab6e04e5d347a83142787ae0e1e5", "committedDate": "2020-07-30T17:58:38Z", "message": "Merge ../checker-framework-fork-mernst-branch-javacutil-sleep into analysisresult-repr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31f73b834d729bb1a129254dc36c15eba8c6f321", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/31f73b834d729bb1a129254dc36c15eba8c6f321", "committedDate": "2020-07-30T18:00:06Z", "message": "Fix import statement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf227e1546f99530972b1958fade1d49ce6c56d3", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/cf227e1546f99530972b1958fade1d49ce6c56d3", "committedDate": "2020-07-30T18:34:12Z", "message": "Merge ../checker-framework-branch-master into javacutil-sleep"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffc8fc96e1c6208587ef5dd00d1d1942bb7fa557", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/ffc8fc96e1c6208587ef5dd00d1d1942bb7fa557", "committedDate": "2020-07-30T18:35:29Z", "message": "Fix typo, remove throw"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5f101be41777cbca9b2059e0dd27ac42d3974b6", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/b5f101be41777cbca9b2059e0dd27ac42d3974b6", "committedDate": "2020-07-30T18:36:19Z", "message": "Merge ../checker-framework-fork-mernst-branch-javacutil-sleep into analysisresult-repr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f01fcd77768143c925702ba09704d219d6be386", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/1f01fcd77768143c925702ba09704d219d6be386", "committedDate": "2020-07-31T00:39:10Z", "message": "Address code review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b00d1ee87f4a700f8d559e43f43408791b5c560", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/6b00d1ee87f4a700f8d559e43f43408791b5c560", "committedDate": "2020-07-31T00:39:32Z", "message": "Merge ../checker-framework-branch-master into analysisresult-repr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d76803c20c7eaa3626f30392e374576007d3507", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/6d76803c20c7eaa3626f30392e374576007d3507", "committedDate": "2020-07-31T00:42:01Z", "message": "More changes from code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0453ce127f30b155ad3f286203631fd668a34231", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/0453ce127f30b155ad3f286203631fd668a34231", "committedDate": "2020-07-31T00:47:13Z", "message": "Merge ../checker-framework-branch-master into analysisresult-repr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20f244c9e235dd2d2a7399147dc2d132db133371", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/20f244c9e235dd2d2a7399147dc2d132db133371", "committedDate": "2020-07-31T05:43:49Z", "message": "Merge ../checker-framework-branch-master into analysisresult-repr"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NDM4NDE1", "url": "https://github.com/typetools/checker-framework/pull/3522#pullrequestreview-459438415", "createdAt": "2020-07-31T20:04:12Z", "commit": {"oid": "20f244c9e235dd2d2a7399147dc2d132db133371"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDowNDoxMlrOG6UpQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDoxMTowMVrOG6U5yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwODgzNA==", "bodyText": "What printf output is this referring to? Throwing a BugInCF outputs the message using the compiler messager and should happen one at a time. In general, the compiler is single-threaded and a sleep seems very inappropriate.\nIs this maybe from running gradle concurrently?\nHow can I reproduce this issue?\nAs this checkRep method isn't called anywhere, how about moving this method to a separate PR?", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r463808834", "createdAt": "2020-07-31T20:04:12Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -443,4 +445,85 @@ public S getStoreAfter(Block block) {\n         return transferInput.analysis.runAnalysisFor(\n                 node, before, transferInput, nodeValues, analysisCaches);\n     }\n+\n+    /**\n+     * Returns a verbose string representation of this, useful for debugging.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {\n+        StringJoiner result =\n+                new StringJoiner(\n+                        String.format(\"%n  \"),\n+                        String.format(\"AnalysisResult{%n  \"),\n+                        String.format(\"%n}\"));\n+        result.add(\"nodeValues = \" + nodeValuesRepr(nodeValues));\n+        result.add(\"treeLookup = \" + treeLookupRepr(treeLookup));\n+        result.add(\"unaryAssignNodeLookup = \" + unaryAssignNodeLookup);\n+        result.add(\"finalLocalValues = \" + finalLocalValues);\n+        result.add(\"stores = \" + stores);\n+        result.add(\"analysisCaches = \" + analysisCaches);\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Returns a verbose printed representation, useful for debugging. The map has the same type as\n+     * the {@code nodeValues} field.\n+     *\n+     * @param <V> the type of values in the map\n+     * @param nodeValues a map to format\n+     * @return a printed representation of the given map\n+     */\n+    public static <V> String nodeValuesRepr(Map<Node, V> nodeValues) {\n+        if (nodeValues.isEmpty()) {\n+            return \"{}\";\n+        }\n+        StringJoiner result = new StringJoiner(String.format(\"%n    \"));\n+        result.add(\"{\");\n+        for (Map.Entry<Node, V> entry : nodeValues.entrySet()) {\n+            Node key = entry.getKey();\n+            result.add(String.format(\"%s => %s\", key.repr(), entry.getValue()));\n+        }\n+        result.add(\"}\");\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Returns a verbose printed representation of a map, useful for debugging. The map has the same\n+     * type as the {@code treeLookup} field.\n+     *\n+     * @param treeLookup a map to format\n+     * @return a printed representation of the given map\n+     */\n+    public static String treeLookupRepr(Map<Tree, Set<Node>> treeLookup) {\n+        if (treeLookup.isEmpty()) {\n+            return \"{}\";\n+        }\n+        StringJoiner result = new StringJoiner(String.format(\"%n    \"));\n+        result.add(\"{\");\n+        for (Map.Entry<Tree, Set<Node>> entry : treeLookup.entrySet()) {\n+            Tree key = entry.getKey();\n+            String treeString = key.toString().replaceAll(\"[ \\n\\t]+\", \" \");\n+            if (treeString.length() > 65) {\n+                treeString = \"\\\"\" + treeString.substring(0, 60) + \"...\\\"\";\n+            }\n+            result.add(treeString + \" => \" + Node.nodeCollectionRepr(entry.getValue()));\n+        }\n+        result.add(\"}\");\n+        return result.toString();\n+    }\n+\n+    /** Checks representation invariants on this. */\n+    public void checkRep() {\n+        // Require that each node in treeLookup exists in nodeValues.\n+        for (Map.Entry<Tree, Set<Node>> entry : treeLookup.entrySet()) {\n+            for (Node n : entry.getValue()) {\n+                if (!nodeValues.containsKey(n)) {\n+                    SystemUtil.sleep(100); // without this, printf output is sometimes interleaved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f244c9e235dd2d2a7399147dc2d132db133371"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxMzA2Ng==", "bodyText": "This is the first class where we add a repr method, so I would like to understand what the motivation is and don't understand what you mean with \"customary\".\nI see 483 matches for such a repr function on GitHub for Java code. This seems popular in Python code.\nIn general it seems more useful to output concrete information instead of what Object.toString gives. If the behavior of Object.toString is really desired in some place, one can simply call getClass and hashCode instead.\nSo far in similar classes we have overriden toString. What makes these classes special to not do the same?", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r463813066", "createdAt": "2020-07-31T20:11:01Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -443,4 +445,124 @@ public S getStoreAfter(Block block) {\n         return transferInput.analysis.runAnalysisFor(\n                 node, before, transferInput, nodeValues, analysisCaches);\n     }\n+\n+    /**\n+     * Returns a string representation of this.\n+     *\n+     * @return a string representation of this\n+     */\n+    public String repr() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NTU0Mg=="}, "originalCommit": {"oid": "d1045e1f5b2e7b01f51a3feab1f06c1486712949"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b2cec3252aeb1e078345affb8d79a87e7fdedc6", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/6b2cec3252aeb1e078345affb8d79a87e7fdedc6", "committedDate": "2020-07-31T21:40:39Z", "message": "Merge ../checker-framework-branch-master into analysisresult-repr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca602606430fcf115810dfd2435a0282a9157614", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/ca602606430fcf115810dfd2435a0282a9157614", "committedDate": "2020-07-31T21:43:56Z", "message": "Remove AnalysisResult.checkRep"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e10edb05ba229d7867dd02f50e13731f66ee819", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/6e10edb05ba229d7867dd02f50e13731f66ee819", "committedDate": "2020-07-31T21:46:09Z", "message": "Merge ../checker-framework-branch-master into analysisresult-repr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "835d152d29d901ea133ea03a60fe8f4c05f644b8", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/835d152d29d901ea133ea03a60fe8f4c05f644b8", "committedDate": "2020-07-31T22:51:09Z", "message": "Explain repr()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0fc6cc3938f2f0927be91b65e9f6ee01cd8a11f", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/f0fc6cc3938f2f0927be91b65e9f6ee01cd8a11f", "committedDate": "2020-07-31T23:28:07Z", "message": "Tweak wording"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbdde4bb6e265d1da1cb22ad4e2a5bb0972364cc", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/cbdde4bb6e265d1da1cb22ad4e2a5bb0972364cc", "committedDate": "2020-08-01T14:31:23Z", "message": "Fix HTML tag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bcb7efb22ebffe76411e9e7c53faee037a28b6e", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/4bcb7efb22ebffe76411e9e7c53faee037a28b6e", "committedDate": "2020-08-01T17:55:26Z", "message": "Merge ../checker-framework-branch-master into analysisresult-repr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49548c0a8a64087f88d93a16a0536a0d04464f4e", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/49548c0a8a64087f88d93a16a0536a0d04464f4e", "committedDate": "2020-08-03T22:22:22Z", "message": "Merge ../checker-framework-branch-master into analysisresult-repr"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMjI0MzY5", "url": "https://github.com/typetools/checker-framework/pull/3522#pullrequestreview-461224369", "createdAt": "2020-08-04T22:39:44Z", "commit": {"oid": "49548c0a8a64087f88d93a16a0536a0d04464f4e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjozOTo0NFrOG7z5vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjozOTo0NFrOG7z5vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2OTUzNA==", "bodyText": "For consistency, in a few places in this PR, I would replace the printed with string.", "url": "https://github.com/typetools/checker-framework/pull/3522#discussion_r465369534", "createdAt": "2020-08-04T22:39:44Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/node/Node.java", "diffHunk": "@@ -157,4 +158,32 @@ public void setAssignmentContext(AssignmentContext assignmentContext) {\n         }\n         return transitiveOperands;\n     }\n+\n+    /**\n+     * Returns a verbose printed representation of this, useful for debugging.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49548c0a8a64087f88d93a16a0536a0d04464f4e"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06a1b9a6cb49f9ad94a72ad49319ec36aee62cc1", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/06a1b9a6cb49f9ad94a72ad49319ec36aee62cc1", "committedDate": "2020-08-05T01:45:32Z", "message": "Merge ../checker-framework-branch-master into analysisresult-repr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc2dc10e8b41e436c36c428dfb4a0a9b6eb00e19", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/bc2dc10e8b41e436c36c428dfb4a0a9b6eb00e19", "committedDate": "2020-08-05T01:45:57Z", "message": "\"printed\" => \"string\""}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1eb6ddd579b9a016c257f614ecfcbba221fb0749", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/1eb6ddd579b9a016c257f614ecfcbba221fb0749", "committedDate": "2020-08-05T03:34:31Z", "message": "\"repr()\" => \"toStringDebug()\""}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9741aff12ba7f66aec1fec04b1afef6f49b95e9d", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/9741aff12ba7f66aec1fec04b1afef6f49b95e9d", "committedDate": "2020-08-05T04:21:02Z", "message": "Add Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e84c679607856b4c52a5895cb57f36c6f24f75d", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/3e84c679607856b4c52a5895cb57f36c6f24f75d", "committedDate": "2020-08-05T04:21:31Z", "message": "Merge ../checker-framework-branch-master into analysisresult-repr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07a431334bfe83bea736a9bdcf74382d721f1eaf", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/07a431334bfe83bea736a9bdcf74382d721f1eaf", "committedDate": "2020-08-05T10:22:50Z", "message": "Fix Javadoc"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2735, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}