{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM4NzExOTQ1", "number": 4000, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzowMjowMFrOFFFmug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzowOTowMlrOFFF0Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODc5MDM0OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzowMjowMFrOIFaiQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzowMjowMFrOIFaiQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU0ODU0NA==", "bodyText": "type isn't a parameter name, so I'm not sure what it is referring to.", "url": "https://github.com/typetools/checker-framework/pull/4000#discussion_r542548544", "createdAt": "2020-12-14T17:02:00Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -2842,18 +2882,55 @@ protected void addAliasedAnnotation(\n      *     getting the alias from the canonical annotation\n      * @param ignorableElements a list of elements that can be safely dropped when the elements are\n      *     being copied over\n+     * @deprecated use {@code addAliasedTypeAnnotation}\n      */\n+    @Deprecated // use addAliasedTypeAnnotation\n     protected void addAliasedAnnotation(\n             Class<?> aliasClass,\n             Class<?> canonical,\n             boolean copyElements,\n             String... ignorableElements) {\n+        addAliasedTypeAnnotation(aliasClass, canonical, copyElements, ignorableElements);\n+    }\n+\n+    /**\n+     * Adds the annotation {@code aliasClass} as an alias for the canonical annotation {@code type}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f929392e9981ff18c17834bb4781948df174f2d"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODgxMDk3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzowNjowM1rOIFauRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzowNjowM1rOIFauRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1MTYyMQ==", "bodyText": "It's strange to name a variable which is an AnnotationMirror type. I would rename type to annotation or maybe canonicalAnno.", "url": "https://github.com/typetools/checker-framework/pull/4000#discussion_r542551621", "createdAt": "2020-12-14T17:06:03Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -2782,19 +2782,37 @@ public boolean isSupportedQualifier(String className) {\n      *\n      * <p>By specifying the alias/canonical relationship using this method, the elements of the\n      * alias are not preserved when the canonical annotation to use is constructed from the alias.\n-     * If you want the elements to be copied over as well, use {@link #addAliasedAnnotation(Class,\n-     * Class, boolean, String...)}.\n+     * If you want the elements to be copied over as well, use {@link\n+     * #addAliasedTypeAnnotation(Class, Class, boolean, String...)}.\n      *\n      * @param aliasClass the class of the aliased annotation\n      * @param type the canonical annotation\n+     * @deprecated use {@code addAliasedTypeAnnotation}\n      */\n+    @Deprecated // use addAliasedTypeAnnotation\n     protected void addAliasedAnnotation(Class<?> aliasClass, AnnotationMirror type) {\n+        addAliasedTypeAnnotation(aliasClass, type);\n+    }\n+\n+    /**\n+     * Adds the annotation {@code aliasClass} as an alias for the canonical annotation {@code type}\n+     * that will be used by the Checker Framework in the alias's place.\n+     *\n+     * <p>By specifying the alias/canonical relationship using this method, the elements of the\n+     * alias are not preserved when the canonical annotation to use is constructed from the alias.\n+     * If you want the elements to be copied over as well, use {@link\n+     * #addAliasedTypeAnnotation(Class, Class, boolean, String...)}.\n+     *\n+     * @param aliasClass the class of the aliased annotation\n+     * @param type the canonical annotation\n+     */\n+    protected void addAliasedTypeAnnotation(Class<?> aliasClass, AnnotationMirror type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f929392e9981ff18c17834bb4781948df174f2d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODgyNTE5OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzowOTowMlrOIFa3ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzowOTowMlrOIFa3ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1Mzk1Ng==", "bodyText": "the elements is ignored =>  the elements are ignored", "url": "https://github.com/typetools/checker-framework/pull/4000#discussion_r542553956", "createdAt": "2020-12-14T17:09:02Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -2842,18 +2882,55 @@ protected void addAliasedAnnotation(\n      *     getting the alias from the canonical annotation\n      * @param ignorableElements a list of elements that can be safely dropped when the elements are\n      *     being copied over\n+     * @deprecated use {@code addAliasedTypeAnnotation}\n      */\n+    @Deprecated // use addAliasedTypeAnnotation\n     protected void addAliasedAnnotation(\n             Class<?> aliasClass,\n             Class<?> canonical,\n             boolean copyElements,\n             String... ignorableElements) {\n+        addAliasedTypeAnnotation(aliasClass, canonical, copyElements, ignorableElements);\n+    }\n+\n+    /**\n+     * Adds the annotation {@code aliasClass} as an alias for the canonical annotation {@code type}\n+     * that will be used by the Checker Framework in the alias's place.\n+     *\n+     * <p>You may specify the copyElements flag to indicate whether you want the elements of the\n+     * alias to be copied over when the canonical annotation is constructed as a copy of {@code\n+     * type}. Be careful that the framework will try to copy the elements by name matching, so make\n+     * sure that names and types of the elements to be copied over are exactly the same as the ones\n+     * in the canonical annotation. Otherwise, an 'Couldn't find element in annotation' error is\n+     * raised.\n+     *\n+     * <p>To facilitate the cases where some of the elements is ignored on purpose when constructing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f929392e9981ff18c17834bb4781948df174f2d"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 851, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}