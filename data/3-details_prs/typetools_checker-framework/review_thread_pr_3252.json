{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNDEzMzcx", "number": 3252, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxODozNTo1MVrODzcaZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxODozNTo1MVrODzcaZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjY5NDc3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/TypeFromMemberVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxODozNTo1MVrOGH7QnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxODozNTo1MVrOGH7QnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2NDEyNA==", "bodyText": "Could you update the comment to explain why the erased type is enough?\nCould you add a test case that uses generic types and make sure that this doesn't introduce false negatives? E.g. have a method that accepts a List<String> and pass something that is a List<@Nullable String>. If this only compares the List part, it will ignore the mismatch in the type arguments.\nIf this isn't a concern, please document why.", "url": "https://github.com/typetools/checker-framework/pull/3252#discussion_r410964124", "createdAt": "2020-04-19T18:35:51Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/TypeFromMemberVisitor.java", "diffHunk": "@@ -100,7 +101,8 @@ private static AnnotatedTypeMirror inferLambdaParamAnnotations(\n             AnnotatedExecutableType functionType = f.getFunctionTypeFromTree(lambdaDecl);\n             AnnotatedTypeMirror funcTypeParam = functionType.getParameterTypes().get(index);\n             if (TreeUtils.isImplicitlyTypedLambda(declaredInTree)) {\n-                if (f.types.isSubtype(funcTypeParam.actualType, lambdaParam.actualType)) {\n+                if (TypesUtils.isErasedSubtype(\n+                        funcTypeParam.actualType, lambdaParam.actualType, f.types)) {\n                     // The Java types should be exactly the same, but because invocation type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75d8165eee10bf82f19e12142ab4bacb79ddea53"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1796, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}