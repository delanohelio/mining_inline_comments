{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NzQyODM0", "number": 3026, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxOToyMzozN1rODVhj_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQyMDoxMzowMVrODViOgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzODk2NTcyOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/util/ContractsUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxOToyMzozN1rOFZzHVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxOTozODowM1rOFZzcGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU5NjE4Mw==", "bodyText": "Instead of suppressing this warning and the ErrorProne warning, you could use clazz.cast(...) instead.  Any reason not to do that?", "url": "https://github.com/typetools/checker-framework/pull/3026#discussion_r362596183", "createdAt": "2020-01-02T19:23:37Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/util/ContractsUtils.java", "diffHunk": "@@ -135,16 +140,20 @@ public static ContractsUtils getInstance(GenericAnnotatedTypeFactory<?, ?, ?, ?>\n         if (enforcedQualifier == null) {\n             return Collections.emptySet();\n         }\n-        Set<Contract> result = new LinkedHashSet<>();\n+        Set<T> result = new LinkedHashSet<>();\n         List<String> expressions =\n                 AnnotationUtils.getElementValueArray(\n                         contractAnnotation, \"expression\", String.class, false);\n         Boolean annoResult =\n                 AnnotationUtils.getElementValueOrNull(\n                         contractAnnotation, \"result\", Boolean.class, false);\n         for (String expr : expressions) {\n-            result.add(\n-                    Contract.create(kind, expr, enforcedQualifier, contractAnnotation, annoResult));\n+            @SuppressWarnings(\"unchecked\") // clazz consistent with enum", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "effb0c5cbdb52784f7928e32cb26ef253bf5ab28"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjYwMTQ5Ng==", "bodyText": "No reason, clazz.cast is indeed much nicer.", "url": "https://github.com/typetools/checker-framework/pull/3026#discussion_r362601496", "createdAt": "2020-01-02T19:38:03Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/util/ContractsUtils.java", "diffHunk": "@@ -135,16 +140,20 @@ public static ContractsUtils getInstance(GenericAnnotatedTypeFactory<?, ?, ?, ?>\n         if (enforcedQualifier == null) {\n             return Collections.emptySet();\n         }\n-        Set<Contract> result = new LinkedHashSet<>();\n+        Set<T> result = new LinkedHashSet<>();\n         List<String> expressions =\n                 AnnotationUtils.getElementValueArray(\n                         contractAnnotation, \"expression\", String.class, false);\n         Boolean annoResult =\n                 AnnotationUtils.getElementValueOrNull(\n                         contractAnnotation, \"result\", Boolean.class, false);\n         for (String expr : expressions) {\n-            result.add(\n-                    Contract.create(kind, expr, enforcedQualifier, contractAnnotation, annoResult));\n+            @SuppressWarnings(\"unchecked\") // clazz consistent with enum", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU5NjE4Mw=="}, "originalCommit": {"oid": "effb0c5cbdb52784f7928e32cb26ef253bf5ab28"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTA3NDU4OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/util/ContractsUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQyMDoxMzowMVrOFZ0Kkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMzoxMToyNlrOFZ_vig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjYxMzM5NA==", "bodyText": "/__w/1/s/framework/src/main/java/org/checkerframework/framework/util/ContractsUtils.java:131: warning: no @param for <T>\n/__w/1/s/framework/src/main/java/org/checkerframework/framework/util/ContractsUtils.java:166: warning: no @param for <T>", "url": "https://github.com/typetools/checker-framework/pull/3026#discussion_r362613394", "createdAt": "2020-01-02T20:13:01Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/util/ContractsUtils.java", "diffHunk": "@@ -123,10 +124,12 @@ public static ContractsUtils getInstance(GenericAnnotatedTypeFactory<?, ?, ?, ?>\n      * @param contractAnnotation a {@link RequiresQualifier}, {@link EnsuresQualifier}, {@link\n      *     EnsuresQualifierIf}, or null\n      * @param kind the kind of {@code contractAnnotation}\n+     * @param clazz the class to determine the return type\n      * @return the contracts expressed by the given annotation, or the empty set if the argument is\n      *     null\n      */\n-    private Set<Contract> getContract(Contract.Kind kind, AnnotationMirror contractAnnotation) {\n+    private <T extends Contract> Set<T> getContract(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332ce993603a5718df754e5a7ffb6bc1bd1f499f"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjYzNjI2Mw==", "bodyText": "Could you please add those? I'm traveling the rest of the day and it would be great to have these changes in the release.", "url": "https://github.com/typetools/checker-framework/pull/3026#discussion_r362636263", "createdAt": "2020-01-02T21:27:35Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/util/ContractsUtils.java", "diffHunk": "@@ -123,10 +124,12 @@ public static ContractsUtils getInstance(GenericAnnotatedTypeFactory<?, ?, ?, ?>\n      * @param contractAnnotation a {@link RequiresQualifier}, {@link EnsuresQualifier}, {@link\n      *     EnsuresQualifierIf}, or null\n      * @param kind the kind of {@code contractAnnotation}\n+     * @param clazz the class to determine the return type\n      * @return the contracts expressed by the given annotation, or the empty set if the argument is\n      *     null\n      */\n-    private Set<Contract> getContract(Contract.Kind kind, AnnotationMirror contractAnnotation) {\n+    private <T extends Contract> Set<T> getContract(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjYxMzM5NA=="}, "originalCommit": {"oid": "332ce993603a5718df754e5a7ffb6bc1bd1f499f"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjgwMzA4Mg==", "bodyText": "I've added the javadoc.", "url": "https://github.com/typetools/checker-framework/pull/3026#discussion_r362803082", "createdAt": "2020-01-03T13:11:26Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/util/ContractsUtils.java", "diffHunk": "@@ -123,10 +124,12 @@ public static ContractsUtils getInstance(GenericAnnotatedTypeFactory<?, ?, ?, ?>\n      * @param contractAnnotation a {@link RequiresQualifier}, {@link EnsuresQualifier}, {@link\n      *     EnsuresQualifierIf}, or null\n      * @param kind the kind of {@code contractAnnotation}\n+     * @param clazz the class to determine the return type\n      * @return the contracts expressed by the given annotation, or the empty set if the argument is\n      *     null\n      */\n-    private Set<Contract> getContract(Contract.Kind kind, AnnotationMirror contractAnnotation) {\n+    private <T extends Contract> Set<T> getContract(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjYxMzM5NA=="}, "originalCommit": {"oid": "332ce993603a5718df754e5a7ffb6bc1bd1f499f"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1834, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}