{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NjIwMDY4", "number": 3473, "title": "Improve the documentation of Receiver", "bodyText": "", "createdAt": "2020-07-14T03:28:20Z", "url": "https://github.com/typetools/checker-framework/pull/3473", "merged": true, "mergeCommit": {"oid": "eafe9156d854fe2d26ad04b16fad2fed7b2f5206"}, "closed": true, "closedAt": "2020-07-21T23:14:33Z", "author": {"login": "mernst"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0p0ZagH2gAyNDQ4NjIwMDY4OjJkMzY0ZmUxY2E3M2FkNTEyZmIxYjgyOTVhNWRjYjBmNGE2NGQ5MjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc2zRA0AH2gAyNDQ4NjIwMDY4OjA1ZjUwYjljZmZkMTVlZjAxYmJkZGM4Mzg0NGQ0MTI5MWM5ODkxZGI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2d364fe1ca73ad512fb1b8295a5dcb0f4a64d924", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/2d364fe1ca73ad512fb1b8295a5dcb0f4a64d924", "committedDate": "2020-07-13T23:13:29Z", "message": "Improve the documentation of Receiver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d69d9a0d2ac87366159b25add077728e76c49203", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/d69d9a0d2ac87366159b25add077728e76c49203", "committedDate": "2020-07-13T23:28:39Z", "message": "Clarifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MjYxOTgy", "url": "https://github.com/typetools/checker-framework/pull/3473#pullrequestreview-448261982", "createdAt": "2020-07-14T16:19:11Z", "commit": {"oid": "d69d9a0d2ac87366159b25add077728e76c49203"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoxOToxMlrOGxbKKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoxOToxMlrOGxbKKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3ODM3OA==", "bodyText": "Our \"Java\" expression language supports #1, but it is parsed into a LocalVariable.  So this comment here doesn't really make sense.", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r454478378", "createdAt": "2020-07-14T16:19:12Z", "author": {"login": "smillst"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/FlowExpressions.java", "diffHunk": "@@ -447,8 +447,22 @@ private static Receiver internalReprOfMemberSelect(\n     }\n \n     /**\n-     * The poorly-named Receiver class is actually a Java AST. Each subclass represents a different\n-     * type of expression, such as MethodCall, ArrayAccess, LocalVariable, etc.\n+     * This class represents a Java expression and its type. However, it does not represent all\n+     * possible Java expressions (for example, it does not represent a ternary expression; use\n+     * {@link FlowExpressions.Unknown} for unrepresentable expressions). Furthermore, it supports", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69d9a0d2ac87366159b25add077728e76c49203"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fd1b1c6e7e7caa46cc1b0c3bd020984c0a9c21d", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/1fd1b1c6e7e7caa46cc1b0c3bd020984c0a9c21d", "committedDate": "2020-07-14T17:51:45Z", "message": "Clarify how extensions are represented"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwOTczNzYy", "url": "https://github.com/typetools/checker-framework/pull/3473#pullrequestreview-450973762", "createdAt": "2020-07-17T21:48:15Z", "commit": {"oid": "1fd1b1c6e7e7caa46cc1b0c3bd020984c0a9c21d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMTo0ODoxNVrOGziC3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMTo1NjoyMlrOGziMhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4ODM1MQ==", "bodyText": "From @smillst comment #3473 (comment) it sounds like <self> isn't handled here at all. So we probably should instead highlight such checker-specific extensions?", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r456688351", "createdAt": "2020-07-17T21:48:15Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/FlowExpressions.java", "diffHunk": "@@ -447,12 +447,13 @@ private static Receiver internalReprOfMemberSelect(\n     }\n \n     /**\n-     * This class represents a Java expression and its type. However, it does not represent all\n-     * possible Java expressions (for example, it does not represent a ternary expression; use\n-     * {@link FlowExpressions.Unknown} for unrepresentable expressions). Furthermore, it supports\n-     * some <a\n+     * This class represents a Java expression and its type. It does not represent all possible Java\n+     * expressions (for example, it does not represent a ternary expression; use {@link\n+     * FlowExpressions.Unknown} for unrepresentable expressions). Furthermore, its string syntax\n+     * supports some <a\n      * href=\"https://checkerframework.org/manual/#java-expressions-as-arguments\">extensions</a>,\n-     * notably {@code <self>} and {@code #1} for formal parameters.\n+     * notably {@code <self>} and {@code #1} for formal parameters. (There are not special", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd1b1c6e7e7caa46cc1b0c3bd020984c0a9c21d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4ODQyOQ==", "bodyText": "Should the not be no?", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r456688429", "createdAt": "2020-07-17T21:48:32Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/FlowExpressions.java", "diffHunk": "@@ -447,12 +447,13 @@ private static Receiver internalReprOfMemberSelect(\n     }\n \n     /**\n-     * This class represents a Java expression and its type. However, it does not represent all\n-     * possible Java expressions (for example, it does not represent a ternary expression; use\n-     * {@link FlowExpressions.Unknown} for unrepresentable expressions). Furthermore, it supports\n-     * some <a\n+     * This class represents a Java expression and its type. It does not represent all possible Java\n+     * expressions (for example, it does not represent a ternary expression; use {@link\n+     * FlowExpressions.Unknown} for unrepresentable expressions). Furthermore, its string syntax\n+     * supports some <a\n      * href=\"https://checkerframework.org/manual/#java-expressions-as-arguments\">extensions</a>,\n-     * notably {@code <self>} and {@code #1} for formal parameters.\n+     * notably {@code <self>} and {@code #1} for formal parameters. (There are not special", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd1b1c6e7e7caa46cc1b0c3bd020984c0a9c21d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4OTUyNA==", "bodyText": "Same concern about <self> as above.", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r456689524", "createdAt": "2020-07-17T21:52:02Z", "author": {"login": "wmdietl"}, "path": "docs/manual/advanced-features.tex", "diffHunk": "@@ -1140,7 +1140,8 @@\n \\item \\refqualclass{checker/lock/qual}{Holding}\n \\end{itemize}\n \n-The set of permitted expressions is a subset of all Java expressions:\n+The set of permitted expressions is a subset of all Java expressions,\n+with a few extensions, notably \\code{<self>} and formal parameters like \\<\\#1>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd1b1c6e7e7caa46cc1b0c3bd020984c0a9c21d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5MDgyMA==", "bodyText": "Aren't at least comparisons still forbidden? Or is this partially addressing #3474?", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r456690820", "createdAt": "2020-07-17T21:56:22Z", "author": {"login": "wmdietl"}, "path": "docs/manual/advanced-features.tex", "diffHunk": "@@ -1246,20 +1247,12 @@\n \n \n \\textbf{Limitations:}\n-The following Java expressions may not currently be written:\n-% The Checker Framework is best at reasoning about Java expressions that\n-% are variable references, but these expressions are not.\n-\\begin{itemize}\n-\\item String concatenation expressions.\n-\\item Mathematical operators (plus, minus, division, ...).\n-\\item Comparisons (equality, less than, etc.).\n-\\end{itemize}\n-\n-Additionally, it is not possible to write\n-quantification over all array components (e.g. to express that all\n+It is not possible to write a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd1b1c6e7e7caa46cc1b0c3bd020984c0a9c21d"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8c1744f054739e8a62b02403f005fbbd6695336", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/d8c1744f054739e8a62b02403f005fbbd6695336", "committedDate": "2020-07-17T22:54:11Z", "message": "Merge ../checker-framework-branch-master into receiver-documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9a7c26b5b2da5a72c2e2e98e81f159c1b604857", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/e9a7c26b5b2da5a72c2e2e98e81f159c1b604857", "committedDate": "2020-07-17T23:02:58Z", "message": "Address code review feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMDE0NTUz", "url": "https://github.com/typetools/checker-framework/pull/3473#pullrequestreview-451014553", "createdAt": "2020-07-18T00:36:31Z", "commit": {"oid": "e9a7c26b5b2da5a72c2e2e98e81f159c1b604857"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMDozNjozMVrOGzkViA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMDozNjozMVrOGzkViA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyNTg5Ng==", "bodyText": "Ok, so let's leave it for #3474 to add proper restrictions again.", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r456725896", "createdAt": "2020-07-18T00:36:31Z", "author": {"login": "wmdietl"}, "path": "docs/manual/advanced-features.tex", "diffHunk": "@@ -1246,20 +1247,12 @@\n \n \n \\textbf{Limitations:}\n-The following Java expressions may not currently be written:\n-% The Checker Framework is best at reasoning about Java expressions that\n-% are variable references, but these expressions are not.\n-\\begin{itemize}\n-\\item String concatenation expressions.\n-\\item Mathematical operators (plus, minus, division, ...).\n-\\item Comparisons (equality, less than, etc.).\n-\\end{itemize}\n-\n-Additionally, it is not possible to write\n-quantification over all array components (e.g. to express that all\n+It is not possible to write a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5MDgyMA=="}, "originalCommit": {"oid": "1fd1b1c6e7e7caa46cc1b0c3bd020984c0a9c21d"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05f50b9cffd15ef01bbddc83844d41291c9891db", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/05f50b9cffd15ef01bbddc83844d41291c9891db", "committedDate": "2020-07-20T15:21:44Z", "message": "Qualify support for self"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2680, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}