{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxOTQ4MDEy", "number": 3366, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODozMzoxM1rOEFJ3vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODozNDoxN1rOEFJ45Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODQwMDYzOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/poly/AbstractQualifierPolymorphism.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODozMzoxM1rOGjN72Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODozMzoxM1rOGjN72Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MTY1Nw==", "bodyText": "The set should be removed, right? Returns the annotation that is....", "url": "https://github.com/typetools/checker-framework/pull/3366#discussion_r439581657", "createdAt": "2020-06-12T18:33:13Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/poly/AbstractQualifierPolymorphism.java", "diffHunk": "@@ -235,42 +235,46 @@ public void resolve(\n     }\n \n     /**\n-     * If the primary annotation of {@code actualType} is a polymorphic qualifier, then it is mapped\n+     * If the primary annotation of {@code polyType} is a polymorphic qualifier, then it is mapped\n      * to the primary annotation of {@code type} and the map is returned. Otherwise, an empty map is\n      * returned.\n+     *\n+     * @param type type with qualifier to us in the map\n+     * @param polyType type that may have polymorphic qualifiers\n+     * @return a mapping from the polymorphic qualifiers in {@code polyType} to the qualifiers in\n+     *     {@code type}\n      */\n-    private AnnotationMirrorMap<AnnotationMirrorSet> mapQualifierToPoly(\n-            AnnotatedTypeMirror type, AnnotatedTypeMirror actualType) {\n-        AnnotationMirrorMap<AnnotationMirrorSet> result = new AnnotationMirrorMap<>();\n+    private AnnotationMirrorMap<AnnotationMirror> mapQualifierToPoly(\n+            AnnotatedTypeMirror type, AnnotatedTypeMirror polyType) {\n+        AnnotationMirrorMap<AnnotationMirror> result = new AnnotationMirrorMap<>();\n \n         for (Map.Entry<AnnotationMirror, AnnotationMirror> kv : polyQuals.entrySet()) {\n             AnnotationMirror top = kv.getValue();\n             AnnotationMirror poly = kv.getKey();\n-            if (actualType.hasAnnotation(poly)) {\n+            if (polyType.hasAnnotation(poly)) {\n                 AnnotationMirror typeQual = type.getAnnotationInHierarchy(top);\n                 if (typeQual != null) {\n-                    result.put(poly, AnnotationMirrorSet.singleElementSet(typeQual));\n+                    result.put(poly, typeQual);\n                 }\n             }\n         }\n         return result;\n     }\n \n     /**\n-     * Returns an annotation set that is the merge of the two sets of annotations. The sets are\n+     * Returns annotation set that is the combination of the two annotations. The annotations are", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d21baa7e6a06bf123ee5fac4ccf21077493ecb8"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODQwMzU3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/poly/AbstractQualifierPolymorphism.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODozNDoxN1rOGjN9sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODozNDoxN1rOGjN9sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MjEzMQ==", "bodyText": "an annotation", "url": "https://github.com/typetools/checker-framework/pull/3366#discussion_r439582131", "createdAt": "2020-06-12T18:34:17Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/poly/AbstractQualifierPolymorphism.java", "diffHunk": "@@ -235,42 +235,46 @@ public void resolve(\n     }\n \n     /**\n-     * If the primary annotation of {@code actualType} is a polymorphic qualifier, then it is mapped\n+     * If the primary annotation of {@code polyType} is a polymorphic qualifier, then it is mapped\n      * to the primary annotation of {@code type} and the map is returned. Otherwise, an empty map is\n      * returned.\n+     *\n+     * @param type type with qualifier to us in the map\n+     * @param polyType type that may have polymorphic qualifiers\n+     * @return a mapping from the polymorphic qualifiers in {@code polyType} to the qualifiers in\n+     *     {@code type}\n      */\n-    private AnnotationMirrorMap<AnnotationMirrorSet> mapQualifierToPoly(\n-            AnnotatedTypeMirror type, AnnotatedTypeMirror actualType) {\n-        AnnotationMirrorMap<AnnotationMirrorSet> result = new AnnotationMirrorMap<>();\n+    private AnnotationMirrorMap<AnnotationMirror> mapQualifierToPoly(\n+            AnnotatedTypeMirror type, AnnotatedTypeMirror polyType) {\n+        AnnotationMirrorMap<AnnotationMirror> result = new AnnotationMirrorMap<>();\n \n         for (Map.Entry<AnnotationMirror, AnnotationMirror> kv : polyQuals.entrySet()) {\n             AnnotationMirror top = kv.getValue();\n             AnnotationMirror poly = kv.getKey();\n-            if (actualType.hasAnnotation(poly)) {\n+            if (polyType.hasAnnotation(poly)) {\n                 AnnotationMirror typeQual = type.getAnnotationInHierarchy(top);\n                 if (typeQual != null) {\n-                    result.put(poly, AnnotationMirrorSet.singleElementSet(typeQual));\n+                    result.put(poly, typeQual);\n                 }\n             }\n         }\n         return result;\n     }\n \n     /**\n-     * Returns an annotation set that is the merge of the two sets of annotations. The sets are\n+     * Returns annotation set that is the combination of the two annotations. The annotations are\n      * instantiations for {@code polyQual}.\n      *\n      * <p>The combination is typically their least upper bound. (It could be the GLB in the case\n      * that all arguments to a polymorphic method must have the same annotation.)\n      *\n-     * @param polyQual polymorphic qualifier for which {@code a1Annos} and {@code a2Annos} are\n-     *     instantiations\n-     * @param a1Annos a set that is an instantiation of {@code polyQual}\n-     * @param a2Annos a set that is an instantiation of {@code polyQual}\n-     * @return the merge of the two sets\n+     * @param polyQual polymorphic qualifier for which {@code a1} and {@code a2} are instantiations\n+     * @param a1 an annotation that is an instantiation of {@code polyQual}\n+     * @param a2 an annotation that is an instantiation of {@code polyQual}\n+     * @return a annotation that is the combination of the two annotations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d21baa7e6a06bf123ee5fac4ccf21077493ecb8"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1684, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}