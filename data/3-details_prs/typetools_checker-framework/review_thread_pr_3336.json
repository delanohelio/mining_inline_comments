{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NjMxNDM5", "number": 3336, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMzoyMTowMVrOEDHywg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxOToxNDowMlrOEQVhUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzA4ODY2OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMzoyMTowMVrOGf_xqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMjo1NzowMFrOGmmcww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMzk0Nw==", "bodyText": "You should try to avoid operations on strings. Is there no TypeKind to compare against?", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r436203947", "createdAt": "2020-06-05T23:21:01Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +271,13 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isArray = type.getUnderlyingType().getKind().toString().equalsIgnoreCase(\"array\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzNzAzOA==", "bodyText": "Ping.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r440437038", "createdAt": "2020-06-15T20:46:37Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +271,13 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isArray = type.getUnderlyingType().getKind().toString().equalsIgnoreCase(\"array\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMzk0Nw=="}, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEyOTAyNw==", "bodyText": "I have used your suggested logic in my latest commit. There is no need for array TypeKind comparison in the code.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r443129027", "createdAt": "2020-06-20T12:57:00Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +271,13 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isArray = type.getUnderlyingType().getKind().toString().equalsIgnoreCase(\"array\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMzk0Nw=="}, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzA4OTY5OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMzoyMTo1MFrOGf_yVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMzoyODowOFrOGmmkYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNDExOQ==", "bodyText": "What is the motivation for this special logic? You should explain the logic here or at least in the PR description.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r436204119", "createdAt": "2020-06-05T23:21:50Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +271,13 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isArray = type.getUnderlyingType().getKind().toString().equalsIgnoreCase(\"array\");\n+        boolean isNull = exp.getKind() == Kind.NULL_LITERAL;\n+        if (type.getUnderlyingType().toString().startsWith(\"java.lang\") || isArray || isNull) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNDU4Mw==", "bodyText": "Also, do add tests that cover such special logic, in at least a few important cases.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r436204583", "createdAt": "2020-06-05T23:24:07Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +271,13 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isArray = type.getUnderlyingType().getKind().toString().equalsIgnoreCase(\"array\");\n+        boolean isNull = exp.getKind() == Kind.NULL_LITERAL;\n+        if (type.getUnderlyingType().toString().startsWith(\"java.lang\") || isArray || isNull) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNDExOQ=="}, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2NTk3MA==", "bodyText": "The main logic I was following that the Aliasing Checker doesn't check for explicit annotations for user defined classes. So only those classes that the user has specifically annotated as @unique would construct @unique classes. This would also prevent all trivial objects like strings, int, object, float, etc. from always becoming @unique (it is more convenient to explicitly annotate them).\nHowever, I couldn't figure out how to make the AliasingVisitor check whether a class was user-defined or not. So, instead I listed classes and data types for which one would need explicit annotations. These included java.lang classes, arrays and null values. All this complicated conditions could be avoided if the Visitor could check for user-defined classes.\nif (annotated class is user defined) {\nreturn type.hasAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n}\nelse {\nreturn type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n}", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r436265970", "createdAt": "2020-06-06T12:40:34Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +271,13 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isArray = type.getUnderlyingType().getKind().toString().equalsIgnoreCase(\"array\");\n+        boolean isNull = exp.getKind() == Kind.NULL_LITERAL;\n+        if (type.getUnderlyingType().toString().startsWith(\"java.lang\") || isArray || isNull) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNDExOQ=="}, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4NDc2Mg==", "bodyText": "Can you clarify what you mean with \"user defined\"?\nWhy should the handling of explicit annotations depend on whether the class is \"user defined\"?", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r436384762", "createdAt": "2020-06-07T17:31:10Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +271,13 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isArray = type.getUnderlyingType().getKind().toString().equalsIgnoreCase(\"array\");\n+        boolean isNull = exp.getKind() == Kind.NULL_LITERAL;\n+        if (type.getUnderlyingType().toString().startsWith(\"java.lang\") || isArray || isNull) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNDExOQ=="}, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5NTYzMg==", "bodyText": "In the stub file stubfile.astub in tests/aliasing, Object and String classes are annotated as @unique by default. So, if I don't check for explicit annotations for all classes, then, even trivial operations like string assignments give a \"unique.leaked\" error in the test cases.\n// part of TypeRefinementTest.java in tests/aliasing\nvoid rule1() {\nString unique = new String();\nisUnique(unique);\nString notUnique = unique;  // gives unique.leaked error even though @unique is never used\n}\nSo I decided to limit this checking for \"user-defined\" classes (classes that are not part of any in-built java library, like java.lang or java.util). For example, in the code in the feature request #3313 (#3313), class Data and Demo are user-defined classes, and since Data is annotated as @unique, all its instances don't require explicit annotations to be unique as well.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r436895632", "createdAt": "2020-06-08T18:04:55Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +271,13 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isArray = type.getUnderlyingType().getKind().toString().equalsIgnoreCase(\"array\");\n+        boolean isNull = exp.getKind() == Kind.NULL_LITERAL;\n+        if (type.getUnderlyingType().toString().startsWith(\"java.lang\") || isArray || isNull) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNDExOQ=="}, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0MzUzNg==", "bodyText": "We do not want different behavior for built-in classes and user-defined classes. The same logic should be applied to all source code, regardless of who wrote the code.\nThere is a difference between classes String and Data in these two examples.\nIn String the default constructor is annotated as returning a unique object. The class declaration is not annotated. Therefore, it is fine in the test case to have a non-unique String reference.\nOn the other hand class Data in this new test case is annotated as @Unique requiring that only @Unique references exist.\nSo your check should be for that difference between the two classes.\nAlso can you move the annotations from framework/tests/aliasing/stubfile.astub into typetools/jdk#52?", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r440443536", "createdAt": "2020-06-15T20:59:13Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +271,13 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isArray = type.getUnderlyingType().getKind().toString().equalsIgnoreCase(\"array\");\n+        boolean isNull = exp.getKind() == Kind.NULL_LITERAL;\n+        if (type.getUnderlyingType().toString().startsWith(\"java.lang\") || isArray || isNull) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNDExOQ=="}, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMDk3Nw==", "bodyText": "I have added a new method for the above requested logic. Now the code doesn't need to deal with the special cases of arrays, null and java.lang classes. I have used the getDeclAnnotations method to get the set of declared annotations of the class as a whole, and then searched for the unique annotation mirror in the set. The code now gives leaked errors without explicit annotations only when the class is annotated as @unique. Annotating just the constructor will allow non-unique object references.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r443130977", "createdAt": "2020-06-20T13:28:08Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +271,13 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isArray = type.getUnderlyingType().getKind().toString().equalsIgnoreCase(\"array\");\n+        boolean isNull = exp.getKind() == Kind.NULL_LITERAL;\n+        if (type.getUnderlyingType().toString().startsWith(\"java.lang\") || isArray || isNull) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNDExOQ=="}, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzA5MjE1OnYy", "diffSide": "RIGHT", "path": "framework/tests/aliasing/ExplicitAnnotationTest.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMzoyMzo0MlrOGf_z0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxOToxOTozNVrOG0b7uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNDQ5OQ==", "bodyText": "Is the type of the left-hand side important? Can you add another method that does\nObject check2(Data p) { return p; }\nwhich I guess should also give a unique.leaked error.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r436204499", "createdAt": "2020-06-05T23:23:42Z", "author": {"login": "wmdietl"}, "path": "framework/tests/aliasing/ExplicitAnnotationTest.java", "diffHunk": "@@ -0,0 +1,13 @@\n+import org.checkerframework.common.aliasing.qual.Unique;\n+\n+@Unique class Data {\n+    @SuppressWarnings(\"unique.leaked\")\n+    Data() {} // All objects of Data are now @Unique\n+}\n+\n+class Demo {\n+    void check(Data p) { // p is @Unique Data Object\n+        // :: error: (unique.leaked)\n+        Data y = p; // @Unique p is leaked", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0MzcwNQ==", "bodyText": "Ping.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r440443705", "createdAt": "2020-06-15T20:59:31Z", "author": {"login": "wmdietl"}, "path": "framework/tests/aliasing/ExplicitAnnotationTest.java", "diffHunk": "@@ -0,0 +1,13 @@\n+import org.checkerframework.common.aliasing.qual.Unique;\n+\n+@Unique class Data {\n+    @SuppressWarnings(\"unique.leaked\")\n+    Data() {} // All objects of Data are now @Unique\n+}\n+\n+class Demo {\n+    void check(Data p) { // p is @Unique Data Object\n+        // :: error: (unique.leaked)\n+        Data y = p; // @Unique p is leaked", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNDQ5OQ=="}, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMDMxNA==", "bodyText": "No, the type of the left-hand side isn't important. However, the method doesn't give an error, even when Data is explicitly annotated as @unique.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r443130314", "createdAt": "2020-06-20T13:18:46Z", "author": {"login": "aditya3434"}, "path": "framework/tests/aliasing/ExplicitAnnotationTest.java", "diffHunk": "@@ -0,0 +1,13 @@\n+import org.checkerframework.common.aliasing.qual.Unique;\n+\n+@Unique class Data {\n+    @SuppressWarnings(\"unique.leaked\")\n+    Data() {} // All objects of Data are now @Unique\n+}\n+\n+class Demo {\n+    void check(Data p) { // p is @Unique Data Object\n+        // :: error: (unique.leaked)\n+        Data y = p; // @Unique p is leaked", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNDQ5OQ=="}, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MjE4Ng==", "bodyText": "I'm not sure how you mean this. Does Object z = p; not raise an error? Shouldn't it?", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r445592186", "createdAt": "2020-06-25T14:16:11Z", "author": {"login": "wmdietl"}, "path": "framework/tests/aliasing/ExplicitAnnotationTest.java", "diffHunk": "@@ -0,0 +1,13 @@\n+import org.checkerframework.common.aliasing.qual.Unique;\n+\n+@Unique class Data {\n+    @SuppressWarnings(\"unique.leaked\")\n+    Data() {} // All objects of Data are now @Unique\n+}\n+\n+class Demo {\n+    void check(Data p) { // p is @Unique Data Object\n+        // :: error: (unique.leaked)\n+        Data y = p; // @Unique p is leaked", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNDQ5OQ=="}, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc5ODg2NQ==", "bodyText": "@Unique\nclass Data {\n\n    Object check2(Data p) { return p; }\n\n    void check(Data p) {\n        Object z = p;\n    }\n}\n\nIn the code given above, Object z = p; does raise an error. Hence, the left hand side isn't important. However, the check2 function (where you are returning a @unique Data as an Object) doesn't raise an error both in the typetools/master and in my modified code, even if the Data p is explicitly annotated as @unique Data p.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r446798865", "createdAt": "2020-06-29T06:29:03Z", "author": {"login": "aditya3434"}, "path": "framework/tests/aliasing/ExplicitAnnotationTest.java", "diffHunk": "@@ -0,0 +1,13 @@\n+import org.checkerframework.common.aliasing.qual.Unique;\n+\n+@Unique class Data {\n+    @SuppressWarnings(\"unique.leaked\")\n+    Data() {} // All objects of Data are now @Unique\n+}\n+\n+class Demo {\n+    void check(Data p) { // p is @Unique Data Object\n+        // :: error: (unique.leaked)\n+        Data y = p; // @Unique p is leaked", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNDQ5OQ=="}, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzNjc5Mg==", "bodyText": "Ok, can you expand this test case with the Object local variable and the expected error.\nThen file an issue that shows the problem with the return version.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r457636792", "createdAt": "2020-07-20T19:19:35Z", "author": {"login": "wmdietl"}, "path": "framework/tests/aliasing/ExplicitAnnotationTest.java", "diffHunk": "@@ -0,0 +1,13 @@\n+import org.checkerframework.common.aliasing.qual.Unique;\n+\n+@Unique class Data {\n+    @SuppressWarnings(\"unique.leaked\")\n+    Data() {} // All objects of Data are now @Unique\n+}\n+\n+class Demo {\n+    void check(Data p) { // p is @Unique Data Object\n+        // :: error: (unique.leaked)\n+        Data y = p; // @Unique p is leaked", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNDQ5OQ=="}, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjE2MzgwOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzoxNzowMFrOGo6NWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNjowODo0NlrOGqGAyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU0OTkxMw==", "bodyText": "Do not star import.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r445549913", "createdAt": "2020-06-25T13:17:00Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -1,17 +1,11 @@\n package org.checkerframework.common.aliasing;\n \n-import com.sun.source.tree.ExpressionTree;\n-import com.sun.source.tree.MethodInvocationTree;\n-import com.sun.source.tree.MethodTree;\n-import com.sun.source.tree.NewArrayTree;\n-import com.sun.source.tree.ThrowTree;\n-import com.sun.source.tree.Tree;\n+import com.sun.source.tree.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc5MTg4Mg==", "bodyText": "Instead of star import, I listed the library data types that were required in my latest commit", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r446791882", "createdAt": "2020-06-29T06:08:46Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -1,17 +1,11 @@\n package org.checkerframework.common.aliasing;\n \n-import com.sun.source.tree.ExpressionTree;\n-import com.sun.source.tree.MethodInvocationTree;\n-import com.sun.source.tree.MethodTree;\n-import com.sun.source.tree.NewArrayTree;\n-import com.sun.source.tree.ThrowTree;\n-import com.sun.source.tree.Tree;\n+import com.sun.source.tree.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU0OTkxMw=="}, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjMxNjEyOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzo1MTo0N1rOGo7tKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNjowODowN1rOGqGABw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3NDQ0Mw==", "bodyText": "The caller already computed type and you don't seem to use exp in this method. So why not just pass the type as parameter?", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r445574443", "createdAt": "2020-06-25T13:51:47Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +265,37 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueClassFlag = isUniqueClass(exp);\n+        if (isUniqueClassFlag) {\n+            return type.hasAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        } else {\n+            return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        }\n+    }\n+\n+    /**\n+     * Returns true if class of tree expression {@code exp} has type {@code @Unique}\n+     *\n+     * @param exp the Tree to check\n+     * @return boolean true if class if unique and false otherwise\n+     */\n+    private boolean isUniqueClass(Tree exp) {\n+        AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc5MTY4Nw==", "bodyText": "I replaced exp with type as an argument in the isUniqueClass in my latest commit", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r446791687", "createdAt": "2020-06-29T06:08:07Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +265,37 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueClassFlag = isUniqueClass(exp);\n+        if (isUniqueClassFlag) {\n+            return type.hasAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        } else {\n+            return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        }\n+    }\n+\n+    /**\n+     * Returns true if class of tree expression {@code exp} has type {@code @Unique}\n+     *\n+     * @param exp the Tree to check\n+     * @return boolean true if class if unique and false otherwise\n+     */\n+    private boolean isUniqueClass(Tree exp) {\n+        AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3NDQ0Mw=="}, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjM4NjY1OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDowODoxMVrOGo8bFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNjowNzoyNlrOGqF_Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4NjE5OA==", "bodyText": "It might be easier as if (el == null) { return false; } and then the same for annoMirrors.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r445586198", "createdAt": "2020-06-25T14:08:11Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +265,37 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueClassFlag = isUniqueClass(exp);\n+        if (isUniqueClassFlag) {\n+            return type.hasAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        } else {\n+            return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        }\n+    }\n+\n+    /**\n+     * Returns true if class of tree expression {@code exp} has type {@code @Unique}\n+     *\n+     * @param exp the Tree to check\n+     * @return boolean true if class if unique and false otherwise\n+     */\n+    private boolean isUniqueClass(Tree exp) {\n+        AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n+        Element el = types.asElement(type.getUnderlyingType());\n+        if (el != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc5MTQyNg==", "bodyText": "I have separated out el and annoMirrors checks instead of the nested if conditions. If either of them is null, the method returns false", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r446791426", "createdAt": "2020-06-29T06:07:26Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +265,37 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueClassFlag = isUniqueClass(exp);\n+        if (isUniqueClassFlag) {\n+            return type.hasAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        } else {\n+            return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        }\n+    }\n+\n+    /**\n+     * Returns true if class of tree expression {@code exp} has type {@code @Unique}\n+     *\n+     * @param exp the Tree to check\n+     * @return boolean true if class if unique and false otherwise\n+     */\n+    private boolean isUniqueClass(Tree exp) {\n+        AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n+        Element el = types.asElement(type.getUnderlyingType());\n+        if (el != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4NjE5OA=="}, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjQxNDU1OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoxNDowNFrOGo8sMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNjowNjoyMlrOGqF9rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MDU3Ng==", "bodyText": "Again, don't use Strings for things like this. Can you use AnnotationUtils.containsSameByClass https://github.com/typetools/checker-framework/blob/master/javacutil/src/main/java/org/checkerframework/javacutil/AnnotationUtils.java#L230 ? Then you don't need the for loop.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r445590576", "createdAt": "2020-06-25T14:14:04Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +265,37 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueClassFlag = isUniqueClass(exp);\n+        if (isUniqueClassFlag) {\n+            return type.hasAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        } else {\n+            return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        }\n+    }\n+\n+    /**\n+     * Returns true if class of tree expression {@code exp} has type {@code @Unique}\n+     *\n+     * @param exp the Tree to check\n+     * @return boolean true if class if unique and false otherwise\n+     */\n+    private boolean isUniqueClass(Tree exp) {\n+        AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n+        Element el = types.asElement(type.getUnderlyingType());\n+        if (el != null) {\n+            Set<AnnotationMirror> annoMirrors = atypeFactory.getDeclAnnotations(el);\n+            if (annoMirrors != null) {\n+                for (AnnotationMirror mirror : annoMirrors) {\n+                    if (mirror.getAnnotationType()\n+                            .asElement()\n+                            .getSimpleName()\n+                            .contentEquals(\"Unique\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc5MTA4NA==", "bodyText": "I have used the AnnotationUtils.containtsSameByClass method in my latest commit", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r446791084", "createdAt": "2020-06-29T06:06:22Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +265,37 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueClassFlag = isUniqueClass(exp);\n+        if (isUniqueClassFlag) {\n+            return type.hasAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        } else {\n+            return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        }\n+    }\n+\n+    /**\n+     * Returns true if class of tree expression {@code exp} has type {@code @Unique}\n+     *\n+     * @param exp the Tree to check\n+     * @return boolean true if class if unique and false otherwise\n+     */\n+    private boolean isUniqueClass(Tree exp) {\n+        AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n+        Element el = types.asElement(type.getUnderlyingType());\n+        if (el != null) {\n+            Set<AnnotationMirror> annoMirrors = atypeFactory.getDeclAnnotations(el);\n+            if (annoMirrors != null) {\n+                for (AnnotationMirror mirror : annoMirrors) {\n+                    if (mirror.getAnnotationType()\n+                            .asElement()\n+                            .getSimpleName()\n+                            .contentEquals(\"Unique\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MDU3Ng=="}, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjQzMDMzOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoxNzoyNFrOGo82Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNjowOTo0NlrOGqGB_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MzEwMw==", "bodyText": "Why do you need the type.hasAnnotation again, if you already know that isUniqueClass?", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r445593103", "createdAt": "2020-06-25T14:17:24Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +265,37 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueClassFlag = isUniqueClass(exp);\n+        if (isUniqueClassFlag) {\n+            return type.hasAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc5MjE4OQ==", "bodyText": "Yes, I see that was a redundant check. I have not used it in my latest commits", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r446792189", "createdAt": "2020-06-29T06:09:46Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +265,37 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueClassFlag = isUniqueClass(exp);\n+        if (isUniqueClassFlag) {\n+            return type.hasAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MzEwMw=="}, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjQzMTkwOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoxNzo0NFrOGo83DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNjowNTowNFrOGqF7-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MzM1Nw==", "bodyText": "Remove the Flag part. Notice the style for the other is variables.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r445593357", "createdAt": "2020-06-25T14:17:44Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +265,37 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueClassFlag = isUniqueClass(exp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc5MDY1MQ==", "bodyText": "I have removed the flag part from the variable name in my latest commit", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r446790651", "createdAt": "2020-06-29T06:05:04Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +265,37 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueClassFlag = isUniqueClass(exp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MzM1Nw=="}, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjQzODUxOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoxOToxOFrOGo87WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNjowNDozNVrOGqF7Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NDQ1Ng==", "bodyText": "Could this just be return !isMethodInvocation && !isNewClass && (isUniqueClass || type.hasExplicitAnnotation(Unique.class));", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r445594456", "createdAt": "2020-06-25T14:19:18Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +265,37 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueClassFlag = isUniqueClass(exp);\n+        if (isUniqueClassFlag) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NDkxNw==", "bodyText": "Maybe extract the (isUniqueClass || type.hasExplicitAnnotation(Unique.class) into a separate local and document why that is the logic.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r445594917", "createdAt": "2020-06-25T14:19:58Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +265,37 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueClassFlag = isUniqueClass(exp);\n+        if (isUniqueClassFlag) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NDQ1Ng=="}, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc5MDQ1OQ==", "bodyText": "I have separated the (isUniqueClass || type.hasExplicitAnnotation(Unique.class) into a separate local variable and documented the logic.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r446790459", "createdAt": "2020-06-29T06:04:35Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +265,37 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueClassFlag = isUniqueClass(exp);\n+        if (isUniqueClassFlag) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NDQ1Ng=="}, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjQ0NTE2OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoyMDo0OVrOGo8_lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNjowMzozM1rOGqF6Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NTU0MA==", "bodyText": "You should also update the javadoc with the change in behavior.\nDo you understand what canBeLeaked expresses? The documentation is rather unclear.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r445595540", "createdAt": "2020-06-25T14:20:49Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +265,37 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc5MDE1MA==", "bodyText": "I have changed the documentation for the canBeLeaked method in my latest commit", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r446790150", "createdAt": "2020-06-29T06:03:33Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +265,37 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NTU0MA=="}, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDE4MDQ3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzo1NjozM1rOG0N_RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzo0ODoyOFrOG0sMuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQwODMyNQ==", "bodyText": "Do not use wildcard imports.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r457408325", "createdAt": "2020-07-20T13:56:33Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -10,8 +10,8 @@\n import com.sun.source.tree.VariableTree;\n import com.sun.source.util.TreePath;\n import java.util.List;\n-import javax.lang.model.element.ExecutableElement;\n-import javax.lang.model.element.VariableElement;\n+import java.util.Set;\n+import javax.lang.model.element.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "152389766e5bce9d266c1662e184c9768ea44c29"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzNzUwNw==", "bodyText": "We had this before: #3336 (comment)\nLook how to change your IDE configuration to not make such changes.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r457637507", "createdAt": "2020-07-20T19:20:55Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -10,8 +10,8 @@\n import com.sun.source.tree.VariableTree;\n import com.sun.source.util.TreePath;\n import java.util.List;\n-import javax.lang.model.element.ExecutableElement;\n-import javax.lang.model.element.VariableElement;\n+import java.util.Set;\n+import javax.lang.model.element.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQwODMyNQ=="}, "originalCommit": {"oid": "152389766e5bce9d266c1662e184c9768ea44c29"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkwMzI4OQ==", "bodyText": "I have changed the import statement in my latest commit. Turns out my IDE automatically * imports whenever it imports more than 3 packages.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r457903289", "createdAt": "2020-07-21T07:48:28Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -10,8 +10,8 @@\n import com.sun.source.tree.VariableTree;\n import com.sun.source.util.TreePath;\n import java.util.List;\n-import javax.lang.model.element.ExecutableElement;\n-import javax.lang.model.element.VariableElement;\n+import java.util.Set;\n+import javax.lang.model.element.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQwODMyNQ=="}, "originalCommit": {"oid": "152389766e5bce9d266c1662e184c9768ea44c29"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTIzNDU2OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzoxNjo0MVrOG0Xu1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzo0ODo1MFrOG0sNcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2Nzk1Nw==", "bodyText": "The summary should end with a period.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r457567957", "createdAt": "2020-07-20T17:16:41Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -263,15 +264,39 @@ protected void checkThisOrSuperConstructorCall(\n \n     /**\n      * Returns true if {@code exp} has type {@code @Unique} and is not a method invocation nor a new\n-     * class expression.\n+     * class expression. It checks whether the tree expression is unique by either checking for an\n+     * explicit annotation or checking whether the class of the tree expression {@code exp} has type\n+     * {@code @Unique}\n      *\n      * @param exp the Tree to check\n      */\n     private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueType = (isUniqueClass(type) || type.hasExplicitAnnotation(Unique.class));\n+        return isUniqueType && !isMethodInvocation && !isNewClass;\n+    }\n+\n+    /**\n+     * Returns true if class of annotated type {@code type} has annotation {@code @Unique}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "152389766e5bce9d266c1662e184c9768ea44c29"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzNjA5OA==", "bodyText": "Maybe use: Return true if the class declaration for annotated type ...", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r457636098", "createdAt": "2020-07-20T19:18:19Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -263,15 +264,39 @@ protected void checkThisOrSuperConstructorCall(\n \n     /**\n      * Returns true if {@code exp} has type {@code @Unique} and is not a method invocation nor a new\n-     * class expression.\n+     * class expression. It checks whether the tree expression is unique by either checking for an\n+     * explicit annotation or checking whether the class of the tree expression {@code exp} has type\n+     * {@code @Unique}\n      *\n      * @param exp the Tree to check\n      */\n     private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueType = (isUniqueClass(type) || type.hasExplicitAnnotation(Unique.class));\n+        return isUniqueType && !isMethodInvocation && !isNewClass;\n+    }\n+\n+    /**\n+     * Returns true if class of annotated type {@code type} has annotation {@code @Unique}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2Nzk1Nw=="}, "originalCommit": {"oid": "152389766e5bce9d266c1662e184c9768ea44c29"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkwMzQ3Mw==", "bodyText": "I have adjusted the summary in my latest commit", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r457903473", "createdAt": "2020-07-21T07:48:50Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -263,15 +264,39 @@ protected void checkThisOrSuperConstructorCall(\n \n     /**\n      * Returns true if {@code exp} has type {@code @Unique} and is not a method invocation nor a new\n-     * class expression.\n+     * class expression. It checks whether the tree expression is unique by either checking for an\n+     * explicit annotation or checking whether the class of the tree expression {@code exp} has type\n+     * {@code @Unique}\n      *\n      * @param exp the Tree to check\n      */\n     private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueType = (isUniqueClass(type) || type.hasExplicitAnnotation(Unique.class));\n+        return isUniqueType && !isMethodInvocation && !isNewClass;\n+    }\n+\n+    /**\n+     * Returns true if class of annotated type {@code type} has annotation {@code @Unique}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2Nzk1Nw=="}, "originalCommit": {"oid": "152389766e5bce9d266c1662e184c9768ea44c29"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTY1MjY0OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxOToxNDowMlrOG0bwCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzo0OToxMFrOG0sOFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzMzgwMA==", "bodyText": "The outer parenthesis aren't necessary.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r457633800", "createdAt": "2020-07-20T19:14:02Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -263,15 +264,39 @@ protected void checkThisOrSuperConstructorCall(\n \n     /**\n      * Returns true if {@code exp} has type {@code @Unique} and is not a method invocation nor a new\n-     * class expression.\n+     * class expression. It checks whether the tree expression is unique by either checking for an\n+     * explicit annotation or checking whether the class of the tree expression {@code exp} has type\n+     * {@code @Unique}\n      *\n      * @param exp the Tree to check\n      */\n     private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueType = (isUniqueClass(type) || type.hasExplicitAnnotation(Unique.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "152389766e5bce9d266c1662e184c9768ea44c29"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkwMzYzOA==", "bodyText": "I have removed the parenthesis in my latest commit.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r457903638", "createdAt": "2020-07-21T07:49:10Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -263,15 +264,39 @@ protected void checkThisOrSuperConstructorCall(\n \n     /**\n      * Returns true if {@code exp} has type {@code @Unique} and is not a method invocation nor a new\n-     * class expression.\n+     * class expression. It checks whether the tree expression is unique by either checking for an\n+     * explicit annotation or checking whether the class of the tree expression {@code exp} has type\n+     * {@code @Unique}\n      *\n      * @param exp the Tree to check\n      */\n     private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueType = (isUniqueClass(type) || type.hasExplicitAnnotation(Unique.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzMzgwMA=="}, "originalCommit": {"oid": "152389766e5bce9d266c1662e184c9768ea44c29"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1664, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}