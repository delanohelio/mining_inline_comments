{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5ODgwMTMy", "number": 3173, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1MDo0MVrODpMhWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1MzoxOVrODpMmBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTIzMzU0OnYy", "diffSide": "RIGHT", "path": "checker/tests/nullness/Issue3150.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1MDo0MVrOF4ODsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjoyNTozMlrOF6Nc5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5NDg5OQ==", "bodyText": "I find this change in expected error message unintuitive and undesirable.\nThere is no type argument here, so raising an invalid type argument error is misleading.\nType argument inference should always produce type arguments that respect the bounds. Then supplied arguments can cause errors if they don't respect that bound.\nHere, I would expect that type argument inference determines @NonNull Object as the type argument and then the argument should give an error.\nFor a similar reason I don't like typetools/jdk#36 : it changes the signature just to account for bad type inference, even though that bad type inference shouldn't give different errors.\nWould it be hard to do a GLB between each inferred type argument and the bounds?", "url": "https://github.com/typetools/checker-framework/pull/3173#discussion_r394494899", "createdAt": "2020-03-18T16:50:41Z", "author": {"login": "wmdietl"}, "path": "checker/tests/nullness/Issue3150.java", "diffHunk": "@@ -1,15 +1,13 @@\n-// @skip-test until the bug is fixed\n-\n // Test case for https://tinyurl.com/cfissue/3150 .\n \n import org.checkerframework.checker.nullness.qual.NonNull;\n import org.checkerframework.checker.nullness.qual.Nullable;\n \n class Issue3150 {\n     void foo(@Nullable Object nble, @NonNull Object nn) {\n-        // :: error: (argument.type.incompatible)\n+        // :: error: (type.argument.type.incompatible)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c48450bc7fa076733115b96b9fb9675e7ffc8d99"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4ODI4NQ==", "bodyText": "GLB the inferred type argument and its corresponding bound is tricky when the bound is another type variable. See  checker/tests/nullness/InferNullType.java.  As you can see in that example, the Checker Framework currently does infer type arguments that are outside its bounds.  I'll spend a little more time trying to change this so that it infers a type argument within the bound, but if it's not easy, then I think we should just open a separate issue.", "url": "https://github.com/typetools/checker-framework/pull/3173#discussion_r395288285", "createdAt": "2020-03-19T20:04:12Z", "author": {"login": "smillst"}, "path": "checker/tests/nullness/Issue3150.java", "diffHunk": "@@ -1,15 +1,13 @@\n-// @skip-test until the bug is fixed\n-\n // Test case for https://tinyurl.com/cfissue/3150 .\n \n import org.checkerframework.checker.nullness.qual.NonNull;\n import org.checkerframework.checker.nullness.qual.Nullable;\n \n class Issue3150 {\n     void foo(@Nullable Object nble, @NonNull Object nn) {\n-        // :: error: (argument.type.incompatible)\n+        // :: error: (type.argument.type.incompatible)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5NDg5OQ=="}, "originalCommit": {"oid": "c48450bc7fa076733115b96b9fb9675e7ffc8d99"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU4MjExNg==", "bodyText": "Something like the following should work:\n1. get possible incorrect assignment of type parameters to inferred type arguments\n2. Iterate while there are changes:\n2.1 Compute the type parameter bounds under the current assignment, to resolve type parameter uses\n2.2 Go through all type parameters and GLB the inferred type argument with the current bound\n\nOnce #979 is fixed, this additional step shouldn't be necessary, but this might be a good time to improve the quality of type inference.", "url": "https://github.com/typetools/checker-framework/pull/3173#discussion_r396582116", "createdAt": "2020-03-23T16:25:32Z", "author": {"login": "wmdietl"}, "path": "checker/tests/nullness/Issue3150.java", "diffHunk": "@@ -1,15 +1,13 @@\n-// @skip-test until the bug is fixed\n-\n // Test case for https://tinyurl.com/cfissue/3150 .\n \n import org.checkerframework.checker.nullness.qual.NonNull;\n import org.checkerframework.checker.nullness.qual.Nullable;\n \n class Issue3150 {\n     void foo(@Nullable Object nble, @NonNull Object nn) {\n-        // :: error: (argument.type.incompatible)\n+        // :: error: (type.argument.type.incompatible)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5NDg5OQ=="}, "originalCommit": {"oid": "c48450bc7fa076733115b96b9fb9675e7ffc8d99"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI0NTUwOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/util/typeinference/DefaultTypeArgumentInference.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1MzoxOVrOF4OLOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1Mzo0MVrOF4OMRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5NjgyNA==", "bodyText": "I'm confused why it is the right thing to use the annotations only from the first result. The loop goes through all type parameters, multiple of which might come from null, but only the first determines the value of objectWithAnnosFromNull.\nCan you add an explanation?\nOr should you ask the type factory what the type of null is, instead?", "url": "https://github.com/typetools/checker-framework/pull/3173#discussion_r394496824", "createdAt": "2020-03-18T16:53:19Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/util/typeinference/DefaultTypeArgumentInference.java", "diffHunk": "@@ -237,7 +244,14 @@ private void handleNullTypeArguments(\n                 if (withoutNullResult == null) {\n                     // withoutNullResult is null when the only constraint on a type argument is\n                     // where a method argument is null.\n-                    withoutNullResult = typeFactory.getUninferredWildcardType(atv);\n+                    if (objectWithAnnosFromNull == null) {\n+                        Elements elements = typeFactory.getProcessingEnv().getElementUtils();\n+                        TypeMirror objectTM = elements.getTypeElement(\"java.lang.Object\").asType();\n+                        objectWithAnnosFromNull =\n+                                AnnotatedTypeMirror.createType(objectTM, typeFactory, false);\n+                        objectWithAnnosFromNull.addAnnotations(result.getAnnotations());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c48450bc7fa076733115b96b9fb9675e7ffc8d99"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5NzA5Mw==", "bodyText": "Also, should objectWithAnnosFromNull be set to null again at some point?", "url": "https://github.com/typetools/checker-framework/pull/3173#discussion_r394497093", "createdAt": "2020-03-18T16:53:41Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/util/typeinference/DefaultTypeArgumentInference.java", "diffHunk": "@@ -237,7 +244,14 @@ private void handleNullTypeArguments(\n                 if (withoutNullResult == null) {\n                     // withoutNullResult is null when the only constraint on a type argument is\n                     // where a method argument is null.\n-                    withoutNullResult = typeFactory.getUninferredWildcardType(atv);\n+                    if (objectWithAnnosFromNull == null) {\n+                        Elements elements = typeFactory.getProcessingEnv().getElementUtils();\n+                        TypeMirror objectTM = elements.getTypeElement(\"java.lang.Object\").asType();\n+                        objectWithAnnosFromNull =\n+                                AnnotatedTypeMirror.createType(objectTM, typeFactory, false);\n+                        objectWithAnnosFromNull.addAnnotations(result.getAnnotations());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5NjgyNA=="}, "originalCommit": {"oid": "c48450bc7fa076733115b96b9fb9675e7ffc8d99"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1829, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}