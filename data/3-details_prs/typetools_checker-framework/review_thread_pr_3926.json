{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MDE4MTgz", "number": 3926, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzowNDo0NlrOE8bpLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjoyMjowOVrOE8fKuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODAyOTI2OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/DefaultTypeHierarchy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzowNDo0NlrOH4i18A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzowNDo0NlrOH4i18A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA1MzE2OA==", "bodyText": "I'm having trouble parsing this English.", "url": "https://github.com/typetools/checker-framework/pull/3926#discussion_r529053168", "createdAt": "2020-11-23T23:04:46Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/DefaultTypeHierarchy.java", "diffHunk": "@@ -907,10 +912,17 @@ public Boolean visitWildcard_Wildcard(\n     // interface but that handle cases that more than one visit method shares\n     // in common\n \n-    /** An intersection is a supertype if all of its bounds are a supertype of subtype. */\n+    /**\n+     * An intersection is a supertype if all of its bounds are a supertype of subtype.\n+     *\n+     * @param subtype the possible subtype\n+     * @param supertype the possible supertype\n+     * @return true if an intersection is a supertype if all of its bounds are a supertype of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b80bd4224de666ae00e0d080ae1e5ded6515d0"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODAzMTc0OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/StructuralEqualityComparer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzowNTo0MFrOH4i3YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzowNTo0MFrOH4i3YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA1MzUzNw==", "bodyText": "Nit: end sentence with period.", "url": "https://github.com/typetools/checker-framework/pull/3926#discussion_r529053537", "createdAt": "2020-11-23T23:05:40Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/StructuralEqualityComparer.java", "diffHunk": "@@ -168,17 +168,21 @@ protected boolean areAllEqual(\n \n     /**\n      * First check visitHistory to see if type1 and type2 have been compared once already. If so\n-     * return true; otherwise compare them and add them to visitHistory\n+     * return true; otherwise compare them and put them in visitHistory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b80bd4224de666ae00e0d080ae1e5ded6515d0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODAzNDA2OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/StructuralEqualityComparer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzowNjozNFrOH4i43Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzowNjozNFrOH4i43Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA1MzkxNw==", "bodyText": "Not related to this pull request, but this method name is rather inelegant.", "url": "https://github.com/typetools/checker-framework/pull/3926#discussion_r529053917", "createdAt": "2020-11-23T23:06:34Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/StructuralEqualityComparer.java", "diffHunk": "@@ -168,17 +168,21 @@ protected boolean areAllEqual(\n \n     /**\n      * First check visitHistory to see if type1 and type2 have been compared once already. If so\n-     * return true; otherwise compare them and add them to visitHistory\n+     * return true; otherwise compare them and put them in visitHistory\n+     *\n+     * @param type1 the first type\n+     * @param type2 the second type\n+     * @return whether the two types are equal\n      */\n     protected boolean checkOrAreEqual(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b80bd4224de666ae00e0d080ae1e5ded6515d0"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODYwNjY1OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/StructuralEqualityVisitHistory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjoyMjoxMFrOH4oqMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjoyMjoxMFrOH4oqMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE0ODQ2Nw==", "bodyText": "Like in SubtypeVisitHistory, change the Add to Put to be consistent with the new method name?", "url": "https://github.com/typetools/checker-framework/pull/3926#discussion_r529148467", "createdAt": "2020-11-24T02:22:10Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/StructuralEqualityVisitHistory.java", "diffHunk": "@@ -32,19 +32,25 @@ public StructuralEqualityVisitHistory() {\n     /**\n      * Add result of comparing {@code type1} and {@code type2} for structural equality for the given", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21dbcd15c77fb64e7e30d8dd88a42c5fd9ab39b8"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 954, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}