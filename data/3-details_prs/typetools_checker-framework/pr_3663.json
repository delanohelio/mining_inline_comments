{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2MzEzMTMz", "number": 3663, "title": "Warnings about `@SuppressWarnings` on inappropriate methods", "bodyText": "Fixes #3648", "createdAt": "2020-09-14T04:10:10Z", "url": "https://github.com/typetools/checker-framework/pull/3663", "merged": true, "mergeCommit": {"oid": "5d6a41ec67cd87a19c9b2957a27a56fcae6ea7c2"}, "closed": true, "closedAt": "2020-09-21T19:27:21Z", "author": {"login": "mernst"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdInpyNAH2gAyNDg2MzEzMTMzOmFmN2E4NTNmNTkwZDU1OTEzZTkyMTIxMWRjYTliMDhjMmUxZGU2MzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLHLRbgH2gAyNDg2MzEzMTMzOmNmOTgzOTY3NmI4YzMzNjJlYWI3ZDc1ODUwN2ZkZDBkZDg4NWZlNmI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "af7a853f590d55913e921211dca9b08c2e1de631", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/af7a853f590d55913e921211dca9b08c2e1de631", "committedDate": "2020-09-14T00:00:34Z", "message": "Warnings about @SuppressWarnings on inappropriate methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjY1NzQy", "url": "https://github.com/typetools/checker-framework/pull/3663#pullrequestreview-488265742", "createdAt": "2020-09-15T01:45:59Z", "commit": {"oid": "af7a853f590d55913e921211dca9b08c2e1de631"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMTo0NTo1OVrOHRtdoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMTo0NTo1OVrOHRtdoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMzMjcwNA==", "bodyText": "The following should work:\nTypeMirror receiverType = TreeUtils.elementFromDeclaration(node).getReceiverType();\n\nIf the method has no receiver, the type returned with have TypeKind.NONE.", "url": "https://github.com/typetools/checker-framework/pull/3663#discussion_r488332704", "createdAt": "2020-09-15T01:45:59Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/common/value/ValueVisitor.java", "diffHunk": "@@ -341,4 +347,71 @@ public boolean validateType(Tree tree, AnnotatedTypeMirror type) {\n \n         return true;\n     }\n+\n+    /**\n+     * Returns true if an expression of the given type can be a compile-time constant value.\n+     *\n+     * @param tm a type\n+     * @return true if an expression of the given type can be a compile-time constant value\n+     */\n+    private boolean canBeConstant(TypeMirror tm) {\n+        return TypesUtils.isPrimitive(tm)\n+                || TypesUtils.isBoxedPrimitive(tm)\n+                || TypesUtils.isString(tm)\n+                || (tm.getKind() == TypeKind.ARRAY\n+                        && canBeConstant(((ArrayType) tm).getComponentType()));\n+    }\n+\n+    @Override\n+    public Void visitMethod(MethodTree node, Void p) {\n+        super.visitMethod(node, p);\n+\n+        ExecutableElement method = TreeUtils.elementFromDeclaration(node);\n+        if (atypeFactory.getDeclAnnotation(method, StaticallyExecutable.class) != null) {\n+            // The method is annotated as @StaticallyExecutable.\n+            if (atypeFactory.getDeclAnnotation(method, Pure.class) == null) {\n+                checker.reportWarning(node, \"statically.executable.not.pure\");\n+            }\n+            TypeMirror returnType = method.getReturnType();\n+            if (returnType.getKind() != TypeKind.VOID && !canBeConstant(returnType)) {\n+                checker.reportError(\n+                        node, \"statically.executable.nonconstant.return.type\", returnType);\n+            }\n+\n+            // Ways to determin the receiver type.\n+            // 1. This definition of receiverType is null when receiver is implicit and method has\n+            //    class com.sun.tools.javac.code.Symbol$MethodSymbol.  WHY?\n+            //        TypeMirror receiverType = method.getReceiverType();\n+            // 2. Can't use the tree, because the receiver might not be explicit.\n+            // 3. Check whether method is static and use the declaring class.  Doesn't handle all\n+            //    cases, but handles the most common ones.\n+            TypeMirror receiverType = method.getReceiverType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af7a853f590d55913e921211dca9b08c2e1de631"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0200c733299821e8e135f79e4791417e54c389c7", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/0200c733299821e8e135f79e4791417e54c389c7", "committedDate": "2020-09-21T17:49:24Z", "message": "Tweak documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf9839676b8c3362eab7d758507fdd0dd885fe6b", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/cf9839676b8c3362eab7d758507fdd0dd885fe6b", "committedDate": "2020-09-21T17:52:03Z", "message": "Merge ../checker-framework-branch-master into staticallyexecutable-warnings"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2639, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}