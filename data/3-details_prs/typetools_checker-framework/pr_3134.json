{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MDQzNjQw", "number": 3134, "title": "Use `List<DiagMessage>` instead of `framework.source.Result`", "bodyText": "The Result class isn't necessary; List<DiagMessage> suffices.  This pull request removes Result.\nMerge together with typetools/checker-framework-inference#146 .", "createdAt": "2020-03-06T22:09:53Z", "url": "https://github.com/typetools/checker-framework/pull/3134", "merged": true, "mergeCommit": {"oid": "f920b2a2487bd9c06d8d857877ca95740ea81566"}, "closed": true, "closedAt": "2020-03-10T18:22:05Z", "author": {"login": "mernst"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcLHWbegH2gAyMzg1MDQzNjQwOmZhYmUzOGE1ZGY3MDM1NDM2MTg2MmI5NzJkZmI1MGZjMjYwODhlYmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMWDYtgFqTM3MjE3NDg2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fabe38a5df70354361862b972dfb50fc26088ebc", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/fabe38a5df70354361862b972dfb50fc26088ebc", "committedDate": "2020-03-06T21:53:05Z", "message": "Remove framework.source.Result class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04d72fa06f6ea07a34de35ace1cbd0fc4148e3d5", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/04d72fa06f6ea07a34de35ace1cbd0fc4148e3d5", "committedDate": "2020-03-06T21:58:28Z", "message": "Reduce differences from upstream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9711608990e75d34658e1887bc88422d6868c8fa", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/9711608990e75d34658e1887bc88422d6868c8fa", "committedDate": "2020-03-06T22:06:15Z", "message": "Extract DiagMessage from Result"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "165b7a1f5ba6e5f5145c05d1b21c7b29841ffcc7", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/165b7a1f5ba6e5f5145c05d1b21c7b29841ffcc7", "committedDate": "2020-03-06T22:09:35Z", "message": "Add changelog entry"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNjcxOTQ4", "url": "https://github.com/typetools/checker-framework/pull/3134#pullrequestreview-370671948", "createdAt": "2020-03-06T22:46:17Z", "commit": {"oid": "165b7a1f5ba6e5f5145c05d1b21c7b29841ffcc7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjo0NjoxN1rOFzJsSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjo0NjoxN1rOFzJsSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4MDQ5MQ==", "bodyText": "What do you think of introducing two methods reportError and reportWarning and discouraging the use of  the version with a javax.tools.Diagnostic.Kind dependency? That would make it easier to use the API, removing the need for many of the imports this PR adds.", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r389180491", "createdAt": "2020-03-06T22:46:17Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -879,71 +877,34 @@ public void typeProcess(TypeElement e, TreePath p) {\n     ///\n \n     /**\n-     * Reports a result. By default, it prints it to the screen via the compiler's internal messager\n-     * if the result is non-success; otherwise, the method returns with no side effects.\n+     * Reports a diagnostic message. By default, it prints it to the screen via the compiler's\n+     * internal messager; otherwise, the method returns with no side effects.\n      *\n-     * @param r the result to report\n-     * @param src the position object associated with the result; may be an Element, a Tree, or null\n+     * @param source the source position information; may be an Element, a Tree, or null\n+     * @param kind the type of message\n+     * @param messageKey the message key\n+     * @param args arguments for interpolation in the string corresponding to the given message key\n      */\n-    public void report(final Result r, final Object src) {\n-        if (r.isSuccess()) {\n-            return;\n-        }\n+    public void report(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "165b7a1f5ba6e5f5145c05d1b21c7b29841ffcc7"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37eb34edefa53d8fd825fd988caa776afe850e64", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/37eb34edefa53d8fd825fd988caa776afe850e64", "committedDate": "2020-03-07T00:07:57Z", "message": "Create reportError and createWarning methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6da762308d012a2bdd3990bd57715e890f8fd76", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/e6da762308d012a2bdd3990bd57715e890f8fd76", "committedDate": "2020-03-07T00:12:02Z", "message": "Make a method private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec9752b761aadde304f4af42f6dca88faf5ceb2f", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/ec9752b761aadde304f4af42f6dca88faf5ceb2f", "committedDate": "2020-03-07T04:50:32Z", "message": "Change another use of report()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc8ed9c11976a55a52494709ec725d7849752bf4", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/dc8ed9c11976a55a52494709ec725d7849752bf4", "committedDate": "2020-03-07T17:04:34Z", "message": "Remove import statements; will simplify a future refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "460600352c4d8902a960a955c27242ee10fd1c86", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/460600352c4d8902a960a955c27242ee10fd1c86", "committedDate": "2020-03-09T04:23:49Z", "message": "Merge ../checker-framework-branch-master into remove-result-class-2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMjU0OTU1", "url": "https://github.com/typetools/checker-framework/pull/3134#pullrequestreview-371254955", "createdAt": "2020-03-09T14:56:28Z", "commit": {"oid": "460600352c4d8902a960a955c27242ee10fd1c86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo1NjoyOFrOFzsHeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo1NjoyOFrOFzsHeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0NDUwNg==", "bodyText": "I'm using the Result class in #2883 to collect multiple errors and report them once:\nhttps://github.com/typetools/checker-framework/pull/2883/files#diff-31033326203125d5a0af0323436d39f4R463\nSo, I would like to keep the class.\nI support changing the report methods so that you don't have to create a Result object only to pass it to this method.  I do think we should deprecate the previous methods though as this is a rather large breaking change.", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r389744506", "createdAt": "2020-03-09T14:56:28Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -875,75 +874,77 @@ public void typeProcess(TypeElement e, TreePath p) {\n     }\n \n     ///////////////////////////////////////////////////////////////////////////\n-    /// Reporting type-checking errors; the main entry point is report()\n+    /// Reporting type-checking errors; most clients use reportError() or reportWarning()\n     ///\n \n     /**\n-     * Reports a result. By default, it prints it to the screen via the compiler's internal messager\n-     * if the result is non-success; otherwise, the method returns with no side effects.\n+     * Reports an error. By default, prints it to the screen via the compiler's internal messager.\n      *\n-     * @param r the result to report\n-     * @param src the position object associated with the result; may be an Element, a Tree, or null\n+     * @param source the source position information; may be an Element, a Tree, or null\n+     * @param messageKey the message key\n+     * @param args arguments for interpolation in the string corresponding to the given message key\n      */\n-    public void report(final Result r, final Object src) {\n-        if (r.isSuccess()) {\n-            return;\n-        }\n+    public void reportError(Object source, @CompilerMessageKey String messageKey, Object... args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "460600352c4d8902a960a955c27242ee10fd1c86"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "441d06bbc162c8c7e9d1429e103c84d955b2f0ae", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/441d06bbc162c8c7e9d1429e103c84d955b2f0ae", "committedDate": "2020-03-09T16:53:30Z", "message": "Add Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26a1d41d1e1616839ee78fc41b77be260a31bf4b", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/26a1d41d1e1616839ee78fc41b77be260a31bf4b", "committedDate": "2020-03-09T17:15:54Z", "message": "Fix Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce167674d64cf1ae5c201681debd99071c942b0e", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/ce167674d64cf1ae5c201681debd99071c942b0e", "committedDate": "2020-03-09T17:20:54Z", "message": "Abstract out a method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db7d3883bf1eaaab3f2418312499900d0ef6ebe5", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/db7d3883bf1eaaab3f2418312499900d0ef6ebe5", "committedDate": "2020-03-09T17:47:01Z", "message": "Deprecate Result class rather than removing it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a075693ab23b3ec1c2101ff912f42ee83808db32", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/a075693ab23b3ec1c2101ff912f42ee83808db32", "committedDate": "2020-03-09T21:00:20Z", "message": "Javadoc fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92ebe9e3037e22f30e0926f73a407fbb7cc2bdc0", "author": {"user": {"login": "wmdietl", "name": "Werner Dietl"}}, "url": "https://github.com/typetools/checker-framework/commit/92ebe9e3037e22f30e0926f73a407fbb7cc2bdc0", "committedDate": "2020-03-09T22:42:47Z", "message": "Fix typo."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb367b2809394dd132762f763480c822ea1d0248", "author": {"user": {"login": "wmdietl", "name": "Werner Dietl"}}, "url": "https://github.com/typetools/checker-framework/commit/fb367b2809394dd132762f763480c822ea1d0248", "committedDate": "2020-03-09T22:54:20Z", "message": "Fix typo."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTcwNTIx", "url": "https://github.com/typetools/checker-framework/pull/3134#pullrequestreview-371570521", "createdAt": "2020-03-09T22:27:37Z", "commit": {"oid": "a075693ab23b3ec1c2101ff912f42ee83808db32"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjoyNzozN1rOFz7dlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzowNToxMlrOFz8Pew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5NTkyNw==", "bodyText": "Shouldn't the uses of the deprecated Result be removed? Are these two methods at all useful?", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r389995927", "createdAt": "2020-03-09T22:27:37Z", "author": {"login": "wmdietl"}, "path": "checker/src/main/java/org/checkerframework/checker/formatter/FormatterTreeUtil.java", "diffHunk": "@@ -351,16 +351,26 @@ public Boolean visitNull(NullType t, Class<Void> p) {\n         }\n     }\n \n-    /** Reports an error. Takes a {@link Result} to report the location. */\n-    public final <E> void failure(Result<E> res, @CompilerMessageKey String msg, Object... args) {\n-        checker.report(\n-                org.checkerframework.framework.source.Result.failure(msg, args), res.location);\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a075693ab23b3ec1c2101ff912f42ee83808db32"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5NjgzNA==", "bodyText": "Same comments as for FormatterTreeUtil above.", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r389996834", "createdAt": "2020-03-09T22:30:11Z", "author": {"login": "wmdietl"}, "path": "checker/src/main/java/org/checkerframework/checker/i18nformatter/I18nFormatterTreeUtil.java", "diffHunk": "@@ -151,16 +151,26 @@ public boolean isMakeFormatCall(MethodInvocationNode node, AnnotatedTypeFactory\n         return anno != null;\n     }\n \n-    /** Reports an error. Takes a {@link Result} to report the location. */\n-    public final <E> void failure(Result<E> res, @CompilerMessageKey String msg, Object... args) {\n-        checker.report(\n-                org.checkerframework.framework.source.Result.failure(msg, args), res.location);\n+    /**\n+     * Reports an error.\n+     *\n+     * @param res used for source location information\n+     * @param msgKey the diagnostic message key\n+     * @param args arguments to the diagnostic message\n+     */\n+    public final void failure(Result<?> res, @CompilerMessageKey String msgKey, Object... args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a075693ab23b3ec1c2101ff912f42ee83808db32"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwMjMxMw==", "bodyText": "Here and above on line 146, instead of null shouldn't it \"an empty list\", bc the code does Collections.emptyList(); in the success case on line 176.", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r390002313", "createdAt": "2020-03-09T22:45:27Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeValidator.java", "diffHunk": "@@ -112,41 +118,48 @@ protected boolean shouldCheckTopLevelDeclaredType(AnnotatedTypeMirror type, Tree\n      *   <li>These properties should also hold recursively for component types of arrays, as wells\n      *       as bounds of type variables and wildcards.\n      * </ol>\n+     *\n+     * @param qualifierHierarchy the qualifier hierachy\n+     * @param type the type to test\n+     * @return list of reasons the type is invalid, or empty list if the type is valid\n      */\n-    protected Result isValidType(QualifierHierarchy qualifierHierarchy, AnnotatedTypeMirror type) {\n-        SimpleAnnotatedTypeScanner<Result, Void> scanner =\n-                new SimpleAnnotatedTypeScanner<Result, Void>() {\n+    protected List<DiagMessage> isValidType(\n+            QualifierHierarchy qualifierHierarchy, AnnotatedTypeMirror type) {\n+        SimpleAnnotatedTypeScanner<List<DiagMessage>, Void> scanner =\n+                new SimpleAnnotatedTypeScanner<List<DiagMessage>, Void>() {\n                     @Override\n-                    protected Result defaultAction(AnnotatedTypeMirror type, Void aVoid) {\n+                    protected List<DiagMessage> defaultAction(\n+                            AnnotatedTypeMirror type, Void aVoid) {\n                         return isTopLevelValidType(qualifierHierarchy, type);\n                     }\n \n                     @Override\n-                    protected Result reduce(Result r1, Result r2) {\n-                        if (r1 == null) {\n-                            if (r2 == null) {\n-                                return Result.SUCCESS;\n-                            }\n-                            return r2;\n-                        } else if (r2 == null) {\n-                            return r1;\n-                        }\n-                        return r1.merge(r2);\n+                    protected List<DiagMessage> reduce(List<DiagMessage> r1, List<DiagMessage> r2) {\n+                        return DiagMessage.mergeLists(r1, r2);\n                     }\n                 };\n         return scanner.visit(type);\n     }\n \n-    /** Checks every property listed in {@link #isValidType}, but only for the top level type. */\n-    protected Result isTopLevelValidType(\n+    /**\n+     * Checks every property listed in {@link #isValidType}, but only for the top level type. If\n+     * successful, returns null. If not successful, returns diagnostics.\n+     *\n+     * @param qualifierHierarchy the qualifier hierarchy\n+     * @param type the type to be checked\n+     * @return the diagnostics indicating failure, or null if successful", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ebe9e3037e22f30e0926f73a407fbb7cc2bdc0"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNDUwOA==", "bodyText": "I'm not a big fan of static imports in general... for the single use here it seems unnecessary to change.", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r390004508", "createdAt": "2020-03-09T22:52:20Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/AggregateChecker.java", "diffHunk": "@@ -1,5 +1,7 @@\n package org.checkerframework.framework.source;\n \n+import static javax.tools.Diagnostic.Kind.ERROR;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ebe9e3037e22f30e0926f73a407fbb7cc2bdc0"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNTM3Nw==", "bodyText": "Why the List part? For a single Result isn't a single DiagMessage the replacement?", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r390005377", "createdAt": "2020-03-09T22:55:04Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/Result.java", "diffHunk": "@@ -19,7 +20,9 @@\n  * compiler interface.\n  *\n  * @see SourceChecker#report\n+ * @deprecated use {@code List<DiagMessage>} instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb367b2809394dd132762f763480c822ea1d0248"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNzI2NQ==", "bodyText": "As this is a private method, no external clients can use this.\nSo maybe this comment is better on the public void report(Object source, DiagMessage d) above?", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r390007265", "createdAt": "2020-03-09T23:00:52Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -894,56 +895,79 @@ public void report(final Result r, final Object src) {\n             return;\n         }\n \n-        for (Result.DiagMessage msg : r.getDiagMessages()) {\n-            if (r.isFailure()) {\n-                this.message(\n-                        hasOption(\"warns\")\n-                                ? Diagnostic.Kind.MANDATORY_WARNING\n-                                : Diagnostic.Kind.ERROR,\n-                        src,\n-                        msg.getMessageKey(),\n-                        msg.getArgs());\n-            } else if (r.isWarning()) {\n-                this.message(\n-                        Diagnostic.Kind.MANDATORY_WARNING, src, msg.getMessageKey(), msg.getArgs());\n-            } else {\n-                this.message(Diagnostic.Kind.NOTE, src, msg.getMessageKey(), msg.getArgs());\n-            }\n+        for (DiagMessage dmsg : r.getDiagMessages()) {\n+            report(src, dmsg);\n         }\n     }\n \n     /**\n-     * Prints a message (error, warning, note, etc.) via JSR-269.\n+     * Reports an error. By default, prints it to the screen via the compiler's internal messager.\n      *\n-     * @param kind the type of message to print\n-     * @param source the object from which to obtain source position information; may be an Element,\n-     *     a Tree, or null\n-     * @param msgKey the message key to print\n+     * @param source the source position information; may be an Element, a Tree, or null\n+     * @param messageKey the message key\n      * @param args arguments for interpolation in the string corresponding to the given message key\n-     * @see Diagnostic\n-     * @throws IllegalArgumentException if {@code source} is neither a {@link Tree} nor an {@link\n-     *     Element}\n-     */\n-    private void message(\n-            Diagnostic.Kind kind,\n-            @Nullable Object source,\n-            @CompilerMessageKey String msgKey,\n-            Object... args) {\n+     */\n+    public void reportError(Object source, @CompilerMessageKey String messageKey, Object... args) {\n+        report(source, ERROR, messageKey, args);\n+    }\n+\n+    /**\n+     * Reports a warning. By default, prints it to the screen via the compiler's internal messager.\n+     *\n+     * @param source the source position information; may be an Element, a Tree, or null\n+     * @param messageKey the message key\n+     * @param args arguments for interpolation in the string corresponding to the given message key\n+     */\n+    public void reportWarning(\n+            Object source, @CompilerMessageKey String messageKey, Object... args) {\n+        report(source, MANDATORY_WARNING, messageKey, args);\n+    }\n \n+    /**\n+     * Reports a diagnostic message. By default, prints it to the screen via the compiler's internal\n+     * messager.\n+     *\n+     * @param source the source position information; may be an Element, a Tree, or null\n+     * @param d the diagnostic message\n+     */\n+    public void report(Object source, DiagMessage d) {\n+        report(source, d.getKind(), d.getMessageKey(), d.getArgs());\n+    }\n+\n+    /**\n+     * Reports a diagnostic message. By default, it prints it to the screen via the compiler's\n+     * internal messager; otherwise, the method returns with no side effects.\n+     *\n+     * <p>Most clients should use {@link #reportError} or {@link #reportWarning}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb367b2809394dd132762f763480c822ea1d0248"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwODE2Mw==", "bodyText": "I'm a bit confused about the By default and otherwise text. This is a private method, so subclasses can't adapt it. How/when do I reach the otherwise case?", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r390008163", "createdAt": "2020-03-09T23:03:31Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -894,56 +895,79 @@ public void report(final Result r, final Object src) {\n             return;\n         }\n \n-        for (Result.DiagMessage msg : r.getDiagMessages()) {\n-            if (r.isFailure()) {\n-                this.message(\n-                        hasOption(\"warns\")\n-                                ? Diagnostic.Kind.MANDATORY_WARNING\n-                                : Diagnostic.Kind.ERROR,\n-                        src,\n-                        msg.getMessageKey(),\n-                        msg.getArgs());\n-            } else if (r.isWarning()) {\n-                this.message(\n-                        Diagnostic.Kind.MANDATORY_WARNING, src, msg.getMessageKey(), msg.getArgs());\n-            } else {\n-                this.message(Diagnostic.Kind.NOTE, src, msg.getMessageKey(), msg.getArgs());\n-            }\n+        for (DiagMessage dmsg : r.getDiagMessages()) {\n+            report(src, dmsg);\n         }\n     }\n \n     /**\n-     * Prints a message (error, warning, note, etc.) via JSR-269.\n+     * Reports an error. By default, prints it to the screen via the compiler's internal messager.\n      *\n-     * @param kind the type of message to print\n-     * @param source the object from which to obtain source position information; may be an Element,\n-     *     a Tree, or null\n-     * @param msgKey the message key to print\n+     * @param source the source position information; may be an Element, a Tree, or null\n+     * @param messageKey the message key\n      * @param args arguments for interpolation in the string corresponding to the given message key\n-     * @see Diagnostic\n-     * @throws IllegalArgumentException if {@code source} is neither a {@link Tree} nor an {@link\n-     *     Element}\n-     */\n-    private void message(\n-            Diagnostic.Kind kind,\n-            @Nullable Object source,\n-            @CompilerMessageKey String msgKey,\n-            Object... args) {\n+     */\n+    public void reportError(Object source, @CompilerMessageKey String messageKey, Object... args) {\n+        report(source, ERROR, messageKey, args);\n+    }\n+\n+    /**\n+     * Reports a warning. By default, prints it to the screen via the compiler's internal messager.\n+     *\n+     * @param source the source position information; may be an Element, a Tree, or null\n+     * @param messageKey the message key\n+     * @param args arguments for interpolation in the string corresponding to the given message key\n+     */\n+    public void reportWarning(\n+            Object source, @CompilerMessageKey String messageKey, Object... args) {\n+        report(source, MANDATORY_WARNING, messageKey, args);\n+    }\n \n+    /**\n+     * Reports a diagnostic message. By default, prints it to the screen via the compiler's internal\n+     * messager.\n+     *\n+     * @param source the source position information; may be an Element, a Tree, or null\n+     * @param d the diagnostic message\n+     */\n+    public void report(Object source, DiagMessage d) {\n+        report(source, d.getKind(), d.getMessageKey(), d.getArgs());\n+    }\n+\n+    /**\n+     * Reports a diagnostic message. By default, it prints it to the screen via the compiler's\n+     * internal messager; otherwise, the method returns with no side effects.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb367b2809394dd132762f763480c822ea1d0248"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwODY5OQ==", "bodyText": "Am I missing where this is used in this file?", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r390008699", "createdAt": "2020-03-09T23:05:12Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -3,6 +3,8 @@\n // The imports from com.sun are all @jdk.Exported and therefore somewhat safe to use.\n // Try to avoid using non-@jdk.Exported classes.\n \n+import static javax.tools.Diagnostic.Kind.ERROR;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb367b2809394dd132762f763480c822ea1d0248"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "157f1bdf61f1d810843789ed6ad170a187a93e6b", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/157f1bdf61f1d810843789ed6ad170a187a93e6b", "committedDate": "2020-03-10T00:32:03Z", "message": "Clarify documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8779addaf5fa97dfff9a64f042c492130018f29", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/a8779addaf5fa97dfff9a64f042c492130018f29", "committedDate": "2020-03-10T00:39:23Z", "message": "Correct documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae756477f640f2492f1ded1df0694c7258fa2fd7", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/ae756477f640f2492f1ded1df0694c7258fa2fd7", "committedDate": "2020-03-10T00:47:08Z", "message": "Undo static imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4ddf371d307b3bc279093a5dc66420cd1d788f8", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/b4ddf371d307b3bc279093a5dc66420cd1d788f8", "committedDate": "2020-03-10T00:47:44Z", "message": "Merge branch 'remove-result-class-2' of github.com:mernst/checker-framework into remove-result-class-2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8057f49d8b65e9dd00d7fb8413a633f0827eb446", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/8057f49d8b65e9dd00d7fb8413a633f0827eb446", "committedDate": "2020-03-10T01:50:54Z", "message": "Change reference to Javadoc URL"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMDEwMjkx", "url": "https://github.com/typetools/checker-framework/pull/3134#pullrequestreview-372010291", "createdAt": "2020-03-10T14:35:16Z", "commit": {"oid": "8057f49d8b65e9dd00d7fb8413a633f0827eb446"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDozNToxNlrOF0RqAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDozNzoxOFrOF0RwVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM1OTU1NQ==", "bodyText": "I found a single method org.checkerframework.common.basetype.BaseTypeValidator#isValidType that possibly returns a non-singleton list. The default suggestion should be to use a DiagMessage instead and exceptional places might use a List<DiagMessage>. It seems rather confusing to always suggest List<DiagMessage>.", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r390359555", "createdAt": "2020-03-10T14:35:16Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/Result.java", "diffHunk": "@@ -19,7 +20,9 @@\n  * compiler interface.\n  *\n  * @see SourceChecker#report\n+ * @deprecated use {@code List<DiagMessage>} instead", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNTM3Nw=="}, "originalCommit": {"oid": "fb367b2809394dd132762f763480c822ea1d0248"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM2MTE3Mg==", "bodyText": "This method either returns a singleton list or the empty list, right?\nIf so, I would rather model it like FieldInvariants.isSuperInvariant and return DiagMessage or null.\nThis makes the code and logic simpler, and the Result to DiagMessage transition more uniform.", "url": "https://github.com/typetools/checker-framework/pull/3134#discussion_r390361172", "createdAt": "2020-03-10T14:37:18Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeValidator.java", "diffHunk": "@@ -112,41 +118,48 @@ protected boolean shouldCheckTopLevelDeclaredType(AnnotatedTypeMirror type, Tree\n      *   <li>These properties should also hold recursively for component types of arrays, as wells\n      *       as bounds of type variables and wildcards.\n      * </ol>\n+     *\n+     * @param qualifierHierarchy the qualifier hierachy\n+     * @param type the type to test\n+     * @return list of reasons the type is invalid, or empty list if the type is valid\n      */\n-    protected Result isValidType(QualifierHierarchy qualifierHierarchy, AnnotatedTypeMirror type) {\n-        SimpleAnnotatedTypeScanner<Result, Void> scanner =\n-                new SimpleAnnotatedTypeScanner<Result, Void>() {\n+    protected List<DiagMessage> isValidType(\n+            QualifierHierarchy qualifierHierarchy, AnnotatedTypeMirror type) {\n+        SimpleAnnotatedTypeScanner<List<DiagMessage>, Void> scanner =\n+                new SimpleAnnotatedTypeScanner<List<DiagMessage>, Void>() {\n                     @Override\n-                    protected Result defaultAction(AnnotatedTypeMirror type, Void aVoid) {\n+                    protected List<DiagMessage> defaultAction(\n+                            AnnotatedTypeMirror type, Void aVoid) {\n                         return isTopLevelValidType(qualifierHierarchy, type);\n                     }\n \n                     @Override\n-                    protected Result reduce(Result r1, Result r2) {\n-                        if (r1 == null) {\n-                            if (r2 == null) {\n-                                return Result.SUCCESS;\n-                            }\n-                            return r2;\n-                        } else if (r2 == null) {\n-                            return r1;\n-                        }\n-                        return r1.merge(r2);\n+                    protected List<DiagMessage> reduce(List<DiagMessage> r1, List<DiagMessage> r2) {\n+                        return DiagMessage.mergeLists(r1, r2);\n                     }\n                 };\n         return scanner.visit(type);\n     }\n \n-    /** Checks every property listed in {@link #isValidType}, but only for the top level type. */\n-    protected Result isTopLevelValidType(\n+    /**\n+     * Checks every property listed in {@link #isValidType}, but only for the top level type. If\n+     * successful, returns an empty list. If not successful, returns diagnostics.\n+     *\n+     * @param qualifierHierarchy the qualifier hierarchy\n+     * @param type the type to be checked\n+     * @return the diagnostics indicating failure, or an empty list if successful\n+     */\n+    protected List<DiagMessage> isTopLevelValidType(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8057f49d8b65e9dd00d7fb8413a633f0827eb446"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6f26a7d44475f17c58247b3afad127810c54300", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/c6f26a7d44475f17c58247b3afad127810c54300", "committedDate": "2020-03-10T15:23:54Z", "message": "Recommend DiagMessage over List<DiagMessage>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e654d96ad54bc51e854185612134236ff9306462", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/e654d96ad54bc51e854185612134236ff9306462", "committedDate": "2020-03-10T15:28:14Z", "message": "Explain return type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "680a7b5428895c3e688961797fd4fabe1affad5e", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/680a7b5428895c3e688961797fd4fabe1affad5e", "committedDate": "2020-03-10T15:31:00Z", "message": "Tweak comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMTc0ODY5", "url": "https://github.com/typetools/checker-framework/pull/3134#pullrequestreview-372174869", "createdAt": "2020-03-10T17:34:47Z", "commit": {"oid": "680a7b5428895c3e688961797fd4fabe1affad5e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3101, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}