{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2NTU1MzA3", "number": 4082, "title": "IllegalArgumentException on incremental build in IntelliJ 2020.3; fixed #4068", "bodyText": "Unwrapping of processing environment inspired by Lombok, but a bit more defensive... I included unwrapping for both IntelliJ and gradle incremental builds as it is the same problem in principle. I am unable to produce test - to set up build pipeline is out of my expertise :( But I tested that compilation worked in IntelliJ 2020.3 when using fixed processor.\nI ran into problem with automatic tests, as in my local build, I got reports about failed Optional tests - but this failure is replicable even on master and is not related to my modification", "createdAt": "2020-12-29T16:37:28Z", "url": "https://github.com/typetools/checker-framework/pull/4082", "merged": true, "mergeCommit": {"oid": "767bc5c2fb6a35446ab74fbd85d396b617d8ff81"}, "closed": true, "closedAt": "2020-12-30T22:32:26Z", "author": {"login": "MichalStehlikCz"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdq4L1iAH2gAyNTQ2NTU1MzA3Ojg1ZWQ2Mjc3ZTQwNTQ2NmQ1YjBiZWEwN2M3MDlmOThiYzRlMDlkY2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdrRCKyAFqTU2MDA5MjUzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "85ed6277e405466d5b0bea07c709f98bc4e09dcc", "author": {"user": {"login": "MichalStehlikCz", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/85ed6277e405466d5b0bea07c709f98bc4e09dcc", "committedDate": "2020-12-29T10:29:40Z", "message": "Unwrap ProcessingEnvironment if it is dynamic proxy created by IntellliJ"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "980cb5c3d419c579af219c8c15fafb184c57e420", "author": {"user": {"login": "MichalStehlikCz", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/980cb5c3d419c579af219c8c15fafb184c57e420", "committedDate": "2020-12-29T16:26:59Z", "message": "Unwrap processing environment for IntelliJ and gradle incremental build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e", "author": {"user": {"login": "MichalStehlikCz", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/8ef247eaa29eaf8308a9d94d680f31e944d9837e", "committedDate": "2020-12-29T17:13:31Z", "message": "Fix interned strings compared with equals warning from CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "602ccd1af93ee38bd210fe605353d3ba2b4f41d6", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/602ccd1af93ee38bd210fe605353d3ba2b4f41d6", "committedDate": "2020-12-30T01:41:58Z", "message": "Javadoc fixes: HTML use and tag style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3c2b8b49fcad11b6c0c66075b555c410d223ff2", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/a3c2b8b49fcad11b6c0c66075b555c410d223ff2", "committedDate": "2020-12-30T01:43:50Z", "message": "Add contributor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f516eefe6e744916c1958d6e984c444fa2dac9a", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/9f516eefe6e744916c1958d6e984c444fa2dac9a", "committedDate": "2020-12-30T01:48:00Z", "message": "Make error message more explicit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NzUzNjM0", "url": "https://github.com/typetools/checker-framework/pull/4082#pullrequestreview-559753634", "createdAt": "2020-12-30T01:25:55Z", "commit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMToyNTo1NVrOIMbjnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNjozM1rOIMb7zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwNTMwOQ==", "bodyText": "The result of getName() is not guaranteed to be interned, so use .equals().", "url": "https://github.com/typetools/checker-framework/pull/4082#discussion_r549905309", "createdAt": "2020-12-30T01:25:55Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -516,12 +519,94 @@\n     /** List of upstream checker names. Includes the current checker. */\n     protected List<@FullyQualifiedName String> upstreamCheckerNames;\n \n+    /**\n+     * Tries to unwrap ProcessingEnvironment from proxy in IntelliJ >=2020.3.\n+     *\n+     * @param envProxy is dynamic proxy wrapping processing environment\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapIntelliJ(Object envProxy) {\n+        InvocationHandler handler = Proxy.getInvocationHandler(envProxy);\n+        try {\n+            Field field = handler.getClass().getDeclaredField(\"val$delegateTo\");\n+            field.setAccessible(true);\n+            Object o = field.get(handler);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Gradle incremental processing unwrapping inspired by project Lombok.\n+     *\n+     * @param delegateClass is class in which we try to find delegate field\n+     * @param env is processing environment wrapper\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapGradle(\n+            Class<?> delegateClass, Object env) {\n+        try {\n+            Field field = delegateClass.getDeclaredField(\"delegate\");\n+            field.setAccessible(true);\n+            Object o = field.get(env);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * IntelliJ wraps processing environment in dynamic proxy to check for modifications done by\n+     * annotation processors. But lots of functionality both here and in AbstractTypeProcessor call\n+     * methods from javac that require processing environment to be\n+     * com.sun.tools.javac.processing.JavacProcessingEnvironment and fail on proxy - thus in case\n+     * proxy is used, we have to unwrap it.\n+     *\n+     * @param env is processing environment supplied to checker\n+     * @return unwrapped environment if it is dynamic proxy, created by IntelliJ; original value in\n+     *     all other cases\n+     */\n+    private static ProcessingEnvironment unwrapProcessingEnvironment(ProcessingEnvironment env) {\n+        // equality, not instanceof corresponds to test in Trees and JavacTask\n+        // comparison instead of equals is required by some tests in CheckerFramework CI\n+        if (env.getClass().getName()\n+                == \"com.sun.tools.javac.processing.JavacProcessingEnvironment\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwNjQzNA==", "bodyText": "envProxy has type ProcessingEnvironment.  Is there a reason you didn't declare it as such?\nI have the same question regarding unwrapGradle.  Also, for consistency I would give the formal parameters of the two methods the same name.", "url": "https://github.com/typetools/checker-framework/pull/4082#discussion_r549906434", "createdAt": "2020-12-30T01:32:53Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -516,12 +519,94 @@\n     /** List of upstream checker names. Includes the current checker. */\n     protected List<@FullyQualifiedName String> upstreamCheckerNames;\n \n+    /**\n+     * Tries to unwrap ProcessingEnvironment from proxy in IntelliJ >=2020.3.\n+     *\n+     * @param envProxy is dynamic proxy wrapping processing environment\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapIntelliJ(Object envProxy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwNjkyMA==", "bodyText": "I am having trouble understanding these two lines.  Could you please clarify?\n(I can't even tell whether this is two sentences or one; could you use capitalization and punctuation (a period at the end of the sentence) to help with that?)", "url": "https://github.com/typetools/checker-framework/pull/4082#discussion_r549906920", "createdAt": "2020-12-30T01:36:26Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -516,12 +519,94 @@\n     /** List of upstream checker names. Includes the current checker. */\n     protected List<@FullyQualifiedName String> upstreamCheckerNames;\n \n+    /**\n+     * Tries to unwrap ProcessingEnvironment from proxy in IntelliJ >=2020.3.\n+     *\n+     * @param envProxy is dynamic proxy wrapping processing environment\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapIntelliJ(Object envProxy) {\n+        InvocationHandler handler = Proxy.getInvocationHandler(envProxy);\n+        try {\n+            Field field = handler.getClass().getDeclaredField(\"val$delegateTo\");\n+            field.setAccessible(true);\n+            Object o = field.get(handler);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Gradle incremental processing unwrapping inspired by project Lombok.\n+     *\n+     * @param delegateClass is class in which we try to find delegate field\n+     * @param env is processing environment wrapper\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapGradle(\n+            Class<?> delegateClass, Object env) {\n+        try {\n+            Field field = delegateClass.getDeclaredField(\"delegate\");\n+            field.setAccessible(true);\n+            Object o = field.get(env);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * IntelliJ wraps processing environment in dynamic proxy to check for modifications done by\n+     * annotation processors. But lots of functionality both here and in AbstractTypeProcessor call\n+     * methods from javac that require processing environment to be\n+     * com.sun.tools.javac.processing.JavacProcessingEnvironment and fail on proxy - thus in case\n+     * proxy is used, we have to unwrap it.\n+     *\n+     * @param env is processing environment supplied to checker\n+     * @return unwrapped environment if it is dynamic proxy, created by IntelliJ; original value in\n+     *     all other cases\n+     */\n+    private static ProcessingEnvironment unwrapProcessingEnvironment(ProcessingEnvironment env) {\n+        // equality, not instanceof corresponds to test in Trees and JavacTask", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwNzA4OA==", "bodyText": "Could you clarify \"here\"?  I think it means in this class, but it might mean in this method or something else.", "url": "https://github.com/typetools/checker-framework/pull/4082#discussion_r549907088", "createdAt": "2020-12-30T01:37:31Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -516,12 +519,94 @@\n     /** List of upstream checker names. Includes the current checker. */\n     protected List<@FullyQualifiedName String> upstreamCheckerNames;\n \n+    /**\n+     * Tries to unwrap ProcessingEnvironment from proxy in IntelliJ >=2020.3.\n+     *\n+     * @param envProxy is dynamic proxy wrapping processing environment\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapIntelliJ(Object envProxy) {\n+        InvocationHandler handler = Proxy.getInvocationHandler(envProxy);\n+        try {\n+            Field field = handler.getClass().getDeclaredField(\"val$delegateTo\");\n+            field.setAccessible(true);\n+            Object o = field.get(handler);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Gradle incremental processing unwrapping inspired by project Lombok.\n+     *\n+     * @param delegateClass is class in which we try to find delegate field\n+     * @param env is processing environment wrapper\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapGradle(\n+            Class<?> delegateClass, Object env) {\n+        try {\n+            Field field = delegateClass.getDeclaredField(\"delegate\");\n+            field.setAccessible(true);\n+            Object o = field.get(env);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * IntelliJ wraps processing environment in dynamic proxy to check for modifications done by\n+     * annotation processors. But lots of functionality both here and in AbstractTypeProcessor call", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwNzMyMQ==", "bodyText": "Which checker is this supplied to?  Or do you mean to the Checker Framework?\nAlso, please don't use passive voice.  Indicate the actor if it is important, or don't mention it if it is not.", "url": "https://github.com/typetools/checker-framework/pull/4082#discussion_r549907321", "createdAt": "2020-12-30T01:38:54Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -516,12 +519,94 @@\n     /** List of upstream checker names. Includes the current checker. */\n     protected List<@FullyQualifiedName String> upstreamCheckerNames;\n \n+    /**\n+     * Tries to unwrap ProcessingEnvironment from proxy in IntelliJ >=2020.3.\n+     *\n+     * @param envProxy is dynamic proxy wrapping processing environment\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapIntelliJ(Object envProxy) {\n+        InvocationHandler handler = Proxy.getInvocationHandler(envProxy);\n+        try {\n+            Field field = handler.getClass().getDeclaredField(\"val$delegateTo\");\n+            field.setAccessible(true);\n+            Object o = field.get(handler);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Gradle incremental processing unwrapping inspired by project Lombok.\n+     *\n+     * @param delegateClass is class in which we try to find delegate field\n+     * @param env is processing environment wrapper\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapGradle(\n+            Class<?> delegateClass, Object env) {\n+        try {\n+            Field field = delegateClass.getDeclaredField(\"delegate\");\n+            field.setAccessible(true);\n+            Object o = field.get(env);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * IntelliJ wraps processing environment in dynamic proxy to check for modifications done by\n+     * annotation processors. But lots of functionality both here and in AbstractTypeProcessor call\n+     * methods from javac that require processing environment to be\n+     * com.sun.tools.javac.processing.JavacProcessingEnvironment and fail on proxy - thus in case\n+     * proxy is used, we have to unwrap it.\n+     *\n+     * @param env is processing environment supplied to checker", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwODY5OQ==", "bodyText": "Annotations are not needed on local variables.  Could you remove this one and the next few to make the code less cluttered?", "url": "https://github.com/typetools/checker-framework/pull/4082#discussion_r549908699", "createdAt": "2020-12-30T01:48:08Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -516,12 +519,94 @@\n     /** List of upstream checker names. Includes the current checker. */\n     protected List<@FullyQualifiedName String> upstreamCheckerNames;\n \n+    /**\n+     * Tries to unwrap ProcessingEnvironment from proxy in IntelliJ >=2020.3.\n+     *\n+     * @param envProxy is dynamic proxy wrapping processing environment\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapIntelliJ(Object envProxy) {\n+        InvocationHandler handler = Proxy.getInvocationHandler(envProxy);\n+        try {\n+            Field field = handler.getClass().getDeclaredField(\"val$delegateTo\");\n+            field.setAccessible(true);\n+            Object o = field.get(handler);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Gradle incremental processing unwrapping inspired by project Lombok.\n+     *\n+     * @param delegateClass is class in which we try to find delegate field\n+     * @param env is processing environment wrapper\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapGradle(\n+            Class<?> delegateClass, Object env) {\n+        try {\n+            Field field = delegateClass.getDeclaredField(\"delegate\");\n+            field.setAccessible(true);\n+            Object o = field.get(env);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * IntelliJ wraps processing environment in dynamic proxy to check for modifications done by\n+     * annotation processors. But lots of functionality both here and in AbstractTypeProcessor call\n+     * methods from javac that require processing environment to be\n+     * com.sun.tools.javac.processing.JavacProcessingEnvironment and fail on proxy - thus in case\n+     * proxy is used, we have to unwrap it.\n+     *\n+     * @param env is processing environment supplied to checker\n+     * @return unwrapped environment if it is dynamic proxy, created by IntelliJ; original value in\n+     *     all other cases\n+     */\n+    private static ProcessingEnvironment unwrapProcessingEnvironment(ProcessingEnvironment env) {\n+        // equality, not instanceof corresponds to test in Trees and JavacTask\n+        // comparison instead of equals is required by some tests in CheckerFramework CI\n+        if (env.getClass().getName()\n+                == \"com.sun.tools.javac.processing.JavacProcessingEnvironment\") {\n+            return env;\n+        }\n+        // IntelliJ >2020.3 wraps processing environment in dynamic proxy...\n+        if (Proxy.isProxyClass(env.getClass())) {\n+            @Nullable ProcessingEnvironment unwrapped = unwrapIntelliJ(env);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTUwMA==", "bodyText": "I suggest putting this test within unwrapIntelliJ, so that all logic related to IntelliJ proxies is together.", "url": "https://github.com/typetools/checker-framework/pull/4082#discussion_r549911500", "createdAt": "2020-12-30T02:06:33Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -516,12 +519,94 @@\n     /** List of upstream checker names. Includes the current checker. */\n     protected List<@FullyQualifiedName String> upstreamCheckerNames;\n \n+    /**\n+     * Tries to unwrap ProcessingEnvironment from proxy in IntelliJ >=2020.3.\n+     *\n+     * @param envProxy is dynamic proxy wrapping processing environment\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapIntelliJ(Object envProxy) {\n+        InvocationHandler handler = Proxy.getInvocationHandler(envProxy);\n+        try {\n+            Field field = handler.getClass().getDeclaredField(\"val$delegateTo\");\n+            field.setAccessible(true);\n+            Object o = field.get(handler);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Gradle incremental processing unwrapping inspired by project Lombok.\n+     *\n+     * @param delegateClass is class in which we try to find delegate field\n+     * @param env is processing environment wrapper\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapGradle(\n+            Class<?> delegateClass, Object env) {\n+        try {\n+            Field field = delegateClass.getDeclaredField(\"delegate\");\n+            field.setAccessible(true);\n+            Object o = field.get(env);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * IntelliJ wraps processing environment in dynamic proxy to check for modifications done by\n+     * annotation processors. But lots of functionality both here and in AbstractTypeProcessor call\n+     * methods from javac that require processing environment to be\n+     * com.sun.tools.javac.processing.JavacProcessingEnvironment and fail on proxy - thus in case\n+     * proxy is used, we have to unwrap it.\n+     *\n+     * @param env is processing environment supplied to checker\n+     * @return unwrapped environment if it is dynamic proxy, created by IntelliJ; original value in\n+     *     all other cases\n+     */\n+    private static ProcessingEnvironment unwrapProcessingEnvironment(ProcessingEnvironment env) {\n+        // equality, not instanceof corresponds to test in Trees and JavacTask\n+        // comparison instead of equals is required by some tests in CheckerFramework CI\n+        if (env.getClass().getName()\n+                == \"com.sun.tools.javac.processing.JavacProcessingEnvironment\") {\n+            return env;\n+        }\n+        // IntelliJ >2020.3 wraps processing environment in dynamic proxy...\n+        if (Proxy.isProxyClass(env.getClass())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b57202a02b9b9749c3d81cb7f1fd0fec30ea9269", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/b57202a02b9b9749c3d81cb7f1fd0fec30ea9269", "committedDate": "2020-12-30T02:08:48Z", "message": "Tweak comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "631b0fe40bde44b431b6836a3b627d7c9cc018a0", "author": {"user": {"login": "MichalStehlikCz", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/631b0fe40bde44b431b6836a3b627d7c9cc018a0", "committedDate": "2020-12-30T08:49:44Z", "message": "Use equality for string comparison (rollback Fix interned strings compared with equals warning from CI)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbb7d9f3920ebd934d76b69158bf6497d1e64776", "author": {"user": {"login": "MichalStehlikCz", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/bbb7d9f3920ebd934d76b69158bf6497d1e64776", "committedDate": "2020-12-30T08:58:05Z", "message": "Consistently use ProcessingEnvironment type and env parameter name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59325103b84f2af1377729c7af276d9cccffb760", "author": {"user": {"login": "MichalStehlikCz", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/59325103b84f2af1377729c7af276d9cccffb760", "committedDate": "2020-12-30T09:04:03Z", "message": "Adjusted comments to make it clearer what methods actually do"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e624d3dc63e2d603f9a8f50ca37aa30ae4d5e98a", "author": {"user": {"login": "MichalStehlikCz", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/e624d3dc63e2d603f9a8f50ca37aa30ae4d5e98a", "committedDate": "2020-12-30T09:10:09Z", "message": "Remove annotations on local variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f2a8cca497d92a1f2f7d61a9b2b81e528f79ba0", "author": {"user": {"login": "MichalStehlikCz", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/5f2a8cca497d92a1f2f7d61a9b2b81e528f79ba0", "committedDate": "2020-12-30T09:20:11Z", "message": "Remove unclear comment about source of processing environment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ce724bff34d44656dc2757edbc01fa6d6e0089d", "author": {"user": {"login": "MichalStehlikCz", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/4ce724bff34d44656dc2757edbc01fa6d6e0089d", "committedDate": "2020-12-30T09:27:25Z", "message": "Move dynamic proxy test to unwrapIntelliJ"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ebc1e2b28dc8124be85c30b8baa81beeb0537b0", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/2ebc1e2b28dc8124be85c30b8baa81beeb0537b0", "committedDate": "2020-12-30T15:23:48Z", "message": "Move code, plus tweaks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMDkyNTMy", "url": "https://github.com/typetools/checker-framework/pull/4082#pullrequestreview-560092532", "createdAt": "2020-12-30T15:26:44Z", "commit": {"oid": "2ebc1e2b28dc8124be85c30b8baa81beeb0537b0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3021, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}