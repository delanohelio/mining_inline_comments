{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5MDg2NTYy", "number": 3599, "title": "Restore ability to use unannotated stub file to override annotations in bytecode", "bodyText": "Fixes #3597, which was an unintended side-effect of #2871.\nThe actual fix is making the call to clearAnnotations in StubParser#annotate unconditional. Removing that code revealed some other problems, though, which this PR also contains fixes for.\nThe first other problem was that one of the tests for stub-based WPI (UsesAnonymous.java) failed with an extra override.param.invalid error. Examining the stub file made it clear that the generated stub was (mostly) correct, but that annotations that were actually present in the source code were being ignored (and it seems that the guard for the clearAnnotations call was a hack to avoid the problem), because they were printed as fully-qualified annotations. The stub parser, however, ignored any annotations that weren't imported directly. I therefore modified the stub parser to also read fully-qualified annotations in stub files.\nThat change fixed the initial failing test, but caused another WPI test case (MultiDimensionalArrays.java) to fail. Examining the generated stub files for that class made it clear that 3+ dimensional arrays were being printed incorrectly. The test hadn't failed before because the fully-qualified annotations weren't being used. I discovered that our belief about the order in which javac stores arrays was wrong; scene-lib and javac do actually store arrays in the same order. I'm not sure how we made that mistake. That allowed me to remove/simplify a bunch of code in SceneToStubWriter, though I did have to change the specification of formatArrayTypeImpl: it now only prints the \"array\" part of the type, and relies on formatArrayType to print the component type.", "createdAt": "2020-08-17T21:54:08Z", "url": "https://github.com/typetools/checker-framework/pull/3599", "merged": true, "mergeCommit": {"oid": "2680ed49e5c1bd8737603dbdfba4eb0586e01388"}, "closed": true, "closedAt": "2020-08-19T01:33:11Z", "author": {"login": "kelloggm"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc_1lLIgH2gAyNDY5MDg2NTYyOjAyYWQ1ZTFjMjNjZDFjZmIxOTlmZTFlYTI2YTNhZWZlOGZhMzA2Mzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAPIXegH2gAyNDY5MDg2NTYyOjg1M2UyMmNkN2VmYmMxN2UzNGEyOTNmMTY5ZWJiNTdjMzVlMDg1YzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "02ad5e1c23cd1cfb199fe1ea26a3aefe8fa30637", "author": {"user": {"login": "kelloggm", "name": "Martin Kellogg"}}, "url": "https://github.com/typetools/checker-framework/commit/02ad5e1c23cd1cfb199fe1ea26a3aefe8fa30637", "committedDate": "2020-08-17T17:08:53Z", "message": "failing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adec24fd1004ff7aae6f197dcd5658321d1f4b44", "author": {"user": {"login": "kelloggm", "name": "Martin Kellogg"}}, "url": "https://github.com/typetools/checker-framework/commit/adec24fd1004ff7aae6f197dcd5658321d1f4b44", "committedDate": "2020-08-17T21:42:15Z", "message": "fix 3597"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a09b4d5b52aa887805f467b634bc7ebee9432298", "author": {"user": {"login": "kelloggm", "name": "Martin Kellogg"}}, "url": "https://github.com/typetools/checker-framework/commit/a09b4d5b52aa887805f467b634bc7ebee9432298", "committedDate": "2020-08-17T21:43:59Z", "message": "formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5Njc5NjUx", "url": "https://github.com/typetools/checker-framework/pull/3599#pullrequestreview-469679651", "createdAt": "2020-08-18T17:35:08Z", "commit": {"oid": "a09b4d5b52aa887805f467b634bc7ebee9432298"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzozNTowOFrOHCfB1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzo0ODowMFrOHCfesg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM2NzU3Mw==", "bodyText": "This should be moved into getAnnotation.  Or is there some reason it can't be?", "url": "https://github.com/typetools/checker-framework/pull/3599#discussion_r472367573", "createdAt": "2020-08-18T17:35:08Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/StubParser.java", "diffHunk": "@@ -1204,6 +1185,18 @@ private void annotate(AnnotatedTypeMirror type, List<AnnotationExpr> annotations\n         }\n         for (AnnotationExpr annotation : annotations) {\n             AnnotationMirror annoMirror = getAnnotation(annotation, allStubAnnotations);\n+            if (annoMirror == null) {\n+                // If the annotation was not imported, then #getAllStubAnnotations does", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a09b4d5b52aa887805f467b634bc7ebee9432298"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM2OTAwMA==", "bodyText": "Just call TypeElement classElement = elements.getTypeElement(typeName); directly so that the more sensible warning will be issued below.  (Make sure to document why getTypeElement isn't called.)", "url": "https://github.com/typetools/checker-framework/pull/3599#discussion_r472369000", "createdAt": "2020-08-18T17:37:41Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/StubParser.java", "diffHunk": "@@ -1204,6 +1185,18 @@ private void annotate(AnnotatedTypeMirror type, List<AnnotationExpr> annotations\n         }\n         for (AnnotationExpr annotation : annotations) {\n             AnnotationMirror annoMirror = getAnnotation(annotation, allStubAnnotations);\n+            if (annoMirror == null) {\n+                // If the annotation was not imported, then #getAllStubAnnotations does\n+                // not add it to the allStubAnnotations field. This code compensates for\n+                // that deficiency by adding the annotation when it is encountered (i.e. here).\n+                TypeElement annoTypeElt = getTypeElement(annotation.getNameAsString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a09b4d5b52aa887805f467b634bc7ebee9432298"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3MTk2NQ==", "bodyText": "In several places you deleted simple, instead, could you please change it to both fully-qualified and simple names.  That's important information.", "url": "https://github.com/typetools/checker-framework/pull/3599#discussion_r472371965", "createdAt": "2020-08-18T17:42:51Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/StubParser.java", "diffHunk": "@@ -142,9 +142,8 @@\n     private final Elements elements;\n \n     /**\n-     * The set of annotations found in the stub file. Keys are simple (unqualified) names. (This may\n-     * be a problem in the unlikely occurrence that a type-checker supports two annotations with the\n-     * same simple name.)\n+     * The set of annotations found in the stub file. Keys are names. There are two entries for each", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a09b4d5b52aa887805f467b634bc7ebee9432298"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3NDk2Mg==", "bodyText": "The changes in this file should be merged to master in a separate commit. Can you open a separate PR with these changes?   I'll merge that PR first, so it's fine to leave these changes in this PR.  Also, can you add a test case for this that is unrelated to the other changes in this file?", "url": "https://github.com/typetools/checker-framework/pull/3599#discussion_r472374962", "createdAt": "2020-08-18T17:48:00Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/common/wholeprograminference/SceneToStubWriter.java", "diffHunk": "@@ -173,79 +173,29 @@ private static String formatAnnotations(Collection<? extends Annotation> annos)\n      * @return the type formatted to be written to Java source code, followed by a space character\n      */\n     private static String formatArrayType(ATypeElement scenelibRep, ArrayType javacRep) {\n-        int levels =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a09b4d5b52aa887805f467b634bc7ebee9432298"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21dd6a71cf97e174afcc84e33e1a809e2108bf30", "author": {"user": {"login": "kelloggm", "name": "Martin Kellogg"}}, "url": "https://github.com/typetools/checker-framework/commit/21dd6a71cf97e174afcc84e33e1a809e2108bf30", "committedDate": "2020-08-18T19:01:52Z", "message": "fixes from code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5ODEwODYy", "url": "https://github.com/typetools/checker-framework/pull/3599#pullrequestreview-469810862", "createdAt": "2020-08-18T20:34:57Z", "commit": {"oid": "21dd6a71cf97e174afcc84e33e1a809e2108bf30"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "853e22cd7efbc17e34a293f169ebb57c35e085c3", "author": {"user": {"login": "kelloggm", "name": "Martin Kellogg"}}, "url": "https://github.com/typetools/checker-framework/commit/853e22cd7efbc17e34a293f169ebb57c35e085c3", "committedDate": "2020-08-18T22:54:57Z", "message": "Merge branch 'master' of github.com:typetools/checker-framework into stub-overwrite-bug"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2618, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}