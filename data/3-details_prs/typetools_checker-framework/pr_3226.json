{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4NDU1MDgx", "number": 3226, "title": "Make all the obj parameters in Field @NonNull.", "bodyText": "Related PRs:\n\nplume-lib/options#54\ncodespecs/daikon#232\ntypetools/jdk#45\nplume-lib/reflection-util#51\nplume-lib/plume-util#53", "createdAt": "2020-04-04T02:38:21Z", "url": "https://github.com/typetools/checker-framework/pull/3226", "merged": true, "mergeCommit": {"oid": "f725374f4303a6ad13dfccaa1c1a336383248a7e"}, "closed": true, "closedAt": "2020-04-08T17:01:25Z", "author": {"login": "xingweitian"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcULfG1AH2gAyMzk4NDU1MDgxOjhjMWE0MDBjMWEwZWNlMWNiMDE4ZTI0ZGZjOTM0NGVkZmE3MWEyODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVq0uvAFqTM5MDE1NTYzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8c1a400c1a0ece1cb018e24dfc9344edfa71a281", "author": {"user": {"login": "xingweitian", "name": "Weitian Xing"}}, "url": "https://github.com/typetools/checker-framework/commit/8c1a400c1a0ece1cb018e24dfc9344edfa71a281", "committedDate": "2020-04-04T01:47:30Z", "message": "Make all the obj parameters in Field @NonNull."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0783e32167a8c26035dfc80fe1e150cd534bd872", "author": {"user": {"login": "xingweitian", "name": "Weitian Xing"}}, "url": "https://github.com/typetools/checker-framework/commit/0783e32167a8c26035dfc80fe1e150cd534bd872", "committedDate": "2020-04-04T02:34:45Z", "message": "Update jdkShaHash."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NzEyODEy", "url": "https://github.com/typetools/checker-framework/pull/3226#pullrequestreview-387712812", "createdAt": "2020-04-04T16:17:36Z", "commit": {"oid": "0783e32167a8c26035dfc80fe1e150cd534bd872"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNjoxNzozN1rOGAy6zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNjoxNzozN1rOGAy6zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ4NzQzOA==", "bodyText": "Please also remove the @UnknownInitialization. We also don't want the top initialization qualifier, for the same reasons as why we don't want @Nullable.", "url": "https://github.com/typetools/checker-framework/pull/3226#discussion_r403487438", "createdAt": "2020-04-04T16:17:37Z", "author": {"login": "wmdietl"}, "path": "checker/jdk/nullness/src/java/lang/reflect/Field.java", "diffHunk": "@@ -21,25 +21,27 @@ protected Field() {}\n   @Pure public int hashCode() { throw new RuntimeException(\"skeleton method\"); }\n   @SideEffectFree public String toString() { throw new RuntimeException(\"skeleton method\"); }\n   @SideEffectFree public String toGenericString() { throw new RuntimeException(\"skeleton method\"); }\n-  // These Object formal parameters can be null if the field is static.\n-  @SideEffectFree public @Nullable Object get(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public boolean getBoolean(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public byte getByte(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public char getChar(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public short getShort(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public int getInt(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public long getLong(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public float getFloat(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public double getDouble(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void set(@UnknownInitialization @Nullable Object obj, @Nullable Object value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setBoolean(@UnknownInitialization @Nullable Object obj, boolean value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setByte(@UnknownInitialization @Nullable Object obj, byte value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setChar(@UnknownInitialization @Nullable Object obj, char value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setShort(@UnknownInitialization @Nullable Object obj, short value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setInt(@UnknownInitialization @Nullable Object obj, int value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setLong(@UnknownInitialization @Nullable Object obj, long value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setFloat(@UnknownInitialization @Nullable Object obj, float value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setDouble(@UnknownInitialization @Nullable Object obj, double value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  // These Object formal parameters can be null if the field is static, or can be non-null if the\n+  // field is field instance. We don't know which. To prevent a possible NullPointerException,\n+  // the Nullness Checker should conservatively issue a warning whenever null is passed.\n+  @SideEffectFree public @Nullable Object get(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0783e32167a8c26035dfc80fe1e150cd534bd872"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed08af3287ce34268a07c3321df638d99f0c5994", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/ed08af3287ce34268a07c3321df638d99f0c5994", "committedDate": "2020-04-05T00:31:07Z", "message": "Merge ../checker-framework-branch-master into jdk-update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NzcwOTI4", "url": "https://github.com/typetools/checker-framework/pull/3226#pullrequestreview-387770928", "createdAt": "2020-04-05T00:42:56Z", "commit": {"oid": "ed08af3287ce34268a07c3321df638d99f0c5994"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMDo0Mjo1NlrOGA59FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMDo0NDo0MlrOGA6ACw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYwMjcwOQ==", "bodyText": "It won't lead to an exception, that is true. But it would allow reading information from an object that is still being initialized.\nSo then the return type should also be @UnknownInitialization, shouldn't it?\nIt seems easier to normally only allow fully initialized objects and require a suppression if the receiver is not.", "url": "https://github.com/typetools/checker-framework/pull/3226#discussion_r403602709", "createdAt": "2020-04-05T00:42:56Z", "author": {"login": "wmdietl"}, "path": "checker/jdk/nullness/src/java/lang/reflect/Field.java", "diffHunk": "@@ -21,25 +21,27 @@ protected Field() {}\n   @Pure public int hashCode() { throw new RuntimeException(\"skeleton method\"); }\n   @SideEffectFree public String toString() { throw new RuntimeException(\"skeleton method\"); }\n   @SideEffectFree public String toGenericString() { throw new RuntimeException(\"skeleton method\"); }\n-  // These Object formal parameters can be null if the field is static.\n-  @SideEffectFree public @Nullable Object get(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public boolean getBoolean(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public byte getByte(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public char getChar(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public short getShort(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public int getInt(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public long getLong(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public float getFloat(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public double getDouble(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void set(@UnknownInitialization @Nullable Object obj, @Nullable Object value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setBoolean(@UnknownInitialization @Nullable Object obj, boolean value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setByte(@UnknownInitialization @Nullable Object obj, byte value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setChar(@UnknownInitialization @Nullable Object obj, char value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setShort(@UnknownInitialization @Nullable Object obj, short value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setInt(@UnknownInitialization @Nullable Object obj, int value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setLong(@UnknownInitialization @Nullable Object obj, long value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setFloat(@UnknownInitialization @Nullable Object obj, float value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setDouble(@UnknownInitialization @Nullable Object obj, double value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  // These Object formal parameters can be null if the field is static, or can be non-null if the\n+  // field is field instance. We don't know which. To prevent a possible NullPointerException,\n+  // the Nullness Checker should conservatively issue a warning whenever null is passed.\n+  @SideEffectFree public @Nullable Object get(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ4NzQzOA=="}, "originalCommit": {"oid": "0783e32167a8c26035dfc80fe1e150cd534bd872"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYwMzQ2Nw==", "bodyText": "Related to the previous comment: allowing the value to be @Nullable, but not @UnknownInitialization, seems inconsistent.\nI would change this to fully-initialized and non-null values only.\nOtherwise, reflection can be used to set a field that is declared @NonNull to null, without a single warning that needs to be suppressed.", "url": "https://github.com/typetools/checker-framework/pull/3226#discussion_r403603467", "createdAt": "2020-04-05T00:44:42Z", "author": {"login": "wmdietl"}, "path": "checker/jdk/nullness/src/java/lang/reflect/Field.java", "diffHunk": "@@ -21,25 +21,27 @@ protected Field() {}\n   @Pure public int hashCode() { throw new RuntimeException(\"skeleton method\"); }\n   @SideEffectFree public String toString() { throw new RuntimeException(\"skeleton method\"); }\n   @SideEffectFree public String toGenericString() { throw new RuntimeException(\"skeleton method\"); }\n-  // These Object formal parameters can be null if the field is static.\n-  @SideEffectFree public @Nullable Object get(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public boolean getBoolean(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public byte getByte(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public char getChar(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public short getShort(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public int getInt(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public long getLong(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public float getFloat(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public double getDouble(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void set(@UnknownInitialization @Nullable Object obj, @Nullable Object value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setBoolean(@UnknownInitialization @Nullable Object obj, boolean value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setByte(@UnknownInitialization @Nullable Object obj, byte value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setChar(@UnknownInitialization @Nullable Object obj, char value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setShort(@UnknownInitialization @Nullable Object obj, short value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setInt(@UnknownInitialization @Nullable Object obj, int value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setLong(@UnknownInitialization @Nullable Object obj, long value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setFloat(@UnknownInitialization @Nullable Object obj, float value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setDouble(@UnknownInitialization @Nullable Object obj, double value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  // These Object formal parameters can be null if the field is static, or can be non-null if the\n+  // field is field instance. We don't know which. To prevent a possible NullPointerException,\n+  // the Nullness Checker should conservatively issue a warning whenever null is passed.\n+  @SideEffectFree public @Nullable Object get(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public boolean getBoolean(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public byte getByte(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public char getChar(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public short getShort(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public int getInt(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public long getLong(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public float getFloat(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public double getDouble(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  public void set(@UnknownInitialization Object obj, @Nullable Object value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed08af3287ce34268a07c3321df638d99f0c5994"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2403284d768519f3a0afc7dfbbee75298a86fe8d", "author": {"user": {"login": "xingweitian", "name": "Weitian Xing"}}, "url": "https://github.com/typetools/checker-framework/commit/2403284d768519f3a0afc7dfbbee75298a86fe8d", "committedDate": "2020-04-05T03:28:42Z", "message": "Remove @UnknownInitialization from all the get methods."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a4575edaee8a835ee2be1e69966068599255381", "author": {"user": {"login": "xingweitian", "name": "Weitian Xing"}}, "url": "https://github.com/typetools/checker-framework/commit/3a4575edaee8a835ee2be1e69966068599255381", "committedDate": "2020-04-05T03:29:41Z", "message": "Merge remote-tracking branch 'origin/jdk-update' into jdk-update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b90271d29561897918cffee64ebe749ed2cfd39", "author": {"user": {"login": "xingweitian", "name": "Weitian Xing"}}, "url": "https://github.com/typetools/checker-framework/commit/6b90271d29561897918cffee64ebe749ed2cfd39", "committedDate": "2020-04-05T04:26:45Z", "message": "Update jdkShaHash."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d4554092a4c7222a1af781906828e0c1339dee6", "author": {"user": {"login": "xingweitian", "name": "Weitian Xing"}}, "url": "https://github.com/typetools/checker-framework/commit/7d4554092a4c7222a1af781906828e0c1339dee6", "committedDate": "2020-04-05T17:30:36Z", "message": "Merge remote-tracking branch 'typetools/master' into jdk-update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3ODQ0OTk3", "url": "https://github.com/typetools/checker-framework/pull/3226#pullrequestreview-387844997", "createdAt": "2020-04-05T18:07:46Z", "commit": {"oid": "6b90271d29561897918cffee64ebe749ed2cfd39"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0efa818c6f3079ed273df375584e956ac7bd0b45", "author": {"user": {"login": "xingweitian", "name": "Weitian Xing"}}, "url": "https://github.com/typetools/checker-framework/commit/0efa818c6f3079ed273df375584e956ac7bd0b45", "committedDate": "2020-04-05T19:49:43Z", "message": "Resolve comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74a42fefdb6a0ab0a382933548a81c322fc76c0a", "author": {"user": {"login": "xingweitian", "name": "Weitian Xing"}}, "url": "https://github.com/typetools/checker-framework/commit/74a42fefdb6a0ab0a382933548a81c322fc76c0a", "committedDate": "2020-04-05T20:20:57Z", "message": "Update jdkShaHash."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "398303cfd4ce6ea9cf8ed18a7f525ada41a7fefd", "author": {"user": {"login": "xingweitian", "name": "Weitian Xing"}}, "url": "https://github.com/typetools/checker-framework/commit/398303cfd4ce6ea9cf8ed18a7f525ada41a7fefd", "committedDate": "2020-04-05T21:56:20Z", "message": "Adapt to the latest change."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3d3f7b897838ea1bd9f616b8328743afe6939f7", "author": {"user": {"login": "xingweitian", "name": "Weitian Xing"}}, "url": "https://github.com/typetools/checker-framework/commit/c3d3f7b897838ea1bd9f616b8328743afe6939f7", "committedDate": "2020-04-06T02:46:28Z", "message": "Tweaks the wording."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "483074de83c57ef6a32b050244be3cc899a0b591", "author": {"user": {"login": "wmdietl", "name": "Werner Dietl"}}, "url": "https://github.com/typetools/checker-framework/commit/483074de83c57ef6a32b050244be3cc899a0b591", "committedDate": "2020-04-07T00:57:43Z", "message": "Merge branch 'jdk-update' of github.com:xingweitian/checker-framework into jdk-update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cd0a126b5fc8b17a2fd1a0c1f804681b1309d75", "author": {"user": {"login": "wmdietl", "name": "Werner Dietl"}}, "url": "https://github.com/typetools/checker-framework/commit/3cd0a126b5fc8b17a2fd1a0c1f804681b1309d75", "committedDate": "2020-04-07T01:06:38Z", "message": "Small wording tweaks."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7473a452d6dcc35b385ee4322532759f436d7ac", "author": {"user": {"login": "xingweitian", "name": "Weitian Xing"}}, "url": "https://github.com/typetools/checker-framework/commit/c7473a452d6dcc35b385ee4322532759f436d7ac", "committedDate": "2020-04-07T01:28:52Z", "message": "Merge remote-tracking branch 'typetools/master' into jdk-update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9485cb44cdceafd0d61eab6b4443e4b1a3d1b4af", "author": {"user": {"login": "xingweitian", "name": "Weitian Xing"}}, "url": "https://github.com/typetools/checker-framework/commit/9485cb44cdceafd0d61eab6b4443e4b1a3d1b4af", "committedDate": "2020-04-07T02:12:07Z", "message": "Reflect the changes in jdk11 to jdk8."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f21f881e46ee1fc29a9ed25e308ed15274eb1dfc", "author": {"user": {"login": "xingweitian", "name": "Weitian Xing"}}, "url": "https://github.com/typetools/checker-framework/commit/f21f881e46ee1fc29a9ed25e308ed15274eb1dfc", "committedDate": "2020-04-07T02:40:50Z", "message": "Update jdkShaHash."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6515f4b0c5a363548abdd99277ffe83e4900da53", "author": {"user": {"login": "xingweitian", "name": "Weitian Xing"}}, "url": "https://github.com/typetools/checker-framework/commit/6515f4b0c5a363548abdd99277ffe83e4900da53", "committedDate": "2020-04-07T15:55:15Z", "message": "Update interning annotation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6891c953ed8d447c7a99e0ab6328bbcaa2d6fa17", "author": {"user": {"login": "xingweitian", "name": "Weitian Xing"}}, "url": "https://github.com/typetools/checker-framework/commit/6891c953ed8d447c7a99e0ab6328bbcaa2d6fa17", "committedDate": "2020-04-07T15:55:28Z", "message": "Merge remote-tracking branch 'typetools/master' into jdk-update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f94aac2a0ddf723c255f7fb85dae6fd740be31b", "author": {"user": {"login": "xingweitian", "name": "Weitian Xing"}}, "url": "https://github.com/typetools/checker-framework/commit/0f94aac2a0ddf723c255f7fb85dae6fd740be31b", "committedDate": "2020-04-07T16:21:22Z", "message": "Update jdkShaHash."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5dee86d38588e36f20c1f909a6a05e0fc8e6db61", "author": {"user": {"login": "xingweitian", "name": "Weitian Xing"}}, "url": "https://github.com/typetools/checker-framework/commit/5dee86d38588e36f20c1f909a6a05e0fc8e6db61", "committedDate": "2020-04-07T19:25:45Z", "message": "Suppress interning warning."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTkzMjg0", "url": "https://github.com/typetools/checker-framework/pull/3226#pullrequestreview-389993284", "createdAt": "2020-04-08T13:50:21Z", "commit": {"oid": "5dee86d38588e36f20c1f909a6a05e0fc8e6db61"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMTU1NjM4", "url": "https://github.com/typetools/checker-framework/pull/3226#pullrequestreview-390155638", "createdAt": "2020-04-08T16:52:06Z", "commit": {"oid": "5dee86d38588e36f20c1f909a6a05e0fc8e6db61"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2941, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}