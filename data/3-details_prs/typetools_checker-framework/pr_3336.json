{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NjMxNDM5", "number": 3336, "title": "Support unique classes (Fixes #3313)", "bodyText": "The Aliasing Checker gives \"unique.leaked\" for local variables only when they are explicitly annotated. This is because of the calling of hasExplicitAnnotation() type method in AliasingVisitor.java, in the canbeLeaked() method. By annotating class Data with @unique, the local variables start as @MaybeAliased but eventually get refined to @unique, due to the upper bound. The class objects are unique but since they are not explicitly annotated, they bypass the canbeLeaked() method and don't report errors. Removing this explicit requirement fixes the issue, and gives the expected output without giving any side effects (under my testing).\nThis PR should be merged along with the annotated JDK pull request.\n(typetools/jdk#57)\nFixes #3313.", "createdAt": "2020-05-28T17:32:19Z", "url": "https://github.com/typetools/checker-framework/pull/3336", "merged": true, "mergeCommit": {"oid": "c44ded45be4a22a40a996b1d1a9b433d60c49d64"}, "closed": true, "closedAt": "2020-07-21T23:07:54Z", "author": {"login": "aditya3434"}, "timelineItems": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcln5LhAH2gAyNDI0NjMxNDM5OmZkNTM2YzRkZTc1NWRjMWM1M2FkYmNhOWFkMmI2ODRlOWIzOWEwNTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3OhdWAFqTQ1Mjg4OTQ4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fd536c4de755dc1c53adbca9ad2b684e9b39a055", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/fd536c4de755dc1c53adbca9ad2b684e9b39a055", "committedDate": "2020-05-28T06:30:02Z", "message": "Fix for feature request #3313 in Aliasing Checker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "126014d85e00bb2d2b28f29093a4962c2f396929", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/126014d85e00bb2d2b28f29093a4962c2f396929", "committedDate": "2020-05-28T06:53:33Z", "message": "Fix for explicit annotation check in Aliasing Checker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2b91eb9dabe2957301cd8826c4aad8ad979c9da", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/b2b91eb9dabe2957301cd8826c4aad8ad979c9da", "committedDate": "2020-05-28T16:36:29Z", "message": "Adding test cases for removal of explicit annotation check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b756c0e75b3f54615f5f86c8a096789e296ee06", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/1b756c0e75b3f54615f5f86c8a096789e296ee06", "committedDate": "2020-05-29T14:36:01Z", "message": "Ensuring all framework tests are passed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4edfc68f7855f851755ff9037e318df62592a1c0", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/4edfc68f7855f851755ff9037e318df62592a1c0", "committedDate": "2020-05-29T16:05:36Z", "message": "Formatting changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/dde03eff890f26f6266d4480150f8590fbf72a61", "committedDate": "2020-06-03T16:53:16Z", "message": "Merge ../checker-framework-branch-master into 3313-explicit-annotation-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22462e0c3106a97353ababcbcb9c547d061f9809", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/22462e0c3106a97353ababcbcb9c547d061f9809", "committedDate": "2020-06-05T10:48:41Z", "message": "Fix for feature request #3313 in Aliasing Checker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "017082b1f6ac5598dfe80fad535acccebde22901", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/017082b1f6ac5598dfe80fad535acccebde22901", "committedDate": "2020-06-05T10:48:41Z", "message": "Revert \"Fix for feature request #3313 in Aliasing Checker\"\n\nThis reverts commit fd536c4de755dc1c53adbca9ad2b684e9b39a055."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1Njc2ODQw", "url": "https://github.com/typetools/checker-framework/pull/3336#pullrequestreview-425676840", "createdAt": "2020-06-05T23:21:01Z", "commit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMzoyMTowMVrOGf_xqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMzoyNDowN1rOGf_0Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMzk0Nw==", "bodyText": "You should try to avoid operations on strings. Is there no TypeKind to compare against?", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r436203947", "createdAt": "2020-06-05T23:21:01Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +271,13 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isArray = type.getUnderlyingType().getKind().toString().equalsIgnoreCase(\"array\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNDExOQ==", "bodyText": "What is the motivation for this special logic? You should explain the logic here or at least in the PR description.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r436204119", "createdAt": "2020-06-05T23:21:50Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +271,13 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isArray = type.getUnderlyingType().getKind().toString().equalsIgnoreCase(\"array\");\n+        boolean isNull = exp.getKind() == Kind.NULL_LITERAL;\n+        if (type.getUnderlyingType().toString().startsWith(\"java.lang\") || isArray || isNull) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNDQ5OQ==", "bodyText": "Is the type of the left-hand side important? Can you add another method that does\nObject check2(Data p) { return p; }\nwhich I guess should also give a unique.leaked error.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r436204499", "createdAt": "2020-06-05T23:23:42Z", "author": {"login": "wmdietl"}, "path": "framework/tests/aliasing/ExplicitAnnotationTest.java", "diffHunk": "@@ -0,0 +1,13 @@\n+import org.checkerframework.common.aliasing.qual.Unique;\n+\n+@Unique class Data {\n+    @SuppressWarnings(\"unique.leaked\")\n+    Data() {} // All objects of Data are now @Unique\n+}\n+\n+class Demo {\n+    void check(Data p) { // p is @Unique Data Object\n+        // :: error: (unique.leaked)\n+        Data y = p; // @Unique p is leaked", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNDU4Mw==", "bodyText": "Also, do add tests that cover such special logic, in at least a few important cases.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r436204583", "createdAt": "2020-06-05T23:24:07Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +271,13 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isArray = type.getUnderlyingType().getKind().toString().equalsIgnoreCase(\"array\");\n+        boolean isNull = exp.getKind() == Kind.NULL_LITERAL;\n+        if (type.getUnderlyingType().toString().startsWith(\"java.lang\") || isArray || isNull) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNDExOQ=="}, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b366093df5bdd65651b309bce609b429d00bd73", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/4b366093df5bdd65651b309bce609b429d00bd73", "committedDate": "2020-06-06T10:42:36Z", "message": "Merge branch 'master' into 3313-explicit-annotation-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa032466041da8dc09f29495e779f6c70835b57d", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/fa032466041da8dc09f29495e779f6c70835b57d", "committedDate": "2020-06-06T10:50:57Z", "message": "Merge branch '3313-explicit-annotation-fix' of https://github.com/aditya3434/checker-framework into 3313-explicit-annotation-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97ff12d4b6dbfbfcb62d7d52815f1c90ea6900b9", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/97ff12d4b6dbfbfcb62d7d52815f1c90ea6900b9", "committedDate": "2020-06-11T07:53:26Z", "message": "Fix for feature request #3313 in Aliasing Checker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "629a1a971c44ee9e2b268854f3767b91b28c2da0", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/629a1a971c44ee9e2b268854f3767b91b28c2da0", "committedDate": "2020-06-11T07:53:26Z", "message": "Revert \"Fix for feature request #3313 in Aliasing Checker\"\n\nThis reverts commit fd536c4de755dc1c53adbca9ad2b684e9b39a055."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTgwODgw", "url": "https://github.com/typetools/checker-framework/pull/3336#pullrequestreview-430980880", "createdAt": "2020-06-15T20:46:37Z", "commit": {"oid": "fa032466041da8dc09f29495e779f6c70835b57d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDo0NjozN1rOGkCJLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDo1OTozMVrOGkCjOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzNzAzOA==", "bodyText": "Ping.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r440437038", "createdAt": "2020-06-15T20:46:37Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +271,13 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isArray = type.getUnderlyingType().getKind().toString().equalsIgnoreCase(\"array\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMzk0Nw=="}, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0MzUzNg==", "bodyText": "We do not want different behavior for built-in classes and user-defined classes. The same logic should be applied to all source code, regardless of who wrote the code.\nThere is a difference between classes String and Data in these two examples.\nIn String the default constructor is annotated as returning a unique object. The class declaration is not annotated. Therefore, it is fine in the test case to have a non-unique String reference.\nOn the other hand class Data in this new test case is annotated as @Unique requiring that only @Unique references exist.\nSo your check should be for that difference between the two classes.\nAlso can you move the annotations from framework/tests/aliasing/stubfile.astub into typetools/jdk#52?", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r440443536", "createdAt": "2020-06-15T20:59:13Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +271,13 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isArray = type.getUnderlyingType().getKind().toString().equalsIgnoreCase(\"array\");\n+        boolean isNull = exp.getKind() == Kind.NULL_LITERAL;\n+        if (type.getUnderlyingType().toString().startsWith(\"java.lang\") || isArray || isNull) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNDExOQ=="}, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0MzcwNQ==", "bodyText": "Ping.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r440443705", "createdAt": "2020-06-15T20:59:31Z", "author": {"login": "wmdietl"}, "path": "framework/tests/aliasing/ExplicitAnnotationTest.java", "diffHunk": "@@ -0,0 +1,13 @@\n+import org.checkerframework.common.aliasing.qual.Unique;\n+\n+@Unique class Data {\n+    @SuppressWarnings(\"unique.leaked\")\n+    Data() {} // All objects of Data are now @Unique\n+}\n+\n+class Demo {\n+    void check(Data p) { // p is @Unique Data Object\n+        // :: error: (unique.leaked)\n+        Data y = p; // @Unique p is leaked", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNDQ5OQ=="}, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25b602a276a6d40e8510aeab62e952b6a1c2b44e", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/25b602a276a6d40e8510aeab62e952b6a1c2b44e", "committedDate": "2020-06-16T11:49:22Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91d83722b66b2cd69d9e92eb37485deb219a3fe7", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/91d83722b66b2cd69d9e92eb37485deb219a3fe7", "committedDate": "2020-06-16T12:43:09Z", "message": "Merge branch 'master' into 3313-explicit-annotation-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb424fd817490cc389323adf5d721d39b0ad8533", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/eb424fd817490cc389323adf5d721d39b0ad8533", "committedDate": "2020-06-17T16:20:58Z", "message": "Fix for feature request #3313 in Aliasing Checker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3240948aa8891c016b04e627e15f0505cfaf18f", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/c3240948aa8891c016b04e627e15f0505cfaf18f", "committedDate": "2020-06-17T16:20:58Z", "message": "Revert \"Fix for feature request #3313 in Aliasing Checker\"\n\nThis reverts commit fd536c4de755dc1c53adbca9ad2b684e9b39a055."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "941cab0d71c66e682d99347b2604d104331d34b8", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/941cab0d71c66e682d99347b2604d104331d34b8", "committedDate": "2020-06-17T16:20:58Z", "message": "Fix for feature request #3313 in Aliasing Checker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d71f60820a8e44e21b9f1cc542cb798958006dc3", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/d71f60820a8e44e21b9f1cc542cb798958006dc3", "committedDate": "2020-06-17T16:20:58Z", "message": "Revert \"Fix for feature request #3313 in Aliasing Checker\"\n\nThis reverts commit fd536c4de755dc1c53adbca9ad2b684e9b39a055."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53a6c12b02f9cbde8742bf4e1f69f2139eed1b94", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/53a6c12b02f9cbde8742bf4e1f69f2139eed1b94", "committedDate": "2020-06-19T16:01:19Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff1b9e49a634ae727c379633220cf251ec7a60aa", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/ff1b9e49a634ae727c379633220cf251ec7a60aa", "committedDate": "2020-06-19T16:03:50Z", "message": "Merge branch 'master' into 3313-explicit-annotation-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "135b2667e2033910907b7ff55d8d96f82ead0267", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/135b2667e2033910907b7ff55d8d96f82ead0267", "committedDate": "2020-06-19T16:28:53Z", "message": "Resolving review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db149b9707d2a84ce919275f79429afc4720f958", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/db149b9707d2a84ce919275f79429afc4720f958", "committedDate": "2020-06-19T19:38:09Z", "message": "Removing redundant variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/e64f002019f132d05ab4d96c1493a327bf1710de", "committedDate": "2020-06-19T20:40:04Z", "message": "Modifying documentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NDgyNzQ2", "url": "https://github.com/typetools/checker-framework/pull/3336#pullrequestreview-437482746", "createdAt": "2020-06-25T13:17:00Z", "commit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzoxNzowMFrOGo6NWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoyMDo0OVrOGo8_lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU0OTkxMw==", "bodyText": "Do not star import.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r445549913", "createdAt": "2020-06-25T13:17:00Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -1,17 +1,11 @@\n package org.checkerframework.common.aliasing;\n \n-import com.sun.source.tree.ExpressionTree;\n-import com.sun.source.tree.MethodInvocationTree;\n-import com.sun.source.tree.MethodTree;\n-import com.sun.source.tree.NewArrayTree;\n-import com.sun.source.tree.ThrowTree;\n-import com.sun.source.tree.Tree;\n+import com.sun.source.tree.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3NDQ0Mw==", "bodyText": "The caller already computed type and you don't seem to use exp in this method. So why not just pass the type as parameter?", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r445574443", "createdAt": "2020-06-25T13:51:47Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +265,37 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueClassFlag = isUniqueClass(exp);\n+        if (isUniqueClassFlag) {\n+            return type.hasAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        } else {\n+            return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        }\n+    }\n+\n+    /**\n+     * Returns true if class of tree expression {@code exp} has type {@code @Unique}\n+     *\n+     * @param exp the Tree to check\n+     * @return boolean true if class if unique and false otherwise\n+     */\n+    private boolean isUniqueClass(Tree exp) {\n+        AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4NjE5OA==", "bodyText": "It might be easier as if (el == null) { return false; } and then the same for annoMirrors.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r445586198", "createdAt": "2020-06-25T14:08:11Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +265,37 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueClassFlag = isUniqueClass(exp);\n+        if (isUniqueClassFlag) {\n+            return type.hasAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        } else {\n+            return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        }\n+    }\n+\n+    /**\n+     * Returns true if class of tree expression {@code exp} has type {@code @Unique}\n+     *\n+     * @param exp the Tree to check\n+     * @return boolean true if class if unique and false otherwise\n+     */\n+    private boolean isUniqueClass(Tree exp) {\n+        AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n+        Element el = types.asElement(type.getUnderlyingType());\n+        if (el != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MDU3Ng==", "bodyText": "Again, don't use Strings for things like this. Can you use AnnotationUtils.containsSameByClass https://github.com/typetools/checker-framework/blob/master/javacutil/src/main/java/org/checkerframework/javacutil/AnnotationUtils.java#L230 ? Then you don't need the for loop.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r445590576", "createdAt": "2020-06-25T14:14:04Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +265,37 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueClassFlag = isUniqueClass(exp);\n+        if (isUniqueClassFlag) {\n+            return type.hasAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        } else {\n+            return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        }\n+    }\n+\n+    /**\n+     * Returns true if class of tree expression {@code exp} has type {@code @Unique}\n+     *\n+     * @param exp the Tree to check\n+     * @return boolean true if class if unique and false otherwise\n+     */\n+    private boolean isUniqueClass(Tree exp) {\n+        AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n+        Element el = types.asElement(type.getUnderlyingType());\n+        if (el != null) {\n+            Set<AnnotationMirror> annoMirrors = atypeFactory.getDeclAnnotations(el);\n+            if (annoMirrors != null) {\n+                for (AnnotationMirror mirror : annoMirrors) {\n+                    if (mirror.getAnnotationType()\n+                            .asElement()\n+                            .getSimpleName()\n+                            .contentEquals(\"Unique\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MjE4Ng==", "bodyText": "I'm not sure how you mean this. Does Object z = p; not raise an error? Shouldn't it?", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r445592186", "createdAt": "2020-06-25T14:16:11Z", "author": {"login": "wmdietl"}, "path": "framework/tests/aliasing/ExplicitAnnotationTest.java", "diffHunk": "@@ -0,0 +1,13 @@\n+import org.checkerframework.common.aliasing.qual.Unique;\n+\n+@Unique class Data {\n+    @SuppressWarnings(\"unique.leaked\")\n+    Data() {} // All objects of Data are now @Unique\n+}\n+\n+class Demo {\n+    void check(Data p) { // p is @Unique Data Object\n+        // :: error: (unique.leaked)\n+        Data y = p; // @Unique p is leaked", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNDQ5OQ=="}, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MzEwMw==", "bodyText": "Why do you need the type.hasAnnotation again, if you already know that isUniqueClass?", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r445593103", "createdAt": "2020-06-25T14:17:24Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +265,37 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueClassFlag = isUniqueClass(exp);\n+        if (isUniqueClassFlag) {\n+            return type.hasAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MzM1Nw==", "bodyText": "Remove the Flag part. Notice the style for the other is variables.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r445593357", "createdAt": "2020-06-25T14:17:44Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +265,37 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueClassFlag = isUniqueClass(exp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NDQ1Ng==", "bodyText": "Could this just be return !isMethodInvocation && !isNewClass && (isUniqueClass || type.hasExplicitAnnotation(Unique.class));", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r445594456", "createdAt": "2020-06-25T14:19:18Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +265,37 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueClassFlag = isUniqueClass(exp);\n+        if (isUniqueClassFlag) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NDkxNw==", "bodyText": "Maybe extract the (isUniqueClass || type.hasExplicitAnnotation(Unique.class) into a separate local and document why that is the logic.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r445594917", "createdAt": "2020-06-25T14:19:58Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +265,37 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueClassFlag = isUniqueClass(exp);\n+        if (isUniqueClassFlag) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NDQ1Ng=="}, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NTU0MA==", "bodyText": "You should also update the javadoc with the change in behavior.\nDo you understand what canBeLeaked expresses? The documentation is rather unclear.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r445595540", "createdAt": "2020-06-25T14:20:49Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -271,7 +265,37 @@ private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64f002019f132d05ab4d96c1493a327bf1710de"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "167d9cc2e165a54dcfb83f1895a9b54832b3d381", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/167d9cc2e165a54dcfb83f1895a9b54832b3d381", "committedDate": "2020-06-27T15:34:49Z", "message": "Merge branch 'master' into 3313-explicit-annotation-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf45fd642ed3dcfc7a47359153931db8dfcefb07", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/cf45fd642ed3dcfc7a47359153931db8dfcefb07", "committedDate": "2020-06-27T15:43:16Z", "message": "Making requested changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3d2479f72bb0993524035f5935ed6ad4eb7b93e", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/f3d2479f72bb0993524035f5935ed6ad4eb7b93e", "committedDate": "2020-06-27T17:43:37Z", "message": "Modifying documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b60d8267437cd403164c6d5b0cf5e057e3e2453", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/9b60d8267437cd403164c6d5b0cf5e057e3e2453", "committedDate": "2020-06-28T13:34:22Z", "message": "Deleting stubfile.astub"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1335ba2f18da1ca50c052d8a6774edce0f586cd4", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/1335ba2f18da1ca50c052d8a6774edce0f586cd4", "committedDate": "2020-06-28T14:42:40Z", "message": "Removing stubfile.astub references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1da41037e4707a913529a9fdd48ca5f522787325", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/1da41037e4707a913529a9fdd48ca5f522787325", "committedDate": "2020-07-11T09:28:32Z", "message": "Merge branch 'master' into 3313-explicit-annotation-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b191e9ee37e0d31cdc3da69747cdd69162627cd", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/7b191e9ee37e0d31cdc3da69747cdd69162627cd", "committedDate": "2020-07-13T10:36:10Z", "message": "Merge branch 'master' into 3313-explicit-annotation-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd1fe05b76132550a695141b826c6c0a70edf06c", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/bd1fe05b76132550a695141b826c6c0a70edf06c", "committedDate": "2020-07-15T07:35:43Z", "message": "Merge branch 'master' into 3313-explicit-annotation-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37976e86f016234919218e0413132c858505b064", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/37976e86f016234919218e0413132c858505b064", "committedDate": "2020-07-17T06:00:53Z", "message": "Merge branch 'master' into 3313-explicit-annotation-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "152389766e5bce9d266c1662e184c9768ea44c29", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/152389766e5bce9d266c1662e184c9768ea44c29", "committedDate": "2020-07-18T06:53:33Z", "message": "Merge branch 'master' into 3313-explicit-annotation-fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNjI5Njk4", "url": "https://github.com/typetools/checker-framework/pull/3336#pullrequestreview-451629698", "createdAt": "2020-07-20T13:56:33Z", "commit": {"oid": "152389766e5bce9d266c1662e184c9768ea44c29"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzo1NjozM1rOG0N_RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxOToxOTozNVrOG0b7uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQwODMyNQ==", "bodyText": "Do not use wildcard imports.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r457408325", "createdAt": "2020-07-20T13:56:33Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -10,8 +10,8 @@\n import com.sun.source.tree.VariableTree;\n import com.sun.source.util.TreePath;\n import java.util.List;\n-import javax.lang.model.element.ExecutableElement;\n-import javax.lang.model.element.VariableElement;\n+import java.util.Set;\n+import javax.lang.model.element.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "152389766e5bce9d266c1662e184c9768ea44c29"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2Nzk1Nw==", "bodyText": "The summary should end with a period.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r457567957", "createdAt": "2020-07-20T17:16:41Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -263,15 +264,39 @@ protected void checkThisOrSuperConstructorCall(\n \n     /**\n      * Returns true if {@code exp} has type {@code @Unique} and is not a method invocation nor a new\n-     * class expression.\n+     * class expression. It checks whether the tree expression is unique by either checking for an\n+     * explicit annotation or checking whether the class of the tree expression {@code exp} has type\n+     * {@code @Unique}\n      *\n      * @param exp the Tree to check\n      */\n     private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueType = (isUniqueClass(type) || type.hasExplicitAnnotation(Unique.class));\n+        return isUniqueType && !isMethodInvocation && !isNewClass;\n+    }\n+\n+    /**\n+     * Returns true if class of annotated type {@code type} has annotation {@code @Unique}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "152389766e5bce9d266c1662e184c9768ea44c29"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzMzgwMA==", "bodyText": "The outer parenthesis aren't necessary.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r457633800", "createdAt": "2020-07-20T19:14:02Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -263,15 +264,39 @@ protected void checkThisOrSuperConstructorCall(\n \n     /**\n      * Returns true if {@code exp} has type {@code @Unique} and is not a method invocation nor a new\n-     * class expression.\n+     * class expression. It checks whether the tree expression is unique by either checking for an\n+     * explicit annotation or checking whether the class of the tree expression {@code exp} has type\n+     * {@code @Unique}\n      *\n      * @param exp the Tree to check\n      */\n     private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueType = (isUniqueClass(type) || type.hasExplicitAnnotation(Unique.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "152389766e5bce9d266c1662e184c9768ea44c29"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzNjA5OA==", "bodyText": "Maybe use: Return true if the class declaration for annotated type ...", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r457636098", "createdAt": "2020-07-20T19:18:19Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/aliasing/AliasingVisitor.java", "diffHunk": "@@ -263,15 +264,39 @@ protected void checkThisOrSuperConstructorCall(\n \n     /**\n      * Returns true if {@code exp} has type {@code @Unique} and is not a method invocation nor a new\n-     * class expression.\n+     * class expression. It checks whether the tree expression is unique by either checking for an\n+     * explicit annotation or checking whether the class of the tree expression {@code exp} has type\n+     * {@code @Unique}\n      *\n      * @param exp the Tree to check\n      */\n     private boolean canBeLeaked(Tree exp) {\n         AnnotatedTypeMirror type = atypeFactory.getAnnotatedType(exp);\n         boolean isMethodInvocation = exp.getKind() == Kind.METHOD_INVOCATION;\n         boolean isNewClass = exp.getKind() == Kind.NEW_CLASS;\n-        return type.hasExplicitAnnotation(Unique.class) && !isMethodInvocation && !isNewClass;\n+        boolean isUniqueType = (isUniqueClass(type) || type.hasExplicitAnnotation(Unique.class));\n+        return isUniqueType && !isMethodInvocation && !isNewClass;\n+    }\n+\n+    /**\n+     * Returns true if class of annotated type {@code type} has annotation {@code @Unique}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2Nzk1Nw=="}, "originalCommit": {"oid": "152389766e5bce9d266c1662e184c9768ea44c29"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzNjc5Mg==", "bodyText": "Ok, can you expand this test case with the Object local variable and the expected error.\nThen file an issue that shows the problem with the return version.", "url": "https://github.com/typetools/checker-framework/pull/3336#discussion_r457636792", "createdAt": "2020-07-20T19:19:35Z", "author": {"login": "wmdietl"}, "path": "framework/tests/aliasing/ExplicitAnnotationTest.java", "diffHunk": "@@ -0,0 +1,13 @@\n+import org.checkerframework.common.aliasing.qual.Unique;\n+\n+@Unique class Data {\n+    @SuppressWarnings(\"unique.leaked\")\n+    Data() {} // All objects of Data are now @Unique\n+}\n+\n+class Demo {\n+    void check(Data p) { // p is @Unique Data Object\n+        // :: error: (unique.leaked)\n+        Data y = p; // @Unique p is leaked", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNDQ5OQ=="}, "originalCommit": {"oid": "dde03eff890f26f6266d4480150f8590fbf72a61"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79f35f1e341595575ab57dbe256670cd7863eb14", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/79f35f1e341595575ab57dbe256670cd7863eb14", "committedDate": "2020-07-21T06:13:30Z", "message": "Merge branch 'master' into 3313-explicit-annotation-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6e67cc336dfff814dd8c6f916cc610479274639", "author": {"user": {"login": "aditya3434", "name": null}}, "url": "https://github.com/typetools/checker-framework/commit/f6e67cc336dfff814dd8c6f916cc610479274639", "committedDate": "2020-07-21T06:33:59Z", "message": "Making requested changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyODg5NDg3", "url": "https://github.com/typetools/checker-framework/pull/3336#pullrequestreview-452889487", "createdAt": "2020-07-21T23:07:08Z", "commit": {"oid": "f6e67cc336dfff814dd8c6f916cc610479274639"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2799, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}