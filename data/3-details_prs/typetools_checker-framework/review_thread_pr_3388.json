{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1OTg1Nzcx", "number": 3388, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNDo1ODozM1rOEG_a5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDoyNDoyMFrOEIkmeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzY1OTkwOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNDo1ODozM1rOGmIDJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNDo1ODozM1rOGmIDJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYzMDk1MQ==", "bodyText": "This does't seem like the right advice.\nIf there is no @SuppressWarningsPrefix annotation, then the implementation chooses a checker name.\nI think the problem here is that the checker override getSuppressWarningsPrefixes incorrectly, and the message should say that the checker should either override it correctly, or not override it.", "url": "https://github.com/typetools/checker-framework/pull/3388#discussion_r442630951", "createdAt": "2020-06-19T04:58:33Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -2023,22 +1913,21 @@ public boolean shouldSuppressWarnings(Object src, String errKey) {\n     /**\n      * Determines whether all the warnings pertaining to a given tree should be suppressed. Returns\n      * true if the tree is within the scope of a @SuppressWarnings annotation, one of whose values\n-     * suppresses the checker's warnings. The list of keys that suppress a checker's warnings is\n-     * provided by the {@link SourceChecker#getSuppressWarningsKeys} method.\n+     * suppresses the checker's warnings.\n      *\n      * @param tree the tree that might be a source of a warning\n      * @param errKey the error key the checker is emitting\n      * @return true if no warning should be emitted for the given tree because it is contained by a\n      *     declaration with an appropriately-valued {@literal @}SuppressWarnings annotation; false\n      *     otherwise\n      */\n-    // Public so it can be called from a few places in\n-    // org.checkerframework.framework.flow.CFAbstractTransfer\n     public boolean shouldSuppressWarnings(Tree tree, String errKey) {\n-        // Don't suppress warnings if this checker provides no key to do so.\n-        Collection<String> checkerKeys = this.getSuppressWarningsKeys();\n-        if (checkerKeys.isEmpty()) {\n-            return false;\n+\n+        Collection<String> prefixes = getSuppressWarningsPrefixes();\n+        if (prefixes.isEmpty()\n+                || (prefixes.contains(SUPPRESS_ALL_PREFIX) && prefixes.size() == 1)) {\n+            throw new BugInCF(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e08292241563edce4aa025136018953f225a96b0"}, "originalPosition": 448}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzY2NTM3OnYy", "diffSide": "LEFT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTowMjoxM1rOGmIGgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTowMjoxM1rOGmIGgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYzMTgxMQ==", "bodyText": "The use of Arrays.setAll and a lambda is shorter than this implementation and could be used here.\nMy preference would be to retain the arrayToLowerCase abstraction, though, because its purpose is obvious from its name, whereas I had to read the Arrays.setAll line each time I saw it to understand what it does.  Using the method is also shorter in the client.  Defining the method takes more characters than are saved at the client, but it's more important that clients are short.\nAlternately, we could remove the undocumented behavior of lowercasing user-written @SuppressWarnings for the user.", "url": "https://github.com/typetools/checker-framework/pull/3388#discussion_r442631811", "createdAt": "2020-06-19T05:02:13Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -2430,19 +2426,6 @@ private void logBugInCF(BugInCF ce) {\n         printMessage(msg.toString());\n     }\n \n-    /**\n-     * Side-effects the array to make each string lowercase, then returns the array.\n-     *\n-     * @param a an array of strings\n-     * @return {@code a}, but each element has been lowercased\n-     */\n-    private static String[] arrayToLowerCase(String[] a) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e08292241563edce4aa025136018953f225a96b0"}, "originalPosition": 691}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzY3MzQxOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTowNzo0NVrOGmILjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTowNzo0NVrOGmILjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYzMzEwMA==", "bodyText": "The implementations of\nSourceChecker.shouldSuppressWarningStringSuppressKey\nSourceChecker.warnUnneededSuppressions\nare very similar.\nEither abstract out common logic, or eliminate one of these two methods.\n(Note that there are some undesirable differences, such as the logic for permitting a user-written messagekey to be a substring of a full Checker Framework messagekey.)", "url": "https://github.com/typetools/checker-framework/pull/3388#discussion_r442633100", "createdAt": "2020-06-19T05:07:45Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1790,27 +1775,27 @@ protected void warnUnneededSuppressions() {\n \n         Set<Element> elementsSuppress = new HashSet<>(this.elementsWithSuppressedWarnings);\n         this.elementsWithSuppressedWarnings.clear();\n-        Set<String> checkerKeys = new HashSet<>(getSuppressWarningsKeys());\n+        Set<String> prefixes = new HashSet<>(getSuppressWarningsPrefixes());\n         Set<String> errorKeys = new HashSet<>(messagesProperties.stringPropertyNames());\n-        warnUnneededSuppressions(elementsSuppress, checkerKeys, errorKeys);\n+        warnUnneededSuppressions(elementsSuppress, prefixes, errorKeys);\n         getVisitor().treesWithSuppressWarnings.clear();\n     }\n \n     /**\n      * Issues a warning about any {@code @SuppressWarnings} that isn't used by this checker, but\n-     * contains a key that would suppress a warning from this checker.\n+     * contains a string that would suppress a warning from this checker.\n      *\n      * @param elementsSuppress elements with a {@code @SuppressWarnings} that actually suppressed a\n      *     warning\n-     * @param checkerKeys suppress warning keys that suppress any warning from this checker\n-     * @param errorKeys error keys that can be issued by this checker\n+     * @param prefixes Suppresswarnings prefixes that suppress any warning from this checker\n+     * @param allErrorKeys all error keys that can be issued by this checker\n      */\n     protected void warnUnneededSuppressions(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e08292241563edce4aa025136018953f225a96b0"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzY3NDc4OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTowODo0NFrOGmIMaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTowODo0NFrOGmIMaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYzMzMyMA==", "bodyText": "The implementations of\nSourceChecker.shouldSuppressWarningStringSuppressKey\nSourceChecker.warnUnneededSuppressions\nare very similar.\nEither abstract out common logic, or eliminate one of these two methods.\n(Note that there are some undesirable differences, such as the logic for permitting a user-written messagekey to be a substring of a full Checker Framework messagekey.)", "url": "https://github.com/typetools/checker-framework/pull/3388#discussion_r442633320", "createdAt": "2020-06-19T05:08:44Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -2154,24 +2041,115 @@ public boolean shouldSuppressWarnings(@Nullable Element elt, String errKey) {\n             return false;\n         }\n \n-        if (elt == null) {\n-            return false;\n+        if (shouldSuppressWarningStringSuppressKey(\n+                getSuppressWarningsStringsFromOption(), errKey)) {\n+            return true;\n         }\n \n-        if (checkSuppressWarnings(elt.getAnnotation(SuppressWarnings.class), errKey)) {\n-            if (hasOption(\"warnUnneededSuppressions\")) {\n-                elementsWithSuppressedWarnings.add(elt);\n+        while (elt != null) {\n+            SuppressWarnings suppressWarningsAnno = elt.getAnnotation(SuppressWarnings.class);\n+            if (suppressWarningsAnno != null) {\n+                String[] suppressWarningStrings = suppressWarningsAnno.value();\n+                Arrays.setAll(suppressWarningStrings, i -> suppressWarningStrings[i].toLowerCase());\n+                if (shouldSuppressWarningStringSuppressKey(suppressWarningStrings, errKey)) {\n+                    if (hasOption(\"warnUnneededSuppressions\")) {\n+                        elementsWithSuppressedWarnings.add(elt);\n+                    }\n+                    return true;\n+                }\n             }\n-            return true;\n+            if (isAnnotatedForThisCheckerOrUpstreamChecker(elt)) {\n+                // Return false immediately. Do NOT check for AnnotatedFor in the\n+                // enclosing elements, because they may not have an @AnnotatedFor.\n+                return false;\n+            }\n+            elt = elt.getEnclosingElement();\n         }\n+        return false;\n+    }\n \n-        if (isAnnotatedForThisCheckerOrUpstreamChecker(elt)) {\n-            // Return false immediately. Do NOT check for AnnotatedFor in the\n-            // enclosing elements, because they may not have an @AnnotatedFor.\n+    /**\n+     * Determines whether an error (whose message key is {@code messageKey}) should be suppressed.\n+     * It is suppressed if any of the given SuppressWarnings strings suppresses it.\n+     *\n+     * <p>A SuppressWarnings string may be of the following pattern:\n+     *\n+     * <ol>\n+     *   <li>{@code \"prefix\"}, where prefix is a SuppressWarnings prefix, as specified by {@link\n+     *       #getSuppressWarningsPrefixes()}. For example, {@code \"nullness\"} and {@code\n+     *       \"initialization\"} for the Nullness Checker, {@code \"regex\"} for the Regex Checker.\n+     *   <li>{@code \"partial-message-key\"}, where partial-message-key is a prefix or suffix of the\n+     *       message key that it may suppress. So \"generic.argument\", would suppress any errors a\n+     *       message key that contains to generic.argument.\n+     *   <li>{@code \"prefix:partial-message-key}, where the prefix and partial-message-key is as\n+     *       above. So \"nullness:generic.argument\", would suppress any errors in the Nullness\n+     *       Checker with a message key that contains to generic.argument.\n+     * </ol>\n+     *\n+     * {@code \"allcheckers\"} is a prefix that suppresses a warning from any checker. {@code \"all\"}\n+     * is a partial-message-key that suppresses a warning with any message key.\n+     *\n+     * <p>If {@code -ArequirePrefixInWarningSuppressions}, then {@code prefix} and {@code\n+     * prefix:partial-message-key} are the only SuppressWarnings strings that have an effect.\n+     *\n+     * @param suppressWarningStrings the SuppressWarnings strings. May be null, in which case this\n+     *     method returns false.\n+     * @param messageKey the message key of the error the checker is emitting; a lowercase string,\n+     *     without any \"checkername:\" prefix\n+     * @return true if one of the {@code suppressWarningStrings} suppresses the error\n+     */\n+    private boolean shouldSuppressWarningStringSuppressKey(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e08292241563edce4aa025136018953f225a96b0"}, "originalPosition": 549}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDIzMTg4OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDoyMToyOFrOGonXmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDoyMToyOFrOGonXmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0MTI0MQ==", "bodyText": "How about renaming this to just \"shouldSuppress\" or to some other shorter name?  I find the current name a bit unwieldy, and it doesn't seem to convey more information than the shorter one.  Also, this method is not really about just keys as the method name implies.\nI would rename the other overload as well.", "url": "https://github.com/typetools/checker-framework/pull/3388#discussion_r445241241", "createdAt": "2020-06-25T00:21:28Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -2151,24 +2016,133 @@ public boolean shouldSuppressWarnings(@Nullable Element elt, String errKey) {\n             return false;\n         }\n \n-        if (elt == null) {\n-            return false;\n+        if (shouldSuppressWarningsStringSuppressKey(\n+                errKey, getSuppressWarningsStringsFromOption())) {\n+            return true;\n         }\n \n-        if (checkSuppressWarnings(elt.getAnnotation(SuppressWarnings.class), errKey)) {\n-            if (hasOption(\"warnUnneededSuppressions\")) {\n-                elementsWithSuppressedWarnings.add(elt);\n+        while (elt != null) {\n+            SuppressWarnings suppressWarningsAnno = elt.getAnnotation(SuppressWarnings.class);\n+            if (suppressWarningsAnno != null) {\n+                String[] suppressWarningsStrings = suppressWarningsAnno.value();\n+                Arrays.setAll(\n+                        suppressWarningsStrings, i -> suppressWarningsStrings[i].toLowerCase());\n+                if (shouldSuppressWarningsStringSuppressKey(errKey, suppressWarningsStrings)) {\n+                    if (hasOption(\"warnUnneededSuppressions\")) {\n+                        elementsWithSuppressedWarnings.add(elt);\n+                    }\n+                    return true;\n+                }\n             }\n-            return true;\n+            if (isAnnotatedForThisCheckerOrUpstreamChecker(elt)) {\n+                // Return false immediately. Do NOT check for AnnotatedFor in the\n+                // enclosing elements, because they may not have an @AnnotatedFor.\n+                return false;\n+            }\n+            elt = elt.getEnclosingElement();\n         }\n+        return false;\n+    }\n \n-        if (isAnnotatedForThisCheckerOrUpstreamChecker(elt)) {\n-            // Return false immediately. Do NOT check for AnnotatedFor in the\n-            // enclosing elements, because they may not have an @AnnotatedFor.\n+    /**\n+     * Determines whether an error (whose message key is {@code messageKey}) should be suppressed.\n+     * It is suppressed if any of the given SuppressWarnings strings suppresses it.\n+     *\n+     * <p>A SuppressWarnings string may be of the following pattern:\n+     *\n+     * <ol>\n+     *   <li>{@code \"prefix\"}, where prefix is a SuppressWarnings prefix, as specified by {@link\n+     *       #getSuppressWarningsPrefixes()}. For example, {@code \"nullness\"} and {@code\n+     *       \"initialization\"} for the Nullness Checker, {@code \"regex\"} for the Regex Checker.\n+     *   <li>{@code \"partial-message-key\"}, where partial-message-key is a prefix or suffix of the\n+     *       message key that it may suppress. So \"generic.argument\" would suppress any errors whose\n+     *       message key contains \"generic.argument\".\n+     *   <li>{@code \"prefix:partial-message-key}, where the prefix and partial-message-key is as\n+     *       above. So \"nullness:generic.argument\", would suppress any errors in the Nullness\n+     *       Checker with a message key that contains \"generic.argument\".\n+     * </ol>\n+     *\n+     * {@code \"allcheckers\"} is a prefix that suppresses a warning from any checker. {@code \"all\"}\n+     * is a partial-message-key that suppresses a warning with any message key.\n+     *\n+     * <p>If the {@code -ArequirePrefixInWarningSuppressions} command-line argument was supplied,\n+     * then {@code \"partial-message-key\"} has no effect; {@code \"prefix\"} and {@code\n+     * \"prefix:partial-message-key\"} are the only SuppressWarnings strings that have an effect.\n+     *\n+     * @param messageKey the message key of the error the checker is emitting; a lowercase string,\n+     *     without any \"checkername:\" prefix\n+     * @param suppressWarningsStrings the SuppressWarnings strings that are in effect. May be null,\n+     *     in which case this method returns false.\n+     * @return true if an element of {@code suppressWarningsStrings} suppresses the error\n+     */\n+    private boolean shouldSuppressWarningsStringSuppressKey(\n+            String messageKey, String @Nullable ... suppressWarningsStrings) {\n+        Set<String> prefixes = this.getSuppressWarningsPrefixes();\n+        return shouldSuppressWarningsStringSuppressKey(\n+                prefixes, messageKey, suppressWarningsStrings);\n+    }\n+\n+    /**\n+     * See {@link #shouldSuppressWarningsStringSuppressKey(String, String...)}\n+     *\n+     * @param prefixes the SuppressWarnings prefixes used by this checker\n+     * @param messageKey the message key of the error the checker is emitting; a lowercase string,\n+     *     without any \"checkername:\" prefix\n+     * @param suppressWarningsStrings the SuppressWarnings strings that are in effect. May be null,\n+     *     in which case this method returns false.\n+     * @return true if one of the {@code suppressWarningsStrings} suppresses the error\n+     */\n+    private boolean shouldSuppressWarningsStringSuppressKey(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbedb9fff145419edc809bd607fdff2411acd44a"}, "originalPosition": 563}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDIzMzMwOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDoyMjoxNVrOGonYcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDoyMjoxNVrOGonYcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0MTQ1Nw==", "bodyText": "I don't see any client that makes a varargs call to this method.  How about changing ... to [] (also in the other overload).\nAfter doing that, would it make sense to put the array as the first argument to both variants of the call?  That seems a bit more logical to me, and makes the two overloads a bit more consistent.", "url": "https://github.com/typetools/checker-framework/pull/3388#discussion_r445241457", "createdAt": "2020-06-25T00:22:15Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -2151,24 +2016,133 @@ public boolean shouldSuppressWarnings(@Nullable Element elt, String errKey) {\n             return false;\n         }\n \n-        if (elt == null) {\n-            return false;\n+        if (shouldSuppressWarningsStringSuppressKey(\n+                errKey, getSuppressWarningsStringsFromOption())) {\n+            return true;\n         }\n \n-        if (checkSuppressWarnings(elt.getAnnotation(SuppressWarnings.class), errKey)) {\n-            if (hasOption(\"warnUnneededSuppressions\")) {\n-                elementsWithSuppressedWarnings.add(elt);\n+        while (elt != null) {\n+            SuppressWarnings suppressWarningsAnno = elt.getAnnotation(SuppressWarnings.class);\n+            if (suppressWarningsAnno != null) {\n+                String[] suppressWarningsStrings = suppressWarningsAnno.value();\n+                Arrays.setAll(\n+                        suppressWarningsStrings, i -> suppressWarningsStrings[i].toLowerCase());\n+                if (shouldSuppressWarningsStringSuppressKey(errKey, suppressWarningsStrings)) {\n+                    if (hasOption(\"warnUnneededSuppressions\")) {\n+                        elementsWithSuppressedWarnings.add(elt);\n+                    }\n+                    return true;\n+                }\n             }\n-            return true;\n+            if (isAnnotatedForThisCheckerOrUpstreamChecker(elt)) {\n+                // Return false immediately. Do NOT check for AnnotatedFor in the\n+                // enclosing elements, because they may not have an @AnnotatedFor.\n+                return false;\n+            }\n+            elt = elt.getEnclosingElement();\n         }\n+        return false;\n+    }\n \n-        if (isAnnotatedForThisCheckerOrUpstreamChecker(elt)) {\n-            // Return false immediately. Do NOT check for AnnotatedFor in the\n-            // enclosing elements, because they may not have an @AnnotatedFor.\n+    /**\n+     * Determines whether an error (whose message key is {@code messageKey}) should be suppressed.\n+     * It is suppressed if any of the given SuppressWarnings strings suppresses it.\n+     *\n+     * <p>A SuppressWarnings string may be of the following pattern:\n+     *\n+     * <ol>\n+     *   <li>{@code \"prefix\"}, where prefix is a SuppressWarnings prefix, as specified by {@link\n+     *       #getSuppressWarningsPrefixes()}. For example, {@code \"nullness\"} and {@code\n+     *       \"initialization\"} for the Nullness Checker, {@code \"regex\"} for the Regex Checker.\n+     *   <li>{@code \"partial-message-key\"}, where partial-message-key is a prefix or suffix of the\n+     *       message key that it may suppress. So \"generic.argument\" would suppress any errors whose\n+     *       message key contains \"generic.argument\".\n+     *   <li>{@code \"prefix:partial-message-key}, where the prefix and partial-message-key is as\n+     *       above. So \"nullness:generic.argument\", would suppress any errors in the Nullness\n+     *       Checker with a message key that contains \"generic.argument\".\n+     * </ol>\n+     *\n+     * {@code \"allcheckers\"} is a prefix that suppresses a warning from any checker. {@code \"all\"}\n+     * is a partial-message-key that suppresses a warning with any message key.\n+     *\n+     * <p>If the {@code -ArequirePrefixInWarningSuppressions} command-line argument was supplied,\n+     * then {@code \"partial-message-key\"} has no effect; {@code \"prefix\"} and {@code\n+     * \"prefix:partial-message-key\"} are the only SuppressWarnings strings that have an effect.\n+     *\n+     * @param messageKey the message key of the error the checker is emitting; a lowercase string,\n+     *     without any \"checkername:\" prefix\n+     * @param suppressWarningsStrings the SuppressWarnings strings that are in effect. May be null,\n+     *     in which case this method returns false.\n+     * @return true if an element of {@code suppressWarningsStrings} suppresses the error\n+     */\n+    private boolean shouldSuppressWarningsStringSuppressKey(\n+            String messageKey, String @Nullable ... suppressWarningsStrings) {\n+        Set<String> prefixes = this.getSuppressWarningsPrefixes();\n+        return shouldSuppressWarningsStringSuppressKey(\n+                prefixes, messageKey, suppressWarningsStrings);\n+    }\n+\n+    /**\n+     * See {@link #shouldSuppressWarningsStringSuppressKey(String, String...)}\n+     *\n+     * @param prefixes the SuppressWarnings prefixes used by this checker\n+     * @param messageKey the message key of the error the checker is emitting; a lowercase string,\n+     *     without any \"checkername:\" prefix\n+     * @param suppressWarningsStrings the SuppressWarnings strings that are in effect. May be null,\n+     *     in which case this method returns false.\n+     * @return true if one of the {@code suppressWarningsStrings} suppresses the error\n+     */\n+    private boolean shouldSuppressWarningsStringSuppressKey(\n+            Set<String> prefixes, String messageKey, String @Nullable ... suppressWarningsStrings) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbedb9fff145419edc809bd607fdff2411acd44a"}, "originalPosition": 564}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDIzNzM3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDoyNDoyMFrOGona1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjo1NTowOVrOGpDhHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0MjA2OA==", "bodyText": "I wonder if \"allcheckers\" should be put at the end of the list rather than the beginning, so it is less prominent in the output of -AshowSuppressWarningStrings.", "url": "https://github.com/typetools/checker-framework/pull/3388#discussion_r445242068", "createdAt": "2020-06-25T00:24:20Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -2203,38 +2177,59 @@ private boolean isAnnotatedForThisCheckerOrUpstreamChecker(@Nullable Element elt\n     }\n \n     /**\n-     * Determine the standard set of suppress warning keys usable for any checker.\n+     * Returns a modifiable set of lower-case strings that are prefixes for SuppressWarnings\n+     * strings.\n      *\n-     * @see #getSuppressWarningsKeys()\n-     * @return collection of warning keys\n+     * <p>The collection must not be empty and must not contain only {@link #SUPPRESS_ALL_PREFIX}.\n+     *\n+     * @return non-empty modifiable set of lower-case prefixes for SuppressWarnings strings\n+     */\n+    public SortedSet<String> getSuppressWarningsPrefixes() {\n+        return getStandardSuppressWarningsPrefixes();\n+    }\n+\n+    /**\n+     * Returns a sorted set of SuppressWarnings prefixes read from the {@link\n+     * SuppressWarningsPrefix} meta-annotation on the checker class. Or if no {@link\n+     * SuppressWarningsPrefix} is used, the checker name is used. {@link #SUPPRESS_ALL_PREFIX} is\n+     * also added, at the end.\n+     *\n+     * @return a sorted set of SuppressWarnings prefixes\n      */\n-    protected final Collection<String> getStandardSuppressWarningsKeys() {\n-        // TreeSet ensures keys are returned in a consistent order.\n-        Set<String> result = new TreeSet<>();\n-        result.add(SUPPRESS_ALL_KEY);\n+    protected final NavigableSet<String> getStandardSuppressWarningsPrefixes() {\n+        NavigableSet<String> prefixes = new TreeSet<>();\n+        prefixes.add(SUPPRESS_ALL_PREFIX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbedb9fff145419edc809bd607fdff2411acd44a"}, "originalPosition": 650}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcwMjQyOQ==", "bodyText": "It's a TreeSet, so it is ordered by name. I'll change the order when it is printed though.", "url": "https://github.com/typetools/checker-framework/pull/3388#discussion_r445702429", "createdAt": "2020-06-25T16:55:09Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -2203,38 +2177,59 @@ private boolean isAnnotatedForThisCheckerOrUpstreamChecker(@Nullable Element elt\n     }\n \n     /**\n-     * Determine the standard set of suppress warning keys usable for any checker.\n+     * Returns a modifiable set of lower-case strings that are prefixes for SuppressWarnings\n+     * strings.\n      *\n-     * @see #getSuppressWarningsKeys()\n-     * @return collection of warning keys\n+     * <p>The collection must not be empty and must not contain only {@link #SUPPRESS_ALL_PREFIX}.\n+     *\n+     * @return non-empty modifiable set of lower-case prefixes for SuppressWarnings strings\n+     */\n+    public SortedSet<String> getSuppressWarningsPrefixes() {\n+        return getStandardSuppressWarningsPrefixes();\n+    }\n+\n+    /**\n+     * Returns a sorted set of SuppressWarnings prefixes read from the {@link\n+     * SuppressWarningsPrefix} meta-annotation on the checker class. Or if no {@link\n+     * SuppressWarningsPrefix} is used, the checker name is used. {@link #SUPPRESS_ALL_PREFIX} is\n+     * also added, at the end.\n+     *\n+     * @return a sorted set of SuppressWarnings prefixes\n      */\n-    protected final Collection<String> getStandardSuppressWarningsKeys() {\n-        // TreeSet ensures keys are returned in a consistent order.\n-        Set<String> result = new TreeSet<>();\n-        result.add(SUPPRESS_ALL_KEY);\n+    protected final NavigableSet<String> getStandardSuppressWarningsPrefixes() {\n+        NavigableSet<String> prefixes = new TreeSet<>();\n+        prefixes.add(SUPPRESS_ALL_PREFIX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0MjA2OA=="}, "originalCommit": {"oid": "cbedb9fff145419edc809bd607fdff2411acd44a"}, "originalPosition": 650}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1701, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}