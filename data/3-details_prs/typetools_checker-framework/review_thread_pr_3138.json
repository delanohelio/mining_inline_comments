{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MjE5OTM4", "number": 3138, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo0ODozNlrODqdqag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDoxMzoyNVrODr4ScQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODUyNzc4OnYy", "diffSide": "RIGHT", "path": "checker/tests/nullness-stubfile/stubfile-ensuresnonnullif.astub", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo0ODozNlrOF6OfGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo0ODozNlrOF6OfGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5OTA2NA==", "bodyText": "Could you add a comment why these are not the annotations in the annotated JDK?", "url": "https://github.com/typetools/checker-framework/pull/3138#discussion_r396599064", "createdAt": "2020-03-23T16:48:36Z", "author": {"login": "wmdietl"}, "path": "checker/tests/nullness-stubfile/stubfile-ensuresnonnullif.astub", "diffHunk": "@@ -0,0 +1,14 @@\n+import org.checkerframework.checker.nullness.qual.*;\n+\n+package java.lang;\n+\n+public final class String {\n+\n+  @EnsuresNonNullIf(expression={\"#1\"}, result=true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d88b8258687a00e787fc5a03004ceb0afde3b797"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODUyOTE4OnYy", "diffSide": "RIGHT", "path": "checker/tests/nullness-stubfile/stubfile-ensuresnonnullif.astub", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo0ODo1MlrOF6Of_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo0ODo1MlrOF6Of_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5OTI5NA==", "bodyText": "Do we need these commented-out lines?", "url": "https://github.com/typetools/checker-framework/pull/3138#discussion_r396599294", "createdAt": "2020-03-23T16:48:52Z", "author": {"login": "wmdietl"}, "path": "checker/tests/nullness-stubfile/stubfile-ensuresnonnullif.astub", "diffHunk": "@@ -0,0 +1,14 @@\n+import org.checkerframework.checker.nullness.qual.*;\n+\n+package java.lang;\n+\n+public final class String {\n+\n+  @EnsuresNonNullIf(expression={\"#1\"}, result=true)\n+  public boolean startsWith(@Nullable String prefix);\n+  @EnsuresNonNullIf(expression=\"#1\", result=true)\n+  public boolean endsWith(@Nullable String suffix);\n+\n+  // public boolean contentEquals(@GuardSatisfied StringBuffer sb);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d88b8258687a00e787fc5a03004ceb0afde3b797"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODU0MDY3OnYy", "diffSide": "RIGHT", "path": "checker/tests/nullness/RepeatNonNull.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo1MTozNlrOF6Onhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo1MTozNlrOF6Onhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwMTIyMg==", "bodyText": "The naming of many of these test files is a bit confusing. Could you add the Ensures etc. word to the test files? For some, e.g. the jtreg tests, you already do this.", "url": "https://github.com/typetools/checker-framework/pull/3138#discussion_r396601222", "createdAt": "2020-03-23T16:51:36Z", "author": {"login": "wmdietl"}, "path": "checker/tests/nullness/RepeatNonNull.java", "diffHunk": "@@ -0,0 +1,91 @@\n+import org.checkerframework.checker.nullness.qual.EnsuresNonNull;\n+import org.checkerframework.checker.nullness.qual.EnsuresNonNullIf;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+public class RepeatNonNull {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d88b8258687a00e787fc5a03004ceb0afde3b797"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODU2MzM5OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/qual/ConditionalPostconditionAnnotation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo1NzoxMFrOF6O2eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo1NzoxMFrOF6O2eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwNTA1MA==", "bodyText": "How do I chose between the two options?\nIs one when I'm declaring a single annotation and the other when I declare a repeatable annotation? But the repeatable annotation wouldn't contain a result, would it?", "url": "https://github.com/typetools/checker-framework/pull/3138#discussion_r396605050", "createdAt": "2020-03-23T16:57:10Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/qual/ConditionalPostconditionAnnotation.java", "diffHunk": "@@ -11,11 +11,17 @@\n  * A meta-annotation that indicates that an annotation E is a conditional postcondition annotation,\n  * i.e., E is a type-specialized version of {@link EnsuresQualifierIf}.\n  *\n- * <p>The annotation E that is meta-annotated as {@link ConditionalPostconditionAnnotation} must\n- * have an element called {@code expression} that is an array of {@code String}s of the same format\n- * and with the same meaning as the value {@code expression} in {@link EnsuresQualifierIf}. E must\n- * also have an element {@code result} with the same meaning as the element {@code result} in {@link\n- * EnsuresQualifierIf}.\n+ * <ul>\n+ *   <li>E must have one of the following:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d88b8258687a00e787fc5a03004ceb0afde3b797"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODU3MTcyOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/qual/PostconditionAnnotation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo1ODo0OVrOF6O7jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo1ODo0OVrOF6O7jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwNjM1MQ==", "bodyText": "I'm also not clear here how to chose between the two options.", "url": "https://github.com/typetools/checker-framework/pull/3138#discussion_r396606351", "createdAt": "2020-03-23T16:58:49Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/qual/PostconditionAnnotation.java", "diffHunk": "@@ -11,9 +11,12 @@\n  * A meta-annotation that indicates that an annotation E is a postcondition annotation, i.e., E is a\n  * type-specialized version of {@link EnsuresQualifier}.\n  *\n- * <p>The annotation E that is meta-annotated as {@link PostconditionAnnotation} must have an\n- * element called {@code value} that is an array of {@code String}s of the same format and with the\n- * same meaning as the value {@code expression} in {@link EnsuresQualifier}.\n+ * <p>E must have an element {@code value} that is one of the following:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d88b8258687a00e787fc5a03004ceb0afde3b797"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODU5MjM3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzowMzo0OVrOF6PJiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzowMzo0OVrOF6PJiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwOTkzMQ==", "bodyText": "Should this field be private or protected?", "url": "https://github.com/typetools/checker-framework/pull/3138#discussion_r396609931", "createdAt": "2020-03-23T17:03:49Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -3237,41 +3237,90 @@ private void addOrMerge(Set<AnnotationMirror> results, AnnotationMirror annotati\n      * @param metaAnnotationClass the class of the meta-annotation that needs to be present\n      * @return a list of pairs {@code (anno, metaAnno)} where {@code anno} is the annotation mirror\n      *     at {@code element}, and {@code metaAnno} is the annotation mirror (of type {@code\n-     *     metaAnnotationClass}) used to annotate {@code anno}.\n+     *     metaAnnotationClass}) used to meta-annotate the declaration of {@code anno}\n      */\n     public List<Pair<AnnotationMirror, AnnotationMirror>> getDeclAnnotationWithMetaAnnotation(\n             Element element, Class<? extends Annotation> metaAnnotationClass) {\n         List<Pair<AnnotationMirror, AnnotationMirror>> result = new ArrayList<>();\n         Set<AnnotationMirror> annotationMirrors = getDeclAnnotations(element);\n \n-        // Go through all annotations found.\n-        for (AnnotationMirror annotation : annotationMirrors) {\n-            List<? extends AnnotationMirror> annotationsOnAnnotation;\n+        for (AnnotationMirror candidate : annotationMirrors) {\n+            List<? extends AnnotationMirror> metaAnnotationsOnAnnotation;\n             try {\n-                annotationsOnAnnotation =\n-                        annotation.getAnnotationType().asElement().getAnnotationMirrors();\n+                metaAnnotationsOnAnnotation =\n+                        candidate.getAnnotationType().asElement().getAnnotationMirrors();\n             } catch (com.sun.tools.javac.code.Symbol.CompletionFailure cf) {\n                 // Fix for Issue 309: If a CompletionFailure occurs, issue a warning.\n                 // I didn't find a nicer alternative to check whether the Symbol can be completed.\n                 // The completer field of a Symbol might be non-null also in successful cases.\n                 // Issue a warning (exception only happens once) and continue.\n                 checker.reportWarning(\n-                        annotation.getAnnotationType().asElement(),\n+                        candidate.getAnnotationType().asElement(),\n                         \"annotation.not.completed\",\n                         ElementUtils.getVerboseName(element),\n-                        annotation);\n+                        candidate);\n                 continue;\n             }\n             // First call copier, if exception, continue normal modula laws.\n-            for (AnnotationMirror a : annotationsOnAnnotation) {\n-                if (areSameByClass(a, metaAnnotationClass)) {\n-                    result.add(Pair.of(annotation, a));\n+            for (AnnotationMirror ma : metaAnnotationsOnAnnotation) {\n+                if (areSameByClass(ma, metaAnnotationClass)) {\n+                    // This candidate has the right kind of meta-annotation.\n+                    // It might be a real contract, or a list of contracts.\n+                    if (isListForRepeatedAnnotation(candidate)) {\n+                        List<AnnotationMirror> wrappedCandidates =\n+                                AnnotationUtils.getElementValueArray(\n+                                        candidate, \"value\", AnnotationMirror.class, false);\n+                        for (AnnotationMirror wrappedCandidate : wrappedCandidates) {\n+                            result.add(Pair.of(wrappedCandidate, ma));\n+                        }\n+                    } else {\n+                        result.add(Pair.of(candidate, ma));\n+                    }\n                 }\n             }\n         }\n         return result;\n     }\n \n+    /** Cache for {@link #isListForRepeatedAnnotation}. */\n+    Map<AnnotationMirror, Boolean> isListForRepeatedAnnotationCache = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d88b8258687a00e787fc5a03004ceb0afde3b797"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODU5MzY1OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzowNDowOVrOF6PKXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzowNDowOVrOF6PKXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYxMDE0MQ==", "bodyText": "Can the field be final?", "url": "https://github.com/typetools/checker-framework/pull/3138#discussion_r396610141", "createdAt": "2020-03-23T17:04:09Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -3237,41 +3237,90 @@ private void addOrMerge(Set<AnnotationMirror> results, AnnotationMirror annotati\n      * @param metaAnnotationClass the class of the meta-annotation that needs to be present\n      * @return a list of pairs {@code (anno, metaAnno)} where {@code anno} is the annotation mirror\n      *     at {@code element}, and {@code metaAnno} is the annotation mirror (of type {@code\n-     *     metaAnnotationClass}) used to annotate {@code anno}.\n+     *     metaAnnotationClass}) used to meta-annotate the declaration of {@code anno}\n      */\n     public List<Pair<AnnotationMirror, AnnotationMirror>> getDeclAnnotationWithMetaAnnotation(\n             Element element, Class<? extends Annotation> metaAnnotationClass) {\n         List<Pair<AnnotationMirror, AnnotationMirror>> result = new ArrayList<>();\n         Set<AnnotationMirror> annotationMirrors = getDeclAnnotations(element);\n \n-        // Go through all annotations found.\n-        for (AnnotationMirror annotation : annotationMirrors) {\n-            List<? extends AnnotationMirror> annotationsOnAnnotation;\n+        for (AnnotationMirror candidate : annotationMirrors) {\n+            List<? extends AnnotationMirror> metaAnnotationsOnAnnotation;\n             try {\n-                annotationsOnAnnotation =\n-                        annotation.getAnnotationType().asElement().getAnnotationMirrors();\n+                metaAnnotationsOnAnnotation =\n+                        candidate.getAnnotationType().asElement().getAnnotationMirrors();\n             } catch (com.sun.tools.javac.code.Symbol.CompletionFailure cf) {\n                 // Fix for Issue 309: If a CompletionFailure occurs, issue a warning.\n                 // I didn't find a nicer alternative to check whether the Symbol can be completed.\n                 // The completer field of a Symbol might be non-null also in successful cases.\n                 // Issue a warning (exception only happens once) and continue.\n                 checker.reportWarning(\n-                        annotation.getAnnotationType().asElement(),\n+                        candidate.getAnnotationType().asElement(),\n                         \"annotation.not.completed\",\n                         ElementUtils.getVerboseName(element),\n-                        annotation);\n+                        candidate);\n                 continue;\n             }\n             // First call copier, if exception, continue normal modula laws.\n-            for (AnnotationMirror a : annotationsOnAnnotation) {\n-                if (areSameByClass(a, metaAnnotationClass)) {\n-                    result.add(Pair.of(annotation, a));\n+            for (AnnotationMirror ma : metaAnnotationsOnAnnotation) {\n+                if (areSameByClass(ma, metaAnnotationClass)) {\n+                    // This candidate has the right kind of meta-annotation.\n+                    // It might be a real contract, or a list of contracts.\n+                    if (isListForRepeatedAnnotation(candidate)) {\n+                        List<AnnotationMirror> wrappedCandidates =\n+                                AnnotationUtils.getElementValueArray(\n+                                        candidate, \"value\", AnnotationMirror.class, false);\n+                        for (AnnotationMirror wrappedCandidate : wrappedCandidates) {\n+                            result.add(Pair.of(wrappedCandidate, ma));\n+                        }\n+                    } else {\n+                        result.add(Pair.of(candidate, ma));\n+                    }\n                 }\n             }\n         }\n         return result;\n     }\n \n+    /** Cache for {@link #isListForRepeatedAnnotation}. */\n+    Map<AnnotationMirror, Boolean> isListForRepeatedAnnotationCache = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d88b8258687a00e787fc5a03004ceb0afde3b797"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODU5ODI0OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzowNToyMFrOF6PNcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzowNToyMFrOF6PNcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYxMDkzMQ==", "bodyText": "Should this method be private or protected?", "url": "https://github.com/typetools/checker-framework/pull/3138#discussion_r396610931", "createdAt": "2020-03-23T17:05:20Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -3237,41 +3237,90 @@ private void addOrMerge(Set<AnnotationMirror> results, AnnotationMirror annotati\n      * @param metaAnnotationClass the class of the meta-annotation that needs to be present\n      * @return a list of pairs {@code (anno, metaAnno)} where {@code anno} is the annotation mirror\n      *     at {@code element}, and {@code metaAnno} is the annotation mirror (of type {@code\n-     *     metaAnnotationClass}) used to annotate {@code anno}.\n+     *     metaAnnotationClass}) used to meta-annotate the declaration of {@code anno}\n      */\n     public List<Pair<AnnotationMirror, AnnotationMirror>> getDeclAnnotationWithMetaAnnotation(\n             Element element, Class<? extends Annotation> metaAnnotationClass) {\n         List<Pair<AnnotationMirror, AnnotationMirror>> result = new ArrayList<>();\n         Set<AnnotationMirror> annotationMirrors = getDeclAnnotations(element);\n \n-        // Go through all annotations found.\n-        for (AnnotationMirror annotation : annotationMirrors) {\n-            List<? extends AnnotationMirror> annotationsOnAnnotation;\n+        for (AnnotationMirror candidate : annotationMirrors) {\n+            List<? extends AnnotationMirror> metaAnnotationsOnAnnotation;\n             try {\n-                annotationsOnAnnotation =\n-                        annotation.getAnnotationType().asElement().getAnnotationMirrors();\n+                metaAnnotationsOnAnnotation =\n+                        candidate.getAnnotationType().asElement().getAnnotationMirrors();\n             } catch (com.sun.tools.javac.code.Symbol.CompletionFailure cf) {\n                 // Fix for Issue 309: If a CompletionFailure occurs, issue a warning.\n                 // I didn't find a nicer alternative to check whether the Symbol can be completed.\n                 // The completer field of a Symbol might be non-null also in successful cases.\n                 // Issue a warning (exception only happens once) and continue.\n                 checker.reportWarning(\n-                        annotation.getAnnotationType().asElement(),\n+                        candidate.getAnnotationType().asElement(),\n                         \"annotation.not.completed\",\n                         ElementUtils.getVerboseName(element),\n-                        annotation);\n+                        candidate);\n                 continue;\n             }\n             // First call copier, if exception, continue normal modula laws.\n-            for (AnnotationMirror a : annotationsOnAnnotation) {\n-                if (areSameByClass(a, metaAnnotationClass)) {\n-                    result.add(Pair.of(annotation, a));\n+            for (AnnotationMirror ma : metaAnnotationsOnAnnotation) {\n+                if (areSameByClass(ma, metaAnnotationClass)) {\n+                    // This candidate has the right kind of meta-annotation.\n+                    // It might be a real contract, or a list of contracts.\n+                    if (isListForRepeatedAnnotation(candidate)) {\n+                        List<AnnotationMirror> wrappedCandidates =\n+                                AnnotationUtils.getElementValueArray(\n+                                        candidate, \"value\", AnnotationMirror.class, false);\n+                        for (AnnotationMirror wrappedCandidate : wrappedCandidates) {\n+                            result.add(Pair.of(wrappedCandidate, ma));\n+                        }\n+                    } else {\n+                        result.add(Pair.of(candidate, ma));\n+                    }\n                 }\n             }\n         }\n         return result;\n     }\n \n+    /** Cache for {@link #isListForRepeatedAnnotation}. */\n+    Map<AnnotationMirror, Boolean> isListForRepeatedAnnotationCache = new HashMap<>();\n+\n+    /**\n+     * Returns true if the given annotation is a wrapper for multiple repeated annotations.\n+     *\n+     * @param a an annotation that might be a wrapper\n+     * @return true if the argument is a wrapper for multiple repeated annotations\n+     */\n+    boolean isListForRepeatedAnnotation(AnnotationMirror a) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d88b8258687a00e787fc5a03004ceb0afde3b797"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODU5OTA1OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzowNTozMlrOF6PN-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzowNTozMlrOF6PN-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYxMTA2Ng==", "bodyText": "Should this method be private or protected?", "url": "https://github.com/typetools/checker-framework/pull/3138#discussion_r396611066", "createdAt": "2020-03-23T17:05:32Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -3237,41 +3237,90 @@ private void addOrMerge(Set<AnnotationMirror> results, AnnotationMirror annotati\n      * @param metaAnnotationClass the class of the meta-annotation that needs to be present\n      * @return a list of pairs {@code (anno, metaAnno)} where {@code anno} is the annotation mirror\n      *     at {@code element}, and {@code metaAnno} is the annotation mirror (of type {@code\n-     *     metaAnnotationClass}) used to annotate {@code anno}.\n+     *     metaAnnotationClass}) used to meta-annotate the declaration of {@code anno}\n      */\n     public List<Pair<AnnotationMirror, AnnotationMirror>> getDeclAnnotationWithMetaAnnotation(\n             Element element, Class<? extends Annotation> metaAnnotationClass) {\n         List<Pair<AnnotationMirror, AnnotationMirror>> result = new ArrayList<>();\n         Set<AnnotationMirror> annotationMirrors = getDeclAnnotations(element);\n \n-        // Go through all annotations found.\n-        for (AnnotationMirror annotation : annotationMirrors) {\n-            List<? extends AnnotationMirror> annotationsOnAnnotation;\n+        for (AnnotationMirror candidate : annotationMirrors) {\n+            List<? extends AnnotationMirror> metaAnnotationsOnAnnotation;\n             try {\n-                annotationsOnAnnotation =\n-                        annotation.getAnnotationType().asElement().getAnnotationMirrors();\n+                metaAnnotationsOnAnnotation =\n+                        candidate.getAnnotationType().asElement().getAnnotationMirrors();\n             } catch (com.sun.tools.javac.code.Symbol.CompletionFailure cf) {\n                 // Fix for Issue 309: If a CompletionFailure occurs, issue a warning.\n                 // I didn't find a nicer alternative to check whether the Symbol can be completed.\n                 // The completer field of a Symbol might be non-null also in successful cases.\n                 // Issue a warning (exception only happens once) and continue.\n                 checker.reportWarning(\n-                        annotation.getAnnotationType().asElement(),\n+                        candidate.getAnnotationType().asElement(),\n                         \"annotation.not.completed\",\n                         ElementUtils.getVerboseName(element),\n-                        annotation);\n+                        candidate);\n                 continue;\n             }\n             // First call copier, if exception, continue normal modula laws.\n-            for (AnnotationMirror a : annotationsOnAnnotation) {\n-                if (areSameByClass(a, metaAnnotationClass)) {\n-                    result.add(Pair.of(annotation, a));\n+            for (AnnotationMirror ma : metaAnnotationsOnAnnotation) {\n+                if (areSameByClass(ma, metaAnnotationClass)) {\n+                    // This candidate has the right kind of meta-annotation.\n+                    // It might be a real contract, or a list of contracts.\n+                    if (isListForRepeatedAnnotation(candidate)) {\n+                        List<AnnotationMirror> wrappedCandidates =\n+                                AnnotationUtils.getElementValueArray(\n+                                        candidate, \"value\", AnnotationMirror.class, false);\n+                        for (AnnotationMirror wrappedCandidate : wrappedCandidates) {\n+                            result.add(Pair.of(wrappedCandidate, ma));\n+                        }\n+                    } else {\n+                        result.add(Pair.of(candidate, ma));\n+                    }\n                 }\n             }\n         }\n         return result;\n     }\n \n+    /** Cache for {@link #isListForRepeatedAnnotation}. */\n+    Map<AnnotationMirror, Boolean> isListForRepeatedAnnotationCache = new HashMap<>();\n+\n+    /**\n+     * Returns true if the given annotation is a wrapper for multiple repeated annotations.\n+     *\n+     * @param a an annotation that might be a wrapper\n+     * @return true if the argument is a wrapper for multiple repeated annotations\n+     */\n+    boolean isListForRepeatedAnnotation(AnnotationMirror a) {\n+        if (!isListForRepeatedAnnotationCache.containsKey(a)) {\n+            isListForRepeatedAnnotationCache.put(a, isListForRepeatedAnnotationImplementation(a));\n+        }\n+        return isListForRepeatedAnnotationCache.get(a);\n+    }\n+\n+    /**\n+     * Returns true if the annotation is a wrapper for multiple repeated annotations.\n+     *\n+     * @param a the annotation to test\n+     * @return true if the annotation is a wrapper for multiple repeated annotations\n+     */\n+    boolean isListForRepeatedAnnotationImplementation(AnnotationMirror a) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d88b8258687a00e787fc5a03004ceb0afde3b797"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODcxNTk4OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/util/Contract.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzozMjo1M1rOF6QZPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzozMjo1M1rOF6QZPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzMDMzMw==", "bodyText": "From the diffs in this file it seems a bit odd why these new imports are required.\nDo you see the reason?", "url": "https://github.com/typetools/checker-framework/pull/3138#discussion_r396630333", "createdAt": "2020-03-23T17:32:53Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/util/Contract.java", "diffHunk": "@@ -7,12 +7,12 @@\n import org.checkerframework.framework.qual.ConditionalPostconditionAnnotation;\n import org.checkerframework.framework.qual.EnsuresQualifier;\n import org.checkerframework.framework.qual.EnsuresQualifierIf;\n-import org.checkerframework.framework.qual.EnsuresQualifiers;\n-import org.checkerframework.framework.qual.EnsuresQualifiersIf;\n import org.checkerframework.framework.qual.PostconditionAnnotation;\n import org.checkerframework.framework.qual.PreconditionAnnotation;\n import org.checkerframework.framework.qual.RequiresQualifier;\n-import org.checkerframework.framework.qual.RequiresQualifiers;\n+import org.checkerframework.framework.util.Contract.ConditionalPostcondition;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d88b8258687a00e787fc5a03004ceb0afde3b797"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTI5MDc2OnYy", "diffSide": "RIGHT", "path": "changelog.txt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDo0ODo1MFrOF8KkOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDo0ODo1MFrOF8KkOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYzMTk5Mg==", "bodyText": "This should move down into the upcoming 3.3.0 release.", "url": "https://github.com/typetools/checker-framework/pull/3138#discussion_r398631992", "createdAt": "2020-03-26T14:48:50Z", "author": {"login": "wmdietl"}, "path": "changelog.txt", "diffHunk": "@@ -1,3 +1,14 @@\n+All postcondition annotations are repeatable (e.g., `@EnsuresNonNull`,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b46ea13e4427365901c6f4c2202f7cd032a2171"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTI5NzY5OnYy", "diffSide": "RIGHT", "path": "checker/src/test/java/tests/NullnessStubfileTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDo1MDoxMVrOF8KojA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDo1MDoxMVrOF8KojA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYzMzEwMA==", "bodyText": "The trailing colon shouldn't be necessary any longer.", "url": "https://github.com/typetools/checker-framework/pull/3138#discussion_r398633100", "createdAt": "2020-03-26T14:50:11Z", "author": {"login": "wmdietl"}, "path": "checker/src/test/java/tests/NullnessStubfileTest.java", "diffHunk": "@@ -17,7 +17,7 @@ public NullnessStubfileTest(List<File> testFiles) {\n                 \"-AstubWarnIfNotFound\",\n                 \"-Astubs=\"\n                         + \"tests/nullness-stubfile/stubfile1.astub:\"\n-                        + \"tests/nullness-stubfile/stubfile2.astub\");\n+                        + \"tests/nullness-stubfile/stubfile2.astub:\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b46ea13e4427365901c6f4c2202f7cd032a2171"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTMwODcwOnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/Analysis.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDo1MjoyN1rOF8Kviw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTo1ODoxOFrOF8N_eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYzNDg5MQ==", "bodyText": "You could push these unrelated changes separately to have a more suitable commit message for the change.", "url": "https://github.com/typetools/checker-framework/pull/3138#discussion_r398634891", "createdAt": "2020-03-26T14:52:27Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/Analysis.java", "diffHunk": "@@ -124,18 +124,20 @@ public void setCurrentTree(Tree currentTree) {\n         this.currentTree = currentTree;\n     }\n \n+    // `@code`, not `@link`, because dataflow module doesn't depend on framework moduel.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b46ea13e4427365901c6f4c2202f7cd032a2171"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4ODEyMQ==", "bodyText": "Done, in #3198.", "url": "https://github.com/typetools/checker-framework/pull/3138#discussion_r398688121", "createdAt": "2020-03-26T15:58:18Z", "author": {"login": "mernst"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/Analysis.java", "diffHunk": "@@ -124,18 +124,20 @@ public void setCurrentTree(Tree currentTree) {\n         this.currentTree = currentTree;\n     }\n \n+    // `@code`, not `@link`, because dataflow module doesn't depend on framework moduel.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYzNDg5MQ=="}, "originalCommit": {"oid": "6b46ea13e4427365901c6f4c2202f7cd032a2171"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTM0OTU5OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTowMDozN1rOF8LJbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTowMDozN1rOF8LJbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY0MTUxOA==", "bodyText": "I'm wondering whether this cache should be set with the other caches in the constructor (using CollectionUtils.createLRUCache(cacheSize)) and whether it should be cleared in setRoot, like other caches.\nOtherwise, couldn't this cache grow arbitrarily large, as there can be many different repeated annotations that all have distinct AnnotationMirrors.", "url": "https://github.com/typetools/checker-framework/pull/3138#discussion_r398641518", "createdAt": "2020-03-26T15:00:37Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -3237,41 +3237,90 @@ private void addOrMerge(Set<AnnotationMirror> results, AnnotationMirror annotati\n      * @param metaAnnotationClass the class of the meta-annotation that needs to be present\n      * @return a list of pairs {@code (anno, metaAnno)} where {@code anno} is the annotation mirror\n      *     at {@code element}, and {@code metaAnno} is the annotation mirror (of type {@code\n-     *     metaAnnotationClass}) used to annotate {@code anno}.\n+     *     metaAnnotationClass}) used to meta-annotate the declaration of {@code anno}\n      */\n     public List<Pair<AnnotationMirror, AnnotationMirror>> getDeclAnnotationWithMetaAnnotation(\n             Element element, Class<? extends Annotation> metaAnnotationClass) {\n         List<Pair<AnnotationMirror, AnnotationMirror>> result = new ArrayList<>();\n         Set<AnnotationMirror> annotationMirrors = getDeclAnnotations(element);\n \n-        // Go through all annotations found.\n-        for (AnnotationMirror annotation : annotationMirrors) {\n-            List<? extends AnnotationMirror> annotationsOnAnnotation;\n+        for (AnnotationMirror candidate : annotationMirrors) {\n+            List<? extends AnnotationMirror> metaAnnotationsOnAnnotation;\n             try {\n-                annotationsOnAnnotation =\n-                        annotation.getAnnotationType().asElement().getAnnotationMirrors();\n+                metaAnnotationsOnAnnotation =\n+                        candidate.getAnnotationType().asElement().getAnnotationMirrors();\n             } catch (com.sun.tools.javac.code.Symbol.CompletionFailure cf) {\n                 // Fix for Issue 309: If a CompletionFailure occurs, issue a warning.\n                 // I didn't find a nicer alternative to check whether the Symbol can be completed.\n                 // The completer field of a Symbol might be non-null also in successful cases.\n                 // Issue a warning (exception only happens once) and continue.\n                 checker.reportWarning(\n-                        annotation.getAnnotationType().asElement(),\n+                        candidate.getAnnotationType().asElement(),\n                         \"annotation.not.completed\",\n                         ElementUtils.getVerboseName(element),\n-                        annotation);\n+                        candidate);\n                 continue;\n             }\n             // First call copier, if exception, continue normal modula laws.\n-            for (AnnotationMirror a : annotationsOnAnnotation) {\n-                if (areSameByClass(a, metaAnnotationClass)) {\n-                    result.add(Pair.of(annotation, a));\n+            for (AnnotationMirror ma : metaAnnotationsOnAnnotation) {\n+                if (areSameByClass(ma, metaAnnotationClass)) {\n+                    // This candidate has the right kind of meta-annotation.\n+                    // It might be a real contract, or a list of contracts.\n+                    if (isListForRepeatedAnnotation(candidate)) {\n+                        List<AnnotationMirror> wrappedCandidates =\n+                                AnnotationUtils.getElementValueArray(\n+                                        candidate, \"value\", AnnotationMirror.class, false);\n+                        for (AnnotationMirror wrappedCandidate : wrappedCandidates) {\n+                            result.add(Pair.of(wrappedCandidate, ma));\n+                        }\n+                    } else {\n+                        result.add(Pair.of(candidate, ma));\n+                    }\n                 }\n             }\n         }\n         return result;\n     }\n \n+    /** Cache for {@link #isListForRepeatedAnnotation}. */\n+    private final Map<AnnotationMirror, Boolean> isListForRepeatedAnnotationCache = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b46ea13e4427365901c6f4c2202f7cd032a2171"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTM2MDM1OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTowMzowMVrOF8LQfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTowMzowMVrOF8LQfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY0MzMyNw==", "bodyText": "Should this use a variant of AnnotationUtils.containsSame, to account for AnnotationMirrors coming either from the compiler or a stub file?\nOr maybe this should be rewritten to use the type from the AnnotationMirror (from getAnnotationType()), which will be easier to compare and of which there will be many fewer of (addressing my caching concern above).", "url": "https://github.com/typetools/checker-framework/pull/3138#discussion_r398643327", "createdAt": "2020-03-26T15:03:01Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -3237,41 +3237,90 @@ private void addOrMerge(Set<AnnotationMirror> results, AnnotationMirror annotati\n      * @param metaAnnotationClass the class of the meta-annotation that needs to be present\n      * @return a list of pairs {@code (anno, metaAnno)} where {@code anno} is the annotation mirror\n      *     at {@code element}, and {@code metaAnno} is the annotation mirror (of type {@code\n-     *     metaAnnotationClass}) used to annotate {@code anno}.\n+     *     metaAnnotationClass}) used to meta-annotate the declaration of {@code anno}\n      */\n     public List<Pair<AnnotationMirror, AnnotationMirror>> getDeclAnnotationWithMetaAnnotation(\n             Element element, Class<? extends Annotation> metaAnnotationClass) {\n         List<Pair<AnnotationMirror, AnnotationMirror>> result = new ArrayList<>();\n         Set<AnnotationMirror> annotationMirrors = getDeclAnnotations(element);\n \n-        // Go through all annotations found.\n-        for (AnnotationMirror annotation : annotationMirrors) {\n-            List<? extends AnnotationMirror> annotationsOnAnnotation;\n+        for (AnnotationMirror candidate : annotationMirrors) {\n+            List<? extends AnnotationMirror> metaAnnotationsOnAnnotation;\n             try {\n-                annotationsOnAnnotation =\n-                        annotation.getAnnotationType().asElement().getAnnotationMirrors();\n+                metaAnnotationsOnAnnotation =\n+                        candidate.getAnnotationType().asElement().getAnnotationMirrors();\n             } catch (com.sun.tools.javac.code.Symbol.CompletionFailure cf) {\n                 // Fix for Issue 309: If a CompletionFailure occurs, issue a warning.\n                 // I didn't find a nicer alternative to check whether the Symbol can be completed.\n                 // The completer field of a Symbol might be non-null also in successful cases.\n                 // Issue a warning (exception only happens once) and continue.\n                 checker.reportWarning(\n-                        annotation.getAnnotationType().asElement(),\n+                        candidate.getAnnotationType().asElement(),\n                         \"annotation.not.completed\",\n                         ElementUtils.getVerboseName(element),\n-                        annotation);\n+                        candidate);\n                 continue;\n             }\n             // First call copier, if exception, continue normal modula laws.\n-            for (AnnotationMirror a : annotationsOnAnnotation) {\n-                if (areSameByClass(a, metaAnnotationClass)) {\n-                    result.add(Pair.of(annotation, a));\n+            for (AnnotationMirror ma : metaAnnotationsOnAnnotation) {\n+                if (areSameByClass(ma, metaAnnotationClass)) {\n+                    // This candidate has the right kind of meta-annotation.\n+                    // It might be a real contract, or a list of contracts.\n+                    if (isListForRepeatedAnnotation(candidate)) {\n+                        List<AnnotationMirror> wrappedCandidates =\n+                                AnnotationUtils.getElementValueArray(\n+                                        candidate, \"value\", AnnotationMirror.class, false);\n+                        for (AnnotationMirror wrappedCandidate : wrappedCandidates) {\n+                            result.add(Pair.of(wrappedCandidate, ma));\n+                        }\n+                    } else {\n+                        result.add(Pair.of(candidate, ma));\n+                    }\n                 }\n             }\n         }\n         return result;\n     }\n \n+    /** Cache for {@link #isListForRepeatedAnnotation}. */\n+    private final Map<AnnotationMirror, Boolean> isListForRepeatedAnnotationCache = new HashMap<>();\n+\n+    /**\n+     * Returns true if the given annotation is a wrapper for multiple repeated annotations.\n+     *\n+     * @param a an annotation that might be a wrapper\n+     * @return true if the argument is a wrapper for multiple repeated annotations\n+     */\n+    private boolean isListForRepeatedAnnotation(AnnotationMirror a) {\n+        if (!isListForRepeatedAnnotationCache.containsKey(a)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b46ea13e4427365901c6f4c2202f7cd032a2171"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzM3NTg1OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDoxMzoyNVrOF8e7NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo1NDozMlrOF9BjDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2NTU1Ng==", "bodyText": "It would be good to document the naming and nesting requirement, maybe in the \"how to write a checker\" section of the manual.\nAlso, this is related to the TODO below, as this naming convention shouldn't be a strict requirement.", "url": "https://github.com/typetools/checker-framework/pull/3138#discussion_r398965556", "createdAt": "2020-03-27T00:13:25Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -3265,13 +3264,66 @@ private void addOrMerge(Set<AnnotationMirror> results, AnnotationMirror annotati\n             // First call copier, if exception, continue normal modula laws.\n             for (AnnotationMirror ma : metaAnnotationsOnAnnotation) {\n                 if (areSameByClass(ma, metaAnnotationClass)) {\n-                    result.add(Pair.of(candidate, ma));\n+                    // This candidate has the right kind of meta-annotation.\n+                    // It might be a real contract, or a list of contracts.\n+                    if (isListForRepeatedAnnotation(candidate)) {\n+                        List<AnnotationMirror> wrappedCandidates =\n+                                AnnotationUtils.getElementValueArray(\n+                                        candidate, \"value\", AnnotationMirror.class, false);\n+                        for (AnnotationMirror wrappedCandidate : wrappedCandidates) {\n+                            result.add(Pair.of(wrappedCandidate, ma));\n+                        }\n+                    } else {\n+                        result.add(Pair.of(candidate, ma));\n+                    }\n                 }\n             }\n         }\n         return result;\n     }\n \n+    /** Cache for {@link #isListForRepeatedAnnotation}. */\n+    private final Map<DeclaredType, Boolean> isListForRepeatedAnnotationCache = new HashMap<>();\n+\n+    /**\n+     * Returns true if the given annotation is a wrapper for multiple repeated annotations.\n+     *\n+     * @param a an annotation that might be a wrapper\n+     * @return true if the argument is a wrapper for multiple repeated annotations\n+     */\n+    private boolean isListForRepeatedAnnotation(AnnotationMirror a) {\n+        DeclaredType annotationType = a.getAnnotationType();\n+        Boolean resultObject = isListForRepeatedAnnotationCache.get(annotationType);\n+        if (resultObject != null) {\n+            return resultObject;\n+        }\n+        boolean result = isListForRepeatedAnnotationImplementation(annotationType);\n+        isListForRepeatedAnnotationCache.put(annotationType, result);\n+        return result;\n+    }\n+\n+    /**\n+     * Returns true if the annotation is a wrapper for multiple repeated annotations.\n+     *\n+     * @param annotationType the declaration of the annotation to test\n+     * @return true if the annotation is a wrapper for multiple repeated annotations\n+     */\n+    private boolean isListForRepeatedAnnotationImplementation(DeclaredType annotationType) {\n+        TypeMirror enclosingType = annotationType.getEnclosingType();\n+        if (enclosingType == null) {\n+            return false;\n+        }\n+        if (!annotationType.asElement().getSimpleName().contentEquals(\"List\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0602e2424dabb88f36a123785308149490be9a6"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzMjgxNA==", "bodyText": "Thanks for pointing this out.\nI think it's best to make this pull request complete rather than splitting the work across multiple pull requests.  I have added documentation to the manual.\nI also think it's better to be opinionated about the naming convention.  Consistency will help users to understand behavior, and there will be less for users to understand.", "url": "https://github.com/typetools/checker-framework/pull/3138#discussion_r399532814", "createdAt": "2020-03-27T20:54:32Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -3265,13 +3264,66 @@ private void addOrMerge(Set<AnnotationMirror> results, AnnotationMirror annotati\n             // First call copier, if exception, continue normal modula laws.\n             for (AnnotationMirror ma : metaAnnotationsOnAnnotation) {\n                 if (areSameByClass(ma, metaAnnotationClass)) {\n-                    result.add(Pair.of(candidate, ma));\n+                    // This candidate has the right kind of meta-annotation.\n+                    // It might be a real contract, or a list of contracts.\n+                    if (isListForRepeatedAnnotation(candidate)) {\n+                        List<AnnotationMirror> wrappedCandidates =\n+                                AnnotationUtils.getElementValueArray(\n+                                        candidate, \"value\", AnnotationMirror.class, false);\n+                        for (AnnotationMirror wrappedCandidate : wrappedCandidates) {\n+                            result.add(Pair.of(wrappedCandidate, ma));\n+                        }\n+                    } else {\n+                        result.add(Pair.of(candidate, ma));\n+                    }\n                 }\n             }\n         }\n         return result;\n     }\n \n+    /** Cache for {@link #isListForRepeatedAnnotation}. */\n+    private final Map<DeclaredType, Boolean> isListForRepeatedAnnotationCache = new HashMap<>();\n+\n+    /**\n+     * Returns true if the given annotation is a wrapper for multiple repeated annotations.\n+     *\n+     * @param a an annotation that might be a wrapper\n+     * @return true if the argument is a wrapper for multiple repeated annotations\n+     */\n+    private boolean isListForRepeatedAnnotation(AnnotationMirror a) {\n+        DeclaredType annotationType = a.getAnnotationType();\n+        Boolean resultObject = isListForRepeatedAnnotationCache.get(annotationType);\n+        if (resultObject != null) {\n+            return resultObject;\n+        }\n+        boolean result = isListForRepeatedAnnotationImplementation(annotationType);\n+        isListForRepeatedAnnotationCache.put(annotationType, result);\n+        return result;\n+    }\n+\n+    /**\n+     * Returns true if the annotation is a wrapper for multiple repeated annotations.\n+     *\n+     * @param annotationType the declaration of the annotation to test\n+     * @return true if the annotation is a wrapper for multiple repeated annotations\n+     */\n+    private boolean isListForRepeatedAnnotationImplementation(DeclaredType annotationType) {\n+        TypeMirror enclosingType = annotationType.getEnclosingType();\n+        if (enclosingType == null) {\n+            return false;\n+        }\n+        if (!annotationType.asElement().getSimpleName().contentEquals(\"List\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2NTU1Ng=="}, "originalCommit": {"oid": "c0602e2424dabb88f36a123785308149490be9a6"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1891, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}