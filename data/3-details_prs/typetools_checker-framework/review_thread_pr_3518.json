{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MzE1Nzgw", "number": 3518, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDozODo0OVrOESjIxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODo0NToxN1rOES8OhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODg1NTA5OnYy", "diffSide": "RIGHT", "path": "docs/manual/generics.tex", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDozODo0OVrOG3ysXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDozODo0OVrOG3ysXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1NTQyMg==", "bodyText": "I can't parse this. \"from the class are never pass values of that type\"", "url": "https://github.com/typetools/checker-framework/pull/3518#discussion_r461155422", "createdAt": "2020-07-27T20:38:49Z", "author": {"login": "smillst"}, "path": "docs/manual/generics.tex", "diffHunk": "@@ -445,16 +445,17 @@\n invariantly.  For example, \\code{List<@Nullable String>} is not a subtype\n of \\code{List<String>}.\n \n-When a type parameter is used in a read-only way --- that is, when values\n-of that type are read but are never assigned --- then it is safe for the\n+When a type parameter is used in a read-only way --- that is, when clients\n+read values of that type from the class are never pass values of that type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27f2891ea503fce6cd485efb8109b7b62b568b65"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Mjk2NTgxOnYy", "diffSide": "RIGHT", "path": "docs/manual/generics.tex", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODo0NToxN1rOG4ZxMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODo0NToxN1rOG4ZxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc5NTYzNA==", "bodyText": "@mernst This problem already existed before, but I just notice it when reading through this: isn't this the wrong way around? A @Nullable String is a supertype of @NonNull String, so it is safe for Iterator<@Nullable String> to be a supertype of List<String>.\nAs described, it sounds like one can assign an Iterator<@Nullable String> to a Iterator<String>, which would then allow to read a value as non-null, even though the iterator can contain nulls.\nAm I misreading the example?", "url": "https://github.com/typetools/checker-framework/pull/3518#discussion_r461795634", "createdAt": "2020-07-28T18:45:17Z", "author": {"login": "wmdietl"}, "path": "docs/manual/generics.tex", "diffHunk": "@@ -445,16 +445,17 @@\n invariantly.  For example, \\code{List<@Nullable String>} is not a subtype\n of \\code{List<String>}.\n \n-When a type parameter is used in a read-only way --- that is, when values\n-of that type are read but are never assigned --- then it is safe for the\n+When a type parameter is used in a read-only way --- that is, when clients\n+read values of that type from the class but never pass values of that type\n+to the class --- then it is safe for the\n type to be \\emph{covariant} in the type parameter.  Use the\n \\refqualclass{framework/qual}{Covariant} annotation to indicate this.\n When a type parameter is covariant, two instantiations of the class with\n different type arguments have the same subtyping relationship as the type\n arguments do.\n \n-For example, consider \\<Iterator>.  Its elements can be read but not\n-written, so \\code{Iterator<@Nullable String>} can be a subtype of\n+For example, consider \\<Iterator>.  A client can read elements but not\n+write them, so \\code{Iterator<@Nullable String>} can be a subtype of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df1c859c0994423d75757bc57f4c377e1d0e52d0"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1599, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}