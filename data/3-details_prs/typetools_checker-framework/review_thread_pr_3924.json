{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1Nzk1Mzgy", "number": 3924, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjozNzoxN1rOE8foMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjozNzoxN1rOE8foMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODY4MjA4OnYy", "diffSide": "RIGHT", "path": "javacutil/src/main/java/org/checkerframework/javacutil/ElementUtils.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjozNzoxN1rOH4pgWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo1MjoyN1rOH5MB_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2MjMyOQ==", "bodyText": "closure is a very non-specific name for this method. What does it close over? All supertypes? Or all subtypes? Or something else?\nWasn't the previous getAllSupertypes much clearer?", "url": "https://github.com/typetools/checker-framework/pull/3924#discussion_r529162329", "createdAt": "2020-11-24T02:37:17Z", "author": {"login": "wmdietl"}, "path": "javacutil/src/main/java/org/checkerframework/javacutil/ElementUtils.java", "diffHunk": "@@ -661,4 +664,20 @@ public static TypeElement getTypeElement(ProcessingEnvironment processingEnv, Cl\n         }\n         return processingEnv.getElementUtils().getTypeElement(className);\n     }\n+\n+    /**\n+     * Get all the supertypes of a given type, including the type itself.\n+     *\n+     * @param type a type\n+     * @param env the processing environment\n+     * @return list including the type and all its supertypes, with a guarantee that supertypes\n+     *     (i.e. those that appear in extends clauses) appear before indirect supertypes\n+     */\n+    public static List<TypeElement> closure(TypeElement type, ProcessingEnvironment env) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "348062dd77be7223058bd7c601f324d1f9848772"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUzNTIwNw==", "bodyText": "Yes, I also prefer the name getAllSupertypes.\nThis method is just a wrapper around an existing method in com.sun.tools.javac.code.Types.  I want to make the correspondence clear, and I don't want to invent new terminology.", "url": "https://github.com/typetools/checker-framework/pull/3924#discussion_r529535207", "createdAt": "2020-11-24T13:14:26Z", "author": {"login": "mernst"}, "path": "javacutil/src/main/java/org/checkerframework/javacutil/ElementUtils.java", "diffHunk": "@@ -661,4 +664,20 @@ public static TypeElement getTypeElement(ProcessingEnvironment processingEnv, Cl\n         }\n         return processingEnv.getElementUtils().getTypeElement(className);\n     }\n+\n+    /**\n+     * Get all the supertypes of a given type, including the type itself.\n+     *\n+     * @param type a type\n+     * @param env the processing environment\n+     * @return list including the type and all its supertypes, with a guarantee that supertypes\n+     *     (i.e. those that appear in extends clauses) appear before indirect supertypes\n+     */\n+    public static List<TypeElement> closure(TypeElement type, ProcessingEnvironment env) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2MjMyOQ=="}, "originalCommit": {"oid": "348062dd77be7223058bd7c601f324d1f9848772"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY0MDE5OQ==", "bodyText": "In many recent changes we preferred clear terminology based on the JLS over implementation terminology from javac.\nThis would seem like a clear instance where we should not feel bound to an obscure term that is used in an implementation class and instead strive for clarity and uniformity in our utility classes.", "url": "https://github.com/typetools/checker-framework/pull/3924#discussion_r529640199", "createdAt": "2020-11-24T15:31:52Z", "author": {"login": "wmdietl"}, "path": "javacutil/src/main/java/org/checkerframework/javacutil/ElementUtils.java", "diffHunk": "@@ -661,4 +664,20 @@ public static TypeElement getTypeElement(ProcessingEnvironment processingEnv, Cl\n         }\n         return processingEnv.getElementUtils().getTypeElement(className);\n     }\n+\n+    /**\n+     * Get all the supertypes of a given type, including the type itself.\n+     *\n+     * @param type a type\n+     * @param env the processing environment\n+     * @return list including the type and all its supertypes, with a guarantee that supertypes\n+     *     (i.e. those that appear in extends clauses) appear before indirect supertypes\n+     */\n+    public static List<TypeElement> closure(TypeElement type, ProcessingEnvironment env) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2MjMyOQ=="}, "originalCommit": {"oid": "348062dd77be7223058bd7c601f324d1f9848772"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyNzk5Ng==", "bodyText": "I think you are right.  I will change this.  Thanks for the suggestion.", "url": "https://github.com/typetools/checker-framework/pull/3924#discussion_r529727996", "createdAt": "2020-11-24T16:52:27Z", "author": {"login": "mernst"}, "path": "javacutil/src/main/java/org/checkerframework/javacutil/ElementUtils.java", "diffHunk": "@@ -661,4 +664,20 @@ public static TypeElement getTypeElement(ProcessingEnvironment processingEnv, Cl\n         }\n         return processingEnv.getElementUtils().getTypeElement(className);\n     }\n+\n+    /**\n+     * Get all the supertypes of a given type, including the type itself.\n+     *\n+     * @param type a type\n+     * @param env the processing environment\n+     * @return list including the type and all its supertypes, with a guarantee that supertypes\n+     *     (i.e. those that appear in extends clauses) appear before indirect supertypes\n+     */\n+    public static List<TypeElement> closure(TypeElement type, ProcessingEnvironment env) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2MjMyOQ=="}, "originalCommit": {"oid": "348062dd77be7223058bd7c601f324d1f9848772"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 952, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}