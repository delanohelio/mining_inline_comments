{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4OTExNzEw", "number": 3743, "title": "Support disabling returns receiver checker in an accumulation checker", "bodyText": "Also includes a (possibly over-engineered...) framework for supporting pluggable alias analyses in accumulation checkers. We don't have any other than returns receiver yet, but I anticipate adding more in the future as we build more accumulation analyses.\nBecause the only alias analysis available is RR, I didn't document the feature in the manual. I will do so once there is more than one alias analysis to choose from.", "createdAt": "2020-10-07T00:47:09Z", "url": "https://github.com/typetools/checker-framework/pull/3743", "merged": true, "mergeCommit": {"oid": "39f8fc54fdaec7fe52ba76cf15728b7b3a62968d"}, "closed": true, "closedAt": "2020-10-14T17:57:57Z", "author": {"login": "kelloggm"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQCEBzAH2gAyNDk4OTExNzEwOmRjOTQyNDNmYWMwNTc4YWVlNTJkMzk1YmIyMmJmMDhhMTBlNTdjMTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQ9RaTgH2gAyNDk4OTExNzEwOmYwNDEwNDY0ZjEyOTk2MWMwYzc2ZjE2MjFjYTJkMjBlYzg5MmNhZTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dc94243fac0578aee52d395bb22bf08a10e57c11", "author": {"user": {"login": "kelloggm", "name": "Martin Kellogg"}}, "url": "https://github.com/typetools/checker-framework/commit/dc94243fac0578aee52d395bb22bf08a10e57c11", "committedDate": "2020-10-07T00:44:14Z", "message": "support disabling RR checker in an accumulation checker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87431a194a3a462629ee3547be60481a1aae81bb", "author": {"user": {"login": "kelloggm", "name": "Martin Kellogg"}}, "url": "https://github.com/typetools/checker-framework/commit/87431a194a3a462629ee3547be60481a1aae81bb", "committedDate": "2020-10-07T18:28:50Z", "message": "fix minor issue in CalledMethodsChecker that this PR exposed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MzU0NDg4", "url": "https://github.com/typetools/checker-framework/pull/3743#pullrequestreview-504354488", "createdAt": "2020-10-08T00:27:34Z", "commit": {"oid": "87431a194a3a462629ee3547be60481a1aae81bb"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMDoyNzozNFrOHeKA4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMDoyODoyNVrOHeKBrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM4MzM5NA==", "bodyText": "This is coded as if enabling any AliasAnalysis will require enabling a sub-checker.  Is that the intention?  I'm not really sure how future alias reasoning might look.  In any case, this code might be clearer for now by just checking if aliasAnalyses contains RETURNS_RECEIVER, rather than looping and doing a switch.", "url": "https://github.com/typetools/checker-framework/pull/3743#discussion_r501383394", "createdAt": "2020-10-08T00:27:34Z", "author": {"login": "msridhar"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationChecker.java", "diffHunk": "@@ -10,20 +13,71 @@\n  * An accumulation checker is one that accumulates some property: method calls, map keys, etc.\n  *\n  * <p>This class provides a basic accumulation analysis that can be extended to implement an\n- * accumulation type system. This accumulation analysis represents all facts as Strings. It\n- * automatically includes returns-receiver aliasing to precisely handle fluent APIs, but otherwise\n- * uses no alias analysis.\n+ * accumulation type system. This accumulation analysis represents all facts as Strings.\n+ *\n+ * <p>This class supports modular alias analyses. To choose the alias analyses that your\n+ * accumulation checker uses, override the {@link #createAliasAnalyses()} method. By default, the\n+ * only alias analysis used is Returns Receiver.\n  *\n  * <p>The primary extension point is the constructor of {@link AccumulationAnnotatedTypeFactory},\n  * which every subclass should override to provide custom annotations.\n  */\n public abstract class AccumulationChecker extends BaseTypeChecker {\n \n+    /**\n+     * Set of alias analyses that are enabled in this particular accumulation checker. Set to\n+     * non-null the first time {@link #isEnabled(AliasAnalysis)} is called, to allow the\n+     * implementation of {@link #createAliasAnalyses()} to be as simple as possible.\n+     */\n+    private @MonotonicNonNull EnumSet<AliasAnalysis> aliasAnalyses;\n+\n     @Override\n     protected LinkedHashSet<Class<? extends BaseTypeChecker>> getImmediateSubcheckerClasses() {\n         LinkedHashSet<Class<? extends BaseTypeChecker>> checkers =\n                 super.getImmediateSubcheckerClasses();\n-        checkers.add(ReturnsReceiverChecker.class);\n+        AliasAnalysis[] aliasAnalyses = createAliasAnalyses();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87431a194a3a462629ee3547be60481a1aae81bb"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM4MzU5Ng==", "bodyText": "Should this return an EnumSet?", "url": "https://github.com/typetools/checker-framework/pull/3743#discussion_r501383596", "createdAt": "2020-10-08T00:28:25Z", "author": {"login": "msridhar"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationChecker.java", "diffHunk": "@@ -10,20 +13,71 @@\n  * An accumulation checker is one that accumulates some property: method calls, map keys, etc.\n  *\n  * <p>This class provides a basic accumulation analysis that can be extended to implement an\n- * accumulation type system. This accumulation analysis represents all facts as Strings. It\n- * automatically includes returns-receiver aliasing to precisely handle fluent APIs, but otherwise\n- * uses no alias analysis.\n+ * accumulation type system. This accumulation analysis represents all facts as Strings.\n+ *\n+ * <p>This class supports modular alias analyses. To choose the alias analyses that your\n+ * accumulation checker uses, override the {@link #createAliasAnalyses()} method. By default, the\n+ * only alias analysis used is Returns Receiver.\n  *\n  * <p>The primary extension point is the constructor of {@link AccumulationAnnotatedTypeFactory},\n  * which every subclass should override to provide custom annotations.\n  */\n public abstract class AccumulationChecker extends BaseTypeChecker {\n \n+    /**\n+     * Set of alias analyses that are enabled in this particular accumulation checker. Set to\n+     * non-null the first time {@link #isEnabled(AliasAnalysis)} is called, to allow the\n+     * implementation of {@link #createAliasAnalyses()} to be as simple as possible.\n+     */\n+    private @MonotonicNonNull EnumSet<AliasAnalysis> aliasAnalyses;\n+\n     @Override\n     protected LinkedHashSet<Class<? extends BaseTypeChecker>> getImmediateSubcheckerClasses() {\n         LinkedHashSet<Class<? extends BaseTypeChecker>> checkers =\n                 super.getImmediateSubcheckerClasses();\n-        checkers.add(ReturnsReceiverChecker.class);\n+        AliasAnalysis[] aliasAnalyses = createAliasAnalyses();\n+        for (AliasAnalysis aliasAnalysis : aliasAnalyses) {\n+            switch (aliasAnalysis) {\n+                case RETURNS_RECEIVER:\n+                    checkers.add(ReturnsReceiverChecker.class);\n+                    break;\n+            }\n+        }\n         return checkers;\n     }\n+\n+    /**\n+     * The alias analyses that an accumulation checker can support. To add support for a new alias\n+     * analysis, add a new item to this enum, modify the loop in #getImmediateSubcheckerClasses, and\n+     * then implement whatever functionality in the annotated type factory or transfer function that\n+     * your new alias analysis permits.\n+     */\n+    public enum AliasAnalysis {\n+        RETURNS_RECEIVER\n+    }\n+\n+    /**\n+     * Get the alias analyses that this checker should employ.\n+     *\n+     * @return the alias analyses\n+     */\n+    protected AliasAnalysis[] createAliasAnalyses(@UnderInitialization AccumulationChecker this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87431a194a3a462629ee3547be60481a1aae81bb"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2916c9f6261385f5fc84186c8582a70b482c41c1", "author": {"user": {"login": "kelloggm", "name": "Martin Kellogg"}}, "url": "https://github.com/typetools/checker-framework/commit/2916c9f6261385f5fc84186c8582a70b482c41c1", "committedDate": "2020-10-08T17:09:13Z", "message": "Merge branch 'master' of github.com:typetools/checker-framework into alias-analysis-flag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "460edd75a66553f009138e7c6631e0568ef9b6db", "author": {"user": {"login": "kelloggm", "name": "Martin Kellogg"}}, "url": "https://github.com/typetools/checker-framework/commit/460edd75a66553f009138e7c6631e0568ef9b6db", "committedDate": "2020-10-08T17:11:47Z", "message": "simplification suggested in PR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTQxMDEw", "url": "https://github.com/typetools/checker-framework/pull/3743#pullrequestreview-505141010", "createdAt": "2020-10-08T20:28:34Z", "commit": {"oid": "460edd75a66553f009138e7c6631e0568ef9b6db"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b774f3d879992374d6ef017b2af785cef32a3c4", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/4b774f3d879992374d6ef017b2af785cef32a3c4", "committedDate": "2020-10-09T03:09:58Z", "message": "Merge ../checker-framework-branch-master into alias-analysis-flag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2fe417ab31376fc5e307f7b6f412da94241f931", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/f2fe417ab31376fc5e307f7b6f412da94241f931", "committedDate": "2020-10-09T03:22:48Z", "message": "Documentation tweaks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MzMzNTc1", "url": "https://github.com/typetools/checker-framework/pull/3743#pullrequestreview-505333575", "createdAt": "2020-10-09T03:19:41Z", "commit": {"oid": "460edd75a66553f009138e7c6631e0568ef9b6db"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMzoxOTo0MVrOHe5lLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMzoxOTo0MVrOHe5lLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE2MjczMw==", "bodyText": "I had the same question as Manu when I read the code.  I think that using an array makes this less rather than more concise -- the EnumSet.of() and EnumSet.allOf() calls are slightly more concise.  Furthermore, it feels a bit convoluted, and clutters the code, to use an array that will be immediately converted to an EnumSet.", "url": "https://github.com/typetools/checker-framework/pull/3743#discussion_r502162733", "createdAt": "2020-10-09T03:19:41Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationChecker.java", "diffHunk": "@@ -10,20 +13,71 @@\n  * An accumulation checker is one that accumulates some property: method calls, map keys, etc.\n  *\n  * <p>This class provides a basic accumulation analysis that can be extended to implement an\n- * accumulation type system. This accumulation analysis represents all facts as Strings. It\n- * automatically includes returns-receiver aliasing to precisely handle fluent APIs, but otherwise\n- * uses no alias analysis.\n+ * accumulation type system. This accumulation analysis represents all facts as Strings.\n+ *\n+ * <p>This class supports modular alias analyses. To choose the alias analyses that your\n+ * accumulation checker uses, override the {@link #createAliasAnalyses()} method. By default, the\n+ * only alias analysis used is Returns Receiver.\n  *\n  * <p>The primary extension point is the constructor of {@link AccumulationAnnotatedTypeFactory},\n  * which every subclass should override to provide custom annotations.\n  */\n public abstract class AccumulationChecker extends BaseTypeChecker {\n \n+    /**\n+     * Set of alias analyses that are enabled in this particular accumulation checker. Set to\n+     * non-null the first time {@link #isEnabled(AliasAnalysis)} is called, to allow the\n+     * implementation of {@link #createAliasAnalyses()} to be as simple as possible.\n+     */\n+    private @MonotonicNonNull EnumSet<AliasAnalysis> aliasAnalyses;\n+\n     @Override\n     protected LinkedHashSet<Class<? extends BaseTypeChecker>> getImmediateSubcheckerClasses() {\n         LinkedHashSet<Class<? extends BaseTypeChecker>> checkers =\n                 super.getImmediateSubcheckerClasses();\n-        checkers.add(ReturnsReceiverChecker.class);\n+        AliasAnalysis[] aliasAnalyses = createAliasAnalyses();\n+        for (AliasAnalysis aliasAnalysis : aliasAnalyses) {\n+            switch (aliasAnalysis) {\n+                case RETURNS_RECEIVER:\n+                    checkers.add(ReturnsReceiverChecker.class);\n+                    break;\n+            }\n+        }\n         return checkers;\n     }\n+\n+    /**\n+     * The alias analyses that an accumulation checker can support. To add support for a new alias\n+     * analysis, add a new item to this enum, modify the loop in #getImmediateSubcheckerClasses, and\n+     * then implement whatever functionality in the annotated type factory or transfer function that\n+     * your new alias analysis permits.\n+     */\n+    public enum AliasAnalysis {\n+        RETURNS_RECEIVER\n+    }\n+\n+    /**\n+     * Get the alias analyses that this checker should employ.\n+     *\n+     * @return the alias analyses\n+     */\n+    protected AliasAnalysis[] createAliasAnalyses(@UnderInitialization AccumulationChecker this) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM4MzU5Ng=="}, "originalCommit": {"oid": "87431a194a3a462629ee3547be60481a1aae81bb"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MzM2NTU5", "url": "https://github.com/typetools/checker-framework/pull/3743#pullrequestreview-505336559", "createdAt": "2020-10-09T03:32:03Z", "commit": {"oid": "f2fe417ab31376fc5e307f7b6f412da94241f931"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMzozMjowM1rOHe5v6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMzozMjowM1rOHe5v6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE2NTQ4Mg==", "bodyText": "I think this should be TypeSystemError instead.", "url": "https://github.com/typetools/checker-framework/pull/3743#discussion_r502165482", "createdAt": "2020-10-09T03:32:03Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -84,6 +88,13 @@ protected AccumulationAnnotatedTypeFactory(\n             Class<? extends Annotation> bottom,\n             @Nullable Class<? extends Annotation> predicate) {\n         super(checker);\n+        if (!(checker instanceof AccumulationChecker)) {\n+            throw new BugInCF(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2fe417ab31376fc5e307f7b6f412da94241f931"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fd745ce4ad2680852c8306ff33ffc192134a2b1", "author": {"user": {"login": "kelloggm", "name": "Martin Kellogg"}}, "url": "https://github.com/typetools/checker-framework/commit/0fd745ce4ad2680852c8306ff33ffc192134a2b1", "committedDate": "2020-10-09T17:37:51Z", "message": "more simplifications from review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e39d1b0ebf5d801cab770c7a8bb62b5631c15e49", "author": {"user": {"login": "kelloggm", "name": "Martin Kellogg"}}, "url": "https://github.com/typetools/checker-framework/commit/e39d1b0ebf5d801cab770c7a8bb62b5631c15e49", "committedDate": "2020-10-09T17:45:38Z", "message": "fix merge conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16a5b5eeb189e295fa37c115dc2225b51011fb49", "author": {"user": {"login": "kelloggm", "name": "Martin Kellogg"}}, "url": "https://github.com/typetools/checker-framework/commit/16a5b5eeb189e295fa37c115dc2225b51011fb49", "committedDate": "2020-10-09T19:27:27Z", "message": "public -> protected for abstract class constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf64be4d493014ec51aacdf977876940a49ea586", "author": {"user": {"login": "kelloggm", "name": "Martin Kellogg"}}, "url": "https://github.com/typetools/checker-framework/commit/bf64be4d493014ec51aacdf977876940a49ea586", "committedDate": "2020-10-09T20:54:38Z", "message": "fix test checker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0410464f129961c0c76f1621ca2d20ec892cae9", "author": {"user": {"login": "kelloggm", "name": "Martin Kellogg"}}, "url": "https://github.com/typetools/checker-framework/commit/f0410464f129961c0c76f1621ca2d20ec892cae9", "committedDate": "2020-10-09T21:43:15Z", "message": "forgotten javadoc"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2562, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}