{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3ODI0MzMx", "number": 3883, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODoyNDowMVrOE25QMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODoyNDowMVrOE25QMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTk2NTkzOnYy", "diffSide": "RIGHT", "path": "docs/manual/advanced-features.tex", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODoyNDowMVrOHv7wQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODoyNDowMVrOHv7wQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAyNDEyOQ==", "bodyText": "alternatiev", "url": "https://github.com/typetools/checker-framework/pull/3883#discussion_r520024129", "createdAt": "2020-11-09T18:24:01Z", "author": {"login": "smillst"}, "path": "docs/manual/advanced-features.tex", "diffHunk": "@@ -381,14 +381,28 @@\n arguments (known as exception parameters in the Java Language Specification).\n \n Exception parameters default to the top type because they might catch an\n-exception thrown anywhere in the program.  If the Checker Framework\n-defaulted exception parameters some other type T (instead of the top type),\n-then the Checker Framework would need to issue a warning at every \\<throw>\n-statement whose argument might not be a subtype of T.  (An even more\n-precise analysis would be for the Checker Framework to compute the\n-feasibility of every pair of $\\langle$throw statement, catch\n-clauses$\\rangle$ in the program, but such an analysis might be expensive or\n-non-modular.)\n+exception thrown anywhere in the program.\n+\n+An alternate design for exception parameters would be to default exception\n+parameters some other type T (instead of the top type); then the Checker\n+Framework would need to issue a warning at every \\<throw> statement whose\n+argument might not be a subtype of T\\@.  A checker can implement this\n+alternate design by overriding a few methods.  The alternative is not\n+appropriate for all type systems.  The alternatiev is unsound for deep type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f8e5d15c742a08c9f41b4bb0a24add53500422b"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 911, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}