{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NDIwMzY0", "number": 3531, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDo1MjoxNVrOET5L1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDo1MjoxNVrOET5L1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjk1MzE5OnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/DOTCFGVisualizer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDo1MjoxNVrOG54l7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTo1NjozMVrOG6UW_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0OTIzMA==", "bodyText": "Here and below, now that the input can be an arbitrary object, we should call format on them to make sure they are escaped properly for output.", "url": "https://github.com/typetools/checker-framework/pull/3531#discussion_r463349230", "createdAt": "2020-07-31T00:52:15Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/DOTCFGVisualizer.java", "diffHunk": "@@ -124,7 +124,7 @@ public String visualizeNodes(\n     }\n \n     @Override\n-    protected String addEdge(long sId, long eId, String flowRule) {\n+    protected String addEdge(Object sId, Object eId, String flowRule) {\n         return \"    \" + sId + \" -> \" + eId + \" [label=\\\"\" + flowRule + \"\\\"];\" + lineSeparator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7b0eb0012b72c39bff53ba0e226f3b23f27208"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM5NzI1OQ==", "bodyText": "Can you clarify?  Currently, toString() is being called implicitly on sId and eId.  Are you suggesting that String.format should be used instead of String concatenation +?  I don't understand the problem that would prevent, so I must be missing something.", "url": "https://github.com/typetools/checker-framework/pull/3531#discussion_r463397259", "createdAt": "2020-07-31T04:20:21Z", "author": {"login": "mernst"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/DOTCFGVisualizer.java", "diffHunk": "@@ -124,7 +124,7 @@ public String visualizeNodes(\n     }\n \n     @Override\n-    protected String addEdge(long sId, long eId, String flowRule) {\n+    protected String addEdge(Object sId, Object eId, String flowRule) {\n         return \"    \" + sId + \" -> \" + eId + \" [label=\\\"\" + flowRule + \"\\\"];\" + lineSeparator;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0OTIzMA=="}, "originalCommit": {"oid": "2f7b0eb0012b72c39bff53ba0e226f3b23f27208"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwNDE1Ng==", "bodyText": "Sorry for not being explicit. I meant AbstractCFGVisualizer.format which takes an Object and turns it into a String usable for the corresponding format. This is important for DOT, where \" needs to be escaped.", "url": "https://github.com/typetools/checker-framework/pull/3531#discussion_r463804156", "createdAt": "2020-07-31T19:56:31Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/DOTCFGVisualizer.java", "diffHunk": "@@ -124,7 +124,7 @@ public String visualizeNodes(\n     }\n \n     @Override\n-    protected String addEdge(long sId, long eId, String flowRule) {\n+    protected String addEdge(Object sId, Object eId, String flowRule) {\n         return \"    \" + sId + \" -> \" + eId + \" [label=\\\"\" + flowRule + \"\\\"];\" + lineSeparator;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0OTIzMA=="}, "originalCommit": {"oid": "2f7b0eb0012b72c39bff53ba0e226f3b23f27208"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1621, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}