{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM4NzExOTQ1", "number": 4000, "title": "Deprecate `addAliasedAnnotation`; use `addAliasedTypeAnnotation`", "bodyText": "", "createdAt": "2020-12-13T03:02:18Z", "url": "https://github.com/typetools/checker-framework/pull/4000", "merged": true, "mergeCommit": {"oid": "5a684d0aed4cea4a90fef2f920099bdd3afac573"}, "closed": true, "closedAt": "2020-12-15T16:34:55Z", "author": {"login": "mernst"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdlgaKHAH2gAyNTM4NzExOTQ1Ojk0YzUyNzYzNmQ3NjNjZGQ5YWVkNGE5MDVlNzRmZGJiOTE3YTZmNGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmJEkzAH2gAyNTM4NzExOTQ1OmNmMDcyN2RhNDBmNjIzNDdhZmNiZTVhODAyMjJmNzQ1ODkxOTFhMTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "94c527636d763cdd9aed4a905e74fdbb917a6f4b", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/94c527636d763cdd9aed4a905e74fdbb917a6f4b", "committedDate": "2020-12-12T17:57:58Z", "message": "Deprecated `addAliasedAnnotation`; use `addAliasedTypeAnnotation`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d91f3663086e2329018be65c5e16362f4b7ff95", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/6d91f3663086e2329018be65c5e16362f4b7ff95", "committedDate": "2020-12-13T06:31:28Z", "message": "Merge ../checker-framework-branch-master into addAliasedTypeAnnotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f929392e9981ff18c17834bb4781948df174f2d", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/3f929392e9981ff18c17834bb4781948df174f2d", "committedDate": "2020-12-13T15:25:15Z", "message": "Merge ../checker-framework-branch-master into addAliasedTypeAnnotation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNjIzMjgy", "url": "https://github.com/typetools/checker-framework/pull/4000#pullrequestreview-551623282", "createdAt": "2020-12-14T17:01:59Z", "commit": {"oid": "3f929392e9981ff18c17834bb4781948df174f2d"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzowMjowMFrOIFaiQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzowOTowMlrOIFa3ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU0ODU0NA==", "bodyText": "type isn't a parameter name, so I'm not sure what it is referring to.", "url": "https://github.com/typetools/checker-framework/pull/4000#discussion_r542548544", "createdAt": "2020-12-14T17:02:00Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -2842,18 +2882,55 @@ protected void addAliasedAnnotation(\n      *     getting the alias from the canonical annotation\n      * @param ignorableElements a list of elements that can be safely dropped when the elements are\n      *     being copied over\n+     * @deprecated use {@code addAliasedTypeAnnotation}\n      */\n+    @Deprecated // use addAliasedTypeAnnotation\n     protected void addAliasedAnnotation(\n             Class<?> aliasClass,\n             Class<?> canonical,\n             boolean copyElements,\n             String... ignorableElements) {\n+        addAliasedTypeAnnotation(aliasClass, canonical, copyElements, ignorableElements);\n+    }\n+\n+    /**\n+     * Adds the annotation {@code aliasClass} as an alias for the canonical annotation {@code type}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f929392e9981ff18c17834bb4781948df174f2d"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1MTYyMQ==", "bodyText": "It's strange to name a variable which is an AnnotationMirror type. I would rename type to annotation or maybe canonicalAnno.", "url": "https://github.com/typetools/checker-framework/pull/4000#discussion_r542551621", "createdAt": "2020-12-14T17:06:03Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -2782,19 +2782,37 @@ public boolean isSupportedQualifier(String className) {\n      *\n      * <p>By specifying the alias/canonical relationship using this method, the elements of the\n      * alias are not preserved when the canonical annotation to use is constructed from the alias.\n-     * If you want the elements to be copied over as well, use {@link #addAliasedAnnotation(Class,\n-     * Class, boolean, String...)}.\n+     * If you want the elements to be copied over as well, use {@link\n+     * #addAliasedTypeAnnotation(Class, Class, boolean, String...)}.\n      *\n      * @param aliasClass the class of the aliased annotation\n      * @param type the canonical annotation\n+     * @deprecated use {@code addAliasedTypeAnnotation}\n      */\n+    @Deprecated // use addAliasedTypeAnnotation\n     protected void addAliasedAnnotation(Class<?> aliasClass, AnnotationMirror type) {\n+        addAliasedTypeAnnotation(aliasClass, type);\n+    }\n+\n+    /**\n+     * Adds the annotation {@code aliasClass} as an alias for the canonical annotation {@code type}\n+     * that will be used by the Checker Framework in the alias's place.\n+     *\n+     * <p>By specifying the alias/canonical relationship using this method, the elements of the\n+     * alias are not preserved when the canonical annotation to use is constructed from the alias.\n+     * If you want the elements to be copied over as well, use {@link\n+     * #addAliasedTypeAnnotation(Class, Class, boolean, String...)}.\n+     *\n+     * @param aliasClass the class of the aliased annotation\n+     * @param type the canonical annotation\n+     */\n+    protected void addAliasedTypeAnnotation(Class<?> aliasClass, AnnotationMirror type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f929392e9981ff18c17834bb4781948df174f2d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1Mzk1Ng==", "bodyText": "the elements is ignored =>  the elements are ignored", "url": "https://github.com/typetools/checker-framework/pull/4000#discussion_r542553956", "createdAt": "2020-12-14T17:09:02Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -2842,18 +2882,55 @@ protected void addAliasedAnnotation(\n      *     getting the alias from the canonical annotation\n      * @param ignorableElements a list of elements that can be safely dropped when the elements are\n      *     being copied over\n+     * @deprecated use {@code addAliasedTypeAnnotation}\n      */\n+    @Deprecated // use addAliasedTypeAnnotation\n     protected void addAliasedAnnotation(\n             Class<?> aliasClass,\n             Class<?> canonical,\n             boolean copyElements,\n             String... ignorableElements) {\n+        addAliasedTypeAnnotation(aliasClass, canonical, copyElements, ignorableElements);\n+    }\n+\n+    /**\n+     * Adds the annotation {@code aliasClass} as an alias for the canonical annotation {@code type}\n+     * that will be used by the Checker Framework in the alias's place.\n+     *\n+     * <p>You may specify the copyElements flag to indicate whether you want the elements of the\n+     * alias to be copied over when the canonical annotation is constructed as a copy of {@code\n+     * type}. Be careful that the framework will try to copy the elements by name matching, so make\n+     * sure that names and types of the elements to be copied over are exactly the same as the ones\n+     * in the canonical annotation. Otherwise, an 'Couldn't find element in annotation' error is\n+     * raised.\n+     *\n+     * <p>To facilitate the cases where some of the elements is ignored on purpose when constructing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f929392e9981ff18c17834bb4781948df174f2d"}, "originalPosition": 116}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cb296d793ae6b4c3218037c5c615884f999f095", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/7cb296d793ae6b4c3218037c5c615884f999f095", "committedDate": "2020-12-14T17:16:01Z", "message": "Merge ../checker-framework-branch-master into addAliasedTypeAnnotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf0727da40f62347afcbe5a80222f74589191a12", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/cf0727da40f62347afcbe5a80222f74589191a12", "committedDate": "2020-12-14T17:20:30Z", "message": "Improve formal parameter names"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2440, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}