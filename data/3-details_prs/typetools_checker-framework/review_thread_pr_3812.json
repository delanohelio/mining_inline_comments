{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3MDAwMDM1", "number": 3812, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTo0OTozMlrOEv_Zfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTo0OTozMlrOEv_Zfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzU3MjQ2OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTo0OTozMlrOHlSbQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTo0OTozMlrOHlSbQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MTI0OQ==", "bodyText": "I think you mean check the declaration annotations on the receiver rather than the type qualifiers.", "url": "https://github.com/typetools/checker-framework/pull/3812#discussion_r508861249", "createdAt": "2020-10-20T21:49:32Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java", "diffHunk": "@@ -4138,38 +4138,46 @@ protected void checkAccess(IdentifierTree node, Void p) {\n \n         AnnotatedTypeMirror receiver = atypeFactory.getReceiverType(tree);\n \n-        if (!isAccessAllowed(elem, receiver, tree)) {\n-            checker.reportError(node, \"unallowed.access\", elem, receiver);\n-        }\n+        checkAccessAllowed(elem, receiver, tree);\n     }\n \n     /**\n-     * Returns true if access is allowed, based on an @Unused annotation\n+     * Issues an error if access not allowed, based on an @Unused annotation.\n      *\n-     * @param field the field to be accessed, whose declaration might be annotated by @Unused\n-     * @param receiver the expression whose field is accessed\n+     * @param field the field to be accessed, whose declaration might be annotated by @Unused. It\n+     *     can also be (for example) {@code this}, in which case {@code receiver} is null.\n+     * @param receiverType the type of the expression whose field is accessed\n      * @param accessTree the access expression\n-     * @return true if access is allowed\n      */\n-    protected boolean isAccessAllowed(\n-            Element field, AnnotatedTypeMirror receiver, @FindDistinct ExpressionTree accessTree) {\n+    protected void checkAccessAllowed(\n+            Element field,\n+            AnnotatedTypeMirror receiverType,\n+            @FindDistinct ExpressionTree accessTree) {\n         AnnotationMirror unused = atypeFactory.getDeclAnnotation(field, Unused.class);\n         if (unused == null) {\n-            return true;\n+            return;\n         }\n \n         String when = AnnotationUtils.getElementValueClassName(unused, \"when\", false).toString();\n-        if (!AnnotationUtils.containsSameByName(receiver.getAnnotations(), when)) {\n-            return true;\n+\n+        // TODO: Don't just look at the receiver type, but at the receiver declaration.  (That will", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0075898f0a7deb6398a64830be817f05264d805c"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 988, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}