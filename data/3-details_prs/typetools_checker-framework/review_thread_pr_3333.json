{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzOTU2ODkx", "number": 3333, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjoxMToxOFrOEALELA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjoxMToyMFrOEALEQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjE2NzQ4OnYy", "diffSide": "RIGHT", "path": "checker/src/main/java/org/checkerframework/checker/nullness/NullnessAnnotatedTypeFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjoxMToxOFrOGbSbmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjoxMToxOFrOGbSbmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2NjcxMg==", "bodyText": "You can use org.checkerframework.javacutil.TreeUtils#isClassLiteral here.", "url": "https://github.com/typetools/checker-framework/pull/3333#discussion_r431266712", "createdAt": "2020-05-27T16:11:18Z", "author": {"login": "smillst"}, "path": "checker/src/main/java/org/checkerframework/checker/nullness/NullnessAnnotatedTypeFactory.java", "diffHunk": "@@ -300,8 +309,22 @@ public ParameterizedExecutableType methodFromUse(MethodInvocationTree tree) {\n         ParameterizedExecutableType mType = super.methodFromUse(tree);\n         AnnotatedExecutableType method = mType.executableType;\n \n+        // Special cases for method invocations with specific arguments.\n         systemGetPropertyHandler.handle(tree, method);\n         collectionToArrayHeuristics.handle(tree, method);\n+        // `MyClass.class.getCanonicalName()` is non-null.\n+        System.out.printf(\"tree: %s%n\", tree);\n+        if (TreeUtils.isMethodInvocation(tree, classGetCanonicalName, processingEnv)) {\n+            System.out.printf(\"is invocation%n\");\n+            ExpressionTree receiver = ((MemberSelectTree) tree.getMethodSelect()).getExpression();\n+            System.out.printf(\"receiver: %s%n\", receiver);\n+            if ((receiver instanceof MemberSelectTree)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e834a37ff46b97b12e203aac9620771f6d4c932a"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjE2NzcwOnYy", "diffSide": "RIGHT", "path": "checker/src/main/java/org/checkerframework/checker/nullness/NullnessAnnotatedTypeFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjoxMToyMFrOGbSbuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjoxMToyMFrOGbSbuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2Njc0Nw==", "bodyText": "The printf's should be removed.", "url": "https://github.com/typetools/checker-framework/pull/3333#discussion_r431266747", "createdAt": "2020-05-27T16:11:20Z", "author": {"login": "smillst"}, "path": "checker/src/main/java/org/checkerframework/checker/nullness/NullnessAnnotatedTypeFactory.java", "diffHunk": "@@ -300,8 +309,22 @@ public ParameterizedExecutableType methodFromUse(MethodInvocationTree tree) {\n         ParameterizedExecutableType mType = super.methodFromUse(tree);\n         AnnotatedExecutableType method = mType.executableType;\n \n+        // Special cases for method invocations with specific arguments.\n         systemGetPropertyHandler.handle(tree, method);\n         collectionToArrayHeuristics.handle(tree, method);\n+        // `MyClass.class.getCanonicalName()` is non-null.\n+        System.out.printf(\"tree: %s%n\", tree);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e834a37ff46b97b12e203aac9620771f6d4c932a"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1651, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}