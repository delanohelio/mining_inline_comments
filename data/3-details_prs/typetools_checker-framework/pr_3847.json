{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MzI4Njk1", "number": 3847, "title": "Define classes `SubtypeIsSubsetQualifierHierarchy` and `SubtypeIsSupersetQualifierHierarchy`", "bodyText": "Merge after #3846", "createdAt": "2020-11-02T21:25:21Z", "url": "https://github.com/typetools/checker-framework/pull/3847", "merged": true, "mergeCommit": {"oid": "e31687486c5cbeb80e8475b9be3e6e3dc3bd6227"}, "closed": true, "closedAt": "2020-11-05T00:52:03Z", "author": {"login": "mernst"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXZFXjgH2gAyNTE0MzI4Njk1OjUzNDc0N2M1NGEzMTI4ZTBiYTE5ZTVhNTljN2Y1ODBjOGJhZTZmMmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdY-A7qgFqTUyMjc5NzE0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "534747c54a3128e0ba19e5a59c7f580c8bae6f2e", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/534747c54a3128e0ba19e5a59c7f580c8bae6f2e", "committedDate": "2020-10-29T21:30:59Z", "message": "Document why nested class is not static"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85a767ea734ba453115498fbb605ea3075bf6d21", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/85a767ea734ba453115498fbb605ea3075bf6d21", "committedDate": "2020-11-02T16:04:29Z", "message": "Merge branch 'master' of github.com:mernst/checker-framework"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "170b589dbc48bea5243743789205d9795a74f719", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/170b589dbc48bea5243743789205d9795a74f719", "committedDate": "2020-11-02T19:03:49Z", "message": "Add argument to MostlyNoElementQualifierHierarchy operations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c48a6678228de47a8eee2e029c477d452fda36a", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/9c48a6678228de47a8eee2e029c477d452fda36a", "committedDate": "2020-11-02T19:05:40Z", "message": "Remove undesired comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7604690fd2743ea74d984c00bead6497893fbe16", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/7604690fd2743ea74d984c00bead6497893fbe16", "committedDate": "2020-11-02T19:13:37Z", "message": "Add changelog entry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "643364dc3e7748aa385e43060ad0ffba9717f209", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/643364dc3e7748aa385e43060ad0ffba9717f209", "committedDate": "2020-11-02T19:14:19Z", "message": "Use SubtypeIsSupersetQualifierHierarchy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8340227a8623c01990e8b25acfa9c0ff19db0363", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/8340227a8623c01990e8b25acfa9c0ff19db0363", "committedDate": "2020-11-02T19:15:54Z", "message": "Merge ../checker-framework-fork-mernst-branch-MostlyNoElementQualifierHierarchy-add-argument into subtype-set-operations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afe605fb92881aeec69a45656f5666050c3da531", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/afe605fb92881aeec69a45656f5666050c3da531", "committedDate": "2020-11-02T19:19:08Z", "message": "Add class SubtypeIsSubsetQualifierHierarchy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e16e2b6ba65f9d8a7bc7fb650386b1a4b32733b5", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/e16e2b6ba65f9d8a7bc7fb650386b1a4b32733b5", "committedDate": "2020-11-02T20:23:26Z", "message": "Add Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06f6423ed3db335f5442795460c4ae0d2947f9b1", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/06f6423ed3db335f5442795460c4ae0d2947f9b1", "committedDate": "2020-11-03T17:27:51Z", "message": "Merge remote-tracking branch 'origin/master' into subtype-set-operations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNzgxMTcw", "url": "https://github.com/typetools/checker-framework/pull/3847#pullrequestreview-522781170", "createdAt": "2020-11-03T18:44:04Z", "commit": {"oid": "06f6423ed3db335f5442795460c4ae0d2947f9b1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODo0NDowNFrOHs76RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODo0NzowMFrOHs8BRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg4MDk2NA==", "bodyText": "arguments should be elements.", "url": "https://github.com/typetools/checker-framework/pull/3847#discussion_r516880964", "createdAt": "2020-11-03T18:44:04Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/SubtypeIsSubsetQualifierHierarchy.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.checkerframework.framework.type;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.processing.ProcessingEnvironment;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.AnnotationValue;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.framework.qual.AnnotatedFor;\n+import org.checkerframework.framework.util.QualifierKind;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.BugInCF;\n+\n+/**\n+ * A {@link org.checkerframework.framework.type.QualifierHierarchy} where, when a qualifier has\n+ * arguments, the subtype relation is determined by a subset test on the arguments.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f6423ed3db335f5442795460c4ae0d2947f9b1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg4Mjc1OQ==", "bodyText": "This class could be changed to operate on lists of Objects rather than Strings. If you don't want to make that change, then the class comment should mention that the annotation element but be an array of strings.\n\\", "url": "https://github.com/typetools/checker-framework/pull/3847#discussion_r516882759", "createdAt": "2020-11-03T18:47:00Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/SubtypeIsSubsetQualifierHierarchy.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.checkerframework.framework.type;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.processing.ProcessingEnvironment;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.AnnotationValue;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.framework.qual.AnnotatedFor;\n+import org.checkerframework.framework.util.QualifierKind;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.BugInCF;\n+\n+/**\n+ * A {@link org.checkerframework.framework.type.QualifierHierarchy} where, when a qualifier has\n+ * arguments, the subtype relation is determined by a subset test on the arguments.\n+ *\n+ * <p>This assumes that if the lub or glb of two qualifiers has elements, then both of the arguments\n+ * had the same kind as the result does.\n+ */\n+@AnnotatedFor(\"nullness\")\n+public class SubtypeIsSubsetQualifierHierarchy extends MostlyNoElementQualifierHierarchy {\n+\n+    /** The processing environment; used for creating annotations. */\n+    ProcessingEnvironment processingEnv;\n+\n+    /**\n+     * Creates a SubtypeIsSubsetQualifierHierarchy from the given classes.\n+     *\n+     * @param qualifierClasses classes of annotations that are the qualifiers for this hierarchy\n+     * @param processingEnv processing environment\n+     */\n+    public SubtypeIsSubsetQualifierHierarchy(\n+            Collection<Class<? extends Annotation>> qualifierClasses,\n+            ProcessingEnvironment processingEnv) {\n+        super(qualifierClasses, processingEnv.getElementUtils());\n+        this.processingEnv = processingEnv;\n+    }\n+\n+    @Override\n+    protected boolean isSubtypeWithElements(\n+            AnnotationMirror subAnno,\n+            QualifierKind subKind,\n+            AnnotationMirror superAnno,\n+            QualifierKind superKind) {\n+        if (subKind == superKind) {\n+            List<String> superValues = extractValues(superAnno);\n+            List<String> subValues = extractValues(subAnno);\n+            return superValues.containsAll(subValues);\n+        }\n+        return subKind.isSubtypeOf(superKind);\n+    }\n+\n+    @Override\n+    protected AnnotationMirror leastUpperBoundWithElements(\n+            AnnotationMirror a1,\n+            QualifierKind qualifierKind1,\n+            AnnotationMirror a2,\n+            QualifierKind qualifierKind2,\n+            QualifierKind lubKind) {\n+        if (qualifierKind1 == qualifierKind2) {\n+            List<String> a1Values = extractValues(a1);\n+            List<String> a2Values = extractValues(a2);\n+            LinkedHashSet<String> set = new LinkedHashSet<>(a1Values);\n+            set.addAll(a2Values);\n+            return createAnnotationMirrorWithValue(lubKind, set);\n+        } else if (lubKind == qualifierKind1) {\n+            return a1;\n+        } else if (lubKind == qualifierKind2) {\n+            return a2;\n+        } else {\n+            throw new BugInCF(\n+                    \"Unexpected QualifierKinds %s %s\", qualifierKind1, qualifierKind2, lubKind);\n+        }\n+    }\n+\n+    @Override\n+    protected AnnotationMirror greatestLowerBoundWithElements(\n+            AnnotationMirror a1,\n+            QualifierKind qualifierKind1,\n+            AnnotationMirror a2,\n+            QualifierKind qualifierKind2,\n+            QualifierKind glbKind) {\n+        if (qualifierKind1 == qualifierKind2) {\n+            List<String> a1Values = extractValues(a1);\n+            List<String> a2Values = extractValues(a2);\n+            LinkedHashSet<String> set = new LinkedHashSet<>(a1Values);\n+            set.retainAll(a2Values);\n+            return createAnnotationMirrorWithValue(glbKind, set);\n+        } else if (glbKind == qualifierKind1) {\n+            return a1;\n+        } else if (glbKind == qualifierKind2) {\n+            return a2;\n+        } else {\n+            throw new BugInCF(\n+                    \"Unexpected QualifierKinds %s %s\", qualifierKind1, qualifierKind2, glbKind);\n+        }\n+    }\n+\n+    /**\n+     * Returns a mutable list containing the {@code values} element of the given annotation.\n+     *\n+     * @param anno an annotation\n+     * @return a mutable list containing the {@code values} element; may be the empty list\n+     */\n+    private List<String> extractValues(AnnotationMirror anno) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f6423ed3db335f5442795460c4ae0d2947f9b1"}, "originalPosition": 111}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbc612e5f68c9cf1ee7eb25bf79bbeaa190275b3", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/cbc612e5f68c9cf1ee7eb25bf79bbeaa190275b3", "committedDate": "2020-11-03T19:04:12Z", "message": "Improve documentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNzk3MTQ3", "url": "https://github.com/typetools/checker-framework/pull/3847#pullrequestreview-522797147", "createdAt": "2020-11-03T19:06:34Z", "commit": {"oid": "cbc612e5f68c9cf1ee7eb25bf79bbeaa190275b3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2478, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}