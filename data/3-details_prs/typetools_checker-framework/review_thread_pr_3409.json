{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNjA3NDk0", "number": 3409, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDozOTo0OVrOEKig0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDo1MDo1M1rOEKizrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDg2NjczOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/QualifierHierarchy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDozOTo1MFrOGro1Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDozOTo1MFrOGro1Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxMDk1OA==", "bodyText": "First is should be if.", "url": "https://github.com/typetools/checker-framework/pull/3409#discussion_r448410958", "createdAt": "2020-07-01T14:39:50Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/QualifierHierarchy.java", "diffHunk": "@@ -73,6 +73,16 @@ public int getWidth() {\n      */\n     public abstract AnnotationMirror getPolymorphicAnnotation(AnnotationMirror start);\n \n+    /**\n+     * Returns {@code true} is the qualifier is a polymorphic qualifier; otherwise, returns {@code\n+     * false}.\n+     *\n+     * @param qualifier qualifier\n+     * @return {@code true} is the qualifier is a polymorphic qualifier; otherwise, returns {@code", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a553fdde5297d1482025ba759e15f55c7aba54f"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDg4MzM2OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/util/MultiGraphQualifierHierarchy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDo0MzozNFrOGro_aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDo0MzozNFrOGro_aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxMzU0Nw==", "bodyText": "The This changed isn't clear. Maybe It will be changed to...? Or something else?", "url": "https://github.com/typetools/checker-framework/pull/3409#discussion_r448413547", "createdAt": "2020-07-01T14:43:34Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/util/MultiGraphQualifierHierarchy.java", "diffHunk": "@@ -91,16 +92,71 @@ public void addQualifier(AnnotationMirror qual) {\n                 return;\n             }\n \n-            Name pqtopclass = QualifierPolymorphism.getPolymorphicQualifierElement(qual);\n+            Name pqtopclass = getPolymorphicQualifierElement(qual);\n             if (pqtopclass != null) {\n-                AnnotationMirror pqtop =\n-                        AnnotationBuilder.fromName(atypeFactory.getElementUtils(), pqtopclass);\n-                // use given top (which might be PolymorphicQualifier) as key\n+                AnnotationMirror pqtop;\n+                if (pqtopclass.contentEquals(Annotation.class.getName())) {\n+                    // @PolymorphicQualifier with no value defaults to Annotation.class.\n+                    // That means there is only one top in the hierarchy. The top qualifier\n+                    // may not be known at this point, so use the qualifier itself.\n+                    // This changed to top in MultiGraphQualifierHierarchy.addPolyRelations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a553fdde5297d1482025ba759e15f55c7aba54f"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDg4NDgzOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/util/MultiGraphQualifierHierarchy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDo0Mzo1N1rOGrpAdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDo0Mzo1N1rOGrpAdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxMzgxNA==", "bodyText": "Spacing.", "url": "https://github.com/typetools/checker-framework/pull/3409#discussion_r448413814", "createdAt": "2020-07-01T14:43:57Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/util/MultiGraphQualifierHierarchy.java", "diffHunk": "@@ -91,16 +92,71 @@ public void addQualifier(AnnotationMirror qual) {\n                 return;\n             }\n \n-            Name pqtopclass = QualifierPolymorphism.getPolymorphicQualifierElement(qual);\n+            Name pqtopclass = getPolymorphicQualifierElement(qual);\n             if (pqtopclass != null) {\n-                AnnotationMirror pqtop =\n-                        AnnotationBuilder.fromName(atypeFactory.getElementUtils(), pqtopclass);\n-                // use given top (which might be PolymorphicQualifier) as key\n+                AnnotationMirror pqtop;\n+                if (pqtopclass.contentEquals(Annotation.class.getName())) {\n+                    // @PolymorphicQualifier with no value defaults to Annotation.class.\n+                    // That means there is only one top in the hierarchy. The top qualifier\n+                    // may not be known at this point, so use the qualifier itself.\n+                    // This changed to top in MultiGraphQualifierHierarchy.addPolyRelations\n+                    pqtop = qual;\n+                } else {\n+                    pqtop = AnnotationBuilder.fromName(atypeFactory.getElementUtils(), pqtopclass);\n+                }\n+                // use given top (which might be Annotation) as key\n                 this.polyQualifiers.put(pqtop, qual);\n             } else {\n                 supertypesDirect.put(qual, AnnotationUtils.createAnnotationSet());\n             }\n         }\n+        /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a553fdde5297d1482025ba759e15f55c7aba54f"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDg5NjE1OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/util/MultiGraphQualifierHierarchy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDo0NjoyNVrOGrpHfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDo0NjoyNVrOGrpHfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxNTYxMw==", "bodyText": "I would probably use entrySet and then use the key for poly and the value for maybeTop.", "url": "https://github.com/typetools/checker-framework/pull/3409#discussion_r448415613", "createdAt": "2020-07-01T14:46:25Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/util/MultiGraphQualifierHierarchy.java", "diffHunk": "@@ -564,77 +608,78 @@ protected void addPolyRelations(\n             return;\n         }\n \n+        // Handle the case where @PolymorphicQualifier uses the default value Annotation.class.\n+        if (polyQualifiers.size() == 1 && tops.size() == 1) {\n+            AnnotationMirror poly = polyQualifiers.keySet().iterator().next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a553fdde5297d1482025ba759e15f55c7aba54f"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDkxNTAwOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/qual/PolymorphicQualifier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDo1MDo1M1rOGrpTyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMDowODoyOFrOGsbj7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxODc2Mg==", "bodyText": "Can you explain why using Annotation.class makes this clearer? Using PolymorphicQualifier.class makes it a bit clearer to me that this is about polymorphism... using just Annotation.class doesn't give any hint. Checking for either one shouldn't make a difference, does it? If it does, can you improve the comment?", "url": "https://github.com/typetools/checker-framework/pull/3409#discussion_r448418762", "createdAt": "2020-07-01T14:50:53Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/qual/PolymorphicQualifier.java", "diffHunk": "@@ -25,8 +25,10 @@\n      * When multiple type hierarchies are supported by a single type system, then each polymorphic\n      * qualifier needs to indicate which sub-hierarchy it belongs to. Do so by passing a qualifier\n      * from the given hierarchy, by convention the top qualifier.\n+     *\n+     * @return the top qualifier in the hierarchy of this qualifier\n      */\n-    // We use the meaningless PolymorphicQualifier.class as default value and\n+    // We use the meaningless Annotation.class as default value and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a553fdde5297d1482025ba759e15f55c7aba54f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI0MjA5NQ==", "bodyText": "It doesn't matter what the default value is to the user.  The implementation is confusing because it is expecting the value of PolymorphicQualifier to be a top qualifier, but PolymorphicQualifier is a meta-annotation.  It's also confusing to get the PolymorphicQualifier meta-annotation and then look for PolymorphicQualifier again.", "url": "https://github.com/typetools/checker-framework/pull/3409#discussion_r449242095", "createdAt": "2020-07-02T20:08:28Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/qual/PolymorphicQualifier.java", "diffHunk": "@@ -25,8 +25,10 @@\n      * When multiple type hierarchies are supported by a single type system, then each polymorphic\n      * qualifier needs to indicate which sub-hierarchy it belongs to. Do so by passing a qualifier\n      * from the given hierarchy, by convention the top qualifier.\n+     *\n+     * @return the top qualifier in the hierarchy of this qualifier\n      */\n-    // We use the meaningless PolymorphicQualifier.class as default value and\n+    // We use the meaningless Annotation.class as default value and", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxODc2Mg=="}, "originalCommit": {"oid": "9a553fdde5297d1482025ba759e15f55c7aba54f"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1723, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}