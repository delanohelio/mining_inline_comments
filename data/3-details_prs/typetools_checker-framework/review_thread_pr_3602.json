{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5ODkyMzg4", "number": 3602, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMToxMTo1MlrOEbIZ_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMToxNjo0OVrOEbIeHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODg0NzMzOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/value/ValueTreeAnnotator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMToxMTo1MlrOHE-ABQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwNDo0ODo0NlrOHJf3vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk3MjE2NQ==", "bodyText": "I suggest moving this block of code down so that it appears immediately after String.length() is handled.", "url": "https://github.com/typetools/checker-framework/pull/3602#discussion_r474972165", "createdAt": "2020-08-21T21:11:52Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/value/ValueTreeAnnotator.java", "diffHunk": "@@ -399,6 +399,18 @@ public Void visitMethodInvocation(MethodInvocationTree tree, AnnotatedTypeMirror\n             }\n         }\n \n+        if (atypeFactory\n+                .getMethodIdentifier()\n+                .isArrayGetLengthInvocation(tree, atypeFactory.getProcessingEnv())) {\n+            List<? extends ExpressionTree> args = tree.getArguments();\n+            AnnotatedTypeMirror argType = atypeFactory.getAnnotatedType(args.get(0));\n+            AnnotationMirror resultAnno = atypeFactory.createArrayLengthResultAnnotation(argType);\n+            if (resultAnno != null) {\n+                type.replaceAnnotation(resultAnno);\n+            }\n+            return null;\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cb10a4396c1411d23f8d3973aaeb5b3cff60962"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk3MjI0Ng==", "bodyText": "That will make the flow of this method more clear.", "url": "https://github.com/typetools/checker-framework/pull/3602#discussion_r474972246", "createdAt": "2020-08-21T21:12:03Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/value/ValueTreeAnnotator.java", "diffHunk": "@@ -399,6 +399,18 @@ public Void visitMethodInvocation(MethodInvocationTree tree, AnnotatedTypeMirror\n             }\n         }\n \n+        if (atypeFactory\n+                .getMethodIdentifier()\n+                .isArrayGetLengthInvocation(tree, atypeFactory.getProcessingEnv())) {\n+            List<? extends ExpressionTree> args = tree.getArguments();\n+            AnnotatedTypeMirror argType = atypeFactory.getAnnotatedType(args.get(0));\n+            AnnotationMirror resultAnno = atypeFactory.createArrayLengthResultAnnotation(argType);\n+            if (resultAnno != null) {\n+                type.replaceAnnotation(resultAnno);\n+            }\n+            return null;\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk3MjE2NQ=="}, "originalCommit": {"oid": "2cb10a4396c1411d23f8d3973aaeb5b3cff60962"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcxNDYwNA==", "bodyText": "I agree and I tried moving it down but the tests fail. This happens because methodIsStaticallyExecutable() return false at line 430 for Array.getLength() method. Do you think this is another issue? If so I'll try fixing it as a part of another PR.", "url": "https://github.com/typetools/checker-framework/pull/3602#discussion_r479714604", "createdAt": "2020-08-30T03:06:14Z", "author": {"login": "PRITI1999"}, "path": "framework/src/main/java/org/checkerframework/common/value/ValueTreeAnnotator.java", "diffHunk": "@@ -399,6 +399,18 @@ public Void visitMethodInvocation(MethodInvocationTree tree, AnnotatedTypeMirror\n             }\n         }\n \n+        if (atypeFactory\n+                .getMethodIdentifier()\n+                .isArrayGetLengthInvocation(tree, atypeFactory.getProcessingEnv())) {\n+            List<? extends ExpressionTree> args = tree.getArguments();\n+            AnnotatedTypeMirror argType = atypeFactory.getAnnotatedType(args.get(0));\n+            AnnotationMirror resultAnno = atypeFactory.createArrayLengthResultAnnotation(argType);\n+            if (resultAnno != null) {\n+                type.replaceAnnotation(resultAnno);\n+            }\n+            return null;\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk3MjE2NQ=="}, "originalCommit": {"oid": "2cb10a4396c1411d23f8d3973aaeb5b3cff60962"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcyMTQwNA==", "bodyText": "I agree that methodIsStaticallyExecutable() should return true for Array.getLength().  Thank you for reporting the problem.\nI believe I have fixed it for you so that you are not blocked.", "url": "https://github.com/typetools/checker-framework/pull/3602#discussion_r479721404", "createdAt": "2020-08-30T04:48:46Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/value/ValueTreeAnnotator.java", "diffHunk": "@@ -399,6 +399,18 @@ public Void visitMethodInvocation(MethodInvocationTree tree, AnnotatedTypeMirror\n             }\n         }\n \n+        if (atypeFactory\n+                .getMethodIdentifier()\n+                .isArrayGetLengthInvocation(tree, atypeFactory.getProcessingEnv())) {\n+            List<? extends ExpressionTree> args = tree.getArguments();\n+            AnnotatedTypeMirror argType = atypeFactory.getAnnotatedType(args.get(0));\n+            AnnotationMirror resultAnno = atypeFactory.createArrayLengthResultAnnotation(argType);\n+            if (resultAnno != null) {\n+                type.replaceAnnotation(resultAnno);\n+            }\n+            return null;\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk3MjE2NQ=="}, "originalCommit": {"oid": "2cb10a4396c1411d23f8d3973aaeb5b3cff60962"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODg1MTI5OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/value/ValueTransfer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMToxMzo0NlrOHE-Cfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMToxNTozNVrOHE-E-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk3Mjc5OA==", "bodyText": "Rather than checking for these in every place that refineStringAtLengthInvocation or refineArrayAtGetLengthInvocation might be called, I suggest creating one refineAtLengthInvocation method that then dispatches to those two methods (or just inlines their logic).", "url": "https://github.com/typetools/checker-framework/pull/3602#discussion_r474972798", "createdAt": "2020-08-21T21:13:46Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/value/ValueTransfer.java", "diffHunk": "@@ -1340,7 +1357,16 @@ private void addAnnotationToStore(CFStore store, AnnotationMirror anno, Node nod\n             if (node instanceof FieldAccessNode) {\n                 refineArrayAtLengthAccess((FieldAccessNode) internal, store);\n             } else if (node instanceof MethodInvocationNode) {\n-                refineStringAtLengthInvocation((MethodInvocationNode) internal, store);\n+                MethodInvocationNode miNode = (MethodInvocationNode) node;\n+                if (atypefactory\n+                        .getMethodIdentifier()\n+                        .isStringLengthMethod(miNode.getTarget().getMethod())) {\n+                    refineStringAtLengthInvocation(miNode, store);\n+                } else if (atypefactory\n+                        .getMethodIdentifier()\n+                        .isArrayGetLengthMethod(miNode.getTarget().getMethod())) {\n+                    refineArrayAtGetLengthInvocation(miNode, store);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cb10a4396c1411d23f8d3973aaeb5b3cff60962"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk3MzQzMw==", "bodyText": "Since there is also a refineAtLengthAccess method that implements the logic for both, I suggest renaming that method to refineAtLengthAccessImpl and making the wrapper method called refineAtLengthAccess. That wrapper method should take a MethodInvocationTree and check what method is actually being invoked, and then call refineAtLengthAccessImpl with the appropriate arguments.", "url": "https://github.com/typetools/checker-framework/pull/3602#discussion_r474973433", "createdAt": "2020-08-21T21:15:35Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/value/ValueTransfer.java", "diffHunk": "@@ -1340,7 +1357,16 @@ private void addAnnotationToStore(CFStore store, AnnotationMirror anno, Node nod\n             if (node instanceof FieldAccessNode) {\n                 refineArrayAtLengthAccess((FieldAccessNode) internal, store);\n             } else if (node instanceof MethodInvocationNode) {\n-                refineStringAtLengthInvocation((MethodInvocationNode) internal, store);\n+                MethodInvocationNode miNode = (MethodInvocationNode) node;\n+                if (atypefactory\n+                        .getMethodIdentifier()\n+                        .isStringLengthMethod(miNode.getTarget().getMethod())) {\n+                    refineStringAtLengthInvocation(miNode, store);\n+                } else if (atypefactory\n+                        .getMethodIdentifier()\n+                        .isArrayGetLengthMethod(miNode.getTarget().getMethod())) {\n+                    refineArrayAtGetLengthInvocation(miNode, store);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk3Mjc5OA=="}, "originalCommit": {"oid": "2cb10a4396c1411d23f8d3973aaeb5b3cff60962"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODg1NzkwOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/value/ValueMethodIdentifier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMToxNjo0OVrOHE-Glw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMToxNjo0OVrOHE-Glw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk3Mzg0Nw==", "bodyText": "Rather than adding these to the end of the file, please put them with the corresponding methods for String#length.", "url": "https://github.com/typetools/checker-framework/pull/3602#discussion_r474973847", "createdAt": "2020-08-21T21:16:49Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/value/ValueMethodIdentifier.java", "diffHunk": "@@ -78,4 +82,26 @@ public boolean isEndsWithMethod(ExecutableElement method) {\n     public boolean isArraysCopyOfInvocation(Tree tree, ProcessingEnvironment processingEnv) {\n         return TreeUtils.isMethodInvocation(tree, copyOfMethod, processingEnv);\n     }\n+\n+    /**\n+     * Determines whether a tree is an invocation of the {@code Array.getLength()} method.\n+     *\n+     * @param tree tree to check\n+     * @param processingEnv the processing environment\n+     * @return true iff the argument is an invocation of {@code Array.getLength()} method\n+     */\n+    public boolean isArrayGetLengthInvocation(Tree tree, ProcessingEnvironment processingEnv) {\n+        return TreeUtils.isMethodInvocation(tree, getLengthMethod, processingEnv);\n+    }\n+\n+    /**\n+     * Determines whether a method is the {@code Array.getLength()} method.\n+     *\n+     * @param method the element to check\n+     * @return true iff the argument method is {@code Array.getLength()} method\n+     */\n+    public boolean isArrayGetLengthMethod(ExecutableElement method) {\n+        // equals (rather than ElementUtils.ismethod) because String.length cannot be overridden\n+        return method.equals(getLengthMethod);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cb10a4396c1411d23f8d3973aaeb5b3cff60962"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1012, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}