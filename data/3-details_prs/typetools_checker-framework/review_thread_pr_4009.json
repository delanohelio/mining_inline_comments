{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM4OTgyNTUx", "number": 4009, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODo1MjowNFrOFFwFkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODo1MjowNFrOFFwFkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTc1MDU3OnYy", "diffSide": "RIGHT", "path": "checker/src/main/java/org/checkerframework/checker/formatter/qual/ConversionCategory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODo1MjowNFrOIGaveA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODo1MjowNFrOIGaveA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYwMDUwNA==", "bodyText": "I think you can delete this comments now?", "url": "https://github.com/typetools/checker-framework/pull/4009#discussion_r543600504", "createdAt": "2020-12-15T18:52:04Z", "author": {"login": "smillst"}, "path": "checker/src/main/java/org/checkerframework/checker/formatter/qual/ConversionCategory.java", "diffHunk": "@@ -131,7 +134,57 @@\n      */\n     ConversionCategory(@Nullable String chars, Class<?> @Nullable ... types) {\n         this.chars = chars;\n-        this.types = types;\n+        if (types == null) {\n+            this.types = types;\n+        } else {\n+            List<Class<?>> typesWithPrimitives = new ArrayList<>();\n+            for (Class<?> type : types) {\n+                typesWithPrimitives.add(type);\n+                Class<?> unwrapped = unwrapPrimitive(type);\n+                if (unwrapped != null) {\n+                    typesWithPrimitives.add(unwrapped);\n+                }\n+            }\n+            this.types = typesWithPrimitives.toArray(new Class<?>[typesWithPrimitives.size()]);\n+        }\n+    }\n+\n+    /**\n+     * If the given class is a primitive wrapper, return the corresponding primitive class.\n+     * Otherwise return null.\n+     *\n+     * @param c a class\n+     * @return the unwrapped primitive, or null\n+     */\n+    // With this @SuppressWarnings annotation, `./gradlew :checker-qual:checkNullness` yields\n+    // nullness:unneeded.suppression.\n+    // @SuppressWarnings(\"nullness:return.type.incompatible\") // Checker Framework bug?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f55d2af942a653d3690b5181644aa29a5a65591c"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 854, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}