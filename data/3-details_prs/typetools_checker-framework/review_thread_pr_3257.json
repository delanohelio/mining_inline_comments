{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDM4Njc0", "number": 3257, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1Njo1M1rODx9Q3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTo1ODo1N1rOD1c3Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzEwNTU5OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1Njo1M1rOGFuF-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1Njo1M1rOGFuF-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1MTI1OQ==", "bodyText": "This comment doesn't convey what the routine does.  Please make it more specific.  The same feedback applies to other comments in the file.", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r408651259", "createdAt": "2020-04-15T07:56:53Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.checkerframework.framework.stub;\n+\n+import com.github.javaparser.ParseResult;\n+import com.github.javaparser.ParserConfiguration;\n+import com.github.javaparser.ast.*;\n+import com.github.javaparser.ast.body.*;\n+import com.github.javaparser.ast.expr.MemberValuePair;\n+import com.github.javaparser.ast.expr.NormalAnnotationExpr;\n+import com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.visitor.ModifierVisitor;\n+import com.github.javaparser.utils.ParserCollectionStrategy;\n+import com.github.javaparser.utils.ProjectRoot;\n+import com.github.javaparser.utils.SourceRoot;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+/**\n+ * Process Java source files in a directory to produce minimal stub files, by removing:\n+ *\n+ * <ol>\n+ *   <li>everything that is private or package-private,\n+ *   <li>all comments, except for an initial copyright header,\n+ *   <li>all method bodies,\n+ *   <li>all field initializers,\n+ *   <li>all initializer blocks,\n+ *   <li>attributes to the {@code Deprecated} annotation (to be Java 8 compatible).\n+ * </ol>\n+ */\n+public class JavaStubifier {\n+    /**\n+     * Processes each provided command-line argument.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc4dbf06cc68bfcd2d05c68f5137a87fcf074688"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzEwNTg5OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1Njo1NlrOGFuGJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1Njo1NlrOGFuGJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1MTMwMA==", "bodyText": "Please say what they are: one or more directories.", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r408651300", "createdAt": "2020-04-15T07:56:56Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.checkerframework.framework.stub;\n+\n+import com.github.javaparser.ParseResult;\n+import com.github.javaparser.ParserConfiguration;\n+import com.github.javaparser.ast.*;\n+import com.github.javaparser.ast.body.*;\n+import com.github.javaparser.ast.expr.MemberValuePair;\n+import com.github.javaparser.ast.expr.NormalAnnotationExpr;\n+import com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.visitor.ModifierVisitor;\n+import com.github.javaparser.utils.ParserCollectionStrategy;\n+import com.github.javaparser.utils.ProjectRoot;\n+import com.github.javaparser.utils.SourceRoot;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+/**\n+ * Process Java source files in a directory to produce minimal stub files, by removing:\n+ *\n+ * <ol>\n+ *   <li>everything that is private or package-private,\n+ *   <li>all comments, except for an initial copyright header,\n+ *   <li>all method bodies,\n+ *   <li>all field initializers,\n+ *   <li>all initializer blocks,\n+ *   <li>attributes to the {@code Deprecated} annotation (to be Java 8 compatible).\n+ * </ol>\n+ */\n+public class JavaStubifier {\n+    /**\n+     * Processes each provided command-line argument.\n+     *\n+     * @param args command-line arguments", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc4dbf06cc68bfcd2d05c68f5137a87fcf074688"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzExMDU2OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1ODoxNlrOGFuJKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1ODoxNlrOGFuJKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1MjA3Mw==", "bodyText": "What is a \"source root\"?\n(Also, here and elsewhere clarify \"process\".", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r408652073", "createdAt": "2020-04-15T07:58:16Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.checkerframework.framework.stub;\n+\n+import com.github.javaparser.ParseResult;\n+import com.github.javaparser.ParserConfiguration;\n+import com.github.javaparser.ast.*;\n+import com.github.javaparser.ast.body.*;\n+import com.github.javaparser.ast.expr.MemberValuePair;\n+import com.github.javaparser.ast.expr.NormalAnnotationExpr;\n+import com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.visitor.ModifierVisitor;\n+import com.github.javaparser.utils.ParserCollectionStrategy;\n+import com.github.javaparser.utils.ProjectRoot;\n+import com.github.javaparser.utils.SourceRoot;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+/**\n+ * Process Java source files in a directory to produce minimal stub files, by removing:\n+ *\n+ * <ol>\n+ *   <li>everything that is private or package-private,\n+ *   <li>all comments, except for an initial copyright header,\n+ *   <li>all method bodies,\n+ *   <li>all field initializers,\n+ *   <li>all initializer blocks,\n+ *   <li>attributes to the {@code Deprecated} annotation (to be Java 8 compatible).\n+ * </ol>\n+ */\n+public class JavaStubifier {\n+    /**\n+     * Processes each provided command-line argument.\n+     *\n+     * @param args command-line arguments\n+     */\n+    public static void main(String[] args) {\n+        if (args.length < 1) {\n+            System.err.println(\"Usage: provide one or more directory names to process\");\n+            System.exit(1);\n+        }\n+        for (String dir : args) {\n+            process(dir);\n+        }\n+    }\n+\n+    /**\n+     * Process the given directory.\n+     *\n+     * @param dir directory to process\n+     */\n+    private static void process(String dir) {\n+        Path root = Paths.get(dir);\n+\n+        ParserConfiguration conf = new ParserConfiguration();\n+        MinimizationVisitor sm = new MinimizationVisitor();\n+\n+        ProjectRoot projectRoot = new ParserCollectionStrategy().collect(root);\n+        projectRoot\n+                .getSourceRoots()\n+                .forEach(\n+                        sourceRoot -> {\n+                            try {\n+                                sourceRoot.parse(\"\", conf, new MinimizationCallback(sm));\n+                            } catch (IOException e) {\n+                                System.err.println(\"IOException: \" + e);\n+                            }\n+                        });\n+    }\n+\n+    /** Callback to process one source root. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc4dbf06cc68bfcd2d05c68f5137a87fcf074688"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzExNjA0OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1OTo0N1rOGFuMnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1OTo0N1rOGFuMnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1Mjk1Ng==", "bodyText": "Nit: I would rename Minimization to Minimize or Minimizer throughout, to make the terminology shorter and more active.", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r408652956", "createdAt": "2020-04-15T07:59:47Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.checkerframework.framework.stub;\n+\n+import com.github.javaparser.ParseResult;\n+import com.github.javaparser.ParserConfiguration;\n+import com.github.javaparser.ast.*;\n+import com.github.javaparser.ast.body.*;\n+import com.github.javaparser.ast.expr.MemberValuePair;\n+import com.github.javaparser.ast.expr.NormalAnnotationExpr;\n+import com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.visitor.ModifierVisitor;\n+import com.github.javaparser.utils.ParserCollectionStrategy;\n+import com.github.javaparser.utils.ProjectRoot;\n+import com.github.javaparser.utils.SourceRoot;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+/**\n+ * Process Java source files in a directory to produce minimal stub files, by removing:\n+ *\n+ * <ol>\n+ *   <li>everything that is private or package-private,\n+ *   <li>all comments, except for an initial copyright header,\n+ *   <li>all method bodies,\n+ *   <li>all field initializers,\n+ *   <li>all initializer blocks,\n+ *   <li>attributes to the {@code Deprecated} annotation (to be Java 8 compatible).\n+ * </ol>\n+ */\n+public class JavaStubifier {\n+    /**\n+     * Processes each provided command-line argument.\n+     *\n+     * @param args command-line arguments\n+     */\n+    public static void main(String[] args) {\n+        if (args.length < 1) {\n+            System.err.println(\"Usage: provide one or more directory names to process\");\n+            System.exit(1);\n+        }\n+        for (String dir : args) {\n+            process(dir);\n+        }\n+    }\n+\n+    /**\n+     * Process the given directory.\n+     *\n+     * @param dir directory to process\n+     */\n+    private static void process(String dir) {\n+        Path root = Paths.get(dir);\n+\n+        ParserConfiguration conf = new ParserConfiguration();\n+        MinimizationVisitor sm = new MinimizationVisitor();\n+\n+        ProjectRoot projectRoot = new ParserCollectionStrategy().collect(root);\n+        projectRoot\n+                .getSourceRoots()\n+                .forEach(\n+                        sourceRoot -> {\n+                            try {\n+                                sourceRoot.parse(\"\", conf, new MinimizationCallback(sm));\n+                            } catch (IOException e) {\n+                                System.err.println(\"IOException: \" + e);\n+                            }\n+                        });\n+    }\n+\n+    /** Callback to process one source root. */\n+    private static class MinimizationCallback implements SourceRoot.Callback {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc4dbf06cc68bfcd2d05c68f5137a87fcf074688"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzEyODQzOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODowMzoxNlrOGFuUcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODowMzoxNlrOGFuUcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1NDk2MA==", "bodyText": "Does it do so in place?", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r408654960", "createdAt": "2020-04-15T08:03:16Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.checkerframework.framework.stub;\n+\n+import com.github.javaparser.ParseResult;\n+import com.github.javaparser.ParserConfiguration;\n+import com.github.javaparser.ast.*;\n+import com.github.javaparser.ast.body.*;\n+import com.github.javaparser.ast.expr.MemberValuePair;\n+import com.github.javaparser.ast.expr.NormalAnnotationExpr;\n+import com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.visitor.ModifierVisitor;\n+import com.github.javaparser.utils.ParserCollectionStrategy;\n+import com.github.javaparser.utils.ProjectRoot;\n+import com.github.javaparser.utils.SourceRoot;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+/**\n+ * Process Java source files in a directory to produce minimal stub files, by removing:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc4dbf06cc68bfcd2d05c68f5137a87fcf074688"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjU4MjMyOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNzoyNDowOVrOGH6dhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNzoyNDowOVrOGH6dhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1MTA0NQ==", "bodyText": "Can you either remove this or add a flag to turn it on/off?", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r410951045", "createdAt": "2020-04-19T17:24:09Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.checkerframework.framework.stub;\n+\n+import com.github.javaparser.ParseResult;\n+import com.github.javaparser.ParserConfiguration;\n+import com.github.javaparser.ast.*;\n+import com.github.javaparser.ast.body.*;\n+import com.github.javaparser.ast.expr.MemberValuePair;\n+import com.github.javaparser.ast.expr.NormalAnnotationExpr;\n+import com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.visitor.ModifierVisitor;\n+import com.github.javaparser.utils.ParserCollectionStrategy;\n+import com.github.javaparser.utils.ProjectRoot;\n+import com.github.javaparser.utils.SourceRoot;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+/**\n+ * Process Java source files in a directory to produce minimal stub files, by removing:\n+ *\n+ * <ol>\n+ *   <li>everything that is private or package-private,\n+ *   <li>all comments, except for an initial copyright header,\n+ *   <li>all method bodies,\n+ *   <li>all field initializers,\n+ *   <li>all initializer blocks,\n+ *   <li>attributes to the {@code Deprecated} annotation (to be Java 8 compatible).\n+ * </ol>\n+ */\n+public class JavaStubifier {\n+    /**\n+     * Processes each provided command-line argument.\n+     *\n+     * @param args command-line arguments\n+     */\n+    public static void main(String[] args) {\n+        if (args.length < 1) {\n+            System.err.println(\"Usage: provide one or more directory names to process\");\n+            System.exit(1);\n+        }\n+        for (String dir : args) {\n+            process(dir);\n+        }\n+    }\n+\n+    /**\n+     * Process the given directory.\n+     *\n+     * @param dir directory to process\n+     */\n+    private static void process(String dir) {\n+        Path root = Paths.get(dir);\n+\n+        ParserConfiguration conf = new ParserConfiguration();\n+        MinimizationVisitor sm = new MinimizationVisitor();\n+\n+        ProjectRoot projectRoot = new ParserCollectionStrategy().collect(root);\n+        projectRoot\n+                .getSourceRoots()\n+                .forEach(\n+                        sourceRoot -> {\n+                            try {\n+                                sourceRoot.parse(\"\", conf, new MinimizationCallback(sm));\n+                            } catch (IOException e) {\n+                                System.err.println(\"IOException: \" + e);\n+                            }\n+                        });\n+    }\n+\n+    /** Callback to process one source root. */\n+    private static class MinimizationCallback implements SourceRoot.Callback {\n+        private final MinimizationVisitor sm;\n+\n+        public MinimizationCallback(MinimizationVisitor sm) {\n+            this.sm = sm;\n+        }\n+\n+        @Override\n+        public Result process(\n+                Path localPath, Path absolutePath, ParseResult<CompilationUnit> result) {\n+            Result res = Result.SAVE;\n+            System.out.printf(\"Minimizing %s%n\", absolutePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11786e844af937a1349d935494d61766e07cebb9"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Mjc2MjYzOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOToxOToxMFrOGH7vHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzo0MDoyNVrOGIgDzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3MTkzNA==", "bodyText": "I had to add this; otherwise, the interface java files were just removed.  Methods in interfaces are public even if they are not marked as such.  An interface could have a default method whose body should be removed, so we may want to fix this some other way.", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r410971934", "createdAt": "2020-04-19T19:19:10Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package org.checkerframework.framework.stub;\n+\n+import com.github.javaparser.ParseResult;\n+import com.github.javaparser.ast.*;\n+import com.github.javaparser.ast.body.*;\n+import com.github.javaparser.ast.expr.MemberValuePair;\n+import com.github.javaparser.ast.expr.NormalAnnotationExpr;\n+import com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.visitor.ModifierVisitor;\n+import com.github.javaparser.utils.ParserCollectionStrategy;\n+import com.github.javaparser.utils.ProjectRoot;\n+import com.github.javaparser.utils.SourceRoot;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+/**\n+ * Process Java source files in a directory to produce, in-place, minimal stub files. Removes:\n+ *\n+ * <ol>\n+ *   <li>everything that is private or package-private,\n+ *   <li>all comments, except for an initial copyright header,\n+ *   <li>all method bodies,\n+ *   <li>all field initializers,\n+ *   <li>all initializer blocks,\n+ *   <li>attributes to the {@code Deprecated} annotation (to be Java 8 compatible).\n+ * </ol>\n+ */\n+public class JavaStubifier {\n+    /**\n+     * Processes each provided command-line argument.\n+     *\n+     * @param args command-line arguments: directories to process\n+     */\n+    public static void main(String[] args) {\n+        if (args.length < 1) {\n+            System.err.println(\"Usage: provide one or more directory names to process\");\n+            System.exit(1);\n+        }\n+        for (String arg : args) {\n+            process(arg);\n+        }\n+    }\n+\n+    /**\n+     * Process the given directory.\n+     *\n+     * @param dir directory to process\n+     */\n+    private static void process(String dir) {\n+        Path root = Paths.get(dir);\n+        MinimizerCallback mc = new MinimizerCallback();\n+        ProjectRoot projectRoot = new ParserCollectionStrategy().collect(root);\n+\n+        projectRoot\n+                .getSourceRoots()\n+                .forEach(\n+                        sourceRoot -> {\n+                            try {\n+                                sourceRoot.parse(\"\", mc);\n+                            } catch (IOException e) {\n+                                System.err.println(\"IOException: \" + e);\n+                            }\n+                        });\n+    }\n+\n+    /** Callback to process each Java file. */\n+    private static class MinimizerCallback implements SourceRoot.Callback {\n+        /** The visitor instance. */\n+        private final MinimizerVisitor mv;\n+\n+        /** Create a MinimizerCallback instance. */\n+        public MinimizerCallback() {\n+            this.mv = new MinimizerVisitor();\n+        }\n+\n+        @Override\n+        public Result process(\n+                Path localPath, Path absolutePath, ParseResult<CompilationUnit> result) {\n+            Result res = Result.SAVE;\n+            // System.out.printf(\"Minimizing %s%n\", absolutePath);\n+            Optional<CompilationUnit> opt = result.getResult();\n+            if (opt.isPresent()) {\n+                CompilationUnit cu = opt.get();\n+                // this somehow only removes comments except the\n+                // first one, and copyright headers are kept\n+                cu.getComments().forEach(Node::remove);\n+                mv.visit(cu, null);\n+                if (cu.findAll(ClassOrInterfaceDeclaration.class).isEmpty()\n+                        && cu.findAll(AnnotationDeclaration.class).isEmpty()\n+                        && cu.findAll(EnumDeclaration.class).isEmpty()\n+                        && !absolutePath.endsWith(\"package-info.java\")) {\n+                    // All content is removed, delete this file.\n+                    new File(absolutePath.toUri()).delete();\n+                    res = Result.DONT_SAVE;\n+                }\n+            }\n+            return res;\n+        }\n+    }\n+\n+    /** Visitor to processes one compilation unit. */\n+    private static class MinimizerVisitor extends ModifierVisitor<Void> {\n+        @Override\n+        public ClassOrInterfaceDeclaration visit(ClassOrInterfaceDeclaration cid, Void arg) {\n+            if (cid.isInterface()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7882f94ab2fb720d9dba83232b403c3469de9c"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4NzUyMw==", "bodyText": "The logic in removeIfPrivateOrPkgPrivate looks at the visibility of the interface itself and removes an interface if it is private or package private.\nIf the interface itself isn't visible, why should we keep it?\nWhich interface did you look at?", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r410987523", "createdAt": "2020-04-19T20:44:34Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package org.checkerframework.framework.stub;\n+\n+import com.github.javaparser.ParseResult;\n+import com.github.javaparser.ast.*;\n+import com.github.javaparser.ast.body.*;\n+import com.github.javaparser.ast.expr.MemberValuePair;\n+import com.github.javaparser.ast.expr.NormalAnnotationExpr;\n+import com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.visitor.ModifierVisitor;\n+import com.github.javaparser.utils.ParserCollectionStrategy;\n+import com.github.javaparser.utils.ProjectRoot;\n+import com.github.javaparser.utils.SourceRoot;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+/**\n+ * Process Java source files in a directory to produce, in-place, minimal stub files. Removes:\n+ *\n+ * <ol>\n+ *   <li>everything that is private or package-private,\n+ *   <li>all comments, except for an initial copyright header,\n+ *   <li>all method bodies,\n+ *   <li>all field initializers,\n+ *   <li>all initializer blocks,\n+ *   <li>attributes to the {@code Deprecated} annotation (to be Java 8 compatible).\n+ * </ol>\n+ */\n+public class JavaStubifier {\n+    /**\n+     * Processes each provided command-line argument.\n+     *\n+     * @param args command-line arguments: directories to process\n+     */\n+    public static void main(String[] args) {\n+        if (args.length < 1) {\n+            System.err.println(\"Usage: provide one or more directory names to process\");\n+            System.exit(1);\n+        }\n+        for (String arg : args) {\n+            process(arg);\n+        }\n+    }\n+\n+    /**\n+     * Process the given directory.\n+     *\n+     * @param dir directory to process\n+     */\n+    private static void process(String dir) {\n+        Path root = Paths.get(dir);\n+        MinimizerCallback mc = new MinimizerCallback();\n+        ProjectRoot projectRoot = new ParserCollectionStrategy().collect(root);\n+\n+        projectRoot\n+                .getSourceRoots()\n+                .forEach(\n+                        sourceRoot -> {\n+                            try {\n+                                sourceRoot.parse(\"\", mc);\n+                            } catch (IOException e) {\n+                                System.err.println(\"IOException: \" + e);\n+                            }\n+                        });\n+    }\n+\n+    /** Callback to process each Java file. */\n+    private static class MinimizerCallback implements SourceRoot.Callback {\n+        /** The visitor instance. */\n+        private final MinimizerVisitor mv;\n+\n+        /** Create a MinimizerCallback instance. */\n+        public MinimizerCallback() {\n+            this.mv = new MinimizerVisitor();\n+        }\n+\n+        @Override\n+        public Result process(\n+                Path localPath, Path absolutePath, ParseResult<CompilationUnit> result) {\n+            Result res = Result.SAVE;\n+            // System.out.printf(\"Minimizing %s%n\", absolutePath);\n+            Optional<CompilationUnit> opt = result.getResult();\n+            if (opt.isPresent()) {\n+                CompilationUnit cu = opt.get();\n+                // this somehow only removes comments except the\n+                // first one, and copyright headers are kept\n+                cu.getComments().forEach(Node::remove);\n+                mv.visit(cu, null);\n+                if (cu.findAll(ClassOrInterfaceDeclaration.class).isEmpty()\n+                        && cu.findAll(AnnotationDeclaration.class).isEmpty()\n+                        && cu.findAll(EnumDeclaration.class).isEmpty()\n+                        && !absolutePath.endsWith(\"package-info.java\")) {\n+                    // All content is removed, delete this file.\n+                    new File(absolutePath.toUri()).delete();\n+                    res = Result.DONT_SAVE;\n+                }\n+            }\n+            return res;\n+        }\n+    }\n+\n+    /** Visitor to processes one compilation unit. */\n+    private static class MinimizerVisitor extends ModifierVisitor<Void> {\n+        @Override\n+        public ClassOrInterfaceDeclaration visit(ClassOrInterfaceDeclaration cid, Void arg) {\n+            if (cid.isInterface()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3MTkzNA=="}, "originalCommit": {"oid": "5c7882f94ab2fb720d9dba83232b403c3469de9c"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk5MzgxMg==", "bodyText": "java.util.Map, for example, is remove in MinimizerCallback#process because it has no methods marked as public or protected.\nIt's fine to remove the interface the interface is private or package private, which I suppose you can do by calling removeIfPrivateOrPkgPrivate before the return below.", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r410993812", "createdAt": "2020-04-19T21:20:27Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package org.checkerframework.framework.stub;\n+\n+import com.github.javaparser.ParseResult;\n+import com.github.javaparser.ast.*;\n+import com.github.javaparser.ast.body.*;\n+import com.github.javaparser.ast.expr.MemberValuePair;\n+import com.github.javaparser.ast.expr.NormalAnnotationExpr;\n+import com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.visitor.ModifierVisitor;\n+import com.github.javaparser.utils.ParserCollectionStrategy;\n+import com.github.javaparser.utils.ProjectRoot;\n+import com.github.javaparser.utils.SourceRoot;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+/**\n+ * Process Java source files in a directory to produce, in-place, minimal stub files. Removes:\n+ *\n+ * <ol>\n+ *   <li>everything that is private or package-private,\n+ *   <li>all comments, except for an initial copyright header,\n+ *   <li>all method bodies,\n+ *   <li>all field initializers,\n+ *   <li>all initializer blocks,\n+ *   <li>attributes to the {@code Deprecated} annotation (to be Java 8 compatible).\n+ * </ol>\n+ */\n+public class JavaStubifier {\n+    /**\n+     * Processes each provided command-line argument.\n+     *\n+     * @param args command-line arguments: directories to process\n+     */\n+    public static void main(String[] args) {\n+        if (args.length < 1) {\n+            System.err.println(\"Usage: provide one or more directory names to process\");\n+            System.exit(1);\n+        }\n+        for (String arg : args) {\n+            process(arg);\n+        }\n+    }\n+\n+    /**\n+     * Process the given directory.\n+     *\n+     * @param dir directory to process\n+     */\n+    private static void process(String dir) {\n+        Path root = Paths.get(dir);\n+        MinimizerCallback mc = new MinimizerCallback();\n+        ProjectRoot projectRoot = new ParserCollectionStrategy().collect(root);\n+\n+        projectRoot\n+                .getSourceRoots()\n+                .forEach(\n+                        sourceRoot -> {\n+                            try {\n+                                sourceRoot.parse(\"\", mc);\n+                            } catch (IOException e) {\n+                                System.err.println(\"IOException: \" + e);\n+                            }\n+                        });\n+    }\n+\n+    /** Callback to process each Java file. */\n+    private static class MinimizerCallback implements SourceRoot.Callback {\n+        /** The visitor instance. */\n+        private final MinimizerVisitor mv;\n+\n+        /** Create a MinimizerCallback instance. */\n+        public MinimizerCallback() {\n+            this.mv = new MinimizerVisitor();\n+        }\n+\n+        @Override\n+        public Result process(\n+                Path localPath, Path absolutePath, ParseResult<CompilationUnit> result) {\n+            Result res = Result.SAVE;\n+            // System.out.printf(\"Minimizing %s%n\", absolutePath);\n+            Optional<CompilationUnit> opt = result.getResult();\n+            if (opt.isPresent()) {\n+                CompilationUnit cu = opt.get();\n+                // this somehow only removes comments except the\n+                // first one, and copyright headers are kept\n+                cu.getComments().forEach(Node::remove);\n+                mv.visit(cu, null);\n+                if (cu.findAll(ClassOrInterfaceDeclaration.class).isEmpty()\n+                        && cu.findAll(AnnotationDeclaration.class).isEmpty()\n+                        && cu.findAll(EnumDeclaration.class).isEmpty()\n+                        && !absolutePath.endsWith(\"package-info.java\")) {\n+                    // All content is removed, delete this file.\n+                    new File(absolutePath.toUri()).delete();\n+                    res = Result.DONT_SAVE;\n+                }\n+            }\n+            return res;\n+        }\n+    }\n+\n+    /** Visitor to processes one compilation unit. */\n+    private static class MinimizerVisitor extends ModifierVisitor<Void> {\n+        @Override\n+        public ClassOrInterfaceDeclaration visit(ClassOrInterfaceDeclaration cid, Void arg) {\n+            if (cid.isInterface()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3MTkzNA=="}, "originalCommit": {"oid": "5c7882f94ab2fb720d9dba83232b403c3469de9c"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwMzY3OA==", "bodyText": "I've added some logic to handle implicitly public members. Map looks fine to me and private interfaces are still removed.", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r411003678", "createdAt": "2020-04-19T22:16:36Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package org.checkerframework.framework.stub;\n+\n+import com.github.javaparser.ParseResult;\n+import com.github.javaparser.ast.*;\n+import com.github.javaparser.ast.body.*;\n+import com.github.javaparser.ast.expr.MemberValuePair;\n+import com.github.javaparser.ast.expr.NormalAnnotationExpr;\n+import com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.visitor.ModifierVisitor;\n+import com.github.javaparser.utils.ParserCollectionStrategy;\n+import com.github.javaparser.utils.ProjectRoot;\n+import com.github.javaparser.utils.SourceRoot;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+/**\n+ * Process Java source files in a directory to produce, in-place, minimal stub files. Removes:\n+ *\n+ * <ol>\n+ *   <li>everything that is private or package-private,\n+ *   <li>all comments, except for an initial copyright header,\n+ *   <li>all method bodies,\n+ *   <li>all field initializers,\n+ *   <li>all initializer blocks,\n+ *   <li>attributes to the {@code Deprecated} annotation (to be Java 8 compatible).\n+ * </ol>\n+ */\n+public class JavaStubifier {\n+    /**\n+     * Processes each provided command-line argument.\n+     *\n+     * @param args command-line arguments: directories to process\n+     */\n+    public static void main(String[] args) {\n+        if (args.length < 1) {\n+            System.err.println(\"Usage: provide one or more directory names to process\");\n+            System.exit(1);\n+        }\n+        for (String arg : args) {\n+            process(arg);\n+        }\n+    }\n+\n+    /**\n+     * Process the given directory.\n+     *\n+     * @param dir directory to process\n+     */\n+    private static void process(String dir) {\n+        Path root = Paths.get(dir);\n+        MinimizerCallback mc = new MinimizerCallback();\n+        ProjectRoot projectRoot = new ParserCollectionStrategy().collect(root);\n+\n+        projectRoot\n+                .getSourceRoots()\n+                .forEach(\n+                        sourceRoot -> {\n+                            try {\n+                                sourceRoot.parse(\"\", mc);\n+                            } catch (IOException e) {\n+                                System.err.println(\"IOException: \" + e);\n+                            }\n+                        });\n+    }\n+\n+    /** Callback to process each Java file. */\n+    private static class MinimizerCallback implements SourceRoot.Callback {\n+        /** The visitor instance. */\n+        private final MinimizerVisitor mv;\n+\n+        /** Create a MinimizerCallback instance. */\n+        public MinimizerCallback() {\n+            this.mv = new MinimizerVisitor();\n+        }\n+\n+        @Override\n+        public Result process(\n+                Path localPath, Path absolutePath, ParseResult<CompilationUnit> result) {\n+            Result res = Result.SAVE;\n+            // System.out.printf(\"Minimizing %s%n\", absolutePath);\n+            Optional<CompilationUnit> opt = result.getResult();\n+            if (opt.isPresent()) {\n+                CompilationUnit cu = opt.get();\n+                // this somehow only removes comments except the\n+                // first one, and copyright headers are kept\n+                cu.getComments().forEach(Node::remove);\n+                mv.visit(cu, null);\n+                if (cu.findAll(ClassOrInterfaceDeclaration.class).isEmpty()\n+                        && cu.findAll(AnnotationDeclaration.class).isEmpty()\n+                        && cu.findAll(EnumDeclaration.class).isEmpty()\n+                        && !absolutePath.endsWith(\"package-info.java\")) {\n+                    // All content is removed, delete this file.\n+                    new File(absolutePath.toUri()).delete();\n+                    res = Result.DONT_SAVE;\n+                }\n+            }\n+            return res;\n+        }\n+    }\n+\n+    /** Visitor to processes one compilation unit. */\n+    private static class MinimizerVisitor extends ModifierVisitor<Void> {\n+        @Override\n+        public ClassOrInterfaceDeclaration visit(ClassOrInterfaceDeclaration cid, Void arg) {\n+            if (cid.isInterface()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3MTkzNA=="}, "originalCommit": {"oid": "5c7882f94ab2fb720d9dba83232b403c3469de9c"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2NzA1Mg==", "bodyText": "Thanks!", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r411567052", "createdAt": "2020-04-20T17:40:25Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package org.checkerframework.framework.stub;\n+\n+import com.github.javaparser.ParseResult;\n+import com.github.javaparser.ast.*;\n+import com.github.javaparser.ast.body.*;\n+import com.github.javaparser.ast.expr.MemberValuePair;\n+import com.github.javaparser.ast.expr.NormalAnnotationExpr;\n+import com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.visitor.ModifierVisitor;\n+import com.github.javaparser.utils.ParserCollectionStrategy;\n+import com.github.javaparser.utils.ProjectRoot;\n+import com.github.javaparser.utils.SourceRoot;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+/**\n+ * Process Java source files in a directory to produce, in-place, minimal stub files. Removes:\n+ *\n+ * <ol>\n+ *   <li>everything that is private or package-private,\n+ *   <li>all comments, except for an initial copyright header,\n+ *   <li>all method bodies,\n+ *   <li>all field initializers,\n+ *   <li>all initializer blocks,\n+ *   <li>attributes to the {@code Deprecated} annotation (to be Java 8 compatible).\n+ * </ol>\n+ */\n+public class JavaStubifier {\n+    /**\n+     * Processes each provided command-line argument.\n+     *\n+     * @param args command-line arguments: directories to process\n+     */\n+    public static void main(String[] args) {\n+        if (args.length < 1) {\n+            System.err.println(\"Usage: provide one or more directory names to process\");\n+            System.exit(1);\n+        }\n+        for (String arg : args) {\n+            process(arg);\n+        }\n+    }\n+\n+    /**\n+     * Process the given directory.\n+     *\n+     * @param dir directory to process\n+     */\n+    private static void process(String dir) {\n+        Path root = Paths.get(dir);\n+        MinimizerCallback mc = new MinimizerCallback();\n+        ProjectRoot projectRoot = new ParserCollectionStrategy().collect(root);\n+\n+        projectRoot\n+                .getSourceRoots()\n+                .forEach(\n+                        sourceRoot -> {\n+                            try {\n+                                sourceRoot.parse(\"\", mc);\n+                            } catch (IOException e) {\n+                                System.err.println(\"IOException: \" + e);\n+                            }\n+                        });\n+    }\n+\n+    /** Callback to process each Java file. */\n+    private static class MinimizerCallback implements SourceRoot.Callback {\n+        /** The visitor instance. */\n+        private final MinimizerVisitor mv;\n+\n+        /** Create a MinimizerCallback instance. */\n+        public MinimizerCallback() {\n+            this.mv = new MinimizerVisitor();\n+        }\n+\n+        @Override\n+        public Result process(\n+                Path localPath, Path absolutePath, ParseResult<CompilationUnit> result) {\n+            Result res = Result.SAVE;\n+            // System.out.printf(\"Minimizing %s%n\", absolutePath);\n+            Optional<CompilationUnit> opt = result.getResult();\n+            if (opt.isPresent()) {\n+                CompilationUnit cu = opt.get();\n+                // this somehow only removes comments except the\n+                // first one, and copyright headers are kept\n+                cu.getComments().forEach(Node::remove);\n+                mv.visit(cu, null);\n+                if (cu.findAll(ClassOrInterfaceDeclaration.class).isEmpty()\n+                        && cu.findAll(AnnotationDeclaration.class).isEmpty()\n+                        && cu.findAll(EnumDeclaration.class).isEmpty()\n+                        && !absolutePath.endsWith(\"package-info.java\")) {\n+                    // All content is removed, delete this file.\n+                    new File(absolutePath.toUri()).delete();\n+                    res = Result.DONT_SAVE;\n+                }\n+            }\n+            return res;\n+        }\n+    }\n+\n+    /** Visitor to processes one compilation unit. */\n+    private static class MinimizerVisitor extends ModifierVisitor<Void> {\n+        @Override\n+        public ClassOrInterfaceDeclaration visit(ClassOrInterfaceDeclaration cid, Void arg) {\n+            if (cid.isInterface()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3MTkzNA=="}, "originalCommit": {"oid": "5c7882f94ab2fb720d9dba83232b403c3469de9c"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2OTMwNDY5OnYy", "diffSide": "RIGHT", "path": "docs/manual/annotating-libraries.tex", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMDoxMTozMFrOGKQ_YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMDoxMTozMFrOGKQ_YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQxNzMxMw==", "bodyText": "@mernst Is this the right command to rename the java files to astub files?", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r413417313", "createdAt": "2020-04-23T00:11:30Z", "author": {"login": "wmdietl"}, "path": "docs/manual/annotating-libraries.tex", "diffHunk": "@@ -633,6 +633,32 @@\n % Furthermore, a programmer must search the stub file\n % for a given method rather than just skimming a few pages of method signatures.\n \n+Alternatively, you can minimize source files to make them more suitable as stub files.\n+Use the \\<JavaStubifier> to convert, in-place, all \\<.java> files in given directories into\n+minimal stub files.\n+\n+\\begin{Verbatim}\n+  mkdir project-stubs\n+  cp -R project/src project-stubs\n+  java -cp $CHECKERFRAMEWORK/checker/dist/checker.jar org.checkerframework.framework.stub.JavaStubifier project-stubs\n+  find project-stubs -type f -name \"*.java\" -exec rename 's/.java$/.astub/' {} \\;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfbc9c45551f1b1a0f907315c80f3c413d9423a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3Mzc0MDEwOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTo1ODo1N1rOGK5sHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDozNjo1N1rOGK7D1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4NDEyNw==", "bodyText": "This is removing AbstractStringBuilder because it is a package private class.  However, some of the methods are exposed in public classes.", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r414084127", "createdAt": "2020-04-23T19:58:57Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "diffHunk": "@@ -0,0 +1,197 @@\n+package org.checkerframework.framework.stub;\n+\n+import com.github.javaparser.ParseResult;\n+import com.github.javaparser.ast.*;\n+import com.github.javaparser.ast.body.*;\n+import com.github.javaparser.ast.expr.MemberValuePair;\n+import com.github.javaparser.ast.expr.NormalAnnotationExpr;\n+import com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.visitor.ModifierVisitor;\n+import com.github.javaparser.utils.ParserCollectionStrategy;\n+import com.github.javaparser.utils.ProjectRoot;\n+import com.github.javaparser.utils.SourceRoot;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+/**\n+ * Process Java source files in a directory to produce, in-place, minimal stub files.\n+ *\n+ * <p>To process a file means to remove:\n+ *\n+ * <ol>\n+ *   <li>everything that is private or package-private,\n+ *   <li>all comments, except for an initial copyright header,\n+ *   <li>all method bodies,\n+ *   <li>all field initializers,\n+ *   <li>all initializer blocks,\n+ *   <li>attributes to the {@code Deprecated} annotation (to be Java 8 compatible).\n+ * </ol>\n+ */\n+public class JavaStubifier {\n+    /**\n+     * Processes each provided command-line argument; see class documentation for details.\n+     *\n+     * @param args command-line arguments: directories to process\n+     */\n+    public static void main(String[] args) {\n+        if (args.length < 1) {\n+            System.err.println(\"Usage: provide one or more directory names to process\");\n+            System.exit(1);\n+        }\n+        for (String arg : args) {\n+            process(arg);\n+        }\n+    }\n+\n+    /**\n+     * Process each file in the given directory; see class documentation for details.\n+     *\n+     * @param dir directory to process\n+     */\n+    private static void process(String dir) {\n+        Path root = Paths.get(dir);\n+        MinimizerCallback mc = new MinimizerCallback();\n+        ProjectRoot projectRoot = new ParserCollectionStrategy().collect(root);\n+\n+        projectRoot\n+                .getSourceRoots()\n+                .forEach(\n+                        sourceRoot -> {\n+                            try {\n+                                sourceRoot.parse(\"\", mc);\n+                            } catch (IOException e) {\n+                                System.err.println(\"IOException: \" + e);\n+                            }\n+                        });\n+    }\n+\n+    /** Callback to process each Java file; see class documentation for details. */\n+    private static class MinimizerCallback implements SourceRoot.Callback {\n+        /** The visitor instance. */\n+        private final MinimizerVisitor mv;\n+\n+        /** Create a MinimizerCallback instance. */\n+        public MinimizerCallback() {\n+            this.mv = new MinimizerVisitor();\n+        }\n+\n+        @Override\n+        public Result process(\n+                Path localPath, Path absolutePath, ParseResult<CompilationUnit> result) {\n+            Result res = Result.SAVE;\n+            // System.out.printf(\"Minimizing %s%n\", absolutePath);\n+            Optional<CompilationUnit> opt = result.getResult();\n+            if (opt.isPresent()) {\n+                CompilationUnit cu = opt.get();\n+                // this somehow only removes comments except the\n+                // first one, and copyright headers are kept\n+                cu.getComments().forEach(Node::remove);\n+                mv.visit(cu, null);\n+                if (cu.findAll(ClassOrInterfaceDeclaration.class).isEmpty()\n+                        && cu.findAll(AnnotationDeclaration.class).isEmpty()\n+                        && cu.findAll(EnumDeclaration.class).isEmpty()\n+                        && !absolutePath.endsWith(\"package-info.java\")) {\n+                    // All content is removed, delete this file.\n+                    new File(absolutePath.toUri()).delete();\n+                    res = Result.DONT_SAVE;\n+                }\n+            }\n+            return res;\n+        }\n+    }\n+\n+    /** Visitor to process one compilation unit; see class documentation for details. */\n+    private static class MinimizerVisitor extends ModifierVisitor<Void> {\n+        /** Whether to consider members implicitly public. */\n+        private boolean implicitlyPublic = false;\n+\n+        @Override\n+        public ClassOrInterfaceDeclaration visit(ClassOrInterfaceDeclaration cid, Void arg) {\n+            boolean prevIP = implicitlyPublic;\n+            if (cid.isInterface()) {\n+                // All members of interfaces are implicitly public.\n+                implicitlyPublic = true;\n+            }\n+            super.visit(cid, arg);\n+            removeIfPrivateOrPkgPrivate(cid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfbc9c45551f1b1a0f907315c80f3c413d9423a"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEwMjY4MA==", "bodyText": "@mernst Thanks for noticing this!\nSo it looks like we can probably never remove a class. Even a private inner class can have a public subclass within the same outer class:\nimport org.checkerframework.checker.nullness.qual.Nullable;\nclass Demo {\n    private class Internal {\n        public void foo(@Nullable Object p) {}\n    }\n    public class Public extends Internal {}\n  \n    void bar(Public p) {\n        p.foo(null);\n    }\n}\nThe public inner class could get exposed, so we need to keep it to maintain annotations from it.\nSimilarly, for AbstractStringBuilder, even though nobody from outside the package can refer to that class, there can be visible subclasses.\nI'll remove that line for classes.\nWe kind-of have the same problem with methods: if a package-private method uses an inheritable annotation (like @Pure), the method affects overriding methods that might become public.\nSo we should also stop removing package-private methods.\nIt's still fine to remove private methods, because they cannot be overridden.\nRemoving private and package-private fields still seems ok to me.\nAny other cases I'm missing?", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r414102680", "createdAt": "2020-04-23T20:30:26Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "diffHunk": "@@ -0,0 +1,197 @@\n+package org.checkerframework.framework.stub;\n+\n+import com.github.javaparser.ParseResult;\n+import com.github.javaparser.ast.*;\n+import com.github.javaparser.ast.body.*;\n+import com.github.javaparser.ast.expr.MemberValuePair;\n+import com.github.javaparser.ast.expr.NormalAnnotationExpr;\n+import com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.visitor.ModifierVisitor;\n+import com.github.javaparser.utils.ParserCollectionStrategy;\n+import com.github.javaparser.utils.ProjectRoot;\n+import com.github.javaparser.utils.SourceRoot;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+/**\n+ * Process Java source files in a directory to produce, in-place, minimal stub files.\n+ *\n+ * <p>To process a file means to remove:\n+ *\n+ * <ol>\n+ *   <li>everything that is private or package-private,\n+ *   <li>all comments, except for an initial copyright header,\n+ *   <li>all method bodies,\n+ *   <li>all field initializers,\n+ *   <li>all initializer blocks,\n+ *   <li>attributes to the {@code Deprecated} annotation (to be Java 8 compatible).\n+ * </ol>\n+ */\n+public class JavaStubifier {\n+    /**\n+     * Processes each provided command-line argument; see class documentation for details.\n+     *\n+     * @param args command-line arguments: directories to process\n+     */\n+    public static void main(String[] args) {\n+        if (args.length < 1) {\n+            System.err.println(\"Usage: provide one or more directory names to process\");\n+            System.exit(1);\n+        }\n+        for (String arg : args) {\n+            process(arg);\n+        }\n+    }\n+\n+    /**\n+     * Process each file in the given directory; see class documentation for details.\n+     *\n+     * @param dir directory to process\n+     */\n+    private static void process(String dir) {\n+        Path root = Paths.get(dir);\n+        MinimizerCallback mc = new MinimizerCallback();\n+        ProjectRoot projectRoot = new ParserCollectionStrategy().collect(root);\n+\n+        projectRoot\n+                .getSourceRoots()\n+                .forEach(\n+                        sourceRoot -> {\n+                            try {\n+                                sourceRoot.parse(\"\", mc);\n+                            } catch (IOException e) {\n+                                System.err.println(\"IOException: \" + e);\n+                            }\n+                        });\n+    }\n+\n+    /** Callback to process each Java file; see class documentation for details. */\n+    private static class MinimizerCallback implements SourceRoot.Callback {\n+        /** The visitor instance. */\n+        private final MinimizerVisitor mv;\n+\n+        /** Create a MinimizerCallback instance. */\n+        public MinimizerCallback() {\n+            this.mv = new MinimizerVisitor();\n+        }\n+\n+        @Override\n+        public Result process(\n+                Path localPath, Path absolutePath, ParseResult<CompilationUnit> result) {\n+            Result res = Result.SAVE;\n+            // System.out.printf(\"Minimizing %s%n\", absolutePath);\n+            Optional<CompilationUnit> opt = result.getResult();\n+            if (opt.isPresent()) {\n+                CompilationUnit cu = opt.get();\n+                // this somehow only removes comments except the\n+                // first one, and copyright headers are kept\n+                cu.getComments().forEach(Node::remove);\n+                mv.visit(cu, null);\n+                if (cu.findAll(ClassOrInterfaceDeclaration.class).isEmpty()\n+                        && cu.findAll(AnnotationDeclaration.class).isEmpty()\n+                        && cu.findAll(EnumDeclaration.class).isEmpty()\n+                        && !absolutePath.endsWith(\"package-info.java\")) {\n+                    // All content is removed, delete this file.\n+                    new File(absolutePath.toUri()).delete();\n+                    res = Result.DONT_SAVE;\n+                }\n+            }\n+            return res;\n+        }\n+    }\n+\n+    /** Visitor to process one compilation unit; see class documentation for details. */\n+    private static class MinimizerVisitor extends ModifierVisitor<Void> {\n+        /** Whether to consider members implicitly public. */\n+        private boolean implicitlyPublic = false;\n+\n+        @Override\n+        public ClassOrInterfaceDeclaration visit(ClassOrInterfaceDeclaration cid, Void arg) {\n+            boolean prevIP = implicitlyPublic;\n+            if (cid.isInterface()) {\n+                // All members of interfaces are implicitly public.\n+                implicitlyPublic = true;\n+            }\n+            super.visit(cid, arg);\n+            removeIfPrivateOrPkgPrivate(cid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4NDEyNw=="}, "originalCommit": {"oid": "cdfbc9c45551f1b1a0f907315c80f3c413d9423a"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEwNjU4MA==", "bodyText": "That seems like a reasonable choice for now.  If the stubs remain too big (or if we have accidentally left something out), we can revisit the design later.", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r414106580", "createdAt": "2020-04-23T20:36:57Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "diffHunk": "@@ -0,0 +1,197 @@\n+package org.checkerframework.framework.stub;\n+\n+import com.github.javaparser.ParseResult;\n+import com.github.javaparser.ast.*;\n+import com.github.javaparser.ast.body.*;\n+import com.github.javaparser.ast.expr.MemberValuePair;\n+import com.github.javaparser.ast.expr.NormalAnnotationExpr;\n+import com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.visitor.ModifierVisitor;\n+import com.github.javaparser.utils.ParserCollectionStrategy;\n+import com.github.javaparser.utils.ProjectRoot;\n+import com.github.javaparser.utils.SourceRoot;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+/**\n+ * Process Java source files in a directory to produce, in-place, minimal stub files.\n+ *\n+ * <p>To process a file means to remove:\n+ *\n+ * <ol>\n+ *   <li>everything that is private or package-private,\n+ *   <li>all comments, except for an initial copyright header,\n+ *   <li>all method bodies,\n+ *   <li>all field initializers,\n+ *   <li>all initializer blocks,\n+ *   <li>attributes to the {@code Deprecated} annotation (to be Java 8 compatible).\n+ * </ol>\n+ */\n+public class JavaStubifier {\n+    /**\n+     * Processes each provided command-line argument; see class documentation for details.\n+     *\n+     * @param args command-line arguments: directories to process\n+     */\n+    public static void main(String[] args) {\n+        if (args.length < 1) {\n+            System.err.println(\"Usage: provide one or more directory names to process\");\n+            System.exit(1);\n+        }\n+        for (String arg : args) {\n+            process(arg);\n+        }\n+    }\n+\n+    /**\n+     * Process each file in the given directory; see class documentation for details.\n+     *\n+     * @param dir directory to process\n+     */\n+    private static void process(String dir) {\n+        Path root = Paths.get(dir);\n+        MinimizerCallback mc = new MinimizerCallback();\n+        ProjectRoot projectRoot = new ParserCollectionStrategy().collect(root);\n+\n+        projectRoot\n+                .getSourceRoots()\n+                .forEach(\n+                        sourceRoot -> {\n+                            try {\n+                                sourceRoot.parse(\"\", mc);\n+                            } catch (IOException e) {\n+                                System.err.println(\"IOException: \" + e);\n+                            }\n+                        });\n+    }\n+\n+    /** Callback to process each Java file; see class documentation for details. */\n+    private static class MinimizerCallback implements SourceRoot.Callback {\n+        /** The visitor instance. */\n+        private final MinimizerVisitor mv;\n+\n+        /** Create a MinimizerCallback instance. */\n+        public MinimizerCallback() {\n+            this.mv = new MinimizerVisitor();\n+        }\n+\n+        @Override\n+        public Result process(\n+                Path localPath, Path absolutePath, ParseResult<CompilationUnit> result) {\n+            Result res = Result.SAVE;\n+            // System.out.printf(\"Minimizing %s%n\", absolutePath);\n+            Optional<CompilationUnit> opt = result.getResult();\n+            if (opt.isPresent()) {\n+                CompilationUnit cu = opt.get();\n+                // this somehow only removes comments except the\n+                // first one, and copyright headers are kept\n+                cu.getComments().forEach(Node::remove);\n+                mv.visit(cu, null);\n+                if (cu.findAll(ClassOrInterfaceDeclaration.class).isEmpty()\n+                        && cu.findAll(AnnotationDeclaration.class).isEmpty()\n+                        && cu.findAll(EnumDeclaration.class).isEmpty()\n+                        && !absolutePath.endsWith(\"package-info.java\")) {\n+                    // All content is removed, delete this file.\n+                    new File(absolutePath.toUri()).delete();\n+                    res = Result.DONT_SAVE;\n+                }\n+            }\n+            return res;\n+        }\n+    }\n+\n+    /** Visitor to process one compilation unit; see class documentation for details. */\n+    private static class MinimizerVisitor extends ModifierVisitor<Void> {\n+        /** Whether to consider members implicitly public. */\n+        private boolean implicitlyPublic = false;\n+\n+        @Override\n+        public ClassOrInterfaceDeclaration visit(ClassOrInterfaceDeclaration cid, Void arg) {\n+            boolean prevIP = implicitlyPublic;\n+            if (cid.isInterface()) {\n+                // All members of interfaces are implicitly public.\n+                implicitlyPublic = true;\n+            }\n+            super.visit(cid, arg);\n+            removeIfPrivateOrPkgPrivate(cid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4NDEyNw=="}, "originalCommit": {"oid": "cdfbc9c45551f1b1a0f907315c80f3c413d9423a"}, "originalPosition": 120}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1799, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}